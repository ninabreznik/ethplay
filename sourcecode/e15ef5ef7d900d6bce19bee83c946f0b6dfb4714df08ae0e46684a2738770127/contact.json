{
  "address": "0x5c68bb8b8b000c5d750e4d70427d8a99c49bdaaa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FFEIF",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-18\n*/\n\npragma solidity ^0.4.25;\n\ncontract FOMOEvents {\n    // fired whenever a player registers a name\n    event onNewName\n    (\n        uint256 indexed playerID,\n        address indexed playerAddress,\n        bytes32 indexed playerName,\n        bool isNewPlayer,\n        uint256 affiliateID,\n        address affiliateAddress,\n        bytes32 affiliateName,\n        uint256 amountPaid,\n        uint256 timeStamp\n    );\n\n    // fired at end of buy or reload\n    event onEndTx\n    (\n        uint256 compressedData,\n        uint256 compressedIDs,\n        bytes32 playerName,\n        address playerAddress,\n        uint256 ethIn,\n        uint256 keysBought,\n        address winnerAddr,\n        bytes32 winnerName,\n        uint256 amountWon,\n        uint256 newPot,\n        uint256 tokenAmount,\n        uint256 genAmount,\n        uint256 potAmount,\n        uint256 seedAdd\n    );\n\n    // fired whenever theres a withdraw\n    event onWithdraw\n    (\n        uint256 indexed playerID,\n        address playerAddress,\n        bytes32 playerName,\n        uint256 ethOut,\n        uint256 timeStamp\n    );\n\n    // fired whenever a withdraw forces end round to be ran\n    event onWithdrawAndDistribute\n    (\n        address playerAddress,\n        bytes32 playerName,\n        uint256 ethOut,\n        uint256 compressedData,\n        uint256 compressedIDs,\n        address winnerAddr,\n        bytes32 winnerName,\n        uint256 amountWon,\n        uint256 newPot,\n        uint256 tokenAmount,\n        uint256 genAmount,\n        uint256 seedAdd\n    );\n\n    // fired whenever a player tries a buy after round timer\n    // hit zero, and causes end round to be ran.\n    event onBuyAndDistribute\n    (\n        address playerAddress,\n        bytes32 playerName,\n        uint256 ethIn,\n        uint256 compressedData,\n        uint256 compressedIDs,\n        address winnerAddr,\n        bytes32 winnerName,\n        uint256 amountWon,\n        uint256 newPot,\n        uint256 tokenAmount,\n        uint256 genAmount,\n        uint256 seedAdd\n    );\n\n    // fired whenever a player tries a reload after round timer\n    // hit zero, and causes end round to be ran.\n    event onReLoadAndDistribute\n    (\n        address playerAddress,\n        bytes32 playerName,\n        uint256 compressedData,\n        uint256 compressedIDs,\n        address winnerAddr,\n        bytes32 winnerName,\n        uint256 amountWon,\n        uint256 newPot,\n        uint256 tokenAmount,\n        uint256 genAmount,\n        uint256 seedAdd\n    );\n\n    // fired whenever an affiliate is paid\n    event onAffiliatePayout\n    (\n        uint256 indexed affiliateID,\n        address affiliateAddress,\n        bytes32 affiliateName,\n        uint256 indexed roundID,\n        uint256 indexed buyerID,\n        uint256 amount,\n        uint256 timeStamp\n    );\n}\n\n//==============================================================================\n//   _ _  _ _|_ _ _  __|_   _ _ _|_    _   .\n//  (_(_)| | | | (_|(_ |   _\\(/_ | |_||_)  .\n//====================================|=========================================\n\ncontract FFEIF is FOMOEvents {\n    using SafeMath for *;\n    using NameFilter for string;\n   \n    PlayerBookInterface  private PlayerBook;\n\n//==============================================================================\n//     _ _  _  |`. _     _ _ |_ | _  _  .\n//    (_(_)| |~|~|(_||_|| (_||_)|(/__\\  .  (game settings)\n//=================_|===========================================================\n    PoEIF public PoEIFContract;\n    address private admin = msg.sender;\n    string constant public name = \"Fomo Forever EIF\";\n    string constant public symbol = \"FFEIF\";\n    uint256 private rndExtra_ = 1 minutes;     // length of the very first ICO\n    uint256 public rndGap_ = 1 minutes;        // length of ICO phase, set to 1 year for EOS.\n    uint256 public rndInit_ = 60 minutes;      // round timer starts at this\n    uint256 public rndInc_ = 1 seconds;        // every full FFEIF purchased adds this much to the timer\n    uint256 public rndIncDivisor_ = 1;         // divides the above by this amount (useful for less than 1 second per FFEIF when setting shorter rounds)\n\t\n\tuint256 public potSeedRate = 100;\t\t   // pot increase per hour from seedingPot (divided into seedingPot) - default 100 means 1% per hour is added\n\tuint256 public potNextSeedTime = 0;        // time for the next increase (increases by an hour each time it is processed)\t\t\n\tuint256 public seedingPot  = 0;            // this keeps track of the amount left to feed the pot - initially has nothing but can be fed by anyone\n\tuint256 public seedingThreshold = 0 ether; // for the first x ETH (or however it is set) of each round, all pot increases go to the seeding rather than the actual pot\n\tuint256 public seedingDivisor = 2;         // after the threshold, the pot amount is divided by this and added to the seedingPot i.e. half - a higher divisor means less goes into seeding\n\tuint256 public seedRoundEnd = 1;           // if nextRoundPercentage will also add to seeding pot as normal or instead fully goes to the pot\n\t\n\tuint256 public linearPrice = 75000000000000;            // if non-zero will set a fixed price - otherwise normal fomo scaling which is fairly linear still\n\t\n\tuint256 public multPurchase = 0;\t      // number of FFEIF needed to purchase for the multiplier to go up.... 0 means it has to be a qualifying purchase of the multiplier amount of FFEIF i.e. enough to make the user the winner if nobody else buys enough afterwards...\n\tuint256 public multAllowLast = 1;         // Whether the current winner (last qualifying purchaser) can increase the multiplier - this could be used as a tactic to win\n\tuint256 public multLinear = 2;            // multiplier increases linearly, if not the multiplier is multiplied rather than added to each time a sufficient amount is purchased\n\t                                          // NOTE: If the value is 2 then it is linear until multStart is reached.....\n\t\n\tuint256 public maxMult = 1000000;\t\t  // The maximum value of multiplier (remember it is 10 times the real value);\t\t\t\n\tuint256 public multInc_ = 0;              // every purchase (any amount greater than multPurchase) adds this much to the multiplier but divided by 10 - a value of 10 means a real increase of 1 per purchase\n\t\t\t\t\t\t\t\t\t\t\t  // NOTE: For non-linear increases, this real value is added to 1 and multiplied - i.e. 10 would mean it doubles each time\n\t\t\t\t\t\t\t\t\t\t\t  // NOTE2: If multInc_ is 0, the amount of FFEIF purchased is used as the value (which is still ten times more than the real value)\n\tuint256 public multIncFactor_ = 10;\t\t  // Further factor to multiply multInc_ by before processing (this is for finer adjustments when multInc_ is set to 0)\n\tuint256 public multLastChange = now;      // stores timestamp of the last increase/decrease so the next decay can by calculated - note that for non-linear decay, the timestamp only changes to the next minute or multiple of minutes that have passed\n\tuint256 public multDecayPerMinute = 1;    // every minute the multiplier reduces by this amount (isn't X10 this time so is the true decrease per minute  - i.e. 1)\n\t\t\t\t\t\t\t\t\t\t\t  // NOTE: For non-linear decay, a value of 1 means it halves every minute (1 is added to the amount and divided rather than subtracted)\n\tuint256 public multStart = 24 hours;       // the max time that should be left for the multiplier to increase through more purchases - won't increase when timer is above this\n\tuint256 public multCurrent = 10;\t      // the current multiplier times 10 - defaults to a real value of 1 and this is also the minimum allowed\n\t\n    uint256 public rndMax_ = 24 hours;      // max length a round timer can be\n    uint256 public earlyRoundLimit = 1e18;        // limit of 1ETH per player (not per purchase) until earlyRoundLimitUntil\n    uint256 public earlyRoundLimitUntil = 100e18; // when limiter ends\n    \n    uint256 public divPercentage = 65;        // max 75% and can be configured - potPercentage is implied from the rest - 5% each for PoEIF and EIF is fixed\n    uint256 public affFee = 5;                // aff fee default is 5% and max is 15%\n    uint256 public potPercentage = 20;        // 90 - divPercentage - affFee  (seeding divisor applies to this)\n    \n    uint256 public divPotPercentage = 15;     // max 50% and can be configured - winnerPercentage is implied from the rest - 5% each for PoEIF and EIF is fixed\n    uint256 public nextRoundPercentage = 25;  // max 40% and is the amount carried to the next round (since it is going to the pot, the seeding divisor ratio also applies to this if seedRoundEnd is 1)\n    uint256 public winnerPercentage = 50;     // 90 - divPotPercentage - nextRoundPercentatge\n    \n    uint256 public fundEIF = 0;               // the EasyInvestForever accumulated fund yet to be sent (5% of incoming ETH)\n    uint256 public totalEIF = 0;              // total EasyInvestForever fund already sent\n    uint256 public seedDonated = 0;           // total sent to seedingPot payable function (doesn't keep track of msg.sender)\n    address public FundEIF = 0x0111E8A755a4212E6E1f13e75b1EABa8f837a213; // Usual fund address to send EIF funds too - updateable\n    \n\n\n//==============================================================================\n//     _| _ _|_ _    _ _ _|_    _   .\n//    (_|(_| | (_|  _\\(/_ | |_||_)  .  (data used to store game info that changes)\n//=============================|================================================\n    uint256 public rID_;    // round id number / total rounds that have happened\n//****************\n// PLAYER DATA\n//****************\n    mapping (address => uint256) public pIDxAddr_;          // (addr => pID) returns player id by address\n    mapping (bytes32 => uint256) public pIDxName_;          // (name => pID) returns player id by name\n    mapping (uint256 => FFEIFDatasets.Player) public plyr_;   // (pID => data) player data\n    mapping (uint256 => mapping (uint256 => FFEIFDatasets.PlayerRounds)) public plyrRnds_;    // (pID => rID => data) player round data by player id & round id\n    mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; // (pID => name => bool) list of names a player owns.  (used so you can change your display name amongst any name you own)\n//****************\n// ROUND DATA\n//****************\n    mapping (uint256 => FFEIFDatasets.Round) public round_;   // (rID => data) round data\n    mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_;      // (rID => tID => data) eth in per team, by round id and team id\n//****************\n// TEAM FEE DATA\n//****************\n    mapping (uint256 => FFEIFDatasets.TeamFee) public fees_;          // (team => fees) fee distribution by team\n    mapping (uint256 => FFEIFDatasets.PotSplit) public potSplit_;     // (team => fees) pot split distribution by team\n//==============================================================================\n//     _ _  _  __|_ _    __|_ _  _  .\n//    (_(_)| |_\\ | | |_|(_ | (_)|   .  (initial data setup upon contract deploy)\n//==============================================================================\n    constructor()\n        public\n    {\n        PoEIFContract = PoEIF(0xFfB8ccA6D55762dF595F21E78f21CD8DfeadF1C8);\n        PlayerBook = PlayerBookInterface(0xd80e96496cd0B3F95bB4941b1385023fBCa1E6Ba);\n        \n    }\n\n//==============================================================================\n//     _  _ _  _  .\n//    | |(/_|/\\|  .  (these are for multiplier and new functions)\n//==============================================================================\n    \nfunction updateFundAddress(address _newAddress)\n        onlyAdmin()\n        public\n    {\n        FundEIF = _newAddress;\n    }\n\n\n    /**\n     * @dev calculates number of FFEIF received given X eth\n     * @param _curEth current amount of eth in contract\n     * @param _newEth eth being spent\n     * @return amount of ticket purchased\n     */\n    function keysRec(uint256 _curEth, uint256 _newEth)\n        internal\n        view\n        returns (uint256)\n    {\n        return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\n    }\n\n    /**\n     * @dev calculates amount of eth received if you sold X FFEIF\n     * @param _curKeys current amount of FFEIF that exist\n     * @param _sellKeys amount of FFEIF you wish to sell\n     * @return amount of eth received\n     */\n    function ethRec(uint256 _curKeys, uint256 _sellKeys)\n        internal\n        view\n        returns (uint256)\n    {\n        return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\n    }\n\n    /**\n     * @dev calculates how many FFEIF would exist with given an amount of eth\n     * @param _eth eth \"in contract\"\n     * @return number of FFEIF that would exist\n     */\n    function keys(uint256 _eth)\n        internal\n        view\n        returns(uint256)\n    {\n        if (linearPrice==0)\n        {return ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000);}\n        else\n        {return 1e18.mul(_eth) / linearPrice;}\n    }\n\n    /**\n     * @dev calculates how much eth would be in contract given a number of FFEIF\n     * @param _keys number of FFEIF \"in contract\"\n     * @return eth that would exists\n     */\n    function eth(uint256 _keys)\n        internal\n        view\n        returns(uint256)\n    {\n         if (linearPrice==0)\n        {return ((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq());}\n        else\n        {return _keys.mul(linearPrice)/1e18;}\n    }\n\n\nfunction payFund() public {   //Registration fee goes to EIF - function must be called manually so enough gas is sent\n    if(!FundEIF.call.value(fundEIF)()) {\n        revert();\n    }\n    totalEIF = totalEIF.add(fundEIF); fundEIF = 0; \n}\n\n\nfunction calcMult(uint256 keysBought, bool validIncrease) internal returns (bool)\n{\n    uint256 _now = now; //make local variable\n\tuint256 secondsPassed = _now - multLastChange;\n\t\n\t//stores boolean for whether time left has reached the threshold for multiplier to be active - may still be active in special case\n\tbool thresholdReached = (multStart > round_[rID_].end - _now);\n\t\n\t// work out if linear and update the last change time depending on this \n\t// multLastChange updates all the time even when multiplier inactive or at minimum and doesn't change\n\tbool currentlyLinear = false;\n\tif (multLinear == 1 || (multLinear == 2 && !thresholdReached)) { currentlyLinear = true; multLastChange = _now;}\n\telse  multLastChange = multLastChange.add((secondsPassed/60).mul(60)); //updates every 60 seconds only\n\t// includes special case is where it changes from linear to non-linear when multLinear is set to 2 and thresholdReached\n\t\n\t//first apply the decay even when not active\n\tif (multCurrent >= 10) {\n\t    if (currentlyLinear) multCurrent = (multCurrent.mul(10).sub(multDecayPerMinute.mul(secondsPassed).mul(100)/60))/10; else multCurrent = multCurrent / (1+(multDecayPerMinute.mul(secondsPassed)/60));\n\t\tif (multCurrent < 10) multCurrent = 10;\n\t}\n\t\n\t\n\t// returnValue true if enough bought to be new winner - note that it is set before the increase but after the decay \n\tbool returnValue = ((keysBought / 1e17) >= multCurrent);\n\t\n\t// now increase the multiplier if active\n\tif ((thresholdReached || multLinear == 2) && validIncrease) {\n\t    uint256 wholeKeysBought = keysBought / 1e18;\n\t    uint256 actualMultInc = multIncFactor_.mul(wholeKeysBought);\n\t    if (multInc_ != 0) actualMultInc = multInc_;\n\t    \n\t    // have enough FFEIF/keys been bought to increase multiplier\n\t    if ((wholeKeysBought >= multPurchase && multPurchase > 0) || ((wholeKeysBought >= (multCurrent / 10)) && multPurchase == 0) ) {  \n\t    //now apply increase\n\t        if (currentlyLinear) multCurrent = multCurrent.add(actualMultInc); else multCurrent = multCurrent.mul((1+(actualMultInc/10)));\n\t        if (multCurrent > maxMult) multCurrent = maxMult;\n\t    }\n    }\n\t\n\treturn returnValue;\n\t\n}\n\n\nfunction viewMult() public view returns (uint256) // since multiplier only increases when keys are bought, this will only estimate the decay\n{\n    uint256 _now = now; //make local variable\n\tuint256 secondsPassed = _now - multLastChange; \n\t\n\t//stores boolean for whether time left has reached the threshold for multiplier to be active - may still be active in special case\n\tbool thresholdReached = (multStart > round_[rID_].end - _now);\n\t\n\t// work out if linear\n\tbool currentlyLinear = false;\n\tif (multLinear == 1 || (multLinear == 2 && !thresholdReached)) currentlyLinear = true;\n\t// includes special case is where it changes from linear to non-linear when multLinear is set to 2 and thresholdReached\n\t\n\t//first apply the decay even when not active\n\tuint256 _multCurrent = multCurrent; //create local \n\tif (_multCurrent >= 10) {\n\t    if (currentlyLinear) _multCurrent = (_multCurrent.mul(10).sub(multDecayPerMinute.mul(secondsPassed).mul(100)/60))/10; else\n\t        {\n\t            //make approximation for display reasons \n\t            uint256 proportion = secondsPassed % 60;\n\t            _multCurrent = _multCurrent / (1+(multDecayPerMinute.mul(secondsPassed)/60));\n\t            uint256 _multCurrent2 = multCurrent / (1+(multDecayPerMinute.mul(secondsPassed+60)/60));\n\t            _multCurrent = _multCurrent - proportion.mul(_multCurrent - _multCurrent2)/60;\n\t        }\n\t}\n\t\n\t\n    if (_multCurrent < 10) _multCurrent = 10;\t\n    return _multCurrent;\n}\n\nfunction viewPot() public view returns (uint256) // shows pot in realtime including proportion of seeding pot (so it rises every second)\n{\n    uint256 _now = now;\n    uint256 _pot = round_[rID_].pot;\n    uint256 _seedingPot = seedingPot;\n    uint256 _potSeedRate = potSeedRate;\n    uint256 _potNextSeedTime = potNextSeedTime;\n    \n    // emulate seeding to also make sure potNextSeedTime is not before _now\n    while (_potNextSeedTime<now) {_pot = _pot.add(_seedingPot/_potSeedRate); _seedingPot = _seedingPot.sub(_seedingPot/_potSeedRate); _potNextSeedTime += 3600;}\n    \n    //time left for hourly real update\n    uint256 timeLeft = potNextSeedTime - _now;\n    \n   // return calculated estimate - the usually negligible sub-hour extra is not actually won at round end (waste of gas to implement) but is for display reasons\n   return ((3600-timeLeft).mul(_seedingPot/_potSeedRate)/3600 ).add(_pot);\n    \n}\n\n\nuint numElements = 0;\nuint256[] varvalue;\nstring[] varname;\n\nfunction insert(string _var, uint256 _value) internal  {\n    if(numElements == varvalue.length) {\n        varvalue.length ++; varname.length ++;\n    }\n    varvalue[numElements] = _value;\n    varname[numElements] = _var;\n\tnumElements++;\n}\n\n\nfunction setStore(string _variable, uint256 _value) public  {  // we used uint256 for everything here\n\n    // add any new configuration change to array list - admin only and ignore the dummy values sent by endround function\n    if (keccak256(bytes(_variable))!=keccak256(\"endround\") && msg.sender == admin) insert(_variable,_value);\n    \n    // if round has ended, update all variables and reset array index afterwards to effectively clear it\n    if (round_[rID_].ended || activated_ == false)  {\n       //now loop through all elements \n    \tfor (uint i=0; i<numElements; i++) {\n    \t   bytes32 _varname = keccak256(bytes(varname[i])); \n\t   if (_varname==keccak256('rndGap_')) rndGap_=varvalue[i]; else \n\t   if (_varname==keccak256('rndInit_')) rndInit_=varvalue[i]; else\n\t   if (_varname==keccak256('rndInc_')) rndInc_=varvalue[i]; else\n\t   if (_varname==keccak256('rndIncDivisor_')) rndIncDivisor_=varvalue[i]; else\n\t   if (_varname==keccak256('potSeedRate')) potSeedRate=varvalue[i]; else\n\t   if (_varname==keccak256('potNextSeedTime')) potNextSeedTime=varvalue[i]; else\n\t   if (_varname==keccak256('seedingThreshold')) seedingThreshold=varvalue[i]; else\n\t   if (_varname==keccak256('seedingDivisor')) seedingDivisor=varvalue[i]; else\n\t   if (_varname==keccak256('seedRoundEnd')) seedRoundEnd=varvalue[i]; else\n\t   if (_varname==keccak256('linearPrice')) linearPrice=varvalue[i]; else\n\t   if (_varname==keccak256('multPurchase')) multPurchase=varvalue[i]; else\n\t   if (_varname==keccak256('multAllowLast')) multAllowLast=varvalue[i]; else\n\t   if (_varname==keccak256('maxMult')) maxMult=varvalue[i]; else\n\t   if (_varname==keccak256('multInc_')) multInc_=varvalue[i]; else\n\t   if (_varname==keccak256('multIncFactor_')) multIncFactor_=varvalue[i]; else\n\t   if (_varname==keccak256('multLastChange')) multLastChange=varvalue[i]; else\n\t   if (_varname==keccak256('multDecayPerMinute')) multDecayPerMinute=varvalue[i]; else\n\t   if (_varname==keccak256('multStart')) multStart=varvalue[i]; else\n\t   if (_varname==keccak256('multCurrent')) multCurrent=varvalue[i]; else\n\t   if (_varname==keccak256('rndMax_')) rndMax_=varvalue[i]; else\n\t   if (_varname==keccak256('earlyRoundLimit')) earlyRoundLimit=varvalue[i]; else\n\t   if (_varname==keccak256('earlyRoundLimitUntil')) earlyRoundLimitUntil=varvalue[i]; else\n\t   if (_varname==keccak256('divPercentage')) {divPercentage=varvalue[i]; if (divPercentage>75) divPercentage=75;} else\n\t   if (_varname==keccak256('divPotPercentage')) {divPotPercentage=varvalue[i]; if (divPotPercentage>50) divPotPercentage=50;} else\n\t   if (_varname==keccak256('nextRoundPercentage')) {nextRoundPercentage=varvalue[i]; if (nextRoundPercentage>40) nextRoundPercentage=40;} else\n\t   if (_varname==keccak256('affFee')) {affFee=varvalue[i]; if (affFee>15) affFee=15;}\n\t\t}\n\t\t//clear elements by resetting index\n\t\tnumElements = 0;\n\t\t// recalculate pot and winner percentages - assume SafeMath not needed due to max values being enforced\n\t\twinnerPercentage = 90 - divPotPercentage - nextRoundPercentage;\n\t\tpotPercentage = 90 - divPercentage - affFee;  \n\t\t// reset multiplier to minimum\n\t\tmultCurrent = 10;\n\t\t// finally update legacy arrays\n\t\tfees_[0] = FFEIFDatasets.TeamFee(divPercentage,10);   // rest to aff (affFee) and potPercentage\n        potSplit_[0] = FFEIFDatasets.PotSplit(divPotPercentage,10);  // also winnerPercentage to winner, nextRoundPercentage to next round\n    \n\t}\n}\n\n    \n    \n//==============================================================================\n//     _ _  _  _|. |`. _  _ _  .\n//    | | |(_)(_||~|~|(/_| _\\  .  (these are safety checks)\n//==============================================================================\n    /**\n     * @dev used to make sure no one can interact with contract until it has\n     * been activated.\n     */\n    modifier isActivated() {\n        require(activated_ == true);\n        // quick one-line hack to feed pot from seedingPot - adds one hour each time so may loop a few times if contract has been dormant\n        while (potNextSeedTime<now)  {round_[rID_].pot = round_[rID_].pot.add(seedingPot/potSeedRate); seedingPot = seedingPot.sub(seedingPot/potSeedRate); potNextSeedTime += 3600; }\n        _;\n    }\n\n    /**\n     * @dev prevents other contracts from interacting with this one\n     */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n        require (msg.sender == tx.origin);\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0);\n        \n        _;\n    }\n\n    /**\n     * @dev sets boundaries for incoming tx\n     */\n    modifier isWithinLimits(uint256 _eth) {\n        require(_eth >= 1000000000);\n        require(_eth <= 100000000000000000000000);\n        _;\n    }\n\n modifier onlyAdmin()\n    {\n        require(msg.sender == admin);\n        _;\n    }\n\n//==============================================================================\n//     _    |_ |. _   |`    _  __|_. _  _  _  .\n//    |_)|_||_)||(_  ~|~|_|| |(_ | |(_)| |_\\  .  (use these to interact with contract)\n//====|=========================================================================\n    /**\n     * @dev emergency buy uses last stored affiliate ID\n     */\n    function()\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value)\n        public\n        payable\n    {\n        // set up our tx event data and determine if player is new or not\n        FFEIFDatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\n\n        // fetch player id\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // buy core\n        buyCore(_pID, plyr_[_pID].laff, _eventData_);\n    }\n    \n    \n    function seedDeposit()\n        isWithinLimits(msg.value)\n        public\n        payable\n    {\n        // add to seedingPot\n        seedingPot = seedingPot.add(msg.value);\n        seedDonated = seedDonated.add(msg.value);\n    }\n\n    /**\n     * @dev converts all incoming ethereum to FFEIF.\n     * -functionhash- 0x8f38f309 (using ID for affiliate)\n     * -functionhash- 0x98a0871d (using address for affiliate)\n     * -functionhash- 0xa65b37a1 (using name for affiliate)\n     * @param _affCode the ID/address/name of the player who gets the affiliate fee\n     */\n    function buyXid(uint256 _affCode)\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value)\n        public\n        payable\n    {\n        // set up our tx event data and determine if player is new or not\n        FFEIFDatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\n\n        // fetch player id\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        if (_affCode == 0 || _affCode == _pID)\n        {\n            // use last stored affiliate code\n            _affCode = plyr_[_pID].laff;\n\n        // if affiliate code was given & its not the same as previously stored\n        } else if (_affCode != plyr_[_pID].laff) {\n            // update last affiliate\n            plyr_[_pID].laff = _affCode;\n        }\n\n        // buy core\n        buyCore(_pID, _affCode, _eventData_);\n    }\n\n    function buyXaddr(address _affCode)\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value)\n        public\n        payable\n    {\n        // set up our tx event data and determine if player is new or not\n        FFEIFDatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\n\n        // fetch player id\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // manage affiliate residuals\n        uint256 _affID;\n        // if no affiliate code was given or player tried to use their own, lolz\n        if (_affCode == address(0) || _affCode == msg.sender)\n        {\n            // use last stored affiliate code\n            _affID = plyr_[_pID].laff;\n\n        // if affiliate code was given\n        } else {\n            // get affiliate ID from aff Code\n            _affID = pIDxAddr_[_affCode];\n\n            // if affID is not the same as previously stored\n            if (_affID != plyr_[_pID].laff)\n            {\n                // update last affiliate\n                plyr_[_pID].laff = _affID;\n            }\n        }\n        // buy core\n        buyCore(_pID, _affID, _eventData_);\n    }\n\n    function buyXname(bytes32 _affCode)\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value)\n        public\n        payable\n    {\n        // set up our tx event data and determine if player is new or not\n        FFEIFDatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\n\n        // fetch player id\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // manage affiliate residuals\n        uint256 _affID;\n        // if no affiliate code was given or player tried to use their own, lolz\n        if (_affCode == '' || _affCode == plyr_[_pID].name)\n        {\n            // use last stored affiliate code\n            _affID = plyr_[_pID].laff;\n\n        // if affiliate code was given\n        } else {\n            // get affiliate ID from aff Code\n            _affID = pIDxName_[_affCode];\n\n            // if affID is not the same as previously stored\n            if (_affID != plyr_[_pID].laff)\n            {\n                // update last affiliate\n                plyr_[_pID].laff = _affID;\n            }\n        }\n\n        // buy core\n        buyCore(_pID, _affID, _eventData_);\n    }\n\n    /**\n     * @dev essentially the same as buy, but instead of you sending ether\n     * from your wallet, it uses your unwithdrawn earnings.\n     * -functionhash- 0x349cdcac (using ID for affiliate)\n     * -functionhash- 0x82bfc739 (using address for affiliate)\n     * -functionhash- 0x079ce327 (using name for affiliate)\n     * @param _affCode the ID/address/name of the player who gets the affiliate fee\n     * @param _eth amount of earnings to use (remainder returned to gen vault)\n     */\n    function reLoadXid(uint256 _affCode, uint256 _eth)\n        isActivated()\n        isHuman()\n        isWithinLimits(_eth)\n        public\n    {\n        // set up our tx event data\n        FFEIFDatasets.EventReturns memory _eventData_;\n\n        // fetch player ID\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        if (_affCode == 0 || _affCode == _pID)\n        {\n            // use last stored affiliate code\n            _affCode = plyr_[_pID].laff;\n\n        // if affiliate code was given & its not the same as previously stored\n        } else if (_affCode != plyr_[_pID].laff) {\n            // update last affiliate\n            plyr_[_pID].laff = _affCode;\n        }\n\n        // reload core\n        reLoadCore(_pID, _affCode,  _eth, _eventData_);\n    }\n\n    function reLoadXaddr(address _affCode, uint256 _eth)\n        isActivated()\n        isHuman()\n        isWithinLimits(_eth)\n        public\n    {\n        // set up our tx event data\n        FFEIFDatasets.EventReturns memory _eventData_;\n\n        // fetch player ID\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // manage affiliate residuals\n        uint256 _affID;\n        // if no affiliate code was given or player tried to use their own, lolz\n        if (_affCode == address(0) || _affCode == msg.sender)\n        {\n            // use last stored affiliate code\n            _affID = plyr_[_pID].laff;\n\n        // if affiliate code was given\n        } else {\n            // get affiliate ID from aff Code\n            _affID = pIDxAddr_[_affCode];\n\n            // if affID is not the same as previously stored\n            if (_affID != plyr_[_pID].laff)\n            {\n                // update last affiliate\n                plyr_[_pID].laff = _affID;\n            }\n        }\n\n        // reload core\n        reLoadCore(_pID, _affID, _eth, _eventData_);\n    }\n\n    function reLoadXname(bytes32 _affCode, uint256 _eth)\n        isActivated()\n        isHuman()\n        isWithinLimits(_eth)\n        public\n    {\n        // set up our tx event data\n        FFEIFDatasets.EventReturns memory _eventData_;\n\n        // fetch player ID\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // manage affiliate residuals\n        uint256 _affID;\n        // if no affiliate code was given or player tried to use their own, lolz\n        if (_affCode == '' || _affCode == plyr_[_pID].name)\n        {\n            // use last stored affiliate code\n            _affID = plyr_[_pID].laff;\n\n        // if affiliate code was given\n        } else {\n            // get affiliate ID from aff Code\n            _affID = pIDxName_[_affCode];\n\n            // if affID is not the same as previously stored\n            if (_affID != plyr_[_pID].laff)\n            {\n                // update last affiliate\n                plyr_[_pID].laff = _affID;\n            }\n        }\n\n        // reload core\n        reLoadCore(_pID, _affID, _eth, _eventData_);\n    }\n\n    /**\n     * @dev withdraws all of your earnings.\n     * -functionhash- 0x3ccfd60b\n     */\n    function withdraw()\n        isActivated()\n        isHuman()\n        public\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // grab time\n        uint256 _now = now;\n\n        // fetch player ID\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // setup temp var for player eth\n        uint256 _eth;\n\n        // check to see if round has ended and no one has run endround yet\n        if (_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0)\n        {\n            // set up our tx event data\n            FFEIFDatasets.EventReturns memory _eventData_;\n\n            // end the round (distributes pot)\n            round_[_rID].ended = true;\n            _eventData_ = endRound(_eventData_);\n\n            // get their earnings\n            _eth = withdrawEarnings(_pID);\n\n            // gib moni\n            if (_eth > 0)\n                plyr_[_pID].addr.transfer(_eth);\n\n            // build event data\n            _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\n            _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\n\n            // fire withdraw and distribute event\n            emit FOMOEvents.onWithdrawAndDistribute\n            (\n                msg.sender,\n                plyr_[_pID].name,\n                _eth,\n                _eventData_.compressedData,\n                _eventData_.compressedIDs,\n                _eventData_.winnerAddr,\n                _eventData_.winnerName,\n                _eventData_.amountWon,\n                _eventData_.newPot,\n                _eventData_.tokenAmount,\n                _eventData_.genAmount,\n                _eventData_.seedAdd\n            );\n\n        // in any other situation\n        } else {\n            // get their earnings\n            _eth = withdrawEarnings(_pID);\n\n            // gib moni\n            if (_eth > 0)\n                plyr_[_pID].addr.transfer(_eth);\n\n            // fire withdraw event\n            emit FOMOEvents.onWithdraw(_pID, msg.sender, plyr_[_pID].name, _eth, _now);\n        }\n    }\n\n    /**\n     * @dev use these to register names.  they are just wrappers that will send the\n     * registration requests to the PlayerBook contract.  So registering here is the\n     * same as registering there.  UI will always display the last name you registered.\n     * but you will still own all previously registered names to use as affiliate\n     * links.\n     * - must pay a registration fee.\n     * - name must be unique\n     * - names will be converted to lowercase\n     * - name cannot start or end with a space\n     * - cannot have more than 1 space in a row\n     * - cannot be only numbers\n     * - cannot start with 0x\n     * - name must be at least 1 char\n     * - max length of 32 characters long\n     * - allowed characters: a-z, 0-9, and space\n     * -functionhash- 0x921dec21 (using ID for affiliate)\n     * -functionhash- 0x3ddd4698 (using address for affiliate)\n     * -functionhash- 0x685ffd83 (using name for affiliate)\n     * @param _nameString players desired name\n     * @param _affCode affiliate ID, address, or name of who referred you\n     * @param _all set to true if you want this to push your info to all games\n     * (this might cost a lot of gas)\n     */\n    function registerNameXID(string _nameString, uint256 _affCode, bool _all)\n        isHuman()\n        public\n        payable\n    {\n        bytes32 _name = _nameString.nameFilter();\n        address _addr = msg.sender;\n        uint256 _paid = msg.value;\n        (bool _isNewPlayer, uint256 _affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr, _name, _affCode, _all);\n\n        uint256 _pID = pIDxAddr_[_addr];\n\n        // fire event\n        emit FOMOEvents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\n    }\n\n    function registerNameXaddr(string _nameString, address _affCode, bool _all)\n        isHuman()\n        public\n        payable\n    {\n        bytes32 _name = _nameString.nameFilter();\n        address _addr = msg.sender;\n        uint256 _paid = msg.value;\n        (bool _isNewPlayer, uint256 _affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\n\n        uint256 _pID = pIDxAddr_[_addr];\n\n        // fire event\n        emit FOMOEvents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\n    }\n\n    function registerNameXname(string _nameString, bytes32 _affCode, bool _all)\n        isHuman()\n        public\n        payable\n    {\n        bytes32 _name = _nameString.nameFilter();\n        address _addr = msg.sender;\n        uint256 _paid = msg.value;\n        (bool _isNewPlayer, uint256 _affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\n\n        uint256 _pID = pIDxAddr_[_addr];\n\n        // fire event\n        emit FOMOEvents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\n    }\n//==============================================================================\n//     _  _ _|__|_ _  _ _  .\n//    (_|(/_ |  | (/_| _\\  . (for UI & viewing things on etherscan)\n//=====_|=======================================================================\n    /**\n     * @dev return the price buyer will pay for next 1 individual FFEIF.\n     * -functionhash- 0x018a25e8\n     * @return price for next FFEIF bought (in wei format)\n     */\n    function getBuyPrice()\n        public\n        view\n        returns(uint256)\n    {\n        //starting key/FFEIF price\n        uint256 _startingPrice = 75000000000000;\n        if (linearPrice != 0) _startingPrice = linearPrice;\n        \n        // setup local rID\n        uint256 _rID = rID_;\n\n        // grab time\n        uint256 _now = now;\n\n        // are we in a round?\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\n            return ( ethRec((round_[_rID].keys.add(1000000000000000000)),1000000000000000000) );\n        else // rounds over.  need price for new round\n            return ( _startingPrice ); // init\n    }\n\n    /**\n     * @dev returns time left.  dont spam this, you'll ddos yourself from your node\n     * provider\n     * -functionhash- 0xc7e284b8\n     * @return time left in seconds\n     */\n    function getTimeLeft()\n        public\n        view\n        returns(uint256)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // grab time\n        uint256 _now = now;\n\n        if (_now < round_[_rID].end)\n            if (_now > round_[_rID].strt + rndGap_)\n                return( (round_[_rID].end).sub(_now) );\n            else\n                return( (round_[_rID].strt + rndGap_).sub(_now) );\n        else\n            return(0);\n    }\n\n    /**\n     * @dev returns player earnings per vaults\n     * -functionhash- 0x63066434\n     * @return winnings vault\n     * @return general vault\n     * @return affiliate vault\n     */\n    function getPlayerVaults(uint256 _pID)\n        public\n        view\n        returns(uint256 ,uint256, uint256)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // if round has ended.  but endround has not been run (so contract has not distributed winnings)\n        if (now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0)\n        {\n            // if player is winner\n            if (round_[_rID].plyr == _pID)\n            {\n                return\n                (\n                    (plyr_[_pID].win).add( ((round_[_rID].pot).mul(winnerPercentage)) / 100 ),\n                    (plyr_[_pID].gen).add(  getPlayerVaultsHelper(_pID, _rID).sub(plyrRnds_[_pID][_rID].mask)   ),\n                    plyr_[_pID].aff\n                );\n            // if player is not the winner\n            } else {\n                return\n                (\n                    plyr_[_pID].win,\n                    (plyr_[_pID].gen).add(  getPlayerVaultsHelper(_pID, _rID).sub(plyrRnds_[_pID][_rID].mask)  ),\n                    plyr_[_pID].aff\n                );\n            }\n\n        // if round is still going on, or round has ended and endround has been ran\n        } else {\n            return\n            (\n                plyr_[_pID].win,\n                (plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd)),\n                plyr_[_pID].aff\n            );\n        }\n    }\n\n    /**\n     * solidity hates stack limits.  this lets us avoid that hate\n     */\n    function getPlayerVaultsHelper(uint256 _pID, uint256 _rID)\n        private\n        view\n        returns(uint256)\n    {\n        return(  ((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000)  );\n    }\n\n    /**\n     * @dev returns all current round info needed for front end\n     * -functionhash- 0x747dff42\n     * @return eth invested during ICO phase\n     * @return round id\n     * @return total FFEIF for round\n     * @return time round ends\n     * @return time round started\n     * @return current pot\n     * @return current team ID & player ID in lead\n     * @return current player in leads address\n     * @return current player in leads name\n     * @return team eth in for round\n     */\n    function getCurrentRoundInfo()\n        public\n        view\n        returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, address, bytes32, uint256)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        return\n        (\n            round_[_rID].ico,               //0\n            _rID,                           //1\n            round_[_rID].keys,              //2\n            round_[_rID].end,               //3\n            round_[_rID].strt,              //4\n            round_[_rID].pot,               //5\n            (round_[_rID].team + (round_[_rID].plyr * 10)),     //6\n            plyr_[round_[_rID].plyr].addr,  //7\n            plyr_[round_[_rID].plyr].name,  //8\n            rndTmEth_[_rID][0]             //9\n            \n        );\n    }\n\n    /**\n     * @dev returns player info based on address.  if no address is given, it will\n     * use msg.sender\n     * -functionhash- 0xee0b5d8b\n     * @param _addr address of the player you want to lookup\n     * @return player ID\n     * @return player name\n     * @return FFEIF owned (current round)\n     * @return winnings vault\n     * @return general vault\n     * @return affiliate vault\n     * @return player round eth\n     */\n    function getPlayerInfoByAddress(address _addr)\n        public\n        view\n        returns(uint256, bytes32, uint256, uint256, uint256, uint256, uint256)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        if (_addr == address(0))\n        {\n            _addr = msg.sender;\n        }\n        uint256 _pID = pIDxAddr_[_addr];\n\n        return\n        (\n            _pID,                               //0\n            plyr_[_pID].name,                   //1\n            plyrRnds_[_pID][_rID].keys,         //2\n            plyr_[_pID].win,                    //3\n            (plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd)),       //4\n            plyr_[_pID].aff,                    //5\n            plyrRnds_[_pID][_rID].eth           //6\n        );\n    }\n\n//==============================================================================\n//     _ _  _ _   | _  _ . _  .\n//    (_(_)| (/_  |(_)(_||(_  . (this + tools + calcs + modules = our softwares engine)\n//=====================_|=======================================================\n    /**\n     * @dev logic runs whenever a buy order is executed.  determines how to handle\n     * incoming eth depending on if we are in an active round or not\n     */\n    function buyCore(uint256 _pID, uint256 _affID, FFEIFDatasets.EventReturns memory _eventData_)\n        private\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // grab time\n        uint256 _now = now;\n\n        // if round is active\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\n        {\n            // call core\n            core(_rID, _pID, msg.value, _affID, 0, _eventData_);\n\n        // if round is not active\n        } else {\n            // check to see if endround needs to be run\n            if (_now > round_[_rID].end && round_[_rID].ended == false)\n            {\n                // end the round (distributes pot) & start new round\n                round_[_rID].ended = true;\n                _eventData_ = endRound(_eventData_);\n\n                // build event data\n                _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\n                _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\n\n                // fire buy and distribute event\n                emit FOMOEvents.onBuyAndDistribute\n                (\n                    msg.sender,\n                    plyr_[_pID].name,\n                    msg.value,\n                    _eventData_.compressedData,\n                    _eventData_.compressedIDs,\n                    _eventData_.winnerAddr,\n                    _eventData_.winnerName,\n                    _eventData_.amountWon,\n                    _eventData_.newPot,\n                    _eventData_.tokenAmount,\n                    _eventData_.genAmount,\n                    _eventData_.seedAdd\n                );\n            }\n\n            // put eth in players vault\n            plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value);\n        }\n    }\n\n    /**\n     * @dev logic runs whenever a reload order is executed.  determines how to handle\n     * incoming eth depending on if we are in an active round or not\n     */\n    function reLoadCore(uint256 _pID, uint256 _affID, uint256 _eth, FFEIFDatasets.EventReturns memory _eventData_)\n        private\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // grab time\n        uint256 _now = now;\n\n        // if round is active\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\n        {\n            // get earnings from all vaults and return unused to gen vault\n            // because we use a custom safemath library.  this will throw if player\n            // tried to spend more eth than they have.\n            plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth);\n\n            // call core\n            core(_rID, _pID, _eth, _affID, 0, _eventData_);\n\n        // if round is not active and end round needs to be ran\n        } else if (_now > round_[_rID].end && round_[_rID].ended == false) {\n            // end the round (distributes pot) & start new round\n            round_[_rID].ended = true;\n            _eventData_ = endRound(_eventData_);\n\n            // build event data\n            _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\n            _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\n\n            // fire buy and distribute event\n            emit FOMOEvents.onReLoadAndDistribute\n            (\n                msg.sender,\n                plyr_[_pID].name,\n                _eventData_.compressedData,\n                _eventData_.compressedIDs,\n                _eventData_.winnerAddr,\n                _eventData_.winnerName,\n                _eventData_.amountWon,\n                _eventData_.newPot,\n                _eventData_.tokenAmount,\n                _eventData_.genAmount,\n                _eventData_.seedAdd\n            );\n        }\n    }\n\n    /**\n     * @dev this is the core logic for any buy/reload that happens while a round\n     * is live.\n     */\n    function core(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _team, FFEIFDatasets.EventReturns memory _eventData_)\n        private\n    {\n        // if player is new to round\n        if (plyrRnds_[_pID][_rID].keys == 0)\n            _eventData_ = managePlayer(_pID, _eventData_);\n\n        // early round eth limiter\n        if (round_[_rID].eth < earlyRoundLimitUntil && plyrRnds_[_pID][_rID].eth.add(_eth) > earlyRoundLimit)\n        {\n            uint256 _availableLimit = (earlyRoundLimit).sub(plyrRnds_[_pID][_rID].eth);\n            uint256 _refund = _eth.sub(_availableLimit);\n            plyr_[_pID].gen = plyr_[_pID].gen.add(_refund);\n            _eth = _availableLimit;\n        }\n\n        // above minimum amount for normal buys\n        if (_eth > 1000000000)\n        {\n\n            // mint the new FFEIF\n            uint256 _keys = keysRec(round_[_rID].eth,_eth);\n            \n            // calculate the new multiplier and returns true if new winner (they bought enough)\n            bool newWinner = calcMult(_keys, multAllowLast==1 || round_[_rID].plyr != _pID);\n\n            // if they bought at least 1 whole FFEIF\n            if (_keys >= 1000000000000000000)\n            {\n                updateTimer(_keys, _rID);\n\n                if (newWinner) {\n                    // set new leaders\n                    if (round_[_rID].plyr != _pID)\n                    round_[_rID].plyr = _pID;\n                    if (round_[_rID].team != _team)\n                    round_[_rID].team = _team;\n\n                    // set the new leader bool to true\n                    _eventData_.compressedData = _eventData_.compressedData + 100;\n                }\n            }\n\n            // update player\n            plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys);\n            plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth);\n\n            // update round\n            round_[_rID].keys = _keys.add(round_[_rID].keys);\n            round_[_rID].eth = _eth.add(round_[_rID].eth);\n            rndTmEth_[_rID][0] = _eth.add(rndTmEth_[_rID][0]);\n\n            // distribute eth\n            _eventData_ = distributeExternal(_rID, _pID, _eth, _affID, 0, _eventData_);\n            _eventData_ = distributeInternal(_rID, _pID, _eth, 0, _keys, _eventData_);\n\n            // call end tx function to fire end tx event.\n            endTx(_pID, 0, _eth, _keys, _eventData_);\n        }\n    }\n//==============================================================================\n//     _ _ | _   | _ _|_ _  _ _  .\n//    (_(_||(_|_||(_| | (_)| _\\  .\n//==============================================================================\n    /**\n     * @dev calculates unmasked earnings (just calculates, does not update mask)\n     * @return earnings in wei format\n     */\n    function calcUnMaskedEarnings(uint256 _pID, uint256 _rIDlast)\n        private\n        view\n        returns(uint256)\n    {\n        return(  (((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask)  );\n    }\n\n    /**\n     * @dev returns the amount of FFEIF you would get given an amount of eth.\n     * -functionhash- 0xce89c80c\n     * @param _rID round ID you want price for\n     * @param _eth amount of eth sent in\n     * @return keys received\n     */\n    function calcKeysReceived(uint256 _rID, uint256 _eth)\n        public\n        view\n        returns(uint256)\n    {\n        // grab time\n        uint256 _now = now;\n\n        // are we in a round?\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\n            return keysRec(round_[_rID].eth,_eth);\n        else // rounds over.  need FFEIF for new round\n            return keys(_eth);\n    }\n\n    /**\n     * @dev returns current eth price for X FFEIF.\n     * -functionhash- 0xcf808000\n     * @param _keys number of FFEIF desired (in 18 decimal format)\n     * @return amount of eth needed to send\n     */\n    function iWantXKeys(uint256 _keys)\n        public\n        view\n        returns(uint256)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // grab time\n        uint256 _now = now;\n\n        // are we in a round?\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\n            return ethRec(round_[_rID].keys.add(_keys),_keys);\n        else // rounds over.  need price for new round\n            return eth(_keys);\n    }\n//==============================================================================\n//    _|_ _  _ | _  .\n//     | (_)(_)|_\\  .\n//==============================================================================\n    /**\n     * @dev receives name/player info from names contract\n     */\n    function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name, uint256 _laff)\n        external\n    {\n        require (msg.sender == address(PlayerBook));\n        if (pIDxAddr_[_addr] != _pID)\n            pIDxAddr_[_addr] = _pID;\n        if (pIDxName_[_name] != _pID)\n            pIDxName_[_name] = _pID;\n        if (plyr_[_pID].addr != _addr)\n            plyr_[_pID].addr = _addr;\n        if (plyr_[_pID].name != _name)\n            plyr_[_pID].name = _name;\n        if (plyr_[_pID].laff != _laff)\n            plyr_[_pID].laff = _laff;\n        if (plyrNames_[_pID][_name] == false)\n            plyrNames_[_pID][_name] = true;\n    }\n\n    /**\n     * @dev receives entire player name list\n     */\n    function receivePlayerNameList(uint256 _pID, bytes32 _name)\n        external\n    {\n        require (msg.sender == address(PlayerBook));\n        if(plyrNames_[_pID][_name] == false)\n            plyrNames_[_pID][_name] = true;\n    }\n\n    /**\n     * @dev gets existing or registers new pID.  use this when a player may be new\n     * @return pID\n     */\n    function determinePID(FFEIFDatasets.EventReturns memory _eventData_)\n        private\n        returns (FFEIFDatasets.EventReturns)\n    {\n        uint256 _pID = pIDxAddr_[msg.sender];\n        // if player is new to this version of fomo3d\n        if (_pID == 0)\n        {\n            // grab their player ID, name and last aff ID, from player names contract\n            _pID = PlayerBook.getPlayerID(msg.sender);\n            bytes32 _name = PlayerBook.getPlayerName(_pID);\n            uint256 _laff = PlayerBook.getPlayerLAff(_pID);\n\n            // set up player account\n            pIDxAddr_[msg.sender] = _pID;\n            plyr_[_pID].addr = msg.sender;\n\n            if (_name != \"\")\n            {\n                pIDxName_[_name] = _pID;\n                plyr_[_pID].name = _name;\n                plyrNames_[_pID][_name] = true;\n            }\n\n            if (_laff != 0 && _laff != _pID)\n                plyr_[_pID].laff = _laff;\n\n            // set the new player bool to true\n            _eventData_.compressedData = _eventData_.compressedData + 1;\n        }\n        return (_eventData_);\n    }\n\n    \n\n    /**\n     * @dev decides if round end needs to be run & new round started.  and if\n     * player unmasked earnings from previously played rounds need to be moved.\n     */\n    function managePlayer(uint256 _pID, FFEIFDatasets.EventReturns memory _eventData_)\n        private\n        returns (FFEIFDatasets.EventReturns)\n    {\n        // if player has played a previous round, move their unmasked earnings\n        // from that round to gen vault.\n        if (plyr_[_pID].lrnd != 0)\n            updateGenVault(_pID, plyr_[_pID].lrnd);\n\n        // update player's last round played\n        plyr_[_pID].lrnd = rID_;\n\n        // set the joined round bool to true\n        _eventData_.compressedData = _eventData_.compressedData + 10;\n\n        return(_eventData_);\n    }\n\n\n    /**\n     * @dev ends the round. manages paying out winner/splitting up pot\n     */\n    function endRound(FFEIFDatasets.EventReturns memory _eventData_)\n        private\n        returns (FFEIFDatasets.EventReturns)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // grab our winning player and team id's\n        uint256 _winPID = round_[_rID].plyr;\n        uint256 _winTID = round_[_rID].team;\n\n        // grab our pot amount\n        uint256 _pot = round_[_rID].pot;\n\n        // calculate our winner share, community rewards, gen share,\n        // tokenholder share, and amount reserved for next pot\n        uint256 _win = _pot.mul(winnerPercentage) / 100;  // to winner\n        uint256 _gen = _pot.mul(potSplit_[_winTID].gen) / 100;  // divs to FFEIF buyers\n        uint256 _PoEIF = _pot.mul(potSplit_[_winTID].poeif) / 100;  // to PoEIF/EIF smart contracts\n        uint256 _res = _pot.sub(_win).sub(_gen).sub(_PoEIF);  // amount for next round\n\n\n        // calculate ppt for round mask\n        uint256 _ppt = _gen.mul(1000000000000000000) / round_[_rID].keys;\n        uint256 _dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000);\n        if (_dust > 0)\n        {\n            _gen = _gen.sub(_dust);\n            _res = _res.add(_dust);\n        }\n\n        // pay our winner\n        plyr_[_winPID].win = _win.add(plyr_[_winPID].win);\n\n        // community rewards\n\n        \n        \n        // send ETH to PoEIF holders and to EIF contract (50% each) \n        address(PoEIFContract).call.value(_PoEIF.sub((_PoEIF / 2)))(bytes4(keccak256(\"donateDivs()\"))); \n        fundEIF = fundEIF.add(_PoEIF / 2);\n\n        // distribute gen portion to FFEIF holders\n        round_[_rID].mask = _ppt.add(round_[_rID].mask);\n        \n        uint256 _actualPot = _res;\n        // send appropriate portion of _res to seeding pot\n        if (seedRoundEnd==1) {\n            // stick half into seedingPot and the remainder is the amount actually added to pot - seedingDivisor default is 2 which means half goes into seedingPot\n            _actualPot = _res.sub(_res/seedingDivisor);\n            // if seedingThreshold exceeds eth in the round then put all into seeding pot, else just half\n            if (seedingThreshold > rndTmEth_[_rID][0]) {seedingPot = seedingPot.add(_res); _actualPot = 0;} else seedingPot = seedingPot.add(_res/seedingDivisor);\n        }\n\n        // prepare event data\n        _eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000);\n        _eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000);\n        _eventData_.winnerAddr = plyr_[_winPID].addr;\n        _eventData_.winnerName = plyr_[_winPID].name;\n        _eventData_.amountWon = _win;\n        _eventData_.genAmount = _gen;\n        _eventData_.tokenAmount = _PoEIF;\n        _eventData_.newPot = _actualPot;\n        _eventData_.seedAdd = _res - _actualPot;   \n             \n\n        // start next round\n        setStore(\"endround\",0); // update any config changes\n        rID_++;\n        _rID++;\n        round_[_rID].strt = now;\n        round_[_rID].end = now.add(rndInit_).add(rndGap_);\n        round_[_rID].pot += _actualPot;\n\n        return(_eventData_);\n    }\n\n    /**\n     * @dev moves any unmasked earnings to gen vault.  updates earnings mask\n     */\n    function updateGenVault(uint256 _pID, uint256 _rIDlast)\n        private\n    {\n        uint256 _earnings = calcUnMaskedEarnings(_pID, _rIDlast);\n        if (_earnings > 0)\n        {\n            // put in gen vault\n            plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen);\n            // zero out their earnings by updating mask\n            plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask);\n        }\n    }\n\n    /**\n     * @dev updates round timer based on number of whole FFEIF bought.\n     */\n    function updateTimer(uint256 _keys, uint256 _rID)\n        private\n    {\n        // grab time\n        uint256 _now = now;\n\n        // calculate time based on number of FFEIF bought\n        uint256 _newTime;\n        if (_now > round_[_rID].end && round_[_rID].plyr == 0)\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)/rndIncDivisor_).add(_now);\n        else\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)/rndIncDivisor_).add(round_[_rID].end);\n\n        // compare to max and set new end time\n        if (_newTime < (rndMax_).add(_now))\n            round_[_rID].end = _newTime;\n        else\n            round_[_rID].end = rndMax_.add(_now); \n    }\n\n   \n    /**\n     * @dev distributes eth based on fees to aff and PoEIF\n     */\n    function distributeExternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _team, FFEIFDatasets.EventReturns memory _eventData_)\n        private\n        returns(FFEIFDatasets.EventReturns)\n    {\n        uint256 _PoEIF;\n     \n        // distribute share to affiliate (default 5%)\n        uint256 _aff = _eth.mul(affFee) / 100;\n\n        // decide what to do with affiliate share of fees\n        // affiliate must not be self, and must have a name registered\n        if (_affID != _pID && plyr_[_affID].name != '') {\n            plyr_[_affID].aff = _aff.add(plyr_[_affID].aff);\n            emit FOMOEvents.onAffiliatePayout(_affID, plyr_[_affID].addr, plyr_[_affID].name, _rID, _pID, _aff, now);\n        } else {\n            _PoEIF = _aff;\n        }\n\n        // pay out poeif\n        _PoEIF = _PoEIF.add((_eth.mul(fees_[_team].poeif)) / 100);\n        if (_PoEIF > 0)\n        {\n            // deposit to divies contract\n            uint256 _EIFamount = _PoEIF / 2;\n            \n            address(PoEIFContract).call.value(_PoEIF.sub(_EIFamount))(bytes4(keccak256(\"donateDivs()\")));\n\n            fundEIF = fundEIF.add(_EIFamount);\n\n            // set up event data\n            _eventData_.tokenAmount = _PoEIF.add(_eventData_.tokenAmount);\n        }\n\n        return(_eventData_);\n    }\n\n    /**\n     * @dev distributes eth based on fees to gen and pot\n     */\n    function distributeInternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _team, uint256 _keys, FFEIFDatasets.EventReturns memory _eventData_)\n        private\n        returns(FFEIFDatasets.EventReturns)\n    {\n        // calculate gen share\n        uint256 _gen = _eth.mul(fees_[_team].gen) / 100;\n\n        // update eth balance (eth = eth - (aff share + poeif share))\n        _eth = _eth.sub(((_eth.mul(affFee)) / 100).add((_eth.mul(fees_[_team].poeif)) / 100));\n\n        // calculate pot\n        uint256 _pot = _eth.sub(_gen);\n        // stick half into seedingPot and the remainder is the amount actually added to pot - seedingDivisor default is 2 which means half goes into seedingPot\n        uint256 _actualPot = _pot.sub(_pot/seedingDivisor);\n        \n        // if seedingThreshold exceeds eth in the round then put all into seeding pot, else just half\n        if (seedingThreshold > rndTmEth_[_rID][0]) {seedingPot = seedingPot.add(_pot); _actualPot = 0;} else seedingPot = seedingPot.add(_pot/seedingDivisor);\n\n        // distribute gen share (thats what updateMasks() does) and adjust\n        // balances for dust.\n        uint256 _dust = updateMasks(_rID, _pID, _gen, _keys);\n        if (_dust > 0)\n            _gen = _gen.sub(_dust);\n\n        // add eth to pot\n        round_[_rID].pot = _actualPot.add(_dust).add(round_[_rID].pot);\n\n        // set up event data - pot amount excludes seeding\n        _eventData_.genAmount = _gen.add(_eventData_.genAmount);\n        _eventData_.potAmount = _actualPot;\n        _eventData_.seedAdd = _pot - _actualPot;\n\n        return(_eventData_);\n    }\n\n    /**\n     * @dev updates masks for round and player when FFEIF are bought\n     * @return dust left over\n     */\n    function updateMasks(uint256 _rID, uint256 _pID, uint256 _gen, uint256 _keys)\n        private\n        returns(uint256)\n    {\n        /* MASKING NOTES\n            earnings masks are a tricky thing for people to wrap their minds around.\n            the basic thing to understand here.  is were going to have a global\n            tracker based on profit per share for each round, that increases in\n            relevant proportion to the increase in share supply.\n\n            the player will have an additional mask that basically says \"based\n            on the rounds mask, my shares, and how much i've already withdrawn,\n            how much is still owed to me?\"\n        */\n\n        // calc profit per FFEIF & round mask based on this buy:  (dust goes to pot)\n        uint256 _ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys);\n        round_[_rID].mask = _ppt.add(round_[_rID].mask);\n\n        // calculate player earning from their own buy (only based on the FFEIF\n        // they just bought).  & update player earnings mask\n        uint256 _pearn = (_ppt.mul(_keys)) / (1000000000000000000);\n        plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask);\n\n        // calculate & return dust\n        return(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)));\n    }\n\n    /**\n     * @dev adds up unmasked earnings, & vault earnings, sets them all to 0\n     * @return earnings in wei format\n     */\n    function withdrawEarnings(uint256 _pID)\n        private\n        returns(uint256)\n    {\n        // update gen vault\n        updateGenVault(_pID, plyr_[_pID].lrnd);\n\n        // from vaults\n        uint256 _earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff);\n        if (_earnings > 0)\n        {\n            plyr_[_pID].win = 0;\n            plyr_[_pID].gen = 0;\n            plyr_[_pID].aff = 0;\n        }\n\n        return(_earnings);\n    }\n\n    /**\n     * @dev prepares compression data and fires event for buy or reload tx's\n     */\n    function endTx(uint256 _pID, uint256 _team, uint256 _eth, uint256 _keys, FFEIFDatasets.EventReturns memory _eventData_)\n        private\n    {\n        _eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000);\n        _eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000);\n\n       emit FOMOEvents.onEndTx\n        (\n            _eventData_.compressedData,\n            _eventData_.compressedIDs,\n            plyr_[_pID].name,\n            msg.sender,\n            _eth,\n            _keys,\n            _eventData_.winnerAddr,\n            _eventData_.winnerName,\n            _eventData_.amountWon,\n            _eventData_.newPot,\n            _eventData_.tokenAmount,\n            _eventData_.genAmount,\n            _eventData_.potAmount,\n            _eventData_.seedAdd\n        );\n    }\n//==============================================================================\n//    (~ _  _    _._|_    .\n//    _)(/_(_|_|| | | \\/  .\n//====================/=========================================================\n    /** upon contract deploy, it will be deactivated.  this is a one time\n     * use function that will activate the contract.  we do this so devs\n     * have time to set things up on the web end                            **/\n    bool public activated_ = false;\n    function activate()\n        public\n    {\n        // only team just can activate\n        require(msg.sender == admin, \"Only admin can activate\");\n\n\n        // can only be ran once\n        require(activated_ == false, \"FFEIF already activated\");\n\n        // update any configuration changes\n        setStore(\"endround\",0);\n        \n        // activate the contract\n        activated_ = true;\n\n        // lets start first round\n        rID_ = 1;\n            round_[1].strt = now + rndExtra_ - rndGap_;\n            round_[1].end = now + rndInit_ + rndExtra_;\n            \n        //set potNextSeedTime to current block timestamp plus one hour \n        potNextSeedTime = now + 3600;\n    }\n    \n    \n    function removeAdmin()   //stops any further updates happening to make it completely autonomous\n        public\n    {\n        require(msg.sender == admin, \"Only admin can remove himself\");\n        admin =  address(0);  // dummy 0x000... address \n    }\n    \n    \n}\n \n//==============================================================================\n//   __|_ _    __|_ _  .\n//  _\\ | | |_|(_ | _\\  .\n//==============================================================================\nlibrary FFEIFDatasets {\n    \n    struct EventReturns {\n        uint256 compressedData;\n        uint256 compressedIDs;\n        address winnerAddr;         // winner address\n        bytes32 winnerName;         // winner name\n        uint256 amountWon;          // amount won\n        uint256 newPot;             // amount in new pot\n        uint256 tokenAmount;        // amount distributed to PoEIF tokenholders and EIF\n        uint256 genAmount;          // amount distributed to gen\n        uint256 potAmount;          // amount added to pot\n        uint256 seedAdd;            // amount added to seedingPot\n        \n    }\n    struct Player {\n        address addr;   // player address\n        bytes32 name;   // player name\n        uint256 win;    // winnings vault\n        uint256 gen;    // general vault\n        uint256 aff;    // affiliate vault\n        uint256 lrnd;   // last round played\n        uint256 laff;   // last affiliate id used\n    }\n    struct PlayerRounds {\n        uint256 eth;    // eth player has added to round (used for eth limiter)\n        uint256 keys;   // FFEIF/keys\n        uint256 mask;   // player mask\n        uint256 ico;    // ICO phase investment\n    }\n    struct Round {\n        uint256 plyr;   // pID of player in lead\n        uint256 team;   // tID of team in lead\n        uint256 end;    // time ends/ended\n        bool ended;     // has round end function been ran\n        uint256 strt;   // time round started\n        uint256 keys;   // FFEIF/keys\n        uint256 eth;    // total eth in\n        uint256 pot;    // eth to pot (during round) / final amount paid to winner (after round ends)\n        uint256 mask;   // global mask\n        uint256 ico;    // total eth sent in during ICO phase\n        uint256 icoGen; // total eth for gen during ICO phase\n        uint256 icoAvg; // average FFEIF price for ICO phase\n    }\n    struct TeamFee {\n        uint256 gen;    // % of buy in thats paid to FFEIF holders of current round\n        uint256 poeif;  // % of buy in thats paid to PoEIF holders and EIF\n    }\n    struct PotSplit {\n        uint256 gen;    // % of pot thats paid to FFEIF holders of current round\n        uint256 poeif;  // % of pot thats paid to PoEIF holders and EIF\n    }\n}\n\n\n\n\n//==============================================================================\n//  . _ _|_ _  _ |` _  _ _  _  .\n//  || | | (/_| ~|~(_|(_(/__\\  .\n//==============================================================================\n\n//Define the PoEIF token for the sending 5% divs\ncontract PoEIF \n{\n    function donateDivs() public payable;\n}\n\ninterface PlayerBookInterface {\n    function getPlayerID(address _addr) external returns (uint256);\n    function getPlayerName(uint256 _pID) external view returns (bytes32);\n    function getPlayerLAff(uint256 _pID) external view returns (uint256);\n    function getPlayerAddr(uint256 _pID) external view returns (address);\n    function getNameFee() external view returns (uint256);\n    function registerNameXIDFromDapp(address _addr, bytes32 _name, uint256 _affCode, bool _all) external payable returns(bool, uint256);\n    function registerNameXaddrFromDapp(address _addr, bytes32 _name, address _affCode, bool _all) external payable returns(bool, uint256);\n    function registerNameXnameFromDapp(address _addr, bytes32 _name, bytes32 _affCode, bool _all) external payable returns(bool, uint256);\n}\n\n\nlibrary NameFilter {\n    /**\n     * @dev filters name strings\n     * -converts uppercase to lower case.\n     * -makes sure it does not start/end with a space\n     * -makes sure it does not contain multiple spaces in a row\n     * -cannot be only numbers\n     * -cannot start with 0x\n     * -restricts characters to A-Z, a-z, 0-9, and space.\n     * @return reprocessed string in bytes32 format\n     */\n    function nameFilter(string _input)\n        internal\n        pure\n        returns(bytes32)\n    {\n        bytes memory _temp = bytes(_input);\n        uint256 _length = _temp.length;\n\n        //sorry limited to 32 characters\n        require (_length <= 32 && _length > 0);\n        // make sure it doesnt start with or end with space\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20);\n        // make sure first two characters are not 0x\n        if (_temp[0] == 0x30)\n        {\n            require(_temp[1] != 0x78);\n            require(_temp[1] != 0x58);\n        }\n\n        // create a bool to track if we have a non number character\n        bool _hasNonNumber;\n\n        // convert & check\n        for (uint256 i = 0; i < _length; i++)\n        {\n            // if its uppercase A-Z\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\n            {\n                // convert to lower case a-z\n                _temp[i] = byte(uint(_temp[i]) + 32);\n\n                // we have a non number\n                if (_hasNonNumber == false)\n                    _hasNonNumber = true;\n            } else {\n                require\n                (\n                    // require character is a space\n                    _temp[i] == 0x20 ||\n                    // OR lowercase a-z\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\n                    // or 0-9\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a));\n                // make sure theres not 2x spaces in a row\n                if (_temp[i] == 0x20)\n                    require( _temp[i+1] != 0x20);\n\n                // see if we have a character other than a number\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\n                    _hasNonNumber = true;\n            }\n        }\n\n        require(_hasNonNumber == true);\n\n        bytes32 _ret;\n        assembly {\n            _ret := mload(add(_temp, 32))\n        }\n        return (_ret);\n    }\n}\n\n/**\n * @title SafeMath v0.1.9\n * @dev Math operations with safety checks that throw on error\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n * - added sqrt\n * - added sq\n * - added pwr\n * - changed asserts to requires with error log outputs\n * - removed div, its useless\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n  \n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n\n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y)\n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y)\n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n\n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n\n    /**\n     * @dev x to the power of y\n     */\n    function pwr(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else\n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n}",
  "bytecode": "608060405260028054600160a060020a031990811633178255603c6003819055600455610e106005908155600160068190556007819055606460085560006009819055600a818155600b829055600c869055600d8390556544364c5bb000600e55600f8281556010849055601196909655620f424060125560138290556014818155426015556016939093556201518060178190556018919091556019908155670de0b6b3a7640000601a5568056bc75e2d63100000601b556041601c55601d93909355601e91909155601f93909355602055603260215560228290556023829055602482905560258054909116730111e8a755a4212e6e1f13e75b1eaba8f837a2131790556030556033805460ff1916905534801561011e57600080fd5b5060018054600160a060020a031990811673ffb8cca6d55762df595f21e78f21cd8dfeadf1c8179091556000805490911673d80e96496cd0b3f95bb4941b1385023fbca1e6ba179055615e9580620001776000396000f3006080604052600436106103555763ffffffff60e060020a600035041663015008b18114610488578063018a25e8146104ae578063045ec563146104d557806306fdde03146104ea57806307762e74146105745780630d00f046146105895780630f15f4c01461059e57806310f01eba146105b35780631cb3aba8146105d45780631d5459f7146105e95780632357c9b11461060a57806324c33d331461061f5780632660316e146106965780632674b59b146106c557806329359a70146106da5780632ce21999146106ef5780632e19ebdc14610720578063355efbe1146107385780633ccfd60b1461074d5780633ddd4698146107625780633ee6d933146107be578063438d359e146107d357806345ea375f146107de57806349cc635d146107f35780634b5edd841461081d5780634e0a6265146108325780634fc339ed146108475780635003fa671461085c57806353680ed8146108715780635893d481146108865780635e6231c1146108a1578063624ae5c0146108b657806363066434146108cb578063685ffd831461090157806368d3663914610954578063747dff421461096957806375943430146109d757806382b98f9d14610a0857806388be1a7814610a1d5780638974372d14610a3257806389a8406214610a475780638b68cd9d14610a5c5780638f7140ea14610a715780638f8a583214610a8c5780638f8d49ac14610aa7578063921dec2114610b025780639237a12514610b5557806393aa4a9214610b5d57806395d89b4114610b725780639a202d4714610b87578063a2bccae914610b9c578063aeeed0db14610bdd578063b0b6848814610bf1578063b2ad450b14610c06578063b32faedc14610c1b578063b74bd09e14610c30578063b83f2bf914610c45578063c03ae8db14610c5a578063c519500e14610c6f578063c7e284b814610c87578063cd133c8f14610c9c578063ce89c80c14610ca7578063cf80800014610cc2578063d013ce6214610cda578063d1ab3e3514610cef578063d53b267914610d04578063d6f5c0e214610d19578063d910c74814610d2e578063de5e304914610d43578063de7874f314610d58578063dfa1f91d14610db2578063e5405fff14610dc7578063e58a17b314610ddc578063ee0b5d8b14610df1578063fb9073eb14610e4a575b61035d615cbc565b60335460009060ff16151560011461037457600080fd5b4260095410156103ff576103b3600854600a5481151561039057fe5b6026546000908152602c602052604090206007015491900463ffffffff610e6516565b6026546000908152602c6020526040902060070155600854600a546103ed91908115156103dc57fe5b600a5491900463ffffffff610ec616565b600a5560098054610e10019055610374565b33600032821461040e57600080fd5b50803b801561041c57600080fd5b34633b9aca0081101561042e57600080fd5b69152d02c7e14af680000081111561044557600080fd5b61044e85610f26565b336000908152602760209081526040808320548084526029909252909120600601549196509450610481908590876111cb565b5050505050005b34801561049457600080fd5b506104ac600160a060020a0360043516602435611413565b005b3480156104ba57600080fd5b506104c361157e565b60408051918252519081900360200190f35b3480156104e157600080fd5b506104c361165b565b3480156104f657600080fd5b506104ff611661565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610539578181015183820152602001610521565b50505050905090810190601f1680156105665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561058057600080fd5b506104c3611698565b34801561059557600080fd5b506104c3611810565b3480156105aa57600080fd5b506104ac611816565b3480156105bf57600080fd5b506104c3600160a060020a0360043516611996565b3480156105e057600080fd5b506104c36119a8565b3480156105f557600080fd5b506104ac600160a060020a03600435166119ae565b34801561061657600080fd5b506104c36119f4565b34801561062b57600080fd5b506106376004356119fa565b604080519c8d5260208d019b909b528b8b019990995296151560608b015260808a019590955260a089019390935260c088019190915260e087015261010086015261012085015261014084015261016083015251908190036101800190f35b3480156106a257600080fd5b506106b1600435602435611a5d565b604080519115158252519081900360200190f35b3480156106d157600080fd5b506104c3611a7d565b3480156106e657600080fd5b506104c3611a83565b3480156106fb57600080fd5b50610707600435611a89565b6040805192835260208301919091528051918290030190f35b34801561072c57600080fd5b506104c3600435611aa2565b34801561074457600080fd5b506104c3611ab4565b34801561075957600080fd5b506104ac611aba565b6040805160206004803580820135601f81018490048402850184019095528484526104ac94369492936024939284019190819084018382808284375094975050600160a060020a03853516955050505050602001351515611e28565b3480156107ca57600080fd5b506104c3611faa565b6104ac600435611fb0565b3480156107ea57600080fd5b506104c3612111565b3480156107ff57600080fd5b506104ac600435600160a060020a03602435166044356064356121d9565b34801561082957600080fd5b506104c3612350565b34801561083e57600080fd5b506104c3612356565b34801561085357600080fd5b506104c361235c565b34801561086857600080fd5b506104c3612362565b34801561087d57600080fd5b506104c3612368565b34801561089257600080fd5b506104c360043560243561236e565b3480156108ad57600080fd5b506104c361238b565b3480156108c257600080fd5b506104c3612391565b3480156108d757600080fd5b506108e3600435612397565b60408051938452602084019290925282820152519081900360600190f35b6040805160206004803580820135601f81018490048402850184019095528484526104ac943694929360249392840191908190840183828082843750949750508435955050505050602001351515612532565b34801561096057600080fd5b506104c36125e1565b34801561097557600080fd5b5061097e6125e7565b604080519a8b5260208b0199909952898901979097526060890195909552608088019390935260a087019190915260c0860152600160a060020a031660e085015261010084015261012083015251908190036101400190f35b3480156109e357600080fd5b506109ec612662565b60408051600160a060020a039092168252519081900360200190f35b348015610a1457600080fd5b506104c3612671565b348015610a2957600080fd5b506104c3612677565b348015610a3e57600080fd5b506104ac61267d565b348015610a5357600080fd5b506104c36126c9565b348015610a6857600080fd5b506104c36126cf565b348015610a7d57600080fd5b506104ac6004356024356126d5565b348015610a9857600080fd5b506104ac600435602435612738565b348015610ab357600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104ac94369492936024939284019190819084018382808284375094975050933594506128699350505050565b6040805160206004803580820135601f81018490048402850184019095528484526104ac943694929360249392840191908190840183828082843750949750508435955050505050602001351515613468565b6104ac613517565b348015610b6957600080fd5b506104c361356f565b348015610b7e57600080fd5b506104ff613575565b348015610b9357600080fd5b506104ac6135ac565b348015610ba857600080fd5b50610bb760043560243561362d565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6104ac600160a060020a036004351661365f565b348015610bfd57600080fd5b506104c36137ca565b348015610c1257600080fd5b506109ec6137d0565b348015610c2757600080fd5b506104c36137df565b348015610c3c57600080fd5b506104c36137e5565b348015610c5157600080fd5b506104c36137eb565b348015610c6657600080fd5b506104c36137f1565b348015610c7b57600080fd5b506107076004356137f7565b348015610c9357600080fd5b506104c3613810565b6104ac6004356138a9565b348015610cb357600080fd5b506104c36004356024356139ed565b348015610cce57600080fd5b506104c3600435613a8e565b348015610ce657600080fd5b506104c3613b45565b348015610cfb57600080fd5b506104c3613b4b565b348015610d1057600080fd5b506106b1613b51565b348015610d2557600080fd5b506104c3613b5a565b348015610d3a57600080fd5b506104c3613b60565b348015610d4f57600080fd5b506104c3613b66565b348015610d6457600080fd5b50610d70600435613b6c565b60408051600160a060020a0390981688526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b348015610dbe57600080fd5b506104c3613bb3565b348015610dd357600080fd5b506104c3613bb9565b348015610de857600080fd5b506104c3613bbf565b348015610dfd57600080fd5b50610e12600160a060020a0360043516613bc5565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b348015610e5657600080fd5b506104ac600435602435613cb9565b81810182811015610ec0576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d61746820616464206661696c656400000000000000000000000000604482015290519081900360640190fd5b92915050565b600082821115610f20576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d61746820737562206661696c656400000000000000000000000000604482015290519081900360640190fd5b50900390565b610f2e615cbc565b3360009081526027602052604081205490808215156111c25760008054604080517fe56556a90000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a039092169263e56556a9926024808401936020939083900390910190829087803b158015610fae57600080fd5b505af1158015610fc2573d6000803e3d6000fd5b505050506040513d6020811015610fd857600080fd5b505160008054604080517f82e37b2c000000000000000000000000000000000000000000000000000000008152600481018590529051939650600160a060020a03909116926382e37b2c92602480840193602093929083900390910190829087803b15801561104657600080fd5b505af115801561105a573d6000803e3d6000fd5b505050506040513d602081101561107057600080fd5b505160008054604080517fe3c08adf000000000000000000000000000000000000000000000000000000008152600481018890529051939550600160a060020a039091169263e3c08adf92602480840193602093929083900390910190829087803b1580156110de57600080fd5b505af11580156110f2573d6000803e3d6000fd5b505050506040513d602081101561110857600080fd5b505133600081815260276020908152604080832088905587835260299091529020805473ffffffffffffffffffffffffffffffffffffffff1916909117905590508115611191576000828152602860209081526040808320869055858352602982528083206001908101869055602b8352818420868552909252909120805460ff191690911790555b80158015906111a05750828114155b156111ba5760008381526029602052604090206006018190555b845160010185525b50929392505050565b602654600480546000838152602c60205260409020909101544291018111801561123757506000828152602c60205260409020600201548111158061123757506000828152602c60205260409020600201548111801561123757506000828152602c6020526040902054155b156112505761124b82863487600088613e0e565b61140c565b6000828152602c60205260409020600201548111801561128257506000828152602c602052604090206003015460ff16155b156113d7576000828152602c60205260409020600301805460ff191660011790556112ac8361412f565b925080670de0b6b3a764000002836000015101836000018181525050848360200151018360200181815250507f241355367c01f7c5158917ef0c095f5a17f1eb5b0de1f3e09b91c09ddc04c6533360296000888152602001908152602001600020600101543486600001518760200151886040015189606001518a608001518b60a001518c60c001518d60e001518e6101200151604051808d600160a060020a0316600160a060020a031681526020018c600019166000191681526020018b81526020018a815260200189815260200188600160a060020a0316600160a060020a0316815260200187600019166000191681526020018681526020018581526020018481526020018381526020018281526020019c5050505050505050505050505060405180910390a15b6000858152602960205260409020600301546113f9903463ffffffff610e6516565b6000868152602960205260409020600301555b5050505050565b61141b615cbc565b603354600090819060ff16151560011461143457600080fd5b42600954101561148b57611450600854600a5481151561039057fe5b6026546000908152602c6020526040902060070155600854600a5461147991908115156103dc57fe5b600a5560098054610e10019055611434565b33600032821461149a57600080fd5b50803b80156114a857600080fd5b85633b9aca008110156114ba57600080fd5b69152d02c7e14af68000008111156114d157600080fd5b336000908152602760205260409020549450600160a060020a03881615806115015750600160a060020a03881633145b1561151f576000858152602960205260409020600601549350611568565b600160a060020a03881660009081526027602090815260408083205488845260299092529091206006015490945084146115685760008581526029602052604090206006018490555b61157485858989614607565b5050505050505050565b600e546000906544364c5bb00090829081901561159b57600e5492505b5050602654600480546000838152602c60205260409020909101544291018111801561160957506000828152602c60205260409020600201548111158061160957506000828152602c60205260409020600201548111801561160957506000828152602c6020526040902054155b15611651576000828152602c602052604090206005015461164a9061163c90670de0b6b3a764000063ffffffff610e6516565b670de0b6b3a7640000614839565b9350611655565b8293505b50505090565b60065481565b60408051808201909152601081527f466f6d6f20466f72657665722045494600000000000000000000000000000000602082015281565b6015546026546000908152602c60205260408120600201546017546011549293429390840392849003909111908490819081908190600114806116e6575060115460021480156116e6575084155b156116f057600193505b6018549250600a83106117f657831561176857600a611757603c61173060646117248b60165461486690919063ffffffff16565b9063ffffffff61486616565b81151561173957fe5b0461174b86600a63ffffffff61486616565b9063ffffffff610ec616565b81151561176057fe5b0492506117f6565b601654603c808806935090611783908863ffffffff61486616565b81151561178c57fe5b046001018381151561179a57fe5b049250603c6117b787603c0160165461486690919063ffffffff16565b8115156117c057fe5b046001016018548115156117d057fe5b049050603c6117e78383860363ffffffff61486616565b8115156117f057fe5b04830392505b600a83101561180457600a92505b50909695505050505050565b600c5481565b600254600160a060020a03163314611878576040805160e560020a62461bcd02815260206004820152601760248201527f4f6e6c792061646d696e2063616e206163746976617465000000000000000000604482015290519081900360640190fd5b60335460ff16156118d3576040805160e560020a62461bcd02815260206004820152601760248201527f464645494620616c726561647920616374697661746564000000000000000000604482015290519081900360640190fd5b6119136040805190810160405280600881526020017f656e64726f756e640000000000000000000000000000000000000000000000008152506000612869565b6033805460ff191660019081179091556026819055600454600354600092909252602c60205242808301919091037fa1f88ee5f5d946e3956f6291445d84cd8aea2bf6c57f4f4ac349f7a3388826475560055481019091017fa1f88ee5f5d946e3956f6291445d84cd8aea2bf6c57f4f4ac349f7a33888264555610e1001600955565b60276020526000908152604090205481565b60115481565b600254600160a060020a031633146119c557600080fd5b6025805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60145481565b602c60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b909b0154999a9899979860ff909716979596949593949293919290918c565b602b60209081526000928352604080842090915290825290205460ff1681565b600b5481565b60075481565b602e602052600090815260409020805460019091015482565b60286020526000908152604090205481565b60245481565b600080600080611ac8615cbc565b60335460ff161515600114611adc57600080fd5b426009541015611b3357611af8600854600a5481151561039057fe5b6026546000908152602c6020526040902060070155600854600a54611b2191908115156103dc57fe5b600a5560098054610e10019055611adc565b336000328214611b4257600080fd5b50803b8015611b5057600080fd5b60265433600090815260276020908152604080832054848452602c90925290912060020154919850429750955086118015611b9d57506000878152602c602052604090206003015460ff16155b8015611bb657506000878152602c602052604090205415155b15611d69576000878152602c60205260409020600301805460ff19166001179055611be08361412f565b9250611beb856148dd565b93506000841115611c3c57600085815260296020526040808220549051600160a060020a039091169186156108fc02918791818181858888f19350505050158015611c3a573d6000803e3d6000fd5b505b85670de0b6b3a764000002836000015101836000018181525050848360200151018360200181815250507fefb2dfbd8ab72420b2aad8a56a6c8972c4ce68cf0578433a79c381c5480f0eeb3360296000888152602001908152602001600020600101548686600001518760200151886040015189606001518a608001518b60a001518c60c001518d60e001518e6101200151604051808d600160a060020a0316600160a060020a031681526020018c600019166000191681526020018b81526020018a815260200189815260200188600160a060020a0316600160a060020a0316815260200187600019166000191681526020018681526020018581526020018481526020018381526020018281526020019c5050505050505050505050505060405180910390a1611e1f565b611d72856148dd565b93506000841115611dc357600085815260296020526040808220549051600160a060020a039091169186156108fc02918791818181858888f19350505050158015611dc1573d6000803e3d6000fd5b505b6000858152602960209081526040918290206001015482513381529182015280820186905260608101889052905186917f8f36579a548bc439baa172a6521207464154da77f411e2da3db2f53affe6cc3a919081900360800190a25b50505050505050565b600080808080803381328214611e3d57600080fd5b50803b8015611e4b57600080fd5b611e548b614964565b600054604080517faa4d490b000000000000000000000000000000000000000000000000000000008152336004820181905260248201859052600160a060020a038f811660448401528e151560648401528351959d50909b50349a509092169263aa4d490b928a92608480830193919282900301818588803b158015611ed957600080fd5b505af1158015611eed573d6000803e3d6000fd5b50505050506040513d6040811015611f0457600080fd5b508051602091820151600160a060020a03808b1660008181526027865260408082205485835260298852918190208054600190910154825188151581529889018790529416878201526060870193909352608086018c90524260a0870152915193995091975095508a92909186917fdd6176433ff5026bbce96b068584b7bbe3514227e72df9c630b749ae87e64442919081900360c00190a45050505050505050505050565b60055481565b611fb8615cbc565b603354600090819060ff161515600114611fd157600080fd5b42600954101561202857611fed600854600a5481151561039057fe5b6026546000908152602c6020526040902060070155600854600a5461201691908115156103dc57fe5b600a5560098054610e10019055611fd1565b33600032821461203757600080fd5b50803b801561204557600080fd5b34633b9aca0081101561205757600080fd5b69152d02c7e14af680000081111561206e57600080fd5b61207786610f26565b3360009081526027602052604090205490965094508615806120a9575060008581526029602052604090206001015487145b156120c7576000858152602960205260409020600601549350612106565b60008781526028602090815260408083205488845260299092529091206006015490945084146121065760008581526029602052604090206006018490555b611e1f8585886111cb565b6026546000908152602c6020526040812060070154600a546008546009544293929190855b428210156121885761215b838581151561214c57fe5b8791900463ffffffff610e6516565b945061217a838581151561216b57fe5b8691900463ffffffff610ec616565b9350610e1082019150612136565b856009540390506121ce85610e106121b886888115156121a457fe5b0485610e100361486690919063ffffffff16565b8115156121c157fe5b049063ffffffff610e6516565b965050505050505090565b600054600160a060020a031633146121f057600080fd5b600160a060020a038316600090815260276020526040902054841461222b57600160a060020a03831660009081526027602052604090208490555b60008281526028602052604090205484146122525760008281526028602052604090208490555b600084815260296020526040902054600160a060020a038481169116146122a8576000848152602960205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790555b60008481526029602052604090206001015482146122d55760008481526029602052604090206001018290555b60008481526029602052604090206006015481146123025760008481526029602052604090206006018190555b6000848152602b6020908152604080832085845290915290205460ff16151561234a576000848152602b602090815260408083208584529091529020805460ff191660011790555b50505050565b60125481565b600d5481565b600f5481565b600e5481565b60225481565b602d60209081526000928352604080842090915290825290205481565b601f5481565b60265481565b6026546000818152602c602052604081206002015490918291829190421180156123d357506000818152602c602052604090206003015460ff16155b80156123ec57506000818152602c602052604090205415155b15612502576000818152602c60205260409020548514156124c6576021546000828152602c602052604090206007015461245b916064916124329163ffffffff61486616565b81151561243b57fe5b60008881526029602052604090206002015491900463ffffffff610e6516565b6000868152602a602090815260408083208584529091529020600201546124a89061248a9061174b8986614ed2565b6000888152602960205260409020600301549063ffffffff610e6516565b6000878152602960205260409020600401549195509350915061252a565b6000858152602960209081526040808320600290810154602a84528285208686529093529220909101546124a89061248a9061174b8986614ed2565b600085815260296020526040902060028101546005909101546124a89061248a908890614f94565b509193909250565b60008080808080338132821461254757600080fd5b50803b801561255557600080fd5b61255e8b614964565b600054604080517f745ea0c1000000000000000000000000000000000000000000000000000000008152336004820181905260248201859052604482018f90528d151560648301528251949c509a50349950600160a060020a039092169263745ea0c1928a92608480830193919282900301818588803b158015611ed957600080fd5b60185481565b6026546000818152602c60209081526040808320600981015460058201546002830154600484015460078501548554600196870154818b5260298a52888b2080549801548c8c52602d8b52898c208c8052909a529790992054949a9398929791969095600a9093020193600160a060020a0390921692909190565b602554600160a060020a031681565b60215481565b60165481565b602554602254604051600160a060020a0390921691600081818185875af19250505015156126aa57600080fd5b6022546023546126bf9163ffffffff610e6516565b6023556000602255565b60135481565b60195481565b600054600160a060020a031633146126ec57600080fd5b6000828152602b6020908152604080832084845290915290205460ff161515612734576000828152602b602090815260408083208484529091529020805460ff191660011790555b5050565b612740615cbc565b60335460009060ff16151560011461275757600080fd5b4260095410156127ae57612773600854600a5481151561039057fe5b6026546000908152602c6020526040902060070155600854600a5461279c91908115156103dc57fe5b600a5560098054610e10019055612757565b3360003282146127bd57600080fd5b50803b80156127cb57600080fd5b84633b9aca008110156127dd57600080fd5b69152d02c7e14af68000008111156127f457600080fd5b33600090815260276020526040902054935086158061281257508387145b1561283057600084815260296020526040902060060154965061285d565b600084815260296020526040902060060154871461285d5760008481526029602052604090206006018790555b611e1f84888888614607565b604080517f656e64726f756e64000000000000000000000000000000000000000000000000815290519081900360080181208351600092839291869190819060208401908083835b602083106128d05780518252601f1990920191602091820191016128b1565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141580156129195750600254600160a060020a031633145b15612928576129288484614ff1565b6026546000908152602c602052604090206003015460ff168061294e575060335460ff16155b1561234a57600091505b60305482101561337357603280548390811061297057fe5b9060005260206000200160405180828054600181600116156101000203166002900480156129d55780601f106129b35761010080835404028352918201916129d5565b820191906000526020600020905b8154815290600101906020018083116129c1575b5050604080519182900382207f726e644761705f0000000000000000000000000000000000000000000000000083529051918290036007019091209093508314159150612a409050576031805483908110612a2c57fe5b600091825260209091200154600455613368565b604080517f726e64496e69745f00000000000000000000000000000000000000000000000081529051908190036008019020811415612a9b576031805483908110612a8757fe5b600091825260209091200154600555613368565b604080517f726e64496e635f0000000000000000000000000000000000000000000000000081529051908190036007019020811415612af6576031805483908110612ae257fe5b600091825260209091200154600655613368565b604080517f726e64496e6344697669736f725f0000000000000000000000000000000000008152905190819003600e019020811415612b51576031805483908110612b3d57fe5b600091825260209091200154600755613368565b604080517f706f7453656564526174650000000000000000000000000000000000000000008152905190819003600b019020811415612bac576031805483908110612b9857fe5b600091825260209091200154600855613368565b604080517f706f744e6578745365656454696d6500000000000000000000000000000000008152905190819003600f019020811415612c07576031805483908110612bf357fe5b600091825260209091200154600955613368565b604080517f73656564696e675468726573686f6c640000000000000000000000000000000081529051908190036010019020811415612c62576031805483908110612c4e57fe5b600091825260209091200154600b55613368565b604080517f73656564696e6744697669736f720000000000000000000000000000000000008152905190819003600e019020811415612cbd576031805483908110612ca957fe5b600091825260209091200154600c55613368565b604080517f73656564526f756e64456e6400000000000000000000000000000000000000008152905190819003600c019020811415612d18576031805483908110612d0457fe5b600091825260209091200154600d55613368565b604080517f6c696e65617250726963650000000000000000000000000000000000000000008152905190819003600b019020811415612d73576031805483908110612d5f57fe5b600091825260209091200154600e55613368565b604080517f6d756c74507572636861736500000000000000000000000000000000000000008152905190819003600c019020811415612dce576031805483908110612dba57fe5b600091825260209091200154600f55613368565b604080517f6d756c74416c6c6f774c617374000000000000000000000000000000000000008152905190819003600d019020811415612e29576031805483908110612e1557fe5b600091825260209091200154601055613368565b604080517f6d61784d756c740000000000000000000000000000000000000000000000000081529051908190036007019020811415612e84576031805483908110612e7057fe5b600091825260209091200154601255613368565b604080517f6d756c74496e635f00000000000000000000000000000000000000000000000081529051908190036008019020811415612edf576031805483908110612ecb57fe5b600091825260209091200154601355613368565b604080517f6d756c74496e63466163746f725f0000000000000000000000000000000000008152905190819003600e019020811415612f3a576031805483908110612f2657fe5b600091825260209091200154601455613368565b604080517f6d756c744c6173744368616e67650000000000000000000000000000000000008152905190819003600e019020811415612f95576031805483908110612f8157fe5b600091825260209091200154601555613368565b604080517f6d756c7444656361795065724d696e757465000000000000000000000000000081529051908190036012019020811415612ff0576031805483908110612fdc57fe5b600091825260209091200154601655613368565b604080517f6d756c74537461727400000000000000000000000000000000000000000000008152905190819003600901902081141561304b57603180548390811061303757fe5b600091825260209091200154601755613368565b604080517f6d756c7443757272656e740000000000000000000000000000000000000000008152905190819003600b0190208114156130a657603180548390811061309257fe5b600091825260209091200154601855613368565b604080517f726e644d61785f00000000000000000000000000000000000000000000000000815290519081900360070190208114156131015760318054839081106130ed57fe5b600091825260209091200154601955613368565b604080517f6561726c79526f756e644c696d697400000000000000000000000000000000008152905190819003600f01902081141561315c57603180548390811061314857fe5b600091825260209091200154601a55613368565b604080517f6561726c79526f756e644c696d6974556e74696c000000000000000000000000815290519081900360140190208114156131b75760318054839081106131a357fe5b600091825260209091200154601b55613368565b604080517f64697650657263656e74616765000000000000000000000000000000000000008152905190819003600d0190208114156132255760318054839081106131fe57fe5b9060005260206000200154601c81905550604b601c54111561322057604b601c555b613368565b604080517f646976506f7450657263656e74616765000000000000000000000000000000008152905190819003601001902081141561329257603180548390811061326c57fe5b9060005260206000200154601f819055506032601f541115613220576032601f55613368565b604080517f6e657874526f756e6450657263656e7461676500000000000000000000000000815290519081900360130190208114156132ff5760318054839081106132d957fe5b906000526020600020015460208190555060286020541115613220576028602055613368565b604080517f61666646656500000000000000000000000000000000000000000000000000008152905190819003600601902081141561336857603180548390811061334657fe5b9060005260206000200154601d81905550600f601d54111561336857600f601d555b600190910190612958565b6000603081905560208054601f54605a81810392909203602155601d54601c549283900303601e55600a6018819055604080518082018252938452838501828152868052602e865293517f5f2b51c23aa64fc2445ffee23e9f4db80c998ca5b1b72e6b1c86169cbbc084be5592517f5f2b51c23aa64fc2445ffee23e9f4db80c998ca5b1b72e6b1c86169cbbc084bf558251808401909352908252818301908152928052602f909152517fc11d2605466dd88923799a61d7f94d6c8cc580bae52b24870f6853eaa13cc4d655517fc11d2605466dd88923799a61d7f94d6c8cc580bae52b24870f6853eaa13cc4d75550505050565b60008080808080338132821461347d57600080fd5b50803b801561348b57600080fd5b6134948b614964565b600054604080517fc0942dfd000000000000000000000000000000000000000000000000000000008152336004820181905260248201859052604482018f90528d151560648301528251949c509a50349950600160a060020a039092169263c0942dfd928a92608480830193919282900301818588803b158015611ed957600080fd5b34633b9aca0081101561352957600080fd5b69152d02c7e14af680000081111561354057600080fd5b600a54613553903463ffffffff610e6516565b600a55602454613569903463ffffffff610e6516565b60245550565b60235481565b60408051808201909152600581527f4646454946000000000000000000000000000000000000000000000000000000602082015281565b600254600160a060020a0316331461360e576040805160e560020a62461bcd02815260206004820152601d60248201527f4f6e6c792061646d696e2063616e2072656d6f76652068696d73656c66000000604482015290519081900360640190fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19169055565b602a60209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b613667615cbc565b603354600090819060ff16151560011461368057600080fd5b4260095410156136d75761369c600854600a5481151561039057fe5b6026546000908152602c6020526040902060070155600854600a546136c591908115156103dc57fe5b600a5560098054610e10019055613680565b3360003282146136e657600080fd5b50803b80156136f457600080fd5b34633b9aca0081101561370657600080fd5b69152d02c7e14af680000081111561371d57600080fd5b61372686610f26565b336000908152602760205260409020549096509450600160a060020a03871615806137595750600160a060020a03871633145b15613777576000858152602960205260409020600601549350612106565b600160a060020a0387166000908152602760209081526040808320548884526029909252909120600601549094508414612106576000858152602960205260409020600601849055611e1f8585886111cb565b601e5481565b600154600160a060020a031681565b60095481565b60045481565b601b5481565b60155481565b602f602052600090815260409020805460019091015482565b6026546000818152602c6020526040812060020154909190429081101561389f57600480546000848152602c602052604090209091015401811115613878576000828152602c6020526040902060020154613871908263ffffffff610ec616565b92506138a4565b600480546000848152602c602052604090209091015461387191018263ffffffff610ec616565b600092505b505090565b6138b1615cbc565b60335460009060ff1615156001146138c857600080fd5b42600954101561391f576138e4600854600a5481151561039057fe5b6026546000908152602c6020526040902060070155600854600a5461390d91908115156103dc57fe5b600a5560098054610e100190556138c8565b33600032821461392e57600080fd5b50803b801561393c57600080fd5b34633b9aca0081101561394e57600080fd5b69152d02c7e14af680000081111561396557600080fd5b61396e85610f26565b33600090815260276020526040902054909550935085158061398f57508386145b156139ad5760008481526029602052604090206006015495506139da565b60008481526029602052604090206006015486146139da5760008481526029602052604090206006018690555b6139e58487876111cb565b505050505050565b600480546000848152602c602052604081209092015442910181118015613a5657506000848152602c602052604090206002015481111580613a5657506000848152602c602052604090206002015481118015613a5657506000848152602c6020526040902054155b15613a7e576000848152602c6020526040902060060154613a77908461507f565b9150613a87565b613a77836150a0565b5092915050565b602654600480546000838152602c602052604081209092015491929142910181118015613afd57506000828152602c602052604090206002015481111580613afd57506000828152602c602052604090206002015481118015613afd57506000828152602c6020526040902054155b15613b35576000828152602c6020526040902060050154613b2e90613b28908663ffffffff610e6516565b85614839565b9250613b3e565b613b2e84615144565b5050919050565b60105481565b600a5481565b60335460ff1681565b601a5481565b601d5481565b601c5481565b6029602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154600160a060020a039095169593949293919290919087565b60205481565b60085481565b60175481565b600080600080600080600080600060265491506000600160a060020a03168a600160a060020a03161415613bf7573399505b50600160a060020a0389166000908152602760209081526040808320548084526029808452828520600180820154602a8752858820898952875294872001549583905293526002830154600590930154909384939091613c7a90613c5c908690614f94565b6000878152602960205260409020600301549063ffffffff610e6516565b600095865260296020908152604080882060040154602a83528189209989529890915290952054939e929d50909b509950919750919550909350915050565b613cc1615cbc565b603354600090819060ff161515600114613cda57600080fd5b426009541015613d3157613cf6600854600a5481151561039057fe5b6026546000908152602c6020526040902060070155600854600a54613d1f91908115156103dc57fe5b600a5560098054610e10019055613cda565b336000328214613d4057600080fd5b50803b8015613d4e57600080fd5b85633b9aca00811015613d6057600080fd5b69152d02c7e14af6800000811115613d7757600080fd5b336000908152602760205260409020549450871580613da6575060008581526029602052604090206001015488145b15613dc4576000858152602960205260409020600601549350611568565b600088815260286020908152604080832054888452602990925290912060060154909450841461156857600085815260296020526040902060060184905561157485858989614607565b6000858152602a602090815260408083208984529091528120600101548190819081901515613e4457613e4189866151da565b94505b601b5460008b8152602c6020526040902060060154108015613e905750601a5460008a8152602a602090815260408083208e8452909152902054613e8e908a63ffffffff610e6516565b115b15613f10576000898152602a602090815260408083208d8452909152902054601a54613ec19163ffffffff610ec616565b9350613ed3888563ffffffff610ec616565b60008a815260296020526040902060030154909350613ef8908463ffffffff610e6516565b60008a81526029602052604090206003015592965086925b633b9aca008811156141235760008a8152602c6020526040902060060154613f38908961507f565b9150613f628260105460011480613f5d575060008c8152602c60205260409020548b14155b61523a565b9050670de0b6b3a76400008210613fdf57613f7d828b615451565b8015613fdf5760008a8152602c60205260409020548914613faa5760008a8152602c602052604090208990555b60008a8152602c60205260409020600101548614613fd75760008a8152602c602052604090206001018690555b845160640185525b6000898152602a602090815260408083208d845290915290206001015461400d90839063ffffffff610e6516565b60008a8152602a602090815260408083208e8452909152902060018101919091555461403a908990610e65565b60008a8152602a602090815260408083208e8452825280832093909355602c9052206005015461407190839063ffffffff610e6516565b60008b8152602c6020526040902060058101919091556006015461409c90899063ffffffff610e6516565b60008b8152602c6020908152604080832060060193909355602d8152828220828052905220546140d390899063ffffffff610e6516565b60008b8152602d60209081526040808320838052909152812091909155614102908b908b908b908b908a61553e565b94506141138a8a8a6000868a615742565b94506141238960008a8589615904565b50505050505050505050565b614137615cbc565b6026546000818152602c60205260408120805460018201546007909201546021549193909181908190819081908190819060649061417c908a9063ffffffff61486616565b81151561418557fe5b60008b8152602f602052604090205491900497506064906141ad908a9063ffffffff61486616565b8115156141b657fe5b60008b8152602f602052604090206001015491900496506064906141e1908a9063ffffffff61486616565b8115156141ea57fe5b0494506142038561174b88818c8c63ffffffff610ec616565b60008c8152602c602052604090206005015490945061423087670de0b6b3a764000063ffffffff61486616565b81151561423957fe5b60008d8152602c6020526040902060050154919004935061428790670de0b6b3a76400009061426f90869063ffffffff61486616565b81151561427857fe5b8891900463ffffffff610ec616565b915060008211156142b7576142a2868363ffffffff610ec616565b95506142b4848363ffffffff610e6516565b93505b60008a8152602960205260409020600201546142da90889063ffffffff610e6516565b60008b8152602960205260409020600290810191909155600154600160a060020a0316906143089087614278565b60405180807f646f6e6174654469767328290000000000000000000000000000000000000000815250600c019050604051809103902060e060020a9004906040518263ffffffff1660e060020a02815260040160006040518083038185885af193505050505061438e60028681151561437d57fe5b60225491900463ffffffff610e6516565b60225560008b8152602c60205260409020600801546143b490849063ffffffff610e6516565b60008c8152602c602052604090206008015550600d5483906001141561444d576143e4600c548581151561216b57fe5b60008c8152602d60209081526040808320838052909152902054600b54919250101561442857600a5461441d908563ffffffff610e6516565b600a5550600061444d565b614449600c548581151561443857fe5b600a5491900463ffffffff610e6516565b600a555b602c60008c815260200190815260200160002060020154620f4240028d60000151018d60000181815250508867016345785d8a0000028a6a52b7d2dcc80cd2e4000000028e6020015101018d6020018181525050602960008b815260200190815260200160002060000160009054906101000a9004600160a060020a03168d60400190600160a060020a03169081600160a060020a031681525050602960008b8152602001908152602001600020600101548d606001906000191690816000191681525050868d6080018181525050858d60e0018181525050848d60c0018181525050808d60a00181815250508084038d6101200181815250506145876040805190810160405280600881526020017f656e64726f756e640000000000000000000000000000000000000000000000008152506000612869565b6026805460019081019091559a909a016000818152602c602052604090204260049182018190559054600554929c926145d5926145c99163ffffffff610e6516565b9063ffffffff610e6516565b60008c8152602c6020526040902060028101919091556007018054820190558c9b505050505050505050505050919050565b602654600480546000838152602c60205260409020909101544291018111801561467357506000828152602c60205260409020600201548111158061467357506000828152602c60205260409020600201548111801561467357506000828152602c6020526040902054155b156146b3576146858461174b886148dd565b60296000888152602001908152602001600020600301819055506146ae82878688600088613e0e565b6139e5565b6000828152602c6020526040902060020154811180156146e557506000828152602c602052604090206003015460ff16155b156139e5576000828152602c60205260409020600301805460ff1916600117905561470f8361412f565b925080670de0b6b3a764000002836000015101836000018181525050858360200151018360200181815250507f3fbd80671c8d24826e72afac55586328935f6aaba0619b3cea4a3b2f3812ac4b336029600089815260200190815260200160002060010154856000015186602001518760400151886060015189608001518a60a001518b60c001518c60e001518d6101200151604051808c600160a060020a0316600160a060020a031681526020018b600019166000191681526020018a815260200189815260200188600160a060020a0316600160a060020a0316815260200187600019166000191681526020018681526020018581526020018481526020018381526020018281526020019b50505050505050505050505060405180910390a1505050505050565b600061485f614856614851858563ffffffff610ec616565b615144565b61174b85615144565b9392505050565b600082151561487757506000610ec0565b5081810281838281151561488757fe5b0414610ec0576040805160e560020a62461bcd02815260206004820152601360248201527f536166654d617468206d756c206661696c656400000000000000000000000000604482015290519081900360640190fd5b60008181526029602052604081206005015481906148fc908490615a75565b60008381526029602052604090206004810154600382015460029092015461492e926145c9919063ffffffff610e6516565b9050600081111561495a5760008381526029602052604081206002810182905560038101829055600401555b8091505b50919050565b805160009082908280806020841180159061497f5750600084115b151561498a57600080fd5b84600081518110151561499957fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a0214158015614a00575084600185038151811015156149d857fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a0214155b1515614a0b57600080fd5b846000815181101515614a1a57fe5b90602001015160f860020a900460f860020a02600160f860020a031916603060f860020a021415614ac757846001815181101515614a5457fe5b90602001015160f860020a900460f860020a02600160f860020a031916607860f860020a0214151515614a8657600080fd5b846001815181101515614a9557fe5b90602001015160f860020a900460f860020a02600160f860020a031916605860f860020a0214151515614ac757600080fd5b600091505b83821015614eb55784517f400000000000000000000000000000000000000000000000000000000000000090869084908110614b0457fe5b90602001015160f860020a900460f860020a02600160f860020a031916118015614b78575084517f5b0000000000000000000000000000000000000000000000000000000000000090869084908110614b5957fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b15614be5578482815181101515614b8b57fe5b90602001015160f860020a900460f860020a0260f860020a900460200160f860020a028583815181101515614bbc57fe5b906020010190600160f860020a031916908160001a905350821515614be057600192505b614eaa565b8482815181101515614bf357fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a021480614cc3575084517f600000000000000000000000000000000000000000000000000000000000000090869084908110614c4f57fe5b90602001015160f860020a900460f860020a02600160f860020a031916118015614cc3575084517f7b0000000000000000000000000000000000000000000000000000000000000090869084908110614ca457fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b80614d6d575084517f2f0000000000000000000000000000000000000000000000000000000000000090869084908110614cf957fe5b90602001015160f860020a900460f860020a02600160f860020a031916118015614d6d575084517f3a0000000000000000000000000000000000000000000000000000000000000090869084908110614d4e57fe5b90602001015160f860020a900460f860020a02600160f860020a031916105b1515614d7857600080fd5b8482815181101515614d8657fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a021415614df4578482600101815181101515614dc257fe5b90602001015160f860020a900460f860020a02600160f860020a031916602060f860020a0214151515614df457600080fd5b82158015614ea0575084517f300000000000000000000000000000000000000000000000000000000000000090869084908110614e2d57fe5b90602001015160f860020a900460f860020a02600160f860020a0319161080614ea0575084517f390000000000000000000000000000000000000000000000000000000000000090869084908110614e8157fe5b90602001015160f860020a900460f860020a02600160f860020a031916115b15614eaa57600192505b600190910190614acc565b600183151514614ec457600080fd5b505050506020015192915050565b6000828152602a602090815260408083208484528252808320600190810154602c8085528386206005810154938101548752602f8652938620548787529452600790920154670de0b6b3a764000093614f839392611724929091614f5a918791606491614f449163ffffffff61486616565b811515614f4d57fe5b049063ffffffff61486616565b811515614f6357fe5b6000888152602c602052604090206008015491900463ffffffff610e6516565b811515614f8c57fe5b049392505050565b6000828152602a6020908152604080832084845282528083206002810154600190910154602c9093529083206008015461485f92670de0b6b3a764000091614fdb91614866565b811515614fe457fe5b049063ffffffff610ec616565b603154603054141561502457603180549061500f9060018301615d1c565b5060328054906150229060018301615d40565b505b80603160305481548110151561503657fe5b60009182526020909120015560305460328054849290811061505457fe5b906000526020600020019080519060200190615071929190615d64565b505060308054600101905550565b600061485f61508d846150a0565b61174b6150a0868663ffffffff610e6516565b6000600e5460001415615124576309502f906151136d03b2a1d15167e7c5699bfde0000061174b61510e7a0dac7055469777a6122ee4310dd6c14410500f29048400000000006145c96b01027e72f1f12813088000006117248a670de0b6b3a764000063ffffffff61486616565b615b0c565b81151561511c57fe5b04905061513f565b600e54615113670de0b6b3a76400008463ffffffff61486616565b919050565b6000600e54600014156151bc57615162670de0b6b3a7640000615b5f565b615113600261519561518286670de0b6b3a764000063ffffffff61486616565b65886c8f6730709063ffffffff61486616565b81151561519e57fe5b046145c96151ab86615b5f565b6304a817c89063ffffffff61486616565b670de0b6b3a7640000615113600e548461486690919063ffffffff16565b6151e2615cbc565b6000838152602960205260409020600501541561521657600083815260296020526040902060050154615216908490615a75565b506026546000838152602960205260409020600501558051600a0181528092915050565b6015546026546000908152602c602052604081206002015460175460115492934293908403928490039091119084908190819081906001148061528857506011546002148015615288575084155b1561529b576015879055600193506152bd565b6152b96152aa603c8089614f4d565b6015549063ffffffff610e6516565b6015555b601854600a1161536557831561532057600a61530e603c6152ee60646117248b60165461486690919063ffffffff16565b8115156152f757fe5b0461174b600a60185461486690919063ffffffff16565b81151561531757fe5b04601855615354565b601654603c90615336908863ffffffff61486616565b81151561533f57fe5b0460010160185481151561534f57fe5b046018555b600a601854101561536557600a6018555b60185467016345785d8a00008b0410159250848061538557506011546002145b801561538e5750885b1561544357601454670de0b6b3a76400008b0492506153b3908363ffffffff61486616565b601354909150156153c357506013545b600f5482101580156153d757506000600f54115b806153f35750601854600a900482101580156153f35750600f54155b1561544357831561541957601854615411908263ffffffff610e6516565b601855615430565b60185461542c90600a8304600101614866565b6018555b6012546018541115615443576012546018555b509098975050505050505050565b6000818152602c60205260408120600201544291908211801561548057506000838152602c6020526040902054155b156154ac576154a5826007546121b8600654670de0b6b3a764000089811515614f4d57fe5b90506154e0565b6000838152602c60205260409020600201546007546006546154dd9291906121b890670de0b6b3a764000089614f4d565b90505b6019546154f3908363ffffffff610e6516565b811015615513576000838152602c6020526040902060020181905561234a565b601954615526908363ffffffff610e6516565b6000848152602c602052604090206002015550505050565b615546615cbc565b60008060006064615562601d548a61486690919063ffffffff16565b81151561556b57fe5b04915088871415801561558e575060008781526029602052604090206001015415155b1561562e576000878152602960205260409020600401546155b690839063ffffffff610e6516565b600088815260296020908152604091829020600481019390935582546001909301548251600160a060020a03909416845290830152818101849052426060830152518a918c918a917f590bbc0fc16915a85269a48f74783c39842b7ae9eceb7c295c95dbe8b3ec7331919081900360800190a4615632565b8192505b6000868152602e60205260409020600101546156749060649061565c908b9063ffffffff61486616565b81151561566557fe5b8591900463ffffffff610e6516565b9250600083111561573457506001546002830490600160a060020a031661569b8483610ec6565b60405180807f646f6e6174654469767328290000000000000000000000000000000000000000815250600c019050604051809103902060e060020a9004906040518263ffffffff1660e060020a02815260040160006040518083038185885af150506022546157159350915083905063ffffffff610e6516565b60225560c085015161572e90849063ffffffff610e6516565b60c08601525b509298975050505050505050565b61574a615cbc565b6000848152602e6020526040812054819081908190606490615773908b9063ffffffff61486616565b81151561577c57fe5b0493506157de6157d160646157b0602e60008d8152602001908152602001600020600101548d61486690919063ffffffff16565b8115156157b957fe5b0460646121b8601d548e61486690919063ffffffff16565b8a9063ffffffff610ec616565b98506157f0898563ffffffff610ec616565b9250615811600c548481151561580257fe5b8591900463ffffffff610ec616565b60008c8152602d60209081526040808320838052909152902054600b54919350101561585657600a5461584a908463ffffffff610e6516565b600a556000915061586a565b615866600c548481151561443857fe5b600a555b6158768b8b868a615b6b565b9050600081111561589457615891848263ffffffff610ec616565b93505b60008b8152602c60205260409020600701546158ba906145c9848463ffffffff610e6516565b60008c8152602c602052604090206007015560e08601516158e290859063ffffffff610e6516565b60e0870152506101008501819052900361012084015250909695505050505050565b836c01431e0fae6d7217caa00000000242670de0b6b3a76400000282600001510101816000018181525050602654751aba4714957d300d0e549208b31adb100000000000000285826020015101018160200181815250507f500e72a0e114930aebdbcb371ccdbf43922c49f979794b5de4257ff7e310c7468160000151826020015160296000898152602001908152602001600020600101543387878760400151886060015189608001518a60a001518b60c001518c60e001518d61010001518e6101200151604051808f81526020018e81526020018d600019166000191681526020018c600160a060020a0316600160a060020a031681526020018b81526020018a815260200189600160a060020a0316600160a060020a0316815260200188600019166000191681526020018781526020018681526020018581526020018481526020018381526020018281526020019e50505050505050505050505050505060405180910390a15050505050565b6000615a818383614f94565b90506000811115615b0757600083815260296020526040902060030154615aaf90829063ffffffff610e6516565b600084815260296020908152604080832060030193909355602a815282822085835290522060020154615ae990829063ffffffff610e6516565b6000848152602a602090815260408083208684529091529020600201555b505050565b6000806002615b1c846001610e65565b811515615b2557fe5b0490508291505b8181101561495e578091506002615b4e8285811515615b4757fe5b0483610e65565b811515615b5757fe5b049050615b2c565b6000610ec08283614866565b6000848152602c602052604081206005015481908190615b9986670de0b6b3a764000063ffffffff61486616565b811515615ba257fe5b6000898152602c60205260409020600801549190049250615bca90839063ffffffff610e6516565b6000888152602c6020526040902060080155670de0b6b3a7640000615bf5838663ffffffff61486616565b811515615bfe57fe5b6000888152602a602090815260408083208c8452825280832060020154602c90925290912060080154929091049250615c51916145c9908490670de0b6b3a764000090614fdb908a63ffffffff61486616565b6000878152602a602090815260408083208b8452825280832060020193909355602c90522060050154615cb190670de0b6b3a764000090615c9990859063ffffffff61486616565b811515615ca257fe5b8791900463ffffffff610ec616565b979650505050505050565b6101406040519081016040528060008152602001600081526020016000600160a060020a03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b815481835581811115615b0757600083815260209020615b07918101908301615de2565b815481835581811115615b0757600083815260209020615b07918101908301615dff565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615da557805160ff1916838001178555615dd2565b82800160010185558215615dd2579182015b82811115615dd2578251825591602001919060010190615db7565b50615dde929150615de2565b5090565b615dfc91905b80821115615dde5760008155600101615de8565b90565b615dfc91905b80821115615dde576000615e198282615e22565b50600101615e05565b50805460018160011615610100020316600290046000825580601f10615e485750615e66565b601f016020900490600052602060002090810190615e669190615de2565b505600a165627a7a723058206303c514993f59e9543a9e5b5d8c466cf77ab746e016f2db1af633a084be202b0029"
}