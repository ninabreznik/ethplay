{
  "address": "0xfb918ca8543aefcb1754a656d3985b4fc4036860",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenVersion1",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-05\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two signed integers, reverts on overflow.\n    */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n\n        int256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n    */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two signed integers, reverts on overflow.\n    */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two signed integers, reverts on overflow.\n    */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract DetailedToken {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n  uint256 public totalSupply;\n}\n\ncontract KeyValueStorage {\n\n  mapping(address => mapping(bytes32 => uint256)) _uintStorage;\n  mapping(address => mapping(bytes32 => address)) _addressStorage;\n  mapping(address => mapping(bytes32 => bool)) _boolStorage;\n\n  /**** Get Methods ***********/\n\n  function getAddress(bytes32 key) public view returns (address) {\n      return _addressStorage[msg.sender][key];\n  }\n\n  function getUint(bytes32 key) public view returns (uint) {\n      return _uintStorage[msg.sender][key];\n  }\n\n  function getBool(bytes32 key) public view returns (bool) {\n      return _boolStorage[msg.sender][key];\n  }\n\n  /**** Set Methods ***********/\n\n  function setAddress(bytes32 key, address value) public {\n    _addressStorage[msg.sender][key] = value;\n  }\n\n  function setUint(bytes32 key, uint value) public {\n      _uintStorage[msg.sender][key] = value;\n  }\n\n  function setBool(bytes32 key, bool value) public {\n      _boolStorage[msg.sender][key] = value;\n  }\n\n  /**** Delete Methods ***********/\n\n  function deleteAddress(bytes32 key) public {\n      delete _addressStorage[msg.sender][key];\n  }\n\n  function deleteUint(bytes32 key) public {\n      delete _uintStorage[msg.sender][key];\n  }\n\n  function deleteBool(bytes32 key) public {\n      delete _boolStorage[msg.sender][key];\n  }\n\n}\n\ncontract Proxy is Ownable {\n\n  event Upgraded(address indexed implementation);\n\n  address internal _implementation;\n\n  function implementation() public view returns (address) {\n    return _implementation;\n  }\n\n  function upgradeTo(address impl) public onlyOwner {\n    require(_implementation != impl);\n    _implementation = impl;\n    emit Upgraded(impl);\n  }\n\n  function () payable public {\n    address _impl = implementation();\n    require(_impl != address(0));\n    bytes memory data = msg.data;\n\n    assembly {\n      let result := delegatecall(gas, _impl, add(data, 0x20), mload(data), 0, 0)\n      let size := returndatasize\n      let ptr := mload(0x40)\n      returndatacopy(ptr, 0, size)\n      switch result\n      case 0 { revert(ptr, size) }\n      default { return(ptr, size) }\n    }\n  }\n\n}\n\ncontract StorageStateful {\n\n  KeyValueStorage _storage;\n\n}\n\ncontract StorageConsumer is StorageStateful {\n\n  constructor(KeyValueStorage storage_) public {\n    _storage = storage_;\n  }\n\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n\ncontract TokenVersion1 is StorageConsumer, Proxy, DetailedToken {\n\n  constructor(KeyValueStorage storage_)\n    public\n    StorageConsumer(storage_)\n  {\n    // set some immutable state\n    name = \"Influence\";\n    symbol = \"INFLU\";\n    decimals = 18;\n    totalSupply = 10000000000 * 10 ** uint256(decimals);\n    \n    // set token owner in the key-value store\n    storage_.setAddress(\"owner\", msg.sender);\n    _storage.setUint(keccak256(\"balances\", msg.sender), totalSupply);\n  }\n\n}\n\ncontract TokenDelegate is StorageStateful {\n  using SafeMath for uint256;\n\n  function balanceOf(address owner) public view returns (uint256 balance) {\n    return getBalance(owner);\n  }\n\n  function getBalance(address balanceHolder) public view returns (uint256) {\n    return _storage.getUint(keccak256(\"balances\", balanceHolder));\n  }\n\n  function totalSupply() public view returns (uint256) {\n    return _storage.getUint(\"totalSupply\");\n  }\n\n  function addSupply(uint256 amount) internal {\n    _storage.setUint(\"totalSupply\", totalSupply().add(amount));\n  }\n  \n  function subSupply(uint256 amount) internal {\n      _storage.setUint(\"totalSupply\", totalSupply().sub(amount));\n  }\n\n  function addBalance(address balanceHolder, uint256 amount) internal {\n    setBalance(balanceHolder, getBalance(balanceHolder).add(amount));\n  }\n\n  function subBalance(address balanceHolder, uint256 amount) internal {\n    setBalance(balanceHolder, getBalance(balanceHolder).sub(amount));\n  }\n\n  function setBalance(address balanceHolder, uint256 amount) internal {\n    _storage.setUint(keccak256(\"balances\", balanceHolder), amount);\n  }\n\n}\n\ncontract TokenVersion2 is TokenDelegate {\n    \n    // This creates an array with all balances\n    mapping (address => mapping (address => uint256)) public allowance;\n  \n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    // This generates a public event on the blockchain that will notify clients\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n  /**\n   * Internal transfer, only can be called by this contract\n   */\n  function _transfer(address _from, address _to, uint _value) internal {\n      require(_to != address(0x0));\n      require(getBalance(_from) >= _value);\n      require(getBalance(_to) + _value > getBalance(_to));\n      uint previousBalances = getBalance(_from) + getBalance(_to);\n      subBalance(_from, _value);\n      addBalance(_to, _value);\n      emit Transfer(_from, _to, _value);\n      assert(getBalance(_from) + getBalance(_to) == previousBalances);\n  }\n\n  /**\n   * Transfer tokens\n   *\n   * Send `_value` tokens to `_to` from your account\n   *\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n      _transfer(msg.sender, _to, _value);\n      return true;\n  }\n\n  /**\n   * Transfer tokens from other address\n   *\n   * Send `_value` tokens to `_to` in behalf of `_from`\n   *\n   * @param _from The address of the sender\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n      require(_value <= allowance[_from][msg.sender]);     // Check allowance\n      allowance[_from][msg.sender] -= _value;\n      _transfer(_from, _to, _value);\n      return true;\n  }\n\n  /**\n   * Set allowance for other address\n   *\n   * Allows `_spender` to spend no more than `_value` tokens in your behalf\n   *\n   * @param _spender The address authorized to spend\n   * @param _value the max amount they can spend\n   */\n  function approve(address _spender, uint256 _value) public\n      returns (bool success) {\n      allowance[msg.sender][_spender] = _value;\n      emit Approval(msg.sender, _spender, _value);\n      return true;\n  }\n\n  /**\n   * Set allowance for other address and notify\n   *\n   * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n   *\n   * @param _spender The address authorized to spend\n   * @param _value the max amount they can spend\n   * @param _extraData some extra information to send to the approved contract\n   */\n  function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n      public\n      returns (bool success) {\n      tokenRecipient spender = tokenRecipient(_spender);\n      if (approve(_spender, _value)) {\n          spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n          return true;\n      }\n  }\n\n  /**\n   * Destroy tokens\n   *\n   * Remove `_value` tokens from the system irreversibly\n   *\n   * @param _value the amount of money to burn\n   */\n  function burn(uint256 _value) public returns (bool success) {\n      require(getBalance(msg.sender) >= _value);   // Check if the sender has enough\n      subBalance(msg.sender, _value);              // Subtract from the sender\n      subSupply(_value);                           // Updates totalSupply\n      emit Burn(msg.sender, _value);\n      return true;\n  }\n\n  /**\n   * Destroy tokens from other account\n   *\n   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n   *\n   * @param _from the address of the sender\n   * @param _value the amount of money to burn\n   */\n  function burnFrom(address _from, uint256 _value) public returns (bool success) {\n      require(getBalance(_from) >= _value);                // Check if the targeted balance is enough\n      require(_value <= allowance[_from][msg.sender]);    // Check allowance\n      subBalance(_from, _value);                          // Subtract from the targeted balance\n      allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n      \n      subSupply(_value);                                  // Update totalSupply\n      emit Burn(_from, _value);\n      return true;\n  }\n  \n}\n\ncontract TokenVersion3 is TokenDelegate {\n\n  modifier onlyOwner {\n    require(msg.sender == _storage.getAddress(\"owner\"));\n    _;\n  }\n\n  \n    // This creates an array with all balances\n    mapping (address => mapping (address => uint256)) public allowance;\n    \n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n  \n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    // This generates a public event on the blockchain that will notify clients\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n  /**\n   * Internal transfer, only can be called by this contract\n   */\n  function _transfer(address _from, address _to, uint _value) internal {\n      require(_to != address(0x0));\n      require(getBalance(_from) >= _value);\n      require(getBalance(_to) + _value > getBalance(_to));\n      uint previousBalances = getBalance(_from) + getBalance(_to);\n      subBalance(_from, _value);\n      addBalance(_to, _value);\n      emit Transfer(_from, _to, _value);\n      assert(getBalance(_from) + getBalance(_to) == previousBalances);\n  }\n\n  /**\n   * Transfer tokens\n   *\n   * Send `_value` tokens to `_to` from your account\n   *\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n      _transfer(msg.sender, _to, _value);\n      return true;\n  }\n\n  /**\n   * Transfer tokens from other address\n   *\n   * Send `_value` tokens to `_to` in behalf of `_from`\n   *\n   * @param _from The address of the sender\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n      require(_value <= allowance[_from][msg.sender]);     // Check allowance\n      allowance[_from][msg.sender] -= _value;\n      _transfer(_from, _to, _value);\n      return true;\n  }\n\n  /**\n   * Set allowance for other address\n   *\n   * Allows `_spender` to spend no more than `_value` tokens in your behalf\n   *\n   * @param _spender The address authorized to spend\n   * @param _value the max amount they can spend\n   */\n  function approve(address _spender, uint256 _value) public\n      returns (bool success) {\n      allowance[msg.sender][_spender] = _value;\n      emit Approval(msg.sender, _spender, _value);\n      return true;\n  }\n\n  /**\n   * Set allowance for other address and notify\n   *\n   * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n   *\n   * @param _spender The address authorized to spend\n   * @param _value the max amount they can spend\n   * @param _extraData some extra information to send to the approved contract\n   */\n  function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n      public\n      returns (bool success) {\n      tokenRecipient spender = tokenRecipient(_spender);\n      if (approve(_spender, _value)) {\n          spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n          return true;\n      }\n  }\n\n  /**\n   * Destroy tokens\n   *\n   * Remove `_value` tokens from the system irreversibly\n   *\n   * @param _value the amount of money to burn\n   */\n  function burn(uint256 _value) public returns (bool success) {\n      require(getBalance(msg.sender) >= _value);   // Check if the sender has enough\n      subBalance(msg.sender, _value);              // Subtract from the sender\n      subSupply(_value);                           // Updates totalSupply\n      emit Burn(msg.sender, _value);\n      return true;\n  }\n\n  /**\n   * Destroy tokens from other account\n   *\n   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n   *\n   * @param _from the address of the sender\n   * @param _value the amount of money to burn\n   */\n  function burnFrom(address _from, uint256 _value) public returns (bool success) {\n      require(getBalance(_from) >= _value);                // Check if the targeted balance is enough\n      require(_value <= allowance[_from][msg.sender]);    // Check allowance\n      subBalance(_from, _value);                          // Subtract from the targeted balance\n      allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n      \n      subSupply(_value);                                  // Update totalSupply\n      emit Burn(_from, _value);\n      return true;\n  }\n  \n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        addBalance(target, mintedAmount);\n        addSupply(mintedAmount);\n        emit Transfer(address(0), address(this), mintedAmount);\n        emit Transfer(address(this), target, mintedAmount);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610e248339810180604052810190808051906020019092919050505080806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36040805190810160405280600981526020017f496e666c75656e636500000000000000000000000000000000000000000000008152506003908051906020019061017e92919061041d565b506040805190810160405280600581526020017f494e464c55000000000000000000000000000000000000000000000000000000815250600490805190602001906101ca92919061041d565b506012600560006101000a81548160ff021916908360ff160217905550600560009054906101000a900460ff1660ff16600a0a6402540be400026006819055508073ffffffffffffffffffffffffffffffffffffffff1663ca446dd9336040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180807f6f776e65720000000000000000000000000000000000000000000000000000008152506020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156102cd57600080fd5b505af11580156102e1573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2a4853a3360405180807f62616c616e6365730000000000000000000000000000000000000000000000008152506008018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390206006546040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b1580156103ff57600080fd5b505af1158015610413573d6000803e3d6000fd5b50505050506104c2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061045e57805160ff191683800117855561048c565b8280016001018555821561048c579182015b8281111561048b578251825591602001919060010190610470565b5b509050610499919061049d565b5090565b6104bf91905b808211156104bb5760008160009055506001016104a3565b5090565b90565b610953806104d16000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461014a57806318160ddd146101da578063313ce567146102055780633659cfe6146102365780635c60da1b14610279578063715018a6146102d05780638da5cb5b146102e75780638f32d59b1461033e57806395d89b411461036d578063f2fde38b146103fd575b600060606100b0610440565b9150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156100ee57600080fd5b6000368080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509050600080825160208401855af43d604051816000823e8260008114610146578282f35b8282fd5b34801561015657600080fd5b5061015f61046a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019f578082015181840152602081019050610184565b50505050905090810190601f1680156101cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e657600080fd5b506101ef610508565b6040518082815260200191505060405180910390f35b34801561021157600080fd5b5061021a61050e565b604051808260ff1660ff16815260200191505060405180910390f35b34801561024257600080fd5b50610277600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610521565b005b34801561028557600080fd5b5061028e610440565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102dc57600080fd5b506102e5610618565b005b3480156102f357600080fd5b506102fc6106ec565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561034a57600080fd5b50610353610716565b604051808215151515815260200191505060405180910390f35b34801561037957600080fd5b5061038261076e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103c25780820151818401526020810190506103a7565b50505050905090810190601f1680156103ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561040957600080fd5b5061043e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061080c565b005b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105005780601f106104d557610100808354040283529160200191610500565b820191906000526020600020905b8154815290600101906020018083116104e357829003601f168201915b505050505081565b60065481565b600560009054906101000a900460ff1681565b610529610716565b151561053457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561059157600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b610620610716565b151561062b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108045780601f106107d957610100808354040283529160200191610804565b820191906000526020600020905b8154815290600101906020018083116107e757829003601f168201915b505050505081565b610814610716565b151561081f57600080fd5b6108288161082b565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561086757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820641c24661440e65b5e149923f7d35a0a8945ca927dd998b5469676d2b0d9940000290000000000000000000000002ec8280e8ddfe062585eac2287c529a06a4dfc17",
  "constructorArguments": "0000000000000000000000002ec8280e8ddfe062585eac2287c529a06a4dfc17"
}