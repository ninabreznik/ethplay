{
  "address": "0x5d22c2bc59ed558abaf2bb680001a5e449f5b60e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "QBTCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-16\n*/\n\npragma solidity ^0.4.24;\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: contracts/QBTCoin.sol\n\ncontract QBTCoin is StandardToken, BurnableToken, Ownable, MintableToken {\n    using SafeMath for uint256;\n\n    string public constant symbol = \"QBT\";\n    string public constant name = \"QBT Coin\";\n    uint8 public constant decimals = 18;\n    uint256 public constant INITIAL_SUPPLY = 2500000000 * (10 ** uint256(decimals));\n    uint256 public constant TOKEN_SALE_ALLOWANCE = 1250000000 * (10 ** uint256(decimals));\n    uint256 public constant ADMIN_ALLOWANCE = INITIAL_SUPPLY - TOKEN_SALE_ALLOWANCE;\n\n    // Address of token administrator\n    address public adminAddr;\n\n    // Address of token sale contract\n    address public tokenSaleAddr;\n\n    // Enable transfer after token sale is completed\n    bool public transferEnabled = false;\n\n    // Accounts to be locked for certain period\n    mapping(address => uint256) private lockedAccounts;\n\n    /*\n     *\n     * Permissions when transferEnabled is false :\n     *              ContractOwner    Admin    SaleCon2ract    Others\n     * transfer            x           v            v           x\n     * transferFrom        x           v            v           x\n     *\n     * Permissions when transferEnabled is true :\n     *              ContractOwner    Admin    SaleContract    Others\n     * transfer            v           v            v           v\n     * transferFrom        v           v            v           v\n     *\n     */\n\n    /*\n     * Check if token transfer is allowed\n     * Permission table above is result of this modifier\n     */\n    modifier onlyWhenTransferAllowed() {\n        require(transferEnabled == true\n            || msg.sender == adminAddr\n            || msg.sender == tokenSaleAddr);\n        _;\n    }\n\n    /*\n     * Check if token sale address is not set\n     */\n    modifier onlyWhenTokenSaleAddrNotSet() {\n        require(tokenSaleAddr == address(0x0));\n        _;\n    }\n\n    /*\n     * Check if token transfer destination is valid\n     */\n    modifier onlyValidDestination(address to) {\n        require(to != address(0x0)\n            && to != address(this)\n            && to != owner\n            && to != adminAddr\n            && to != tokenSaleAddr);\n        _;\n    }\n\n    modifier onlyAllowedAmount(address from, uint256 amount) {\n        require(balances[from].sub(amount) >= lockedAccounts[from]);\n        _;\n    }\n    /*\n     * The constructor of QBTCoin contract\n     *\n     * @param _adminAddr: Address of token administrator\n     */\n    constructor(address _adminAddr) public {\n        totalSupply_ = INITIAL_SUPPLY;\n\n        balances[msg.sender] = totalSupply_;\n        emit Transfer(address(0x0), msg.sender, totalSupply_);\n\n        adminAddr = _adminAddr;\n        approve(adminAddr, ADMIN_ALLOWANCE);\n    }\n\n    /*\n     * Change admin address \n     */\n    function changeAdmin(address _adminAddr) public onlyOwner {\n        adminAddr = _adminAddr;\n    }\n\n    /*\n     * Set amount of token sale to approve allowance for sale contract\n     *\n     * @param _tokenSaleAddr: Address of sale contract\n     * @param _amountForSale: Amount of token for sale\n     */\n    function setTokenSaleAmount(address _tokenSaleAddr, uint256 amountForSale)\n        external\n        onlyOwner\n        onlyWhenTokenSaleAddrNotSet\n    {\n        require(!transferEnabled);\n\n        uint256 amount = (amountForSale == 0) ? TOKEN_SALE_ALLOWANCE : amountForSale;\n        require(amount <= TOKEN_SALE_ALLOWANCE);\n\n        approve(_tokenSaleAddr, amount);\n        tokenSaleAddr = _tokenSaleAddr;\n    }\n\n    /*\n     * Set transferEnabled variable to true\n     */\n    function enableTransfer() external onlyOwner {\n        transferEnabled = true;\n        approve(tokenSaleAddr, 0);\n    }\n\n    /*\n     * Set transferEnabled variable to false\n     */\n    function disableTransfer() external onlyOwner {\n        transferEnabled = false;\n    }\n\n    /*\n     * Transfer token from message sender to another\n     *\n     * @param to: Destination address\n     * @param value: Amount of QBT token to transfer\n     */\n    function transfer(address to, uint256 value)\n        public\n        onlyWhenTransferAllowed\n        onlyValidDestination(to)\n        onlyAllowedAmount(msg.sender, value)\n        returns (bool)\n    {\n        return super.transfer(to, value);\n    }\n\n    /*\n     * Transfer token from 'from' address to 'to' addreess\n     *\n     * @param from: Origin address\n     * @param to: Destination address\n     * @param value: Amount of QBT Coin to transfer\n     */\n    function transferFrom(address from, address to, uint256 value)\n        public\n        onlyWhenTransferAllowed\n        onlyValidDestination(to)\n        onlyAllowedAmount(from, value)\n        returns (bool)\n    {\n        return super.transferFrom(from, to, value);\n    }\n\n    /*\n     * Burn token, only owner is allowed\n     *\n     * @param value: Amount of QBT Coin to burn\n     */\n    function burn(uint256 value) public onlyOwner {\n        require(transferEnabled);\n        super.burn(value);\n    }\n\n    function mint(address to, uint256 value) public onlyOwner returns(bool) {\n        require(transferEnabled);\n        super.mint(to, value);\n    }\n\n    // function mint(uint256 value) public onlyOwner {\n        // require(transferEnabled);\n    //     super.mint(value);\n    // }\n    /*\n     * Disable transfering tokens more than allowed amount from certain account\n     *\n     * @param addr: Account to set allowed amount\n     * @param amount: Amount of tokens to allow\n     */\n    function lockAccount(address addr, uint256 amount)\n        external\n        onlyOwner\n        onlyValidDestination(addr)\n    {\n        require(amount > 0);\n        lockedAccounts[addr] = amount;\n    }\n\n    /*\n     * Enable transfering tokens of locked account\n     *\n     * @param addr: Account to unlock\n     */\n\n    function unlockAccount(address addr)\n        external\n        onlyOwner\n        onlyValidDestination(addr)\n    {\n        lockedAccounts[addr] = 0;\n    }\n}",
  "bytecode": "60806040526003805460a060020a60ff021990811690915560058054909116905534801561002c57600080fd5b506040516020806115bb833981016040818152915160038054600160a060020a031916339081179091556b0813f3978f8940984400000060018190556000828152602081815286822083905591855294519294919391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a360048054600160a060020a031916600160a060020a0383811691909117918290556100ee91166b0409f9cbc7c4a04c220000006401000000006100f5810204565b505061015b565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6114518061016a6000396000f30060806040526004361061017f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461018457806306fdde03146101ad578063095ea7b31461023757806318160ddd1461025b57806323b872dd146102825780632ff2e9dc146102ac578063313ce567146102c157806340c10f19146102ec57806342966c68146103105780634cd412d51461032a578063661884631461033f57806370a0823114610363578063715018a6146103845780637d64bcb41461039957806381830593146103ae5780638da5cb5b146103df5780638f283970146103f4578063905295e31461041557806395d89b41146104365780639e0a22801461044b578063a9059cbb14610460578063aa54ad3514610484578063b187984f14610499578063bf620a45146104ae578063d73dd623146104d2578063dd62ed3e146104f6578063f1b50c1d1461051d578063f2dc887814610532578063f2fde38b14610556578063fc53f9581461044b575b600080fd5b34801561019057600080fd5b50610199610577565b604080519115158252519081900360200190f35b3480156101b957600080fd5b506101c2610587565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101fc5781810151838201526020016101e4565b50505050905090810190601f1680156102295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024357600080fd5b50610199600160a060020a03600435166024356105be565b34801561026757600080fd5b50610270610624565b60408051918252519081900360200190f35b34801561028e57600080fd5b50610199600160a060020a036004358116906024351660443561062a565b3480156102b857600080fd5b50610270610748565b3480156102cd57600080fd5b506102d6610758565b6040805160ff9092168252519081900360200190f35b3480156102f857600080fd5b50610199600160a060020a036004351660243561075d565b34801561031c57600080fd5b506103286004356107a0565b005b34801561033657600080fd5b506101996107db565b34801561034b57600080fd5b50610199600160a060020a03600435166024356107eb565b34801561036f57600080fd5b50610270600160a060020a03600435166108da565b34801561039057600080fd5b506103286108f5565b3480156103a557600080fd5b50610199610963565b3480156103ba57600080fd5b506103c36109e7565b60408051600160a060020a039092168252519081900360200190f35b3480156103eb57600080fd5b506103c36109f6565b34801561040057600080fd5b50610328600160a060020a0360043516610a05565b34801561042157600080fd5b50610328600160a060020a0360043516610a4b565b34801561044257600080fd5b506101c2610af8565b34801561045757600080fd5b50610270610b2f565b34801561046c57600080fd5b50610199600160a060020a0360043516602435610b3f565b34801561049057600080fd5b506103c3610c51565b3480156104a557600080fd5b50610328610c60565b3480156104ba57600080fd5b50610328600160a060020a0360043516602435610c97565b3480156104de57600080fd5b50610199600160a060020a0360043516602435610d53565b34801561050257600080fd5b50610270600160a060020a0360043581169060243516610dec565b34801561052957600080fd5b50610328610e17565b34801561053e57600080fd5b50610328600160a060020a0360043516602435610e68565b34801561056257600080fd5b50610328600160a060020a0360043516610f21565b60035460a060020a900460ff1681565b60408051808201909152600881527f51425420436f696e000000000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b60055460009060a060020a900460ff161515600114806106545750600454600160a060020a031633145b806106695750600554600160a060020a031633145b151561067457600080fd5b82600160a060020a038116158015906106965750600160a060020a0381163014155b80156106b05750600354600160a060020a03828116911614155b80156106ca5750600454600160a060020a03828116911614155b80156106e45750600554600160a060020a03828116911614155b15156106ef57600080fd5b600160a060020a038516600090815260066020908152604080832054918390529091205486918591610727908363ffffffff610f4116565b101561073257600080fd5b61073d878787610f53565b979650505050505050565b6b0813f3978f8940984400000081565b601281565b600354600090600160a060020a0316331461077757600080fd5b60055460a060020a900460ff16151561078f57600080fd5b61079983836110b6565b5092915050565b600354600160a060020a031633146107b757600080fd5b60055460a060020a900460ff1615156107cf57600080fd5b6107d8816111ae565b50565b60055460a060020a900460ff1681565b336000908152600260209081526040808320600160a060020a038616845290915281205480831061083f57336000908152600260209081526040808320600160a060020a0388168452909152812055610874565b61084f818463ffffffff610f4116565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a0316331461090c57600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a0316331461097d57600080fd5b60035460a060020a900460ff161561099457600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600454600160a060020a031681565b600354600160a060020a031681565b600354600160a060020a03163314610a1c57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a03163314610a6257600080fd5b80600160a060020a03811615801590610a845750600160a060020a0381163014155b8015610a9e5750600354600160a060020a03828116911614155b8015610ab85750600454600160a060020a03828116911614155b8015610ad25750600554600160a060020a03828116911614155b1515610add57600080fd5b50600160a060020a0316600090815260066020526040812055565b60408051808201909152600381527f5142540000000000000000000000000000000000000000000000000000000000602082015281565b6b0409f9cbc7c4a04c2200000081565b60055460009060a060020a900460ff16151560011480610b695750600454600160a060020a031633145b80610b7e5750600554600160a060020a031633145b1515610b8957600080fd5b82600160a060020a03811615801590610bab5750600160a060020a0381163014155b8015610bc55750600354600160a060020a03828116911614155b8015610bdf5750600454600160a060020a03828116911614155b8015610bf95750600554600160a060020a03828116911614155b1515610c0457600080fd5b336000818152600660209081526040808320549183905290912054859190610c32908363ffffffff610f4116565b1015610c3d57600080fd5b610c4786866111b8565b9695505050505050565b600554600160a060020a031681565b600354600160a060020a03163314610c7757600080fd5b6005805474ff000000000000000000000000000000000000000019169055565b600354600160a060020a03163314610cae57600080fd5b81600160a060020a03811615801590610cd05750600160a060020a0381163014155b8015610cea5750600354600160a060020a03828116911614155b8015610d045750600454600160a060020a03828116911614155b8015610d1e5750600554600160a060020a03828116911614155b1515610d2957600080fd5b60008211610d3657600080fd5b50600160a060020a03909116600090815260066020526040902055565b336000908152600260209081526040808320600160a060020a0386168452909152812054610d87908363ffffffff61128516565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610e2e57600080fd5b6005805474ff0000000000000000000000000000000000000000191660a060020a17908190556107d890600160a060020a031660006105be565b600354600090600160a060020a03163314610e8257600080fd5b600554600160a060020a031615610e9857600080fd5b60055460a060020a900460ff1615610eaf57600080fd5b8115610ebb5781610ec9565b6b0409f9cbc7c4a04c220000005b90506b0409f9cbc7c4a04c22000000811115610ee457600080fd5b610eee83826105be565b50506005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03939093169290921790915550565b600354600160a060020a03163314610f3857600080fd5b6107d881611298565b600082821115610f4d57fe5b50900390565b600160a060020a038316600090815260208190526040812054821115610f7857600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610fa857600080fd5b600160a060020a0383161515610fbd57600080fd5b600160a060020a038416600090815260208190526040902054610fe6908363ffffffff610f4116565b600160a060020a03808616600090815260208190526040808220939093559085168152205461101b908363ffffffff61128516565b600160a060020a0380851660009081526020818152604080832094909455918716815260028252828120338252909152205461105d908363ffffffff610f4116565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020611406833981519152929181900390910190a35060019392505050565b600354600090600160a060020a031633146110d057600080fd5b60035460a060020a900460ff16156110e757600080fd5b6001546110fa908363ffffffff61128516565b600155600160a060020a038316600090815260208190526040902054611126908363ffffffff61128516565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206114068339815191529181900360200190a350600192915050565b6107d83382611316565b336000908152602081905260408120548211156111d457600080fd5b600160a060020a03831615156111e957600080fd5b33600090815260208190526040902054611209908363ffffffff610f4116565b3360009081526020819052604080822092909255600160a060020a0385168152205461123b908363ffffffff61128516565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233926000805160206114068339815191529281900390910190a350600192915050565b8181018281101561129257fe5b92915050565b600160a060020a03811615156112ad57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03821660009081526020819052604090205481111561133b57600080fd5b600160a060020a038216600090815260208190526040902054611364908263ffffffff610f4116565b600160a060020a038316600090815260208190526040902055600154611390908263ffffffff610f4116565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206114068339815191529181900360200190a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058202d315f6a4d82d41d95d7851683a07c5d411850e7d2a2f83dd40c31477ad14f1f0029000000000000000000000000b0989cfe189f1140f06e4c00514b04816c263944",
  "constructorArguments": "000000000000000000000000b0989cfe189f1140f06e4c00514b04816c263944"
}