{
  "address": "0x1776651f58a17a50098d31ba3c3cd259c1903f7a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "QuotationData",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/* Copyright (C) 2017 NexusMutual.io\n\n  This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\n\npragma solidity 0.5.7;\n\nimport \"./Iupgradable.sol\";\nimport \"./SafeMath.sol\";\n\n\ncontract QuotationData is Iupgradable {\n    using SafeMath for uint;\n\n    enum HCIDStatus { NA, kycPending, kycPass, kycFailedOrRefunded, kycPassNoCover }\n\n    enum CoverStatus { Active, ClaimAccepted, ClaimDenied, CoverExpired, ClaimSubmitted, Requested }\n\n    struct Cover {\n        address payable memberAddress;\n        bytes4 currencyCode;\n        uint sumAssured;\n        uint16 coverPeriod;\n        uint validUntil;\n        address scAddress;\n        uint premiumNXM;\n    }\n\n    struct HoldCover {\n        uint holdCoverId;\n        address payable userAddress;\n        address scAddress;\n        bytes4 coverCurr;\n        uint[] coverDetails;\n        uint16 coverPeriod;\n    }\n\n    address public authQuoteEngine;\n  \n    mapping(bytes4 => uint) internal currencyCSA;\n    mapping(address => uint[]) internal userCover;\n    mapping(address => uint[]) public userHoldedCover;\n    mapping(address => bool) public refundEligible;\n    mapping(address => mapping(bytes4 => uint)) internal currencyCSAOfSCAdd;\n    mapping(uint => uint8) public coverStatus;\n    mapping(uint => uint) public holdedCoverIDStatus;\n    mapping(uint => bool) public timestampRepeated; \n    \n\n    Cover[] internal allCovers;\n    HoldCover[] internal allCoverHolded;\n\n    uint public stlp;\n    uint public stl;\n    uint public pm;\n    uint public minDays;\n    uint public tokensRetained;\n    address public kycAuthAddress;\n\n    event CoverDetailsEvent(\n        uint indexed cid,\n        address scAdd,\n        uint sumAssured,\n        uint expiry,\n        uint premium,\n        uint premiumNXM,\n        bytes4 curr\n    );\n\n    event CoverStatusEvent(uint indexed cid, uint8 statusNum);\n\n    constructor(address _authQuoteAdd, address _kycAuthAdd) public {\n        authQuoteEngine = _authQuoteAdd;\n        kycAuthAddress = _kycAuthAdd;\n        stlp = 90;\n        stl = 100;\n        pm = 30;\n        minDays = 30;\n        tokensRetained = 10;\n        allCovers.push(Cover(address(0), \"0x00\", 0, 0, 0, address(0), 0));\n        uint[] memory arr = new uint[](1);\n        allCoverHolded.push(HoldCover(0, address(0), address(0), 0x00, arr, 0));\n\n    }\n    \n    /// @dev Adds the amount in Total Sum Assured of a given currency of a given smart contract address.\n    /// @param _add Smart Contract Address.\n    /// @param _amount Amount to be added.\n    function addInTotalSumAssuredSC(address _add, bytes4 _curr, uint _amount) external onlyInternal {\n        currencyCSAOfSCAdd[_add][_curr] = currencyCSAOfSCAdd[_add][_curr].add(_amount);\n    }\n\n    /// @dev Subtracts the amount from Total Sum Assured of a given currency and smart contract address.\n    /// @param _add Smart Contract Address.\n    /// @param _amount Amount to be subtracted.\n    function subFromTotalSumAssuredSC(address _add, bytes4 _curr, uint _amount) external onlyInternal {\n        currencyCSAOfSCAdd[_add][_curr] = currencyCSAOfSCAdd[_add][_curr].sub(_amount);\n    }\n    \n    /// @dev Subtracts the amount from Total Sum Assured of a given currency.\n    /// @param _curr Currency Name.\n    /// @param _amount Amount to be subtracted.\n    function subFromTotalSumAssured(bytes4 _curr, uint _amount) external onlyInternal {\n        currencyCSA[_curr] = currencyCSA[_curr].sub(_amount);\n    }\n\n    /// @dev Adds the amount in Total Sum Assured of a given currency.\n    /// @param _curr Currency Name.\n    /// @param _amount Amount to be added.\n    function addInTotalSumAssured(bytes4 _curr, uint _amount) external onlyInternal {\n        currencyCSA[_curr] = currencyCSA[_curr].add(_amount);\n    }\n\n    /// @dev sets bit for timestamp to avoid replay attacks.\n    function setTimestampRepeated(uint _timestamp) external onlyInternal {\n        timestampRepeated[_timestamp] = true;\n    }\n    \n    /// @dev Creates a blank new cover.\n    function addCover(\n        uint16 _coverPeriod,\n        uint _sumAssured,\n        address payable _userAddress,\n        bytes4 _currencyCode,\n        address _scAddress,\n        uint premium,\n        uint premiumNXM\n    )   \n        external\n        onlyInternal\n    {\n        uint expiryDate = now.add(uint(_coverPeriod).mul(1 days));\n        allCovers.push(Cover(_userAddress, _currencyCode,\n                _sumAssured, _coverPeriod, expiryDate, _scAddress, premiumNXM));\n        uint cid = allCovers.length.sub(1);\n        userCover[_userAddress].push(cid);\n        emit CoverDetailsEvent(cid, _scAddress, _sumAssured, expiryDate, premium, premiumNXM, _currencyCode);\n    }\n\n    /// @dev create holded cover which will process after verdict of KYC.\n    function addHoldCover(\n        address payable from,\n        address scAddress,\n        bytes4 coverCurr, \n        uint[] calldata coverDetails,\n        uint16 coverPeriod\n    )   \n        external\n        onlyInternal\n    {\n        uint holdedCoverLen = allCoverHolded.length;\n        holdedCoverIDStatus[holdedCoverLen] = uint(HCIDStatus.kycPending);             \n        allCoverHolded.push(HoldCover(holdedCoverLen, from, scAddress, \n            coverCurr, coverDetails, coverPeriod));\n        userHoldedCover[from].push(allCoverHolded.length.sub(1));\n    \n    }\n\n    ///@dev sets refund eligible bit.\n    ///@param _add user address.\n    ///@param status indicates if user have pending kyc.\n    function setRefundEligible(address _add, bool status) external onlyInternal {\n        refundEligible[_add] = status;\n    }\n\n    /// @dev to set current status of particular holded coverID (1 for not completed KYC,\n    /// 2 for KYC passed, 3 for failed KYC or full refunded,\n    /// 4 for KYC completed but cover not processed)\n    function setHoldedCoverIDStatus(uint holdedCoverID, uint status) external onlyInternal {\n        holdedCoverIDStatus[holdedCoverID] = status;\n    }\n\n    /**\n     * @dev to set address of kyc authentication \n     * @param _add is the new address\n     */\n    function setKycAuthAddress(address _add) external onlyInternal {\n        kycAuthAddress = _add;\n    }\n\n    /// @dev Changes authorised address for generating quote off chain.\n    function changeAuthQuoteEngine(address _add) external onlyInternal {\n        authQuoteEngine = _add;\n    }\n\n    /**\n     * @dev Gets Uint Parameters of a code\n     * @param code whose details we want\n     * @return string value of the code\n     * @return associated amount (time or perc or value) to the code\n     */\n    function getUintParameters(bytes8 code) external view returns(bytes8 codeVal, uint val) {\n        codeVal = code;\n\n        if (code == \"STLP\") {\n            val = stlp;\n\n        } else if (code == \"STL\") {\n            \n            val = stl;\n\n        } else if (code == \"PM\") {\n\n            val = pm;\n\n        } else if (code == \"QUOMIND\") {\n\n            val = minDays;\n\n        } else if (code == \"QUOTOK\") {\n\n            val = tokensRetained;\n\n        }\n        \n    }\n\n    /// @dev Gets Product details.\n    /// @return  _minDays minimum cover period.\n    /// @return  _PM Profit margin.\n    /// @return  _STL short term Load.\n    /// @return  _STLP short term load period.\n    function getProductDetails()\n        external\n        view\n        returns (\n            uint _minDays,\n            uint _pm,\n            uint _stl,\n            uint _stlp\n        )\n    {\n\n        _minDays = minDays;\n        _pm = pm;\n        _stl = stl;\n        _stlp = stlp;\n    }\n\n    /// @dev Gets total number covers created till date.\n    function getCoverLength() external view returns(uint len) {\n        return (allCovers.length);\n    }\n\n    /// @dev Gets Authorised Engine address.\n    function getAuthQuoteEngine() external view returns(address _add) {\n        _add = authQuoteEngine;\n    }\n\n    /// @dev Gets the Total Sum Assured amount of a given currency.\n    function getTotalSumAssured(bytes4 _curr) external view returns(uint amount) {\n        amount = currencyCSA[_curr];\n    }\n\n    /// @dev Gets all the Cover ids generated by a given address.\n    /// @param _add User's address.\n    /// @return allCover array of covers.\n    function getAllCoversOfUser(address _add) external view returns(uint[] memory allCover) {\n        return (userCover[_add]);\n    }\n\n    /// @dev Gets total number of covers generated by a given address\n    function getUserCoverLength(address _add) external view returns(uint len) {\n        len = userCover[_add].length;\n    }\n\n    /// @dev Gets the status of a given cover.\n    function getCoverStatusNo(uint _cid) external view returns(uint8) {\n        return coverStatus[_cid];\n    }\n\n    /// @dev Gets the Cover Period (in days) of a given cover.\n    function getCoverPeriod(uint _cid) external view returns(uint32 cp) {\n        cp = allCovers[_cid].coverPeriod;\n    }\n\n    /// @dev Gets the Sum Assured Amount of a given cover.\n    function getCoverSumAssured(uint _cid) external view returns(uint sa) {\n        sa = allCovers[_cid].sumAssured;\n    }\n\n    /// @dev Gets the Currency Name in which a given cover is assured.\n    function getCurrencyOfCover(uint _cid) external view returns(bytes4 curr) {\n        curr = allCovers[_cid].currencyCode;\n    }\n\n    /// @dev Gets the validity date (timestamp) of a given cover.\n    function getValidityOfCover(uint _cid) external view returns(uint date) {\n        date = allCovers[_cid].validUntil;\n    }\n\n    /// @dev Gets Smart contract address of cover.\n    function getscAddressOfCover(uint _cid) external view returns(uint, address) {\n        return (_cid, allCovers[_cid].scAddress);\n    }\n\n    /// @dev Gets the owner address of a given cover.\n    function getCoverMemberAddress(uint _cid) external view returns(address payable _add) {\n        _add = allCovers[_cid].memberAddress;\n    }\n\n    /// @dev Gets the premium amount of a given cover in NXM.\n    function getCoverPremiumNXM(uint _cid) external view returns(uint _premiumNXM) {\n        _premiumNXM = allCovers[_cid].premiumNXM;\n    }\n\n    /// @dev Provides the details of a cover Id\n    /// @param _cid cover Id\n    /// @return memberAddress cover user address.\n    /// @return scAddress smart contract Address \n    /// @return currencyCode currency of cover\n    /// @return sumAssured sum assured of cover\n    /// @return premiumNXM premium in NXM\n    function getCoverDetailsByCoverID1(\n        uint _cid\n    ) \n        external\n        view\n        returns (\n            uint cid,\n            address _memberAddress,\n            address _scAddress,\n            bytes4 _currencyCode,\n            uint _sumAssured,  \n            uint premiumNXM \n        ) \n    {\n        return (\n            _cid,\n            allCovers[_cid].memberAddress,\n            allCovers[_cid].scAddress,\n            allCovers[_cid].currencyCode,\n            allCovers[_cid].sumAssured,\n            allCovers[_cid].premiumNXM\n        );\n    }\n\n    /// @dev Provides details of a cover Id\n    /// @param _cid cover Id\n    /// @return status status of cover.\n    /// @return sumAssured Sum assurance of cover.\n    /// @return coverPeriod Cover Period of cover (in days).\n    /// @return validUntil is validity of cover.\n    function getCoverDetailsByCoverID2(\n        uint _cid\n    )\n        external\n        view\n        returns (\n            uint cid,\n            uint8 status,\n            uint sumAssured,\n            uint16 coverPeriod,\n            uint validUntil\n        ) \n    {\n\n        return (\n            _cid,\n            coverStatus[_cid],\n            allCovers[_cid].sumAssured,\n            allCovers[_cid].coverPeriod,\n            allCovers[_cid].validUntil\n        );\n    }\n\n    /// @dev Provides details of a holded cover Id\n    /// @param _hcid holded cover Id\n    /// @return scAddress SmartCover address of cover.\n    /// @return coverCurr currency of cover.\n    /// @return coverPeriod Cover Period of cover (in days).\n    function getHoldedCoverDetailsByID1(\n        uint _hcid\n    )\n        external \n        view\n        returns (\n            uint hcid,\n            address scAddress,\n            bytes4 coverCurr,\n            uint16 coverPeriod\n        )\n    {\n        return (\n            _hcid,\n            allCoverHolded[_hcid].scAddress,\n            allCoverHolded[_hcid].coverCurr, \n            allCoverHolded[_hcid].coverPeriod\n        );\n    }\n\n    /// @dev Gets total number holded covers created till date.\n    function getUserHoldedCoverLength(address _add) external view returns (uint) {\n        return userHoldedCover[_add].length;\n    }\n\n    /// @dev Gets holded cover index by index of user holded covers.\n    function getUserHoldedCoverByIndex(address _add, uint index) external view returns (uint) {\n        return userHoldedCover[_add][index];\n    }\n\n    /// @dev Provides the details of a holded cover Id\n    /// @param _hcid holded cover Id\n    /// @return memberAddress holded cover user address.\n    /// @return coverDetails array contains SA, Cover Currency Price,Price in NXM, Expiration time of Qoute.    \n    function getHoldedCoverDetailsByID2(\n        uint _hcid\n    ) \n        external\n        view\n        returns (\n            uint hcid,\n            address payable memberAddress, \n            uint[] memory coverDetails\n        )\n    {\n        return (\n            _hcid,\n            allCoverHolded[_hcid].userAddress,\n            allCoverHolded[_hcid].coverDetails\n        );\n    }\n\n    /// @dev Gets the Total Sum Assured amount of a given currency and smart contract address.\n    function getTotalSumAssuredSC(address _add, bytes4 _curr) external view returns(uint amount) {\n        amount = currencyCSAOfSCAdd[_add][_curr];\n    }\n\n    //solhint-disable-next-line\n    function changeDependentContractAddress() public {}\n\n    /// @dev Changes the status of a given cover.\n    /// @param _cid cover Id.\n    /// @param _stat New status.\n    function changeCoverStatusNo(uint _cid, uint8 _stat) public onlyInternal {\n        coverStatus[_cid] = _stat;\n        emit CoverStatusEvent(_cid, _stat);\n    }\n\n    /**\n     * @dev Updates Uint Parameters of a code\n     * @param code whose details we want to update\n     * @param val value to set\n     */\n    function updateUintParameters(bytes8 code, uint val) public {\n\n        require(ms.checkIsAuthToGoverned(msg.sender));\n        if (code == \"STLP\") {\n            _changeSTLP(val);\n\n        } else if (code == \"STL\") {\n            \n            _changeSTL(val);\n\n        } else if (code == \"PM\") {\n\n            _changePM(val);\n\n        } else if (code == \"QUOMIND\") {\n\n            _changeMinDays(val);\n\n        } else if (code == \"QUOTOK\") {\n\n            _setTokensRetained(val);\n\n        } else {\n\n            revert(\"Invalid param code\");\n        }\n        \n    }\n    \n    /// @dev Changes the existing Profit Margin value\n    function _changePM(uint _pm) internal {\n        pm = _pm;\n    }\n\n    /// @dev Changes the existing Short Term Load Period (STLP) value.\n    function _changeSTLP(uint _stlp) internal {\n        stlp = _stlp;\n    }\n\n    /// @dev Changes the existing Short Term Load (STL) value.\n    function _changeSTL(uint _stl) internal {\n        stl = _stl;\n    }\n\n    /// @dev Changes the existing Minimum cover period (in days)\n    function _changeMinDays(uint _days) internal {\n        minDays = _days;\n    }\n    \n    /**\n     * @dev to set the the amount of tokens retained \n     * @param val is the amount retained\n     */\n    function _setTokensRetained(uint val) internal {\n        tokensRetained = val;\n    }\n}\n",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000003b9d98afa7b620400d1ab9ed9e83393f792154f70000000000000000000000003b9d98afa7b620400d1ab9ed9e83393f792154f7"
}