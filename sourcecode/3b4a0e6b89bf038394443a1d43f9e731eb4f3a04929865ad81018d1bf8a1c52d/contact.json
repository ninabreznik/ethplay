{
  "address": "0xa792804a56bcc4612d0b1263c2fd08bacb2597c0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-23\n*/\n\npragma solidity ^0.4.23;\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  address master;\n\n  bool public paused;\n\n\n  modifier isMaster {\n      require(msg.sender == master);\n      _;\n  }\n\n  modifier isPause {\n   require(paused == true);\n   _;\n }\n\n  modifier isNotPause {\n   require(paused == false);\n   _;\n  }\n\n\n\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public isNotPause returns (bool) {\n    require(_spender != address(0));\n    require(balanceOf(msg.sender) >= _value);\n    require (balanceOf(_spender) + _value > balanceOf(_spender));\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public isNotPause\n    returns (bool)\n  {\n    require(_spender != address(0));\n    require(balanceOf(msg.sender) >= _addedValue);\n    require (allowed[msg.sender][_spender] + _addedValue > allowed[msg.sender][_spender]);\n    allowed[msg.sender][_spender] = (\n    allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public isNotPause\n    returns (bool)\n  {\n    require(_spender != address(0));\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract NToken is StandardToken {\n\n  string public constant name = \"NToken\";\n  string public constant symbol = \"NT\";\n  uint8 public constant decimals = 8;\n\n  uint256 public constant INITIAL_SUPPLY = 660000000 * (10 ** uint256(decimals));\n  address coinbase;\n\n  address private constant project_foundation_address     = 0x9F9bed103cCa9352C7a69A05f7b789a9fC32f5C7;\n  uint8   private constant project_foundation_percent     = 10;\n  uint256 private constant project_foundation_starttime   = 1558627200;\n  uint256 private constant project_foundation_interval    = 94608000;\n  uint256 private constant project_foundation_periods     = 1;\n\n\n\n  address private constant community_reward_address       = 0x9F9bed103cCa9352C7a69A05f7b789a9fC32f5C7;\n  uint8   private constant community_reward_percent       = 90;\n\n\n\n\n\n  struct Vesting {\n    uint256 startTime;\n    uint256 initReleaseAmount;\n    uint256 amount;\n    uint256 interval;\n    uint256 periods;\n    uint256 withdrawed;\n  }\n\n  mapping (address => Vesting[]) vestings;\n\n  event AssetLock(address indexed to,uint256 startTime,uint256 initReleaseAmount,uint256 amount,uint256 interval,uint256 periods);\n  /**\n  * @dev Constructor that gives msg.sender all of existing tokens.\n  */\n  constructor(address _master) public {\n   require(_master != address(0));\n   totalSupply_ = INITIAL_SUPPLY;\n   master = _master;\n   paused = false;\n   coinbase = _master;\n   balances[coinbase] = INITIAL_SUPPLY;\n\n  \n   uint256 balance_project = INITIAL_SUPPLY * project_foundation_percent / 100;\n   assetLock(project_foundation_address,project_foundation_starttime,0,balance_project,project_foundation_interval,project_foundation_periods);\n\n   uint256 balance_community_reward = INITIAL_SUPPLY * community_reward_percent / 100;\n   balances[community_reward_address] = balance_community_reward;\n   balances[coinbase] =  balances[coinbase].sub(balance_community_reward);\n\n\n }\n\n\n  function assetLock(address _to,uint256 _startTime,uint256 _initReleaseAmount,uint256 _amount,uint256 _interval,uint256 _periods) internal {\n      require(balances[coinbase] >= _amount);\n      require(_initReleaseAmount <= _amount);\n      vestings[_to].push(Vesting(_startTime, _initReleaseAmount, _amount, _interval, _periods, 0));\n      balances[coinbase] = balances[coinbase].sub(_amount);\n      emit AssetLock(_to,_startTime,_initReleaseAmount,_amount,_interval,_periods);\n }\n\n  function batchTransfer(address[] _to, uint256[] _amount) public isNotPause returns (bool) {\n     for (uint i = 0; i < _to.length; i++) {\n       getVesting(msg.sender);\n       transfer(_to[i] , _amount[i]);\n     }\n     return true;\n   }\n\n   /**\n   * @dev Transfer token for a specified address\n   * @param _to The address to transfer to.\n   * @param _value The amount to be transferred.\n   */\n   function transfer(address _to, uint256 _value) public isNotPause returns (bool) {\n     require(_to != address(0));\n     uint256 remain = availableBalance(msg.sender);\n     require(_value <= remain);\n     getVesting(msg.sender);\n     balances[msg.sender] = balances[msg.sender].sub(_value);\n     balances[_to] = balances[_to].add(_value);\n     emit Transfer(msg.sender, _to, _value);\n     return true;\n   }\n\n\n   /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n   function transferFrom(\n     address _from,\n     address _to,\n     uint256 _value\n   )\n     public isNotPause\n     returns (bool)\n   {\n     require(_to != address(0));\n     require(_from != address(0));\n     require(_value <= allowed[_from][msg.sender]);\n     uint256 remain = availableBalance(_from);\n     require(_value <= remain);\n     getVesting(_from);\n     balances[_from] = balances[_from].sub(_value);\n     balances[_to] = balances[_to].add(_value);\n     allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n     emit Transfer(_from, _to, _value);\n     return true;\n   }\n\n\n   function setPause() public isMaster isNotPause{\n     paused = true;\n   }\n\n   function setResume() public isMaster isPause{\n     paused = false;\n   }\n\n   function pauseStatus() public view isMaster returns (bool){\n     return paused;\n   }\n\n\n   function vestingBalance(address _owner) internal view returns (uint256) {\n     uint256 sum = 0;\n      for(uint i = 0 ;i < vestings[_owner].length;i++){\n        sum = sum.add(vestings[_owner][i].amount.sub(vestings[_owner][i].withdrawed));\n      }\n      return sum;\n   }\n\n  /*\n  Current available balance\n  */\n   function availableBalance(address _owner) public view returns (uint256) {\n     uint256 sum = 0;\n      for(uint i = 0 ;i < vestings[_owner].length;i++){\n        Vesting memory vs = vestings[_owner][i];\n        uint256 release = vestingRelease(vs.startTime,vs.initReleaseAmount, vs.amount, vs.interval, vs.periods);\n        uint256 keep = release.sub(vs.withdrawed);\n        if(keep >= 0){\n          sum = sum.add(keep);\n        }\n      }\n      return sum.add(balances[_owner]);\n   }\n\n   /*\n   Get all the assets of the user\n   */\n   function allBalance(address _owner)public view returns (uint256){\n     uint256 allbalance = vestingBalance(_owner);\n     return allbalance.add(balances[_owner]);\n   }\n    /*\n    Calculate the current time release\n    */\n   function vestingRelease(uint256 _startTime,uint256 _initReleaseAmount,uint256 _amount,uint256 _interval,uint256 _periods) public view returns (uint256) {\n    return vestingReleaseFunc(now,_startTime,_initReleaseAmount,_amount,_interval,_periods);\n   }\n\n   /*\n   Calculate the current time release\n   */\n  function vestingReleaseFunc(uint256 _endTime,uint256 _startTime,uint256 _initReleaseAmount,uint256 _amount,uint256 _interval,uint256 _periods) public pure  returns (uint256) {\n    if (_endTime < _startTime) {\n      return 0;\n    }\n    uint256 last = _endTime.sub(_startTime);\n    uint256 allTime =  _periods.mul(_interval);\n    if (last >= allTime) {\n      return _amount;\n    }\n    uint256 eachPeriodAmount = _amount.sub(_initReleaseAmount).div(_periods);\n    uint256 lastTime = last.div(_interval);\n    uint256 vestingAmount = eachPeriodAmount.mul(lastTime).add(_initReleaseAmount);\n    return vestingAmount;\n  }\n\n\n\n   /*\n   Get vesting funds\n   */\n   function getVesting(address _to) internal {\n     uint256 sum = 0;\n     for(uint i=0;i< vestings[_to].length;i++){\n       if(vestings[_to][i].amount == vestings[_to][i].withdrawed){\n         continue;\n       }else{\n         Vesting  memory vs = vestings[_to][i];\n         uint256 release = vestingRelease(vs.startTime,vs.initReleaseAmount, vs.amount, vs.interval, vs.periods);\n         uint256 keep = release.sub(vs.withdrawed);\n         if(keep >= 0){\n           vestings[_to][i].withdrawed = release;\n           sum = sum.add(keep);\n         }\n       }\n     }\n     if(sum > 0 ){\n       balances[_to] = balances[_to].add(sum);\n     }\n   }\n\n   /**\n   * @dev Gets the balance of the specified address.\n   * @param _owner The address to query the the balance of.\n   * @return An uint256 representing the amount owned by the passed address.\n   */\n   function balanceOf(address _owner) public view returns (uint256) {\n     return availableBalance(_owner);\n   }\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040516020806200157c8339810160405251600080600160a060020a03831615156200003d57600080fd5b66ea7aa67b2d0000600181905560038054600160a060020a0319908116600160a060020a0387811691821760a060020a60ff021916909355600480549092161790819055166000908152602081905260409020556064670928ca80cfc20000049150620000d6739f9bed103cca9352c7a69a05f7b789a9fc32f5c7635ce6c3806000856305a39a8060016401000000006200015d810204565b506000602081905266d307fc3ba880007f0cd2ce84038b7eb4e773eaf8caa1461f125987e065dc4a81344f5b5058b2bb81819055600454600160a060020a03168252604090912054620001389082640100000000620002c08102620010fa1704565b600454600160a060020a031660009081526020819052604090205550620002d8915050565b600454600160a060020a03166000908152602081905260409020548311156200018557600080fd5b828411156200019357600080fd5b600160a060020a038087166000908152600560208181526040808420815160c0810183528b81528084018b81528184018b8152606083018b8152608084018b815260a085018a8152865460018181018955978c52898c2096516006909102909601958655935195850195909555905160028401555160038301559151600480830191909155915194019390935591549093168252918190522054620002479084640100000000620010fa620002c082021704565b600454600160a060020a0390811660009081526020818152604091829020939093558051888152928301879052828101869052606083018590526080830184905251908816917f60a77863cf24dbe9e98914a469f90335910a0879da17657367085ba7b3502c85919081900360a00190a2505050505050565b60008083831115620002d157600080fd5b5050900390565b61129480620002e86000396000f30060806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610121578063095ea7b3146101ab57806318160ddd146101e357806323b872dd1461020a5780632ff2e9dc14610234578063313ce567146102495780634138e7e114610274578063466916ca1461029b5780635c975abb146102b057806366188463146102c557806370a08231146102e957806388d695b21461030a57806395d89b4114610398578063a0821be3146103ad578063a1813fac146103ce578063a9059cbb146103ef578063c976ffbc14610413578063d33ecfee14610437578063d431b1ac1461044e578063d73dd62314610463578063dd62ed3e14610487575b600080fd5b34801561012d57600080fd5b506101366104ae565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610170578181015183820152602001610158565b50505050905090810190601f16801561019d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b757600080fd5b506101cf600160a060020a03600435166024356104e5565b604080519115158252519081900360200190f35b3480156101ef57600080fd5b506101f86105ad565b60408051918252519081900360200190f35b34801561021657600080fd5b506101cf600160a060020a03600435811690602435166044356105b3565b34801561024057600080fd5b506101f861075f565b34801561025557600080fd5b5061025e61076a565b6040805160ff9092168252519081900360200190f35b34801561028057600080fd5b506101f860043560243560443560643560843560a43561076f565b3480156102a757600080fd5b506101cf610825565b3480156102bc57600080fd5b506101cf610854565b3480156102d157600080fd5b506101cf600160a060020a0360043516602435610864565b3480156102f557600080fd5b506101f8600160a060020a036004351661098f565b34801561031657600080fd5b50604080516020600480358082013583810280860185019096528085526101cf95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506109a09650505050505050565b3480156103a457600080fd5b50610136610a1d565b3480156103b957600080fd5b506101f8600160a060020a0360043516610a54565b3480156103da57600080fd5b506101f8600160a060020a0360043516610b93565b3480156103fb57600080fd5b506101cf600160a060020a0360043516602435610bd3565b34801561041f57600080fd5b506101f8600435602435604435606435608435610ce3565b34801561044357600080fd5b5061044c610cfd565b005b34801561045a57600080fd5b5061044c610d53565b34801561046f57600080fd5b506101cf600160a060020a0360043516602435610dab565b34801561049357600080fd5b506101f8600160a060020a0360043581169060243516610ec2565b60408051808201909152600681527f4e546f6b656e0000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff16156104ff57600080fd5b600160a060020a038316151561051457600080fd5b8161051e3361098f565b101561052957600080fd5b6105328361098f565b8261053c8561098f565b011161054757600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b60015490565b600354600090819060a060020a900460ff16156105cf57600080fd5b600160a060020a03841615156105e457600080fd5b600160a060020a03851615156105f957600080fd5b600160a060020a038086166000908152600260209081526040808320339094168352929052205483111561062c57600080fd5b61063585610a54565b90508083111561064457600080fd5b61064d85610eed565b600160a060020a038516600090815260208190526040902054610676908463ffffffff6110fa16565b600160a060020a0380871660009081526020819052604080822093909355908616815220546106ab908463ffffffff61111116565b600160a060020a03808616600090815260208181526040808320949094558883168252600281528382203390931682529190915220546106f1908463ffffffff6110fa16565b600160a060020a038087166000818152600260209081526040808320338616845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b66ea7aa67b2d000081565b600881565b6000806000806000808a8c10156107895760009550610816565b6107998c8c63ffffffff6110fa16565b94506107ab878963ffffffff61112316565b93508385106107bc57889550610816565b6107dc876107d08b8d63ffffffff6110fa16565b9063ffffffff61115116565b92506107ee858963ffffffff61115116565b91506108108a610804858563ffffffff61112316565b9063ffffffff61111116565b90508095505b50505050509695505050505050565b60035460009033600160a060020a0390811691161461084357600080fd5b5060035460a060020a900460ff1690565b60035460a060020a900460ff1681565b600354600090819060a060020a900460ff161561088057600080fd5b600160a060020a038416151561089557600080fd5b50600160a060020a03338116600090815260026020908152604080832093871683529290522054808311156108f157600160a060020a033381166000908152600260209081526040808320938816835292905290812055610928565b610901818463ffffffff6110fa16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3600191505b5092915050565b600061099a82610a54565b92915050565b600354600090819060a060020a900460ff16156109bc57600080fd5b5060005b8351811015610a13576109d233610eed565b610a0a84828151811015156109e357fe5b9060200190602002015184838151811015156109fb57fe5b90602001906020020151610bd3565b506001016109c0565b5060019392505050565b60408051808201909152600281527f4e54000000000000000000000000000000000000000000000000000000000000602082015281565b6000806000610a61611231565b60008060009450600093505b600160a060020a038716600090815260056020526040902054841015610b5e57600160a060020a0387166000908152600560205260409020805485908110610ab157fe5b60009182526020918290206040805160c081018252600690930290910180548084526001820154948401859052600282015492840183905260038201546060850181905260048301546080860181905260059093015460a0860152939750610b1d949093909291610ce3565b9150610b368360a00151836110fa90919063ffffffff16565b905060008110610b5357610b50858263ffffffff61111116565b94505b600190930192610a6d565b600160a060020a038716600090815260208190526040902054610b8890869063ffffffff61111116565b979650505050505050565b600080610b9f83611174565b600160a060020a038416600090815260208190526040902054909150610bcc90829063ffffffff61111116565b9392505050565b600354600090819060a060020a900460ff1615610bef57600080fd5b600160a060020a0384161515610c0457600080fd5b610c0d33610a54565b905080831115610c1c57600080fd5b610c2533610eed565b600160a060020a033316600090815260208190526040902054610c4e908463ffffffff6110fa16565b600160a060020a033381166000908152602081905260408082209390935590861681522054610c83908463ffffffff61111116565b600160a060020a03808616600081815260208181526040918290209490945580518781529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b6000610cf342878787878761076f565b9695505050505050565b60035433600160a060020a03908116911614610d1857600080fd5b60035460a060020a900460ff161515600114610d3357600080fd5b6003805474ff000000000000000000000000000000000000000019169055565b60035433600160a060020a03908116911614610d6e57600080fd5b60035460a060020a900460ff1615610d8557600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a179055565b60035460009060a060020a900460ff1615610dc557600080fd5b600160a060020a0383161515610dda57600080fd5b81610de43361098f565b1015610def57600080fd5b600160a060020a0333811660009081526002602090815260408083209387168352929052205482810111610e2257600080fd5b600160a060020a03338116600090815260026020908152604080832093871683529290522054610e58908363ffffffff61111116565b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600080610ef8611231565b60008060009450600093505b600160a060020a0386166000908152600560205260409020548410156110a657600160a060020a0386166000908152600560205260409020805485908110610f4857fe5b600091825260208083206005600690930201820154600160a060020a038a1684529190526040909120805486908110610f7d57fe5b9060005260206000209060060201600201541415610f9a5761109b565b600160a060020a0386166000908152600560205260409020805485908110610fbe57fe5b60009182526020918290206040805160c081018252600690930290910180548084526001820154948401859052600282015492840183905260038201546060850181905260048301546080860181905260059093015460a086015293975061102a949093909291610ce3565b91506110438360a00151836110fa90919063ffffffff16565b90506000811061109b57600160a060020a038616600090815260056020526040902080548391908690811061107457fe5b6000918252602090912060056006909202010155611098858263ffffffff61111116565b94505b600190930192610f04565b60008511156110f257600160a060020a0386166000908152602081905260409020546110d8908663ffffffff61111116565b600160a060020a0387166000908152602081905260409020555b505050505050565b6000808383111561110a57600080fd5b5050900390565b600082820183811015610bcc57600080fd5b6000808315156111365760009150610988565b5082820282848281151561114657fe5b0414610bcc57600080fd5b60008080831161116057600080fd5b828481151561116b57fe5b04949350505050565b600080805b600160a060020a03841660009081526005602052604090205481101561098857600160a060020a038416600090815260056020526040902080546112279161121a91849081106111c557fe5b600091825260208083206005600690930201820154600160a060020a038a16845291905260409091208054859081106111fa57fe5b9060005260206000209060060201600201546110fa90919063ffffffff16565b839063ffffffff61111116565b9150600101611179565b60c06040519081016040528060008152602001600081526020016000815260200160008152602001600081526020016000815250905600a165627a7a72305820f0aaba0f6f8b6df37a9b55313623123a5d84f68b21ea172c61e5949579ff2514002900000000000000000000000044cf372a68585d3c814a3d59682694b821740b7f",
  "constructorArguments": "00000000000000000000000044cf372a68585d3c814a3d59682694b821740b7f"
}