{
  "address": "0x1b5242794288b45831ce069c9934a29b89af0197",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "CryptoSaga: Card",
  "contractName": "CryptoSagaCard",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-31\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC721 interface\n * @dev see https://github.com/ethereum/eips/issues/721\n */\ncontract ERC721 {\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function transfer(address _to, uint256 _tokenId) public;\n  function approve(address _to, uint256 _tokenId) public;\n  function takeOwnership(uint256 _tokenId) public;\n}\n\n/**\n * @title ERC721Token\n * Generic implementation for the required functionality of the ERC721 standard\n */\ncontract ERC721Token is ERC721 {\n  using SafeMath for uint256;\n\n  // Total amount of tokens\n  uint256 private totalTokens;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) private tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) private tokenApprovals;\n\n  // Mapping from owner to list of owned token IDs\n  mapping (address => uint256[]) private ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private ownedTokensIndex;\n\n  /**\n  * @dev Guarantees msg.sender is owner of the given token\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n  */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n  * @dev Gets the total amount of tokens stored by the contract\n  * @return uint256 representing the total amount of tokens\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalTokens;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address\n  * @param _owner address to query the balance of\n  * @return uint256 representing the amount owned by the passed address\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return ownedTokens[_owner].length;\n  }\n\n  /**\n  * @dev Gets the list of tokens owned by a given address\n  * @param _owner address to query the tokens of\n  * @return uint256[] representing the list of tokens owned by the passed address\n  */\n  function tokensOf(address _owner) public view returns (uint256[]) {\n    return ownedTokens[_owner];\n  }\n\n  /**\n  * @dev Gets the owner of the specified token ID\n  * @param _tokenId uint256 ID of the token to query the owner of\n  * @return owner address currently marked as the owner of the given token ID\n  */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Gets the approved address to take ownership of a given token ID\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved to take ownership of the given token ID\n   */\n  function approvedFor(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n  * @dev Transfers the ownership of a given token ID to another address\n  * @param _to address to receive the ownership of the given token ID\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n  }\n\n  /**\n  * @dev Approves another address to claim for the ownership of the given token ID\n  * @param _to address to be approved for the given token ID\n  * @param _tokenId uint256 ID of the token to be approved\n  */\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\n      tokenApprovals[_tokenId] = _to;\n      Approval(owner, _to, _tokenId);\n    }\n  }\n\n  /**\n  * @dev Claims the ownership of a given token ID\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n  */\n  function takeOwnership(uint256 _tokenId) public {\n    require(isApprovedFor(msg.sender, _tokenId));\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n  }\n\n  /**\n  * @dev Mint token function\n  * @param _to The address that will own the minted token\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n  */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addToken(_to, _tokenId);\n    Transfer(0x0, _to, _tokenId);\n  }\n\n  /**\n  * @dev Burns a specific token\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n  */\n  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n    if (approvedFor(_tokenId) != 0) {\n      clearApproval(msg.sender, _tokenId);\n    }\n    removeToken(msg.sender, _tokenId);\n    Transfer(msg.sender, 0x0, _tokenId);\n  }\n\n  /**\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\n   * @param _owner address of the owner to query the approval of\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return bool whether the msg.sender is approved for the given token ID or not\n   */\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n    return approvedFor(_tokenId) == _owner;\n  }\n\n  /**\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n  * @param _from address which you want to send tokens from\n  * @param _to address which you want to transfer the token to\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    require(_to != ownerOf(_tokenId));\n    require(ownerOf(_tokenId) == _from);\n\n    clearApproval(_from, _tokenId);\n    removeToken(_from, _tokenId);\n    addToken(_to, _tokenId);\n    Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n  * @dev Internal function to clear current approval of a given token ID\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function clearApproval(address _owner, uint256 _tokenId) private {\n    require(ownerOf(_tokenId) == _owner);\n    tokenApprovals[_tokenId] = 0;\n    Approval(_owner, 0, _tokenId);\n  }\n\n  /**\n  * @dev Internal function to add a token ID to the list of a given address\n  * @param _to address representing the new owner of the given token ID\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n  */\n  function addToken(address _to, uint256 _tokenId) private {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    uint256 length = balanceOf(_to);\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n    totalTokens = totalTokens.add(1);\n  }\n\n  /**\n  * @dev Internal function to remove a token ID from the list of a given address\n  * @param _from address representing the previous owner of the given token ID\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n  */\n  function removeToken(address _from, uint256 _tokenId) private {\n    require(ownerOf(_tokenId) == _from);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    tokenOwner[_tokenId] = 0;\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n    totalTokens = totalTokens.sub(1);\n  }\n}\n\n/**\n * @title AccessMint\n * @dev Adds grant/revoke functions to the contract.\n */\ncontract AccessMint is Claimable {\n\n  // Access for minting new tokens.\n  mapping(address => bool) private mintAccess;\n\n  // Event that is fired when minted.\n  event Mint(\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n\n  // Modifier for accessibility to define new hero types.\n  modifier onlyAccessMint {\n    require(msg.sender == owner || mintAccess[msg.sender] == true);\n    _;\n  }\n\n  // @dev Grant acess to mint heroes.\n  function grantAccessMint(address _address)\n    onlyOwner\n    public\n  {\n    mintAccess[_address] = true;\n  }\n\n  // @dev Revoke acess to mint heroes.\n  function revokeAccessMint(address _address)\n    onlyOwner\n    public\n  {\n    mintAccess[_address] = false;\n  }\n\n}\n\n/**\n * @title The swap contract (Card => reward)\n * @dev With this contract, a CryptoSagaCard holder can swap his/her CryptoSagaCard for reward.\n *  This contract is intended to be inherited by CryptoSagaCore later.\n */\ncontract CryptoSagaCardSwap is Ownable {\n\n  // Card contract.\n  address internal cardAddess;\n\n  // Modifier for accessibility to define new hero types.\n  modifier onlyCard {\n    require(msg.sender == cardAddess);\n    _;\n  }\n  \n  // @dev Set the address of the contract that represents ERC721 Card.\n  function setCardContract(address _contractAddress)\n    public\n    onlyOwner\n  {\n    cardAddess = _contractAddress;\n  }\n\n  // @dev Convert card into reward.\n  //  This should be implemented by CryptoSagaCore later.\n  function swapCardForReward(address _by, uint8 _rank)\n    onlyCard\n    public \n    returns (uint256)\n  {\n    return 0;\n  }\n\n}\n\n/**\n * @title CryptoSaga Card\n * @dev ERC721 Token that repesents CryptoSaga's cards.\n *  Buy consuming a card, players of CryptoSaga can get a heroe.\n */\ncontract CryptoSagaCard is ERC721Token, Claimable, AccessMint {\n\n  string public constant name = \"CryptoSaga Card\";\n  string public constant symbol = \"CARD\";\n\n  // Rank of the token.\n  mapping(uint256 => uint8) public tokenIdToRank;\n\n  // The number of tokens ever minted.\n  uint256 public numberOfTokenId;\n\n  // The converter contract.\n  CryptoSagaCardSwap private swapContract;\n\n  // Event that should be fired when card is converted.\n  event CardSwap(address indexed _by, uint256 _tokenId, uint256 _rewardId);\n\n  // @dev Set the address of the contract that represents CryptoSaga Cards.\n  function setCryptoSagaCardSwapContract(address _contractAddress)\n    public\n    onlyOwner\n  {\n    swapContract = CryptoSagaCardSwap(_contractAddress);\n  }\n\n  function rankOf(uint256 _tokenId) \n    public view\n    returns (uint8)\n  {\n    return tokenIdToRank[_tokenId];\n  }\n\n  // @dev Mint a new card.\n  function mint(address _beneficiary, uint256 _amount, uint8 _rank)\n    onlyAccessMint\n    public\n  {\n    for (uint256 i = 0; i < _amount; i++) {\n      _mint(_beneficiary, numberOfTokenId);\n      tokenIdToRank[numberOfTokenId] = _rank;\n      numberOfTokenId ++;\n    }\n  }\n\n  // @dev Swap this card for reward.\n  //  The card will be burnt.\n  function swap(uint256 _tokenId)\n    onlyOwnerOf(_tokenId)\n    public\n    returns (uint256)\n  {\n    require(address(swapContract) != address(0));\n\n    var _rank = tokenIdToRank[_tokenId];\n    var _rewardId = swapContract.swapCardForReward(this, _rank);\n    CardSwap(ownerOf(_tokenId), _tokenId, _rewardId);\n    _burn(_tokenId);\n    return _rewardId;\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setCryptoSagaCardSwapContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_rank\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"rankOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"revokeAccessMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"grantAccessMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToRank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rewardId\",\"type\":\"uint256\"}],\"name\":\"CardSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405260058054600160a060020a03191633600160a060020a0316179055610fd98061002e6000396000f3006060604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461012c578063095ea7b3146101b657806318160ddd146101da5780632a6dd48f146101ff5780634e71e0c8146102315780635a3f2672146102445780635bd54fa3146102b65780636112e8ac146102d55780636352211e146102fd57806370a082311461031357806382f68dc414610332578063847e2ba11461035e57806386d518bf1461037d5780638da5cb5b1461039c57806394b918de146103af57806395d89b41146103c55780639d7b5621146103d85780639db70e19146103eb578063a9059cbb14610401578063b2e6ceeb14610423578063e30c397814610439578063f2fde38b1461044c575b600080fd5b341561013757600080fd5b61013f61046b565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561017b578082015183820152602001610163565b50505050905090810190601f1680156101a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c157600080fd5b6101d8600160a060020a03600435166024356104a2565b005b34156101e557600080fd5b6101ed610587565b60405190815260200160405180910390f35b341561020a57600080fd5b61021560043561058e565b604051600160a060020a03909116815260200160405180910390f35b341561023c57600080fd5b6101d86105a9565b341561024f57600080fd5b610263600160a060020a036004351661062a565b60405160208082528190810183818151815260200191508051906020019060200280838360005b838110156102a257808201518382015260200161028a565b505050509050019250505060405180910390f35b34156102c157600080fd5b6101d8600160a060020a03600435166106ad565b34156102e057600080fd5b6101d8600160a060020a036004351660243560ff604435166106ea565b341561030857600080fd5b610215600435610779565b341561031e57600080fd5b6101ed600160a060020a03600435166107a3565b341561033d57600080fd5b6103486004356107be565b60405160ff909116815260200160405180910390f35b341561036957600080fd5b6101d8600160a060020a03600435166107d3565b341561038857600080fd5b6101d8600160a060020a036004351661080f565b34156103a757600080fd5b61021561084e565b34156103ba57600080fd5b6101ed60043561085d565b34156103d057600080fd5b61013f6109ac565b34156103e357600080fd5b6101ed6109e3565b34156103f657600080fd5b6103486004356109e9565b341561040c57600080fd5b6101d8600160a060020a03600435166024356109fe565b341561042e57600080fd5b6101d8600435610a35565b341561044457600080fd5b610215610a60565b341561045757600080fd5b6101d8600160a060020a0360043516610a6f565b60408051908101604052600f81527f43727970746f5361676120436172640000000000000000000000000000000000602082015281565b60008133600160a060020a03166104b882610779565b600160a060020a0316146104cb57600080fd5b6104d483610779565b9150600160a060020a0384811690831614156104ef57600080fd5b6104f88361058e565b600160a060020a03161515806105165750600160a060020a03841615155b1561058157600083815260026020526040908190208054600160a060020a031916600160a060020a0387811691821790925591908416907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a35b50505050565b6000545b90565b600090815260026020526040902054600160a060020a031690565b60065433600160a060020a039081169116146105c457600080fd5b600654600554600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36006805460058054600160a060020a0319908116600160a060020a03841617909155169055565b610632610f5e565b6003600083600160a060020a0316600160a060020a031681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156106a157602002820191906000526020600020905b81548152602001906001019080831161068d575b50505050509050919050565b60055433600160a060020a039081169116146106c857600080fd5b600a8054600160a060020a031916600160a060020a0392909216919091179055565b60055460009033600160a060020a03908116911614806107275750600160a060020a03331660009081526007602052604090205460ff1615156001145b151561073257600080fd5b5060005b828110156105815761074a84600954610aac565b600980546000908152600860205260409020805460ff191660ff85161790558054600190810190915501610736565b600081815260016020526040812054600160a060020a031680151561079d57600080fd5b92915050565b600160a060020a031660009081526003602052604090205490565b60009081526008602052604090205460ff1690565b60055433600160a060020a039081169116146107ee57600080fd5b600160a060020a03166000908152600760205260409020805460ff19169055565b60055433600160a060020a0390811691161461082a57600080fd5b600160a060020a03166000908152600760205260409020805460ff19166001179055565b600554600160a060020a031681565b60008060008333600160a060020a031661087682610779565b600160a060020a03161461088957600080fd5b600a54600160a060020a031615156108a057600080fd5b60008581526008602052604080822054600a5460ff9091169550600160a060020a03169163d6f327cc913091879151602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a03909216600483015260ff166024820152604401602060405180830381600087803b151561093257600080fd5b6102c65a03f1151561094357600080fd5b50505060405180519050915061095885610779565b600160a060020a03167f73e3de7091303bed2f1aad97b12cc34a765cbf6f8fe681a9671501af3a4fab32868460405191825260208201526040908101905180910390a26109a485610b0e565b509392505050565b60408051908101604052600481527f4341524400000000000000000000000000000000000000000000000000000000602082015281565b60095481565b60086020526000908152604090205460ff1681565b8033600160a060020a0316610a1282610779565b600160a060020a031614610a2557600080fd5b610a30338484610ba3565b505050565b610a3f3382610c69565b1515610a4a57600080fd5b610a5d610a5682610779565b3383610ba3565b50565b600654600160a060020a031681565b60055433600160a060020a03908116911614610a8a57600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a0382161515610ac157600080fd5b610acb8282610c8f565b81600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b8033600160a060020a0316610b2282610779565b600160a060020a031614610b3557600080fd5b610b3e8261058e565b600160a060020a031615610b5657610b563383610d47565b610b603383610dcc565b600033600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35050565b600160a060020a0382161515610bb857600080fd5b610bc181610779565b600160a060020a0383811691161415610bd957600080fd5b82600160a060020a0316610bec82610779565b600160a060020a031614610bff57600080fd5b610c098382610d47565b610c138382610dcc565b610c1d8282610c8f565b81600160a060020a031683600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a3505050565b600082600160a060020a0316610c7e8361058e565b600160a060020a0316149392505050565b600081815260016020526040812054600160a060020a031615610cb157600080fd5b60008281526001602052604090208054600160a060020a031916600160a060020a038516179055610ce1836107a3565b600160a060020a038416600090815260036020526040902080549192509060018101610d0d8382610f70565b506000918252602080832091909101849055838252600490526040812082905554610d3f90600163ffffffff610f3616565b600055505050565b81600160a060020a0316610d5a82610779565b600160a060020a031614610d6d57600080fd5b6000818152600260205260408082208054600160a060020a0319169055600160a060020a038416907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35050565b600080600084600160a060020a0316610de485610779565b600160a060020a031614610df757600080fd5b6000848152600460205260409020549250610e226001610e16876107a3565b9063ffffffff610f4c16565b600160a060020a038616600090815260036020526040902080549193509083908110610e4a57fe5b60009182526020808320909101548683526001825260408084208054600160a060020a0319169055600160a060020a0389168452600390925291208054919250829185908110610e9657fe5b6000918252602080832090910192909255600160a060020a0387168152600390915260408120805484908110610ec857fe5b6000918252602080832090910192909255600160a060020a0387168152600390915260409020805490610eff906000198301610f70565b50600084815260046020526040808220829055828252812084905554610f2c90600163ffffffff610f4c16565b6000555050505050565b600082820183811015610f4557fe5b9392505050565b600082821115610f5857fe5b50900390565b60206040519081016040526000815290565b815481835581811511610a3057600083815260209020610a3091810190830161058b91905b80821115610fa95760008155600101610f95565b50905600a165627a7a723058204786610a527aba70aa3f014db908f7977893061ccb7e58ec637b0789753eed3c0029"
}