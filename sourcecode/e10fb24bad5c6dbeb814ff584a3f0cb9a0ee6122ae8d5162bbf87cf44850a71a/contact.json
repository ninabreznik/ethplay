{
  "address": "0x24e2b1d415e6e0d04042eaa45dc2a08fc33ca6cd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Trade",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-08\n*/\n\npragma solidity 0.4.20;\n\ncontract IAugur {\n    function createChildUniverse(bytes32 _parentPayoutDistributionHash, uint256[] _parentPayoutNumerators, bool _parentInvalid) public returns (IUniverse);\n    function isKnownUniverse(IUniverse _universe) public view returns (bool);\n    function trustedTransfer(ERC20 _token, address _from, address _to, uint256 _amount) public returns (bool);\n    function logMarketCreated(bytes32 _topic, string _description, string _extraInfo, IUniverse _universe, address _market, address _marketCreator, bytes32[] _outcomes, int256 _minPrice, int256 _maxPrice, IMarket.MarketType _marketType) public returns (bool);\n    function logMarketCreated(bytes32 _topic, string _description, string _extraInfo, IUniverse _universe, address _market, address _marketCreator, int256 _minPrice, int256 _maxPrice, IMarket.MarketType _marketType) public returns (bool);\n    function logInitialReportSubmitted(IUniverse _universe, address _reporter, address _market, uint256 _amountStaked, bool _isDesignatedReporter, uint256[] _payoutNumerators, bool _invalid) public returns (bool);\n    function disputeCrowdsourcerCreated(IUniverse _universe, address _market, address _disputeCrowdsourcer, uint256[] _payoutNumerators, uint256 _size, bool _invalid) public returns (bool);\n    function logDisputeCrowdsourcerContribution(IUniverse _universe, address _reporter, address _market, address _disputeCrowdsourcer, uint256 _amountStaked) public returns (bool);\n    function logDisputeCrowdsourcerCompleted(IUniverse _universe, address _market, address _disputeCrowdsourcer) public returns (bool);\n    function logInitialReporterRedeemed(IUniverse _universe, address _reporter, address _market, uint256 _amountRedeemed, uint256 _repReceived, uint256 _reportingFeesReceived, uint256[] _payoutNumerators) public returns (bool);\n    function logDisputeCrowdsourcerRedeemed(IUniverse _universe, address _reporter, address _market, uint256 _amountRedeemed, uint256 _repReceived, uint256 _reportingFeesReceived, uint256[] _payoutNumerators) public returns (bool);\n    function logFeeWindowRedeemed(IUniverse _universe, address _reporter, uint256 _amountRedeemed, uint256 _reportingFeesReceived) public returns (bool);\n    function logMarketFinalized(IUniverse _universe) public returns (bool);\n    function logMarketMigrated(IMarket _market, IUniverse _originalUniverse) public returns (bool);\n    function logReportingParticipantDisavowed(IUniverse _universe, IMarket _market) public returns (bool);\n    function logMarketParticipantsDisavowed(IUniverse _universe) public returns (bool);\n    function logOrderCanceled(IUniverse _universe, address _shareToken, address _sender, bytes32 _orderId, Order.Types _orderType, uint256 _tokenRefund, uint256 _sharesRefund) public returns (bool);\n    function logOrderCreated(Order.Types _orderType, uint256 _amount, uint256 _price, address _creator, uint256 _moneyEscrowed, uint256 _sharesEscrowed, bytes32 _tradeGroupId, bytes32 _orderId, IUniverse _universe, address _shareToken) public returns (bool);\n    function logOrderFilled(IUniverse _universe, address _shareToken, address _filler, bytes32 _orderId, uint256 _numCreatorShares, uint256 _numCreatorTokens, uint256 _numFillerShares, uint256 _numFillerTokens, uint256 _marketCreatorFees, uint256 _reporterFees, uint256 _amountFilled, bytes32 _tradeGroupId) public returns (bool);\n    function logCompleteSetsPurchased(IUniverse _universe, IMarket _market, address _account, uint256 _numCompleteSets) public returns (bool);\n    function logCompleteSetsSold(IUniverse _universe, IMarket _market, address _account, uint256 _numCompleteSets) public returns (bool);\n    function logTradingProceedsClaimed(IUniverse _universe, address _shareToken, address _sender, address _market, uint256 _numShares, uint256 _numPayoutTokens, uint256 _finalTokenBalance) public returns (bool);\n    function logUniverseForked() public returns (bool);\n    function logFeeWindowTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logReputationTokensTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logDisputeCrowdsourcerTokensTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logShareTokensTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logReputationTokenBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logReputationTokenMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logShareTokenBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logShareTokenMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logFeeWindowBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logFeeWindowMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logDisputeCrowdsourcerTokensBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logDisputeCrowdsourcerTokensMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logFeeWindowCreated(IFeeWindow _feeWindow, uint256 _id) public returns (bool);\n    function logFeeTokenTransferred(IUniverse _universe, address _from, address _to, uint256 _value) public returns (bool);\n    function logFeeTokenBurned(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logFeeTokenMinted(IUniverse _universe, address _target, uint256 _amount) public returns (bool);\n    function logTimestampSet(uint256 _newTimestamp) public returns (bool);\n    function logInitialReporterTransferred(IUniverse _universe, IMarket _market, address _from, address _to) public returns (bool);\n    function logMarketTransferred(IUniverse _universe, address _from, address _to) public returns (bool);\n    function logMarketMailboxTransferred(IUniverse _universe, IMarket _market, address _from, address _to) public returns (bool);\n    function logEscapeHatchChanged(bool _isOn) public returns (bool);\n}\n\ncontract IControlled {\n    function getController() public view returns (IController);\n    function setController(IController _controller) public returns(bool);\n}\n\ncontract Controlled is IControlled {\n    IController internal controller;\n\n    modifier onlyWhitelistedCallers {\n        require(controller.assertIsWhitelisted(msg.sender));\n        _;\n    }\n\n    modifier onlyCaller(bytes32 _key) {\n        require(msg.sender == controller.lookup(_key));\n        _;\n    }\n\n    modifier onlyControllerCaller {\n        require(IController(msg.sender) == controller);\n        _;\n    }\n\n    modifier onlyInGoodTimes {\n        require(controller.stopInEmergency());\n        _;\n    }\n\n    modifier onlyInBadTimes {\n        require(controller.onlyInEmergency());\n        _;\n    }\n\n    function Controlled() public {\n        controller = IController(msg.sender);\n    }\n\n    function getController() public view returns(IController) {\n        return controller;\n    }\n\n    function setController(IController _controller) public onlyControllerCaller returns(bool) {\n        controller = _controller;\n        return true;\n    }\n}\n\ncontract IController {\n    function assertIsWhitelisted(address _target) public view returns(bool);\n    function lookup(bytes32 _key) public view returns(address);\n    function stopInEmergency() public view returns(bool);\n    function onlyInEmergency() public view returns(bool);\n    function getAugur() public view returns (IAugur);\n    function getTimestamp() public view returns (uint256);\n}\n\ncontract CashAutoConverter is Controlled {\n    /**\n     * @dev Convert any ETH provided in the transaction into Cash before the function executes and convert any remaining Cash balance into ETH after the function completes\n     */\n    modifier convertToAndFromCash() {\n        ethToCash();\n        _;\n        cashToEth();\n    }\n\n    function ethToCash() private returns (bool) {\n        if (msg.value > 0) {\n            ICash(controller.lookup(\"Cash\")).depositEtherFor.value(msg.value)(msg.sender);\n        }\n        return true;\n    }\n\n    function cashToEth() private returns (bool) {\n        ICash _cash = ICash(controller.lookup(\"Cash\"));\n        uint256 _tokenBalance = _cash.balanceOf(msg.sender);\n        if (_tokenBalance > 0) {\n            IAugur augur = controller.getAugur();\n            augur.trustedTransfer(_cash, msg.sender, this, _tokenBalance);\n            _cash.withdrawEtherTo(msg.sender, _tokenBalance);\n        }\n        return true;\n    }\n}\n\ncontract IOwnable {\n    function getOwner() public view returns (address);\n    function transferOwnership(address newOwner) public returns (bool);\n}\n\ncontract ITyped {\n    function getTypeName() public view returns (bytes32);\n}\n\ncontract Initializable {\n    bool private initialized = false;\n\n    modifier afterInitialized {\n        require(initialized);\n        _;\n    }\n\n    modifier beforeInitialized {\n        require(!initialized);\n        _;\n    }\n\n    function endInitialization() internal beforeInitialized returns (bool) {\n        initialized = true;\n        return true;\n    }\n\n    function getInitialized() public view returns (bool) {\n        return initialized;\n    }\n}\n\ncontract MarketValidator is Controlled {\n    modifier marketIsLegit(IMarket _market) {\n        IUniverse _universe = _market.getUniverse();\n        require(controller.getAugur().isKnownUniverse(_universe));\n        require(_universe.isContainerForMarket(_market));\n        _;\n    }\n}\n\ncontract ReentrancyGuard {\n    /**\n     * @dev We use a single lock for the whole contract.\n     */\n    bool private rentrancyLock = false;\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * @notice If you mark a function `nonReentrant`, you should also mark it `external`. Calling one nonReentrant function from another is not supported. Instead, you can implement a `private` function doing the actual work, and a `external` wrapper marked as `nonReentrant`.\n     */\n    modifier nonReentrant() {\n        require(!rentrancyLock);\n        rentrancyLock = true;\n        _;\n        rentrancyLock = false;\n    }\n}\n\nlibrary SafeMathUint256 {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a <= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a >= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n\n    function getUint256Min() internal pure returns (uint256) {\n        return 0;\n    }\n\n    function getUint256Max() internal pure returns (uint256) {\n        return 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    }\n\n    function isMultipleOf(uint256 a, uint256 b) internal pure returns (bool) {\n        return a % b == 0;\n    }\n\n    // Float [fixed point] Operations\n    function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {\n        return div(mul(a, b), base);\n    }\n\n    function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {\n        return div(mul(a, base), b);\n    }\n}\n\ncontract ERC20Basic {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function balanceOf(address _who) public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function totalSupply() public view returns (uint256);\n}\n\ncontract ERC20 is ERC20Basic {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function allowance(address _owner, address _spender) public view returns (uint256);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n    function approve(address _spender, uint256 _value) public returns (bool);\n}\n\ncontract IFeeToken is ERC20, Initializable {\n    function initialize(IFeeWindow _feeWindow) public returns (bool);\n    function getFeeWindow() public view returns (IFeeWindow);\n    function feeWindowBurn(address _target, uint256 _amount) public returns (bool);\n    function mintForReportingParticipant(address _target, uint256 _amount) public returns (bool);\n}\n\ncontract IFeeWindow is ITyped, ERC20 {\n    function initialize(IUniverse _universe, uint256 _feeWindowId) public returns (bool);\n    function getUniverse() public view returns (IUniverse);\n    function getReputationToken() public view returns (IReputationToken);\n    function getStartTime() public view returns (uint256);\n    function getEndTime() public view returns (uint256);\n    function getNumMarkets() public view returns (uint256);\n    function getNumInvalidMarkets() public view returns (uint256);\n    function getNumIncorrectDesignatedReportMarkets() public view returns (uint256);\n    function getNumDesignatedReportNoShows() public view returns (uint256);\n    function getFeeToken() public view returns (IFeeToken);\n    function isActive() public view returns (bool);\n    function isOver() public view returns (bool);\n    function onMarketFinalized() public returns (bool);\n    function buy(uint256 _attotokens) public returns (bool);\n    function redeem(address _sender) public returns (bool);\n    function redeemForReportingParticipant() public returns (bool);\n    function mintFeeTokens(uint256 _amount) public returns (bool);\n    function trustedUniverseBuy(address _buyer, uint256 _attotokens) public returns (bool);\n}\n\ncontract IMailbox {\n    function initialize(address _owner, IMarket _market) public returns (bool);\n    function depositEther() public payable returns (bool);\n}\n\ncontract IMarket is ITyped, IOwnable {\n    enum MarketType {\n        YES_NO,\n        CATEGORICAL,\n        SCALAR\n    }\n\n    function initialize(IUniverse _universe, uint256 _endTime, uint256 _feePerEthInAttoeth, ICash _cash, address _designatedReporterAddress, address _creator, uint256 _numOutcomes, uint256 _numTicks) public payable returns (bool _success);\n    function derivePayoutDistributionHash(uint256[] _payoutNumerators, bool _invalid) public view returns (bytes32);\n    function getUniverse() public view returns (IUniverse);\n    function getFeeWindow() public view returns (IFeeWindow);\n    function getNumberOfOutcomes() public view returns (uint256);\n    function getNumTicks() public view returns (uint256);\n    function getDenominationToken() public view returns (ICash);\n    function getShareToken(uint256 _outcome)  public view returns (IShareToken);\n    function getMarketCreatorSettlementFeeDivisor() public view returns (uint256);\n    function getForkingMarket() public view returns (IMarket _market);\n    function getEndTime() public view returns (uint256);\n    function getMarketCreatorMailbox() public view returns (IMailbox);\n    function getWinningPayoutDistributionHash() public view returns (bytes32);\n    function getWinningPayoutNumerator(uint256 _outcome) public view returns (uint256);\n    function getReputationToken() public view returns (IReputationToken);\n    function getFinalizationTime() public view returns (uint256);\n    function getInitialReporterAddress() public view returns (address);\n    function deriveMarketCreatorFeeAmount(uint256 _amount) public view returns (uint256);\n    function isContainerForShareToken(IShareToken _shadyTarget) public view returns (bool);\n    function isContainerForReportingParticipant(IReportingParticipant _reportingParticipant) public view returns (bool);\n    function isInvalid() public view returns (bool);\n    function finalize() public returns (bool);\n    function designatedReporterWasCorrect() public view returns (bool);\n    function designatedReporterShowed() public view returns (bool);\n    function isFinalized() public view returns (bool);\n    function finalizeFork() public returns (bool);\n    function assertBalances() public view returns (bool);\n}\n\ncontract IReportingParticipant {\n    function getStake() public view returns (uint256);\n    function getPayoutDistributionHash() public view returns (bytes32);\n    function liquidateLosing() public returns (bool);\n    function redeem(address _redeemer) public returns (bool);\n    function isInvalid() public view returns (bool);\n    function isDisavowed() public view returns (bool);\n    function migrate() public returns (bool);\n    function getPayoutNumerator(uint256 _outcome) public view returns (uint256);\n    function getMarket() public view returns (IMarket);\n    function getSize() public view returns (uint256);\n}\n\ncontract IDisputeCrowdsourcer is IReportingParticipant, ERC20 {\n    function initialize(IMarket market, uint256 _size, bytes32 _payoutDistributionHash, uint256[] _payoutNumerators, bool _invalid) public returns (bool);\n    function contribute(address _participant, uint256 _amount) public returns (uint256);\n}\n\ncontract IReputationToken is ITyped, ERC20 {\n    function initialize(IUniverse _universe) public returns (bool);\n    function migrateOut(IReputationToken _destination, uint256 _attotokens) public returns (bool);\n    function migrateIn(address _reporter, uint256 _attotokens) public returns (bool);\n    function trustedReportingParticipantTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedMarketTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedFeeWindowTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedUniverseTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function getUniverse() public view returns (IUniverse);\n    function getTotalMigrated() public view returns (uint256);\n    function getTotalTheoreticalSupply() public view returns (uint256);\n    function mintForReportingParticipant(uint256 _amountMigrated) public returns (bool);\n}\n\ncontract IUniverse is ITyped {\n    function initialize(IUniverse _parentUniverse, bytes32 _parentPayoutDistributionHash) external returns (bool);\n    function fork() public returns (bool);\n    function getParentUniverse() public view returns (IUniverse);\n    function createChildUniverse(uint256[] _parentPayoutNumerators, bool _invalid) public returns (IUniverse);\n    function getChildUniverse(bytes32 _parentPayoutDistributionHash) public view returns (IUniverse);\n    function getReputationToken() public view returns (IReputationToken);\n    function getForkingMarket() public view returns (IMarket);\n    function getForkEndTime() public view returns (uint256);\n    function getForkReputationGoal() public view returns (uint256);\n    function getParentPayoutDistributionHash() public view returns (bytes32);\n    function getDisputeRoundDurationInSeconds() public view returns (uint256);\n    function getOrCreateFeeWindowByTimestamp(uint256 _timestamp) public returns (IFeeWindow);\n    function getOrCreateCurrentFeeWindow() public returns (IFeeWindow);\n    function getOrCreateNextFeeWindow() public returns (IFeeWindow);\n    function getOpenInterestInAttoEth() public view returns (uint256);\n    function getRepMarketCapInAttoeth() public view returns (uint256);\n    function getTargetRepMarketCapInAttoeth() public view returns (uint256);\n    function getOrCacheValidityBond() public returns (uint256);\n    function getOrCacheDesignatedReportStake() public returns (uint256);\n    function getOrCacheDesignatedReportNoShowBond() public returns (uint256);\n    function getOrCacheReportingFeeDivisor() public returns (uint256);\n    function getDisputeThresholdForFork() public view returns (uint256);\n    function getInitialReportMinValue() public view returns (uint256);\n    function calculateFloatingValue(uint256 _badMarkets, uint256 _totalMarkets, uint256 _targetDivisor, uint256 _previousValue, uint256 _defaultValue, uint256 _floor) public pure returns (uint256 _newValue);\n    function getOrCacheMarketCreationCost() public returns (uint256);\n    function getCurrentFeeWindow() public view returns (IFeeWindow);\n    function getOrCreateFeeWindowBefore(IFeeWindow _feeWindow) public returns (IFeeWindow);\n    function isParentOf(IUniverse _shadyChild) public view returns (bool);\n    function updateTentativeWinningChildUniverse(bytes32 _parentPayoutDistributionHash) public returns (bool);\n    function isContainerForFeeWindow(IFeeWindow _shadyTarget) public view returns (bool);\n    function isContainerForMarket(IMarket _shadyTarget) public view returns (bool);\n    function isContainerForReportingParticipant(IReportingParticipant _reportingParticipant) public view returns (bool);\n    function isContainerForShareToken(IShareToken _shadyTarget) public view returns (bool);\n    function isContainerForFeeToken(IFeeToken _shadyTarget) public view returns (bool);\n    function addMarketTo() public returns (bool);\n    function removeMarketFrom() public returns (bool);\n    function decrementOpenInterest(uint256 _amount) public returns (bool);\n    function decrementOpenInterestFromMarket(uint256 _amount) public returns (bool);\n    function incrementOpenInterest(uint256 _amount) public returns (bool);\n    function incrementOpenInterestFromMarket(uint256 _amount) public returns (bool);\n    function getWinningChildUniverse() public view returns (IUniverse);\n    function isForking() public view returns (bool);\n}\n\ncontract ICash is ERC20 {\n    function depositEther() external payable returns(bool);\n    function depositEtherFor(address _to) external payable returns(bool);\n    function withdrawEther(uint256 _amount) external returns(bool);\n    function withdrawEtherTo(address _to, uint256 _amount) external returns(bool);\n    function withdrawEtherToIfPossible(address _to, uint256 _amount) external returns (bool);\n}\n\ncontract ICreateOrder {\n    function publicCreateOrder(Order.Types, uint256, uint256, IMarket, uint256, bytes32, bytes32, bytes32) external payable returns (bytes32);\n    function createOrder(address, Order.Types, uint256, uint256, IMarket, uint256, bytes32, bytes32, bytes32) external returns (bytes32);\n}\n\ncontract IFillOrder {\n    function publicFillOrder(bytes32 _orderId, uint256 _amountFillerWants, bytes32 _tradeGroupId) external payable returns (uint256);\n    function fillOrder(address _filler, bytes32 _orderId, uint256 _amountFillerWants, bytes32 tradeGroupId) external returns (uint256);\n}\n\ncontract IOrders {\n    function saveOrder(Order.Types _type, IMarket _market, uint256 _fxpAmount, uint256 _price, address _sender, uint256 _outcome, uint256 _moneyEscrowed, uint256 _sharesEscrowed, bytes32 _betterOrderId, bytes32 _worseOrderId, bytes32 _tradeGroupId) public returns (bytes32 _orderId);\n    function removeOrder(bytes32 _orderId) public returns (bool);\n    function getMarket(bytes32 _orderId) public view returns (IMarket);\n    function getOrderType(bytes32 _orderId) public view returns (Order.Types);\n    function getOutcome(bytes32 _orderId) public view returns (uint256);\n    function getAmount(bytes32 _orderId) public view returns (uint256);\n    function getPrice(bytes32 _orderId) public view returns (uint256);\n    function getOrderCreator(bytes32 _orderId) public view returns (address);\n    function getOrderSharesEscrowed(bytes32 _orderId) public view returns (uint256);\n    function getOrderMoneyEscrowed(bytes32 _orderId) public view returns (uint256);\n    function getBetterOrderId(bytes32 _orderId) public view returns (bytes32);\n    function getWorseOrderId(bytes32 _orderId) public view returns (bytes32);\n    function getBestOrderId(Order.Types _type, IMarket _market, uint256 _outcome) public view returns (bytes32);\n    function getWorstOrderId(Order.Types _type, IMarket _market, uint256 _outcome) public view returns (bytes32);\n    function getLastOutcomePrice(IMarket _market, uint256 _outcome) public view returns (uint256);\n    function getOrderId(Order.Types _type, IMarket _market, uint256 _fxpAmount, uint256 _price, address _sender, uint256 _blockNumber, uint256 _outcome, uint256 _moneyEscrowed, uint256 _sharesEscrowed) public pure returns (bytes32);\n    function getTotalEscrowed(IMarket _market) public view returns (uint256);\n    function isBetterPrice(Order.Types _type, uint256 _price, bytes32 _orderId) public view returns (bool);\n    function isWorsePrice(Order.Types _type, uint256 _price, bytes32 _orderId) public view returns (bool);\n    function assertIsNotBetterPrice(Order.Types _type, uint256 _price, bytes32 _betterOrderId) public view returns (bool);\n    function assertIsNotWorsePrice(Order.Types _type, uint256 _price, bytes32 _worseOrderId) public returns (bool);\n    function recordFillOrder(bytes32 _orderId, uint256 _sharesFilled, uint256 _tokensFilled) public returns (bool);\n    function setPrice(IMarket _market, uint256 _outcome, uint256 _price) external returns (bool);\n    function incrementTotalEscrowed(IMarket _market, uint256 _amount) external returns (bool);\n    function decrementTotalEscrowed(IMarket _market, uint256 _amount) external returns (bool);\n}\n\ncontract IShareToken is ITyped, ERC20 {\n    function initialize(IMarket _market, uint256 _outcome) external returns (bool);\n    function createShares(address _owner, uint256 _amount) external returns (bool);\n    function destroyShares(address, uint256 balance) external returns (bool);\n    function getMarket() external view returns (IMarket);\n    function getOutcome() external view returns (uint256);\n    function trustedOrderTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedFillOrderTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n    function trustedCancelOrderTransfer(address _source, address _destination, uint256 _attotokens) public returns (bool);\n}\n\nlibrary Order {\n    using SafeMathUint256 for uint256;\n\n    enum Types {\n        Bid, Ask\n    }\n\n    enum TradeDirections {\n        Long, Short\n    }\n\n    struct Data {\n        // Contracts\n        IOrders orders;\n        IMarket market;\n        IAugur augur;\n\n        // Order\n        bytes32 id;\n        address creator;\n        uint256 outcome;\n        Order.Types orderType;\n        uint256 amount;\n        uint256 price;\n        uint256 sharesEscrowed;\n        uint256 moneyEscrowed;\n        bytes32 betterOrderId;\n        bytes32 worseOrderId;\n    }\n\n    //\n    // Constructor\n    //\n\n    // No validation is needed here as it is simply a librarty function for organizing data\n    function create(IController _controller, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data) {\n        require(_outcome < _market.getNumberOfOutcomes());\n        require(_price < _market.getNumTicks());\n\n        IOrders _orders = IOrders(_controller.lookup(\"Orders\"));\n        IAugur _augur = _controller.getAugur();\n\n        return Data({\n            orders: _orders,\n            market: _market,\n            augur: _augur,\n            id: 0,\n            creator: _creator,\n            outcome: _outcome,\n            orderType: _type,\n            amount: _attoshares,\n            price: _price,\n            sharesEscrowed: 0,\n            moneyEscrowed: 0,\n            betterOrderId: _betterOrderId,\n            worseOrderId: _worseOrderId\n        });\n    }\n\n    //\n    // \"public\" functions\n    //\n\n    function getOrderId(Order.Data _orderData) internal view returns (bytes32) {\n        if (_orderData.id == bytes32(0)) {\n            bytes32 _orderId = _orderData.orders.getOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);\n            require(_orderData.orders.getAmount(_orderId) == 0);\n            _orderData.id = _orderId;\n        }\n        return _orderData.id;\n    }\n\n    function getOrderTradingTypeFromMakerDirection(Order.TradeDirections _creatorDirection) internal pure returns (Order.Types) {\n        return (_creatorDirection == Order.TradeDirections.Long) ? Order.Types.Bid : Order.Types.Ask;\n    }\n\n    function getOrderTradingTypeFromFillerDirection(Order.TradeDirections _fillerDirection) internal pure returns (Order.Types) {\n        return (_fillerDirection == Order.TradeDirections.Long) ? Order.Types.Ask : Order.Types.Bid;\n    }\n\n    function escrowFunds(Order.Data _orderData) internal returns (bool) {\n        if (_orderData.orderType == Order.Types.Ask) {\n            return escrowFundsForAsk(_orderData);\n        } else if (_orderData.orderType == Order.Types.Bid) {\n            return escrowFundsForBid(_orderData);\n        }\n    }\n\n    function saveOrder(Order.Data _orderData, bytes32 _tradeGroupId) internal returns (bytes32) {\n        return _orderData.orders.saveOrder(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed, _orderData.betterOrderId, _orderData.worseOrderId, _tradeGroupId);\n    }\n\n    //\n    // Private functions\n    //\n\n    function escrowFundsForBid(Order.Data _orderData) private returns (bool) {\n        require(_orderData.moneyEscrowed == 0);\n        require(_orderData.sharesEscrowed == 0);\n        uint256 _attosharesToCover = _orderData.amount;\n        uint256 _numberOfOutcomes = _orderData.market.getNumberOfOutcomes();\n\n        // Figure out how many almost-complete-sets (just missing `outcome` share) the creator has\n        uint256 _attosharesHeld = 2**254;\n        for (uint256 _i = 0; _i < _numberOfOutcomes; _i++) {\n            if (_i != _orderData.outcome) {\n                uint256 _creatorShareTokenBalance = _orderData.market.getShareToken(_i).balanceOf(_orderData.creator);\n                _attosharesHeld = SafeMathUint256.min(_creatorShareTokenBalance, _attosharesHeld);\n            }\n        }\n\n        // Take shares into escrow if they have any almost-complete-sets\n        if (_attosharesHeld > 0) {\n            _orderData.sharesEscrowed = SafeMathUint256.min(_attosharesHeld, _attosharesToCover);\n            _attosharesToCover -= _orderData.sharesEscrowed;\n            for (_i = 0; _i < _numberOfOutcomes; _i++) {\n                if (_i != _orderData.outcome) {\n                    _orderData.market.getShareToken(_i).trustedOrderTransfer(_orderData.creator, _orderData.market, _orderData.sharesEscrowed);\n                }\n            }\n        }\n        // If not able to cover entire order with shares alone, then cover remaining with tokens\n        if (_attosharesToCover > 0) {\n            _orderData.moneyEscrowed = _attosharesToCover.mul(_orderData.price);\n            require(_orderData.augur.trustedTransfer(_orderData.market.getDenominationToken(), _orderData.creator, _orderData.market, _orderData.moneyEscrowed));\n        }\n\n        return true;\n    }\n\n    function escrowFundsForAsk(Order.Data _orderData) private returns (bool) {\n        require(_orderData.moneyEscrowed == 0);\n        require(_orderData.sharesEscrowed == 0);\n        IShareToken _shareToken = _orderData.market.getShareToken(_orderData.outcome);\n        uint256 _attosharesToCover = _orderData.amount;\n\n        // Figure out how many shares of the outcome the creator has\n        uint256 _attosharesHeld = _shareToken.balanceOf(_orderData.creator);\n\n        // Take shares in escrow if user has shares\n        if (_attosharesHeld > 0) {\n            _orderData.sharesEscrowed = SafeMathUint256.min(_attosharesHeld, _attosharesToCover);\n            _attosharesToCover -= _orderData.sharesEscrowed;\n            _shareToken.trustedOrderTransfer(_orderData.creator, _orderData.market, _orderData.sharesEscrowed);\n        }\n\n        // If not able to cover entire order with shares alone, then cover remaining with tokens\n        if (_attosharesToCover > 0) {\n            _orderData.moneyEscrowed = _orderData.market.getNumTicks().sub(_orderData.price).mul(_attosharesToCover);\n            require(_orderData.augur.trustedTransfer(_orderData.market.getDenominationToken(), _orderData.creator, _orderData.market, _orderData.moneyEscrowed));\n        }\n\n        return true;\n    }\n}\n\ncontract Trade is CashAutoConverter, ReentrancyGuard, MarketValidator {\n    uint256 internal constant FILL_ORDER_MINIMUM_GAS_NEEDED = 2000000;\n    uint256 internal constant CREATE_ORDER_MINIMUM_GAS_NEEDED = 700000;\n\n    function publicBuy(IMarket _market, uint256 _outcome, uint256 _fxpAmount, uint256 _price, bytes32 _betterOrderId, bytes32 _worseOrderId, bytes32 _tradeGroupId) external payable marketIsLegit(_market) convertToAndFromCash onlyInGoodTimes returns (bytes32) {\n        bytes32 _result = trade(msg.sender, Order.TradeDirections.Long, _market, _outcome, _fxpAmount, _price, _betterOrderId, _worseOrderId, _tradeGroupId);\n        _market.assertBalances();\n        return _result;\n    }\n\n    function publicSell(IMarket _market, uint256 _outcome, uint256 _fxpAmount, uint256 _price, bytes32 _betterOrderId, bytes32 _worseOrderId, bytes32 _tradeGroupId) external payable marketIsLegit(_market) convertToAndFromCash onlyInGoodTimes returns (bytes32) {\n        bytes32 _result = trade(msg.sender, Order.TradeDirections.Short, _market, _outcome, _fxpAmount, _price, _betterOrderId, _worseOrderId, _tradeGroupId);\n        _market.assertBalances();\n        return _result;\n    }\n\n    function publicTrade(Order.TradeDirections _direction, IMarket _market, uint256 _outcome, uint256 _fxpAmount, uint256 _price, bytes32 _betterOrderId, bytes32 _worseOrderId, bytes32 _tradeGroupId) external payable marketIsLegit(_market) convertToAndFromCash onlyInGoodTimes returns (bytes32) {\n        bytes32 _result = trade(msg.sender, _direction, _market, _outcome, _fxpAmount, _price, _betterOrderId, _worseOrderId, _tradeGroupId);\n        _market.assertBalances();\n        return _result;\n    }\n\n    function publicFillBestOrder(Order.TradeDirections _direction, IMarket _market, uint256 _outcome, uint256 _fxpAmount, uint256 _price, bytes32 _tradeGroupId) external payable marketIsLegit(_market) convertToAndFromCash onlyInGoodTimes returns (uint256) {\n        uint256 _result = fillBestOrder(msg.sender, _direction, _market, _outcome, _fxpAmount, _price, _tradeGroupId);\n        _market.assertBalances();\n        return _result;\n    }\n\n    function trade(address _sender, Order.TradeDirections _direction, IMarket _market, uint256 _outcome, uint256 _fxpAmount, uint256 _price, bytes32 _betterOrderId, bytes32 _worseOrderId, bytes32 _tradeGroupId) internal returns (bytes32) {\n        uint256 _bestFxpAmount = fillBestOrder(_sender, _direction, _market, _outcome, _fxpAmount, _price, _tradeGroupId);\n        if (_bestFxpAmount == 0) {\n            return bytes32(1);\n        }\n        if (msg.gas < getCreateOrderMinGasNeeded()) {\n            return bytes32(1);\n        }\n        Order.Types _type = Order.getOrderTradingTypeFromMakerDirection(_direction);\n        return ICreateOrder(controller.lookup(\"CreateOrder\")).createOrder(_sender, _type, _bestFxpAmount, _price, _market, _outcome, _betterOrderId, _worseOrderId, _tradeGroupId);\n    }\n\n    function fillBestOrder(address _sender, Order.TradeDirections _direction, IMarket _market, uint256 _outcome, uint256 _fxpAmount, uint256 _price, bytes32 _tradeGroupId) internal nonReentrant returns (uint256 _bestFxpAmount) {\n        // we need to fill a BID if we want to SELL and we need to fill an ASK if we want to BUY\n        Order.Types _type = Order.getOrderTradingTypeFromFillerDirection(_direction);\n        IOrders _orders = IOrders(controller.lookup(\"Orders\"));\n        bytes32 _orderId = _orders.getBestOrderId(_type, _market, _outcome);\n        _bestFxpAmount = _fxpAmount;\n\n        while (_orderId != 0 && _bestFxpAmount > 0 && msg.gas >= getFillOrderMinGasNeeded()) {\n            uint256 _orderPrice = _orders.getPrice(_orderId);\n            // If the price is acceptable relative to the trade type\n            if (_type == Order.Types.Bid ? _orderPrice >= _price : _orderPrice <= _price) {\n                bytes32 _nextOrderId = _orders.getWorseOrderId(_orderId);\n                _orders.setPrice(_market, _outcome, _orderPrice);\n                _bestFxpAmount = IFillOrder(controller.lookup(\"FillOrder\")).fillOrder(_sender, _orderId, _bestFxpAmount, _tradeGroupId);\n                _orderId = _nextOrderId;\n            } else {\n                _orderId = bytes32(0);\n            }\n        }\n        if (_orderId != 0) {\n            return 0;\n        }\n        return _bestFxpAmount;\n    }\n\n    function publicBuyWithLimit(IMarket _market, uint256 _outcome, uint256 _fxpAmount, uint256 _price, bytes32 _betterOrderId, bytes32 _worseOrderId, bytes32 _tradeGroupId, uint256 _loopLimit) external payable marketIsLegit(_market) convertToAndFromCash onlyInGoodTimes returns (bytes32) {\n        bytes32 _result = tradeWithLimit(msg.sender, Order.TradeDirections.Long, _market, _outcome, _fxpAmount, _price, _betterOrderId, _worseOrderId, _tradeGroupId, _loopLimit);\n        _market.assertBalances();\n        return _result;\n    }\n\n    function publicSellWithLimit(IMarket _market, uint256 _outcome, uint256 _fxpAmount, uint256 _price, bytes32 _betterOrderId, bytes32 _worseOrderId, bytes32 _tradeGroupId, uint256 _loopLimit) external payable marketIsLegit(_market) convertToAndFromCash onlyInGoodTimes returns (bytes32) {\n        bytes32 _result = tradeWithLimit(msg.sender, Order.TradeDirections.Short, _market, _outcome, _fxpAmount, _price, _betterOrderId, _worseOrderId, _tradeGroupId, _loopLimit);\n        _market.assertBalances();\n        return _result;\n    }\n\n    function publicTradeWithLimit(Order.TradeDirections _direction, IMarket _market, uint256 _outcome, uint256 _fxpAmount, uint256 _price, bytes32 _betterOrderId, bytes32 _worseOrderId, bytes32 _tradeGroupId, uint256 _loopLimit) external payable marketIsLegit(_market) convertToAndFromCash onlyInGoodTimes returns (bytes32) {\n        bytes32 _result = tradeWithLimit(msg.sender, _direction, _market, _outcome, _fxpAmount, _price, _betterOrderId, _worseOrderId, _tradeGroupId, _loopLimit);\n        _market.assertBalances();\n        return _result;\n    }\n\n    function publicFillBestOrderWithLimit(Order.TradeDirections _direction, IMarket _market, uint256 _outcome, uint256 _fxpAmount, uint256 _price, bytes32 _tradeGroupId, uint256 _loopLimit) external payable marketIsLegit(_market) convertToAndFromCash onlyInGoodTimes returns (uint256) {\n        uint256 _result = fillBestOrderWithLimit(msg.sender, _direction, _market, _outcome, _fxpAmount, _price, _tradeGroupId, _loopLimit);\n        _market.assertBalances();\n        return _result;\n    }\n\n    function tradeWithLimit(address _sender, Order.TradeDirections _direction, IMarket _market, uint256 _outcome, uint256 _fxpAmount, uint256 _price, bytes32 _betterOrderId, bytes32 _worseOrderId, bytes32 _tradeGroupId, uint256 _loopLimit) internal returns (bytes32) {\n        uint256 _bestFxpAmount = fillBestOrderWithLimit(_sender, _direction, _market, _outcome, _fxpAmount, _price, _tradeGroupId, _loopLimit);\n        if (_bestFxpAmount == 0) {\n            return bytes32(1);\n        }\n        return ICreateOrder(controller.lookup(\"CreateOrder\")).createOrder(_sender, Order.getOrderTradingTypeFromMakerDirection(_direction), _bestFxpAmount, _price, _market, _outcome, _betterOrderId, _worseOrderId, _tradeGroupId);\n    }\n\n    function fillBestOrderWithLimit(address _sender, Order.TradeDirections _direction, IMarket _market, uint256 _outcome, uint256 _fxpAmount, uint256 _price, bytes32 _tradeGroupId, uint256 _loopLimit) internal nonReentrant returns (uint256 _bestFxpAmount) {\n        // we need to fill a BID if we want to SELL and we need to fill an ASK if we want to BUY\n        Order.Types _type = Order.getOrderTradingTypeFromFillerDirection(_direction);\n        IOrders _orders = IOrders(controller.lookup(\"Orders\"));\n        bytes32 _orderId = _orders.getBestOrderId(_type, _market, _outcome);\n        _bestFxpAmount = _fxpAmount;\n        while (_orderId != 0 && _bestFxpAmount > 0 && _loopLimit > 0) {\n            uint256 _orderPrice = _orders.getPrice(_orderId);\n            // If the price is acceptable relative to the trade type\n            if (_type == Order.Types.Bid ? _orderPrice >= _price : _orderPrice <= _price) {\n                bytes32 _nextOrderId = _orders.getWorseOrderId(_orderId);\n                _orders.setPrice(_market, _outcome, _orderPrice);\n                _bestFxpAmount = IFillOrder(controller.lookup(\"FillOrder\")).fillOrder(_sender, _orderId, _bestFxpAmount, _tradeGroupId);\n                _orderId = _nextOrderId;\n            } else {\n                _orderId = bytes32(0);\n            }\n            _loopLimit -= 1;\n        }\n        if (_orderId != 0) {\n            return 0;\n        }\n        return _bestFxpAmount;\n    }\n\n    // COVERAGE: This is not covered and cannot be. We need to use a different minimum gas while running coverage since the additional logging make the cost rise a great deal\n    function getFillOrderMinGasNeeded() internal pure returns (uint256) {\n        return FILL_ORDER_MINIMUM_GAS_NEEDED;\n    }\n\n    function getCreateOrderMinGasNeeded() internal pure returns (uint256) {\n        return CREATE_ORDER_MINIMUM_GAS_NEEDED;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_outcome\",\"type\":\"uint256\"},{\"name\":\"_fxpAmount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_betterOrderId\",\"type\":\"bytes32\"},{\"name\":\"_worseOrderId\",\"type\":\"bytes32\"},{\"name\":\"_tradeGroupId\",\"type\":\"bytes32\"},{\"name\":\"_loopLimit\",\"type\":\"uint256\"}],\"name\":\"publicSellWithLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_direction\",\"type\":\"uint8\"},{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_outcome\",\"type\":\"uint256\"},{\"name\":\"_fxpAmount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_betterOrderId\",\"type\":\"bytes32\"},{\"name\":\"_worseOrderId\",\"type\":\"bytes32\"},{\"name\":\"_tradeGroupId\",\"type\":\"bytes32\"}],\"name\":\"publicTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_direction\",\"type\":\"uint8\"},{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_outcome\",\"type\":\"uint256\"},{\"name\":\"_fxpAmount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_betterOrderId\",\"type\":\"bytes32\"},{\"name\":\"_worseOrderId\",\"type\":\"bytes32\"},{\"name\":\"_tradeGroupId\",\"type\":\"bytes32\"},{\"name\":\"_loopLimit\",\"type\":\"uint256\"}],\"name\":\"publicTradeWithLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_direction\",\"type\":\"uint8\"},{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_outcome\",\"type\":\"uint256\"},{\"name\":\"_fxpAmount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_tradeGroupId\",\"type\":\"bytes32\"},{\"name\":\"_loopLimit\",\"type\":\"uint256\"}],\"name\":\"publicFillBestOrderWithLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_outcome\",\"type\":\"uint256\"},{\"name\":\"_fxpAmount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_betterOrderId\",\"type\":\"bytes32\"},{\"name\":\"_worseOrderId\",\"type\":\"bytes32\"},{\"name\":\"_tradeGroupId\",\"type\":\"bytes32\"}],\"name\":\"publicSell\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_direction\",\"type\":\"uint8\"},{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_outcome\",\"type\":\"uint256\"},{\"name\":\"_fxpAmount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_tradeGroupId\",\"type\":\"bytes32\"}],\"name\":\"publicFillBestOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_outcome\",\"type\":\"uint256\"},{\"name\":\"_fxpAmount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_betterOrderId\",\"type\":\"bytes32\"},{\"name\":\"_worseOrderId\",\"type\":\"bytes32\"},{\"name\":\"_tradeGroupId\",\"type\":\"bytes32\"},{\"name\":\"_loopLimit\",\"type\":\"uint256\"}],\"name\":\"publicBuyWithLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_outcome\",\"type\":\"uint256\"},{\"name\":\"_fxpAmount\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_betterOrderId\",\"type\":\"bytes32\"},{\"name\":\"_worseOrderId\",\"type\":\"bytes32\"},{\"name\":\"_tradeGroupId\",\"type\":\"bytes32\"}],\"name\":\"publicBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]",
  "bytecode": "606060405260008054600160a060020a033316600160a860020a0319909116179055612854806100306000396000f30060606040526004361061008a5763ffffffff60e060020a6000350416630a9a877b811461008f57806315c64b61146100ca5780633018205f146100f6578063554de08c1461012557806392eefe9b14610155578063a127d74e14610188578063b1b12ef6146101b1578063ef01e5a3146101d7578063f0697887146101fd578063f2beaf5914610226575b600080fd5b6100b8600160a060020a036004351660243560443560643560843560a43560c43560e43561024c565b60405190815260200160405180910390f35b6100b860ff60043516600160a060020a036024351660443560643560843560a43560c43560e43561051e565b341561010157600080fd5b6101096107b7565b604051600160a060020a03909116815260200160405180910390f35b6100b860ff60043516600160a060020a036024351660443560643560843560a43560c43560e435610104356107c6565b341561016057600080fd5b610174600160a060020a0360043516610a98565b604051901515815260200160405180910390f35b6100b860ff60043516600160a060020a036024351660443560643560843560a43560c435610ae6565b6100b8600160a060020a036004351660243560443560643560843560a43560c435610db4565b6100b860ff60043516600160a060020a036024351660443560643560843560a43561104e565b6100b8600160a060020a036004351660243560443560643560843560a43560c43560e43561131a565b6100b8600160a060020a036004351660243560443560643560843560a43560c43561156d565b60008089600081600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561029857600080fd5b6102c65a03f115156102a957600080fd5b505050604051805160008054919350600160a060020a039091169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561030057600080fd5b6102c65a03f1151561031157600080fd5b50505060405180519050600160a060020a0316638cfb8f218260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561037157600080fd5b6102c65a03f1151561038257600080fd5b50505060405180519050151561039757600080fd5b80600160a060020a0316639f7e1bf68360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156103ee57600080fd5b6102c65a03f115156103ff57600080fd5b50505060405180519050151561041457600080fd5b61041c6117bf565b5060008054600160a060020a0316906322763ae190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561046657600080fd5b6102c65a03f1151561047757600080fd5b50505060405180519050151561048c57600080fd5b61049f3360018e8e8e8e8e8e8e8e6118cc565b92508b600160a060020a031663a0695f246000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156104e757600080fd5b6102c65a03f115156104f857600080fd5b505050604051805190505082935061050e611a69565b5050505098975050505050505050565b60008088600081600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561056a57600080fd5b6102c65a03f1151561057b57600080fd5b505050604051805160008054919350600160a060020a039091169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156105d257600080fd5b6102c65a03f115156105e357600080fd5b50505060405180519050600160a060020a0316638cfb8f218260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561064357600080fd5b6102c65a03f1151561065457600080fd5b50505060405180519050151561066957600080fd5b80600160a060020a0316639f7e1bf68360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156106c057600080fd5b6102c65a03f115156106d157600080fd5b5050506040518051905015156106e657600080fd5b6106ee6117bf565b5060008054600160a060020a0316906322763ae190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561073857600080fd5b6102c65a03f1151561074957600080fd5b50505060405180519050151561075e57600080fd5b61076f338d8d8d8d8d8d8d8d611ce9565b92508a600160a060020a031663a0695f246000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156104e757600080fd5b600054600160a060020a031690565b60008089600081600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561081257600080fd5b6102c65a03f1151561082357600080fd5b505050604051805160008054919350600160a060020a039091169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561087a57600080fd5b6102c65a03f1151561088b57600080fd5b50505060405180519050600160a060020a0316638cfb8f218260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156108eb57600080fd5b6102c65a03f115156108fc57600080fd5b50505060405180519050151561091157600080fd5b80600160a060020a0316639f7e1bf68360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561096857600080fd5b6102c65a03f1151561097957600080fd5b50505060405180519050151561098e57600080fd5b6109966117bf565b5060008054600160a060020a0316906322763ae190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156109e057600080fd5b6102c65a03f115156109f157600080fd5b505050604051805190501515610a0657600080fd5b610a18338e8e8e8e8e8e8e8e8e6118cc565b92508b600160a060020a031663a0695f246000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610a6057600080fd5b6102c65a03f11515610a7157600080fd5b5050506040518051905050829350610a87611a69565b505050509998505050505050505050565b6000805433600160a060020a03908116911614610ab457600080fd5b5060008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60008087600081600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610b3257600080fd5b6102c65a03f11515610b4357600080fd5b505050604051805160008054919350600160a060020a039091169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610b9a57600080fd5b6102c65a03f11515610bab57600080fd5b50505060405180519050600160a060020a0316638cfb8f218260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610c0b57600080fd5b6102c65a03f11515610c1c57600080fd5b505050604051805190501515610c3157600080fd5b80600160a060020a0316639f7e1bf68360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610c8857600080fd5b6102c65a03f11515610c9957600080fd5b505050604051805190501515610cae57600080fd5b610cb66117bf565b5060008054600160a060020a0316906322763ae190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610d0057600080fd5b6102c65a03f11515610d1157600080fd5b505050604051805190501515610d2657600080fd5b610d36338c8c8c8c8c8c8c611ea5565b925089600160a060020a031663a0695f246000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610d7e57600080fd5b6102c65a03f11515610d8f57600080fd5b5050506040518051905050829350610da5611a69565b50505050979650505050505050565b60008088600081600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610e0057600080fd5b6102c65a03f11515610e1157600080fd5b505050604051805160008054919350600160a060020a039091169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610e6857600080fd5b6102c65a03f11515610e7957600080fd5b50505060405180519050600160a060020a0316638cfb8f218260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610ed957600080fd5b6102c65a03f11515610eea57600080fd5b505050604051805190501515610eff57600080fd5b80600160a060020a0316639f7e1bf68360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610f5657600080fd5b6102c65a03f11515610f6757600080fd5b505050604051805190501515610f7c57600080fd5b610f846117bf565b5060008054600160a060020a0316906322763ae190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610fce57600080fd5b6102c65a03f11515610fdf57600080fd5b505050604051805190501515610ff457600080fd5b6110063360018d8d8d8d8d8d8d611ce9565b92508a600160a060020a031663a0695f246000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610d7e57600080fd5b60008086600081600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561109a57600080fd5b6102c65a03f115156110ab57600080fd5b505050604051805160008054919350600160a060020a039091169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561110257600080fd5b6102c65a03f1151561111357600080fd5b50505060405180519050600160a060020a0316638cfb8f218260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561117357600080fd5b6102c65a03f1151561118457600080fd5b50505060405180519050151561119957600080fd5b80600160a060020a0316639f7e1bf68360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156111f057600080fd5b6102c65a03f1151561120157600080fd5b50505060405180519050151561121657600080fd5b61121e6117bf565b5060008054600160a060020a0316906322763ae190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561126857600080fd5b6102c65a03f1151561127957600080fd5b50505060405180519050151561128e57600080fd5b61129d338b8b8b8b8b8b61233c565b925088600160a060020a031663a0695f246000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156112e557600080fd5b6102c65a03f115156112f657600080fd5b505050604051805190505082935061130c611a69565b505050509695505050505050565b60008089600081600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561136657600080fd5b6102c65a03f1151561137757600080fd5b505050604051805160008054919350600160a060020a039091169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156113ce57600080fd5b6102c65a03f115156113df57600080fd5b50505060405180519050600160a060020a0316638cfb8f218260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561143f57600080fd5b6102c65a03f1151561145057600080fd5b50505060405180519050151561146557600080fd5b80600160a060020a0316639f7e1bf68360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156114bc57600080fd5b6102c65a03f115156114cd57600080fd5b5050506040518051905015156114e257600080fd5b6114ea6117bf565b5060008054600160a060020a0316906322763ae190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561153457600080fd5b6102c65a03f1151561154557600080fd5b50505060405180519050151561155a57600080fd5b61049f3360008e8e8e8e8e8e8e8e6118cc565b60008088600081600160a060020a031663870c426d6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156115b957600080fd5b6102c65a03f115156115ca57600080fd5b505050604051805160008054919350600160a060020a039091169150634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561162157600080fd5b6102c65a03f1151561163257600080fd5b50505060405180519050600160a060020a0316638cfb8f218260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561169257600080fd5b6102c65a03f115156116a357600080fd5b5050506040518051905015156116b857600080fd5b80600160a060020a0316639f7e1bf68360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561170f57600080fd5b6102c65a03f1151561172057600080fd5b50505060405180519050151561173557600080fd5b61173d6117bf565b5060008054600160a060020a0316906322763ae190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561178757600080fd5b6102c65a03f1151561179857600080fd5b5050506040518051905015156117ad57600080fd5b6110063360008d8d8d8d8d8d8d611ce9565b6000803411156118c65760008054600160a060020a03169063f39ec1f7906040516020015260405160e060020a63ffffffff83160281527f43617368000000000000000000000000000000000000000000000000000000006004820152602401602060405180830381600087803b151561183857600080fd5b6102c65a03f1151561184957600080fd5b50505060405180519050600160a060020a0316634faa8a26343360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390911660048201526024016020604051808303818588803b15156118a957600080fd5b6125ee5a03f115156118ba57600080fd5b50505050604051805150505b50600190565b6000806118df8c8c8c8c8c8c8a8a611ea5565b90508015156118f15760019150611a5a565b60008054600160a060020a03169063f39ec1f7906040516020015260405160e060020a63ffffffff83160281527f4372656174654f726465720000000000000000000000000000000000000000006004820152602401602060405180830381600087803b151561196057600080fd5b6102c65a03f1151561197157600080fd5b50505060405180519050600160a060020a031663f79383288d6119938e6127d3565b848b8f8f8d8d8d6000604051602001526040518a63ffffffff1660e060020a028152600401808a600160a060020a0316600160a060020a031681526020018960018111156119dd57fe5b60ff168152602080820199909952604080820198909852600160a060020a03909616606087015250608085019390935260a084019190915260c083015260e08201526101000193509091505180830381600087803b1515611a3d57600080fd5b6102c65a03f11515611a4e57600080fd5b50505060405180519250505b509a9950505050505050505050565b60008054819081908190600160a060020a031663f39ec1f7826040516020015260405160e060020a63ffffffff83160281527f43617368000000000000000000000000000000000000000000000000000000006004820152602401602060405180830381600087803b1515611add57600080fd5b6102c65a03f11515611aee57600080fd5b5050506040518051935050600160a060020a0383166370a082313360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611b5057600080fd5b6102c65a03f11515611b6157600080fd5b50505060405180519250506000821115611cdf5760008054600160a060020a031690634e94c82990604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611bbe57600080fd5b6102c65a03f11515611bcf57600080fd5b5050506040518051915050600160a060020a03811663ec2389948433308660006040516020015260405160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152921660448201526064810191909152608401602060405180830381600087803b1515611c4b57600080fd5b6102c65a03f11515611c5c57600080fd5b50505060405180515050600160a060020a038316631baffe38338460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611cc357600080fd5b6102c65a03f11515611cd457600080fd5b505050604051805150505b6001935050505090565b6000806000611cfd8c8c8c8c8c8c8a61233c565b9150811515611d0f5760019250611e96565b611d176127f7565b5a1015611d275760019250611e96565b611d308b6127d3565b60008054919250600160a060020a039091169063f39ec1f7906040516020015260405160e060020a63ffffffff83160281527f4372656174654f726465720000000000000000000000000000000000000000006004820152602401602060405180830381600087803b1515611da457600080fd5b6102c65a03f11515611db557600080fd5b50505060405180519050600160a060020a031663f79383288d83858b8f8f8d8d8d6000604051602001526040518a63ffffffff1660e060020a028152600401808a600160a060020a0316600160a060020a03168152602001896001811115611e1957fe5b60ff168152602080820199909952604080820198909852600160a060020a03909616606087015250608085019390935260a084019190915260c083015260e08201526101000193509091505180830381600087803b1515611e7957600080fd5b6102c65a03f11515611e8a57600080fd5b50505060405180519350505b50509998505050505050505050565b600080600080600080600060149054906101000a900460ff16151515611eca57600080fd5b6000805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055611f088d6127fe565b60008054919650600160a060020a039091169063f39ec1f7906040516020015260405160e060020a63ffffffff83160281527f4f726465727300000000000000000000000000000000000000000000000000006004820152602401602060405180830381600087803b1515611f7c57600080fd5b6102c65a03f11515611f8d57600080fd5b5050506040518051945050600160a060020a038416637b6eaa65868e8e6000604051602001526040518463ffffffff1660e060020a02815260040180846001811115611fd557fe5b60ff16815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050602060405180830381600087803b151561201957600080fd5b6102c65a03f1151561202a57600080fd5b50505060405180518b97509350505b82158015906120485750600086115b80156120545750600087115b156123015783600160a060020a03166331d98b3f8460006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156120a857600080fd5b6102c65a03f115156120b957600080fd5b50505060405180519250600090508560018111156120d357fe5b146120e157888211156120e6565b888210155b156122f15783600160a060020a0316638925f9e98460006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561213a57600080fd5b6102c65a03f1151561214b57600080fd5b5050506040518051915050600160a060020a038416633011e16a8d8d8560006040516020015260405160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091526044820152606401602060405180830381600087803b15156121bc57600080fd5b6102c65a03f115156121cd57600080fd5b5050506040518051505060008054600160a060020a03169063f39ec1f7906040516020015260405160e060020a63ffffffff83160281527f46696c6c4f7264657200000000000000000000000000000000000000000000006004820152602401602060405180830381600087803b151561224657600080fd5b6102c65a03f1151561225757600080fd5b50505060405180519050600160a060020a0316631faf89958f85898c60006040516020015260405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260448301526064820152608401602060405180830381600087803b15156122cc57600080fd5b6102c65a03f115156122dd57600080fd5b5050506040518051905095508092506122f6565b600092505b600187039650612039565b821561230c57600095505b50506000805474ff00000000000000000000000000000000000000001916905550919a9950505050505050505050565b600080600080600080600060149054906101000a900460ff1615151561236157600080fd5b6000805474ff000000000000000000000000000000000000000019167401000000000000000000000000000000000000000017905561239f8c6127fe565b60008054919650600160a060020a039091169063f39ec1f7906040516020015260405160e060020a63ffffffff83160281527f4f726465727300000000000000000000000000000000000000000000000000006004820152602401602060405180830381600087803b151561241357600080fd5b6102c65a03f1151561242457600080fd5b5050506040518051945050600160a060020a038416637b6eaa65868d8d6000604051602001526040518463ffffffff1660e060020a0281526004018084600181111561246c57fe5b60ff16815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050602060405180830381600087803b15156124b057600080fd5b6102c65a03f115156124c157600080fd5b50505060405180518a97509350505b82158015906124df5750600086115b80156124f257506124ee612821565b5a10155b156127995783600160a060020a03166331d98b3f8460006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561254657600080fd5b6102c65a03f1151561255757600080fd5b505050604051805192506000905085600181111561257157fe5b1461257f5787821115612584565b878210155b1561278f5783600160a060020a0316638925f9e98460006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156125d857600080fd5b6102c65a03f115156125e957600080fd5b5050506040518051915050600160a060020a038416633011e16a8c8c8560006040516020015260405160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091526044820152606401602060405180830381600087803b151561265a57600080fd5b6102c65a03f1151561266b57600080fd5b5050506040518051505060008054600160a060020a03169063f39ec1f7906040516020015260405160e060020a63ffffffff83160281527f46696c6c4f7264657200000000000000000000000000000000000000000000006004820152602401602060405180830381600087803b15156126e457600080fd5b6102c65a03f115156126f557600080fd5b50505060405180519050600160a060020a0316631faf89958e85898b60006040516020015260405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260448301526064820152608401602060405180830381600087803b151561276a57600080fd5b6102c65a03f1151561277b57600080fd5b505050604051805190509550809250612794565b600092505b6124d0565b82156127a457600095505b50506000805474ff00000000000000000000000000000000000000001916905550919998505050505050505050565b6000808260018111156127e257fe5b146127ee5760016127f1565b60005b92915050565b620aae6090565b60008082600181111561280d57fe5b146128195760006127f1565b506001919050565b621e8480905600a165627a7a723058200500e1a87e08b214e06bb4855347ffacaa09452fc18bdcb06206029873f1aecf0029"
}