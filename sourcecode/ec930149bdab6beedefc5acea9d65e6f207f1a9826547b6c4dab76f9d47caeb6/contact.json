{
  "address": "0xcb0d9222954558d6d73ea7653c9f4727185d2f59",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TermoConfidencialidade",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-08\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n    // CONFIDENCIALITY CONTRACT -- \n    // TERMO DE CONFIDENCIALIDADE\n\n//Pelo presente o(s) participante(s) da reunião abaixo nominado que firma o presente termo, compromete-se a não utilizar as informações confidenciais, ou não, que tiver acesso, para gerar benefício próprio exclusivo e/ou unilateral, presente ou futuro, ou para o uso de terceiros; não realizar nenhuma gravação ou cópia de documentos, rascunhos ou manuscritos a que tiver acesso;\n// Todo o conhecimento que for explanado sobre a plataforma de negócios da GOLDOFIR FINANCIAL SOLUTIONS e a BLOCKUM, são confidenciais, responsabilizando-me por todas as pessoas que vierem a ter acesso às informações, por meu intermédio, e obrigando-me, assim, a ressarcir a ocorrência de qualquer dano e / ou prejuízo oriundo de uma eventual quebra de sigilo das informações fornecidas, cabendo contra o infrator a multa de R$ 100.000.000,00.\n//As Informações são de caráter confidencial e toda informação revelada através da apresentação da tecnologia, a respeito de, ou, associada com a avaliação, sob a forma escrita, verbal ou por quaisquer outros meios, é extremamente vedado.\n// Mais, a informação confidencial não se limita, à informação relativa às operações, processos, planos ou intenções, informações sobre produção, instalações, equipamentos, segredos de negócio, segredo de fábrica, dados, habilidades especializadas, projetos, métodos e metodologia, fluxogramas, especializações, componentes, fórmulas, produtos, amostras, diagramas, desenhos de esquema industrial, patentes, oportunidades de mercado e questões relativas a negócios revelados da tecnologia supra mencionada, mas também a todo o conteúdo da reunião.\n// Avaliação significará todas e quaisquer discussões, conversações ou negociações entre, ou com as partes, de alguma forma relacionada ou associada com a apresentação do modelo de negócio da GOLDOFIR e BLOCKUM, deve ser mantida sob a confidencialidade que o instrumento prevê.\n//Pelo não cumprimento do presente Termo de Confidencialidade e Sigilo, fica o abaixo assinado ciente de todas as sanções judiciais que poderão advir.\n// Tem um contrato inteligente com o Ethereum Blockchain.\n//Considerando cada uma das partes envolvidas no mesmo: smart contract address blockchain ethereum e participant address ethereum.\n// local ____________________– __, ___ de __________ de 20___.\n\n    contract TermoConfidencialidade{\n        \n        string public constant name = \"TERMO DE CONFIDENCIALIDADE GOLDOFIR FINANCIAL SOLUTIONS \";\n        string public constant symbol = \"TERMG\";\n        uint8 public constant decimals = 8;\n        uint public _totalSupply = 500;\n        // Zeros after the point\n        uint256 constant public DECIMAL_ZEROS = 100000000;\n        uint256 public RATE = 500;\n        bool public isMinting = true;\n        string public constant generatedBy  = \" TERMO DE CONFIDENCIALIDADE GOLDOFIR FINANCIAL SOLUTIONS \";\n        \n        using SafeMath for uint256;\n        address public owner;\n        \n         // Functions with this modifier can only be executed by the owner\n         modifier onlyOwner() {\n            if (msg.sender != owner) {\n                throw;\n            }\n             _;\n         }\n     \n        // Balances for each account\n        mapping(address => uint256) balances;\n        // Owner of account approves the transfer of an amount to another account\n        mapping(address => mapping(address=>uint256)) allowed;\n\n        // Its a payable function works as a token factory.\n        function () payable{\n            createTokens();\n        }\n\n        // Constructor\n        constructor() public {\n            owner = 0xE7c1CbC85874e305EF1b9348228a20F0856cEB56; \n            balances[owner] = _totalSupply;\n        }\n\n        //allows owner to burn tokens that are not sold in a crowdsale\n        function burnTokens(uint256 _value) onlyOwner {\n\n             require(balances[msg.sender] >= _value && _value > 0 );\n             _totalSupply = _totalSupply.sub(_value);\n             balances[msg.sender] = balances[msg.sender].sub(_value);\n             \n        }\n\n\n\n        // This function creates Tokens  \n         function createTokens() payable {\n            if(isMinting == true){\n                require(msg.value > 0);\n                uint256  tokens = msg.value.mul(RATE);\n                balances[msg.sender] = balances[msg.sender].add(tokens);\n                _totalSupply = _totalSupply.add(tokens);\n                owner.transfer(msg.value);\n            }\n            else{\n                throw;\n            }\n        }\n\n\n        function endCrowdsale() onlyOwner {\n            isMinting = false;\n        }\n\n        function changeCrowdsaleRate(uint256 _value) onlyOwner {\n            RATE = _value;\n        }\n\n\n        \n        function totalSupply() constant returns(uint256){\n            return _totalSupply;\n        }\n        // What is the balance of a particular account?\n        function balanceOf(address _owner) constant returns(uint256){\n            return balances[_owner];\n        }\n\n         // Transfer the balance from owner's account to another account   \n        function transfer(address _to, uint256 _value)  returns(bool) {\n            require(balances[msg.sender] >= _value && _value > 0 );\n            balances[msg.sender] = balances[msg.sender].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        \n    // Send _value amount of tokens from address _from to address _to\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom(address _from, address _to, uint256 _value)  returns(bool) {\n        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _value) returns(bool){\n        allowed[msg.sender][_spender] = _value; \n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    // Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) constant returns(uint256){\n        return allowed[_owner][_spender];\n    }\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"generatedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMAL_ZEROS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeCrowdsaleRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526101f46000556101f46001556001600260006101000a81548160ff02191690831515021790555034801561003757600080fd5b5073e7c1cbc85874e305ef1b9348228a20f0856ceb56600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005460036000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061139c806101046000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610111578063095ea7b3146101a15780630ced8c691461020657806318160ddd146102965780632095f2d4146102c157806323b872dd146102d85780632a8092df1461035d578063313ce5671461038c5780633eaaf86b146103bd578063414d784e146103e85780635c07ac9414610413578063664e9704146104405780636d1b229d1461046b57806370a08231146104985780638da5cb5b146104ef57806395d89b4114610546578063a9059cbb146105d6578063b44272631461063b578063dd62ed3e14610645575b61010f6106bc565b005b34801561011d57600080fd5b50610126610826565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016657808201518184015260208101905061014b565b50505050905090810190601f1680156101935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ad57600080fd5b506101ec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610886565b604051808215151515815260200191505060405180910390f35b34801561021257600080fd5b5061021b610978565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025b578082015181840152602081019050610240565b50505050905090810190601f1680156102885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a257600080fd5b506102ab6109d8565b6040518082815260200191505060405180910390f35b3480156102cd57600080fd5b506102d66109e1565b005b3480156102e457600080fd5b50610343600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a5a565b604051808215151515815260200191505060405180910390f35b34801561036957600080fd5b50610372610de7565b604051808215151515815260200191505060405180910390f35b34801561039857600080fd5b506103a1610dfa565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103c957600080fd5b506103d2610dff565b6040518082815260200191505060405180910390f35b3480156103f457600080fd5b506103fd610e05565b6040518082815260200191505060405180910390f35b34801561041f57600080fd5b5061043e60048036038101908080359060200190929190505050610e0d565b005b34801561044c57600080fd5b50610455610e73565b6040518082815260200191505060405180910390f35b34801561047757600080fd5b5061049660048036038101908080359060200190929190505050610e79565b005b3480156104a457600080fd5b506104d9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fe2565b6040518082815260200191505060405180910390f35b3480156104fb57600080fd5b5061050461102b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055257600080fd5b5061055b611051565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561059b578082015181840152602081019050610580565b50505050905090810190601f1680156105c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105e257600080fd5b50610621600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061108a565b604051808215151515815260200191505060405180910390f35b6106436106bc565b005b34801561065157600080fd5b506106a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061127f565b6040518082815260200191505060405180910390f35b600060011515600260009054906101000a900460ff161515141561081e576000341115156106e957600080fd5b6106fe6001543461130690919063ffffffff16565b905061075281600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461133990919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107aa8160005461133990919063ffffffff16565b600081905550600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610818573d6000803e3d6000fd5b50610823565b600080fd5b50565b606060405190810160405280603881526020017f5445524d4f20444520434f4e464944454e4349414c494441444520474f4c444f81526020017f4649522046494e414e4349414c20534f4c5554494f4e5320000000000000000081525081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b606060405190810160405280603981526020017f205445524d4f20444520434f4e464944454e4349414c494441444520474f4c4481526020017f4f4649522046494e414e4349414c20534f4c5554494f4e53200000000000000081525081565b60008054905090565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a3d57600080fd5b6000600260006101000a81548160ff021916908315150217905550565b600081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610b27575081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610b335750600082115b1515610b3e57600080fd5b610b9082600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135790919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c2582600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461133990919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cf782600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135790919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600260009054906101000a900460ff1681565b600881565b60005481565b6305f5e10081565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e6957600080fd5b8060018190555050565b60015481565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ed557600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610f245750600081115b1515610f2f57600080fd5b610f448160005461135790919063ffffffff16565b600081905550610f9c81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135790919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600581526020017f5445524d4700000000000000000000000000000000000000000000000000000081525081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156110db5750600082115b15156110e657600080fd5b61113882600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135790919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111cd82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461133990919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008082840290506000841480611327575082848281151561132457fe5b04145b151561132f57fe5b8091505092915050565b600080828401905083811015151561134d57fe5b8091505092915050565b600082821115151561136557fe5b8183039050929150505600a165627a7a723058207a929bf6299f867175d1f018eb95cbcba38036f2c144d260f953fc06f20f04b00029"
}