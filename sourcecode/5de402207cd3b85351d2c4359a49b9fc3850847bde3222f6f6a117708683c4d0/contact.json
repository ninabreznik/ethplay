{
  "address": "0x1a002b1fca827c75aea231042d851156bdd6ad8f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SmartToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-19\n*/\n\npragma solidity ^0.4.18;\n\n/*\n    ERC20 Standard Token interface\n*/\ncontract IERC20Token {\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n    function name() public view returns (string) {}\n    function symbol() public view returns (string) {}\n    function decimals() public view returns (uint8) {}\n    function totalSupply() public view returns (uint256) {}\n    function balanceOf(address _owner) public view returns (uint256) { _owner; }\n    function allowance(address _owner, address _spender) public view returns (uint256) { _owner; _spender; }\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n}\n\n\n/*\n    Owned contract interface\n*/\ncontract IOwned {\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n    function owner() public view returns (address) {}\n\n    function transferOwnership(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\n\n\n\n/*\n    Utilities & Common Modifiers\n*/\ncontract Utils {\n\n    // verifies that an amount is greater than zero\n    modifier greaterThanZero(uint256 _amount) {\n        require(_amount > 0);\n        _;\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        require(_address != address(0));\n        _;\n    }\n\n    // verifies that the address is different than this contract address\n    modifier notThis(address _address) {\n        require(_address != address(this));\n        _;\n    }\n\n    // Overflow protected math functions\n\n    /**\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\n\n        @param _x   value 1\n        @param _y   value 2\n\n        @return sum\n    */\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x + _y;\n        assert(z >= _x);\n        return z;\n    }\n\n    /**\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n\n        @param _x   minuend\n        @param _y   subtrahend\n\n        @return difference\n    */\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        assert(_x >= _y);\n        return _x - _y;\n    }\n\n    /**\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n\n        @param _x   factor 1\n        @param _y   factor 2\n\n        @return product\n    */\n    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x * _y;\n        assert(_x == 0 || z / _x == _y);\n        return z;\n    }\n}\n\n\n\n/**\n    ERC20 Standard Token implementation\n*/\ncontract ERC20Token is IERC20Token, Utils {\n    string public standard = \"Token 0.1\";\n    string public name = \"\";\n    string public symbol = \"\";\n    uint8 public decimals = 0;\n    uint256 public totalSupply = 0;\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /**\n        @dev constructor\n\n        @param _name        token name\n        @param _symbol      token symbol\n        @param _decimals    decimal points, for display purposes\n    */\n    constructor(string _name, string _symbol, uint8 _decimals) public {\n        require(bytes(_name).length > 0 && bytes(_symbol).length > 0); // validate input\n\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    /**\n        @dev send coins\n        throws on any error rather then return a false flag to minimize user errors\n\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transfer(address _to, uint256 _value)\n        public\n        validAddress(_to)\n        returns (bool success)\n    {\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n        @dev an account/contract attempts to get the coins\n        throws on any error rather then return a false flag to minimize user errors\n\n        @param _from    source address\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        validAddress(_from)\n        validAddress(_to)\n        returns (bool success)\n    {\n        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n        @dev allow another account/contract to spend some tokens on your behalf\n        throws on any error rather then return a false flag to minimize user errors\n\n        also, to minimize the risk of the approve/transferFrom attack vector\n        (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice\n        in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value\n\n        @param _spender approved address\n        @param _value   allowance amount\n\n        @return true if the approval was successful, false if it wasn't\n    */\n    function approve(address _spender, uint256 _value)\n        public\n        validAddress(_spender)\n        returns (bool success)\n    {\n        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n}\n\n\n\n\n\n\n\n\n\n/*\n    Token Holder interface\n*/\ncontract ITokenHolder is IOwned {\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\n}\n\n\n\n\n/*\n    Provides support and utilities for contract ownership\n*/\ncontract Owned is IOwned {\n    address public owner;\n    address public newOwner;\n\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n\n    /**\n        @dev constructor\n    */\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    /**\n        @dev allows transferring the contract ownership\n        the new owner still needs to accept the transfer\n        can only be called by the contract owner\n\n        @param _newOwner    new contract owner\n    */\n    function transferOwnership(address _newOwner) public ownerOnly {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    /**\n        @dev used by a new owner to accept an ownership transfer\n    */\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n\n/*\n    We consider every contract to be a 'token holder' since it's currently not possible\n    for a contract to deny receiving tokens.\n\n    The TokenHolder's contract sole purpose is to provide a safety mechanism that allows\n    the owner to send tokens that were sent to the contract by mistake back to their sender.\n*/\ncontract TokenHolder is ITokenHolder, Owned, Utils {\n\n    /**\n        @dev withdraws tokens held by the contract and sends them to an account\n        can only be called by the owner\n\n        @param _token   ERC20 token contract address\n        @param _to      account to receive the new amount\n        @param _amount  amount to withdraw\n    */\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount)\n        public\n        ownerOnly\n        validAddress(_token)\n        validAddress(_to)\n        notThis(_to)\n    {\n        assert(_token.transfer(_to, _amount));\n    }\n}\n\n\n\n\n\n\n\n/*\n    Smart Token interface\n*/\ncontract ISmartToken is IOwned, IERC20Token {\n    function disableTransfers(bool _disable) public;\n    function issue(address _to, uint256 _amount) public;\n    function destroy(address _from, uint256 _amount) public;\n}\n\n\ncontract SmartToken is ISmartToken, Owned, ERC20Token, TokenHolder {\n    string public version = \"\";\n    bool public transfersEnabled = true;\n    event NewSmartToken(address _token);\n    event Issuance(uint256 _amount);\n    event Destruction(uint256 _amount);\n\n    constructor(string _name, string _symbol, uint8 _decimals)\n        public\n        ERC20Token(_name, _symbol, _decimals)\n    {\n        emit NewSmartToken(address(this));\n    }\n\n    modifier transfersAllowed {\n        assert(transfersEnabled);\n        _;\n    }\n\n    function disableTransfers(bool _disable) public ownerOnly {\n        transfersEnabled = !_disable;\n    }\n\n    function issue(address _to, uint256 _amount)\n        public\n        ownerOnly\n        validAddress(_to)\n        notThis(_to)\n    {\n        totalSupply = safeAdd(totalSupply, _amount);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);\n\n        emit Issuance(_amount);\n        emit Transfer(this, _to, _amount);\n    }\n\n    function destroy(address _from, uint256 _amount) public {\n        require(msg.sender == _from || msg.sender == owner);\n\n        balanceOf[_from] = safeSub(balanceOf[_from], _amount);\n        totalSupply = safeSub(totalSupply, _amount);\n\n        emit Transfer(_from, this, _amount);\n        emit Destruction(_amount);\n    }\n\n    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool success) {\n        assert(super.transfer(_to, _value));\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool success) {\n        assert(super.transferFrom(_from, _to, _value));\n        return true;\n    }\n}",
  "bytecode": "60c0604052600960808190527f546f6b656e20302e31000000000000000000000000000000000000000000000060a0908152620000409160029190620001b0565b506040805160208101918290526000908190526200006191600391620001b0565b506040805160208101918290526000908190526200008291600491620001b0565b506005805460ff1916905560006006819055604080516020810191829052829052620000b29160099190620001b0565b50600a805460ff19166001179055348015620000cd57600080fd5b506040516200130f3803806200130f833981016040908152815160208301519183015160008054600160a060020a03191633178155918401805190949390930192909184918491849111801562000125575060008251115b15156200013157600080fd5b825162000146906003906020860190620001b0565b5081516200015c906004906020850190620001b0565b506005805460ff90921660ff1990921691909117905550506040805130815290517ff4cd1f8571e8d9c97ffcb81558807ab73f9803d54de5da6a0420593c82a4a9f09181900360200190a150505062000255565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001f357805160ff191683800117855562000223565b8280016001018555821562000223579182015b828111156200022357825182559160200191906001019062000206565b506200023192915062000235565b5090565b6200025291905b808211156200023157600081556001016200023c565b90565b6110aa80620002656000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610116578063095ea7b3146101a05780631608f18f146101e557806318160ddd1461020157806323b872dd14610228578063313ce5671461025f57806354fd4d501461028a5780635a3b7e421461029f5780635e35359e146102b457806370a08231146102eb57806379ba509714610319578063867904b41461032e5780638da5cb5b1461035f57806395d89b411461039d578063a24835d1146103b2578063a9059cbb146103e3578063bef97c8714610414578063d4ee1d9014610429578063dd62ed3e1461043e578063f2fde38b14610472575b600080fd5b34801561012257600080fd5b5061012b6104a0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016557818101518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ac57600080fd5b506101d173ffffffffffffffffffffffffffffffffffffffff6004351660243561054c565b604080519115158252519081900360200190f35b3480156101f157600080fd5b506101ff600435151561062c565b005b34801561020d57600080fd5b5061021661067d565b60408051918252519081900360200190f35b34801561023457600080fd5b506101d173ffffffffffffffffffffffffffffffffffffffff60043581169060243516604435610683565b34801561026b57600080fd5b506102746106b1565b6040805160ff9092168252519081900360200190f35b34801561029657600080fd5b5061012b6106ba565b3480156102ab57600080fd5b5061012b610733565b3480156102c057600080fd5b506101ff73ffffffffffffffffffffffffffffffffffffffff600435811690602435166044356107a9565b3480156102f757600080fd5b5061021673ffffffffffffffffffffffffffffffffffffffff60043516610913565b34801561032557600080fd5b506101ff610925565b34801561033a57600080fd5b506101ff73ffffffffffffffffffffffffffffffffffffffff600435166024356109df565b34801561036b57600080fd5b50610374610b38565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156103a957600080fd5b5061012b610b54565b3480156103be57600080fd5b506101ff73ffffffffffffffffffffffffffffffffffffffff60043516602435610bcd565b3480156103ef57600080fd5b506101d173ffffffffffffffffffffffffffffffffffffffff60043516602435610cfd565b34801561042057600080fd5b506101d1610d29565b34801561043557600080fd5b50610374610d32565b34801561044a57600080fd5b5061021673ffffffffffffffffffffffffffffffffffffffff60043581169060243516610d4e565b34801561047e57600080fd5b506101ff73ffffffffffffffffffffffffffffffffffffffff60043516610d6b565b6003805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156105445780601f1061051957610100808354040283529160200191610544565b820191906000526020600020905b81548152906001019060200180831161052757829003601f168201915b505050505081565b60008273ffffffffffffffffffffffffffffffffffffffff8116151561057157600080fd5b8215806105ac575033600090815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff88168452909152902054155b15156105b757600080fd5b33600081815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff891680855290835292819020879055805187815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461064d57fe5b600a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115919091179055565b60065481565b600a5460009060ff16151561069457fe5b61069f848484610dfb565b15156106a757fe5b5060019392505050565b60055460ff1681565b6009805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156105445780601f1061051957610100808354040283529160200191610544565b600280546040805160206001841615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01909316849004601f810184900484028201840190925281815292918301828280156105445780601f1061051957610100808354040283529160200191610544565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107ca57fe5b8273ffffffffffffffffffffffffffffffffffffffff811615156107ed57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff8116151561081057600080fd5b8373ffffffffffffffffffffffffffffffffffffffff811630141561083457600080fd5b8573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156108d757600080fd5b505af11580156108eb573d6000803e3d6000fd5b505050506040513d602081101561090157600080fd5b5051151561090b57fe5b505050505050565b60076020526000908152604090205481565b60015473ffffffffffffffffffffffffffffffffffffffff16331461094957600080fd5b6001546000805460405173ffffffffffffffffffffffffffffffffffffffff93841693909116917f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a91a360018054600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff841617909155169055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a0057fe5b8173ffffffffffffffffffffffffffffffffffffffff81161515610a2357600080fd5b8273ffffffffffffffffffffffffffffffffffffffff8116301415610a4757600080fd5b610a5360065484610f72565b60065573ffffffffffffffffffffffffffffffffffffffff8416600090815260076020526040902054610a869084610f72565b73ffffffffffffffffffffffffffffffffffffffff851660009081526007602090815260409182902092909255805185815290517f9386c90217c323f58030f9dadcbc938f807a940f4ff41cd4cead9562f5da7dc3929181900390910190a160408051848152905173ffffffffffffffffffffffffffffffffffffffff86169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6004805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156105445780601f1061051957610100808354040283529160200191610544565b3373ffffffffffffffffffffffffffffffffffffffff83161480610c08575060005473ffffffffffffffffffffffffffffffffffffffff1633145b1515610c1357600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040902054610c439082610f88565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260076020526040902055600654610c769082610f88565b600655604080518281529051309173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a36040805182815290517f9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd34539181900360200190a15050565b600a5460009060ff161515610d0e57fe5b610d188383610f9a565b1515610d2057fe5b50600192915050565b600a5460ff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600860209081526000928352604080842090915290825290205481565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d8c57fe5b60005473ffffffffffffffffffffffffffffffffffffffff82811691161415610db457600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60008373ffffffffffffffffffffffffffffffffffffffff81161515610e2057600080fd5b8373ffffffffffffffffffffffffffffffffffffffff81161515610e4357600080fd5b73ffffffffffffffffffffffffffffffffffffffff86166000908152600860209081526040808320338452909152902054610e7e9085610f88565b73ffffffffffffffffffffffffffffffffffffffff8716600081815260086020908152604080832033845282528083209490945591815260079091522054610ec69085610f88565b73ffffffffffffffffffffffffffffffffffffffff8088166000908152600760205260408082209390935590871681522054610f029085610f72565b73ffffffffffffffffffffffffffffffffffffffff80871660008181526007602090815260409182902094909455805188815290519193928a16927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600195945050505050565b600082820183811015610f8157fe5b9392505050565b600081831015610f9457fe5b50900390565b60008273ffffffffffffffffffffffffffffffffffffffff81161515610fbf57600080fd5b33600090815260076020526040902054610fd99084610f88565b336000908152600760205260408082209290925573ffffffffffffffffffffffffffffffffffffffff8616815220546110129084610f72565b73ffffffffffffffffffffffffffffffffffffffff85166000818152600760209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600193925050505600a165627a7a723058201ae22e62fc310fcf8e8a8e14d9c78e895bac6859699dd6f31b613b95e5a4ed0f0029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000c58536372697020546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035853500000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000c58536372697020546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035853500000000000000000000000000000000000000000000000000000000000"
}