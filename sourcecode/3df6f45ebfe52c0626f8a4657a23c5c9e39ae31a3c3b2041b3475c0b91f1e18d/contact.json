{
  "address": "0x729d11fd8ee835a165a6824362bebac8a7831aea",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Artcoin",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-19\n*/\n\npragma solidity ^0.4.11;\n\ncontract Controller {\n\n  /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n  /// @param _owner The address that sent the ether to create tokens\n  /// @return True if the ether is accepted, false if it throws\n  function proxyPayment(address _owner) payable returns(bool) {\n    return false;\n  }\n\n  /// @notice Notifies the controller about a token transfer allowing the\n  ///  controller to react if desired\n  /// @param _from The origin of the transfer\n  /// @param _to The destination of the transfer\n  /// @param _amount The amount of the transfer\n  /// @return False if the controller does not authorize the transfer\n  function onTransfer(address _from, address _to, uint _amount) returns(bool) {\n    return false;\n  }\n\n  /// @notice Notifies the controller about an approval allowing the\n  ///  controller to react if desired\n  /// @param _owner The address that calls `approve()`\n  /// @param _spender The spender in the `approve()` call\n  /// @param _amount The amount in the `approve()` call\n  /// @return False if the controller does not authorize the approval\n  function onApprove(address _owner, address _spender, uint _amount) returns(bool) {\n    return false;\n  }\n}\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function transfer(address to, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint);\n  function transferFrom(address from, address to, uint value);\n  function approve(address spender, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint;\n\n  mapping (address => uint) balances;\n\n  /**\n   * @dev Fix for the ERC20 short address attack.\n   */\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length < size + 4) {\n       throw;\n     }\n     _;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implemantation of the basic standart token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is BasicToken, ERC20 {\n\n  mapping (address => mapping (address => uint)) allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n    var _allowance = allowed[_from][msg.sender];\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint _value) {\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  /**\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\ncontract Controlled {\n\n  address public controller;\n\n  function Controlled() {\n    controller = msg.sender;\n  }\n\n  function changeController(address _controller) onlyController {\n    controller = _controller;\n  }\n\n  modifier onlyController {\n    if (msg.sender != controller) throw;\n    _;\n  }\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n */\ncontract MintableToken is StandardToken, Controlled {\n\n  event Mint(address indexed to, uint value);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n  uint public totalSupply = 0;\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint _amount) onlyController canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyController returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n\n  modifier canMint() {\n    if (mintingFinished) throw;\n    _;\n  }\n}\n\n/**\n * @title LimitedTransferToken\n * @dev LimitedTransferToken defines the generic interface and the implementation to limit token\n * transferability for different events. It is intended to be used as a base class for other token\n * contracts.\n * LimitedTransferToken has been designed to allow for different limiting factors,\n * this can be achieved by recursively calling super.transferableTokens() until the base class is\n * hit. For example:\n *     function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n *       return min256(unlockedTokens, super.transferableTokens(holder, time));\n *     }\n * A working example is VestedToken.sol:\n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/VestedToken.sol\n */\ncontract LimitedTransferToken is ERC20 {\n\n  /**\n   * @dev Checks whether it can transfer or otherwise throws.\n   */\n  modifier canTransfer(address _sender, uint _value) {\n   if (_value > transferableTokens(_sender, uint64(now))) throw;\n   _;\n  }\n\n  /**\n   * @dev Checks modifier and allows transfer if tokens are not locked.\n   * @param _to The address that will recieve the tokens.\n   * @param _value The amount of tokens to be transferred.\n   */\n  function transfer(address _to, uint _value) canTransfer(msg.sender, _value) {\n    super.transfer(_to, _value);\n  }\n\n  /**\n  * @dev Checks modifier and allows transfer if tokens are not locked.\n  * @param _from The address that will send the tokens.\n  * @param _to The address that will recieve the tokens.\n  * @param _value The amount of tokens to be transferred.\n  */\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) {\n    super.transferFrom(_from, _to, _value);\n  }\n\n  /**\n   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\n   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\n   * specific logic for limiting token transferability for a holder over time.\n   */\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n    return balanceOf(holder);\n  }\n}\n\n\n/**\n * @title Vested token\n * @dev Tokens that can be vested for a group of addresses.\n */\ncontract VestedToken is StandardToken, LimitedTransferToken {\n\n  uint256 MAX_GRANTS_PER_ADDRESS = 20;\n\n  struct TokenGrant {\n    address granter;     // 20 bytes\n    uint256 value;       // 32 bytes\n    uint64 cliff;\n    uint64 vesting;\n    uint64 start;        // 3 * 8 = 24 bytes\n    bool revokable;\n    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\n  } // total 78 bytes = 3 sstore per operation (32 per sstore)\n\n  mapping (address => TokenGrant[]) public grants;\n\n  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\n\n  /**\n   * @dev Grant tokens to a specified address\n   * @param _to address The address which the tokens will be granted to.\n   * @param _value uint256 The amount of tokens to be granted.\n   * @param _start uint64 Time of the beginning of the grant.\n   * @param _cliff uint64 Time of the cliff period.\n   * @param _vesting uint64 The vesting period.\n   * @param _revokable bool If the grant is revokable.\n   * @param _burnsOnRevoke bool When true, the tokens are burned if revoked.\n   */\n  function grantVestedTokens(\n    address _to,\n    uint256 _value,\n    uint64 _start,\n    uint64 _cliff,\n    uint64 _vesting,\n    bool _revokable,\n    bool _burnsOnRevoke\n  ) public {\n\n    // Check for date inconsistencies that may cause unexpected behavior\n    if (_cliff < _start || _vesting < _cliff) {\n      throw;\n    }\n\n    if (tokenGrantsCount(_to) > MAX_GRANTS_PER_ADDRESS) throw;  // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n\n    uint count = grants[_to].push(\n                TokenGrant(\n                  _revokable ? msg.sender : 0,  // avoid storing an extra 20 bytes when it is non-revokable\n                  _value,\n                  _cliff,\n                  _vesting,\n                  _start,\n                  _revokable,\n                  _burnsOnRevoke\n                )\n              );\n    transfer(_to, _value);\n    NewTokenGrant(msg.sender, _to, _value, count - 1);\n  }\n\n  /**\n   * @dev Revoke the grant of tokens of a specifed address.\n   * @param _holder The address which will have its tokens revoked.\n   * @param _grantId The id of the token grant.\n   */\n  function revokeTokenGrant(address _holder, uint _grantId) public {\n    TokenGrant grant = grants[_holder][_grantId];\n\n    if (!grant.revokable) { // Check if grant was revokable\n      throw;\n    }\n\n    if (grant.granter != msg.sender) { // Only granter can revoke it\n      throw;\n    }\n\n    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\n    uint256 nonVested = nonVestedTokens(grant, uint64(now));\n\n    // remove grant from array\n    delete grants[_holder][_grantId];\n    grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\n    grants[_holder].length -= 1;\n\n    balances[receiver] = balances[receiver].add(nonVested);\n    balances[_holder] = balances[_holder].sub(nonVested);\n\n    Transfer(_holder, receiver, nonVested);\n  }\n\n  /**\n   * @dev Calculate the total amount of transferable tokens of a holder at a given time\n   * @param holder address The address of the holder\n   * @param time uint64 The specific time.\n   * @return An uint representing a holder's total amount of transferable tokens.\n   */\n  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n    uint256 grantIndex = tokenGrantsCount(holder);\n    if (grantIndex == 0) return balanceOf(holder); // shortcut for holder without grants\n\n    // Iterate through all the grants the holder has, and add all non-vested tokens\n    uint256 nonVested = 0;\n    for (uint256 i = 0; i < grantIndex; i++) {\n      nonVested = nonVested.add(nonVestedTokens(grants[holder][i], time));\n    }\n\n    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\n    uint256 vestedTransferable = balanceOf(holder).sub(nonVested);\n\n    // Return the minimum of how many vested can transfer and other value\n    // in case there are other limiting transferability factors (default is balanceOf)\n    return SafeMath.min256(vestedTransferable, super.transferableTokens(holder, time));\n  }\n\n  /**\n   * @dev Check the amount of grants that an address has.\n   * @param _holder The holder of the grants.\n   * @return A uint representing the total amount of grants.\n   */\n  function tokenGrantsCount(address _holder) constant returns (uint index) {\n    return grants[_holder].length;\n  }\n\n  /**\n   * @dev Calculate amount of vested tokens at a specifc time.\n   * @param tokens uint256 The amount of tokens grantted.\n   * @param time uint64 The time to be checked\n   * @param start uint64 A time representing the begining of the grant\n   * @param cliff uint64 The cliff period.\n   * @param vesting uint64 The vesting period.\n   * @return An uint representing the amount of vested tokensof a specif grant.\n   *  transferableTokens\n   *   |                         _/--------   vestedTokens rect\n   *   |                       _/\n   *   |                     _/\n   *   |                   _/\n   *   |                 _/\n   *   |                /\n   *   |              .|\n   *   |            .  |\n   *   |          .    |\n   *   |        .      |\n   *   |      .        |(grants[_holder] == address(0)) return 0;\n   *   |    .          |\n   *   +===+===========+---------+----------> time\n   *      Start       Clift    Vesting\n   */\n  function calculateVestedTokens(\n    uint256 tokens,\n    uint256 time,\n    uint256 start,\n    uint256 cliff,\n    uint256 vesting) constant returns (uint256)\n    {\n      // Shortcuts for before cliff and after vesting cases.\n      if (time < cliff) return 0;\n      if (time >= vesting) return tokens;\n\n      // Interpolate all vested tokens.\n      // As before cliff the shortcut returns 0, we can use just calculate a value\n      // in the vesting rect (as shown in above's figure)\n\n      // vestedTokens = tokens * (time - start) / (vesting - start)\n      uint256 vestedTokens = tokens.mul(time.sub(start)).div(vesting.sub(start));\n      return vestedTokens;\n  }\n\n  /**\n   * @dev Get all information about a specifc grant.\n   * @param _holder The address which will have its tokens revoked.\n   * @param _grantId The id of the token grant.\n   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\n   * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\n   */\n  function tokenGrant(address _holder, uint _grantId) constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\n    TokenGrant grant = grants[_holder][_grantId];\n\n    granter = grant.granter;\n    value = grant.value;\n    start = grant.start;\n    cliff = grant.cliff;\n    vesting = grant.vesting;\n    revokable = grant.revokable;\n    burnsOnRevoke = grant.burnsOnRevoke;\n\n    vested = vestedTokens(grant, uint64(now));\n  }\n\n  /**\n   * @dev Get the amount of vested tokens at a specific time.\n   * @param grant TokenGrant The grant to be checked.\n   * @param time The time to be checked\n   * @return An uint representing the amount of vested tokens of a specific grant at a specific time.\n   */\n  function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n    return calculateVestedTokens(\n      grant.value,\n      uint256(time),\n      uint256(grant.start),\n      uint256(grant.cliff),\n      uint256(grant.vesting)\n    );\n  }\n\n  /**\n   * @dev Calculate the amount of non vested tokens at a specific time.\n   * @param grant TokenGrant The grant to be checked.\n   * @param time uint64 The time to be checked\n   * @return An uint representing the amount of non vested tokens of a specifc grant on the\n   * passed time frame.\n   */\n  function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n    return grant.value.sub(vestedTokens(grant, time));\n  }\n\n  /**\n   * @dev Calculate the date when the holder can trasfer all its tokens\n   * @param holder address The address of the holder\n   * @return An uint representing the date of the last transferable tokens.\n   */\n  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\n    date = uint64(now);\n    uint256 grantIndex = grants[holder].length;\n    for (uint256 i = 0; i < grantIndex; i++) {\n      date = SafeMath.max64(grants[holder][i].vesting, date);\n    }\n  }\n}\n\n\n/// @title Artcoin (ART) - democratizing culture.\ncontract Artcoin is MintableToken, VestedToken {\n\n  string public constant name = 'Artcoin';\n  string public constant symbol = 'ART';\n  uint public constant decimals = 18;\n\n  function() public payable {\n    if (isContract(controller)) {\n      if (!Controller(controller).proxyPayment.value(msg.value)(msg.sender)) throw;\n    } else {\n      throw;\n    }\n  }\n\n  function isContract(address _addr) constant internal returns(bool) {\n    uint size;\n    if (_addr == address(0)) return false;\n    assembly {\n      size := extcodesize(_addr)\n    }\n    return size > 0;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"tokenGrantsCount\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grants\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"tokenGrant\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"vested\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"lastTokenIsTransferableDate\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_cliff\",\"type\":\"uint64\"},{\"name\":\"_vesting\",\"type\":\"uint64\"},{\"name\":\"_revokable\",\"type\":\"bool\"},{\"name\":\"_burnsOnRevoke\",\"type\":\"bool\"}],\"name\":\"grantVestedTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"transferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"vesting\",\"type\":\"uint256\"}],\"name\":\"calculateVestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"revokeTokenGrant\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"grantId\",\"type\":\"uint256\"}],\"name\":\"NewTokenGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526003805460a060020a60ff0219169055600060045560146005555b60038054600160a060020a03191633600160a060020a03161790555b5b61190d8061004b6000396000f3006060604052361561010c5763ffffffff60e060020a60003504166302a72a4c81146101b557806305d2035b146101e357806306fdde0314610207578063095ea7b31461029757806318160ddd146102b857806323b872dd146102da5780632c71e60a14610301578063313ce567146103715780633cebb8231461039357806340c10f19146103b1578063600e85b7146103e45780636c182e991461045d57806370a08231146104955780637d64bcb4146104c357806395d89b41146104e75780639754a4d914610577578063a9059cbb146105ba578063d347c205146105db578063dd62ed3e14610615578063df3c211b14610649578063eb944e4c1461067a578063f77c47911461069b575b6101b35b60035461012590600160a060020a03166106c7565b156101aa57600354604080516000602091820152815160e260020a633d230c15028152600160a060020a0333811660048301529251929093169263f48c305492349260248084019391929182900301818588803b151561018157fe5b6125ee5a03f1151561018f57fe5b505060405151151591506101a590505760006000fd5b6101b0565b60006000fd5b5b565b005b34156101bd57fe5b6101d1600160a060020a03600435166106f4565b60408051918252519081900360200190f35b34156101eb57fe5b6101f3610713565b604080519115158252519081900360200190f35b341561020f57fe5b610217610723565b60408051602080825283518183015283519192839290830191850190808383821561025d575b80518252602083111561025d57601f19909201916020918201910161023d565b505050905090810190601f1680156102895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029f57fe5b6101b3600160a060020a0360043516602435610747565b005b34156102c057fe5b6101d16107e7565b60408051918252519081900360200190f35b34156102e257fe5b6101b3600160a060020a03600435811690602435166044356107ed565b005b341561030957fe5b610320600160a060020a036004351660243561081a565b60408051600160a060020a03909816885260208801969096526001604060020a039485168787015292841660608701529216608085015290151560a0840152151560c0830152519081900360e00190f35b341561037957fe5b6101d161089a565b60408051918252519081900360200190f35b341561039b57fe5b6101b3600160a060020a036004351661089f565b005b34156103b957fe5b6101f3600160a060020a03600435166024356108db565b604080519115158252519081900360200190f35b34156103ec57fe5b610403600160a060020a03600435166024356109af565b60408051600160a060020a0390991689526020890197909752878701959095526001604060020a039384166060880152918316608087015290911660a0850152151560c0840152151560e083015251908190036101000190f35b341561046557fe5b610479600160a060020a0360043516610bc1565b604080516001604060020a039092168252519081900360200190f35b341561049d57fe5b6101d1600160a060020a0360043516610c4d565b60408051918252519081900360200190f35b34156104cb57fe5b6101f3610c6c565b604080519115158252519081900360200190f35b34156104ef57fe5b610217610cd2565b60408051602080825283518183015283519192839290830191850190808383821561025d575b80518252602083111561025d57601f19909201916020918201910161023d565b505050905090810190601f1680156102895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561057f57fe5b6101b3600160a060020a03600435166024356001604060020a036044358116906064358116906084351660a435151560c4351515610cf2565b005b34156105c257fe5b6101b3600160a060020a0360043516602435610f1c565b005b34156105e357fe5b6101d1600160a060020a03600435166001604060020a0360243516610f47565b60408051918252519081900360200190f35b341561061d57fe5b6101d1600160a060020a0360043581169060243516611096565b60408051918252519081900360200190f35b341561065157fe5b6101d16004356024356044356064356084356110c3565b60408051918252519081900360200190f35b341561068257fe5b6101b3600160a060020a0360043516602435611136565b005b34156106a357fe5b6106ab6114da565b60408051600160a060020a039092168252519081900360200190f35b600080600160a060020a03831615156106e357600091506106ee565b823b90506000811191505b50919050565b600160a060020a0381166000908152600660205260409020545b919050565b60035460a060020a900460ff1681565b604080518082019091526007815260c960020a6620b93a31b7b4b702602082015281565b801580159061077a5750600160a060020a0333811660009081526002602090815260408083209386168352929052205415155b156107855760006000fd5b600160a060020a03338116600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35b5050565b60045481565b82816107f98242610f47565b8111156108065760006000fd5b6108118585856114e9565b5b5b5050505050565b60066020528160005260406000208181548110151561083557fe5b906000526020600020906003020160005b5080546001820154600290920154600160a060020a0390911693509091506001604060020a0380821691604060020a8104821691608060020a8204169060ff60c060020a820481169160c860020a90041687565b601281565b60035433600160a060020a039081169116146108bb5760006000fd5b60038054600160a060020a031916600160a060020a0383161790555b5b50565b60035460009033600160a060020a039081169116146108fa5760006000fd5b60035460a060020a900460ff16156109125760006000fd5b600454610925908363ffffffff6115fb16565b600455600160a060020a038316600090815260016020526040902054610951908363ffffffff6115fb16565b600160a060020a038416600081815260016020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a25060015b5b5b92915050565b600060006000600060006000600060006000600660008c600160a060020a0316600160a060020a031681526020019081526020016000208a8154811015156109f357fe5b906000526020600020906003020160005b5090508060000160009054906101000a9004600160a060020a03169850806001015497508060020160109054906101000a90046001604060020a031695508060020160009054906101000a90046001604060020a031694508060020160089054906101000a90046001604060020a031693508060020160189054906101000a900460ff1692508060020160199054906101000a900460ff169150610bb08160e060405190810160405290816000820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a03168152602001600182015481526020016002820160009054906101000a90046001604060020a03166001604060020a03166001604060020a031681526020016002820160089054906101000a90046001604060020a03166001604060020a03166001604060020a031681526020016002820160109054906101000a90046001604060020a03166001604060020a03166001604060020a031681526020016002820160189054906101000a900460ff161515151581526020016002820160199054906101000a900460ff16151515158152505042611617565b96505b509295985092959890939650565b600160a060020a03811660009081526006602052604081205442915b81811015610c4557600160a060020a03841660009081526006602052604090208054610c3a919083908110610c0e57fe5b906000526020600020906003020160005b5060020154604060020a90046001604060020a031684611663565b92505b600101610bdd565b5b5050919050565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a03908116911614610c8b5760006000fd5b6003805460a060020a60ff02191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a15060015b5b90565b604080518082019091526003815260ea60020a6210549502602082015281565b6000856001604060020a0316856001604060020a03161080610d255750846001604060020a0316846001604060020a0316105b15610d305760006000fd5b600554610d3c896106f4565b1115610d485760006000fd5b600160a060020a0388166000908152600660205260409020805460018101610d708382611819565b916000526020600020906003020160005b60e06040519081016040528087610d99576000610d9b565b335b600160a060020a03908116825260208083018e90526001604060020a038c81166040808601919091528c82166060808701919091528f83166080808801919091528d151560a0808901919091528d151560c09889015288518b54600160a060020a0319169716969096178a559387015160018a0155908601516002909801805491870151938701519487015196909501516001604060020a031990911697821697909717604060020a608060020a031916604060020a9282169290920291909117608060020a60c060020a031916608060020a92909116919091021760c060020a60ff02191660c060020a921515929092029190911760c860020a60ff02191660c860020a9315159390930292909217909155509050610ebb8888610f1c565b87600160a060020a031633600160a060020a03167ff9565aecd648a0466ffb964a79eeccdf1120ad6276189c687a6e9fe73984d9bb8960018503604051808381526020018281526020019250505060405180910390a35b5050505050505050565b3381610f288242610f47565b811115610f355760006000fd5b610f3f8484611690565b5b5b50505050565b60006000600060006000610f5a876106f4565b9350831515610f7357610f6c87610c4d565b945061108c565b60009250600091505b8382101561105b57600160a060020a0387166000908152600660205260409020805461104d916110409185908110610fb057fe5b906000526020600020906003020160005b506040805160e0810182528254600160a060020a03168152600183015460208201526002909201546001604060020a0380821692840192909252604060020a810482166060840152608060020a8104909116608083015260ff60c060020a82048116151560a084015260c860020a90910416151560c08201528861174c565b849063ffffffff6115fb16565b92505b600190910190610f7c565b6110748361106889610c4d565b9063ffffffff61177516565b905061108981611084898961178e565b6117a2565b94505b5050505092915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60006000838610156110d8576000915061112c565b8286106110e75786915061112c565b6111266110fa848763ffffffff61177516565b61111a61110d898963ffffffff61177516565b8a9063ffffffff6117bc16565b9063ffffffff6117eb16565b90508091505b5095945050505050565b600160a060020a03821660009081526006602052604081208054829182918590811061115e57fe5b906000526020600020906003020160005b50600281015490935060c060020a900460ff16151561118e5760006000fd5b825433600160a060020a039081169116146111a95760006000fd5b600283015460c860020a900460ff166111c257336111c6565b61dead5b6040805160e0810182528554600160a060020a031681526001860154602082015260028601546001604060020a0380821693830193909352604060020a810483166060830152608060020a8104909216608082015260ff60c060020a83048116151560a083015260c860020a909204909116151560c082015290925061124c904261174c565b600160a060020a03861660009081526006602052604090208054919250908590811061127457fe5b906000526020600020906003020160005b508054600160a060020a03191681556000600180830182905560029092018054600160d060020a0319169055600160a060020a0387168152600660205260409020805490916112da919063ffffffff61177516565b815481106112e457fe5b906000526020600020906003020160005b50600160a060020a038616600090815260066020526040902080548690811061131a57fe5b906000526020600020906003020160005b5081548154600160a060020a031916600160a060020a0391821617825560018084015490830155600292830180549390920180546001604060020a0319166001604060020a03948516178082558354604060020a90819004861602604060020a608060020a0319909116178082558354608060020a90819004909516909402608060020a60c060020a031990941693909317808455825460ff60c060020a918290048116151590910260c060020a60ff021990921691909117808555925460c860020a9081900490911615150260c860020a60ff021990921691909117909155851660009081526006602052604090208054600019019061142c9082611819565b50600160a060020a038216600090815260016020526040902054611456908263ffffffff6115fb16565b600160a060020a03808416600090815260016020526040808220939093559087168152205461148b908263ffffffff61177516565b600160a060020a0380871660008181526001602090815260409182902094909455805185815290519286169391926000805160206118c2833981519152929181900390910190a35b5050505050565b600354600160a060020a031681565b6000606060643610156114fc5760006000fd5b600160a060020a038086166000908152600260209081526040808320338516845282528083205493881683526001909152902054909250611543908463ffffffff6115fb16565b600160a060020a038086166000908152600160205260408082209390935590871681522054611578908463ffffffff61177516565b600160a060020a0386166000908152600160205260409020556115a1828463ffffffff61177516565b600160a060020a038087166000818152600260209081526040808320338616845282529182902094909455805187815290519288169391926000805160206118c2833981519152929181900390910190a35b5b5050505050565b600082820161160c84821015611808565b8091505b5092915050565b600061165a8360200151836001604060020a031685608001516001604060020a031686604001516001604060020a031687606001516001604060020a03166110c3565b90505b92915050565b6000816001604060020a0316836001604060020a03161015611685578161165a565b825b90505b92915050565b604060443610156116a15760006000fd5b600160a060020a0333166000908152600160205260409020546116ca908363ffffffff61177516565b600160a060020a0333811660009081526001602052604080822093909355908516815220546116ff908363ffffffff6115fb16565b600160a060020a038085166000818152600160209081526040918290209490945580518681529051919333909316926000805160206118c283398151915292918290030190a35b5b505050565b600061165a61175b8484611617565b60208501519063ffffffff61177516565b90505b92915050565b600061178383831115611808565b508082035b92915050565b600061165a83610c4d565b90505b92915050565b6000818310611685578161165a565b825b90505b92915050565b600082820261160c8415806117db57508385838115156117d857fe5b04145b611808565b8091505b5092915050565b6000600082848115156117fa57fe5b0490508091505b5092915050565b8015156108d75760006000fd5b5b50565b81548183558181151161174657600302816003028360005260206000209182019101611746919061187d565b5b505050565b81548183558181151161174657600302816003028360005260206000209182019101611746919061187d565b5b505050565b610cce91905b808211156118ba578054600160a060020a031916815560006001820155600281018054600160d060020a0319169055600301611883565b5090565b905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820fe9eaf28fb9590b76df59a47facd722bc026e9f058836e305f9ee6e6448ec0a90029"
}