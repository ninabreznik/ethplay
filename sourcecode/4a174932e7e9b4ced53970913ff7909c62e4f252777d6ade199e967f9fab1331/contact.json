{
  "address": "0x3c20d67b6b1ae0985f913abb7397babc2fbb1a1f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ICEDIUM",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-12\n*/\n\npragma solidity ^0.4.23;\n\n\n// ----------------------------------------------------------------------------\n// ICEDIUM ERC20 Token\n//\n// Genesis Wallet : 0xDECcDEC1C4fD0B2Ae4207cEb09076C591528373b\n// Symbol         : ICD\n// Name           : ICEDIUM\n// Total supply   : 300 000 000 000\n// Decimals       : 18\n//\n// (c) by ICEDIUM GROUP 2019\n// ----------------------------------------------------------------------------\n\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n    // ------------------------------------------------------------------------\n    // ERC20 Token, with the addition of symbol, name and decimals supply and founder\n    // ------------------------------------------------------------------------\ncontract ICEDIUM is ERC20Interface{\n    string public name = \"ICEDIUM\";\n    string public symbol = \"ICD\";\n    uint8 public decimals = 18;\n    // (300 mln with 18 decimals) \n    uint public supply; \n    address public founder;\n    mapping(address => uint) public balances;\n    mapping(address => mapping(address => uint)) allowed;\n    //allowed[0x111...owner][0x2222...spender] = 100;\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    // ------------------------------------------------------------------------\n    // Constructor With 300 000 000 supply, All deployed tokens sent to Genesis wallet\n    // ------------------------------------------------------------------------\n    constructor() public{\n        supply = 300000000000000000000000000;\n        founder = msg.sender;\n        balances[founder] = supply;\n    }\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public view returns(uint){\n        return allowed[tokenOwner][spender];\n    }\n    // ------------------------------------------------------------------------\n    // Token owner can approve for spender to transferFrom(...) tokens\n    // from the token owner's account\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns(bool){\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n    // ------------------------------------------------------------------------\n    //  Transfer tokens from the 'from' account to the 'to' account\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns(bool){\n        require(allowed[from][msg.sender] >= tokens);\n        require(balances[from] >= tokens);\n\n        balances[from] -= tokens;\n        balances[to] += tokens;\n        allowed[from][msg.sender] -= tokens;\n\n        emit Transfer(from, to, tokens);\n\n        return true;\n    }\n    // ------------------------------------------------------------------------\n    // Public function to return supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public view returns (uint){\n        return supply;\n    }\n    // ------------------------------------------------------------------------\n    // Public function to return balance of tokenOwner\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public view returns (uint balance){\n        return balances[tokenOwner];\n    }\n    // ------------------------------------------------------------------------\n    // Public Function to transfer tokens\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success){\n        require(balances[msg.sender] >= tokens && tokens > 0);\n        balances[to] += tokens;\n        balances[msg.sender] -= tokens;\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    } \n    // ------------------------------------------------------------------------\n    // Revert function to NOT accept ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n}",
  "bytecode": "60806040526040805190810160405280600781526020017f4943454449554d000000000000000000000000000000000000000000000000008152506000908051906020019061004f929190610185565b506040805190810160405280600381526020017f49434400000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b929190610185565b506012600260006101000a81548160ff021916908360ff1602179055503480156100c457600080fd5b506af8277896582678ac00000060038190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060035460056000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061022a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c657805160ff19168380011785556101f4565b828001600101855582156101f4579182015b828111156101f35782518255916020019190600101906101d8565b5b5090506102019190610205565b5090565b61022791905b8082111561022357600081600090555060010161020b565b5090565b90565b610c90806102396000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063047fc9aa146100bf57806306fdde03146100ea578063095ea7b31461017a57806318160ddd146101df57806323b872dd1461020a57806327e235e31461028f578063313ce567146102e65780634d853ee51461031757806370a082311461036e57806395d89b41146103c5578063a9059cbb14610455578063dd62ed3e146104ba575b600080fd5b3480156100cb57600080fd5b506100d4610531565b6040518082815260200191505060405180910390f35b3480156100f657600080fd5b506100ff610537565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013f578082015181840152602081019050610124565b50505050905090810190601f16801561016c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018657600080fd5b506101c5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105d5565b604051808215151515815260200191505060405180910390f35b3480156101eb57600080fd5b506101f46106c7565b6040518082815260200191505060405180910390f35b34801561021657600080fd5b50610275600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106d1565b604051808215151515815260200191505060405180910390f35b34801561029b57600080fd5b506102d0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610940565b6040518082815260200191505060405180910390f35b3480156102f257600080fd5b506102fb610958565b604051808260ff1660ff16815260200191505060405180910390f35b34801561032357600080fd5b5061032c61096b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037a57600080fd5b506103af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610991565b6040518082815260200191505060405180910390f35b3480156103d157600080fd5b506103da6109da565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561041a5780820151818401526020810190506103ff565b50505050905090810190601f1680156104475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561046157600080fd5b506104a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a78565b604051808215151515815260200191505060405180910390f35b3480156104c657600080fd5b5061051b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bdd565b6040518082815260200191505060405180910390f35b60035481565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105cd5780601f106105a2576101008083540402835291602001916105cd565b820191906000526020600020905b8154815290600101906020018083116105b057829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600354905090565b600081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561075e57600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156107ac57600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60056020528060005260406000206000915090505481565b600260009054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a705780601f10610a4557610100808354040283529160200191610a70565b820191906000526020600020905b815481529060010190602001808311610a5357829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610ac95750600082115b1515610ad457600080fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505600a165627a7a72305820fe9c4abf2c246c979cf5aa6dc2a5df6238e1e539cd7c9a85286361c9e87e657e0029"
}