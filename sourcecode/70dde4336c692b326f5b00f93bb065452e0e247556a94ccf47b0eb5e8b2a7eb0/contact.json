{
  "address": "0xe6f32cf814d266b499c83ac1fb89a96ebab0dd57",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SuntoshiToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-05\n*/\n\n//File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\npragma solidity ^0.4.21;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n//File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\npragma solidity ^0.4.21;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n//File: contracts/tokens/SuntoshiToken.sol\n/**\n * @title Suntoshi Token\n * MiniMe Token with a subset of features. ERC20 Compliant\n * @version 1.0\n\n */\npragma solidity ^0.4.21;\n\n\n\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n}\n\ncontract SuntoshiToken is Ownable {\n    using SafeMath for uint256;\n\n    string public constant name = \"Suntoshi Token\";\n    string public constant symbol = \"SUNTO\";\n    uint8 public constant decimals = 18;\n    string public version = \"SUNTO_0.1\";\n\n    /**\n    * @dev `Checkpoint` is the structure that attaches a block number to a\n    * given value, the block number attached is the one that last changed the value\n    */\n    struct Checkpoint {\n        // `fromBlock` is the block number that the value was generatedsuper.mint(_to, _amount); from\n        uint128 fromBlock;\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint256 public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    ////////////////\n    // Events\n    ////////////////\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n\n    /**\n     * @dev Constructor of SuntoshiToken that instantiates a new MiniMe inspired ERC20 token\n     */\n    function SuntoshiToken() public {\n        // token should not be transferrable until after all tokens have been issued\n        transfersEnabled = false;\n        creationBlock = block.number;\n    }\n\n    ///////////////////\n    // ERC20 Methods\n    ///////////////////\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n        doTransfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n\n        // The controller of this contract can move tokens around at will,\n        //  this is important to recognize! Confirm that you trust the\n        //  controller of this contract, which in most situations should be\n        //  another open source smart contract or 0x0\n        if (msg.sender != owner) {\n            require(transfersEnabled);\n\n            // The standard ERC 20 transferFrom functionality\n            require(allowed[_from][msg.sender] >= _amount);\n            allowed[_from][msg.sender] -= _amount;\n        }\n        doTransfer(_from, _to, _amount);\n        return true;\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint256 _amount) internal {\n        if (_amount == 0) {\n            emit Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\n            return;\n        }\n\n        // Do not allow transfer to the token contract itself - Matt: modified to allow sending to to address(0)\n        require((_to != address(this)));\n\n        // If the amount being transfered is more than the balance of the\n        //  account the transfer throws\n        uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n\n        require(previousBalanceFrom >= _amount);\n\n        // First update the balance array with the new value for the address\n        //  sending the tokens\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n        // Then update the balance array with the new value for the address\n        //  receiving the tokens\n        uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n        // An event to make the transfer easy to find on the blockchain\n        emit Transfer(_from, _to, _amount);\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\n        require(approve(_spender, _amount));\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() public constant returns (uint256) {\n        return totalSupplyAt(block.number);\n    }\n\n    ////////////////\n    // Query balance and totalSupply in History\n    ////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint256 _blockNumber) public constant returns (uint256) {\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        if ((balances[_owner].length == 0)|| (balances[_owner][0].fromBlock > _blockNumber)) {\n            return 0;\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint256 _blockNumber) public constant returns(uint256) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            return 0;\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n    ////////////////\n    // Generate and destroy tokens\n    ////////////////\n\n    /**\n    * @dev Generates `_amount` tokens that are assigned to `_owner`\n    * @param _owner The address that will be assigned the new tokens\n    * @param _amount The quantity of tokens generated\n    * @return True if the tokens are generated correctly\n    */\n    function generateTokens(address _owner, uint256 _amount) public onlyOwner returns (bool) {\n        uint256 curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint256 previousBalanceTo = balanceOf(_owner);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        emit Transfer(0, _owner, _amount);\n        return true;\n    }\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint256 _amount) onlyOwner public returns (bool) {\n        uint256 curTotalSupply = totalSupply();\n        require(curTotalSupply >= _amount);\n        uint256 previousBalanceFrom = balanceOf(_owner);\n        require(previousBalanceFrom >= _amount);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        emit Transfer(_owner, 0, _amount);\n        return true;\n    }\n\n    ////////////////\n    // Enable tokens transfers\n    ////////////////\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) public onlyOwner {\n        transfersEnabled = _transfersEnabled;\n    }\n\n    ////////////////\n    // Internal helper functions to query and set a value in a snapshot array\n    ////////////////\n\n    /**\n    * @dev `getValueAt` retrieves the number of tokens at a given block number\n    * @param checkpoints The history of values being queried\n    * @param _block The block number to retrieve the value at\n    * @return The number of tokens being queried\n    */\n    function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) constant internal returns (uint256) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint256 min = 0;\n        uint256 max = checkpoints.length-1;\n        while (max > min) {\n            uint256 mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value\n    ) internal  {\n        if ((checkpoints.length == 0)\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n               newCheckPoint.fromBlock =  uint128(block.number);\n               newCheckPoint.value = uint128(_value);\n           } else {\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n               oldCheckPoint.value = uint128(_value);\n           }\n    }\n}",
  "bytecode": "60c0604052600960808190527f53554e544f5f302e31000000000000000000000000000000000000000000000060a090815261003e9160019190610071565b5034801561004b57600080fd5b5060008054600160a060020a031916331790556006805460ff191690554360035561010c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100b257805160ff19168380011785556100df565b828001600101855582156100df579182015b828111156100df5782518255916020019190600101906100c4565b506100eb9291506100ef565b5090565b61010991905b808211156100eb57600081556001016100f5565b90565b610f808061011b6000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610116578063095ea7b3146101a057806317634514146101d857806318160ddd146101ff57806323b872dd14610214578063313ce5671461023e5780634ee2cd7e1461026957806354fd4d501461028d57806370a08231146102a2578063827f32c0146102c35780638da5cb5b146102e757806395d89b4114610318578063981b24d01461032d578063a9059cbb14610345578063bef97c8714610369578063cae9ca511461037e578063d3ce77fe146103e7578063dd62ed3e1461040b578063f2fde38b14610432578063f41e60c514610455575b600080fd5b34801561012257600080fd5b5061012b61046f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016557818101518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ac57600080fd5b506101c4600160a060020a03600435166024356104a6565b604080519115158252519081900360200190f35b3480156101e457600080fd5b506101ed61055b565b60408051918252519081900360200190f35b34801561020b57600080fd5b506101ed610561565b34801561022057600080fd5b506101c4600160a060020a0360043581169060243516604435610572565b34801561024a57600080fd5b50610253610606565b6040805160ff9092168252519081900360200190f35b34801561027557600080fd5b506101ed600160a060020a036004351660243561060b565b34801561029957600080fd5b5061012b61069d565b3480156102ae57600080fd5b506101ed600160a060020a036004351661072a565b3480156102cf57600080fd5b506101c4600160a060020a036004351660243561073e565b3480156102f357600080fd5b506102fc6107f8565b60408051600160a060020a039092168252519081900360200190f35b34801561032457600080fd5b5061012b610807565b34801561033957600080fd5b506101ed60043561083e565b34801561035157600080fd5b506101c4600160a060020a0360043516602435610892565b34801561037557600080fd5b506101c46108ba565b34801561038a57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101c4948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506108c39650505050505050565b3480156103f357600080fd5b506101c4600160a060020a03600435166024356109de565b34801561041757600080fd5b506101ed600160a060020a0360043581169060243516610a94565b34801561043e57600080fd5b50610453600160a060020a0360043516610abf565b005b34801561046157600080fd5b506104536004351515610b53565b60408051808201909152600e81527f53756e746f73686920546f6b656e000000000000000000000000000000000000602082015281565b60065460009060ff1615156104ba57600080fd5b8115806104e85750336000908152600560209081526040808320600160a060020a0387168452909152902054155b15156104f357600080fd5b336000818152600560209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60035481565b600061056c4361083e565b90505b90565b60008054600160a060020a031633146105f15760065460ff16151561059657600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020548211156105c657600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020805483900390555b6105fc848484610b7d565b5060019392505050565b601281565b600160a060020a03821660009081526004602052604081205415806106675750600160a060020a03831660009081526004602052604081208054849290811061065057fe5b6000918252602090912001546001608060020a0316115b1561067457506000610555565b600160a060020a03831660009081526004602052604090206106969083610c98565b9050610555565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107225780601f106106f757610100808354040283529160200191610722565b820191906000526020600020905b81548152906001019060200180831161070557829003601f168201915b505050505081565b6000610736824361060b565b90505b919050565b6000805481908190600160a060020a0316331461075a57600080fd5b610762610561565b915083820182111561077357600080fd5b61077c8561072a565b905083810181111561078d57600080fd5b61079a6002858401610df7565b600160a060020a03851660009081526004602052604090206107be90828601610df7565b604080518581529051600160a060020a03871691600091600080516020610f358339815191529181900360200190a3506001949350505050565b600054600160a060020a031681565b60408051808201909152600581527f53554e544f000000000000000000000000000000000000000000000000000000602082015281565b60025460009015806108735750816002600081548110151561085c57fe5b6000918252602090912001546001608060020a0316115b1561088057506000610739565b61088b600283610c98565b9050610739565b60065460009060ff1615156108a657600080fd5b6108b1338484610b7d565b50600192915050565b60065460ff1681565b60006108cf84846104a6565b15156108da57600080fd5b6040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018690523060448401819052608060648501908152865160848601528651600160a060020a038a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b8381101561096d578181015183820152602001610955565b50505050905090810190601f16801561099a5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156109bc57600080fd5b505af11580156109d0573d6000803e3d6000fd5b506001979650505050505050565b6000805481908190600160a060020a031633146109fa57600080fd5b610a02610561565b915083821015610a1157600080fd5b610a1a8561072a565b905083811015610a2957600080fd5b610a366002858403610df7565b600160a060020a0385166000908152600460205260409020610a5a90858303610df7565b604080518581529051600091600160a060020a03881691600080516020610f358339815191529181900360200190a3506001949350505050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600054600160a060020a03163314610ad657600080fd5b600160a060020a0381161515610aeb57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610b6a57600080fd5b6006805460ff1916911515919091179055565b600080821515610bc55783600160a060020a031685600160a060020a0316600080516020610f35833981519152856040518082815260200191505060405180910390a3610c91565b600160a060020a038416301415610bdb57600080fd5b610be5854361060b565b915082821015610bf457600080fd5b600160a060020a0385166000908152600460205260409020610c1890848403610df7565b610c22844361060b565b9050828101811115610c3357600080fd5b600160a060020a0384166000908152600460205260409020610c5790828501610df7565b83600160a060020a031685600160a060020a0316600080516020610f35833981519152856040518082815260200191505060405180910390a35b5050505050565b600080600080858054905060001415610cb45760009350610dee565b855486906000198101908110610cc657fe5b6000918252602090912001546001608060020a03168510610d2357855486906000198101908110610cf357fe5b60009182526020909120015470010000000000000000000000000000000090046001608060020a03169350610dee565b856000815481101515610d3257fe5b6000918252602090912001546001608060020a0316851015610d575760009350610dee565b8554600093506000190191505b82821115610db4576002600183850101049050848682815481101515610d8657fe5b6000918252602090912001546001608060020a031611610da857809250610daf565b6001810391505b610d64565b8583815481101515610dc257fe5b60009182526020909120015470010000000000000000000000000000000090046001608060020a031693505b50505092915050565b815460009081901580610e3057508354439085906000198101908110610e1957fe5b6000918252602090912001546001608060020a0316105b15610ea25783548490610e468260018301610eed565b81548110610e5057fe5b600091825260209091200180546001608060020a03858116700100000000000000000000000000000000024382166fffffffffffffffffffffffffffffffff1990931692909217161781559150610ee7565b835484906000198101908110610eb457fe5b600091825260209091200180546001608060020a0380861670010000000000000000000000000000000002911617815590505b50505050565b815481835581811115610f1157600083815260209020610f11918101908301610f16565b505050565b61056f91905b80821115610f305760008155600101610f1c565b50905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058202a5ce560f0c41f16d665c162c20409a7028ab805c9f347f4dbdd52749b8a0da90029"
}