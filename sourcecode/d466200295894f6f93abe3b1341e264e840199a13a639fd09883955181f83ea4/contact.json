{
  "address": "0xdb2abcbe02515b9e3a923b4a95f8103f72509069",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GiniCon",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-03\n*/\n\npragma solidity ^0.4.24;\n\n  \n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol \n\n  \n\n/** \n\n * @title ERC20 interface \n\n * @dev see https://github.com/ethereum/EIPs/issues/20 \n\n */ \n\ninterface IERC20 { \n\n    function transfer(address to, uint256 value) external returns (bool); \n\n  \n\n    function approve(address spender, uint256 value) external returns (bool); \n\n  \n\n    function transferFrom(address from, address to, uint256 value) external returns (bool); \n\n  \n\n    function totalSupply() external view returns (uint256); \n\n  \n\n    function balanceOf(address who) external view returns (uint256); \n\n  \n\n    function allowance(address owner, address spender) external view returns (uint256); \n\n  \n\n    event Transfer(address indexed from, address indexed to, uint256 value); \n\n  \n\n    event Approval(address indexed owner, address indexed spender, uint256 value); \n\n} \n\n  \n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol \n\n  \n\n/** \n\n * @title SafeMath \n\n * @dev Unsigned math operations with safety checks that revert on error \n\n */ \n\nlibrary SafeMath { \n\n    /** \n\n    * @dev Multiplies two unsigned integers, reverts on overflow. \n\n    */ \n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) { \n\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n\n        // benefit is lost if 'b' is also tested. \n\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522 \n\n        if (a == 0) { \n\n            return 0; \n\n        } \n\n  \n\n        uint256 c = a * b; \n\n        require(c / a == b); \n\n  \n\n        return c; \n\n    } \n\n  \n\n    /** \n\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero. \n\n    */ \n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) { \n\n        // Solidity only automatically asserts when dividing by 0 \n\n        require(b > 0); \n\n        uint256 c = a / b; \n\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold \n\n  \n\n        return c; \n\n    } \n\n  \n\n    /** \n\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend). \n\n    */ \n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { \n\n        require(b <= a); \n\n        uint256 c = a - b; \n\n  \n\n        return c; \n\n    } \n\n  \n\n    /** \n\n    * @dev Adds two unsigned integers, reverts on overflow. \n\n    */ \n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) { \n\n        uint256 c = a + b; \n\n        require(c >= a); \n\n  \n\n        return c; \n\n    } \n\n  \n\n    /** \n\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo), \n\n    * reverts when dividing by zero. \n\n    */ \n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) { \n\n        require(b != 0); \n\n        return a % b; \n\n    } \n\n} \n\n  \n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol \n\n  \n\n/** \n\n * @title Standard ERC20 token \n\n * \n\n * @dev Implementation of the basic standard token. \n\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md \n\n * GiniCon based on code by FirstBlood: \n\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol \n\n * \n\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for \n\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other \n\n * compliant implementations may not do it. \n\n */ \n\ncontract ERC20 is IERC20 { \n\n    using SafeMath for uint256; \n\n  \n\n    mapping (address => uint256) private _balances; \n\n  \n\n    mapping (address => mapping (address => uint256)) private _allowed; \n\n  \n\n    uint256 private _totalSupply; \n\n  \n\n    /** \n\n    * @dev Total number of tokens in existence \n\n    */ \n\n    function totalSupply() public view returns (uint256) { \n\n        return _totalSupply; \n\n    } \n\n  \n\n    /** \n\n    * @dev Gets the balance of the specified address. \n\n    * @param owner The address to query the balance of. \n\n    * @return An uint256 representing the amount owned by the passed address. \n\n    */ \n\n    function balanceOf(address owner) public view returns (uint256) { \n\n        return _balances[owner]; \n\n    } \n\n  \n\n    /** \n\n     * @dev Function to check the amount of tokens that an owner allowed to a spender. \n\n     * @param owner address The address which owns the funds. \n\n     * @param spender address The address which will spend the funds. \n\n     * @return A uint256 specifying the amount of tokens still available for the spender. \n\n     */ \n\n    function allowance(address owner, address spender) public view returns (uint256) { \n\n        return _allowed[owner][spender]; \n\n    } \n\n  \n\n    /** \n\n    * @dev Transfer token for a specified address \n\n    * @param to The address to transfer to. \n\n    * @param value The amount to be transferred. \n\n    */ \n\n    function transfer(address to, uint256 value) public returns (bool) { \n\n        _transfer(msg.sender, to, value); \n\n        return true; \n\n    } \n\n  \n\n    /** \n\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. \n\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old \n\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this \n\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: \n\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \n\n     * @param spender The address which will spend the funds. \n\n     * @param value The amount of tokens to be spent. \n\n     */ \n\n    function approve(address spender, uint256 value) public returns (bool) { \n\n        require(spender != address(0)); \n\n  \n\n        _allowed[msg.sender][spender] = value; \n\n        emit Approval(msg.sender, spender, value); \n\n        return true; \n\n    } \n\n  \n\n    /** \n\n     * @dev Transfer tokens from one address to another. \n\n     * Note that while this function emits an Approval event, this is not required as per the specification, \n\n     * and other compliant implementations may not emit the event. \n\n     * @param from address The address which you want to send tokens from \n\n     * @param to address The address which you want to transfer to \n\n     * @param value uint256 the amount of tokens to be transferred \n\n     */ \n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) { \n\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value); \n\n        _transfer(from, to, value); \n\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]); \n\n        return true; \n\n    } \n\n  \n\n    /** \n\n     * @dev Increase the amount of tokens that an owner allowed to a spender. \n\n     * approve should be called when allowed_[_spender] == 0. To increment \n\n     * allowed value is better to use this function to avoid 2 calls (and wait until \n\n     * the first transaction is mined) \n\n     * From MonolithDAO Token.sol \n\n     * Emits an Approval event. \n\n     * @param spender The address which will spend the funds. \n\n     * @param addedValue The amount of tokens to increase the allowance by. \n\n     */ \n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) { \n\n        require(spender != address(0)); \n\n  \n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue); \n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]); \n\n        return true; \n\n    } \n\n  \n\n    /** \n\n     * @dev Decrease the amount of tokens that an owner allowed to a spender. \n\n     * approve should be called when allowed_[_spender] == 0. To decrement \n\n     * allowed value is better to use this function to avoid 2 calls (and wait until \n\n     * the first transaction is mined) \n\n     * From MonolithDAO Token.sol \n\n     * Emits an Approval event. \n\n     * @param spender The address which will spend the funds. \n\n     * @param subtractedValue The amount of tokens to decrease the allowance by. \n\n     */ \n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) { \n\n        require(spender != address(0)); \n\n  \n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue); \n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]); \n\n        return true; \n\n    } \n\n  \n\n    /** \n\n    * @dev Transfer token for a specified addresses \n\n    * @param from The address to transfer from. \n\n    * @param to The address to transfer to. \n\n    * @param value The amount to be transferred. \n\n    */ \n\n    function _transfer(address from, address to, uint256 value) internal { \n\n        require(to != address(0)); \n\n  \n\n        _balances[from] = _balances[from].sub(value); \n\n        _balances[to] = _balances[to].add(value); \n\n        emit Transfer(from, to, value); \n\n    } \n\n  \n\n    /** \n\n     * @dev Internal function that mints an amount of the token and assigns it to \n\n     * an account. This encapsulates the modification of balances such that the \n\n     * proper events are emitted. \n\n     * @param account The account that will receive the created tokens. \n\n     * @param value The amount that will be created. \n\n     */ \n\n    function _mint(address account, uint256 value) internal { \n\n        require(account != address(0)); \n\n  \n\n        _totalSupply = _totalSupply.add(value); \n\n        _balances[account] = _balances[account].add(value); \n\n        emit Transfer(address(0), account, value); \n\n    } \n\n  \n\n    /** \n\n     * @dev Internal function that burns an amount of the token of a given \n\n     * account. \n\n     * @param account The account whose tokens will be burnt. \n\n     * @param value The amount that will be burnt. \n\n     */ \n\n    function _burn(address account, uint256 value) internal { \n\n        require(account != address(0)); \n\n  \n\n        _totalSupply = _totalSupply.sub(value); \n\n        _balances[account] = _balances[account].sub(value); \n\n        emit Transfer(account, address(0), value); \n\n    } \n\n  \n\n    /** \n\n     * @dev Internal function that burns an amount of the token of a given \n\n     * account, deducting from the sender's allowance for said account. Uses the \n\n     * internal burn function. \n\n     * Emits an Approval event (reflecting the reduced allowance). \n\n     * @param account The account whose tokens will be burnt. \n\n     * @param value The amount that will be burnt. \n\n     */ \n\n    function _burnFrom(address account, uint256 value) internal { \n\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value); \n\n        _burn(account, value); \n\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]); \n\n    } \n\n} \n\n  \n\n// File: openzeppelin-solidity/contracts/access/Roles.sol \n\n  \n\n/** \n\n * @title Roles \n\n * @dev Library for managing addresses assigned to a Role. \n\n */ \n\nlibrary Roles { \n\n    struct Role { \n\n        mapping (address => bool) bearer; \n\n    } \n\n  \n\n    /** \n\n     * @dev give an account access to this role \n\n     */ \n\n    function add(Role storage role, address account) internal { \n\n        require(account != address(0)); \n\n        require(!has(role, account)); \n\n  \n\n        role.bearer[account] = true; \n\n    } \n\n  \n\n    /** \n\n     * @dev remove an account's access to this role \n\n     */ \n\n    function remove(Role storage role, address account) internal { \n\n        require(account != address(0)); \n\n        require(has(role, account)); \n\n  \n\n        role.bearer[account] = false; \n\n    } \n\n  \n\n    /** \n\n     * @dev check if an account has this role \n\n     * @return bool \n\n     */ \n\n    function has(Role storage role, address account) internal view returns (bool) { \n\n        require(account != address(0)); \n\n        return role.bearer[account]; \n\n    } \n\n} \n\n  \n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol \n\n  \n\ncontract MinterRole { \n\n    using Roles for Roles.Role; \n\n  \n\n    event MinterAdded(address indexed account); \n\n    event MinterRemoved(address indexed account); \n\n  \n\n    Roles.Role private _minters; \n\n  \n\n    constructor () internal { \n\n        _addMinter(msg.sender); \n\n    } \n\n  \n\n    modifier onlyMinter() { \n\n        require(isMinter(msg.sender)); \n\n        _; \n\n    } \n\n  \n\n    function isMinter(address account) public view returns (bool) { \n\n        return _minters.has(account); \n\n    } \n\n  \n\n    function addMinter(address account) public onlyMinter { \n\n        _addMinter(account); \n\n    } \n\n  \n\n    function renounceMinter() public { \n\n        _removeMinter(msg.sender); \n\n    } \n\n  \n\n    function _addMinter(address account) internal { \n\n        _minters.add(account); \n\n        emit MinterAdded(account); \n\n    } \n\n  \n\n    function _removeMinter(address account) internal { \n\n        _minters.remove(account); \n\n        emit MinterRemoved(account); \n\n    } \n\n} \n\n  \n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol \n\n  \n\n/** \n\n * @title ERC20Mintable \n\n * @dev ERC20 minting logic \n\n */ \n\ncontract ERC20Mintable is ERC20, MinterRole { \n\n    /** \n\n     * @dev Function to mint tokens \n\n     * @param to The address that will receive the minted tokens. \n\n     * @param value The amount of tokens to mint. \n\n     * @return A boolean that indicates if the operation was successful. \n\n     */ \n\n    function mint(address to, uint256 value) public onlyMinter returns (bool) { \n\n        _mint(to, value); \n\n        return true; \n\n    } \n\n} \n\n  \n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol \n\n  \n\n/** \n\n * @title Burnable Token \n\n * @dev Token that can be irreversibly burned (destroyed). \n\n */ \n\ncontract ERC20Burnable is ERC20 { \n\n    /** \n\n     * @dev Burns a specific amount of tokens. \n\n     * @param value The amount of token to be burned. \n\n     */ \n\n    function burn(uint256 value) public { \n\n        _burn(msg.sender, value); \n\n    } \n\n  \n\n    /** \n\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance \n\n     * @param from address The address which you want to send tokens from \n\n     * @param value uint256 The amount of token to be burned \n\n     */ \n\n    function burnFrom(address from, uint256 value) public { \n\n        _burnFrom(from, value); \n\n    } \n\n} \n\n  \n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol \n\n  \n\n/** \n\n * @title ERC20Detailed token \n\n * @dev The decimals are only for visualization purposes. \n\n * All the operations are done using the smallest and indivisible token unit, \n\n * just as on Ethereum all the operations are done in wei. \n\n */ \n\ncontract ERC20Detailed is IERC20 { \n\n    string private _name; \n\n    string private _symbol; \n\n    uint8 private _decimals; \n\n  \n\n    constructor (string memory name, string memory symbol, uint8 decimals) public { \n\n        _name = name; \n\n        _symbol = symbol; \n\n        _decimals = decimals; \n\n    } \n\n  \n\n    /** \n\n     * @return the name of the token. \n\n     */ \n\n    function name() public view returns (string memory) { \n\n        return _name; \n\n    } \n\n  \n\n    /** \n\n     * @return the symbol of the token. \n\n     */ \n\n    function symbol() public view returns (string memory) { \n\n        return _symbol; \n\n    } \n\n  \n\n    /** \n\n     * @return the number of decimals of the token. \n\n     */ \n\n    function decimals() public view returns (uint8) { \n\n        return _decimals; \n\n    } \n\n} \n\n  \n\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol \n\n  \n\ncontract PauserRole { \n\n    using Roles for Roles.Role; \n\n  \n\n    event PauserAdded(address indexed account); \n\n    event PauserRemoved(address indexed account); \n\n  \n\n    Roles.Role private _pausers; \n\n  \n\n    constructor () internal { \n\n        _addPauser(msg.sender); \n\n    } \n\n  \n\n    modifier onlyPauser() { \n\n        require(isPauser(msg.sender)); \n\n        _; \n\n    } \n\n  \n\n    function isPauser(address account) public view returns (bool) { \n\n        return _pausers.has(account); \n\n    } \n\n  \n\n    function addPauser(address account) public onlyPauser { \n\n        _addPauser(account); \n\n    } \n\n  \n\n    function renouncePauser() public { \n\n        _removePauser(msg.sender); \n\n    } \n\n  \n\n    function _addPauser(address account) internal { \n\n        _pausers.add(account); \n\n        emit PauserAdded(account); \n\n    } \n\n  \n\n    function _removePauser(address account) internal { \n\n        _pausers.remove(account); \n\n        emit PauserRemoved(account); \n\n    } \n\n} \n\n  \n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol \n\n  \n\n/** \n\n * @title Pausable \n\n * @dev Base contract which allows children to implement an emergency stop mechanism. \n\n */ \n\ncontract Pausable is PauserRole { \n\n    event Paused(address account); \n\n    event Unpaused(address account); \n\n  \n\n    bool private _paused; \n\n  \n\n    constructor () internal { \n\n        _paused = false; \n\n    } \n\n  \n\n    /** \n\n     * @return true if the contract is paused, false otherwise. \n\n     */ \n\n    function paused() public view returns (bool) { \n\n        return _paused; \n\n    } \n\n  \n\n    /** \n\n     * @dev Modifier to make a function callable only when the contract is not paused. \n\n     */ \n\n    modifier whenNotPaused() { \n\n        require(!_paused); \n\n        _; \n\n    } \n\n  \n\n    /** \n\n     * @dev Modifier to make a function callable only when the contract is paused. \n\n     */ \n\n    modifier whenPaused() { \n\n        require(_paused); \n\n        _; \n\n    } \n\n  \n\n    /** \n\n     * @dev called by the owner to pause, triggers stopped state \n\n     */ \n\n    function pause() public onlyPauser whenNotPaused { \n\n        _paused = true; \n\n        emit Paused(msg.sender); \n\n    } \n\n  \n\n    /** \n\n     * @dev called by the owner to unpause, returns to normal state \n\n     */ \n\n    function unpause() public onlyPauser whenPaused { \n\n        _paused = false; \n\n        emit Unpaused(msg.sender); \n\n    } \n\n} \n\n  \n\n// File: contracts/BlacklistAdminRole.sol \n\n  \n\ncontract BlacklistAdminRole { \n\n    using Roles for Roles.Role; \n\n  \n\n    event BlacklistAdminAdded(address indexed account); \n\n    event BlacklistAdminRemoved(address indexed account); \n\n  \n\n    Roles.Role private _blacklistAdmins; \n\n  \n\n    constructor () internal { \n\n        _addBlacklistAdmin(msg.sender); \n\n    } \n\n  \n\n    modifier onlyBlacklistAdmin() { \n\n        require(isBlacklistAdmin(msg.sender)); \n\n        _; \n\n    } \n\n  \n\n    function isBlacklistAdmin(address account) public view returns (bool) { \n\n        return _blacklistAdmins.has(account); \n\n    } \n\n  \n\n    function addBlacklistAdmin(address account) public onlyBlacklistAdmin { \n\n        _addBlacklistAdmin(account); \n\n    } \n\n  \n\n    function renounceBlacklistAdmin() public { \n\n        _removeBlacklistAdmin(msg.sender); \n\n    } \n\n  \n\n    function _addBlacklistAdmin(address account) internal { \n\n        _blacklistAdmins.add(account); \n\n        emit BlacklistAdminAdded(account); \n\n    } \n\n  \n\n    function _removeBlacklistAdmin(address account) internal { \n\n        _blacklistAdmins.remove(account); \n\n        emit BlacklistAdminRemoved(account); \n\n    } \n\n} \n\n  \n\n// File: contracts/BlacklistedRole.sol \n\n  \n\ncontract BlacklistedRole is BlacklistAdminRole { \n\n    using Roles for Roles.Role; \n\n  \n\n    event BlacklistedAdded(address indexed account); \n\n    event BlacklistedRemoved(address indexed account); \n\n  \n\n    Roles.Role private _blacklisteds; \n\n  \n\n    modifier onlyBlacklisted() { \n\n        require(isBlacklisted(msg.sender)); \n\n        _; \n\n    } \n\n  \n\n    modifier onlyNotBlacklisted() { \n\n        require(!isBlacklisted(msg.sender)); \n\n        _; \n\n    } \n\n  \n\n    function isBlacklisted(address account) public view returns (bool) { \n\n        return _blacklisteds.has(account); \n\n    } \n\n  \n\n    function addBlacklisted(address account) public onlyBlacklistAdmin { \n\n        _addBlacklisted(account); \n\n    } \n\n  \n\n    function removeBlacklisted(address account) public onlyBlacklistAdmin { \n\n        _removeBlacklisted(account); \n\n    } \n\n  \n\n    function renounceBlacklisted() public { \n\n        _removeBlacklisted(msg.sender); \n\n    } \n\n  \n\n    function _addBlacklisted(address account) internal { \n\n        _blacklisteds.add(account); \n\n        emit BlacklistedAdded(account); \n\n    } \n\n  \n\n    function _removeBlacklisted(address account) internal { \n\n        _blacklisteds.remove(account); \n\n        emit BlacklistedRemoved(account); \n\n    } \n\n} \n\n  \n\n// File: contracts/GiniConTokenPausable.sol \n\n  \n\n/** \n\n * @title Pausable token \n\n * @dev ERC20 modified with pausable transfers. \n\n **/ \n\ncontract GiniConTokenPausable is ERC20, Pausable, BlacklistedRole { \n\n    function transfer(address to, uint256 value) public whenNotPaused onlyNotBlacklisted returns (bool) { \n\n        return super.transfer(to, value); \n\n    } \n\n  \n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused onlyNotBlacklisted returns (bool) { \n\n        return super.transferFrom(from, to, value); \n\n    } \n\n  \n\n    function approve(address spender, uint256 value) public whenNotPaused onlyNotBlacklisted returns (bool) { \n\n        return super.approve(spender, value); \n\n    } \n\n  \n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused onlyNotBlacklisted returns (bool success) { \n\n        return super.increaseAllowance(spender, addedValue); \n\n    } \n\n  \n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused onlyNotBlacklisted returns (bool success) { \n\n        return super.decreaseAllowance(spender, subtractedValue); \n\n    } \n\n} \n\n  \n\n// File: contracts/GiniCon.sol \n\n  \n\ncontract GiniCon is ERC20Detailed, ERC20Burnable, ERC20Mintable, GiniConTokenPausable { \n\n    uint8 public constant DECIMALS = 0; \n\n    uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(DECIMALS)); \n\n  \n\n    constructor () public ERC20Detailed(\"GINICON\", \"GINI\", DECIMALS) { \n\n        _mint(msg.sender, INITIAL_SUPPLY); \n\n    } \n\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040805190810160405280600781526020017f47494e49434f4e000000000000000000000000000000000000000000000000008152506040805190810160405280600481526020017f47494e4900000000000000000000000000000000000000000000000000000000815250600082600090805190602001906200009892919062000596565b508160019080519060200190620000b192919062000596565b5080600260006101000a81548160ff021916908360ff160217905550505050620000ea3362000167640100000000026401000000009004565b6200010433620001d1640100000000026401000000009004565b6000600860006101000a81548160ff02191690831515021790555062000139336200023b640100000000026401000000009004565b6200016133600060ff16600a0a633b9aca0002620002a5640100000000026401000000009004565b62000645565b6200018b8160066200041c6401000000000262002116179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b620001f58160076200041c6401000000000262002116179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6200025f8160096200041c6401000000000262002116179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167fa6124c7f565d239231ddc9de42e684db7443c994c658117542be9c50f561943860405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620002e257600080fd5b6200030781600554620004df6401000000000262002466179091906401000000009004565b6005819055506200036f81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620004df6401000000000262002466179091906401000000009004565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200045957600080fd5b62000474828262000501640100000000026401000000009004565b1515156200048157600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000808284019050838110151515620004f757600080fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200053f57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005d957805160ff19168380011785556200060a565b828001600101855582156200060a579182015b8281111562000609578251825591602001919060010190620005ec565b5b5090506200061991906200061d565b5090565b6200064291905b808211156200063e57600081600090555060010162000624565b5090565b90565b6124b380620006556000396000f300608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461019b578063095ea7b31461022b57806316d2e6501461029057806318160ddd146102eb578063188efc161461031657806323b872dd14610359578063243f2473146103de5780632e0f2625146103f55780632ff2e9dc14610426578063313ce5671461045157806339509351146104825780633f4ba83a146104e757806340c10f19146104fe57806342966c681461056357806346fbf68e146105905780635060a9ff146105eb5780635c975abb146106025780636ef8d66d1461063157806370a082311461064857806379cc67901461069f57806382dc1ec4146106ec5780638456cb591461072f57806395d89b4114610746578063983b2d56146107d65780639865027514610819578063a457c2d714610830578063a9059cbb14610895578063aa271e1a146108fa578063c6a276c214610955578063d3ce790514610998578063dd62ed3e146109db578063fe575a8714610a52575b600080fd5b3480156101a757600080fd5b506101b0610aad565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f05780820151818401526020810190506101d5565b50505050905090810190601f16801561021d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023757600080fd5b50610276600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b4f565b604051808215151515815260200191505060405180910390f35b34801561029c57600080fd5b506102d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b94565b604051808215151515815260200191505060405180910390f35b3480156102f757600080fd5b50610300610bb1565b6040518082815260200191505060405180910390f35b34801561032257600080fd5b50610357600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bbb565b005b34801561036557600080fd5b506103c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bdb565b604051808215151515815260200191505060405180910390f35b3480156103ea57600080fd5b506103f3610c22565b005b34801561040157600080fd5b5061040a610c2d565b604051808260ff1660ff16815260200191505060405180910390f35b34801561043257600080fd5b5061043b610c32565b6040518082815260200191505060405180910390f35b34801561045d57600080fd5b50610466610c43565b604051808260ff1660ff16815260200191505060405180910390f35b34801561048e57600080fd5b506104cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c5a565b604051808215151515815260200191505060405180910390f35b3480156104f357600080fd5b506104fc610c9f565b005b34801561050a57600080fd5b50610549600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d4e565b604051808215151515815260200191505060405180910390f35b34801561056f57600080fd5b5061058e60048036038101908080359060200190929190505050610d78565b005b34801561059c57600080fd5b506105d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d85565b604051808215151515815260200191505060405180910390f35b3480156105f757600080fd5b50610600610da2565b005b34801561060e57600080fd5b50610617610dad565b604051808215151515815260200191505060405180910390f35b34801561063d57600080fd5b50610646610dc4565b005b34801561065457600080fd5b50610689600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dcf565b6040518082815260200191505060405180910390f35b3480156106ab57600080fd5b506106ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e18565b005b3480156106f857600080fd5b5061072d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e26565b005b34801561073b57600080fd5b50610744610e46565b005b34801561075257600080fd5b5061075b610ef6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561079b578082015181840152602081019050610780565b50505050905090810190601f1680156107c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107e257600080fd5b50610817600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f98565b005b34801561082557600080fd5b5061082e610fb8565b005b34801561083c57600080fd5b5061087b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fc3565b604051808215151515815260200191505060405180910390f35b3480156108a157600080fd5b506108e0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611008565b604051808215151515815260200191505060405180910390f35b34801561090657600080fd5b5061093b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061104d565b604051808215151515815260200191505060405180910390f35b34801561096157600080fd5b50610996600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061106a565b005b3480156109a457600080fd5b506109d9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061108a565b005b3480156109e757600080fd5b50610a3c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110aa565b6040518082815260200191505060405180910390f35b348015610a5e57600080fd5b50610a93600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611131565b604051808215151515815260200191505060405180910390f35b606060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b455780601f10610b1a57610100808354040283529160200191610b45565b820191906000526020600020905b815481529060010190602001808311610b2857829003601f168201915b5050505050905090565b6000600860009054906101000a900460ff16151515610b6d57600080fd5b610b7633611131565b151515610b8257600080fd5b610b8c838361114e565b905092915050565b6000610baa82600961127b90919063ffffffff16565b9050919050565b6000600554905090565b610bc433610b94565b1515610bcf57600080fd5b610bd88161130f565b50565b6000600860009054906101000a900460ff16151515610bf957600080fd5b610c0233611131565b151515610c0e57600080fd5b610c19848484611369565b90509392505050565b610c2b33611571565b565b600081565b600060ff16600a0a633b9aca000281565b6000600260009054906101000a900460ff16905090565b6000600860009054906101000a900460ff16151515610c7857600080fd5b610c8133611131565b151515610c8d57600080fd5b610c9783836115cb565b905092915050565b610ca833610d85565b1515610cb357600080fd5b600860009054906101000a900460ff161515610cce57600080fd5b6000600860006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000610d593361104d565b1515610d6457600080fd5b610d6e8383611802565b6001905092915050565b610d823382611958565b50565b6000610d9b82600761127b90919063ffffffff16565b9050919050565b610dab33611aae565b565b6000600860009054906101000a900460ff16905090565b610dcd33611b08565b565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e228282611b62565b5050565b610e2f33610d85565b1515610e3a57600080fd5b610e4381611d60565b50565b610e4f33610d85565b1515610e5a57600080fd5b600860009054906101000a900460ff16151515610e7657600080fd5b6001600860006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b606060018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f8e5780601f10610f6357610100808354040283529160200191610f8e565b820191906000526020600020905b815481529060010190602001808311610f7157829003601f168201915b5050505050905090565b610fa13361104d565b1515610fac57600080fd5b610fb581611dba565b50565b610fc133611e14565b565b6000600860009054906101000a900460ff16151515610fe157600080fd5b610fea33611131565b151515610ff657600080fd5b6110008383611e6e565b905092915050565b6000600860009054906101000a900460ff1615151561102657600080fd5b61102f33611131565b15151561103b57600080fd5b61104583836120a5565b905092915050565b600061106382600661127b90919063ffffffff16565b9050919050565b61107333610b94565b151561107e57600080fd5b61108781611aae565b50565b61109333610b94565b151561109e57600080fd5b6110a7816120bc565b50565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600061114782600a61127b90919063ffffffff16565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561118b57600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156112b857600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61132381600a61211690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fdbe320accb74107e8da655fa6a1e2b454c3102a3985d4201aba99308881a410a60405160405180910390a250565b60006113fa82600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121c690919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114858484846121e7565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b6115858160096123b790919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fba73eacdfe215f630abb6a8a78e5be613e50918b52e691bba35d46c06e20d6c860405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561160857600080fd5b61169782600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461246690919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561183e57600080fd5b6118538160055461246690919063ffffffff16565b6005819055506118ab81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461246690919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561199457600080fd5b6119a9816005546121c690919063ffffffff16565b600581905550611a0181600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121c690919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b611ac281600a6123b790919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167ff38e60871ec534937251cd91cad807e15f55f1f6815128faecc256e71994b49760405160405180910390a250565b611b1c8160076123b790919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b611bf181600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121c690919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c7b8282611958565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a35050565b611d7481600761211690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b611dce81600661211690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b611e288160066123b790919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611eab57600080fd5b611f3a82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121c690919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60006120b23384846121e7565b6001905092915050565b6120d081600961211690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fa6124c7f565d239231ddc9de42e684db7443c994c658117542be9c50f561943860405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561215257600080fd5b61215c828261127b565b15151561216857600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000808383111515156121d857600080fd5b82840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561222357600080fd5b61227581600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121c690919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061230a81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461246690919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156123f357600080fd5b6123fd828261127b565b151561240857600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080828401905083811015151561247d57600080fd5b80915050929150505600a165627a7a723058202750d64c6984259672a2eaabfeb5fa83f5b3840a49bb0b0bc1ed8e8bf18492b00029"
}