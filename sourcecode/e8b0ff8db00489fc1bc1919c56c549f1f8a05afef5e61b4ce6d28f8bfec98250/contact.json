{
  "address": "0x5121e348e897daef1eef23959ab290e5557cf274",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PolyAi",
  "compilerVersion": "v0.4.14+commit.c2215d46",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-03\n*/\n\npragma solidity ^0.4.2;\ncontract owned {\n    address public owner;\n\n    function owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        if (msg.sender != owner) revert();\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n}\n\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n\ncontract token {\n    /* Public variables of the token */\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function token(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol\n        ) {\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n        totalSupply = initialSupply;                        // Update total supply\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\n    }\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) {\n        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value)\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /* Approve and then communicate the approved contract in a single tx */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        returns (bool success) {    \n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n        if (_value > allowance[_from][msg.sender]) revert();   // Check allowance\n        balanceOf[_from] -= _value;                          // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /* This unnamed function is called whenever someone tries to send ether to it */\n    function () {\n        revert();     // Prevents accidental sending of ether\n    }\n}\n\ncontract PolyAi is owned, token {\n\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function PolyAi(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol\n    ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) {\n        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n        if (frozenAccount[msg.sender]) revert();                // Check if frozen\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (frozenAccount[_from]) revert();                        // Check if frozen            \n        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n        if (_value > allowance[_from][msg.sender]) revert();   // Check allowance\n        balanceOf[_from] -= _value;                          // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n        balanceOf[target] += mintedAmount;\n        Transfer(0, owner, mintedAmount);\n        Transfer(owner, target, mintedAmount);\n    }\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051610cb8380380610cb883398101604052808051919060200180518201919060200180519190602001805190910190505b838383835b5b60008054600160a060020a03191633600160a060020a03161790555b600160a060020a0333166000908152600560205260409020849055600484905560018380516100979291602001906100ca565b5060028180516100ab9291602001906100ca565b506003805460ff191660ff84161790555b505050505b5050505061016a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010b57805160ff1916838001178555610138565b82800160010185558215610138579182015b8281111561013857825182559160200191906001019061011d565b5b50610145929150610149565b5090565b61016791905b80821115610145576000815560010161014f565b5090565b90565b610b3f806101796000396000f300606060405236156100d85763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100eb578063095ea7b31461017657806318160ddd146101ac57806323b872dd146101d1578063313ce5671461020d57806370a082311461023657806379c65068146102675780638da5cb5b1461028b57806395d89b41146102ba578063a9059cbb14610345578063b414d4b614610369578063cae9ca511461039c578063dd62ed3e14610415578063e724529c1461044c578063f2fde38b14610472575b34156100e357600080fd5b5b600080fd5b005b34156100f657600080fd5b6100fe610493565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561013b5780820151818401525b602001610122565b50505050905090810190601f1680156101685780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018157600080fd5b610198600160a060020a0360043516602435610531565b604051901515815260200160405180910390f35b34156101b757600080fd5b6101bf610562565b60405190815260200160405180910390f35b34156101dc57600080fd5b610198600160a060020a0360043581169060243516604435610568565b604051901515815260200160405180910390f35b341561021857600080fd5b61022061068b565b60405160ff909116815260200160405180910390f35b341561024157600080fd5b6101bf600160a060020a0360043516610694565b60405190815260200160405180910390f35b341561027257600080fd5b6100e9600160a060020a03600435166024356106a6565b005b341561029657600080fd5b61029e61073f565b604051600160a060020a03909116815260200160405180910390f35b34156102c557600080fd5b6100fe61074e565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561013b5780820151818401525b602001610122565b50505050905090810190601f1680156101685780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561035057600080fd5b6100e9600160a060020a03600435166024356107ec565b005b341561037457600080fd5b610198600160a060020a03600435166108b7565b604051901515815260200160405180910390f35b34156103a757600080fd5b61019860048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506108cc95505050505050565b604051901515815260200160405180910390f35b341561042057600080fd5b6101bf600160a060020a0360043581169060243516610a00565b60405190815260200160405180910390f35b341561045757600080fd5b6100e9600160a060020a03600435166024351515610a1d565b005b341561047d57600080fd5b6100e9600160a060020a0360043516610aab565b005b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105295780601f106104fe57610100808354040283529160200191610529565b820191906000526020600020905b81548152906001019060200180831161050c57829003601f168201915b505050505081565b600160a060020a03338116600090815260066020908152604080832093861683529290522081905560015b92915050565b60045481565b600160a060020a03831660009081526007602052604081205460ff161561058e57600080fd5b600160a060020a038416600090815260056020526040902054829010156105b457600080fd5b600160a060020a03831660009081526005602052604090205482810110156105db57600080fd5b600160a060020a038085166000908152600660209081526040808320339094168352929052205482111561060e57600080fd5b600160a060020a0380851660008181526005602090815260408083208054889003905587851680845281842080548901905584845260068352818420339096168452949091529081902080548690039055600080516020610af48339815191529085905190815260200160405180910390a35060015b9392505050565b60035460ff1681565b60056020526000908152604090205481565b60005433600160a060020a039081169116146106c157600080fd5b600160a060020a03808316600090815260056020526040808220805485019055815490921691600080516020610af48339815191529084905190815260200160405180910390a3600054600160a060020a038084169116600080516020610af48339815191528360405190815260200160405180910390a35b5b5050565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105295780601f106104fe57610100808354040283529160200191610529565b820191906000526020600020905b81548152906001019060200180831161050c57829003601f168201915b505050505081565b600160a060020a0333166000908152600560205260409020548190101561081257600080fd5b600160a060020a038216600090815260056020526040902054818101101561083957600080fd5b600160a060020a03331660009081526007602052604090205460ff161561085f57600080fd5b600160a060020a03338116600081815260056020526040808220805486900390559285168082529083902080548501905591600080516020610af48339815191529084905190815260200160405180910390a35b5050565b60076020526000908152604090205460ff1681565b6000836108d98185610531565b156109f75780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109905780820151818401525b602001610977565b50505050905090810190601f1680156109bd5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15156109de57600080fd5b6102c65a03f115156109ef57600080fd5b505050600191505b5b509392505050565b600660209081526000928352604080842090915290825290205481565b60005433600160a060020a03908116911614610a3857600080fd5b600160a060020a03821660009081526007602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15b5b5050565b60005433600160a060020a03908116911614610ac657600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582007c68ade3a7ae3cbbc96f95fd8090ee905fe06f382d75e9c1ba71c43edb3c749002900000000000000000000000000000000000000000017fcfd266d36eb3d0000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000006506f6c794169000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024149000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000017fcfd266d36eb3d0000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000006506f6c794169000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024149000000000000000000000000000000000000000000000000000000000000"
}