{
  "address": "0x80dd619abf9bf9a084cdeead09525e3a02d521bf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SignatureContract",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-16\n*/\n\npragma solidity ^0.4.25;\ncontract SignatureContract {\n\n    address private owner;\n\taddress public signer;\n\tmapping(bytes32 => bool) public isSignedMerkleRoot;\n\n\tevent SignerSet(address indexed newSigner);\n\tevent Signed(bytes32 indexed hash);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyByOwner {\n        require(msg.sender == owner, \"Only owner can call this function!\");\n        _;\n    }\n    \n    modifier onlyBySigner {\n        require(msg.sender == signer, \"Only the current signer can call this function!\");\n        _;\n    }\n\n    function setSigner(address aSigner) external onlyByOwner {\n        require(aSigner != signer, \"This address is already set as the current signer!\");\n        signer = aSigner;\n        emit SignerSet(aSigner);\n    }\n\n    function disable() external onlyByOwner {\n       delete signer;\n       delete owner;\n    }\n\n    /*\n    *  Adds a SHA2-256 hash to the persisted map. This hash is supposed to be the root of the Merkle Tree of documents being signed.\n    *  Under the conventions of this contract, atleast one leaf of the Merkle Tree must be the SHA2-256 hash of this smart contract address. This allows proving non-membership by reproducing all the Merkle Trees.\n    */\n    function sign(bytes32 hash) external onlyBySigner {\n\t\trequire(!isSignedMerkleRoot[hash], \"This SHA2-256 hash is already signed!\");\n\t\tisSignedMerkleRoot[hash] = true;\n\t\temit Signed(hash);\n    }\n    \n    /*\n    *  Checks a given document hash for being a leaf of a signed Merkle Tree.\n    *  For the check to be performed the corresponding Merkle Proof is required along with an index encoding the position of siblings at each level (left or right).\n    */\n    function verifyDocument(bytes32 docHash, bytes merkleProof, uint16 index) external view returns (bool) {\n        require(merkleProof.length >= 32, \"The Merkle Proof given is too short! It must be atleast 32 bytes in size.\");\n        require(merkleProof.length <= 512, \"The Merkle Proof given is too long! It can be upto only 512 bytes as the Merkle Tree is allowed a maximum depth of 16 under conventions of this contract.\");\n        require(merkleProof.length%32 == 0, \"The Merkle Proof given is not a multiple of 32 bytes! It must be a sequence of 32-byte SHA2-256 hashes each representing the sibling at every non-root level starting from leaf level in the Merkle Tree.\");\n        \n        bytes32 root = docHash;\n        bytes32 sibling;\n        bytes memory proof = merkleProof;\n        \n        // This loop runs a maximum of 16 times with i = 32, 64, 96, ... proof.length. As i is uint16, no integer overflow possible.\n        // An upper limit of 16 iterations ensures that the function's gas requirements are within reasonable limits.\n        for(uint16 i=32; i<=proof.length; i+=32) {\n            assembly {\n                sibling := mload(add(proof, i))     // reading 32 bytes\n            }\n            \n            // Now we have to find out if this sibling is on the right or on the left?\n            // This information is encoded in the i/32th bit from the right of the 16 bit integer index.\n            // To find this but we create a 16-bit mask with i/32th position as the only non-zero bit: uint16(1)<<(i/32-1)\n            // For example: for i=32, mask=0x0000000000000001.\n            // Note that since (i/32-1) is in the range 0-15, the left shift operation should be safe to use.\n            if(index & (uint16(1)<<(i/32-1)) == 0) {\n                root = sha256(abi.encodePacked(root, sibling));\n            } else {\n                root = sha256(abi.encodePacked(sibling, root));\n            }\n        }\n        \n        return isSignedMerkleRoot[root];\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isSignedMerkleRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"aSigner\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"sign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"docHash\",\"type\":\"bytes32\"},{\"name\":\"merkleProof\",\"type\":\"bytes\"},{\"name\":\"index\",\"type\":\"uint16\"}],\"name\":\"verifyDocument\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"SignerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Signed\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a0319163317905561099f806100326000396000f3006080604052600436106100775763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166320a39fee811461007c578063238ac933146100a85780632f2770db146100d95780636c19e783146100f0578063799cd33314610111578063cbe335c114610129575b600080fd5b34801561008857600080fd5b50610094600435610154565b604080519115158252519081900360200190f35b3480156100b457600080fd5b506100bd610169565b60408051600160a060020a039092168252519081900360200190f35b3480156100e557600080fd5b506100ee610178565b005b3480156100fc57600080fd5b506100ee600160a060020a036004351661022b565b34801561011d57600080fd5b506100ee600435610396565b34801561013557600080fd5b5061009460048035906024803590810191013561ffff604435166104ee565b60026020526000908152604090205460ff1681565b600154600160a060020a031681565b600054600160a060020a03163314610200576040805160e560020a62461bcd02815260206004820152602260248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60448201527f6e21000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19908116909155600080549091169055565b600054600160a060020a031633146102b3576040805160e560020a62461bcd02815260206004820152602260248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60448201527f6e21000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600154600160a060020a038281169116141561033f576040805160e560020a62461bcd02815260206004820152603260248201527f54686973206164647265737320697320616c726561647920736574206173207460448201527f68652063757272656e74207369676e6572210000000000000000000000000000606482015290519081900360840190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383169081179091556040517f9eaa897564d022fb8c5efaf0acdb5d9d27b440b2aad44400b6e1c702e65b9ed390600090a250565b600154600160a060020a0316331461041e576040805160e560020a62461bcd02815260206004820152602f60248201527f4f6e6c79207468652063757272656e74207369676e65722063616e2063616c6c60448201527f20746869732066756e6374696f6e210000000000000000000000000000000000606482015290519081900360840190fd5b60008181526002602052604090205460ff16156104ab576040805160e560020a62461bcd02815260206004820152602560248201527f5468697320534841322d323536206861736820697320616c726561647920736960448201527f676e656421000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600081815260026020526040808220805460ff191660011790555182917f2563bf12e759147ae41a036dffeece03c4db05da3b738a30dd100821f498c57c91a250565b60008080606081602087101561059a576040805160e560020a62461bcd02815260206004820152604960248201527f546865204d65726b6c652050726f6f6620676976656e20697320746f6f20736860448201527f6f727421204974206d7573742062652061746c6561737420333220627974657360648201527f20696e2073697a652e0000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b6102008711156105de5760405160e560020a62461bcd0281526004018080602001828103825260998152602001806108126099913960a00191505060405180910390fd5b60208706156106215760405160e560020a62461bcd0281526004018080602001828103825260c98152602001806108ab60c9913960e00191505060405180910390fd5b88935087878080601f016020809104026020016040519081016040528093929190818152602001838380828437509496506020955050505050505b815161ffff8216116107f3578181015192506001602061ffff8316040361ffff90811660020a871616151561073d576040805160208082018790528183018690528251808303840181526060909201928390528151600293918291908401908083835b602083106106de5780518252601f1990920191602091820191016106bf565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af115801561071f573d6000803e3d6000fd5b5050506040513d602081101561073457600080fd5b505193506107eb565b6040805160208082018690528183018790528251808303840181526060909201928390528151600293918291908401908083835b602083106107905780518252601f199092019160209182019101610771565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156107d1573d6000803e3d6000fd5b5050506040513d60208110156107e657600080fd5b505193505b60200161065c565b50505060009081526002602052604090205460ff16959450505050505600546865204d65726b6c652050726f6f6620676976656e20697320746f6f206c6f6e67212049742063616e206265207570746f206f6e6c792035313220627974657320617320746865204d65726b6c65205472656520697320616c6c6f7765642061206d6178696d756d206465707468206f6620313620756e64657220636f6e76656e74696f6e73206f66207468697320636f6e74726163742e546865204d65726b6c652050726f6f6620676976656e206973206e6f742061206d756c7469706c65206f6620333220627974657321204974206d75737420626520612073657175656e6365206f662033322d6279746520534841322d32353620686173686573206561636820726570726573656e74696e6720746865207369626c696e67206174206576657279206e6f6e2d726f6f74206c6576656c207374617274696e672066726f6d206c656166206c6576656c20696e20746865204d65726b6c6520547265652ea165627a7a72305820018596cb739580f921e5b2e906d705413c911032e5eba4bdd7a2652c6c3a55320029"
}