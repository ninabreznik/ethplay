{
  "address": "0xabc1280a0187a2020cc675437aed400185f86db6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SAChain Token",
  "contractName": "sacToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-13\n*/\n\npragma solidity ^0.4.20;\n\n//---------------------------------------------------------\n//  增强版的代币合约 V 0.9\n//                                       WangYi 2018-05-07\n//---------------------------------------------------------\ncontract ERC20ext\n{\n  // stand\n  function totalSupply() public constant returns (uint supply);\n  function balanceOf( address who ) public constant returns (uint value);\n  function allowance( address owner, address spender ) public constant returns (uint _allowance);\n\n  function transfer( address to, uint value) public returns (bool ok);\n  function transferFrom( address from, address to, uint value) public returns (bool ok);\n  function approve( address spender, uint value ) public returns (bool ok);\n\n  event Transfer( address indexed from, address indexed to, uint value);\n  event Approval( address indexed owner, address indexed spender, uint value);\n\n  // extand\n  function postMessage(address dst, uint wad,string data) public returns (bool ok);\n  function appointNewCFO(address newCFO) public returns (bool ok);\n\n  function melt(address dst, uint256 wad) public returns (bool ok);\n  function mint(address dst, uint256 wad) public returns (bool ok);\n  function freeze(address dst, bool flag) public returns (bool ok);\n\n  event MeltEvent(address indexed dst, uint256 wad);\n  event MintEvent(address indexed dst, uint256 wad);\n  event FreezeEvent(address indexed dst, bool flag);\n}\n\n//---------------------------------------------------------\n// SafeMath 是一个安全数字运算的合约\n//---------------------------------------------------------\ncontract SafeMath \n{\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) \n  {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) \n  {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) \n  {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) \n  {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n//---------------------------------------------------------\n// sacToken 是一个增强版ERC20合约\n//---------------------------------------------------------\ncontract sacToken is ERC20ext,SafeMath\n{\n  string public name;\n  string public symbol;\n  uint8  public decimals = 18;\n\n  address _cfo;\n  uint256 _supply;\n\n  //帐户的余额列表\n  mapping (address => uint256) _balances;\n\n  //帐户的转账限额\n  mapping (address => mapping (address => uint256)) _allowance;\n\n  //帐户的资金冻结\n  mapping (address => bool) public _frozen;\n\n  //-----------------------------------------------\n  // 初始化合约，并把所有代币都给CFO\n  //-----------------------------------------------\n  //   @param initialSupply 发行总量\n  //   @param tokenName     代币名称\n  //   @param tokenSymbol   代币符号\n  //-----------------------------------------------\n  function sacToken(uint256 initialSupply,string tokenName,string tokenSymbol) public\n  {\n    _cfo    = msg.sender;\n    _supply = initialSupply * 10 ** uint256(decimals);\n    _balances[_cfo] = _supply;\n\n    name   = tokenName;\n    symbol = tokenSymbol;\n  }\n\n  //-----------------------------------------------\n  // 判断合约调用者是否 CFO\n  //-----------------------------------------------\n  modifier onlyCFO()\n  {\n    require(msg.sender == _cfo);\n    _;\n  }\n\n\n  //-----------------------------------------------\n  // 获取货币供应量\n  //-----------------------------------------------\n  function totalSupply() public constant returns (uint256)\n  {\n    return _supply;\n  }\n\n  //-----------------------------------------------\n  // 查询账户余额\n  //-----------------------------------------------\n  // @param  src 帐户地址\n  //-----------------------------------------------\n  function balanceOf(address src) public constant returns (uint256)\n  {\n    return _balances[src];\n  }\n\n  //-----------------------------------------------\n  // 查询账户转账限额\n  //-----------------------------------------------\n  // @param  src 来源帐户地址\n  // @param  dst 目标帐户地址\n  //-----------------------------------------------\n  function allowance(address src, address dst) public constant returns (uint256)\n  {\n    return _allowance[src][dst];\n  }\n\n  //-----------------------------------------------\n  // 账户转账\n  //-----------------------------------------------\n  // @param  dst 目标帐户地址\n  // @param  wad 转账金额\n  //-----------------------------------------------\n  function transfer(address dst, uint wad) public returns (bool)\n  {\n    //检查冻结帐户\n    require(!_frozen[msg.sender]);\n    require(!_frozen[dst]);\n\n    //检查帐户余额\n    require(_balances[msg.sender] >= wad);\n\n    _balances[msg.sender] = sub(_balances[msg.sender],wad);\n    _balances[dst]        = add(_balances[dst], wad);\n\n    Transfer(msg.sender, dst, wad);\n\n    return true;\n  }\n\n  //-----------------------------------------------\n  // 账户转账带检查限额\n  //-----------------------------------------------\n  // @param  src 来源帐户地址\n  // @param  dst 目标帐户地址\n  // @param  wad 转账金额\n  //-----------------------------------------------\n  function transferFrom(address src, address dst, uint wad) public returns (bool)\n  {\n    //检查冻结帐户\n    require(!_frozen[msg.sender]);\n    require(!_frozen[dst]);\n\n    //检查帐户余额\n    require(_balances[src] >= wad);\n\n    //检查帐户限额\n    require(_allowance[src][msg.sender] >= wad);\n\n    _allowance[src][msg.sender] = sub(_allowance[src][msg.sender],wad);\n\n    _balances[src] = sub(_balances[src],wad);\n    _balances[dst] = add(_balances[dst],wad);\n\n    //转账事件\n    Transfer(src, dst, wad);\n\n    return true;\n  }\n\n  //-----------------------------------------------\n  // 设置转账限额\n  //-----------------------------------------------\n  // @param  dst 目标帐户地址\n  // @param  wad 限制金额\n  //-----------------------------------------------\n  function approve(address dst, uint256 wad) public returns (bool)\n  {\n    _allowance[msg.sender][dst] = wad;\n\n    //设置事件\n    Approval(msg.sender, dst, wad);\n    return true;\n  }\n\n  //-----------------------------------------------\n  // 账户转账带附加数据\n  //-----------------------------------------------\n  // @param  dst  目标帐户地址\n  // @param  wad  限制金额\n  // @param  data 附加数据\n  //-----------------------------------------------\n  function postMessage(address dst, uint wad,string data) public returns (bool)\n  {\n    return transfer(dst,wad);\n  }\n\n  //-----------------------------------------------\n  // 任命新的CFO\n  //-----------------------------------------------\n  // @param  newCFO 新的CFO帐户地址\n  //-----------------------------------------------\n  function appointNewCFO(address newCFO) onlyCFO public returns (bool)\n  {\n    if (newCFO != _cfo)\n    {\n      _cfo = newCFO;\n      return true;\n    }\n    else\n    {\n      return false;\n    }\n  }\n\n  //-----------------------------------------------\n  // 冻结帐户\n  //-----------------------------------------------\n  // @param  dst  目标帐户地址\n  // @param  flag 冻结\n  //-----------------------------------------------\n  function freeze(address dst, bool flag) onlyCFO public returns (bool)\n  {\n    _frozen[dst] = flag;\n\n    //冻结帐户事件\n    FreezeEvent(dst, flag);\n    return true;\n  }\n\n  //-----------------------------------------------\n  // 铸造代币\n  //-----------------------------------------------\n  // @param  dst  目标帐户地址\n  // @param  wad  铸造金额\n  //-----------------------------------------------\n  function mint(address dst, uint256 wad) onlyCFO public returns (bool)\n  {\n    //目标帐户地址铸造代币,同时更新总量\n    _balances[dst] = add(_balances[dst],wad);\n    _supply        = add(_supply,wad);\n\n    //铸造代币事件\n    MintEvent(dst, wad);\n    return true;\n  }\n\n  //-----------------------------------------------\n  // 销毁代币\n  //-----------------------------------------------\n  // @param  dst  目标帐户地址\n  // @param  wad  销毁金额\n  //-----------------------------------------------\n  function melt(address dst, uint256 wad) onlyCFO public returns (bool)\n  {\n    //检查帐户余额\n    require(_balances[dst] >= wad);\n\n    //销毁目标帐户地址代币,同时更新总量\n    _balances[dst] = sub(_balances[dst],wad);\n    _supply        = sub(_supply,wad);\n\n    //销毁代币事件\n    MeltEvent(dst, wad);\n    return true;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"postMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCFO\",\"type\":\"address\"}],\"name\":\"appointNewCFO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"melt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"MeltEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"MintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"FreezeEvent\",\"type\":\"event\"}]",
  "bytecode": "60806040526012600260006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b50604051620018973803806200189783398101806040528101908080519060200190929190805182019291906020018051820192919050505033600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900460ff1660ff16600a0a830260038190555060035460046000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600090805190602001906200014592919062000168565b5080600190805190602001906200015e92919062000168565b5050505062000217565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ab57805160ff1916838001178555620001dc565b82800160010185558215620001dc579182015b82811115620001db578251825591602001919060010190620001be565b5b509050620001eb9190620001ef565b5090565b6200021491905b8082111562000210576000816000905550600101620001f6565b5090565b90565b61167080620002276000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100e0578063095ea7b31461017057806318160ddd146101d557806323b872dd1461020057806325dccaf914610285578063313ce5671461033057806340c10f1914610361578063519f9590146103c657806370a08231146104215780638f8d322e1461047857806395d89b41146104dd578063a9059cbb1461056d578063bf120ae5146105d2578063c5b40c5d14610639578063dd62ed3e14610694575b600080fd5b3480156100ec57600080fd5b506100f561070b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013557808201518184015260208101905061011a565b50505050905090810190601f1680156101625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017c57600080fd5b506101bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107a9565b604051808215151515815260200191505060405180910390f35b3480156101e157600080fd5b506101ea61089b565b6040518082815260200191505060405180910390f35b34801561020c57600080fd5b5061026b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108a5565b604051808215151515815260200191505060405180910390f35b34801561029157600080fd5b50610316600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610cc0565b604051808215151515815260200191505060405180910390f35b34801561033c57600080fd5b50610345610cd5565b604051808260ff1660ff16815260200191505060405180910390f35b34801561036d57600080fd5b506103ac600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ce8565b604051808215151515815260200191505060405180910390f35b3480156103d257600080fd5b50610407600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e3c565b604051808215151515815260200191505060405180910390f35b34801561042d57600080fd5b50610462600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f45565b6040518082815260200191505060405180910390f35b34801561048457600080fd5b506104c3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f8e565b604051808215151515815260200191505060405180910390f35b3480156104e957600080fd5b506104f2611130565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610532578082015181840152602081019050610517565b50505050905090810190601f16801561055f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561057957600080fd5b506105b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111ce565b604051808215151515815260200191505060405180910390f35b3480156105de57600080fd5b5061061f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611457565b604051808215151515815260200191505060405180910390f35b34801561064557600080fd5b5061067a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611568565b604051808215151515815260200191505060405180910390f35b3480156106a057600080fd5b506106f5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611588565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107a15780601f10610776576101008083540402835291602001916107a1565b820191906000526020600020905b81548152906001019060200180831161078457829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600354905090565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561090057600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561095957600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156109a757600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a3257600080fd5b610ab8600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361160f565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361160f565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c0d600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611628565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000610ccc84846111ce565b90509392505050565b600260009054906101000a900460ff1681565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d4657600080fd5b610d8f600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611628565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dde60035483611628565b6003819055508273ffffffffffffffffffffffffffffffffffffffff167f3fffaa5804a26fcec0d70b1d0fb0a2d0031df3a5f9c8af2127c2f4360e97b463836040518082815260200191505060405180910390a26001905092915050565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e9a57600080fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515610f3b5781600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050610f40565b600090505b919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fec57600080fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561103a57600080fd5b611083600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361160f565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110d26003548361160f565b6003819055508273ffffffffffffffffffffffffffffffffffffffff167f86fca26ade5c81a8e49bb09cf2e8968aa2aa0be873b839e21caa5794709a8750836040518082815260200191505060405180910390a26001905092915050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111c65780601f1061119b576101008083540402835291602001916111c6565b820191906000526020600020905b8154815290600101906020018083116111a957829003601f168201915b505050505081565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561122957600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561128257600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156112d057600080fd5b611319600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361160f565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113a5600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611628565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114b557600080fd5b81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff167f214e012bfb855983ab4586d1b234c17d1f29b44af16a1f261db8817267731ac483604051808215151515815260200191505060405180910390a26001905092915050565b60066020528060005260406000206000915054906101000a900460ff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082821115151561161d57fe5b818303905092915050565b6000818301905082811015151561163b57fe5b809050929150505600a165627a7a72305820a9b36c4211b77f1c48a4fc34b4144cc2ddd9156e8a6de20bafab28f8964116bd0029000000000000000000000000000000000000000000000000000000000bebc200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000017536d617274204170706c69636174696f6e20436861696e00000000000000000000000000000000000000000000000000000000000000000000000000000000035341430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000bebc200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000017536d617274204170706c69636174696f6e20436861696e00000000000000000000000000000000000000000000000000000000000000000000000000000000035341430000000000000000000000000000000000000000000000000000000000"
}