{
  "address": "0x7fce2856899a6806eeef70807985fc7554c66340",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CLPToken",
  "compilerVersion": "v0.4.18-nightly.2017.10.16+commit.dbc8655b",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-17\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * Math operations with safety checks\n *\n */\ncontract SafeMath {\n    //internals\n\n    function safeMul(uint a, uint b) internal returns (uint) {\n        uint c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeSub(uint a, uint b) internal returns (uint) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) internal returns (uint) {\n        uint c = a + b;\n        require(c>=a && c>=b);\n        return c;\n    }\n\n    function safeDiv(uint a, uint b) internal returns (uint) {\n        require(b > 0);\n        uint c = a / b;\n        require(a == b * c + a % b);\n        return c;\n    }\n}\n\n\n/**\n * ERC 20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n */\ninterface Token {\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\n/**\n * ERC 20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is Token {\n\n    /**\n     * Reviewed:\n     * - Integer overflow = OK, checked\n     */\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n        //Replace the if with this one instead.\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            //if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    mapping(address => uint256) balances;\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n    uint256 public totalSupply;\n}\n\n\n/**\n * CLP crowdsale ICO contract.\n *\n */\ncontract CLPToken is StandardToken, SafeMath {\n\n    string public name = \"CLP Token\";\n    string public symbol = \"CLP\";\n\tuint public decimals = 9;\n\n    // Initial founder address (set in constructor)\n    // This address handle administration of the token.\n    address public founder = 0x0;\n\t\n    // Block timing/contract unlocking information\n\tuint public month6companyUnlock = 1525132801; // May 01, 2018 UTC\n\tuint public month12companyUnlock = 1541030401; // Nov 01, 2018 UTC\n\tuint public month18companyUnlock = 1556668801; // May 01, 2019 UTC\n\tuint public month24companyUnlock = 1572566401; // Nov 01, 2019 UTC\n    uint public year1Unlock = 1541030401; // Nov 01, 2018 UTC\n    uint public year2Unlock = 1572566401; // Nov 01, 2019 UTC\n    uint public year3Unlock = 1604188801; // Nov 01, 2020 UTC\n    uint public year4Unlock = 1635724801; // Nov 01, 2021 UTC\n\n    // Have the post-reward allocations been completed\n    bool public allocated1Year = false;\n    bool public allocated2Year = false;\n    bool public allocated3Year = false;\n    bool public allocated4Year = false;\n\t\n\tbool public allocated6Months = false;\n    bool public allocated12Months = false;\n    bool public allocated18Months = false;\n    bool public allocated24Months = false;\n\n    // Token count information\n\tuint currentTokenSaled = 0;\n    uint public totalTokensSale = 87000000 * 10**decimals;\n    uint public totalTokensReserve = 39000000 * 10**decimals; \n    uint public totalTokensCompany = 24000000 * 10**decimals;\n\n    event Buy(address indexed sender, uint eth, uint fbt);\n    event Withdraw(address indexed sender, address to, uint eth);\n    event AllocateTokens(address indexed sender);\n\n    function CLPToken() {\n        /*\n            Initialize the contract with a sane set of owners\n        */\n        founder = msg.sender;\n    }\n\n\t/*\n        Allocate reserved tokens based on the running time and state of the contract.\n     */\n    function allocateReserveCompanyTokens() {\n        require(msg.sender==founder);\n        uint tokens = 0;\n\n        if(block.timestamp > month6companyUnlock && !allocated6Months)\n        {\n            allocated6Months = true;\n            tokens = safeDiv(totalTokensCompany, 4);\n            balances[founder] = safeAdd(balances[founder], tokens);\n            totalSupply = safeAdd(totalSupply, tokens);\n        }\n        else if(block.timestamp > month12companyUnlock && !allocated12Months)\n        {\n            allocated12Months = true;\n            tokens = safeDiv(totalTokensCompany, 4);\n            balances[founder] = safeAdd(balances[founder], tokens);\n            totalSupply = safeAdd(totalSupply, tokens);\n        }\n        else if(block.timestamp > month18companyUnlock && !allocated18Months)\n        {\n            allocated18Months = true;\n            tokens = safeDiv(totalTokensCompany, 4);\n            balances[founder] = safeAdd(balances[founder], tokens);\n            totalSupply = safeAdd(totalSupply, tokens);\n        }\n        else if(block.timestamp > month24companyUnlock && !allocated24Months)\n        {\n            allocated24Months = true;\n            tokens = safeDiv(totalTokensCompany, 4);\n            balances[founder] = safeAdd(balances[founder], tokens);\n            totalSupply = safeAdd(totalSupply, tokens);\n        }\n        else revert();\n\n        AllocateTokens(msg.sender);\n    }\n\n    /*\n        Allocate reserved tokens based on the running time and state of the contract.\n     */\n    function allocateReserveTokens() {\n        require(msg.sender==founder);\n        uint tokens = 0;\n\n        if(block.timestamp > year1Unlock && !allocated1Year)\n        {\n            allocated1Year = true;\n            tokens = safeDiv(totalTokensReserve, 4);\n            balances[founder] = safeAdd(balances[founder], tokens);\n            totalSupply = safeAdd(totalSupply, tokens);\n        }\n        else if(block.timestamp > year2Unlock && !allocated2Year)\n        {\n            allocated2Year = true;\n            tokens = safeDiv(totalTokensReserve, 4);\n            balances[founder] = safeAdd(balances[founder], tokens);\n            totalSupply = safeAdd(totalSupply, tokens);\n        }\n        else if(block.timestamp > year3Unlock && !allocated3Year)\n        {\n            allocated3Year = true;\n            tokens = safeDiv(totalTokensReserve, 4);\n            balances[founder] = safeAdd(balances[founder], tokens);\n            totalSupply = safeAdd(totalSupply, tokens);\n        }\n        else if(block.timestamp > year4Unlock && !allocated4Year)\n        {\n            allocated4Year = true;\n            tokens = safeDiv(totalTokensReserve, 4);\n            balances[founder] = safeAdd(balances[founder], tokens);\n            totalSupply = safeAdd(totalSupply, tokens);\n        }\n        else revert();\n\n        AllocateTokens(msg.sender);\n    }\n\n\n   /**\n    *   Change founder address (Controlling address for contract)\n    */\n    function changeFounder(address newFounder) {\n        require(msg.sender==founder);\n        founder = newFounder;\n    }\n\n\t/**\n    *   Get current total token sale\n    */\n    function getTotalCurrentSaled() constant returns (uint256 currentTokenSaled)  {\n\t\trequire(msg.sender==founder);\n\t\t\n\t\treturn currentTokenSaled;\n    }\n\n   /**\n    *   Send token to investor\n    */\n    function addInvestorList(address investor, uint256 amountToken)  returns (bool success) {\n\t\trequire(msg.sender==founder);\n\t\t\n\t\tif(currentTokenSaled + amountToken <= totalTokensSale)\n\t\t{\n\t\t\tbalances[investor] = safeAdd(balances[investor], amountToken);\n\t\t\tcurrentTokenSaled = safeAdd(currentTokenSaled, amountToken);\n\t\t\ttotalSupply = safeAdd(totalSupply, amountToken);\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t    return false;\n\t\t}\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"year4Unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated2Year\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalCurrentSaled\",\"outputs\":[{\"name\":\"currentTokenSaled\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated4Year\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateReserveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"year3Unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated3Year\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"month12companyUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"month6companyUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated1Year\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFounder\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated12Months\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated18Months\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"month24companyUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated6Months\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated24Months\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"month18companyUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"year2Unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"year1Unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateReserveCompanyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"addInvestorList\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fbt\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllocateTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526040805190810160405280600981526020017f434c5020546f6b656e0000000000000000000000000000000000000000000000815250600390805190602001906200005192919062000284565b506040805190810160405280600381526020017f434c500000000000000000000000000000000000000000000000000000000000815250600490805190602001906200009f92919062000284565b5060096005556000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550635ae7ae01600755635bda4201600855635cc8e181600955635dbb7581600a55635bda4201600b55635dbb7581600c55635f9dfa81600d5563617f2e01600e556000600f60006101000a81548160ff0219169083151502179055506000600f60016101000a81548160ff0219169083151502179055506000600f60026101000a81548160ff0219169083151502179055506000600f60036101000a81548160ff0219169083151502179055506000600f60046101000a81548160ff0219169083151502179055506000600f60056101000a81548160ff0219169083151502179055506000600f60066101000a81548160ff0219169083151502179055506000600f60076101000a81548160ff0219169083151502179055506000601055600554600a0a63052f83c002601155600554600a0a63025317c002601255600554600a0a63016e36000260135534156200023d57600080fd5b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000333565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002c757805160ff1916838001178555620002f8565b82800160010185558215620002f8579182015b82811115620002f7578251825591602001919060010190620002da565b5b5090506200030791906200030b565b5090565b6200033091905b808211156200032c57600081600090555060010162000312565b5090565b90565b61200e80620003436000396000f300606060405236156101aa576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101af578063095ea7b31461023d5780630b8519371461029757806318160ddd146102c05780631a8932d9146102e95780631abb0ba91461031657806323b872dd1461033f578063313ce567146103b857806336eec28e146103e15780633e260a2c1461040e578063458c9ca414610423578063472fdb671461044c5780634d597b2d146104755780634d853ee51461049e5780634f9b7bc8146104f357806357bd2a651461051c57806370a0823114610549578063711bfa89146105965780637d59a938146105bf57806386a3e0a7146105e857806393c32e06146106155780639434d7651461064e57806395d89b411461067b5780639b743cbd14610709578063a557f83414610736578063a9059cbb1461075f578063c65daea0146107b9578063c8865c0e146107e6578063cebfa61e14610813578063dd62ed3e1461083c578063e3d5e6a3146108a8578063f25633dd146108d1578063f7d91cd4146108fa578063ff992ef51461090f575b600080fd5b34156101ba57600080fd5b6101c2610969565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102025780820151818401526020810190506101e7565b50505050905090810190601f16801561022f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024857600080fd5b61027d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a07565b604051808215151515815260200191505060405180910390f35b34156102a257600080fd5b6102aa610af9565b6040518082815260200191505060405180910390f35b34156102cb57600080fd5b6102d3610aff565b6040518082815260200191505060405180910390f35b34156102f457600080fd5b6102fc610b05565b604051808215151515815260200191505060405180910390f35b341561032157600080fd5b610329610b18565b6040518082815260200191505060405180910390f35b341561034a57600080fd5b61039e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b7c565b604051808215151515815260200191505060405180910390f35b34156103c357600080fd5b6103cb610e72565b6040518082815260200191505060405180910390f35b34156103ec57600080fd5b6103f4610e78565b604051808215151515815260200191505060405180910390f35b341561041957600080fd5b610421610e8b565b005b341561042e57600080fd5b610436611403565b6040518082815260200191505060405180910390f35b341561045757600080fd5b61045f611409565b6040518082815260200191505060405180910390f35b341561048057600080fd5b61048861140f565b6040518082815260200191505060405180910390f35b34156104a957600080fd5b6104b1611415565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104fe57600080fd5b61050661143b565b6040518082815260200191505060405180910390f35b341561052757600080fd5b61052f611441565b604051808215151515815260200191505060405180910390f35b341561055457600080fd5b610580600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611454565b6040518082815260200191505060405180910390f35b34156105a157600080fd5b6105a961149c565b6040518082815260200191505060405180910390f35b34156105ca57600080fd5b6105d26114a2565b6040518082815260200191505060405180910390f35b34156105f357600080fd5b6105fb6114a8565b604051808215151515815260200191505060405180910390f35b341561062057600080fd5b61064c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114bb565b005b341561065957600080fd5b61066161155b565b604051808215151515815260200191505060405180910390f35b341561068657600080fd5b61068e61156e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106ce5780820151818401526020810190506106b3565b50505050905090810190601f1680156106fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561071457600080fd5b61071c61160c565b604051808215151515815260200191505060405180910390f35b341561074157600080fd5b61074961161f565b6040518082815260200191505060405180910390f35b341561076a57600080fd5b61079f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611625565b604051808215151515815260200191505060405180910390f35b34156107c457600080fd5b6107cc611808565b604051808215151515815260200191505060405180910390f35b34156107f157600080fd5b6107f961181b565b604051808215151515815260200191505060405180910390f35b341561081e57600080fd5b61082661182e565b6040518082815260200191505060405180910390f35b341561084757600080fd5b610892600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611834565b6040518082815260200191505060405180910390f35b34156108b357600080fd5b6108bb6118bb565b6040518082815260200191505060405180910390f35b34156108dc57600080fd5b6108e46118c1565b6040518082815260200191505060405180910390f35b341561090557600080fd5b61090d6118c7565b005b341561091a57600080fd5b61094f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611e3f565b604051808215151515815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ff5780601f106109d4576101008083540402835291602001916109ff565b820191906000526020600020905b8154815290600101906020018083116109e257829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600e5481565b60025481565b600f60019054906101000a900460ff1681565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b7657600080fd5b80905090565b6000816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610c48575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610cd157506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610e6657816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610e6b565b600090505b9392505050565b60055481565b600f60039054906101000a900460ff1681565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ee957600080fd5b60009050600b5442118015610f0b5750600f60009054906101000a900460ff16155b1561101f576001600f60006101000a81548160ff021916908315150217905550610f386012546004611f6e565b9050610fa4600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611fb5565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061101460025482611fb5565b6002819055506113bd565b600c544211801561103d5750600f60019054906101000a900460ff16155b15611151576001600f60016101000a81548160ff02191690831515021790555061106a6012546004611f6e565b90506110d6600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611fb5565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061114660025482611fb5565b6002819055506113bc565b600d544211801561116f5750600f60029054906101000a900460ff16155b15611283576001600f60026101000a81548160ff02191690831515021790555061119c6012546004611f6e565b9050611208600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611fb5565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061127860025482611fb5565b6002819055506113bb565b600e54421180156112a15750600f60039054906101000a900460ff16155b156113b5576001600f60036101000a81548160ff0219169083151502179055506112ce6012546004611f6e565b905061133a600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611fb5565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113aa60025482611fb5565b6002819055506113ba565b600080fd5b5b5b5b3373ffffffffffffffffffffffffffffffffffffffff167f37e5f3d38cc7ce7c9454d31ff209dae0645f0157561ac8a1e55329c70f24c5b160405160405180910390a250565b600d5481565b60125481565b60135481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60115481565b600f60029054906101000a900460ff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60085481565b60075481565b600f60009054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561151757600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600f60059054906101000a900460ff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116045780601f106115d957610100808354040283529160200191611604565b820191906000526020600020905b8154815290600101906020018083116115e757829003601f168201915b505050505081565b600f60069054906101000a900460ff1681565b600a5481565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156116f257506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156117fd57816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611802565b600090505b92915050565b600f60049054906101000a900460ff1681565b600f60079054906101000a900460ff1681565b60095481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600c5481565b600b5481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561192557600080fd5b60009050600754421180156119475750600f60049054906101000a900460ff16155b15611a5b576001600f60046101000a81548160ff0219169083151502179055506119746013546004611f6e565b90506119e0600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611fb5565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a5060025482611fb5565b600281905550611df9565b60085442118015611a795750600f60059054906101000a900460ff16155b15611b8d576001600f60056101000a81548160ff021916908315150217905550611aa66013546004611f6e565b9050611b12600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611fb5565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b8260025482611fb5565b600281905550611df8565b60095442118015611bab5750600f60069054906101000a900460ff16155b15611cbf576001600f60066101000a81548160ff021916908315150217905550611bd86013546004611f6e565b9050611c44600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611fb5565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611cb460025482611fb5565b600281905550611df7565b600a5442118015611cdd5750600f60079054906101000a900460ff16155b15611df1576001600f60076101000a81548160ff021916908315150217905550611d0a6013546004611f6e565b9050611d76600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611fb5565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611de660025482611fb5565b600281905550611df6565b600080fd5b5b5b5b3373ffffffffffffffffffffffffffffffffffffffff167f37e5f3d38cc7ce7c9454d31ff209dae0645f0157561ac8a1e55329c70f24c5b160405160405180910390a250565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e9d57600080fd5b6011548260105401111515611f6357611ef46000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611fb5565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f4260105483611fb5565b601081905550611f5460025483611fb5565b60028190555060019050611f68565b600090505b92915050565b600080600083111515611f8057600080fd5b8284811515611f8b57fe5b0490508284811515611f9957fe5b068184020184141515611fab57600080fd5b8091505092915050565b6000808284019050838110158015611fcd5750828110155b1515611fd857600080fd5b80915050929150505600a165627a7a7230582012c962875f5516eaa5a809b458529e68bfc0add38eb7e3e69e8b826a133641eb0029"
}