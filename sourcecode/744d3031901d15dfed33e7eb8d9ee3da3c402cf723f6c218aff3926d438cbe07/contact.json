{
  "address": "0x123ab195dd38b1b40510d467a6a359b201af056f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Legolas",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-02\n*/\n\npragma solidity ^0.4.13;\n\ncontract EIP20Interface {\n    /* This is a slight change to the ERC20 base standard.\n    function totalSupply() constant returns (uint256 supply);\n    is replaced with:\n    uint256 public totalSupply;\n    This automatically creates a getter function for the totalSupply.\n    This is moved to the base contract since public getter functions are not\n    currently recognised as an implementation of the matching abstract\n    function by the compiler.\n    */\n    /// total amount of tokens\n    uint256 public totalSupply;\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    // solhint-disable-next-line no-simple-event-func-name\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract Ownable {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /// @notice Transfer ownership from `owner` to `newOwner`\n    /// @param _newOwner The new contract owner\n    function transferOwnership(address _newOwner) public onlyOwner {\n        if (_newOwner != address(0)) {\n            newOwner = _newOwner;\n        }\n    }\n\n    /// @notice accept ownership of the contract\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract LegolasBase is Ownable {\n\n    mapping (address => uint256) public balances;\n\n    // Initial amount received from the pre-sale (doesn't include bonus)\n    mapping (address => uint256) public initialAllocations;\n    // Initial amount received from the pre-sale (includes bonus)\n    mapping (address => uint256) public allocations;\n    // False if part of the allocated amount is spent\n    mapping (uint256 => mapping(address => bool)) public eligibleForBonus;\n    // unspent allocated amount by period\n    mapping (uint256 => uint256) public unspentAmounts;\n    // List of founders addresses\n    mapping (address => bool) public founders;\n    // List of advisors addresses\n    mapping (address => bool) public advisors;\n\n    // Release dates for adviors: one twelfth released each month.\n    uint256[12] public ADVISORS_LOCK_DATES = [1521072000, 1523750400, 1526342400,\n                                       1529020800, 1531612800, 1534291200,\n                                       1536969600, 1539561600, 1542240000,\n                                       1544832000, 1547510400, 1550188800];\n    // Release dates for founders: After one year, one twelfth released each month.\n    uint256[12] public FOUNDERS_LOCK_DATES = [1552608000, 1555286400, 1557878400,\n                                       1560556800, 1563148800, 1565827200,\n                                       1568505600, 1571097600, 1573776000,\n                                       1576368000, 1579046400, 1581724800];\n\n    // Bonus dates: each 6 months during 2 years\n    uint256[4] public BONUS_DATES = [1534291200, 1550188800, 1565827200, 1581724800];\n\n    /// @param _address The address from which the locked amount will be retrieved\n    /// @return The amount locked for _address.\n    function getLockedAmount(address _address) internal view returns (uint256 lockedAmount) {\n        // Only founders and advisors have locks\n        if (!advisors[_address] && !founders[_address]) return 0;\n        // Determine release dates\n        uint256[12] memory lockDates = advisors[_address] ? ADVISORS_LOCK_DATES : FOUNDERS_LOCK_DATES;\n        // Determine how many twelfths are locked\n        for (uint8 i = 11; i >= 0; i--) {\n            if (now >= lockDates[i]) {\n                return (allocations[_address] / 12) * (11 - i);\n            }\n        }\n        return allocations[_address];\n    }\n\n    function updateBonusEligibity(address _from) internal {\n        if (now < BONUS_DATES[3] &&\n            initialAllocations[_from] > 0 &&\n            balances[_from] < allocations[_from]) {\n            for (uint8 i = 0; i < 4; i++) {\n                if (now < BONUS_DATES[i] && eligibleForBonus[BONUS_DATES[i]][_from]) {\n                    unspentAmounts[BONUS_DATES[i]] -= initialAllocations[_from];\n                    eligibleForBonus[BONUS_DATES[i]][_from] = false;\n                }\n            }\n        }\n    }\n}\n\ncontract EIP20 is EIP20Interface, LegolasBase {\n\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\n    mapping (address => mapping (address => uint256)) public allowed;\n\n\n    /*\n    NOTE:\n    The following variables are OPTIONAL vanities. One does not have to include them.\n    They allow one to customise the token contract & in no way influences the core functionality.\n    Some wallets/interfaces might not even bother to look at this information.\n    */\n    string public name;                   //fancy name: eg Simon Bucks\n    uint8 public decimals;                //How many decimals to show.\n    string public symbol;                 //An identifier: eg SBX\n\n    function EIP20(\n        uint256 _initialAmount,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol\n    ) public {\n        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n        totalSupply = _initialAmount;                        // Update total supply\n        name = _tokenName;                                   // Set the name for display purposes\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        // Check locked amount\n        require(balances[msg.sender] - _value >= getLockedAmount(msg.sender));\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n\n        // Bonus lost if balance is lower than the original allocation\n        updateBonusEligibity(msg.sender);\n\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n\n        // Check locked amount\n        require(balances[_from] - _value >= getLockedAmount(_from));\n\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n\n        // Bonus lost if balance is lower than the original allocation\n        updateBonusEligibity(_from);\n\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\ncontract Legolas is EIP20 {\n\n    // Standard ERC20 information\n    string  constant NAME = \"LGO Token\";\n    string  constant SYMBOL = \"LGO\";\n    uint8   constant DECIMALS = 8;\n    uint256 constant UNIT = 10**uint256(DECIMALS);\n\n    uint256 constant onePercent = 181415052000000;\n\n    // 5% for advisors\n    uint256 constant ADVISORS_AMOUNT =   5 * onePercent;\n    // 15% for founders\n    uint256 constant FOUNDERS_AMOUNT =  15 * onePercent;\n    // 60% sold in pre-sale\n    uint256 constant HOLDERS_AMOUNT  =  60 * onePercent;\n    // 20% reserve\n    uint256 constant RESERVE_AMOUNT  =  20 * onePercent;\n    // ADVISORS_AMOUNT + FOUNDERS_AMOUNT + HOLDERS_AMOUNT +RESERVE_AMOUNT\n    uint256 constant INITIAL_AMOUNT  = 100 * onePercent;\n    // 20% for holder bonus\n    uint256 constant BONUS_AMOUNT    =  20 * onePercent;\n    // amount already allocated to advisors\n    uint256 public advisorsAllocatedAmount = 0;\n    // amount already allocated to funders\n    uint256 public foundersAllocatedAmount = 0;\n    // amount already allocated to holders\n    uint256 public holdersAllocatedAmount = 0;\n    // list of all initial holders\n    address[] initialHolders;\n    // not distributed because the defaut value is false\n    mapping (uint256 => mapping(address => bool)) bonusNotDistributed;\n\n    event Allocate(address _address, uint256 _value);\n\n    function Legolas() EIP20( // EIP20 constructor\n        INITIAL_AMOUNT + BONUS_AMOUNT,\n        NAME,\n        DECIMALS,\n        SYMBOL\n    ) public {}\n\n    /// @param _address The address of the recipient\n    /// @param _amount Amount of the allocation\n    /// @param _type Type of the recipient. 0 for advisor, 1 for founders.\n    /// @return Whether the allocation was successful or not\n    function allocate(address _address, uint256 _amount, uint8 _type) public onlyOwner returns (bool success) {\n        // one allocations by address\n        require(allocations[_address] == 0);\n\n        if (_type == 0) { // advisor\n            // check allocated amount\n            require(advisorsAllocatedAmount + _amount <= ADVISORS_AMOUNT);\n            // increase allocated amount\n            advisorsAllocatedAmount += _amount;\n            // mark address as advisor\n            advisors[_address] = true;\n        } else if (_type == 1) { // founder\n            // check allocated amount\n            require(foundersAllocatedAmount + _amount <= FOUNDERS_AMOUNT);\n            // increase allocated amount\n            foundersAllocatedAmount += _amount;\n            // mark address as founder\n            founders[_address] = true;\n        } else {\n            // check allocated amount\n            require(holdersAllocatedAmount + _amount <= HOLDERS_AMOUNT + RESERVE_AMOUNT);\n            // increase allocated amount\n            holdersAllocatedAmount += _amount;\n        }\n        // set allocation\n        allocations[_address] = _amount;\n        initialAllocations[_address] = _amount;\n\n        // increase balance\n        balances[_address] += _amount;\n\n        // update variables for bonus distribution\n        for (uint8 i = 0; i < 4; i++) {\n            // increase unspent amount\n            unspentAmounts[BONUS_DATES[i]] += _amount;\n            // initialize bonus eligibility\n            eligibleForBonus[BONUS_DATES[i]][_address] = true;\n            bonusNotDistributed[BONUS_DATES[i]][_address] = true;\n        }\n\n        // add to initial holders list\n        initialHolders.push(_address);\n\n        Allocate(_address, _amount);\n\n        return true;\n    }\n\n    /// @param _address Holder address.\n    /// @param _bonusDate Date of the bonus to distribute.\n    /// @return Whether the bonus distribution was successful or not\n    function claimBonus(address _address, uint256 _bonusDate) public returns (bool success) {\n        /// bonus date must be past\n        require(_bonusDate <= now);\n        /// disrtibute bonus only once\n        require(bonusNotDistributed[_bonusDate][_address]);\n        /// disrtibute bonus only if eligible\n        require(eligibleForBonus[_bonusDate][_address]);\n\n        // calculate the bonus for one holded LGO\n        uint256 bonusByLgo = (BONUS_AMOUNT / 4) / unspentAmounts[_bonusDate];\n\n        // distribute the bonus\n        uint256 holderBonus = initialAllocations[_address] * bonusByLgo;\n        balances[_address] += holderBonus;\n        allocations[_address] += holderBonus;\n\n        // set bonus as distributed\n        bonusNotDistributed[_bonusDate][_address] = false;\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"advisors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_bonusDate\",\"type\":\"uint256\"}],\"name\":\"claimBonus\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BONUS_DATES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"eligibleForBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdersAllocatedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsAllocatedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersAllocatedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"allocate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialAllocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"FOUNDERS_LOCK_DATES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"founders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ADVISORS_LOCK_DATES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unspentAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Allocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405261018060405190810160405280635aa9b78063ffffffff168152602001635ad2960063ffffffff168152602001635afa230063ffffffff168152602001635b23018063ffffffff168152602001635b4a8e8063ffffffff168152602001635b736d0063ffffffff168152602001635b9c4b8063ffffffff168152602001635bc3d88063ffffffff168152602001635becb70063ffffffff168152602001635c14440063ffffffff168152602001635c3d228063ffffffff168152602001635c66010063ffffffff16815250600a90600c620000e19291906200039e565b5061018060405190810160405280635c8aeb0063ffffffff168152602001635cb3c98063ffffffff168152602001635cdb568063ffffffff168152602001635d04350063ffffffff168152602001635d2bc20063ffffffff168152602001635d54a08063ffffffff168152602001635d7d7f0063ffffffff168152602001635da50c0063ffffffff168152602001635dcdea8063ffffffff168152602001635df5778063ffffffff168152602001635e1e560063ffffffff168152602001635e47348063ffffffff16815250601690600c620001bf9291906200039e565b50608060405190810160405280635b736d0063ffffffff168152602001635c66010063ffffffff168152602001635d54a08063ffffffff168152602001635e47348063ffffffff1681525060229060046200021c929190620003eb565b506000602a556000602b556000602c5534156200023857600080fd5b65a4fefbbb3b0060140265a4fefbbb3b00606402016040805190810160405280600981526020017f4c474f20546f6b656e000000000000000000000000000000000000000000000081525060086040805190810160405280600381526020017f4c474f000000000000000000000000000000000000000000000000000000000081525033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008190555082602790805190602001906200035f92919062000438565b5081602860006101000a81548160ff021916908360ff16021790555080602990805190602001906200039392919062000438565b5050505050620004e7565b82600c8101928215620003d8579160200282015b82811115620003d7578251829063ffffffff16905591602001919060010190620003b2565b5b509050620003e79190620004bf565b5090565b826004810192821562000425579160200282015b8281111562000424578251829063ffffffff16905591602001919060010190620003ff565b5b509050620004349190620004bf565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200047b57805160ff1916838001178555620004ac565b82800160010185558215620004ac579182015b82811115620004ab5782518255916020019190600101906200048e565b5b509050620004bb9190620004bf565b5090565b620004e491905b80821115620004e0576000816000905550600101620004c6565b5090565b90565b6122c280620004f76000396000f300606060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303ca0f6c1461017a57806306fdde03146101cb578063095ea7b3146102595780630fa8beb3146102b3578063101175e81461030d57806318160ddd14610344578063215a48621461036d57806323b872dd146103c757806327e235e314610440578063313ce5671461048d57806352a9039c146104bc5780635c6581651461050957806370a08231146105755780637850c2ac146105c257806379ba5097146105eb5780638c655550146106005780638da5cb5b1461062957806395d89b411461067e57806396b864361461070c578063a9059cbb14610735578063bac0b2761461078f578063d4ee1d90146107f5578063d821b9f91461084a578063d97d4f5214610897578063dd62ed3e146108ce578063de6746a51461093a578063e87b02421461098b578063f181f396146109c2578063f2fde38b146109f9575b600080fd5b341561018557600080fd5b6101b1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a32565b604051808215151515815260200191505060405180910390f35b34156101d657600080fd5b6101de610a52565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561021e578082015181840152602081019050610203565b50505050905090810190601f16801561024b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561026457600080fd5b610299600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610af0565b604051808215151515815260200191505060405180910390f35b34156102be57600080fd5b6102f3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610be2565b604051808215151515815260200191505060405180910390f35b341561031857600080fd5b61032e6004808035906020019091905050610e51565b6040518082815260200191505060405180910390f35b341561034f57600080fd5b610357610e6b565b6040518082815260200191505060405180910390f35b341561037857600080fd5b6103ad600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e71565b604051808215151515815260200191505060405180910390f35b34156103d257600080fd5b610426600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ea0565b604051808215151515815260200191505060405180910390f35b341561044b57600080fd5b610477600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061119b565b6040518082815260200191505060405180910390f35b341561049857600080fd5b6104a06111b3565b604051808260ff1660ff16815260200191505060405180910390f35b34156104c757600080fd5b6104f3600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111c6565b6040518082815260200191505060405180910390f35b341561051457600080fd5b61055f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111de565b6040518082815260200191505060405180910390f35b341561058057600080fd5b6105ac600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611203565b6040518082815260200191505060405180910390f35b34156105cd57600080fd5b6105d561124c565b6040518082815260200191505060405180910390f35b34156105f657600080fd5b6105fe611252565b005b341561060b57600080fd5b6106136113b1565b6040518082815260200191505060405180910390f35b341561063457600080fd5b61063c6113b7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561068957600080fd5b6106916113dd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106d15780820151818401526020810190506106b6565b50505050905090810190601f1680156106fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561071757600080fd5b61071f61147b565b6040518082815260200191505060405180910390f35b341561074057600080fd5b610775600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611481565b604051808215151515815260200191505060405180910390f35b341561079a57600080fd5b6107db600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803560ff1690602001909190505061163b565b604051808215151515815260200191505060405180910390f35b341561080057600080fd5b610808611b44565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561085557600080fd5b610881600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b6a565b6040518082815260200191505060405180910390f35b34156108a257600080fd5b6108b86004808035906020019091905050611b82565b6040518082815260200191505060405180910390f35b34156108d957600080fd5b610924600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b9c565b6040518082815260200191505060405180910390f35b341561094557600080fd5b610971600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c23565b604051808215151515815260200191505060405180910390f35b341561099657600080fd5b6109ac6004808035906020019091905050611c43565b6040518082815260200191505060405180910390f35b34156109cd57600080fd5b6109e36004808035906020019091905050611c5d565b6040518082815260200191505060405180910390f35b3415610a0457600080fd5b610a30600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c75565b005b60096020528060005260406000206000915054906101000a900460ff1681565b60278054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ae85780601f10610abd57610100808354040283529160200191610ae8565b820191906000526020600020905b815481529060010190602001808311610acb57829003601f168201915b505050505081565b600081602660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000806000428411151515610bf657600080fd5b602e600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610c5f57600080fd5b6006600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610cc857600080fd5b6007600085815260200190815260200160002054600465a4fefbbb3b00601402811515610cf157fe5b04811515610cfb57fe5b04915081600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205402905080600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506000602e600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019250505092915050565b602281600481101515610e6057fe5b016000915090505481565b60005481565b60066020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600080602660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610f715750828110155b1515610f7c57600080fd5b610f8585611d4c565b83600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540310151515610fd457600080fd5b82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156111215782602660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b61112a85611f86565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60036020528060005260406000206000915090505481565b602860009054906101000a900460ff1681565b60056020528060005260406000206000915090505481565b6026602052816000526040600020602052806000526040600020600091509150505481565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b602c5481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112ae57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b602a5481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60298054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114735780601f1061144857610100808354040283529160200191611473565b820191906000526020600020905b81548152906001019060200180831161145657829003601f168201915b505050505081565b602b5481565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156114d157600080fd5b6114da33611d4c565b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054031015151561152957600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506115cc33611f86565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561169a57600080fd5b6000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156116e857600080fd5b60008360ff16141561177d5765a4fefbbb3b0060050284602a54011115151561171057600080fd5b83602a600082825401925050819055506001600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061184b565b60018360ff1614156118125765a4fefbbb3b00600f0284602b5401111515156117a557600080fd5b83602b600082825401925050819055506001600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061184a565b65a4fefbbb3b0060140265a4fefbbb3b00603c020184602c54011115151561183957600080fd5b83602c600082825401925050819055505b5b83600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600090505b60048160ff161015611a6a57836007600060228460ff1660048110151561194857fe5b015481526020019081526020016000206000828254019250508190555060016006600060228460ff1660048110151561197d57fe5b0154815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001602e600060228460ff166004811015156119f957fe5b0154815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050611925565b602d8054806001018281611a7e919061221c565b9160005260206000209001600087909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550507f249d8eb76d5a22983620d741de2470148d1a9a26ab923aec4262770690d11ebc8585604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a160019150509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b601681600c81101515611b9157fe5b016000915090505481565b6000602660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60086020528060005260406000206000915054906101000a900460ff1681565b600a81600c81101515611c5257fe5b016000915090505481565b60076020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cd157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611d495780600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000611d56612248565b6000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015611dfc5750600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15611e0a5760009250611f7f565b600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611e62576016611e65565b600a5b600c806020026040519081016040528092919082600c8015611e9c576020028201915b815481526020019060010190808311611e88575b50505050509150600b90505b60008160ff16101515611f3c57818160ff16600c81101515611ec657fe5b602002015142101515611f2e5780600b0360ff16600c600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811515611f2557fe5b04029250611f7f565b808060019003915050611ea8565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492505b5050919050565b600060226003600481101515611f9857fe5b015442108015611fe757506000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b80156120705750600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b1561221857600090505b60048160ff1610156122175760228160ff1660048110151561209857fe5b01544210801561211557506006600060228360ff166004811015156120b957fe5b0154815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1561220a57600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546007600060228460ff1660048110151561217057fe5b015481526020019081526020016000206000828254039250508190555060006006600060228460ff166004811015156121a557fe5b0154815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b808060010191505061207a565b5b5050565b815481835581811511612243578183600052602060002091820191016122429190612271565b5b505050565b61018060405190810160405280600c905b60008152602001906001900390816122595790505090565b61229391905b8082111561228f576000816000905550600101612277565b5090565b905600a165627a7a72305820994d4bd6d6864869281179d49a52ee3c4ba7840553f259acbe3dcf191d0b62b70029"
}