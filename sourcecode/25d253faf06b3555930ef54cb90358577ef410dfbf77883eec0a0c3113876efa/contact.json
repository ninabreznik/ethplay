{
  "address": "0x849CE35755c07F077700Be3EB4cD5Ca80f140623",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AOContentFactory",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.5.4 <0.6.0;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t * @dev Multiplies two numbers, throws on overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, truncating the quotient.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t * @dev Adds two numbers, throws on overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\ninterface INameTAOPosition {\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\n\tfunction getAdvocate(address _id) external view returns (address);\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\n}\n\n\ninterface INameFactory {\n\tfunction nonces(address _nameId) external view returns (uint256);\n\tfunction incrementNonce(address _nameId) external returns (uint256);\n\tfunction ethAddressToNameId(address _ethAddress) external view returns (address);\n\tfunction setNameNewAddress(address _id, address _newAddress) external returns (bool);\n\tfunction nameIdToEthAddress(address _nameId) external view returns (address);\n}\n\n\ninterface IAOEarning {\n\tfunction calculateEarning(bytes32 _purchaseReceiptId) external returns (bool);\n\n\tfunction releaseEarning(bytes32 _purchaseReceiptId) external returns (bool);\n\n\tfunction getTotalStakedContentEarning(bytes32 _stakedContentId) external view returns (uint256, uint256, uint256);\n}\n\n\ninterface IAOContentHost {\n\tfunction create(address _host, bytes32 _stakedContentId, string calldata _encChallenge, string calldata _contentDatKey, string calldata _metadataDatKey) external returns (bool);\n\n\tfunction getById(bytes32 _contentHostId) external view returns (bytes32, bytes32, address, string memory, string memory);\n\n\tfunction contentHostPrice(bytes32 _contentHostId) external view returns (uint256);\n\n\tfunction contentHostPaidByAO(bytes32 _contentHostId) external view returns (uint256);\n\n\tfunction isExist(bytes32 _contentHostId) external view returns (bool);\n}\n\n\ninterface IAOStakedContent {\n\tfunction getById(bytes32 _stakedContentId) external view returns (bytes32, address, uint256, uint256, uint256, uint256, bool, uint256);\n\n\tfunction create(address _stakeOwner, bytes32 _contentId, uint256 _networkIntegerAmount, uint256 _networkFractionAmount, bytes8 _denomination, uint256 _primordialAmount, uint256 _profitPercentage) external returns (bytes32);\n\n\tfunction isActive(bytes32 _stakedContentId) external view returns (bool);\n}\n\n\ninterface IAOContent {\n\tfunction create(address _creator, string calldata _baseChallenge, uint256 _fileSize, bytes32 _contentUsageType, address _taoId) external returns (bytes32);\n\n\tfunction isAOContentUsageType(bytes32 _contentId) external view returns (bool);\n\n\tfunction getById(bytes32 _contentId) external view returns (address, uint256, bytes32, address, bytes32, uint8, bytes32, bytes32, string memory);\n\n\tfunction getBaseChallenge(bytes32 _contentId) external view returns (string memory);\n}\n\n\ninterface IAOTreasury {\n\tfunction toBase(uint256 integerAmount, uint256 fractionAmount, bytes8 denominationName) external view returns (uint256);\n\tfunction isDenominationExist(bytes8 denominationName) external view returns (bool);\n}\n\n\ninterface IAOSetting {\n\tfunction getSettingValuesByTAOName(address _taoId, string calldata _settingName) external view returns (uint256, bool, address, bytes32, string memory);\n\tfunction getSettingTypes() external view returns (uint8, uint8, uint8, uint8, uint8);\n\n\tfunction settingTypeLookup(uint256 _settingId) external view returns (uint8);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * @title TAO\n */\ncontract TAO {\n\tusing SafeMath for uint256;\n\n\taddress public vaultAddress;\n\tstring public name;\t\t\t\t// the name for this TAO\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\n\n\t// TAO's data\n\tstring public datHash;\n\tstring public database;\n\tstring public keyValue;\n\tbytes32 public contentId;\n\n\t/**\n\t * 0 = TAO\n\t * 1 = Name\n\t */\n\tuint8 public typeId;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _vaultAddress\n\t) public {\n\t\tname = _name;\n\t\toriginId = _originId;\n\t\tdatHash = _datHash;\n\t\tdatabase = _database;\n\t\tkeyValue = _keyValue;\n\t\tcontentId = _contentId;\n\n\t\t// Creating TAO\n\t\ttypeId = 0;\n\n\t\tvaultAddress = _vaultAddress;\n\t}\n\n\t/**\n\t * @dev Checks if calling address is Vault contract\n\t */\n\tmodifier onlyVault {\n\t\trequire (msg.sender == vaultAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * Will receive any ETH sent\n\t */\n\tfunction () external payable {\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\t_recipient.transfer(_amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\n\t * @param _erc20TokenAddress The address of ERC20 Token\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\n\t\t_erc20.transfer(_recipient, _amount);\n\t\treturn true;\n\t}\n}\n\n\n\n\n/**\n * @title Name\n */\ncontract Name is TAO {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\n\t\t// Creating Name\n\t\ttypeId = 1;\n\t}\n}\n\n\n\n\n/**\n * @title AOLibrary\n */\nlibrary AOLibrary {\n\tusing SafeMath for uint256;\n\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\n\n\t/**\n\t * @dev Check whether or not the given TAO ID is a TAO\n\t * @param _taoId The ID of the TAO\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isTAO(address _taoId) public view returns (bool) {\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\n\t}\n\n\t/**\n\t * @dev Check whether or not the given Name ID is a Name\n\t * @param _nameId The ID of the Name\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isName(address _nameId) public view returns (bool) {\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\n\t}\n\n\t/**\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\n\t * @param _tokenAddress The ERC20 Token address to check\n\t */\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\n\t\tif (_tokenAddress == address(0)) {\n\t\t\treturn false;\n\t\t}\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t * @param _sender The address to check\n\t * @param _theAO The AO address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\n\t\treturn (_sender == _theAO ||\n\t\t\t(\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate percentage.\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\n\t */\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\n\t\treturn _PERCENTAGE_DIVISOR;\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate multiplier.\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\n\t */\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\n\t\treturn _MULTIPLIER_DIVISOR;\n\t}\n\n\t/**\n\t * @dev deploy a TAO\n\t * @param _name The name of the TAO\n\t * @param _originId The Name ID the creates the TAO\n\t * @param _datHash The datHash of this TAO\n\t * @param _database The database for this TAO\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this TAO\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployTAO(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (TAO _tao) {\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev deploy a Name\n\t * @param _name The name of the Name\n\t * @param _originId The eth address the creates the Name\n\t * @param _datHash The datHash of this Name\n\t * @param _database The database for this Name\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this Name\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployName(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (Name _myName) {\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\n\t * @return the new primordial weighted multiplier\n\t */\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\n\t\tif (_currentWeightedMultiplier > 0) {\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\n\t\t\treturn _totalWeightedIons.div(_totalIons);\n\t\t} else {\n\t\t\treturn _additionalWeightedMultiplier;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the primordial ion multiplier on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Multiplier = S\n\t *\t\tEnding Multiplier = E\n\t *\t\tTo Purchase = P\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\n\t * @return The multiplier in (10 ** 6)\n\t */\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\n\t\t\t */\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\n\t\t\t/**\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\n\t\t\t */\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus percentage of network ion on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Network Bonus Multiplier = Bs\n\t *\t\tEnding Network Bonus Multiplier = Be\n\t *\t\tTo Purchase = P\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\n\t\t\t */\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\n\t\t\treturn bonusPercentage;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus amount of network ion on a given lot\n\t *\t\tAO Bonus Amount = B% x P\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\n\t\t/**\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\n\t\t * when calculating the network ion bonus amount\n\t\t */\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\n\t\treturn networkBonus;\n\t}\n\n\t/**\n\t * @dev Calculate the maximum amount of Primordial an account can burn\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_maximumMultiplier = S\n\t *\t\t_amountToBurn = B\n\t *\t\tB = ((S x P) - (P x M)) / S\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _maximumMultiplier The maximum multiplier of this account\n\t * @return The maximum burn amount\n\t */\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after burning primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToBurn = B\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P - B)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToBurn The amount of primordial ion to burn\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToConvert = C\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P + C)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToConvert The amount of network ion to convert\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\n\t}\n\n\t/**\n\t * @dev count num of digits\n\t * @param number uint256 of the nuumber to be checked\n\t * @return uint8 num of digits\n\t */\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\n\t\tuint8 digits = 0;\n\t\twhile(number != 0) {\n\t\t\tnumber = number.div(10);\n\t\t\tdigits++;\n\t\t}\n\t\treturn digits;\n\t}\n}\n\n\n\ncontract TheAO {\n\taddress public theAO;\n\taddress public nameTAOPositionAddress;\n\n\t// Check whether an address is whitelisted and granted access to transact\n\t// on behalf of others\n\tmapping (address => bool) public whitelist;\n\n\tconstructor() public {\n\t\ttheAO = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks if msg.sender is in whitelist.\n\t */\n\tmodifier inWhitelist() {\n\t\trequire (whitelist[msg.sender] == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n/**\n * @title AOContentFactory\n *\n * The purpose of this contract is to allow content creator to stake network AO ions and/or primordial AO+ ions\n * on his/her content\n */\ncontract AOContentFactory is TheAO {\n\tusing SafeMath for uint256;\n\n\taddress public settingTAOId;\n\taddress public aoSettingAddress;\n\taddress public aoTreasuryAddress;\n\taddress public aoContentAddress;\n\taddress public aoStakedContentAddress;\n\taddress public aoContentHostAddress;\n\taddress public aoEarningAddress;\n\taddress public nameFactoryAddress;\n\n\tIAOSetting internal _aoSetting;\n\tIAOTreasury internal _aoTreasury;\n\tIAOContent internal _aoContent;\n\tIAOStakedContent internal _aoStakedContent;\n\tIAOContentHost internal _aoContentHost;\n\tIAOEarning internal _aoEarning;\n\tINameFactory internal _nameFactory;\n\tINameTAOPosition internal _nameTAOPosition;\n\n\t/**\n\t * @dev Constructor function\n\t * @param _settingTAOId The TAO ID that controls the setting\n\t * @param _aoSettingAddress The address of AOSetting\n\t * @param _aoTreasuryAddress The address of AOTreasury\n\t * @param _aoContentAddress The address of AOContent\n\t * @param _aoStakedContentAddress The address of AOStakedContent\n\t * @param _aoContentHostAddress The address of AOContentHost\n\t * @param _aoEarningAddress The address of AOEarning\n\t * @param _nameFactoryAddress The address of NameFactory\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tconstructor(address _settingTAOId,\n\t\taddress _aoSettingAddress,\n\t\taddress _aoTreasuryAddress,\n\t\taddress _aoContentAddress,\n\t\taddress _aoStakedContentAddress,\n\t\taddress _aoContentHostAddress,\n\t\taddress _aoEarningAddress,\n\t\taddress _nameFactoryAddress,\n\t\taddress _nameTAOPositionAddress\n\t\t) public {\n\t\tsetSettingTAOId(_settingTAOId);\n\t\tsetAOSettingAddress(_aoSettingAddress);\n\t\tsetAOTreasuryAddress(_aoTreasuryAddress);\n\t\tsetAOContentAddress(_aoContentAddress);\n\t\tsetAOStakedContentAddress(_aoStakedContentAddress);\n\t\tsetAOContentHostAddress(_aoContentHostAddress);\n\t\tsetAOEarningAddress(_aoEarningAddress);\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO sets setting TAO ID\n\t * @param _settingTAOId The new setting TAO ID to set\n\t */\n\tfunction setSettingTAOId(address _settingTAOId) public onlyTheAO {\n\t\trequire (AOLibrary.isTAO(_settingTAOId));\n\t\tsettingTAOId = _settingTAOId;\n\t}\n\n\t/**\n\t * @dev The AO sets AO Setting address\n\t * @param _aoSettingAddress The address of AOSetting\n\t */\n\tfunction setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {\n\t\trequire (_aoSettingAddress != address(0));\n\t\taoSettingAddress = _aoSettingAddress;\n\t\t_aoSetting = IAOSetting(_aoSettingAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AO Treasury address\n\t * @param _aoTreasuryAddress The address of AOTreasury\n\t */\n\tfunction setAOTreasuryAddress(address _aoTreasuryAddress) public onlyTheAO {\n\t\trequire (_aoTreasuryAddress != address(0));\n\t\taoTreasuryAddress = _aoTreasuryAddress;\n\t\t_aoTreasury = IAOTreasury(_aoTreasuryAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AOContent address\n\t * @param _aoContentAddress The address of AOContent\n\t */\n\tfunction setAOContentAddress(address _aoContentAddress) public onlyTheAO {\n\t\trequire (_aoContentAddress != address(0));\n\t\taoContentAddress = _aoContentAddress;\n\t\t_aoContent = IAOContent(_aoContentAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AOStakedContent address\n\t * @param _aoStakedContentAddress The address of AOStakedContent\n\t */\n\tfunction setAOStakedContentAddress(address _aoStakedContentAddress) public onlyTheAO {\n\t\trequire (_aoStakedContentAddress != address(0));\n\t\taoStakedContentAddress = _aoStakedContentAddress;\n\t\t_aoStakedContent = IAOStakedContent(_aoStakedContentAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AOContentHost address\n\t * @param _aoContentHostAddress The address of AOContentHost\n\t */\n\tfunction setAOContentHostAddress(address _aoContentHostAddress) public onlyTheAO {\n\t\trequire (_aoContentHostAddress != address(0));\n\t\taoContentHostAddress = _aoContentHostAddress;\n\t\t_aoContentHost = IAOContentHost(_aoContentHostAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AOEarning address\n\t * @param _aoEarningAddress The address of AOEarning\n\t */\n\tfunction setAOEarningAddress(address _aoEarningAddress) public onlyTheAO {\n\t\trequire (_aoEarningAddress != address(0));\n\t\taoEarningAddress = _aoEarningAddress;\n\t\t_aoEarning = IAOEarning(_aoEarningAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets NameFactory address\n\t * @param _nameFactoryAddress The address of NameFactory\n\t */\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\n\t\trequire (_nameFactoryAddress != address(0));\n\t\tnameFactoryAddress = _nameFactoryAddress;\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets NameTAOPosition address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Stake `_networkIntegerAmount` + `_networkFractionAmount` of network ion in `_denomination` and/or `_primordialAmount` primordial ion for an AO Content\n\t * @param _networkIntegerAmount The integer amount of network ion to stake\n\t * @param _networkFractionAmount The fraction amount of network ion to stake\n\t * @param _denomination The denomination of the network ion, i.e ao, kilo, mega, etc.\n\t * @param _primordialAmount The amount of primordial ion to stake\n\t * @param _baseChallenge The base challenge string (PUBLIC KEY) of the content\n\t * @param _encChallenge The encrypted challenge string (PUBLIC KEY) of the content unique to the host\n\t * @param _contentDatKey The dat key of the content\n\t * @param _metadataDatKey The dat key of the content's metadata\n\t * @param _fileSize The size of the file\n\t * @param _profitPercentage The percentage of profit the stake owner's media will charge\n\t */\n\tfunction stakeAOContent(\n\t\tuint256 _networkIntegerAmount,\n\t\tuint256 _networkFractionAmount,\n\t\tbytes8 _denomination,\n\t\tuint256 _primordialAmount,\n\t\tstring memory _baseChallenge,\n\t\tstring memory _encChallenge,\n\t\tstring memory _contentDatKey,\n\t\tstring memory _metadataDatKey,\n\t\tuint256 _fileSize,\n\t\tuint256 _profitPercentage\n\t\t) public {\n\t\t/**\n\t\t * 1. Store this content\n\t\t * 2. Stake the network/primordial ion on content\n\t\t * 3. Add the node info that hosts this content (in this case the creator himself)\n\t\t */\n\t\trequire (\n\t\t\t_hostContent(\n\t\t\t\tmsg.sender,\n\t\t\t\t_stakeContent(\n\t\t\t\t\tmsg.sender,\n\t\t\t\t\t_storeContent(\n\t\t\t\t\t\tmsg.sender,\n\t\t\t\t\t\t_baseChallenge,\n\t\t\t\t\t\t_fileSize,\n\t\t\t\t\t\t_contentUsageType_aoContent(),\n\t\t\t\t\t\taddress(0)\n\t\t\t\t\t),\n\t\t\t\t\t_networkIntegerAmount,\n\t\t\t\t\t_networkFractionAmount,\n\t\t\t\t\t_denomination,\n\t\t\t\t\t_primordialAmount,\n\t\t\t\t\t_profitPercentage\n\t\t\t\t),\n\t\t\t\t_encChallenge,\n\t\t\t\t_contentDatKey,\n\t\t\t\t_metadataDatKey\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Stake `_networkIntegerAmount` + `_networkFractionAmount` of network ion in `_denomination` and/or `_primordialAmount` primordial ion for a Creative Commons Content\n\t * @param _networkIntegerAmount The integer amount of network on to stake\n\t * @param _networkFractionAmount The fraction amount of network ion to stake\n\t * @param _denomination The denomination of the network ion, i.e ao, kilo, mega, etc.\n\t * @param _primordialAmount The amount of primordial ion to stake\n\t * @param _baseChallenge The base challenge string (PUBLIC KEY) of the content\n\t * @param _encChallenge The encrypted challenge string (PUBLIC KEY) of the content unique to the host\n\t * @param _contentDatKey The dat key of the content\n\t * @param _metadataDatKey The dat key of the content's metadata\n\t * @param _fileSize The size of the file\n\t */\n\tfunction stakeCreativeCommonsContent(\n\t\tuint256 _networkIntegerAmount,\n\t\tuint256 _networkFractionAmount,\n\t\tbytes8 _denomination,\n\t\tuint256 _primordialAmount,\n\t\tstring memory _baseChallenge,\n\t\tstring memory _encChallenge,\n\t\tstring memory _contentDatKey,\n\t\tstring memory _metadataDatKey,\n\t\tuint256 _fileSize\n\t\t) public {\n\t\t/**\n\t\t * 1. Store this content\n\t\t * 2. Stake the network/primordial ion on content\n\t\t * 3. Add the node info that hosts this content (in this case the creator himself)\n\t\t */\n\t\trequire (\n\t\t\t_hostContent(\n\t\t\t\tmsg.sender,\n\t\t\t\t_stakeContent(\n\t\t\t\t\tmsg.sender,\n\t\t\t\t\t_storeContent(\n\t\t\t\t\t\tmsg.sender,\n\t\t\t\t\t\t_baseChallenge,\n\t\t\t\t\t\t_fileSize,\n\t\t\t\t\t\t_contentUsageType_creativeCommons(),\n\t\t\t\t\t\taddress(0)\n\t\t\t\t\t),\n\t\t\t\t\t_networkIntegerAmount,\n\t\t\t\t\t_networkFractionAmount,\n\t\t\t\t\t_denomination,\n\t\t\t\t\t_primordialAmount,\n\t\t\t\t\t0\n\t\t\t\t),\n\t\t\t\t_encChallenge,\n\t\t\t\t_contentDatKey,\n\t\t\t\t_metadataDatKey\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Stake `_networkIntegerAmount` + `_networkFractionAmount` of network ion in `_denomination` and/or `_primordialAmount` primordial ion for a T(AO) Content\n\t * @param _networkIntegerAmount The integer amount of network ion to stake\n\t * @param _networkFractionAmount The fraction amount of network ion to stake\n\t * @param _denomination The denomination of the network ion, i.e ao, kilo, mega, etc.\n\t * @param _primordialAmount The amount of primordial ion to stake\n\t * @param _baseChallenge The base challenge string (PUBLIC KEY) of the content\n\t * @param _encChallenge The encrypted challenge string (PUBLIC KEY) of the content unique to the host\n\t * @param _contentDatKey The dat key of the content\n\t * @param _metadataDatKey The dat key of the content's metadata\n\t * @param _fileSize The size of the file\n\t * @param _taoId The TAO (TAO) ID for this content (if this is a T(AO) Content)\n\t */\n\tfunction stakeTAOContent(\n\t\tuint256 _networkIntegerAmount,\n\t\tuint256 _networkFractionAmount,\n\t\tbytes8 _denomination,\n\t\tuint256 _primordialAmount,\n\t\tstring memory _baseChallenge,\n\t\tstring memory _encChallenge,\n\t\tstring memory _contentDatKey,\n\t\tstring memory _metadataDatKey,\n\t\tuint256 _fileSize,\n\t\taddress _taoId\n\t\t) public {\n\t\t/**\n\t\t * 1. Store this content\n\t\t * 2. Stake the network/primordial ion on content\n\t\t * 3. Add the node info that hosts this content (in this case the creator himself)\n\t\t */\n\t\trequire (\n\t\t\t_hostContent(\n\t\t\t\tmsg.sender,\n\t\t\t\t_stakeContent(\n\t\t\t\t\tmsg.sender,\n\t\t\t\t\t_storeContent(\n\t\t\t\t\t\tmsg.sender,\n\t\t\t\t\t\t_baseChallenge,\n\t\t\t\t\t\t_fileSize,\n\t\t\t\t\t\t_contentUsageType_taoContent(),\n\t\t\t\t\t\t_taoId\n\t\t\t\t\t),\n\t\t\t\t\t_networkIntegerAmount,\n\t\t\t\t\t_networkFractionAmount,\n\t\t\t\t\t_denomination,\n\t\t\t\t\t_primordialAmount,\n\t\t\t\t\t0\n\t\t\t\t),\n\t\t\t\t_encChallenge,\n\t\t\t\t_contentDatKey,\n\t\t\t\t_metadataDatKey\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the staking information of a StakedContent ID\n\t * @param _stakedContentId The ID of the staked content\n\t * @return the network base ion amount staked for this content\n\t * @return the primordial ion amount staked for this content\n\t * @return the primordial weighted multiplier of the staked content\n\t */\n\tfunction getStakingMetrics(bytes32 _stakedContentId) public view returns (uint256, uint256, uint256) {\n\t\t(,, uint256 networkAmount, uint256 primordialAmount, uint256 primordialWeightedMultiplier,,,) = _aoStakedContent.getById(_stakedContentId);\n\t\treturn (\n\t\t\tnetworkAmount,\n\t\t\tprimordialAmount,\n\t\t\tprimordialWeightedMultiplier\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the earning information of a StakedContent ID\n\t * @param _stakedContentId The ID of the staked content\n\t * @return the total earning from staking this content\n\t * @return the total earning from hosting this content\n\t * @return the total The AO earning of this content\n\t */\n\tfunction getEarningMetrics(bytes32 _stakedContentId) public view returns (uint256, uint256, uint256) {\n\t\treturn _aoEarning.getTotalStakedContentEarning(_stakedContentId);\n\t}\n\n\t/**\n\t * @dev Return the staking and earning information of a StakedContent ID\n\t * @param _stakedContentId The ID of the staked content\n\t * @return the network base ion amount staked for this content\n\t * @return the primordial ion amount staked for this content\n\t * @return the primordial weighted multiplier of the staked content\n\t * @return the total earning from staking this content\n\t * @return the total earning from hosting this content\n\t * @return the total The AO earning of this content\n\t */\n\tfunction getContentMetrics(bytes32 _stakedContentId) public view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n\t\t(uint256 networkAmount, uint256 primordialAmount, uint256 primordialWeightedMultiplier) = getStakingMetrics(_stakedContentId);\n\t\t(uint256 totalStakeEarning, uint256 totalHostEarning, uint256 totalTheAOEarning) = getEarningMetrics(_stakedContentId);\n\t\treturn (\n\t\t\tnetworkAmount,\n\t\t\tprimordialAmount,\n\t\t\tprimordialWeightedMultiplier,\n\t\t\ttotalStakeEarning,\n\t\t\ttotalHostEarning,\n\t\t\ttotalTheAOEarning\n\t\t);\n\t}\n\n\t/***** INTERNAL METHODS *****/\n\t/**\n\t * @dev Get Content Usage Type = AO Content setting\n\t * @return contentUsageType_aoContent Content Usage Type = AO Content\n\t */\n\tfunction _contentUsageType_aoContent() internal view returns (bytes32) {\n\t\t(,,,bytes32 contentUsageType_aoContent,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'contentUsageType_aoContent');\n\t\treturn contentUsageType_aoContent;\n\t}\n\n\t/**\n\t * @dev Get Content Usage Type = Creative Commons setting\n\t * @return contentUsageType_creativeCommons Content Usage Type = Creative Commons\n\t */\n\tfunction _contentUsageType_creativeCommons() internal view returns (bytes32) {\n\t\t(,,,bytes32 contentUsageType_creativeCommons,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'contentUsageType_creativeCommons');\n\t\treturn contentUsageType_creativeCommons;\n\t}\n\n\t/**\n\t * @dev Get Content Usage Type = TAO Content setting\n\t * @return contentUsageType_taoContent Content Usage Type = T(AO) Content\n\t */\n\tfunction _contentUsageType_taoContent() internal view returns (bytes32) {\n\t\t(,,,bytes32 contentUsageType_taoContent,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'contentUsageType_taoContent');\n\t\treturn contentUsageType_taoContent;\n\t}\n\n\t/**\n\t * @dev Store the content information (content creation during staking)\n\t * @param _creator the address of the content creator\n\t * @param _baseChallenge The base challenge string (PUBLIC KEY) of the content\n\t * @param _fileSize The size of the file\n\t * @param _contentUsageType The content usage type, i.e AO Content, Creative Commons, or T(AO) Content\n\t * @param _taoId The TAO (TAO) ID for this content (if this is a T(AO) Content)\n\t * @return the ID of the content\n\t */\n\tfunction _storeContent(address _creator,\n\t\tstring memory _baseChallenge,\n\t\tuint256 _fileSize,\n\t\tbytes32 _contentUsageType,\n\t\taddress _taoId\n\t\t) internal returns (bytes32) {\n\t\taddress _creatorNameId = _nameFactory.ethAddressToNameId(_creator);\n\t\trequire (_creatorNameId != address(0));\n\t\treturn _aoContent.create(_creatorNameId, _baseChallenge, _fileSize, _contentUsageType, _taoId);\n\t}\n\n\t/**\n\t * @dev Actual staking the content\n\t * @param _stakeOwner the address that stake the content\n\t * @param _contentId The ID of the content\n\t * @param _networkIntegerAmount The integer amount of network ion to stake\n\t * @param _networkFractionAmount The fraction amount of network ion to stake\n\t * @param _denomination The denomination of the network ion, i.e ao, kilo, mega, etc.\n\t * @param _primordialAmount The amount of primordial ion to stake\n\t * @param _profitPercentage The percentage of profit the stake owner's media will charge\n\t * @return the newly created staked content ID\n\t */\n\tfunction _stakeContent(address _stakeOwner,\n\t\tbytes32 _contentId,\n\t\tuint256 _networkIntegerAmount,\n\t\tuint256 _networkFractionAmount,\n\t\tbytes8 _denomination,\n\t\tuint256 _primordialAmount,\n\t\tuint256 _profitPercentage\n\t\t) internal returns (bytes32) {\n\t\taddress _stakeOwnerNameId = _nameFactory.ethAddressToNameId(_stakeOwner);\n\t\trequire (_stakeOwnerNameId != address(0));\n\t\treturn _aoStakedContent.create(_stakeOwnerNameId, _contentId, _networkIntegerAmount, _networkFractionAmount, _denomination, _primordialAmount, _profitPercentage);\n\t}\n\n\t/**\n\t * @dev Add the distribution node info that hosts the content\n\t * @param _host the address of the host\n\t * @param _stakedContentId The ID of the staked content\n\t * @param _encChallenge The encrypted challenge string (PUBLIC KEY) of the content unique to the host\n\t * @param _contentDatKey The dat key of the content\n\t * @param _metadataDatKey The dat key of the content's metadata\n\t * @return true on success\n\t */\n\tfunction _hostContent(address _host, bytes32 _stakedContentId, string memory _encChallenge, string memory _contentDatKey, string memory _metadataDatKey) internal returns (bool) {\n\t\taddress _hostNameId = _nameFactory.ethAddressToNameId(_host);\n\t\trequire (_hostNameId != address(0));\n\t\treturn _aoContentHost.create(_hostNameId, _stakedContentId, _encChallenge, _contentDatKey, _metadataDatKey);\n\t}\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_aoSettingAddress\",\"type\":\"address\"}],\"name\":\"setAOSettingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoStakedContentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoTreasuryAddress\",\"type\":\"address\"}],\"name\":\"setAOTreasuryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoSettingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_networkIntegerAmount\",\"type\":\"uint256\"},{\"name\":\"_networkFractionAmount\",\"type\":\"uint256\"},{\"name\":\"_denomination\",\"type\":\"bytes8\"},{\"name\":\"_primordialAmount\",\"type\":\"uint256\"},{\"name\":\"_baseChallenge\",\"type\":\"string\"},{\"name\":\"_encChallenge\",\"type\":\"string\"},{\"name\":\"_contentDatKey\",\"type\":\"string\"},{\"name\":\"_metadataDatKey\",\"type\":\"string\"},{\"name\":\"_fileSize\",\"type\":\"uint256\"}],\"name\":\"stakeCreativeCommonsContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoStakedContentAddress\",\"type\":\"address\"}],\"name\":\"setAOStakedContentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoTreasuryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoContentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoContentAddress\",\"type\":\"address\"}],\"name\":\"setAOContentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"}],\"name\":\"setNameFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoEarningAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoContentHostAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_networkIntegerAmount\",\"type\":\"uint256\"},{\"name\":\"_networkFractionAmount\",\"type\":\"uint256\"},{\"name\":\"_denomination\",\"type\":\"bytes8\"},{\"name\":\"_primordialAmount\",\"type\":\"uint256\"},{\"name\":\"_baseChallenge\",\"type\":\"string\"},{\"name\":\"_encChallenge\",\"type\":\"string\"},{\"name\":\"_contentDatKey\",\"type\":\"string\"},{\"name\":\"_metadataDatKey\",\"type\":\"string\"},{\"name\":\"_fileSize\",\"type\":\"uint256\"},{\"name\":\"_profitPercentage\",\"type\":\"uint256\"}],\"name\":\"stakeAOContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stakedContentId\",\"type\":\"bytes32\"}],\"name\":\"getStakingMetrics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stakedContentId\",\"type\":\"bytes32\"}],\"name\":\"getContentMetrics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stakedContentId\",\"type\":\"bytes32\"}],\"name\":\"getEarningMetrics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoEarningAddress\",\"type\":\"address\"}],\"name\":\"setAOEarningAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoContentHostAddress\",\"type\":\"address\"}],\"name\":\"setAOContentHostAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingTAOId\",\"type\":\"address\"}],\"name\":\"setSettingTAOId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settingTAOId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_networkIntegerAmount\",\"type\":\"uint256\"},{\"name\":\"_networkFractionAmount\",\"type\":\"uint256\"},{\"name\":\"_denomination\",\"type\":\"bytes8\"},{\"name\":\"_primordialAmount\",\"type\":\"uint256\"},{\"name\":\"_baseChallenge\",\"type\":\"string\"},{\"name\":\"_encChallenge\",\"type\":\"string\"},{\"name\":\"_contentDatKey\",\"type\":\"string\"},{\"name\":\"_metadataDatKey\",\"type\":\"string\"},{\"name\":\"_fileSize\",\"type\":\"uint256\"},{\"name\":\"_taoId\",\"type\":\"address\"}],\"name\":\"stakeTAOContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_settingTAOId\",\"type\":\"address\"},{\"name\":\"_aoSettingAddress\",\"type\":\"address\"},{\"name\":\"_aoTreasuryAddress\",\"type\":\"address\"},{\"name\":\"_aoContentAddress\",\"type\":\"address\"},{\"name\":\"_aoStakedContentAddress\",\"type\":\"address\"},{\"name\":\"_aoContentHostAddress\",\"type\":\"address\"},{\"name\":\"_aoEarningAddress\",\"type\":\"address\"},{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"},{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000ec7aa72cb653b773b8c8c66a2e3e05669f4ef362000000000000000000000000bd314084ac5872598fdff2f31567084fc9c44270000000000000000000000000cec7c850458e5b966df0e7aa6f8ab374e1cc2c680000000000000000000000008db3ae7ad65b18282947ada2a6156a47b04cac9300000000000000000000000007afd974e8f5812c8c366318d379215475f42386000000000000000000000000264bf0625ac7aeb350952bc276ed388c50d37263000000000000000000000000e49b1cea729dc3468009f542fd650b0668a54b2500000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd820000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe",
  "libraries": [
    {
      "name": "AOLibrary",
      "address": "0x1150d53299Abb7DE27464D01B626728f5c840229"
    }
  ]
}