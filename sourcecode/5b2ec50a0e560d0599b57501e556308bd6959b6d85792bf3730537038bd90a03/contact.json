{
  "address": "0xfb4189d3b8431c88cac64d62b582448f6510f7f7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FastnFurious",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-01\n*/\n\npragma solidity 0.5.7;\n\n\ncontract Ownable {\n    address public owner;\n    address public pendingOwner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Modifier throws if called by any account other than the pendingOwner.\n     */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Allows the current owner to set the pendingOwner address.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n        pendingOwner = newOwner;\n    }\n\n    /**\n     * @dev Allows the pendingOwner address to finalize the transfer.\n     */\n    function claimOwnership() onlyPendingOwner public {\n        emit OwnershipTransferred(owner, pendingOwner);\n        owner = pendingOwner;\n        pendingOwner = address(0);\n    }\n}\n\n\ncontract FastnFurious is Ownable {\n    using SafeMath for uint;\n    \n    // round => winner\n    mapping(uint => address payable) public winners;\n    \n    // round => gain\n    mapping(uint => uint) public balances;\n    \n    uint public minBet = 0.1 ether; // 0.1 ether;\n    \n    uint public startTime = 1554076800; // 04.01.2019 00:00:00\n    uint public roundTime = 60; // 1 min in sec\n    \n    address payable public wallet;\n    address payable public jackpot;\n    \n    uint public pool;\n    \n    uint public walletPercent = 20;\n    uint public nextRoundPercent = 15;\n    uint public jackpotPercent = 15;\n    uint public lastRound;\n        \n    constructor (address payable _wallet, address payable _jackpot) public {\n        require(_wallet != address(0));\n        require(_jackpot != address(0));\n        \n    \twallet = _wallet;\n    \tjackpot = _jackpot;  \n    }\n    \n    function () external payable {\n        require(gasleft() > 150000);\n        setBet(msg.sender);\n    }\n    \n    function setBet(address payable _player) public payable {\n        require(msg.value >= minBet);\n        \n        uint currentRound = getCurrentRound();\n        \n        if (currentRound > 1 && balances[currentRound] == 0) {\n            uint gain = balances[lastRound];\n        \tbalances[lastRound] = 0;\n        \tbalances[currentRound] = balances[currentRound].add(pool);\n        \tpool = 0;\n    \n            address payable winner = getWinner(lastRound); \n            winner.transfer(gain);\n        }\n        \n        lastRound = currentRound;\n        \n        uint amount = msg.value;\n        uint toWallet = amount.mul(walletPercent).div(100);\n        uint toNextRound = amount.mul(nextRoundPercent).div(100);\n        uint toJackpot = amount.mul(jackpotPercent).div(100);\n\n        winners[currentRound] = _player;\n        \n        balances[currentRound] = balances[currentRound].add(amount).sub(toWallet).sub(toNextRound).sub(toJackpot);\n        pool = pool.add(toNextRound);\n        \n        jackpot.transfer(toJackpot);\n        wallet.transfer(toWallet);\n    }\n    \n    function getWinner(uint _round) public view returns (address payable) {\n        if (winners[_round] != address(0)) return winners[_round];\n        else return wallet;\n    }\n\n    function changeRoundTime(uint _time) onlyOwner public {\n        roundTime = _time;\n    }\n    \n    function changeStartTime(uint _time) onlyOwner public {\n        startTime = _time;    \n    }\n    \n    function changeWallet(address payable _wallet) onlyOwner public {\n        wallet = _wallet;\n    }\n\n    function changeJackpot(address payable _jackpot) onlyOwner public {\n        jackpot = _jackpot;\n    }\n    \n    function changeMinimalBet(uint _minBet) onlyOwner public {\n        minBet = _minBet;\n    }\n    \n    function changePercents(uint _toWinner, uint _toNextRound, uint _toWallet, uint _toJackPot) onlyOwner public {\n        uint total = _toWinner.add(_toNextRound).add(_toWallet).add(_toJackPot);\n        require(total == 100);\n        \n        walletPercent = _toWallet;\n        nextRoundPercent = _toNextRound;\n        jackpotPercent = _toJackPot;\n    }\n    \n    function getCurrentRound() public view returns (uint) {\n        return now.sub(startTime).div(roundTime).add(1); // start round is 1\n    }\n    \n    function getPreviosRound() public view returns (uint) {\n        return getCurrentRound().sub(1);    \n    }\n    \n    function getRoundBalance(uint _round) public view returns (uint) {\n        return balances[_round];\n    }\n    \n    function getRoundByTime(uint _time) public view returns (uint) {\n        return _time.sub(startTime).div(roundTime);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_minBet\",\"type\":\"uint256\"}],\"name\":\"changeMinimalBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"changeRoundTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getRoundByTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPreviosRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"changeStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toWinner\",\"type\":\"uint256\"},{\"name\":\"_toNextRound\",\"type\":\"uint256\"},{\"name\":\"_toWallet\",\"type\":\"uint256\"},{\"name\":\"_toJackPot\",\"type\":\"uint256\"}],\"name\":\"changePercents\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"setBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jackpot\",\"type\":\"address\"}],\"name\":\"changeJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextRoundPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_jackpot\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405267016345785d8a0000600455635ca15480600555603c6006556014600a55600f600b55600f600c5534801561003857600080fd5b50604051604080610c488339810180604052604081101561005857600080fd5b508051602090910151600080546001600160a01b031916331790556001600160a01b03821661008657600080fd5b6001600160a01b03811661009957600080fd5b600780546001600160a01b039384166001600160a01b03199182161790915560088054929093169116179055610b74806100d46000396000f3fe6080604052600436106101b75760003560e01c80638aa5b2c3116100ec578063bf4637e51161008a578063e082a8b311610064578063e082a8b314610513578063e30c397814610528578063ee5f8c8f1461053d578063f2fde38b14610552576101b7565b8063bf4637e5146104a5578063c07904ac146104ba578063d1d16834146104e0576101b7565b806398b9a2dc116100c657806398b9a2dc146103f7578063a2fb11751461042a578063a32bf59714610454578063a7327ea814610469576101b7565b80638aa5b2c3146103a35780638da5cb5b146103cd5780639619367d146103e2576101b7565b8063626a99a811610159578063776e831b11610133578063776e831b1461033a57806378e979251461036457806382bc07e614610379578063831711a11461038e576101b7565b8063626a99a8146102e6578063680c63b3146103105780636b31ee0114610325576101b7565b80634129b2c9116101955780634129b2c91461024c5780634903b0d1146102925780634e71e0c8146102bc578063521eb273146102d1576101b7565b80630de94fd5146101d157806316f0115b146101fb5780633ff7d36514610222575b620249f05a116101c657600080fd5b6101cf33610585565b005b3480156101dd57600080fd5b506101cf600480360360208110156101f457600080fd5b50356107bc565b34801561020757600080fd5b506102106107d8565b60408051918252519081900360200190f35b34801561022e57600080fd5b506102106004803603602081101561024557600080fd5b50356107de565b34801561025857600080fd5b506102766004803603602081101561026f57600080fd5b50356107f3565b604080516001600160a01b039092168252519081900360200190f35b34801561029e57600080fd5b50610210600480360360208110156102b557600080fd5b5035610840565b3480156102c857600080fd5b506101cf610852565b3480156102dd57600080fd5b506102766108cd565b3480156102f257600080fd5b506101cf6004803603602081101561030957600080fd5b50356108dc565b34801561031c57600080fd5b506102106108f8565b34801561033157600080fd5b506102766108fe565b34801561034657600080fd5b506102106004803603602081101561035d57600080fd5b503561090d565b34801561037057600080fd5b50610210610930565b34801561038557600080fd5b50610210610936565b34801561039a57600080fd5b5061021061093c565b3480156103af57600080fd5b506101cf600480360360208110156103c657600080fd5b5035610950565b3480156103d957600080fd5b5061027661096c565b3480156103ee57600080fd5b5061021061097b565b34801561040357600080fd5b506101cf6004803603602081101561041a57600080fd5b50356001600160a01b0316610981565b34801561043657600080fd5b506102766004803603602081101561044d57600080fd5b50356109ba565b34801561046057600080fd5b506102106109d5565b34801561047557600080fd5b506101cf6004803603608081101561048c57600080fd5b5080359060208101359060408101359060600135610a03565b3480156104b157600080fd5b50610210610a54565b6101cf600480360360208110156104d057600080fd5b50356001600160a01b0316610585565b3480156104ec57600080fd5b506101cf6004803603602081101561050357600080fd5b50356001600160a01b0316610a5a565b34801561051f57600080fd5b50610210610a93565b34801561053457600080fd5b50610276610a99565b34801561054957600080fd5b50610210610aa8565b34801561055e57600080fd5b506101cf6004803603602081101561057557600080fd5b50356001600160a01b0316610aae565b60045434101561059457600080fd5b600061059e6109d5565b90506001811180156105bc5750600081815260036020526040902054155b1561065357600d5460009081526003602052604080822080549083905560095484845291909220546105f39163ffffffff610ae716565b6000838152600360205260408120919091556009819055600d54610616906107f3565b6040519091506001600160a01b0382169083156108fc029084906000818181858888f1935050505015801561064f573d6000803e3d6000fd5b5050505b600d819055600a5434906000906106849060649061067890859063ffffffff610afd16565b9063ffffffff610b2116565b905060006106a26064610678600b5486610afd90919063ffffffff16565b905060006106c06064610678600c5487610afd90919063ffffffff16565b600086815260026020908152604080832080546001600160a01b0319166001600160a01b038c16179055600390915290205490915061071990829061070d9085908290889082908b610ae7565b9063ffffffff610b3616565b60008681526003602052604090205560095461073b908363ffffffff610ae716565b6009556008546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610778573d6000803e3d6000fd5b506007546040516001600160a01b039091169084156108fc029085906000818181858888f193505050501580156107b3573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b031633146107d357600080fd5b600455565b60095481565b6000818152600360205260409020545b919050565b6000818152600260205260408120546001600160a01b03161561082e57506000818152600260205260409020546001600160a01b03166107ee565b506007546001600160a01b03166107ee565b60036020526000908152604090205481565b6001546001600160a01b0316331461086957600080fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6007546001600160a01b031681565b6000546001600160a01b031633146108f357600080fd5b600655565b600a5481565b6008546001600160a01b031681565b600061092a60065461067860055485610b3690919063ffffffff16565b92915050565b60055481565b600d5481565b600061094b600161070d6109d5565b905090565b6000546001600160a01b0316331461096757600080fd5b600555565b6000546001600160a01b031681565b60045481565b6000546001600160a01b0316331461099857600080fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6002602052600090815260409020546001600160a01b031681565b600061094b60016109f760065461067860055442610b3690919063ffffffff16565b9063ffffffff610ae716565b6000546001600160a01b03163314610a1a57600080fd5b6000610a32826109f78581898963ffffffff610ae716565b905080606414610a4157600080fd5b50600a91909155600b91909155600c5550565b600c5481565b6000546001600160a01b03163314610a7157600080fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b600b5481565b6001546001600160a01b031681565b60065481565b6000546001600160a01b03163314610ac557600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600082820183811015610af657fe5b9392505050565b600082610b0c5750600061092a565b82820282848281610b1957fe5b0414610af657fe5b600080828481610b2d57fe5b04949350505050565b600082821115610b4257fe5b5090039056fea165627a7a723058205983934f20365f12ba9c67e9488bce3c203c02b98f90aa3e54d71b49099d1c4c0029000000000000000000000000be4823c2005c64ca5561b7d1bcf4f9d4dcaf90dc000000000000000000000000be2d9c289038d32c3d82bd99f464b48bf4696e52",
  "constructorArguments": "000000000000000000000000be4823c2005c64ca5561b7d1bcf4f9d4dcaf90dc000000000000000000000000be2d9c289038d32c3d82bd99f464b48bf4696e52"
}