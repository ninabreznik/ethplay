{
  "address": "0x416dd1d4fb22f6ae73651d5c2c5475087df4ea26",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GMPToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-05\n*/\n\npragma solidity ^0.4.15;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n\n  address public owner;\n  function Ownable() public { owner = msg.sender; }\n\n  modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {owner = newOwner;}\n}\n\ncontract ERC20Interface {\n\n  function totalSupply() public constant returns (uint256);\n\n  function balanceOf(address _owner) public constant returns (uint256);\n\n  function transfer(address _to, uint256 _value) public returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n\n  function allowance(address _owner, address _spender) public constant returns (uint256);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n }\n\ncontract GMPToken is Ownable, ERC20Interface {\n\n  using SafeMath for uint256;\n\n  /* Public variables of the token */\n  string public constant name = \"GMP Coin\";\n  string public constant symbol = \"GMP\";\n  uint public constant decimals = 18;\n  uint256 public constant initialSupply = 220000000 * 1 ether;\n  uint256 public totalSupply;\n\n  /* This creates an array with all balances */\n  mapping (address => uint256) public balances;\n  mapping (address => mapping (address => uint256)) public allowed;\n\n  /* Events */\n  event Burn(address indexed burner, uint256 value);\n  event Mint(address indexed to, uint256 amount);\n\n  /* Constuctor: Initializes contract with initial supply tokens to the creator of the contract */\n  function GMPToken() public {\n      balances[msg.sender] = initialSupply;              // Give the creator all initial tokens\n      totalSupply = initialSupply;                        // Update total supply\n  }\n\n\n  /* Implementation of ERC20Interface */\n\n  function totalSupply() public constant returns (uint256) { return totalSupply; }\n\n  function balanceOf(address _owner) public constant returns (uint256) { return balances[_owner]; }\n\n  /* Internal transfer, only can be called by this contract */\n  function _transfer(address _from, address _to, uint _amount) internal {\n      require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n      require (balances[_from] >= _amount);                // Check if the sender has enough\n      balances[_from] = balances[_from].sub(_amount);\n      balances[_to] = balances[_to].add(_amount);\n      Transfer(_from, _to, _amount);\n\n  }\n\n  function transfer(address _to, uint256 _amount) public returns (bool) {\n    _transfer(msg.sender, _to, _amount);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require (_value <= allowed[_from][msg.sender]);     // Check allowance\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _transfer(_from, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _amount) public returns (bool) {\n    allowed[msg.sender][_spender] = _amount;\n    Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public constant returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  function mintToken(uint256 _mintedAmount) public onlyOwner {\n    balances[Ownable.owner] = balances[Ownable.owner].add(_mintedAmount);\n    totalSupply = totalSupply.add(_mintedAmount);\n    Mint(Ownable.owner, _mintedAmount);\n  }\n\n  //For refund only\n  function burnToken(address _burner, uint256 _value) public onlyOwner {\n    require(_value > 0);\n    require(_value <= balances[_burner]);\n\n    balances[_burner] = balances[_burner].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    Burn(_burner, _value);\n  }\n\n\n}\n\n\ncontract Crowdsale is Ownable {\n\n  using SafeMath for uint256;\n\n  // The token being sold\n  GMPToken public token;\n\n  // Flag setting that investments are allowed (both inclusive)\n  bool public saleIsActive;\n\n  // address where funds are collected\n  address public wallet;\n\n  // Number of tokents for 1 ETH, i.e. 683 tokens for 1 ETH\n  uint256 public rate;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  /* -----------   A D M I N        F U N C T I O N S    ----------- */\n\n  function Crowdsale(uint256 _initialRate, address _targetWallet) public {\n\n    //Checks\n    require(_initialRate > 0);\n    require(_targetWallet != 0x0);\n\n    //Init\n    token = new GMPToken();\n    rate = _initialRate;\n    wallet = _targetWallet;\n    saleIsActive = true;\n\n  }\n\n  function close() public onlyOwner {\n    selfdestruct(owner);\n  }\n\n  //Transfer token to\n  function transferToAddress(address _targetWallet, uint256 _tokenAmount) public onlyOwner {\n    token.transfer(_targetWallet, _tokenAmount * 1 ether);\n  }\n\n\n  //Setters\n  function enableSale() public onlyOwner {\n    saleIsActive = true;\n  }\n\n  function disableSale() public onlyOwner {\n    saleIsActive = false;\n  }\n\n  function setRate(uint256 _newRate) public onlyOwner {\n    rate = _newRate;\n  }\n\n  //Mint new tokens\n  function mintToken(uint256 _mintedAmount) public onlyOwner {\n    token.mintToken(_mintedAmount);\n  }\n\n\n\n  /* -----------   P U B L I C      C A L L B A C K       F U N C T I O N     ----------- */\n\n  function () public payable {\n\n    require(msg.sender != 0x0);\n    require(saleIsActive);\n    require(msg.value >= 0.01 * 1 ether);\n\n    uint256 weiAmount = msg.value;\n\n    //Update total wei counter\n    weiRaised = weiRaised.add(weiAmount);\n\n    //Calc number of tokents\n    uint256 tokenAmount = weiAmount.mul(rate);\n\n    //Forward wei to wallet account\n    wallet.transfer(weiAmount);\n\n    //Transfer token to sender\n    token.transfer(msg.sender, tokenAmount);\n    TokenPurchase(msg.sender, wallet, weiAmount, tokenAmount);\n\n  }\n\n\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a03199091168117825581526002602052604090206ab5facfe5b81c365c000000908190556001556108c68061005a6000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101aa57806323b872dd146101cf57806327e235e3146101f7578063313ce56714610216578063378dc3dc146102295780635c6581651461023c57806370a08231146102615780638da5cb5b1461028057806395d89b41146102af578063a9059cbb146102c2578063c634d032146102e4578063d1df306c146102fc578063dd62ed3e1461031e578063f2fde38b14610343575b600080fd5b34156100f557600080fd5b6100fd610362565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610139578082015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017f57600080fd5b610196600160a060020a0360043516602435610399565b604051901515815260200160405180910390f35b34156101b557600080fd5b6101bd610405565b60405190815260200160405180910390f35b34156101da57600080fd5b610196600160a060020a036004358116906024351660443561040b565b341561020257600080fd5b6101bd600160a060020a03600435166104b3565b341561022157600080fd5b6101bd6104c5565b341561023457600080fd5b6101bd6104ca565b341561024757600080fd5b6101bd600160a060020a03600435811690602435166104d9565b341561026c57600080fd5b6101bd600160a060020a03600435166104f6565b341561028b57600080fd5b610293610511565b604051600160a060020a03909116815260200160405180910390f35b34156102ba57600080fd5b6100fd610520565b34156102cd57600080fd5b610196600160a060020a0360043516602435610557565b34156102ef57600080fd5b6102fa60043561056d565b005b341561030757600080fd5b6102fa600160a060020a0360043516602435610622565b341561032957600080fd5b6101bd600160a060020a0360043581169060243516610708565b341561034e57600080fd5b6102fa600160a060020a0360043516610733565b60408051908101604052600881527f474d5020436f696e000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015490565b600160a060020a0380841660009081526003602090815260408083203390941683529290529081205482111561044057600080fd5b600160a060020a0380851660009081526003602090815260408083203390941683529290522054610477908363ffffffff61077d16565b600160a060020a03808616600090815260036020908152604080832033909416835292905220556104a984848461078f565b5060019392505050565b60026020526000908152604090205481565b601281565b6ab5facfe5b81c365c00000081565b600360209081526000928352604080842090915290825290205481565b600160a060020a031660009081526002602052604090205490565b600054600160a060020a031681565b60408051908101604052600381527f474d500000000000000000000000000000000000000000000000000000000000602082015281565b600061056433848461078f565b50600192915050565b60005433600160a060020a0390811691161461058857600080fd5b60008054600160a060020a03168152600260205260409020546105b1908263ffffffff61088416565b60008054600160a060020a03168152600260205260409020556001546105dd908263ffffffff61088416565b600155600054600160a060020a03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858260405190815260200160405180910390a250565b60005433600160a060020a0390811691161461063d57600080fd5b6000811161064a57600080fd5b600160a060020a03821660009081526002602052604090205481111561066f57600080fd5b600160a060020a038216600090815260026020526040902054610698908263ffffffff61077d16565b600160a060020a0383166000908152600260205260409020556001546106c4908263ffffffff61077d16565b600155600160a060020a0382167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405190815260200160405180910390a25050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60005433600160a060020a0390811691161461074e57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561078957fe5b50900390565b600160a060020a03821615156107a457600080fd5b600160a060020a038316600090815260026020526040902054819010156107ca57600080fd5b600160a060020a0383166000908152600260205260409020546107f3908263ffffffff61077d16565b600160a060020a038085166000908152600260205260408082209390935590841681522054610828908263ffffffff61088416565b600160a060020a03808416600081815260026020526040908190209390935591908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a3505050565b60008282018381101561089357fe5b93925050505600a165627a7a7230582082ab05fed9360702d9dc5d3d708a7e263e3082d278855dc699dc7763e7f4842e0029"
}