{
  "address": "0xf1104fde01f73e397eedb8979aac2332c890cee8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SHLTSheltercoinToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-07\n*/\n\npragma solidity ^0.4.24;\n\n\n/* ----------------------------------------------------------------------------\n| Sheltercoin ICO 'Sheltercoin Token' Crowdfunding contract\n| Date - 16-November-2017\n| Blockchain Date - Dec 4 2018\n| copyright 2017 zMint Limited. All Rights Reserved.\n| authors A Campbell, S Outtrim\n| Vers - 000 v001\n| ------------------------\n| Updates \n| Date 25-Aug-17 ADC Finalising format\n| Date 27-Aug-17 ADC Code review amendments\n| Date 01-Sep-17 ADC Changes \n| Date 16-Nov-17 ADC Sheltercoin Pre-ICO phase\n| Date 27-Nov-17 ADC Pragma 17 Changes\n| Date 12-Dec-17 SO, ADC Code Review, testing; production migration.\n| Date 01-May-18 ADC Code changes\n| Date 12-May-18 ADC KYC Client Verication \n| Date 29-May-18 SO, ADC Code Revew, testing\n| Date 11-Jun-18 SO  hard coding, testing, production migration. \n|                    Removed TransferAnyERC20Token, KYC contract shell\n|                    Added whitelist and blacklist code\n|                    Added bonus calc to ICO function\n| Date 08-Aug-18 SO  Updated function to constructor()\n|                    Added SHLT specific function to SHLT code, replaced names\n| Date 07-Feb-19 SO  Production deployment of new SHLT token\n|                    \n| \n| Sheltercoin.io :-)\n| :-) hAVe aN aWeSoMe iCo :-) \n|\n// ---------------------------------------------------------------------------- */\n\n\n/* =============================================================================\n| Sheltercoin ICO 'Sheltercoin Token & Crowdfunding \n|\n| 001. contract - ERC20 Token Interface\n|\n|\n|\n| Apache Licence\n| ============================================================================= */\n\n\n/* ============================================================================\n|\n| Token Standard #20 Interface\n| https://github.com/ethereum/EIPs/issues/20\n| \n| ============================================================================ */\n\n\ncontract ERC20Interface {\n    uint public totalSupply;\n    uint public tokensSold;\n    function balanceOf(address _owner) public constant returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) \n        public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public constant \n        returns (uint remaining);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, \n        uint _value);\n}\n\n\n\n/* ======================================================================\n|\n| 002. contract Owned \n| \n| ====================================================================== */\n\ncontract Owned {\n\n    /* ------------------------------------------------------------------------\n    | 002.01 - Current owner, and proposed new owner\n    | -----------------------------------------------------------------------*/\n    address public owner;\n    address public newOwner;\n\n    // ------------------------------------------------------------------------\n    // 002.02 - Constructor - assign creator as the owner\n    // -----------------------------------------------------------------------*/\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    /* ------------------------------------------------------------------------\n    | 002.03 - Modifier to mark that a function can only be executed by the owner\n    | -----------------------------------------------------------------------*/\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /* ------------------------------------------------------------------------\n    | 002.04 - Owner can initiate transfer of contract to a new owner\n    | -----------------------------------------------------------------------*/\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n\n \n    /* ------------------------------------------------------------------------\n    | 002.05 - New owner has to accept transfer of contract\n    | -----------------------------------------------------------------------*/\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n}\n\n/* ===================================================================================\n|\n| 003. contract Pausable\n|      Abstract contract that allows children to implement an emergency stop mechanism\n| \n| ==================================================================================== */\n\ncontract Pausable is Owned {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n    /* ------------------------------------------------------------------------\n    | 003.01 - modifier to allow actions only when the contract IS paused\n    | -----------------------------------------------------------------------*/\n   modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n   \n   /* ------------------------------------------------------------------------\n    | 003.02 - modifier to allow actions only when the contract IS NOT paused\n    | -----------------------------------------------------------------------*/\n  modifier whenPaused {\n    require(paused);\n    _;\n  }\n   \n   /* ------------------------------------------------------------------------\n    | 003.01 - called by the owner to pause, triggers stopped state\n    | -----------------------------------------------------------------------*/\n  function pause() public onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    emit Pause();\n    return true;\n  }\n   \n   /* ------------------------------------------------------------------------\n    | 003.01 - called by the owner to unpause, returns to normal state\n    | -----------------------------------------------------------------------*/\n   function unpause() public onlyOwner whenPaused returns (bool) {\n    paused = false;\n    emit Unpause();\n    return true;\n  }\n}\n\n/* ===================================================================================\n|\n| 004. contract Transferable\n|      Abstract contract that allows wallets the transfer mechanism\n| \n| ==================================================================================== */\n\ncontract Transferable is Owned {\n  event Transfer();\n  event Untransfer();\n\n  bool public flg_transfer = true;\n    /* ------------------------------------------------------------------------\n    | 004.01 - modifier to allow actions only when the contract IS transfer\n    | -----------------------------------------------------------------------*/\n   modifier whenNotTransfer() {\n    require(!flg_transfer);\n    _;\n  }\n   \n   /* ------------------------------------------------------------------------\n    | 004.02 - modifier to allow actions only when the contract IS NOT transfer\n    | -----------------------------------------------------------------------*/\n  modifier whenTransfer {\n    require(flg_transfer);\n    _;\n  }\n   \n   /* ------------------------------------------------------------------------\n    | 004.01 - called by the owner to transfer, triggers stopped state\n    | -----------------------------------------------------------------------*/\n  function transfer() public onlyOwner whenNotTransfer returns (bool) {\n    flg_transfer = true;\n    emit Transfer();\n    return true;\n  }\n   \n   /* ------------------------------------------------------------------------\n    | 004.01 - called by the owner to untransfer, returns to normal state\n    | -----------------------------------------------------------------------*/\n   function untransfer() public onlyOwner whenTransfer returns (bool) {\n    flg_transfer = false;\n    emit Untransfer();\n    return true;\n  }\n}\n\n\n\n/* ----------------------------------------------------------------------------\n| 005. libraty Safe maths - OpenZeppelin\n| --------------------------------------------------------------------------- */\nlibrary SafeMath {\n\n    /* ------------------------------------------------------------------------\n    // 005.01 - safeAdd a number to another number, checking for overflows\n    // -----------------------------------------------------------------------*/\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n\n    /* ------------------------------------------------------------------------\n    // 005.02 - safeSubtract a number from another number, checking for underflows\n    // -----------------------------------------------------------------------*/\n    function safeSub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n    /* ------------------------------------------------------------------------\n    // 005.03 - safeMuiltplier a number to another number, checking for underflows\n    // -----------------------------------------------------------------------*/\n    function safeMul(uint a, uint b) internal pure returns (uint256) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    /* ------------------------------------------------------------------------\n    // 005.04 - safeDivision \n    // -----------------------------------------------------------------------*/\n    function safeDiv(uint a, uint b) internal pure returns (uint256) {\n        uint c = a / b;\n        return c;\n    }\n    /* ------------------------------------------------------------------------\n    // 005.05 - Max64\n    // -----------------------------------------------------------------------*/\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n    /* ------------------------------------------------------------------------\n    // 005.06 - Min64\n    // -----------------------------------------------------------------------*/\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n    /* ------------------------------------------------------------------------\n    // 005.07 - max256\n    // -----------------------------------------------------------------------*/\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n    /* ------------------------------------------------------------------------\n    // 005.08 - min256\n    // -----------------------------------------------------------------------*/\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n/* ----------------------------------------------------------------------------\n| 006. contract Sheltercoin Token Configuration - pass through parameters\n| ---------------------------------------------------------------------------- */\n\ncontract SheltercoinTokCfg {\n\n    /* ------------------------------------------------------------------------\n    | 006.01 - Token symbol(), name() and decimals()\n    |------------------------------------------------------------------------ */\n    string public constant SYMBOL = \"SHLT\";\n    string public constant NAME = \"SHLT Sheltercoin.io\";\n    uint8 public constant DECIMALS = 8;\n    bool public flg001 = false;\n    \n\n\n\n    /* -----------------------------------------------------------------------\n    | 006.02 - Decimal factor for multiplications \n    | ------------------------------------------------------------------------*/\n    uint public constant TOKENS_SOFT_CAP = 1 * DECIMALSFACTOR;\n    uint public constant TOKENS_HARD_CAP = 1000000000 * DECIMALSFACTOR; /* billion */\n    uint public constant TOKENS_TOTAL = 1000000000 * DECIMALSFACTOR;\n    uint public tokensSold = 0;\n\n\n    /* ------------------------------------------------------------------------\n    | 006.03 - Lot 1 Crowdsale start date and end date\n    | Do not use the `now` function here\n    | Good caluclator for sanity check for epoch - http://www.unixtimestamp.com/\n    | Start - Sunday 30-Jun-19 12:00:00 UTC \n    | End - Tuesday 30-Jun-20  12:00:00 UTC \n    | ----------------------------------------------------------------------- */\n    uint public constant DECIMALSFACTOR = 10**uint(DECIMALS);\n\n    /* ------------------------------------------------------------------------\n    | 006.04 - Lot 1 Crowdsale timings Soft Cap and Hard Cap, and Total tokens\n    | -------------------------------------------------------------------------- */\n    uint public START_DATE = 1582545600;  // 24-Feb-20 12:00:00 GMT\n    uint public END_DATE = 1614165071;    // 24-Feb-21 11:11:11 GMT\n\n    /* ------------------------------------------------------------------------\n    | 006.05 - Individual transaction contribution min and max amounts\n    | Set to 0 to switch off, or `x ether`\n    | ----------------------------------------------------------------------*/\n    uint public CONTRIBUTIONS_MIN = 0;\n    uint public CONTRIBUTIONS_MAX = 1000000 ether;\n}\n\n\n\n/* ----------------------------------------------------------------------------\n| 007. - contract ERC20 Token, with the safeAddition of Symbol, name and Decimal\n| --------------------------------------------------------------------------*/\ncontract ERC20Token is ERC20Interface, Owned, Pausable, Transferable {\n    using SafeMath for uint;\n\n    /* ------------------------------------------------------------------------\n    | 007.01 - Symbol(), Name() and Decimals()\n    | ----------------------------------------------------------------------*/\n    string public symbol;\n    string public name;\n    uint8 public decimals;\n\n    /* ------------------------------------------------------------------------\n    | 007.02 - Balances for each account\n    | ----------------------------------------------------------------------*/\n    mapping(address => uint) balances;\n\n    /*------------------------------------------------------------------------\n    | 007.03 - Owner of account approves the transfer of an amount to another account\n    | ----------------------------------------------------------------------*/\n    mapping(address => mapping (address => uint)) allowed;\n\n\n    /* ------------------------------------------------------------------------\n    | 007.04 - Constructor\n    | ----------------------------------------------------------------------*/\n    constructor (\n        string _symbol, \n        string _name, \n        uint8 _decimals, \n        uint _tokensSold\n    ) Owned() public {\n        symbol = _symbol;\n        name = _name;\n        decimals = _decimals;\n        tokensSold = _tokensSold;\n        balances[owner] = _tokensSold;\n    }\n\n\n    /* ------------------------------------------------------------------------\n    | 007.05 -Get the account balance of another account with address _owner\n    | ----------------------------------------------------------------------*/\n    function balanceOf(address _owner) public constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n\n    /* ------------------------------------------------------------------------\n    | 007.06 - Transfer the balance from owner's account to another account\n    | ----------------------------------------------------------------------*/\n    function transfer(address _to, uint _amount) public returns (bool success) {\n        if (balances[msg.sender] >= _amount             // User has balance\n            && _amount > 0                              // Non-zero transfer\n            && balances[_to] + _amount > balances[_to]  // Overflow check\n        ) {\n            balances[msg.sender] = balances[msg.sender].safeSub(_amount);\n            balances[_to] = balances[_to].safeAdd(_amount);\n            emit Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n    /* ------------------------------------------------------------------------\n    | 007.07 - Allow _spender to withdraw from your Account, multiple times, up to the\n    |          _value amount. If this function is called again it overwrites the\n    |          current allowance with _value.\n    | ----------------------------------------------------------------------*/\n    function approve(\n        address _spender,\n        uint _amount\n    ) public returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n\n    /* ------------------------------------------------------------------------\n    | 007.08 - Spender of tokens transfer an amount of tokens from the token owner's\n    |          balance to another account. The owner of the tokens must already\n    |          have approved this transfer\n    | ----------------------------------------------------------------------*/\n    function transferFrom(\n        address _from,\n        address _to,\n        uint _amount\n    ) public returns (bool success) {\n        if (balances[_from] >= _amount                  // _from a/c has a balance\n            && allowed[_from][msg.sender] >= _amount    // Transfer allowed\n            && _amount > 0                              // Non-zero transfer\n            && balances[_to] + _amount > balances[_to]  // Overflow check\n        ) {\n            balances[_from] = balances[_from].safeSub(_amount);\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].safeSub(_amount);\n            balances[_to] = balances[_to].safeAdd(_amount);\n            emit Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n    /* ------------------------------------------------------------------------\n    | 007.09 - Returns the amount of tokens approved by the owner that can be\n    |          transferred to the spender's account\n    | ----------------------------------------------------------------------*/\n    function allowance(\n        address _owner, \n        address _spender\n    ) public constant returns (uint remaining) \n    {\n        return allowed[_owner][_spender];\n    }\n}\n\n\n/* ----------------------------------------------------------------------------\n| 008. contract SheltercoinToken - Sheltercoin ICO Crowdsale\n| --------------------------------------------------------------------------*/\ncontract SHLTSheltercoinToken is ERC20Token, SheltercoinTokCfg {\n\n    /* ------------------------------------------------------------------------\n    | 007.01 - Has the crowdsale been finalised?\n    | ----------------------------------------------------------------------*/\n    bool public finalised = false;\n    \n    /* ------------------------------------------------------------------------\n    | 007.02 - Number of Tokens per 1 ETH\n    |          This can be adjusted as the ETH/USD rate changes\n    |          \n    | 007.03 SO \n               Price per ETH $105.63 Feb 7 2019 coinmarketcap\n               1 ETH = 2000 SHLT\n               1 SHLT = 0.0005 ETH\n               USD 5c \n               1 billion SHLT = total hard cap \n    |\n    |          tokensPerEther  = 2000\n    |          tokensPerKEther = 2000000\n    |          \n\n    /* ----------------------------------------------------------------------*/\n    uint public tokensPerEther = 2000;    \n    uint public tokensPerKEther = 2000000;  \n    uint public etherSold = 0;\n    uint public weiSold = 0;\n    uint public tokens = 0;\n    uint public dspTokens = 0;\n    uint public dspTokensSold = 0;\n    uint public dspEther = 0;\n    uint public dspEtherSold = 0;\n    uint public dspWeiSold = 0;\n    uint public BONUS_VALUE = 0;\n    uint public bonusTokens = 0;\n\n// Emergency Disaster Relief \n    string public SCE_Shelter_ID;\n    string public SCE_Shelter_Desc;\n  //  string public SCE_Emergency_ID;\n    string public SCE_Emergency_Type;\n// string public SCE_UN_Body;\n    string public SCE_UN_Programme_ID;\n    string public SCE_Country;\n    string public SCE_Region; \n //   string public SCE_Area;\n    uint public SCE_START_DATE;\n    uint public SCE_END_DATE; \n    \n    /* ------------------------------------------------------------------------\n    | 007.04 - Wallet receiving the raised funds \n    |        - The ICO Contract address \n    | ----------------------------------------------------------------------*/\n    address public wallet;\n    address public tokenContractAdr;\n    /* ------------------------------------------------------------------------\n    | 007.05 - Crowdsale participant's accounts need to be client verified client before\n    |          the participant can move their tokens\n    | ----------------------------------------------------------------------*/\n    mapping(address => bool) public Whitelisted;\n    mapping(address => bool) public Blacklisted;\n\n    modifier isWhitelisted() {\n        require(Whitelisted[msg.sender] == true);\n        _;\n      }\n    \n    modifier isBlacklisted() {\n        require(Blacklisted[msg.sender] == true);\n        _;\n\n\n      }\n   \n    /* ------------------------------------------------------------------------\n    | 007.06 - Constructor\n    | ----------------------------------------------------------------------*/\n    constructor (address _wallet) \n       public ERC20Token(SYMBOL, NAME, DECIMALS, 0)\n    {\n        wallet = _wallet;\n        flg001 = true ;   \n\n    }\n\n    /* ------------------------------------------------------------------------\n    | 007.07 - Sheltercoin Owner can change the Crowdsale wallet address\n    |          Can be set at any time before or during the Crowdsale\n    |          Not relevant after the crowdsale is finalised as no more contributions\n    |          are accepted\n    | ----------------------------------------------------------------------*/\n    function setWallet(address _wallet) public onlyOwner {\n        wallet = _wallet;\n        emit WalletUpdated(wallet);\n    }\n    event WalletUpdated(address newWallet);\n\n\n    /* ------------------------------------------------------------------------\n    | 007.08 - Sheltercoin Owner can set number of tokens per 1 x  ETH\n    |          Can only be set before the start of the Crowdsale\n    | ----------------------------------------------------------------------*/\n    function settokensPerKEther(uint _tokensPerKEther) public onlyOwner {\n        require(now < START_DATE);\n        require(_tokensPerKEther > 0);\n        tokensPerKEther = _tokensPerKEther;\n        emit tokensPerKEtherUpdated(tokensPerKEther);\n    }\n    event tokensPerKEtherUpdated(uint _tokPerKEther);\n\n\n    /* ------------------------------------------------------------------------\n    | 007.09 - Accept Ethers to buy Tokens during the Crowdsale\n    | ----------------------------------------------------------------------*/\n    function () public payable {\n        ICOContribution(msg.sender);\n    }\n\n\n    /* ------------------------------------------------------------------------\n    | 007.10 - Accept Ethers from one account for tokens to be created for another\n    |          account. Can be used by Exchanges to purchase Tokens on behalf of \n    |          it's Customers\n    | ----------------------------------------------------------------------*/\n    function ICOContribution(address participant) public payable {\n        // No contributions after the crowdsale is finalised\n        require(!finalised);\n        // Not paused\n        require(!paused);\n        // No contributions before the start of the crowdsale\n        require(now >= START_DATE);\n        // No contributions after the end of the crowdsale\n        require(now <= END_DATE);\n        // No contributions below the minimum (can be 0 ETH)\n        require(msg.value >= CONTRIBUTIONS_MIN);\n        // No contributions above a maximum (if maximum is set to non-0)\n        require(CONTRIBUTIONS_MAX == 0 || msg.value < CONTRIBUTIONS_MAX);\n\n        // client verification required before participant can transfer the tokens\n        require(Whitelisted[msg.sender]);\n        require(!Blacklisted[msg.sender]);\n\n        // Transfer the contributed ethers to the Crowdsale wallet\n        require(wallet.send(msg.value)); \n\n        // Calculate number of Tokens for contributed ETH\n        // `18` is the ETH decimals\n        // `- decimals` is the token decimals\n        // `+ 3` for the tokens per 1,000 ETH factor\n        tokens = msg.value * tokensPerKEther / 10**uint(18 - decimals + 3);\n\n        /* create variable bonusTokens. This is the purchase amount adjusted by\n           any bonus. The SetBonus function is onlyOwner\n           Bonus is expressed in %, eg 50 = 50%\n           */\n        bonusTokens = msg.value.safeMul(BONUS_VALUE + 100);\n\n        bonusTokens = bonusTokens.safeDiv(100);\n \n        tokens = bonusTokens;\n\n        dspTokens = tokens * tokensPerKEther / 10**uint(18 - decimals + 6);\n        dspEther = tokens / 10**uint(18);  \n        // Check if the Hard Cap will be exceeded\n       require(totalSupply + tokens <= TOKENS_HARD_CAP);\n       require(tokensSold + tokens <= TOKENS_HARD_CAP);\n        // Crowdsale Address\n         tokenContractAdr = this;\n        // safeAdd tokens purchased to Account's balance and TokensSold\n        balances[participant] = balances[participant].safeAdd(tokens);\n        tokensSold = tokensSold.safeAdd(tokens);\n        etherSold = etherSold.safeAdd(dspEther);\n        weiSold = weiSold + tokenContractAdr.balance;\n        //weiSold = weiSold + this.balance;\n        // Event Display Totals \n        dspTokensSold = dspTokensSold.safeAdd(dspTokens);\n        dspEtherSold = dspEtherSold.safeAdd(dspEther);\n        dspWeiSold = dspWeiSold + tokenContractAdr.balance;\n       //dspWeiSold = dspWeiSold + this.balance;\n\n  \n         // Transfer Tokens &  Log the tokens purchased \n        emit Transfer(tokenContractAdr, participant, tokens);\n        emit TokensBought(participant,bonusTokens, dspWeiSold, dspEther, dspEtherSold, dspTokens, dspTokensSold, tokensPerEther);\n\n        \n     \n    }\n    event TokensBought(address indexed buyer, uint newWei, \n        uint newWeiBalance, uint newEther, uint EtherTotal, uint _toks, uint newTokenTotal, \n        uint _toksPerEther);\n\n\n    /* ------------------------------------------------------------------------\n    |  007.11 - SheltercoinOwner to finalise the Crowdsale \n    |           \n    | ----------------------------------------------------------------------*/\n    function finalise() public onlyOwner {\n        // Can only finalise if raised > soft cap or after the end date\n        require(tokensSold >= TOKENS_SOFT_CAP || now > END_DATE);\n       // Can only finalise once\n        require(!finalised);\n          // Crowdsale Address\n         tokenContractAdr = this;    \n        // Write out the total\n        emit TokensBought(tokenContractAdr, 0, dspWeiSold, dspEther, dspEtherSold, dspTokens, dspTokensSold, tokensPerEther);\n        // Can only finalise once\n        finalised = true;\n    }\n\n\n    /* ------------------------------------------------------------------------\n    | 007.12 - Sheltercoin Owner to safeAdd Pre-sales funding token balance before the Crowdsale\n    |          commences\n    | ----------------------------------------------------------------------*/\n    function ICOAddPrecommitment(address participant, uint balance) public onlyOwner {\n         // Not paused\n        require(!paused);\n        // No contributions after the start of the crowdsale\n        // Allowing off chain contributions during the Crowdsale\n        // Allowing contributions after the end of the crowdsale\n        // Off Chain SHLT Balance to Transfer \n        require(balance > 0);\n        //Address field is completed\n        require(address(participant) != 0x0);\n        // safeAdd tokens purchased to Account's balance and TokensSold\n        tokenContractAdr = this;\n        balances[participant] = balances[participant].safeAdd(balance);\n        tokensSold = tokensSold.safeAdd(balance);\n        emit Transfer(tokenContractAdr, participant, balance);\n    }\n    event ICOcommitmentAdded(address indexed participant, uint balance, uint tokensSold );\n\n    /* ------------------------------------------------------------------------\n    | 007.12a - Sheltercoin Owner to Change ICO Start Date or ICO End Date\n    |          commences\n    | ----------------------------------------------------------------------*/\n    function ICOdt(uint START_DATE_NEW, uint END_DATE_NEW ) public onlyOwner {\n        // No contributions after the crowdsale is finalised\n        require(!finalised);\n        // Not paused\n        require(!paused);\n        //  Allowed to change any time \n        // No 0 \n        require(START_DATE_NEW > 0);\n        require(END_DATE_NEW > 0);\n        tokenContractAdr = this;\n        START_DATE = START_DATE_NEW;\n        END_DATE = END_DATE_NEW;\n        emit ICOdate(START_DATE, END_DATE);\n     }\n    event ICOdate(uint ST_DT, uint END_DT);\n\n    /* ----------------------------------------------------------------------\n    | 007.13 - Transfer the Balance from Owner's account to another account, with client\n    |          verification check for the crowdsale participant's first transfer\n    | ----------------------------------------------------------------------*/\n    function transfer(address _to, uint _amount) public returns (bool success) {\n        // Cannot transfer before crowdsale ends\n        // require(finalised);\n        //  require(flg002transfer);\n        // Cannot transfer if Client verification is required\n        //require(!clientRequired[msg.sender]);\n        // Standard transfer\n        return super.transfer(_to, _amount);\n    }\n\n\n    /* ------------------------------------------------------------------------\n    | 007.14 - Spender of tokens transfer an amount of tokens from the token Owner's\n    |          balance to another account, with Client verification check for the\n    |          Crowdsale participant's first transfer\n    | ----------------------------------------------------------------------*/\n    function transferFrom(address _from, address _to, uint _amount) \n        public returns (bool success)\n    {\n        // Cannot transfer before crowdsale ends\n        // require(flg002transfer);\n        // Cannot transfer if Client verification is required\n        //require(!clientRequired[_from]);\n        // Standard transferFrom\n        return super.transferFrom(_from, _to, _amount);\n    }\n\n\n /* ------------------------------------------------------------------------\n    | 007.16 - Any account can burn _from's tokens as long as the _from account has \n    |          approved the _amount to be burnt using\n    |          approve(0x0, _amount)\n    | ----------------------------------------------------------------------*/\n    function mintFrom(\n        address _from,\n        uint _amount\n    ) public returns (bool success) {\n        if (balances[_from] >= _amount                  // From a/c has balance\n            && allowed[_from][0x0] >= _amount           // Transfer approved\n            && _amount > 0                              // Non-zero transfer\n            && balances[0x0] + _amount > balances[0x0]  // Overflow check\n        ) {\n            balances[_from] = balances[_from].safeSub(_amount);\n            allowed[_from][0x0] = allowed[_from][0x0].safeSub(_amount);\n            balances[0x0] = balances[0x0].safeAdd(_amount);\n            tokensSold = tokensSold.safeSub(_amount);\n            emit Transfer(_from, 0x0, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    \n \n     }  \n    \n\n/* ------------------------------------------------------------------------\n    | 007.17 - Set bonus percentage multiplier. 50% = * 1.5\n    | ----------------------------------------------------------------------*/\n    function setBonus(uint _bonus) public onlyOwner\n\n        returns (bool success) {\n        require (!finalised);\n        if (_bonus >= 0)               // From a/c is owner\n          {\n            BONUS_VALUE = _bonus;\n            return true;\n        } else {\n            return false;\n        }\n          emit BonusSet(_bonus);\n        }\n    event BonusSet(uint _bonus);\n\n    /* ------------------------------------------------------------------------\n    |  007.15 - SheltercoinOwner to Client verify the participant's account\n    |  ----------------------------------------------------------------------*/\n   \n   \n    function AddToWhitelist(address participant) public onlyOwner {\n        Whitelisted[participant] = true;\n        emit AddedToWhitelist(participant);\n    }\n    event AddedToWhitelist(address indexed participant);\n\n    function IsWhitelisted(address participant) \n        public view returns (bool) {\n      return bool(Whitelisted[participant]);\n    }\n    \n    function RemoveFromWhitelist(address participant) public onlyOwner {\n        Whitelisted[participant] = false;\n        emit RemovedFromWhitelist(participant);\n    }\n    event RemovedFromWhitelist(address indexed participant);\n\n    function AddToBlacklist(address participant) public onlyOwner {\n        Blacklisted[participant] = true;\n        emit AddedToBlacklist(participant);\n    }\n    event AddedToBlacklist(address indexed participant);\n\n    function IsBlacklisted(address participant) \n        public view returns (bool) {\n      return bool(Blacklisted[participant]);\n    }\n    function RemoveFromBlackList(address participant) public onlyOwner {\n        Blacklisted[participant] = false;\n        emit RemovedFromBlacklist(participant);\n    }\n    event RemovedFromBlacklist(address indexed participant);\n\n    function SCEmergency(string _Shelter_ID, string _Shelter_Description, string _Emergency_Type, string _UN_Programme_ID, string _Country, string _Region, uint START_DATE_SCE, uint END_DATE_SCE ) public onlyOwner {\n \n        // Disaster Occur's\n        finalised = true;\n        require(finalised);\n        // Not paused\n        //require(!paused);\n        // No 0 \n         require(START_DATE_SCE > 0);\n        // Write to the blockchain \n        tokenContractAdr = this;\n        SCE_Shelter_ID = _Shelter_ID;\n        SCE_Shelter_Desc = _Shelter_Description;\n        SCE_Emergency_Type = _Emergency_Type;\n        SCE_UN_Programme_ID = _UN_Programme_ID;\n        SCE_Country = _Country;\n        SCE_Region = _Region; \n        SCE_START_DATE = START_DATE_SCE;\n        SCE_END_DATE = END_DATE_SCE; \n        emit SC_Emergency(SCE_Shelter_ID, SCE_Shelter_Desc, SCE_Emergency_Type, SCE_UN_Programme_ID, SCE_Country, SCE_Region, SCE_START_DATE, SCE_END_DATE );\n       \n    }\n    event SC_Emergency(string _str_Shelter_ID, string _str_Shelter_Descrip, string _str_Emergency_Type, string _str_UN_Prog_ID, string _str_Country, string _str_Region, uint SC_ST_DT, uint SC_END_DT);\n    \n\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000964b25eb217eb84896ff86d4145a872749f29edd"
}