{
  "address": "0x5d075d568621f868a6a6148cb925f883fedc236a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BitcoinBrand",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-08\n*/\n\npragma solidity ^0.4.19;\n\ncontract BaseToken {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n        Transfer(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n}\n\ncontract AirdropToken is BaseToken {\n    uint256 public airAmount;\n    uint256 public airBegintime;\n    uint256 public airEndtime;\n    address public airSender;\n    uint32 public airLimitCount;\n\n    mapping (address => uint32) public airCountOf;\n\n    event Airdrop(address indexed from, uint32 indexed count, uint256 tokenValue);\n\n    function airdrop() public payable {\n        require(now >= airBegintime && now <= airEndtime);\n        require(msg.value == 0);\n        if (airLimitCount > 0 && airCountOf[msg.sender] >= airLimitCount) {\n            revert();\n        }\n        _transfer(airSender, msg.sender, airAmount);\n        airCountOf[msg.sender] += 1;\n        Airdrop(msg.sender, airCountOf[msg.sender], airAmount);\n    }\n}\n\ncontract ICOToken is BaseToken {\n    // 1 ether = icoRatio token\n    uint256 public icoRatio;\n    uint256 public icoBegintime;\n    uint256 public icoEndtime;\n    address public icoSender;\n    address public icoHolder;\n\n    event ICO(address indexed from, uint256 indexed value, uint256 tokenValue);\n    event Withdraw(address indexed from, address indexed holder, uint256 value);\n\n    function ico() public payable {\n        require(now >= icoBegintime && now <= icoEndtime);\n        uint256 tokenValue = (msg.value * icoRatio * 10 ** uint256(decimals)) / (1 ether / 1 wei);\n        if (tokenValue == 0 || balanceOf[icoSender] < tokenValue) {\n            revert();\n        }\n        _transfer(icoSender, msg.sender, tokenValue);\n        ICO(msg.sender, msg.value, tokenValue);\n    }\n\n    function withdraw() public {\n        uint256 balance = this.balance;\n        icoHolder.transfer(balance);\n        Withdraw(msg.sender, icoHolder, balance);\n    }\n}\n\ncontract BitcoinBrand is BaseToken, AirdropToken, ICOToken {\n    function BitcoinBrand() public {\n        totalSupply = 30000000000000000000000000000;\n        name = 'BitcoinBrand';\n        symbol = 'BTCB';\n        decimals = 18;\n        balanceOf[0x9Bd035a9C7d627a0150a4154F9D891E2eb7452b5] = totalSupply;\n        Transfer(address(0), 0x9Bd035a9C7d627a0150a4154F9D891E2eb7452b5, totalSupply);\n\n        airAmount = 1000000000000000000;\n        airBegintime = 1529956800;\n        airEndtime = 1529957100;\n        airSender = 0xc4e570D2644CCe3a71DC4345b13EE5FD3aF720d1;\n        airLimitCount = 1;\n\n        icoRatio = 20000000;\n        icoBegintime = 1529971200;\n        icoEndtime = 1535327940;\n        icoSender = 0xf46D665966674a8793aEd3109cCC65B2f638cF09;\n        icoHolder = 0xf46D665966674a8793aEd3109cCC65B2f638cF09;\n    }\n\n    function() public payable {\n        if (msg.value == 0) {\n            airdrop();\n        } else {\n            ico();\n        }\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506b60ef6b1aba6f07233000000060035560408051808201909152600c8082527f426974636f696e4272616e6400000000000000000000000000000000000000006020909201918252610065916000916101e7565b506040805180820190915260048082527f425443420000000000000000000000000000000000000000000000000000000060209092019182526100aa916001916101e7565b506002805460ff19166012179055600354739bd035a9c7d627a0150a4154f9d891e2eb7452b56000818152600460209081527f0d4b2fc9c726aff3387ce590c10ac9f42b226976e1d792f2df2c5dedeadb7a348490556040805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3670de0b6b3a7640000600655635b3149c0600755635b314aec6008556009805460a060020a63ffffffff0219600160a060020a031991821673c4e570d2644cce3a71dc4345b13ee5fd3af720d1171674010000000000000000000000000000000000000000179091556301312d00600b55635b318200600c55635b833ec4600d55600e8054821673f46d665966674a8793aed3109ccc65b2f638cf09908117909155600f8054909216179055610282565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061022857805160ff1916838001178555610255565b82800160010185558215610255579182015b8281111561025557825182559160200191906001019061023a565b50610261929150610265565b5090565b61027f91905b80821115610261576000815560010161026b565b90565b610a71806102916000396000f3006080604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461015057806307cc6051146101da578063095ea7b31461020157806318160ddd1461023957806323b872dd1461024e578063313ce567146102785780633884d635146102a35780633ccfd60b146102ab5780635d4522011461014657806370a08231146102c05780637d720296146102e157806395d89b4114610312578063a2ebb20b14610327578063a3fe1ade1461033c578063a9059cbb14610376578063b0f85a101461039a578063b3b8c620146103af578063d211fe86146103c4578063dd62ed3e146103d9578063de28fc1d14610400578063e6136d8414610415578063e67ad2541461042a578063e779a8cf1461043f575b34151561014657610141610454565b61014e565b61014e61056f565b005b34801561015c57600080fd5b5061016561062f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019f578181015183820152602001610187565b50505050905090810190601f1680156101cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e657600080fd5b506101ef6106bd565b60408051918252519081900360200190f35b34801561020d57600080fd5b50610225600160a060020a03600435166024356106c3565b604080519115158252519081900360200190f35b34801561024557600080fd5b506101ef610729565b34801561025a57600080fd5b50610225600160a060020a036004358116906024351660443561072f565b34801561028457600080fd5b5061028d61079e565b6040805160ff9092168252519081900360200190f35b61014e610454565b3480156102b757600080fd5b5061014e6107a7565b3480156102cc57600080fd5b506101ef600160a060020a036004351661082b565b3480156102ed57600080fd5b506102f661083d565b60408051600160a060020a039092168252519081900360200190f35b34801561031e57600080fd5b5061016561084c565b34801561033357600080fd5b506102f66108a6565b34801561034857600080fd5b5061035d600160a060020a03600435166108b5565b6040805163ffffffff9092168252519081900360200190f35b34801561038257600080fd5b50610225600160a060020a03600435166024356108cd565b3480156103a657600080fd5b506101ef6108e3565b3480156103bb57600080fd5b506101ef6108e9565b3480156103d057600080fd5b506101ef6108ef565b3480156103e557600080fd5b506101ef600160a060020a03600435811690602435166108f5565b34801561040c57600080fd5b506102f6610912565b34801561042157600080fd5b506101ef610921565b34801561043657600080fd5b506101ef610927565b34801561044b57600080fd5b5061035d61092d565b600754421015801561046857506008544211155b151561047357600080fd5b341561047e57600080fd5b60095460007401000000000000000000000000000000000000000090910463ffffffff161180156104e25750600954336000908152600a602052604090205463ffffffff740100000000000000000000000000000000000000009092048216911610155b156104ec57600080fd5b60095460065461050791600160a060020a0316903390610951565b336000818152600a6020908152604091829020805463ffffffff198116600163ffffffff928316018216179182905560065484519081529351911693927fcce6ff7d594e7067a58df51c8588740b7c8b42537da7262add9823085de82e4892908290030190a3565b6000600c5442101580156105855750600d544211155b151561059057600080fd5b600254600b54670de0b6b3a76400009160ff16600a0a34909102020490508015806105d45750600e54600160a060020a031660009081526004602052604090205481115b156105de57600080fd5b600e546105f590600160a060020a03163383610951565b604080518281529051349133917f4a987bc3d04b32db133ad9a3c7c0d8ecc441eb56f45a62b92c38384c095e7ac09181900360200190a350565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106b55780601f1061068a576101008083540402835291602001916106b5565b820191906000526020600020905b81548152906001019060200180831161069857829003601f168201915b505050505081565b60065481565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035481565b600160a060020a038316600090815260056020908152604080832033845290915281205482111561075f57600080fd5b600160a060020a0384166000908152600560209081526040808320338452909152902080548390039055610794848484610951565b5060019392505050565b60025460ff1681565b600f54604051303191600160a060020a03169082156108fc029083906000818181858888f193505050501580156107e2573d6000803e3d6000fd5b50600f54604080518381529051600160a060020a039092169133917f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb919081900360200190a350565b60046020526000908152604090205481565b600954600160a060020a031681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106b55780601f1061068a576101008083540402835291602001916106b5565b600f54600160a060020a031681565b600a6020526000908152604090205463ffffffff1681565b60006108da338484610951565b50600192915050565b60085481565b600b5481565b600d5481565b600560209081526000928352604080842090915290825290205481565b600e54600160a060020a031681565b600c5481565b60075481565b60095474010000000000000000000000000000000000000000900463ffffffff1681565b6000600160a060020a038316151561096857600080fd5b600160a060020a03841660009081526004602052604090205482111561098d57600080fd5b600160a060020a038316600090815260046020526040902054828101116109b357600080fd5b50600160a060020a0382811660009081526004602052604080822080549387168352912080548481038255825485019283905590549201910181146109f457fe5b82600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3505050505600a165627a7a723058206754fd6895d123c788e152cd4ab0dcceb39d0749e008ec6c77d3847f795c088d0029"
}