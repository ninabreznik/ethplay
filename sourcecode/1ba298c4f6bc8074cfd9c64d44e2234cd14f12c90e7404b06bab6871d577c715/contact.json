{
  "address": "0xb008b81eaa812a3e5ab6e8a9a9233fa31b744d6d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MilkCoinToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-13\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function () public payable {\n    revert();\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract MilkCoinToken is MintableToken {\t\n \n  event Burn(address indexed burner, uint256 value);\n\n  uint public constant PERCENT_RATE = 100;\n\n  uint public constant BUY_BACK_BONUS = 20;\n   \n  string public constant name = \"Milkcoin\";\n   \n  string public constant symbol = \"MLCN\";\n    \n  uint8 public constant decimals = 2;\n\n  uint public invested;\n\n  uint public tokensAfterCrowdsale;\n\n  uint public startBuyBackDate;\n\n  uint public endBuyBackDate;\n\n  uint public toBuyBack;\n\n  bool public dividendsCalculated;\n\n  uint public dividendsIndex;\n\n  uint public dividendsPayedIndex;\n      \n  bool public dividendsPayed;\n\n  uint public ethToDividendsNeeds;\n\n  uint public buyBackInvestedValue;\n\n  address[] public addresses;\n\n  mapping(address => bool) public savedAddresses;\n\n  mapping(address => uint) public dividends;\n\n  mapping(address => bool) public lockAddresses;\n\n  function addAddress(address addr) internal {\n    if(!savedAddresses[addr]) {\n       savedAddresses[addr] = true;\n       addresses.push(addr); \n    }\n  }\n\n  function countOfAddresses() public constant returns(uint) {\n    return addresses.length;\n  }\n\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    bool result = super.mint(_to, _amount);\n    if(result) {\n      addAddress(_to);\n    }\n    return result;\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    return postProcessTransfer(super.transfer(_to, _value), msg.sender, _to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    return postProcessTransfer(super.transferFrom(_from, _to, _value), _from, _to, _value);\n  }\n\n  function postProcessTransfer(bool result, address _from, address _to, uint256 _value) internal returns (bool) {\n    if(result) {\n      if(_to == address(this)) {\n        buyBack(_from, _value);\n      } else { \n        addAddress(_to);\n      }\n    }\n    return result;\n  }\n\n  function buyBack(address from, uint amount) internal {\n    if(now > endBuyBackDate) {\n      startBuyBackDate = endBuyBackDate;\n      endBuyBackDate = startBuyBackDate + 1 years;      \n      toBuyBack = tokensAfterCrowdsale.div(10);\n    }\n    require(now > startBuyBackDate && now < endBuyBackDate && amount <= toBuyBack); \n    balances[this] = balances[this].sub(amount);\n    totalSupply = totalSupply.sub(amount);\n    Burn(this, amount);\n    toBuyBack = toBuyBack.sub(amount);\n    uint valueInWei = amount.mul(buyBackInvestedValue).mul(PERCENT_RATE.add(BUY_BACK_BONUS)).div(PERCENT_RATE).div(totalSupply);\n    buyBackInvestedValue = buyBackInvestedValue.sub(amount.mul(buyBackInvestedValue).div(totalSupply));\n    from.transfer(valueInWei);\n  }\n\n  function retrieveTokens(address anotherToken) public onlyOwner {\n    require(anotherToken != address(this));\n    ERC20 alienToken = ERC20(anotherToken);\n    alienToken.transfer(owner, alienToken.balanceOf(this));\n  }\n\n  function finishMinting(uint newInvested) onlyOwner public returns (bool) {\n    invested = newInvested;\n    buyBackInvestedValue = newInvested;\n    tokensAfterCrowdsale = totalSupply;    \n    startBuyBackDate = 1609459200;\n    endBuyBackDate = startBuyBackDate + 365 * 1 days;      \n    toBuyBack = tokensAfterCrowdsale.div(10);\n    return super.finishMinting();\n  }\n\n  function lockAddress(address toLock) public onlyOwner {\n    lockAddresses[toLock] = true;\n  }\n\n  function unlockAddress(address toLock) public onlyOwner {\n    lockAddresses[toLock] = false;\n  }\n\n  // should use when payDividends is under re-entrance freeze\n  function payDividendsManually() public {\n    require(dividends[msg.sender] > 0);\n    uint dividendsValue = dividends[msg.sender];\n    dividends[msg.sender] = 0;\n    ethToDividendsNeeds = ethToDividendsNeeds.sub(dividendsValue);\n    msg.sender.transfer(dividendsValue);\n  }\n\n  // should use when payDividends is under re-entrance freeze\n  function resetDividendsCalculation() public onlyOwner {\n    dividendsCalculated = false;\n    dividendsPayed = false;\n  }\n\n  // re-entrance attack can freeze all dividends calculation\n  function payDividends(uint count) public onlyOwner {\n    require(!dividendsPayed && dividendsCalculated);\n    for(uint i = 0; dividendsPayedIndex < addresses.length && i < count; i++) {\n      address tokenHolder = addresses[dividendsPayedIndex];\n      if(!lockAddresses[tokenHolder] && dividends[tokenHolder] != 0) {\n        uint value = dividends[tokenHolder];\n        dividends[tokenHolder] = 0;\n        ethToDividendsNeeds = ethToDividendsNeeds.sub(value);\n        tokenHolder.transfer(value);\n      }\n      dividendsPayedIndex++;\n    }\n    if(dividendsPayedIndex == addresses.length) {  \n      dividendsPayedIndex = 0;\n      dividendsPayed = true;\n      dividendsCalculated = false;\n    }\n  }\n  \n\n  // re-entrance attack can freeze all dividends calculation\n  function calculateDividends(uint percent, uint count) public onlyOwner {\n    require(!dividendsCalculated);\n    for(uint i = 0; dividendsIndex < addresses.length && i < count; i++) {\n      address tokenHolder = addresses[dividendsIndex];\n      if(balances[tokenHolder] != 0) {\n        uint valueInWei = balances[tokenHolder].mul(invested).mul(percent).div(PERCENT_RATE).div(totalSupply);\n        ethToDividendsNeeds = ethToDividendsNeeds.add(valueInWei);\n        dividends[tokenHolder] = dividends[tokenHolder].add(valueInWei);\n      }\n      dividendsIndex++;\n    }\n    if(dividendsIndex == addresses.length) {  \n      dividendsIndex = 0;\n      dividendsCalculated = true;\n      dividendsPayed = false;\n    }\n  }\n\n  function withdraw() public onlyOwner {\n    owner.transfer(this.balance);\n  }\n\n  function deposit() public payable {\n  }\n\n  function () public payable {\n    deposit();\n  }\n\n}\n\ncontract CommonCrowdsale is Ownable {\n\n  using SafeMath for uint256;\n \n  uint public constant DIVIDER = 10000000000000000;\n\n  uint public constant PERCENT_RATE = 100;\n\n  uint public price = 1500;\n\n  uint public minInvestedLimit = 100000000000000000;\n\n  uint public hardcap = 250000000000000000000000;\n\n  uint public start = 1510758000;\n\n  uint public invested;\n\n  address public wallet;\n\n  struct Milestone {\n    uint periodInDays;\n    uint bonus;\n  }\n\n  Milestone[] public milestones;\n\n  MilkCoinToken public token = new MilkCoinToken();\n\n  function setHardcap(uint newHardcap) public onlyOwner { \n    hardcap = newHardcap;\n  }\n \n  function setStart(uint newStart) public onlyOwner { \n    start = newStart;\n  }\n\n  function setWallet(address newWallet) public onlyOwner { \n    wallet = newWallet;\n  }\n\n  function setPrice(uint newPrice) public onlyOwner {\n    price = newPrice;\n  }\n\n  function setMinInvestedLimit(uint newMinInvestedLimit) public onlyOwner {\n    minInvestedLimit = newMinInvestedLimit;\n  }\n \n  function milestonesCount() public constant returns(uint) {\n    return milestones.length;\n  }\n\n  function addMilestone(uint limit, uint bonus) public onlyOwner {\n    milestones.push(Milestone(limit, bonus));\n  }\n\n  function end() public constant returns(uint) {\n    uint last = start;\n    for (uint i = 0; i < milestones.length; i++) {\n      Milestone storage milestone = milestones[i];\n      last += milestone.periodInDays * 1 days;\n    }\n    return last;\n  }\n\n  function getMilestoneBonus() public constant returns(uint) {\n    uint prevTimeLimit = start;\n    for (uint i = 0; i < milestones.length; i++) {\n      Milestone storage milestone = milestones[i];\n      prevTimeLimit += milestone.periodInDays * 1 days;\n      if (now < prevTimeLimit)\n        return milestone.bonus;\n    }\n    revert();\n  }\n\n  function createTokensManually(address to, uint amount) public onlyOwner {\n    require(now >= start && now < end());\n    token.mint(to, amount);\n  }\n\n  function createTokens() public payable {\n    require(now >= start && now < end() && invested < hardcap);\n    wallet.transfer(msg.value);\n    invested = invested.add(msg.value);\n    uint tokens = price.mul(msg.value).div(DIVIDER);\n    uint bonusPercent = getMilestoneBonus();    \n    if(bonusPercent > 0) {\n      tokens = tokens.add(tokens.mul(bonusPercent).div(PERCENT_RATE));\n    }\n    token.mint(msg.sender, tokens);\n  }\n\n  function finishMinting() public onlyOwner {\n    token.finishMinting(invested);\n    token.transferOwnership(owner);\n  }\n\n  function() external payable {\n    createTokens();\n  }\n\n  function retrieveTokens(address anotherToken) public onlyOwner {\n    ERC20 alienToken = ERC20(anotherToken);\n    alienToken.transfer(wallet, alienToken.balanceOf(this));\n  }\n\n}\n\ncontract MilkCoinTokenCrowdsale is CommonCrowdsale {\n\n  function MilkCoinTokenCrowdsale() public {\n    setHardcap(250000000000000000000000);\n    setStart(1510758000);\n    setPrice(1500);\n    setWallet(0x87127Cb2a73eA9ba842b208455fa076cab03E844);\n    addMilestone(3, 100);\n    addMilestone(5, 67);\n    addMilestone(5, 43);\n    addMilestone(5, 25);\n    addMilestone(12, 0);\n    transferOwnership(0xb794B6c611bFC09ABD206184417082d3CA570FB7);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAfterCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInvested\",\"type\":\"uint256\"}],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BUY_BACK_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toLock\",\"type\":\"address\"}],\"name\":\"lockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyBackInvestedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"payDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethToDividendsNeeds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payDividendsManually\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsPayedIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsCalculated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBuyBackDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsPayed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anotherToken\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toBuyBack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toLock\",\"type\":\"address\"}],\"name\":\"unlockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetDividendsCalculation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"calculateDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBuyBackDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"savedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405260038054600160a860020a03191633600160a060020a031617905561190b8061002e6000396000f3006060604052600436106102005763ffffffff60e060020a60003504166305d2035b811461020a57806306fdde0314610231578063095ea7b3146102bb578063128e87e0146102dd57806314e2bc2a1461030257806317a7f9b21461031857806318160ddd1461032b57806323b872dd1461033e578063261bd0f1146103665780632e6f3e4a14610379578063313ce5671461038c57806334a90d02146103b55780633ccfd60b146103d457806340c10f19146103e75780634e7e96f114610409578063661884631461041c57806368306e431461043e5780636adcef6b1461045d5780636b7fad1b1461047357806370a0823114610486578063787ed54f146104a55780637a6506f6146104b85780637d64bcb4146104cb57806383f2a8ca146104de5780638da5cb5b146104f157806395d89b4114610520578063a30fbae114610533578063a810362114610546578063a9059cbb14610559578063ac4ddd9f1461057b578063b19725671461059a578063b5919b48146105b9578063b7eb5e0a146105cc578063bc8caa47146105eb578063c5eab684146105fe578063ca7e321f14610617578063cafb22021461062a578063d0e30db014610200578063d73dd6231461063d578063dd62ed3e1461065f578063edf26d9b14610684578063ef5a3a881461069a578063f0cb8e77146106ad578063f2fde38b146106cc575b6102086106eb565b005b341561021557600080fd5b61021d6106ed565b604051901515815260200160405180910390f35b341561023c57600080fd5b6102446106fd565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610280578082015183820152602001610268565b50505050905090810190601f1680156102ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102c657600080fd5b61021d600160a060020a0360043516602435610734565b34156102e857600080fd5b6102f06107a0565b60405190815260200160405180910390f35b341561030d57600080fd5b61021d6004356107a6565b341561032357600080fd5b6102f0610808565b341561033657600080fd5b6102f061080f565b341561034957600080fd5b61021d600160a060020a0360043581169060243516604435610815565b341561037157600080fd5b6102f0610835565b341561038457600080fd5b6102f061083a565b341561039757600080fd5b61039f61083f565b60405160ff909116815260200160405180910390f35b34156103c057600080fd5b610208600160a060020a0360043516610844565b34156103df57600080fd5b610208610883565b34156103f257600080fd5b61021d600160a060020a03600435166024356108d7565b341561041457600080fd5b6102f0610930565b341561042757600080fd5b61021d600160a060020a0360043516602435610936565b341561044957600080fd5b6102f0600160a060020a0360043516610a30565b341561046857600080fd5b610208600435610a42565b341561047e57600080fd5b6102f0610bb1565b341561049157600080fd5b6102f0600160a060020a0360043516610bb7565b34156104b057600080fd5b610208610bd2565b34156104c357600080fd5b6102f0610c5f565b34156104d657600080fd5b61021d610c65565b34156104e957600080fd5b61021d610cd9565b34156104fc57600080fd5b610504610ce2565b604051600160a060020a03909116815260200160405180910390f35b341561052b57600080fd5b610244610cf1565b341561053e57600080fd5b6102f0610d28565b341561055157600080fd5b61021d610d2e565b341561056457600080fd5b61021d600160a060020a0360043516602435610d37565b341561058657600080fd5b610208600160a060020a0360043516610d4e565b34156105a557600080fd5b61021d600160a060020a0360043516610e7a565b34156105c457600080fd5b6102f0610e8f565b34156105d757600080fd5b610208600160a060020a0360043516610e95565b34156105f657600080fd5b610208610ed1565b341561060957600080fd5b610208600435602435610f04565b341561062257600080fd5b6102f0611089565b341561063557600080fd5b6102f061108f565b341561064857600080fd5b61021d600160a060020a0360043516602435611095565b341561066a57600080fd5b6102f0600160a060020a0360043581169060243516611139565b341561068f57600080fd5b610504600435611164565b34156106a557600080fd5b6102f061118c565b34156106b857600080fd5b61021d600160a060020a0360043516611192565b34156106d757600080fd5b610208600160a060020a03600435166111a7565b565b60035460a060020a900460ff1681565b60408051908101604052600881527f4d696c6b636f696e000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60055481565b60035460009033600160a060020a039081169116146107c457600080fd5b6004829055600e8290556000546005819055635fee66006006556361cf99806007556107f790600a63ffffffff61124216565b600855610802610c65565b92915050565b600f545b90565b60005481565b600061082d610825858585611259565b8585856113db565b949350505050565b601481565b606481565b600281565b60035433600160a060020a0390811691161461085f57600080fd5b600160a060020a03166000908152601260205260409020805460ff19166001179055565b60035433600160a060020a0390811691161461089e57600080fd5b600354600160a060020a039081169030163180156108fc0290604051600060405180830381858888f1935050505015156106eb57600080fd5b600354600090819033600160a060020a039081169116146108f757600080fd5b60035460a060020a900460ff161561090e57600080fd5b610918848461141e565b90508015610929576109298461152b565b9392505050565b600e5481565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561099357600160a060020a0333811660009081526002602090815260408083209388168352929052908120556109ca565b6109a3818463ffffffff6115bc16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b60116020526000908152604090205481565b6003546000908190819033600160a060020a03908116911614610a6457600080fd5b600c5460ff16158015610a79575060095460ff165b1515610a8457600080fd5b600092505b600f54600b54108015610a9b57508383105b15610b8057600f600b54815481101515610ab157fe5b6000918252602080832090910154600160a060020a0316808352601290915260409091205490925060ff16158015610b005750600160a060020a03821660009081526011602052604090205415155b15610b6a5750600160a060020a03811660009081526011602052604081208054919055600d54610b36908263ffffffff6115bc16565b600d55600160a060020a03821681156108fc0282604051600060405180830381858888f193505050501515610b6a57600080fd5b600b805460019081019091559290920191610a89565b600f54600b541415610bab576000600b55600c805460ff199081166001179091556009805490911690555b50505050565b600d5481565b600160a060020a031660009081526001602052604090205490565b600160a060020a033316600090815260116020526040812054819011610bf757600080fd5b50600160a060020a03331660009081526011602052604081208054919055600d54610c28908263ffffffff6115bc16565b600d55600160a060020a03331681156108fc0282604051600060405180830381858888f193505050501515610c5c57600080fd5b50565b600b5481565b60035460009033600160a060020a03908116911614610c8357600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b60095460ff1681565b600354600160a060020a031681565b60408051908101604052600481527f4d4c434e00000000000000000000000000000000000000000000000000000000602082015281565b60075481565b600c5460ff1681565b6000610929610d4684846115ce565b3385856113db565b60035460009033600160a060020a03908116911614610d6c57600080fd5b30600160a060020a031682600160a060020a031614151515610d8d57600080fd5b506003548190600160a060020a038083169163a9059cbb9116826370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610df457600080fd5b6102c65a03f11515610e0557600080fd5b5050506040518051905060006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610e5b57600080fd5b6102c65a03f11515610e6c57600080fd5b505050604051805150505050565b60126020526000908152604090205460ff1681565b60085481565b60035433600160a060020a03908116911614610eb057600080fd5b600160a060020a03166000908152601260205260409020805460ff19169055565b60035433600160a060020a03908116911614610eec57600080fd5b6009805460ff19908116909155600c80549091169055565b6003546000908190819033600160a060020a03908116911614610f2657600080fd5b60095460ff1615610f3657600080fd5b600092505b600f54600a54108015610f4d57508383105b1561105757600f600a54815481101515610f6357fe5b6000918252602080832090910154600160a060020a03168083526001909152604090912054909250156110415760008054600454600160a060020a03851683526001602052604090922054610fe592610fd99160649183918b91610fcd919063ffffffff6116c916565b9063ffffffff6116c916565b9063ffffffff61124216565b600d54909150610ffb908263ffffffff6116ed16565b600d55600160a060020a038216600090815260116020526040902054611027908263ffffffff6116ed16565b600160a060020a0383166000908152601160205260409020555b600a805460019081019091559290920191610f3b565b600f54600a541415611082576000600a556009805460ff19908116600117909155600c805490911690555b5050505050565b60065481565b60045481565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546110cd908363ffffffff6116ed16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600f80548290811061117257fe5b600091825260209091200154600160a060020a0316905081565b600a5481565b60106020526000908152604090205460ff1681565b60035433600160a060020a039081169116146111c257600080fd5b600160a060020a03811615156111d757600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080828481151561125057fe5b04949350505050565b6000600160a060020a038316151561127057600080fd5b600160a060020a03841660009081526001602052604090205482111561129557600080fd5b600160a060020a03808516600090815260026020908152604080832033909416835292905220548211156112c857600080fd5b600160a060020a0384166000908152600160205260409020546112f1908363ffffffff6115bc16565b600160a060020a038086166000908152600160205260408082209390935590851681522054611326908363ffffffff6116ed16565b600160a060020a0380851660009081526001602090815260408083209490945587831682526002815283822033909316825291909152205461136e908363ffffffff6115bc16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600084156114155730600160a060020a031683600160a060020a0316141561140c5761140784836116fc565b611415565b6114158361152b565b50929392505050565b60035460009033600160a060020a0390811691161461143c57600080fd5b60035460a060020a900460ff161561145357600080fd5b600054611466908363ffffffff6116ed16565b6000908155600160a060020a038416815260016020526040902054611491908363ffffffff6116ed16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600160a060020a03811660009081526010602052604090205460ff161515610c5c57600160a060020a0381166000908152601060205260409020805460ff19166001908117909155600f80549091810161158583826118a2565b5060009182526020909120018054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b6000828211156115c857fe5b50900390565b6000600160a060020a03831615156115e557600080fd5b600160a060020a03331660009081526001602052604090205482111561160a57600080fd5b600160a060020a033316600090815260016020526040902054611633908363ffffffff6115bc16565b600160a060020a033381166000908152600160205260408082209390935590851681522054611668908363ffffffff6116ed16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60008282028315806116e557508284828115156116e257fe5b04145b151561092957fe5b60008282018381101561092957fe5b6000600754421115611731576007805460068190556301e1338001905560055461172d90600a63ffffffff61124216565b6008555b60065442118015611743575060075442105b801561175157506008548211155b151561175c57600080fd5b600160a060020a033016600090815260016020526040902054611785908363ffffffff6115bc16565b600160a060020a033016600090815260016020526040812091909155546117b2908363ffffffff6115bc16565b600055600160a060020a0330167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2600854611805908363ffffffff6115bc16565b60085560005461183a90610fd960648161182682601463ffffffff6116ed16565b600e54610fcd90899063ffffffff6116c916565b905061186961185a600054610fd9600e54866116c990919063ffffffff16565b600e549063ffffffff6115bc16565b600e55600160a060020a03831681156108fc0282604051600060405180830381858888f19350505050151561189d57600080fd5b505050565b81548183558181151161189d5760008381526020902061189d91810190830161080c91905b808211156118db57600081556001016118c7565b50905600a165627a7a7230582068d6ebd94c95ccd938fc66dce952ca6bbfec34af831465ff67d6066dfd24784a0029"
}