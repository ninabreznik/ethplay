{
  "address": "0xd184b10ee51be2c6bf45214b048f311a15296cae",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MyDFSToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-15\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n  function mul(uint a, uint b) internal pure returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal pure returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\ncontract ERC223 {\n  uint public totalSupply;\n  function balanceOf(address who) public view returns (uint);\n  \n  function name() public view returns (string _name);\n  function symbol() public view returns (string _symbol);\n  function decimals() public view returns (uint8 _decimals);\n  function totalSupply() public view returns (uint256 _supply);\n\n  function transfer(address to, uint value) public returns (bool ok);\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n  \n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\ncontract ContractReceiver {\n     \n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n    \n    \n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n      TKN memory tkn;\n      tkn.sender = _from;\n      tkn.value = _value;\n      tkn.data = _data;\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n      tkn.sig = bytes4(u);\n      \n      /* tkn variable is analogue of msg variable of Ether transaction\n      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n      *  tkn.data is data of token transaction   (analogue of msg.data)\n      *  tkn.sig is 4 bytes signature of function\n      *  if data of token transaction is a function execution\n      */\n    }\n}\n\ncontract StandardToken is ERC223 {\n    using SafeMath for uint;\n\n    //user token balances\n    mapping (address => uint) balances;\n    //token transer permissions\n    mapping (address => mapping (address => uint)) allowed;\n\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n        if(isContract(_to)) {\n            if (balanceOf(msg.sender) < _value) revert();\n            balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n            balances[_to] = balanceOf(_to).add(_value);\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        else {\n            return transferToAddress(_to, _value);\n        }\n    }\n    \n\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n          \n        if(isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        }\n        else {\n            return transferToAddress(_to, _value);\n        }\n    }\n      \n    // Standard function transfer similar to ERC20 transfer with no _data .\n    // Added due to backwards compatibility reasons .\n    function transfer(address _to, uint _value) public returns (bool success) {\n          \n        //standard function transfer similar to ERC20 transfer with no _data\n        //added due to backwards compatibility reasons\n        bytes memory empty;\n        if(isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        }\n        else {\n            return transferToAddress(_to, _value);\n        }\n    }\n\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n    //function that is called when transaction target is an address\n    function transferToAddress(address _to, uint _value) private returns (bool success) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n        balances[_to] = balanceOf(_to).add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n      \n      //function that is called when transaction target is a contract\n      function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n        balances[_to] = balanceOf(_to).add(_value);\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Token transfer from from to _to (permission needed)\n     */\n    function transferFrom(\n        address _from, \n        address _to,\n        uint _value\n    ) \n        public \n        returns (bool)\n    {\n        if (balanceOf(_from) < _value && allowance(_from, msg.sender) < _value) revert();\n\n        bytes memory empty;\n        balances[_to] = balanceOf(_to).add(_value);\n        balances[_from] = balanceOf(_from).sub(_value);\n        allowed[_from][msg.sender] = allowance(_from, msg.sender).sub(_value);\n        if (isContract(_to)) {\n            ContractReceiver receiver = ContractReceiver(_to);\n            receiver.tokenFallback(msg.sender, _value, empty);\n        }\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Increase permission for transfer\n     */\n    function increaseApproval(\n        address spender,\n        uint value\n    )\n        public\n        returns (bool) \n    {\n        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(value);\n        return true;\n    }\n\n    /**\n     * Decrease permission for transfer\n     */\n    function decreaseApproval(\n        address spender,\n        uint value\n    )\n        public\n        returns (bool) \n    {\n        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(value);\n        return true;\n    }\n\n    /**\n     * User token balance\n     */\n    function balanceOf(\n        address owner\n    ) \n        public \n        constant \n        returns (uint) \n    {\n        return balances[owner];\n    }\n\n    /**\n     * User transfer permission\n     */\n    function allowance(\n        address owner, \n        address spender\n    )\n        public\n        constant\n        returns (uint remaining)\n    {\n        return allowed[owner][spender];\n    }\n}\n\ncontract MyDFSToken is StandardToken {\n\n    string public name = \"MyDFS Token\";\n    uint8 public decimals = 6;\n    string public symbol = \"MyDFS\";\n    string public version = 'H1.0';\n    uint256 public totalSupply;\n\n    function () external {\n        revert();\n    } \n\n    function MyDFSToken() public {\n        totalSupply = 125 * 1e12;\n        balances[msg.sender] = totalSupply;\n    }\n\n    // Function to access name of token .\n    function name() public view returns (string _name) {\n        return name;\n    }\n    // Function to access symbol of token .\n    function symbol() public view returns (string _symbol) {\n        return symbol;\n    }\n    // Function to access decimals of token .\n    function decimals() public view returns (uint8 _decimals) {\n        return decimals;\n    }\n    // Function to access total supply of tokens .\n    function totalSupply() public view returns (uint256 _totalSupply) {\n        return totalSupply;\n    }\n}",
  "bytecode": "60606040526040805190810160405280600b81526020017f4d7944465320546f6b656e00000000000000000000000000000000000000000081525060039080519060200190620000519291906200016f565b506006600460006101000a81548160ff021916908360ff1602179055506040805190810160405280600581526020017f4d7944465300000000000000000000000000000000000000000000000000000081525060059080519060200190620000bb9291906200016f565b506040805190810160405280600481526020017f48312e300000000000000000000000000000000000000000000000000000000081525060069080519060200190620001099291906200016f565b5034156200011657600080fd5b6571afd498d000600781905550600754600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200021e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001b257805160ff1916838001178555620001e3565b82800160010185558215620001e3579182015b82811115620001e2578251825591602001919060010190620001c5565b5b509050620001f29190620001f6565b5090565b6200021b91905b8082111562000217576000816000905550600101620001fd565b5090565b90565b611681806200022e6000396000f3006060604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d557806318160ddd1461016357806323b872dd1461018c578063313ce5671461020557806354fd4d501461023457806366188463146102c257806370a082311461031c57806395d89b4114610369578063a9059cbb146103f7578063be45fd6214610451578063d73dd623146104ee578063dd62ed3e14610548578063f6368f8a146105b4575b34156100d057600080fd5b600080fd5b34156100e057600080fd5b6100e8610694565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012857808201518184015260208101905061010d565b50505050905090810190601f1680156101555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016e57600080fd5b61017661073c565b6040518082815260200191505060405180910390f35b341561019757600080fd5b6101eb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610746565b604051808215151515815260200191505060405180910390f35b341561021057600080fd5b610218610a7a565b604051808260ff1660ff16815260200191505060405180910390f35b341561023f57600080fd5b610247610a91565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561028757808201518184015260208101905061026c565b50505050905090810190601f1680156102b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102cd57600080fd5b610302600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b2f565b604051808215151515815260200191505060405180910390f35b341561032757600080fd5b610353600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c4a565b6040518082815260200191505060405180910390f35b341561037457600080fd5b61037c610c93565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103bc5780820151818401526020810190506103a1565b50505050905090810190601f1680156103e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561040257600080fd5b610437600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d3b565b604051808215151515815260200191505060405180910390f35b341561045c57600080fd5b6104d4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610d79565b604051808215151515815260200191505060405180910390f35b34156104f957600080fd5b61052e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610daf565b604051808215151515815260200191505060405180910390f35b341561055357600080fd5b61059e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610eca565b6040518082815260200191505060405180910390f35b34156105bf57600080fd5b61067a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610f51565b604051808215151515815260200191505060405180910390f35b61069c61162d565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107325780601f1061070757610100808354040283529160200191610732565b820191906000526020600020905b81548152906001019060200180831161071557829003601f168201915b5050505050905090565b6000600754905090565b6000610750611641565b60008361075c87610c4a565b10801561077157508361076f8733610eca565b105b1561077b57600080fd5b6107968461078887610c4a565b61123690919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107f4846107e688610c4a565b61125490919063ffffffff16565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610853846108458833610eca565b61125490919063ffffffff16565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108dc8561126d565b15610a08578490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109a657808201518184015260208101905061098b565b50505050905090810190601f1680156109d35780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15156109f357600080fd5b6102c65a03f11515610a0457600080fd5b5050505b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001925050509392505050565b6000600460009054906101000a900460ff16905090565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b275780601f10610afc57610100808354040283529160200191610b27565b820191906000526020600020905b815481529060010190602001808311610b0a57829003601f168201915b505050505081565b6000610bc082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461123690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c9b61162d565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d315780601f10610d0657610100808354040283529160200191610d31565b820191906000526020600020905b815481529060010190602001808311610d1457829003601f168201915b5050505050905090565b6000610d45611641565b610d4e8461126d565b15610d6557610d5e848483611280565b9150610d72565b610d6f84846114eb565b91505b5092915050565b6000610d848461126d565b15610d9b57610d94848484611280565b9050610da8565b610da584846114eb565b90505b9392505050565b6000610e4082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461123690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000610f5c8561126d565b156112215783610f6b33610c4a565b1015610f7657600080fd5b610f9184610f8333610c4a565b61125490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fef84610fe187610c4a565b61123690919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff166000836040518082805190602001908083835b602083101515611081578051825260208201915060208101905060208303925061105c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207c01000000000000000000000000000000000000000000000000000000009004903387876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828051906020019080838360005b83811015611162578082015181840152602081019050611147565b50505050905090810190601f16801561118f5780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185886187965a03f1935050505015156111b357fe5b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001905061122e565b61122b85856114eb565b90505b949350505050565b600080828401905083811015151561124a57fe5b8091505092915050565b600082821115151561126257fe5b818303905092915050565b600080823b905060008111915050919050565b6000808361128d33610c4a565b101561129857600080fd5b6112b3846112a533610c4a565b61125490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113118461130387610c4a565b61123690919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114195780820151818401526020810190506113fe565b50505050905090810190601f1680156114465780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561146657600080fd5b6102c65a03f1151561147757600080fd5b5050508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019150509392505050565b6000816114f733610c4a565b101561150257600080fd5b61151d8261150f33610c4a565b61125490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061157b8261156d85610c4a565b61123690919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a72305820881f5e4caf454983aebafacf1158984fcee29fb6aa1f03b75058516b5ca373d80029"
}