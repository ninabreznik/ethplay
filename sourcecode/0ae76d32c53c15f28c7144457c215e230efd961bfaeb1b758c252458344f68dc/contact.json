{
  "address": "0x11ba008715b63b1e005c954d09bf2ad9cd532891",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TURBOETH",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-23\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address internal _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    _owner = msg.sender;\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n\ncontract TURBOETH is Ownable{\n    using SafeMath for uint256;\n    \n    mapping (address => uint256) public investedETH;\n    mapping (address => uint256) public lastInvest;\n    mapping (address => uint256) public lastWithdraw;\n    \n    mapping (address => uint256) public affiliateCommision;\n    \n    address public dev = address(0xA9aB9d0528dC229F7BF60EDDF62cb0f3df21deF5);\n    address public promoter1 = address(0xa4b59DdD4770f9e76B23ac42695AaF1517ED18c1);\n    address public promoter2 = address(0xDB320F6d59053B16E4148d93D743A0B3CfB9Ff64);\n    address public promoter3 = address(0x3028469664C8bc4102771DA965bbb4d89f9b9377);\n    address public promoter4 = address(0x840838622c9034312666be3C0aBE90bF34Aff43b);\n    address public promoter5 = address(0x1f60287ecF3b248CA092F1a076d273540787A258);\n    address public promoter6 = address(0x4339744527A896851F7FbE2046717C910360894E);\n    \n    address public lastPotWinner;\n    \n    uint256 public pot = 0;\n    uint256 public maxpot = 3000000000000000000;\n    uint256 public launchtime = 1556107200;\n    uint256 public maxwithdraw = SafeMath.div(3493, 100);\n    uint256 maxprofit = SafeMath.div(25, 10);\n   \n    \n    \n    event PotWinner(address indexed beneficiary, uint256 amount );\n    \n    constructor () public {\n        _owner = address(0xA9aB9d0528dC229F7BF60EDDF62cb0f3df21deF5);\n    }\n    \n    \n      mapping(address => uint256) public userWithdrawals;\n    mapping(address => uint256[]) public userSequentialDeposits;\n    \n    function maximumProfitUser() public view returns(uint256){ \n        return getInvested() * maxprofit;\n    }\n    \n    function getTotalNumberOfDeposits() public view returns(uint256){\n        return userSequentialDeposits[msg.sender].length;\n    }\n    \n    function() public payable{ }\n    \n    \n    \n      function investETH(address referral) public payable {\n      require(now >= launchtime);\n      require(msg.value >= 0.5 ether);\n      //uint256 timelimit = SafeMath.sub(now, launchtime);\n      \n      \nif(getProfit(msg.sender) > 0){\n          reinvestProfit();\n          lastInvest[msg.sender] = now;\n          lastWithdraw[msg.sender] = now;\n        }\n         \n       \n        \n        amount = msg.value;\n        uint256 commision = amount.mul(10).div(100);\n        uint256 commision1 = amount.mul(3).div(100);\n        uint256 commision2 = amount.mul(2).div(100);\n        uint256 _pot = amount.mul(3).div(100);\n        pot = pot.add(_pot);\n        uint256 amount = amount;\n        \n        \n        dev.transfer(commision1);\n        promoter1.transfer(commision1);\n        promoter2.transfer(commision1);\n        promoter3.transfer(commision1);\n        promoter4.transfer(commision1);\n        promoter5.transfer(commision1);\n        promoter6.transfer(commision2);\n        investedETH[msg.sender] = investedETH[msg.sender].add(amount);\n        lastInvest[msg.sender] = now;\n        lastWithdraw[msg.sender] = now;\n        userSequentialDeposits[msg.sender].push(amount);\n        if(pot >= maxpot){\n            uint256 winningReward = pot;\n            msg.sender.transfer(winningReward);\n            lastPotWinner = msg.sender;\n            emit PotWinner(msg.sender, winningReward);\n            pot = 0;\n             }\n             \n        if(referral != msg.sender && referral != 0x1 && referral != promoter1 && referral != promoter2  && referral != promoter3  && referral != promoter4  && referral != promoter5  && referral != promoter6){\n            affiliateCommision[referral] = SafeMath.add(affiliateCommision[referral], commision);\n        }\n        else{\n        affiliateCommision[dev] = SafeMath.add(affiliateCommision[dev], commision);\n        }\n        //affiliateCommision[dev] = SafeMath.add(affiliateCommision[dev], commision);\n        \n       \n    }\n    \n \n    \n    function withdraw() public{\n        uint256 profit = getProfit(msg.sender);\n        uint256 timelimit = SafeMath.sub(now, launchtime);\n        uint256 maximumProfit = maximumProfitUser();\n        uint256 availableProfit = maximumProfit - userWithdrawals[msg.sender];\n        uint256 maxwithdrawlimit = SafeMath.div(SafeMath.mul(maxwithdraw, investedETH[msg.sender]), 100);\n        uint256 withdrawalindividual = SafeMath.sub(now, lastWithdraw[msg.sender]);\n        uint256 withdrawalcond1 = SafeMath.div(SafeMath.mul(10, getProfit(msg.sender)), 100);\n        uint256 withdrawalcond2 = SafeMath.div(SafeMath.mul(5, getProfit(msg.sender)), 100);\n       \n        require(profit >= 0.1 ether && withdrawalindividual >= 604800 && timelimit >= 864000);\n        //require(withdrawalindividual >= 604800);\n        //require(timelimit >= 864000);\n        lastInvest[msg.sender] = now;\n        lastWithdraw[msg.sender] = now;\n       \n        if(timelimit >= 864001 &&  timelimit < 1728000){\n         profit = SafeMath.sub(profit, withdrawalcond1);\n        }\n        else if(timelimit >= 1728001 &&  timelimit <= 2592000){\n         profit = SafeMath.sub(profit, withdrawalcond2);\n        } \n       \n       \n        if(profit < availableProfit){\n        \n        if(profit < maxwithdrawlimit){\n        userWithdrawals[msg.sender] += profit;\n        msg.sender.transfer(profit);\n        }\n        else if(profit >= maxwithdrawlimit){\n        uint256 PartPayment = maxwithdrawlimit;\n        uint256 finalprofit = SafeMath.sub(profit, PartPayment);\n        userWithdrawals[msg.sender] += profit;\n        msg.sender.transfer(PartPayment);\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], finalprofit);\n        } \n          \n        }\n        \n        else if(profit >= availableProfit && userWithdrawals[msg.sender] < maximumProfit){\n            uint256 finalPartialPayment = availableProfit;\n            if(finalPartialPayment < maxwithdrawlimit){\n            userWithdrawals[msg.sender] = 0;\n            investedETH[msg.sender] = 0;\n            delete userSequentialDeposits[msg.sender];\n            msg.sender.transfer(finalPartialPayment);\n            }\n             else if(finalPartialPayment >= maxwithdrawlimit){\n             \n        uint256 finalPartPayment = maxwithdrawlimit;\n        uint256 finalprofits = SafeMath.sub(finalPartialPayment, finalPartPayment);\n        userWithdrawals[msg.sender] += finalPartialPayment;\n        msg.sender.transfer(finalPartPayment);\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], finalprofits);\n        \n        \n             }\n        }\n    \n        \n    }\n   \n    function getProfitFromSender() public view returns(uint256){\n        return getProfit(msg.sender);\n    }\n\n    function getProfit(address customer) public view returns(uint256){\n        uint256 secondsPassed = SafeMath.sub(now, lastInvest[customer]);\n        uint256 profit = SafeMath.div(SafeMath.mul(secondsPassed, investedETH[customer]), 1731462);\n        uint256 maximumProfit = maximumProfitUser();\n        uint256 availableProfit = maximumProfit - userWithdrawals[msg.sender];\n\n        if(profit > availableProfit && userWithdrawals[msg.sender] < maximumProfit){\n            profit = availableProfit;\n        }\n        \n        uint256 bonus = getBonus();\n        if(bonus == 0){\n            return profit;\n        }\n        return SafeMath.add(profit, SafeMath.div(SafeMath.mul(profit, bonus), 100));\n    }\n    \n    function getBonus() public view returns(uint256){\n        uint256 invested = getInvested();\n        if(invested >= 0.5 ether && 4 ether >= invested){\n            return 0;\n        }else if(invested >= 4.01 ether && 7 ether >= invested){\n            return 20;\n        }else if(invested >= 7.01 ether && 10 ether >= invested){\n            return 40;\n        }else if(invested >= 10.01 ether && 15 ether >= invested){\n            return 60;\n        }else if(invested >= 15.01 ether){\n            return 99;\n        }\n    }\n    \n    function reinvestProfit() public {\n        uint256 profit = getProfit(msg.sender);\n        require(profit > 0);\n        lastInvest[msg.sender] = now;\n        userWithdrawals[msg.sender] += profit;\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], profit);\n    } \n \n   \n    function getAffiliateCommision() public view returns(uint256){\n        return affiliateCommision[msg.sender];\n    }\n    \n    function withdrawAffiliateCommision() public {\n        require(affiliateCommision[msg.sender] > 0);\n        uint256 commision = affiliateCommision[msg.sender];\n        affiliateCommision[msg.sender] = 0;\n        msg.sender.transfer(commision);\n    }\n    \n    function getInvested() public view returns(uint256){\n        return investedETH[msg.sender];\n    }\n    \n    function getLastWithdrawaltime() public view returns(uint256){\n        return lastWithdraw[msg.sender];\n    }\n    \n    function getBalance() public view returns(uint256){\n        return address(this).balance;\n    }\n\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n    \n    function max(uint256 a, uint256 b) private pure returns (uint256) {\n        return a > b ? a : b;\n    }\n    \n    function updatePromoter1(address _address) external onlyOwner {\n        require(_address != address(0x0));\n        promoter1 = _address;\n    }\n    \n    function updatePromoter2(address _address) external onlyOwner {\n        require(_address != address(0x0));\n        promoter2 = _address;\n    }\n    \n    function updatePromoter3(address _address) external onlyOwner {\n        require(_address != address(0x0));\n        promoter3 = _address;\n    }\n    \n     function updatePromoter4(address _address) external onlyOwner {\n        require(_address != address(0x0));\n        promoter4 = _address;\n    }\n    \n     function updatePromoter5(address _address) external onlyOwner {\n        require(_address != address(0x0));\n        promoter5 = _address;\n    }\n    \n     function updatePromoter6(address _address) external onlyOwner {\n        require(_address != address(0x0));\n        promoter6 = _address;\n    }\n    \n    \n    \n    \n     function updateMaxpot(uint256 _Maxpot) external onlyOwner {\n        maxpot = _Maxpot;\n    }\n    \n     function updateLaunchtime(uint256 _Launchtime) external onlyOwner {\n        launchtime = _Launchtime;\n    }\n   \n\n        /**\n  *  function random() internal view returns (bool) {\n        uint maxRange = 2**(8* 7);\n        for(uint8 a = 0 ; a < 8; a++){\n            uint randomNumber = uint( keccak256(abi.encodePacked(msg.sender,blockhash(block.number), block.timestamp )) ) % maxRange;\n           if ((randomNumber % 13) % 19 == 0){\n             return true;\n                break;\n            }\n        }\n        return false;    \n    }  */\n    \n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "608060405273a9ab9d0528dc229f7bf60eddf62cb0f3df21def5600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073a4b59ddd4770f9e76b23ac42695aaf1517ed18c1600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073db320f6d59053b16e4148d93d743a0b3cfb9ff64600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550733028469664c8bc4102771da965bbb4d89f9b9377600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073840838622c9034312666be3c0abe90bf34aff43b600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550731f60287ecf3b248ca092f1a076d273540787a258600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550734339744527a896851f7fbe2046717c910360894e600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600d556729a2241af62c0000600e55635cc04fc0600f5562000293610da56064620003636401000000000262002b0c176401000000009004565b601055620002b86019600a620003636401000000000262002b0c176401000000009004565b601155348015620002c857600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073a9ab9d0528dc229f7bf60eddf62cb0f3df21def56000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200037f565b60008082848115156200037257fe5b0490508091505092915050565b612cb1806200038f6000396000f300608060405260043610610204576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063040d50d4146102065780630bc649b2146102335780630fc639f61461027657806312065fe0146102a15780633ccfd60b146102cc5780633ea4a796146102e357806343c6e10d1461032657806345439b40146103515780634ba2363a14610394578063550efea4146103bf5780635aa9d508146103ea5780635c5f0265146104155780635f3619b11461046c578063624d7b721461049757806364e3cecb146104ee5780636798dbac146105195780637777a0c2146105705780637a99ba4f146105b35780637be00510146105e95780638bdff161146106405780638da5cb5b1461066b5780638f32d59b146106c2578063901225e2146106f157806391cca3db1461071e5780639e268c5014610775578063ac3190db146107cc578063b7a92d3814610823578063befc3e2b1461087a578063c3798844146108a5578063c600e1dc146108fc578063cc2eb9e814610953578063ce138e64146109aa578063d67a9682146109d5578063d86479df14610a18578063e3b6113514610a6f578063ecb7cb1b14610a86578063edf6777e14610add578063f09dd7c614610b20578063f2fde38b14610b37578063f69c96fc14610b7a578063f7085ec714610bd1578063f96941c814610bfc575b005b34801561021257600080fd5b5061023160048036038101908080359060200190929190505050610c5d565b005b34801561023f57600080fd5b50610274600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c7a565b005b34801561028257600080fd5b5061028b610d0d565b6040518082815260200191505060405180910390f35b3480156102ad57600080fd5b506102b6610d20565b6040518082815260200191505060405180910390f35b3480156102d857600080fd5b506102e1610d3f565b005b3480156102ef57600080fd5b50610324600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061145d565b005b34801561033257600080fd5b5061033b6114f0565b6040518082815260200191505060405180910390f35b34801561035d57600080fd5b50610392600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611537565b005b3480156103a057600080fd5b506103a96115ca565b6040518082815260200191505060405180910390f35b3480156103cb57600080fd5b506103d46115d0565b6040518082815260200191505060405180910390f35b3480156103f657600080fd5b506103ff6115d6565b6040518082815260200191505060405180910390f35b34801561042157600080fd5b50610456600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061161d565b6040518082815260200191505060405180910390f35b34801561047857600080fd5b50610481611635565b6040518082815260200191505060405180910390f35b3480156104a357600080fd5b506104d8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611645565b6040518082815260200191505060405180910390f35b3480156104fa57600080fd5b5061050361165d565b6040518082815260200191505060405180910390f35b34801561052557600080fd5b5061052e6116a7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561057c57600080fd5b506105b1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116cd565b005b6105e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611760565b005b3480156105f557600080fd5b5061062a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061222d565b6040518082815260200191505060405180910390f35b34801561064c57600080fd5b50610655612245565b6040518082815260200191505060405180910390f35b34801561067757600080fd5b50610680612329565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106ce57600080fd5b506106d7612352565b604051808215151515815260200191505060405180910390f35b3480156106fd57600080fd5b5061071c600480360381019080803590602001909291905050506123a9565b005b34801561072a57600080fd5b506107336123c6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561078157600080fd5b5061078a6123ec565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107d857600080fd5b506107e1612412565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561082f57600080fd5b50610838612438565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561088657600080fd5b5061088f61245e565b6040518082815260200191505060405180910390f35b3480156108b157600080fd5b506108ba6124a5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561090857600080fd5b5061093d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124cb565b6040518082815260200191505060405180910390f35b34801561095f57600080fd5b5061096861265f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109b657600080fd5b506109bf612685565b6040518082815260200191505060405180910390f35b3480156109e157600080fd5b50610a16600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061268b565b005b348015610a2457600080fd5b50610a59600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061271e565b6040518082815260200191505060405180910390f35b348015610a7b57600080fd5b50610a84612736565b005b348015610a9257600080fd5b50610ac7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612872565b6040518082815260200191505060405180910390f35b348015610ae957600080fd5b50610b1e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061288a565b005b348015610b2c57600080fd5b50610b3561291d565b005b348015610b4357600080fd5b50610b78600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a3d565b005b348015610b8657600080fd5b50610b8f612a5c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bdd57600080fd5b50610be6612a82565b6040518082815260200191505060405180910390f35b348015610c0857600080fd5b50610c47600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612a88565b6040518082815260200191505060405180910390f35b610c65612352565b1515610c7057600080fd5b80600f8190555050565b610c82612352565b1515610c8d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610cc957600080fd5b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000601154610d1a61245e565b02905090565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000806000806000806000806000806000806000610d5c336124cb565b9c50610d6a42600f54612ab8565b9b50610d74610d0d565b9a50601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548b039950610e0f610e08601054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ad1565b6064612b0c565b9850610e5a42600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ab8565b9750610e79610e72600a610e6d336124cb565b612ad1565b6064612b0c565b9650610e98610e916005610e8c336124cb565b612ad1565b6064612b0c565b955067016345785d8a00008d10158015610eb5575062093a808810155b8015610ec45750620d2f008c10155b1515610ecf57600080fd5b42600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620d2f018c10158015610f6c5750621a5e008c105b15610f8257610f7b8d88612ab8565b9c50610fab565b621a5e018c10158015610f98575062278d008c11155b15610faa57610fa78d87612ab8565b9c505b5b898d101561119357888d1015611054578c601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc8e9081150290604051600060405180830381858888f1935050505015801561104e573d6000803e3d6000fd5b5061118e565b888d10151561118d5788945061106a8d86612ab8565b93508c601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f193505050501580156110ff573d6000803e3d6000fd5b50611149600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485612b27565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b61144e565b898d101580156111e157508a601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b1561144d5789925088831015611312576000601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006112c69190612c3f565b3373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561130c573d6000803e3d6000fd5b5061144c565b888310151561144b578891506113288383612ab8565b905082601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156113bd573d6000803e3d6000fd5b50611407600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612b27565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b5b5b50505050505050505050505050565b611465612352565b151561147057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156114ac57600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b61153f612352565b151561154a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561158657600080fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600d5481565b600e5481565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60046020528060005260406000206000915090505481565b6000611640336124cb565b905090565b60036020528060005260406000206000915090505481565b6000601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6116d5612352565b15156116e057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561171c57600080fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600080600080600f54421015151561177a57600080fd5b6706f05b59d3b20000341015151561179157600080fd5b600061179c336124cb565b1115611833576117aa612736565b42600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b34915061185d606461184f600a85612ad190919063ffffffff16565b612b0c90919063ffffffff16565b95506118866064611878600385612ad190919063ffffffff16565b612b0c90919063ffffffff16565b94506118af60646118a1600285612ad190919063ffffffff16565b612b0c90919063ffffffff16565b93506118d860646118ca600385612ad190919063ffffffff16565b612b0c90919063ffffffff16565b92506118ef83600d54612b2790919063ffffffff16565b600d81905550819150600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015611960573d6000803e3d6000fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f193505050501580156119c9573d6000803e3d6000fd5b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015611a32573d6000803e3d6000fd5b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015611a9b573d6000803e3d6000fd5b50600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015611b04573d6000803e3d6000fd5b50600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015611b6d573d6000803e3d6000fd5b50600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f19350505050158015611bd6573d6000803e3d6000fd5b50611c2982600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b2790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050906001820390600052602060002001600090919290919091505550600e54600d54101515611e4e57600d5490503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611db5573d6000803e3d6000fd5b5033600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f55c760794e652d1fa3c4dfc0e0e192f75796ba998fff30d990b7f6acc8b04a8f826040518082815260200191505060405180910390a26000600d819055505b3373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614158015611ea1575060018773ffffffffffffffffffffffffffffffffffffffff1614155b8015611efb5750600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b8015611f555750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b8015611faf5750600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b80156120095750600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b80156120635750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b80156120bd5750600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b156121535761210b600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487612b27565b600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612224565b6121be60046000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487612b27565b60046000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50505050505050565b60026020528060005260406000206000915090505481565b60008061225061245e565b90506706f05b59d3b200008110158015612272575080673782dace9d90000010155b156122805760009150612325565b6737a661c10d51000081101580156122a0575080676124fee993bc000010155b156122ae5760149150612325565b67614885dc037d000081101580156122ce575080678ac7230489e8000010155b156122dc5760289150612325565b678aeaa9f6f9a9000081101580156122fc57508067d02ab486cedc000010155b1561230a57603c9150612325565b67d04e3b793e9d0000811015156123245760639150612325565b5b5090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6123b1612352565b15156123bc57600080fd5b80600e8190555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060008061251d42600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ab8565b945061257461256b86600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ad1565b621a6b86612b0c565b935061257e610d0d565b9250601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054830391508184118015612611575082601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b1561261a578193505b612622612245565b9050600081141561263557839550612655565b6126528461264d6126468785612ad1565b6064612b0c565b612b27565b95505b5050505050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60105481565b612693612352565b151561269e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156126da57600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60016020528060005260406000206000915090505481565b6000612741336124cb565b905060008111151561275257600080fd5b42600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555061282c600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612b27565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60126020528060005260406000206000915090505481565b612892612352565b151561289d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156128d957600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561296c57600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612a39573d6000803e3d6000fd5b5050565b612a45612352565b1515612a5057600080fd5b612a5981612b45565b50565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b601360205281600052604060002081815481101515612aa357fe5b90600052602060002001600091509150505481565b6000828211151515612ac657fe5b818303905092915050565b6000806000841415612ae65760009150612b05565b8284029050828482811515612af757fe5b04141515612b0157fe5b8091505b5092915050565b6000808284811515612b1a57fe5b0490508091505092915050565b6000808284019050838110151515612b3b57fe5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612b8157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5080546000825590600052602060002090810190612c5d9190612c60565b50565b612c8291905b80821115612c7e576000816000905550600101612c66565b5090565b905600a165627a7a7230582039e8899f692fc18cb6c8b0b406f2abbf0ec30c9ba4b9404e5bb5529f9d310e9b0029"
}