{
  "address": "0xf2bad76e168e1479e3ce170c900955b01598d049",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BurnableTimelock",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-19\n*/\n\npragma solidity 0.4.23;\n\nlibrary SafeMath {\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        if (_a == 0) {\n            return 0;\n        }\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0);\n        uint256 c = _a / _b;\n\n        return c;\n    }\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n\n        return c;\n    }\n}\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function allowance(address _owner, address _spender)\n        public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function approve(address _spender, uint256 _value)\n        public returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract Ownable {\n    address private _owner;\n    bool private _paused;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Paused(address account);\n    event Unpaused(address account);\n\n    constructor () internal {\n        _paused = false;\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    function pause() public onlyOwner whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract TokenBurner {\n    function burn() public {\n        selfdestruct(address(this));\n    }\n}\n\n/**\n * @title BurnableTimelock\n * @dev BurnableTimelock is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time.\n *\n */\ncontract BurnableTimelock is Ownable {\n    using SafeMath for uint256;\n\n    ERC20 private _token;\n\n    address private _beneficiary;\n\n    uint256 private _requestTime;\n\n    uint256 private _releaseDelay;\n\n    bool private _releaseRequested;\n\n    uint256 private _totalBurned;\n\n    event BeneficiaryChanged(address indexed previousAccount, address indexed newAccount);\n    event ReleaseRequested(address account);\n\n    constructor (address token, address beneficiary, uint256 releaseTime, uint256 releaseDelay) public {\n        require(releaseTime > block.timestamp);\n        require(releaseDelay >= 864000 && releaseDelay <= 3888000); // Min = 10 days, Max = 45 days\n        require(beneficiary != address(0));\n        _token = ERC20(token);\n        _beneficiary = beneficiary;\n        _requestTime = releaseTime - releaseDelay;\n        _releaseDelay = releaseDelay;\n        _releaseRequested = false;\n    }\n\n    function token() public view returns (ERC20) {\n        return _token;\n    }\n\n    function beneficiary() public view returns (address) {\n        return _beneficiary;\n    }\n\n    function releaseTime() public view returns (uint256) {\n        return _requestTime + _releaseDelay;\n    }\n\n    function releaseDelay() public view returns (uint256) {\n        return _releaseDelay;\n    }\n\n    function releaseRequested() public view returns (bool) {\n        return _releaseRequested;\n    }\n\n    function totalBurned() public view returns (uint256) {\n        return _totalBurned;\n    }\n\n    function tokenBalance() public view returns (uint256) {\n        return _token.balanceOf(address(this));\n    }\n\n    function changeBeneficiary(address newBeneficiary) public onlyOwner whenPaused {\n        require(newBeneficiary != address(0));\n        emit BeneficiaryChanged(_beneficiary, newBeneficiary);\n        _beneficiary = newBeneficiary;\n    }\n\n    function release() public whenNotPaused {\n        require(block.timestamp >= _requestTime);\n\n        if (!_releaseRequested) {\n            _releaseRequested = true;\n            emit ReleaseRequested(msg.sender);\n        } else {\n            require(block.timestamp >= (_requestTime + _releaseDelay));\n\n            uint256 amount = _token.balanceOf(address(this));\n            require(amount > 0);\n            _token.transfer(_beneficiary, amount);\n        }\n    }\n\n    function burn(uint256 burnAmount) public onlyOwner whenNotPaused {\n        require(burnAmount > 0);\n\n        uint256 amount = _token.balanceOf(address(this));\n        require(amount >= burnAmount);\n\n        TokenBurner burner = new TokenBurner();\n        if (_token.transfer(address(burner), burnAmount)) {\n            _totalBurned = _totalBurned.add(burnAmount);\n            burner.burn();\n        }\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051608080610cb2833981016040818152825160208401519184015160609094015160008054600160a860020a03191633600160a060020a039081169190911780835593969495929316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a342821161008e57600080fd5b620d2f0081101580156100a45750623b53808111155b15156100af57600080fd5b600160a060020a03831615156100c457600080fd5b60018054600160a060020a03958616600160a060020a0319918216179091556002805494909516931692909217909255908190036003556004556005805460ff19169055610b9b806101176000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166338af3eed81146100f55780633f4ba83a1461012657806342966c681461013d5780635c975abb14610155578063623948ca1461017e578063715018a6146101935780637195bf23146101a85780638456cb59146101cf57806386d1a69f146101e45780638da5cb5b146101f95780638f32d59b1461020e5780639e1a4d1914610223578063b91d400114610238578063d89135cd1461024d578063dc07065714610262578063f2fde38b14610283578063fc0c546a146102a4575b600080fd5b34801561010157600080fd5b5061010a6102b9565b60408051600160a060020a039092168252519081900360200190f35b34801561013257600080fd5b5061013b6102c8565b005b34801561014957600080fd5b5061013b60043561034f565b34801561016157600080fd5b5061016a610581565b604080519115158252519081900360200190f35b34801561018a57600080fd5b5061016a610591565b34801561019f57600080fd5b5061013b61059a565b3480156101b457600080fd5b506101bd610604565b60408051918252519081900360200190f35b3480156101db57600080fd5b5061013b61060a565b3480156101f057600080fd5b5061013b610696565b34801561020557600080fd5b5061010a61086c565b34801561021a57600080fd5b5061016a61087b565b34801561022f57600080fd5b506101bd610890565b34801561024457600080fd5b506101bd61092c565b34801561025957600080fd5b506101bd610936565b34801561026e57600080fd5b5061013b600160a060020a036004351661093c565b34801561028f57600080fd5b5061013b600160a060020a03600435166109e5565b3480156102b057600080fd5b5061010a610a01565b600254600160a060020a031690565b6102d061087b565b15156102db57600080fd5b60005460a060020a900460ff1615156102f357600080fd5b6000805474ff00000000000000000000000000000000000000001916905560408051600160a060020a033316815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b60008061035a61087b565b151561036557600080fd5b60005460a060020a900460ff161561037c57600080fd5b6000831161038957600080fd5b600154604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a033081166004830152915191909216916370a082319160248083019260209291908290030181600087803b1580156103f157600080fd5b505af1158015610405573d6000803e3d6000fd5b505050506040513d602081101561041b57600080fd5b505191508282101561042c57600080fd5b610434610aa6565b604051809103906000f080158015610450573d6000803e3d6000fd5b50600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03808516600483015260248201889052915193945091169163a9059cbb916044808201926020929091908290030181600087803b1580156104c257600080fd5b505af11580156104d6573d6000803e3d6000fd5b505050506040513d60208110156104ec57600080fd5b50511561057c57600654610506908463ffffffff610a1016565b60068190555080600160a060020a03166344df8e706040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561056357600080fd5b505af1158015610577573d6000803e3d6000fd5b505050505b505050565b60005460a060020a900460ff1690565b60055460ff1690565b6105a261087b565b15156105ad57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60045490565b61061261087b565b151561061d57600080fd5b60005460a060020a900460ff161561063457600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a17905560408051600160a060020a033316815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b6000805460a060020a900460ff16156106ae57600080fd5b6003544210156106bd57600080fd5b60055460ff161515610717576005805460ff1916600117905560408051600160a060020a033316815290517fe70bd4ef9c3b7892801256537d3b5e7bb4da6a9ff50fc387e1b4c84bd400c1ac9181900360200190a1610869565b6004546003540142101561072a57600080fd5b600154604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a033081166004830152915191909216916370a082319160248083019260209291908290030181600087803b15801561079257600080fd5b505af11580156107a6573d6000803e3d6000fd5b505050506040513d60208110156107bc57600080fd5b50519050600081116107cd57600080fd5b600154600254604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561083f57600080fd5b505af1158015610853573d6000803e3d6000fd5b505050506040513d602081101561057c57600080fd5b50565b600054600160a060020a031690565b60005433600160a060020a0390811691161490565b600154604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a033081166004830152915160009392909216916370a082319160248082019260209290919082900301818787803b1580156108fb57600080fd5b505af115801561090f573d6000803e3d6000fd5b505050506040513d602081101561092557600080fd5b5051905090565b6004546003540190565b60065490565b61094461087b565b151561094f57600080fd5b60005460a060020a900460ff16151561096757600080fd5b600160a060020a038116151561097c57600080fd5b600254604051600160a060020a038084169216907f768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d90600090a36002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6109ed61087b565b15156109f857600080fd5b61086981610a29565b600154600160a060020a031690565b600082820183811015610a2257600080fd5b9392505050565b600160a060020a0381161515610a3e57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60405160ba80610ab68339019056006080604052348015600f57600080fd5b50609c8061001e6000396000f300608060405260043610603e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166344df8e7081146043575b600080fd5b348015604e57600080fd5b5060556057565b005b3073ffffffffffffffffffffffffffffffffffffffff16ff00a165627a7a72305820d12bf451d4491ec4a1935ae0c61a8f35e2e34e1918c9d321601cb1454878e2060029a165627a7a723058206b69c7ff444f4fcd38f81395f2289a4d446baec2650cd10a84c3d7a775e34cca00290000000000000000000000005b11aacb6bddb9ffab908fdce739bf4aed554327000000000000000000000000301df3ab354249b4179be4f4e4ab6e5a6a570738000000000000000000000000000000000000000000000000000000006280428000000000000000000000000000000000000000000000000000000000000d2f00",
  "constructorArguments": "0000000000000000000000005b11aacb6bddb9ffab908fdce739bf4aed554327000000000000000000000000301df3ab354249b4179be4f4e4ab6e5a6a570738000000000000000000000000000000000000000000000000000000006280428000000000000000000000000000000000000000000000000000000000000d2f00"
}