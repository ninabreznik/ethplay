{
  "address": "0x283cc5c26e53d66ed2ea252d986f094b37e6e895",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KyberWrapper",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-28\n*/\n\npragma solidity ^0.5.0;\n\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract KyberNetworkProxyInterface {\n    function maxGasPrice() external view returns(uint);\n    function getUserCapInWei(address user) external view returns(uint);\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\n    function enabled() external view returns(bool);\n    function info(bytes32 id) external view returns(uint);\n\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public\n        returns (uint expectedRate, uint slippageRate);\n\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\n        uint minConversionRate, address walletId, bytes memory hint) public payable returns(uint);\n\n    function trade(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\n        uint minConversionRate, address walletId) public payable returns(uint);\n\n    function swapEtherToToken(ERC20 token, uint minConversionRate) external payable returns(uint);\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external payable returns(uint);\n    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minConversionRate) public returns(uint);\n}\n\n\n\ninterface ExchangeInterface {\n    function swapEtherToToken (uint _ethAmount, address _tokenAddress) payable external returns(uint);\n    function swapTokenToEther (address _tokenAddress, uint _amount) external returns(uint);\n    function swapTokenToToken (address _srcAddr, address _destAddr, uint srcQty) external returns(uint);\n\n    function getExpectedRate(address src, address dest, uint srcQty) external\n        returns (uint expectedRate, uint slippageRate);\n}\n\ncontract KyberWrapper is ExchangeInterface {\n\n    // Kovan\n    // address constant KYBER_INTERFACE = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    // address constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    \n    // Mainnet\n    address constant KYBER_INTERFACE = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n    address constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    function swapEtherToToken (uint _ethAmount, address _tokenAddress) external payable returns(uint) {\n        uint minRate;\n        ERC20 ETH_TOKEN_ADDRESS = ERC20(ETHER_ADDRESS);\n        ERC20 token = ERC20(_tokenAddress);\n\n        KyberNetworkProxyInterface _kyberNetworkProxy = KyberNetworkProxyInterface(KYBER_INTERFACE);\n\n        (, minRate) = _kyberNetworkProxy.getExpectedRate(ETH_TOKEN_ADDRESS, token, _ethAmount);\n\n        //will send back tokens to this contract's address\n        uint destAmount = _kyberNetworkProxy.swapEtherToToken.value(_ethAmount)(token, minRate);\n\n        token.transfer(msg.sender, destAmount);\n\n        return destAmount;\n    }\n    \n    function swapTokenToEther (address _tokenAddress, uint _amount) external returns(uint) {\n        uint minRate;\n        ERC20 ETH_TOKEN_ADDRESS = ERC20(ETHER_ADDRESS);\n        ERC20 token = ERC20(_tokenAddress);\n        \n        KyberNetworkProxyInterface _kyberNetworkProxy = KyberNetworkProxyInterface(KYBER_INTERFACE);\n        \n        (, minRate) = _kyberNetworkProxy.getExpectedRate(token, ETH_TOKEN_ADDRESS, _amount);\n\n        // Mitigate ERC20 Approve front-running attack, by initially setting, allowance to 0\n        require(token.approve(address(_kyberNetworkProxy), 0));\n\n        // Approve tokens so network can take them during the swap\n        token.approve(address(_kyberNetworkProxy), _amount);\n        uint destAmount = _kyberNetworkProxy.swapTokenToEther(token, _amount, minRate);\n\n        msg.sender.transfer(destAmount);\n\n        return destAmount;\n    }\n\n    function swapTokenToToken (address _srcAddr, address _destAddr, uint srcQty) external returns(uint) {\n        uint minRate;\n        ERC20 srcToken = ERC20(_srcAddr);\n        ERC20 destToken = ERC20(_destAddr);\n\n        KyberNetworkProxyInterface _kyberNetworkProxy = KyberNetworkProxyInterface(KYBER_INTERFACE);\n\n        (, minRate) = _kyberNetworkProxy.getExpectedRate(srcToken, destToken, srcQty);\n\n        require(srcToken.approve(address(_kyberNetworkProxy), 0));\n\n        // Approve tokens so network can take them during the swap\n        srcToken.approve(address(_kyberNetworkProxy), srcQty);\n        uint destAmount = _kyberNetworkProxy.swapTokenToToken(srcToken, srcQty, destToken, minRate);\n\n        destToken.transfer(msg.sender, destAmount);\n\n        return destAmount;\n    }\n\n    function getExpectedRate(address _src, address _dest, uint _srcQty) public returns (uint, uint) {\n        return KyberNetworkProxyInterface(KYBER_INTERFACE).getExpectedRate(ERC20(_src), ERC20(_dest), _srcQty);\n    }\n\n    function() payable external {\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50610edb806100206000396000f3fe60806040526004361061003f5760003560e01c806313712c9f1461004157806326680ef8146100d0578063809a9e551461013f57806389c78626146101d5575b005b34801561004d57600080fd5b506100ba6004803603606081101561006457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610237565b6040518082815260200191505060405180910390f35b3480156100dc57600080fd5b50610129600480360360408110156100f357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106c5565b6040518082815260200191505060405180910390f35b34801561014b57600080fd5b506101b86004803603606081101561016257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ab6565b604051808381526020018281526020019250505060405180910390f35b610221600480360360408110156101eb57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bd8565b6040518082815260200191505060405180910390f35b60008060008590506000859050600073818e6fecd516ecc3849daf6845e3ec868087b75590508073ffffffffffffffffffffffffffffffffffffffff1663809a9e558484896040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040805180830381600087803b15801561031757600080fd5b505af115801561032b573d6000803e3d6000fd5b505050506040513d604081101561034157600080fd5b8101908080519060200190929190805190602001909291905050509050809450508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b38260006040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156103ea57600080fd5b505af11580156103fe573d6000803e3d6000fd5b505050506040513d602081101561041457600080fd5b810190808051906020019092919050505061042e57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b382886040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156104b557600080fd5b505af11580156104c9573d6000803e3d6000fd5b505050506040513d60208110156104df57600080fd5b81019080805190602001909291905050505060008173ffffffffffffffffffffffffffffffffffffffff16637409e2eb858986896040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050602060405180830381600087803b1580156105b657600080fd5b505af11580156105ca573d6000803e3d6000fd5b505050506040513d60208110156105e057600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561067a57600080fd5b505af115801561068e573d6000803e3d6000fd5b505050506040513d60208110156106a457600080fd5b81019080805190602001909291905050505080955050505050509392505050565b600080600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90506000859050600073818e6fecd516ecc3849daf6845e3ec868087b75590508073ffffffffffffffffffffffffffffffffffffffff1663809a9e558385896040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040805180830381600087803b1580156107b957600080fd5b505af11580156107cd573d6000803e3d6000fd5b505050506040513d60408110156107e357600080fd5b8101908080519060200190929190805190602001909291905050509050809450508173ffffffffffffffffffffffffffffffffffffffff1663095ea7b38260006040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561088c57600080fd5b505af11580156108a0573d6000803e3d6000fd5b505050506040513d60208110156108b657600080fd5b81019080805190602001909291905050506108d057600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663095ea7b382886040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561095757600080fd5b505af115801561096b573d6000803e3d6000fd5b505050506040513d602081101561098157600080fd5b81019080805190602001909291905050505060008173ffffffffffffffffffffffffffffffffffffffff16633bba21dc8489886040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050602060405180830381600087803b158015610a2457600080fd5b505af1158015610a38573d6000803e3d6000fd5b505050506040513d6020811015610a4e57600080fd5b810190808051906020019092919050505090503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610aa7573d6000803e3d6000fd5b50809550505050505092915050565b60008073818e6fecd516ecc3849daf6845e3ec868087b75573ffffffffffffffffffffffffffffffffffffffff1663809a9e558686866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040805180830381600087803b158015610b8757600080fd5b505af1158015610b9b573d6000803e3d6000fd5b505050506040513d6040811015610bb157600080fd5b81019080805190602001909291908051906020019092919050505091509150935093915050565b600080600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90506000849050600073818e6fecd516ecc3849daf6845e3ec868087b75590508073ffffffffffffffffffffffffffffffffffffffff1663809a9e5584848a6040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040805180830381600087803b158015610ccc57600080fd5b505af1158015610ce0573d6000803e3d6000fd5b505050506040513d6040811015610cf657600080fd5b81019080805190602001909291908051906020019092919050505090508094505060008173ffffffffffffffffffffffffffffffffffffffff16637a2a04568985886040518463ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506020604051808303818588803b158015610da057600080fd5b505af1158015610db4573d6000803e3d6000fd5b50505050506040513d6020811015610dcb57600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610e6557600080fd5b505af1158015610e79573d6000803e3d6000fd5b505050506040513d6020811015610e8f57600080fd5b81019080805190602001909291905050505080955050505050509291505056fea165627a7a72305820e86602e967c632f5b3d95320e5a78a4b4685c789ecfbb52b54fd1fdbe0d4dba60029"
}