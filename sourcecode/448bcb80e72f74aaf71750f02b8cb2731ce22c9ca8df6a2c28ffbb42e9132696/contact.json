{
  "address": "0x8aed3f09ffaa1e6246e3b4b5790f13e1976f6055",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "ZontoToken",
  "contractName": "ZontoToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-14\n*/\n\npragma solidity ^0.4.9;\n\ncontract ERC223 {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  \n  function name() constant returns (string _name);\n  function symbol() constant returns (string _symbol);\n  function decimals() constant returns (uint8 _decimals);\n  function totalSupply() constant returns (uint256 _supply);\n\n  function transfer(address to, uint value) returns (bool ok);\n  function transfer(address to, uint value, bytes data) returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\ncontract ContractReceiver {\n     \n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n    \n    \n    function tokenFallback(address _from, uint _value, bytes _data){\n      TKN memory tkn;\n      tkn.sender = _from;\n      tkn.value = _value;\n      tkn.data = _data;\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n      tkn.sig = bytes4(u);\n      \n      /* tkn variable is analogue of msg variable of Ether transaction\n      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n      *  tkn.data is data of token transaction   (analogue of msg.data)\n      *  tkn.sig is 4 bytes signature of function\n      *  if data of token transaction is a function execution\n      */\n    }\n}\n /**\n * ERC23 token by Dexaran\n *\n * https://github.com/Dexaran/ERC23-tokens\n */\n \n \n /* https://github.com/LykkeCity/EthereumApiDotNetCore/blob/master/src/ContractBuilder/contracts/token/SafeMath.sol */\ncontract SafeMath {\n    uint256 constant public MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert(x <= MAX_UINT256 - y);\n        return x + y;\n    }\n\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        assert(x >= y);\n        return x - y;\n    }\n\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        if (y == 0) return 0;\n        assert(x <= MAX_UINT256 / y);\n        return x * y;\n    }\n}\n \n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\ncontract Ownable {\n  address public owner;\n\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    assert(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\ncontract Haltable is Ownable {\n  bool public halted;\n\n  modifier stopInEmergency {\n    assert(!halted);\n    _;\n  }\n\n  modifier onlyInEmergency {\n    assert(halted);\n    _;\n  }\n\n  // called by the owner on emergency, triggers stopped state\n  function halt() external onlyOwner {\n    halted = true;\n  }\n\n  // called by the owner on end of emergency, returns to normal state\n  function unhalt() external onlyOwner onlyInEmergency {\n    halted = false;\n  }\n\n}\n\ncontract ERC223Token is ERC223, SafeMath, Haltable {\n\n  mapping(address => uint) balances;\n  \n  string public name;\n  string public symbol;\n  uint8 public decimals;\n  uint256 public totalSupply;\n  \n  \n  // Function to access name of token .\n  function name() constant returns (string _name) {\n      return name;\n  }\n  // Function to access symbol of token .\n  function symbol() constant returns (string _symbol) {\n      return symbol;\n  }\n  // Function to access decimals of token .\n  function decimals() constant returns (uint8 _decimals) {\n      return decimals;\n  }\n  // Function to access total supply of tokens .\n  function totalSupply() constant returns (uint256 _totalSupply) {\n      return totalSupply;\n  }\n  \n  \n\n  // Function that is called when a user or another contract wants to transfer funds .\n  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n      \n    if(isContract(_to)) {\n        return transferToContract(_to, _value, _data);\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n}\n  \n  // Standard function transfer similar to ERC20 transfer with no _data .\n  // Added due to backwards compatibility reasons .\n  function transfer(address _to, uint _value) returns (bool success) {\n      \n    //standard function transfer similar to ERC20 transfer with no _data\n    //added due to backwards compatibility reasons\n    bytes memory empty;\n    if(isContract(_to)) {\n        return transferToContract(_to, _value, empty);\n    }\n    else {\n        return transferToAddress(_to, _value, empty);\n    }\n}\n\n//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n  function isContract(address _addr) private returns (bool is_contract) {\n      uint length;\n      assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        if(length>0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n  //function that is called when transaction target is an address\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n    assert(balanceOf(msg.sender) >= _value);\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n    balances[_to] = safeAdd(balanceOf(_to), _value);\n    Transfer(msg.sender, _to, _value, _data);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  \n  //function that is called when transaction target is a contract\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n    assert(balanceOf(msg.sender) >= _value);\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n    balances[_to] = safeAdd(balanceOf(_to), _value);\n    ContractReceiver reciever = ContractReceiver(_to);\n    reciever.tokenFallback(msg.sender, _value, _data);\n    Transfer(msg.sender, _to, _value, _data);\n    Transfer(msg.sender, _to, _value);\n    return true;\n}\n\n\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n  \n  \n}\n\ncontract ZontoToken is ERC223Token {\n\n    address public beneficiary;\n    event Buy(address indexed participant, uint tokens, uint eth);\n    event GoalReached(uint amountRaised);\n\n    uint public cap = 20000000000000;\n    uint public price;\n    uint public collectedTokens;\n    uint public collectedEthers;\n\n    uint public tokensSold = 0;\n    uint public weiRaised = 0;\n    uint public investorCount = 0;\n\n    uint public startTime;\n    uint public endTime;\n\n    bool public presaleFinished = false;\n\n  /**\n   * @dev Contructor that gives msg.sender all of existing tokens. \n   */\n    function ZontoToken() {\n            \n        name = \"ZONTO Token\";\n        symbol = \"ZONTO\";\n        decimals = 8;\n        totalSupply = 500000000000000;\n    \n        balances[msg.sender] = totalSupply;\n        \n        beneficiary = 0x0980eaD74d176025F2962f8b5535346c77ffd2f5;\n        price = 150;\n        startTime = 1502706677;\n        endTime = startTime + 14 * 1 days;\n        \n    }\n    \n    modifier onlyAfter(uint time) {\n        assert(now >= time);\n        _;\n    }\n\n    modifier onlyBefore(uint time) {\n        assert(now <= time);\n        _;\n    }\n    \n    function () payable stopInEmergency {\n        assert(msg.value >= 0.01 * 1 ether);\n        doPurchase();\n    }\n    \n    function doPurchase() private onlyAfter(startTime) onlyBefore(endTime) {\n\n        assert(!presaleFinished);\n        \n        uint tokens = msg.value * price / 10000000000;\n\n        if (balanceOf(msg.sender) == 0) investorCount++;\n        \n        balances[owner] -= tokens;\n        balances[msg.sender] += tokens;\n        \n        collectedTokens = safeAdd(collectedTokens, tokens);\n        collectedEthers = safeAdd(collectedEthers, msg.value);\n        \n        weiRaised = safeAdd(weiRaised, msg.value);\n        tokensSold = safeAdd(tokensSold, tokens);\n        \n        bytes memory empty;\n        Transfer(owner, msg.sender, tokens, empty);\n        Transfer(owner, msg.sender, tokens);\n        \n        Buy(msg.sender, tokens, msg.value);\n        \n        if (collectedTokens >= cap) {\n            GoalReached(collectedTokens);\n        }\n\n    }\n    \n    function withdraw() onlyOwner onlyAfter(endTime) returns (bool) {\n        if (!beneficiary.send(collectedEthers)) {\n            return false;\n        }\n        presaleFinished = true;\n        return true;\n    }\n    \n    \n}",
  "bytecode": "60606040526512309ce540006008556000600c819055600d819055600e556011805460ff1916905534156200003357600080fd5b5b5b60018054600160a060020a03191633600160a060020a03161790555b60408051908101604052600b81527f5a4f4e544f20546f6b656e000000000000000000000000000000000000000000602082015260039080516200009a9291602001906200015a565b5060408051908101604052600581527f5a4f4e544f00000000000000000000000000000000000000000000000000000060208201526004908051620000e49291602001906200015a565b506005805460ff191660081790556601c6bf526340006006819055600160a060020a03331660009081526002602052604090205560078054600160a060020a031916730980ead74d176025f2962f8b5535346c77ffd2f517905560966009556359917bf5600f556359a3f0f56010555b62000204565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019d57805160ff1916838001178555620001cd565b82800160010185558215620001cd579182015b82811115620001cd578251825591602001919060010190620001b0565b5b50620001dc929150620001e0565b5090565b6200020191905b80821115620001dc5760008155600101620001e7565b5090565b90565b6110c280620002146000396000f300606060405236156101465763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630200b10d811461017857806306fdde031461019d57806318160ddd14610228578063313ce5671461024d5780633197cbb61461027657806333a581d21461029b578063355274ea146102c057806338af3eed146102e55780633ccfd60b146103145780634042b66f1461033b578063518ab2a8146103605780635ed7ca5b1461038557806370a082311461039a578063787e9137146103cb57806378e97925146103f05780638da5cb5b1461041557806390b5e6d91461044457806395d89b411461046b578063a035b1fe146104f6578063a9059cbb1461051b578063b9b8af0b14610551578063be45fd6214610578578063cb3e64fd146105f1578063d7e64c0014610606578063f2fde38b1461062b575b5b60015460a060020a900460ff161561015b57fe5b662386f26fc1000034101561016c57fe5b61017461064c565b5b5b005b341561018357600080fd5b61018b61088b565b60405190815260200160405180910390f35b34156101a857600080fd5b6101b0610891565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ed5780820151818401525b6020016101d4565b50505050905090810190601f16801561021a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023357600080fd5b61018b61093a565b60405190815260200160405180910390f35b341561025857600080fd5b610260610941565b60405160ff909116815260200160405180910390f35b341561028157600080fd5b61018b61094b565b60405190815260200160405180910390f35b34156102a657600080fd5b61018b610951565b60405190815260200160405180910390f35b34156102cb57600080fd5b61018b610957565b60405190815260200160405180910390f35b34156102f057600080fd5b6102f861095d565b604051600160a060020a03909116815260200160405180910390f35b341561031f57600080fd5b61032761096c565b604051901515815260200160405180910390f35b341561034657600080fd5b61018b6109eb565b60405190815260200160405180910390f35b341561036b57600080fd5b61018b6109f1565b60405190815260200160405180910390f35b341561039057600080fd5b6101746109f7565b005b34156103a557600080fd5b61018b600160a060020a0360043516610a37565b60405190815260200160405180910390f35b34156103d657600080fd5b61018b610a56565b60405190815260200160405180910390f35b34156103fb57600080fd5b61018b610a5c565b60405190815260200160405180910390f35b341561042057600080fd5b6102f8610a62565b604051600160a060020a03909116815260200160405180910390f35b341561044f57600080fd5b610327610a71565b604051901515815260200160405180910390f35b341561047657600080fd5b6101b0610a7a565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ed5780820151818401525b6020016101d4565b50505050905090810190601f16801561021a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561050157600080fd5b61018b610b23565b60405190815260200160405180910390f35b341561052657600080fd5b610327600160a060020a0360043516602435610b29565b604051901515815260200160405180910390f35b341561055c57600080fd5b610327610b69565b604051901515815260200160405180910390f35b341561058357600080fd5b61032760048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610b7995505050505050565b604051901515815260200160405180910390f35b34156105fc57600080fd5b610174610bb1565b005b341561061157600080fd5b61018b610c01565b60405190815260200160405180910390f35b341561063657600080fd5b610174600160a060020a0360043516610c07565b005b6000610656611072565b600f54428190101561066457fe5b601054428190111561067257fe5b60115460ff161561067f57fe5b6009546402540be4009034025b04935061069833610a37565b15156106a857600e805460010190555b600154600160a060020a039081166000908152600260205260408082208054889003905533909216815220805485019055600a546106e69085610c5c565b600a55600b546106f69034610c5c565b600b55600d546107069034610c5c565b600d55600c546107169085610c5c565b600c55826040518082805190602001908083835b6020831061074a57805182525b601f19909201916020918201910161072a565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020600154600160a060020a0333811691167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168760405190815260200160405180910390a4600154600160a060020a0333811691167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a333600160a060020a03167f1cbc5ab135991bd2b6a4b034a04aa2aa086dac1371cb9b16b8b5e2ed6b036bed853460405191825260208201526040908101905180910390a2600854600a5410610882577ffbfd8ab7c24300fa9888cd721c8565a7da56759384781283684dcf7c7c4a846b600a5460405190815260200160405180910390a15b5b5b505b505050565b600b5481565b610899611072565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092f5780601f106109045761010080835404028352916020019161092f565b820191906000526020600020905b81548152906001019060200180831161091257829003601f168201915b505050505090505b90565b6006545b90565b60055460ff165b90565b60105481565b60001981565b60085481565b600754600160a060020a031681565b60015460009033600160a060020a0390811691161461098757fe5b601054428190101561099557fe5b600754600b54600160a060020a039091169080156108fc0290604051600060405180830381858888f1935050505015156109d257600091506109e5565b6011805460ff1916600190811790915591505b5b505b90565b600d5481565b600c5481565b60015433600160a060020a03908116911614610a0f57fe5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790555b5b565b600160a060020a0381166000908152600260205260409020545b919050565b600a5481565b600f5481565b600154600160a060020a031681565b60115460ff1681565b610a82611072565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561092f5780601f106109045761010080835404028352916020019161092f565b820191906000526020600020905b81548152906001019060200180831161091257829003601f168201915b505050505090505b90565b60095481565b6000610b33611072565b610b3c84610c78565b15610b5357610b4c848483610c99565b9150610b61565b610b4c848483610ef7565b91505b5b5092915050565b60015460a060020a900460ff1681565b6000610b8484610c78565b15610b9b57610b94848484610c99565b9050610ba9565b610b94848484610ef7565b90505b5b9392505050565b60015433600160a060020a03908116911614610bc957fe5b60015460a060020a900460ff161515610bde57fe5b6001805474ff0000000000000000000000000000000000000000191690555b5b5b565b600e5481565b60015433600160a060020a03908116911614610c1f57fe5b600160a060020a03811615610c57576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b6000600019829003831115610c6d57fe5b508181015b92915050565b6000813b81811115610c8d5760019150610c92565b600091505b5b50919050565b60008083610ca633610a37565b1015610cae57fe5b610cc0610cba33610a37565b8561105b565b600160a060020a033316600090815260026020526040902055610ceb610ce586610a37565b85610c5c565b600160a060020a03861660008181526002602052604090819020929092558692509063c0ee0b8a90339087908790518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d9e5780820151818401525b602001610d85565b50505050905090810190601f168015610dcb5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515610deb57600080fd5b6102c65a03f11515610dfc57600080fd5b505050826040518082805190602001908083835b60208310610e3057805182525b601f199092019160209182019101610e10565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902085600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168760405190815260200160405180910390a484600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3600191505b509392505050565b600082610f0333610a37565b1015610f0b57fe5b610f1d610f1733610a37565b8461105b565b600160a060020a033316600090815260026020526040902055610f48610f4285610a37565b84610c5c565b600160a060020a03851660009081526002602052604090819020919091558290518082805190602001908083835b60208310610f9657805182525b601f199092019160209182019101610f76565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902084600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168660405190815260200160405180910390a483600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a35060015b9392505050565b60008183101561106757fe5b508082035b92915050565b60206040519081016040526000815290565b602060405190810160405260008152905600a165627a7a72305820222618c566daccd1defaa0e48cd1607dacb74024ea8c94d5b15ce04183de05ae0029"
}