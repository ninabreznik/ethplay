{
  "address": "0x4789dd7face0194d5f49fb38cd122ad062620fc8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "JIB",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-17\n*/\n\npragma solidity 0.4.23;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n\nlibrary SafeMath \n{\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n\n  function mul(uint256 a, uint256 b) internal pure returns(uint256 c) \n  {\n     if (a == 0) \n     {\n     \treturn 0;\n     }\n     c = a * b;\n     assert(c / a == b);\n     return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n\n  function div(uint256 a, uint256 b) internal pure returns(uint256) \n  {\n     return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) \n  {\n     assert(b <= a);\n     return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n\n  function add(uint256 a, uint256 b) internal pure returns(uint256 c) \n  {\n     c = a + b;\n     assert(c >= a);\n     return c;\n  }\n}\n\ncontract ERC20Interface\n{\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address _who) public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function allowance(address _owner, address _spender) public view returns (uint256);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n    function approve(address _spender, uint256 _value) public returns (bool);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n\ninterface tokenRecipient \n{ \n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; \n}\n\n/**\n * @title Basic token\n */\n\ncontract JIB is ERC20Interface\n{\n    using SafeMath for uint256;\n   \n    uint256 constant public TOKEN_DECIMALS = 10 ** 18;\n    string public constant name            = \"Jibbit Token\";\n    string public constant symbol          = \"JIB\";\n    uint256 public totalTokenSupply        = 700000000 * TOKEN_DECIMALS;\n    uint8 public constant decimals         = 18;\n    address public owner;\n    uint256 public totalBurned;\n    bool stopped    = false;\n    bool saleClosed = false;\n\n    event Burn(address indexed _burner, uint256 _value);\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n    event OwnershipRenounced(address indexed _previousOwner);\n\n    /** mappings **/ \n    mapping(address => uint256) public  balances;\n    mapping(address => mapping(address => uint256)) internal  allowed;\n    mapping(address => bool) public allowedAddresses;\n \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n\n    modifier onlyOwner() \n    {\n       require(msg.sender == owner);\n       _;\n    }\n    \n    /** constructor **/\n\n    constructor() public\n    {\n       owner = msg.sender;\n       balances[owner] = totalTokenSupply;\n       allowedAddresses[owner] = true;\n\n       emit Transfer(address(0x0), owner, balances[owner]);\n    }\n\n    /**\n     * @dev This function has to be triggered once after ICO sale is completed\n     */\n\n    function saleCompleted() external onlyOwner\n    {\n        saleClosed = true;\n    }\n\n    /**\n     * @dev To pause token transfer. In general pauseTransfer can be triggered\n     *      only on some specific error conditions \n     */\n\n    function pauseTransfer() external onlyOwner\n    {\n        stopped = true;\n    }\n\n    /**\n     * @dev To resume token transfer\n     */\n\n    function resumeTransfer() external onlyOwner\n    {\n        stopped = false;\n    }\n\n    /**\n     * @dev To add address into whitelist\n     */\n\n    function addToWhitelist(address _newAddr) public onlyOwner\n    {\n       allowedAddresses[_newAddr] = true;\n    }\n\n    /**\n     * @dev To remove address from whitelist\n     */\n\n    function removeFromWhitelist(address _newAddr) public onlyOwner\n    {\n       allowedAddresses[_newAddr] = false;\n    }\n\n    /**\n     * @dev To check whether address is whitelist or not\n     */\n\n    function isWhitelisted(address _addr) public view returns (bool) \n    {\n       return allowedAddresses[_addr];\n    }\n\n    /**\n     * @dev Burn specified number of GSCP tokens\n     * This function will be called once after all remaining tokens are transferred from\n     * smartcontract to owner wallet\n     */\n\n    function burn(uint256 _value) onlyOwner public returns (bool) \n    {\n       require(!stopped);\n       require(_value <= balances[msg.sender]);\n\n       address burner = msg.sender;\n\n       balances[burner] = balances[burner].sub(_value);\n       totalTokenSupply = totalTokenSupply.sub(_value);\n       totalBurned      = totalBurned.add(_value);\n\n       emit Burn(burner, _value);\n       emit Transfer(burner, address(0x0), _value);\n       return true;\n    }     \n\n    /**\n     * @dev total number of tokens in existence\n     * @return An uint256 representing the total number of tokens in existence\n     */\n\n    function totalSupply() public view returns(uint256 _totalSupply) \n    {\n       _totalSupply = totalTokenSupply;\n       return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param _owner The address to query the the balance of \n     * @return An uint256 representing the amount owned by the passed address\n     */\n\n    function balanceOf(address _owner) public view returns (uint256) \n    {\n       return balances[_owner];\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amout of tokens to be transfered\n     */\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool)     \n    {\n       require(!stopped);\n\n       if(!saleClosed && !isWhitelisted(msg.sender))\n          return false;\n\n       if (_value == 0) \n       {\n           emit Transfer(_from, _to, _value);  // Follow the spec to launch the event when value is equal to 0\n           return true;\n       }\n\n       require(_to != address(0x0));\n       require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value >= 0);\n\n       balances[_from] = balances[_from].sub(_value);\n       allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n       balances[_to] = balances[_to].add(_value);\n\n       emit Transfer(_from, _to, _value);\n       return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds\n     * @param _tokens The amount of tokens to be spent\n     */\n\n    function approve(address _spender, uint256 _tokens) public returns(bool)\n    {\n       require(!stopped);\n       require(_spender != address(0x0));\n\n       allowed[msg.sender][_spender] = _tokens;\n\n       emit Approval(msg.sender, _spender, _tokens);\n       return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\n     * @param _owner address The address which owns the funds\n     * @param _spender address The address which will spend the funds\n     * @return A uint256 specifing the amount of tokens still avaible for the spender\n     */\n\n    function allowance(address _owner, address _spender) public view returns(uint256)\n    {\n       require(!stopped);\n       require(_owner != address(0x0) && _spender != address(0x0));\n\n       return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev transfer token for a specified address\n     * @param _address The address to transfer to\n     * @param _tokens The amount to be transferred\n     */\n\n    function transfer(address _address, uint256 _tokens) public returns(bool)\n    {\n       require(!stopped);\n\n       if(!saleClosed && !isWhitelisted(msg.sender))\n          return false;\n\n       if (_tokens == 0) \n       {\n           emit Transfer(msg.sender, _address, _tokens);  // Follow the spec to launch the event when tokens are equal to 0\n           return true;\n       }\n\n       require(_address != address(0x0));\n       require(balances[msg.sender] >= _tokens);\n\n       balances[msg.sender] = (balances[msg.sender]).sub(_tokens);\n       balances[_address] = (balances[_address]).add(_tokens);\n\n       emit Transfer(msg.sender, _address, _tokens);\n       return true;\n    }\n\n    /**\n     * @dev transfer ownership of this contract, only by owner\n     * @param _newOwner The address of the new owner to transfer ownership\n     */\n\n    function transferOwnership(address _newOwner)public onlyOwner\n    {\n       require(!stopped);\n       require( _newOwner != address(0x0));\n\n       balances[_newOwner] = (balances[_newOwner]).add(balances[owner]);\n       balances[owner] = 0;\n       owner = _newOwner;\n\n       emit Transfer(msg.sender, _newOwner, balances[_newOwner]);\n   }\n\n   /**\n    * @dev Allows the current owner to relinquish control of the contract\n    * @notice Renouncing to ownership will leave the contract without an owner\n    * It will not be possible to call the functions with the `onlyOwner`\n    * modifier anymore\n    */\n\n   function renounceOwnership() public onlyOwner \n   {\n      require(!stopped);\n\n      owner = address(0x0);\n      emit OwnershipRenounced(owner);\n   }\n\n   /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender\n    */\n\n   function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) \n   {\n      require(!stopped);\n\n      allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n   }\n\n   /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender\n    */\n\n   function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) \n   {\n      uint256 oldValue = allowed[msg.sender][_spender];\n\n      require(!stopped);\n\n      if (_subtractedValue > oldValue) \n      {\n         allowed[msg.sender][_spender] = 0;\n      }\n      else \n      {\n         allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n      }\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n   }\n\n   function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) \n   {\n      require(!stopped);\n\n      tokenRecipient spender = tokenRecipient(_spender);\n\n      if (approve(_spender, _value)) \n      {\n          spender.receiveApproval(msg.sender, _value, this, _extraData);\n          return true;\n      }\n   }\n\n   /**\n    * @dev To transfer back any accidental ERC20 tokens sent to this contract by owner\n    */\n\n   function transferAnyERC20Token(address _tokenAddress, uint256 _tokens) onlyOwner public returns (bool success) \n   {\n      require(!stopped);\n\n      return ERC20Interface(_tokenAddress).transfer(owner, _tokens);\n   }\n\n   /* This unnamed function is called whenever someone tries to send ether to it */\n\n   function () public payable \n   {\n      revert();\n   }\n}",
  "bytecode": "6080604052670de0b6b3a76400006329b92700026000556000600360006101000a81548160ff0219169083151502179055506000600360016101000a81548160ff02191690831515021790555034801561005857600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005460046000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160066000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60046000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3612733806102746000396000f30060806040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461016f578063095ea7b3146101ff57806318160ddd146102645780631ca8b6cb1461028f57806323b872dd146102ba57806327e235e31461033f578063313ce567146103965780633af32abf146103c75780634120657a1461042257806342966c681461047d5780634c833532146104c25780635b7f415c146104d9578063661884631461050457806370a0823114610569578063715018a6146105c057806378261878146105d75780638ab1d681146105ee5780638da5cb5b1461063157806390a701391461068857806395d89b411461069f578063a9059cbb1461072f578063cae9ca5114610794578063d73dd6231461083f578063d89135cd146108a4578063dc39d06d146108cf578063dd62ed3e14610934578063e43252d7146109ab578063f2fde38b146109ee575b600080fd5b34801561017b57600080fd5b50610184610a31565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c45780820151818401526020810190506101a9565b50505050905090810190601f1680156101f15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020b57600080fd5b5061024a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a6a565b604051808215151515815260200191505060405180910390f35b34801561027057600080fd5b50610279610bb4565b6040518082815260200191505060405180910390f35b34801561029b57600080fd5b506102a4610bc0565b6040518082815260200191505060405180910390f35b3480156102c657600080fd5b50610325600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bc6565b604051808215151515815260200191505060405180910390f35b34801561034b57600080fd5b50610380600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611055565b6040518082815260200191505060405180910390f35b3480156103a257600080fd5b506103ab61106d565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103d357600080fd5b50610408600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611072565b604051808215151515815260200191505060405180910390f35b34801561042e57600080fd5b50610463600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110c8565b604051808215151515815260200191505060405180910390f35b34801561048957600080fd5b506104a8600480360381019080803590602001909291905050506110e8565b604051808215151515815260200191505060405180910390f35b3480156104ce57600080fd5b506104d761133d565b005b3480156104e557600080fd5b506104ee6113b6565b6040518082815260200191505060405180910390f35b34801561051057600080fd5b5061054f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113c2565b604051808215151515815260200191505060405180910390f35b34801561057557600080fd5b506105aa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061166f565b6040518082815260200191505060405180910390f35b3480156105cc57600080fd5b506105d56116b8565b005b3480156105e357600080fd5b506105ec6117d9565b005b3480156105fa57600080fd5b5061062f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611852565b005b34801561063d57600080fd5b50610646611909565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561069457600080fd5b5061069d61192f565b005b3480156106ab57600080fd5b506106b46119a8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106f45780820151818401526020810190506106d9565b50505050905090810190601f1680156107215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561073b57600080fd5b5061077a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506119e1565b604051808215151515815260200191505060405180910390f35b3480156107a057600080fd5b50610825600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611ccb565b604051808215151515815260200191505060405180910390f35b34801561084b57600080fd5b5061088a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e6a565b604051808215151515815260200191505060405180910390f35b3480156108b057600080fd5b506108b9612082565b6040518082815260200191505060405180910390f35b3480156108db57600080fd5b5061091a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612088565b604051808215151515815260200191505060405180910390f35b34801561094057600080fd5b50610995600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061220a565b6040518082815260200191505060405180910390f35b3480156109b757600080fd5b506109ec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612322565b005b3480156109fa57600080fd5b50610a2f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123d9565b005b6040805190810160405280600c81526020017f4a696262697420546f6b656e000000000000000000000000000000000000000081525081565b6000600360009054906101000a900460ff16151515610a8857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610ac457600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905080905090565b60005481565b6000600360009054906101000a900460ff16151515610be457600080fd5b600360019054906101000a900460ff16158015610c075750610c0533611072565b155b15610c15576000905061104e565b6000821415610c8c578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061104e565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610cc857600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610d93575081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610da0575060008210155b1515610dab57600080fd5b610dfd82600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126d290919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ecf82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126d290919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fa182600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126eb90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b60046020528060005260406000206000915090505481565b601281565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60066020528060005260406000206000915054906101000a900460ff1681565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561114757600080fd5b600360009054906101000a900460ff1615151561116357600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156111b157600080fd5b33905061120683600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126d290919063ffffffff16565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061125e836000546126d290919063ffffffff16565b600081905550611279836002546126eb90919063ffffffff16565b6002819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5846040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a36001915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561139957600080fd5b6000600360006101000a81548160ff021916908315150217905550565b670de0b6b3a764000081565b600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600360009054906101000a900460ff1615151561146057600080fd5b808311156114ef576000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611583565b61150283826126d290919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561171457600080fd5b600360009054906101000a900460ff1615151561173057600080fd5b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561183557600080fd5b6001600360016101000a81548160ff021916908315150217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118ae57600080fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561198b57600080fd5b6001600360006101000a81548160ff021916908315150217905550565b6040805190810160405280600381526020017f4a4942000000000000000000000000000000000000000000000000000000000081525081565b6000600360009054906101000a900460ff161515156119ff57600080fd5b600360019054906101000a900460ff16158015611a225750611a2033611072565b155b15611a305760009050611cc5565b6000821415611aa7578273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611cc5565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611ae357600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611b3157600080fd5b611b8382600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126d290919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c1882600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126eb90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b600080600360009054906101000a900460ff16151515611cea57600080fd5b849050611cf78585610a6a565b15611e61578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611df1578082015181840152602081019050611dd6565b50505050905090810190601f168015611e1e5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015611e4057600080fd5b505af1158015611e54573d6000803e3d6000fd5b5050505060019150611e62565b5b509392505050565b6000600360009054906101000a900460ff16151515611e8857600080fd5b611f1782600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126eb90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60025481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120e657600080fd5b600360009054906101000a900460ff1615151561210257600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156121c757600080fd5b505af11580156121db573d6000803e3d6000fd5b505050506040513d60208110156121f157600080fd5b8101908080519060200190929190505050905092915050565b6000600360009054906101000a900460ff1615151561222857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156122925750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b151561229d57600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561237e57600080fd5b6001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561243557600080fd5b600360009054906101000a900460ff1615151561245157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561248d57600080fd5b61254060046000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126eb90919063ffffffff16565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060046000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a350565b60008282111515156126e057fe5b818303905092915050565b600081830190508281101515156126fe57fe5b809050929150505600a165627a7a7230582054d121c437e4af12cc425e5f80c0a04993c110393b9de75f0129ee8ac5da69880029"
}