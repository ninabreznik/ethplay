{
  "address": "0x9462eeb9124c99731cc7617348b3937a8f00b11f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Radex",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-10\n*/\n\npragma solidity ^0.4.11;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC223 {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n\n  function name() constant returns (string _name);\n  function symbol() constant returns (string _symbol);\n  function decimals() constant returns (uint8 _decimals);\n  function totalSupply() constant returns (uint256 _supply);\n\n  function transfer(address to, uint value) returns (bool ok);\n  function transfer(address to, uint value, bytes data) returns (bool ok);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n}\n\ncontract ContractReceiver {\n  function tokenFallback(address _from, uint _value, bytes _data);\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  uint8   public decimals;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Radex is ContractReceiver {\n  using SafeMath for uint256;\n\n  struct Order {\n    address owner;\n    address sellToken;\n    address buyToken;\n    uint256 amount;\n    uint256 priceMul;\n    uint256 priceDiv;\n  }\n\n  // fee to be paid towards market makers\n  // fee amount = trade amount divided by feeMultiplier\n  uint256 public  feeMultiplier;\n  address private admin;\n  address private etherAddress = 0x0;\n\n  // person => token => balance\n  mapping(address => mapping(address => uint256)) public balances;\n  mapping(address => mapping(address => uint256)) public commitments;\n\n  mapping(uint256 => Order) orderBook;\n  uint256 public latestOrderId = 0;\n\n  event Deposit(address indexed _token, address indexed _owner, uint256 _amount, uint256 _time);\n  event Withdrawal(address indexed _token, address indexed _owner, uint256 _amount, uint256 _time);\n\n  event NewOrder(uint256 _id, address indexed _owner, address indexed _sellToken, address indexed _buyToken, uint256 _amount, uint256 _priceMul, uint256 _priceDiv, uint256 _time);\n  event OrderCancelled(uint256 indexed _id, uint256 _time);\n  event OrderFulfilled(uint256 indexed _id, uint256 _time);\n\n  event MarketMaker(address indexed _owner, address indexed _token, uint256 _amount, uint256 _time);\n  event Trade(address indexed _from, address indexed _to, uint256 indexed _orderId, uint256 _soldTokens, uint256 _boughtTokens, uint256 _time);\n\n  function Radex() {\n    feeMultiplier = 1000;\n    admin = msg.sender;\n  }\n\n  function createOrder(address sellToken, address buyToken, uint256 amount, uint256 priceMul, uint256 priceDiv) returns(uint256 orderId) {\n    if (amount == 0) { revert(); }\n    if (priceMul == 0) { revert(); }\n    if (priceDiv == 0) { revert(); }\n    if (sellToken == buyToken) { revert(); }\n    if (balances[msg.sender][sellToken] < amount) { revert(); }\n    if (amount.mul(priceMul).div(priceDiv) == 0) { revert(); }\n\n    orderId = latestOrderId++;\n    orderBook[orderId] = Order(msg.sender, sellToken, buyToken, amount, priceMul, priceDiv);\n\n    balances[msg.sender][sellToken] = balances[msg.sender][sellToken].sub(amount);\n    commitments[msg.sender][sellToken] = commitments[msg.sender][sellToken].add(amount);\n\n    NewOrder(orderId, msg.sender, sellToken, buyToken, amount, priceMul, priceDiv, now);\n  }\n\n  function cancelOrder(uint256 orderId) {\n    Order storage order = orderBook[orderId];\n    if (order.amount == 0) { revert(); }\n    if (msg.sender != order.owner) { revert(); }\n\n    commitments[msg.sender][order.sellToken] = commitments[msg.sender][order.sellToken].sub(order.amount);\n    balances[msg.sender][order.sellToken] = balances[msg.sender][order.sellToken].add(order.amount);\n\n    OrderCancelled(orderId, now);\n  }\n\n  function executeOrder(uint256 orderId, uint256 amount) {\n    if (orderId > latestOrderId) { revert(); }\n    Order storage order    = orderBook[orderId];\n    uint256 buyTokenAmount = amount.mul(order.priceMul).div(order.priceDiv);\n    if (amount == 0) { revert(); }\n    if (order.amount < amount) { revert(); }\n    if (msg.sender == order.owner) { revert(); }\n    if (balances[msg.sender][order.buyToken] < buyTokenAmount) { revert(); }\n\n    uint256 fee = amount.div(feeMultiplier);\n\n    balances[order.owner][order.buyToken]     = balances[order.owner][order.buyToken].add(buyTokenAmount);\n    balances[msg.sender][order.buyToken]      = balances[msg.sender][order.buyToken].sub(buyTokenAmount);\n    balances[msg.sender][order.sellToken]     = balances[msg.sender][order.sellToken].add(amount).sub(fee);\n    balances[order.owner][order.sellToken]    = balances[order.owner][order.sellToken].add(fee);\n\n    commitments[order.owner][order.sellToken] = commitments[order.owner][order.sellToken].sub(amount);\n    order.amount = order.amount.sub(amount);\n    if (order.amount == 0) { OrderFulfilled(orderId, now); }\n\n    Trade(msg.sender, order.owner, orderId, amount, buyTokenAmount, now);\n    MarketMaker(order.owner, order.sellToken, fee, now);\n  }\n\n\n  function redeem(address token, uint256 value) {\n    if (value == 0) { revert(); }\n    address caller = msg.sender;\n    if (value > balances[caller][token]) { revert(); }\n\n    balances[caller][token] = balances[caller][token].sub(value);\n    // ETH transfers and token transfers need to be handled differently\n    if (token == etherAddress) {\n      caller.transfer(value);\n    } else {\n      ERC223(token).transfer(caller, value);\n    }\n    Withdrawal(token, msg.sender, value, now);\n  }\n\n  function balanceOf(address token, address user) constant returns (uint256) {\n    return balances[user][token];\n  }\n\n  function commitmentsOf(address token, address user) constant returns (uint256) {\n    return commitments[user][token];\n  }\n\n  // deposits\n  // we're not using the third argument so we comment it out\n  // to silence solidity linter warnings\n  function tokenFallback(address _from, uint _value, bytes /* _data */) {\n    // ERC223 token deposit handler\n    balances[_from][msg.sender] = balances[_from][msg.sender].add(_value);\n    Deposit(msg.sender, _from, _value, now);\n  }\n\n  function fund() payable {\n    // ETH deposit handler\n    balances[msg.sender][etherAddress] = balances[msg.sender][etherAddress].add(msg.value);\n    Deposit(etherAddress, msg.sender, msg.value, now);\n  }\n\n  // register the ERC20<>ERC223 pair with the smart contract\n  function register(address erc20token, address erc223token) {\n    if (msg.sender != admin) { revert(); } // only owner\n    ERC20 erc20 = ERC20(erc20token);\n    uint256 supply = erc20.totalSupply();\n    erc20.approve(erc223token, supply);\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"priceMul\",\"type\":\"uint256\"},{\"name\":\"priceDiv\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestOrderId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20token\",\"type\":\"address\"},{\"name\":\"erc223token\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"commitments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"commitmentsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_sellToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_buyToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_priceMul\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_priceDiv\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"NewOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"OrderFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"MarketMaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_soldTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_boughtTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"}]",
  "bytecode": ""
}