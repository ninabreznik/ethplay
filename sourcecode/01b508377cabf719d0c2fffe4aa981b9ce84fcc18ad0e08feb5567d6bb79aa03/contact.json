{
  "address": "0x42fdf1a3ae9f83e80690490ebc0a3b04c5b68de5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CCBank",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-11\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\nlibrary Objects {\n    struct Investment {\n        uint256 planId;\n        uint256 investmentDate;\n        uint256 investment;\n        uint256 lastWithdrawalDate;\n        uint256 currentDividends;\n        bool isExpired;\n        bool isReInvest;\n    }\n\n    struct Plan {\n        uint256 dailyInterest;\n        uint256 term; //0 means unlimited\n        uint256 limit; //0 means unlimited\n        uint256 perInvestorLimit;\n        uint256 leftAmount;\n        uint256 lastUpdateDate;\n    }\n\n    struct Investor {\n        address addr;\n        uint256 referrerEarnings;\n        uint256 availableReferrerEarnings;\n        uint256 referrer;\n        uint256 planCount;\n        mapping(uint256 => Investment) plans;\n        uint256 level1RefCount;\n        uint256 level2RefCount;\n        uint256 level3RefCount;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event onOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0));\n        emit onOwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\ncontract CCBank is Ownable {\n    using SafeMath for uint256;\n    uint256 public constant DEVELOPER_RATE = 30; //per thousand\n    uint256 public constant MARKETING_RATE = 70;\n    uint256 public constant REFERENCE_RATE = 80;\n    uint256 public constant REFERENCE_LEVEL1_RATE = 50;\n    uint256 public constant REFERENCE_LEVEL2_RATE = 20;\n    uint256 public constant REFERENCE_LEVEL3_RATE = 10;\n    // uint256 public constant REFERENCE_SELF_RATE = 5;\n    uint256 public constant MINIMUM = 0.01 ether; // 0.01eth, minimum investment needed\n    uint256 public constant REFERRER_CODE = 3466; //default\n\n    uint256 public latestReferrerCode;\n    uint256 private totalInvestments_;\n\n    address private developerAccount_;\n    address private marketingAccount_;\n    address private referenceAccount_;\n\n    mapping(address => uint256) public address2UID;\n    mapping(uint256 => Objects.Investor) public uid2Investor;\n    Objects.Plan[] private investmentPlans_;\n\n    event onInvest(address investor, uint256 amount);\n    event onReinvest(address investor, uint256 amount);\n    event onGrant(address grantor, address beneficiary, uint256 amount);\n    event onWithdraw(address investor, uint256 amount);\n\n    /**\n     * @dev Constructor Sets the original roles of the contract\n     */\n\n    constructor() public {\n        developerAccount_ = msg.sender;\n        marketingAccount_ = msg.sender;\n        referenceAccount_ = msg.sender;\n        _init();\n    }\n\n    function() external payable {\n        if (msg.value == 0) {\n            withdraw();\n        } else {\n            invest(0, 0); //default to buy plan 0, no referrer\n        }\n    }\n\n    function checkIn() public {\n    }\n\n    function setMarketingAccount(address _newMarketingAccount) public onlyOwner {\n        require(_newMarketingAccount != address(0));\n        marketingAccount_ = _newMarketingAccount;\n    }\n\n    function getMarketingAccount() public view onlyOwner returns (address) {\n        return marketingAccount_;\n    }\n\n    function setDeveloperAccount(address _newDeveloperAccount) public onlyOwner {\n        require(_newDeveloperAccount != address(0));\n        developerAccount_ = _newDeveloperAccount;\n    }\n\n    function getDeveloperAccount() public view onlyOwner returns (address) {\n        return developerAccount_;\n    }\n\n    function setReferenceAccount(address _newReferenceAccount) public onlyOwner {\n        require(_newReferenceAccount != address(0));\n        referenceAccount_ = _newReferenceAccount;\n    }\n\n    function setPlanLimit(uint256 _planId, uint256 _perInvestorLimit, uint256 _addAmount) public onlyOwner {\n        require(_planId >= 0 && _planId < investmentPlans_.length, \"Wrong investment plan id\");\n        Objects.Plan storage plan = investmentPlans_[_planId];\n        plan.perInvestorLimit = _perInvestorLimit;\n        plan.leftAmount = plan.leftAmount.add(_addAmount);\n        plan.lastUpdateDate = block.timestamp;\n    }\n\n    function getReferenceAccount() public view onlyOwner returns (address) {\n        return referenceAccount_;\n    }\n\n    function _init() private {\n        latestReferrerCode = REFERRER_CODE;\n        address2UID[msg.sender] = latestReferrerCode;\n        uid2Investor[latestReferrerCode].addr = msg.sender;\n        uid2Investor[latestReferrerCode].referrer = 0;\n        uid2Investor[latestReferrerCode].planCount = 0;\n        investmentPlans_.push(Objects.Plan( 50,           0, 0,          0,              0, block.timestamp)); // 5%, unlimited\n        investmentPlans_.push(Objects.Plan( 60, 45*60*60*24, 0,          0,              0, block.timestamp)); // 6%, 45 days\n        investmentPlans_.push(Objects.Plan( 70, 25*60*60*24, 0,          0,              0, block.timestamp)); // 7%, 25 days\n        investmentPlans_.push(Objects.Plan( 80, 18*60*60*24, 0,          0,              0, block.timestamp)); // 8%, 18 days\n        investmentPlans_.push(Objects.Plan(100,           0, 1, 1 ether, 2000 ether, block.timestamp)); //10%, unlimited, 1 eth, 2000 eth\n    }\n\n    function getCurrentPlans() public view returns (uint256[] memory,\n        uint256[] memory,\n        uint256[] memory,\n        uint256[] memory,\n        uint256[] memory,\n        uint256[] memory) {\n        uint256[] memory ids               = new uint256[](investmentPlans_.length);\n        uint256[] memory interests         = new uint256[](investmentPlans_.length);\n        uint256[] memory terms             = new uint256[](investmentPlans_.length);\n        uint256[] memory limits            = new uint256[](investmentPlans_.length);\n        uint256[] memory perInvestorLimits = new uint256[](investmentPlans_.length);\n        uint256[] memory leftAmounts       = new uint256[](investmentPlans_.length);\n        for (uint256 i = 0; i < investmentPlans_.length; i++) {\n            Objects.Plan storage plan = investmentPlans_[i];\n            ids[i] = i;\n            interests[i] = plan.dailyInterest;\n            terms[i] = plan.term;\n            limits[i] = plan.limit;\n            perInvestorLimits[i] = plan.perInvestorLimit;\n            leftAmounts[i] = plan.leftAmount;\n        }\n        return\n        (\n        ids,\n        interests,\n        terms,\n        limits,\n        perInvestorLimits,\n        leftAmounts\n        );\n    }\n\n    function addNewPlan(uint256 dailyInterest, uint256 term, uint256 limit, uint256 perInvestorLimit, uint256 leftAmount) public onlyOwner {\n        investmentPlans_.push(Objects.Plan(dailyInterest,  term, limit, perInvestorLimit, leftAmount, block.timestamp));\n    }\n\n    function getTotalInvestments() public onlyOwner view returns (uint256){\n        return totalInvestments_;\n    }\n\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function getUIDByAddress(address _addr) public view returns (uint256) {\n        return address2UID[_addr];\n    }\n\n    function getInvestorInfoByUID(uint256 _uid) public view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256[] memory, uint256[] memory) {\n        if (msg.sender != owner) {\n            require(address2UID[msg.sender] == _uid, \"only owner or self can check the investor info.\");\n        }\n        Objects.Investor storage investor = uid2Investor[_uid];\n        uint256[] memory newDividends = new uint256[](investor.planCount);\n        uint256[] memory currentDividends = new  uint256[](investor.planCount);\n        for (uint256 i = 0; i < investor.planCount; i++) {\n            require(investor.plans[i].investmentDate != 0, \"wrong investment date\");\n            currentDividends[i] = investor.plans[i].currentDividends;\n            if (investor.plans[i].isExpired) {\n                newDividends[i] = 0;\n            } else {\n                if (investmentPlans_[investor.plans[i].planId].term > 0) {\n                    if (block.timestamp >= investor.plans[i].investmentDate.add(investmentPlans_[investor.plans[i].planId].term)) {\n                        newDividends[i] = _calculateDividends(investor.plans[i].investment, investmentPlans_[investor.plans[i].planId].dailyInterest, investor.plans[i].investmentDate.add(investmentPlans_[investor.plans[i].planId].term), investor.plans[i].lastWithdrawalDate);\n                    } else {\n                        newDividends[i] = _calculateDividends(investor.plans[i].investment, investmentPlans_[investor.plans[i].planId].dailyInterest, block.timestamp, investor.plans[i].lastWithdrawalDate);\n                    }\n                } else {\n                    newDividends[i] = _calculateDividends(investor.plans[i].investment, investmentPlans_[investor.plans[i].planId].dailyInterest, block.timestamp, investor.plans[i].lastWithdrawalDate);\n                }\n            }\n        }\n        return\n        (\n        investor.referrerEarnings,\n        investor.availableReferrerEarnings,\n        investor.referrer,\n        investor.level1RefCount,\n        investor.level2RefCount,\n        investor.level3RefCount,\n        investor.planCount,\n        currentDividends,\n        newDividends\n        );\n    }\n\n    function getInvestorPlanLimitsByUID(uint256 _uid, uint256 _planId) public view returns (uint256, uint256, uint256) {\n        if (msg.sender != owner) {\n            require(address2UID[msg.sender] == _uid, \"only owner or self can check the investor info.\");\n        }\n        require(_planId >= 0 && _planId < investmentPlans_.length, \"Wrong investment plan id\");\n\n        Objects.Investor storage investor = uid2Investor[_uid];\n        Objects.Plan storage plan = investmentPlans_[_planId];\n        uint256 totalInvestment = 0;\n        uint256 leftInvestmentLimit = 0;\n        if (plan.limit != 0) {\n            for (uint256 i = 0; i < investor.planCount; i++) {\n                require(investor.plans[i].investmentDate != 0, \"wrong investment date\");\n                if (investor.plans[i].planId != _planId || investor.plans[i].investmentDate < plan.lastUpdateDate) {\n                    continue;\n                }\n                totalInvestment = totalInvestment.add(investor.plans[i].investment);\n            }\n            leftInvestmentLimit = (totalInvestment > plan.perInvestorLimit) ? 0 : plan.perInvestorLimit.sub(totalInvestment);\n        }\n\n        return\n        (\n        plan.limit,\n        plan.leftAmount,\n        leftInvestmentLimit\n        );\n    }\n\n    function getInvestmentPlanByUID(uint256 _uid) public view returns (uint256[] memory, uint256[] memory, uint256[] memory, uint256[] memory, bool[] memory) {\n        if (msg.sender != owner) {\n            require(address2UID[msg.sender] == _uid, \"only owner or self can check the investment plan info.\");\n        }\n        Objects.Investor storage investor = uid2Investor[_uid];\n        uint256[] memory planIds = new  uint256[](investor.planCount);\n        uint256[] memory investmentDates = new  uint256[](investor.planCount);\n        uint256[] memory investments = new  uint256[](investor.planCount);\n        uint256[] memory currentDividends = new  uint256[](investor.planCount);\n        bool[] memory isExpireds = new  bool[](investor.planCount);\n\n        for (uint256 i = 0; i < investor.planCount; i++) {\n            require(investor.plans[i].investmentDate != 0, \"wrong investment date\");\n            planIds[i] = investor.plans[i].planId;\n            currentDividends[i] = investor.plans[i].currentDividends;\n            investmentDates[i] = investor.plans[i].investmentDate;\n            investments[i] = investor.plans[i].investment;\n            if (investor.plans[i].isExpired) {\n                isExpireds[i] = true;\n            } else {\n                isExpireds[i] = false;\n                if (investmentPlans_[investor.plans[i].planId].term > 0) {\n                    if (block.timestamp >= investor.plans[i].investmentDate.add(investmentPlans_[investor.plans[i].planId].term)) {\n                        isExpireds[i] = true;\n                    }\n                }\n            }\n        }\n\n        return\n        (\n        planIds,\n        investmentDates,\n        investments,\n        currentDividends,\n        isExpireds\n        );\n    }\n\n    function _addInvestor(address _addr, uint256 _referrerCode) private returns (uint256) {\n        if (_referrerCode >= REFERRER_CODE) {\n            //require(uid2Investor[_referrerCode].addr != address(0), \"Wrong referrer code\");\n            if (uid2Investor[_referrerCode].addr == address(0)) {\n                _referrerCode = 0;\n            }\n        } else {\n            _referrerCode = 0;\n        }\n        address addr = _addr;\n        latestReferrerCode = latestReferrerCode.add(1);\n        address2UID[addr] = latestReferrerCode;\n        uid2Investor[latestReferrerCode].addr = addr;\n        uid2Investor[latestReferrerCode].referrer = _referrerCode;\n        uid2Investor[latestReferrerCode].planCount = 0;\n        if (_referrerCode >= REFERRER_CODE) {\n            uint256 _ref1 = _referrerCode;\n            uint256 _ref2 = uid2Investor[_ref1].referrer;\n            uint256 _ref3 = uid2Investor[_ref2].referrer;\n            uid2Investor[_ref1].level1RefCount = uid2Investor[_ref1].level1RefCount.add(1);\n            if (_ref2 >= REFERRER_CODE) {\n                uid2Investor[_ref2].level2RefCount = uid2Investor[_ref2].level2RefCount.add(1);\n            }\n            if (_ref3 >= REFERRER_CODE) {\n                uid2Investor[_ref3].level3RefCount = uid2Investor[_ref3].level3RefCount.add(1);\n            }\n        }\n        return (latestReferrerCode);\n    }\n\n    function _invest(address _addr, uint256 _planId, uint256 _referrerCode, uint256 _amount, bool isReInvest) private returns (bool) {\n        require(_planId >= 0 && _planId < investmentPlans_.length, \"Wrong investment plan id\");\n        require(_amount >= MINIMUM, \"Less than the minimum amount of deposit requirement\");\n\n        uint256 uid = address2UID[_addr];\n        if (uid == 0) {\n            uid = _addInvestor(_addr, _referrerCode);\n            //new user\n        } else {//old user\n            //do nothing, referrer is permenant\n        }\n\n        _checkLimit(uid, _planId, _amount);\n\n        uint256 planCount = uid2Investor[uid].planCount;\n        Objects.Investor storage investor = uid2Investor[uid];\n        investor.plans[planCount].planId = _planId;\n        investor.plans[planCount].investmentDate = block.timestamp;\n        investor.plans[planCount].lastWithdrawalDate = block.timestamp;\n        investor.plans[planCount].investment = _amount;\n        investor.plans[planCount].currentDividends = 0;\n        investor.plans[planCount].isExpired = false;\n        investor.plans[planCount].isReInvest = isReInvest;\n\n        investor.planCount = investor.planCount.add(1);\n\n        _calculateReferrerReward(uid, _amount, investor.referrer);\n\n        totalInvestments_ = totalInvestments_.add(_amount);\n\n        uint256 developerPercentage = (_amount.mul(DEVELOPER_RATE)).div(1000);\n        developerAccount_.transfer(developerPercentage);\n        uint256 marketingPercentage = (_amount.mul(MARKETING_RATE)).div(1000);\n        marketingAccount_.transfer(marketingPercentage);\n        return true;\n    }\n\n    function _checkLimit(uint256 _uid, uint256 _planId, uint256 _amount) private {\n        Objects.Plan storage plan = investmentPlans_[_planId];\n        if (plan.limit > 0) {\n            require(plan.leftAmount >= _amount && plan.perInvestorLimit >= _amount, \"1 - Not enough limit\");\n\n            Objects.Investor storage investor = uid2Investor[_uid];\n            uint256 totalInvestment = 0;\n            uint256 leftInvestmentLimit = 0;\n            for (uint256 i = 0; i < investor.planCount; i++) {\n                require(investor.plans[i].investmentDate != 0, \"wrong investment date\");\n                if (investor.plans[i].planId != _planId || investor.plans[i].investmentDate < plan.lastUpdateDate) {\n                    continue;\n                }\n                totalInvestment = totalInvestment.add(investor.plans[i].investment);\n\n            }\n            leftInvestmentLimit = (totalInvestment > plan.perInvestorLimit) ? 0 : plan.perInvestorLimit.sub(totalInvestment);\n\n            require(leftInvestmentLimit >= _amount, \"2 - Not enough limit\");\n\n            plan.leftAmount = plan.leftAmount.sub(_amount);\n        }\n\n\n    }\n\n    function grant(address addr, uint256 _planId) public payable {\n        uint256 grantorUid = address2UID[msg.sender];\n        bool isAutoAddReferrer = true;\n        uint256 referrerCode = 0;\n\n        if (grantorUid != 0 && isAutoAddReferrer) {\n            referrerCode = grantorUid;\n        }\n\n        if (_invest(addr,_planId,referrerCode,msg.value, false)) {\n            emit onGrant(msg.sender, addr, msg.value);\n        }\n    }\n\n    function invest(uint256 _referrerCode, uint256 _planId) public payable {\n        if (_invest(msg.sender, _planId, _referrerCode, msg.value, false)) {\n            emit onInvest(msg.sender, msg.value);\n        }\n    }\n\n    function reinvest(uint256 _referrerCode, uint256 _planId) public payable {\n        require(msg.value == 0, \"Reinvest doesn't allow to transfer trx simultaneously\");\n        uint256 uid = address2UID[msg.sender];\n        require(uid != 0, \"Can not reinvest because no any investments\");\n        uint256 availableInvestAmount = 0;\n        for (uint256 i = 0; i < uid2Investor[uid].planCount; i++) {\n            if (uid2Investor[uid].plans[i].isExpired) {\n                continue;\n            }\n\n            Objects.Plan storage plan = investmentPlans_[uid2Investor[uid].plans[i].planId];\n\n            bool isExpired = false;\n            uint256 withdrawalDate = block.timestamp;\n            if (plan.term > 0) {\n                uint256 endTime = uid2Investor[uid].plans[i].investmentDate.add(plan.term);\n                if (withdrawalDate >= endTime) {\n                    withdrawalDate = endTime;\n                    isExpired = true;\n                }\n            }\n\n            uint256 amount = _calculateDividends(uid2Investor[uid].plans[i].investment , plan.dailyInterest , withdrawalDate , uid2Investor[uid].plans[i].lastWithdrawalDate);\n\n            availableInvestAmount = availableInvestAmount.add(amount);\n\n            uid2Investor[uid].plans[i].lastWithdrawalDate = withdrawalDate;\n            uid2Investor[uid].plans[i].isExpired = isExpired;\n            uid2Investor[uid].plans[i].currentDividends =  uid2Investor[uid].plans[i].currentDividends.add(amount);\n        }\n\n        if (uid2Investor[uid].availableReferrerEarnings>0) {\n            availableInvestAmount = availableInvestAmount.add(uid2Investor[uid].availableReferrerEarnings);\n            uid2Investor[uid].referrerEarnings = uid2Investor[uid].availableReferrerEarnings.add(uid2Investor[uid].referrerEarnings);\n            uid2Investor[uid].availableReferrerEarnings = 0;\n        }\n\n        if (_invest(msg.sender, _planId, _referrerCode, availableInvestAmount, true)) {\n            emit onReinvest(msg.sender, availableInvestAmount);\n        }\n    }\n\n    function withdraw() public payable {\n        require(msg.value == 0, \"withdrawal doesn't allow to transfer trx simultaneously\");\n        uint256 uid = address2UID[msg.sender];\n        require(uid != 0, \"Can not withdraw because no any investments\");\n        uint256 withdrawalAmount = 0;\n        for (uint256 i = 0; i < uid2Investor[uid].planCount; i++) {\n            if (uid2Investor[uid].plans[i].isExpired) {\n                continue;\n            }\n\n            Objects.Plan storage plan = investmentPlans_[uid2Investor[uid].plans[i].planId];\n\n            bool isExpired = false;\n            uint256 withdrawalDate = block.timestamp;\n            if (plan.term > 0) {\n                uint256 endTime = uid2Investor[uid].plans[i].investmentDate.add(plan.term);\n                if (withdrawalDate >= endTime) {\n                    withdrawalDate = endTime;\n                    isExpired = true;\n                }\n            }\n\n            uint256 amount = _calculateDividends(uid2Investor[uid].plans[i].investment , plan.dailyInterest , withdrawalDate , uid2Investor[uid].plans[i].lastWithdrawalDate);\n\n            withdrawalAmount = withdrawalAmount.add(amount);\n            msg.sender.transfer(amount);\n\n            uid2Investor[uid].plans[i].lastWithdrawalDate = withdrawalDate;\n            uid2Investor[uid].plans[i].isExpired = isExpired;\n            uid2Investor[uid].plans[i].currentDividends += amount;\n        }\n\n        if (uid2Investor[uid].availableReferrerEarnings>0) {\n            msg.sender.transfer(uid2Investor[uid].availableReferrerEarnings);\n            uid2Investor[uid].referrerEarnings = uid2Investor[uid].availableReferrerEarnings.add(uid2Investor[uid].referrerEarnings);\n            uid2Investor[uid].availableReferrerEarnings = 0;\n        }\n\n        emit onWithdraw(msg.sender, withdrawalAmount);\n    }\n\n    function _calculateDividends(uint256 _amount, uint256 _dailyInterestRate, uint256 _now, uint256 _start) private pure returns (uint256) {\n        return (_amount * _dailyInterestRate / 1000 * (_now - _start)) / (60*60*24);\n    }\n\n    function _calculateReferrerReward(uint256 _uid, uint256 _investment, uint256 _referrerCode) private {\n\n        uint256 _allReferrerAmount = (_investment.mul(REFERENCE_RATE)).div(1000);\n        if (_referrerCode != 0) {\n            uint256 _ref1 = _referrerCode;\n            uint256 _ref2 = uid2Investor[_ref1].referrer;\n            uint256 _ref3 = uid2Investor[_ref2].referrer;\n            uint256 _refAmount = 0;\n\n            if (_ref1 != 0) {\n                _refAmount = (_investment.mul(REFERENCE_LEVEL1_RATE)).div(1000);\n                _allReferrerAmount = _allReferrerAmount.sub(_refAmount);\n                uid2Investor[_ref1].availableReferrerEarnings = _refAmount.add(uid2Investor[_ref1].availableReferrerEarnings);\n                // _refAmount = (_investment.mul(REFERENCE_SELF_RATE)).div(1000);\n                // uid2Investor[_uid].availableReferrerEarnings =  _refAmount.add(uid2Investor[_uid].availableReferrerEarnings);\n            }\n\n            if (_ref2 != 0) {\n                _refAmount = (_investment.mul(REFERENCE_LEVEL2_RATE)).div(1000);\n                _allReferrerAmount = _allReferrerAmount.sub(_refAmount);\n                uid2Investor[_ref2].availableReferrerEarnings = _refAmount.add(uid2Investor[_ref2].availableReferrerEarnings);\n            }\n\n            if (_ref3 != 0) {\n                _refAmount = (_investment.mul(REFERENCE_LEVEL3_RATE)).div(1000);\n                _allReferrerAmount = _allReferrerAmount.sub(_refAmount);\n                uid2Investor[_ref3].availableReferrerEarnings = _refAmount.add(uid2Investor[_ref3].availableReferrerEarnings);\n            }\n        }\n\n        if (_allReferrerAmount > 0) {\n            referenceAccount_.transfer(_allReferrerAmount);\n        }\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"address2UID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERENCE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRER_CODE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKETING_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReferenceAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrerCode\",\"type\":\"uint256\"},{\"name\":\"_planId\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"getInvestmentPlanByUID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERENCE_LEVEL2_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMarketingAccount\",\"type\":\"address\"}],\"name\":\"setMarketingAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"_planId\",\"type\":\"uint256\"}],\"name\":\"grant\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestReferrerCode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeveloperAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMarketingAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERENCE_LEVEL1_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newReferenceAccount\",\"type\":\"address\"}],\"name\":\"setReferenceAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERENCE_LEVEL3_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uid2Investor\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"referrerEarnings\",\"type\":\"uint256\"},{\"name\":\"availableReferrerEarnings\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"uint256\"},{\"name\":\"planCount\",\"type\":\"uint256\"},{\"name\":\"level1RefCount\",\"type\":\"uint256\"},{\"name\":\"level2RefCount\",\"type\":\"uint256\"},{\"name\":\"level3RefCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_planId\",\"type\":\"uint256\"},{\"name\":\"_perInvestorLimit\",\"type\":\"uint256\"},{\"name\":\"_addAmount\",\"type\":\"uint256\"}],\"name\":\"setPlanLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"getInvestorInfoByUID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dailyInterest\",\"type\":\"uint256\"},{\"name\":\"term\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"},{\"name\":\"perInvestorLimit\",\"type\":\"uint256\"},{\"name\":\"leftAmount\",\"type\":\"uint256\"}],\"name\":\"addNewPlan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOPER_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrerCode\",\"type\":\"uint256\"},{\"name\":\"_planId\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"},{\"name\":\"_planId\",\"type\":\"uint256\"}],\"name\":\"getInvestorPlanLimitsByUID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPlans\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDeveloperAccount\",\"type\":\"address\"}],\"name\":\"setDeveloperAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUIDByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"grantor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"onOwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": ""
}