{
  "address": "0x8bc398a0c1ae94d75cc62dcbe17955c5ac2b0d41",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AMCToken",
  "compilerVersion": "v0.4.24-nightly.2018.5.9+commit.1e953355",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-12\n*/\n\npragma solidity ^0.4.20;\n\ncontract erc20interface {\n  string public name;\n  string public symbol;\n  uint8 public  decimals;\n  uint public totalSupply;\n\n\n  function transfer(address _to, uint256 _value) returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n  \n  function approve(address _spender, uint256 _value) returns (bool success);\n  function allowance(address _owner, address _spender) view returns (uint256 remaining);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\ncontract erc20 is erc20interface {\n    \n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) allowed;\n    \n    constructor() public {\n       name = \"Advertising Mall Block Chain\";\n       symbol = \"AMC\";\n       decimals = 0;\n       totalSupply = 80000000;\n       balanceOf[msg.sender] = totalSupply;\n    }\n    \n    \n  function transfer(address _to, uint256 _value) returns (bool success) {\n      require(_to != address(0));\n      require(balanceOf[msg.sender] >= _value);\n      require(balanceOf[ _to] + _value >= balanceOf[ _to]);\n      \n      \n      balanceOf[msg.sender] -= _value;\n      balanceOf[_to] += _value;\n      \n      emit Transfer(msg.sender, _to, _value);\n      \n      return true;\n  }\n  \n  \n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n      require(_to != address(0));\n      require(allowed[_from][msg.sender] >= _value);\n      require(balanceOf[_from] >= _value);\n      require(balanceOf[ _to] + _value >= balanceOf[ _to]);\n      \n      balanceOf[_from] -= _value;\n      balanceOf[_to] += _value;\n      \n      allowed[_from][msg.sender] -= _value;\n      \n      emit Transfer(msg.sender, _to, _value);\n      return true;\n  }\n  \n  function approve(address _spender, uint256 _value) returns (bool success) {\n      allowed[msg.sender][_spender] = _value;\n      \n      emit Approval(msg.sender, _spender, _value);\n      return true;\n  }\n  \n  function allowance(address _owner, address _spender) view returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n  }\n\n}\n\ncontract owned {\n    address public owner;\n\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnerShip(address newOwer) public onlyOwner {\n        owner = newOwer;\n    }\n\n}\ncontract AMCToken is erc20, owned {\n\n    mapping (address => bool) public frozenAccount;\n\n    event AddSupply(uint amount);\n    event FrozenFunds(address target, bool frozen);\n    event Burn(address target, uint amount);\n\n    constructor () erc20() public {\n\n    }\n\n    function mine(address target, uint amount) public onlyOwner {\n        totalSupply += amount;\n        balanceOf[target] += amount;\n\n        emit AddSupply(amount);\n        emit Transfer(0, target, amount);\n    }\n\n    function freezeAccount(address target, bool freeze) public onlyOwner {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n        success = _transfer(msg.sender, _to, _value);\n  }\n\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(allowed[_from][msg.sender] >= _value);\n        success =  _transfer(_from, _to, _value);\n        allowed[_from][msg.sender] -= _value;\n  }\n\n  function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n      require(_to != address(0));\n      require(!frozenAccount[_from]);\n\n      require(balanceOf[_from] >= _value);\n      require(balanceOf[ _to] + _value >= balanceOf[ _to]);\n\n      balanceOf[_from] -= _value;\n      balanceOf[_to] += _value;\n\n      emit Transfer(_from, _to, _value);\n      return true;\n  }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n\n        totalSupply -= _value;\n        balanceOf[msg.sender] -= _value;\n\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value)  public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value);\n\n        totalSupply -= _value;\n        balanceOf[msg.sender] -= _value;\n        allowed[_from][msg.sender] -= _value;\n\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060408051808201909152601c8082527f4164766572746973696e67204d616c6c20426c6f636b20436861696e000000006020909201918252610055916000916100da565b506040805180820190915260038082527f414d430000000000000000000000000000000000000000000000000000000000602090920191825261009a916001916100da565b506002805460ff191690556304c4b40060038190553360008181526004602052604090209190915560068054600160a060020a0319169091179055610175565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011b57805160ff1916838001178555610148565b82800160010185558215610148579182015b8281111561014857825182559160200191906001019061012d565b50610154929150610158565b5090565b61017291905b80821115610154576000815560010161015e565b90565b6109d9806101846000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101ac57806323b872dd146101d3578063313ce567146101fd57806342966c681461022857806370a082311461024057806379cc6790146102615780638863dd1a146102855780638da5cb5b146102a857806395d89b41146102d9578063a9059cbb146102ee578063ab27be2014610312578063b414d4b614610336578063dd62ed3e14610357578063e724529c1461037e575b600080fd5b3480156100f657600080fd5b506100ff6103a4565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610139578181015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018057600080fd5b50610198600160a060020a0360043516602435610432565b604080519115158252519081900360200190f35b3480156101b857600080fd5b506101c1610498565b60408051918252519081900360200190f35b3480156101df57600080fd5b50610198600160a060020a036004358116906024351660443561049e565b34801561020957600080fd5b5061021261050d565b6040805160ff9092168252519081900360200190f35b34801561023457600080fd5b50610198600435610516565b34801561024c57600080fd5b506101c1600160a060020a0360043516610593565b34801561026d57600080fd5b50610198600160a060020a03600435166024356105a5565b34801561029157600080fd5b506102a6600160a060020a036004351661067e565b005b3480156102b457600080fd5b506102bd6106c4565b60408051600160a060020a039092168252519081900360200190f35b3480156102e557600080fd5b506100ff6106d3565b3480156102fa57600080fd5b50610198600160a060020a036004351660243561072d565b34801561031e57600080fd5b506102a6600160a060020a0360043516602435610741565b34801561034257600080fd5b50610198600160a060020a03600435166107f8565b34801561036357600080fd5b506101c1600160a060020a036004358116906024351661080d565b34801561038a57600080fd5b506102a6600160a060020a03600435166024351515610838565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561042a5780601f106103ff5761010080835404028352916020019161042a565b820191906000526020600020905b81548152906001019060200180831161040d57829003601f168201915b505050505081565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035481565b600160a060020a03831660009081526005602090815260408083203384529091528120548211156104ce57600080fd5b6104d98484846108b3565b600160a060020a03909416600090815260056020908152604080832033845290915290208054929092039091555090919050565b60025460ff1681565b3360009081526004602052604081205482111561053257600080fd5b60038054839003905533600081815260046020908152604091829020805486900390558151928352820184905280517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a1506001919050565b60046020526000908152604090205481565b600160a060020a0382166000908152600460205260408120548211156105ca57600080fd5b600160a060020a03831660009081526005602090815260408083203384529091529020548211156105fa57600080fd5b60038054839003905533600081815260046020908152604080832080548790039055600160a060020a038716835260058252808320848452825291829020805486900390558151928352820184905280517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a150600192915050565b600654600160a060020a0316331461069557600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600654600160a060020a031681565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561042a5780601f106103ff5761010080835404028352916020019161042a565b600061073a3384846108b3565b9392505050565b600654600160a060020a0316331461075857600080fd5b6003805482019055600160a060020a038216600090815260046020908152604091829020805484019055815183815291517f1f90ffc80397d749f18478fbab9a66e1f7d21ab034917d4e5b5cdfff226807299281900390910190a1604080518281529051600160a060020a038416916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60076020526000908152604090205460ff1681565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600654600160a060020a0316331461084f57600080fd5b600160a060020a038216600081815260076020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b6000600160a060020a03831615156108ca57600080fd5b600160a060020a03841660009081526007602052604090205460ff16156108f057600080fd5b600160a060020a03841660009081526004602052604090205482111561091557600080fd5b600160a060020a038316600090815260046020526040902054828101101561093c57600080fd5b600160a060020a03808516600081815260046020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a350600193925050505600a165627a7a723058201b6a5e8ada9389b4eb36296681067ce2bf5c05e80dd7a0314dd6534ca6b2b8220029"
}