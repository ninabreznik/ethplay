{
  "address": "0x4a9a5083135d0c80cce8e0f424336567e616ef64",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthGold",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-12\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * CONTRACT FOR EtherGold.Me   V2.0\n * \n * What's is EtherGold\n *  - 1% advertisement and PR expenses FEE\n *  - You can refund anytime\n *  - GAIN 2% ~ 3% (up on your deposited value) PER 24 HOURS (every 5900 blocks)\n *  - 0 ~ 1 ether     2% \n *  - 1 ~ 10 ether    2.5%\n *  - over 10 ether   3% \n * \n * Multi-level Referral Bonus\n *  - 5% for Direct \n *  - 3% for Second Level\n *  - 1% for Third Level\n * \n * How to use:\n *  1. Send any amount of ether to make an investment\n *  2a. Claim your profit by sending 0 ether transaction (every day, every week, i don't care unless you're spending too much on GAS)\n *  OR\n *  2b. Send more ether to reinvest AND get your profit at the same time\n *  OR\n *  2c. view on website: https://EtherGold.Me\n * \n * How to refund:\n *  - Send 0.002 ether to refund\n *  - 1% refund fee\n *  - refundValue = (depositedValue - withdrewValue - refundFee) * 99%\n *  \n *\n * RECOMMENDED GAS LIMIT: 70000\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\n *\n * Contract reviewed and approved by pros!\n**/\n\n\n\nlibrary SafeMath {\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        if (_a == 0) {\n            return 0;\n        }\n        c = _a * _b;\n        assert(c / _a == _b);\n        return c;\n    }\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a / _b;\n    }\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        assert(_b <= _a);\n        return _a - _b;\n    }\n\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n}\n\nlibrary Address {\n    function toAddress(bytes bys) internal pure returns (address addr) {\n        assembly { addr := mload(add(bys, 20)) }\n        return addr;\n    }\n}\n\ncontract EthGold {\n    using SafeMath for uint256;\n    using Address for *;\n    address private devAddr;\n    address private depositedLock;\n    \n    struct Investor {\n        uint256 deposited;\n        uint256 withdrew;\n        address referrer;\n        uint256 m_1_refCount;\n        uint256 m_1_refValue;\n        uint256 m_2_refCount;\n        uint256 m_2_refValue;\n        uint256 m_3_refCount;\n        uint256 m_3_refValue;\n        uint256 blockNumber;\n        uint256 wallet;\n    }\n    \n    mapping (address => Investor) private investors;\n    uint256 public totalDepositedWei = 0;\n    uint256 public totalWithdrewWei = 0;\n    \n    constructor() public {\n        devAddr = msg.sender;\n        depositedLock = msg.sender;\n    }\n\n    function getUserDeposited(address _address) public view returns(uint256) {\n        return investors[_address].deposited;\n    }\n    \n    function getUserWithdrew(address _address) public view returns(uint256) {\n        return investors[_address].withdrew;\n    }\n    \n    function userDividendsWei(address _address) public view returns (uint256) {\n        uint256 userDeposited = investors[_address].deposited;\n        \n        // 0-1 ETH can dividend 2% every days;\n        if ( userDeposited > 0 ether && userDeposited <= 1 ether) {\n            return userDeposited.mul(2).div(100).mul(block.number-investors[_address].blockNumber).div(5900);\n        }\n        \n        // 1-10 ETH can dividend 2.5% every days;\n        if ( userDeposited > 1 ether && userDeposited <= 10 ether) {\n            return userDeposited.mul(5).div(200).mul(block.number-investors[_address].blockNumber).div(5900);\n        }\n        \n        // more than 10 ETH can dividend 3% every days;\n        if ( userDeposited > 10 ether ) {\n            return userDeposited.mul(3).div(100).mul(block.number-investors[_address].blockNumber).div(5900);\n        }\n\t\t\n    }\n    \n    function() public payable {\n        if ( msg.value == 0 ether ) {\n            withdraw();\n        } else if ( msg.value == 0.002 ether) {\n            refund(msg.sender);\n        } else {\n            doInvest(msg.data.toAddress(), msg.value);    \n        }\n    }\n    \n    function getBalance() public view returns(uint256){\n        return address(this).balance;\n    }\n    \n    function getUserInfo(address _addr) public view returns(uint256 deposited, \n            uint256 withdrew,\n            address referrer,\n            uint256 m_1_refCount,\n            uint256 m_1_refValue,\n            uint256 m_2_refCount,\n            uint256 m_2_refValue,\n            uint256 m_3_refCount,\n            uint256 m_3_refValue,\n            uint256 wallet) {\n        deposited = investors[_addr].deposited;\n        withdrew = investors[_addr].withdrew;\n        referrer = investors[_addr].referrer;\n        m_1_refCount = investors[_addr].m_1_refCount;\n        m_1_refValue = investors[_addr].m_1_refValue;\n        m_2_refCount = investors[_addr].m_2_refCount;\n        m_2_refValue = investors[_addr].m_2_refValue;\n        m_3_refCount = investors[_addr].m_3_refCount;\n        m_3_refValue = investors[_addr].m_3_refValue;\n        wallet = investors[_addr].wallet;\n    }\n    \n    function transferMoney(address _address, uint256 _value) private {\n        uint256 contractBalance = getBalance();\n        if (contractBalance < _value) {\n            _address.transfer(contractBalance);    \n        } else {\n            _address.transfer(_value);    \n        }\n    }\n    \n    function withdraw() public {\n        if (investors[msg.sender].deposited != 0 && block.number > investors[msg.sender].blockNumber) {\n            uint256 depositsPercents = userDividendsWei(msg.sender);\n            uint256 walletAmount = investors[msg.sender].wallet;\n            investors[msg.sender].wallet = 0;\n            investors[msg.sender].withdrew += (depositsPercents + walletAmount);\n            transferMoney(msg.sender, depositsPercents + walletAmount);\n            totalWithdrewWei = totalWithdrewWei.add(depositsPercents + walletAmount);\n        }\n    }\n    \n    function doInvest(address referrer, uint256 value) internal {\n        // 1% for dev fee.\n        investors[devAddr].wallet += value.mul(1).div(100); \n        if (referrer > 0x0 && referrer != msg.sender && investors[msg.sender].referrer == 0x0){\n            investors[msg.sender].referrer = referrer;\n        }\n        \n        uint256 m1ref;\n        uint256 m2ref;\n        uint256 m3ref;\n        address m1refAddr = investors[msg.sender].referrer;\n        address m2refAddr = investors[m1refAddr].referrer;\n        address m3refAddr = investors[m2refAddr].referrer;\n        \n        // 5% for Direct \n        if ( m1refAddr > 0x0 ) {\n            \n            uint256 m1refDeposited = investors[m1refAddr].deposited;\n            \n            if ( m1refDeposited > value ) {\n                m1ref = value.mul(5).div(100);\n            } else {\n                m1ref = m1refDeposited.mul(5).div(100);\n            }\n            \n            investors[m1refAddr].wallet += m1ref;\n            investors[m1refAddr].m_1_refValue += m1ref;\n            investors[m1refAddr].m_1_refCount += 1;\n            \n            //  3% for Second Level\n            if( m2refAddr > 0x0 && m2refAddr != msg.sender && m2refAddr != m1refAddr){\n                \n                uint256 m2refDeposited = investors[m2refAddr].deposited;\n                \n                if ( m2refDeposited > value ) {\n                    m2ref = value.mul(3).div(100);\n                } else {\n                    m2ref = m2refDeposited.mul(3).div(100);\n                }\n                \n                investors[m2refAddr].wallet += m2ref;\n                investors[m2refAddr].m_2_refValue += m2ref;\n                investors[m2refAddr].m_2_refCount += 1;\n                \n                //  1% for Third Level\n                if( m3refAddr > 0x0 && m3refAddr != msg.sender && m3refAddr != m1refAddr && m3refAddr != m2refAddr){\n                    \n                    uint256 m3refDeposited = investors[m3refAddr].deposited;\n                    \n                    if ( m3refDeposited > value ) {\n                        m3ref = value.mul(1).div(100);\n                    } else {\n                        m3ref = m3refDeposited.mul(1).div(100);\n                    }\n                    \n                    investors[m3refAddr].wallet += m3ref;\n                    investors[m3refAddr].m_3_refValue += m3ref;\n                    investors[m3refAddr].m_3_refCount += 1;\n                }\n            }\n        }\n\n        investors[msg.sender].deposited += value;\n        investors[msg.sender].blockNumber = block.number;\n        totalDepositedWei = totalDepositedWei.add(value);\n    }\n    \n    function reIvest() public {\n        uint256 wallet = investors[msg.sender].wallet;\n        uint256 dividends = userDividendsWei(msg.sender);\n        uint256 reinvestment = wallet + dividends;\n        investors[msg.sender].wallet = 0;\n        investors[msg.sender].blockNumber = block.number;\n        investors[msg.sender].withdrew += reinvestment;\n        totalWithdrewWei += reinvestment;\n        doInvest(investors[msg.sender].referrer, reinvestment);\n    }\n    \n    function newInvest(address referrer) payable public{\n        doInvest(referrer, msg.value);\n    }\n    \n    function refund(address _exitUser) internal {\n        uint256 refundValue = (investors[_exitUser].deposited - investors[_exitUser].withdrew).mul(90).div(100);\n        \n        // refund need 1% fee.\n        if ( _exitUser != devAddr ) {\n            uint256 refundDevFee = refundValue.mul(1).div(100);\n            refundValue -= refundDevFee;\n            investors[devAddr].wallet += refundDevFee;\n            investors[depositedLock].wallet = totalDepositedWei - refundDevFee;   \n        }\n        \n        if ( refundValue > 0 ) {\n            transferMoney(_exitUser, refundValue);\n            totalDepositedWei -= refundValue;\n            investors[_exitUser].deposited = 0;\n            investors[_exitUser].withdrew = 0;    \n        }\n    }\n}",
  "bytecode": "60806040526000600355600060045534801561001a57600080fd5b506000805433600160a060020a03199182168117835560018054909216179055610b1690819061004a90396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe081146101145780631b68adff1461013b57806329b305861461015c57806338e669eb1461017d5780633ccfd60b146101915780636386c1c7146101a6578063a9643c7f1461021f578063b781e47d14610234578063ee12d4f214610249578063f56864441461025e575b3415156100b7576100b261027f565b610112565b3466071afd498d000014156100cf576100b23361030f565b61011261010c6000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610406945050505050565b3461040d565b005b34801561012057600080fd5b50610129610799565b60408051918252519081900360200190f35b34801561014757600080fd5b50610129600160a060020a036004351661079e565b34801561016857600080fd5b50610129600160a060020a03600435166108e9565b610112600160a060020a0360043516610907565b34801561019d57600080fd5b5061011261027f565b3480156101b257600080fd5b506101c7600160a060020a0360043516610914565b604080519a8b5260208b0199909952600160a060020a03909716898901526060890195909552608088019390935260a087019190915260c086015260e085015261010084015261012083015251908190036101400190f35b34801561022b57600080fd5b50610112610976565b34801561024057600080fd5b506101296109e6565b34801561025557600080fd5b506101296109ec565b34801561026a57600080fd5b50610129600160a060020a03600435166109f2565b336000908152600260205260408120548190158015906102b057503360009081526002602052604090206009015443115b1561030b576102be3361079e565b336000818152600260205260408120600a81018054929055600101805482850190810190915592945092506102f291610a0d565b6004546103079083830163ffffffff610a9916565b6004555b5050565b600160a060020a0381166000908152600260205260408120600181015490548291610355916064916103499103605a63ffffffff610aac16565b9063ffffffff610ad516565b600054909250600160a060020a038481169116146103c557610383606461034984600163ffffffff610aac16565b60008054600160a060020a03908116825260026020526040808320600a9081018054860190556003546001549093168452922090839003910155918290039190505b6000821115610401576103d88383610a0d565b600380548390039055600160a060020a0383166000908152600260205260408120818155600101555b505050565b6014015190565b6000808080808080808061042d60646103498c600163ffffffff610aac16565b60008054600160a060020a039081168252600260205260408220600a018054909301909255908c1611801561046b5750600160a060020a038b163314155b801561049157503360009081526002602081905260409091200154600160a060020a0316155b156104d05733600090815260026020819052604090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038d161790555b336000908152600260208190526040808320820154600160a060020a0390811680855282852084015482168086529285209093015492995090975016945086111561075a57600160a060020a0386166000908152600260205260409020549250898311156105555761054e60646103498c600563ffffffff610aac16565b985061056e565b61056b606461034985600563ffffffff610aac16565b98505b600160a060020a038087166000908152600260205260408120600a810180548d0190556004810180548d019055600301805460010190559086161180156105be5750600160a060020a0385163314155b80156105dc575085600160a060020a031685600160a060020a031614155b1561075a57600160a060020a0385166000908152600260205260409020549150898211156106215761061a60646103498c600363ffffffff610aac16565b975061063a565b610637606461034984600363ffffffff610aac16565b97505b600160a060020a038086166000908152600260205260408120600a810180548c0190556006810180548c0190556005018054600101905590851611801561068a5750600160a060020a0384163314155b80156106a8575085600160a060020a031684600160a060020a031614155b80156106c6575084600160a060020a031684600160a060020a031614155b1561075a5750600160a060020a0383166000908152600260205260409020548981111561070a5761070360646103498c600163ffffffff610aac16565b9650610723565b610720606461034983600163ffffffff610aac16565b96505b600160a060020a0384166000908152600260205260409020600a810180548901905560088101805489019055600701805460010190555b33600090815260026020526040902080548b01815543600990910155600354610789908b63ffffffff610a9916565b6003555050505050505050505050565b303190565b600160a060020a03811660009081526002602052604081205481811180156107ce5750670de0b6b3a76400008111155b156108335761082c61170c6103496002600087600160a060020a0316600160a060020a031681526020019081526020016000206009015443036108206064610349600288610aac90919063ffffffff16565b9063ffffffff610aac16565b91506108e3565b670de0b6b3a7640000811180156108525750678ac7230489e800008111155b1561089557600160a060020a03831660009081526002602052604090206009015461082c9061170c9061034990430361082060c88387600563ffffffff610aac16565b678ac7230489e800008111156108e357600160a060020a03831660009081526002602052604090206009015461082c9061170c9061034990430361082060648387600363ffffffff610aac16565b50919050565b600160a060020a031660009081526002602052604090206001015490565b610911813461040d565b50565b600160a060020a0390811660009081526002602081905260409091208054600182015492820154600383015460048401546005850154600686015460078701546008880154600a90980154969a98999590951697939692959194909390929190565b336000818152600260205260408120600a01549181906109959061079e565b3360009081526002602081905260408220600a8101929092554360098301556001820180548785019081019091556004805482019055910154919350915061040190600160a060020a03168261040d565b60045481565b60035481565b600160a060020a031660009081526002602052604090205490565b6000610a17610799565b905081811015610a5d57604051600160a060020a0384169082156108fc029083906000818181858888f19350505050158015610a57573d6000803e3d6000fd5b50610401565b604051600160a060020a0384169083156108fc029084906000818181858888f19350505050158015610a93573d6000803e3d6000fd5b50505050565b81810182811015610aa657fe5b92915050565b6000821515610abd57506000610aa6565b50818102818382811515610acd57fe5b0414610aa657fe5b60008183811515610ae257fe5b0493925050505600a165627a7a72305820f4cf63608dcf8a290344eb260dec7c7a4248dbf476ef713f528a36b735bc5bf20029"
}