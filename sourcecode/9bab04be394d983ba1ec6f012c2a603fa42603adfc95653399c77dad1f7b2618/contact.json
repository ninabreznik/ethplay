{
  "address": "0xb79be5f32ee5d728da600dac59e4176d1061f46c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BEEFToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-29\n*/\n\npragma solidity 0.4.24;\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\ncontract ERC20 {\n  function totalSupply()public view returns (uint total_Supply);\n  function balanceOf(address who)public view returns (uint256);\n  function allowance(address owner, address spender)public view returns (uint);\n  function transferFrom(address from, address to, uint value)public returns (bool ok);\n  function approve(address spender, uint value)public returns (bool ok);\n  function transfer(address to, uint value)public returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\ncontract BEEFToken is ERC20\n{ using SafeMath for uint256;\n    // Name of the token\n    string public constant name = \"BEEF Token\";\n    // Symbol of token\n    string public constant symbol = \"BEEF\";\n    uint8 public constant decimals = 8;\n    uint public Totalsupply;\n    uint256 public Max_Mintable = 888888888 * 10 ** 8 ;\n    address public owner;  // Owner of this contract\n    uint256 no_of_tokens;\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n     modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    \n    constructor() public\n    {\n        owner = msg.sender;\n       \n    }\n  \n    //mint the tokens, can be called only by owner. total supply also increases\n    function mintTokens(address seller, uint256 _amount) external onlyOwner{\n        require(Max_Mintable >= (Totalsupply + _amount) && _amount > 0);\n        require( seller != 0x0 && _amount > 0);\n        balances[seller] = (balances[seller]).add(_amount);\n        Totalsupply = (Totalsupply).add(_amount);\n        emit Transfer(0, seller, _amount);\n       }\n    \n \n    \n   \n    // what is the total supply of the ech tokens\n     function totalSupply() public view returns (uint256 total_Supply) {\n         total_Supply = Totalsupply;\n     }\n    \n    // What is the balance of a particular account?\n     function balanceOf(address _owner)public view returns (uint256 balance) {\n         return balances[_owner];\n     }\n    \n    // Send _value amount of tokens from address _from to address _to\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n     // fees in sub-currencies; the command should fail unless the _from account has\n     // deliberately authorized the sender of the message via some mechanism; we propose\n     // these standardized APIs for approval:\n     function transferFrom( address _from, address _to, uint256 _amount )public returns (bool success) {\n     require( _to != 0x0);\n     require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n     balances[_from] = (balances[_from]).sub(_amount);\n     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n     balances[_to] = (balances[_to]).add(_amount);\n     emit Transfer(_from, _to, _amount);\n     return true;\n         }\n    \n   // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\n         require( _spender != 0x0);\n         allowed[msg.sender][_spender] = _amount;\n         emit Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n  \n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n         require( _owner != 0x0 && _spender !=0x0);\n         return allowed[_owner][_spender];\n   }\n     // Transfer the balance from owner's account to another account\n     function transfer(address _to, uint256 _amount)public returns (bool success) {\n        require( _to != 0x0);\n        require(balances[msg.sender] >= _amount && _amount >= 0);\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n             return true;\n         }\n    \n  \n}",
  "bytecode": "608060405267013bcbf93167380060015534801561001c57600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506110228061006d6000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100ca578063095ea7b31461015a57806318160ddd146101bf57806323b872dd146101ea578063313ce5671461026f57806370a08231146102a05780638da5cb5b146102f757806395d89b411461034e5780639707f708146103de5780639f54901514610409578063a9059cbb14610434578063dd62ed3e14610499578063f0dda65c14610510575b600080fd5b3480156100d657600080fd5b506100df61055d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011f578082015181840152602081019050610104565b50505050905090810190601f16801561014c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016657600080fd5b506101a5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610596565b604051808215151515815260200191505060405180910390f35b3480156101cb57600080fd5b506101d46106ad565b6040518082815260200191505060405180910390f35b3480156101f657600080fd5b50610255600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106b6565b604051808215151515815260200191505060405180910390f35b34801561027b57600080fd5b50610284610a69565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102ac57600080fd5b506102e1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a6e565b6040518082815260200191505060405180910390f35b34801561030357600080fd5b5061030c610ab7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561035a57600080fd5b50610363610add565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103a3578082015181840152602081019050610388565b50505050905090810190601f1680156103d05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103ea57600080fd5b506103f3610b16565b6040518082815260200191505060405180910390f35b34801561041557600080fd5b5061041e610b1c565b6040518082815260200191505060405180910390f35b34801561044057600080fd5b5061047f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b22565b604051808215151515815260200191505060405180910390f35b3480156104a557600080fd5b506104fa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d3d565b6040518082815260200191505060405180910390f35b34801561051c57600080fd5b5061055b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e0c565b005b6040805190810160405280600a81526020017f4245454620546f6b656e0000000000000000000000000000000000000000000081525081565b6000808373ffffffffffffffffffffffffffffffffffffffff16141515156105bd57600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b6000808373ffffffffffffffffffffffffffffffffffffffff16141515156106dd57600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156107a8575081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156107b5575060008210155b15156107c057600080fd5b61081282600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fbf90919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108e482600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fbf90919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109b682600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fd890919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600881565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f424545460000000000000000000000000000000000000000000000000000000081525081565b60005481565b60015481565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610b4957600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610b99575060008210155b1515610ba457600080fd5b610bf682600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fbf90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c8b82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fd890919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1614158015610d7c575060008273ffffffffffffffffffffffffffffffffffffffff1614155b1515610d8757600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e6857600080fd5b806000540160015410158015610e7e5750600081115b1515610e8957600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff1614158015610eb05750600081115b1515610ebb57600080fd5b610f0d81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fd890919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f6581600054610fd890919063ffffffff16565b6000819055508173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000828211151515610fcd57fe5b818303905092915050565b6000808284019050838110151515610fec57fe5b80915050929150505600a165627a7a72305820a2c98466fe198327f5d8d42835123833f61ebaf70c74e7e99ffcad7901c8fdae0029"
}