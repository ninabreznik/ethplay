{
  "address": "0x549088febbbadd584ab37d4a1f392a4619fd0f55",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UIWish",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-29\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    Burn(burner, _value);\n  }\n}\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * The (UI - UIWish-Token) has a fixed supply\n *\n * The owner can associate the token with a token sale contract. In that\n * case, the token balance is moved to the token sale contract, which\n * in turn can transfer its tokens to contributors to the sale.\n */\ncontract UIWish is StandardToken, BurnableToken, Ownable {\n\n    // Constants\n    string  public constant name = \"UIWish\";\n    string  public constant symbol = \"UI\";\n    uint8   public constant decimals = 18;\n    string  public website = \"www.ui-wish.com\"; \n    uint256 public constant INITIAL_SUPPLY      =  24680000 * (10 ** uint256(decimals));\n    uint256 public constant CROWDSALE_ALLOWANCE =  12340000 * (10 ** uint256(decimals));\n    uint256 public constant ADMIN_ALLOWANCE     =  12340000 * (10 ** uint256(decimals));\n\n    // Properties\n    uint256 public totalSupply;\n    uint256 public crowdSaleAllowance;      // the number of tokens available for crowdsales\n    uint256 public adminAllowance;          // the number of tokens available for the administrator\n    address public crowdSaleAddr;           // the address of a crowdsale currently selling this token\n    address public adminAddr;               // the address of a crowdsale currently selling this token\n    //bool    public transferEnabled = false; // indicates if transferring tokens is enabled or not\n    bool    public transferEnabled = true;  // Enables everyone to transfer tokens \n\n    // Modifiers\n\n    /**\n     * The listed addresses are not valid recipients of tokens.\n     *\n     * 0x0           - the zero address is not valid\n     * this          - the contract itself should not receive tokens\n     * owner         - the owner has all the initial tokens, but cannot receive any back\n     * adminAddr     - the admin has an allowance of tokens to transfer, but does not receive any\n     * crowdSaleAddr - the crowdsale has an allowance of tokens to transfer, but does not receive any\n     */\n    modifier validDestination(address _to) {\n        require(_to != address(0x0));\n        require(_to != address(this));\n        require(_to != owner);\n        require(_to != address(adminAddr));\n        require(_to != address(crowdSaleAddr));\n        _;\n    }\n\n    /**\n     * Constructor - instantiates token supply and allocates balanace of\n     * to the owner (msg.sender).\n     */\n    function UIWish(address _admin) public {\n        // the owner is a custodian of tokens that can\n        // give an allowance of tokens for crowdsales\n        // or to the admin, but cannot itself transfer\n        // tokens; hence, this requirement\n        require(msg.sender != _admin);\n\n        totalSupply = INITIAL_SUPPLY;\n        crowdSaleAllowance = CROWDSALE_ALLOWANCE;\n        adminAllowance = ADMIN_ALLOWANCE;\n\n        // mint all tokens\n        balances[msg.sender] = totalSupply.sub(adminAllowance);\n        Transfer(address(0x0), msg.sender, totalSupply.sub(adminAllowance));\n\n        balances[_admin] = adminAllowance;\n        Transfer(address(0x0), _admin, adminAllowance);\n\n        adminAddr = _admin;\n        approve(adminAddr, adminAllowance);\n    }\n\n    /**\n     * Associates this token with a current crowdsale, giving the crowdsale\n     * an allowance of tokens from the crowdsale supply. This gives the\n     * crowdsale the ability to call transferFrom to transfer tokens to\n     * whomever has purchased them.\n     *\n     * Note that if _amountForSale is 0, then it is assumed that the full\n     * remaining crowdsale supply is made available to the crowdsale.\n     *\n     * @param _crowdSaleAddr The address of a crowdsale contract that will sell this token\n     * @param _amountForSale The supply of tokens provided to the crowdsale\n     */\n    function setCrowdsale(address _crowdSaleAddr, uint256 _amountForSale) external onlyOwner {\n        require(_amountForSale <= crowdSaleAllowance);\n\n        // if 0, then full available crowdsale supply is assumed\n        uint amount = (_amountForSale == 0) ? crowdSaleAllowance : _amountForSale;\n\n        // Clear allowance of old, and set allowance of new\n        approve(crowdSaleAddr, 0);\n        approve(_crowdSaleAddr, amount);\n\n        crowdSaleAddr = _crowdSaleAddr;\n    }\n\n    /**\n     * Overrides ERC20 transfer function with modifier that prevents the\n     * ability to transfer tokens until after transfers have been enabled.\n     */\n    function transfer(address _to, uint256 _value) public validDestination(_to) returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * Overrides ERC20 transferFrom function with modifier that prevents the\n     * ability to transfer tokens until after transfers have been enabled.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public validDestination(_to) returns (bool) {\n        bool result = super.transferFrom(_from, _to, _value);\n        if (result) {\n            if (msg.sender == crowdSaleAddr)\n                crowdSaleAllowance = crowdSaleAllowance.sub(_value);\n            if (msg.sender == adminAddr)\n                adminAllowance = adminAllowance.sub(_value);\n        }\n        return result;\n    }\n\n    /**\n     * Overrides the burn function so that it cannot be called until after\n     * transfers have been enabled.\n     *\n     * @param _value    The amount of tokens to burn in wei-UIWish\n     */\n    function burn(uint256 _value) public {\n        require(transferEnabled || msg.sender == owner);\n        super.burn(_value);\n        Transfer(msg.sender, address(0x0), _value);\n    }\n\n    /**\n     * These helper functions are exposed for changing the website dynamically   \n     */\n    function changeWebsite(string _website) external onlyOwner {website = _website;}\n}",
  "bytecode": "606060405260408051908101604052600f81527f7777772e75692d776973682e636f6d0000000000000000000000000000000000602082015260049080516200004d92916020019062000276565b506009805460a060020a60ff0219167401000000000000000000000000000000000000000017905534156200008157600080fd5b6040516020806200136b8339810160405280805160038054600160a060020a03338116600160a060020a03199092168217909255919350831614159050620000c857600080fd5b6a146a317b18cbde7100000060058190556a0a3518bd8c65ef388000006006819055600781905562000109919064010000000062000d65620001f782021704565b600160a060020a0333166000818152602081905260408120929092556007546005549192916000805160206200134b8339815191529162000159919064010000000062000d65620001f782021704565b60405190815260200160405180910390a3600754600160a060020a038216600081815260208190526040808220849055919290916000805160206200134b83398151915291905190815260200160405180910390a360098054600160a060020a031916600160a060020a038381169190911791829055600754620001ef92909116906401000000006200020a8102620004b51704565b50506200031b565b6000828211156200020457fe5b50900390565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002b957805160ff1916838001178555620002e9565b82800160010185558215620002e9579182015b82811115620002e9578251825591602001919060010190620002cc565b50620002f7929150620002fb565b5090565b6200031891905b80821115620002f7576000815560010162000302565b90565b611020806200032b6000396000f3006060604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461014d578063095ea7b3146101d757806318160ddd1461020d57806322ed63021461023257806323b872dd146102565780632ff2e9dc1461027e578063313ce5671461029157806342966c68146102ba5780634cd412d5146102d05780635c9d0fb1146102e357806366188463146102f657806370a082311461031857806381830593146103375780638da5cb5b146103665780638eeb33ff1461037957806395d89b411461038c578063a9059cbb1461039f578063b90291c3146103c1578063beb0a416146103df578063d14ac7c4146103f2578063d56de6ed14610405578063d73dd62314610418578063dd62ed3e1461043a578063f2fde38b1461045f578063fc53f958146102e3575b600080fd5b341561015857600080fd5b61016061047e565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561019c578082015183820152602001610184565b50505050905090810190601f1680156101c95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101e257600080fd5b6101f9600160a060020a03600435166024356104b5565b604051901515815260200160405180910390f35b341561021857600080fd5b610220610521565b60405190815260200160405180910390f35b341561023d57600080fd5b610254600160a060020a0360043516602435610527565b005b341561026157600080fd5b6101f9600160a060020a03600435811690602435166044356105bc565b341561028957600080fd5b6102206106bf565b341561029c57600080fd5b6102a46106ce565b60405160ff909116815260200160405180910390f35b34156102c557600080fd5b6102546004356106d3565b34156102db57600080fd5b6101f9610760565b34156102ee57600080fd5b610220610781565b341561030157600080fd5b6101f9600160a060020a0360043516602435610790565b341561032357600080fd5b610220600160a060020a036004351661088a565b341561034257600080fd5b61034a6108a5565b604051600160a060020a03909116815260200160405180910390f35b341561037157600080fd5b61034a6108b4565b341561038457600080fd5b61034a6108c3565b341561039757600080fd5b6101606108d2565b34156103aa57600080fd5b6101f9600160a060020a0360043516602435610909565b34156103cc57600080fd5b61025460048035602481019101356109a5565b34156103ea57600080fd5b6101606109d1565b34156103fd57600080fd5b610220610a6f565b341561041057600080fd5b610220610a75565b341561042357600080fd5b6101f9600160a060020a0360043516602435610a7b565b341561044557600080fd5b610220600160a060020a0360043581169060243516610b1f565b341561046a57600080fd5b610254600160a060020a0360043516610b4a565b60408051908101604052600681527f5549576973680000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60055481565b60035460009033600160a060020a0390811691161461054557600080fd5b60065482111561055457600080fd5b81156105605781610564565b6006545b60085490915061057e90600160a060020a031660006104b5565b5061058983826104b5565b50506008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03939093169290921790915550565b60008083600160a060020a03811615156105d557600080fd5b30600160a060020a031681600160a060020a0316141515156105f657600080fd5b600354600160a060020a038281169116141561061157600080fd5b600954600160a060020a038281169116141561062c57600080fd5b600854600160a060020a038281169116141561064757600080fd5b610652868686610be5565b915081156106b65760085433600160a060020a039081169116141561068857600654610684908563ffffffff610d6516565b6006555b60095433600160a060020a03908116911614156106b6576007546106b2908563ffffffff610d6516565b6007555b50949350505050565b6a146a317b18cbde7100000081565b601281565b60095474010000000000000000000000000000000000000000900460ff168061070a575060035433600160a060020a039081169116145b151561071557600080fd5b61071e81610d77565b600033600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a350565b60095474010000000000000000000000000000000000000000900460ff1681565b6a0a3518bd8c65ef3880000081565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156107ed57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610824565b6107fd818463ffffffff610d6516565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600954600160a060020a031681565b600354600160a060020a031681565b600854600160a060020a031681565b60408051908101604052600281527f5549000000000000000000000000000000000000000000000000000000000000602082015281565b600082600160a060020a038116151561092157600080fd5b30600160a060020a031681600160a060020a03161415151561094257600080fd5b600354600160a060020a038281169116141561095d57600080fd5b600954600160a060020a038281169116141561097857600080fd5b600854600160a060020a038281169116141561099357600080fd5b61099d8484610e31565b949350505050565b60035433600160a060020a039081169116146109c057600080fd5b6109cc60048383610f59565b505050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a675780601f10610a3c57610100808354040283529160200191610a67565b820191906000526020600020905b815481529060010190602001808311610a4a57829003601f168201915b505050505081565b60065481565b60075481565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610ab3908363ffffffff610f4316565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610b6557600080fd5b600160a060020a0381161515610b7a57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515610bfc57600080fd5b600160a060020a038416600090815260208190526040902054821115610c2157600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610c5457600080fd5b600160a060020a038416600090815260208190526040902054610c7d908363ffffffff610d6516565b600160a060020a038086166000908152602081905260408082209390935590851681522054610cb2908363ffffffff610f4316565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610cf8908363ffffffff610d6516565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600082821115610d7157fe5b50900390565b600160a060020a033316600090815260208190526040812054821115610d9c57600080fd5b5033600160a060020a038116600090815260208190526040902054610dc19083610d65565b600160a060020a038216600090815260208190526040902055600154610ded908363ffffffff610d6516565b600155600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b6000600160a060020a0383161515610e4857600080fd5b600160a060020a033316600090815260208190526040902054821115610e6d57600080fd5b600160a060020a033316600090815260208190526040902054610e96908363ffffffff610d6516565b600160a060020a033381166000908152602081905260408082209390935590851681522054610ecb908363ffffffff610f4316565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600082820183811015610f5257fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610f9a5782800160ff19823516178555610fc7565b82800160010185558215610fc7579182015b82811115610fc7578235825591602001919060010190610fac565b50610fd3929150610fd7565b5090565b610ff191905b80821115610fd35760008155600101610fdd565b905600a165627a7a72305820cef8353dfc60bf142b7fdd7b397aa26516e77656a0ee0aac453041a1a2ffd5560029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef0000000000000000000000001b8b4b5177ef05c54d9703e57d8367d8af11e72c",
  "constructorArguments": "0000000000000000000000001b8b4b5177ef05c54d9703e57d8367d8af11e72c"
}