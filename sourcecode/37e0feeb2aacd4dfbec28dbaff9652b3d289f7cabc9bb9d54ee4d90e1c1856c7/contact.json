{
  "address": "0xf143e222000693777eef47b99d5d17a5e3b5b5f8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NeverEndingApp",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-05\n*/\n\npragma solidity ^0.4.20;\n\ncontract NeverEndingApp {\n\n\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n\n    /// @dev Only people with tokens\n    modifier onlyBagholders {\n        require(myTokens() > 0);\n        _;\n    }\n\n    /// @dev Only people with profits\n    modifier onlyStronghands {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n\n    string public name = \"Never Ending App\";\n    string public symbol = \"Neathereum\";\n    uint8 constant public decimals = 18;\n\n    /// @dev \n    uint8 constant internal entryFee_ = 30;\n\n    /// @dev \n    uint8 constant internal transferFee_ = 7;\n\n    /// @dev \n    uint8 constant internal exitFee_ = 3;\n\n    /// @dev 38% masternode\n    uint8 constant internal refferalFee_ = 38;\n\n    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.000000005 ether;\n    uint256 constant internal magnitude = 2 ** 64;\n\n    /// @dev \n    uint256 public stakingRequirement = 50e18;\n    \n    address internal devFeeAddress = 0x5B2FA02281491E51a97c0b087215c8b2597C8a2f;\n    address internal employeeFeeAddress = 0x17103d0Be87aD32f7fA17930f5A0c5c7beF2F4a8; // OMO\n    address internal employeeFeeAddress1 = 0x56deBe7ed7C66d867304ed5aD5FE1Da76C8404bE; // UB\n    address internal employeeFeeAddress2 = 0x4f574642be8C00BD916803c4BC1EC1FC05efa5cF; // OPEN\n    address internal neatFeeAddress = 0x1fE96BD388451E7640bf72f834ADC7FC9B69Ba11;\n\n    \n    address internal admin;\n    mapping(address => bool) internal ambassadors_;\n\n\n   /*=================================\n    =            DATASETS            =\n    ================================*/\n\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n    uint256 constant internal ambassadorMaxPurchase_ = 0.55 ether;\n    uint256 constant internal ambassadorQuota_ = 5000 ether;\n    bool public onlyAmbassadors = true;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    \n    uint ACTIVATION_TIME = 1547319601;\n    \n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n        if (now >= ACTIVATION_TIME) {\n            onlyAmbassadors = false;\n        }\n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol \n        if(onlyAmbassadors){\n            require(\n                // is the customer in the ambassador list?\n                (ambassadors_[msg.sender] == true &&\n                \n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[msg.sender] + _amountOfEthereum) <= ambassadorMaxPurchase_)\n                \n            );\n            \n            // updated the accumulated quota    \n            ambassadorAccumulatedQuota_[msg.sender] = SafeMath.add(ambassadorAccumulatedQuota_[msg.sender], _amountOfEthereum);\n        \n            // execute\n            _;\n        }else{\n            onlyAmbassadors=false;\n            _;\n        }\n        \n    }\n    \n    \n    function NeverEndingApp() public{\n        admin=msg.sender;\n        ambassadors_[0x4f574642be8C00BD916803c4BC1EC1FC05efa5cF] = true; //\n        ambassadors_[0x56deBe7ed7C66d867304ed5aD5FE1Da76C8404bE] = true; // \n        ambassadors_[0x267fa9F2F846da2c7A07eCeCc52dF7F493589098] = true; // \n        \n        \n        \n        \n\n    }\n    \n  function disableAmbassadorPhase() public{\n        require(admin==msg.sender);\n        onlyAmbassadors=false;\n    }\n\n  function changeEmployee(address _employeeAddress) public{\n        require(admin==msg.sender);\n        employeeFeeAddress=_employeeAddress;\n    }\n    \n  function changeEmployee1(address _employeeAddress1) public{\n        require(admin==msg.sender);\n        employeeFeeAddress1=_employeeAddress1;\n    }\n    \n  function changeEmployee2(address _employeeAddress2) public{\n        require(admin==msg.sender);\n        employeeFeeAddress2=_employeeAddress2;\n    }\n    \n  function changeNeat(address _neatAddress) public{\n        require(admin==msg.sender);\n        neatFeeAddress=_neatAddress;\n    }\n    \n    /*=======================================\n    =            PUBLIC FUNCTIONS           =\n    =======================================*/\n\n    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n    function buy(address _referredBy) public payable returns (uint256) {\n        purchaseTokens(msg.value, _referredBy);\n    }\n\n    /**\n     * @dev Fallback function to handle ethereum that was send straight to the contract\n     *  Unfortunately we cannot use a referral address this way.\n     */\n    function() payable public {\n        purchaseTokens(msg.value, 0x0);\n    }\n\n    /// @dev Converts all of caller's dividends to tokens.\n    function reinvest() onlyStronghands public {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n\n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n\n        // fire event\n         onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    /// @dev Alias of sell() and withdraw().\n    function exit() public {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n\n        // lambo delivery service\n        withdraw();\n    }\n\n    /// @dev Withdraws all of the callers earnings.\n    function withdraw() onlyStronghands public {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n\n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n\n        // fire event\n         onWithdraw(_customerAddress, _dividends);\n    }\n\n    /// @dev Liquifies tokens to ethereum.\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _neatFee = SafeMath.div(SafeMath.mul(_ethereum, 1), 100);\n        \n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _neatFee);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        neatFeeAddress.transfer(_neatFee);\n        // fire event\n         onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n       \n    }\n\n\n    /**\n     * @dev Transfer tokens from the caller to a new holder.\n     *  Remember, there's a 7% fee here as well.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\n        // setup\n        address _customerAddress = msg.sender;\n\n        // make sure we have the requested tokens\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        // withdraw all outstanding dividends first\n        if (myDividends(true) > 0) {\n            withdraw();\n        }\n\n        // liquify 5% of the tokens that are transfered\n        // these are dispersed to shareholders\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n\n        // burn the fee tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n\n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n\n        // disperse dividends among holders\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n\n        // fire event\n         Transfer(_customerAddress, _toAddress, _taxedTokens);\n\n        // ERC20\n        return true;\n    }\n\n\n    /*=====================================\n    =      HELPERS AND CALCULATORS        =\n    =====================================*/\n\n    /**\n     * @dev Method to view the current Ethereum stored in the contract\n     *  Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance() public view returns (uint256) {\n        return this.balance;\n    }\n\n    /// @dev Retrieve the total token supply.\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n    /// @dev Retrieve the tokens owned by the caller.\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    /**\n     * @dev Retrieve the dividends owned by the caller.\n     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     *  But in the internal calculations, we want them separate.\n     */\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    /// @dev Retrieve the token balance of any single address.\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    /// @dev Retrieve the dividend balance of any single address.\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    /// @dev Return the sell price of 1 individual token.\n    function sellPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    /// @dev Return the buy price of 1 individual token.\n    function buyPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\n        return _amountOfTokens;\n    }\n\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n\n    /// @dev Internal function to actually purchase the tokens.\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) antiEarlyWhale(_incomingEthereum)\n       internal returns (uint256) {\n        // data setup\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 5), 200));\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 3), 200));\n        \n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n\n        // is the user referred by a masternode?\n        if (\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ) {\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        // we can't give people infinite ethereum\n        if (tokenSupply_ > 0) {\n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n\n            // calculate the amount of tokens the customer receives over his purchase\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        // really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n\n        // fire event\n         onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n        devFeeAddress.transfer(SafeMath.div(SafeMath.mul(_incomingEthereum, 5), 200));\n        employeeFeeAddress.transfer(SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        employeeFeeAddress1.transfer(SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        employeeFeeAddress2.transfer(SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        neatFeeAddress.transfer(SafeMath.div(SafeMath.mul(_incomingEthereum, 3), 200));\n        return _amountOfTokens;\n    }\n\n    /**\n     * @dev Calculate Token price based on an amount of incoming ethereum\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial ** 2)\n                            +\n                            (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\n                            +\n                            ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\n                            +\n                            (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            ) / (tokenPriceIncremental_)\n        ) - (tokenSupply_);\n\n        return _tokensReceived;\n    }\n\n    /**\n     * @dev Calculate token sell value.\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\n                        ) - tokenPriceIncremental_\n                    ) * (tokens_ - 1e18)\n                ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\n            )\n        / 1e18);\n\n        return _etherReceived;\n    }\n\n    /// @dev This is where all your gas goes.\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}",
  "bytecode": "606060405260408051908101604052601081527f4e6576657220456e64696e672041707000000000000000000000000000000000602082015260009080516200004d9291602001906200022b565b5060408051908101604052600a81527f4e65617468657265756d0000000000000000000000000000000000000000000060208201526001908051620000979291602001906200022b565b506802b5e3af16b188000060025560038054600160a060020a0319908116735b2fa02281491e51a97c0b087215c8b2597c8a2f179091556004805482167317103d0be87ad32f7fa17930f5a0c5c7bef2f4a81790556005805482167356debe7ed7c66d867304ed5ad5fe1da76c8404be179055600680548216734f574642be8c00bd916803c4bc1ec1fc05efa5cf17905560078054909116731fe96bd388451e7640bf72f834adc7fc9b69ba11179055600f805460ff19166001179055635c3a393160115534156200016857600080fd5b60088054600160a060020a03191633600160a060020a031617905560096020527f4a3b54608ada2987c121a37d05a4545ceb765cf55478470d410d008634e99178805460ff1990811660019081179092557f2228f8636b2094c037bcd4a409d0d932aa184466d73044a84ef7749c1b93a614805482168317905573267fa9f2f846da2c7a07ececc52df7f4935890986000527f353f42cddd2b53cf1bc5d6ebe81a8e3050f91b30b6f6e2e361a5ee65327f943980549091169091179055620002d0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200026e57805160ff19168380011785556200029e565b828001600101855582156200029e579182015b828111156200029e57825182559160200191906001019062000281565b50620002ac929150620002b0565b5090565b620002cd91905b80821115620002ac5760008155600101620002b7565b90565b61185d80620002e06000396000f3006060604052600436106101525763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461016057806306fdde031461019157806310d0ffdd1461021b57806318160ddd14610231578063226093731461024457806327defa1f1461025a578063313ce56714610281578063330ae38f146102aa5780633ccfd60b146102bf5780634b750334146102d257806356d399e8146102e557806362d966c9146102f8578063688abbf7146103175780636b2f46321461032f57806370a082311461034257806371d1995e146103615780638620410b14610380578063949e8acd1461039357806395d89b41146103a6578063a9059cbb146103b9578063e4849b32146103db578063e995064e146103f1578063e9fad8ee14610410578063ea061e7714610423578063f088d54714610442578063fdb5a03e14610456575b61015d346000610469565b50005b341561016b57600080fd5b61017f600160a060020a0360043516610d35565b60405190815260200160405180910390f35b341561019c57600080fd5b6101a4610d6b565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101e05780820151838201526020016101c8565b50505050905090810190601f16801561020d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561022657600080fd5b61017f600435610e09565b341561023c57600080fd5b61017f610e3c565b341561024f57600080fd5b61017f600435610e42565b341561026557600080fd5b61026d610e7e565b604051901515815260200160405180910390f35b341561028c57600080fd5b610294610e87565b60405160ff909116815260200160405180910390f35b34156102b557600080fd5b6102bd610e8c565b005b34156102ca57600080fd5b6102bd610eb3565b34156102dd57600080fd5b61017f610f7a565b34156102f057600080fd5b61017f610fd1565b341561030357600080fd5b6102bd600160a060020a0360043516610fd7565b341561032257600080fd5b61017f6004351515611021565b341561033a57600080fd5b61017f611064565b341561034d57600080fd5b61017f600160a060020a0360043516611072565b341561036c57600080fd5b6102bd600160a060020a036004351661108d565b341561038b57600080fd5b61017f6110d7565b341561039e57600080fd5b61017f611122565b34156103b157600080fd5b6101a4611134565b34156103c457600080fd5b61026d600160a060020a036004351660243561119f565b34156103e657600080fd5b6102bd600435611345565b34156103fc57600080fd5b6102bd600160a060020a0360043516611505565b341561041b57600080fd5b6102bd61154f565b341561042e57600080fd5b6102bd600160a060020a0360043516611586565b61017f600160a060020a03600435166115d0565b341561046157600080fd5b6102bd6115dc565b60008060008060008060008060008a6011544210151561048e57600f805460ff191690555b600f5460ff161561093357600160a060020a03331660009081526009602052604090205460ff16151560011480156104e95750600160a060020a0333166000908152601060205260409020546707a1fe160277000090820111155b15156104f457600080fd5b600160a060020a0333166000908152601060205260409020546105179082611692565b33600160a060020a038116600090815260106020526040902091909155985061054b6105448d601e6116ac565b60646116d7565b975061055b6105448960266116ac565b965061056788886116ee565b95506105738c896116ee565b94506105938561058e6105878f60056116ac565b60c86116d7565b6116ee565b94506105a78561058e6105448f60016116ac565b94506105bb8561058e6105448f60016116ac565b94506105cf8561058e6105448f60016116ac565b94506105e38561058e6105878f60036116ac565b94506105ee85611700565b9350604060020a860292506000841180156106135750600d546106118582611692565b115b151561061e57600080fd5b600160a060020a038b1615801590610648575088600160a060020a03168b600160a060020a031614155b801561066e5750600254600160a060020a038c166000908152600a602052604090205410155b156106b457600160a060020a038b166000908152600b60205260409020546106969088611692565b600160a060020a038c166000908152600b60205260409020556106ca565b6106be8688611692565b9550604060020a860292505b6000600d541115610724576106e1600d5485611692565b600d819055604060020a87028115156106f657fe5b600e8054929091049091019055600d54604060020a870281151561071657fe5b04840283038303925061072a565b600d8490555b600160a060020a0389166000908152600a602052604090205461074d9085611692565b600160a060020a03808b166000818152600a6020908152604080832095909555600e54600c909152939020805493880287900393840190559193508c16907f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8e87426107b76110d7565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390a3600354600160a060020a03166108fc6107fe6105878f60056116ac565b9081150290604051600060405180830381858888f19350505050151561082357600080fd5b600454600160a060020a03166108fc6108406105448f60016116ac565b9081150290604051600060405180830381858888f19350505050151561086557600080fd5b600554600160a060020a03166108fc6108826105448f60016116ac565b9081150290604051600060405180830381858888f1935050505015156108a757600080fd5b600654600160a060020a03166108fc6108c46105448f60016116ac565b9081150290604051600060405180830381858888f1935050505015156108e957600080fd5b600754600160a060020a03166108fc6109066105878f60036116ac565b9081150290604051600060405180830381858888f19350505050151561092b57600080fd5b839950610d26565b600f805460ff1916905533985061094e6105448d601e6116ac565b975061095e6105448960266116ac565b965061096a88886116ee565b95506109768c896116ee565b945061098a8561058e6105878f60056116ac565b945061099e8561058e6105448f60016116ac565b94506109b28561058e6105448f60016116ac565b94506109c68561058e6105448f60016116ac565b94506109da8561058e6105878f60036116ac565b94506109e585611700565b9350604060020a86029250600084118015610a0a5750600d54610a088582611692565b115b1515610a1557600080fd5b600160a060020a038b1615801590610a3f575088600160a060020a03168b600160a060020a031614155b8015610a655750600254600160a060020a038c166000908152600a602052604090205410155b15610aab57600160a060020a038b166000908152600b6020526040902054610a8d9088611692565b600160a060020a038c166000908152600b6020526040902055610ac1565b610ab58688611692565b9550604060020a860292505b6000600d541115610b1b57610ad8600d5485611692565b600d819055604060020a8702811515610aed57fe5b600e8054929091049091019055600d54604060020a8702811515610b0d57fe5b048402830383039250610b21565b600d8490555b600160a060020a0389166000908152600a6020526040902054610b449085611692565b600160a060020a03808b166000818152600a6020908152604080832095909555600e54600c909152939020805493880287900393840190559193508c16907f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8e8742610bae6110d7565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390a3600354600160a060020a03166108fc610bf56105878f60056116ac565b9081150290604051600060405180830381858888f193505050501515610c1a57600080fd5b600454600160a060020a03166108fc610c376105448f60016116ac565b9081150290604051600060405180830381858888f193505050501515610c5c57600080fd5b600554600160a060020a03166108fc610c796105448f60016116ac565b9081150290604051600060405180830381858888f193505050501515610c9e57600080fd5b600654600160a060020a03166108fc610cbb6105448f60016116ac565b9081150290604051600060405180830381858888f193505050501515610ce057600080fd5b600754600160a060020a03166108fc610cfd6105878f60036116ac565b9081150290604051600060405180830381858888f193505050501515610d2257600080fd5b8399505b50505050505050505092915050565b600160a060020a03166000908152600c6020908152604080832054600a90925290912054600e54604060020a9102919091030490565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e015780601f10610dd657610100808354040283529160200191610e01565b820191906000526020600020905b815481529060010190602001808311610de457829003601f168201915b505050505081565b6000808080610e1c61054486601e6116ac565b9250610e2885846116ee565b9150610e3382611700565b95945050505050565b600d5490565b600080600080600d548511151515610e5957600080fd5b610e6285611795565b9250610e726105448460036116ac565b9150610e3383836116ee565b600f5460ff1681565b601281565b60085433600160a060020a03908116911614610ea757600080fd5b600f805460ff19169055565b6000806000610ec26001611021565b11610ecc57600080fd5b339150610ed96000611021565b600160a060020a0383166000818152600c602090815260408083208054604060020a8702019055600b9091528082208054929055920192509082156108fc0290839051600060405180830381858888f193505050501515610f3957600080fd5b81600160a060020a03167fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc8260405190815260200160405180910390a25050565b600080600080600d5460001415610f985764012a05f2009350610fcb565b610fa9670de0b6b3a7640000611795565b9250610fb96105448460036116ac565b9150610fc583836116ee565b90508093505b50505090565b60025481565b60085433600160a060020a03908116911614610ff257600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600033826110375761103281610d35565b61105b565b600160a060020a0381166000908152600b602052604090205461105982610d35565b015b91505b50919050565b600160a060020a0330163190565b600160a060020a03166000908152600a602052604090205490565b60085433600160a060020a039081169116146110a857600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080600080600d54600014156110f55764037e11d6009350610fcb565b611106670de0b6b3a7640000611795565b925061111661054484601e6116ac565b9150610fc58383611692565b60003361112e81611072565b91505090565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e015780601f10610dd657610100808354040283529160200191610e01565b6000806000806000806111b0611122565b116111ba57600080fd5b33600160a060020a0381166000908152600a60205260409020549094508611156111e357600080fd5b60006111ef6001611021565b11156111fd576111fd610eb3565b61120b6105448760076116ac565b925061121786846116ee565b915061122283611795565b9050611230600d54846116ee565b600d55600160a060020a0384166000908152600a602052604090205461125690876116ee565b600160a060020a038086166000908152600a602052604080822093909355908916815220546112859083611692565b600160a060020a038881166000818152600a6020908152604080832095909555600e8054948a168352600c9091528482208054948c02909403909355825491815292909220805492850290920190915554600d546112f49190604060020a84028115156112ee57fe5b04611692565b600e55600160a060020a038088169085167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060019695505050505050565b600080600080600080600080611359611122565b1161136357600080fd5b33600160a060020a0381166000908152600a602052604090205490975088111561138c57600080fd5b87955061139886611795565b94506113a86105448660036116ac565b93506113b86105448660016116ac565b92506113cd6113c786866116ee565b846116ee565b91506113db600d54876116ee565b600d55600160a060020a0387166000908152600a602052604090205461140190876116ee565b600160a060020a0388166000908152600a6020908152604080832093909355600e54600c9091529181208054928902604060020a860201928390039055600d5491925090111561146857611464600e54600d54604060020a87028115156112ee57fe5b600e555b600754600160a060020a031683156108fc0284604051600060405180830381858888f19350505050151561149b57600080fd5b86600160a060020a03167f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e8784426114d16110d7565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390a25050505050505050565b60085433600160a060020a0390811691161461152057600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b33600160a060020a0381166000908152600a60205260408120549081111561157a5761157a81611345565b611582610eb3565b5050565b60085433600160a060020a039081169116146115a157600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061105e3483610469565b6000806000806115ec6001611021565b116115f657600080fd5b6116006000611021565b33600160a060020a0381166000908152600c602090815260408083208054604060020a8702019055600b909152812080549082905590920194509250611647908490610469565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458848360405191825260208201526040908101905180910390a2505050565b6000828201838110156116a157fe5b8091505b5092915050565b6000808315156116bf57600091506116a5565b508282028284828115156116cf57fe5b04146116a157fe5b60008082848115156116e557fe5b04949350505050565b6000828211156116fa57fe5b50900390565b600d546000906b204fce5e3e2502611000000090829064012a05f20061178261177c7301c06a5ec5433c60ddaa16406f5a400000000000880268015af1d78b58c400006002860a02016f4b3b4ca85a86c47a098a2240000000008502017704140c78940f6a24fdffc78873d4490d2100000000000000016117fc565b856116ee565b81151561178b57fe5b0403949350505050565b600d54600090670de0b6b3a76400008381019181019083906117e964012a05f200828504810201870260028381880a8a9003670de0b6b3a763ffff19010464012a05f200028115156117e357fe5b046116ee565b8115156117f257fe5b0495945050505050565b80600260018201045b8181101561105e57809150600281828581151561181e57fe5b040181151561182957fe5b0490506118055600a165627a7a723058200606fc0d54fc6ce65c71f78f9882ea987083209ce0b38c3e104f5e97dabfb4500029"
}