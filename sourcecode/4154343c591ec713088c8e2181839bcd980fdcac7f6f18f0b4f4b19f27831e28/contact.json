{
  "address": "0x04d64c9c3db92e5f296fc2e7cb5e447258a92c43",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VoteProxy",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-15\n*/\n\n// hevm: flattened sources of src/VoteProxyFactory.sol\npragma solidity ^0.4.24;\n\n////// lib/ds-token/lib/ds-stop/lib/ds-auth/src/auth.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.23; */\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\n////// lib/ds-chief/lib/ds-roles/src/roles.sol\n// roles.sol - roled based authentication\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\n/* import 'ds-auth/auth.sol'; */\n\ncontract DSRoles is DSAuth, DSAuthority\n{\n    mapping(address=>bool) _root_users;\n    mapping(address=>bytes32) _user_roles;\n    mapping(address=>mapping(bytes4=>bytes32)) _capability_roles;\n    mapping(address=>mapping(bytes4=>bool)) _public_capabilities;\n\n    function getUserRoles(address who)\n        public\n        view\n        returns (bytes32)\n    {\n        return _user_roles[who];\n    }\n\n    function getCapabilityRoles(address code, bytes4 sig)\n        public\n        view\n        returns (bytes32)\n    {\n        return _capability_roles[code][sig];\n    }\n\n    function isUserRoot(address who)\n        public\n        view\n        returns (bool)\n    {\n        return _root_users[who];\n    }\n\n    function isCapabilityPublic(address code, bytes4 sig)\n        public\n        view\n        returns (bool)\n    {\n        return _public_capabilities[code][sig];\n    }\n\n    function hasUserRole(address who, uint8 role)\n        public\n        view\n        returns (bool)\n    {\n        bytes32 roles = getUserRoles(who);\n        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\n        return bytes32(0) != roles & shifted;\n    }\n\n    function canCall(address caller, address code, bytes4 sig)\n        public\n        view\n        returns (bool)\n    {\n        if( isUserRoot(caller) || isCapabilityPublic(code, sig) ) {\n            return true;\n        } else {\n            bytes32 has_roles = getUserRoles(caller);\n            bytes32 needs_one_of = getCapabilityRoles(code, sig);\n            return bytes32(0) != has_roles & needs_one_of;\n        }\n    }\n\n    function BITNOT(bytes32 input) internal pure returns (bytes32 output) {\n        return (input ^ bytes32(uint(-1)));\n    }\n\n    function setRootUser(address who, bool enabled)\n        public\n        auth\n    {\n        _root_users[who] = enabled;\n    }\n\n    function setUserRole(address who, uint8 role, bool enabled)\n        public\n        auth\n    {\n        bytes32 last_roles = _user_roles[who];\n        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\n        if( enabled ) {\n            _user_roles[who] = last_roles | shifted;\n        } else {\n            _user_roles[who] = last_roles & BITNOT(shifted);\n        }\n    }\n\n    function setPublicCapability(address code, bytes4 sig, bool enabled)\n        public\n        auth\n    {\n        _public_capabilities[code][sig] = enabled;\n    }\n\n    function setRoleCapability(uint8 role, address code, bytes4 sig, bool enabled)\n        public\n        auth\n    {\n        bytes32 last_roles = _capability_roles[code][sig];\n        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\n        if( enabled ) {\n            _capability_roles[code][sig] = last_roles | shifted;\n        } else {\n            _capability_roles[code][sig] = last_roles & BITNOT(shifted);\n        }\n\n    }\n\n}\n\n////// lib/ds-token/lib/ds-math/src/math.sol\n/// math.sol -- mixin for inline numerical wizardry\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.13; */\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n////// lib/ds-token/lib/ds-stop/lib/ds-note/src/note.sol\n/// note.sol -- the `note' modifier, for logging calls as events\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.23; */\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n////// lib/ds-chief/lib/ds-thing/src/thing.sol\n// thing.sol - `auth` with handy mixins. your things should be DSThings\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.23; */\n\n/* import 'ds-auth/auth.sol'; */\n/* import 'ds-note/note.sol'; */\n/* import 'ds-math/math.sol'; */\n\ncontract DSThing is DSAuth, DSNote, DSMath {\n\n    function S(string s) internal pure returns (bytes4) {\n        return bytes4(keccak256(abi.encodePacked(s)));\n    }\n\n}\n\n////// lib/ds-token/lib/ds-stop/src/stop.sol\n/// stop.sol -- mixin for enable/disable functionality\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.23; */\n\n/* import \"ds-auth/auth.sol\"; */\n/* import \"ds-note/note.sol\"; */\n\ncontract DSStop is DSNote, DSAuth {\n\n    bool public stopped;\n\n    modifier stoppable {\n        require(!stopped);\n        _;\n    }\n    function stop() public auth note {\n        stopped = true;\n    }\n    function start() public auth note {\n        stopped = false;\n    }\n\n}\n\n////// lib/ds-token/lib/erc20/src/erc20.sol\n/// erc20.sol -- API for the ERC20 token standard\n\n// See <https://github.com/ethereum/EIPs/issues/20>.\n\n// This file likely does not meet the threshold of originality\n// required for copyright to apply.  As a result, this is free and\n// unencumbered software belonging to the public domain.\n\n/* pragma solidity ^0.4.8; */\n\ncontract ERC20Events {\n    event Approval(address indexed src, address indexed guy, uint wad);\n    event Transfer(address indexed src, address indexed dst, uint wad);\n}\n\ncontract ERC20 is ERC20Events {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address guy) public view returns (uint);\n    function allowance(address src, address guy) public view returns (uint);\n\n    function approve(address guy, uint wad) public returns (bool);\n    function transfer(address dst, uint wad) public returns (bool);\n    function transferFrom(\n        address src, address dst, uint wad\n    ) public returns (bool);\n}\n\n////// lib/ds-token/src/base.sol\n/// base.sol -- basic ERC20 implementation\n\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.23; */\n\n/* import \"erc20/erc20.sol\"; */\n/* import \"ds-math/math.sol\"; */\n\ncontract DSTokenBase is ERC20, DSMath {\n    uint256                                            _supply;\n    mapping (address => uint256)                       _balances;\n    mapping (address => mapping (address => uint256))  _approvals;\n\n    constructor(uint supply) public {\n        _balances[msg.sender] = supply;\n        _supply = supply;\n    }\n\n    function totalSupply() public view returns (uint) {\n        return _supply;\n    }\n    function balanceOf(address src) public view returns (uint) {\n        return _balances[src];\n    }\n    function allowance(address src, address guy) public view returns (uint) {\n        return _approvals[src][guy];\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        if (src != msg.sender) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        _approvals[msg.sender][guy] = wad;\n\n        emit Approval(msg.sender, guy, wad);\n\n        return true;\n    }\n}\n\n////// lib/ds-token/src/token.sol\n/// token.sol -- ERC20 implementation with minting and burning\n\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.23; */\n\n/* import \"ds-stop/stop.sol\"; */\n\n/* import \"./base.sol\"; */\n\ncontract DSToken is DSTokenBase(0), DSStop {\n\n    bytes32  public  symbol;\n    uint256  public  decimals = 18; // standard token precision. override to customize\n\n    constructor(bytes32 symbol_) public {\n        symbol = symbol_;\n    }\n\n    event Mint(address indexed guy, uint wad);\n    event Burn(address indexed guy, uint wad);\n\n    function approve(address guy) public stoppable returns (bool) {\n        return super.approve(guy, uint(-1));\n    }\n\n    function approve(address guy, uint wad) public stoppable returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        stoppable\n        returns (bool)\n    {\n        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    function push(address dst, uint wad) public {\n        transferFrom(msg.sender, dst, wad);\n    }\n    function pull(address src, uint wad) public {\n        transferFrom(src, msg.sender, wad);\n    }\n    function move(address src, address dst, uint wad) public {\n        transferFrom(src, dst, wad);\n    }\n\n    function mint(uint wad) public {\n        mint(msg.sender, wad);\n    }\n    function burn(uint wad) public {\n        burn(msg.sender, wad);\n    }\n    function mint(address guy, uint wad) public auth stoppable {\n        _balances[guy] = add(_balances[guy], wad);\n        _supply = add(_supply, wad);\n        emit Mint(guy, wad);\n    }\n    function burn(address guy, uint wad) public auth stoppable {\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\n        }\n\n        _balances[guy] = sub(_balances[guy], wad);\n        _supply = sub(_supply, wad);\n        emit Burn(guy, wad);\n    }\n\n    // Optional token name\n    bytes32   public  name = \"\";\n\n    function setName(bytes32 name_) public auth {\n        name = name_;\n    }\n}\n\n////// lib/ds-chief/src/chief.sol\n// chief.sol - select an authority by consensus\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.4.23; */\n\n/* import 'ds-token/token.sol'; */\n/* import 'ds-roles/roles.sol'; */\n/* import 'ds-thing/thing.sol'; */\n\n// The right way to use this contract is probably to mix it with some kind\n// of `DSAuthority`, like with `ds-roles`.\n//   SEE DSChief\ncontract DSChiefApprovals is DSThing {\n    mapping(bytes32=>address[]) public slates;\n    mapping(address=>bytes32) public votes;\n    mapping(address=>uint256) public approvals;\n    mapping(address=>uint256) public deposits;\n    DSToken public GOV; // voting token that gets locked up\n    DSToken public IOU; // non-voting representation of a token, for e.g. secondary voting mechanisms\n    address public hat; // the chieftain's hat\n\n    uint256 public MAX_YAYS;\n\n    event Etch(bytes32 indexed slate);\n\n    // IOU constructed outside this contract reduces deployment costs significantly\n    // lock/free/vote are quite sensitive to token invariants. Caution is advised.\n    constructor(DSToken GOV_, DSToken IOU_, uint MAX_YAYS_) public\n    {\n        GOV = GOV_;\n        IOU = IOU_;\n        MAX_YAYS = MAX_YAYS_;\n    }\n\n    function lock(uint wad)\n        public\n        note\n    {\n        GOV.pull(msg.sender, wad);\n        IOU.mint(msg.sender, wad);\n        deposits[msg.sender] = add(deposits[msg.sender], wad);\n        addWeight(wad, votes[msg.sender]);\n    }\n\n    function free(uint wad)\n        public\n        note\n    {\n        deposits[msg.sender] = sub(deposits[msg.sender], wad);\n        subWeight(wad, votes[msg.sender]);\n        IOU.burn(msg.sender, wad);\n        GOV.push(msg.sender, wad);\n    }\n\n    function etch(address[] yays)\n        public\n        note\n        returns (bytes32 slate)\n    {\n        require( yays.length <= MAX_YAYS );\n        requireByteOrderedSet(yays);\n\n        bytes32 hash = keccak256(abi.encodePacked(yays));\n        slates[hash] = yays;\n        emit Etch(hash);\n        return hash;\n    }\n\n    function vote(address[] yays) public returns (bytes32)\n        // note  both sub-calls note\n    {\n        bytes32 slate = etch(yays);\n        vote(slate);\n        return slate;\n    }\n\n    function vote(bytes32 slate)\n        public\n        note\n    {\n        uint weight = deposits[msg.sender];\n        subWeight(weight, votes[msg.sender]);\n        votes[msg.sender] = slate;\n        addWeight(weight, votes[msg.sender]);\n    }\n\n    // like `drop`/`swap` except simply \"elect this address if it is higher than current hat\"\n    function lift(address whom)\n        public\n        note\n    {\n        require(approvals[whom] > approvals[hat]);\n        hat = whom;\n    }\n\n    function addWeight(uint weight, bytes32 slate)\n        internal\n    {\n        address[] storage yays = slates[slate];\n        for( uint i = 0; i < yays.length; i++) {\n            approvals[yays[i]] = add(approvals[yays[i]], weight);\n        }\n    }\n\n    function subWeight(uint weight, bytes32 slate)\n        internal\n    {\n        address[] storage yays = slates[slate];\n        for( uint i = 0; i < yays.length; i++) {\n            approvals[yays[i]] = sub(approvals[yays[i]], weight);\n        }\n    }\n\n    // Throws unless the array of addresses is a ordered set.\n    function requireByteOrderedSet(address[] yays)\n        internal\n        pure\n    {\n        if( yays.length == 0 || yays.length == 1 ) {\n            return;\n        }\n        for( uint i = 0; i < yays.length - 1; i++ ) {\n            // strict inequality ensures both ordering and uniqueness\n            require(uint(bytes32(yays[i])) < uint256(bytes32(yays[i+1])));\n        }\n    }\n}\n\n\n// `hat` address is unique root user (has every role) and the\n// unique owner of role 0 (typically 'sys' or 'internal')\ncontract DSChief is DSRoles, DSChiefApprovals {\n\n    constructor(DSToken GOV, DSToken IOU, uint MAX_YAYS)\n             DSChiefApprovals (GOV, IOU, MAX_YAYS)\n        public\n    {\n        authority = this;\n        owner = 0;\n    }\n\n    function setOwner(address owner_) public {\n        owner_;\n        revert();\n    }\n\n    function setAuthority(DSAuthority authority_) public {\n        authority_;\n        revert();\n    }\n\n    function isUserRoot(address who)\n        public\n        constant\n        returns (bool)\n    {\n        return (who == hat);\n    }\n    function setRootUser(address who, bool enabled) public {\n        who; enabled;\n        revert();\n    }\n}\n\ncontract DSChiefFab {\n    function newChief(DSToken gov, uint MAX_YAYS) public returns (DSChief chief) {\n        DSToken iou = new DSToken('IOU');\n        chief = new DSChief(gov, iou, MAX_YAYS);\n        iou.setOwner(chief);\n    }\n}\n\n////// src/VoteProxy.sol\n// VoteProxy - vote w/ a hot or cold wallet using a proxy identity\n/* pragma solidity ^0.4.24; */\n\n/* import \"ds-token/token.sol\"; */\n/* import \"ds-chief/chief.sol\"; */\n\ncontract VoteProxy {\n    address public cold;\n    address public hot;\n    DSToken public gov;\n    DSToken public iou;\n    DSChief public chief;\n\n    constructor(DSChief _chief, address _cold, address _hot) public {\n        chief = _chief;\n        cold = _cold;\n        hot = _hot;\n        \n        gov = chief.GOV();\n        iou = chief.IOU();\n        gov.approve(chief, uint256(-1));\n        iou.approve(chief, uint256(-1));\n    }\n\n    modifier auth() {\n        require(msg.sender == hot || msg.sender == cold, \"Sender must be a Cold or Hot Wallet\");\n        _;\n    }\n    \n    function lock(uint256 wad) public auth {\n        gov.pull(cold, wad);   // mkr from cold\n        chief.lock(wad);       // mkr out, ious in\n    }\n\n    function free(uint256 wad) public auth {\n        chief.free(wad);       // ious out, mkr in\n        gov.push(cold, wad);   // mkr to cold\n    }\n\n    function freeAll() public auth {\n        chief.free(chief.deposits(this));            \n        gov.push(cold, gov.balanceOf(this)); \n    }\n\n    function vote(address[] yays) public auth returns (bytes32) {\n        return chief.vote(yays);\n    }\n\n    function vote(bytes32 slate) public auth {\n        chief.vote(slate);\n    }\n}\n\n////// src/VoteProxyFactory.sol\n// VoteProxyFactory - create and keep record of proxy identities\n/* pragma solidity ^0.4.24; */\n\n/* import \"./VoteProxy.sol\"; */\n\ncontract VoteProxyFactory {\n    DSChief public chief;\n    mapping(address => VoteProxy) public hotMap;\n    mapping(address => VoteProxy) public coldMap;\n    mapping(address => address) public linkRequests;\n\n    event LinkRequested(address indexed cold, address indexed hot);\n    event LinkConfirmed(address indexed cold, address indexed hot, address indexed voteProxy);\n    \n    constructor(DSChief chief_) public { chief = chief_; }\n\n    function hasProxy(address guy) public view returns (bool) {\n        return (coldMap[guy] != address(0) || hotMap[guy] != address(0));\n    }\n\n    function initiateLink(address hot) public {\n        require(!hasProxy(msg.sender), \"Cold wallet is already linked to another Vote Proxy\");\n        require(!hasProxy(hot), \"Hot wallet is already linked to another Vote Proxy\");\n\n        linkRequests[msg.sender] = hot;\n        emit LinkRequested(msg.sender, hot);\n    }\n\n    function approveLink(address cold) public returns (VoteProxy voteProxy) {\n        require(linkRequests[cold] == msg.sender, \"Cold wallet must initiate a link first\");\n        require(!hasProxy(msg.sender), \"Hot wallet is already linked to another Vote Proxy\");\n\n        voteProxy = new VoteProxy(chief, cold, msg.sender);\n        hotMap[msg.sender] = voteProxy;\n        coldMap[cold] = voteProxy;\n        delete linkRequests[cold];\n        emit LinkConfirmed(cold, msg.sender, voteProxy);\n    }\n\n    function breakLink() public {\n        require(hasProxy(msg.sender), \"No VoteProxy found for this sender\");\n\n        VoteProxy voteProxy = coldMap[msg.sender] != address(0)\n            ? coldMap[msg.sender] : hotMap[msg.sender];\n        address cold = voteProxy.cold();\n        address hot = voteProxy.hot();\n        require(chief.deposits(voteProxy) == 0, \"VoteProxy still has funds attached to it\");\n\n        delete coldMap[cold];\n        delete hotMap[hot];\n    }\n\n    function linkSelf() public returns (VoteProxy voteProxy) {\n        initiateLink(msg.sender);\n        return approveLink(msg.sender);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cold\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iou\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"slate\",\"type\":\"bytes32\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"yays\",\"type\":\"address[]\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chief\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_chief\",\"type\":\"address\"},{\"name\":\"_cold\",\"type\":\"address\"},{\"name\":\"_hot\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051606080610cd083398101604081815282516020808501519483015160048054600160a060020a03808616600160a060020a03199283161780845560008054838c16908516178155600180548488169516949094179093557f180cb47f00000000000000000000000000000000000000000000000000000000895296519598979396169463180cb47f9483850194909391929083900390910190829087803b1580156100be57600080fd5b505af11580156100d2573d6000803e3d6000fd5b505050506040513d60208110156100e857600080fd5b505160028054600160a060020a031916600160a060020a0392831617905560048054604080517f046c472f0000000000000000000000000000000000000000000000000000000081529051919093169263046c472f92818101926020929091908290030181600087803b15801561015e57600080fd5b505af1158015610172573d6000803e3d6000fd5b505050506040513d602081101561018857600080fd5b505160038054600160a060020a031916600160a060020a0392831617905560025460048054604080517f095ea7b30000000000000000000000000000000000000000000000000000000081529185169282019290925260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b15801561021457600080fd5b505af1158015610228573d6000803e3d6000fd5b505050506040513d602081101561023e57600080fd5b505060035460048054604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a039283169381019390935260001960248401525192169163095ea7b3916044808201926020929091908290030181600087803b1580156102b457600080fd5b505af11580156102c8573d6000803e3d6000fd5b505050506040513d60208110156102de57600080fd5b50505050506109de806102f26000396000f30060806040526004361061008a5763ffffffff60e060020a60003504166312d43a51811461008f578063578e9dc5146100c05780635c38f3d1146100d5578063a2fca6b3146100ec578063a69beaba14610101578063d8ccd0f314610119578063dd46706414610131578063dde9c29714610149578063ed0813291461015e578063ffd864d3146101c5575b600080fd5b34801561009b57600080fd5b506100a46101da565b60408051600160a060020a039092168252519081900360200190f35b3480156100cc57600080fd5b506100a46101e9565b3480156100e157600080fd5b506100ea6101f8565b005b3480156100f857600080fd5b506100a4610466565b34801561010d57600080fd5b506100ea600435610475565b34801561012557600080fd5b506100ea60043561056a565b34801561013d57600080fd5b506100ea6004356106c9565b34801561015557600080fd5b506100a461082a565b34801561016a57600080fd5b50604080516020600480358082013583810280860185019096528085526101b3953695939460249493850192918291850190849080828437509497506108399650505050505050565b60408051918252519081900360200190f35b3480156101d157600080fd5b506100a4610983565b600254600160a060020a031681565b600054600160a060020a031681565b600154600160a060020a031633148061021b5750600054600160a060020a031633145b151561026e576040805160e560020a62461bcd0281526020600482015260236024820152600080516020610993833981519152604482015260ea60020a621b195d02606482015290519081900360840190fd5b60048054604080517ffc7e286d000000000000000000000000000000000000000000000000000000008152309381019390935251600160a060020a039091169163d8ccd0f391839163fc7e286d9160248083019260209291908290030181600087803b1580156102dd57600080fd5b505af11580156102f1573d6000803e3d6000fd5b505050506040513d602081101561030757600080fd5b50516040805160e060020a63ffffffff8516028152600481019290925251602480830192600092919082900301818387803b15801561034557600080fd5b505af1158015610359573d6000803e3d6000fd5b505060025460008054604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03948516965063b753a98c9550919093169285926370a08231926024808401936020939083900390910190829087803b1580156103d457600080fd5b505af11580156103e8573d6000803e3d6000fd5b505050506040513d60208110156103fe57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a039093166004840152602483019190915251604480830192600092919082900301818387803b15801561044c57600080fd5b505af1158015610460573d6000803e3d6000fd5b50505050565b600354600160a060020a031681565b600154600160a060020a03163314806104985750600054600160a060020a031633145b15156104eb576040805160e560020a62461bcd0281526020600482015260236024820152600080516020610993833981519152604482015260ea60020a621b195d02606482015290519081900360840190fd5b60048054604080517fa69beaba00000000000000000000000000000000000000000000000000000000815292830184905251600160a060020a039091169163a69beaba91602480830192600092919082900301818387803b15801561054f57600080fd5b505af1158015610563573d6000803e3d6000fd5b5050505050565b600154600160a060020a031633148061058d5750600054600160a060020a031633145b15156105e0576040805160e560020a62461bcd0281526020600482015260236024820152600080516020610993833981519152604482015260ea60020a621b195d02606482015290519081900360840190fd5b60048054604080517fd8ccd0f300000000000000000000000000000000000000000000000000000000815292830184905251600160a060020a039091169163d8ccd0f391602480830192600092919082900301818387803b15801561064457600080fd5b505af1158015610658573d6000803e3d6000fd5b505060025460008054604080517fb753a98c000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015260248101889052905191909316945063b753a98c935060448084019382900301818387803b15801561054f57600080fd5b600154600160a060020a03163314806106ec5750600054600160a060020a031633145b151561073f576040805160e560020a62461bcd0281526020600482015260236024820152600080516020610993833981519152604482015260ea60020a621b195d02606482015290519081900360840190fd5b60025460008054604080517ff2d5d56b000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018690529051919093169263f2d5d56b92604480830193919282900301818387803b1580156107ae57600080fd5b505af11580156107c2573d6000803e3d6000fd5b505060048054604080517fdd46706400000000000000000000000000000000000000000000000000000000815292830186905251600160a060020a03909116935063dd4670649250602480830192600092919082900301818387803b15801561054f57600080fd5b600154600160a060020a031681565b600154600090600160a060020a031633148061085f5750600054600160a060020a031633145b15156108b2576040805160e560020a62461bcd0281526020600482015260236024820152600080516020610993833981519152604482015260ea60020a621b195d02606482015290519081900360840190fd5b600480546040517fed0813290000000000000000000000000000000000000000000000000000000081526020928101838152855160248301528551600160a060020a039093169363ed0813299387938392604490910191818601910280838360005b8381101561092c578181015183820152602001610914565b5050505090500192505050602060405180830381600087803b15801561095157600080fd5b505af1158015610965573d6000803e3d6000fd5b505050506040513d602081101561097b57600080fd5b505192915050565b600454600160a060020a031681560053656e646572206d757374206265206120436f6c64206f7220486f742057616ca165627a7a72305820bc9db7c0e2fcc3c4db9dc7c158a86f0200c00663b1a3f88ccbd4f056c9ae3de300290000000000000000000000008e2a84d6ade1e7fffee039a35ef5f19f1305715200000000000000000000000037686958b6e4bcc96f708a954505f77d89f4b343000000000000000000000000b93f14636678d680dcbbed20c77f2b6220b52c39",
  "constructorArguments": "0000000000000000000000008e2a84d6ade1e7fffee039a35ef5f19f1305715200000000000000000000000037686958b6e4bcc96f708a954505f77d89f4b343000000000000000000000000b93f14636678d680dcbbed20c77f2b6220b52c39"
}