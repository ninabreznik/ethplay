{
  "address": "0xe901c7b3d178d5eb29b8cc4d137bd9f0bf07f853",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SatoshiZero",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-18\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/libraries/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: contracts/standards/Ownable.sol\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/ItemBase.sol\n\ncontract ItemBase is Ownable {\n    using SafeMath for uint;\n\n    struct Item {\n        string name;\n        string itemType;\n        string size;\n        string color;\n        // price (in wei) of item\n        uint128 price;\n    }\n\n    uint128 MAX_ITEMS = 1;\n    // array of items\n    Item[] items;\n\n    // @dev A mapping of item ids to the address that owns them\n    mapping(uint => address) public itemIndexToOwner;\n\n    // @dev A mapping from owner address to count of tokens that address owns.\n    //  Used internally inside balanceOf() to resolve ownership count.\n    mapping (address => uint) public ownershipTokenCount;\n\n    // @dev A mapping from item ids to an address that has been approved to call\n    //  transferFrom(). Each item can only have one approved address for transfer\n    //  at any time. A zero value means no approval is outstanding.\n    mapping (uint => address) public itemIndexToApproved;\n\n\n    function getItem( uint _itemId ) public view returns(string name, string itemType, string size, string color, uint128 price) {\n        Item memory _item = items[_itemId];\n\n        name = _item.name;\n        itemType = _item.itemType;\n        size = _item.size;\n        color = _item.color;\n        price = _item.price;\n    }\n}\n\n// File: contracts/standards/ERC721.sol\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd\ncontract ERC721 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    function approve(address _approved, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    // function tokenMetadata(uint256 _tokenId) constant returns (string infoUrl);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n}\n\n// File: contracts/SatoshiZero.sol\n\ncontract SatoshiZero is ItemBase, ERC721 {\n    string public constant name = \"Satoshis Closet\";\n    string public constant symbol = \"STCL\";\n    string public constant tokenName = \"Tom's Shirt / The Proof of Concept\";\n\n    /// @dev Purchase event is fired after a purchase has been completed\n    event Purchase(address owner, uint itemId);\n\n    // Internal utility functions: These functions all assume that their input arguments are valid\n    // We leave it to public methods to sanitize their inputs and follow the required logic.\n\n    // @dev Checks if a given address is the current owner of a particular item.\n    // @param _claimant the address we are validating against.\n    // @param _tokenId item id, only valid when > 0\n    function _owns(address _claimant, uint _tokenId) internal view returns (bool) {\n        return itemIndexToOwner[_tokenId] == _claimant;\n    }\n\n    // @dev Checks if a given address currently has transferApproval for a particular item.\n    // @param _claimant the address we are confirming item is approved for.\n    // @param _tokenId item id, only valid when > 0\n    function _approvedFor(address _claimant, uint _tokenId) internal view returns (bool) {\n        return itemIndexToApproved[_tokenId] == _claimant;\n    }\n\n    // @dev Marks an address as being approved for transferFrom(), overwriting any previous approval\n    //  Setting _approved to address(0) clears all transfer approval.\n    //  NOTE: _approve() does NOT send the Approval event (IS THIS RIGHT?)\n    function _approve(uint _tokenId, address _approved) internal {\n        itemIndexToApproved[_tokenId] = _approved;\n    }\n\n    function balanceOf(address _owner) external view returns (uint) {\n        return ownershipTokenCount[_owner];\n    }\n\n    function tokenMetadata(uint256 _tokenId) public view returns (string) {\n        return 'https://satoshiscloset.com/SatoshiZero.json';\n    }\n\n    // @dev function to transfer item from one user to another\n    //  this will become useful when reselling is implemented\n    function transfer(address _to, uint _tokenId) external {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // You can only send your own item\n        require(_owns(msg.sender, _tokenId));\n        // Reassign ownership, clear pending approvals, emit Transfer event.\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice Grant another address the right to transfer a specific item via\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\n    ///  clear all approvals.\n    /// @param _tokenId The ID of the item that can be transferred if this call succeeds.\n    /// @dev Required for ERC-721 compliance.\n    function approve(address _to, uint _tokenId) external {\n        // Only an owner can grant transfer approval.\n        require(_owns(msg.sender, _tokenId));\n\n        // Register the approval (replacing any previous approval).\n        _approve(_tokenId, _to);\n\n        // Emit approval event.\n        emit Approval(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice Transfer an item owned by another address, for which the calling address\n    ///  has previously been granted transfer approval by the owner.\n    /// @param _from The address that owns the item to be transfered.\n    /// @param _to The address that should take ownership of the item. Can be any address,\n    ///  including the caller.\n    /// @param _tokenId The ID of the item to be transferred.\n    /// @dev Required for ERC-721 compliance.\n    function transferFrom(address _from, address _to, uint256 _tokenId) external {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Check for approval and valid ownership\n        require(_approvedFor(msg.sender, _tokenId));\n        require(_owns(_from, _tokenId));\n\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @notice Returns the total number of items currently in existence.\n    /// @dev Required for ERC-721 compliance.\n    function totalSupply() public view returns (uint) {\n        return items.length;\n    }\n\n    /// @notice Returns the address currently assigned ownership of a given item.\n    /// @dev Required for ERC-721 compliance.\n    function ownerOf(uint _tokenId) external view returns (address) {\n        owner = itemIndexToOwner[_tokenId];\n        require(owner != address(0));\n    }\n\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n        uint256 tokenCount = ownershipTokenCount[_owner];\n\n        if (tokenCount == 0) {\n            // Return an empty array\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalItems = totalSupply();\n            uint256 resultIndex = 0;\n\n            // We count on the fact that all items have IDs starting at 1 and increasing\n            // sequentially up to the totalItems count.\n            uint256 itemId;\n\n            for (itemId = 1; itemId <= totalItems; itemId++) {\n                if (itemIndexToOwner[itemId] == _owner) {\n                    result[resultIndex] = itemId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }\n    }\n\n    function _purchase(string _name, string _type, string _size, string _color, uint128 _price) internal returns (uint) {\n        Item memory _item = Item({ name: _name, itemType: _type, size: _size, color: _color, price: _price });\n        uint itemId = items.push(_item);\n\n        // emit purchase event\n        emit Purchase(msg.sender, itemId);\n\n        // This will assign ownership, and also emit the Transfer event as\n        // per ERC721 draft\n        _transfer(0, owner, itemId);\n\n        return itemId;\n    }\n\n    // @dev Assigns ownership of a specific item to an address.\n    function _transfer(address _from, address _to, uint _tokenId) internal {\n        ownershipTokenCount[_to] = ownershipTokenCount[_to].add(1);\n        // transfer ownership\n        itemIndexToOwner[_tokenId] = _to;\n        // When creating new items _from is 0x0, but we can't account that address.\n        if (_from != address(0)) {\n            ownershipTokenCount[_from] = ownershipTokenCount[_from].sub(1);\n            // clear any previously approved ownership exchange\n            delete itemIndexToApproved[_tokenId];\n        }\n        // Emit the transfer event.\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n    function createItem( string _name, string _itemType, string _size, string _color, uint128 _price) external onlyOwner returns (uint) {\n        require(MAX_ITEMS > totalSupply());\n\n        Item memory _item = Item({\n            name: _name,\n            itemType: _itemType,\n            size: _size,\n            color: _color,\n            price: _price\n        });\n        uint itemId = items.push(_item);\n\n        _transfer(0, owner, itemId);\n\n        return itemId;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getItem\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"itemType\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"string\"},{\"name\":\"color\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_itemType\",\"type\":\"string\"},{\"name\":\"_size\",\"type\":\"string\"},{\"name\":\"_color\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint128\"}],\"name\":\"createItem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownershipTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405260018060006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c888061008c6000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610101578063095ea7b31461019157806318160ddd146101de57806323b872dd146102095780633129e7731461027657806345344e031461048b5780636352211e1461053e5780636914db60146105ab5780636c02a9311461065157806370a08231146106e15780638462151c1461073857806388072700146107d05780638da5cb5b1461083d57806395d89b4114610894578063a9059cbb14610924578063cec21acb14610971578063f2fde38b146109c8578063fe9b1a8914610a0b575b600080fd5b34801561010d57600080fd5b50610116610a78565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015657808201518184015260208101905061013b565b50505050905090810190601f1680156101835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019d57600080fd5b506101dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ab1565b005b3480156101ea57600080fd5b506101f3610b2f565b6040518082815260200191505060405180910390f35b34801561021557600080fd5b50610274600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b3c565b005b34801561028257600080fd5b506102a160048036038101908080359060200190929190505050610bb2565b6040518080602001806020018060200180602001866fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200185810385528a818151815260200191508051906020019080838360005b838110156103175780820151818401526020810190506102fc565b50505050905090810190601f1680156103445780820380516001836020036101000a031916815260200191505b50858103845289818151815260200191508051906020019080838360005b8381101561037d578082015181840152602081019050610362565b50505050905090810190601f1680156103aa5780820380516001836020036101000a031916815260200191505b50858103835288818151815260200191508051906020019080838360005b838110156103e35780820151818401526020810190506103c8565b50505050905090810190601f1680156104105780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b8381101561044957808201518184015260208101905061042e565b50505050905090810190601f1680156104765780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561049757600080fd5b5061052860048036038101908080359060200190820180359060200191909192939192939080359060200190820180359060200191909192939192939080359060200190820180359060200191909192939192939080359060200190820180359060200191909192939192939080356fffffffffffffffffffffffffffffffff169060200190929190505050610eec565b6040518082815260200191505060405180910390f35b34801561054a57600080fd5b50610569600480360381019080803590602001909291905050506111c0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105b757600080fd5b506105d660048036038101908080359060200190929190505050611297565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106165780820151818401526020810190506105fb565b50505050905090810190601f1680156106435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561065d57600080fd5b506106666112fc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106a657808201518184015260208101905061068b565b50505050905090810190601f1680156106d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106ed57600080fd5b50610722600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061135c565b6040518082815260200191505060405180910390f35b34801561074457600080fd5b50610779600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113a5565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156107bc5780820151818401526020810190506107a1565b505050509050019250505060405180910390f35b3480156107dc57600080fd5b506107fb60048036038101908080359060200190929190505050611529565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561084957600080fd5b5061085261155c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108a057600080fd5b506108a9611581565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108e95780820151818401526020810190506108ce565b50505050905090810190601f1680156109165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561093057600080fd5b5061096f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115ba565b005b34801561097d57600080fd5b506109b2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061161a565b6040518082815260200191505060405180910390f35b3480156109d457600080fd5b50610a09600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611632565b005b348015610a1757600080fd5b50610a3660048036038101908080359060200190929190505050611787565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6040805190810160405280600f81526020017f5361746f7368697320436c6f736574000000000000000000000000000000000081525081565b610abb33826117ba565b1515610ac657600080fd5b610ad08183611826565b808273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000600280549050905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610b7857600080fd5b610b82338261187c565b1515610b8d57600080fd5b610b9783826117ba565b1515610ba257600080fd5b610bad8383836118e8565b505050565b6060806060806000610bc2611b75565b600287815481101515610bd157fe5b906000526020600020906005020160a06040519081016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c845780601f10610c5957610100808354040283529160200191610c84565b820191906000526020600020905b815481529060010190602001808311610c6757829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d265780601f10610cfb57610100808354040283529160200191610d26565b820191906000526020600020905b815481529060010190602001808311610d0957829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dc85780601f10610d9d57610100808354040283529160200191610dc8565b820191906000526020600020905b815481529060010190602001808311610dab57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e6a5780601f10610e3f57610100808354040283529160200191610e6a565b820191906000526020600020905b815481529060010190602001808311610e4d57829003601f168201915b505050505081526020016004820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050905080600001519550806020015194508060400151935080606001519250806080015191505091939590929450565b6000610ef6611b75565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f5357600080fd5b610f5b610b2f565b600160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16111515610f9857600080fd5b60a0604051908101604052808d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505081526020018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508152602001856fffffffffffffffffffffffffffffffff1681525091506002829080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000190805190602001906110e6929190611bb7565b506020820151816001019080519060200190611103929190611bb7565b506040820151816002019080519060200190611120929190611bb7565b50606082015181600301908051906020019061113d929190611bb7565b5060808201518160040160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505090506111ae60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836118e8565b80925050509998505050505050505050565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561129257600080fd5b919050565b60608060405190810160405280602b81526020017f68747470733a2f2f7361746f73686973636c6f7365742e636f6d2f5361746f7381526020017f68695a65726f2e6a736f6e0000000000000000000000000000000000000000008152509050919050565b606060405190810160405280602281526020017f546f6d2773205368697274202f205468652050726f6f66206f6620436f6e636581526020017f707400000000000000000000000000000000000000000000000000000000000081525081565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600060606000806000600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549450600085141561143357600060405190808252806020026020018201604052801561142b5781602001602082028038833980820191505090505b50955061151f565b846040519080825280602002602001820160405280156114625781602001602082028038833980820191505090505b50935061146d610b2f565b925060009150600190505b828111151561151b578673ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561150e578084838151811015156114f757fe5b906020019060200201818152505081806001019250505b8080600101915050611478565b8395505b5050505050919050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f5354434c0000000000000000000000000000000000000000000000000000000081525081565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156115f657600080fd5b61160033826117ba565b151561160b57600080fd5b6116163383836118e8565b5050565b60046020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561168d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156116c957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008273ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b806005600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008273ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b61193b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b3390919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515611ad357611a596001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b5490919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000808284019050838110151515611b4a57600080fd5b8091505092915050565b600080838311151515611b6657600080fd5b82840390508091505092915050565b60a0604051908101604052806060815260200160608152602001606081526020016060815260200160006fffffffffffffffffffffffffffffffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611bf857805160ff1916838001178555611c26565b82800160010185558215611c26579182015b82811115611c25578251825591602001919060010190611c0a565b5b509050611c339190611c37565b5090565b611c5991905b80821115611c55576000816000905550600101611c3d565b5090565b905600a165627a7a72305820dbcbb2e83de43e819d84f3f6bf672c25f14b689238c059d3bf6fd7b502fcbc340029"
}