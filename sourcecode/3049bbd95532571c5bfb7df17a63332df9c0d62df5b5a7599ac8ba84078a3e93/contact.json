{
  "address": "0x7e2c620312f49476efd3e316f834dc0e22c62ad1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KittiefightToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-06\n*/\n\npragma solidity ^0.4.24;\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC865 is ERC20 {\n\n    function transferPreSigned(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function approvePreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function increaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function decreaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n\n    function transferFromPreSigned(\n        bytes _signature,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract ERC865Token is ERC865, StandardToken {\n\n    /* Nonces of transfers performed */\n    mapping(bytes => bool) signatures;\n\n    event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n    event ApprovalPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n\n    /**\n     * @notice Submit a presigned transfer\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function transferPreSigned(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0), \"No address provided\");\n        require(signatures[_signature] == false, \"No signature\");\n\n        bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n\n        address from = recover(hashedTx, _signature);\n        require(from != address(0), \"From address is not provided\");\n\n        balances[from] = balances[from].sub(_value).sub(_fee);\n        balances[_to] = balances[_to].add(_value);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Transfer(from, _to, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n        return true;\n    }\n\n    /**\n     * @notice Submit a presigned approval\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _spender address The address which will spend the funds.\n     * @param _value uint256 The amount of tokens to allow.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function approvePreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0), \"Spender is not provided\");\n        require(signatures[_signature] == false, \"No signature\");\n\n        bytes32 hashedTx = approvePreSignedHashing(address(this), _spender, _value, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0), \"From addres is not provided\");\n\n        allowed[from][_spender] = _value;\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Approval(from, _spender, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\n        return true;\n    }\n\n    /**\n     * @notice Increase the amount of tokens that an owner allowed to a spender.\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _spender address The address which will spend the funds.\n     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function increaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0), \"Spender address is not provided\");\n        require(signatures[_signature] == false, \"No Signature\");\n\n        bytes32 hashedTx = increaseApprovalPreSignedHashing(address(this), _spender, _addedValue, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0), \"From address is not provided\");\n\n        allowed[from][_spender] = allowed[from][_spender].add(_addedValue);\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Approval(from, _spender, allowed[from][_spender]);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n    }\n\n    /**\n     * @notice Decrease the amount of tokens that an owner allowed to a spender.\n     * @param _signature bytes The signature, issued by the owner\n     * @param _spender address The address which will spend the funds.\n     * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function decreaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_spender != address(0), \"Spender address is not provided\");\n        require(signatures[_signature] == false, \"No sognature\");\n\n        bytes32 hashedTx = decreaseApprovalPreSignedHashing(address(this), _spender, _subtractedValue, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0), \"From address is not provided\");\n\n        uint oldValue = allowed[from][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[from][_spender] = 0;\n        } else {\n            allowed[from][_spender] = oldValue.sub(_subtractedValue);\n        }\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Approval(from, _spender, _subtractedValue);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n    }\n\n    /**\n     * @notice Transfer tokens from one address to another\n     * @param _signature bytes The signature, issued by the spender.\n     * @param _from address The address which you want to send tokens from.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function transferFromPreSigned(\n        bytes _signature,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0), \"No [to] address provided\");\n        require(signatures[_signature] == false, \"No signature provided\");\n\n        bytes32 hashedTx = transferFromPreSignedHashing(address(this), _from, _to, _value, _fee, _nonce);\n\n        address spender = recover(hashedTx, _signature);\n        require(spender != address(0), \"Spender address is not provided\");\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][spender] = allowed[_from][spender].sub(_value);\n\n        balances[spender] = balances[spender].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        signatures[_signature] = true;\n\n        emit Transfer(_from, _to, _value);\n        emit Transfer(spender, msg.sender, _fee);\n        return true;\n    }\n\n\n    /**\n     * @notice Hash (keccak256) of the payload used by transferPreSigned\n     * @param _token address The address of the token.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function transferPreSignedHashing(\n        address _token,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"48664c16\": transferPreSignedHashing(address,address,address,uint256,uint256,uint256) */\n        return keccak256(abi.encodePacked(bytes4(0x48664c16), _token, _to, _value, _fee, _nonce));\n    }\n\n    /**\n     * @notice Hash (keccak256) of the payload used by approvePreSigned\n     * @param _token address The address of the token\n     * @param _spender address The address which will spend the funds.\n     * @param _value uint256 The amount of tokens to allow.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function approvePreSignedHashing(\n        address _token,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"f7ac9c2e\": approvePreSignedHashing(address,address,uint256,uint256,uint256) */\n        return keccak256(abi.encodePacked(bytes4(0xf7ac9c2e), _token, _spender, _value, _fee, _nonce));\n    }\n\n    /**\n     * @notice Hash (keccak256) of the payload used by increaseApprovalPreSigned\n     * @param _token address The address of the token\n     * @param _spender address The address which will spend the funds.\n     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function increaseApprovalPreSignedHashing(\n        address _token,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"a45f71ff\": increaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\n        return keccak256(abi.encodePacked(bytes4(0xa45f71ff), _token, _spender, _addedValue, _fee, _nonce));\n    }\n\n     /**\n      * @notice Hash (keccak256) of the payload used by decreaseApprovalPreSigned\n      * @param _token address The address of the token\n      * @param _spender address The address which will spend the funds.\n      * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n      * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n      * @param _nonce uint256 Presigned transaction number.\n      */\n    function decreaseApprovalPreSignedHashing(\n        address _token,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"59388d78\": decreaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\n        return keccak256(abi.encodePacked(bytes4(0x59388d78), _token, _spender, _subtractedValue, _fee, _nonce));\n    }\n\n    /**\n     * @notice Hash (keccak256) of the payload used by transferFromPreSigned\n     * @param _token address The address of the token\n     * @param _from address The address which you want to send tokens from.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function transferFromPreSignedHashing(\n        address _token,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        public\n        pure\n        returns (bytes32)\n    {\n        /* \"b7656dc5\": transferFromPreSignedHashing(address,address,address,uint256,uint256,uint256) */\n        return keccak256(abi.encodePacked(bytes4(0xb7656dc5), _token, _from, _to, _value, _fee, _nonce));\n    }\n\n    /**\n     * @notice Recover signer address from a message by using his signature\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n     * @param sig bytes signature, the signature is generated using web3.eth.sign()\n     */\n    function recover(bytes32 hash, bytes sig) public pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        //Check the signature length\n        if (sig.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(hash, v, r, s);\n        }\n    }\n}\n\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n\ncontract KittiefightToken is ERC865Token, PausableToken, CappedToken {\n\n    /* Set the token name for display */\n    string public constant symbol = \"KTY\";\n\n    /* Set the token symbol for display */\n    string public constant name = \"Kittiefight\";\n\n    /* Set the number of decimals for display */\n    uint8 public constant decimals = 18;\n\n    /* 100 milion KTY specified */\n    uint256 public constant amountOfTokenToMint = 10**8 * 10**uint256(decimals);\n\n    /* Is crowdsale filtering non registered users. false by default */\n    bool public isTransferWhitelistOnly = false;\n\n    /* Mapping of whitelisted users */\n    mapping (address => bool) transfersWhitelist;\n\n    event UserAllowedToTransfer(address user);\n\n    event TransferWhitelistOnly(bool flag);\n\n\n    constructor() CappedToken(amountOfTokenToMint) {\n        \n    }\n\n    /**\n     * @notice Is the address allowed to transfer\n     * @return true if the sender can transfer\n     */\n    function isUserAllowedToTransfer(address _user) public constant returns (bool) {\n        require(_user != 0x0);\n        return transfersWhitelist[_user];\n    }\n\n    /**\n     * @notice Enabling / Disabling transfers of non whitelisted users\n     */\n    function setWhitelistedOnly(bool _isWhitelistOnly) onlyOwner public {\n        if (isTransferWhitelistOnly != _isWhitelistOnly) {\n            isTransferWhitelistOnly = _isWhitelistOnly;\n            TransferWhitelistOnly(_isWhitelistOnly);\n        }\n    }\n\n    /**\n     * @notice Adding a user to the whitelist\n     */\n    function whitelistUserForTransfers(address _user) onlyOwner public {\n        require(!isUserAllowedToTransfer(_user));\n        transfersWhitelist[_user] = true;\n        UserAllowedToTransfer(_user);\n    }\n\n    /**\n     * @notice Remove a user from the whitelist\n     */\n    function blacklistUserForTransfers(address _user) onlyOwner public {\n        require(isUserAllowedToTransfer(_user));\n        transfersWhitelist[_user] = false;\n        UserAllowedToTransfer(_user);\n    }\n\n    /**\n    * @notice transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n      if (isTransferWhitelistOnly) {\n        require(isUserAllowedToTransfer(msg.sender));\n      }\n      return super.transfer(_to, _value);\n    }\n\n    /**\n     * @notice Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        if (isTransferWhitelistOnly) {\n            require(isUserAllowedToTransfer(_from));\n        }\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * @notice Submit a presigned transfer\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function transferPreSigned(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        whenNotPaused\n        public\n        returns (bool)\n    {\n        if (isTransferWhitelistOnly) {\n            bytes32 hashedTx = super.transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n            address from = recover(hashedTx, _signature);\n            require(isUserAllowedToTransfer(from));\n        }\n        return super.transferPreSigned(_signature, _to, _value, _fee, _nonce);\n    }\n\n    /**\n     * @notice Submit a presigned approval\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _spender address The address which will spend the funds.\n     * @param _value uint256 The amount of tokens to allow.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n     * @param _nonce uint256 Presigned transaction number.\n     */\n    function approvePreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n        whenNotPaused\n        public\n        returns (bool)\n    {\n        if (isTransferWhitelistOnly) {\n            bytes32 hashedTx = super.approvePreSignedHashing(address(this), _spender, _value, _fee, _nonce);\n            address from = recover(hashedTx, _signature);\n            require(isUserAllowedToTransfer(from));\n        }\n        return super.approvePreSigned(_signature, _spender, _value, _fee, _nonce);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"blacklistUserForTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransferWhitelistOnly\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfTokenToMint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"decreaseApprovalPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"approvePreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"decreaseApprovalPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isWhitelistOnly\",\"type\":\"bool\"}],\"name\":\"setWhitelistedOnly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isUserAllowedToTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"increaseApprovalPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"increaseApprovalPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferFromPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferFromPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"approvePreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"whitelistUserForTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserAllowedToTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"TransferWhitelistOnly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TransferPreSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ApprovalPreSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526004805460a060020a61ffff02191690556006805460ff1916905534801561002b57600080fd5b5060048054600160a060020a031916331790556a52b7d2dcc80cd2e4000000600555612cb18061005c6000396000f3006080604052600436106101cc5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146101d157806306fdde03146101fa578063095ea7b3146102845780631296830d146102a857806315420b711461031b57806318160ddd1461035d57806319045a251461037257806323b872dd146103ec578063260d387b146104165780632b2be30914610439578063313ce5671461044e578063355274ea146104795780633f4ba83a1461048e57806340c10f19146104a35780635478bc6b146104c757806359388d78146104dc5780635c975abb1461050c578063617b390b14610521578063661884631461059457806370a08231146105b85780637d64bcb4146105d95780638456cb59146105ee5780638be52783146106035780638da5cb5b1461067657806395d89b411461068b578063a157696b146106a0578063a25b9384146106ba578063a45f71ff146106db578063a9059cbb1461070b578063adb8249e1461072f578063b7656dc5146107a2578063bca50515146107d8578063d73dd62314610855578063dd62ed3e14610879578063f2fde38b146108a0578063f7ac9c2e146108c1578063fb37baa1146108f1575b600080fd5b3480156101dd57600080fd5b506101e6610912565b604080519115158252519081900360200190f35b34801561020657600080fd5b5061020f610922565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610249578181015183820152602001610231565b50505050905090810190601f1680156102765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029057600080fd5b506101e6600160a060020a0360043516602435610959565b3480156102b457600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101e694369492936024939284019190819084018382808284375094975050508335600160a060020a0316945050506020820135916040810135915060600135610984565b34801561032757600080fd5b5061034b600160a060020a03600435811690602435166044356064356084356109f5565b60408051918252519081900360200190f35b34801561036957600080fd5b5061034b610ad9565b34801561037e57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526103d0958335953695604494919390910191908190840183828082843750949750610adf9650505050505050565b60408051600160a060020a039092168252519081900360200190f35b3480156103f857600080fd5b506101e6600160a060020a0360043581169060243516604435610bb4565b34801561042257600080fd5b50610437600160a060020a0360043516610be9565b005b34801561044557600080fd5b506101e6610c6c565b34801561045a57600080fd5b50610463610c75565b6040805160ff9092168252519081900360200190f35b34801561048557600080fd5b5061034b610c7a565b34801561049a57600080fd5b50610437610c80565b3480156104af57600080fd5b506101e6600160a060020a0360043516602435610cf8565b3480156104d357600080fd5b5061034b610d54565b3480156104e857600080fd5b5061034b600160a060020a0360043581169060243516604435606435608435610d63565b34801561051857600080fd5b506101e6610e10565b34801561052d57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101e694369492936024939284019190819084018382808284375094975050508335600160a060020a0316945050506020820135916040810135915060600135610e20565b3480156105a057600080fd5b506101e6600160a060020a0360043516602435610e85565b3480156105c457600080fd5b5061034b600160a060020a0360043516610ea9565b3480156105e557600080fd5b506101e6610ec4565b3480156105fa57600080fd5b50610437610f49565b34801561060f57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101e694369492936024939284019190819084018382808284375094975050508335600160a060020a0316945050506020820135916040810135915060600135610fc6565b34801561068257600080fd5b506103d06113b3565b34801561069757600080fd5b5061020f6113c2565b3480156106ac57600080fd5b5061043760043515156113f9565b3480156106c657600080fd5b506101e6600160a060020a0360043516611468565b3480156106e757600080fd5b5061034b600160a060020a036004358116906024351660443560643560843561149e565b34801561071757600080fd5b506101e6600160a060020a036004351660243561154b565b34801561073b57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101e694369492936024939284019190819084018382808284375094975050508335600160a060020a0316945050506020820135916040810135915060600135611577565b3480156107ae57600080fd5b5061034b600160a060020a036004358116906024358116906044351660643560843560a435611939565b3480156107e457600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101e694369492936024939284019190819084018382808284375094975050600160a060020a03853581169650602086013516946040810135945060608101359350608001359150611a289050565b34801561086157600080fd5b506101e6600160a060020a0360043516602435611ddb565b34801561088557600080fd5b5061034b600160a060020a0360043581169060243516611dff565b3480156108ac57600080fd5b50610437600160a060020a0360043516611e2a565b3480156108cd57600080fd5b5061034b600160a060020a0360043581169060243516604435606435608435611ebf565b3480156108fd57600080fd5b50610437600160a060020a0360043516611f6c565b60045460a860020a900460ff1681565b60408051808201909152600b81527f4b69747469656669676874000000000000000000000000000000000000000000602082015281565b60045460009060a060020a900460ff161561097357600080fd5b61097d8383611ff1565b9392505050565b6004546000908190819060a060020a900460ff16156109a257600080fd5b60065460ff16156109dc576109ba30888888886109f5565b91506109c68289610adf565b90506109d181611468565b15156109dc57600080fd5b6109e98888888888612045565b98975050505050505050565b604080517f48664c16000000000000000000000000000000000000000000000000000000006020808301919091526c01000000000000000000000000600160a060020a03808a16820260248501528816026038830152604c8201869052606c8201859052608c8083018590528351808403909101815260ac909201928390528151600093918291908401908083835b60208310610aa35780518252601f199092019160209182019101610a84565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209998505050505050505050565b60015490565b60008060008084516041141515610af95760009350610bab565b50505060208201516040830151606084015160001a601b60ff82161015610b1e57601b015b8060ff16601b14158015610b3657508060ff16601c14155b15610b445760009350610bab565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af1158015610b9e573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b60065460009060ff1615610bd657610bcb84611468565b1515610bd657600080fd5b610be18484846123de565b949350505050565b600454600160a060020a03163314610c0057600080fd5b610c0981611468565b1515610c1457600080fd5b600160a060020a038116600081815260076020908152604091829020805460ff19169055815192835290517fad88aec34f4861d5a8a34d064eba1c3ce7222a541db6a6cfbcef0e6aa0dac53c9281900390910190a150565b60065460ff1681565b601281565b60055481565b600454600160a060020a03163314610c9757600080fd5b60045460a060020a900460ff161515610caf57600080fd5b6004805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600454600090600160a060020a03163314610d1257600080fd5b60045460a860020a900460ff1615610d2957600080fd5b600554600154610d3f908463ffffffff61240316565b1115610d4a57600080fd5b61097d8383612412565b6a52b7d2dcc80cd2e400000081565b604080517f59388d78000000000000000000000000000000000000000000000000000000006020808301919091526c01000000000000000000000000600160a060020a03808a16820260248501528816026038830152604c8201869052606c8201859052608c8083018590528351808403909101815260ac9092019283905281516000939182919084019080838360208310610aa35780518252601f199092019160209182019101610a84565b60045460a060020a900460ff1681565b6004546000908190819060a060020a900460ff1615610e3e57600080fd5b60065460ff1615610e7857610e563088888888611ebf565b9150610e628289610adf565b9050610e6d81611468565b1515610e7857600080fd5b6109e9888888888861250a565b60045460009060a060020a900460ff1615610e9f57600080fd5b61097d8383612876565b600160a060020a031660009081526020819052604090205490565b600454600090600160a060020a03163314610ede57600080fd5b60045460a860020a900460ff1615610ef557600080fd5b6004805475ff000000000000000000000000000000000000000000191660a860020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600454600160a060020a03163314610f6057600080fd5b60045460a060020a900460ff1615610f7757600080fd5b6004805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b6000808080600160a060020a038816151561102b576040805160e560020a62461bcd02815260206004820152601f60248201527f5370656e6465722061646472657373206973206e6f742070726f766964656400604482015290519081900360640190fd5b6003896040518082805190602001908083835b6020831061105d5780518252601f19909201916020918201910161103e565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff161591506110e59050576040805160e560020a62461bcd02815260206004820152600c60248201527f4e6f20736f676e61747572650000000000000000000000000000000000000000604482015290519081900360640190fd5b6110f23089898989610d63565b92506110fe838a610adf565b9150600160a060020a0382161515611160576040805160e560020a62461bcd02815260206004820152601c60248201527f46726f6d2061646472657373206973206e6f742070726f766964656400000000604482015290519081900360640190fd5b50600160a060020a038082166000908152600260209081526040808320938b1683529290522054808711156111bc57600160a060020a038083166000908152600260209081526040808320938c168352929052908120556111f3565b6111cc818863ffffffff61295416565b600160a060020a038084166000908152600260209081526040808320938d16835292905220555b600160a060020a03821660009081526020819052604090205461121c908763ffffffff61295416565b600160a060020a03831660009081526020819052604080822092909255338152205461124e908763ffffffff61240316565b60008033600160a060020a0316600160a060020a0316815260200190815260200160002081905550600160038a6040518082805190602001908083835b602083106112aa5780518252601f19909201916020918201910161128b565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520805460ff1916961515969096179095558b84529351600160a060020a038d81169590881694600080516020612c668339815191529450829003019150a36040805187815290513391600160a060020a03851691600080516020612c468339815191529181900360200190a3600160a060020a038281166000818152600260209081526040808320948d16808452948252918290205482519081529081018a90528151339493927f43a220267705e74ee2ceafd46afc841850db6f85a662189a7def697bbdd90ffb928290030190a450600198975050505050505050565b600454600160a060020a031681565b60408051808201909152600381527f4b54590000000000000000000000000000000000000000000000000000000000602082015281565b600454600160a060020a0316331461141057600080fd5b60065460ff16151581151514611465576006805482151560ff19909116811790915560408051918252517f757db31e37ddce6c8bda07399e53891f513ac7cacd86ae8f781bab706c74d45f9181900360200190a15b50565b6000600160a060020a038216151561147f57600080fd5b50600160a060020a031660009081526007602052604090205460ff1690565b604080517fa45f71ff000000000000000000000000000000000000000000000000000000006020808301919091526c01000000000000000000000000600160a060020a03808a16820260248501528816026038830152604c8201869052606c8201859052608c8083018590528351808403909101815260ac9092019283905281516000939182919084019080838360208310610aa35780518252601f199092019160209182019101610a84565b60065460009060ff161561156d5761156233611468565b151561156d57600080fd5b61097d8383612966565b60008080600160a060020a03871615156115db576040805160e560020a62461bcd02815260206004820152601f60248201527f5370656e6465722061646472657373206973206e6f742070726f766964656400604482015290519081900360640190fd5b6003886040518082805190602001908083835b6020831061160d5780518252601f1990920191602091820191016115ee565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff161591506116959050576040805160e560020a62461bcd02815260206004820152600c60248201527f4e6f205369676e61747572650000000000000000000000000000000000000000604482015290519081900360640190fd5b6116a2308888888861149e565b91506116ae8289610adf565b9050600160a060020a0381161515611710576040805160e560020a62461bcd02815260206004820152601c60248201527f46726f6d2061646472657373206973206e6f742070726f766964656400000000604482015290519081900360640190fd5b600160a060020a038082166000908152600260209081526040808320938b1683529290522054611746908763ffffffff61240316565b600160a060020a038083166000818152600260209081526040808320948d168352938152838220949094559081529182905290205461178b908663ffffffff61295416565b600160a060020a0382166000908152602081905260408082209290925533815220546117bd908663ffffffff61240316565b60008033600160a060020a0316600160a060020a031681526020019081526020016000208190555060016003896040518082805190602001908083835b602083106118195780518252601f1990920191602091820191016117fa565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520805460ff191696151596909617909555600160a060020a03868116600081815260028452878120928f168082529284528790205486529551909594600080516020612c6683398151915294508190039091019150a36040805186815290513391600160a060020a03841691600080516020612c468339815191529181900360200190a3600160a060020a038181166000818152600260209081526040808320948c16808452948252918290205482519081529081018990528151339493927f43a220267705e74ee2ceafd46afc841850db6f85a662189a7def697bbdd90ffb928290030190a4506001979650505050505050565b604080517fb7656dc5000000000000000000000000000000000000000000000000000000006020808301919091526c01000000000000000000000000600160a060020a03808b1682026024850152808a1682026038850152881602604c830152606082018690526080820185905260a08083018590528351808403909101815260c0909201928390528151600093918291908401908083835b602083106119f15780518252601f1990920191602091820191016119d2565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209a9950505050505050505050565b60008080600160a060020a0387161515611a8c576040805160e560020a62461bcd02815260206004820152601860248201527f4e6f205b746f5d20616464726573732070726f76696465640000000000000000604482015290519081900360640190fd5b6003896040518082805190602001908083835b60208310611abe5780518252601f199092019160209182019101611a9f565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16159150611b469050576040805160e560020a62461bcd02815260206004820152601560248201527f4e6f207369676e61747572652070726f76696465640000000000000000000000604482015290519081900360640190fd5b611b54308989898989611939565b9150611b60828a610adf565b9050600160a060020a0381161515611bc2576040805160e560020a62461bcd02815260206004820152601f60248201527f5370656e6465722061646472657373206973206e6f742070726f766964656400604482015290519081900360640190fd5b600160a060020a038816600090815260208190526040902054611beb908763ffffffff61295416565b600160a060020a03808a166000908152602081905260408082209390935590891681522054611c20908763ffffffff61240316565b600160a060020a03808916600090815260208181526040808320949094558b83168252600281528382209285168252919091522054611c65908763ffffffff61295416565b600160a060020a03808a16600090815260026020908152604080832093861683529281528282209390935591829052902054611ca7908663ffffffff61295416565b600160a060020a038216600090815260208190526040808220929092553381522054611cd9908663ffffffff61240316565b60008033600160a060020a0316600160a060020a0316815260200190815260200160002081905550600160038a6040518082805190602001908083835b60208310611d355780518252601f199092019160209182019101611d16565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520805460ff1916961515969096179095558a84529351600160a060020a038c811695908e1694600080516020612c468339815191529450829003019150a36040805186815290513391600160a060020a03841691600080516020612c468339815191529181900360200190a350600198975050505050505050565b60045460009060a060020a900460ff1615611df557600080fd5b61097d838361298a565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600454600160a060020a03163314611e4157600080fd5b600160a060020a0381161515611e5657600080fd5b600454604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604080517ff7ac9c2e000000000000000000000000000000000000000000000000000000006020808301919091526c01000000000000000000000000600160a060020a03808a16820260248501528816026038830152604c8201869052606c8201859052608c8083018590528351808403909101815260ac9092019283905281516000939182919084019080838360208310610aa35780518252601f199092019160209182019101610a84565b600454600160a060020a03163314611f8357600080fd5b611f8c81611468565b15611f9657600080fd5b600160a060020a038116600081815260076020908152604091829020805460ff19166001179055815192835290517fad88aec34f4861d5a8a34d064eba1c3ce7222a541db6a6cfbcef0e6aa0dac53c9281900390910190a150565b336000818152600260209081526040808320600160a060020a03871680855290835281842086905581518681529151939490939092600080516020612c66833981519152928290030190a350600192915050565b60008080600160a060020a03871615156120a9576040805160e560020a62461bcd02815260206004820152601360248201527f4e6f20616464726573732070726f766964656400000000000000000000000000604482015290519081900360640190fd5b6003886040518082805190602001908083835b602083106120db5780518252601f1990920191602091820191016120bc565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff161591506121639050576040805160e560020a62461bcd02815260206004820152600c60248201527f4e6f207369676e61747572650000000000000000000000000000000000000000604482015290519081900360640190fd5b61217030888888886109f5565b915061217c8289610adf565b9050600160a060020a03811615156121de576040805160e560020a62461bcd02815260206004820152601c60248201527f46726f6d2061646472657373206973206e6f742070726f766964656400000000604482015290519081900360640190fd5b600160a060020a03811660009081526020819052604090205461221990869061220d908963ffffffff61295416565b9063ffffffff61295416565b600160a060020a03808316600090815260208190526040808220939093559089168152205461224e908763ffffffff61240316565b600160a060020a038816600090815260208190526040808220929092553381522054612280908663ffffffff61240316565b60008033600160a060020a0316600160a060020a031681526020019081526020016000208190555060016003896040518082805190602001908083835b602083106122dc5780518252601f1990920191602091820191016122bd565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520805460ff1916961515969096179095558a84529351600160a060020a038c81169590871694600080516020612c468339815191529450829003019150a36040805186815290513391600160a060020a03841691600080516020612c468339815191529181900360200190a333600160a060020a031687600160a060020a031682600160a060020a03167fec5a73fd1f178be20c1bca1b406cbf4b5c20d833b66e582fc122fb4baa0fc2a48989604051808381526020018281526020019250505060405180910390a4506001979650505050505050565b60045460009060a060020a900460ff16156123f857600080fd5b610be1848484612a11565b60008282018381101561097d57fe5b600454600090600160a060020a0316331461242c57600080fd5b60045460a860020a900460ff161561244357600080fd5b600154612456908363ffffffff61240316565b600155600160a060020a038316600090815260208190526040902054612482908363ffffffff61240316565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020612c468339815191529181900360200190a350600192915050565b60008080600160a060020a038716151561256e576040805160e560020a62461bcd02815260206004820152601760248201527f5370656e646572206973206e6f742070726f7669646564000000000000000000604482015290519081900360640190fd5b6003886040518082805190602001908083835b602083106125a05780518252601f199092019160209182019101612581565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff161591506126289050576040805160e560020a62461bcd02815260206004820152600c60248201527f4e6f207369676e61747572650000000000000000000000000000000000000000604482015290519081900360640190fd5b6126353088888888611ebf565b91506126418289610adf565b9050600160a060020a03811615156126a3576040805160e560020a62461bcd02815260206004820152601b60248201527f46726f6d20616464726573206973206e6f742070726f76696465640000000000604482015290519081900360640190fd5b600160a060020a038082166000818152600260209081526040808320948c1683529381528382208a90559181529081905220546126e6908663ffffffff61295416565b600160a060020a038216600090815260208190526040808220929092553381522054612718908663ffffffff61240316565b60008033600160a060020a0316600160a060020a031681526020019081526020016000208190555060016003896040518082805190602001908083835b602083106127745780518252601f199092019160209182019101612755565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520805460ff1916961515969096179095558a84529351600160a060020a038c81169590871694600080516020612c668339815191529450829003019150a36040805186815290513391600160a060020a03841691600080516020612c468339815191529181900360200190a333600160a060020a031687600160a060020a031682600160a060020a03167f43a220267705e74ee2ceafd46afc841850db6f85a662189a7def697bbdd90ffb8989604051808381526020018281526020019250505060405180910390a4506001979650505050505050565b336000908152600260209081526040808320600160a060020a0386168452909152812054808311156128cb57336000908152600260209081526040808320600160a060020a0388168452909152812055612900565b6128db818463ffffffff61295416565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a038916808552908352928190205481519081529051929392600080516020612c66833981519152929181900390910190a35060019392505050565b60008282111561296057fe5b50900390565b60045460009060a060020a900460ff161561298057600080fd5b61097d8383612b76565b336000908152600260209081526040808320600160a060020a03861684529091528120546129be908363ffffffff61240316565b336000818152600260209081526040808320600160a060020a038916808552908352928190208590558051948552519193600080516020612c66833981519152929081900390910190a350600192915050565b6000600160a060020a0383161515612a2857600080fd5b600160a060020a038416600090815260208190526040902054821115612a4d57600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115612a7d57600080fd5b600160a060020a038416600090815260208190526040902054612aa6908363ffffffff61295416565b600160a060020a038086166000908152602081905260408082209390935590851681522054612adb908363ffffffff61240316565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054612b1d908363ffffffff61295416565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020612c46833981519152929181900390910190a35060019392505050565b6000600160a060020a0383161515612b8d57600080fd5b33600090815260208190526040902054821115612ba957600080fd5b33600090815260208190526040902054612bc9908363ffffffff61295416565b3360009081526020819052604080822092909255600160a060020a03851681522054612bfb908363ffffffff61240316565b600160a060020a03841660008181526020818152604091829020939093558051858152905191923392600080516020612c468339815191529281900390910190a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a72305820963247c30fb17ada10ceca50eae900596f6c803e570dea3f3b51d7f8f3a8a88e0029"
}