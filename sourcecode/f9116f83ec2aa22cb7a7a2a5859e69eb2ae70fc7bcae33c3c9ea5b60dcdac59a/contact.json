{
  "address": "0x3c62e8de798721963b439868d3ce22a5252a7e03",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DeltaTimeNFT",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-23\n*/\n\npragma solidity ^0.5.0;\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n    /**\n     * @notice Query if a contract implements an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n    /**\n     * 0x01ffc9a7 ===\n     *     bytes4(keccak256('supportsInterface(bytes4)'))\n     */\n\n    /**\n     * @dev a mapping of interface id to whether or not it's supported\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev A contract implementing SupportsInterfaceWithLookup\n     * implement ERC165 itself\n     */\n    constructor () internal {\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev implement supportsInterface(bytes4) using a lookup table\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev internal method for registering an interface\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff);\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a `safeTransfer`. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Metadata is IERC721 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\nlibrary Strings {\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        bytes memory babcde = new bytes(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        uint k = 0;\n        uint i = 0;\n        for (i = 0; i < _ba.length; i++) {\n            babcde[k++] = _ba[i];\n        }\n        for (i = 0; i < _bb.length; i++) {\n            babcde[k++] = _bb[i];\n        }\n        for (i = 0; i < _bc.length; i++) {\n            babcde[k++] = _bc[i];\n        }\n        for (i = 0; i < _bd.length; i++) {\n            babcde[k++] = _bd[i];\n        }\n        for (i = 0; i < _be.length; i++) {\n            babcde[k++] = _be[i];\n        }\n        return string(babcde);\n    }\n\n    function strConcat(string  memory _a, string  memory _b, string  memory _c, string  memory _d) internal pure returns (string  memory) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string  memory _a, string  memory _b, string  memory _c) internal pure returns (string  memory) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string  memory _a, string  memory _b) internal pure returns (string  memory) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + _i % 10));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function split(bytes memory _base, uint8[] memory _lengths) internal pure returns (bytes[] memory arr) {\n        uint _offset = 0;\n        bytes[] memory splitArr = new bytes[](_lengths.length);\n\n        for(uint i = 0; i < _lengths.length; i++) {\n            bytes memory _tmpBytes = new bytes(_lengths[i]);\n\n            for(uint j = 0; j < _lengths[i]; j++)\n                _tmpBytes[j] = _base[_offset+j];\n\n            splitArr[i] = _tmpBytes;\n            _offset += _lengths[i];\n        }\n\n        return splitArr;\n    }\n}\n\n\n\n\n\n\n\n\n\n/**\n * @title F1 Delta Time Non-Fungible Token \n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract DeltaTimeNFTBase is ERC165, IERC721, IERC721Metadata, Pausable, MinterRole {\n\n    using SafeMath for uint256;\n    using Address for address;\n    using Strings for string;\n\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n    /*\n     * 0x80ac58cd ===\n     *     bytes4(keccak256('balanceOf(address)')) ^\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\n     *     bytes4(keccak256('approve(address,uint256)')) ^\n     *     bytes4(keccak256('getApproved(uint256)')) ^\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n     */\n\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n    /**\n     * 0x5b5e139f ===\n     *     bytes4(keccak256('name()')) ^\n     *     bytes4(keccak256('symbol()')) ^\n     *     bytes4(keccak256('tokenURI(uint256)'))\n     */\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Token URI prefix\n    string private _baseTokenURI;\n\n    // Flag representing if metadata migrated to IPFS\n    bool private _ipfsMigrated;\n\n    // Token total Supply\n    uint256 private _totalSupply;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) private _tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping Mapping from token ID to token URI\n    mapping(uint256 => string) private _tokenURIs;\n\n    // Mapping Mapping from token ID to token properties\n    mapping (uint256 => uint256) private _tokenProperties;\n\n    // Mapping from owner to number of owned token\n    mapping (address => uint256) private _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n\n    event TokenURI(uint256 indexed tokenId, string uri);\n\n\n    /**\n     * @dev Constructor function\n     */\n    constructor (string memory name, string memory symbol, string memory baseTokenURI) public {\n        _name = name;\n        _symbol = symbol;\n        _totalSupply = 0;\n        _baseTokenURI = baseTokenURI;\n        _ipfsMigrated = false;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n    }\n\n    /**\n     * @dev Gets the token name\n     * @return string representing the token name\n     */\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Gets the token symbol\n     * @return string representing the token symbol\n     */\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Gets the total amount of tokens stored by the contract\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Returns whether the specified token exists\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return whether the token exists\n     */\n    function exists(uint256 tokenId) external view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    /**\n     * @dev Sets IPFS migration flag true\n     */\n    function ipfsMigrationDone() public onlyMinter {\n        _ipfsMigrated = true;\n    }\n\n    /**\n     * @dev public function to set the token URI for a given token\n     * Reverts if the token ID does not exist or metadata has migrated to IPFS\n     * @param tokenId uint256 ID of the token to set its URI\n     * @param uri string URI to assign\n     */\n    function setTokenURI(uint256 tokenId, string memory uri) public onlyMinter {\n        require(!_ipfsMigrated);\n        _setTokenURI(tokenId, uri);\n    }\n\n    /**\n     * @dev Returns the URI for a given token ID\n     * Throws if the token ID does not exist. May return an empty string.\n     * @param tokenId uint256 ID of the token to query\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\n        require(_exists(tokenId));\n\n        if (bytes(_tokenURIs[tokenId]).length > 0)\n            return _tokenURIs[tokenId];\n\n        return Strings.strConcat(baseTokenURI(),Strings.uint2str(tokenId));\n    }\n\n    /**\n     * @dev Sets the prefix of token URI\n     * @param baseTokenURI token URI prefix to be set\n     */\n    function setBaseTokenURI(string memory baseTokenURI) public onlyMinter {\n        _baseTokenURI = baseTokenURI;\n    }\n\n    /**\n     * @dev Returns prefix of token URI\n     * @return string representing the token URI prefix\n     */\n    function baseTokenURI() public view returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    /**\n     * @dev Returns the properties for a given token ID\n     * Throws if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query\n     */\n    function tokenProperties(uint256 tokenId) public view returns (uint256) {\n        require(_exists(tokenId));\n        return _tokenProperties[tokenId];\n    }\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0));\n        return _ownedTokensCount[owner];\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return owner address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0));\n        return owner;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public whenNotPaused {\n        address owner = ownerOf(tokenId);\n        require(to != owner);\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId));\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address to, bool approved) public whenNotPaused {\n        require(to != msg.sender);\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function transferFrom(address from, address to, uint256 tokenId) public whenNotPaused {\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n\n        _transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     *\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n    }\n\n    /**\n     * @dev Public function to mint a new token\n     * Reverts if the given token ID already exists\n     * @param to address The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     * @param uri string Metadata URI of the token to be minted\n     * @param tokenProps uint256 Properties of the token to be minted\n     */\n    function mint(address to, uint256 tokenId, string memory uri, uint256 tokenProps)\n        public onlyMinter\n    {\n        _mint(to, tokenId, uri, tokenProps);\n        _totalSupply += 1;\n    }\n\n    /**\n     * @dev Public function to mint a batch of new tokens\n     * Reverts if some the given token IDs already exist\n     * @param to address[] List of addresses that will own the minted tokens\n     * @param tokenIds uint256[] List of IDs of the tokens to be minted\n     * @param tokenURIs bytes[] Concatenated metadata URIs of the tokens to be minted\n     * @param urisLengths uint8[] Lengths of the metadata URIs in the tokenURIs parameter\n     * @param tokenProps uint256[] List of properties of the tokens to be minted\n     */\n    function batchMint(\n        address[] memory to,\n        uint256[] memory tokenIds,\n        bytes memory tokenURIs,\n        uint8[] memory urisLengths,\n        uint256[] memory tokenProps)\n        public onlyMinter\n    {\n        require(tokenIds.length == to.length &&\n                tokenIds.length == urisLengths.length &&\n                tokenIds.length == tokenProps.length);\n        bytes[] memory uris = Strings.split(tokenURIs, urisLengths);\n        for (uint i = 0; i < tokenIds.length; i++) {\n            _mint(to[i], tokenIds[i], string(uris[i]), tokenProps[i]);\n        }\n        _totalSupply += tokenIds.length;\n    }\n\n    /**\n     * @dev Returns whether the specified token exists\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     *    is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to mint a new token\n     * Reverts if the given token ID already exists\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     * @param uri string URI of the token to be minted metadata\n     * @param tokenProps uint256 properties of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId, string memory uri, uint256 tokenProps) internal {\n        require(to != address(0));\n        require(!_exists(tokenId));\n\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n        _setTokenURI(tokenId, uri);\n        _tokenProperties[tokenId] = tokenProps;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to set the token URI for a given token\n     * Reverts if the token ID does not exist\n     * @param tokenId uint256 ID of the token to set its URI\n     * @param uri string URI to assign\n     */\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\n        require(_exists(tokenId));\n        _tokenURIs[tokenId] = uri;\n        emit TokenURI(tokenId, uri);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from);\n        require(to != address(0));\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n        _tokenOwner[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke `onERC721Received` on a target address\n     * The call is not executed if the target address is not a contract\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Private function to clear current approval of a given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n}\n\ncontract DeltaTimeNFT is DeltaTimeNFTBase {\n\n  constructor (string memory baseTokenURI) public DeltaTimeNFTBase(\"F1® Delta Time\", \"F1DT\", baseTokenURI) {\n  }\n\n  function tokenType(uint256 tokenId) public view returns (uint256) {\n      uint256 properties = tokenProperties(tokenId);\n      return properties & 0xFF;\n  }\n\n  function tokenSubType(uint256 tokenId) public view returns (uint256) {\n    uint256 properties = tokenProperties(tokenId);\n    return (properties & (0xFF << 8)) >> 8;\n  }\n\n  function tokenTeam(uint256 tokenId) public view returns (uint256) {\n    uint256 properties = tokenProperties(tokenId);\n    return (properties & (0xFF << 16)) >> 16;\n  }\n\n  function tokenSeason(uint256 tokenId) public view returns (uint256) {\n    uint256 properties = tokenProperties(tokenId);\n    return (properties & (0xFF << 24)) >> 24;\n  }\n\n  function tokenRarity(uint256 tokenId) public view returns (uint256) {\n    uint256 properties = tokenProperties(tokenId);\n    return (properties & (0xFF << 32)) >> 32;\n  }\n\n  function tokenTrack(uint256 tokenId) public view returns (uint256) {\n    // only CarNFT, DriverNFT, CarCompNFT, DriverCompNFT and TyreNFT has a track id\n    uint256 properties = tokenProperties(tokenId);\n    return (properties & (0xFF << 40)) >> 40;\n  }\n\n  function tokenCollection(uint256 tokenId) public view returns (uint256) {\n    uint256 properties = tokenProperties(tokenId);\n    return (properties & (0xFFFF << 48)) >> 48;\n  }\n\n  function tokenDriverNumber(uint256 tokenId) public view returns (uint256) {\n    // only Car and Driver has a driver id\n    uint256 properties = tokenProperties(tokenId);\n    return (properties & (0xFFFF << 64)) >> 64;\n  }\n\n  function tokenRacingProperty1(uint256 tokenId) public view returns (uint256) {\n    uint256 properties = tokenProperties(tokenId);\n    return (properties & (0xFFFF << 80)) >> 80;\n  }\n\n  function tokenRacingProperty2(uint256 tokenId) public view returns (uint256) {\n    uint256 properties = tokenProperties(tokenId);\n    return (properties & (0xFFFF << 96)) >> 96;\n  }\n\n  function tokenRacingProperty3(uint256 tokenId) public view returns (uint256) {\n    uint256 properties = tokenProperties(tokenId);\n    return (properties & (0xFFFF << 112)) >> 112;\n  }\n\n  function tokenLuck(uint256 tokenId) public view returns (uint256) {\n    uint256 properties = tokenProperties(tokenId);\n    return (properties & (0xFFFF << 128)) >> 128;\n  }\n\n  function tokenEffect(uint256 tokenId) public view returns (uint256) {\n    uint256 properties = tokenProperties(tokenId);\n    return (properties & (0xFF << 144)) >> 144;\n  }\n\n  function tokenSpecial1(uint256 tokenId) public view returns (uint256) {\n    uint256 properties = tokenProperties(tokenId);\n    return (properties & (0xFFFF << 152)) >> 152;\n  }\n\n  function tokenSpecial2(uint256 tokenId) public view returns (uint256) {\n    uint256 properties = tokenProperties(tokenId);\n    return (properties & (0xFFFF << 168)) >> 168;\n  }\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040516200414b3803806200414b833981018060405260208110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b828101905060208101848111156200006757600080fd5b81518560018202830111640100000000821117156200008557600080fd5b50509291905050506040805190810160405280600f81526020017f4631c2ae2044656c74612054696d6500000000000000000000000000000000008152506040805190810160405280600481526020017f463144540000000000000000000000000000000000000000000000000000000081525082620001376301ffc9a77c01000000000000000000000000000000000000000000000000000000000262000278640100000000026401000000009004565b620001513362000336640100000000026401000000009004565b6000600260006101000a81548160ff0219169083151502179055506200018633620003a0640100000000026401000000009004565b82600490805190602001906200019e92919062000562565b508160059080519060200190620001b792919062000562565b5060006008819055508060069080519060200190620001d892919062000562565b506000600760006101000a81548160ff021916908315150217905550620002316380ac58cd7c01000000000000000000000000000000000000000000000000000000000262000278640100000000026401000000009004565b6200026e635b5e139f7c01000000000000000000000000000000000000000000000000000000000262000278640100000000026401000000009004565b5050505062000611565b63ffffffff7c010000000000000000000000000000000000000000000000000000000002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151515620002ca57600080fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6200035a8160016200040a6401000000000262003581179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b620003c48160036200040a6401000000000262003581179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200044757600080fd5b620004628282620004cd640100000000026401000000009004565b1515156200046f57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200050b57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005a557805160ff1916838001178555620005d6565b82800160010185558215620005d6579182015b82811115620005d5578251825591602001919060010190620005b8565b5b509050620005e59190620005e9565b5090565b6200060e91905b808211156200060a576000816000905550600101620005f0565b5090565b90565b613b2a80620006216000396000f3fe608060405260043610610230576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a71461023557806306fdde03146102a7578063081812fc1461033757806308a8d7aa146103b2578063095ea7b3146104ae578063162094c41461050957806318160ddd146105db5780631ccd03ac1461060657806323b872dd1461065557806324af9942146106d05780632dd883e8146106e757806330176e1314610736578063332e4f78146107fe57806334110a4d1461084d5780633f4ba83a1461089c57806342842e0e146108b357806346fbf68e1461092e5780634ace9497146109975780634b2993e7146109e65780634f558e7914610a355780634fca277214610a885780635419808f14610ad75780635c975abb14610b265780636352211e14610b555780636ef8d66d14610bd057806370a0823114610be757806373c85eba14610c4c57806382dc1ec414610c9b5780638456cb5914610cec578063869b81a814610d0357806395d89b4114610d52578063983b2d5614610de25780639865027514610e33578063a22cb46514610e4a578063aa271e1a14610ea7578063afb0a36914610f10578063b88d4fde14610f5f578063bed93fb514611071578063c87b56dd14611389578063d547cfb71461143d578063dd8aafd5146114cd578063e6c3b1f61461151c578063e985e9c51461156b578063ebd2b309146115f4578063ee673c4014611643578063fe5585f614611692575b600080fd5b34801561024157600080fd5b5061028d6004803603602081101561025857600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506116e1565b604051808215151515815260200191505060405180910390f35b3480156102b357600080fd5b506102bc611748565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102fc5780820151818401526020810190506102e1565b50505050905090810190601f1680156103295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561034357600080fd5b506103706004803603602081101561035a57600080fd5b81019080803590602001909291905050506117ea565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103be57600080fd5b506104ac600480360360808110156103d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561041c57600080fd5b82018360208201111561042e57600080fd5b8035906020019184600183028401116401000000008311171561045057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919050505061183b565b005b3480156104ba57600080fd5b50610507600480360360408110156104d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611872565b005b34801561051557600080fd5b506105d96004803603604081101561052c57600080fd5b81019080803590602001909291908035906020019064010000000081111561055357600080fd5b82018360208201111561056557600080fd5b8035906020019184600183028401116401000000008311171561058757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506119d3565b005b3480156105e757600080fd5b506105f0611a11565b6040518082815260200191505060405180910390f35b34801561061257600080fd5b5061063f6004803603602081101561062957600080fd5b8101908080359060200190929190505050611a1b565b6040518082815260200191505060405180910390f35b34801561066157600080fd5b506106ce6004803603606081101561067857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a44565b005b3480156106dc57600080fd5b506106e5611a85565b005b3480156106f357600080fd5b506107206004803603602081101561070a57600080fd5b8101908080359060200190929190505050611ab6565b6040518082815260200191505060405180910390f35b34801561074257600080fd5b506107fc6004803603602081101561075957600080fd5b810190808035906020019064010000000081111561077657600080fd5b82018360208201111561078857600080fd5b803590602001918460018302840111640100000000831117156107aa57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611ae3565b005b34801561080a57600080fd5b506108376004803603602081101561082157600080fd5b8101908080359060200190929190505050611b11565b6040518082815260200191505060405180910390f35b34801561085957600080fd5b506108866004803603602081101561087057600080fd5b8101908080359060200190929190505050611b39565b6040518082815260200191505060405180910390f35b3480156108a857600080fd5b506108b1611b6a565b005b3480156108bf57600080fd5b5061092c600480360360608110156108d657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c19565b005b34801561093a57600080fd5b5061097d6004803603602081101561095157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c3a565b604051808215151515815260200191505060405180910390f35b3480156109a357600080fd5b506109d0600480360360208110156109ba57600080fd5b8101908080359060200190929190505050611c57565b6040518082815260200191505060405180910390f35b3480156109f257600080fd5b50610a1f60048036036020811015610a0957600080fd5b8101908080359060200190929190505050611c82565b6040518082815260200191505060405180910390f35b348015610a4157600080fd5b50610a6e60048036036020811015610a5857600080fd5b8101908080359060200190929190505050611cbc565b604051808215151515815260200191505060405180910390f35b348015610a9457600080fd5b50610ac160048036036020811015610aab57600080fd5b8101908080359060200190929190505050611cce565b6040518082815260200191505060405180910390f35b348015610ae357600080fd5b50610b1060048036036020811015610afa57600080fd5b8101908080359060200190929190505050611d03565b6040518082815260200191505060405180910390f35b348015610b3257600080fd5b50610b3b611d2a565b604051808215151515815260200191505060405180910390f35b348015610b6157600080fd5b50610b8e60048036036020811015610b7857600080fd5b8101908080359060200190929190505050611d41565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bdc57600080fd5b50610be5611dbf565b005b348015610bf357600080fd5b50610c3660048036036020811015610c0a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dca565b6040518082815260200191505060405180910390f35b348015610c5857600080fd5b50610c8560048036036020811015610c6f57600080fd5b8101908080359060200190929190505050611e4e565b6040518082815260200191505060405180910390f35b348015610ca757600080fd5b50610cea60048036036020811015610cbe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e81565b005b348015610cf857600080fd5b50610d01611ea1565b005b348015610d0f57600080fd5b50610d3c60048036036020811015610d2657600080fd5b8101908080359060200190929190505050611f51565b6040518082815260200191505060405180910390f35b348015610d5e57600080fd5b50610d67611f80565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610da7578082015181840152602081019050610d8c565b50505050905090810190601f168015610dd45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610dee57600080fd5b50610e3160048036036020811015610e0557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612022565b005b348015610e3f57600080fd5b50610e48612042565b005b348015610e5657600080fd5b50610ea560048036036040811015610e6d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061204d565b005b348015610eb357600080fd5b50610ef660048036036020811015610eca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121a5565b604051808215151515815260200191505060405180910390f35b348015610f1c57600080fd5b50610f4960048036036020811015610f3357600080fd5b81019080803590602001909291905050506121c2565b6040518082815260200191505060405180910390f35b348015610f6b57600080fd5b5061106f60048036036080811015610f8257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610fe957600080fd5b820183602082011115610ffb57600080fd5b8035906020019184600183028401116401000000008311171561101d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506121ec565b005b34801561107d57600080fd5b50611387600480360360a081101561109457600080fd5b81019080803590602001906401000000008111156110b157600080fd5b8201836020820111156110c357600080fd5b803590602001918460208302840111640100000000831117156110e557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561114557600080fd5b82018360208201111561115757600080fd5b8035906020019184602083028401116401000000008311171561117957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156111d957600080fd5b8201836020820111156111eb57600080fd5b8035906020019184600183028401116401000000008311171561120d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561127057600080fd5b82018360208201111561128257600080fd5b803590602001918460208302840111640100000000831117156112a457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561130457600080fd5b82018360208201111561131657600080fd5b8035906020019184602083028401116401000000008311171561133857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050612214565b005b34801561139557600080fd5b506113c2600480360360208110156113ac57600080fd5b81019080803590602001909291905050506122fe565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156114025780820151818401526020810190506113e7565b50505050905090810190601f16801561142f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561144957600080fd5b50611452612418565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015611492578082015181840152602081019050611477565b50505050905090810190601f1680156114bf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156114d957600080fd5b50611506600480360360208110156114f057600080fd5b81019080803590602001909291905050506124ba565b6040518082815260200191505060405180910390f35b34801561152857600080fd5b506115556004803603602081101561153f57600080fd5b81019080803590602001909291905050506124f1565b6040518082815260200191505060405180910390f35b34801561157757600080fd5b506115da6004803603604081101561158e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061250b565b604051808215151515815260200191505060405180910390f35b34801561160057600080fd5b5061162d6004803603602081101561161757600080fd5b810190808035906020019092919050505061259f565b6040518082815260200191505060405180910390f35b34801561164f57600080fd5b5061167c6004803603602081101561166657600080fd5b81019080803590602001909291905050506125d7565b6040518082815260200191505060405180910390f35b34801561169e57600080fd5b506116cb600480360360208110156116b557600080fd5b8101908080359060200190929190505050612613565b6040518082815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117e05780601f106117b5576101008083540402835291602001916117e0565b820191906000526020600020905b8154815290600101906020018083116117c357829003601f168201915b5050505050905090565b60006117f582612644565b151561180057600080fd5b600a600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611844336121a5565b151561184f57600080fd5b61185b848484846126b6565b600160086000828254019250508190555050505050565b600260009054906101000a900460ff1615151561188e57600080fd5b600061189982611d41565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156118d657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806119165750611915813361250b565b5b151561192157600080fd5b82600a600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6119dc336121a5565b15156119e757600080fd5b600760009054906101000a900460ff16151515611a0357600080fd5b611a0d8282612873565b5050565b6000600854905090565b600080611a2783611b39565b9050601863ff0000008216908060020a8204915050915050919050565b600260009054906101000a900460ff16151515611a6057600080fd5b611a6a3382612950565b1515611a7557600080fd5b611a808383836129e5565b505050565b611a8e336121a5565b1515611a9957600080fd5b6001600760006101000a81548160ff021916908315150217905550565b600080611ac283611b39565b9050603067ffff0000000000008216908060020a8204915050915050919050565b611aec336121a5565b1515611af757600080fd5b8060069080519060200190611b0d929190613a59565b5050565b600080611b1d83611b39565b9050601062ff00008216908060020a8204915050915050919050565b6000611b4482612644565b1515611b4f57600080fd5b600c6000838152602001908152602001600020549050919050565b611b7333611c3a565b1515611b7e57600080fd5b600260009054906101000a900460ff161515611b9957600080fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b611c3583838360206040519081016040528060008152506121ec565b505050565b6000611c50826001612c4a90919063ffffffff16565b9050919050565b600080611c6383611b39565b9050602865ff00000000008216908060020a8204915050915050919050565b600080611c8e83611b39565b9050609874ffff000000000000000000000000000000000000008216908060020a8204915050915050919050565b6000611cc782612644565b9050919050565b600080611cda83611b39565b905060706fffff00000000000000000000000000008216908060020a8204915050915050919050565b600080611d0f83611b39565b9050600861ff008216908060020a8204915050915050919050565b6000600260009054906101000a900460ff16905090565b6000806009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611db657600080fd5b80915050919050565b611dc833612cde565b565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611e0757600080fd5b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080611e5a83611b39565b905060606dffff0000000000000000000000008216908060020a8204915050915050919050565b611e8a33611c3a565b1515611e9557600080fd5b611e9e81612d38565b50565b611eaa33611c3a565b1515611eb557600080fd5b600260009054906101000a900460ff16151515611ed157600080fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600080611f5d83611b39565b9050604069ffff00000000000000008216908060020a8204915050915050919050565b606060058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120185780601f10611fed57610100808354040283529160200191612018565b820191906000526020600020905b815481529060010190602001808311611ffb57829003601f168201915b5050505050905090565b61202b336121a5565b151561203657600080fd5b61203f81612d92565b50565b61204b33612dec565b565b600260009054906101000a900460ff1615151561206957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156120a457600080fd5b80600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b60006121bb826003612c4a90919063ffffffff16565b9050919050565b6000806121ce83611b39565b9050602064ff000000008216908060020a8204915050915050919050565b6121f7848484611a44565b61220384848484612e46565b151561220e57600080fd5b50505050565b61221d336121a5565b151561222857600080fd5b8451845114801561223a575081518451145b8015612247575080518451145b151561225257600080fd5b606061225e8484613069565b905060008090505b85518110156122e4576122d7878281518110151561228057fe5b90602001906020020151878381518110151561229857fe5b9060200190602002015184848151811015156122b057fe5b9060200190602002015186858151811015156122c857fe5b906020019060200201516126b6565b8080600101915050612266565b508451600860008282540192505081905550505050505050565b606061230982612644565b151561231457600080fd5b6000600b600084815260200190815260200160002080546001816001161561010002031660029004905011156123f757600b60008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123eb5780601f106123c0576101008083540402835291602001916123eb565b820191906000526020600020905b8154815290600101906020018083116123ce57829003601f168201915b50505050509050612413565b612410612402612418565b61240b8461322f565b613388565b90505b919050565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124b05780601f10612485576101008083540402835291602001916124b0565b820191906000526020600020905b81548152906001019060200180831161249357829003601f168201915b5050505050905090565b6000806124c683611b39565b9050608071ffff000000000000000000000000000000008216908060020a8204915050915050919050565b6000806124fd83611b39565b905060ff8116915050919050565b6000600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806125ab83611b39565b9050609072ff0000000000000000000000000000000000008216908060020a8204915050915050919050565b6000806125e383611b39565b905060a876ffff0000000000000000000000000000000000000000008216908060020a8204915050915050919050565b60008061261f83611b39565b905060506bffff000000000000000000008216908060020a8204915050915050919050565b6000806009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156126f257600080fd5b6126fb83612644565b15151561270757600080fd5b836009600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506127ac6001600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133cf90919063ffffffff16565b600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506127f98383612873565b80600c600085815260200190815260200160002081905550828473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b61287c82612644565b151561288757600080fd5b80600b600084815260200190815260200160002090805190602001906128ae929190613a59565b50817fe9dd2c01379f6033709e315d41f1a58fcbd937ae2512da16462852d1082e7b73826040518080602001828103825283818151815260200191508051906020019080838360005b838110156129125780820151818401526020810190506128f7565b50505050905090810190601f16801561293f5780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b60008061295c83611d41565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806129cb57508373ffffffffffffffffffffffffffffffffffffffff166129b3846117ea565b73ffffffffffffffffffffffffffffffffffffffff16145b806129dc57506129db818561250b565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612a0582611d41565b73ffffffffffffffffffffffffffffffffffffffff16141515612a2757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612a6357600080fd5b612a6c816133f0565b612abf6001600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546134b090919063ffffffff16565b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612b556001600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133cf90919063ffffffff16565b600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816009600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612c8757600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b612cf28160016134d290919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b612d4c81600161358190919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b612da681600361358190919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b612e008160036134d290919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b6000612e678473ffffffffffffffffffffffffffffffffffffffff16613631565b1515612e765760019050613061565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612f6d578082015181840152602081019050612f52565b50505050905090810190601f168015612f9a5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015612fbc57600080fd5b505af1158015612fd0573d6000803e3d6000fd5b505050506040513d6020811015612fe657600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b60606000809050606083516040519080825280602002602001820160405280156130a757816020015b60608152602001906001900390816130925790505b50905060008090505b845181101561322357606085828151811015156130c957fe5b9060200190602002015160ff166040519080825280601f01601f1916602001820160405280156131085781602001600182028038833980820191505090505b50905060008090505b868381518110151561311f57fe5b9060200190602002015160ff168110156131d9578781860181518110151561314357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002828281518110151561319c57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613111565b508083838151811015156131e957fe5b90602001906020020181905250858281518110151561320457fe5b9060200190602002015160ff16840193505080806001019150506130b0565b50809250505092915050565b60606000821415613277576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613383565b600082905060005b6000821415156132a5578080600101915050600a8281151561329d57fe5b04915061327f565b6060816040519080825280601f01601f1916602001820160405280156132da5781602001600182028038833980820191505090505b50905060006001830390505b60008614151561337b57600a868115156132fc57fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561333757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681151561337357fe5b0495506132e6565b819450505050505b919050565b60606133c78383602060405190810160405280600081525060206040519081016040528060008152506020604051908101604052806000815250613644565b905092915050565b60008082840190508381101515156133e657600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff16600a600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156134ad576000600a600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60008282111515156134c157600080fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561350e57600080fd5b6135188282612c4a565b151561352357600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156135bd57600080fd5b6135c78282612c4a565b1515156135d357600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080823b905060008111915050919050565b6060808690506060869050606086905060608690506060869050606081518351855187518951010101016040519080825280601f01601f1916602001820160405280156136a05781602001600182028038833980820191505090505b50905060008090506000809050600090505b87518110156137655787818151811015156136c957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561372857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506136b2565b600090505b865181101561381d57868181518110151561378157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838060010194508151811015156137e057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061376a565b600090505b85518110156138d557858181518110151561383957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561389857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613822565b600090505b845181101561398d5784818151811015156138f157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561395057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506138da565b600090505b8351811015613a455783818151811015156139a957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515613a0857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613992565b829850505050505050505095945050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613a9a57805160ff1916838001178555613ac8565b82800160010185558215613ac8579182015b82811115613ac7578251825591602001919060010190613aac565b5b509050613ad59190613ad9565b5090565b613afb91905b80821115613af7576000816000905550600101613adf565b5090565b9056fea165627a7a723058204daec22e8ac080c17cac5478ff62a5466d5397f8535b2e9ec0dee0768ecd9c3900290000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002168747470733a2f2f6e66742e663164656c746174696d652e636f6d2f6a736f6e2f00000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002168747470733a2f2f6e66742e663164656c746174696d652e636f6d2f6a736f6e2f00000000000000000000000000000000000000000000000000000000000000"
}