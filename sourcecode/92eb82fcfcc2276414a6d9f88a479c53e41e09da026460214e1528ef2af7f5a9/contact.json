{
  "address": "0x6b9d46a223ffa343f8b14d855a8314b0eff7fcb7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FormSI060719",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-11\n*/\n\n//\n// FormSI060719, which is part of the show \"Garage Politburo\" at Susan Inglett Gallery, NY.\n// June 7, 2019 - July 26, 2019\n\n// For more information see https://github.com/GaragePolitburo/FormSI060719\n\n// Based on code by OpenZeppelin: \n// https://github.com/OpenZeppelin/openzeppelin-solidity/tree/master/contracts/token/ERC721\n// Used Jan 4 2019 Open Zepplin package 76abd1a41ec7d96ef76370f3eadfe097226896a2\n\n// Based also on CryptoPunks by Larva Labs:\n// https://github.com/larvalabs/cryptopunks\n\n// Text snippets taken from Fredric Jameson, Masha Gessen, Nisi Shawl, Margaret Thatcher, \n//  Leni Zumas, Philip Roth, Omar El Akkad, Wayne La Pierre, David Graeber,\n// Walt Whitman, George Orwell, Rudyard Kipling, and Donna Haraway.\n\n\npragma solidity ^0.5.0;\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n    /**\n     * @notice Query if a contract implements an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n    /**\n     * 0x01ffc9a7 ===\n     *     bytes4(keccak256('supportsInterface(bytes4)'))\n     */\n\n    /**\n     * @dev a mapping of interface id to whether or not it's supported\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev A contract implementing SupportsInterfaceWithLookup\n     * implement ERC165 itself\n     */\n    constructor () internal {\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev implement supportsInterface(bytes4) using a lookup table\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev internal method for registering an interface\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff);\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\n\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a `safeTransfer`. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract FormSI060719 is ERC165, IERC721 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) private _tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address => uint256) private _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n    /*\n     * 0x80ac58cd ===\n     *     bytes4(keccak256('balanceOf(address)')) ^\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\n     *     bytes4(keccak256('approve(address,uint256)')) ^\n     *     bytes4(keccak256('getApproved(uint256)')) ^\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n     */\n\n    // FORM\n    string private _name = \"FormSI060719 :: Garage Politburo Tokens\";\n    string private _symbol = \"SIGP\";\n    string[] private _theFormSI060719;\n    uint256[2][] private _theIndexToQA; //tokeId gives (questionId, textId)\n    uint256[][13] private _theQAtoIndex; // [questionId, textid] gives tokenId\n    uint256 private _totalSupply; \n    uint256[13] private _supplyPerQ; \n    uint256 public numberOfQuestions = 13;\n    string[] private _qSection;\n    string private _qForm;\n\n    \n    // END FORM\n    \n    //AUCTION\n     \n    // Put list element up for sale by owner. Can be linked to specific \n    // potential buyer\n    struct forSaleInfo {\n        bool isForSale;\n        uint256 tokenId;\n        address seller;\n        uint256 minValue;          //in wei.... everything in wei\n        address onlySellTo;     // specify to sell only to a specific person\n    }\n\n    // Place bid for specific list element\n    struct bidInfo {\n        bool hasBid;\n        uint256 tokenId;\n        address bidder;\n        uint256 value;\n    }\n\n    // Public info about tokens for sale.\n    mapping (uint256 => forSaleInfo) public marketForSaleInfoByIndex;\n    // Public info about highest bid for each token.\n    mapping (uint256 => bidInfo) public marketBidInfoByIndex;\n    // Information about withdrawals (in units of wei) available  \n    //  ... for addresses due to failed bids, successful sales, etc...\n    mapping (address => uint256) public marketPendingWithdrawals;\n    \n    //END AUCTION\n    \n    //EVENTS\n    \n    // In addition to Transfer, Approval, and ApprovalForAll IERC721 events\n    event QuestionAnswered(uint256 indexed questionId, uint256 indexed answerId, \n        address indexed by);\n    event ForSaleDeclared(uint256 indexed tokenId, address indexed from, \n        uint256 minValue,address indexed to);\n    event ForSaleWithdrawn(uint256 indexed tokenId, address indexed from);\n    event ForSaleBought(uint256 indexed tokenId, uint256 value, \n        address indexed from, address indexed to);\n    event BidDeclared(uint256 indexed tokenId, uint256 value, \n        address indexed from);\n    event BidWithdrawn(uint256 indexed tokenId, uint256 value, \n        address indexed from);\n    event BidAccepted(uint256 indexed tokenId, uint256 value, \n        address indexed from, address indexed to);\n    \n    //END EVENTS\n\n    constructor () public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _qForm = \"FormSI060719 :: freeAssociationAndResponse :: \";\n        _qSection.push(\"Section 0-2b :: \");\n        _qSection.push(\"Section2-TINA :: \");\n        _qSection.push(\"Section2b-WS :: \");\n \n\n        _theFormSI060719.push(\"When we ask ourselves \\\"How are we?\\\" :: we really want to know ::\");\n        _theQAtoIndex[0].push(0);\n        _theIndexToQA.push([0,0]);\n        _tokenOwner[0] = msg.sender;\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].add(1);\n        _supplyPerQ[0] = 1;\n\n        _theFormSI060719.push(\"How are we to ensure equitable merit-based access? :: Tried to cut down :: used more than intended :: \");\n        _theQAtoIndex[1].push(1);\n        _theIndexToQA.push([1,0]);\n        _tokenOwner[1] = msg.sender;\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].add(1);\n        _supplyPerQ[1] = 1;\n\n        _theFormSI060719.push(\"Psychoanalytic Placement Bureau ::\");\n        _theQAtoIndex[2].push(2);\n        _theIndexToQA.push([2,0]);\n        _tokenOwner[2] = msg.sender;\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].add(1);\n        _supplyPerQ[2] = 1;\n\n        _theFormSI060719.push(\"Department of Aspirational Hypocrisy :: Anti-Dishumanitarian League ::\");\n        _theQAtoIndex[3].push(3);\n        _theIndexToQA.push([3,0]);\n        _tokenOwner[3] = msg.sender;\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].add(1);\n        _supplyPerQ[3] = 1;\n\n        _theFormSI060719.push(\"Personhood Amendment :: Homestead 42 ::\");\n        _theQAtoIndex[4].push(4);\n        _theIndexToQA.push([4,0]);\n        _tokenOwner[4] = msg.sender;\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].add(1);\n        _supplyPerQ[4] = 1;\n\n        _theFormSI060719.push(\"Joint Compensation Office :: Oh how socialists love to make lists ::\");\n        _theQAtoIndex[5].push(5);\n        _theIndexToQA.push([5,0]);\n        _tokenOwner[5] = msg.sender;\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].add(1);\n        _supplyPerQ[5] = 1;\n\n        _theFormSI060719.push(\"Division of Confetti Drones and Online Community Standards ::\");\n        _theQAtoIndex[6].push(6);\n        _theIndexToQA.push([6,0]);\n        _tokenOwner[6] = msg.sender;\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].add(1);\n        _supplyPerQ[6] = 1;\n\n        _theFormSI060719.push(\"The Secret Joys of Bureaucracy :: Ministry of Splendid Suns :: Ministry of Plenty :: Crime Bureau :: Aerial Board of Control :: Office of Tabletop Assumption :: Central Committee :: Division of Complicity :: Ministry of Information ::\");\n        _theQAtoIndex[7].push(7);\n        _theIndexToQA.push([7,0]);\n        _tokenOwner[7] = msg.sender;\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].add(1);\n        _supplyPerQ[7] = 1;\n\n        _theFormSI060719.push(\"We seek droning bureaucracy :: glory :: digital socialist commodities ::\");\n        _theQAtoIndex[8].push(8);\n        _theIndexToQA.push([8,0]);\n        _tokenOwner[8] = msg.sender;\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].add(1);\n        _supplyPerQ[8] = 1;\n\n        _theFormSI060719.push(\"Bureau of Rage Embetterment :: machines made of sunshine ::\");\n        _theQAtoIndex[9].push(9);\n        _theIndexToQA.push([9,0]);\n        _tokenOwner[9] = msg.sender;\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].add(1);\n        _supplyPerQ[9] = 1;\n\n        _theFormSI060719.push(\"Office of Agency :: seize the means of bureaucratic production ::\");\n        _theQAtoIndex[10].push(10);\n        _theIndexToQA.push([10,0]);\n        _tokenOwner[10] = msg.sender;\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].add(1);\n        _supplyPerQ[10] = 1;\n\n        _theFormSI060719.push(\"Garage Politburo :: Boutique Ministry ::\");\n        _theQAtoIndex[11].push(11);\n        _theIndexToQA.push([11,0]);\n        _tokenOwner[11] = msg.sender;\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].add(1);\n        _supplyPerQ[11] = 1;\n\n        _theFormSI060719.push(\"Grassroots :: Tabletop :: Bureaucracy Saves! ::\"); \n        _theQAtoIndex[12].push(12);\n        _theIndexToQA.push([12,0]);\n        _tokenOwner[12] = msg.sender;\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].add(1);\n        _supplyPerQ[12] = 1;\n\n        _totalSupply = 13;\n        assert (_totalSupply == numberOfQuestions);\n        assert (_totalSupply == _ownedTokensCount[msg.sender]);\n        \n    }\n\n    //Begin Form\n\n\n    function name() external view returns (string memory){\n       return _name;\n    }\n\n    function totalSupply() external view returns (uint256){\n       return _totalSupply;\n    }\n\n\n    function symbol() external view returns (string memory){\n       return _symbol;\n    }\n\n\n    // questionId goes from 0 to numberOfQuestions - 1    \n    function getFormQuestion(uint256 questionId)\n        public view\n        returns (string memory){\n            \n        return (_getQAtext(questionId, 0));\n            \n    }\n    \n    // questionId goes from 0 to numberOfQuestions - 1  \n    // answerId goes from 1 to _supplyPerQ - 1\n    // If there are no answers to questionId, this function reverts\n    function getFormAnswers(uint256 questionId, uint256 answerId)\n        public view\n        returns (string memory){\n            \n        require (answerId > 0);\n        return (_getQAtext(questionId, answerId));\n            \n    }    \n\n \n    function _getQAtext(uint256 questionId, uint256 textId)\n        private view \n        returns (string memory){\n    \n        require (questionId < numberOfQuestions);\n        require (textId < _supplyPerQ[questionId]);\n       \n        if (textId > 0){\n          return (_theFormSI060719[_theQAtoIndex[questionId][textId]]);\n        }\n\n        else {\n            bytes memory qPrefix;\n            if (questionId <= 1) {\n                qPrefix = bytes(_qSection[0]);\n            }\n            if ((questionId >= 2) && (questionId <= 6)){\n                qPrefix = bytes(_qSection[1]);\n            }\n            if (questionId >= 7){\n                qPrefix = bytes(_qSection[2]);\n            }\n            return (string(abi.encodePacked(bytes(_qForm), qPrefix, \n                bytes(_theFormSI060719[_theQAtoIndex[questionId][textId]]))));\n        }\n            \n    }\n      \n     function answerQuestion(uint256 questionId, string calldata answer)\n        external\n        returns (bool){\n\n        require (questionId < numberOfQuestions);\n        require (bytes(answer).length != 0);\n        _theFormSI060719.push(answer);\n        _totalSupply = _totalSupply.add(1);\n        _supplyPerQ[questionId] = _supplyPerQ[questionId].add(1);\n        _theQAtoIndex[questionId].push(_totalSupply - 1);\n        _theIndexToQA.push([questionId, _supplyPerQ[questionId] - 1]);\n        _tokenOwner[_totalSupply - 1] = msg.sender;\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].add(1);\n        emit QuestionAnswered(questionId, _supplyPerQ[questionId] - 1,\n            msg.sender);\n       return true;\n    }\n    \n    // Returns index of ERC721 token\n    // questionId start with index 0\n    // textId 0 returns the question text associated with questionId\n    // textId 1 returns the first answer to questionId, etc...\n    function getIndexfromQA(uint256 questionId, uint256 textId)\n        public view\n        returns (uint256) {\n            \n        require (questionId < numberOfQuestions);\n        require (textId < _supplyPerQ[questionId]);\n        return _theQAtoIndex[questionId][textId];\n    }\n\n    // Returns (questionId, textId) \n    // questionId starts with index 0\n    // textId starts with index 0\n    // textId = 0 corresponds to question text\n    // textId > 0 corresponts to answers\n    \n    function getQAfromIndex(uint256 tokenId)\n        public view\n        returns (uint256[2] memory) {\n            \n        require (tokenId < _totalSupply);\n        return ([_theIndexToQA[tokenId][0] ,_theIndexToQA[tokenId][1]]) ;\n    }\n        \n    function getNumberOfAnswers(uint256 questionId)\n        public view\n        returns (uint256){\n        \n        require (questionId < numberOfQuestions);\n        return (_supplyPerQ[questionId] - 1);\n        \n    }\n    //End Form\n\n \n    /**\n     * @dev Gets the balance of the specified address\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0));\n        return _ownedTokensCount[owner];\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return owner address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0));\n        return owner;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner);\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId));\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != msg.sender);\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        // this checks if token exists\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n\n        // remove for sale, if it exists.\n        if (marketForSaleInfoByIndex[tokenId].isForSale){\n            marketForSaleInfoByIndex[tokenId] = forSaleInfo(false, tokenId, \n             address(0), 0, address(0));\n            emit ForSaleWithdrawn(tokenId, _tokenOwner[tokenId]);\n        }\n        _transferFrom(from, to, tokenId);\n        \n        // remove bid of recipient (and now new owner), if it exists.\n        // Need to do this since marketWithdrawBid requires that msg.sender not owner.\n        if (marketBidInfoByIndex[tokenId].bidder == to){\n            _clearNewOwnerBid(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     *\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n    }\n\n    /**\n     * @dev Returns whether the specified token exists\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     *    is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from);\n        require(to != address(0));\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n        _tokenOwner[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke `onERC721Received` on a target address\n     * The call is not executed if the target address is not a contract\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Private function to clear current approval of a given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n    \n        //MARKET\n\n    // Let anyone interested know that the owner put a token up for sale. \n    // Anyone can obtain it by sending an amount of wei equal to or\n    // larger than  _minPriceInWei. \n    // Only token owner can use this function.\n\n    function marketDeclareForSale(uint256 tokenId, uint256 minPriceInWei) \n            external returns (bool){\n        require (_exists(tokenId));\n        require (msg.sender == _tokenOwner[tokenId]);\n        marketForSaleInfoByIndex[tokenId] = forSaleInfo(true, tokenId, \n            msg.sender, minPriceInWei, address(0));\n        emit ForSaleDeclared(tokenId, msg.sender, minPriceInWei, address(0));\n        return true;\n    }\n    \n    // Let anyone interested know that the owner put a token up for sale. \n    // Only the address _to can obtain it by sending an amount of wei equal \n    // to or larger than _minPriceInWei.\n    // Only token owner can use this function.\n\n    function marketDeclareForSaleToAddress(uint256 tokenId, uint256 \n            minPriceInWei, address to) external returns(bool){\n        require (_exists(tokenId));\n        require (msg.sender == _tokenOwner[tokenId]);\n        marketForSaleInfoByIndex[tokenId] = forSaleInfo(true, tokenId, \n            msg.sender, minPriceInWei, to);\n        emit ForSaleDeclared(tokenId, msg.sender, minPriceInWei, to);\n        return true;\n    }\n\n    // Owner no longer wants token for sale, or token has changed owner, \n    // so previously posted for sale is no longer valid.\n    // Only token owner can use this function.\n\n    function marketWithdrawForSale(uint256 tokenId) public returns(bool){\n        require (_exists(tokenId));\n        require(msg.sender == _tokenOwner[tokenId]);\n        marketForSaleInfoByIndex[tokenId] = forSaleInfo(false, tokenId, \n            address(0), 0, address(0));\n        emit ForSaleWithdrawn(tokenId, msg.sender);\n        return true;\n    }\n    \n    // I'll take it. Must send at least as many wei as minValue in \n    // forSale structure.\n\n    function marketBuyForSale(uint256 tokenId) payable external returns(bool){\n        require (_exists(tokenId));\n        forSaleInfo storage existingForSale = marketForSaleInfoByIndex[tokenId];\n        require(existingForSale.isForSale);\n        require(existingForSale.onlySellTo == address(0) || \n            existingForSale.onlySellTo == msg.sender);\n        require(msg.value >= existingForSale.minValue);\n        address seller = _tokenOwner[tokenId];\n        require(existingForSale.seller == seller);\n        _transferFrom(seller, msg.sender, tokenId);\n        // must withdrawal for sale after transfer to make sure msg.sender\n        //  is the current owner.\n        marketWithdrawForSale(tokenId);\n        // clear bid of new owner, if it exists. \n        if (marketBidInfoByIndex[tokenId].bidder == msg.sender){\n            _clearNewOwnerBid(msg.sender, tokenId);\n        }\n        marketPendingWithdrawals[seller] = marketPendingWithdrawals[seller].add(msg.value);\n        emit ForSaleBought(tokenId, msg.value, seller, msg.sender);\n        return true;\n    }\n    \n    // Potential buyer puts up money for a token.\n\n    function marketDeclareBid(uint256 tokenId) payable external returns(bool){\n        require (_exists(tokenId));\n        require (_tokenOwner[tokenId] != msg.sender);\n        require (msg.value > 0);\n        bidInfo storage existingBid = marketBidInfoByIndex[tokenId];\n        // Keep only the highest bid.\n        require (msg.value > existingBid.value);\n        if (existingBid.value > 0){             \n            marketPendingWithdrawals[existingBid.bidder] = \n            marketPendingWithdrawals[existingBid.bidder].add(existingBid.value);\n        }\n        marketBidInfoByIndex[tokenId] = bidInfo(true, tokenId, \n            msg.sender, msg.value);\n        emit BidDeclared(tokenId, msg.value, msg.sender);\n        return true;\n    }\n    \n    // Potential buyer changes mind and withdrawals bid.\n\n    function marketWithdrawBid(uint256 tokenId) external returns(bool){\n        require (_exists(tokenId));\n        require (_tokenOwner[tokenId] != msg.sender); \n        bidInfo storage existingBid = marketBidInfoByIndex[tokenId];\n        require (existingBid.hasBid);\n        require (existingBid.bidder == msg.sender);\n        uint256 amount = existingBid.value;\n        // Refund\n        marketPendingWithdrawals[existingBid.bidder] =\n            marketPendingWithdrawals[existingBid.bidder].add(amount);\n        marketBidInfoByIndex[tokenId] = bidInfo(false, tokenId, address(0), 0);\n        emit BidWithdrawn(tokenId, amount, msg.sender);\n        return true;\n    }\n    \n    // Owner accepts bid, and money and token change hands. All money in wei.\n    // Only token owner can use this function.\n\n    function marketAcceptBid(uint256 tokenId, uint256 minPrice) \n            external returns(bool){\n        require (_exists(tokenId));\n        address seller = _tokenOwner[tokenId];\n        require (seller == msg.sender);\n        bidInfo storage existingBid = marketBidInfoByIndex[tokenId];\n        require (existingBid.hasBid);\n        require (existingBid.value >= minPrice);\n        address buyer = existingBid.bidder;\n        // Remove for sale while msg.sender still owner or approved.\n        marketWithdrawForSale(tokenId);\n        _transferFrom (seller, buyer, tokenId);\n        uint256 amount = existingBid.value;\n        // Remove bid.\n        marketBidInfoByIndex[tokenId] = bidInfo(false, tokenId, address(0),0);\n        marketPendingWithdrawals[seller] = marketPendingWithdrawals[seller].add(amount);\n        emit BidAccepted(tokenId, amount, seller, buyer);\n        return true;\n    }\n    \n    // Retrieve money to successful sale, failed bid, withdrawn bid, etc.\n    //  All in wei. Note that refunds, income, etc. are NOT automatically\n    // deposited in the user's address. The user must withdraw the funds.\n\n    function marketWithdrawWei() external returns(bool) {\n       uint256 amount = marketPendingWithdrawals[msg.sender];\n       require (amount > 0);\n       marketPendingWithdrawals[msg.sender] = 0;\n       msg.sender.transfer(amount);\n       return true;\n    } \n\n    // Clears bid when become owner changes via forSaleBuy or transferFrom.\n    \n    function _clearNewOwnerBid(address to, uint256 tokenId) internal {\n\n        uint256 amount = marketBidInfoByIndex[tokenId].value;\n        marketBidInfoByIndex[tokenId] = bidInfo(false, tokenId, \n            address(0), 0);\n        marketPendingWithdrawals[to] = marketPendingWithdrawals[to].add(amount);\n        emit BidWithdrawn(tokenId, amount, to);\n\n      \n    }\n    \n    \n    //END MARKET\n    \n    \n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"marketBuyForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"marketDeclareBid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"questionId\",\"type\":\"uint256\"},{\"name\":\"textId\",\"type\":\"uint256\"}],\"name\":\"getIndexfromQA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"marketWithdrawBid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"questionId\",\"type\":\"uint256\"},{\"name\":\"answer\",\"type\":\"string\"}],\"name\":\"answerQuestion\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"marketWithdrawWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"minPriceInWei\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"marketDeclareForSaleToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketForSaleInfoByIndex\",\"outputs\":[{\"name\":\"isForSale\",\"type\":\"bool\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"minValue\",\"type\":\"uint256\"},{\"name\":\"onlySellTo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"minPriceInWei\",\"type\":\"uint256\"}],\"name\":\"marketDeclareForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"questionId\",\"type\":\"uint256\"},{\"name\":\"answerId\",\"type\":\"uint256\"}],\"name\":\"getFormAnswers\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketPendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfQuestions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getQAfromIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getFormQuestion\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketBidInfoByIndex\",\"outputs\":[{\"name\":\"hasBid\",\"type\":\"bool\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"marketAcceptBid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"marketWithdrawForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getNumberOfAnswers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"answerId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"QuestionAnswered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ForSaleDeclared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ForSaleWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ForSaleBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"BidDeclared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"BidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "466f726d5349303630373139203a3a20667265654173736f63696174696f6e416e64526573706f6e7365203a3a20401968ff42a154441da5f6c4c935ac46b8671f0e062baaa62a7545ba53bb6e4c54686520536563726574204a6f7973206f66204275726561756372616379203a3a204d696e6973747279206f662053706c656e6469642053756e73203a3a204d696e6973747279206f6620506c656e7479203a3a204372696d6520427572656175203a3a2041657269616c20426f617264206f6620436f6e74726f6c203a3a204f6666696365206f66205461626c65746f7020417373756d7074696f6e203a3a2043656e7472616c20436f6d6d6974746565203a3a204469766973696f6e206f6620436f6d706c6963697479203a3a204d696e6973747279206f6620496e666f726d6174696f6e203a3a4465706172746d656e74206f662041737069726174696f6e616c204879706f6372697379203a3a20416e74692d44697368756d616e6974617269616e204c6561677565203a3a50737963686f616e616c7974696320506c6163656d656e7420427572656175203a3aa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6884f6666696365206f66204167656e6379203a3a207365697a6520746865206d65616e73206f66206275726561756372617469632070726f64756374696f6e203a3a5765207365656b2064726f6e696e67206275726561756372616379203a3a20676c6f7279203a3a206469676974616c20736f6369616c69737420636f6d6d6f646974696573203a3a427572656175206f66205261676520456d6265747465726d656e74203a3a206d616368696e6573206d616465206f662073756e7368696e65203a3a506572736f6e686f6f6420416d656e646d656e74203a3a20486f6d657374656164203432203a3a47617261676520506f6c69746275726f203a3a20426f757469717565204d696e6973747279203a3af3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee35768656e2077652061736b206f757273656c7665732022486f77206172652077653f22203a3a207765207265616c6c792077616e7420746f206b6e6f77203a3a486f772061726520776520746f20656e7375726520657175697461626c65206d657269742d6261736564206163636573733f203a3a20547269656420746f2063757420646f776e203a3a2075736564206d6f7265207468616e20696e74656e646564203a3a204772617373726f6f7473203a3a205461626c65746f70203a3a20427572656175637261637920536176657321203a3a4469766973696f6e206f6620436f6e66657474692044726f6e657320616e64204f6e6c696e6520436f6d6d756e697479205374616e6461726473203a3a466f726d5349303630373139203a3a2047617261676520506f6c69746275726f20546f6b656e734a6f696e7420436f6d70656e736174696f6e204f6666696365203a3a204f6820686f7720736f6369616c69737473206c6f766520746f206d616b65206c69737473203a3a"
}