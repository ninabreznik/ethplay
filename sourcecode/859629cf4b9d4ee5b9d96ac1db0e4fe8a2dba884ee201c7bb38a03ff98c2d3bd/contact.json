{
  "address": "0x29af0749c6aeb5a45708a09ad432101e222ee4e4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SMILE",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-24\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SMILE Token\n * @author Alex Papageorgiou - <[emailÂ protected]>\n * @notice The Smile Token token & airdrop contract which conforms to EIP-20 & partially ERC-223\n */\ncontract SMILE {\n\n    /**\n     * Constant EIP-20 / ERC-223 variables & getters\n     */\n\n    string constant public name = \"Smile Token\";\n    string constant public symbol = \"SMILE\";\n    uint256 constant public decimals = 18;\n    uint256 constant public totalSupply = 100000000 * (10 ** decimals);\n\n    /**\n     * A variable to store the contract creator\n     */\n\n    address public creator;\n\n    /**\n     * A variable to declare whether distribution is on-going\n     */\n\n    bool public distributionFinished = false;\n\n    /**\n     * Classic EIP-20 / ERC-223 mappings and getters\n     */\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /**\n     *      EIP-20 Events. As the ERC-223 Transfer overlaps with EIP-20,\n     *      observers are unable to track both. In order to be compatible,\n     *      the ERC-223 Event spec is not integrated.\n     */\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Mint(address indexed to, uint value);\n\n    /**\n     *      Ensures that the caller is the owner of the\n     *      contract and that the address to withdraw from\n     *      is not the contract itself.\n     */\n\n    modifier canWithdraw(address _tokenAddress) {\n        assert(msg.sender == creator && _tokenAddress != address(this));\n        _;\n    }\n\n    /**\n     *      Ensures that the caller is the owner of the\n     *      contract and that the distribution is still\n     *      in effect.\n     */\n\n    modifier canDistribute() {\n        assert(msg.sender == creator && !distributionFinished);\n        _;\n    }\n\n    /**\n     * Contract constructor which assigns total supply to caller & assigns caller as creator\n     */\n\n    constructor() public {\n        creator = msg.sender;\n        balanceOf[msg.sender] = totalSupply;\n        emit Mint(msg.sender, totalSupply);\n    }\n\n    /**\n     * Partial SafeMath library import of safe substraction\n     * @param _a Minuend: The number to substract from\n     * @param _b Subtrahend: The number that is to be subtracted\n     */\n\n    function safeSub(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        assert((c = _a - _b) <= _a);\n    }\n\n    /**\n     * Partial SafeMath library import of safe multiplication\n     * @param _a Multiplicand: The number to multiply\n     * @param _b Multiplier: The number to multiply by\n     */\n\n    function safeMul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        // Automatic failure on division by zero\n        assert((c = _a * _b) / _a == _b);\n    }\n\n    /**\n     * EIP-20 Transfer implementation\n     * @param _to The address to send tokens to\n     * @param _value The amount of tokens to send\n     */\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        // Prevent accidental transfers to the default 0x0 address\n        assert(_to != 0x0);\n        bytes memory empty;\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        } else {\n            return transferToAddress(_to, _value);\n        }\n    }\n\n    /**\n     * ERC-223 Transfer implementation\n     * @param _to The address to send tokens to\n     * @param _value The amount of tokens to send\n     * @param _data Any accompanying data for contract transfers\n     */\n\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n        // Prevent accidental transfers to the default 0x0 address\n        assert(_to != 0x0);\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        } else {\n            return transferToAddress(_to, _value);\n        }\n    }\n\n    /**\n     * EIP-20 Transfer From implementation\n     * @param _from The address to transfer tokens from\n     * @param _to The address to transfer tokens to\n     * @param _value The amount of tokens to transfer\n     */\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        allowance[_from][_to] = safeSub(allowance[_from][_to], _value);\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * EIP-20 Approve implementation (Susceptible to Race Condition, mitigation optional)\n     * @param _spender The address to delegate spending rights to\n     * @param _value The amount of tokens to delegate\n     */\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * ERC-223 Transfer to Contract implementation\n     * @param _to The contract address to send tokens to\n     * @param _value The amount of tokens to send\n     * @param _data Any accompanying data to relay to the contract\n     */\n\n    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool) {\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n        balanceOf[_to] += _value;\n        SMILE interfaceProvider = SMILE(_to);\n        interfaceProvider.tokenFallback(msg.sender, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * ERC-223 Token Fallback interface implementation\n     * @param _from The address that initiated the transfer\n     * @param _value The amount of tokens transferred\n     * @param _data Any accompanying data to relay to the contract\n     */\n\n    function tokenFallback(address _from, uint256 _value, bytes _data) public {}\n\n    /**\n     * \n     *      Partial ERC-223 Transfer to Address implementation.\n     *      The bytes parameter is intentioanlly dropped as it\n     *      is not utilized.\n     *\n     * @param _to The address to send tokens to\n     * @param _value The amount of tokens to send\n     */\n\n    function transferToAddress(address _to, uint256 _value) private returns (bool) {\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * ERC-223 Contract check implementation\n     * @param _addr The address to check contract existance in\n     */\n\n    function isContract(address _addr) private view returns (bool) {\n        uint256 length;\n        assembly {\n            length := extcodesize(_addr)\n        }\n        // NE is more gas efficient than GT\n        return (length != 0);\n    }\n\n    /**\n     * Implementation of a multi-user distribution function\n     * @param _addresses The array of addresses to transfer to\n     * @param _value The amount of tokens to transfer to each\n     */\n\n    function distributeSMILE(address[] _addresses, uint256 _value) canDistribute external {\n         for (uint256 i = 0; i < _addresses.length; i++) {\n             balanceOf[_addresses[i]] += _value;\n             emit Transfer(msg.sender, _addresses[i], _value);\n         }\n         // Can be removed in one call instead of each time within the loop\n         balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], safeMul(_value, _addresses.length));\n    }\n\n    /**\n     * Implementation to retrieve accidentally sent EIP-20 compliant tokens\n     * @param _token The contract address of the EIP-20 compliant token\n     */\n\n    function retrieveERC(address _token) external canWithdraw(_token) {\n        SMILE interfaceProvider = SMILE(_token);\n        // By default, the whole balance of the contract is sent to the caller\n        interfaceProvider.transfer(msg.sender, interfaceProvider.balanceOf(address(this)));\n    }\n\n    /**\n     *      Absence of payable modifier is intentional as\n     *      it causes accidental Ether transfers to throw.\n     */\n\n    function() public {}\n}",
  "bytecode": "608060405260008060146101000a81548160ff02191690831515021790555034801561002a57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600a0a6305f5e10002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968856012600a0a6305f5e100026040518082815260200191505060405180910390a261147f806101206000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f146100ea57806306fdde0314610141578063095ea7b3146101d157806318160ddd1461023657806323b872dd14610261578063313ce567146102e657806370a08231146103115780638fd5a39e1461036857806395d89b41146103ad578063a9059cbb1461043d578063be45fd62146104a2578063c0ee0b8a1461054d578063c108d542146105e0578063d4afc8b61461060f578063dd62ed3e14610652575b3480156100e757600080fd5b50005b3480156100f657600080fd5b506100ff6106c9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561014d57600080fd5b506101566106ee565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019657808201518184015260208101905061017b565b50505050905090810190601f1680156101c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101dd57600080fd5b5061021c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610727565b604051808215151515815260200191505060405180910390f35b34801561024257600080fd5b5061024b610819565b6040518082815260200191505060405180910390f35b34801561026d57600080fd5b506102cc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610827565b604051808215151515815260200191505060405180910390f35b3480156102f257600080fd5b506102fb610a78565b6040518082815260200191505060405180910390f35b34801561031d57600080fd5b50610352600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a7d565b6040518082815260200191505060405180910390f35b34801561037457600080fd5b506103ab60048036038101908080359060200190820180359060200191909192939192939080359060200190929190505050610a95565b005b3480156103b957600080fd5b506103c2610cc9565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104025780820151818401526020810190506103e7565b50505050905090810190601f16801561042f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561044957600080fd5b50610488600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d02565b604051808215151515815260200191505060405180910390f35b3480156104ae57600080fd5b50610533600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610d5d565b604051808215151515815260200191505060405180910390f35b34801561055957600080fd5b506105de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610db5565b005b3480156105ec57600080fd5b506105f5610dba565b604051808215151515815260200191505060405180910390f35b34801561061b57600080fd5b50610650600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dcd565b005b34801561065e57600080fd5b506106b3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061101c565b6040518082815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600b81526020017f536d696c6520546f6b656e00000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6012600a0a6305f5e1000281565b60006108af600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611041565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610978600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611041565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b60016020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610b005750600060149054906101000a900460ff16155b1515610b0857fe5b600090505b83839050811015610c2b5781600160008686858181101515610b2b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508383828181101515610b9d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a38080600101915050610b0d565b610c80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c7b848787905061105a565b611041565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050565b6040805190810160405280600581526020017f534d494c4500000000000000000000000000000000000000000000000000000081525081565b6000606060008473ffffffffffffffffffffffffffffffffffffffff1614151515610d2957fe5b610d328461107d565b15610d4957610d42848483611091565b9150610d56565b610d538484611309565b91505b5092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1614151515610d8157fe5b610d8a8461107d565b15610da157610d9a848484611091565b9050610dae565b610dab8484611309565b90505b9392505050565b505050565b600060149054906101000a900460ff1681565b6000816000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610e5857503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b1515610e6057fe5b8291508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610f1b57600080fd5b505af1158015610f2f573d6000803e3d6000fd5b505050506040513d6020811015610f4557600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610fdb57600080fd5b505af1158015610fef573d6000803e3d6000fd5b505050506040513d602081101561100557600080fd5b810190808051906020019092919050505050505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b6000828284039150811115151561105457fe5b92915050565b6000818383850292508281151561106d57fe5b0414151561107757fe5b92915050565b600080823b90506000811415915050919050565b6000806110dd600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485611041565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611232578082015181840152602081019050611217565b50505050905090810190601f16801561125f5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561128057600080fd5b505af1158015611294573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019150509392505050565b6000611354600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611041565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050929150505600a165627a7a72305820d961b42794b05f7fdb5a8bb64d4752b53113dd6e40af507618fb164ef17808870029"
}