{
  "address": "0x058c72927ff99b5fa88a19b4feffc3c8012222e7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenSale",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-21\n*/\n\npragma solidity >0.5.0;\n// ------------------------------------------------------------------------\n// TokenSale (TUSD) by Tentech Group OU Limited.\n// \n// author: Tentech Group Team\n// contact: Tentech [emailÂ protected]\n//--------------------------------------------------------------------------\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n    \n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a>b) return a;\n        return b;\n    }\n}\n\ncontract ERC20 {\n    // Get the total token supply\n    function totalSupply() public view returns (uint256 _totalSupply);\n \n    // Get the account balance of another account with address _owner\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    \n    function decimals() public view returns (uint8);\n \n    // Send _value amount of tokens to address _to\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    \n    // transfer _value amount of token approved by address _from\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    \n    // approve an address with _value amount of tokens\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    // get remaining token approved by _owner to _spender\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n  \n    // Triggered when tokens are transferred.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n \n    // Triggered whenever approve(address _spender, uint256 _value) is called.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract ERC20RcvContract {     \n    function tokenFallback(address _from, uint _value) public;\n}\n\ncontract TokenSale  is ERC20RcvContract {\n\n    using SafeMath for uint;\n    \n    string public description = \"TokenSale by TUSD v1.0\";\n    uint baseDecimals = 10**18;\n    uint quoteDecimals = 10**6;\n    uint ratioDecimals = 10**3;\n    uint maxVerifyPerBatch = 50; // Specify the maximum buyers can be verified in a call to verifyBuyer()\n\n    address internal baseToken =  0x0000000000085d4780B73119b644AE5ecd22b376;        // Address of the base token (TUSD)\n    address internal quoteToken = 0xC9b965df61f634b35e34043545572F468aF6599D;        // Address of the quote token (GDEM - TenToken)\n    address public fundOwner;           // Who own the fund wallet.\n    address public broker;              // Who can fire contract methods\n\n    uint public refundFeePerc;\n\n    uint public exchangeRatio=0;        // How much of the quote currency is needed to purchase one unit of the base currency?\n    uint public quoteTotal;             // Total token amount of the TokenSale\n    uint public quoteBalance;           // The remaining amount of quoteTotal\n    uint public baseTotalSold;          // We'll store the total baseToken raised via TokenSale    \n    \n    bool public issueTokenOnBuy=false;  //Auto issue token on receiving TUSD\n\n    // Retail mode means\n    // - Can purchase many times\n    // - Token is issued upon receiving fund (TUSD)\n    bool public retailMode=false;\n    bool public isClosed=false; \n\n    uint public buyMin;   \n    uint public buyMax;    \n    uint public dateStart;\n    uint public dateEnd;\n\n    mapping (address => bool) public isVerified;\n    mapping (address => bool) public isQuoteIssued;\n    mapping (address => uint) public notVerifiedTransfer;\n    \n    event eBuyReceived(address indexed _from, uint _baseReceived, uint _quoteIssue);\n    event eIssueToken(address indexed _to, uint _baseReceived, uint _quoteIssue);\n    event eBuyRefund(address indexed _to, uint _refund, uint _refundFee);\n    \n    modifier onlyBroker() {\n        require(msg.sender == broker, \"The method can only be called by BROKER\");\n        _;\n    }\n\n    modifier validBuyDate() {\n        require(now >= dateStart && now<=dateEnd, \"TokenSale was not opened now\");\n        _;\n    }    \n      \n    constructor ()  public \n    {\n        // Wallet which deploy contract will become broker\n        broker = msg.sender;\n    }\n            \n    // Setup token sale paramenters\n    function setup (uint _exChangeRatio, uint _buyMin, uint _buyMax, uint _refundFeePerc, uint _start, uint _end,\n                    bool _retailMode)  public onlyBroker \n    {\n        require(exchangeRatio==0, \"Cannot resetup contract.\");\n        require(_exChangeRatio>0, \"exchangeRatio must be greater than 0\");\n        require(_refundFeePerc>=0 && _refundFeePerc<ratioDecimals, \"refundFeePerc is out of range\");\n        require(_buyMin>0, \"buyMin must be greater than 0\");\n        require(_buyMax>=_buyMin, \"buyMax must be greater or equal buyMin\");\n        require(_start<=_end, \"dateStart must be greater or equal dateEnd\");\n        \n        refundFeePerc = _refundFeePerc;\n        exchangeRatio = _exChangeRatio.mul(quoteDecimals).div(ratioDecimals);\n\n        buyMin = _buyMin;\n        buyMax = _buyMax;\n        dateStart = _start;\n        dateEnd = _end;\n        retailMode = _retailMode;      \n    }\n   \n    // Calculate baseToken amount in exchange for received TUSD \n    function calcSellToken (uint _baseReceived) internal view returns(uint)\n    {\n        return _baseReceived.mul(exchangeRatio).div(baseDecimals);\n    }\n\n    // Calculate baseToken amount in exchange for received TUSD \n    function calcRefundFee (uint _amt) internal view returns(uint)\n    {\n        return _amt.mul(refundFeePerc).div(ratioDecimals);        \n    }\n    \n    /// Issue baseToken\n    function issueToken(address _to) public onlyBroker\n    {\n        require(retailMode==false, \"Cannot run this method in Retail mode\"); \n\n        uint _baseReceived = notVerifiedTransfer[_to];\n        notVerifiedTransfer[_to] = 0;\n\n        uint _quoteIssue = calcSellToken(_baseReceived);\n        issueTokenInternal(_to,_baseReceived,_quoteIssue);\n    }  \n   \n    /// Refund\n    function refund(address _to)  public onlyBroker\n    {\n        require(retailMode==false, \"Cannot run this method in Retail mode\");  \n\n        uint _baseReceived = notVerifiedTransfer[_to];\n        require(_baseReceived>0, \"No amount to refund\");\n        notVerifiedTransfer[_to] = 0;\n     \n        uint _refundFeeAmt = calcRefundFee(_baseReceived);\n        uint _refundAmt = _baseReceived.sub(_refundFeeAmt);\n\n        //Transfer refund amt from the contract to buyer\n        ERC20(baseToken).transfer(_to, _refundAmt);\n\n        //Transfer refund fee from the contract to fundOwner\n        ERC20(baseToken).transfer(fundOwner, _refundFeeAmt);\n\n        emit eBuyRefund(_to, _refundAmt, _refundFeeAmt); \n        \n    }\n        \n    /// Transfer remain baseToken amount to fundOwner when the TokenSale was over/end by fundOwner\n    function close() public onlyBroker \n    {    \n        require(isClosed==false, \"Contract was closed already\");\n        isClosed = true;\n\n        uint _balanceAmt = quoteBalance;\n        require(_balanceAmt>0, \"Cannot close : Contract balance is 0\");\n        quoteBalance = 0;\n        ERC20(quoteToken).transfer(fundOwner,_balanceAmt);\n    } \n\n    // Set verified address who can receive quoteToken imediately upon transfering baseToken\n    function verifyBuyer( address[] memory _list)  public onlyBroker \n    {\n        require(isClosed==false, \"Contract was closed\");\n        require(retailMode==false, \"Cannot run this method in Retail mode\");\n\n        require(_list.length<=maxVerifyPerBatch, \"Out of list : can only verify maxVerifyPerBatch addresses\");\n        for (uint idx=0; idx<_list.length; idx++) {\n            isVerified[_list[idx]] = true;\n        }\n    }\n\n    function setDate(uint _start, uint _end) public onlyBroker\n    {    \n        require(isClosed==false, \"Contract was closed\");\n        dateStart = _start;\n        dateEnd = _end;\n    }\n\n    function setBroker(address _broker) public onlyBroker\n    {\n        require(isClosed==false, \"Contract was closed\");\n        require(_broker != broker);\n        broker = _broker;\n    } \n   \n    function setAutoIssue(bool _auto)  public onlyBroker \n    {\n        require(isClosed==false, \"Contract was closed\");\n        require(retailMode==false, \"Cannot run this method in Retail mode\");        \n        require(exchangeRatio>0, \"exchangeRatio was out of range\");\n        require(issueTokenOnBuy!=_auto, \"issueTokenOnBuy was set already\");\n        issueTokenOnBuy = _auto;\n    }\n           \n    // Called when baseToken was transfered to setup the contract total\n    function tokenFallback(address _from, uint _value)  public \n    {\n        require(isClosed==false, \"Contract was closed\");\n        require(_value>0, \"Invalid : value must be greater than 0\");\n        // Buyer transfer token to buy TokenSale\n        if (msg.sender==baseToken) {\n            purchaseToken(_from, _value);\n            return;\n        }\n\n        // Onwer send token to setup the TokenSale amount\n        if (msg.sender==quoteToken) {\n            setupTokenBalance(_from, _value);\n            return;\n        }\n        revert();\n    }\n    \n    function setupTokenBalance(address _from, uint _value) internal \n    {\n        require(exchangeRatio>0, \"exchangeRatio was not setup\");\n        \n        if (fundOwner==address(0)) {\n            // Wallet which transfered token will become fund owner\n           fundOwner = _from;\n        }\n        else{\n            //Ensure that only the owner can add more fund\n            require(fundOwner==_from, \"Only owner can add more fund\");\n        }\n\n        //Add fund   \n        uint _quoteTotal = _value;\n\n        quoteTotal = quoteTotal.add(_quoteTotal);\n        quoteBalance = quoteBalance.add(_quoteTotal);\n    }\n    \n    function purchaseToken(address  _from, uint _baseReceived) internal validBuyDate \n    {\n        require(quoteBalance>0, \"quoteBalance was out of range\");\n        require(exchangeRatio>0, \"exchangeRatio was out of range\");\n\n        uint _quoteIssue = validateBuyValue(_baseReceived);\n\n        if (retailMode) issueTokenAndCollectFund(_from, _baseReceived, _quoteIssue);\n        else{\n\n            require(isQuoteIssued[_from]==false, \"Cannot buy any more token\");\n            if (issueTokenOnBuy || isVerified[_from]==true)\n                issueTokenInternal(_from, _baseReceived, _quoteIssue);\n            else{\n                require(notVerifiedTransfer[_from]==0, \"Cannot transfer to buy more token\");\n                notVerifiedTransfer[_from] = _baseReceived;\n            }\n        }\n        emit eBuyReceived(_from, _baseReceived, _quoteIssue); \n    }\n\n    function issueTokenInternal(address _to,uint _baseReceived, uint  _quoteIssue) internal\n    {\n        require(_baseReceived>0, \"_baseReceived is out of range\");\n        require(_quoteIssue>0, \"_quoteIssue is out of range\");     \n        require(isQuoteIssued[_to]==false, \"Cannot issue token any more\");\n        isQuoteIssued[_to]=true;\n        issueTokenAndCollectFund(_to,_baseReceived,_quoteIssue);              \n    }\n\n    // Issue token to buyer and collect fund to owner\n    function issueTokenAndCollectFund(address _to, uint _baseReceived, uint _quoteIssue) internal\n    {\n        require(quoteBalance>=_quoteIssue, \"Insufficient quote token to issue\"); \n        quoteBalance = quoteBalance.sub(_quoteIssue);\n        baseTotalSold = baseTotalSold.add(_baseReceived);\n\n        //Transfer quoteToken from the contract to buyer\n        ERC20(quoteToken).transfer(_to, _quoteIssue);\n\n        //Transfer baseToken from the contract to fundOwner\n        ERC20(baseToken).transfer(fundOwner, _baseReceived);\n\n        emit eIssueToken(_to, _quoteIssue, _baseReceived);        \n    }\n    \n    // Validate buy amount and return the valid amount\n    function validateBuyValue(uint _value) internal view returns(uint)\n    {\n        require(isClosed==false, \"Contract was closed\");    \n        uint _buyAmt = calcSellToken(_value);\n        require(_buyAmt >= buyMin && _buyAmt<=buyMax, \"Buy amount was out of range\");\n        require(_buyAmt <= quoteBalance, \"Insufficient token to supply\");\n        return _buyAmt;\n    }   \n}",
  "bytecode": "60c0604052601660808190527f546f6b656e53616c6520627920545553442076312e300000000000000000000060a0908152620000409160009190620000d9565b50670de0b6b3a7640000600155620f42406002556103e86003556032600455600580546001600160a01b03199081166e085d4780b73119b644ae5ecd22b376179091556006805490911673c9b965df61f634b35e34043545572f468af6599d1790556000600a55600e805462ffffff19169055348015620000c057600080fd5b50600880546001600160a01b031916331790556200017e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011c57805160ff19168380011785556200014c565b828001600101855582156200014c579182015b828111156200014c5782518255916020019190600101906200012f565b506200015a9291506200015e565b5090565b6200017b91905b808211156200015a576000815560010162000165565b90565b611dea806200018e6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806389034082116100f9578063b9209e3311610097578063f1a2e84911610071578063f1a2e8491461048b578063f3587e4614610493578063f9f76eb8146104b6578063fa89401a146104f9576101a9565b8063b9209e3314610437578063bf0d02131461045d578063c2b6b58c14610483576101a9565b8063a3b6120c116100d3578063a3b6120c14610417578063a971611f1461041f578063abff011014610427578063b45cbee81461042f576101a9565b806389034082146103c357806389244e2a146103e95780639a065dc7146103f1576101a9565b80634dbc9a1c11610166578063735fb8e011610140578063735fb8e0146103555780637d60ce9e14610379578063816fd658146103b357806385a99493146103bb576101a9565b80634dbc9a1c146102c85780635f286909146102d05780637284e416146102d8576101a9565b806322b6be39146101ae578063303204ea146102535780633b66d02b1461026d5780633eed05ee146102995780634006ccc5146102b857806343d726d6146102c0575b600080fd5b610251600480360360208110156101c457600080fd5b8101906020810181356401000000008111156101df57600080fd5b8201836020820111156101f157600080fd5b8035906020019184602083028401116401000000008311171561021357600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061051f945050505050565b005b61025b6106a5565b60408051918252519081900360200190f35b6102516004803603604081101561028357600080fd5b506001600160a01b0381351690602001356106ab565b610251600480360360208110156102af57600080fd5b5035151561077b565b61025b61092e565b610251610934565b61025b610ac8565b61025b610ace565b6102e0610ad4565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561031a578181015183820152602001610302565b50505050905090810190601f1680156103475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61035d610b62565b604080516001600160a01b039092168252519081900360200190f35b61039f6004803603602081101561038f57600080fd5b50356001600160a01b0316610b71565b604080519115158252519081900360200190f35b61025b610b86565b61025b610b8c565b610251600480360360208110156103d957600080fd5b50356001600160a01b0316610b92565b61025b610c5d565b61025b6004803603602081101561040757600080fd5b50356001600160a01b0316610c63565b61025b610c75565b61039f610c7b565b61035d610c89565b61039f610c98565b61039f6004803603602081101561044d57600080fd5b50356001600160a01b0316610ca1565b6102516004803603602081101561047357600080fd5b50356001600160a01b0316610cb6565b61039f610d8e565b61025b610d9d565b610251600480360360408110156104a957600080fd5b5080359060200135610da3565b610251600480360360e08110156104cc57600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c001351515610e49565b6102516004803603602081101561050f57600080fd5b50356001600160a01b03166110c2565b6008546001600160a01b0316331461056b57604051600160e51b62461bcd028152600401808060200182810382526027815260200180611ceb6027913960400191505060405180910390fd5b600e5462010000900460ff16156105ba5760408051600160e51b62461bcd0281526020600482015260136024820152600080516020611caa833981519152604482015290519081900360640190fd5b600e54610100900460ff161561060457604051600160e51b62461bcd028152600401808060200182810382526025815260200180611c3e6025913960400191505060405180910390fd5b6004548151111561064957604051600160e51b62461bcd028152600401808060200182810382526039815260200180611d866039913960400191505060405180910390fd5b60005b81518110156106a15760016013600084848151811061066757fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161064c565b5050565b600d5481565b600e5462010000900460ff16156106fa5760408051600160e51b62461bcd0281526020600482015260136024820152600080516020611caa833981519152604482015290519081900360640190fd5b6000811161073c57604051600160e51b62461bcd028152600401808060200182810382526026815260200180611d3c6026913960400191505060405180910390fd5b6005546001600160a01b031633141561075e576107598282611356565b6106a1565b6006546001600160a01b03163314156101a957610759828261160b565b6008546001600160a01b031633146107c757604051600160e51b62461bcd028152600401808060200182810382526027815260200180611ceb6027913960400191505060405180910390fd5b600e5462010000900460ff16156108165760408051600160e51b62461bcd0281526020600482015260136024820152600080516020611caa833981519152604482015290519081900360640190fd5b600e54610100900460ff161561086057604051600160e51b62461bcd028152600401808060200182810382526025815260200180611c3e6025913960400191505060405180910390fd5b6000600a54116108ba5760408051600160e51b62461bcd02815260206004820152601e60248201527f65786368616e6765526174696f20776173206f7574206f662072616e67650000604482015290519081900360640190fd5b600e5460ff161515811515141561091b5760408051600160e51b62461bcd02815260206004820152601f60248201527f6973737565546f6b656e4f6e427579207761732073657420616c726561647900604482015290519081900360640190fd5b600e805460ff1916911515919091179055565b600a5481565b6008546001600160a01b0316331461098057604051600160e51b62461bcd028152600401808060200182810382526027815260200180611ceb6027913960400191505060405180910390fd5b600e5462010000900460ff16156109e15760408051600160e51b62461bcd02815260206004820152601b60248201527f436f6e74726163742077617320636c6f73656420616c72656164790000000000604482015290519081900360640190fd5b600e805462ff0000191662010000179055600c5480610a3457604051600160e51b62461bcd028152600401808060200182810382526024815260200180611d626024913960400191505060405180910390fd5b6000600c81905560065460075460408051600160e01b63a9059cbb0281526001600160a01b039283166004820152602481018690529051919092169263a9059cbb92604480820193602093909283900390910190829087803b158015610a9957600080fd5b505af1158015610aad573d6000803e3d6000fd5b505050506040513d6020811015610ac357600080fd5b505050565b600f5481565b60105481565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610b5a5780601f10610b2f57610100808354040283529160200191610b5a565b820191906000526020600020905b815481529060010190602001808311610b3d57829003601f168201915b505050505081565b6007546001600160a01b031681565b60146020526000908152604090205460ff1681565b600b5481565b60095481565b6008546001600160a01b03163314610bde57604051600160e51b62461bcd028152600401808060200182810382526027815260200180611ceb6027913960400191505060405180910390fd5b600e54610100900460ff1615610c2857604051600160e51b62461bcd028152600401808060200182810382526025815260200180611c3e6025913960400191505060405180910390fd5b6001600160a01b038116600090815260156020526040812080549082905590610c508261172d565b9050610ac3838383611750565b60125481565b60156020526000908152604090205481565b60115481565b600e54610100900460ff1681565b6008546001600160a01b031681565b600e5460ff1681565b60136020526000908152604090205460ff1681565b6008546001600160a01b03163314610d0257604051600160e51b62461bcd028152600401808060200182810382526027815260200180611ceb6027913960400191505060405180910390fd5b600e5462010000900460ff1615610d515760408051600160e51b62461bcd0281526020600482015260136024820152600080516020611caa833981519152604482015290519081900360640190fd5b6008546001600160a01b0382811691161415610d6c57600080fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b600e5462010000900460ff1681565b600c5481565b6008546001600160a01b03163314610def57604051600160e51b62461bcd028152600401808060200182810382526027815260200180611ceb6027913960400191505060405180910390fd5b600e5462010000900460ff1615610e3e5760408051600160e51b62461bcd0281526020600482015260136024820152600080516020611caa833981519152604482015290519081900360640190fd5b601191909155601255565b6008546001600160a01b03163314610e9557604051600160e51b62461bcd028152600401808060200182810382526027815260200180611ceb6027913960400191505060405180910390fd5b600a5415610eed5760408051600160e51b62461bcd02815260206004820152601860248201527f43616e6e6f74207265736574757020636f6e74726163742e0000000000000000604482015290519081900360640190fd5b60008711610f2f57604051600160e51b62461bcd028152600401808060200182810382526024815260200180611c1a6024913960400191505060405180910390fd5b6003548410610f885760408051600160e51b62461bcd02815260206004820152601d60248201527f726566756e6446656550657263206973206f7574206f662072616e6765000000604482015290519081900360640190fd5b60008611610fe05760408051600160e51b62461bcd02815260206004820152601d60248201527f6275794d696e206d7573742062652067726561746572207468616e2030000000604482015290519081900360640190fd5b8585101561102257604051600160e51b62461bcd028152600401808060200182810382526026815260200180611c846026913960400191505060405180910390fd5b8183111561106457604051600160e51b62461bcd02815260040180806020018281038252602a815260200180611d12602a913960400191505060405180910390fd5b60098490556003546002546110919190611085908a9063ffffffff61189f16565b9063ffffffff6118cd16565b600a55600f9590955560109390935560115550601255600e80549115156101000261ff001990921691909117905550565b6008546001600160a01b0316331461110e57604051600160e51b62461bcd028152600401808060200182810382526027815260200180611ceb6027913960400191505060405180910390fd5b600e54610100900460ff161561115857604051600160e51b62461bcd028152600401808060200182810382526025815260200180611c3e6025913960400191505060405180910390fd5b6001600160a01b038116600090815260156020526040902054806111c65760408051600160e51b62461bcd02815260206004820152601360248201527f4e6f20616d6f756e7420746f20726566756e6400000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821660009081526015602052604081208190556111ea826118ef565b905060006111fe838363ffffffff61190c16565b60055460408051600160e01b63a9059cbb0281526001600160a01b03888116600483015260248201859052915193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561125957600080fd5b505af115801561126d573d6000803e3d6000fd5b505050506040513d602081101561128357600080fd5b505060055460075460408051600160e01b63a9059cbb0281526001600160a01b039283166004820152602481018690529051919092169163a9059cbb9160448083019260209291908290030181600087803b1580156112e157600080fd5b505af11580156112f5573d6000803e3d6000fd5b505050506040513d602081101561130b57600080fd5b5050604080518281526020810184905281516001600160a01b038716927fe1713f3a32a0a3e44a04deb19a662fe64b7a7dfd85e785561ba37a6472adfcee928290030190a250505050565b601154421015801561136a57506012544211155b6113be5760408051600160e51b62461bcd02815260206004820152601c60248201527f546f6b656e53616c6520776173206e6f74206f70656e6564206e6f7700000000604482015290519081900360640190fd5b6000600c54116114185760408051600160e51b62461bcd02815260206004820152601d60248201527f71756f746542616c616e636520776173206f7574206f662072616e6765000000604482015290519081900360640190fd5b6000600a54116114725760408051600160e51b62461bcd02815260206004820152601e60248201527f65786368616e6765526174696f20776173206f7574206f662072616e67650000604482015290519081900360640190fd5b600061147d82611921565b600e54909150610100900460ff16156114a05761149b838383611a42565b6115c3565b6001600160a01b03831660009081526014602052604090205460ff16156115115760408051600160e51b62461bcd02815260206004820152601960248201527f43616e6e6f742062757920616e79206d6f726520746f6b656e00000000000000604482015290519081900360640190fd5b600e5460ff168061153f57506001600160a01b03831660009081526013602052604090205460ff1615156001145b1561154f5761149b838383611750565b6001600160a01b038316600090815260156020526040902054156115a757604051600160e51b62461bcd028152600401808060200182810382526021815260200180611c636021913960400191505060405180910390fd5b6001600160a01b03831660009081526015602052604090208290555b604080518381526020810183905281516001600160a01b038616927ff567e50883339f5bbe0fad1139fa8a5bab639c847bbdf4b776d24963ac382530928290030190a2505050565b6000600a54116116655760408051600160e51b62461bcd02815260206004820152601b60248201527f65786368616e6765526174696f20776173206e6f742073657475700000000000604482015290519081900360640190fd5b6007546001600160a01b031661169557600780546001600160a01b0319166001600160a01b0384161790556116fa565b6007546001600160a01b038381169116146116fa5760408051600160e51b62461bcd02815260206004820152601c60248201527f4f6e6c79206f776e65722063616e20616464206d6f72652066756e6400000000604482015290519081900360640190fd5b600b54819061170f908263ffffffff611c0716565b600b55600c54611725908263ffffffff611c0716565b600c55505050565b600061174a600154611085600a548561189f90919063ffffffff16565b92915050565b600082116117a85760408051600160e51b62461bcd02815260206004820152601d60248201527f5f626173655265636569766564206973206f7574206f662072616e6765000000604482015290519081900360640190fd5b600081116118005760408051600160e51b62461bcd02815260206004820152601b60248201527f5f71756f74654973737565206973206f7574206f662072616e67650000000000604482015290519081900360640190fd5b6001600160a01b03831660009081526014602052604090205460ff16156118715760408051600160e51b62461bcd02815260206004820152601b60248201527f43616e6e6f7420697373756520746f6b656e20616e79206d6f72650000000000604482015290519081900360640190fd5b6001600160a01b0383166000908152601460205260409020805460ff19166001179055610ac3838383611a42565b6000826118ae5750600061174a565b828202828482816118bb57fe5b04146118c657600080fd5b9392505050565b60008082116118db57600080fd5b60008284816118e657fe5b04949350505050565b600061174a6003546110856009548561189f90919063ffffffff16565b60008282111561191b57600080fd5b50900390565b600e5460009062010000900460ff16156119735760408051600160e51b62461bcd0281526020600482015260136024820152600080516020611caa833981519152604482015290519081900360640190fd5b600061197e8361172d565b9050600f54811015801561199457506010548111155b6119e85760408051600160e51b62461bcd02815260206004820152601b60248201527f42757920616d6f756e7420776173206f7574206f662072616e67650000000000604482015290519081900360640190fd5b600c5481111561174a5760408051600160e51b62461bcd02815260206004820152601c60248201527f496e73756666696369656e7420746f6b656e20746f20737570706c7900000000604482015290519081900360640190fd5b80600c541015611a8657604051600160e51b62461bcd028152600401808060200182810382526021815260200180611cca6021913960400191505060405180910390fd5b600c54611a99908263ffffffff61190c16565b600c55600d54611aaf908363ffffffff611c0716565b600d5560065460408051600160e01b63a9059cbb0281526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015611b0b57600080fd5b505af1158015611b1f573d6000803e3d6000fd5b505050506040513d6020811015611b3557600080fd5b505060055460075460408051600160e01b63a9059cbb0281526001600160a01b039283166004820152602481018690529051919092169163a9059cbb9160448083019260209291908290030181600087803b158015611b9357600080fd5b505af1158015611ba7573d6000803e3d6000fd5b505050506040513d6020811015611bbd57600080fd5b5050604080518281526020810184905281516001600160a01b038616927f5dbd7eabc176c319142ecadd920669473e39cad9db384adda6b578f04dd54ca0928290030190a2505050565b6000828201838110156118c657600080fdfe65786368616e6765526174696f206d7573742062652067726561746572207468616e203043616e6e6f742072756e2074686973206d6574686f6420696e2052657461696c206d6f646543616e6e6f74207472616e7366657220746f20627579206d6f726520746f6b656e6275794d6178206d7573742062652067726561746572206f7220657175616c206275794d696e436f6e74726163742077617320636c6f73656400000000000000000000000000496e73756666696369656e742071756f746520746f6b656e20746f206973737565546865206d6574686f642063616e206f6e6c792062652063616c6c65642062792042524f4b4552646174655374617274206d7573742062652067726561746572206f7220657175616c2064617465456e64496e76616c6964203a2076616c7565206d7573742062652067726561746572207468616e203043616e6e6f7420636c6f7365203a20436f6e74726163742062616c616e636520697320304f7574206f66206c697374203a2063616e206f6e6c7920766572696679206d6178566572696679506572426174636820616464726573736573a165627a7a723058208e631985c7a15e1224f9fba3b788c5787c12c5f52487e0796f4e7bc22e4bb1af0029"
}