{
  "address": "0x305dc6d8bc5e3fd550a75909ab1ec04d73864525",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DxMgnPool",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-02\n*/\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: @gnosis.pm/mock-contract/contracts/MockContract.sol\n\npragma solidity ^0.5.0;\n\ninterface MockInterface {\n\t/**\n\t * @dev After calling this method, the mock will return `response` when it is called\n\t * with any calldata that is not mocked more specifically below\n\t * (e.g. using givenMethodReturn).\n\t * @param response ABI encoded response that will be returned if method is invoked\n\t */\n\tfunction givenAnyReturn(bytes calldata response) external;\n\tfunction givenAnyReturnBool(bool response) external;\n\tfunction givenAnyReturnUint(uint response) external;\n\tfunction givenAnyReturnAddress(address response) external;\n\n\tfunction givenAnyRevert() external;\n\tfunction givenAnyRevertWithMessage(string calldata message) external;\n\tfunction givenAnyRunOutOfGas() external;\n\n\t/**\n\t * @dev After calling this method, the mock will return `response` when the given\n\t * methodId is called regardless of arguments. If the methodId and arguments\n\t * are mocked more specifically (using `givenMethodAndArguments`) the latter\n\t * will take precedence.\n\t * @param method ABI encoded methodId. It is valid to pass full calldata (including arguments). The mock will extract the methodId from it\n\t * @param response ABI encoded response that will be returned if method is invoked\n\t */\n\tfunction givenMethodReturn(bytes calldata method, bytes calldata response) external;\n\tfunction givenMethodReturnBool(bytes calldata method, bool response) external;\n\tfunction givenMethodReturnUint(bytes calldata method, uint response) external;\n\tfunction givenMethodReturnAddress(bytes calldata method, address response) external;\n\n\tfunction givenMethodRevert(bytes calldata method) external;\n\tfunction givenMethodRevertWithMessage(bytes calldata method, string calldata message) external;\n\tfunction givenMethodRunOutOfGas(bytes calldata method) external;\n\n\t/**\n\t * @dev After calling this method, the mock will return `response` when the given\n\t * methodId is called with matching arguments. These exact calldataMocks will take\n\t * precedence over all other calldataMocks.\n\t * @param call ABI encoded calldata (methodId and arguments)\n\t * @param response ABI encoded response that will be returned if contract is invoked with calldata\n\t */\n\tfunction givenCalldataReturn(bytes calldata call, bytes calldata response) external;\n\tfunction givenCalldataReturnBool(bytes calldata call, bool response) external;\n\tfunction givenCalldataReturnUint(bytes calldata call, uint response) external;\n\tfunction givenCalldataReturnAddress(bytes calldata call, address response) external;\n\n\tfunction givenCalldataRevert(bytes calldata call) external;\n\tfunction givenCalldataRevertWithMessage(bytes calldata call, string calldata message) external;\n\tfunction givenCalldataRunOutOfGas(bytes calldata call) external;\n\n\t/**\n\t * @dev Returns the number of times anything has been called on this mock since last reset\n\t */\n\tfunction invocationCount() external returns (uint);\n\n\t/**\n\t * @dev Returns the number of times the given method has been called on this mock since last reset\n\t * @param method ABI encoded methodId. It is valid to pass full calldata (including arguments). The mock will extract the methodId from it\n\t */\n\tfunction invocationCountForMethod(bytes calldata method) external returns (uint);\n\n\t/**\n\t * @dev Returns the number of times this mock has been called with the exact calldata since last reset.\n\t * @param call ABI encoded calldata (methodId and arguments)\n\t */\n\tfunction invocationCountForCalldata(bytes calldata call) external returns (uint);\n\n\t/**\n\t * @dev Resets all mocked methods and invocation counts.\n\t */\n\t function reset() external;\n}\n\n/**\n * Implementation of the MockInterface.\n */\ncontract MockContract is MockInterface {\n\tenum MockType { Return, Revert, OutOfGas }\n\t\n\tbytes32 public constant MOCKS_LIST_START = hex\"01\";\n\tbytes public constant MOCKS_LIST_END = \"0xff\";\n\tbytes32 public constant MOCKS_LIST_END_HASH = keccak256(MOCKS_LIST_END);\n\tbytes4 public constant SENTINEL_ANY_MOCKS = hex\"01\";\n\n\t// A linked list allows easy iteration and inclusion checks\n\tmapping(bytes32 => bytes) calldataMocks;\n\tmapping(bytes => MockType) calldataMockTypes;\n\tmapping(bytes => bytes) calldataExpectations;\n\tmapping(bytes => string) calldataRevertMessage;\n\tmapping(bytes32 => uint) calldataInvocations;\n\n\tmapping(bytes4 => bytes4) methodIdMocks;\n\tmapping(bytes4 => MockType) methodIdMockTypes;\n\tmapping(bytes4 => bytes) methodIdExpectations;\n\tmapping(bytes4 => string) methodIdRevertMessages;\n\tmapping(bytes32 => uint) methodIdInvocations;\n\n\tMockType fallbackMockType;\n\tbytes fallbackExpectation;\n\tstring fallbackRevertMessage;\n\tuint invocations;\n\tuint resetCount;\n\n\tconstructor() public {\n\t\tcalldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\n\t\tmethodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\n\t}\n\n\tfunction trackCalldataMock(bytes memory call) private {\n\t\tbytes32 callHash = keccak256(call);\n\t\tif (calldataMocks[callHash].length == 0) {\n\t\t\tcalldataMocks[callHash] = calldataMocks[MOCKS_LIST_START];\n\t\t\tcalldataMocks[MOCKS_LIST_START] = call;\n\t\t}\n\t}\n\n\tfunction trackMethodIdMock(bytes4 methodId) private {\n\t\tif (methodIdMocks[methodId] == 0x0) {\n\t\t\tmethodIdMocks[methodId] = methodIdMocks[SENTINEL_ANY_MOCKS];\n\t\t\tmethodIdMocks[SENTINEL_ANY_MOCKS] = methodId;\n\t\t}\n\t}\n\n\tfunction _givenAnyReturn(bytes memory response) internal {\n\t\tfallbackMockType = MockType.Return;\n\t\tfallbackExpectation = response;\n\t}\n\n\tfunction givenAnyReturn(bytes calldata response) external {\n\t\t_givenAnyReturn(response);\n\t}\n\n\tfunction givenAnyReturnBool(bool response) external {\n\t\tuint flag = response ? 1 : 0;\n\t\t_givenAnyReturn(uintToBytes(flag));\n\t}\n\n\tfunction givenAnyReturnUint(uint response) external {\n\t\t_givenAnyReturn(uintToBytes(response));\t\n\t}\n\n\tfunction givenAnyReturnAddress(address response) external {\n\t\t_givenAnyReturn(uintToBytes(uint(response)));\n\t}\n\n\tfunction givenAnyRevert() external {\n\t\tfallbackMockType = MockType.Revert;\n\t\tfallbackRevertMessage = \"\";\n\t}\n\n\tfunction givenAnyRevertWithMessage(string calldata message) external {\n\t\tfallbackMockType = MockType.Revert;\n\t\tfallbackRevertMessage = message;\n\t}\n\n\tfunction givenAnyRunOutOfGas() external {\n\t\tfallbackMockType = MockType.OutOfGas;\n\t}\n\n\tfunction _givenCalldataReturn(bytes memory call, bytes memory response) private  {\n\t\tcalldataMockTypes[call] = MockType.Return;\n\t\tcalldataExpectations[call] = response;\n\t\ttrackCalldataMock(call);\n\t}\n\n\tfunction givenCalldataReturn(bytes calldata call, bytes calldata response) external  {\n\t\t_givenCalldataReturn(call, response);\n\t}\n\n\tfunction givenCalldataReturnBool(bytes calldata call, bool response) external {\n\t\tuint flag = response ? 1 : 0;\n\t\t_givenCalldataReturn(call, uintToBytes(flag));\n\t}\n\n\tfunction givenCalldataReturnUint(bytes calldata call, uint response) external {\n\t\t_givenCalldataReturn(call, uintToBytes(response));\n\t}\n\n\tfunction givenCalldataReturnAddress(bytes calldata call, address response) external {\n\t\t_givenCalldataReturn(call, uintToBytes(uint(response)));\n\t}\n\n\tfunction _givenMethodReturn(bytes memory call, bytes memory response) private {\n\t\tbytes4 method = bytesToBytes4(call);\n\t\tmethodIdMockTypes[method] = MockType.Return;\n\t\tmethodIdExpectations[method] = response;\n\t\ttrackMethodIdMock(method);\t\t\n\t}\n\n\tfunction givenMethodReturn(bytes calldata call, bytes calldata response) external {\n\t\t_givenMethodReturn(call, response);\n\t}\n\n\tfunction givenMethodReturnBool(bytes calldata call, bool response) external {\n\t\tuint flag = response ? 1 : 0;\n\t\t_givenMethodReturn(call, uintToBytes(flag));\n\t}\n\n\tfunction givenMethodReturnUint(bytes calldata call, uint response) external {\n\t\t_givenMethodReturn(call, uintToBytes(response));\n\t}\n\n\tfunction givenMethodReturnAddress(bytes calldata call, address response) external {\n\t\t_givenMethodReturn(call, uintToBytes(uint(response)));\n\t}\n\n\tfunction givenCalldataRevert(bytes calldata call) external {\n\t\tcalldataMockTypes[call] = MockType.Revert;\n\t\tcalldataRevertMessage[call] = \"\";\n\t\ttrackCalldataMock(call);\n\t}\n\n\tfunction givenMethodRevert(bytes calldata call) external {\n\t\tbytes4 method = bytesToBytes4(call);\n\t\tmethodIdMockTypes[method] = MockType.Revert;\n\t\ttrackMethodIdMock(method);\t\t\n\t}\n\n\tfunction givenCalldataRevertWithMessage(bytes calldata call, string calldata message) external {\n\t\tcalldataMockTypes[call] = MockType.Revert;\n\t\tcalldataRevertMessage[call] = message;\n\t\ttrackCalldataMock(call);\n\t}\n\n\tfunction givenMethodRevertWithMessage(bytes calldata call, string calldata message) external {\n\t\tbytes4 method = bytesToBytes4(call);\n\t\tmethodIdMockTypes[method] = MockType.Revert;\n\t\tmethodIdRevertMessages[method] = message;\n\t\ttrackMethodIdMock(method);\t\t\n\t}\n\n\tfunction givenCalldataRunOutOfGas(bytes calldata call) external {\n\t\tcalldataMockTypes[call] = MockType.OutOfGas;\n\t\ttrackCalldataMock(call);\n\t}\n\n\tfunction givenMethodRunOutOfGas(bytes calldata call) external {\n\t\tbytes4 method = bytesToBytes4(call);\n\t\tmethodIdMockTypes[method] = MockType.OutOfGas;\n\t\ttrackMethodIdMock(method);\t\n\t}\n\n\tfunction invocationCount() external returns (uint) {\n\t\treturn invocations;\n\t}\n\n\tfunction invocationCountForMethod(bytes calldata call) external returns (uint) {\n\t\tbytes4 method = bytesToBytes4(call);\n\t\treturn methodIdInvocations[keccak256(abi.encodePacked(resetCount, method))];\n\t}\n\n\tfunction invocationCountForCalldata(bytes calldata call) external returns (uint) {\n\t\treturn calldataInvocations[keccak256(abi.encodePacked(resetCount, call))];\n\t}\n\n\tfunction reset() external {\n\t\t// Reset all exact calldataMocks\n\t\tbytes memory nextMock = calldataMocks[MOCKS_LIST_START];\n\t\tbytes32 mockHash = keccak256(nextMock);\n\t\t// We cannot compary bytes\n\t\twhile(mockHash != MOCKS_LIST_END_HASH) {\n\t\t\t// Reset all mock maps\n\t\t\tcalldataMockTypes[nextMock] = MockType.Return;\n\t\t\tcalldataExpectations[nextMock] = hex\"\";\n\t\t\tcalldataRevertMessage[nextMock] = \"\";\n\t\t\t// Set next mock to remove\n\t\t\tnextMock = calldataMocks[mockHash];\n\t\t\t// Remove from linked list\n\t\t\tcalldataMocks[mockHash] = \"\";\n\t\t\t// Update mock hash\n\t\t\tmockHash = keccak256(nextMock);\n\t\t}\n\t\t// Clear list\n\t\tcalldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\n\n\t\t// Reset all any calldataMocks\n\t\tbytes4 nextAnyMock = methodIdMocks[SENTINEL_ANY_MOCKS];\n\t\twhile(nextAnyMock != SENTINEL_ANY_MOCKS) {\n\t\t\tbytes4 currentAnyMock = nextAnyMock;\n\t\t\tmethodIdMockTypes[currentAnyMock] = MockType.Return;\n\t\t\tmethodIdExpectations[currentAnyMock] = hex\"\";\n\t\t\tmethodIdRevertMessages[currentAnyMock] = \"\";\n\t\t\tnextAnyMock = methodIdMocks[currentAnyMock];\n\t\t\t// Remove from linked list\n\t\t\tmethodIdMocks[currentAnyMock] = 0x0;\n\t\t}\n\t\t// Clear list\n\t\tmethodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\n\n\t\tfallbackExpectation = \"\";\n\t\tfallbackMockType = MockType.Return;\n\t\tinvocations = 0;\n\t\tresetCount += 1;\n\t}\n\n\tfunction useAllGas() private {\n\t\twhile(true) {\n\t\t\tbool s;\n\t\t\tassembly {\n\t\t\t\t//expensive call to EC multiply contract\n\t\t\t\ts := call(sub(gas, 2000), 6, 0, 0x0, 0xc0, 0x0, 0x60)\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction bytesToBytes4(bytes memory b) private pure returns (bytes4) {\n\t\tbytes4 out;\n\t\tfor (uint i = 0; i < 4; i++) {\n\t\t\tout |= bytes4(b[i] & 0xFF) >> (i * 8);\n\t\t}\n\t\treturn out;\n\t}\n\n\tfunction uintToBytes(uint256 x) private pure returns (bytes memory b) {\n\t\tb = new bytes(32);\n\t\tassembly { mstore(add(b, 32), x) }\n\t}\n\n\tfunction updateInvocationCount(bytes4 methodId, bytes memory originalMsgData) public {\n\t\trequire(msg.sender == address(this), \"Can only be called from the contract itself\");\n\t\tinvocations += 1;\n\t\tmethodIdInvocations[keccak256(abi.encodePacked(resetCount, methodId))] += 1;\n\t\tcalldataInvocations[keccak256(abi.encodePacked(resetCount, originalMsgData))] += 1;\n\t}\n\n\tfunction() payable external {\n\t\tbytes4 methodId;\n\t\tassembly {\n\t\t\tmethodId := calldataload(0)\n\t\t}\n\n\t\t// First, check exact matching overrides\n\t\tif (calldataMockTypes[msg.data] == MockType.Revert) {\n\t\t\trevert(calldataRevertMessage[msg.data]);\n\t\t}\n\t\tif (calldataMockTypes[msg.data] == MockType.OutOfGas) {\n\t\t\tuseAllGas();\n\t\t}\n\t\tbytes memory result = calldataExpectations[msg.data];\n\n\t\t// Then check method Id overrides\n\t\tif (result.length == 0) {\n\t\t\tif (methodIdMockTypes[methodId] == MockType.Revert) {\n\t\t\t\trevert(methodIdRevertMessages[methodId]);\n\t\t\t}\n\t\t\tif (methodIdMockTypes[methodId] == MockType.OutOfGas) {\n\t\t\t\tuseAllGas();\n\t\t\t}\n\t\t\tresult = methodIdExpectations[methodId];\n\t\t}\n\n\t\t// Last, use the fallback override\n\t\tif (result.length == 0) {\n\t\t\tif (fallbackMockType == MockType.Revert) {\n\t\t\t\trevert(fallbackRevertMessage);\n\t\t\t}\n\t\t\tif (fallbackMockType == MockType.OutOfGas) {\n\t\t\t\tuseAllGas();\n\t\t\t}\n\t\t\tresult = fallbackExpectation;\n\t\t}\n\n\t\t// Record invocation as separate call so we don't rollback in case we are called with STATICCALL\n\t\t(, bytes memory r) = address(this).call.gas(100000)(abi.encodeWithSignature(\"updateInvocationCount(bytes4,bytes)\", methodId, msg.data));\n\t\tassert(r.length == 0);\n\t\t\n\t\tassembly {\n\t\t\treturn(add(0x20, result), mload(result))\n\t\t}\n\t}\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\npragma solidity ^0.5.2;\n\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n// File: contracts/interfaces/IDutchExchange.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract IDutchExchange {\n\n    mapping(address => mapping(address => mapping(uint => mapping(address => uint)))) public sellerBalances;\n    mapping(address => mapping(address => mapping(uint => mapping(address => uint)))) public buyerBalances;\n    mapping(address => mapping(address => mapping(uint => mapping(address => uint)))) public claimedAmounts;\n    mapping(address => mapping(address => uint)) public balances;\n\n    function withdraw(address tokenAddress, uint amount) public returns (uint);\n    function deposit(address tokenAddress, uint amount) public returns (uint);\n    function ethToken() public returns(address);\n    function frtToken() public returns(address);\n    function owlToken() public returns(address);\n    function getAuctionIndex(address token1, address token2) public view returns(uint256);\n    function postBuyOrder(address token1, address token2, uint256 auctionIndex, uint256 amount) public returns(uint256);\n    function postSellOrder(address token1, address token2, uint256 auctionIndex, uint256 tokensBought) public returns(uint256, uint256);\n    function getCurrentAuctionPrice(address token1, address token2, uint256 auctionIndex) public view returns(uint256, uint256);\n    function claimSellerFunds(address sellToken, address buyToken, address user, uint auctionIndex) public returns (uint returned, uint frtsIssued);\n}\n\n// File: @gnosis.pm/util-contracts/contracts/Proxy.sol\n\npragma solidity ^0.5.2;\n\n/// @title Proxied - indicates that a contract will be proxied. Also defines storage requirements for Proxy.\n/// @author Alan Lu - <[email protected]>\ncontract Proxied {\n    address public masterCopy;\n}\n\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\n/// @author Stefan George - <[email protected]>\ncontract Proxy is Proxied {\n    /// @dev Constructor function sets address of master copy contract.\n    /// @param _masterCopy Master copy address.\n    constructor(address _masterCopy) public {\n        require(_masterCopy != address(0), \"The master copy is required\");\n        masterCopy = _masterCopy;\n    }\n\n    /// @dev Fallback function forwards all transactions and returns all received return data.\n    function() external payable {\n        address _masterCopy = masterCopy;\n        assembly {\n            calldatacopy(0, 0, calldatasize)\n            let success := delegatecall(not(0), _masterCopy, 0, calldatasize, 0, 0)\n            returndatacopy(0, 0, returndatasize)\n            switch success\n                case 0 {\n                    revert(0, returndatasize)\n                }\n                default {\n                    return(0, returndatasize)\n                }\n        }\n    }\n}\n\n// File: @gnosis.pm/util-contracts/contracts/Token.sol\n\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\npragma solidity ^0.5.2;\n\n/// @title Abstract token contract - Functions to be implemented by token contracts\ncontract Token {\n    /*\n     *  Events\n     */\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    /*\n     *  Public functions\n     */\n    function transfer(address to, uint value) public returns (bool);\n    function transferFrom(address from, address to, uint value) public returns (bool);\n    function approve(address spender, uint value) public returns (bool);\n    function balanceOf(address owner) public view returns (uint);\n    function allowance(address owner, address spender) public view returns (uint);\n    function totalSupply() public view returns (uint);\n}\n\n// File: @gnosis.pm/util-contracts/contracts/Math.sol\n\npragma solidity ^0.5.2;\n\n/// @title Math library - Allows calculation of logarithmic and exponential functions\n/// @author Alan Lu - <[email protected]>\n/// @author Stefan George - <[email protected]>\nlibrary GnosisMath {\n    /*\n     *  Constants\n     */\n    // This is equal to 1 in our calculations\n    uint public constant ONE = 0x10000000000000000;\n    uint public constant LN2 = 0xb17217f7d1cf79ac;\n    uint public constant LOG2_E = 0x171547652b82fe177;\n\n    /*\n     *  Public functions\n     */\n    /// @dev Returns natural exponential function value of given x\n    /// @param x x\n    /// @return e**x\n    function exp(int x) public pure returns (uint) {\n        // revert if x is > MAX_POWER, where\n        // MAX_POWER = int(mp.floor(mp.log(mpf(2**256 - 1) / ONE) * ONE))\n        require(x <= 2454971259878909886679);\n        // return 0 if exp(x) is tiny, using\n        // MIN_POWER = int(mp.floor(mp.log(mpf(1) / ONE) * ONE))\n        if (x < -818323753292969962227) return 0;\n        // Transform so that e^x -> 2^x\n        x = x * int(ONE) / int(LN2);\n        // 2^x = 2^whole(x) * 2^frac(x)\n        //       ^^^^^^^^^^ is a bit shift\n        // so Taylor expand on z = frac(x)\n        int shift;\n        uint z;\n        if (x >= 0) {\n            shift = x / int(ONE);\n            z = uint(x % int(ONE));\n        } else {\n            shift = x / int(ONE) - 1;\n            z = ONE - uint(-x % int(ONE));\n        }\n        // 2^x = 1 + (ln 2) x + (ln 2)^2/2! x^2 + ...\n        //\n        // Can generate the z coefficients using mpmath and the following lines\n        // >>> from mpmath import mp\n        // >>> mp.dps = 100\n        // >>> ONE =  0x10000000000000000\n        // >>> print('\\n'.join(hex(int(mp.log(2)**i / mp.factorial(i) * ONE)) for i in range(1, 7)))\n        // 0xb17217f7d1cf79ab\n        // 0x3d7f7bff058b1d50\n        // 0xe35846b82505fc5\n        // 0x276556df749cee5\n        // 0x5761ff9e299cc4\n        // 0xa184897c363c3\n        uint zpow = z;\n        uint result = ONE;\n        result += 0xb17217f7d1cf79ab * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x3d7f7bff058b1d50 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0xe35846b82505fc5 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x276556df749cee5 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x5761ff9e299cc4 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0xa184897c363c3 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0xffe5fe2c4586 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x162c0223a5c8 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x1b5253d395e * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x1e4cf5158b * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x1e8cac735 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x1c3bd650 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x1816193 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x131496 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0xe1b7 * zpow / ONE;\n        zpow = zpow * z / ONE;\n        result += 0x9c7 * zpow / ONE;\n        if (shift >= 0) {\n            if (result >> (256 - shift) > 0) return (2 ** 256 - 1);\n            return result << shift;\n        } else return result >> (-shift);\n    }\n\n    /// @dev Returns natural logarithm value of given x\n    /// @param x x\n    /// @return ln(x)\n    function ln(uint x) public pure returns (int) {\n        require(x > 0);\n        // binary search for floor(log2(x))\n        int ilog2 = floorLog2(x);\n        int z;\n        if (ilog2 < 0) z = int(x << uint(-ilog2));\n        else z = int(x >> uint(ilog2));\n        // z = x * 2^-⌊log₂x⌋\n        // so 1 <= z < 2\n        // and ln z = ln x - ⌊log₂x⌋/log₂e\n        // so just compute ln z using artanh series\n        // and calculate ln x from that\n        int term = (z - int(ONE)) * int(ONE) / (z + int(ONE));\n        int halflnz = term;\n        int termpow = term * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 3;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 5;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 7;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 9;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 11;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 13;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 15;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 17;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 19;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 21;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 23;\n        termpow = termpow * term / int(ONE) * term / int(ONE);\n        halflnz += termpow / 25;\n        return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;\n    }\n\n    /// @dev Returns base 2 logarithm value of given x\n    /// @param x x\n    /// @return logarithmic value\n    function floorLog2(uint x) public pure returns (int lo) {\n        lo = -64;\n        int hi = 193;\n        // I use a shift here instead of / 2 because it floors instead of rounding towards 0\n        int mid = (hi + lo) >> 1;\n        while ((lo + 1) < hi) {\n            if (mid < 0 && x << uint(-mid) < ONE || mid >= 0 && x >> uint(mid) < ONE) hi = mid;\n            else lo = mid;\n            mid = (hi + lo) >> 1;\n        }\n    }\n\n    /// @dev Returns maximum of an array\n    /// @param nums Numbers to look through\n    /// @return Maximum number\n    function max(int[] memory nums) public pure returns (int maxNum) {\n        require(nums.length > 0);\n        maxNum = -2 ** 255;\n        for (uint i = 0; i < nums.length; i++) if (nums[i] > maxNum) maxNum = nums[i];\n    }\n\n    /// @dev Returns whether an add operation causes an overflow\n    /// @param a First addend\n    /// @param b Second addend\n    /// @return Did no overflow occur?\n    function safeToAdd(uint a, uint b) internal pure returns (bool) {\n        return a + b >= a;\n    }\n\n    /// @dev Returns whether a subtraction operation causes an underflow\n    /// @param a Minuend\n    /// @param b Subtrahend\n    /// @return Did no underflow occur?\n    function safeToSub(uint a, uint b) internal pure returns (bool) {\n        return a >= b;\n    }\n\n    /// @dev Returns whether a multiply operation causes an overflow\n    /// @param a First factor\n    /// @param b Second factor\n    /// @return Did no overflow occur?\n    function safeToMul(uint a, uint b) internal pure returns (bool) {\n        return b == 0 || a * b / b == a;\n    }\n\n    /// @dev Returns sum if no overflow occurred\n    /// @param a First addend\n    /// @param b Second addend\n    /// @return Sum\n    function add(uint a, uint b) internal pure returns (uint) {\n        require(safeToAdd(a, b));\n        return a + b;\n    }\n\n    /// @dev Returns difference if no overflow occurred\n    /// @param a Minuend\n    /// @param b Subtrahend\n    /// @return Difference\n    function sub(uint a, uint b) internal pure returns (uint) {\n        require(safeToSub(a, b));\n        return a - b;\n    }\n\n    /// @dev Returns product if no overflow occurred\n    /// @param a First factor\n    /// @param b Second factor\n    /// @return Product\n    function mul(uint a, uint b) internal pure returns (uint) {\n        require(safeToMul(a, b));\n        return a * b;\n    }\n\n    /// @dev Returns whether an add operation causes an overflow\n    /// @param a First addend\n    /// @param b Second addend\n    /// @return Did no overflow occur?\n    function safeToAdd(int a, int b) internal pure returns (bool) {\n        return (b >= 0 && a + b >= a) || (b < 0 && a + b < a);\n    }\n\n    /// @dev Returns whether a subtraction operation causes an underflow\n    /// @param a Minuend\n    /// @param b Subtrahend\n    /// @return Did no underflow occur?\n    function safeToSub(int a, int b) internal pure returns (bool) {\n        return (b >= 0 && a - b <= a) || (b < 0 && a - b > a);\n    }\n\n    /// @dev Returns whether a multiply operation causes an overflow\n    /// @param a First factor\n    /// @param b Second factor\n    /// @return Did no overflow occur?\n    function safeToMul(int a, int b) internal pure returns (bool) {\n        return (b == 0) || (a * b / b == a);\n    }\n\n    /// @dev Returns sum if no overflow occurred\n    /// @param a First addend\n    /// @param b Second addend\n    /// @return Sum\n    function add(int a, int b) internal pure returns (int) {\n        require(safeToAdd(a, b));\n        return a + b;\n    }\n\n    /// @dev Returns difference if no overflow occurred\n    /// @param a Minuend\n    /// @param b Subtrahend\n    /// @return Difference\n    function sub(int a, int b) internal pure returns (int) {\n        require(safeToSub(a, b));\n        return a - b;\n    }\n\n    /// @dev Returns product if no overflow occurred\n    /// @param a First factor\n    /// @param b Second factor\n    /// @return Product\n    function mul(int a, int b) internal pure returns (int) {\n        require(safeToMul(a, b));\n        return a * b;\n    }\n}\n\n// File: @gnosis.pm/util-contracts/contracts/GnosisStandardToken.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n/**\n * Deprecated: Use Open Zeppeling one instead\n */\ncontract StandardTokenData {\n    /*\n     *  Storage\n     */\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowances;\n    uint totalTokens;\n}\n\n/**\n * Deprecated: Use Open Zeppeling one instead\n */\n/// @title Standard token contract with overflow protection\ncontract GnosisStandardToken is Token, StandardTokenData {\n    using GnosisMath for *;\n\n    /*\n     *  Public functions\n     */\n    /// @dev Transfers sender's tokens to a given address. Returns success\n    /// @param to Address of token receiver\n    /// @param value Number of tokens to transfer\n    /// @return Was transfer successful?\n    function transfer(address to, uint value) public returns (bool) {\n        if (!balances[msg.sender].safeToSub(value) || !balances[to].safeToAdd(value)) {\n            return false;\n        }\n\n        balances[msg.sender] -= value;\n        balances[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\n    /// @param from Address from where tokens are withdrawn\n    /// @param to Address to where tokens are sent\n    /// @param value Number of tokens to transfer\n    /// @return Was transfer successful?\n    function transferFrom(address from, address to, uint value) public returns (bool) {\n        if (!balances[from].safeToSub(value) || !allowances[from][msg.sender].safeToSub(\n            value\n        ) || !balances[to].safeToAdd(value)) {\n            return false;\n        }\n        balances[from] -= value;\n        allowances[from][msg.sender] -= value;\n        balances[to] += value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    /// @dev Sets approved amount of tokens for spender. Returns success\n    /// @param spender Address of allowed account\n    /// @param value Number of approved tokens\n    /// @return Was approval successful?\n    function approve(address spender, uint value) public returns (bool) {\n        allowances[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @dev Returns number of allowed tokens for given address\n    /// @param owner Address of token owner\n    /// @param spender Address of token spender\n    /// @return Remaining allowance for spender\n    function allowance(address owner, address spender) public view returns (uint) {\n        return allowances[owner][spender];\n    }\n\n    /// @dev Returns number of tokens owned by given address\n    /// @param owner Address of token owner\n    /// @return Balance of owner\n    function balanceOf(address owner) public view returns (uint) {\n        return balances[owner];\n    }\n\n    /// @dev Returns total supply of tokens\n    /// @return Total supply\n    function totalSupply() public view returns (uint) {\n        return totalTokens;\n    }\n}\n\n// File: @gnosis.pm/dx-contracts/contracts/TokenFRT.sol\n\npragma solidity ^0.5.2;\n\n\n\n\n/// @title Standard token contract with overflow protection\ncontract TokenFRT is Proxied, GnosisStandardToken {\n    address public owner;\n\n    string public constant symbol = \"MGN\";\n    string public constant name = \"Magnolia Token\";\n    uint8 public constant decimals = 18;\n\n    struct UnlockedToken {\n        uint amountUnlocked;\n        uint withdrawalTime;\n    }\n\n    /*\n     *  Storage\n     */\n    address public minter;\n\n    // user => UnlockedToken\n    mapping(address => UnlockedToken) public unlockedTokens;\n\n    // user => amount\n    mapping(address => uint) public lockedTokenBalances;\n\n    /*\n     *  Public functions\n     */\n\n    // @dev allows to set the minter of Magnolia tokens once.\n    // @param   _minter the minter of the Magnolia tokens, should be the DX-proxy\n    function updateMinter(address _minter) public {\n        require(msg.sender == owner, \"Only the minter can set a new one\");\n        require(_minter != address(0), \"The new minter must be a valid address\");\n\n        minter = _minter;\n    }\n\n    // @dev the intention is to set the owner as the DX-proxy, once it is deployed\n    // Then only an update of the DX-proxy contract after a 30 days delay could change the minter again.\n    function updateOwner(address _owner) public {\n        require(msg.sender == owner, \"Only the owner can update the owner\");\n        require(_owner != address(0), \"The new owner must be a valid address\");\n        owner = _owner;\n    }\n\n    function mintTokens(address user, uint amount) public {\n        require(msg.sender == minter, \"Only the minter can mint tokens\");\n\n        lockedTokenBalances[user] = add(lockedTokenBalances[user], amount);\n        totalTokens = add(totalTokens, amount);\n    }\n\n    /// @dev Lock Token\n    function lockTokens(uint amount) public returns (uint totalAmountLocked) {\n        // Adjust amount by balance\n        uint actualAmount = min(amount, balances[msg.sender]);\n\n        // Update state variables\n        balances[msg.sender] = sub(balances[msg.sender], actualAmount);\n        lockedTokenBalances[msg.sender] = add(lockedTokenBalances[msg.sender], actualAmount);\n\n        // Get return variable\n        totalAmountLocked = lockedTokenBalances[msg.sender];\n    }\n\n    function unlockTokens() public returns (uint totalAmountUnlocked, uint withdrawalTime) {\n        // Adjust amount by locked balances\n        uint amount = lockedTokenBalances[msg.sender];\n\n        if (amount > 0) {\n            // Update state variables\n            lockedTokenBalances[msg.sender] = sub(lockedTokenBalances[msg.sender], amount);\n            unlockedTokens[msg.sender].amountUnlocked = add(unlockedTokens[msg.sender].amountUnlocked, amount);\n            unlockedTokens[msg.sender].withdrawalTime = now + 24 hours;\n        }\n\n        // Get return variables\n        totalAmountUnlocked = unlockedTokens[msg.sender].amountUnlocked;\n        withdrawalTime = unlockedTokens[msg.sender].withdrawalTime;\n    }\n\n    function withdrawUnlockedTokens() public {\n        require(unlockedTokens[msg.sender].withdrawalTime < now, \"The tokens cannot be withdrawn yet\");\n        balances[msg.sender] = add(balances[msg.sender], unlockedTokens[msg.sender].amountUnlocked);\n        unlockedTokens[msg.sender].amountUnlocked = 0;\n    }\n\n    function min(uint a, uint b) public pure returns (uint) {\n        if (a < b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n    \n    /// @dev Returns whether an add operation causes an overflow\n    /// @param a First addend\n    /// @param b Second addend\n    /// @return Did no overflow occur?\n    function safeToAdd(uint a, uint b) public pure returns (bool) {\n        return a + b >= a;\n    }\n\n    /// @dev Returns whether a subtraction operation causes an underflow\n    /// @param a Minuend\n    /// @param b Subtrahend\n    /// @return Did no underflow occur?\n    function safeToSub(uint a, uint b) public pure returns (bool) {\n        return a >= b;\n    }\n\n    /// @dev Returns sum if no overflow occurred\n    /// @param a First addend\n    /// @param b Second addend\n    /// @return Sum\n    function add(uint a, uint b) public pure returns (uint) {\n        require(safeToAdd(a, b), \"It must be a safe adition\");\n        return a + b;\n    }\n\n    /// @dev Returns difference if no overflow occurred\n    /// @param a Minuend\n    /// @param b Subtrahend\n    /// @return Difference\n    function sub(uint a, uint b) public pure returns (uint) {\n        require(safeToSub(a, b), \"It must be a safe substraction\");\n        return a - b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\npragma solidity ^0.5.2;\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n// File: @daostack/arc/contracts/libs/SafeERC20.sol\n\n/*\n\nSafeERC20 by daostack.\nThe code is based on a fix by SECBIT Team.\n\nUSE WITH CAUTION & NO WARRANTY\n\nREFERENCE & RELATED READING\n- https://github.com/ethereum/solidity/issues/4116\n- https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c\n- https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n- https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61\n\n*/\npragma solidity ^0.5.2;\n\n\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n    bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\n    bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\n\n    function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract());\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));\n        // call return false when something wrong\n        require(success);\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\n    }\n\n    function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract());\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));\n        // call return false when something wrong\n        require(success);\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\n    }\n\n    function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract());\n\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero.\n        require((_value == 0) || (IERC20(_erc20Addr).allowance(msg.sender, _spender) == 0));\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));\n        // call return false when something wrong\n        require(success);\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\n    }\n}\n\n// File: contracts/DxMgnPool.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\n\n\n\ncontract DxMgnPool is Ownable {\n    using SafeMath for uint;\n\n    uint constant OWL_ALLOWANCE = 10**36; \n    struct Participation {\n        uint startAuctionCount; // how many auction passed when this participation started contributing\n        uint poolShares; // number of shares this participation accounts for (absolute)\n    }\n    mapping (address => bool) public hasParticpationWithdrawn;\n    enum State {\n        Pooling,\n        PoolingEnded,\n        DepositWithdrawnFromDx,\n        MgnUnlocked\n    }\n    State public currentState = State.Pooling;\n\n    mapping (address => Participation[]) public participationsByAddress;\n    uint public totalPoolShares; // total number of shares in this pool\n    uint public totalPoolSharesCummulative; // over all auctions, the rolling sum of all shares participated\n    uint public totalDeposit;\n    uint public totalMgn;\n    uint public lastParticipatedAuctionIndex;\n    uint public auctionCount;\n    \n    ERC20 public depositToken;\n    ERC20 public secondaryToken;\n    TokenFRT public mgnToken;\n    IDutchExchange public dx;\n\n    uint public poolingPeriodEndTime;\n\n    constructor (\n        ERC20 _depositToken, \n        ERC20 _secondaryToken, \n        IDutchExchange _dx,\n        uint _poolingTimeSeconds\n    ) public Ownable()\n    {\n        depositToken = _depositToken;\n        secondaryToken = _secondaryToken;\n        dx = _dx;\n        mgnToken = TokenFRT(dx.frtToken());\n        ERC20(dx.owlToken()).approve(address(dx), OWL_ALLOWANCE);\n        poolingPeriodEndTime = now + _poolingTimeSeconds;\n    }\n\n    /**\n     * Public interface\n     */\n    function deposit(uint amount) public {\n        checkForStateUpdate();\n        require(currentState == State.Pooling, \"Pooling is already over\");\n\n        uint poolShares = calculatePoolShares(amount);\n        Participation memory participation = Participation({\n            startAuctionCount: isDepositTokenTurn() ? auctionCount : auctionCount + 1,\n            poolShares: poolShares\n            });\n        participationsByAddress[msg.sender].push(participation);\n        totalPoolShares += poolShares;\n        totalDeposit += amount;\n\n        SafeERC20.safeTransferFrom(address(depositToken), msg.sender, address(this), amount);\n    }\n\n    function withdrawDeposit() public returns(uint) {\n        require(currentState == State.DepositWithdrawnFromDx || currentState == State.MgnUnlocked, \"Funds not yet withdrawn from dx\");\n        require(!hasParticpationWithdrawn[msg.sender],\"sender has already withdrawn funds\");\n\n        uint totalDepositAmount = 0;\n        Participation[] storage participations = participationsByAddress[msg.sender];\n        uint length = participations.length;\n        for (uint i = 0; i < length; i++) {\n            totalDepositAmount += calculateClaimableDeposit(participations[i]);\n        }\n        hasParticpationWithdrawn[msg.sender] = true;\n        SafeERC20.safeTransfer(address(depositToken), msg.sender, totalDepositAmount);\n        return totalDepositAmount;\n    }\n\n    function withdrawMagnolia() public returns(uint) {\n        require(currentState == State.MgnUnlocked, \"MGN has not been unlocked, yet\");\n        require(hasParticpationWithdrawn[msg.sender], \"Withdraw deposits first\");\n        \n        uint totalMgnClaimed = 0;\n        Participation[] memory participations = participationsByAddress[msg.sender];\n        for (uint i = 0; i < participations.length; i++) {\n            totalMgnClaimed += calculateClaimableMgn(participations[i]);\n        }\n        delete participationsByAddress[msg.sender];\n        delete hasParticpationWithdrawn[msg.sender];\n        SafeERC20.safeTransfer(address(mgnToken), msg.sender, totalMgnClaimed);\n        return totalMgnClaimed;\n    }\n\n    function withdrawDepositandMagnolia() public returns(uint, uint){ \n        return (withdrawDeposit(),withdrawMagnolia());\n    }\n\n    function participateInAuction() public  onlyOwner() {\n        checkForStateUpdate();\n        require(currentState == State.Pooling, \"Pooling period is over.\");\n\n        uint auctionIndex = dx.getAuctionIndex(address(depositToken), address(secondaryToken));\n        require(auctionIndex > lastParticipatedAuctionIndex, \"Has to wait for new auction to start\");\n\n        (address sellToken, address buyToken) = sellAndBuyToken();\n        uint depositAmount = depositToken.balanceOf(address(this));\n        if (isDepositTokenTurn()) {\n            totalPoolSharesCummulative += 2 * totalPoolShares;\n            if( depositAmount > 0){\n                //depositing new tokens\n                depositToken.approve(address(dx), depositAmount);\n                dx.deposit(address(depositToken), depositAmount);\n            }\n        }\n        // Don't revert if we can't claimSellerFunds\n        address(dx).call(abi.encodeWithSignature(\"claimSellerFunds(address,address,address,uint256)\", buyToken, sellToken, address(this), lastParticipatedAuctionIndex));\n\n        uint amount = dx.balances(address(sellToken), address(this));\n        if (isDepositTokenTurn()) {\n            totalDeposit = amount;\n        }\n\n        (lastParticipatedAuctionIndex, ) = dx.postSellOrder(sellToken, buyToken, 0, amount);\n        auctionCount += 1;\n    }\n\n    function triggerMGNunlockAndClaimTokens() public {\n        checkForStateUpdate();\n        require(currentState == State.PoolingEnded, \"Pooling period is not yet over.\");\n        require(\n            dx.getAuctionIndex(address(depositToken), address(secondaryToken)) > lastParticipatedAuctionIndex, \n            \"Last auction is still running\"\n        );      \n        \n        // Don't revert if wen can't claimSellerFunds\n        address(dx).call(abi.encodeWithSignature(\"claimSellerFunds(address,address,address,uint256)\", secondaryToken, depositToken, address(this), lastParticipatedAuctionIndex));\n        mgnToken.unlockTokens();\n\n        uint amountOfFundsInDX = dx.balances(address(depositToken), address(this));\n        totalDeposit = amountOfFundsInDX + depositToken.balanceOf(address(this));\n        if(amountOfFundsInDX > 0){\n            dx.withdraw(address(depositToken), amountOfFundsInDX);\n        }\n        currentState = State.DepositWithdrawnFromDx;\n    }\n\n    function withdrawUnlockedMagnoliaFromDx() public {\n        require(currentState == State.DepositWithdrawnFromDx, \"Unlocking not yet triggered\");\n\n        // Implicitly we also have:\n        // require(unlockedTokens[msg.sender].withdrawalTime < now, \"The tokens cannot be withdrawn yet\");\n\n        mgnToken.withdrawUnlockedTokens();\n        totalMgn = mgnToken.balanceOf(address(this));\n\n        currentState = State.MgnUnlocked;\n    }\n\n    function checkForStateUpdate() public {\n        if (now >= poolingPeriodEndTime && isDepositTokenTurn() && currentState == State.Pooling) {\n            currentState = State.PoolingEnded;\n        }\n    }\n\n    /// @dev updates state and returns val\n    function updateAndGetCurrentState() public returns(State) {\n        checkForStateUpdate();\n\n        return currentState;\n    }\n\n    /**\n     * Public View Functions\n     */\n     \n    function numberOfParticipations(address addr) public view returns (uint) {\n        return participationsByAddress[addr].length;\n    }\n\n    function participationAtIndex(address addr, uint index) public view returns (uint, uint) {\n        Participation memory participation = participationsByAddress[addr][index];\n        return (participation.startAuctionCount, participation.poolShares);\n    }\n\n    function poolSharesByAddress(address userAddress) external view returns(uint[] memory) {\n        uint length = participationsByAddress[userAddress].length;        \n        uint[] memory userTotalPoolShares = new uint[](length);\n        \n        for (uint i = 0; i < length; i++) {\n            userTotalPoolShares[i] = participationsByAddress[userAddress][i].poolShares;\n        }\n\n        return userTotalPoolShares;\n    }\n\n    function sellAndBuyToken() public view returns(address sellToken, address buyToken) {\n        if (isDepositTokenTurn()) {\n            return (address(depositToken), address(secondaryToken));\n        } else {\n            return (address(secondaryToken), address(depositToken)); \n        }\n    }\n\n    function getAllClaimableMgnAndDeposits(address userAddress) external view returns(uint[] memory, uint[] memory) {\n        uint length = participationsByAddress[userAddress].length;\n\n        uint[] memory allUserClaimableMgn = new uint[](length);\n        uint[] memory allUserClaimableDeposit = new uint[](length);\n\n        for (uint i = 0; i < length; i++) {\n            allUserClaimableMgn[i] = calculateClaimableMgn(participationsByAddress[userAddress][i]);\n            allUserClaimableDeposit[i] = calculateClaimableDeposit(participationsByAddress[userAddress][i]);\n        }\n        return (allUserClaimableMgn, allUserClaimableDeposit);\n    }\n\n    /**\n     * Internal Helpers\n     */\n    \n    function calculatePoolShares(uint amount) private view returns (uint) {\n        if (totalDeposit == 0) {\n            return amount;\n        } else {\n            return totalPoolShares.mul(amount) / totalDeposit;\n        }\n    }\n    \n    function isDepositTokenTurn() private view returns (bool) {\n        return auctionCount % 2 == 0;\n    }\n\n    function calculateClaimableMgn(Participation memory participation) private view returns (uint) {\n        if (totalPoolSharesCummulative == 0) {\n            return 0;\n        }\n        uint duration = auctionCount - participation.startAuctionCount;\n        return totalMgn.mul(participation.poolShares).mul(duration) / totalPoolSharesCummulative;\n    }\n\n    function calculateClaimableDeposit(Participation memory participation) private view returns (uint) {\n        if (totalPoolShares == 0) {\n            return 0;\n        }\n        return totalDeposit.mul(participation.poolShares) / totalPoolShares;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellAndBuyToken\",\"outputs\":[{\"name\":\"sellToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"numberOfParticipations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPoolSharesCummulative\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"poolSharesByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawUnlockedMagnoliaFromDx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDepositandMagnolia\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPoolShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"participationAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAllClaimableMgnAndDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"triggerMGNunlockAndClaimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateAndGetCurrentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participationsByAddress\",\"outputs\":[{\"name\":\"startAuctionCount\",\"type\":\"uint256\"},{\"name\":\"poolShares\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mgnToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dx\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasParticpationWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawMagnolia\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolingPeriodEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkForStateUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMgn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastParticipatedAuctionIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"participateInAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondaryToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_depositToken\",\"type\":\"address\"},{\"name\":\"_secondaryToken\",\"type\":\"address\"},{\"name\":\"_dx\",\"type\":\"address\"},{\"name\":\"_poolingTimeSeconds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526002805460ff191690553480156200001b57600080fd5b506040516080806200243e833981018060405260808110156200003d57600080fd5b508051602082015160408084015160609094015160008054600160a060020a03191633178082559251949593949192600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600a8054600160a060020a03808716600160a060020a031992831617909255600b8054868416908316179055600d805485841692169190911790819055604080517f8261eb1b00000000000000000000000000000000000000000000000000000000815290519190921691638261eb1b9160048083019260209291908290030181600087803b1580156200012e57600080fd5b505af115801562000143573d6000803e3d6000fd5b505050506040513d60208110156200015a57600080fd5b5051600c8054600160a060020a031916600160a060020a03928316179055600d54604080517fcd94a2a40000000000000000000000000000000000000000000000000000000081529051919092169163cd94a2a49160048083019260209291908290030181600087803b158015620001d157600080fd5b505af1158015620001e6573d6000803e3d6000fd5b505050506040513d6020811015620001fd57600080fd5b5051600d54604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526ec097ce7bc90715b34b9f100000000060248201529051919092169163095ea7b39160448083019260209291908290030181600087803b1580156200027d57600080fd5b505af115801562000292573d6000803e3d6000fd5b505050506040513d6020811015620002a957600080fd5b50504201600e5550505061217b80620002c36000396000f3fe608060405234801561001057600080fd5b506004361061020d576000357c010000000000000000000000000000000000000000000000000000000090048063a86c31ee1161012c578063e21b7f4b116100bf578063efc7f4291161008e578063efc7f42914610557578063f2fde38b1461055f578063f4eb08db14610585578063f6153ccd1461058d5761020d565b8063e21b7f4b14610537578063e3a69f7d1461053f578063e4b4318414610547578063ea5683221461054f5761020d565b8063c89039c5116100fb578063c89039c5146104f9578063c9042b1e14610501578063d1e16d9e14610509578063d338fd2d1461052f5761020d565b8063a86c31ee146104a0578063b05b65ca146104a8578063b6b55f25146104d4578063c8353114146104f15761020d565b806357a07b53116101a4578063765a25ac11610173578063765a25ac146103995780638da5cb5b146104585780638f32d59b1461047c578063a3bf1829146104985761020d565b806357a07b531461033c5780636d0a67de1461035d578063715018a614610365578063758fef0c1461036d5761020d565b80632ad71573116101e05780632ad71573146102ac5780632efd4899146102b45780633a3a65c8146102bc5780634e35578d146103325761020d565b80630c3f6acf14610212578063117df0881461023e57806318c5ce9314610258578063290c41c514610286575b600080fd5b61021a610595565b6040518082600381111561022a57fe5b60ff16815260200191505060405180910390f35b61024661059e565b60408051918252519081900360200190f35b610260610720565b60408051600160a060020a03938416815291909216602082015281519081900390910190f35b6102466004803603602081101561029c57600080fd5b5035600160a060020a0316610764565b610246610783565b610246610789565b6102e2600480360360208110156102d257600080fd5b5035600160a060020a031661078f565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561031e578181015183820152602001610306565b505050509050019250505060405180910390f35b61033a610845565b005b6103446109da565b6040805192835260208301919091528051918290030190f35b6102466109f5565b61033a6109fb565b6103446004803603604081101561038357600080fd5b50600160a060020a038135169060200135610a65565b6103bf600480360360208110156103af57600080fd5b5035600160a060020a0316610ace565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156104035781810151838201526020016103eb565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561044257818101518382015260200161042a565b5050505090500194505050505060405180910390f35b610460610c22565b60408051600160a060020a039092168252519081900360200190f35b610484610c31565b604080519115158252519081900360200190f35b61033a610c42565b61021a611135565b610344600480360360408110156104be57600080fd5b50600160a060020a038135169060200135611149565b61033a600480360360208110156104ea57600080fd5b5035611184565b61046061129c565b6104606112ab565b6104606112ba565b6104846004803603602081101561051f57600080fd5b5035600160a060020a03166112c9565b6102466112de565b6102466114aa565b61033a6114b0565b6102466114fb565b610246611501565b61033a611507565b61033a6004803603602081101561057557600080fd5b5035600160a060020a0316611af8565b610460611b17565b610246611b26565b60025460ff1681565b60006002805460ff1660038111156105b257fe5b14806105ce5750600360025460ff1660038111156105cc57fe5b145b1515610624576040805160e560020a62461bcd02815260206004820152601f60248201527f46756e6473206e6f74207965742077697468647261776e2066726f6d20647800604482015290519081900360640190fd5b3360009081526001602052604090205460ff16156106765760405160e560020a62461bcd02815260040180806020018281038252602281526020018061212e6022913960400191505060405180910390fd5b3360009081526003602052604081208054825b818110156106e0576106d483828154811015156106a257fe5b906000526020600020906002020160408051908101604052908160008201548152602001600182015481525050611b2c565b90930192600101610689565b50336000818152600160208190526040909120805460ff19169091179055600a5461071791600160a060020a039091169085611b6b565b50909150505b90565b60008061072b611d4d565b1561074a575050600a54600b54600160a060020a039182169116610760565b5050600b54600a54600160a060020a0391821691165b9091565b600160a060020a0381166000908152600360205260409020545b919050565b60095481565b60055481565b600160a060020a03811660009081526003602090815260409182902054825181815281830281019092019092526060919082908280156107d9578160200160208202803883390190505b50905060005b8281101561083d57600160a060020a038516600090815260036020526040902080548290811061080b57fe5b906000526020600020906002020160010154828281518110151561082b57fe5b602090810290910101526001016107df565b509392505050565b6002805460ff16600381111561085757fe5b146108ac576040805160e560020a62461bcd02815260206004820152601b60248201527f556e6c6f636b696e67206e6f7420796574207472696767657265640000000000604482015290519081900360640190fd5b600c60009054906101000a9004600160a060020a0316600160a060020a031663c17ccc6c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561091857600080fd5b505af115801561092c573d6000803e3d6000fd5b5050600c54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0390921693506370a082319250602480820192602092909190829003018186803b15801561099457600080fd5b505afa1580156109a8573d6000803e3d6000fd5b505050506040513d60208110156109be57600080fd5b5051600755600280546003919060ff19166001835b0217905550565b6000806109e561059e565b6109ed6112de565b915091509091565b60045481565b610a03610c31565b1515610a0e57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600080610a7061208d565b600160a060020a0385166000908152600360205260409020805485908110610a9457fe5b6000918252602091829020604080518082019091526002909202018054808352600190910154919092018190529093509150509250929050565b600160a060020a038116600090815260036020908152604091829020548251818152818302810190920190925260609182918290828015610b19578160200160208202803883390190505b509050606082604051908082528060200260200182016040528015610b48578160200160208202803883390190505b50905060005b83811015610c1657600160a060020a03871660009081526003602052604090208054610bb1919083908110610b7f57fe5b906000526020600020906002020160408051908101604052908160008201548152602001600182015481525050611d57565b8382815181101515610bbf57fe5b6020908102909101810191909152600160a060020a03881660009081526003909152604090208054610bf69190839081106106a257fe5b8282815181101515610c0457fe5b60209081029091010152600101610b4e565b50909350915050915091565b600054600160a060020a031690565b600054600160a060020a0316331490565b610c4a6114b0565b600160025460ff166003811115610c5d57fe5b14610cb2576040805160e560020a62461bcd02815260206004820152601f60248201527f506f6f6c696e6720706572696f64206973206e6f7420796574206f7665722e00604482015290519081900360640190fd5b600854600d54600a54600b54604080517f14584a9d000000000000000000000000000000000000000000000000000000008152600160a060020a03938416600482015291831660248301525191909216916314584a9d916044808301926020929190829003018186803b158015610d2857600080fd5b505afa158015610d3c573d6000803e3d6000fd5b505050506040513d6020811015610d5257600080fd5b505111610da9576040805160e560020a62461bcd02815260206004820152601d60248201527f4c6173742061756374696f6e206973207374696c6c2072756e6e696e67000000604482015290519081900360640190fd5b600d54600b54600a5460085460408051600160a060020a03948516602482015292841660448401523060648401526084808401929092528051808403909201825260a49092018252602081018051600160e060020a03167f65054e55000000000000000000000000000000000000000000000000000000001781529151815193909416939092909182918083835b60208310610e565780518252601f199092019160209182019101610e37565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610eb8576040519150601f19603f3d011682016040523d82523d6000602084013e610ebd565b606091505b5050600c54604080517ff968f4930000000000000000000000000000000000000000000000000000000081528151600160a060020a03909316935063f968f49392600480830193928290030181600087803b158015610f1b57600080fd5b505af1158015610f2f573d6000803e3d6000fd5b505050506040513d6040811015610f4557600080fd5b5050600d54600a54604080517fc23f001f000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201523060248201529051600093929092169163c23f001f91604480820192602092909190829003018186803b158015610fba57600080fd5b505afa158015610fce573d6000803e3d6000fd5b505050506040513d6020811015610fe457600080fd5b5051600a54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051929350600160a060020a03909116916370a0823191602480820192602092909190829003018186803b15801561104d57600080fd5b505afa158015611061573d6000803e3d6000fd5b505050506040513d602081101561107757600080fd5b50518101600655600081111561112657600d54600a54604080517ff3fef3a3000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018590529051919092169163f3fef3a39160448083019260209291908290030181600087803b1580156110f957600080fd5b505af115801561110d573d6000803e3d6000fd5b505050506040513d602081101561112357600080fd5b50505b506002805460ff191681179055565b600061113f6114b0565b5060025460ff1690565b60036020528160005260406000208181548110151561116457fe5b600091825260209091206002909102018054600190910154909250905082565b61118c6114b0565b600060025460ff16600381111561119f57fe5b146111f4576040805160e560020a62461bcd02815260206004820152601760248201527f506f6f6c696e6720697320616c7265616479206f766572000000000000000000604482015290519081900360640190fd5b60006111ff82611db6565b905061120961208d565b604080519081016040528061121c611d4d565b61122b5760095460010161122f565b6009545b8152602090810184905233600081815260038352604081208054600181810183559183529184902085516002909302019182559284015192019190915560048054850190556006805486019055600a5491925061129791600160a060020a0316903086611df1565b505050565b600c54600160a060020a031681565b600a54600160a060020a031681565b600d54600160a060020a031681565b60016020526000908152604090205460ff1681565b6000600360025460ff1660038111156112f357fe5b14611348576040805160e560020a62461bcd02815260206004820152601e60248201527f4d474e20686173206e6f74206265656e20756e6c6f636b65642c207965740000604482015290519081900360640190fd5b3360009081526001602052604090205460ff1615156113b1576040805160e560020a62461bcd02815260206004820152601760248201527f5769746864726177206465706f73697473206669727374000000000000000000604482015290519081900360640190fd5b3360009081526003602090815260408083208054825181850281018501909352808352606093859084015b8282101561141b5760008481526020908190206040805180820190915260028502909101805482526001908101548284015290835290920191016113dc565b509293506000925050505b815181101561145b5761144f828281518110151561144057fe5b90602001906020020151611d57565b90920191600101611426565b50336000908152600360205260408120611474916120a4565b336000818152600160205260409020805460ff19169055600c546114a491600160a060020a039091169084611b6b565b50905090565b600e5481565b600e5442101580156114c557506114c5611d4d565b80156114e15750600060025460ff1660038111156114df57fe5b145b156114f957600280546001919060ff191682806109d3565b565b60075481565b60085481565b61150f610c31565b151561151a57600080fd5b6115226114b0565b600060025460ff16600381111561153557fe5b1461158a576040805160e560020a62461bcd02815260206004820152601760248201527f506f6f6c696e6720706572696f64206973206f7665722e000000000000000000604482015290519081900360640190fd5b600d54600a54600b54604080517f14584a9d000000000000000000000000000000000000000000000000000000008152600160a060020a03938416600482015291831660248301525160009392909216916314584a9d91604480820192602092909190829003018186803b15801561160157600080fd5b505afa158015611615573d6000803e3d6000fd5b505050506040513d602081101561162b57600080fd5b505160085490915081116116735760405160e560020a62461bcd02815260040180806020018281038252602481526020018061210a6024913960400191505060405180910390fd5b60008061167e610720565b600a54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051939550919350600092600160a060020a03909116916370a08231916024808301926020929190829003018186803b1580156116ea57600080fd5b505afa1580156116fe573d6000803e3d6000fd5b505050506040513d602081101561171457600080fd5b50519050611720611d4d565b1561187c576004546005805460029092029091019055600081111561187c57600a54600d54604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018590529051919092169163095ea7b39160448083019260209291908290030181600087803b1580156117b157600080fd5b505af11580156117c5573d6000803e3d6000fd5b505050506040513d60208110156117db57600080fd5b5050600d54600a54604080517f47e7ef24000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015260248101859052905191909216916347e7ef249160448083019260209291908290030181600087803b15801561184f57600080fd5b505af1158015611863573d6000803e3d6000fd5b505050506040513d602081101561187957600080fd5b50505b600d5460085460408051600160a060020a03868116602483015287811660448301523060648301526084808301949094528251808303909401845260a49091018252602083018051600160e060020a03167f65054e55000000000000000000000000000000000000000000000000000000001781529151835191909416939182918083835b602083106119205780518252601f199092019160209182019101611901565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611982576040519150601f19603f3d011682016040523d82523d6000602084013e611987565b606091505b5050600d54604080517fc23f001f000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152306024830152915160009450919092169163c23f001f916044808301926020929190829003018186803b1580156119f957600080fd5b505afa158015611a0d573d6000803e3d6000fd5b505050506040513d6020811015611a2357600080fd5b50519050611a2f611d4d565b15611a3a5760068190555b600d54604080517f59f96ae5000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152868116602483015260006044830181905260648301869052835191909416936359f96ae593608480850194919392918390030190829087803b158015611ab957600080fd5b505af1158015611acd573d6000803e3d6000fd5b505050506040513d6040811015611ae357600080fd5b50516008555050600980546001019055505050565b611b00610c31565b1515611b0b57600080fd5b611b1481611fd4565b50565b600b54600160a060020a031681565b60065481565b600060045460001415611b415750600061077e565b6004546020830151600654611b5b9163ffffffff61205116565b811515611b6457fe5b0492915050565b611b7d83600160a060020a0316612085565b1515611b8857600080fd5b604080518082018252601981527f7472616e7366657228616464726573732c75696e7432353629000000000000006020918201528151600160a060020a038581166024830152604480830186905284518084039091018152606490920184529181018051600160e060020a03167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310611c4e5780518252601f199092019160209182019101611c2f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611cb0576040519150601f19603f3d011682016040523d82523d6000602084013e611cb5565b606091505b5091509150811515611cc657600080fd5b80511580611d3b575080516020148015611d3b575080601f815181101515611cea57fe5b6020910101517f010000000000000000000000000000000000000000000000000000000000000090819004027fff000000000000000000000000000000000000000000000000000000000000001615155b1515611d4657600080fd5b5050505050565b6009546001161590565b600060055460001415611d6c5750600061077e565b60008260000151600954039050600554611da582611d99866020015160075461205190919063ffffffff16565b9063ffffffff61205116565b811515611dae57fe5b049392505050565b600060065460001415611dca57508061077e565b600654600454611de0908463ffffffff61205116565b811515611de957fe5b04905061077e565b611e0384600160a060020a0316612085565b1515611e0e57600080fd5b6000606085600160a060020a0316606060405190810160405280602581526020016120e560259139805160209182012060408051600160a060020a03808b16602483015289166044820152606480820189905282518083039091018152608490910182529283018051600160e060020a03167fffffffff00000000000000000000000000000000000000000000000000000000909316929092178252518251909182918083835b60208310611ed45780518252601f199092019160209182019101611eb5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611f36576040519150601f19603f3d011682016040523d82523d6000602084013e611f3b565b606091505b5091509150811515611f4c57600080fd5b80511580611fc1575080516020148015611fc1575080601f815181101515611f7057fe5b6020910101517f010000000000000000000000000000000000000000000000000000000000000090819004027fff000000000000000000000000000000000000000000000000000000000000001615155b1515611fcc57600080fd5b505050505050565b600160a060020a0381161515611fe957600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008215156120625750600061207f565b82820282848281151561207157fe5b041461207c57600080fd5b90505b92915050565b6000903b1190565b604080518082019091526000808252602082015290565b5080546000825560020290600052602060002090810190611b14919061071d91905b808211156120e057600080825560018201556002016120c6565b509056fe7472616e7366657246726f6d28616464726573732c616464726573732c75696e743235362948617320746f207761697420666f72206e65772061756374696f6e20746f20737461727473656e6465722068617320616c72656164792077697468647261776e2066756e6473a165627a7a72305820e48855a458dee5121f92d56e848f7b830c460ee51d9e76f6b67ae7e90c38c3520029000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006810e776880c02933d47db1b9fc05908e5386b96000000000000000000000000b9812e2fa995ec53b5b6df34d21f9304762c549700000000000000000000000000000000000000000000000000000000000000ef",
  "constructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006810e776880c02933d47db1b9fc05908e5386b96000000000000000000000000b9812e2fa995ec53b5b6df34d21f9304762c549700000000000000000000000000000000000000000000000000000000000000ef"
}