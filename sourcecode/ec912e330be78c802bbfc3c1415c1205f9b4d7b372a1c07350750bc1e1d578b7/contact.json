{
  "address": "0x7402c0574d7bb1230d0d0cf6ee50baa1f98af762",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ValidationNodeLock",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-16\n*/\n\npragma solidity ^0.4.24;\n\ncontract VerityToken {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract ValidationNodeLock {\n  address public owner;\n  address public tokenAddress;\n  bool public allFundsCanBeUnlocked = false;\n  uint public lastLockingTime;\n  // 30_000 evt tokens minimal investment\n  uint public nodePrice = 30000 * 10**18;\n\n  uint public lockedUntil;\n  mapping(address => mapping(string => uint)) lockingData;\n\n  event Withdrawn(address indexed withdrawer, uint indexed withdrawnAmount);\n  event FundsLocked(\n    address indexed user,\n    uint indexed lockedAmount,\n    uint indexed validationNodes\n  );\n  event AllFundsCanBeUnlocked(\n    uint indexed triggeredTimestamp,\n    bool indexed canAllFundsBeUnlocked\n  );\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier lastLockingTimeIsInTheFuture(uint _lastLockingTime) {\n    require(now < _lastLockingTime);\n    _;\n  }\n\n  modifier onlyOnceLockingPeriodIsOver() {\n    require(now >= lockedUntil || allFundsCanBeUnlocked);\n    _;\n  }\n\n  modifier checkUsersTokenBalance(uint _fundsToTransfer) {\n    require(\n      _fundsToTransfer <= VerityToken(tokenAddress).balanceOf(msg.sender)\n    );\n    _;\n  }\n\n  modifier checkValidLockingTime() {\n    require(now <= lastLockingTime);\n    _;\n  }\n\n  modifier checkValidLockingArguments(uint _tokens, uint _nodes) {\n    require(_tokens >= nodePrice && _nodes >= 1);\n    _;\n  }\n\n  modifier checkValidLockingAmount(uint _tokens, uint _nodes) {\n    require(_tokens == (_nodes * nodePrice));\n    _;\n  }\n\n  modifier lockedUntilIsInTheFuture(uint _lockedUntil) {\n    require(now < _lockedUntil);\n    _;\n  }\n\n  modifier lastLockingTimeIsBeforeLockedUntil(\n    uint _lastLockingTime,\n    uint _lockedUntil\n  )\n  {\n    require(_lastLockingTime < _lockedUntil);\n    _;\n  }\n\n  modifier checkLockIsNotTerminated() {\n    require(allFundsCanBeUnlocked == false);\n    _;\n  }\n\n  constructor(address _tokenAddress, uint _lastLockingTime, uint _lockedUntil)\n    public\n    lastLockingTimeIsInTheFuture(_lastLockingTime)\n    lockedUntilIsInTheFuture(_lockedUntil)\n    lastLockingTimeIsBeforeLockedUntil(_lastLockingTime, _lockedUntil)\n  {\n    owner = msg.sender;\n    tokenAddress = _tokenAddress;\n    lastLockingTime = _lastLockingTime;\n    lockedUntil = _lockedUntil;\n  }\n\n  function lockFunds(uint _tokens, uint _nodes)\n    public\n    checkValidLockingTime()\n    checkLockIsNotTerminated()\n    checkUsersTokenBalance(_tokens)\n    checkValidLockingArguments(_tokens, _nodes)\n    checkValidLockingAmount(_tokens, _nodes)\n  {\n    require(\n      VerityToken(tokenAddress).transferFrom(msg.sender, address(this), _tokens)\n    );\n\n    lockingData[msg.sender][\"amount\"] += _tokens;\n    lockingData[msg.sender][\"nodes\"] += _nodes;\n\n    emit FundsLocked(\n      msg.sender,\n      _tokens,\n      _nodes\n    );\n  }\n\n  function withdrawFunds()\n    public\n    onlyOnceLockingPeriodIsOver()\n  {\n    uint amountToBeTransferred = lockingData[msg.sender][\"amount\"];\n    lockingData[msg.sender][\"amount\"] = 0;\n    VerityToken(tokenAddress).transfer(msg.sender, amountToBeTransferred);\n\n    emit Withdrawn(\n      msg.sender,\n      amountToBeTransferred\n    );\n  }\n\n  function terminateTokenLock() public onlyOwner() {\n    allFundsCanBeUnlocked = true;\n\n    emit AllFundsCanBeUnlocked(\n      now,\n      allFundsCanBeUnlocked\n    );\n  }\n\n  function getUserData(address _user) public view returns (uint[2]) {\n    return [lockingData[_user][\"amount\"], lockingData[_user][\"nodes\"]];\n  }\n}",
  "bytecode": "60806040526001805460a060020a60ff021916905569065a4da25d3016c0000060035534801561002e57600080fd5b506040516060806108748339810160409081528151602083015191909201518142811161005a57600080fd5b8142811161006757600080fd5b838380821061007557600080fd5b505060008054600160a060020a0319908116331790915560018054600160a060020a0397909716969091169590951790945550600291909155600455506107b3806100c16000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166324600fc381146100a85780633287db4b146100bf5780635ed31991146100da5780638da5cb5b146101015780639d76ea5814610132578063ae6e11dc14610147578063ce0617ec1461015c578063ce8bcae314610171578063f1fec2b81461019a578063ffc9896b146101af575b600080fd5b3480156100b457600080fd5b506100bd61020b565b005b3480156100cb57600080fd5b506100bd600435602435610371565b3480156100e657600080fd5b506100ef6105e7565b60408051918252519081900360200190f35b34801561010d57600080fd5b506101166105ed565b60408051600160a060020a039092168252519081900360200190f35b34801561013e57600080fd5b506101166105fc565b34801561015357600080fd5b506100bd61060b565b34801561016857600080fd5b506100ef610690565b34801561017d57600080fd5b50610186610696565b604080519115158252519081900360200190f35b3480156101a657600080fd5b506100ef6106b7565b3480156101bb57600080fd5b506101d0600160a060020a03600435166106bd565b6040518082600260200280838360005b838110156101f85781810151838201526020016101e0565b5050505090500191505060405180910390f35b600060045442101580610238575060015474010000000000000000000000000000000000000000900460ff165b151561024357600080fd5b5033600081815260056020818152604080842081517f616d6f756e7400000000000000000000000000000000000000000000000000008082526006808301849052845160269381900384018120548a8a529787529182528101929092528251918290030181208590556001547fa9059cbb00000000000000000000000000000000000000000000000000000000825260048201969096526024810184905290519294600160a060020a03169363a9059cbb93604480840194939192918390030190829087803b15801561031557600080fd5b505af1158015610329573d6000803e3d6000fd5b505050506040513d602081101561033f57600080fd5b5050604051819033907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d590600090a350565b60025442111561038057600080fd5b60015474010000000000000000000000000000000000000000900460ff16156103a857600080fd5b600154604080517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290518492600160a060020a0316916370a082319160248083019260209291908290030181600087803b15801561040d57600080fd5b505af1158015610421573d6000803e3d6000fd5b505050506040513d602081101561043757600080fd5b505181111561044557600080fd5b8282600354821015801561045a575060018110155b151561046557600080fd5b848460035481028214151561047957600080fd5b600154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a90529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b1580156104ec57600080fd5b505af1158015610500573d6000803e3d6000fd5b505050506040513d602081101561051657600080fd5b5051151561052357600080fd5b33600081815260056020818152604080842081517f616d6f756e740000000000000000000000000000000000000000000000000000815260068101829052825190819003602601812080548f019055868652928490527f6e6f646573000000000000000000000000000000000000000000000000000000835292820192909252905190819003602501812080548a01905588928a9290917fe52cdcd45f0913116ea4f3de9bab0401ca2bbb5593445d1f6736170f57db75e89190a450505050505050565b60025481565b600054600160a060020a031681565b600154600160a060020a031681565b600054600160a060020a0316331461062257600080fd5b6001805474ff000000000000000000000000000000000000000019167401000000000000000000000000000000000000000090811791829055604051910460ff1615159042907fd1eeab1523249f14ee921a491896d8490e792d5525fc07e4bc05348b4a09cd9f90600090a3565b60045481565b60015474010000000000000000000000000000000000000000900460ff1681565b60035481565b6106c561076c565b5060408051808201808352600160a060020a0384166000818152600560208181528683207f616d6f756e74000000000000000000000000000000000000000000000000000090955260468601859052865180870360660190205486529290915280825284517f6e6f64657300000000000000000000000000000000000000000000000000000081529081019290925292519081900360250190205491810191909152919050565b604080518082018252906002908290803883395091929150505600a165627a7a72305820282a0fa7ca9fbbc5666af72cc8c04419695721519547bba0374b9ddd274821e400290000000000000000000000007ba8a5d59b21390a70b2ba968a183712e12a049c000000000000000000000000000000000000000000000000000000005b892dc0000000000000000000000000000000000000000000000000000000005c14ecc0",
  "constructorArguments": "0000000000000000000000007ba8a5d59b21390a70b2ba968a183712e12a049c000000000000000000000000000000000000000000000000000000005b892dc0000000000000000000000000000000000000000000000000000000005c14ecc0"
}