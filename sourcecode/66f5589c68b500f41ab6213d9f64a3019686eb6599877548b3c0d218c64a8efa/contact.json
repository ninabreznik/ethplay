{
  "address": "0x129acbb3ad1a3ad13fec0fc7ca26811a487e14c9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.4.19-nightly.2017.10.29+commit.eb140bc6",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-07\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0 uint256 c = a / b;\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract token { function transfer(address receiver, uint amount){  } }\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // uint256 durationInMinutes;\n  // address where funds are collected\n  address public wallet;\n  // token address\n  address public addressOfTokenUsedAsReward;\n\n  uint256 public price = 40;\n\n  token tokenReward;\n\n  // mapping (address => uint) public contributions;\n  \n\n\n  // start and end timestamps where investments are allowed (both inclusive)\n  // uint256 public startTime;\n  // uint256 public endTime;\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  function Crowdsale() {\n    //You will change this to your wallet where you need the ETH \n    wallet = 0xDFD46b7e8aF013250A79c15d433d59CFA8829b42;\n    // durationInMinutes = _durationInMinutes;\n    //Here will come the checksum address we got\n    addressOfTokenUsedAsReward = 0x1a7b00404b755FF80126f1D66a90f5aEDdEd25da;\n\n\n    tokenReward = token(addressOfTokenUsedAsReward);\n  }\n\n  bool public started = false;\n\n  function startSale(){\n    if (msg.sender != wallet) throw;\n    started = true;\n  }\n\n  function stopSale(){\n    if(msg.sender != wallet) throw;\n    started = false;\n  }\n\n  function setPrice(uint256 _price){\n    if(msg.sender != wallet) throw;\n    price = _price;\n  }\n  function changeWallet(address _wallet){\n  \tif(msg.sender != wallet) throw;\n  \twallet = _wallet;\n  }\n\n  // fallback function can be used to buy tokens\n  function () payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) payable {\n    require(beneficiary != 0x0);\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be sent\n    uint256 tokens = (weiAmount) * price;//weiamount * price \n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n    \n    // if(contributions[msg.sender].add(weiAmount)>10*10**18) throw;\n    // contributions[msg.sender] = contributions[msg.sender].add(weiAmount);\n\n    tokenReward.transfer(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n    forwardFunds();\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    // wallet.transfer(msg.value);\n    if (!wallet.send(msg.value)) {\n      throw;\n    }\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal constant returns (bool) {\n    bool withinPeriod = started;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n  function withdrawTokens(uint256 _amount) {\n    if(msg.sender!=wallet) throw;\n    tokenReward.transfer(wallet,_amount);\n  }\n}",
  "bytecode": "606060405260286002556000600560006101000a81548160ff021916908315150217905550341561002f57600080fd5b73dfd46b7e8af013250a79c15d433d59cfa8829b426000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550731a7b00404b755ff80126f1d66a90f5aedded25da600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108fd8061014a6000396000f3006060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631f2698ab146100ba578063315a095d146100e75780634042b66f1461010a578063521eb2731461013357806388adbf8f1461018857806391b7f5ed146101dd57806398b9a2dc14610200578063a035b1fe14610239578063b66a0e5d14610262578063e36b0b3714610277578063ec8ac4d81461028c575b6100b8336102ba565b005b34156100c557600080fd5b6100cd61046d565b604051808215151515815260200191505060405180910390f35b34156100f257600080fd5b6101086004808035906020019091905050610480565b005b341561011557600080fd5b61011d6105d7565b6040518082815260200191505060405180910390f35b341561013e57600080fd5b6101466105dd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561019357600080fd5b61019b610602565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101e857600080fd5b6101fe6004808035906020019091905050610628565b005b341561020b57600080fd5b610237600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061068d565b005b341561024457600080fd5b61024c61072b565b6040518082815260200191505060405180910390f35b341561026d57600080fd5b610275610731565b005b341561028257600080fd5b61028a6107a9565b005b6102b8600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506102ba565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff16141515156102e357600080fd5b6102eb610821565b15156102f657600080fd5b349150600254820290506103158260045461085090919063ffffffff16565b600481905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15156103df57600080fd5b6102c65a03f115156103f057600080fd5b5050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a361046861086e565b505050565b600560009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104db57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15156105c057600080fd5b6102c65a03f115156105d157600080fd5b50505050565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561068357600080fd5b8060028190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106e857600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561078c57600080fd5b6001600560006101000a81548160ff021916908315150217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561080457600080fd5b6000600560006101000a81548160ff021916908315150217905550565b6000806000600560009054906101000a900460ff169150600034141590508180156108495750805b9250505090565b600080828401905083811015151561086457fe5b8091505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015156108cf57600080fd5b5600a165627a7a723058209b1288e4d6cdc674b19d6086d8152317bc80a851e7f06fe6d470b33d587d1c7c0029"
}