{
  "address": "0x5be910aa14ced96aa74303ef114e5a46b0746041",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BITBUS",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.5.0;\n\n\nimport \"./SafeMath.sol\";\n\n\n\ncontract BITBUS {\n\n    using SafeMath for uint;\n\n    address private BTB1;\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint _totalSupply;\n\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n    constructor() public {\n\n        symbol = \"BTB\";\n        name = \"BITBUS\";\n        decimals = 18;\n        BTB1 = msg.sender;\n        _totalSupply = 10000000 * 10**uint(decimals);\n        _balances[BTB1] = _totalSupply;\n        emit Transfer(address(0), BTB1, _totalSupply);\n\n    }\n\n\n    function totalSupply() public view returns (uint) {\n        return _totalSupply;\n\n    }\n\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n\n    function increaseAllowance(address spender, uint256 addValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addValue));\n        return true;\n    }\n\n\n    function decreaseAllowance(address spender, uint256 subValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subValue));\n        return true;\n    }\n\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(msg.sender != spender);\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowances[from][msg.sender].sub(value));\n        return true;\n    }\n\n\n    function () external payable {\n    }\n    \n\n    function ClaimEther(uint256 amount) public{\n\t\trequire(msg.sender == BTB1);\n\t\tmsg.sender.transfer(amount);\n\t}\n\t\n    function _transfer(address from, address to, uint256 value) internal {\n        require(from != address(0));\n        require(to != address(0));\n        require(to != address(this));\n        require(value != 0);\n        _balances[to] = _balances[to].add(value);\n        _balances[from] = _balances[from].sub(value);\n        emit Transfer(from, to, value);\n    }\n\n\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0));\n        require(spender != address(0));\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506040805180820190915260038082527f425442000000000000000000000000000000000000000000000000000000000060209092019182526100559160019161012a565b506040805180820190915260068082527f4249544255530000000000000000000000000000000000000000000000000000602090920191825261009a9160029161012a565b506003805460ff19166012179081905560008054600160a060020a03191633178082556298968060ff93909316600a0a929092026004819055600160a060020a0392831682526005602090815260408084208390558354815193845290519416937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36101c5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016b57805160ff1916838001178555610198565b82800160010185558215610198579182015b8281111561019857825182559160200191906001019061017d565b506101a49291506101a8565b5090565b6101c291905b808211156101a457600081556001016101ae565b90565b6108b5806101d46000396000f3fe6080604052600436106100b3577c0100000000000000000000000000000000000000000000000000000000600035046306fdde0381146100b5578063095ea7b31461013f57806318160ddd1461018c57806323b872dd146101b3578063313ce567146101f6578063395093511461022157806370a082311461025a57806395d89b411461028d578063a457c2d7146102a2578063a9059cbb146102db578063d1b5bea714610314578063dd62ed3e1461033e575b005b3480156100c157600080fd5b506100ca610379565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101045781810151838201526020016100ec565b50505050905090810190601f1680156101315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014b57600080fd5b506101786004803603604081101561016257600080fd5b50600160a060020a038135169060200135610404565b604080519115158252519081900360200190f35b34801561019857600080fd5b506101a1610430565b60408051918252519081900360200190f35b3480156101bf57600080fd5b50610178600480360360608110156101d657600080fd5b50600160a060020a03813581169160208101359091169060400135610436565b34801561020257600080fd5b5061020b61048d565b6040805160ff9092168252519081900360200190f35b34801561022d57600080fd5b506101786004803603604081101561024457600080fd5b50600160a060020a038135169060200135610496565b34801561026657600080fd5b506101a16004803603602081101561027d57600080fd5b5035600160a060020a03166104d2565b34801561029957600080fd5b506100ca6104ed565b3480156102ae57600080fd5b50610178600480360360408110156102c557600080fd5b50600160a060020a038135169060200135610547565b3480156102e757600080fd5b50610178600480360360408110156102fe57600080fd5b50600160a060020a038135169060200135610583565b34801561032057600080fd5b506100b36004803603602081101561033757600080fd5b5035610590565b34801561034a57600080fd5b506101a16004803603604081101561036157600080fd5b50600160a060020a03813581169160200135166105d8565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103fc5780601f106103d1576101008083540402835291602001916103fc565b820191906000526020600020905b8154815290600101906020018083116103df57829003601f168201915b505050505081565b600033600160a060020a038416141561041c57600080fd5b610427338484610603565b50600192915050565b60045490565b600061044384848461068f565b600160a060020a03841660009081526006602090815260408083203380855292529091205461048391869161047e908663ffffffff61079716565b610603565b5060019392505050565b60035460ff1681565b336000818152600660209081526040808320600160a060020a0387168452909152812054909161042791859061047e908663ffffffff61080e16565b600160a060020a031660009081526005602052604090205490565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103fc5780601f106103d1576101008083540402835291602001916103fc565b336000818152600660209081526040808320600160a060020a0387168452909152812054909161042791859061047e908663ffffffff61079716565b600061042733848461068f565b600054600160a060020a031633146105a757600080fd5b604051339082156108fc029083906000818181858888f193505050501580156105d4573d6000803e3d6000fd5b5050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b600160a060020a038316151561061857600080fd5b600160a060020a038216151561062d57600080fd5b600160a060020a03808416600081815260066020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a03831615156106a457600080fd5b600160a060020a03821615156106b957600080fd5b600160a060020a0382163014156106cf57600080fd5b8015156106db57600080fd5b600160a060020a038216600090815260056020526040902054610704908263ffffffff61080e16565b600160a060020a038084166000908152600560205260408082209390935590851681522054610739908263ffffffff61079716565b600160a060020a0380851660008181526005602090815260409182902094909455805185815290519286169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3505050565b60008282111561080857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008282018381101561088257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fea165627a7a72305820b9f84dce6cedb6a82312f46aa502e2007a4fad5c8f825b45c7b5404b41aa0f330029"
}