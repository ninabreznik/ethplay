{
  "address": "0xc302cedd1be4fd7053147b9e298077d9392f7584",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bob",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-27\n*/\n\npragma solidity ^0.4.18;\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\npragma solidity ^0.4.18;\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ncontract Bob {\n  using SafeMath for uint;\n\n  enum DepositState {\n    Uninitialized,\n    BobMadeDeposit,\n    AliceClaimedDeposit,\n    BobClaimedDeposit\n  }\n\n  enum PaymentState {\n    Uninitialized,\n    BobMadePayment,\n    AliceClaimedPayment,\n    BobClaimedPayment\n  }\n\n  struct BobDeposit {\n    bytes20 depositHash;\n    uint64 lockTime;\n    DepositState state;\n  }\n\n  struct BobPayment {\n    bytes20 paymentHash;\n    uint64 lockTime;\n    PaymentState state;\n  }\n\n  mapping (bytes32 => BobDeposit) public deposits;\n\n  mapping (bytes32 => BobPayment) public payments;\n\n  function Bob() public {\n  }\n\n  function bobMakesEthDeposit(\n    bytes32 _txId,\n    address _alice,\n    bytes20 _secretHash,\n    uint64 _lockTime\n  ) external payable {\n    require(_alice != 0x0 && msg.value > 0 && deposits[_txId].state == DepositState.Uninitialized);\n    bytes20 depositHash = ripemd160(\n      _alice,\n      msg.sender,\n      _secretHash,\n      address(0),\n      msg.value\n    );\n    deposits[_txId] = BobDeposit(\n      depositHash,\n      _lockTime,\n      DepositState.BobMadeDeposit\n    );\n  }\n\n  function bobMakesErc20Deposit(\n    bytes32 _txId,\n    uint256 _amount,\n    address _alice,\n    bytes20 _secretHash,\n    address _tokenAddress,\n    uint64 _lockTime\n  ) external {\n    bytes20 depositHash = ripemd160(\n      _alice,\n      msg.sender,\n      _secretHash,\n      _tokenAddress,\n      _amount\n    );\n    deposits[_txId] = BobDeposit(\n      depositHash,\n      _lockTime,\n      DepositState.BobMadeDeposit\n    );\n    ERC20 token = ERC20(_tokenAddress);\n    assert(token.transferFrom(msg.sender, address(this), _amount));\n  }\n\n  function bobClaimsDeposit(\n    bytes32 _txId,\n    uint256 _amount,\n    bytes32 _secret,\n    address _alice,\n    address _tokenAddress\n  ) external {\n    require(deposits[_txId].state == DepositState.BobMadeDeposit);\n    bytes20 depositHash = ripemd160(\n      _alice,\n      msg.sender,\n      ripemd160(sha256(_secret)),\n      _tokenAddress,\n      _amount\n    );\n    require(depositHash == deposits[_txId].depositHash && now < deposits[_txId].lockTime);\n    deposits[_txId].state = DepositState.BobClaimedDeposit;\n    if (_tokenAddress == 0x0) {\n      msg.sender.transfer(_amount);\n    } else {\n      ERC20 token = ERC20(_tokenAddress);\n      assert(token.transfer(msg.sender, _amount));\n    }\n  }\n\n  function aliceClaimsDeposit(\n    bytes32 _txId,\n    uint256 _amount,\n    address _bob,\n    address _tokenAddress,\n    bytes20 _secretHash\n  ) external {\n    require(deposits[_txId].state == DepositState.BobMadeDeposit);\n    bytes20 depositHash = ripemd160(\n      msg.sender,\n      _bob,\n      _secretHash,\n      _tokenAddress,\n      _amount\n    );\n    require(depositHash == deposits[_txId].depositHash && now >= deposits[_txId].lockTime);\n    deposits[_txId].state = DepositState.AliceClaimedDeposit;\n    if (_tokenAddress == 0x0) {\n      msg.sender.transfer(_amount);\n    } else {\n      ERC20 token = ERC20(_tokenAddress);\n      assert(token.transfer(msg.sender, _amount));\n    }\n  }\n\n  function bobMakesEthPayment(\n    bytes32 _txId,\n    address _alice,\n    bytes20 _secretHash,\n    uint64 _lockTime\n  ) external payable {\n    require(_alice != 0x0 && msg.value > 0 && payments[_txId].state == PaymentState.Uninitialized);\n    bytes20 paymentHash = ripemd160(\n      _alice,\n      msg.sender,\n      _secretHash,\n      address(0),\n      msg.value\n    );\n    payments[_txId] = BobPayment(\n      paymentHash,\n      _lockTime,\n      PaymentState.BobMadePayment\n    );\n  }\n\n  function bobMakesErc20Payment(\n    bytes32 _txId,\n    uint256 _amount,\n    address _alice,\n    bytes20 _secretHash,\n    address _tokenAddress,\n    uint64 _lockTime\n  ) external {\n    require(\n      _alice != 0x0 &&\n      _amount > 0 &&\n      payments[_txId].state == PaymentState.Uninitialized &&\n      _tokenAddress != 0x0\n    );\n    bytes20 paymentHash = ripemd160(\n      _alice,\n      msg.sender,\n      _secretHash,\n      _tokenAddress,\n      _amount\n    );\n    payments[_txId] = BobPayment(\n      paymentHash,\n      _lockTime,\n      PaymentState.BobMadePayment\n    );\n    ERC20 token = ERC20(_tokenAddress);\n    assert(token.transferFrom(msg.sender, address(this), _amount));\n  }\n\n  function bobClaimsPayment(\n    bytes32 _txId,\n    uint256 _amount,\n    address _alice,\n    address _tokenAddress,\n    bytes20 _secretHash\n  ) external {\n    require(payments[_txId].state == PaymentState.BobMadePayment);\n    bytes20 paymentHash = ripemd160(\n      _alice,\n      msg.sender,\n      _secretHash,\n      _tokenAddress,\n      _amount\n    );\n    require(now >= payments[_txId].lockTime && paymentHash == payments[_txId].paymentHash);\n    payments[_txId].state = PaymentState.BobClaimedPayment;\n    if (_tokenAddress == 0x0) {\n      msg.sender.transfer(_amount);\n    } else {\n      ERC20 token = ERC20(_tokenAddress);\n      assert(token.transfer(msg.sender, _amount));\n    }\n  }\n\n  function aliceClaimsPayment(\n    bytes32 _txId,\n    uint256 _amount,\n    bytes32 _secret,\n    address _bob,\n    address _tokenAddress\n  ) external {\n    require(payments[_txId].state == PaymentState.BobMadePayment);\n    bytes20 paymentHash = ripemd160(\n      msg.sender,\n      _bob,\n      ripemd160(sha256(_secret)),\n      _tokenAddress,\n      _amount\n    );\n    require(now < payments[_txId].lockTime && paymentHash == payments[_txId].paymentHash);\n    payments[_txId].state = PaymentState.AliceClaimedPayment;\n    if (_tokenAddress == 0x0) {\n      msg.sender.transfer(_amount);\n    } else {\n      ERC20 token = ERC20(_tokenAddress);\n      assert(token.transfer(msg.sender, _amount));\n    }\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b61117f8061001e6000396000f30060606040526004361061008a5763ffffffff60e060020a6000350416630716326d811461008f578063113ee583146100eb5780631f7a72f71461011b5780633d4dff7b146101495780634b915a681461015f5780635ab30d95146101975780635d567259146101c8578063b8a15b1d1461020e578063dd23795f14610254578063e45ef4ad14610285575b600080fd5b341561009a57600080fd5b6100a56004356102bd565b6040516001606060020a03198416815267ffffffffffffffff83166020820152604081018260038111156100d557fe5b60ff168152602001935050505060405180910390f35b34156100f657600080fd5b610119600435602435604435600160a060020a03606435811690608435166102f3565b005b341561012657600080fd5b610119600435602435604435600160a060020a0360643581169060843516610579565b341561015457600080fd5b6100a5600435610727565b341561016a57600080fd5b610119600435602435600160a060020a03604435811690606435166001606060020a03196084351661075d565b610119600435600160a060020a03602435166001606060020a03196044351667ffffffffffffffff60643516610934565b34156101d357600080fd5b610119600435602435600160a060020a036044358116906001606060020a031960643516906084351667ffffffffffffffff60a43516610ade565b341561021957600080fd5b610119600435602435600160a060020a036044358116906001606060020a031960643516906084351667ffffffffffffffff60a43516610ccb565b610119600435600160a060020a03602435166001606060020a03196044351667ffffffffffffffff60643516610e7b565b341561029057600080fd5b610119600435602435600160a060020a03604435811690606435166001606060020a031960843516611017565b600160205260009081526040902054606060020a81029060a060020a810467ffffffffffffffff169060e060020a900460ff1683565b600080600160008881526001602052604090205460e060020a900460ff16600381111561031c57fe5b1461032657600080fd5b6003338560036002896000604051602001526040519081526020908101906040518083038160008661646e5a03f1151561035f57600080fd5b5050604051805190506000604051602001526040519081526020908101906040518083038160008661646e5a03f1151561039857600080fd5b505060405151606060020a02868a600060405160200152604051606060020a600160a060020a0396871681028252948616850260148201526001606060020a031990931660288401529316909102603c820152605081019190915260700160206040518083038160008661646e5a03f1151561041357600080fd5b505060405151600088815260016020526040902054606060020a91909102925060a060020a900467ffffffffffffffff164210801561047357506000878152600160205260409020546001606060020a0319838116606060020a90920216145b151561047e57600080fd5b600087815260016020526040902080546002919060e060020a60ff02191660e060020a835b0217905550600160a060020a03831615156104ee57600160a060020a03331686156108fc0287604051600060405180830381858888f1935050505015156104e957600080fd5b610570565b5081600160a060020a03811663a9059cbb338860006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561054d57600080fd5b6102c65a03f1151561055e57600080fd5b50505060405180519050151561057057fe5b50505050505050565b600080600160008881526020819052604090205460e060020a900460ff1660038111156105a257fe5b146105ac57600080fd5b6003843360036002896000604051602001526040519081526020908101906040518083038160008661646e5a03f115156105e557600080fd5b5050604051805190506000604051602001526040519081526020908101906040518083038160008661646e5a03f1151561061e57600080fd5b505060405151606060020a02868a600060405160200152604051606060020a600160a060020a0396871681028252948616850260148201526001606060020a031990931660288401529316909102603c820152605081019190915260700160206040518083038160008661646e5a03f1151561069957600080fd5b505060405151600088815260208190526040902054606060020a9182029350026001606060020a03199081169083161480156106f3575060008781526020819052604090205460a060020a900467ffffffffffffffff1642105b15156106fe57600080fd5b600087815260208190526040902080546003919060e060020a60ff02191660e060020a836104a3565b600060208190529081526040902054606060020a81029060a060020a810467ffffffffffffffff169060e060020a900460ff1683565b600080600160008881526020819052604090205460e060020a900460ff16600381111561078657fe5b1461079057600080fd5b6003338685878a600060405160200152604051606060020a600160a060020a0396871681028252948616850260148201526001606060020a031990931660288401529316909102603c820152605081019190915260700160206040518083038160008661646e5a03f1151561080457600080fd5b505060405151600088815260208190526040902054606060020a9182029350026001606060020a031990811690831614801561085f575060008781526020819052604090205460a060020a900467ffffffffffffffff164210155b151561086a57600080fd5b600087815260208190526040902080546002919060e060020a60ff02191660e060020a835b0217905550600160a060020a03841615156108d557600160a060020a03331686156108fc0287604051600060405180830381858888f1935050505015156104e957600080fd5b5082600160a060020a03811663a9059cbb338860006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561054d57600080fd5b6000600160a060020a0384161580159061094e5750600034115b801561097c57506000808681526001602052604090205460e060020a900460ff16600381111561097a57fe5b145b151561098757600080fd5b6003843385600034600060405160200152604051606060020a600160a060020a0396871681028252948616850260148201526001606060020a031990931660288401529316909102603c820152605081019190915260700160206040518083038160008661646e5a03f115156109fc57600080fd5b505060405151606060020a029050606060405190810160409081526001606060020a03198316825267ffffffffffffffff8416602083015281016001905260008681526001602052604090208151815473ffffffffffffffffffffffffffffffffffffffff1916606060020a9091041781556020820151815467ffffffffffffffff9190911660a060020a027bffffffffffffffff00000000000000000000000000000000000000001990911617815560408201518154829060e060020a60ff02191660e060020a836003811115610ad057fe5b021790555050505050505050565b6000806003863387878b600060405160200152604051606060020a600160a060020a0396871681028252948616850260148201526001606060020a031990931660288401529316909102603c820152605081019190915260700160206040518083038160008661646e5a03f11515610b5557600080fd5b505060405151606060020a029150606060405190810160409081526001606060020a03198416825267ffffffffffffffff8516602083015281016001905260008981526020819052604090208151815473ffffffffffffffffffffffffffffffffffffffff1916606060020a9091041781556020820151815467ffffffffffffffff9190911660a060020a027bffffffffffffffff00000000000000000000000000000000000000001990911617815560408201518154829060e060020a60ff02191660e060020a836003811115610c2957fe5b021790555090505083905080600160a060020a03166323b872dd33308a60006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610c9e57600080fd5b6102c65a03f11515610caf57600080fd5b505050604051805190501515610cc157fe5b5050505050505050565b600080600160a060020a03861615801590610ce65750600087115b8015610d1457506000808981526001602052604090205460e060020a900460ff166003811115610d1257fe5b145b8015610d285750600160a060020a03841615155b1515610d3357600080fd5b6003863387878b600060405160200152604051606060020a600160a060020a0396871681028252948616850260148201526001606060020a031990931660288401529316909102603c820152605081019190915260700160206040518083038160008661646e5a03f11515610da757600080fd5b505060405151606060020a029150606060405190810160409081526001606060020a03198416825267ffffffffffffffff8516602083015281016001905260008981526001602052604090208151815473ffffffffffffffffffffffffffffffffffffffff1916606060020a9091041781556020820151815467ffffffffffffffff9190911660a060020a027bffffffffffffffff00000000000000000000000000000000000000001990911617815560408201518154829060e060020a60ff02191660e060020a836003811115610c2957fe5b6000600160a060020a03841615801590610e955750600034115b8015610ec357506000808681526020819052604090205460e060020a900460ff166003811115610ec157fe5b145b1515610ece57600080fd5b6003843385600034600060405160200152604051606060020a600160a060020a0396871681028252948616850260148201526001606060020a031990931660288401529316909102603c820152605081019190915260700160206040518083038160008661646e5a03f11515610f4357600080fd5b505060405151606060020a029050606060405190810160409081526001606060020a03198316825267ffffffffffffffff8416602083015281016001905260008681526020819052604090208151815473ffffffffffffffffffffffffffffffffffffffff1916606060020a9091041781556020820151815467ffffffffffffffff9190911660a060020a027bffffffffffffffff00000000000000000000000000000000000000001990911617815560408201518154829060e060020a60ff02191660e060020a836003811115610ad057fe5b600080600160008881526001602052604090205460e060020a900460ff16600381111561104057fe5b1461104a57600080fd5b6003853385878a600060405160200152604051606060020a600160a060020a0396871681028252948616850260148201526001606060020a031990931660288401529316909102603c820152605081019190915260700160206040518083038160008661646e5a03f115156110be57600080fd5b505060405151600088815260016020526040902054606060020a91909102925060a060020a900467ffffffffffffffff16421080159061111f57506000878152600160205260409020546001606060020a0319838116606060020a90920216145b151561112a57600080fd5b600087815260016020526040902080546003919060e060020a60ff02191660e060020a8361088f5600a165627a7a72305820bff2ec264374fac059f5bef89b04c49ed636d02991884df2b24538191d1b16230029"
}