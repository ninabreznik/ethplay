{
  "address": "0x93f2c843f6827e48381654aa2b093e5f97e102c6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HeroHelperBuy",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-26\n*/\n\nlibrary OwnershipTypes{\n    using Serializer for Serializer.DataComponent;\n\n    struct Ownership\n    {\n        address m_Owner; // 0\n        uint32 m_OwnerInventoryIndex; // 20\n    }\n\n    function SerializeOwnership(Ownership ownership) internal pure returns (bytes32)\n    {\n        Serializer.DataComponent memory data;\n        data.WriteAddress(0, ownership.m_Owner);\n        data.WriteUint32(20, ownership.m_OwnerInventoryIndex);\n\n        return data.m_Raw;\n    }\n\n    function DeserializeOwnership(bytes32 raw) internal pure returns (Ownership)\n    {\n        Ownership memory ownership;\n\n        Serializer.DataComponent memory data;\n        data.m_Raw = raw;\n\n        ownership.m_Owner = data.ReadAddress(0);\n        ownership.m_OwnerInventoryIndex = data.ReadUint32(20);\n\n        return ownership;\n    }\n}\nlibrary LibStructs{\n    using Serializer for Serializer.DataComponent;\n    // HEROES\n\n    struct Hero {\n        uint16 stockID;\n        uint8 rarity;\n        uint16 hp;\n        uint16 atk;\n        uint16 def;\n        uint16 agi;\n        uint16 intel;\n        uint16 cHp;\n        //uint8 cenas;\n        // uint8 critic;\n        // uint8 healbonus;\n        // uint8 atackbonus;\n        // uint8 defensebonus;\n\n        uint8 isForSale;\n        uint8 lvl;\n        uint16 xp;\n    }\n    struct StockHero {uint16 price;uint8 stars;uint8 mainOnePosition;uint8 mainTwoPosition;uint16 stock;uint8 class;}\n\n    function SerializeHero(Hero hero) internal pure returns (bytes32){\n        Serializer.DataComponent memory data;\n        data.WriteUint16(0, hero.stockID);\n        data.WriteUint8(2, hero.rarity);\n        //data.WriteUint8(2, hero.m_IsForSale);\n        //data.WriteUint8(3, rocket.m_Unused3);\n        data.WriteUint16(4, hero.hp);\n        data.WriteUint16(6, hero.atk);\n        data.WriteUint16(8, hero.def);\n        data.WriteUint16(10, hero.agi);\n        data.WriteUint16(12, hero.intel);\n        data.WriteUint16(14, hero.cHp);\n\n        // data.WriteUint8(16, hero.class);\n        // data.WriteUint8(17, hero.healbonus);\n        // data.WriteUint8(18, hero.atackbonus);\n        // data.WriteUint8(19, hero.defensebonus);\n\n        data.WriteUint8(20, hero.isForSale);\n        data.WriteUint8(21, hero.lvl);\n        data.WriteUint16(23, hero.xp);\n\n        return data.m_Raw;\n    }\n    function DeserializeHero(bytes32 raw) internal pure returns (Hero){\n        Hero memory hero;\n\n        Serializer.DataComponent memory data;\n        data.m_Raw = raw;\n\n        hero.stockID = data.ReadUint16(0);\n        //hero.rarity = data.ReadUint8(1);\n        hero.rarity = data.ReadUint8(2);\n        //rocket.m_Unused3 = data.ReadUint8(3);\n        hero.hp = data.ReadUint16(4);\n        hero.atk = data.ReadUint16(6);\n        hero.def = data.ReadUint16(8);\n        hero.agi = data.ReadUint16(10);\n        hero.intel = data.ReadUint16(12);\n        hero.cHp = data.ReadUint16(14);\n\n        // hero.class = data.ReadUint8(16);\n        // hero.healbonus = data.ReadUint8(17);\n        // hero.atackbonus = data.ReadUint8(18);\n        // hero.defensebonus = data.ReadUint8(19);\n\n        hero.isForSale = data.ReadUint8(20);\n        hero.lvl = data.ReadUint8(21);\n        hero.xp = data.ReadUint16(23);\n\n        return hero;\n    }\n    function SerializeStockHero(StockHero stockhero) internal pure returns (bytes32){\n        // string name;uint64 price;uint8 stars;uint8 mainOnePosition;uint8 mainTwoPosition;\n\n        Serializer.DataComponent memory data;\n        data.WriteUint16(0, stockhero.price);\n        data.WriteUint8(2, stockhero.stars);\n        data.WriteUint8(3, stockhero.mainOnePosition);\n        data.WriteUint8(4, stockhero.mainTwoPosition);\n        data.WriteUint16(5, stockhero.stock);\n        data.WriteUint8(7, stockhero.class);\n\n\n        return data.m_Raw;\n    }\n    function DeserializeStockHero(bytes32 raw) internal pure returns (StockHero){\n        StockHero memory stockhero;\n\n        Serializer.DataComponent memory data;\n        data.m_Raw = raw;\n\n        stockhero.price = data.ReadUint16(0);\n        stockhero.stars = data.ReadUint8(2);\n        stockhero.mainOnePosition = data.ReadUint8(3);\n        stockhero.mainTwoPosition = data.ReadUint8(4);\n        stockhero.stock = data.ReadUint16(5);\n        stockhero.class = data.ReadUint8(7);\n\n        return stockhero;\n    }\n    // ITEMS\n    struct Item {\n        uint16 stockID;\n        uint8 lvl;\n        uint8 rarity;\n        uint16 hp;\n        uint16 atk;\n        uint16 def;\n        uint16 agi;\n        uint16 intel;\n\n        uint8 critic;\n        uint8 healbonus;\n        uint8 atackbonus;\n        uint8 defensebonus;\n\n        uint8 isForSale;\n        uint8 grade;\n    }\n    struct StockItem {uint16 price;uint8 stars;uint8 lvl;uint8 mainOnePosition;uint8 mainTwoPosition;uint16[5] stats;uint8[4] secstats;uint8 cat;uint8 subcat;} // 1 finney = 0.0001 ether\n\n    function SerializeItem(Item item) internal pure returns (bytes32){\n        Serializer.DataComponent memory data;\n\n        data.WriteUint16(0, item.stockID);\n        data.WriteUint8(4, item.lvl);\n        data.WriteUint8(5, item.rarity);\n        data.WriteUint16(6, item.hp);\n        data.WriteUint16(8, item.atk);\n        data.WriteUint16(10, item.def);\n        data.WriteUint16(12, item.agi);\n        data.WriteUint16(14, item.intel);\n        // data.WriteUint32(14, item.cHp);\n\n        data.WriteUint8(16, item.critic);\n        data.WriteUint8(17, item.healbonus);\n        data.WriteUint8(18, item.atackbonus);\n        data.WriteUint8(19, item.defensebonus);\n\n        data.WriteUint8(20, item.isForSale);\n        data.WriteUint8(21, item.grade);\n\n\n        return data.m_Raw;\n\n    }\n    function DeserializeItem(bytes32 raw) internal pure returns (Item){\n        Item memory item;\n\n        Serializer.DataComponent memory data;\n        data.m_Raw = raw;\n\n        item.stockID = data.ReadUint16(0);\n\n        item.lvl = data.ReadUint8(4);\n        item.rarity = data.ReadUint8(5);\n        item.hp = data.ReadUint16(6);\n        item.atk = data.ReadUint16(8);\n        item.def = data.ReadUint16(10);\n        item.agi = data.ReadUint16(12);\n        item.intel = data.ReadUint16(14);\n\n        item.critic = data.ReadUint8(16);\n        item.healbonus = data.ReadUint8(17);\n        item.atackbonus = data.ReadUint8(18);\n        item.defensebonus = data.ReadUint8(19);\n\n        item.isForSale = data.ReadUint8(20);\n        item.grade = data.ReadUint8(21);\n\n\n        return item;\n    }\n    function SerializeStockItem(StockItem stockitem) internal pure returns (bytes32){\n        // string name;uint64 price;uint8 stars;uint8 mainOnePosition;uint8 mainTwoPosition;uint8 mainThreePosition;\n        // uint16[] stats;uint8[] secstats;\n\n        Serializer.DataComponent memory data;\n        data.WriteUint16(0, stockitem.price);\n        data.WriteUint8(2, stockitem.stars);\n        data.WriteUint8(3, stockitem.lvl);\n        data.WriteUint8(4, stockitem.mainOnePosition);\n        data.WriteUint8(5, stockitem.mainTwoPosition);\n        //data.WriteUint8(12, stockitem.mainThreePosition);\n        //stats\n        data.WriteUint16(6, stockitem.stats[0]);\n        data.WriteUint16(8, stockitem.stats[1]);\n        data.WriteUint16(10, stockitem.stats[2]);\n        data.WriteUint16(12, stockitem.stats[3]);\n        data.WriteUint16(14, stockitem.stats[4]);\n        //secstats\n        data.WriteUint8(16, stockitem.secstats[0]);\n        data.WriteUint8(17, stockitem.secstats[1]);\n        data.WriteUint8(18, stockitem.secstats[2]);\n        data.WriteUint8(19, stockitem.secstats[3]);\n\n        data.WriteUint8(20, stockitem.cat);\n        data.WriteUint8(21, stockitem.subcat);\n\n\n        return data.m_Raw;\n    }\n    function DeserializeStockItem(bytes32 raw) internal pure returns (StockItem){\n        StockItem memory stockitem;\n\n        Serializer.DataComponent memory data;\n        data.m_Raw = raw;\n\n        stockitem.price = data.ReadUint16(0);\n        stockitem.stars = data.ReadUint8(2);\n        stockitem.lvl = data.ReadUint8(3);\n        stockitem.mainOnePosition = data.ReadUint8(4);\n        stockitem.mainTwoPosition = data.ReadUint8(5);\n        //stockitem.mainThreePosition = data.ReadUint8(12);\n\n        stockitem.stats[0] = data.ReadUint16(6);\n        stockitem.stats[1] = data.ReadUint16(8);\n        stockitem.stats[2] = data.ReadUint16(10);\n        stockitem.stats[3] = data.ReadUint16(12);\n        stockitem.stats[4] = data.ReadUint16(14);\n\n        stockitem.secstats[0] = data.ReadUint8(16);\n        stockitem.secstats[1] = data.ReadUint8(17);\n        stockitem.secstats[2] = data.ReadUint8(18);\n        stockitem.secstats[3] = data.ReadUint8(19);\n\n        stockitem.cat = data.ReadUint8(20);\n        stockitem.subcat = data.ReadUint8(21);\n\n        return stockitem;\n    }\n\n    struct Action {uint16 actionID;uint8 actionType;uint16 finneyCost;uint32 cooldown;uint8 lvl;uint8 looted;uint8 isDaily;}\n    function SerializeAction(Action action) internal pure returns (bytes32){\n        Serializer.DataComponent memory data;\n        data.WriteUint16(0, action.actionID);\n        data.WriteUint8(2, action.actionType);\n        data.WriteUint16(3, action.finneyCost);\n        data.WriteUint32(5, action.cooldown);\n        data.WriteUint8(9, action.lvl);\n        data.WriteUint8(10, action.looted);\n        data.WriteUint8(11, action.isDaily);\n\n        return data.m_Raw;\n    }\n    function DeserializeAction(bytes32 raw) internal pure returns (Action){\n        Action memory action;\n\n        Serializer.DataComponent memory data;\n        data.m_Raw = raw;\n\n        action.actionID = data.ReadUint16(0);\n        action.actionType = data.ReadUint8(2);\n        action.finneyCost = data.ReadUint16(3);\n        action.cooldown = data.ReadUint32(5);\n        action.lvl = data.ReadUint8(9);\n        action.looted = data.ReadUint8(10);\n        action.isDaily = data.ReadUint8(11);\n\n        return action;\n    }\n\n    struct Mission {uint8 dificulty;uint16[4] stockitemId_drops;uint16[5] statsrequired;uint16 count;}\n    function SerializeMission(Mission mission) internal pure returns (bytes32){\n        Serializer.DataComponent memory data;\n        data.WriteUint8(0, mission.dificulty);\n        data.WriteUint16(1, mission.stockitemId_drops[0]);\n        data.WriteUint16(5, mission.stockitemId_drops[1]);\n        data.WriteUint16(9, mission.stockitemId_drops[2]);\n        data.WriteUint16(13, mission.stockitemId_drops[3]);\n\n        data.WriteUint16(15, mission.statsrequired[0]);\n        data.WriteUint16(17, mission.statsrequired[1]);\n        data.WriteUint16(19, mission.statsrequired[2]);\n        data.WriteUint16(21, mission.statsrequired[3]);\n        data.WriteUint16(23, mission.statsrequired[4]);\n\n        data.WriteUint16(25, mission.count);\n\n        return data.m_Raw;\n    }\n    function DeserializeMission(bytes32 raw) internal pure returns (Mission){\n        Mission memory mission;\n\n        Serializer.DataComponent memory data;\n        data.m_Raw = raw;\n\n        mission.dificulty = data.ReadUint8(0);\n        mission.stockitemId_drops[0] = data.ReadUint16(1);\n        mission.stockitemId_drops[1] = data.ReadUint16(5);\n        mission.stockitemId_drops[2] = data.ReadUint16(9);\n        mission.stockitemId_drops[3] = data.ReadUint16(13);\n\n        mission.statsrequired[0] = data.ReadUint16(15);\n        mission.statsrequired[1] = data.ReadUint16(17);\n        mission.statsrequired[2] = data.ReadUint16(19);\n        mission.statsrequired[3] = data.ReadUint16(21);\n        mission.statsrequired[4] = data.ReadUint16(23);\n\n        mission.count = data.ReadUint16(25);\n\n        return mission;\n    }\n\n    function toWei(uint80 price) public returns(uint256 value){\n        value = price;\n        value = value * 1 finney;\n\n    }\n\n}\nlibrary GlobalTypes{\n    using Serializer for Serializer.DataComponent;\n\n    struct Global\n    {\n        uint32 m_LastHeroId; // 0\n        uint32 m_LastItem; // 4\n        uint8 m_Unused8; // 8\n        uint8 m_Unused9; // 9\n        uint8 m_Unused10; // 10\n        uint8 m_Unused11; // 11\n    }\n\n    function SerializeGlobal(Global global) internal pure returns (bytes32)\n    {\n        Serializer.DataComponent memory data;\n        data.WriteUint32(0, global.m_LastHeroId);\n        data.WriteUint32(4, global.m_LastItem);\n        data.WriteUint8(8, global.m_Unused8);\n        data.WriteUint8(9, global.m_Unused9);\n        data.WriteUint8(10, global.m_Unused10);\n        data.WriteUint8(11, global.m_Unused11);\n\n        return data.m_Raw;\n    }\n\n    function DeserializeGlobal(bytes32 raw) internal pure returns (Global)\n    {\n        Global memory global;\n\n        Serializer.DataComponent memory data;\n        data.m_Raw = raw;\n\n        global.m_LastHeroId = data.ReadUint32(0);\n        global.m_LastItem = data.ReadUint32(4);\n        global.m_Unused8 = data.ReadUint8(8);\n        global.m_Unused9 = data.ReadUint8(9);\n        global.m_Unused10 = data.ReadUint8(10);\n        global.m_Unused11 = data.ReadUint8(11);\n\n        return global;\n    }\n\n\n}\nlibrary MarketTypes{\n    using Serializer for Serializer.DataComponent;\n\n    struct MarketListing\n    {\n        uint128 m_Price; // 0\n    }\n\n    function SerializeMarketListing(MarketListing listing) internal pure returns (bytes32)\n    {\n        Serializer.DataComponent memory data;\n        data.WriteUint128(0, listing.m_Price);\n\n        return data.m_Raw;\n    }\n\n    function DeserializeMarketListing(bytes32 raw) internal pure returns (MarketListing)\n    {\n        MarketListing memory listing;\n\n        Serializer.DataComponent memory data;\n        data.m_Raw = raw;\n\n        listing.m_Price = data.ReadUint128(0);\n\n        return listing;\n    }\n}\nlibrary Serializer{\n    struct DataComponent\n    {\n        bytes32 m_Raw;\n    }\n\n    function ReadUint8(DataComponent memory self, uint32 offset) internal pure returns (uint8)\n    {\n        return uint8((self.m_Raw >> (offset * 8)) & 0xFF);\n    }\n\n    function WriteUint8(DataComponent memory self, uint32 offset, uint8 value) internal pure\n    {\n        self.m_Raw |= (bytes32(value) << (offset * 8));\n    }\n\n    function ReadUint16(DataComponent memory self, uint32 offset) internal pure returns (uint16)\n    {\n        return uint16((self.m_Raw >> (offset * 8)) & 0xFFFF);\n    }\n\n    function WriteUint16(DataComponent memory self, uint32 offset, uint16 value) internal pure\n    {\n        self.m_Raw |= (bytes32(value) << (offset * 8));\n    }\n\n    function ReadUint32(DataComponent memory self, uint32 offset) internal pure returns (uint32)\n    {\n        return uint32((self.m_Raw >> (offset * 8)) & 0xFFFFFFFF);\n    }\n\n    function WriteUint32(DataComponent memory self, uint32 offset, uint32 value) internal pure\n    {\n        self.m_Raw |= (bytes32(value) << (offset * 8));\n    }\n\n    function ReadUint64(DataComponent memory self, uint32 offset) internal pure returns (uint64)\n    {\n        return uint64((self.m_Raw >> (offset * 8)) & 0xFFFFFFFFFFFFFFFF);\n    }\n\n    function WriteUint64(DataComponent memory self, uint32 offset, uint64 value) internal pure\n    {\n        self.m_Raw |= (bytes32(value) << (offset * 8));\n    }\n\n    function ReadUint80(DataComponent memory self, uint32 offset) internal pure returns (uint80)\n    {\n        return uint80((self.m_Raw >> (offset * 8)) & 0xFFFFFFFFFFFFFFFFFFFF);\n    }\n\n    function WriteUint80(DataComponent memory self, uint32 offset, uint80 value) internal pure\n    {\n        self.m_Raw |= (bytes32(value) << (offset * 8));\n    }\n\n    function ReadUint128(DataComponent memory self, uint128 offset) internal pure returns (uint128)\n    {\n        return uint128((self.m_Raw >> (offset * 8)) & 0xFFFFFFFFFFFFFFFFFFFF);\n    }\n\n    function WriteUint128(DataComponent memory self, uint32 offset, uint128 value) internal pure\n    {\n        self.m_Raw |= (bytes32(value) << (offset * 8));\n    }\n\n    function ReadAddress(DataComponent memory self, uint32 offset) internal pure returns (address)\n    {\n        return address((self.m_Raw >> (offset * 8)) & (\n        (0xFFFFFFFF << 0)  |\n        (0xFFFFFFFF << 32) |\n        (0xFFFFFFFF << 64) |\n        (0xFFFFFFFF << 96) |\n        (0xFFFFFFFF << 128)\n        ));\n    }\n\n    function WriteAddress(DataComponent memory self, uint32 offset, address value) internal pure\n    {\n        self.m_Raw |= (bytes32(value) << (offset * 8));\n    }\n}\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\nlibrary SafeMath32 {\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint32 a, uint32 b) internal pure returns (uint32) {\n        if (a == 0) {\n            return 0;\n        }\n        uint32 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint32 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint32 a, uint32 b) internal pure returns (uint32) {\n        uint32 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\nlibrary SafeMath16 {\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint16 a, uint16 b) internal pure returns (uint16) {\n        if (a == 0) {\n            return 0;\n        }\n        uint16 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint16 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint16 a, uint16 b) internal pure returns (uint16) {\n        uint16 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\nlibrary SafeMath8 {\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint8 a, uint8 b) internal pure returns (uint8) {\n        if (a == 0) {\n            return 0;\n        }\n        uint8 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint8 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint8 a, uint8 b) internal pure returns (uint8) {\n        uint8 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\ncontract HeroHelperBuy\n{\n    address public m_Owner;\n    address public partner1;\n    uint8 public percent1;\n    address public partner2;\n    uint8 public percent2;\n\n    bool public m_Paused;\n    AbstractDatabase m_Database= AbstractDatabase(0x095cbb73c75d4e1c62c94e0b1d4d88f8194b1941);\n    address public bitGuildAddress = 0x89a196a34B7820bC985B98096ED5EFc7c4DC8363;\n    mapping(address => bool)  public trustedContracts;\n    using SafeMath for uint256;\n    using SafeMath32 for uint32;\n    using SafeMath16 for uint16;\n    using SafeMath8 for uint8;\n\n    modifier OnlyOwner(){\n        require(msg.sender == m_Owner || trustedContracts[msg.sender]);\n        _;\n    }\n\n    modifier onlyOwnerOf(uint _hero_id) {\n        OwnershipTypes.Ownership memory ownership = OwnershipTypes.DeserializeOwnership(m_Database.Load(NullAddress, OwnershipHeroCategory, _hero_id));\n        require(ownership.m_Owner == msg.sender);\n        _;\n    }\n    \n    function ChangeAddressTrust(address contract_address,bool trust_flag) public OnlyOwner()\n    {\n        trustedContracts[contract_address] = trust_flag;\n    }\n\n    address constant NullAddress = 0;\n\n    uint256 constant GlobalCategory = 0;\n\n    //Hero\n    uint256 constant HeroCategory = 1;\n    uint256 constant HeroStockCategory = 2;\n    uint256 constant InventoryHeroCategory = 3;\n\n    uint256 constant OwnershipHeroCategory = 10;\n    uint256 constant OwnershipItemCategory = 11;\n    uint256 constant OwnershipAbilitiesCategory = 12;\n\n    //Market\n    uint256 constant ProfitFundsCategory = 14;\n    uint256 constant WithdrawalFundsCategory = 15;\n    uint256 constant HeroMarketCategory = 16;\n\n    //Action\n    uint256 constant ActionCategory = 20;\n    uint256 constant MissionCategory = 17;\n    uint256 constant ActionHeroCategory = 18;\n\n    //ReferalCategory\n    uint256 constant ReferalCategory = 237;\n\n    using Serializer for Serializer.DataComponent;\n\n    function ChangeOwner(address new_owner) public OnlyOwner(){\n        m_Owner = new_owner;\n    }\n\n    function ChangePartners(address _partner1,uint8 _percent1,address _partner2,uint8 _percent2) public OnlyOwner(){\n        partner1 = _partner1;\n        percent1 = _percent1;\n        partner2 = _partner2;\n        percent2 = _percent2;\n    }\n    function ChangeDatabase(address db) public OnlyOwner(){\n        m_Database = AbstractDatabase(db);\n    }\n    // function ChangeHeroHelperOraclize(address new_heroOraclize) public OnlyOwner(){\n    //     m_HeroHelperOraclize = AbstractHeroHelperOraclize(new_heroOraclize);\n    // }\n    function HeroHelperBuy() public{\n        m_Owner = msg.sender;\n        m_Paused = true;\n    }\n\n    \n    function GetHeroStock(uint16 stockhero_id)  private view returns (LibStructs.StockHero){\n        LibStructs.StockHero memory stockhero = LibStructs.DeserializeStockHero(m_Database.Load(NullAddress, HeroStockCategory, stockhero_id));\n        return stockhero;\n    }\n    \n    function GetHeroStockPrice(uint16 stockhero_id)  public view returns (uint){\n        LibStructs.StockHero memory stockhero = LibStructs.DeserializeStockHero(m_Database.Load(NullAddress, HeroStockCategory, stockhero_id));\n        return stockhero.price;\n    }\n\n    function GetHeroCount(address _owner) public view returns (uint32){\n        return uint32(m_Database.Load(_owner, HeroCategory, 0));\n    }\n    \n    event BuyStockHeroEvent(address indexed buyer, uint32 stock_id, uint32 hero_id);\n    event showValues(uint256 _value,uint256 _price,uint256 _stock,uint256 hero_id);\n    \n    function BuyStockHeroP1(uint16 stock_id) public payable {\n        \n        LibStructs.StockHero memory prehero = GetHeroStock(stock_id);\n        uint256 finneyPrice = prehero.price;\n        finneyPrice = finneyPrice.mul(1 finney );\n        showValues(msg.value, finneyPrice,prehero.stock,stock_id);\n        \n        require(msg.value  == finneyPrice && prehero.stock > 0);\n        \n        \n        BuyStockHeroP2(msg.sender,stock_id,m_Database.getRandom(100,uint8(msg.sender)));\n        \n    }\n    function giveHeroRandomRarity(address target,uint16 stock_id,uint random) public OnlyOwner(){\n        BuyStockHeroP2(target,stock_id,random);\n    }\n    function BuyStockHeroP2(address target,uint16 stock_id,uint random) internal{\n        \n        uint256 inventory_count;\n        LibStructs.StockHero memory prehero = GetHeroStock(stock_id);\n        LibStructs.Hero memory hero = buyHero(prehero,stock_id,random);\n        GlobalTypes.Global memory global = GlobalTypes.DeserializeGlobal(m_Database.Load(NullAddress, GlobalCategory, 0));\n\n        uint256 finneyPrice = prehero.price;\n        finneyPrice = finneyPrice.mul( 1 finney );\n        prehero.stock = prehero.stock.sub(1);\n\n        global.m_LastHeroId = global.m_LastHeroId.add(1);\n        uint32 next_hero_id = global.m_LastHeroId;\n        inventory_count = GetInventoryHeroCount(target);\n\n        inventory_count = inventory_count.add(1);\n\n\n        OwnershipTypes.Ownership memory ownership;\n        ownership.m_Owner = target;\n        ownership.m_OwnerInventoryIndex = uint32(inventory_count.sub(1));\n\n        m_Database.Store(target, InventoryHeroCategory, inventory_count, bytes32(next_hero_id)); // coloca na posiçao nova o heroi\n        m_Database.Store(target, InventoryHeroCategory, 0, bytes32(inventory_count)); // coloco na posiçao zero o count do mapping :) admira te\n\n        m_Database.Store(NullAddress, HeroStockCategory, stock_id, LibStructs.SerializeStockHero(prehero));\n        m_Database.Store(NullAddress, HeroCategory, next_hero_id, LibStructs.SerializeHero(hero));\n        m_Database.Store(NullAddress, OwnershipHeroCategory, next_hero_id, OwnershipTypes.SerializeOwnership(ownership));\n        m_Database.Store(NullAddress, GlobalCategory, 0, GlobalTypes.SerializeGlobal(global));\n       \n        divProfit(finneyPrice);\n\n        BuyStockHeroEvent(target, stock_id, next_hero_id);\n\n        \n    }\n    \n    function divProfit(uint _value) internal{\n     \n         uint256 profit_funds = uint256(m_Database.Load(bitGuildAddress, WithdrawalFundsCategory, 0));\n         profit_funds = profit_funds.add(_value.div(10).mul(3));//30%\n         m_Database.Store(bitGuildAddress, WithdrawalFundsCategory, 0, bytes32(profit_funds));\n    \n         profit_funds = uint256(m_Database.Load(NullAddress, ProfitFundsCategory, 0));\n         profit_funds = profit_funds.add(_value.div(10).mul(7));//70%\n         m_Database.Store(NullAddress, ProfitFundsCategory, 0, bytes32(profit_funds));\n         m_Database.transfer(_value);\n    }\n\n    function GetInventoryHeroCount(address target) view public returns (uint256){\n        require(target != address(0));\n\n        uint256 inventory_count = uint256(m_Database.Load(target, InventoryHeroCategory, 0));\n\n        return inventory_count;\n    }\n    \n    function buyHero(LibStructs.StockHero prehero,uint16 stock_id,uint random) internal returns(LibStructs.Hero hero){\n        \n        uint8 rarity = 1;\n        if(random == 99){ // comum\n            rarity = 5;\n        }else if( random >= 54 && random <= 79  ){ // incomun\n            rarity = 2;\n        }else if(random >= 80 && random <= 92){ // raro\n            rarity = 3;\n        }else if(random >= 93 && random <= 98){ // epico\n            rarity = 4;\n        }else{\n            rarity = 1;\n        }\n        \n        uint16[5] memory mainStats = generateHeroStats(prehero,rarity);\n        hero = assembleHero(mainStats,rarity,stock_id);\n        return hero;\n\n    }\n    \n    function assembleHero(uint16[5] _mainStats,uint8 _rarity,uint16 stock_id) private pure returns(LibStructs.Hero){\n        uint16 stockID = stock_id;\n        uint8 rarity= _rarity;\n        uint16 hp= _mainStats[0]; // Max Hp\n        uint16 atk= _mainStats[1];\n        uint16 def= _mainStats[2];\n        uint16 agi= _mainStats[3];\n        uint16 intel= _mainStats[4];\n        uint16 cHp= _mainStats[0]; // Current Hp\n        //others\n        uint8 critic= 0;\n        uint8 healbonus= 0;\n        uint8 atackbonus= 0;\n        uint8 defensebonus= 0;\n\n        return LibStructs.Hero(stockID,rarity,hp,atk,def,agi,intel,cHp,0,1,0);\n    }\n\n    function generateHeroStats(LibStructs.StockHero prehero, uint8 rarity) private view returns(uint16[5] ){\n\n        uint32  goodPoints = 0;\n        uint32  normalPoints = 0;\n        uint8 i = 0;\n        uint16[5] memory arrayStartingStat;\n        i = i.add(1);\n        //uint8 rarity = getRarity(i);\n        uint32 points = prehero.stars.add(2).add(rarity);\n\n        uint8[2] memory mainStats = [prehero.mainOnePosition,prehero.mainTwoPosition];//[prehero.hpMain,prehero.atkMain,prehero.defMain,prehero.agiMain,prehero.intelMain]; //prehero.mainStats;// warrior [true,true,false,false,false];\n\n        goodPoints = points;\n        normalPoints = 8;\n        arrayStartingStat = spreadStats(mainStats,goodPoints,normalPoints,i);\n\n        return arrayStartingStat;\n\n    }\n   \n\n    function spreadStats(uint8[2] mainStats,uint32 mainPoints,uint32 restPoints,uint index) private view returns(uint16[5]){\n        uint32 i = 0;\n        uint16[5] memory arr = [uint16(1),uint16(1),uint16(1),uint16(1),uint16(1)]; // 5\n        bytes32 blockx = block.blockhash(block.number.sub(1));\n        uint256 _seed = uint256(sha3(blockx, m_Database.getRandom(100,uint8(i))));\n\n        while(i < mainPoints){ // goodppoints 4\n\n            uint8 position = uint8(( _seed / (10 ** index)) %10);\n            if(position < 5){\n                position = 0;\n            }\n            else{\n                position = 1;\n            }\n\n            arr[mainStats[position]] = arr[mainStats[position]].add(1);\n            i = i.add(1);\n            index = index.add(1);\n\n        }\n        i=0;\n        while(i < restPoints){ // outros  8\n\n            uint8 positionz = uint8(( _seed / (10 ** index)) %5);\n            arr[positionz] = arr[positionz].add(1);\n            i = i.add(1);\n            index = index.add(1);\n\n        }\n\n        return arr;\n    }\n\n}\n\ncontract BitGuildToken{\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success);\n}\n\ncontract AbstractDatabase\n{\n    function() public payable;\n    function ChangeOwner(address new_owner) public;\n    function ChangeOwner2(address new_owner) public;\n    function Store(address user, uint256 category, uint256 slot, bytes32 data) public;\n    function Load(address user, uint256 category, uint256 index) public view returns (bytes32);\n    function TransferFunds(address target, uint256 transfer_amount) public;\n    function getRandom(uint256 upper, uint8 seed) public returns (uint256 number);\n}",
  "bytecode": "608060405260038054600160a060020a031990811673095cbb73c75d4e1c62c94e0b1d4d88f8194b194117909155600480549091167389a196a34b7820bc985b98096ed5efc7c4dc836317905534801561005857600080fd5b5060008054600160a060020a031916331790556002805460a860020a60ff0219167501000000000000000000000000000000000000000000179055611d85806100a26000396000f3006080604052600436106100d75763ffffffff60e060020a60003504166306ab746c81146100dc578063074a16001461011657806324d72ff51461014157806368f6e75f14610174578063750dd953146101895780638b35a244146101b657806390e65754146101e75780639f797440146101f6578063a4c7c7b31461022a578063a75658881461023f578063b0dbc97614610268578063c67747a514610284578063ca75d77014610299578063e5726b7f146102ae578063e5919a4f146102d4578063ebc04649146102f5578063f285329214610316575b600080fd5b3480156100e857600080fd5b506100fd600160a060020a0360043516610337565b6040805163ffffffff9092168252519081900360200190f35b34801561012257600080fd5b5061012b6103ca565b6040805160ff9092168252519081900360200190f35b34801561014d57600080fd5b50610162600160a060020a03600435166103eb565b60408051918252519081900360200190f35b34801561018057600080fd5b5061012b61049b565b34801561019557600080fd5b506101b4600160a060020a036004351661ffff602435166044356104bc565b005b3480156101c257600080fd5b506101cb6104ff565b60408051600160a060020a039092168252519081900360200190f35b6101b461ffff6004351661050e565b34801561020257600080fd5b506101b4600160a060020a0360043581169060ff602435811691604435169060643516610662565b34801561023657600080fd5b506101cb610718565b34801561024b57600080fd5b50610254610727565b604080519115158252519081900360200190f35b34801561027457600080fd5b5061016261ffff60043516610749565b34801561029057600080fd5b506101cb6107f7565b3480156102a557600080fd5b506101cb610806565b3480156102ba57600080fd5b506101b4600160a060020a03600435166024351515610815565b3480156102e057600080fd5b50610254600160a060020a0360043516610873565b34801561030157600080fd5b506101b4600160a060020a0360043516610888565b34801561032257600080fd5b506101b4600160a060020a03600435166108ea565b6003546040805160e060020a630bd6c769028152600160a060020a03848116600483015260016024830152600060448301819052925192931691630bd6c7699160648082019260209290919082900301818787803b15801561039857600080fd5b505af11580156103ac573d6000803e3d6000fd5b505050506040513d60208110156103c257600080fd5b505192915050565b60025474010000000000000000000000000000000000000000900460ff1681565b600080600160a060020a038316151561040357600080fd5b600380546040805160e060020a630bd6c769028152600160a060020a038781166004830152602482019490945260006044820181905291519390921692630bd6c769926064808201936020939283900390910190829087803b15801561046857600080fd5b505af115801561047c573d6000803e3d6000fd5b505050506040513d602081101561049257600080fd5b50519392505050565b60015474010000000000000000000000000000000000000000900460ff1681565b600054600160a060020a03163314806104e457503360009081526005602052604090205460ff165b15156104ef57600080fd5b6104fa83838361094c565b505050565b600254600160a060020a031681565b610516611c65565b600061052183610eea565b805190925061ffff1690506105438166038d7ea4c6800063ffffffff610f6816565b608080840151604080513481526020810185905261ffff928316818301529187166060830152519293507fe804069ba6933f4f73db0b82811cd233a61f5ca5c778fa6c50c571d7c5a2c503929081900390910190a180341480156105af57506000826080015161ffff16115b15156105ba57600080fd5b600354604080517f2562e894000000000000000000000000000000000000000000000000000000008152606460048201523360ff8116602483015291516104fa938792600160a060020a0390911691632562e894916044808201926020929091908290030181600087803b15801561063157600080fd5b505af1158015610645573d6000803e3d6000fd5b505050506040513d602081101561065b57600080fd5b505161094c565b600054600160a060020a031633148061068a57503360009081526005602052604090205460ff165b151561069557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a039687161774ff0000000000000000000000000000000000000000199081167401000000000000000000000000000000000000000060ff9788168102919091179093556002805490921694909616939093179094169216909202179055565b600154600160a060020a031681565b6002547501000000000000000000000000000000000000000000900460ff1681565b6000610753611c65565b6003546040805160e060020a630bd6c7690281526000600482018190526002602483015261ffff8716604483015291516107eb93600160a060020a031692630bd6c76992606480820193602093909283900390910190829087803b1580156107ba57600080fd5b505af11580156107ce573d6000803e3d6000fd5b505050506040513d60208110156107e457600080fd5b5051610f9e565b5161ffff169392505050565b600454600160a060020a031681565b600054600160a060020a031681565b600054600160a060020a031633148061083d57503360009081526005602052604090205460ff165b151561084857600080fd5b600160a060020a03919091166000908152600560205260409020805460ff1916911515919091179055565b60056020526000908152604090205460ff1681565b600054600160a060020a03163314806108b057503360009081526005602052604090205460ff165b15156108bb57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633148061091257503360009081526005602052604090205460ff165b151561091d57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000610956611c65565b61095e611c9a565b610966611c65565b600080610971611cf6565b61097a89610eea565b9550610987868a8a611055565b6003546040805160e060020a630bd6c76902815260006004820181905260248201819052604482018190529151939850610a2193600160a060020a0390931692630bd6c76992606480840193602093929083900390910190829087803b1580156109f057600080fd5b505af1158015610a04573d6000803e3d6000fd5b505050506040513d6020811015610a1a57600080fd5b5051611103565b865190945061ffff169250610a438366038d7ea4c6800063ffffffff610f6816565b6080870151909350610a609061ffff16600163ffffffff6111af16565b61ffff1660808701528351610a819063ffffffff908116906001906111c816565b63ffffffff168085529150610a958a6103eb565b9650610aa887600163ffffffff6111e016565b600160a060020a038b1682529650610ac787600163ffffffff6111ef16565b63ffffffff908116602083015260038054604080517f0647b106000000000000000000000000000000000000000000000000000000008152600160a060020a038f811660048301526024820194909452604481018c9052938616606485015251911691630647b10691608480830192600092919082900301818387803b158015610b5057600080fd5b505af1158015610b64573d6000803e3d6000fd5b50505050600360009054906101000a9004600160a060020a0316600160a060020a0316630647b1068b600360008b6001026040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a031681526020018481526020018381526020018260001916600019168152602001945050505050600060405180830381600087803b158015610bfd57600080fd5b505af1158015610c11573d6000803e3d6000fd5b5050600354600160a060020a03169150630647b1069050600060028c610c368b6111fb565b6040805160e060020a63ffffffff8816028152600160a060020a039095166004860152602485019390935261ffff9091166044840152606483015251608480830192600092919082900301818387803b158015610c9257600080fd5b505af1158015610ca6573d6000803e3d6000fd5b5050600354600160a060020a03169150630647b10690506000600185610ccb8a61129f565b6040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a031681526020018481526020018363ffffffff1681526020018260001916600019168152602001945050505050600060405180830381600087803b158015610d3957600080fd5b505af1158015610d4d573d6000803e3d6000fd5b5050600354600160a060020a03169150630647b10690506000600a85610d72866113bc565b6040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a031681526020018481526020018363ffffffff1681526020018260001916600019168152602001945050505050600060405180830381600087803b158015610de057600080fd5b505af1158015610df4573d6000803e3d6000fd5b5050600354600160a060020a03169150630647b106905060008080610e18896113f5565b6040805160e060020a63ffffffff8816028152600160a060020a03909516600486015260248501939093526044840191909152606483015251608480830192600092919082900301818387803b158015610e7157600080fd5b505af1158015610e85573d6000803e3d6000fd5b50505050610e9283611492565b6040805161ffff8b16815263ffffffff841660208201528151600160a060020a038d16927ff5cbe560007c0144c83ca340203473af6033125969fa6eb64126cf187f88af44928290030190a250505050505050505050565b610ef2611c65565b610efa611c65565b6003546040805160e060020a630bd6c7690281526000600482018190526002602483015261ffff871660448301529151610f6193600160a060020a031692630bd6c76992606480820193602093909283900390910190829087803b1580156107ba57600080fd5b9392505050565b600080831515610f7b5760009150610f97565b50828202828482811515610f8b57fe5b0414610f9357fe5b8091505b5092915050565b610fa6611c65565b610fae611c65565b610fb6611d0d565b838152610fca81600063ffffffff61176d16565b61ffff168252610fe181600263ffffffff61178716565b60ff166020830152610ffa81600363ffffffff61178716565b60ff16604083015261101381600463ffffffff61178716565b60ff16606083015261102c81600563ffffffff61176d16565b61ffff16608083015261104681600763ffffffff61178716565b60ff1660a08301525092915050565b61105d611c9a565b6000611067611d1f565b60019150836063141561107d57600591506110e2565b6036841015801561108f5750604f8411155b1561109d57600291506110e2565b605084101580156110af5750605c8411155b156110bd57600391506110e2565b605d84101580156110cf575060628411155b156110dd57600491506110e2565b600191505b6110ec86836117a0565b90506110f981838761185d565b9695505050505050565b61110b611c65565b611113611c65565b61111b611d0d565b83815261112f81600063ffffffff6118eb16565b63ffffffff90811683526111489082906004906118eb16565b63ffffffff908116602084015261116490829060089061178716565b60ff16604083015261117d81600963ffffffff61178716565b60ff16606083015261119681600a63ffffffff61178716565b60ff16608083015261104681600b63ffffffff61178716565b600061ffff80841690831611156111c257fe5b50900390565b600082820163ffffffff8085169082161015610f9357fe5b600082820183811015610f9357fe5b6000828211156111c257fe5b6000611205611d0d565b825161121b90829060009063ffffffff61190516565b602083015161123490829060029063ffffffff61192416565b604083015161124d90829060039063ffffffff61192416565b606083015161126690829060049063ffffffff61192416565b608083015161127f90829060059063ffffffff61190516565b60a083015161129890829060079063ffffffff61192416565b5192915050565b60006112a9611d0d565b82516112bf90829060009063ffffffff61190516565b60208301516112d890829060029063ffffffff61192416565b60408301516112f190829060049063ffffffff61190516565b606083015161130a90829060069063ffffffff61190516565b608083015161132390829060089063ffffffff61190516565b60a083015161133c908290600a9063ffffffff61190516565b60c0830151611355908290600c9063ffffffff61190516565b60e083015161136e908290600e9063ffffffff61190516565b61010083015161138890829060149063ffffffff61192416565b6101208301516113a290829060159063ffffffff61192416565b61014083015161129890829060179063ffffffff61190516565b60006113c6611d0d565b82516113dc90829060009063ffffffff61194216565b602083015161129890829060149063ffffffff61196616565b60006113ff611d0d565b825161141590829060009063ffffffff61196616565b602083015161142e90829060049063ffffffff61196616565b604083015161144790829060089063ffffffff61192416565b606083015161146090829060099063ffffffff61192416565b6080830151611479908290600a9063ffffffff61192416565b60a0830151611298908290600b9063ffffffff61192416565b600354600480546040805160e060020a630bd6c769028152600160a060020a0392831693810193909352600f6024840152600060448401819052905190939190911691630bd6c76991606480830192602092919082900301818787803b1580156114fb57600080fd5b505af115801561150f573d6000803e3d6000fd5b505050506040513d602081101561152557600080fd5b5051905061155b61154e600361154285600a63ffffffff61198116565b9063ffffffff610f6816565b829063ffffffff6111e016565b60035460048054604080517f0647b106000000000000000000000000000000000000000000000000000000008152600160a060020a0392831693810193909352600f6024840152600060448401819052606484018690529051949550921692630647b1069260848084019391929182900301818387803b1580156115de57600080fd5b505af11580156115f2573d6000803e3d6000fd5b50506003546040805160e060020a630bd6c769028152600060048201819052600e6024830152604482018190529151600160a060020a039093169450630bd6c7699350606480820193602093909283900390910190829087803b15801561165857600080fd5b505af115801561166c573d6000803e3d6000fd5b505050506040513d602081101561168257600080fd5b5051905061169f61154e600761154285600a63ffffffff61198116565b600354604080517f0647b106000000000000000000000000000000000000000000000000000000008152600060048201819052600e602483015260448201819052606482018590529151939450600160a060020a0390921692630647b10692608480820193929182900301818387803b15801561171b57600080fd5b505af115801561172f573d6000803e3d6000fd5b5050600354604051600160a060020a03909116925084156108fc02915084906000818181858888f193505050501580156104fa573d6000803e3d6000fd5b905160089190910263ffffffff1660020a900461ffff1690565b905160089190910263ffffffff1660020a900460ff1690565b6117a8611d1f565b60008060006117b5611d1f565b60006117bf611d3e565b600095508594508493506117da84600163ffffffff61199816565b935061180a886117fb60028c6020015160ff1661199890919063ffffffff16565b60ff169063ffffffff61199816565b60ff16915060408051908101604052808a6040015160ff1660ff1681526020018a6060015160ff1660ff168152509050819550600894506118508187878760ff166119ad565b9998505050505050505050565b611865611c9a565b5082516020808501516040808701516060808901516080998a015184516101608101865261ffff998a16815260ff909a16968a0196909652958716928801839052928616928701929092529084169585019590955290821660a08401521660c082015260e081019190915260006101008201819052600161012083015261014082015290565b815163ffffffff60088302811660020a9091041692915050565b825163ffffffff60089093029290921660020a61ffff90911602179052565b825163ffffffff60089093029290921660020a60ff90911602179052565b825163ffffffff60089093029290921660020a600160a060020a0390911602179052565b825163ffffffff6008909302831660020a9190921602179052565b600080828481151561198f57fe5b04949350505050565b600082820160ff8085169082161015610f9357fe5b6119b5611d1f565b60006119bf611d1f565b50506040805160a08101825260018082526020820181905291810182905260608101829052608081018290526000918290819081908190611a0790439063ffffffff6111ef16565b600354604080517f2562e8940000000000000000000000000000000000000000000000000000000081526064600482015260ff8a1660248201529051924096508692600160a060020a0390921691632562e894916044808201926020929091908290030181600087803b158015611a7d57600080fd5b505af1158015611a91573d6000803e3d6000fd5b505050506040513d6020811015611aa757600080fd5b505160408051928352602083019190915280519182900301902092505b8963ffffffff168663ffffffff161015611baa57600a88600a0a84811515611ae857fe5b04811515611af257fe5b06915060058260ff161015611b0a5760009150611b0f565b600191505b611b4b6001868d60ff861660028110611b2457fe5b602002015160ff1660058110611b3657fe5b602002015161ffff169063ffffffff611c4f16565b858c60ff851660028110611b5b57fe5b602002015160ff1660058110611b6d57fe5b61ffff9092166020929092020152611b9063ffffffff808816906001906111c816565b9550611ba388600163ffffffff6111e016565b9750611ac4565b600095505b8863ffffffff168663ffffffff161015611c4057600588600a0a84811515611bd357fe5b04811515611bdd57fe5b069050611bf460018660ff841660058110611b3657fe5b8560ff831660058110611c0357fe5b61ffff9092166020929092020152611c2663ffffffff808816906001906111c816565b9550611c3988600163ffffffff6111e016565b9750611baf565b50929998505050505050505050565b600082820161ffff8085169082161015610f9357fe5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915290565b604080518082019091526000808252602082015290565b60408051602081019091526000815290565b60a0604051908101604052806005906020820280388339509192915050565b604080518082018252906002908290803883395091929150505600a165627a7a72305820591fb39f2a8fd9f98657b1eb27eeea20b22f0e4fa34742ae04efd1aa02ac13130029"
}