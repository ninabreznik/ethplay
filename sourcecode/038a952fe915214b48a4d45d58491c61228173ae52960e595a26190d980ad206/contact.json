{
  "address": "0x6c228badcf181febf7f3b4a61f8e26086942a3db",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EmcoVoucher",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-07\n*/\n\npragma solidity 0.4.24;\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n* @title Emco token\n* @dev Emco token implementation\n*/\ncontract EmcoToken is StandardToken, Ownable {\n\n\tstring public constant name = \"EmcoToken\";\n\tstring public constant symbol = \"EMCO\";\n\tuint8 public constant decimals = 18;\n\n\tuint public constant INITIAL_SUPPLY = 1500000 * (10 ** uint(decimals));\n\tuint public constant MAX_SUPPLY = 36000000 * (10 ** uint(decimals));\n\n\tmapping (address => uint) public miningBalances;\n\tmapping (address => uint) public lastMiningBalanceUpdateTime;\n\n\taddress systemAddress;\n\n\tuint public constant DAY_MINING_DEPOSIT_LIMIT = 360000 * (10 ** uint(decimals));\n\tuint public constant TOTAL_MINING_DEPOSIT_LIMIT = 3600000 * (10 ** uint(decimals));\n\tuint currentDay;\n\tuint currentDayDeposited;\n\tuint public miningTotalDeposited;\n\n\tmapping(address => bytes32) public userReferralCodes;\n\tmapping(bytes32 => address) public referralCodeOwners;\n\tmapping(address => address) public referrals;\n\n\tevent Mine(address indexed beneficiary, uint value);\n\n\tevent MiningBalanceUpdated(address indexed owner, uint amount, bool isDeposit);\n\n\tconstructor() public {\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\n\t\tsystemAddress = msg.sender;\n\t\ttotalSupply_ = INITIAL_SUPPLY;\n\t\temit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n\t}\n\n\tfunction setReferralCode(bytes32 _code) public returns (bytes32) {\n\t\trequire(_code != \"\", \"Ref code should not be empty\");\n\t\trequire(referralCodeOwners[_code] == address(0), \"This referral code is already used\");\n\t\trequire(userReferralCodes[msg.sender] == \"\", \"Referal code is already set\");\n\t\tuserReferralCodes[msg.sender] = _code;\n\t\treferralCodeOwners[_code] = msg.sender;\n\t\treturn userReferralCodes[msg.sender];\n\t}\n\n\tfunction setReferral(bytes32 _code) public {\n\t\trequire(referralCodeOwners[_code] != address(0), \"Invalid referral code\");\n\t\trequire(referrals[msg.sender] == address(0), \"You already have a referrer\");\n\t\taddress referrer = referralCodeOwners[_code];\n\t\trequire(referrer != msg.sender, \"Can not invite yourself\");\n\t\treferrals[msg.sender] = referrer;\n\t}\n\n\t/**\n\t* @dev Gets the balance of specified address (amount of tokens on main balance \n\t* plus amount of tokens on mining balance).\n\t* @param _owner The address to query the balance of.\n\t* @return An uint256 representing the amount owned by the passed address.\n\t*/\n\tfunction balanceOf(address _owner) public view returns (uint balance) {\n\t\treturn balances[_owner].add(miningBalances[_owner]);\n\t}\n\n\t/**\n\t* @dev Gets the mining balance if caller.\n\t* @param _owner The address to query the balance of.\n\t* @return An uint256 representing the amount of tokens of caller's mining balance\n\t*/\n\tfunction miningBalanceOf(address _owner) public view returns (uint balance) {\n\t\treturn miningBalances[_owner];\n\t}\n\n\t/**\n\t* @dev Moves specified amount of tokens from main balance to mining balance \n\t* @param _amount An uint256 representing the amount of tokens to transfer to main balance\n\t*/\n\tfunction depositToMiningBalance(uint _amount) public {\n\t\trequire(balances[msg.sender] >= _amount, \"not enough tokens\");\n\t\trequire(getCurrentDayDeposited().add(_amount) <= DAY_MINING_DEPOSIT_LIMIT,\n\t\t\t\"Day mining deposit exceeded\");\n\t\trequire(miningTotalDeposited.add(_amount) <= TOTAL_MINING_DEPOSIT_LIMIT,\n\t\t\t\"Total mining deposit exceeded\");\n\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_amount);\n\t\tminingBalances[msg.sender] = miningBalances[msg.sender].add(_amount);\n\t\tminingTotalDeposited = miningTotalDeposited.add(_amount);\n\t\tupdateCurrentDayDeposited(_amount);\n\t\tlastMiningBalanceUpdateTime[msg.sender] = now;\n\t\temit MiningBalanceUpdated(msg.sender, _amount, true);\n\t}\n\n\t/**\n\t* @dev Moves specified amount of tokens from mining balance to main balance\n\t* @param _amount An uint256 representing the amount of tokens to transfer to mining balance\n\t*/\n\tfunction withdrawFromMiningBalance(uint _amount) public {\n\t\trequire(miningBalances[msg.sender] >= _amount, \"not enough tokens on mining balance\");\n\n\t\tminingBalances[msg.sender] = miningBalances[msg.sender].sub(_amount);\n\t\tbalances[msg.sender] = balances[msg.sender].add(_amount);\n\n\t\t//updating mining limits\n\t\tminingTotalDeposited.sub(_amount);\n\t\tlastMiningBalanceUpdateTime[msg.sender] = now;\n\t\temit MiningBalanceUpdated(msg.sender, _amount, false);\n\t}\n\n\t/**\n\t* @dev Mine tokens. For every 24h for each user�s token on mining balance, \n\t* 1% is burnt on mining balance and Reward % is minted to the main balance. 15% fee of difference \n\t* between minted coins and burnt coins goes to system address.\n\t*/ \n\tfunction mine() public {\n\t\trequire(totalSupply_ < MAX_SUPPLY, \"mining is over\");\n\t\tuint reward = getReward(totalSupply_);\n\t\tuint daysForReward = getDaysForReward();\n\n\t\tuint mintedAmount = miningBalances[msg.sender].mul(reward.sub(1000000000))\n\t\t\t\t\t\t\t\t\t\t.mul(daysForReward).div(100000000000);\n\t\trequire(mintedAmount != 0, \"mining will not produce any reward\");\n\n\t\tuint amountToBurn = miningBalances[msg.sender].mul(daysForReward).div(100);\n\n\t\t//check exceeding max number of tokens\n\t\tif(totalSupply_.add(mintedAmount) > MAX_SUPPLY) {\n\t\t\tuint availableToMint = MAX_SUPPLY.sub(totalSupply_);\n\t\t\tamountToBurn = availableToMint.div(mintedAmount).mul(amountToBurn);\n\t\t\tmintedAmount = availableToMint;\n\t\t}\n\n\t\ttotalSupply_ = totalSupply_.add(mintedAmount);\n\n\t\tminingBalances[msg.sender] = miningBalances[msg.sender].sub(amountToBurn);\n\t\tbalances[msg.sender] = balances[msg.sender].add(amountToBurn);\n\n\t\tuint userReward;\n\t\tuint referrerReward = 0;\n\t\taddress referrer = referrals[msg.sender];\n\t\t\n\t\tif(referrer == address(0)) {\n\t\t\tuserReward = mintedAmount.mul(85).div(100);\n\t\t} else {\n\t\t\tuserReward = mintedAmount.mul(86).div(100);\n\t\t\treferrerReward = mintedAmount.div(100);\n\t\t\tbalances[referrer] = balances[referrer].add(referrerReward);\n\t\t\temit Mine(referrer, referrerReward);\n\t\t\temit Transfer(address(0), referrer, referrerReward);\n\t\t}\n\t\tbalances[msg.sender] = balances[msg.sender].add(userReward);\n\n\t\temit Mine(msg.sender, userReward);\n\t\temit Transfer(address(0), msg.sender, userReward);\n\n\t\t//update limits\n\t\tminingTotalDeposited = miningTotalDeposited.sub(amountToBurn);\n\t\temit MiningBalanceUpdated(msg.sender, amountToBurn, false);\n\n\t\t//set system fee\n\t\tuint systemFee = mintedAmount.sub(userReward).sub(referrerReward);\n\t\tbalances[systemAddress] = balances[systemAddress].add(systemFee);\n\n\t\temit Mine(systemAddress, systemFee);\n\t\temit Transfer(address(0), systemAddress, systemFee);\n\n\t\tlastMiningBalanceUpdateTime[msg.sender] = now;\n\t}\n\n\t/**\n\t* @dev Set system address\n\t* @param _systemAddress An address to set\n\t*/\n\tfunction setSystemAddress(address _systemAddress) public onlyOwner {\n\t\tsystemAddress = _systemAddress;\n\t}\n\n\t/**\n\t* @dev Get sum of deposits to mining accounts for current day\n\t*/\n\tfunction getCurrentDayDeposited() public view returns (uint) {\n\t\tif(now / 1 days == currentDay) {\n\t\t\treturn currentDayDeposited;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t* @dev Get number of days for reward on mining. Maximum 100 days.\n\t* @return An uint256 representing number of days user will get reward for.\n\t*/\n\tfunction getDaysForReward() public view returns (uint rewardDaysNum){\n\t\tif(lastMiningBalanceUpdateTime[msg.sender] == 0) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tuint value = (now - lastMiningBalanceUpdateTime[msg.sender]) / (1 days);\n\t\t\tif(value > 100) {\n\t\t\t\treturn 100;\n\t\t\t} else {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* @dev Calculate current mining reward based on total supply of tokens\n\t* @return An uint256 representing reward in percents multiplied by 1000000000\n\t*/\n\tfunction getReward(uint _totalSupply) public pure returns (uint rewardPercent){\n\t\tuint rewardFactor = 1000000 * (10 ** uint256(decimals));\n\t\tuint decreaseFactor = 41666666;\n\n\t\tif(_totalSupply < 23 * rewardFactor) {\n\t\t\treturn 2000000000 - (decreaseFactor.mul(_totalSupply.div(rewardFactor)));\n\t\t}\n\n\t\tif(_totalSupply < MAX_SUPPLY) {\n\t\t\treturn 1041666666;\n\t\t} else {\n\t\t\treturn 1000000000;\n\t\t} \n\t}\n\n\tfunction updateCurrentDayDeposited(uint _addedTokens) private {\n\t\tif(now / 1 days == currentDay) {\n\t\t\tcurrentDayDeposited = currentDayDeposited.add(_addedTokens);\n\t\t} else {\n\t\t\tcurrentDay = now / 1 days;\n\t\t\tcurrentDayDeposited = _addedTokens;\n\t\t}\n\t}\n\n}\n\n/**\n* @title Emco voucher\n* @dev Emco voucher implementation\n*/\ncontract EmcoVoucher is Ownable {\n\n\taddress signerAddress;\n\tEmcoToken public token;\n\n\tmapping (uint => bool) usedNonces;\n\n\tevent VoucherRedemption(address indexed caller, uint indexed nonce, uint amount);\n\n\tconstructor(EmcoToken _token) public {\n\t\trequire(_token != address(0), \"token address should not be empty\");\n\t\ttoken = _token;\n\t}\n\n\t/**\n\t* @dev Sets the signer address. Signatures of vouchers would be checked with this address.\n\t* @param _address address of signer\n\t*/\n\tfunction setSignerAddress(address _address) public onlyOwner {\n\t\trequire(_address != address(0), \"signer address should not be empty\");\n\t\tsignerAddress = _address;\n\t}\n\n\t/**\n\t* @dev Function to withdraw tokens from conract. Is awailable only for token owner\n\t* @param _to Address tokens would be sent to\n\t* @param _amount An uint256 representing amount of tokens than would be sent\n\t*/\n\tfunction withdrawTokens(address _to, uint _amount) public onlyOwner {\n\t\ttoken.transfer(_to, _amount);\n\t}\n\n\t/**\n\t* @dev Check if nonce is used\n\t* @param _nonce Nonce to check\n\t* @return True is nonce is used\n\t*/\n\tfunction isNonceUsed(uint _nonce) public view returns (bool isUsed) {\n\t\treturn usedNonces[_nonce];\n\t}\n\n\t/**\n\t* @dev Activates voucher. Checks nonce amount and signature and if it is correct\n\t* send amount of tokens to caller\n\t* @param nonce voucher's nonce\n\t* @param amount voucher's amount\n\t* @param signature voucher's signature\n\t*/\n\tfunction activateVoucher(uint256 nonce, uint256 amount, bytes signature) public {\n\t\trequire(!usedNonces[nonce], \"nonce is already used\");\n\t\trequire(nonce != 0, \"nonce should be greater than zero\");\n\t\trequire(amount != 0, \"amount should be greater than zero\");\n\t\tusedNonces[nonce] = true;\n\n\t\taddress beneficiary = msg.sender;\n\n\t\tbytes32 message = prefixed(keccak256(abi.encodePacked(\n\t\t\tthis,\n\t\t\tnonce,\n\t\t\tamount,\n\t\t  beneficiary)));\n\n\t\taddress signedBy = recoverSigner(message, signature);\n\t\trequire(signedBy == signerAddress);\n\n\t\trequire(token.transfer(beneficiary, amount));\n\t\temit VoucherRedemption(msg.sender, nonce, amount);\n\t}\n\n\tfunction splitSignature(bytes sig) internal pure returns (uint8, bytes32, bytes32) {\n\t\trequire(sig.length == 65);\n\n\t\tbytes32 r;\n\t\tbytes32 s;\n\t\tuint8 v;\n\n\t\tassembly {\n\t\t\tr := mload(add(sig, 32))\n\t\t\ts := mload(add(sig, 64))\n\t\t\tv := byte(0, mload(add(sig, 96)))\n\t\t}\n\n\t\treturn (v, r, s);\n\t}\n\n\tfunction recoverSigner(bytes32 message, bytes sig) internal pure returns (address) {\n\t\tuint8 v;\n\t\tbytes32 r;\n\t\tbytes32 s;\n\n\t\t(v, r, s) = splitSignature(sig);\n\n\t\treturn ecrecover(message, v, r, s);\n\t}\n\n\t// Builds a prefixed hash to mimic the behavior of eth_sign.\n\tfunction prefixed(bytes32 hash) internal pure returns (bytes32) {\n\t\treturn keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n\t}\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSignerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"isNonceUsed\",\"outputs\":[{\"name\":\"isUsed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"activateVoucher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VoucherRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610a6f833981016040525160008054600160a060020a03191633179055600160a060020a03811615156100d157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f746f6b656e20616464726573732073686f756c64206e6f7420626520656d707460448201527f7900000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60028054600160a060020a031916600160a060020a039290921691909117905561096f806101006000396000f30060806040526004361061008d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663046dc166811461009257806306b091f9146100b55780635d00bb12146100d9578063715018a6146101055780638da5cb5b1461011a578063dc21d5211461014b578063f2fde38b146101ab578063fc0c546a146101cc575b600080fd5b34801561009e57600080fd5b506100b3600160a060020a03600435166101e1565b005b3480156100c157600080fd5b506100b3600160a060020a03600435166024356102ad565b3480156100e557600080fd5b506100f1600435610363565b604080519115158252519081900360200190f35b34801561011157600080fd5b506100b3610378565b34801561012657600080fd5b5061012f6103e4565b60408051600160a060020a039092168252519081900360200190f35b34801561015757600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526100b39482359460248035953695946064949201919081908401838280828437509497506103f39650505050505050565b3480156101b757600080fd5b506100b3600160a060020a036004351661072a565b3480156101d857600080fd5b5061012f61074d565b600054600160a060020a031633146101f857600080fd5b600160a060020a038116151561027e576040805160e560020a62461bcd02815260206004820152602260248201527f7369676e657220616464726573732073686f756c64206e6f7420626520656d7060448201527f7479000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633146102c457600080fd5b600254604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561033357600080fd5b505af1158015610347573d6000803e3d6000fd5b505050506040513d602081101561035d57600080fd5b50505050565b60009081526003602052604090205460ff1690565b600054600160a060020a0316331461038f57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b6000838152600360205260408120548190819060ff161561045e576040805160e560020a62461bcd02815260206004820152601560248201527f6e6f6e636520697320616c726561647920757365640000000000000000000000604482015290519081900360640190fd5b8515156104db576040805160e560020a62461bcd02815260206004820152602160248201527f6e6f6e63652073686f756c642062652067726561746572207468616e207a657260448201527f6f00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b841515610558576040805160e560020a62461bcd02815260206004820152602260248201527f616d6f756e742073686f756c642062652067726561746572207468616e207a6560448201527f726f000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600086815260036020908152604091829020805460ff1916600117905581516c0100000000000000000000000030810282840152603482018a90526054820189905233908102607483015283516068818403018152608890920193849052815190965061061c9391928291908401908083835b602083106105ea5780518252601f1990920191602091820191016105cb565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902061075c565b91506106288285610806565b600154909150600160a060020a0380831691161461064557600080fd5b600254604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018990529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156106b457600080fd5b505af11580156106c8573d6000803e3d6000fd5b505050506040513d60208110156106de57600080fd5b505115156106eb57600080fd5b604080518681529051879133917f63a68ae837e5978794ee766a078db1dd98e02ca34057b407e853b89534e9568f9181900360200190a3505050505050565b600054600160a060020a0316331461074157600080fd5b61074a8161088d565b50565b600254600160a060020a031681565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c80830185905283518084039091018152605c909201928390528151600093918291908401908083835b602083106107d45780518252601f1990920191602091820191016107b5565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b6000806000806108158561090a565b60408051600080825260208083018085528d905260ff8716838501526060830186905260808301859052925195985093965091945060019360a0808401949293601f19830193908390039091019190865af1158015610878573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b600160a060020a03811615156108a257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806000806000808651604114151561092357600080fd5b505050506020830151604084015160609094015160001a949093925090505600a165627a7a72305820a4a83defada8b821d3dc906c4d3ea5a572b78cd6acf16449b2c814e2eaf4d0660029000000000000000000000000d97e471695f73d8186deabc1ab5b8765e667cd96",
  "constructorArguments": "000000000000000000000000d97e471695f73d8186deabc1ab5b8765e667cd96"
}