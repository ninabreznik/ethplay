{
  "address": "0x45c948b783f8e1cc5e197a09002e1d75f2a2cbbe",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Staking",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-08\n*/\n\npragma solidity ^0.4.25;\n\n /*\n  * @title: SafeMath\n  * @dev: Helper contract functions to arithmatic operations safely.\n  */\ncontract SafeMath {\n    function Sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n    \n        return c;\n    }\n    function Add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n    function Mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n}\n\n /*\n  * @title: Token\n  * @dev: Interface contract for ERC20 tokens\n  */\ncontract Token {\n      function totalSupply() public view returns (uint256 supply);\n      function balanceOf(address _owner) public view returns (uint256 balance);\n      function transfer(address _to, uint256 _value) public returns (bool success);\n      function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n      function approve(address _spender, uint256 _value) public returns (bool success);\n      function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n      event Transfer(address indexed _from, address indexed _to, uint256 _value);\n      event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n /*\n  * @title: Staking\n  * @author BlockBank (https://www.blockbank.co.kr)\n  */\ncontract Staking is SafeMath\n{\n    // _prAddress: ERC20 contract address\n    // msg.sender: owner && operator\n    constructor(address _prAddress) public\n    {\n        owner = msg.sender;\n        operator = owner;\n        prAddress = _prAddress;\n        isContractUse = true;\n    }\n\n    address public owner;\n    // Functions with this modifier can only be executed by the owner\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    address public operator;\n    // Functions with this modifier can only be executed by the operator\n    modifier onlyOperator() {\n        require(msg.sender == operator);\n        _;\n    }\n    function transferOperator(address _operator) onlyOwner public {\n        operator = _operator;\n    }\n    \n    bool public isContractUse;\n    // Functions with this modifier can only be executed when this contract is not abandoned\n    modifier onlyContractUse {\n        require(isContractUse == true);\n        _;\n    }\n    \n    function SetContractUse(bool _isContractUse) onlyOperator public{\n        isContractUse = _isContractUse;\n    }\n\n    uint32 public lastAcccountId;\n    mapping (uint32 => address) id_account;\n    mapping (uint32 => bool) accountId_freeze;\n    mapping (address => uint32) account_id;\n    // Find or add account\n    function FindOrAddAccount(address findAddress) private returns (uint32)\n    {\n        if (account_id[findAddress] == 0)\n        {\n            account_id[findAddress] = ++lastAcccountId;\n            id_account[lastAcccountId] = findAddress;\n        }\n        return account_id[findAddress];\n    }\n    // Find or revert account\n    function FindOrRevertAccount() private view returns (uint32)\n    {\n        uint32 accountId = account_id[msg.sender];\n        require(accountId != 0);\n        return accountId;\n    }\n    // Get account id of msg sender\n    function GetMyAccountId() view public returns (uint32)\n    {\n        return account_id[msg.sender];\n    }\n    // Get account id of any users\n    function GetAccountId(address account) view public returns (uint32)\n    {\n        return account_id[account];\n    }\n    // Freeze or unfreez of account\n    function SetFreezeByAddress(bool isFreeze, address account) onlyOperator public\n    {\n        uint32 accountId = account_id[account];\n\n        if (accountId != 0)\n        {\n            accountId_freeze[accountId] = isFreeze;\n        }\n    }\n    function IsFreezeByAddress(address account) public view returns (bool)\n    {\n        uint32 accountId = account_id[account];\n        \n        if (accountId != 0)\n        {\n            return accountId_freeze[accountId];\n        }\n        return false;\n    }\n\n    // reserved: Balance held up in orderBook\n    // available: Balance available for trade\n    struct Balance\n    {\n        uint256 available;\n        uint256 maturity;\n    }\n\n    struct ListItem\n    {\n        uint32 prev;\n        uint32 next;\n    }\n\n    mapping (uint32 => Balance) AccountId_Balance;\n    \n    uint256 public totalBonus;\n    address public prAddress;\n    \n    uint256 public interest6weeks; //bp\n    uint256 public interest12weeks; //bp\n    \n    // set interst for each holding period: 6 / 12 weeks\n    function SetInterest(uint256 _interest6weeks, uint256 _interest12weeks) onlyOperator public\n    {\n        interest6weeks = _interest6weeks;    \n        interest12weeks = _interest12weeks;\n    }\n    \n    // deposit bonus to pay interest\n    function depositBonus(uint256 amount) onlyOwner public\n    {\n        require(Token(prAddress).transferFrom(msg.sender, this, amount));\n        \n        totalBonus = Add(totalBonus, amount);\n    }\n    \n    // withdraw bonus to owner account\n    function WithdrawBonus(uint256 amount) onlyOwner public\n    {\n        require(Token(prAddress).transfer(msg.sender, amount));\n        totalBonus = Sub(totalBonus, amount);\n    }\n\n    // Deposit ERC20's for saving\n    function storeToken6Weeks(uint256 amount) onlyContractUse public\n    {\n        uint32 accountId = FindOrAddAccount(msg.sender);\n        require(accountId_freeze[accountId] == false);\n        require(AccountId_Balance[accountId].available == 0);\n        \n        require(Token(prAddress).transferFrom(msg.sender, this, amount));\n        \n        uint256 interst = Mul(amount, interest6weeks) / 10000;\n        \n        totalBonus = Sub(totalBonus, interst);\n        AccountId_Balance[accountId].available = Add(AccountId_Balance[accountId].available, amount + interst);\n        AccountId_Balance[accountId].maturity = now + 6 weeks;\n    }\n    // Deposit ERC20's for saving\n    function storeToken12Weeks(uint128 amount) onlyContractUse public\n    {\n        uint32 accountId = FindOrAddAccount(msg.sender);\n        require(accountId_freeze[accountId] == false);\n        require(AccountId_Balance[accountId].available == 0);\n        \n        require(Token(prAddress).transferFrom(msg.sender, this, amount));\n        \n        uint256 interst = Mul(amount, interest12weeks) / 10000;\n        \n        totalBonus = Sub(totalBonus, interst);\n        AccountId_Balance[accountId].available = Add(AccountId_Balance[accountId].available, amount + interst);\n        AccountId_Balance[accountId].maturity = now + 12 weeks;\n    }\n    // Withdraw ERC20's to personal addresstrue\n    function withdrawToken() public\n    {\n        uint32 accountId = FindOrAddAccount(msg.sender);\n        require(AccountId_Balance[accountId].maturity < now);\n        uint256 amount = AccountId_Balance[accountId].available; \n        require(amount > 0);\n        AccountId_Balance[accountId].available = 0;\n        require(Token(prAddress).transfer(msg.sender, amount));\n    }\n\n    // Below two emergency functions will be never used in normal situations.\n    // These function is only prepared for emergency case such as smart contract hacking Vulnerability or smart contract abolishment\n    // Withdrawn fund by these function cannot belong to any operators or owners.\n    // Withdrawn fund should be distributed to individual accounts having original ownership of withdrawn fund.\n    \n    function emergencyWithdrawalETH(uint256 amount) onlyOwner public\n    {\n        require(msg.sender.send(amount));\n    }\n    function emergencyWithdrawalToken(uint256 amount) onlyOwner public\n    {\n        Token(prAddress).transfer(msg.sender, amount);\n    }\n\n    function getMyBalance() view public returns (uint256 available, uint256 maturity)\n    {\n        uint32 accountId = FindOrRevertAccount();\n        available = AccountId_Balance[accountId].available;\n        maturity = AccountId_Balance[accountId].maturity;\n    }\n    \n    function getTimeStamp() view public returns (uint256)\n    {\n        return now;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000006beb418fc6e1958204ac8baddcf109b8e96949660000000000000000000000006beb418fc6e1958204ac8baddcf109b8e9694966"
}