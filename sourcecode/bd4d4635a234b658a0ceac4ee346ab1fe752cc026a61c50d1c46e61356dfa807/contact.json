{
  "address": "0x7b2f9706cd8473b4f5b7758b0171a9933fc6c4d6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthealPromoToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-07\n*/\n\npragma solidity ^0.4.17;\n\n/**\n * @title ERC20\n * @dev ERC20 interface\n */\ncontract ERC20 {\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/// @dev Crowdsale interface for Etheal Normal Sale, functions needed from outside.\ncontract iEthealSale {\n    bool public paused;\n    uint256 public minContribution;\n    uint256 public whitelistThreshold;\n    mapping (address => uint256) public stakes;\n    function setPromoBonus(address _investor, uint256 _value) public;\n    function buyTokens(address _beneficiary) public payable;\n    function depositEth(address _beneficiary, uint256 _time, bytes _whitelistSign) public payable;\n    function depositOffchain(address _beneficiary, uint256 _amount, uint256 _time) public;\n    function hasEnded() public constant returns (bool);\n}\n\n\n\n\n\n\n/**\n * @title claim accidentally sent tokens\n */\ncontract HasNoTokens is Ownable {\n    event ExtractedTokens(address indexed _token, address indexed _claimer, uint _amount);\n\n    /// @notice This method can be used to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    /// @param _claimer Address that tokens will be send to\n    function extractTokens(address _token, address _claimer) onlyOwner public {\n        if (_token == 0x0) {\n            _claimer.transfer(this.balance);\n            return;\n        }\n\n        ERC20 token = ERC20(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(_claimer, balance);\n        ExtractedTokens(_token, _claimer, balance);\n    }\n}\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/*\n * ERC-20 Standard Token Smart Contract Interface.\n * Copyright © 2016–2017 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n/**\n * ERC-20 standard token interface, as defined\n * <a href=\"http://github.com/ethereum/EIPs/issues/20\">here</a>.\n */\ncontract Token {\n    /**\n     * Get total number of tokens in circulation.\n     *\n     * @return total number of tokens in circulation\n     */\n    function totalSupply () view returns (uint256 supply);\n\n    /**\n     * Get number of tokens currently belonging to given owner.\n     *\n     * @param _owner address to get number of tokens currently belonging to the\n     *        owner of\n     * @return number of tokens currently belonging to the owner of given address\n     */\n    function balanceOf (address _owner) view returns (uint256 balance);\n\n    /**\n     * Transfer given number of tokens from message sender to given recipient.\n     *\n     * @param _to address to transfer tokens to the owner of\n     * @param _value number of tokens to transfer to the owner of given address\n     * @return true if tokens were transferred successfully, false otherwise\n     */\n    function transfer (address _to, uint256 _value) returns (bool success);\n\n    /**\n     * Transfer given number of tokens from given owner to given recipient.\n     *\n     * @param _from address to transfer tokens from the owner of\n     * @param _to address to transfer tokens to the owner of\n     * @param _value number of tokens to transfer from given owner to given\n     *        recipient\n     * @return true if tokens were transferred successfully, false otherwise\n     */\n    function transferFrom (address _from, address _to, uint256 _value) returns (bool success);\n\n    /**\n     * Allow given spender to transfer given number of tokens from message sender.\n     *\n     * @param _spender address to allow the owner of to transfer tokens from\n     *        message sender\n     * @param _value number of tokens to allow to transfer\n     * @return true if token transfer was successfully approved, false otherwise\n     */\n    function approve (address _spender, uint256 _value) returns (bool success);\n\n    /**\n     * Tell how many tokens given spender is currently allowed to transfer from\n     * given owner.\n     *\n     * @param _owner address to get number of tokens allowed to be transferred\n     *        from the owner of\n     * @param _spender address to get number of tokens allowed to be transferred\n     *        by the owner of\n     * @return number of tokens given spender is currently allowed to transfer\n     *         from given owner\n     */\n    function allowance (address _owner, address _spender) view returns (uint256 remaining);\n\n    /**\n     * Logged when tokens were transferred from one owner to another.\n     *\n     * @param _from address of the owner, tokens were transferred from\n     * @param _to address of the owner, tokens were transferred to\n     * @param _value number of tokens transferred\n     */\n    event Transfer (address indexed _from, address indexed _to, uint256 _value);\n\n    /**\n     * Logged when owner approved his tokens to be transferred by some spender.\n     *\n     * @param _owner owner who approved his tokens to be transferred\n     * @param _spender spender who were allowed to transfer the tokens belonging\n     *        to the owner\n     * @param _value number of tokens belonging to the owner, approved to be\n     *        transferred by the spender\n     */\n    event Approval (address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/*\n * Abstract Token Smart Contract.  Copyright © 2017 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n * Modified to use SafeMath library by thesved\n */\n/**\n * Abstract Token Smart Contract that could be used as a base contract for\n * ERC-20 token contracts.\n */\ncontract AbstractToken is Token {\n    using SafeMath for uint;\n\n    /**\n     * Create new Abstract Token contract.\n     */\n    function AbstractToken () {\n        // Do nothing\n    }\n\n    /**\n     * Get number of tokens currently belonging to given owner.\n     *\n     * @param _owner address to get number of tokens currently belonging to the owner\n     * @return number of tokens currently belonging to the owner of given address\n     */\n    function balanceOf (address _owner) view returns (uint256 balance) {\n        return accounts[_owner];\n    }\n\n    /**\n     * Transfer given number of tokens from message sender to given recipient.\n     *\n     * @param _to address to transfer tokens to the owner of\n     * @param _value number of tokens to transfer to the owner of given address\n     * @return true if tokens were transferred successfully, false otherwise\n     */\n    function transfer (address _to, uint256 _value) returns (bool success) {\n        uint256 fromBalance = accounts[msg.sender];\n        if (fromBalance < _value) return false;\n        if (_value > 0 && msg.sender != _to) {\n            accounts[msg.sender] = fromBalance.sub(_value);\n            accounts[_to] = accounts[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n        }\n        return true;\n    }\n\n    /**\n     * Transfer given number of tokens from given owner to given recipient.\n     *\n     * @param _from address to transfer tokens from the owner of\n     * @param _to address to transfer tokens to the owner of\n     * @param _value number of tokens to transfer from given owner to given recipient\n     * @return true if tokens were transferred successfully, false otherwise\n     */\n    function transferFrom (address _from, address _to, uint256 _value) returns (bool success) {\n        uint256 spenderAllowance = allowances[_from][msg.sender];\n        if (spenderAllowance < _value) return false;\n        uint256 fromBalance = accounts[_from];\n        if (fromBalance < _value) return false;\n\n        allowances[_from][msg.sender] = spenderAllowance.sub(_value);\n\n        if (_value > 0 && _from != _to) {\n            accounts[_from] = fromBalance.sub(_value);\n            accounts[_to] = accounts[_to].add(_value);\n            Transfer(_from, _to, _value);\n        }\n        return true;\n    }\n\n    /**\n     * Allow given spender to transfer given number of tokens from message sender.\n     *\n     * @param _spender address to allow the owner of to transfer tokens from\n     *        message sender\n     * @param _value number of tokens to allow to transfer\n     * @return true if token transfer was successfully approved, false otherwise\n     */\n    function approve (address _spender, uint256 _value) returns (bool success) {\n        allowances[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    /**\n     * Tell how many tokens given spender is currently allowed to transfer from\n     * given owner.\n     *\n     * @param _owner address to get number of tokens allowed to be transferred from the owner\n     * @param _spender address to get number of tokens allowed to be transferred by the owner\n     * @return number of tokens given spender is currently allowed to transfer from given owner\n     */\n    function allowance (address _owner, address _spender) view returns (uint256 remaining) {\n        return allowances[_owner][_spender];\n    }\n\n    /**\n     * Mapping from addresses of token holders to the numbers of tokens belonging\n     * to these token holders.\n     */\n    mapping (address => uint256) accounts;\n\n    /**\n     * Mapping from addresses of token holders to the mapping of addresses of\n     * spenders to the allowances set by these token holders to these spenders.\n     */\n    mapping (address => mapping (address => uint256)) private allowances;\n}\n\n\n/*\n * Abstract Virtual Token Smart Contract.  Copyright © 2017 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n * Modified to use SafeMath library by thesved\n */\n\n/**\n * Abstract Token Smart Contract that could be used as a base contract for\n * ERC-20 token contracts supporting virtual balance.\n */\ncontract AbstractVirtualToken is AbstractToken {\n    using SafeMath for uint;\n\n    /**\n     * Maximum number of real (i.e. non-virtual) tokens in circulation (2^255-1).\n     */\n    uint256 constant MAXIMUM_TOKENS_COUNT = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    /**\n     * Mask used to extract real balance of an account (2^255-1).\n     */\n    uint256 constant BALANCE_MASK = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    /**\n     * Mask used to extract \"materialized\" flag of an account (2^255).\n     */\n    uint256 constant MATERIALIZED_FLAG_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\n\n    /**\n     * Create new Abstract Virtual Token contract.\n     */\n    function AbstractVirtualToken () {\n        // Do nothing\n    }\n\n    /**\n     * Get total number of tokens in circulation.\n     *\n     * @return total number of tokens in circulation\n     */\n    function totalSupply () view returns (uint256 supply) {\n        return tokensCount;\n    }\n\n    /**\n     * Get number of tokens currently belonging to given owner.\n     *\n     * @param _owner address to get number of tokens currently belonging to the owner\n     * @return number of tokens currently belonging to the owner of given address\n    */\n    function balanceOf (address _owner) constant returns (uint256 balance) { \n        return (accounts[_owner] & BALANCE_MASK).add(getVirtualBalance(_owner));\n    }\n\n    /**\n     * Transfer given number of tokens from message sender to given recipient.\n     *\n     * @param _to address to transfer tokens to the owner of\n     * @param _value number of tokens to transfer to the owner of given address\n     * @return true if tokens were transferred successfully, false otherwise\n     */\n    function transfer (address _to, uint256 _value) returns (bool success) {\n        if (_value > balanceOf(msg.sender)) return false;\n        else {\n            materializeBalanceIfNeeded(msg.sender, _value);\n            return AbstractToken.transfer(_to, _value);\n        }\n    }\n\n    /**\n     * Transfer given number of tokens from given owner to given recipient.\n     *\n     * @param _from address to transfer tokens from the owner of\n     * @param _to address to transfer tokens to the owner of\n     * @param _value number of tokens to transfer from given owner to given\n     *        recipient\n     * @return true if tokens were transferred successfully, false otherwise\n     */\n    function transferFrom (address _from, address _to, uint256 _value) returns (bool success) {\n        if (_value > allowance(_from, msg.sender)) return false;\n        if (_value > balanceOf(_from)) return false;\n        else {\n            materializeBalanceIfNeeded(_from, _value);\n            return AbstractToken.transferFrom(_from, _to, _value);\n        }\n    }\n\n    /**\n     * Get virtual balance of the owner of given address.\n     *\n     * @param _owner address to get virtual balance for the owner of\n     * @return virtual balance of the owner of given address\n     */\n    function virtualBalanceOf (address _owner) internal view returns (uint256 _virtualBalance);\n\n    /**\n     * Calculate virtual balance of the owner of given address taking into account\n     * materialized flag and total number of real tokens already in circulation.\n     */\n    function getVirtualBalance (address _owner) private view returns (uint256 _virtualBalance) {\n        if (accounts [_owner] & MATERIALIZED_FLAG_MASK != 0) return 0;\n        else {\n            _virtualBalance = virtualBalanceOf(_owner);\n            uint256 maxVirtualBalance = MAXIMUM_TOKENS_COUNT.sub(tokensCount);\n            if (_virtualBalance > maxVirtualBalance)\n                _virtualBalance = maxVirtualBalance;\n        }\n    }\n\n    /**\n     * Materialize virtual balance of the owner of given address if this will help\n     * to transfer given number of tokens from it.\n     *\n     * @param _owner address to materialize virtual balance of\n     * @param _value number of tokens to be transferred\n     */\n    function materializeBalanceIfNeeded (address _owner, uint256 _value) private {\n        uint256 storedBalance = accounts[_owner];\n        if (storedBalance & MATERIALIZED_FLAG_MASK == 0) {\n            // Virtual balance is not materialized yet\n            if (_value > storedBalance) {\n                // Real balance is not enough\n                uint256 virtualBalance = getVirtualBalance(_owner);\n                require (_value.sub(storedBalance) <= virtualBalance);\n                accounts[_owner] = MATERIALIZED_FLAG_MASK | storedBalance.add(virtualBalance);\n                tokensCount = tokensCount.add(virtualBalance);\n            }\n        }\n    }\n\n    /**\n    * Number of real (i.e. non-virtual) tokens in circulation.\n    */\n    uint256 tokensCount;\n}\n\n\n/**\n * Etheal Promo ERC-20 contract\n * Author: thesved\n */\ncontract EthealPromoToken is HasNoTokens, AbstractVirtualToken {\n    // Balance threshold to assign virtual tokens to the owner of higher balances then this threshold.\n    uint256 private constant VIRTUAL_THRESHOLD = 0.1 ether;\n\n    // Number of virtual tokens to assign to the owners of balances higher than virtual threshold.\n    uint256 private constant VIRTUAL_COUNT = 911;\n\n    // crowdsale to set bonus when sending token\n    iEthealSale public crowdsale;\n\n    // logging promo token activation\n    event LogBonusSet(address indexed _address, uint256 _amount);\n\n    ////////////////\n    // Basic functions\n    ////////////////\n\n    /// @dev Constructor, crowdsale address can be 0x0\n    function EthealPromoToken(address _crowdsale) {\n        crowdsale = iEthealSale(_crowdsale);\n    }\n\n    /// @dev Setting crowdsale, crowdsale address can be 0x0\n    function setCrowdsale(address _crowdsale) public onlyOwner {\n        crowdsale = iEthealSale(_crowdsale);\n    }\n\n    /// @notice Get virtual balance of the owner of given address.\n    /// @param _owner address to get virtual balance for the owner\n    /// @return virtual balance of the owner of given address\n    function virtualBalanceOf(address _owner) internal view returns (uint256) {\n        return _owner.balance >= VIRTUAL_THRESHOLD ? VIRTUAL_COUNT : 0;\n    }\n\n    /// @notice Get name of this token.\n    function name() public pure returns (string result) {\n        return \"An Etheal Promo\";\n    }\n\n    /// @notice Get symbol of this token.\n    function symbol() public pure returns (string result) {\n        return \"HEALP\";\n    }\n\n    /// @notice Get number of decimals for this token.\n    function decimals() public pure returns (uint8 result) {\n        return 0;\n    }\n\n\n    ////////////////\n    // Set sale bonus\n    ////////////////\n\n    /// @dev Internal function for setting sale bonus\n    function setSaleBonus(address _from, address _to, uint256 _value) internal {\n        if (address(crowdsale) == address(0)) return;\n        if (_value == 0) return;\n\n        if (_to == address(1) || _to == address(this) || _to == address(crowdsale)) {\n            crowdsale.setPromoBonus(_from, _value);\n            LogBonusSet(_from, _value);\n        }\n    }\n\n    /// @dev Override transfer function to set sale bonus\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        bool success = super.transfer(_to, _value); \n\n        if (success) {\n            setSaleBonus(msg.sender, _to, _value);\n        }\n\n        return success;\n    }\n\n    /// @dev Override transfer function to set sale bonus\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        bool success = super.transferFrom(_from, _to, _value);\n\n        if (success) {\n            setSaleBonus(_from, _to, _value);\n        }\n\n        return success;\n    }\n\n\n    ////////////////\n    // Extra\n    ////////////////\n\n    /// @notice Notify owners about their virtual balances.\n    function massNotify(address[] _owners) public onlyOwner {\n        for (uint256 i = 0; i < _owners.length; i++) {\n            Transfer(address(0), _owners[i], VIRTUAL_COUNT);\n        }\n    }\n\n    /// @notice Kill this smart contract.\n    function kill() public onlyOwner {\n        selfdestruct(owner);\n    }\n\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"massNotify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"setCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"extractTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogBonusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ExtractedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051602080611bb683398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611af2806100c46000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100eb578063095ea7b31461017b5780630e6848cc146101e057806318160ddd1461024657806323b872dd14610271578063313ce567146102f657806341c0e1b514610327578063483a20b21461033e57806370a08231146103815780638da5cb5b146103d857806395d89b411461042f5780639c1e03a0146104bf578063a9059cbb14610516578063dd62ed3e1461057b578063ed6b2d7d146105f2578063f2fde38b14610655575b600080fd5b3480156100f757600080fd5b50610100610698565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610140578082015181840152602081019050610125565b50505050905090810190601f16801561016d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018757600080fd5b506101c6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106d5565b604051808215151515815260200191505060405180910390f35b3480156101ec57600080fd5b50610244600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506107c7565b005b34801561025257600080fd5b5061025b6108c2565b6040518082815260200191505060405180910390f35b34801561027d57600080fd5b506102dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108cc565b604051808215151515815260200191505060405180910390f35b34801561030257600080fd5b5061030b6108f9565b604051808260ff1660ff16815260200191505060405180910390f35b34801561033357600080fd5b5061033c610901565b005b34801561034a57600080fd5b5061037f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610996565b005b34801561038d57600080fd5b506103c2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a35565b6040518082815260200191505060405180910390f35b3480156103e457600080fd5b506103ed610aba565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043b57600080fd5b50610444610adf565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610484578082015181840152602081019050610469565b50505050905090810190601f1680156104b15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104cb57600080fd5b506104d4610b1c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052257600080fd5b50610561600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b42565b604051808215151515815260200191505060405180910390f35b34801561058757600080fd5b506105dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b6d565b6040518082815260200191505060405180910390f35b3480156105fe57600080fd5b50610653600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bf4565b005b34801561066157600080fd5b50610696600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610efa565b005b60606040805190810160405280600f81526020017f416e2045746865616c2050726f6d6f0000000000000000000000000000000000815250905090565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561082457600080fd5b600090505b81518110156108be57818181518110151561084057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61038f6040518082815260200191505060405180910390a38080600101915050610829565b5050565b6000600354905090565b6000806108da85858561104f565b905080156108ee576108ed8585856110a3565b5b809150509392505050565b600080905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561095c57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109f157600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610ab3610a4383611302565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054166113ce90919063ffffffff16565b9050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606040805190810160405280600581526020017f4845414c50000000000000000000000000000000000000000000000000000000815250905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610b4f84846113ec565b90508015610b6357610b623385856110a3565b5b8091505092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c5257600080fd5b60008473ffffffffffffffffffffffffffffffffffffffff161415610cd4578273ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610cce573d6000803e3d6000fd5b50610ef4565b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610d7257600080fd5b505af1158015610d86573d6000803e3d6000fd5b505050506040513d6020811015610d9c57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610e5257600080fd5b505af1158015610e66573d6000803e3d6000fd5b505050506040513d6020811015610e7c57600080fd5b8101908080519060200190929190505050508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f21e9b296e283cad208b551b3c383bb74e34086eb5691fee8392dcce6794521c2836040518082815260200191505060405180910390a35b50505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f5557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610f9157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061105b8433610b6d565b82111561106b576000905061109c565b61107484610a35565b821115611084576000905061109c565b61108e8483611424565b611099848484611563565b90505b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110ff576112fd565b600081141561110d576112fd565b600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061117357503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806111cb5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156112fc57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe6129d584836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561129557600080fd5b505af11580156112a9573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167f1a136311bba82389e57d60a192c7634dec77563c2c972c269c9c7841c27bbf35826040518082815260200191505060405180910390a25b5b505050565b60008060007f8000000000000000000000000000000000000000000000000000000000000000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541614151561137957600091506113c8565b6113828361187e565b91506113b96003547f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6118b990919063ffffffff16565b9050808211156113c7578091505b5b50919050565b60008082840190508381101515156113e257fe5b8091505092915050565b60006113f733610a35565b821115611407576000905061141e565b6114113383611424565b61141b83836118d2565b90505b92915050565b600080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915060007f80000000000000000000000000000000000000000000000000000000000000008316141561155d578183111561155c576114a584611302565b9050806114bb83856118b990919063ffffffff16565b111515156114c857600080fd5b6114db81836113ce90919063ffffffff16565b7f800000000000000000000000000000000000000000000000000000000000000017600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611555816003546113ce90919063ffffffff16565b6003819055505b5b50505050565b6000806000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150838210156115f85760009250611875565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508381101561164b5760009250611875565b61165e84836118b990919063ffffffff16565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008411801561171a57508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b156118705761173284826118b990919063ffffffff16565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117c784600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113ce90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a35b600192505b50509392505050565b600067016345785d8a00008273ffffffffffffffffffffffffffffffffffffffff163110156118ae5760006118b2565b61038f5b9050919050565b60008282111515156118c757fe5b818303905092915050565b600080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156119285760009150611abf565b60008311801561196457508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611aba5761197c83826118b990919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a1183600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113ce90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b600191505b50929150505600a165627a7a72305820be1faed9eefb6f9d3de9fdb48abaa4d839aac3f6f1fc64d263c4edd0a3e32b80002900000000000000000000000064386613c1abc7a2ce3c00765f505c025d10b8b1",
  "constructorArguments": "00000000000000000000000064386613c1abc7a2ce3c00765f505c025d10b8b1"
}