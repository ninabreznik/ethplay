{
  "address": "0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Leasing",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-21\n*/\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) public balances;\n\n  uint256 public totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract Freeze is Ownable {\n  \n  using SafeMath for uint256;\n\n  struct Group {\n    address[] holders;\n    uint until;\n  }\n  \n\t/**\n\t * @dev number of groups\n\t */\n  uint public groups;\n  \n  address[] public gofindAllowedAddresses;\n  \n\t/**\n\t * @dev link group ID ---> Group structure\n\t */\n  mapping (uint => Group) public lockup;\n  \n\t/**\n\t * @dev Check if holder under lock up\n\t */\n  modifier lockupEnded (address _holder, address _recipient) {\n    uint index = indexOf(_recipient, gofindAllowedAddresses);\n    if (index == 0) {\n      bool freezed;\n      uint groupId;\n      (freezed, groupId) = isFreezed(_holder);\n    \n      if (freezed) {\n        if (lockup[groupId-1].until < block.timestamp)\n          _;\n        else \n          revert(\"Your holdings are freezed, wait until transfers become allowed\");\n      }\n      else \n        _;\n    }\n    else\n      _;\n  }\n  \n  function addGofindAllowedAddress (address _newAddress) public onlyOwner returns (bool) {\n    require(indexOf(_newAddress, gofindAllowedAddresses) == 0, \"that address already exists\");\n    gofindAllowedAddresses.push(_newAddress);\n    return true;\n  }\n\t\n\t/**\n\t * @param _holder address of token holder to check\n\t * @return bool - status of freezing and group\n\t */\n  function isFreezed (address _holder) public view returns(bool, uint) {\n    bool freezed = false;\n    uint i = 0;\n    while (i < groups) {\n      uint index  = indexOf(_holder, lockup[i].holders);\n\n      if (index == 0) {\n        if (checkZeroIndex(_holder, i)) {\n          freezed = true;\n          i++;\n          continue;\n        }  \n        else {\n          i++;\n          continue;\n        }\n      }\n      \n      if (index != 0) {\n        freezed = true;\n        i++;\n        continue;\n      }\n      i++;\n    }\n    if (!freezed) i = 0;\n    \n    return (freezed, i);\n  }\n  \n\t/**\n\t * @dev internal usage to get index of holder in group\n\t * @param element address of token holder to check\n\t * @param at array of addresses that is group of holders\n\t * @return index of holder at array\n\t */\n  function indexOf (address element, address[] memory at) internal pure returns (uint) {\n    for (uint i=0; i < at.length; i++) {\n      if (at[i] == element) return i;\n    }\n    return 0;\n  }\n  \n\t/**\n\t * @dev internal usage to check that 0 is 0 index or it means that address not exists\n\t * @param _holder address of token holder to check\n\t * @param lockGroup id of group to check address existance in it\n\t * @return true if holder at zero index at group false if holder doesn't exists\n\t */\n  function checkZeroIndex (address _holder, uint lockGroup) internal view returns (bool) {\n    if (lockup[lockGroup].holders[0] == _holder)\n      return true;\n        \n    else \n      return false;\n  }\n  \n\t/**\n\t * @dev Will set group of addresses that will be under lock. When locked address can't\n\t  \t\t  do some actions with token\n\t * @param _holders array of addresses to lock\n\t * @param _until   timestamp until that lock up will last\n\t * @return bool result of operation\n\t */\n  function setGroup (address[] memory _holders, uint _until) public onlyOwner returns (bool) {\n    lockup[groups].holders = _holders;\n    lockup[groups].until   = _until;\n    \n    groups++;\n    return true;\n  }\n}\n\n/**\n * @dev This contract needed for inheritance of StandardToken interface,\n        but with freezing modifiers. So, it have exactly same methods, but with \n        lockupEnded(msg.sender) modifier.\n * @notice Inherit from it at SingleToken, to make freezing functionality works\n*/\ncontract PausableToken is StandardToken, Freeze {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    lockupEnded(msg.sender, _to)\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    lockupEnded(msg.sender, _to)\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    lockupEnded(msg.sender, _spender)\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    lockupEnded(msg.sender, _spender)\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    lockupEnded(msg.sender, _spender)\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n\ncontract SingleToken is PausableToken {\n\n  string  public constant name      = \"Gofind XR\"; \n\n  string  public constant symbol    = \"XR\";\n\n  uint32  public constant decimals  = 8;\n\n  uint256 public constant maxSupply = 13E16;\n  \n  constructor() public {\n    totalSupply_ = totalSupply_.add(maxSupply);\n    balances[msg.sender] = balances[msg.sender].add(maxSupply);\n  }\n}\ncontract Leasing is Ownable {\n    \n    using SafeMath for uint256;\n    \n    address XR = address(0); // testnet;\n    SingleToken token;\n    \n    struct Stakes {\n        uint256 stakingCurrency; // 0 for ETH 1 for XR\n        uint256 stakingAmount;\n        bytes coordinates;\n    }\n    \n    struct Tenant {\n        uint256 ids;\n        Stakes[] stakes;\n    }\n    \n    uint256 public tokenRate = 0;\n    address public companyWallet = 0x553654Ad7808625B36F6AB29DdB41140300E024F;\n    \n    mapping (address => Tenant) public tenants;\n    \n    \n    event Deposit(address indexed user, uint256 indexed amount, string indexed currency, uint256 timestamp);\n    event Withdraw(address indexed user, uint256 indexed amount, string indexed currency, uint256 timestamp);\n    \n    constructor (address _xr) public {\n        XR = _xr;\n    }\n    \n    function () payable external {\n        require(1 == 0);\n        \n    }\n    \n\n    /**\n     * 0 - pre-ICO stage; Assuming 1 ETH = 150$; 1 ETH = 1500XR\n     * 1 - ICO stage; Assuming 1 ETH = 150$; 1 ETH = 1000XR\n     * 2 - post-ICO stage; Using price from exchange\n    */\n    function projectStage (uint256 _stage) public onlyOwner returns (bool) {\n        if (_stage == 0) \n            tokenRate = 1500;\n        if (_stage == 1)\n            tokenRate = 1000;\n        if (_stage == 2)\n            tokenRate = 0;\n    }\n    \n\n    /**\n     * @dev Back-end will call that function to set Price from exchange\n     * @param _rate the 1 ETH = _rate XR \n    */\n    function oracleSetPrice (uint256 _rate) public onlyOwner returns (bool) {\n        tokenRate = _rate;\n        return true;\n    }\n    \n    \n    function stakeEth (bytes memory _coordinates) payable public returns (bool) {\n        require(msg.value != 0);\n        require(tokenRate != 0, \"XR is on exchange, need to get price\");\n        \n        uint256 fee = msg.value * 10 / 110;\n        address(0x553654Ad7808625B36F6AB29DdB41140300E024F).transfer(fee);\n        uint256 afterFee = msg.value - fee;\n        \n        Stakes memory stake = Stakes(0, afterFee, _coordinates);\n        tenants[msg.sender].stakes.push(stake);\n        \n        tenants[msg.sender].ids = tenants[msg.sender].ids.add(1);\n        \n        emit Deposit(msg.sender, afterFee, \"ETH\", block.timestamp);\n        return true;\n    }\n    \n    \n    function returnEth (uint256 _id) public returns (bool) {\n        require(_id != 0, \"always invalid id\");\n        require(tenants[msg.sender].ids != 0, \"nothing to return\");\n        require(tenants[msg.sender].ids >= _id, \"no staking data with such id\");\n        require(tenants[msg.sender].stakes[_id-1].stakingCurrency == 0, 'use returnXR');\n        require(tokenRate != 0, \"XR is on exchange, need to get price\");\n        \n        uint256 indexify = _id-1;\n        uint256 ethToReturn = tenants[msg.sender].stakes[indexify].stakingAmount;\n        \n        removeStakeById(indexify);\n\n        ethToReturn = ethToReturn * 9 / 10;\n        uint256 tokenAmountToReturn = ethToReturn * tokenRate / 10E9;\n        \n        require(SingleToken(XR).transferFrom(companyWallet, msg.sender, tokenAmountToReturn), \"can not transfer tokens\");\n    \n        emit Withdraw(msg.sender, tokenAmountToReturn, \"ETH\", block.timestamp);\n        return true;\n    }\n    \n    \n    function returnTokens (uint256 _id) public returns (bool){\n        require(_id != 0, \"always invalid id\");\n        require(tenants[msg.sender].ids != 0, \"nothing to return\");\n        require(tenants[msg.sender].ids >= _id, \"no staking data with such id\");\n        require(tenants[msg.sender].stakes[_id-1].stakingCurrency == 1, 'use returnETH');\n\n        uint256 indexify = _id-1;\n        uint256 tokensToReturn = tenants[msg.sender].stakes[indexify].stakingAmount;\n    \n        SingleToken _instance = SingleToken(XR);\n        \n        removeStakeById(indexify);\n        \n        _instance.transfer(msg.sender, tokensToReturn);\n        \n        emit Withdraw(msg.sender, tokensToReturn, \"XR\", block.timestamp);\n        return true;\n    }\n    \n   \n    function stakeTokens (uint256 amount, bytes memory _coordinates) public returns (bool) {\n        require(amount != 0, \"staking can not be 0\");\n        \n        Stakes memory stake = Stakes(1, amount, _coordinates);\n        tenants[msg.sender].stakes.push(stake);\n        \n        tenants[msg.sender].ids = tenants[msg.sender].ids.add(1);\n        \n        require(SingleToken(XR).transferFrom(msg.sender, address(this), amount), \"can not transfer tokens\");\n        \n        emit Deposit(msg.sender, amount, \"XR\", block.timestamp);\n        return true;\n    }\n    \n    \n    function removeStakeById (uint256 _id) internal returns (bool) {\n        for (uint256 i = _id; i < tenants[msg.sender].stakes.length-1; i++) {\n            tenants[msg.sender].stakes[i] = tenants[msg.sender].stakes[i+1];\n        }\n        tenants[msg.sender].stakes.length--;\n        tenants[msg.sender].ids = tenants[msg.sender].ids.sub(1);\n        \n        return true;\n    }\n    \n    \n    function getStakeById (uint256 _id) public view returns (string memory, uint256, bytes memory) {\n        require(_id != 0, \"always invalid id\");\n        require(tenants[msg.sender].ids != 0, \"no staking data\");\n        require(tenants[msg.sender].ids >= _id, \"no staking data with such id\");\n        \n        uint256 indexify = _id-1;\n        string memory currency;\n        if (tenants[msg.sender].stakes[indexify].stakingCurrency == 0)\n            currency = \"ETH\";\n        else \n            currency = \"XR\";\n        \n        return (currency, tenants[msg.sender].stakes[indexify].stakingAmount, tenants[msg.sender].stakes[indexify].coordinates);\n    }\n    \n    \n    function getStakingStructLength () public view returns (uint256) {\n        return tenants[msg.sender].stakes.length;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"companyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getStakeById\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"returnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"projectStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakingStructLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"returnEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_coordinates\",\"type\":\"bytes\"}],\"name\":\"stakeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"oracleSetPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tenants\",\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coordinates\",\"type\":\"bytes\"}],\"name\":\"stakeEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_xr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000061ec1a25f763eef9823773c7bdb9d7c644fb3503"
}