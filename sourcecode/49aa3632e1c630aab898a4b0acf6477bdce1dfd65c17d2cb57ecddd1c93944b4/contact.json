{
  "address": "0x7f927f984177323c4ac49e6b1d398e40cd1a78f6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-12\n*/\n\npragma solidity ^0.4.18;        // v0.4.18 was the latest possible version. 0.4.19 and above were not allowed\n\n////////////////////////////////////////////////////////////////////////////////\nlibrary SafeMath \n{\n    //--------------------------------------------------------------------------\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        if (a == 0)     return 0;\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    //--------------------------------------------------------------------------\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a / b;\n        return c;\n    }\n    //--------------------------------------------------------------------------\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        assert(b <= a);\n        return a - b;\n    }\n    //--------------------------------------------------------------------------\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n////////////////////////////////////////////////////////////////////////////////\nlibrary StringLib \n{\n    function concat(string strA, string strB) internal pure returns (string)\n    {\n        uint            i;\n        uint            g;\n        uint            finalLen;\n        bytes memory    dataStrA;\n        bytes memory    dataStrB;\n        bytes memory    buffer;\n\n        dataStrA  = bytes(strA);\n        dataStrB  = bytes(strB);\n\n        finalLen  = dataStrA.length + dataStrB.length;\n        buffer    = new bytes(finalLen);\n\n        for (g=i=0; i<dataStrA.length; i++)   buffer[g++] = dataStrA[i];\n        for (i=0;   i<dataStrB.length; i++)   buffer[g++] = dataStrB[i];\n\n        return string(buffer);\n    }\n    //--------------------------------------------------------------------------\n    function same(string strA, string strB) internal pure returns(bool)\n    {\n        return keccak256(strA)==keccak256(strB);\n    }\n    //-------------------------------------------------------------------------\n    function uintToAscii(uint number) internal pure returns(byte) \n    {\n             if (number < 10)         return byte(48 + number);\n        else if (number < 16)         return byte(87 + number);\n\n        revert();\n    }\n    //-------------------------------------------------------------------------\n    function asciiToUint(byte char) internal pure returns (uint) \n    {\n        uint asciiNum = uint(char);\n\n             if (asciiNum > 47 && asciiNum < 58)    return asciiNum - 48;\n        else if (asciiNum > 96 && asciiNum < 103)   return asciiNum - 87;\n\n        revert();\n    }\n    //-------------------------------------------------------------------------\n    function bytes32ToString (bytes32 data) internal pure returns (string) \n    {\n        bytes memory bytesString = new bytes(64);\n\n        for (uint j=0; j < 32; j++) \n        {\n            byte char = byte(bytes32(uint(data) * 2 ** (8 * j)));\n\n            bytesString[j*2+0] = uintToAscii(uint(char) / 16);\n            bytesString[j*2+1] = uintToAscii(uint(char) % 16);\n        }\n        return string(bytesString);\n    }\n    //-------------------------------------------------------------------------\n    function stringToBytes32(string str) internal pure returns (bytes32) \n    {\n        bytes memory bString = bytes(str);\n        uint uintString;\n\n        if (bString.length != 64) { revert(); }\n\n        for (uint i = 0; i < 64; i++) \n        {\n            uintString = uintString*16 + uint(asciiToUint(bString[i]));\n        }\n        return bytes32(uintString);\n    }\n}\n////////////////////////////////////////////////////////////////////////////////\ncontract ERC20 \n{\n    function balanceOf(   address _owner)                               public constant returns (uint256 balance);\n    function transfer(    address toAddr,  uint256 amount)              public returns (bool success);\n    function allowance(   address owner,   address spender)             public constant returns (uint256);\n    function transferFrom(address fromAddr,address toAddr, uint256 value)   public returns (bool);\n    function approve(     address spender, uint256 value)               public returns (bool);\n\n    event Transfer(address indexed fromAddr, address indexed toAddr,   uint256 amount);\n    event Approval(address indexed _owner,   address indexed _spender, uint256 amount);\n\n    uint256 public totalSupply;\n}\n////////////////////////////////////////////////////////////////////////////////\ncontract Ownable \n{\n    address public owner;\n\n    //-------------------------------------------------------------------------- @dev The Ownable constructor sets the original `owner` of the contract to the sender account\n    function Ownable() public \n    {\n        owner = msg.sender;\n    }\n    //-------------------------------------------------------------------------- @dev Throws if called by any account other than the owner.\n    modifier onlyOwner() \n    {\n        require(msg.sender == owner);\n        _;\n    }\n}\n////////////////////////////////////////////////////////////////////////////////\ncontract Lockable is Ownable \n{\n    uint256 internal constant lockedUntil = 1527811200;     // 2018-06-01 00:00 (GMT+0)\n\n    address internal allowedSender;     // the address that can make transactions when the transaction is locked \n\n    //-------------------------------------------------------------------------- @dev Allow access only when is unlocked. This function is good when you make crowdsale to avoid token expose in exchanges\n    modifier unlocked() \n    {\n        require((now > lockedUntil) || (allowedSender == msg.sender));\n        _;\n    }\n    //-------------------------------------------------------------------------- @dev Allows the current owner to transfer control of the contract to a newOwner.\n    function transferOwnership(address newOwner) public onlyOwner               // @param newOwner The address to transfer ownership to.\n    {\n        require(newOwner != address(0));\n        owner = newOwner;\n\n        allowedSender = newOwner;\n    }\n}\n////////////////////////////////////////////////////////////////////////////////\ncontract Token is ERC20, Lockable \n{\n    using SafeMath for uint256;\n\n    address public                                      owner;          // Owner of this contract\n    mapping(address => uint256)                         balances;       // Maintain balance in a mapping\n    mapping(address => mapping (address => uint256))    allowances;     // Allowances index-1 = Owner account   index-2 = spender account\n\n    //------ TOKEN SPECIFICATION\n\n    string public constant      name     = \"Yield Coin\";\n    string public constant      symbol   = \"YLD\";\n\n    uint256 public constant     decimals = 2;      // Handle the coin as FIAT (2 decimals). ETH Handles 18 decimal places\n\n    uint256 public constant     initSupply = 1100000000 * 10**decimals;        // 10**18 max\n\n    //-------------------------------------------------------------------------- Functions with this modifier can only be executed by the owner\n    modifier onlyOwner() \n    {\n        if (msg.sender != owner) \n        {\n            //----> (Jean) deprecated       throw;\n            assert(true==false);\n        }\n        _;\n    }\n    //-------------------------------------------------------------------------- Constructor\n    function Token() public \n    {\n        owner           = msg.sender;\n        totalSupply     = initSupply;\n        balances[owner] = initSupply;   // send the tokens to the owner\n\n        //-----\n\n        allowedSender = owner;          // In this contract, only the contract owner can send token while ICO is active.\n    }\n    //--------------------------------------------------------------------------\n    function transfer(address toAddr, uint256 amount)  public   unlocked returns (bool success) \n    {\n        require(toAddr!=0x0 && toAddr!=msg.sender && amount>0);         // Prevent transfer to 0x0 address and to self, amount must be >0\n\n        balances[msg.sender] = balances[msg.sender].sub(amount);\n        balances[toAddr]     = balances[toAddr].add(amount);\n\n        //emit Transfer(msg.sender, toAddr, amount);\n        Transfer(msg.sender, toAddr, amount);\n\n        return true;\n    }\n    //--------------------------------------------------------------------------\n    function transferFrom(address fromAddr, address toAddr, uint256 amount)  public   unlocked returns (bool) \n    {\n        if (amount <= 0)                                return false;\n        if (fromAddr==toAddr)                           return false;\n        if(allowances[fromAddr][msg.sender] < amount)   return false;\n        if(balances[fromAddr] < amount)                 return false;\n\n        balances[fromAddr] = balances[fromAddr].sub(amount);\n        balances[toAddr]   = balances[toAddr].add(  amount);\n\n        allowances[fromAddr][msg.sender] = allowances[fromAddr][msg.sender].sub(amount);\n\n        //emit Transfer(fromAddr, toAddr, amount);\n        Transfer(fromAddr, toAddr, amount);\n\n        return true;\n    }\n    //--------------------------------------------------------------------------\n    function balanceOf(address _owner)  public   constant returns (uint256 balance) \n    {\n        return balances[_owner];\n    }\n    //--------------------------------------------------------------------------\n    function approve(address _spender, uint256 amount)  public   returns (bool) \n    {\n        require((amount == 0) || (allowances[msg.sender][_spender] == 0));\n\n        allowances[msg.sender][_spender] = amount;\n\n        //emit Approval(msg.sender, _spender, amount);\n        Approval(msg.sender, _spender, amount);\n\n        return true;\n    }\n    //--------------------------------------------------------------------------\n    function allowance(address _owner, address _spender)  public   constant returns (uint remaining)\n    {\n        return allowances[_owner][_spender];    // Return the allowance for _spender approved by _owner\n    }\n    //--------------------------------------------------------------------------\n    function() public                       \n    {\n        assert(true == false);      // If Ether is sent to this address, don't handle it -> send it back.\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n\n\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromAddr\",\"type\":\"address\"},{\"name\":\"toAddr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toAddr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002600a0a634190ab00026000819055506002600a0a634190ab000260046000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061102a806101846000396000f3006060604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d8578063095ea7b31461016657806318160ddd146101c057806323b872dd146101e9578063313ce5671461026257806370a082311461028b5780638da5cb5b146102d857806395d89b411461032d57806397d63f93146103bb578063a9059cbb146103e4578063dd62ed3e1461043e578063f2fde38b146104aa575b34156100c557600080fd5b60001515600115151415156100d657fe5b005b34156100e357600080fd5b6100eb6104e3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012b578082015181840152602081019050610110565b50505050905090810190601f1680156101585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017157600080fd5b6101a6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061051c565b604051808215151515815260200191505060405180910390f35b34156101cb57600080fd5b6101d36106a3565b6040518082815260200191505060405180910390f35b34156101f457600080fd5b610248600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106a9565b604051808215151515815260200191505060405180910390f35b341561026d57600080fd5b610275610aec565b6040518082815260200191505060405180910390f35b341561029657600080fd5b6102c2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610af1565b6040518082815260200191505060405180910390f35b34156102e357600080fd5b6102eb610b3a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561033857600080fd5b610340610b60565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610380578082015181840152602081019050610365565b50505050905090810190601f1680156103ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103c657600080fd5b6103ce610b99565b6040518082815260200191505060405180910390f35b34156103ef57600080fd5b610424600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ba7565b604051808215151515815260200191505060405180910390f35b341561044957600080fd5b610494600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e16565b6040518082815260200191505060405180910390f35b34156104b557600080fd5b6104e1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e9d565b005b6040805190810160405280600a81526020017f5969656c6420436f696e0000000000000000000000000000000000000000000081525081565b6000808214806105a857506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156105b357600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b6000635b108c8042118061070a57503373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b151561071557600080fd5b6000821115156107285760009050610ae5565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156107655760009050610ae5565b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156107f25760009050610ae5565b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156108425760009050610ae5565b61089482600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fc790919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061092982600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fe090919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109fb82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fc790919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b600281565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f594c44000000000000000000000000000000000000000000000000000000000081525081565b6002600a0a634190ab000281565b6000635b108c80421180610c0857503373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515610c1357600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff1614158015610c6657503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b8015610c725750600082115b1515610c7d57600080fd5b610ccf82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fc790919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d6482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fe090919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f06576000151560011515141515610f0557fe5b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610f4257600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515610fd557fe5b818303905092915050565b6000808284019050838110151515610ff457fe5b80915050929150505600a165627a7a7230582025f0c7778a8e41b5c600effe746a00f3e46ddf3b1ad95b9e6105ae2a91d4db420029"
}