{
  "address": "0xfc0c44630bfbe42b2074a2a8f045abd2d1f44fa6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GomicsERC20",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-18\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\ncontract GomicsERC20 {\n\n    uint internal maxAdmin;       // 관리자 최대 수 MaxAdmin\n\n    string public name;             // ERC20 = 토큰 이름 name\n    string public symbol;           // ERC20 = 토큰 심볼 symbol\n    uint8 public decimals;          // ERC20 = 토큰 소숫점 18자리 까지 가능  decimals 18\n    uint256 public totalSupply;     // ERC20 = 총 발행 량 totalSupply\n\n    address public owner;           // 소유자 owner\n\n    bool public stopTransfer;       // 일시 거래 중단 기능 stopTransfer\n\n    struct userMap {\n        bool black;\n        uint256 balanceOf;\n    }\n\n    address[] internal adminsnew;   // 신규 관리자 추가 adminsnew\n    address[] public admins;        // 관리자 admins\n\n    // 사용자 리스트 public user list\n    mapping (address => userMap) public user;\n\n    event StopTransfer(address indexed from, bool value);                                           // 이벤트 - 토큰 전송 중지 StopTransfer\n    event UserBlack(address indexed from, address indexed user, bool value);                        // 이벤트 - 블랙 리스트 UserBlack\n    event UserAdmin(address indexed from, address indexed user, bool value);                        // 이벤트 - 관리자 리스트 UserAdmin list\n    event Transfer(address indexed from, address indexed to, uint256 value);                        // 이벤트 - 토큰 전송 Transfer\n\n    /**\n     * 생성자 issuer\n     *\n     * 초기 토큰에 대한 발행량, 토큰 이름, 토큰 심볼를 초기화 한다. Initialize the amount of issuance, token name, token symbol for the initial token\n     */\n    constructor(\n        address _owner\n    ) public {\n        maxAdmin                                         = 3;                                       // max admin\n        decimals                                         = 8;                                       // 소수 점 decimals\n        totalSupply                                      = 75000000 * 10 ** uint256(decimals);      // 총 발행량  totalSupply\n        name                                             = 'GOM';                                   // 토큰 이름  name\n        symbol                                           = 'GOM';                                   // 토큰 심볼  symbol \n\n        owner                                            = _owner;                                  // 주인 설정  owner         \n\n        user[_owner]                                     = userMap(false, totalSupply);             // 주인 관리자 owner / 화이트 리스트에 자동 추가 Automatically add to whitelist\n        user[0x0101010101010101010101010101010101010101] = userMap(false, 0);                       // 토큰 파기 주소 token revocation address\n    }\n\n    modifier requireOwner() { require(owner == msg.sender); _; }                                    // 소유자 권한 owner's rights\n    modifier requireAdmin() {                                                                       // 관리자 권한 Administrator rights\n        if( owner == msg.sender) {\n            require(true);\n            _;\n        }\n        else {\n            for(uint i = 0; i < admins.length; i++) {\n                require(admins[i] == msg.sender);\n                _;\n            }\n        }\n\n        require(true);\n        _;\n    }\n    modifier requireStopTransfer() { require(!stopTransfer); _; }                                   // 거래 중단 StopTransfer\n    modifier requireBlack() { require(!user[msg.sender].black); _; }                                // 거래 거부 requireBlack\n\n    /**\n     * modify User admin\n     *\n     */\n    function adminLength() public view requireOwner returns(uint ret) {\n        return admins.length;\n    }\n\n    /**\n     * modify User admin\n     *\n     * @param _address 주소 address\n     * @param _admin 관리자 admin\n     */\n    function modifyUserAdmin(address _address, bool _admin) public requireOwner {\n\n        require(owner != _address);\n\n        if( _admin ) {\n            _addAdmin(_address);\n        }\n        else{\n            _removeAdmin(_address);\n        }\n\n        emit UserAdmin(msg.sender, _address, _admin);\n    }\n\n    /**\n     * modify User black\n     *\n     * @param _address 주소 address\n     * @param _black 블록 black\n     */\n    function modifyUserBlack(address _address, bool _black) public requireAdmin {\n        user[_address].black  = _black;\n\n        emit UserBlack(msg.sender, _address, _black);\n    }\n\n    /**\n     * modify Stop Transfer\n     *\n     * @param _stop 비상 중지 여부 Emergency stop status\n     */\n    function modifyStopTransfer(bool _stop) public requireOwner {\n        stopTransfer = _stop;\n\n        emit StopTransfer(msg.sender, _stop);\n    }\n\n    /**\n     * _addAdmin\n     *\n     * @param _address 주소 address\n     */\n    function _addAdmin(address _address) internal {\n        \n        require(admins.length<=maxAdmin - 1);\n        \n        for(uint i = 0 ; i < admins.length; i++){\n            require(admins[i] != _address);\n        }\n        \n        admins.push(_address);\n    }\n    \n    /**\n     * _removeAdmin\n     *\n     * @param _address 주소 address\n     */\n    function _removeAdmin(address _address) internal {\n        \n        for(uint i = 0 ; i < admins.length; i++){\n            if( admins[i] != _address ) {\n                adminsnew.push(admins[i]);\n            }\n        }\n        \n        admins = adminsnew;\n        delete adminsnew;\n    }\n\n    /**\n     * 잔고\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _address The address of the recipient\n     */\n    function balanceOf(address _address) public view returns (uint256 result) {\n        return user[_address].balanceOf;\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal requireStopTransfer {\n\n        require(user[_from].black != true);\n        require(user[_to].black != true);\n\n        // Check if the sender has enough\n        require(user[_from].balanceOf >= _value);\n\n        // Check for overflows\n        require(_add(user[_to].balanceOf, _value) >= user[_to].balanceOf);\n\n        // Save this for an assertion in the future\n        uint previousBalances = _add(user[_from].balanceOf, user[_to].balanceOf);\n\n        // Subtract from the sender\n        user[_from].balanceOf = _sub(user[_from].balanceOf, _value);\n\n        // Add the same to the recipient\n        user[_to].balanceOf = _add(user[_to].balanceOf, _value);\n\n        // 이벤트 발생 Event Occurrence\n        emit Transfer(_from, _to, _value);\n\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(_add(user[_from].balanceOf, user[_to].balanceOf) == previousBalances);\n    }\n\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function _mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function _div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function _add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function _mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminLength\",\"outputs\":[{\"name\":\"ret\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_black\",\"type\":\"bool\"}],\"name\":\"modifyUserBlack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"name\":\"black\",\"type\":\"bool\"},{\"name\":\"balanceOf\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"bool\"}],\"name\":\"modifyUserAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stop\",\"type\":\"bool\"}],\"name\":\"modifyStopTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"StopTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"UserBlack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"UserAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b506040516020806200196d833981018060405260208110156200003357600080fd5b810190808051906020019092919050505060036000819055506008600360006101000a81548160ff021916908360ff160217905550600360009054906101000a900460ff1660ff16600a0a63047868c0026004819055506040805190810160405280600381526020017f474f4d000000000000000000000000000000000000000000000000000000000081525060019080519060200190620000d79291906200028d565b506040805190810160405280600381526020017f474f4d000000000000000000000000000000000000000000000000000000000081525060029080519060200190620001259291906200028d565b5080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600015158152602001600454815250600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155905050604080519081016040528060001515815260200160008152506008600073010101010101010101010101010101010101010173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155905050506200033c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002d057805160ff191683800117855562000301565b8280016001018555821562000301579182015b8281111562000300578251825591602001919060010190620002e3565b5b50905062000310919062000314565b5090565b6200033991905b80821115620003355760008160009055506001016200031b565b5090565b90565b611621806200034c6000396000f3fe6080604052600436106100ca576000357c01000000000000000000000000000000000000000000000000000000009004806306fdde03146100cf57806314bfd6d01461015f57806318160ddd146101da578063313ce567146102055780635982f610146102365780636aa08f7f1461026157806370a08231146102be57806381e7e20e146103235780638ce1e4d6146103935780638da5cb5b146103f057806395d89b41146104475780639d17cd7e146104d7578063a9059cbb14610514578063e7f9e40814610587575b600080fd5b3480156100db57600080fd5b506100e46105b6565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610124578082015181840152602081019050610109565b50505050905090810190601f1680156101515780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016b57600080fd5b506101986004803603602081101561018257600080fd5b8101908080359060200190929190505050610654565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101e657600080fd5b506101ef610692565b6040518082815260200191505060405180910390f35b34801561021157600080fd5b5061021a610698565b604051808260ff1660ff16815260200191505060405180910390f35b34801561024257600080fd5b5061024b6106ab565b6040518082815260200191505060405180910390f35b34801561026d57600080fd5b506102bc6004803603604081101561028457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610714565b005b3480156102ca57600080fd5b5061030d600480360360208110156102e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a6b565b6040518082815260200191505060405180910390f35b34801561032f57600080fd5b506103726004803603602081101561034657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ab7565b60405180831515151581526020018281526020019250505060405180910390f35b34801561039f57600080fd5b506103ee600480360360408110156103b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610ae8565b005b3480156103fc57600080fd5b50610405610c2c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561045357600080fd5b5061045c610c52565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561049c578082015181840152602081019050610481565b50505050905090810190601f1680156104c95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104e357600080fd5b50610512600480360360208110156104fa57600080fd5b81019080803515159060200190929190505050610cf0565b005b34801561052057600080fd5b5061056d6004803603604081101561053757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610dbb565b604051808215151515815260200191505060405180910390f35b34801561059357600080fd5b5061059c610dd2565b604051808215151515815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561064c5780601f106106215761010080835404028352916020019161064c565b820191906000526020600020905b81548152906001019060200180831161062f57829003601f168201915b505050505081565b60078181548110151561066357fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600360009054906101000a900460ff1681565b60003373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561070957600080fd5b600780549050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561083f576001151561077757600080fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f054cadd3997afdd695d90f465ded874676c9517e22e26df929bf29440da36d0283604051808215151515815260200191505060405180910390a3610997565b60008090505b600780549050811015610995573373ffffffffffffffffffffffffffffffffffffffff1660078281548110151561087857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156108c557600080fd5b81600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f054cadd3997afdd695d90f465ded874676c9517e22e26df929bf29440da36d0284604051808215151515815260200191505060405180910390a38080600101915050610845565b505b600115156109a457600080fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f054cadd3997afdd695d90f465ded874676c9517e22e26df929bf29440da36d0283604051808215151515815260200191505060405180910390a35050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60086020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154905082565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610b4457600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610ba157600080fd5b8015610bb557610bb082610de5565b610bbf565b610bbe82610efc565b5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fae6f4f3c6a108c7875bebd210979ca1c06a66c27c07282c71865209e29c514e283604051808215151515815260200191505060405180910390a35050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ce85780601f10610cbd57610100808354040283529160200191610ce8565b820191906000526020600020905b815481529060010190602001808311610ccb57829003601f168201915b505050505081565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610d4c57600080fd5b80600560146101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f588773ee9062dc1d226a3d988e3cbab35ad8950f4be9da72bf1aa88d7d41892082604051808215151515815260200191505060405180910390a250565b6000610dc833848461104f565b6001905092915050565b600560149054906101000a900460ff1681565b60016000540360078054905011151515610dfe57600080fd5b60008090505b600780549050811015610e92578173ffffffffffffffffffffffffffffffffffffffff16600782815481101515610e3757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610e8557600080fd5b8080600101915050610e04565b5060078190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008090505b60078054905081101561102a578173ffffffffffffffffffffffffffffffffffffffff16600782815481101515610f3557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561101d576006600782815481101515610f8e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b8080600101915050610f02565b506006600790805461103d92919061151a565b506006600061104c919061156c565b50565b600560149054906101000a900460ff1615151561106b57600080fd5b60011515600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515141515156110ce57600080fd5b60011515600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615151415151561113157600080fd5b80600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541015151561118257600080fd5b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154611211600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154836114d7565b1015151561121e57600080fd5b60006112ae600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546114d7565b90506112fc600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154836114f8565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555061138e600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154836114d7565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3806114c8600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546114d7565b1415156114d157fe5b50505050565b60008082840190508381101515156114ee57600080fd5b8091505092915050565b600082821115151561150957600080fd5b600082840390508091505092915050565b82805482825590600052602060002090810192821561155b5760005260206000209182015b8281111561155a57825482559160010191906001019061153f565b5b509050611568919061158d565b5090565b508054600082559060005260206000209081019061158a91906115d0565b50565b6115cd91905b808211156115c957600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611593565b5090565b90565b6115f291905b808211156115ee5760008160009055506001016115d6565b5090565b9056fea165627a7a723058206e7b5675b1da7f2aa0fe030b5ff263499c4ba809ba790b71e5217917b5130b940029000000000000000000000000d061c011c9e61e3f588658ab4fad284e7d08a91e",
  "constructorArguments": "000000000000000000000000d061c011c9e61e3f588658ab4fad284e7d08a91e"
}