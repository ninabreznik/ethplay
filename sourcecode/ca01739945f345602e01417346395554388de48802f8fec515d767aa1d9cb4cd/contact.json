{
  "address": "0x0c5c553a0795db4b5e305ccf6c57fe885aadc0be",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ClinicAllRefundEscrow",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-17\n*/\n\npragma solidity ^0.4.24;\n\n// File: node_modules\\zeppelin-solidity\\contracts\\math\\Math.sol\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\payment\\Escrow.sol\n\n/**\n * @title Escrow\n * @dev Base escrow contract, holds funds destinated to a payee until they\n * withdraw them. The contract that uses the escrow as its payment method\n * should be its owner, and provide public methods redirecting to the escrow's\n * deposit and withdraw.\n */\ncontract Escrow is Ownable {\n  using SafeMath for uint256;\n\n  event Deposited(address indexed payee, uint256 weiAmount);\n  event Withdrawn(address indexed payee, uint256 weiAmount);\n\n  mapping(address => uint256) private deposits;\n\n  function depositsOf(address _payee) public view returns (uint256) {\n    return deposits[_payee];\n  }\n\n  /**\n  * @dev Stores the sent amount as credit to be withdrawn.\n  * @param _payee The destination address of the funds.\n  */\n  function deposit(address _payee) public onlyOwner payable {\n    uint256 amount = msg.value;\n    deposits[_payee] = deposits[_payee].add(amount);\n\n    emit Deposited(_payee, amount);\n  }\n\n  /**\n  * @dev Withdraw accumulated balance for a payee.\n  * @param _payee The address whose funds will be withdrawn and transferred to.\n  */\n  function withdraw(address _payee) public onlyOwner {\n    uint256 payment = deposits[_payee];\n    assert(address(this).balance >= payment);\n\n    deposits[_payee] = 0;\n\n    _payee.transfer(payment);\n\n    emit Withdrawn(_payee, payment);\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\payment\\ConditionalEscrow.sol\n\n/**\n * @title ConditionalEscrow\n * @dev Base abstract escrow to only allow withdrawal if a condition is met.\n */\ncontract ConditionalEscrow is Escrow {\n  /**\n  * @dev Returns whether an address is allowed to withdraw their funds. To be\n  * implemented by derived contracts.\n  * @param _payee The destination address of the funds.\n  */\n  function withdrawalAllowed(address _payee) public view returns (bool);\n\n  function withdraw(address _payee) public {\n    require(withdrawalAllowed(_payee));\n    super.withdraw(_payee);\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\payment\\RefundEscrow.sol\n\n/**\n * @title RefundEscrow\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple parties.\n * The contract owner may close the deposit period, and allow for either withdrawal\n * by the beneficiary, or refunds to the depositors.\n */\ncontract RefundEscrow is Ownable, ConditionalEscrow {\n  enum State { Active, Refunding, Closed }\n\n  event Closed();\n  event RefundsEnabled();\n\n  State public state;\n  address public beneficiary;\n\n  /**\n   * @dev Constructor.\n   * @param _beneficiary The beneficiary of the deposits.\n   */\n  constructor(address _beneficiary) public {\n    require(_beneficiary != address(0));\n    beneficiary = _beneficiary;\n    state = State.Active;\n  }\n\n  /**\n   * @dev Stores funds that may later be refunded.\n   * @param _refundee The address funds will be sent to if a refund occurs.\n   */\n  function deposit(address _refundee) public payable {\n    require(state == State.Active);\n    super.deposit(_refundee);\n  }\n\n  /**\n   * @dev Allows for the beneficiary to withdraw their funds, rejecting\n   * further deposits.\n   */\n  function close() public onlyOwner {\n    require(state == State.Active);\n    state = State.Closed;\n    emit Closed();\n  }\n\n  /**\n   * @dev Allows for refunds to take place, rejecting further deposits.\n   */\n  function enableRefunds() public onlyOwner {\n    require(state == State.Active);\n    state = State.Refunding;\n    emit RefundsEnabled();\n  }\n\n  /**\n   * @dev Withdraws the beneficiary's funds.\n   */\n  function beneficiaryWithdraw() public {\n    require(state == State.Closed);\n    beneficiary.transfer(address(this).balance);\n  }\n\n  /**\n   * @dev Returns whether refundees can withdraw their deposits (be refunded).\n   */\n  function withdrawalAllowed(address _payee) public view returns (bool) {\n    return state == State.Refunding;\n  }\n}\n\n// File: contracts\\ClinicAllRefundEscrow.sol\n\n/**\n * @title ClinicAllRefundEscrow\n * @dev Escrow that holds funds for a beneficiary, deposited from multiple parties.\n * The contract owner may close the deposit period, and allow for either withdrawal\n * by the beneficiary, or refunds to the depositors.\n */\ncontract ClinicAllRefundEscrow is RefundEscrow {\n  using Math for uint256;\n\n  struct RefundeeRecord {\n    bool isRefunded;\n    uint256 index;\n  }\n\n  mapping(address => RefundeeRecord) public refundees;\n  address[] public refundeesList;\n\n  event Deposited(address indexed payee, uint256 weiAmount);\n  event Withdrawn(address indexed payee, uint256 weiAmount);\n\n  mapping(address => uint256) public deposits;\n  mapping(address => uint256) public beneficiaryDeposits;\n\n  // Amount of wei deposited by beneficiary\n  uint256 public beneficiaryDepositedAmount;\n\n  // Amount of wei deposited by investors to CrowdSale\n  uint256 public investorsDepositedToCrowdSaleAmount;\n\n  /**\n   * @dev Constructor.\n   * @param _beneficiary The beneficiary of the deposits.\n   */\n  constructor(address _beneficiary)\n  RefundEscrow(_beneficiary)\n  public {\n  }\n\n  function depositsOf(address _payee) public view returns (uint256) {\n    return deposits[_payee];\n  }\n\n  function beneficiaryDepositsOf(address _payee) public view returns (uint256) {\n    return beneficiaryDeposits[_payee];\n  }\n\n  /**\n   * Internal. Is being user by parent classes, just for keeping the interface.\n   * @dev Stores funds that may later be refunded.\n   * @param _refundee The address funds will be sent to if a refund occurs.\n   */\n  function deposit(address _refundee) public payable {\n    uint256 amount = msg.value;\n    beneficiaryDeposits[_refundee] = beneficiaryDeposits[_refundee].add(amount);\n    beneficiaryDepositedAmount = beneficiaryDepositedAmount.add(amount);\n  }\n\n  /**\n * @dev Stores funds that may later be refunded.\n * @param _refundee The address funds will be sent to if a refund occurs.\n * @param _value The amount of funds will be sent to if a refund occurs.\n */\n  function depositFunds(address _refundee, uint256 _value) public onlyOwner {\n    require(state == State.Active, \"Funds deposition is possible only in the Active state.\");\n\n    uint256 amount = _value;\n    deposits[_refundee] = deposits[_refundee].add(amount);\n    investorsDepositedToCrowdSaleAmount = investorsDepositedToCrowdSaleAmount.add(amount);\n\n    emit Deposited(_refundee, amount);\n\n    RefundeeRecord storage _data = refundees[_refundee];\n    _data.isRefunded = false;\n\n    if (_data.index == uint256(0)) {\n      refundeesList.push(_refundee);\n      _data.index = refundeesList.length.sub(1);\n    }\n  }\n\n  /**\n  * @dev Allows for the beneficiary to withdraw their funds, rejecting\n  * further deposits.\n  */\n  function close() public onlyOwner {\n    super.close();\n  }\n\n  function withdraw(address _payee) public onlyOwner {\n    require(state == State.Refunding, \"Funds withdrawal is possible only in the Refunding state.\");\n    require(depositsOf(_payee) > 0, \"An investor should have non-negative deposit for withdrawal.\");\n\n    RefundeeRecord storage _data = refundees[_payee];\n    require(_data.isRefunded == false, \"An investor should not be refunded.\");\n\n    uint256 payment = deposits[_payee];\n    assert(address(this).balance >= payment);\n\n    deposits[_payee] = 0;\n\n    investorsDepositedToCrowdSaleAmount = investorsDepositedToCrowdSaleAmount.sub(payment);\n\n    _payee.transfer(payment);\n\n    emit Withdrawn(_payee, payment);\n\n    _data.isRefunded = true;\n\n    removeRefundeeByIndex(_data.index);\n  }\n\n  /**\n  @dev Owner can do manual refund here if investore has \"BAD\" money\n  @param _payee address of investor that needs to refund with next manual ETH sending\n  */\n  function manualRefund(address _payee) public onlyOwner {\n    uint256 payment = deposits[_payee];\n    RefundeeRecord storage _data = refundees[_payee];\n\n    investorsDepositedToCrowdSaleAmount = investorsDepositedToCrowdSaleAmount.sub(payment);\n    deposits[_payee] = 0;\n    _data.isRefunded = true;\n\n    removeRefundeeByIndex(_data.index);\n  }\n\n  /**\n  * @dev Remove refundee referenced index from the internal list\n  * @param _indexToDelete An index in an array for deletion\n  */\n  function removeRefundeeByIndex(uint256 _indexToDelete) private {\n    if ((refundeesList.length > 0) && (_indexToDelete < refundeesList.length)) {\n      uint256 _lastIndex = refundeesList.length.sub(1);\n      refundeesList[_indexToDelete] = refundeesList[_lastIndex];\n      refundeesList.length--;\n    }\n  }\n  /**\n  * @dev Get refundee list length\n  */\n  function refundeesListLength() public onlyOwner view returns (uint256) {\n    return refundeesList.length;\n  }\n\n  /**\n  * @dev Auto refund\n  * @param _txFee The cost of executing refund code\n  */\n  function withdrawChunk(uint256 _txFee, uint256 _chunkLength) public onlyOwner returns (uint256, address[]) {\n    require(state == State.Refunding, \"Funds withdrawal is possible only in the Refunding state.\");\n\n    uint256 _refundeesCount = refundeesList.length;\n    require(_chunkLength >= _refundeesCount);\n    require(_txFee > 0, \"Transaction fee should be above zero.\");\n    require(_refundeesCount > 0, \"List of investors should not be empty.\");\n    uint256 _weiRefunded = 0;\n    require(address(this).balance > (_chunkLength.mul(_txFee)), \"Account's ballance should allow to pay all tx fees.\");\n    address[] memory _refundeesListCopy = new address[](_chunkLength);\n\n    uint256 i;\n    for (i = 0; i < _chunkLength; i++) {\n      address _refundee = refundeesList[i];\n      RefundeeRecord storage _data = refundees[_refundee];\n      if (_data.isRefunded == false) {\n        if (depositsOf(_refundee) > _txFee) {\n          uint256 _deposit = depositsOf(_refundee);\n          if (_deposit > _txFee) {\n            _weiRefunded = _weiRefunded.add(_deposit);\n            uint256 _paymentWithoutTxFee = _deposit.sub(_txFee);\n            _refundee.transfer(_paymentWithoutTxFee);\n            emit Withdrawn(_refundee, _paymentWithoutTxFee);\n            _data.isRefunded = true;\n            _refundeesListCopy[i] = _refundee;\n          }\n        }\n      }\n    }\n\n    for (i = 0; i < _chunkLength; i++) {\n      if (address(0) != _refundeesListCopy[i]) {\n        RefundeeRecord storage _dataCleanup = refundees[_refundeesListCopy[i]];\n        require(_dataCleanup.isRefunded == true, \"Investors in this list should be refunded.\");\n        removeRefundeeByIndex(_dataCleanup.index);\n      }\n    }\n\n    return (_weiRefunded, _refundeesListCopy);\n  }\n\n  /**\n  * @dev Auto refund\n  * @param _txFee The cost of executing refund code\n  */\n  function withdrawEverything(uint256 _txFee) public onlyOwner returns (uint256, address[]) {\n    require(state == State.Refunding, \"Funds withdrawal is possible only in the Refunding state.\");\n    return withdrawChunk(_txFee, refundeesList.length);\n  }\n\n  /**\n  * @dev Withdraws all beneficiary's funds.\n  */\n  function beneficiaryWithdraw() public {\n    //This methods is intentionally is overriden here to prevent uncontrollable funds transferring to a beneficiary. Only owner should be able to do this\n    //require(state == State.Closed);\n    //beneficiary.transfer(address(this).balance);\n  }\n\n  /**\n  * @dev Withdraws the part of beneficiary's funds.\n  */\n  function beneficiaryWithdrawChunk(uint256 _value) public onlyOwner {\n    require(_value <= address(this).balance, \"Withdraw part can not be more than current balance\");\n    beneficiaryDepositedAmount = beneficiaryDepositedAmount.sub(_value);\n    beneficiary.transfer(_value);\n  }\n\n  /**\n  * @dev Withdraws all beneficiary's funds.\n  */\n  function beneficiaryWithdrawAll() public onlyOwner {\n    uint256 _value = address(this).balance;\n    beneficiaryDepositedAmount = beneficiaryDepositedAmount.sub(_value);\n    beneficiary.transfer(_value);\n  }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080611621833981016040525160008054600160a060020a0319163317905580600160a060020a038116151561004a57600080fd5b6002805460ff19600160a060020a03939093166101000261010060a860020a0319909116179190911690555061159c806100856000396000f3006080604052600436106101535763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630d0b658a81146101585780632e3366441461017b57806332ada1dd1461019057806338af3eed146101b757806343d726d6146101e8578063455bf142146101fd57806351cff8d9146102125780636823ca4214610233578063685ca1941461024b578063715018a61461028057806380172c01146102955780638c52dc41146102b65780638cdd2fa0146102cb5780638da5cb5b1461033e578063921b004b146103535780639af6549a14610377578063a2e5b2ed1461038c578063c19d93fb146103a1578063db4980d9146103da578063df31027a146103fb578063e3a9db1a14610413578063e848825214610434578063f2fde38b14610470578063f340fa0114610491578063f3c8f08a146104a5578063fc7e286d146104c0575b600080fd5b34801561016457600080fd5b50610179600160a060020a03600435166104e1565b005b34801561018757600080fd5b5061017961056e565b34801561019c57600080fd5b506101a56105e2565b60408051918252519081900360200190f35b3480156101c357600080fd5b506101cc6105e8565b60408051600160a060020a039092168252519081900360200190f35b3480156101f457600080fd5b506101796105fc565b34801561020957600080fd5b506101a561061d565b34801561021e57600080fd5b50610179600160a060020a036004351661063d565b34801561023f57600080fd5b506101cc6004356108e9565b34801561025757600080fd5b5061026c600160a060020a0360043516610911565b604080519115158252519081900360200190f35b34801561028c57600080fd5b5061017961092d565b3480156102a157600080fd5b506101a5600160a060020a0360043516610999565b3480156102c257600080fd5b506101796109ab565b3480156102d757600080fd5b506102e3600435610a17565b6040518083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610329578181015183820152602001610311565b50505050905001935050505060405180910390f35b34801561034a57600080fd5b506101cc610ad7565b34801561035f57600080fd5b50610179600160a060020a0360043516602435610ae6565b34801561038357600080fd5b5061017961061b565b34801561039857600080fd5b506101a5610cc5565b3480156103ad57600080fd5b506103b6610ccb565b604051808260028111156103c657fe5b60ff16815260200191505060405180910390f35b3480156103e657600080fd5b506101a5600160a060020a0360043516610cd4565b34801561040757600080fd5b50610179600435610cef565b34801561041f57600080fd5b506101a5600160a060020a0360043516610d98565b34801561044057600080fd5b50610455600160a060020a0360043516610db3565b60408051921515835260208301919091528051918290030190f35b34801561047c57600080fd5b50610179600160a060020a0360043516610dd2565b610179600160a060020a0360043516610df5565b3480156104b157600080fd5b506102e3600435602435610e53565b3480156104cc57600080fd5b506101a5600160a060020a036004351661133e565b600080548190600160a060020a031633146104fb57600080fd5b5050600160a060020a0381166000908152600560209081526040808320546003909252909120600854610534908363ffffffff61135016565b600855600160a060020a038316600090815260056020526040812055805460ff19166001908117825581015461056990611367565b505050565b60008054600160a060020a0316331461058657600080fd5b5060075430319061059d908263ffffffff61135016565b600755600254604051610100909104600160a060020a0316906108fc8315029083906000818181858888f193505050501580156105de573d6000803e3d6000fd5b5050565b60075481565b6002546101009004600160a060020a031681565b600054600160a060020a0316331461061357600080fd5b61061b611415565b565b60008054600160a060020a0316331461063557600080fd5b506004545b90565b600080548190600160a060020a0316331461065757600080fd5b60016002805460ff169081111561066a57fe5b146106e5576040805160e560020a62461bcd02815260206004820152603960248201527f46756e6473207769746864726177616c20697320706f737369626c65206f6e6c60448201527f7920696e2074686520526566756e64696e672073746174652e00000000000000606482015290519081900360840190fd5b60006106f084610d98565b1161076b576040805160e560020a62461bcd02815260206004820152603c60248201527f416e20696e766573746f722073686f756c642068617665206e6f6e2d6e65676160448201527f74697665206465706f73697420666f72207769746864726177616c2e00000000606482015290519081900360840190fd5b600160a060020a0383166000908152600360205260409020805490925060ff1615610806576040805160e560020a62461bcd02815260206004820152602360248201527f416e20696e766573746f722073686f756c64206e6f7420626520726566756e6460448201527f65642e0000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50600160a060020a038216600090815260056020526040902054303181111561082b57fe5b600160a060020a038316600090815260056020526040812055600854610857908263ffffffff61135016565b600855604051600160a060020a0384169082156108fc029083906000818181858888f19350505050158015610890573d6000803e3d6000fd5b50604080518281529051600160a060020a038516917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a2815460ff19166001908117835582015461056990611367565b60048054829081106108f757fe5b600091825260209091200154600160a060020a0316905081565b600060016002805460ff169081111561092657fe5b1492915050565b600054600160a060020a0316331461094457600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60066020526000908152604090205481565b600054600160a060020a031633146109c257600080fd5b60006002805460ff16908111156109d557fe5b146109df57600080fd5b6002805460ff191660011790556040517f599d8e5a83cffb867d051598c4d70e805d59802d8081c1c7d6dffc5b6aca2b8990600090a1565b60008054606090600160a060020a03163314610a3257600080fd5b60016002805460ff1690811115610a4557fe5b14610ac0576040805160e560020a62461bcd02815260206004820152603960248201527f46756e6473207769746864726177616c20697320706f737369626c65206f6e6c60448201527f7920696e2074686520526566756e64696e672073746174652e00000000000000606482015290519081900360840190fd5b600454610ace908490610e53565b91509150915091565b600054600160a060020a031681565b600080548190600160a060020a03163314610b0057600080fd5b60006002805460ff1690811115610b1357fe5b14610b8e576040805160e560020a62461bcd02815260206004820152603660248201527f46756e6473206465706f736974696f6e20697320706f737369626c65206f6e6c60448201527f7920696e20746865204163746976652073746174652e00000000000000000000606482015290519081900360840190fd5b600160a060020a038416600090815260056020526040902054839250610bba908363ffffffff61148016565b600160a060020a038516600090815260056020526040902055600854610be6908363ffffffff61148016565b600855604080518381529051600160a060020a038616917f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4919081900360200190a250600160a060020a0383166000908152600360205260409020805460ff1916815560018101541515610cbf57600480546001808201835560008390527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388161790559054610cb991611350565b60018201555b50505050565b60085481565b60025460ff1681565b600160a060020a031660009081526006602052604090205490565b600054600160a060020a03163314610d0657600080fd5b3031811115610d85576040805160e560020a62461bcd02815260206004820152603260248201527f576974686472617720706172742063616e206e6f74206265206d6f726520746860448201527f616e2063757272656e742062616c616e63650000000000000000000000000000606482015290519081900360840190fd5b60075461059d908263ffffffff61135016565b600160a060020a031660009081526005602052604090205490565b6003602052600090815260409020805460019091015460ff9091169082565b600054600160a060020a03163314610de957600080fd5b610df28161148d565b50565b600160a060020a0381166000908152600660205260409020543490610e20908263ffffffff61148016565b600160a060020a038316600090815260066020526040902055600754610e4c908263ffffffff61148016565b6007555050565b60008054606090829081908390829081908190819081908190600160a060020a03163314610e8057600080fd5b60016002805460ff1690811115610e9357fe5b14610f0e576040805160e560020a62461bcd02815260206004820152603960248201527f46756e6473207769746864726177616c20697320706f737369626c65206f6e6c60448201527f7920696e2074686520526566756e64696e672073746174652e00000000000000606482015290519081900360840190fd5b6004549850888c1015610f2057600080fd5b60008d11610f9e576040805160e560020a62461bcd02815260206004820152602560248201527f5472616e73616374696f6e206665652073686f756c642062652061626f76652060448201527f7a65726f2e000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000891161101c576040805160e560020a62461bcd02815260206004820152602660248201527f4c697374206f6620696e766573746f72732073686f756c64206e6f742062652060448201527f656d7074792e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600097506110308c8e63ffffffff61150a16565b3031116110ad576040805160e560020a62461bcd02815260206004820152603360248201527f4163636f756e7427732062616c6c616e63652073686f756c6420616c6c6f772060448201527f746f2070617920616c6c20747820666565732e00000000000000000000000000606482015290519081900360840190fd5b8b6040519080825280602002602001820160405280156110d7578160200160208202803883390190505b509650600095505b8b8610156112255760048054879081106110f557fe5b6000918252602080832090910154600160a060020a0316808352600390915260409091208054919650945060ff16151561121a578c61113386610d98565b111561121a5761114285610d98565b92508c83111561121a5761115c888463ffffffff61148016565b975061116e838e63ffffffff61135016565b604051909250600160a060020a0386169083156108fc029084906000818181858888f193505050501580156111a7573d6000803e3d6000fd5b50604080518381529051600160a060020a038716917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a2835460ff191660011784558651859088908890811061120257fe5b600160a060020a039092166020928302909101909101525b6001909501946110df565b600095505b8b86101561132b57868681518110151561124057fe5b60209081029091010151600160a060020a0316156113205760036000888881518110151561126a57fe5b6020908102909101810151600160a060020a03168252810191909152604001600020805490915060ff161515600114611313576040805160e560020a62461bcd02815260206004820152602a60248201527f496e766573746f727320696e2074686973206c6973742073686f756c6420626560448201527f20726566756e6465642e00000000000000000000000000000000000000000000606482015290519081900360840190fd5b6113208160010154611367565b60019095019461122a565b50959b949a509398505050505050505050565b60056020526000908152604090205481565b60008282111561135c57fe5b508082035b92915050565b6004546000908110801561137c575060045482105b156105de5760045461139590600163ffffffff61135016565b90506004818154811015156113a657fe5b60009182526020909120015460048054600160a060020a0390921691849081106113cc57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556004805490610569906000198301611533565b600054600160a060020a0316331461142c57600080fd5b60006002805460ff169081111561143f57fe5b1461144957600080fd5b6002805460ff1916811790556040517f1cdde67b72a90f19919ac732a437ac2f7a10fc128d28c2a6e525d89ce5cd9d3a90600090a1565b8181018281101561136157fe5b600160a060020a03811615156114a257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082151561151b57506000611361565b5081810281838281151561152b57fe5b041461136157fe5b8154818355818111156105695760008381526020902061056991810190830161063a91905b8082111561156c5760008155600101611558565b50905600a165627a7a723058208f44979867f5282b72aa1a17b5799d00112faeac950c97f37a1120e2a09167120029000000000000000000000000e7f2ca9f90c486c675452514eb074a09128c6921",
  "constructorArguments": "000000000000000000000000e7f2ca9f90c486c675452514eb074a09128c6921"
}