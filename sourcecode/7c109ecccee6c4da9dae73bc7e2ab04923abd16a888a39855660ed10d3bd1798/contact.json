{
  "address": "0x2d1711ada9dd2bf8792ad29dd4e307d6527f2ad5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Whitelist",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-20\n*/\n\n/**\n * Copyright (c) 2018 blockimmo AG [emailÂ protected]\n * Non-Profit Open Software License 3.0 (NPOSL-3.0)\n * https://opensource.org/licenses/NPOSL-3.0\n */\n\n\npragma solidity 0.4.25;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() public onlyPendingOwner {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage _role, address _addr)\n    internal\n    view\n  {\n    require(has(_role, _addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage _role, address _addr)\n    internal\n    view\n    returns (bool)\n  {\n    return _role.bearer[_addr];\n  }\n}\n\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    public\n    view\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    public\n    view\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n\n/**\n * @title Whitelist\n * @dev A minimal, simple database mapping public addresses (ie users) to their permissions.\n *\n * `TokenizedProperty` references `this` to only allow tokens to be transferred to addresses with necessary permissions.\n * `TokenSale` references `this` to only allow tokens to be purchased by addresses within the necessary permissions.\n *\n * `WhitelistProxy` enables `this` to be easily and reliably upgraded if absolutely necessary.\n * `WhitelistProxy` and `this` are controlled by a centralized entity (blockimmo).\n *  This centralization is required by our legal framework to ensure investors are known and fully-legal.\n */\ncontract Whitelist is Claimable, RBAC {\n  function grantPermission(address _operator, string _permission) public onlyOwner {\n    addRole(_operator, _permission);\n  }\n\n  function revokePermission(address _operator, string _permission) public onlyOwner {\n    removeRole(_operator, _permission);\n  }\n\n  function grantPermissionBatch(address[] _operators, string _permission) public onlyOwner {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      addRole(_operators[i], _permission);\n    }\n  }\n\n  function revokePermissionBatch(address[] _operators, string _permission) public onlyOwner {\n    for (uint256 i = 0; i < _operators.length; i++) {\n      removeRole(_operators[i], _permission);\n    }\n  }\n}",
  "bytecode": "608060405260008054600160a060020a031916331790556109c2806100256000396000f3006080604052600436106100ae5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630988ca8c81146100b35780630d93afef1461011c578063217fe6c6146101af578063475c051d1461022a5780634e71e0c8146102bd5780636ff89159146102d2578063715018a6146103395780638da5cb5b1461034e578063bbd9a5fa1461037f578063e30c3978146103e6578063f2fde38b146103fb575b600080fd5b3480156100bf57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261011a958335600160a060020a031695369560449491939091019190819084018382808284375094975061041c9650505050505050565b005b34801561012857600080fd5b506040805160206004803580820135838102808601850190965280855261011a9536959394602494938501929182918501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061048a9650505050505050565b3480156101bb57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610216958335600160a060020a03169536956044949193909101919081908401838280828437509497506104dd9650505050505050565b604080519115158252519081900360200190f35b34801561023657600080fd5b506040805160206004803580820135838102808601850190965280855261011a9536959394602494938501929182918501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506105509650505050505050565b3480156102c957600080fd5b5061011a61059e565b3480156102de57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261011a958335600160a060020a03169536956044949193909101919081908401838280828437509497506106269650505050505050565b34801561034557600080fd5b5061011a610647565b34801561035a57600080fd5b506103636106b3565b60408051600160a060020a039092168252519081900360200190f35b34801561038b57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261011a958335600160a060020a03169536956044949193909101919081908401838280828437509497506106c29650505050505050565b3480156103f257600080fd5b506103636106e3565b34801561040757600080fd5b5061011a600160a060020a03600435166106f2565b610486826002836040518082805190602001908083835b602083106104525780518252601f199092019160209182019101610433565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050610738565b5050565b60008054600160a060020a031633146104a257600080fd5b5060005b82518110156104d8576104d083828151811015156104c057fe5b906020019060200201518361074d565b6001016104a6565b505050565b6000610549836002846040518082805190602001908083835b602083106105155780518252601f1990920191602091820191016104f6565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061085e565b9392505050565b60008054600160a060020a0316331461056857600080fd5b5060005b82518110156104d857610596838281518110151561058657fe5b906020019060200201518361087d565b60010161056c565b600154600160a060020a031633146105b557600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a0316331461063d57600080fd5b610486828261074d565b600054600160a060020a0316331461065e57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b600054600160a060020a031633146106d957600080fd5b610486828261087d565b600154600160a060020a031681565b600054600160a060020a0316331461070957600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b610742828261085e565b151561048657600080fd5b6107b7826002836040518082805190602001908083835b602083106107835780518252601f199092019160209182019101610764565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061094f565b81600160a060020a03167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b83811015610820578181015183820152602001610808565b50505050905090810190601f16801561084d5780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b600160a060020a03166000908152602091909152604090205460ff1690565b6108e7826002836040518082805190602001908083835b602083106108b35780518252601f199092019160209182019101610894565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050610971565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b7004898260405180806020018281038252838181518152602001915080519060200190808383600083811015610820578181015183820152602001610808565b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0316600090815260209190915260409020805460ff191660011790555600a165627a7a72305820436f91dd993ea0fceed25bc7bf67a1a9b55090680e77a9b17f37b022637fa6640029"
}