{
  "address": "0x029fa59111136ce592e136760a1df1d4a6cd564b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RetailLoyaltySystemToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-07\n*/\n\npragma solidity ^0.4.18;\n\n\n// -----------------------------------------------------------------------\n// An ERC20 standard\ncontract ERC20 {\n    // the total token supply\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\ninterface TokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n}\n\n\ncontract RetailLoyaltySystemBase is ERC20 {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8  public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n\n    // Balances\n    mapping (address => uint256) balances;\n    // Allowances\n    mapping (address => mapping (address => uint256)) allowances;\n\n\n    // ----- Events -----\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constructor function\n     */\n    function RetailLoyaltySystemBase(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimals) public {\n        name = _tokenName;                                   // Set the name for display purposes\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n        decimals = _decimals;\n\n        totalSupply = _initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balances[msg.sender] = totalSupply;                // Give the creator all initial tokens\n    }\n\n    function balanceOf(address _owner) public view returns(uint256) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowances[_owner][_spender];\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal returns(bool) {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balances[_from] >= _value);\n        // Check for overflows\n        require(balances[_to] + _value > balances[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balances[_from] + balances[_to];\n        // Subtract from the sender\n        balances[_from] -= _value;\n        // Add the same to the recipient\n        balances[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balances[_from] + balances[_to] == previousBalances);\n\n        return true;\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        return _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(_value <= allowances[_from][msg.sender]);     // Check allowance\n        allowances[_from][msg.sender] -= _value;\n        return _transfer(_from, _to, _value);\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns(bool) {\n        allowances[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool) {\n        if (approve(_spender, _value)) {\n            TokenRecipient spender = TokenRecipient(_spender);\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns(bool) {\n        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n        balances[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns(bool) {\n        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowances[_from][msg.sender]);    // Check allowance\n        balances[_from] -= _value;                         // Subtract from the targeted balance\n        allowances[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n\n    /**\n     * approve should be called when allowances[_spender] == 0. To increment\n     * allowances value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        // Check for overflows\n        require(allowances[msg.sender][_spender] + _addedValue > allowances[msg.sender][_spender]);\n\n        allowances[msg.sender][_spender] += _addedValue;\n        Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowances[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowances[msg.sender][_spender] = 0;\n        } else {\n            allowances[msg.sender][_spender] = oldValue - _subtractedValue;\n        }\n        Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\ncontract RetailLoyaltySystemToken is RetailLoyaltySystemBase {\n\n    function RetailLoyaltySystemToken() RetailLoyaltySystemBase(500000000, \"RLS Token\", \"RLS\", 18) public {\n\n    }\n}",
  "bytecode": "60806040526003805460ff1916601217905534801561001d57600080fd5b50604080518082018252600981527f524c5320546f6b656e000000000000000000000000000000000000000000000060208083019182528351808501909452600384527f524c530000000000000000000000000000000000000000000000000000000000908401528151631dcd6500939160129161009d916001916100e6565b5081516100b19060029060208501906100e6565b506003805460ff191660ff928316179081905516600a0a92909202600081815533815260046020526040902055506101819050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012757805160ff1916838001178555610154565b82800160010185558215610154579182015b82811115610154578251825591602001919060010190610139565b50610160929150610164565b5090565b61017e91905b80821115610160576000815560010161016a565b90565b610ac1806101906000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019657806323b872dd146101bd578063313ce567146101e757806342966c6814610212578063661884631461022a57806370a082311461024e57806379cc67901461026f57806395d89b4114610293578063a9059cbb146102a8578063cae9ca51146102cc578063d73dd62314610335578063dd62ed3e14610359575b600080fd5b3480156100e057600080fd5b506100e9610380565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b50610182600160a060020a036004351660243561040d565b604080519115158252519081900360200190f35b3480156101a257600080fd5b506101ab610473565b60408051918252519081900360200190f35b3480156101c957600080fd5b50610182600160a060020a0360043581169060243516604435610479565b3480156101f357600080fd5b506101fc6104e6565b6040805160ff9092168252519081900360200190f35b34801561021e57600080fd5b506101826004356104ef565b34801561023657600080fd5b50610182600160a060020a0360043516602435610565565b34801561025a57600080fd5b506101ab600160a060020a0360043516610649565b34801561027b57600080fd5b50610182600160a060020a0360043516602435610664565b34801561029f57600080fd5b506100e9610733565b3480156102b457600080fd5b50610182600160a060020a036004351660243561078b565b3480156102d857600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610182948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061079f9650505050505050565b34801561034157600080fd5b50610182600160a060020a03600435166024356108c0565b34801561036557600080fd5b506101ab600160a060020a036004358116906024351661095d565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104055780601f106103da57610100808354040283529160200191610405565b820191906000526020600020905b8154815290600101906020018083116103e857829003601f168201915b505050505081565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005481565b600160a060020a03831660009081526005602090815260408083203384529091528120548211156104a957600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020805483900390556104de848484610988565b949350505050565b60035460ff1681565b3360009081526004602052604081205482111561050b57600080fd5b336000818152600460209081526040808320805487900390558254869003909255815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b336000908152600560209081526040808320600160a060020a0386168452909152812054808311156105ba57336000908152600560209081526040808320600160a060020a03881684529091528120556105e3565b336000908152600560209081526040808320600160a060020a0388168452909152902083820390555b336000818152600560209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526004602052604090205490565b600160a060020a03821660009081526004602052604081205482111561068957600080fd5b600160a060020a03831660009081526005602090815260408083203384529091529020548211156106b957600080fd5b600160a060020a038316600081815260046020908152604080832080548790039055600582528083203384528252808320805487900390558254869003909255815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104055780601f106103da57610100808354040283529160200191610405565b6000610798338484610988565b9392505050565b6000806107ac858561040d565b156108b357506040517f8f4ffcb100000000000000000000000000000000000000000000000000000000815233600482018181526024830186905230604484018190526080606485019081528651608486015286518995600160a060020a03871695638f4ffcb19590948b9490938b9360a40190602085019080838360005b8381101561084357818101518382015260200161082b565b50505050905090810190601f1680156108705780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b50505050600191506108b8565b600091505b509392505050565b336000908152600560209081526040808320600160a060020a0386168452909152812054828101116108f157600080fd5b336000818152600560209081526040808320600160a060020a038816808552908352928190208054870190819055815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600080600160a060020a03841615156109a057600080fd5b600160a060020a0385166000908152600460205260409020548311156109c557600080fd5b600160a060020a038416600090815260046020526040902054838101116109eb57600080fd5b50600160a060020a0380841660008181526004602090815260408083208054958a1680855282852080548a81039091559486905281548901909155815188815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a03808516600090815260046020526040808220549288168252902054018114610a8a57fe5b5060019493505050505600a165627a7a723058207db784771e761a1112996fd6481cc6d08aad05ef101e938a5aa8e8874e8a3ad60029"
}