{
  "address": "0x18B5B6696E6569F437F48b111734D72b225D14a7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NCStandardInterestRateModel",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.4.24;\n\nimport \"./Exponential.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./CarefulMath.sol\";\nimport \"./InterestRateModel.sol\";\nimport \"./LiquidationChecker.sol\";\n\n/**\n  * @title The Compound Standard Interest Rate Model with LiquidationChecker\n  * @author Compound\n  * @notice See Section 2.4 of the Compound Whitepaper\n  */\ncontract NCStandardInterestRateModel is Exponential, LiquidationChecker {\n\n    uint constant oneMinusSpreadBasisPoints = 9000;\n    uint constant blocksPerYear = 2102400;\n    uint constant mantissaFivePercent = 5 * 10**16;\n\n    enum IRError {\n        NO_ERROR,\n        FAILED_TO_ADD_CASH_PLUS_BORROWS,\n        FAILED_TO_GET_EXP,\n        FAILED_TO_MUL_PRODUCT_TIMES_BORROW_RATE\n    }\n\n    constructor(address moneyMarket, address liquidator) LiquidationChecker(moneyMarket, liquidator) {}\n\n    /*\n     * @dev Calculates the utilization rate (borrows / (cash + borrows)) as an Exp\n     */\n    function getUtilizationRate(uint cash, uint borrows) pure internal returns (IRError, Exp memory) {\n        if (borrows == 0) {\n            // Utilization rate is zero when there's no borrows\n            return (IRError.NO_ERROR, Exp({mantissa: 0}));\n        }\n\n        (Error err0, uint cashPlusBorrows) = add(cash, borrows);\n        if (err0 != Error.NO_ERROR) {\n            return (IRError.FAILED_TO_ADD_CASH_PLUS_BORROWS, Exp({mantissa: 0}));\n        }\n\n        (Error err1, Exp memory utilizationRate) = getExp(borrows, cashPlusBorrows);\n        if (err1 != Error.NO_ERROR) {\n            return (IRError.FAILED_TO_GET_EXP, Exp({mantissa: 0}));\n        }\n\n        return (IRError.NO_ERROR, utilizationRate);\n    }\n\n    /*\n     * @dev Calculates the utilization and borrow rates for use by get{Supply,Borrow}Rate functions\n     */\n    function getUtilizationAndAnnualBorrowRate(uint cash, uint borrows) pure internal returns (IRError, Exp memory, Exp memory) {\n        (IRError err0, Exp memory utilizationRate) = getUtilizationRate(cash, borrows);\n        if (err0 != IRError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}), Exp({mantissa: 0}));\n        }\n\n        // Borrow Rate is 5% + UtilizationRate * 45%\n        // 45% of utilizationRate, is `rate * 45 / 100`\n        (Error err1, Exp memory utilizationRateMuled) = mulScalar(utilizationRate, 45);\n        // `mulScalar` only overflows when the product is >= 2^256.\n        // utilizationRate is a real number on the interval [0,1], which means that\n        // utilizationRate.mantissa is in the interval [0e18,1e18], which means that 45 times\n        // that is in the interval [0e18,45e18]. That interval has no intersection with 2^256, and therefore\n        // this can never overflow. As such, we assert.\n        assert(err1 == Error.NO_ERROR);\n\n        (Error err2, Exp memory utilizationRateScaled) = divScalar(utilizationRateMuled, 100);\n        // 100 is a constant, and therefore cannot be zero, which is the only error case of divScalar.\n        assert(err2 == Error.NO_ERROR);\n\n        // Add the 5% for (5% + 45% * Ua)\n        (Error err3, Exp memory annualBorrowRate) = addExp(utilizationRateScaled, Exp({mantissa: mantissaFivePercent}));\n        // `addExp` only fails when the addition of mantissas overflow.\n        // As per above, utilizationRateMuled is capped at 45e18,\n        // and utilizationRateScaled is capped at 4.5e17. mantissaFivePercent = 0.5e17, and thus the addition\n        // is capped at 5e17, which is less than 2^256.\n        assert(err3 == Error.NO_ERROR);\n\n        return (IRError.NO_ERROR, utilizationRate, annualBorrowRate);\n    }\n\n    /**\n      * @notice Gets the current supply interest rate based on the given asset, total cash and total borrows\n      * @dev The return value should be scaled by 1e18, thus a return value of\n      *      `(true, 1000000000000)` implies an interest rate of 0.000001 or 0.0001% *per block*.\n      * @param _asset The asset to get the interest rate of\n      * @param cash The total cash of the asset in the market\n      * @param borrows The total borrows of the asset in the market\n      * @return Success or failure and the supply interest rate per block scaled by 10e18\n      */\n    function getSupplyRate(address _asset, uint cash, uint borrows) public view returns (uint, uint) {\n        _asset; // pragma ignore unused argument\n\n        (IRError err0, Exp memory utilizationRate0, Exp memory annualBorrowRate) = getUtilizationAndAnnualBorrowRate(cash, borrows);\n        if (err0 != IRError.NO_ERROR) {\n            return (uint(err0), 0);\n        }\n\n        // We're going to multiply the utilization rate by the spread's numerator\n        (Error err1, Exp memory utilizationRate1) = mulScalar(utilizationRate0, oneMinusSpreadBasisPoints);\n        // mulScalar only overflows when product is greater than or equal to 2^256.\n        // utilization rate's mantissa is a number between [0e18,1e18]. That means that\n        // utilizationRate1 is a value between [0e18,9e21]. This is strictly less than 2^256.\n        assert(err1 == Error.NO_ERROR);\n\n        // Next multiply this product times the borrow rate\n        (Error err2, Exp memory supplyRate0) = mulExp(utilizationRate1, annualBorrowRate);\n        // If the product of the mantissas for mulExp are both less than 2^256,\n        // then this operation will never fail. TODO: Verify.\n        // We know that borrow rate is in the interval [0, 4e17] from above.\n        // We know that utilizationRate1 is in the interval [0, 9e21] from directly above.\n        // As such, the multiplication is in the interval of [0, 3.6e39]. This is strictly\n        // less than 2^256 (which is about 10e77).\n        assert(err2 == Error.NO_ERROR);\n\n        // And then divide down by the spread's denominator (basis points divisor)\n        // as well as by blocks per year.\n        (Error err3, Exp memory supplyRate1) = divScalar(supplyRate0, 10000 * blocksPerYear); // basis points * blocks per year\n        // divScalar only fails when divisor is zero. This is clearly not the case.\n        assert(err3 == Error.NO_ERROR);\n\n        // Note: mantissa is the rate scaled 1e18, which matches the expected result\n        return (uint(IRError.NO_ERROR), supplyRate1.mantissa);\n    }\n\n    /**\n      * @notice Gets the current borrow interest rate based on the given asset, total cash and total borrows\n      * @dev The return value should be scaled by 1e18, thus a return value of\n      *      `(true, 1000000000000)` implies an interest rate of 0.000001 or 0.0001% *per block*.\n      * @param asset The asset to get the interest rate of\n      * @param cash The total cash of the asset in the market\n      * @param borrows The total borrows of the asset in the market\n      * @return Success or failure and the borrow interest rate per block scaled by 10e18\n      */\n    function getBorrowRate(address asset, uint cash, uint borrows) public returns (uint, uint) {\n        require(isAllowed(asset, cash, borrows));\n\n        (IRError err0, Exp memory _utilizationRate, Exp memory annualBorrowRate) = getUtilizationAndAnnualBorrowRate(cash, borrows);\n        if (err0 != IRError.NO_ERROR) {\n            return (uint(err0), 0);\n        }\n\n        // And then divide down by blocks per year.\n        (Error err1, Exp memory borrowRate) = divScalar(annualBorrowRate, blocksPerYear); // basis points * blocks per year\n        // divScalar only fails when divisor is zero. This is clearly not the case.\n        assert(err1 == Error.NO_ERROR);\n\n        _utilizationRate; // pragma ignore unused variable\n\n        // Note: mantissa is the rate scaled 1e18, which matches the expected result\n        return (uint(IRError.NO_ERROR), borrowRate.mantissa);\n    }\n}\n",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000003fda67f7583380e67ef93072294a7fac882fd7e70000000000000000000000001055be4bf7338c7606d9efdcf80593f180ba043e"
}