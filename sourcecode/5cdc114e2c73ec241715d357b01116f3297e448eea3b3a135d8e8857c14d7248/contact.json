{
  "address": "0x10086399dd8c1e3de736724af52587a2044c9fa2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Digital Gold Exchange Token",
  "contractName": "TMTG",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-22\n*/\n\npragma solidity ^0.4.24;\n\n\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender)\n        public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value)\n        public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    public\n    returns (bool)\n    {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n    function allowance(\n        address _owner,\n        address _spender\n    )\n    public\n    view\n    returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n    public\n    returns (bool)\n    {\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n    public\n    returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n/**\n * @title TMTGOwnable\n *\n * @dev Due to ownable change in zeppelin, the authorities in TMTGOwnable include hiddenOwner,\n *      superOwner, owner, centerBanker, and operator. \n *      Each authority has different roles.\n */\ncontract TMTGOwnable {\n    address public owner;\n    address public centralBanker;\n    address public superOwner;\n    address public hiddenOwner;\n    \n    enum Role { owner, centralBanker, superOwner, hiddenOwner }\n\n    mapping(address => bool) public operators;\n    \n    \n    event TMTG_RoleTransferred(\n        Role indexed ownerType,\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n    \n    event TMTG_SetOperator(address indexed operator); \n    event TMTG_DeletedOperator(address indexed operator);\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlyOwnerOrOperator() {\n        require(msg.sender == owner || operators[msg.sender]);\n        _;\n    }\n    \n    modifier onlyNotBankOwner(){\n        require(msg.sender != centralBanker);\n        _;\n    }\n    \n    modifier onlyBankOwner(){\n        require(msg.sender == centralBanker);\n        _;\n    }\n    \n    modifier onlySuperOwner() {\n        require(msg.sender == superOwner);\n        _;\n    }\n    \n    modifier onlyhiddenOwner(){\n        require(msg.sender == hiddenOwner);\n        _;\n    }\n    \n    constructor() public {\n        owner = msg.sender;     \n        centralBanker = msg.sender;\n        superOwner = msg.sender; \n        hiddenOwner = msg.sender;\n    }\n\n    /**\n    * @dev Set the address to operator\n    * @param _operator has the ability to pause transaction, has the ability to blacklisting & unblacklisting. \n    */\n    function setOperator(address _operator) external onlySuperOwner {\n        operators[_operator] = true;\n        emit TMTG_SetOperator(_operator);\n    }\n\n    /**\n    * @dev Remove the address from operator\n    * @param _operator has the ability to pause transaction, has the ability to blacklisting & unblacklisting. \n    */\n    function delOperator(address _operator) external onlySuperOwner {\n        operators[_operator] = false;\n        emit TMTG_DeletedOperator(_operator);\n    }\n\n    /**\n    * @dev It is possible to hand over owner’s authority. Only superowner is available.\n    * @param newOwner  \n    */\n    function transferOwnership(address newOwner) public onlySuperOwner {\n        emit TMTG_RoleTransferred(Role.owner, owner, newOwner);\n        owner = newOwner;\n    }\n\n    /**\n    * @dev It is possible to hand over centerBanker’s authority. Only superowner is available.\n    * @param newBanker centerBanker is a kind of a central bank, transaction is impossible.\n    * The amount of money to deposit is determined in accordance with cash reserve ratio and the amount of currency in circulation\n    * To withdraw money out of a wallet and give it to owner, audit is inevitable \n    */\n    function transferBankOwnership(address newBanker) public onlySuperOwner {\n        emit TMTG_RoleTransferred(Role.centralBanker, centralBanker, newBanker);\n        centralBanker = newBanker;\n    }\n\n    /**\n    * @dev It is possible to hand over superOwner’s authority. Only hiddenowner is available.  \n    * @param newSuperOwner  SuperOwner manages all authorities except for hiddenOwner and superOwner\n    */\n    function transferSuperOwnership(address newSuperOwner) public onlyhiddenOwner {\n        emit TMTG_RoleTransferred(Role.superOwner, superOwner, newSuperOwner);\n        superOwner = newSuperOwner;\n    }\n    \n    /**\n    * @dev It is possible to hand over hiddenOwner’s authority. Only hiddenowner is available\n    * @param newhiddenOwner NewhiddenOwner and hiddenOwner don’t have many functions, \n    * but they can set and remove authorities of superOwner and hiddenOwner.\n    */\n    function changeHiddenOwner(address newhiddenOwner) public onlyhiddenOwner {\n        emit TMTG_RoleTransferred(Role.hiddenOwner, hiddenOwner, newhiddenOwner);\n        hiddenOwner = newhiddenOwner;\n    }\n}\n\n/**\n * @title TMTGPausable\n *\n * @dev It is used to stop trading in emergency situation\n */\ncontract TMTGPausable is TMTGOwnable {\n    event TMTG_Pause();\n    event TMTG_Unpause();\n\n    bool public paused = false;\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n    /**\n    * @dev Block trading. Only owner and operator are available.\n    */\n    function pause() onlyOwnerOrOperator whenNotPaused public {\n        paused = true;\n        emit TMTG_Pause();\n    }\n  \n    /**\n    * @dev Unlock limit for trading. Owner and operator are available and this function can be operated in paused mode.\n    */\n    function unpause() onlyOwnerOrOperator whenPaused public {\n        paused = false;\n        emit TMTG_Unpause();\n    }\n}\n\n/**\n * @title TMTGBlacklist\n *\n * @dev Block trading of the suspicious account address.\n */\ncontract TMTGBlacklist is TMTGOwnable {\n    mapping(address => bool) blacklisted;\n    \n    event TMTG_Blacklisted(address indexed blacklist);\n    event TMTG_Whitelisted(address indexed whitelist);\n\n    modifier whenPermitted(address node) {\n        require(!blacklisted[node]);\n        _;\n    }\n    \n    /**\n    * @dev Check a certain node is in a blacklist\n    * @param node  Check whether the user at a certain node is in a blacklist\n    */\n    function isPermitted(address node) public view returns (bool) {\n        return !blacklisted[node];\n    }\n\n    /**\n    * @dev Process blacklisting\n    * @param node Process blacklisting. Put the user in the blacklist.   \n    */\n    function blacklist(address node) public onlyOwnerOrOperator {\n        blacklisted[node] = true;\n        emit TMTG_Blacklisted(node);\n    }\n\n    /**\n    * @dev Process unBlacklisting. \n    * @param node Remove the user from the blacklist.   \n    */\n    function unblacklist(address node) public onlyOwnerOrOperator {\n        blacklisted[node] = false;\n        emit TMTG_Whitelisted(node);\n    }\n}\n\n/**\n * @title HasNoEther\n */\ncontract HasNoEther is TMTGOwnable {\n    \n    /**\n  * @dev Constructor that rejects incoming Ether\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n    constructor() public payable {\n        require(msg.value == 0);\n    }\n    \n    /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n    function() external {\n    }\n    \n    /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n    function reclaimEther() external onlyOwner {\n        owner.transfer(address(this).balance);\n    }\n}\n\n/**\n * @title TMTGBaseToken - Major functions such as authority setting on tockenlock are registered.\n */\ncontract TMTGBaseToken is StandardToken, TMTGPausable, TMTGBlacklist, HasNoEther {\n    uint256 public openingTime;\n    \n    struct investor {\n        uint256 _sentAmount;\n        uint256 _initialAmount;\n        uint256 _limit;\n    }\n\n    mapping(address => investor) public searchInvestor;\n    mapping(address => bool) public superInvestor;\n    mapping(address => bool) public CEx;\n    mapping(address => bool) public investorList;\n    \n    event TMTG_SetCEx(address indexed CEx); \n    event TMTG_DeleteCEx(address indexed CEx);\n    \n    event TMTG_SetSuperInvestor(address indexed SuperInvestor); \n    event TMTG_DeleteSuperInvestor(address indexed SuperInvestor);\n    \n    event TMTG_SetInvestor(address indexed investor); \n    event TMTG_DeleteInvestor(address indexed investor);\n    \n    event TMTG_Stash(uint256 _value);\n    event TMTG_Unstash(uint256 _value);\n\n    event TMTG_TransferFrom(address indexed owner, address indexed spender, address indexed to, uint256 value);\n    event TMTG_Burn(address indexed burner, uint256 value);\n    \n    /**\n    * @dev Register the address as a cex address\n    * @param _CEx  Register the address as a cex address \n    */\n    function setCEx(address _CEx) external onlySuperOwner {   \n        CEx[_CEx] = true;\n        \n        emit TMTG_SetCEx(_CEx);\n    }\n\n    /**\n    * @dev Remove authorities of the address used in Exchange\n    * @param _CEx Remove authorities of the address used in Exchange   \n    */\n    function delCEx(address _CEx) external onlySuperOwner {   \n        CEx[_CEx] = false;\n        \n        emit TMTG_DeleteCEx(_CEx);\n    }\n\n    /**\n    * @dev Register the address as a superinvestor address\n    * @param _super Register the address as a superinvestor address   \n    */\n    function setSuperInvestor(address _super) external onlySuperOwner {\n        superInvestor[_super] = true;\n        \n        emit TMTG_SetSuperInvestor(_super);\n    }\n\n    /** \n    * @param _super Remove authorities of the address as a superinvestor  \n    */\n    function delSuperInvestor(address _super) external onlySuperOwner {\n        superInvestor[_super] = false;\n        \n        emit TMTG_DeleteSuperInvestor(_super);\n    }\n\n    /**\n    * @param _addr  Remove authorities of the address as a investor .   \n    */\n    function delInvestor(address _addr) onlySuperOwner public {\n        investorList[_addr] = false;\n        searchInvestor[_addr] = investor(0,0,0);\n        emit TMTG_DeleteInvestor(_addr);\n    }\n\n    function setOpeningTime() onlyOwner public returns(bool) {\n        openingTime = block.timestamp;\n\n    }\n\n    /**\n    * @dev  After one month, the amount will be 1, which means 10% of the coins can be used. \n    * After 7 months, 70% of the amount can be used.\n    */\n    function getLimitPeriod() external view returns (uint256) {\n        uint256 presentTime = block.timestamp;\n        uint256 timeValue = presentTime.sub(openingTime);\n        uint256 result = timeValue.div(31 days);\n        return result;\n    }\n\n    /**\n    * @dev Check the latest limit\n    * @param who Check the latest limit. \n    * Return the limit value of the user at the present moment. After 3 months, _result value will be 30% of initialAmount \n    */\n    function _timelimitCal(address who) internal view returns (uint256) {\n        uint256 presentTime = block.timestamp;\n        uint256 timeValue = presentTime.sub(openingTime);\n        uint256 _result = timeValue.div(31 days);\n\n        return _result.mul(searchInvestor[who]._limit);\n    }\n\n    /**\n    * @dev In case of investor transfer, values will be limited by timelock\n    * @param _to address to send\n    * @param _value tmtg's amount\n    */\n    function _transferInvestor(address _to, uint256 _value) internal returns (bool ret) {\n        uint256 addedValue = searchInvestor[msg.sender]._sentAmount.add(_value);\n\n        require(_timelimitCal(msg.sender) >= addedValue);\n        \n        searchInvestor[msg.sender]._sentAmount = addedValue;        \n        ret = super.transfer(_to, _value);\n        if (!ret) {\n        searchInvestor[msg.sender]._sentAmount = searchInvestor[msg.sender]._sentAmount.sub(_value);\n        }\n    }\n\n    /**\n    * @dev When the transfer function is run, \n    * there are two different types; transfer from superinvestors to investor and to non-investors. \n    * In the latter case, the non-investors will be investor and 10% of the initial amount will be allocated. \n    * And when investor operates the transfer function, the values will be limited by timelock.\n    * @param _to address to send\n    * @param _value tmtg's amount\n    */\n    function transfer(address _to, uint256 _value) public\n    whenPermitted(msg.sender) whenPermitted(_to) whenNotPaused onlyNotBankOwner\n    returns (bool) {   \n        \n        if(investorList[msg.sender]) {\n            return _transferInvestor(_to, _value);\n        \n        } else {\n            if (superInvestor[msg.sender]) {\n                require(_to != owner);\n                require(!superInvestor[_to]);\n                require(!CEx[_to]);\n\n                if(!investorList[_to]){\n                    investorList[_to] = true;\n                    searchInvestor[_to] = investor(0, _value, _value.div(10));\n                    emit TMTG_SetInvestor(_to); \n                }\n            }\n            return super.transfer(_to, _value);\n        }\n    }\n    \n    /**\n    * @dev If investor is from in transforFrom, values will be limited by timelock\n    * @param _from send amount from this address \n    * @param _to address to send\n    * @param _value tmtg's amount\n    */\n    function _transferFromInvestor(address _from, address _to, uint256 _value)\n    public returns(bool ret) {\n        uint256 addedValue = searchInvestor[_from]._sentAmount.add(_value);\n        require(_timelimitCal(_from) >= addedValue);\n        searchInvestor[_from]._sentAmount = addedValue;\n        ret = super.transferFrom(_from, _to, _value);\n\n        if (!ret) {\n            searchInvestor[_from]._sentAmount = searchInvestor[_from]._sentAmount.sub(_value);\n        }else {\n            emit TMTG_TransferFrom(_from, msg.sender, _to, _value);\n        }\n    }\n\n    /**\n    * @dev If from is superinvestor in transforFrom, the function can’t be used because of limit in Approve. \n    * And if from is investor, the amount of coins to send is limited by timelock.\n    * @param _from send amount from this address \n    * @param _to address to send\n    * @param _value tmtg's amount\n    */\n    function transferFrom(address _from, address _to, uint256 _value)\n    public whenNotPaused whenPermitted(_from) whenPermitted(_to) whenPermitted(msg.sender)\n    returns (bool ret)\n    {   \n        if(investorList[_from]) {\n            return _transferFromInvestor(_from, _to, _value);\n        } else {\n            ret = super.transferFrom(_from, _to, _value);\n            emit TMTG_TransferFrom(_from, msg.sender, _to, _value);\n        }\n    }\n\n    function approve(address _spender, uint256 _value) public\n    whenPermitted(msg.sender) whenPermitted(_spender)\n    whenNotPaused onlyNotBankOwner\n    returns (bool) {\n        require(!superInvestor[msg.sender]);\n        return super.approve(_spender,_value);     \n    }\n    \n    function increaseApproval(address _spender, uint256 _addedValue) public \n    whenNotPaused onlyNotBankOwner\n    whenPermitted(msg.sender) whenPermitted(_spender)\n    returns (bool) {\n        require(!superInvestor[msg.sender]);\n        return super.increaseApproval(_spender, _addedValue);\n    }\n    \n    function decreaseApproval(address _spender, uint256 _subtractedValue) public\n    whenNotPaused onlyNotBankOwner\n    whenPermitted(msg.sender) whenPermitted(_spender)\n    returns (bool) {\n        require(!superInvestor[msg.sender]);\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who]);\n\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n\n        emit Transfer(_who, address(0), _value);\n        emit TMTG_Burn(_who, _value);\n    }\n\n    function burn(uint256 _value) onlyOwner public returns (bool) {\n        _burn(msg.sender, _value);\n        return true;\n    }\n    \n    function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool) {\n        require(_value <= allowed[_from][msg.sender]);\n        \n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        _burn(_from, _value);\n        \n        return true;\n    }\n    \n    /**\n    * @dev onlyOwner is available and the amount of coins can be deposited in centerBanker.\n    * @param _value tmtg's amount\n    */\n    function stash(uint256 _value) public onlyOwner {\n        require(balances[owner] >= _value);\n        \n        super.transfer(centralBanker, _value);\n        \n        emit TMTG_Stash(_value);        \n    }\n    /**\n    * @dev Only centerBanker is available and withdrawal of the amount of coins to owner is possible. But audit is inevitable.\n    * @param _value tmtg's amount\n    */\n    function unstash(uint256 _value) public onlyBankOwner {\n        require(balances[centralBanker] >= _value);\n        \n        super.transfer(owner, _value);\n        \n        emit TMTG_Unstash(_value);\n    }\n    \n    function reclaimToken() external onlyOwner {\n        transfer(owner, balanceOf(this));\n    }\n    \n    function destory() onlyhiddenOwner public {\n        selfdestruct(superOwner);\n    } \n    \n    function refreshInvestor(address _investor, address _to, uint _amount) onlyOwner public  {\n\n       require(investorList[_investor]);\n\n       require(_to != address(0));\n\n       require(_amount <= balances[_investor]);\n\n       super.transferFrom(_investor, _to, _amount); \n\n    }\n\n}\n\ncontract TMTG is TMTGBaseToken {\n    string public constant name = \"The Midas Touch Gold\";\n    string public constant symbol = \"TMTG\";\n    uint8 public constant decimals = 18;\n    uint256 public constant INITIAL_SUPPLY = 1e10 * (10 ** uint256(decimals));\n\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        openingTime = block.timestamp;\n\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"superInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newhiddenOwner\",\"type\":\"address\"}],\"name\":\"changeHiddenOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"delInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setOpeningTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CEx\",\"type\":\"address\"}],\"name\":\"delCEx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unstash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"delOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isPermitted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"CEx\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"centralBanker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CEx\",\"type\":\"address\"}],\"name\":\"setCEx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"transferSuperOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBanker\",\"type\":\"address\"}],\"name\":\"transferBankOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"searchInvestor\",\"outputs\":[{\"name\":\"_sentAmount\",\"type\":\"uint256\"},{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLimitPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_super\",\"type\":\"address\"}],\"name\":\"delSuperInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_transferFromInvestor\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"stash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_super\",\"type\":\"address\"}],\"name\":\"setSuperInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refreshInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hiddenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"CEx\",\"type\":\"address\"}],\"name\":\"TMTG_SetCEx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"CEx\",\"type\":\"address\"}],\"name\":\"TMTG_DeleteCEx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SuperInvestor\",\"type\":\"address\"}],\"name\":\"TMTG_SetSuperInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SuperInvestor\",\"type\":\"address\"}],\"name\":\"TMTG_DeleteSuperInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"TMTG_SetInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"TMTG_DeleteInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TMTG_Stash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TMTG_Unstash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TMTG_TransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TMTG_Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blacklist\",\"type\":\"address\"}],\"name\":\"TMTG_Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"whitelist\",\"type\":\"address\"}],\"name\":\"TMTG_Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TMTG_Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TMTG_Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ownerType\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TMTG_RoleTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TMTG_SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TMTG_DeletedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": ""
}