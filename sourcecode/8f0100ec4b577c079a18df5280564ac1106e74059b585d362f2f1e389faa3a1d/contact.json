{
  "address": "0x5f7d95329e806befa024982e91b7127393737249",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BaapPay",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-01\n*/\n\npragma solidity 0.4.20;\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\n \n \nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract ERC20Interface {\n     function totalSupply() public constant returns (uint);\n     function balanceOf(address tokenOwner) public constant returns (uint balance);\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n     function transfer(address to, uint tokens) public returns (bool success);\n     function approve(address spender, uint tokens) public returns (bool success);\n     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n     event Transfer(address indexed from, address indexed to, uint tokens);\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract BaapPay is ERC20Interface,Ownable {\n\n   using SafeMath for uint256;\n   \n   string public name;\n   string public symbol;\n   uint256 public decimals;\n\n   uint256 public _totalSupply;\n   mapping(address => uint256) tokenBalances;\n   address ownerWallet;\n   // Owner of account approves the transfer of an amount to another account\n   mapping (address => mapping (address => uint256)) allowed;\n   event Debug(string message, address addr, uint256 number);\n\n    modifier checkSize(uint numwords) {\n        assert(msg.data.length >= numwords * 32 + 4);\n        _;\n    }     \n    \n   /**\n   * @dev Contructor that gives wallet all of existing tokens.\n   */\n    function BaapPay(address wallet) public {\n        owner = wallet;\n        name  = \"BaapPay\";\n        symbol = \"BAAP\";\n        decimals = 18;\n        _totalSupply = 235000000;\n        _totalSupply = _totalSupply.mul(10 ** uint(decimals));\n        tokenBalances[owner] = _totalSupply;   //Since we divided the token into 10^18 parts\n    }\n    \n     // Get the token balance for account `tokenOwner`\n     function balanceOf(address tokenOwner) public constant returns (uint balance) {\n         return tokenBalances[tokenOwner];\n     }\n  \n     // Transfer the balance from owner's account to another account\n     function transfer(address to, uint tokens) public checkSize(2) returns (bool success) {\n         require(to != address(0));\n         require(tokens <= tokenBalances[msg.sender]);\n         tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(tokens);\n         tokenBalances[to] = tokenBalances[to].add(tokens);\n         Transfer(msg.sender, to, tokens);\n         return true;\n     }\n  \n     /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public checkSize(3) returns (bool) {\n    require(_to != address(0));\n    require(_value <= tokenBalances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    tokenBalances[_from] = tokenBalances[_from].sub(_value);\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n  \n     /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public checkSize(2) returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n     // ------------------------------------------------------------------------\n     // Total supply\n     // ------------------------------------------------------------------------\n     function totalSupply() public constant returns (uint) {\n         return _totalSupply.sub(tokenBalances[address(0)]);\n     }\n     \n    \n     \n     // ------------------------------------------------------------------------\n     // Returns the amount of tokens approved by the owner that can be\n     // transferred to the spender's account\n     // ------------------------------------------------------------------------\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n         return allowed[tokenOwner][spender];\n     }\n     \n     // ------------------------------------------------------------------------\n     // Don't accept ETH\n     // ------------------------------------------------------------------------\n     function () public payable {\n         revert();\n     }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051602080610a908339810160405280805160008054600160a060020a038084163391909116600160a060020a0319928316179091161790559150604090508051908101604052600781527f42616170506179000000000000000000000000000000000000000000000000006020820152600190805161009492916020019061015a565b5060408051908101604052600481527f4241415000000000000000000000000000000000000000000000000000000000602082015260029080516100dc92916020019061015a565b506012600355630e01d0c0600481905561010b90670de0b6b3a764000064010000000061083c61012f82021704565b600481905560008054600160a060020a0316815260056020526040902055506101f5565b600082820283158061014b575082848281151561014857fe5b04145b151561015357fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061019b57805160ff19168380011785556101c8565b828001600101855582156101c8579182015b828111156101c85782518255916020019190600101906101ad565b506101d49291506101d8565b5090565b6101f291905b808211156101d457600081556001016101de565b90565b61088c806102046000396000f3006060604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461017e57806323b872dd146101a3578063313ce567146101cb5780633eaaf86b146101de57806370a08231146101f15780638da5cb5b1461021057806395d89b411461023f578063a9059cbb14610252578063dd62ed3e14610274578063f2fde38b14610299575b600080fd5b34156100c957600080fd5b6100d16102ba565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010d5780820151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015357600080fd5b61016a600160a060020a0360043516602435610358565b604051901515815260200160405180910390f35b341561018957600080fd5b6101916103d1565b60405190815260200160405180910390f35b34156101ae57600080fd5b61016a600160a060020a0360043581169060243516604435610414565b34156101d657600080fd5b6101916105a4565b34156101e957600080fd5b6101916105aa565b34156101fc57600080fd5b610191600160a060020a03600435166105b0565b341561021b57600080fd5b6102236105cb565b604051600160a060020a03909116815260200160405180910390f35b341561024a57600080fd5b6100d16105da565b341561025d57600080fd5b61016a600160a060020a0360043516602435610645565b341561027f57600080fd5b610191600160a060020a036004358116906024351661074e565b34156102a457600080fd5b6102b8600160a060020a0360043516610779565b005b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103505780601f1061032557610100808354040283529160200191610350565b820191906000526020600020905b81548152906001019060200180831161033357829003601f168201915b505050505081565b60006002604436101561036757fe5b600160a060020a03338116600081815260076020908152604080832094891680845294909152908190208690557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a35060019392505050565b600080805260056020527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc5460045461040f9163ffffffff61081416565b905090565b60006003606436101561042357fe5b600160a060020a038416151561043857600080fd5b600160a060020a03851660009081526005602052604090205483111561045d57600080fd5b600160a060020a038086166000908152600760209081526040808320339094168352929052205483111561049057600080fd5b600160a060020a0385166000908152600560205260409020546104b9908463ffffffff61081416565b600160a060020a0380871660009081526005602052604080822093909355908616815220546104ee908463ffffffff61082616565b600160a060020a03808616600090815260056020908152604080832094909455888316825260078152838220339093168252919091522054610536908463ffffffff61081416565b600160a060020a03808716600081815260076020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60035481565b60045481565b600160a060020a031660009081526005602052604090205490565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103505780601f1061032557610100808354040283529160200191610350565b60006002604436101561065457fe5b600160a060020a038416151561066957600080fd5b600160a060020a03331660009081526005602052604090205483111561068e57600080fd5b600160a060020a0333166000908152600560205260409020546106b7908463ffffffff61081416565b600160a060020a0333811660009081526005602052604080822093909355908616815220546106ec908463ffffffff61082616565b600160a060020a0380861660008181526005602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35060019392505050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b60005433600160a060020a0390811691161461079457600080fd5b600160a060020a03811615156107a957600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561082057fe5b50900390565b60008282018381101561083557fe5b9392505050565b6000828202831580610858575082848281151561085557fe5b04145b151561083557fe00a165627a7a72305820bac45833449dc11116118e28e3757c664ee0a0f522800365a7ea2be0d6604b3c0029000000000000000000000000c542b031d4f7f8d476f82dec4e5c8f5bc75119d8",
  "constructorArguments": "000000000000000000000000c542b031d4f7f8d476f82dec4e5c8f5bc75119d8"
}