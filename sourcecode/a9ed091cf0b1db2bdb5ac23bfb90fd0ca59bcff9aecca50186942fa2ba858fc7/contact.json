{
  "address": "0xfa05a73ffe78ef8f1a739473e462c54bae6567d9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Lunyr Token",
  "contractName": "LunyrToken",
  "compilerVersion": "v0.4.8+commit.60cc1668",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-03-29\n*/\n\npragma solidity ^0.4.8;\n\n// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\n/*\n * ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function allowance(address owner, address spender) constant returns (uint);\n\n  function transfer(address to, uint value) returns (bool ok);\n  function transferFrom(address from, address to, uint value) returns (bool ok);\n  function approve(address spender, uint value) returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\n/// @author Stefan George - <[emailÂ protected]>\ncontract MultiSigWallet {\n\n    // flag to determine if address is for a real contract or not\n    bool public isMultiSigWallet = false;\n\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        if (msg.sender != address(this)) throw;\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        if (isOwner[owner]) throw;\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        if (!isOwner[owner]) throw;\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        if (transactions[transactionId].destination == 0) throw;\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        if (!confirmations[transactionId][owner]) throw;\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        if (confirmations[transactionId][owner]) throw;\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        if (transactions[transactionId].executed) throw;\n        _;\n    }\n\n    modifier notNull(address _address) {\n        if (_address == 0) throw;\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        if (ownerCount > MAX_OWNER_COUNT) throw;\n        if (_required > ownerCount) throw;\n        if (_required == 0) throw;\n        if (ownerCount == 0) throw;\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++) {\n            if (isOwner[_owners[i]] || _owners[i] == 0) throw;\n            isOwner[_owners[i]] = true;\n        }\n        isMultiSigWallet = true;\n        owners = _owners;\n        required = _required;\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param newOwner Address of new owner.\n    /// @param index the indx of the owner to be replaced\n    function replaceOwnerIndexed(address owner, address newOwner, uint index)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        if (owners[index] != owner) throw;\n        owners[index] = newOwner;\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n       internal\n       notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction tx = transactions[transactionId];\n            tx.executed = true;\n            if (tx.destination.call.value(tx.value)(tx.data))\n                Execution(transactionId);\n            else {\n                ExecutionFailure(transactionId);\n                tx.executed = false;\n            }\n        }\n    }\n\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n            if ((pending && !transactions[i].executed) ||\n                (executed && transactions[i].executed))\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=0; i<transactionCount; i++)\n          if ((pending && !transactions[i].executed) ||\n              (executed && transactions[i].executed))\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}\n\n\n\ncontract NewToken is ERC20 {}\n\ncontract UpgradeAgent is SafeMath {\n  address public owner;\n  bool public isUpgradeAgent;\n  NewToken public newToken;\n  uint256 public originalSupply; // the original total supply of old tokens\n  bool public upgradeHasBegun;\n  function upgradeFrom(address _from, uint256 _value) public;\n}\n\n/// @title Time-locked vault of tokens allocated to Lunyr after 180 days\ncontract LUNVault is SafeMath {\n\n    // flag to determine if address is for a real contract or not\n    bool public isLUNVault = false;\n\n    LunyrToken lunyrToken;\n    address lunyrMultisig;\n    uint256 unlockedAtBlockNumber;\n    //uint256 public constant numBlocksLocked = 1110857;\n    // smaller lock for testing\n    uint256 public constant numBlocksLocked = 1110857;\n\n    /// @notice Constructor function sets the Lunyr Multisig address and\n    /// total number of locked tokens to transfer\n    function LUNVault(address _lunyrMultisig) internal {\n        if (_lunyrMultisig == 0x0) throw;\n        lunyrToken = LunyrToken(msg.sender);\n        lunyrMultisig = _lunyrMultisig;\n        isLUNVault = true;\n        unlockedAtBlockNumber = safeAdd(block.number, numBlocksLocked); // 180 days of blocks later\n    }\n\n    /// @notice Transfer locked tokens to Lunyr's multisig wallet\n    function unlock() external {\n        // Wait your turn!\n        if (block.number < unlockedAtBlockNumber) throw;\n        // Will fail if allocation (and therefore toTransfer) is 0.\n        if (!lunyrToken.transfer(lunyrMultisig, lunyrToken.balanceOf(this))) throw;\n    }\n\n    // disallow payment this is for LUN not ether\n    function () { throw; }\n\n}\n\n/// @title Lunyr crowdsale contract\ncontract LunyrToken is SafeMath, ERC20 {\n\n    // flag to determine if address is for a real contract or not\n    bool public isLunyrToken = false;\n\n    // State machine\n    enum State{PreFunding, Funding, Success, Failure}\n\n    // Token information\n    string public constant name = \"Lunyr Token\";\n    string public constant symbol = \"LUN\";\n    uint256 public constant decimals = 18;  // decimal places\n    uint256 public constant crowdfundPercentOfTotal = 78;\n    uint256 public constant vaultPercentOfTotal = 15;\n    uint256 public constant lunyrPercentOfTotal = 7;\n    uint256 public constant hundredPercent = 100;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Upgrade information\n    address public upgradeMaster;\n    UpgradeAgent public upgradeAgent;\n    uint256 public totalUpgraded;\n\n    // Crowdsale information\n    bool public finalizedCrowdfunding = false;\n    uint256 public fundingStartBlock; // crowdsale start block\n    uint256 public fundingEndBlock; // crowdsale end block\n    uint256 public constant tokensPerEther = 44; // LUN:ETH exchange rate\n    uint256 public constant tokenCreationMax = safeMul(250000 ether, tokensPerEther);\n    uint256 public constant tokenCreationMin = safeMul(25000 ether, tokensPerEther);\n    // for testing on testnet\n    //uint256 public constant tokenCreationMax = safeMul(10 ether, tokensPerEther);\n    //uint256 public constant tokenCreationMin = safeMul(3 ether, tokensPerEther);\n\n    address public lunyrMultisig;\n    LUNVault public timeVault; // Lunyr's time-locked vault\n\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n    event Refund(address indexed _from, uint256 _value);\n    event UpgradeFinalized(address sender, address upgradeAgent);\n    event UpgradeAgentSet(address agent);\n\n    // For mainnet, startBlock = 3445888, endBlock = 3618688\n    function LunyrToken(address _lunyrMultisig,\n                        address _upgradeMaster,\n                        uint256 _fundingStartBlock,\n                        uint256 _fundingEndBlock) {\n\n        if (_lunyrMultisig == 0) throw;\n        if (_upgradeMaster == 0) throw;\n        if (_fundingStartBlock <= block.number) throw;\n        if (_fundingEndBlock   <= _fundingStartBlock) throw;\n        isLunyrToken = true;\n        upgradeMaster = _upgradeMaster;\n        fundingStartBlock = _fundingStartBlock;\n        fundingEndBlock = _fundingEndBlock;\n        timeVault = new LUNVault(_lunyrMultisig);\n        if (!timeVault.isLUNVault()) throw;\n        lunyrMultisig = _lunyrMultisig;\n        if (!MultiSigWallet(lunyrMultisig).isMultiSigWallet()) throw;\n    }\n\n    function balanceOf(address who) constant returns (uint) {\n        return balances[who];\n    }\n\n    /// @notice Transfer `value` LUN tokens from sender's account\n    /// `msg.sender` to provided account address `to`.\n    /// @notice This function is disabled during the funding.\n    /// @dev Required state: Success\n    /// @param to The address of the recipient\n    /// @param value The number of LUN to transfer\n    /// @return Whether the transfer was successful or not\n    function transfer(address to, uint256 value) returns (bool ok) {\n        if (getState() != State.Success) throw; // Abort if crowdfunding was not a success.\n        if (to == 0x0) throw;\n        if (to == address(upgradeAgent)) throw;\n        //if (to == address(upgradeAgent.newToken())) throw;\n        uint256 senderBalance = balances[msg.sender];\n        if (senderBalance >= value && value > 0) {\n            senderBalance = safeSub(senderBalance, value);\n            balances[msg.sender] = senderBalance;\n            balances[to] = safeAdd(balances[to], value);\n            Transfer(msg.sender, to, value);\n            return true;\n        }\n        return false;\n    }\n\n    /// @notice Transfer `value` LUN tokens from sender 'from'\n    /// to provided account address `to`.\n    /// @notice This function is disabled during the funding.\n    /// @dev Required state: Success\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The number of LUN to transfer\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address from, address to, uint value) returns (bool ok) {\n        if (getState() != State.Success) throw; // Abort if not in Success state.\n        if (to == 0x0) throw;\n        if (to == address(upgradeAgent)) throw;\n        //if (to == address(upgradeAgent.newToken())) throw;\n        if (balances[from] >= value &&\n            allowed[from][msg.sender] >= value)\n        {\n            balances[to] = safeAdd(balances[to], value);\n            balances[from] = safeSub(balances[from], value);\n            allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], value);\n            Transfer(from, to, value);\n            return true;\n        } else { return false; }\n    }\n\n    /// @notice `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address spender, uint256 value) returns (bool ok) {\n        if (getState() != State.Success) throw; // Abort if not in Success state.\n        allowed[msg.sender][spender] = value;\n        Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender) constant returns (uint) {\n        return allowed[owner][spender];\n    }\n\n    // Token upgrade functionality\n\n    /// @notice Upgrade tokens to the new token contract.\n    /// @dev Required state: Success\n    /// @param value The number of tokens to upgrade\n    function upgrade(uint256 value) external {\n        if (getState() != State.Success) throw; // Abort if not in Success state.\n        if (upgradeAgent.owner() == 0x0) throw; // need a real upgradeAgent address\n\n        // Validate input value.\n        if (value == 0) throw;\n        if (value > balances[msg.sender]) throw;\n\n        // update the balances here first before calling out (reentrancy)\n        balances[msg.sender] = safeSub(balances[msg.sender], value);\n        totalSupply = safeSub(totalSupply, value);\n        totalUpgraded = safeAdd(totalUpgraded, value);\n        upgradeAgent.upgradeFrom(msg.sender, value);\n        Upgrade(msg.sender, upgradeAgent, value);\n    }\n\n    /// @notice Set address of upgrade target contract and enable upgrade\n    /// process.\n    /// @dev Required state: Success\n    /// @param agent The address of the UpgradeAgent contract\n    function setUpgradeAgent(address agent) external {\n        if (getState() != State.Success) throw; // Abort if not in Success state.\n        if (agent == 0x0) throw; // don't set agent to nothing\n        if (msg.sender != upgradeMaster) throw; // Only a master can designate the next agent\n        if (address(upgradeAgent) != 0x0 && upgradeAgent.upgradeHasBegun()) throw; // Don't change the upgrade agent\n        upgradeAgent = UpgradeAgent(agent);\n        // upgradeAgent must be created and linked to LunyrToken after crowdfunding is over\n        if (upgradeAgent.originalSupply() != totalSupply) throw;\n        UpgradeAgentSet(upgradeAgent);\n    }\n\n    /// @notice Set address of upgrade target contract and enable upgrade\n    /// process.\n    /// @dev Required state: Success\n    /// @param master The address that will manage upgrades, not the upgradeAgent contract address\n    function setUpgradeMaster(address master) external {\n        if (getState() != State.Success) throw; // Abort if not in Success state.\n        if (master == 0x0) throw;\n        if (msg.sender != upgradeMaster) throw; // Only a master can designate the next master\n        upgradeMaster = master;\n    }\n\n    function setMultiSigWallet(address newWallet) external {\n      if (msg.sender != lunyrMultisig) throw;\n      MultiSigWallet wallet = MultiSigWallet(newWallet);\n      if (!wallet.isMultiSigWallet()) throw;\n      lunyrMultisig = newWallet;\n    }\n\n    // Crowdfunding:\n\n    // don't just send ether to the contract expecting to get tokens\n    function() { throw; }\n\n\n    /// @notice Create tokens when funding is active.\n    /// @dev Required state: Funding\n    /// @dev State transition: -> Funding Success (only if cap reached)\n    function create() payable external {\n        // Abort if not in Funding Active state.\n        // The checks are split (instead of using or operator) because it is\n        // cheaper this way.\n        if (getState() != State.Funding) throw;\n\n        // Do not allow creating 0 or more than the cap tokens.\n        if (msg.value == 0) throw;\n\n        // multiply by exchange rate to get newly created token amount\n        uint256 createdTokens = safeMul(msg.value, tokensPerEther);\n\n        // we are creating tokens, so increase the totalSupply\n        totalSupply = safeAdd(totalSupply, createdTokens);\n\n        // don't go over the limit!\n        if (totalSupply > tokenCreationMax) throw;\n\n        // Assign new tokens to the sender\n        balances[msg.sender] = safeAdd(balances[msg.sender], createdTokens);\n\n        // Log token creation event\n        Transfer(0, msg.sender, createdTokens);\n    }\n\n    /// @notice Finalize crowdfunding\n    /// @dev If cap was reached or crowdfunding has ended then:\n    /// create LUN for the Lunyr Multisig and developer,\n    /// transfer ETH to the Lunyr Multisig address.\n    /// @dev Required state: Success\n    function finalizeCrowdfunding() external {\n        // Abort if not in Funding Success state.\n        if (getState() != State.Success) throw; // don't finalize unless we won\n        if (finalizedCrowdfunding) throw; // can't finalize twice (so sneaky!)\n\n        // prevent more creation of tokens\n        finalizedCrowdfunding = true;\n\n        // Endowment: 15% of total goes to vault, timelocked for 6 months\n        // uint256 vaultTokens = safeDiv(safeMul(totalSupply, vaultPercentOfTotal), hundredPercent);\n        uint256 vaultTokens = safeDiv(safeMul(totalSupply, vaultPercentOfTotal), crowdfundPercentOfTotal);\n        balances[timeVault] = safeAdd(balances[timeVault], vaultTokens);\n        Transfer(0, timeVault, vaultTokens);\n\n        // Endowment: 7% of total goes to lunyr for marketing and bug bounty\n        uint256 lunyrTokens = safeDiv(safeMul(totalSupply, lunyrPercentOfTotal), crowdfundPercentOfTotal);\n        balances[lunyrMultisig] = safeAdd(balances[lunyrMultisig], lunyrTokens);\n        Transfer(0, lunyrMultisig, lunyrTokens);\n\n        totalSupply = safeAdd(safeAdd(totalSupply, vaultTokens), lunyrTokens);\n\n        // Transfer ETH to the Lunyr Multisig address.\n        if (!lunyrMultisig.send(this.balance)) throw;\n    }\n\n    /// @notice Get back the ether sent during the funding in case the funding\n    /// has not reached the minimum level.\n    /// @dev Required state: Failure\n    function refund() external {\n        // Abort if not in Funding Failure state.\n        if (getState() != State.Failure) throw;\n\n        uint256 lunValue = balances[msg.sender];\n        if (lunValue == 0) throw;\n        balances[msg.sender] = 0;\n        totalSupply = safeSub(totalSupply, lunValue);\n\n        uint256 ethValue = safeDiv(lunValue, tokensPerEther); // lunValue % tokensPerEther == 0\n        Refund(msg.sender, ethValue);\n        if (!msg.sender.send(ethValue)) throw;\n    }\n\n    /// @notice This manages the crowdfunding state machine\n    /// We make it a function and do not assign the result to a variable\n    /// So there is no chance of the variable being stale\n    function getState() public constant returns (State){\n      // once we reach success, lock in the state\n      if (finalizedCrowdfunding) return State.Success;\n      if (block.number < fundingStartBlock) return State.PreFunding;\n      else if (block.number <= fundingEndBlock && totalSupply < tokenCreationMax) return State.Funding;\n      else if (totalSupply >= tokenCreationMin) return State.Success;\n      else return State.Failure;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdfundPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdfunding\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lunyrPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedCrowdfunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hundredPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLunyrToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lunyrMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setMultiSigWallet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"name\":\"setUpgradeMaster\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_lunyrMultisig\",\"type\":\"address\"},{\"name\":\"_upgradeMaster\",\"type\":\"address\"},{\"name\":\"_fundingStartBlock\",\"type\":\"uint256\"},{\"name\":\"_fundingEndBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"upgradeAgent\",\"type\":\"address\"}],\"name\":\"UpgradeFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000083c54a35e72ae07c46fc8f8f172a13ba19ac3bed00000000000000000000000083c54a35e72ae07c46fc8f8f172a13ba19ac3bed00000000000000000000000000000000000000000000000000000000003480780000000000000000000000000000000000000000000000000000000000372378"
}