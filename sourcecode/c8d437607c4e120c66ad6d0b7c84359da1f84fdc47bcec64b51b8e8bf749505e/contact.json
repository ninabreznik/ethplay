{
  "address": "0xe93b1e712db327d8ce1ef6fdf9719312b8b5dc00",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DecentralandVesting",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.4.18;\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/ReturnVestingRegistry.sol\n\ncontract ReturnVestingRegistry is Ownable {\n\n  mapping (address => address) public returnAddress;\n\n  function record(address from, address to) onlyOwner public {\n    require(from != 0);\n\n    returnAddress[from] = to;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/TerraformReserve.sol\n\ncontract TerraformReserve is Ownable {\n\n  /* Storing a balance for each user */\n  mapping (address => uint256) public lockedBalance;\n\n  /* Store the total sum locked */\n  uint public totalLocked;\n\n  /* Reference to the token */\n  ERC20 public manaToken;\n\n  /* Contract that will assign the LAND and burn/return tokens */\n  address public landClaim;\n\n  /* Prevent the token from accepting deposits */\n  bool public acceptingDeposits;\n\n  event LockedBalance(address user, uint mana);\n  event LandClaimContractSet(address target);\n  event LandClaimExecuted(address user, uint value, bytes data);\n  event AcceptingDepositsChanged(bool _acceptingDeposits);\n\n  function TerraformReserve(address _token) {\n    require(_token != 0);\n    manaToken = ERC20(_token);\n    acceptingDeposits = true;\n  }\n\n  /**\n   * Lock MANA into the contract.\n   * This contract does not have another way to take the tokens out other than\n   * through the target contract.\n   */\n  function lockMana(address _from, uint256 mana) public {\n    require(acceptingDeposits);\n    require(mana >= 1000 * 1e18);\n    require(manaToken.transferFrom(_from, this, mana));\n\n    lockedBalance[_from] += mana;\n    totalLocked += mana;\n    LockedBalance(_from, mana);\n  }\n\n  /**\n   * Allows the owner of the contract to pause acceptingDeposits\n   */\n  function changeContractState(bool _acceptingDeposits) public onlyOwner {\n    acceptingDeposits = _acceptingDeposits;\n    AcceptingDepositsChanged(acceptingDeposits);\n  }\n\n  /**\n   * Set the contract that can move the staked MANA.\n   * Calls the `approve` function of the ERC20 token with the total amount.\n   */\n  function setTargetContract(address target) public onlyOwner {\n    landClaim = target;\n    manaToken.approve(landClaim, totalLocked);\n    LandClaimContractSet(target);\n  }\n\n  /**\n   * Prevent payments to the contract\n   */\n  function () public payable {\n    revert();\n  }\n}\n\n// File: zeppelin-solidity/contracts/math/Math.sol\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n// File: contracts/TokenVesting.sol\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract TokenVesting is Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  event Released(uint256 amount);\n  event Revoked();\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  uint256 public cliff;\n  uint256 public start;\n  uint256 public duration;\n\n  bool public revocable;\n  bool public revoked;\n\n  uint256 public released;\n\n  ERC20 public token;\n\n  /**\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n   * of the balance will have vested.\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n   * @param _duration duration in seconds of the period in which the tokens will vest\n   * @param _revocable whether the vesting is revocable or not\n   * @param _token address of the ERC20 token contract\n   */\n  function TokenVesting(\n    address _beneficiary,\n    uint256 _start,\n    uint256 _cliff,\n    uint256 _duration,\n    bool    _revocable,\n    address _token\n  ) {\n    require(_beneficiary != 0x0);\n    require(_cliff <= _duration);\n\n    beneficiary = _beneficiary;\n    start       = _start;\n    cliff       = _start.add(_cliff);\n    duration    = _duration;\n    revocable   = _revocable;\n    token       = ERC20(_token);\n  }\n\n  /**\n   * @notice Only allow calls from the beneficiary of the vesting contract\n   */\n  modifier onlyBeneficiary() {\n    require(msg.sender == beneficiary);\n    _;\n  }\n\n  /**\n   * @notice Allow the beneficiary to change its address\n   * @param target the address to transfer the right to\n   */\n  function changeBeneficiary(address target) onlyBeneficiary public {\n    require(target != 0);\n    beneficiary = target;\n  }\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   */\n  function release() onlyBeneficiary public {\n    require(now >= cliff);\n    _releaseTo(beneficiary);\n  }\n\n  /**\n   * @notice Transfers vested tokens to a target address.\n   * @param target the address to send the tokens to\n   */\n  function releaseTo(address target) onlyBeneficiary public {\n    require(now >= cliff);\n    _releaseTo(target);\n  }\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   */\n  function _releaseTo(address target) internal {\n    uint256 unreleased = releasableAmount();\n\n    released = released.add(unreleased);\n\n    token.safeTransfer(target, unreleased);\n\n    Released(released);\n  }\n\n  /**\n   * @notice Allows the owner to revoke the vesting. Tokens already vested are sent to the beneficiary.\n   */\n  function revoke() onlyOwner public {\n    require(revocable);\n    require(!revoked);\n\n    // Release all vested tokens\n    _releaseTo(beneficiary);\n\n    // Send the remainder to the owner\n    token.safeTransfer(owner, token.balanceOf(this));\n\n    revoked = true;\n\n    Revoked();\n  }\n\n\n  /**\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\n   */\n  function releasableAmount() public constant returns (uint256) {\n    return vestedAmount().sub(released);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested.\n   */\n  function vestedAmount() public constant returns (uint256) {\n    uint256 currentBalance = token.balanceOf(this);\n    uint256 totalBalance = currentBalance.add(released);\n\n    if (now < cliff) {\n      return 0;\n    } else if (now >= start.add(duration) || revoked) {\n      return totalBalance;\n    } else {\n      return totalBalance.mul(now.sub(start)).div(duration);\n    }\n  }\n\n  /**\n   * @notice Allow withdrawing any token other than the relevant one\n   */\n  function releaseForeignToken(ERC20 _token, uint256 amount) onlyOwner {\n    require(_token != token);\n    _token.transfer(owner, amount);\n  }\n}\n\n// File: contracts/DecentralandVesting.sol\n\ncontract DecentralandVesting is TokenVesting {\n  using SafeERC20 for ERC20;\n\n  event LockedMANA(uint256 amount);\n\n  ReturnVestingRegistry public returnVesting;\n  TerraformReserve public terraformReserve;\n\n  function DecentralandVesting(\n    address               _beneficiary,\n    uint256               _start,\n    uint256               _cliff,\n    uint256               _duration,\n    bool                  _revocable,\n    ERC20                 _token,\n    ReturnVestingRegistry _returnVesting,\n    TerraformReserve      _terraformReserve\n  )\n    TokenVesting(_beneficiary, _start, _cliff, _duration, _revocable, _token)\n  {\n    returnVesting    = ReturnVestingRegistry(_returnVesting);\n    terraformReserve = TerraformReserve(_terraformReserve);\n  }\n\n  function lockMana(uint256 amount) onlyBeneficiary public {\n    // Require allowance to be enough\n    require(token.allowance(beneficiary, terraformReserve) >= amount);\n\n    // Check the balance of the vesting contract\n    require(amount <= token.balanceOf(this));\n\n    // Check the registry of the beneficiary is fixed to return to this contract\n    require(returnVesting.returnAddress(beneficiary) == address(this));\n\n    // Transfer and lock\n    token.safeTransfer(beneficiary, amount);\n    terraformReserve.lockMana(beneficiary, amount);\n\n    LockedMANA(amount);\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6040516101008061196283398101604052808051906020019091908051906020019091908051906020019091908051906020019091908051906020019091908051906020019091908051906020019091908051906020019091905050878787878787336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008673ffffffffffffffffffffffffffffffffffffffff16141515156100d757600080fd5b8284111515156100e657600080fd5b85600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460038190555061014e848661024b640100000000026114ad179091906401000000009004565b6002819055508260048190555081600560006101000a81548160ff02191690831515021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050505050610269565b600080828401905083811015151561025f57fe5b8091505092915050565b6116ea806102786000396000f300606060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630fb5a6b41461011757806313d033c01461014057806338af3eed146101695780633cc3c3b5146101be578063414708771461021357806344b1231f146102685780635b9400811461029157806363d256ce146102ba57806386d1a69f146102e7578063872a7810146102fc5780638da5cb5b14610329578063961325211461037e578063980c2f21146103a7578063b6549f75146103e9578063be9a6555146103fe578063c5e36b7e14610427578063d1fb56461461044a578063dc07065714610483578063f2fde38b146104bc578063fc0c546a146104f5575b600080fd5b341561012257600080fd5b61012a61054a565b6040518082815260200191505060405180910390f35b341561014b57600080fd5b610153610550565b6040518082815260200191505060405180910390f35b341561017457600080fd5b61017c610556565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101c957600080fd5b6101d161057c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561021e57600080fd5b6102266105a2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561027357600080fd5b61027b6105c8565b6040518082815260200191505060405180910390f35b341561029c57600080fd5b6102a461075a565b6040518082815260200191505060405180910390f35b34156102c557600080fd5b6102cd61077d565b604051808215151515815260200191505060405180910390f35b34156102f257600080fd5b6102fa610790565b005b341561030757600080fd5b61030f61082a565b604051808215151515815260200191505060405180910390f35b341561033457600080fd5b61033c61083d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561038957600080fd5b610391610862565b6040518082815260200191505060405180910390f35b34156103b257600080fd5b6103e7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610868565b005b34156103f457600080fd5b6103fc610a0c565b005b341561040957600080fd5b610411610c5f565b6040518082815260200191505060405180910390f35b341561043257600080fd5b6104486004808035906020019091905050610c65565b005b341561045557600080fd5b610481600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111f3565b005b341561048e57600080fd5b6104ba600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061126c565b005b34156104c757600080fd5b6104f3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611332565b005b341561050057600080fd5b610508611487565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60045481565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561069257600080fd5b6102c65a03f115156106a357600080fd5b5050506040518051905091506106c4600654836114ad90919063ffffffff16565b90506002544210156106d95760009250610755565b6106f06004546003546114ad90919063ffffffff16565b4210158061070a5750600560019054906101000a900460ff165b1561071757809250610755565b610752600454610744610735600354426114cb90919063ffffffff16565b846114e490919063ffffffff16565b61151f90919063ffffffff16565b92505b505090565b600061077860065461076a6105c8565b6114cb90919063ffffffff16565b905090565b600560019054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107ec57600080fd5b60025442101515156107fd57600080fd5b610828600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661153a565b565b600560009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108c357600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561092057600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156109ec57600080fd5b6102c65a03f115156109fd57600080fd5b50505060405180519050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a6757600080fd5b600560009054906101000a900460ff161515610a8257600080fd5b600560019054906101000a900460ff16151515610a9e57600080fd5b610ac9600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661153a565b610c166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610bb357600080fd5b6102c65a03f11515610bc457600080fd5b50505060405180519050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115eb9092919063ffffffff16565b6001600560016101000a81548160ff0219169083151502179055507f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee660405160405180910390a1565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cc157600080fd5b80600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515610dff57600080fd5b6102c65a03f11515610e1057600080fd5b5050506040518051905010151515610e2757600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610eec57600080fd5b6102c65a03f11515610efd57600080fd5b505050604051805190508111151515610f1557600080fd5b3073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632421101f600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561101357600080fd5b6102c65a03f1151561102457600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff1614151561105057600080fd5b6110bf600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115eb9092919063ffffffff16565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b7006d7600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15156111a557600080fd5b6102c65a03f115156111b657600080fd5b5050507f6421fc04fd8e81a5c32406a5a5d2fde1ba83625f6383331c425a93c9a0ca4543816040518082815260200191505060405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561124f57600080fd5b600254421015151561126057600080fd5b6112698161153a565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112c857600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff16141515156112ee57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561138d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156113c957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008082840190508381101515156114c157fe5b8091505092915050565b60008282111515156114d957fe5b818303905092915050565b60008060008414156114f95760009150611518565b828402905082848281151561150a57fe5b0414151561151457fe5b8091505b5092915050565b600080828481151561152d57fe5b0490508091505092915050565b600061154461075a565b905061155b816006546114ad90919063ffffffff16565b6006819055506115ae8282600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166115eb9092919063ffffffff16565b7ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c5656006546040518082815260200191505060405180910390a15050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561169657600080fd5b6102c65a03f115156116a757600080fd5b5050506040518051905015156116b957fe5b5050505600a165627a7a72305820ea6494a6d703a78c6a68a606e2f618b2dce8347b91a506ae7c9dabbfbdb91c2b0029000000000000000000000000f79106a77f67494406778f2d1cb4dfd5bbdf04fd000000000000000000000000000000000000000000000000000000005af8d1800000000000000000000000000000000000000000000000000000000001e133800000000000000000000000000000000000000000000000000000000005a39a8000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc94200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000f79106a77f67494406778f2d1cb4dfd5bbdf04fd000000000000000000000000000000000000000000000000000000005af8d1800000000000000000000000000000000000000000000000000000000001e133800000000000000000000000000000000000000000000000000000000005a39a8000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc94200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
}