{
  "address": "0xc5d11922c11b6130c5889d975e2cf6db837f8868",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Exchange",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-20\n*/\n\n// File: contracts/exchange/ownable.sol\n\npragma solidity 0.5.6;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/exchange/safe-math.sol\n\npragma solidity 0.5.6;\n\n/**\n * @dev Math operations with safety checks that throw on error. This contract is based on the \n * source code at: \n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol.\n */\nlibrary SafeMath\n{\n\n  /**\n   * @dev Multiplies two numbers, reverts on overflow.\n   * @param _factor1 Factor number.\n   * @param _factor2 Factor number.\n   * @return The product of the two factors.\n   */\n  function mul(\n    uint256 _factor1,\n    uint256 _factor2\n  )\n    internal\n    pure\n    returns (uint256 product)\n  {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_factor1 == 0)\n    {\n      return 0;\n    }\n\n    product = _factor1 * _factor2;\n    require(product / _factor1 == _factor2);\n  }\n\n  /**\n   * @dev Integer division of two numbers, truncating the quotient, reverts on division by zero.\n   * @param _dividend Dividend number.\n   * @param _divisor Divisor number.\n   * @return The quotient.\n   */\n  function div(\n    uint256 _dividend,\n    uint256 _divisor\n  )\n    internal\n    pure\n    returns (uint256 quotient)\n  {\n    // Solidity automatically asserts when dividing by 0, using all gas.\n    require(_divisor > 0);\n    quotient = _dividend / _divisor;\n    // assert(_dividend == _divisor * quotient + _dividend % _divisor); // There is no case in which this doesn't hold.\n  }\n\n  /**\n   * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n   * @param _minuend Minuend number.\n   * @param _subtrahend Subtrahend number.\n   * @return Difference.\n   */\n  function sub(\n    uint256 _minuend,\n    uint256 _subtrahend\n  )\n    internal\n    pure\n    returns (uint256 difference)\n  {\n    require(_subtrahend <= _minuend);\n    difference = _minuend - _subtrahend;\n  }\n\n  /**\n   * @dev Adds two numbers, reverts on overflow.\n   * @param _addend1 Number.\n   * @param _addend2 Number.\n   * @return Sum.\n   */\n  function add(\n    uint256 _addend1,\n    uint256 _addend2\n  )\n    internal\n    pure\n    returns (uint256 sum)\n  {\n    sum = _addend1 + _addend2;\n    require(sum >= _addend1);\n  }\n\n  /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo), reverts when\n    * dividing by zero.\n    * @param _dividend Number.\n    * @param _divisor Number.\n    * @return Remainder.\n    */\n  function mod(\n    uint256 _dividend,\n    uint256 _divisor\n  )\n    internal\n    pure\n    returns (uint256 remainder) \n  {\n    require(_divisor != 0);\n    remainder = _dividend % _divisor;\n  }\n\n}\n\n// File: contracts/exchange/erc721-token-receiver.sol\n\npragma solidity 0.5.6;\n\n/**\n * @dev ERC-721 interface for accepting safe transfers. \n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\n */\ninterface ERC721TokenReceiver\n{\n\n  /**\n   * @dev Handle the receipt of a NFT. The ERC721 smart contract calls this function on the\n   * recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return\n   * of other than the magic value MUST result in the transaction being reverted.\n   * Returns `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` unless throwing.\n   * @notice The contract address is always the message sender. A wallet/broker/auction application\n   * MUST implement the wallet interface if it will accept safe transfers.\n   * @param _operator The address which called `safeTransferFrom` function.\n   * @param _from The address which previously owned the token.\n   * @param _tokenId The NFT identifier which is being transferred.\n   * @param _data Additional data with no specified format.\n   * @return Returns `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes calldata _data\n  )\n    external\n    returns(bytes4);\n\n\tfunction onERC721Received(\n    address _from, \n    uint256 _tokenId, \n    bytes calldata _data\n  ) \n  external \n  returns \n  (bytes4);\n\n}\n\n// File: contracts/exchange/ERC165Checker.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title ERC165Checker\n * @dev Use `using ERC165Checker for address`; to include this library\n * https://eips.ethereum.org/EIPS/eip-165\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n    /*\n     * 0x01ffc9a7 ===\n     *     bytes4(keccak256('supportsInterface(bytes4)'))\n     */\n\n    /**\n     * @notice Query if a contract supports ERC165\n     * @param account The address of the contract to query for support of ERC165\n     * @return true if the contract at account implements ERC165\n     */\n    function _supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, also checks support of ERC165\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Interface identification is specified in ERC-165.\n     */\n    function _supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return _supportsERC165(account) &&\n            _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @notice Query if a contract implements interfaces, also checks support of ERC165\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceIds A list of interface identifiers, as specified in ERC-165\n     * @return true if the contract at account indicates support all interfaces in the\n     * interfaceIds list, false otherwise\n     * @dev Interface identification is specified in ERC-165.\n     */\n    function _supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!_supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with the `supportsERC165` method in this library.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        // success determines whether the staticcall succeeded and result determines\n        // whether the contract at account indicates support of _interfaceId\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\n\n        return (success && result);\n    }\n\n    /**\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return success true if the STATICCALL succeeded, false otherwise\n     * @return result true if the STATICCALL succeeded and the contract at account\n     * indicates support of the interface with identifier interfaceId, false otherwise\n     */\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n        private\n        view\n        returns (bool success, bool result)\n    {\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let encodedParams_data := add(0x20, encodedParams)\n            let encodedParams_size := mload(encodedParams)\n\n            let output := mload(0x40)    // Find empty storage location using \"free memory pointer\"\n            mstore(output, 0x0)\n\n            success := staticcall(\n                30000,                   // 30k gas\n                account,                 // To addr\n                encodedParams_data,\n                encodedParams_size,\n                output,\n                0x20                     // Outputs are 32 bytes long\n            )\n\n            result := mload(output)      // Load the result\n        }\n    }\n}\n\n// File: contracts/exchange/exchange.sol\n\npragma solidity 0.5.6;\n\n\n\n\n\n/**\n * @dev Interface to Interative with ERC-721 Contract.\n */\ncontract Erc721Interface {\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n    function ownerOf(uint256 _tokenId) external view returns (address _owner);\n}\n\n/**\n * @dev Interface to Interative with CryptoKitties Contract.\n */\ncontract KittyInterface {\n    mapping (uint256 => address) public kittyIndexToApproved;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    function ownerOf(uint256 _tokenId) external view returns (address _owner);\n}\n\n\ncontract Exchange is Ownable, ERC721TokenReceiver {\n\n    using SafeMath for uint256;\n    using SafeMath for uint;\n    using ERC165Checker for address;\n\n    /**\n     * @dev CryptoKitties KittyCore Contract address.\n     */\n    address constant internal  CryptoKittiesAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n    \n    /**\n     * @dev Magic value of a smart contract that can recieve NFT.\n     * Equal to: bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")).\n     */\n    bytes4 internal constant ERC721_RECEIVED_THREE_INPUT = 0xf0b9e5ba;\n\n    /**\n    * @dev Magic value of a smart contract that can recieve NFT.\n    * Equal to: bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")).\n    */\n    bytes4 internal constant ERC721_RECEIVED_FOUR_INPUT = 0x150b7a02;\n\n    /**\n    * @dev A mapping from NFT ID to the owner address.\n    */\n    mapping (address => mapping (uint256 => address)) internal TokenToOwner;\n\n    /**\n    * @dev A mapping from owner address to specific contract address's all NFT IDs \n    */\n    mapping (address => mapping (address => uint256[])) internal OwnerToTokens;\n\n    /**\n    * @dev A mapping from specific contract address's NFT ID to its index in owner tokens array \n    */\n    mapping (address => mapping(uint256 => uint256)) internal TokenToIndex;\n\n    /**\n    * @dev A mapping from the address to all order it owns\n    */\n    mapping (address => bytes32[]) internal OwnerToOrders;\n\n    /**\n    * @dev A mapping from order to owner address\n    */\n    mapping (bytes32 => address) internal OrderToOwner;\n\n    /**\n    * @dev A mapping from order to its index in owner order array.\n    */\n    mapping (bytes32 => uint) internal OrderToIndex;\n\n    /**\n    * @dev A mapping from matchorder to owner address\n    */\n    mapping (bytes32 => address) internal MatchOrderToOwner;\n   \n    /**\n    * @dev A mapping from order to all matchorder it owns\n    */\n    mapping (bytes32 => bytes32[]) internal OrderToMatchOrders;\n\n    /**\n    * @dev A mapping from matchorder to its index in order's matchorder array\n    */\n    mapping (bytes32 => mapping(bytes32 => uint)) internal OrderToMatchOrderIndex;\n\n    /**\n    * @dev A mapping from order to confirm it exist or not\n    */\n    mapping (bytes32 => bool) internal OrderToExist;\n\n\n    /**\n    * @dev An array which contains all support NFT interface in Exchange\n    */\n    bytes4[] internal SupportNFTInterface;\n\n    /**\n    * @dev order and matchorder is equal to keccak256(contractAddress, tokenId, owner),\n    * because order is just a hash, so OrderObj is use to record details.\n    */\n    struct OrderObj {\n        // NFT's owner\n        address owner;\n\n        // NFT's contract address\n        address contractAddress;\n        \n        // NFT's id\n        uint256 tokenId;\n    }\n\n    /**\n    * @dev An mapping from order or matchorder's hash to it order obj\n    */\n    mapping (bytes32 => OrderObj) internal HashToOrderObj;\n\n    /**\n    * @dev This emits when someone called receiveErc721Token and success transfer NFT to \n    * exchange contract.\n    * @param _from Owner of NFT  \n    * @param _contractAddress NFT's contract address\n    * @param _tokenId NFT's id\n    */\n    event ReceiveToken(\n        address indexed _from, \n        address _contractAddress, \n        uint256 _tokenId\n    );\n\n\n    /**\n    * @dev This emits when someone called SendBackToken and transfer NFT from\n    * exchange contract to it owner\n    * @param _owner Owner of NFT  \n    * @param _contractAddress NFT's contract address\n    * @param _tokenId NFT's id\n    */\n    event SendBackToken(\n        address indexed _owner, \n        address _contractAddress, \n        uint256 _tokenId\n    );\n\n    /**\n    * @dev This emits when send NFT happened from exchange contract to other address\n    * @param _to exchange contract send address\n    * @param _contractAddress NFT's contract address\n    * @param _tokenId NFT's id\n    */\n    event SendToken(\n        address indexed _to, \n        address _contractAddress, \n        uint256 _tokenId\n    );\n\n    /**\n    * @dev This emits when an OrderObj be created \n    * @param _hash order's hash\n    * @param _owner Owner of NFT  \n    * @param _contractAddress NFT's contract address\n    * @param _tokenId NFT's id\n    */\n    event CreateOrderObj(\n        bytes32 indexed _hash,\n        address _owner,\n        address _contractAddress,\n        uint256 _tokenId   \n    );\n\n    /**\n    * @dev This emits when an order be created \n    * @param _from this order's owner\n    * @param _orderHash this order's hash\n    * @param _contractAddress NFT's contract address\n    * @param _tokenId NFT's id\n    */\n    event CreateOrder(\n        address indexed _from,\n        bytes32 indexed _orderHash,\n        address _contractAddress,\n        uint256 _tokenId\n    );\n\n    /**\n    * @dev This emits when an matchorder be created \n    * @param _from this order's owner\n    * @param _orderHash order's hash which matchorder pairing\n    * @param _matchOrderHash this matchorder's hash\n    * @param _contractAddress NFT's contract address\n    * @param _tokenId NFT's id\n    */\n    event CreateMatchOrder(\n        address indexed _from,\n        bytes32 indexed _orderHash,\n        bytes32 indexed _matchOrderHash,\n        address _contractAddress,\n        uint256 _tokenId\n    );\n\n    /**\n    * @dev This emits when an order be deleted \n    * @param _from this order's owner\n    * @param _orderHash this order's hash\n    */\n    event DeleteOrder(\n        address indexed _from,\n        bytes32 indexed _orderHash\n    );\n\n    /**\n    * @dev This emits when an matchorder be deleted \n    * @param _from this matchorder's owner\n    * @param _orderHash order which matchorder pairing\n    * @param _matchOrderHash this matchorder\n    */\n    event DeleteMatchOrder(\n        address indexed _from,\n        bytes32 indexed _orderHash,\n        bytes32 indexed _matchOrderHash\n    );\n\n\n    /**\n    * @dev Function only be executed when massage sender is NFT's owner\n    * @param contractAddress NFT's contract address\n    * @param tokenId NFT's id\n    */\n    modifier onlySenderIsOriginalOwner(\n        address contractAddress, \n        uint256 tokenId\n    ) \n    {\n        require(TokenToOwner[contractAddress][tokenId] == msg.sender, \"original owner should be message sender\");\n        _;\n    }\n\n    constructor () public {\n        //nf-token\n        SupportNFTInterface.push(0x80ac58cd);\n\n        //nf-token-metadata\n        SupportNFTInterface.push(0x780e9d63);\n\n        //nf-token-enumerable\n        SupportNFTInterface.push(0x5b5e139f);\n    }\n\n   /**\n   * @dev Add support NFT interface in Exchange\n   * @notice Only Exchange owner can do tihs\n   * @param interface_id Support NFT interface's interface_id\n   */\n    function addSupportNFTInterface(\n        bytes4 interface_id\n    )\n    external\n    onlyOwner()\n    {\n        SupportNFTInterface.push(interface_id);\n    }\n\n   /**\n   * @dev NFT contract will call when it use safeTransferFrom method\n   */\n    function onERC721Received(\n        address _from, \n        uint256 _tokenId, \n        bytes calldata _data\n    ) \n    external \n    returns (bytes4)\n    {\n        return ERC721_RECEIVED_THREE_INPUT;\n    }\n\n   /**\n   * @dev NFT contract will call when it use safeTransferFrom method\n   */\n    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _tokenId,\n        bytes calldata data\n    )\n    external\n    returns(bytes4)\n    {\n        return ERC721_RECEIVED_FOUR_INPUT;\n    }\n\n   /**\n   * @dev Create an order for your NFT and other people can pairing their NFT to exchange\n   * @notice You must call receiveErc721Token method first to send your NFT to exchange contract,\n   * if your NFT have matchorder pair with other order, then they will become Invalid until you\n   * delete this order.\n   * @param contractAddress NFT's contract address\n   * @param tokenId NFT's id\n   */\n    function createOrder(\n        address contractAddress, \n        uint256 tokenId\n    ) \n    external \n    onlySenderIsOriginalOwner(\n        contractAddress, \n        tokenId\n    ) \n    {\n        bytes32 orderHash = keccak256(abi.encodePacked(contractAddress, tokenId, msg.sender));\n        require(OrderToOwner[orderHash] != msg.sender, \"Order already exist\");\n        _addOrder(msg.sender, orderHash);\n        emit CreateOrder(msg.sender, orderHash, contractAddress, tokenId);\n    }\n\n   /**\n   * @dev write order information to exchange contract.\n   * @param sender order's owner\n   * @param orderHash order's hash\n   */\n    function _addOrder(\n        address sender, \n        bytes32 orderHash\n    ) \n    internal \n    {\n        uint index = OwnerToOrders[sender].push(orderHash).sub(1);\n        OrderToOwner[orderHash] = sender;\n        OrderToIndex[orderHash] = index;\n        OrderToExist[orderHash] = true;\n    }\n\n   /**\n   * @dev Delete an order if you don't want exchange NFT to anyone, or you want get your NFT back.\n   * @param orderHash order's hash\n   */\n    function deleteOrder(\n        bytes32 orderHash\n    )\n    external\n    {\n        require(OrderToOwner[orderHash] == msg.sender, \"this order hash not belongs to this address\");\n        _removeOrder(msg.sender, orderHash);\n        emit DeleteOrder(msg.sender, orderHash);\n    }\n\n   /**\n   * @dev Remove order information on exchange contract \n   * @param sender order's owner\n   * @param orderHash order's hash\n   */\n    function _removeOrder(\n        address sender,\n        bytes32 orderHash\n    )\n    internal\n    {\n        OrderToExist[orderHash] = false;\n        delete OrderToOwner[orderHash];\n        uint256 orderIndex = OrderToIndex[orderHash];\n        uint256 lastOrderIndex = OwnerToOrders[sender].length.sub(1);\n        if (lastOrderIndex != orderIndex){\n            bytes32 lastOwnerOrder = OwnerToOrders[sender][lastOrderIndex];\n            OwnerToOrders[sender][orderIndex] = lastOwnerOrder;\n            OrderToIndex[lastOwnerOrder] = orderIndex;\n        }\n        OwnerToOrders[sender].length--;\n    }\n\n   /**\n   * @dev If your are interested in specfic order's NFT, create a matchorder and pair with it so order's owner\n   * can know and choose to exchange with you\n   * @notice You must call receiveErc721Token method first to send your NFT to exchange contract,\n   * if your NFT already create order, then you will be prohibit create matchorder until you delete this NFT's \n   * order.\n   * @param contractAddress NFT's contract address\n   * @param tokenId NFT's id\n   * @param orderHash order's hash which matchorder want to pair with \n   */\n    function createMatchOrder(\n        address contractAddress,\n        uint256 tokenId, \n        bytes32 orderHash\n    ) \n    external \n    onlySenderIsOriginalOwner(\n        contractAddress, \n        tokenId\n    ) \n    {\n        bytes32 matchOrderHash = keccak256(abi.encodePacked(contractAddress, tokenId, msg.sender));\n        require(OrderToOwner[matchOrderHash] != msg.sender, \"Order already exist\");\n        _addMatchOrder(matchOrderHash, orderHash);\n        emit CreateMatchOrder(msg.sender, orderHash, matchOrderHash, contractAddress, tokenId);\n    }\n\n   /**\n   * @dev add matchorder information on exchange contract \n   * @param matchOrderHash matchorder's hash\n   * @param orderHash order's hash which matchorder pair with \n   */\n    function _addMatchOrder(\n        bytes32 matchOrderHash, \n        bytes32 orderHash\n    ) \n    internal \n    {\n        uint inOrderIndex = OrderToMatchOrders[orderHash].push(matchOrderHash).sub(1);\n        OrderToMatchOrderIndex[orderHash][matchOrderHash] = inOrderIndex;\n    }\n\n   /**\n   * @dev delete matchorder information on exchange contract \n   * @param matchOrderHash matchorder's hash\n   * @param orderHash order's hash which matchorder pair with \n   */\n    function deleteMatchOrder(\n        bytes32 matchOrderHash,\n        bytes32 orderHash\n    )\n    external\n    {\n        require(MatchOrderToOwner[matchOrderHash] == msg.sender, \"match order doens't belong to this address\" );\n        require(OrderToExist[orderHash] == true, \"this order is not exist\");\n        _removeMatchOrder(orderHash, matchOrderHash);\n        emit DeleteMatchOrder(msg.sender, orderHash, matchOrderHash);\n    }\n\n  /**\n   * @dev delete matchorder information on exchange contract \n   * @param orderHash order's hash which matchorder pair with \n   * @param matchOrderHash matchorder's hash\n   */\n    function _removeMatchOrder(\n        bytes32 orderHash,\n        bytes32 matchOrderHash\n    )\n    internal\n    {\n        uint256 matchOrderIndex = OrderToMatchOrderIndex[orderHash][matchOrderHash];\n        uint256 lastMatchOrderIndex = OrderToMatchOrders[orderHash].length.sub(1);\n        if (lastMatchOrderIndex != matchOrderIndex){\n            bytes32 lastMatchOrder = OrderToMatchOrders[orderHash][lastMatchOrderIndex];\n            OrderToMatchOrders[orderHash][matchOrderIndex] = lastMatchOrder;\n            OrderToMatchOrderIndex[orderHash][lastMatchOrder] = matchOrderIndex;\n        }\n        OrderToMatchOrders[orderHash].length--;\n    }\n\n    /**\n    * @dev order's owner can choose NFT to exchange from it's match order array, when function \n    * execute, order will be deleted, both NFT will be exchanged and send to corresponding address.\n    * @param order order's hash which matchorder pair with \n    * @param matchOrder matchorder's hash\n    */\n    function exchangeToken(\n        bytes32 order,\n        bytes32 matchOrder\n    ) \n    external \n    {\n        require(OrderToOwner[order] == msg.sender, \"this order doesn't belongs to this address\");\n        OrderObj memory orderObj = HashToOrderObj[order];\n        uint index = OrderToMatchOrderIndex[order][matchOrder];\n        require(OrderToMatchOrders[order][index] == matchOrder, \"match order is not in this order\");\n        require(OrderToExist[matchOrder] != true, \"this match order's token have open order\");\n        OrderObj memory matchOrderObj = HashToOrderObj[matchOrder];\n        _sendToken(matchOrderObj.owner, orderObj.contractAddress, orderObj.tokenId);\n        _sendToken(orderObj.owner, matchOrderObj.contractAddress, matchOrderObj.tokenId);\n        _removeMatchOrder(order, matchOrder);\n        _removeOrder(msg.sender, order);\n    }\n\n    /**\n    * @dev if you want to create order and matchorder on exchange contract, you must call this function\n    * to send your NFT to exchange contract, if your NFT is followed erc165 and erc721 standard, exchange\n    * contract will checked and execute sucessfully, then contract will record your information so you \n    * don't need worried about NFT lost.\n    * @notice because contract can't directly transfer your NFT, so you should call setApprovalForAll \n    * on NFT contract first, so this function can execute successfully.\n    * @param contractAddress NFT's Contract address\n    * @param tokenId NFT's id \n    */\n    function receiveErc721Token(\n        address contractAddress, \n        uint256 tokenId\n    ) \n    external  \n    {\n        bool checkSupportErc165Interface = false;\n        if(contractAddress != CryptoKittiesAddress){\n            for(uint i = 0; i < SupportNFTInterface.length; i++){\n                if(contractAddress._supportsInterface(SupportNFTInterface[i]) == true){\n                    checkSupportErc165Interface = true;\n                }\n            }\n            require(checkSupportErc165Interface == true, \"not supported Erc165 Interface\");\n            Erc721Interface erc721Contract = Erc721Interface(contractAddress);\n            require(erc721Contract.isApprovedForAll(msg.sender,address(this)) == true, \"contract doesn't have power to control this token id\");\n            erc721Contract.transferFrom(msg.sender, address(this), tokenId);\n        }else {\n            KittyInterface kittyContract = KittyInterface(contractAddress);\n            require(kittyContract.kittyIndexToApproved(tokenId) == address(this), \"contract doesn't have power to control this cryptoKitties's id\");\n            kittyContract.transferFrom(msg.sender, address(this), tokenId);\n        }\n        _addToken(msg.sender, contractAddress, tokenId);\n        emit ReceiveToken(msg.sender, contractAddress, tokenId);\n\n    }\n\n    /**\n    * @dev add token and OrderObj information on exchange contract, because order hash and matchorder\n    * hash are same, so one NFT have mapping to one OrderObj\n    * @param sender NFT's owner\n    * @param contractAddress NFT's contract address\n    * @param tokenId NFT's id\n    */\n    function _addToken(\n        address sender, \n        address contractAddress, \n        uint256 tokenId\n    ) \n    internal \n    {   \n        bytes32 matchOrderHash = keccak256(abi.encodePacked(contractAddress, tokenId, sender));\n        MatchOrderToOwner[matchOrderHash] = sender;\n        HashToOrderObj[matchOrderHash] = OrderObj(sender,contractAddress,tokenId);\n        TokenToOwner[contractAddress][tokenId] = sender;\n        uint index = OwnerToTokens[sender][contractAddress].push(tokenId).sub(1);\n        TokenToIndex[contractAddress][tokenId] = index;\n        emit CreateOrderObj(matchOrderHash, sender, contractAddress, tokenId);\n    }\n\n\n    /**\n    * @dev send your NFT back to address which you send token in, if your NFT still have open order,\n    * then order will be deleted\n    * @notice matchorder will not be deleted because cost too high, but they will be useless and other\n    * people can't choose your match order to exchange\n    * @param contractAddress NFT's Contract address\n    * @param tokenId NFT's id \n    */\n    function sendBackToken(\n        address contractAddress, \n        uint256 tokenId\n    ) \n    external \n    onlySenderIsOriginalOwner(\n        contractAddress, \n        tokenId\n    ) \n    {\n        bytes32 orderHash = keccak256(abi.encodePacked(contractAddress, tokenId, msg.sender));\n        if(OrderToExist[orderHash] == true) {\n            _removeOrder(msg.sender, orderHash);\n        }\n        _sendToken(msg.sender, contractAddress, tokenId);\n        emit SendBackToken(msg.sender, contractAddress, tokenId);\n    }  \n\n\n    /**\n    * @dev Drive NFT contract to send NFT to corresponding address\n    * @notice because cryptokittes contract method are not the same as general NFT contract, so \n    * need treat it individually\n    * @param sendAddress NFT's owner\n    * @param contractAddress NFT's contract address\n    * @param tokenId NFT's id\n    */\n    function _sendToken(\n        address sendAddress,\n        address contractAddress, \n        uint256 tokenId\n    )\n    internal\n    {   \n        if(contractAddress != CryptoKittiesAddress){\n            Erc721Interface erc721Contract = Erc721Interface(contractAddress);\n            require(erc721Contract.ownerOf(tokenId) == address(this), \"exchange contract should have this token\");\n            erc721Contract.transferFrom(address(this), sendAddress, tokenId);\n        }else{\n            KittyInterface kittyContract = KittyInterface(contractAddress);\n            require(kittyContract.ownerOf(tokenId) == address(this), \"exchange contract should have this token\");\n            kittyContract.transfer(sendAddress, tokenId);\n        }\n        _removeToken(contractAddress, tokenId);\n        emit SendToken(sendAddress, contractAddress, tokenId);\n    }\n\n    /**\n    * @dev remove token and OrderObj information on exchange contract\n    * @param contractAddress NFT's contract address\n    * @param tokenId NFT's id\n    */\n    function _removeToken(\n        address contractAddress, \n        uint256 tokenId\n    ) \n    internal \n    {\n        address owner = TokenToOwner[contractAddress][tokenId];\n        bytes32 orderHash = keccak256(abi.encodePacked(contractAddress, tokenId, owner));\n        delete HashToOrderObj[orderHash];\n        delete MatchOrderToOwner[orderHash];\n        delete TokenToOwner[contractAddress][tokenId];\n        uint256 tokenIndex = TokenToIndex[contractAddress][tokenId];\n        uint256 lastOwnerTokenIndex = OwnerToTokens[owner][contractAddress].length.sub(1);\n        if (lastOwnerTokenIndex != tokenIndex){\n            uint256 lastOwnerToken = OwnerToTokens[owner][contractAddress][lastOwnerTokenIndex];\n            OwnerToTokens[owner][contractAddress][tokenIndex] = lastOwnerToken;\n            TokenToIndex[contractAddress][lastOwnerToken] = tokenIndex;\n        }\n        OwnerToTokens[owner][contractAddress].length--;\n    }\n\n    /**\n    * @dev get NFT owner address\n    * @param contractAddress NFT's contract address\n    * @param tokenId NFT's id\n    * @return NFT owner address\n    */\n    function getTokenOwner(\n        address contractAddress, \n        uint256 tokenId\n    ) \n    external \n    view \n    returns (address)\n    {\n        return TokenToOwner[contractAddress][tokenId];\n    }\n    \n    /**\n    * @dev get owner's specfic contract address's all NFT array \n    * @param ownerAddress owner address\n    * @param contractAddress  NFT's contract address\n    * @return NFT's array\n    */\n    function getOwnerTokens(\n        address ownerAddress, \n        address contractAddress\n    ) \n    external \n    view \n    returns (uint256[] memory)\n    {\n        return OwnerToTokens[ownerAddress][contractAddress];\n    }\n\n    /**\n    * @dev get NFT's index in owner NFT's array \n    * @param contractAddress NFT's contract address\n    * @param tokenId NFT's id\n    * @return NFT's index\n    */\n    function getTokenIndex(\n        address contractAddress, \n        uint256 tokenId\n    ) \n    external \n    view\n    returns (uint256)\n    {\n        return TokenToIndex[contractAddress][tokenId];\n    }\n\n    /**\n    * @dev get owner address's all orders\n    * @param ownerAddress owner address\n    * @return orders array\n    */\n    function getOwnerOrders(\n        address ownerAddress\n    ) \n    external \n    view \n    returns (bytes32[] memory){\n        return OwnerToOrders[ownerAddress];\n    }\n\n    /**\n    * @dev get specfit order's owner address\n    * @param order order's hash\n    * @return order's owner address\n    */\n    function getOrderOwner(\n        bytes32 order\n    ) \n    external \n    view \n    returns (address)\n    {\n        return OrderToOwner[order];\n    }\n\n    /**\n    * @dev get order's index in owner orders array\n    * @param order order's hash\n    * @return order's index\n    */\n    function getOrderIndex(\n        bytes32 order\n    ) \n    external \n    view \n    returns (uint)\n    {\n        return OrderToIndex[order];\n    }\n\n    /**\n    * @dev get order exist or not in exchange contract\n    * @param order order's hash\n    * @return boolean to express order exist \n    */\n    function getOrderExist(\n        bytes32 order\n    )\n    external\n    view\n    returns (bool){\n        return OrderToExist[order];\n    }\n\n    /**\n    * @dev get specfit matchorder's owner address\n    * @param matchOrder matchorder's hash\n    * @return matchorder's owner address\n    */\n    function getMatchOrderOwner(\n        bytes32 matchOrder\n    ) \n    external \n    view \n    returns (address)\n    {\n        return MatchOrderToOwner[matchOrder];\n    }\n\n    /**\n    * @dev get matchorder's index in NFT order's matchorders array\n    * @param order matchorder's hash\n    * @return matchorder's index\n    */\n    function getOrderMatchOrderIndex(\n        bytes32 order,\n        bytes32 matchOrder\n    ) \n    external \n    view \n    returns (uint)\n    {\n        return OrderToMatchOrderIndex[order][matchOrder];\n    }\n\n    /**\n    * @dev get order's matchorder array\n    * @param order order's hash\n    * @return matchorder array\n    */\n    function getOrderMatchOrders(\n        bytes32 order\n    ) \n    external \n    view \n    returns (bytes32[] memory)\n    {\n        return OrderToMatchOrders[order];\n    }\n\n    /**\n    * @dev get mapping from order or matchorder's hash to OrderObj\n    * @param hashOrder order or matchorder's hash\n    * @return OrderObj\n    */\n    function getHashOrderObj(\n        bytes32 hashOrder\n    )\n    external\n    view\n    returns(\n        address, \n        address, \n        uint256\n    )\n    {\n        OrderObj memory orderObj = HashToOrderObj[hashOrder];\n        return(\n            orderObj.owner,\n            orderObj.contractAddress,\n            orderObj.tokenId\n        );\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600b6380ac58cd90806001815401808255809150509060018203906000526020600020906008918282040191900660040290919260e01b909190916101000a81548163ffffffff021916908360e01c021790555050600b63780e9d6390806001815401808255809150509060018203906000526020600020906008918282040191900660040290919260e01b909190916101000a81548163ffffffff021916908360e01c021790555050600b635b5e139f90806001815401808255809150509060018203906000526020600020906008918282040191900660040290919260e01b909190916101000a81548163ffffffff021916908360e01c021790555050613e7a806101db6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806383d84a8d116100de578063b47eb4be11610097578063ec1aed6e11610071578063ec1aed6e146109a7578063f0b9e5ba14610a15578063f2fde38b14610b0a578063f302653e14610b4e57610173565b8063b47eb4be146108be578063c52c14f51461090b578063e12006de1461095957610173565b806383d84a8d1461070757806387a61cbd1461073f5780638da5cb5b1461076d5780638f32d59b146107b7578063a72c7995146107d9578063a7e8497f1461087257610173565b806346acd2371161013057806346acd237146104e65780634c5309971461053e5780634fb564e6146105c15780636c16b54514610607578063715018a6146106555780637d186a681461065f57610173565b8063039e676a146101785780630a17b7161461023157806312c86a6d14610273578063150b7a02146102d55780632df926cc146103ea5780632fa0bffe14610478575b600080fd5b6101da6004803603604081101561018e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b86565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561021d578082015181840152602081019050610202565b505050509050019250505060405180910390f35b61025d6004803603602081101561024757600080fd5b8101908080359060200190929190505050610c5b565b6040518082815260200191505060405180910390f35b6102bf6004803603604081101561028957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c78565b6040518082815260200191505060405180910390f35b610396600480360360808110156102eb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561035257600080fd5b82018360208201111561036457600080fd5b8035906020019184600183028401116401000000008311171561038657600080fd5b9091929391929390505050610cd3565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6104366004803603604081101561040057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ce8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104a46004803603602081101561048e57600080fd5b8101908080359060200190929190505050610d63565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61053c600480360360608110156104fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610da0565b005b61056a6004803603602081101561055457600080fd5b810190808035906020019092919050505061109a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156105ad578082015181840152602081019050610592565b505050509050019250505060405180910390f35b6105ed600480360360208110156105d757600080fd5b8101908080359060200190929190505050611105565b604051808215151515815260200191505060405180910390f35b6106536004803603604081101561061d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061112f565b005b61065d611427565b005b61068b6004803603602081101561067557600080fd5b81019080803590602001909291905050506114f7565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390f35b61073d6004803603604081101561071d57600080fd5b8101908080359060200190929190803590602001909291905050506115f7565b005b61076b6004803603602081101561075557600080fd5b81019080803590602001909291905050506119f7565b005b610775611aff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107bf611b28565b604051808215151515815260200191505060405180910390f35b61081b600480360360208110156107ef57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b7f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561085e578082015181840152602081019050610843565b505050509050019250505060405180910390f35b6108a86004803603604081101561088857600080fd5b810190808035906020019092919080359060200190929190505050611c16565b6040518082815260200191505060405180910390f35b610909600480360360208110156108d457600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050611c45565b005b6109576004803603604081101561092157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ca7565b005b6109a56004803603604081101561096f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f02565b005b6109d3600480360360208110156109bd57600080fd5b81019080803590602001909291905050506124f3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610ab660048036036060811015610a2b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610a7257600080fd5b820183602082011115610a8457600080fd5b80359060200191846001830284011164010000000083111715610aa657600080fd5b9091929391929390505050612530565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610b4c60048036036020811015610b2057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612544565b005b610b8460048036036040811015610b6457600080fd5b810190808035906020019092919080359060200190929190505050612561565b005b6060600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610c4e57602002820191906000526020600020905b815481526020019060010190808311610c3a575b5050505050905092915050565b600060066000838152602001908152602001600020549050919050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b600063150b7a0260e01b905095945050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b82823373ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613da26027913960400191505060405180910390fd5b6000858533604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140193505050506040516020818303038152906040528051906020012090503373ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611004576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f7264657220616c72656164792065786973740000000000000000000000000081525060200191505060405180910390fd5b61100e8185612705565b80843373ffffffffffffffffffffffffffffffffffffffff167f0d57a0aba1c629a37e46a7bdac3c336323fdfd743bcd6e1504e5d0c1c8934e6c8989604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a4505050505050565b6060600860008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156110f957602002820191906000526020600020905b8154815260200190600101908083116110e5575b50505050509050919050565b6000600a600083815260200190815260200160002060009054906101000a900460ff169050919050565b81813373ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611225576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613da26027913960400191505060405180910390fd5b6000848433604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140193505050506040516020818303038152906040528051906020012090503373ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611393576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f7264657220616c72656164792065786973740000000000000000000000000081525060200191505060405180910390fd5b61139d3382612786565b803373ffffffffffffffffffffffffffffffffffffffff167fb74405a7707be4a59a02054c8c3f7fd03d37c4c271c8461407497d35edb815d08787604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a35050505050565b61142f611b28565b61143857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000806000611504613bf7565b600c60008681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815250509050806000015181602001518260400151935093509350509193909250565b3373ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146116ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613e25602a913960400191505060405180910390fd5b6116b6613bf7565b600c60008481526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152505090506000600960008581526020019081526020016000206000848152602001908152602001600020549050826008600086815260200190815260200160002082815481106117d457fe5b906000526020600020015414611852576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f6d61746368206f72646572206973206e6f7420696e2074686973206f7264657281525060200191505060405180910390fd5b60011515600a600085815260200190815260200160002060009054906101000a900460ff16151514156118d0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180613dc96028913960400191505060405180910390fd5b6118d8613bf7565b600c60008581526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152505090506119c58160000151846020015185604001516128a0565b6119dc8360000151826020015183604001516128a0565b6119e68585612d1a565b6119f03386612e2a565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611aae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613d0f602b913960400191505060405180910390fd5b611ab83382612e2a565b803373ffffffffffffffffffffffffffffffffffffffff167f23d15106c377e0242ad0cb7a8821064a83314ce448cdfc778e0c2009b32065f560405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611c0a57602002820191906000526020600020905b815481526020019060010190808311611bf6575b50505050509050919050565b600060096000848152602001908152602001600020600083815260200190815260200160002054905092915050565b611c4d611b28565b611c5657600080fd5b600b81908060018154018082558091505090600182039060005260206000209060089182820401919006600402909192909190916101000a81548163ffffffff021916908360e01c02179055505050565b81813373ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613da26027913960400191505060405180910390fd5b6000848433604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401935050505060405160208183030381529060405280519060200120905060011515600a600083815260200190815260200160002060009054906101000a900460ff1615151415611e6e57611e6d3382612e2a565b5b611e793386866128a0565b3373ffffffffffffffffffffffffffffffffffffffff167f3a88da1bd81576c94a46372a75ba7622727c0fe2eae361bbf6f49809a863059c8686604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a25050505050565b60008090507306012c8cf97bead5deae237070f9587f8e7a266d73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146122785760008090505b600b80549050811015611fd75760011515611fbd600b8381548110611f7557fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b8673ffffffffffffffffffffffffffffffffffffffff1661302a90919063ffffffff16565b15151415611fca57600191505b8080600101915050611f54565b506001151581151514612052576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6e6f7420737570706f727465642045726331363520496e74657266616365000081525060200191505060405180910390fd5b6000839050600115158173ffffffffffffffffffffffffffffffffffffffff1663e985e9c533306040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561210c57600080fd5b505afa158015612120573d6000803e3d6000fd5b505050506040513d602081101561213657600080fd5b810190808051906020019092919050505015151461219f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180613df16034913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561225a57600080fd5b505af115801561226e573d6000803e3d6000fd5b5050505050612461565b60008390503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663481af3d3856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156122e557600080fd5b505afa1580156122f9573d6000803e3d6000fd5b505050506040513d602081101561230f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461238c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e815260200180613d64603e913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561244757600080fd5b505af115801561245b573d6000803e3d6000fd5b50505050505b61246c33848461304f565b3373ffffffffffffffffffffffffffffffffffffffff167f5e3da8fba24af91505c66214c9e629ba712ce2c1b8c318f14f7024fdcba544a88484604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a2505050565b60006007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600063f0b9e5ba60e01b9050949350505050565b61254c611b28565b61255557600080fd5b61255e81613476565b50565b3373ffffffffffffffffffffffffffffffffffffffff166007600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613d3a602a913960400191505060405180910390fd5b60011515600a600083815260200190815260200160002060009054906101000a900460ff161515146126b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f74686973206f72646572206973206e6f7420657869737400000000000000000081525060200191505060405180910390fd5b6126bc8183612d1a565b81813373ffffffffffffffffffffffffffffffffffffffff167fe58c318e88738acb18fc5b305437bc9eb7aeef01fd6e00f3fe76242f0df4c30760405160405180910390a45050565b6000612756600160086000858152602001908152602001600020859080600181540180825580915050906001820390600052602060002001600090919290919091505561356e90919063ffffffff16565b90508060096000848152602001908152602001600020600085815260200190815260200160002081905550505050565b60006128036001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020849080600181540180825580915050906001820390600052602060002001600090919290919091505561356e90919063ffffffff16565b9050826005600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060066000848152602001908152602001600020819055506001600a600084815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b7306012c8cf97bead5deae237070f9587f8e7a266d73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612ad45760008290503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561295457600080fd5b505afa158015612968573d6000803e3d6000fd5b505050506040513d602081101561297e57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146129fb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180613ce76028913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3086856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015612ab657600080fd5b505af1158015612aca573d6000803e3d6000fd5b5050505050612c89565b60008290503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015612b4157600080fd5b505afa158015612b55573d6000803e3d6000fd5b505050506040513d6020811015612b6b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614612be8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180613ce76028913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612c6f57600080fd5b505af1158015612c83573d6000803e3d6000fd5b50505050505b612c938282613588565b8273ffffffffffffffffffffffffffffffffffffffff167ff91179ed40193440f3f022c5755e0fc1c4b1fb78b129dd47b3c465276c070fd38383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a2505050565b60006009600084815260200190815260200160002060008381526020019081526020016000205490506000612d6f6001600860008781526020019081526020016000208054905061356e90919063ffffffff16565b9050818114612dfd576000600860008681526020019081526020016000208281548110612d9857fe5b9060005260206000200154905080600860008781526020019081526020016000208481548110612dc457fe5b90600052602060002001819055508260096000878152602001908152602001600020600083815260200190815260200160002081905550505b60086000858152602001908152602001600020805480919060019003612e239190613c44565b5050505050565b6000600a600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600660008381526020019081526020016000205490506000612efc6001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061356e90919063ffffffff16565b9050818114612fd1576000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110612f5157fe5b9060005260206000200154905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110612fa957fe5b9060005260206000200181905550826006600083815260200190815260200160002081905550505b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054809190600190036130239190613c44565b5050505050565b600061303583613ab9565b801561304757506130468383613aed565b5b905092915050565b6000828285604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014019350505050604051602081830303815290604052805190602001209050836007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405180606001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815250600c600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015590505083600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006133786001600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020859080600181540180825580915050906001820390600052602060002001600090919290919091505561356e90919063ffffffff16565b905080600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002081905550817fd4f6ac00afb31030127fa7045a43a3979921d10de6444b1c71fdc178871af034868686604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a25050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156134b057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008282111561357d57600080fd5b818303905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000838383604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014019350505050604051602081830303815290604052805190602001209050600c6000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905550506007600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054905060006138956001600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061356e90919063ffffffff16565b9050818114613a21576000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061392757fe5b9060005260206000200154905080600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481106139bc57fe5b906000526020600020018190555082600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550505b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003613ab09190613c70565b50505050505050565b6000613acc826301ffc9a760e01b613aed565b8015613ae65750613ae48263ffffffff60e01b613aed565b155b9050919050565b6000806000613afc8585613b14565b91509150818015613b0a5750805b9250505092915050565b60008060606301ffc9a760e01b8460405160240180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001915050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508060200181516040516000815260208183858b617530fa955080519450505050509250929050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b815481835581811115613c6b57818360005260206000209182019101613c6a9190613c9c565b5b505050565b815481835581811115613c9757818360005260206000209182019101613c969190613cc1565b5b505050565b613cbe91905b80821115613cba576000816000905550600101613ca2565b5090565b90565b613ce391905b80821115613cdf576000816000905550600101613cc7565b5090565b9056fe65786368616e676520636f6e74726163742073686f756c642068617665207468697320746f6b656e74686973206f726465722068617368206e6f742062656c6f6e677320746f207468697320616464726573736d61746368206f7264657220646f656e7327742062656c6f6e6720746f20746869732061646472657373636f6e747261637420646f65736e2774206861766520706f77657220746f20636f6e74726f6c20746869732063727970746f4b69747469657327732069646f726967696e616c206f776e65722073686f756c64206265206d6573736167652073656e64657274686973206d61746368206f72646572277320746f6b656e2068617665206f70656e206f72646572636f6e747261637420646f65736e2774206861766520706f77657220746f20636f6e74726f6c207468697320746f6b656e20696474686973206f7264657220646f65736e27742062656c6f6e677320746f20746869732061646472657373a165627a7a7230582056c55b1cb1847a9b0a33c97a9490d26b2332edaeee7e4d8013fbcfd3b50925790029"
}