{
  "address": "0xfaa850eef2eeb70c64dcf60c332e0d9efda0d238",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ExporoTokenFactory",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-06\n*/\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/utils/Utils.sol\n\n/**\n * @title Manageable Contract\n * @author Validity Labs AG <[email protected]>\n */\n \npragma solidity 0.5.7;\n\n\ncontract Utils {\n    /** MODIFIERS **/\n    modifier onlyValidAddress(address _address) {\n        require(_address != address(0), \"invalid address\");\n        _;\n    }\n}\n\n// File: contracts/management/Manageable.sol\n\n/**\n * @title Manageable Contract\n * @author Validity Labs AG <[email protected]>\n */\n \n pragma solidity 0.5.7;\n\n\n\ncontract Manageable is Ownable, Utils {\n    mapping(address => bool) public isManager;     // manager accounts\n\n    /** EVENTS **/\n    event ChangedManager(address indexed manager, bool active);\n\n    /** MODIFIERS **/\n    modifier onlyManager() {\n        require(isManager[msg.sender], \"is not manager\");\n        _;\n    }\n\n    /**\n    * @notice constructor sets the deployer as a manager\n    */\n    constructor() public {\n        setManager(msg.sender, true);\n    }\n\n    /**\n     * @notice enable/disable an account to be a manager\n     * @param _manager address address of the manager to create/alter\n     * @param _active bool flag that shows if the manager account is active\n     */\n    function setManager(address _manager, bool _active) public onlyOwner onlyValidAddress(_manager) {\n        isManager[_manager] = _active;\n        emit ChangedManager(_manager, _active);\n    }\n\n    /** OVERRIDE \n    * @notice does not allow owner to give up ownership\n    */\n    function renounceOwnership() public onlyOwner {\n        revert(\"Cannot renounce ownership\");\n    }\n}\n\n// File: contracts/whitelist/GlobalWhitelist.sol\n\n/**\n * @title Global Whitelist Contract\n * @author Validity Labs AG <[email protected]>\n */\n\npragma solidity 0.5.7;\n\n\n\n\ncontract GlobalWhitelist is Ownable, Manageable {\n    mapping(address => bool) public isWhitelisted; // addresses of who's whitelisted\n    bool public isWhitelisting = true;             // whitelisting enabled by default\n\n    /** EVENTS **/\n    event ChangedWhitelisting(address indexed registrant, bool whitelisted);\n    event GlobalWhitelistDisabled(address indexed manager);\n    event GlobalWhitelistEnabled(address indexed manager);\n\n    /**\n    * @dev add an address to the whitelist\n    * @param _address address\n    */\n    function addAddressToWhitelist(address _address) public onlyManager onlyValidAddress(_address) {\n        isWhitelisted[_address] = true;\n        emit ChangedWhitelisting(_address, true);\n    }\n\n    /**\n    * @dev add addresses to the whitelist\n    * @param _addresses addresses array\n    */\n    function addAddressesToWhitelist(address[] calldata _addresses) external {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            addAddressToWhitelist(_addresses[i]);\n        }\n    }\n\n    /**\n    * @dev remove an address from the whitelist\n    * @param _address address\n    */\n    function removeAddressFromWhitelist(address _address) public onlyManager onlyValidAddress(_address) {\n        isWhitelisted[_address] = false;\n        emit ChangedWhitelisting(_address, false);\n    }\n\n    /**\n    * @dev remove addresses from the whitelist\n    * @param _addresses addresses\n    */\n    function removeAddressesFromWhitelist(address[] calldata _addresses) external {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            removeAddressFromWhitelist(_addresses[i]);\n        }\n    }\n\n    /** \n    * @notice toggle the whitelist by the parent contract; ExporoTokenFactory\n    */\n    function toggleWhitelist() external onlyOwner {\n        isWhitelisting = isWhitelisting ? false : true;\n\n        if (isWhitelisting) {\n            emit GlobalWhitelistEnabled(msg.sender);\n        } else {\n            emit GlobalWhitelistDisabled(msg.sender);\n        }\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The account whose tokens will be burned.\n     * @param value uint256 The amount of token to be burned.\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\npragma solidity ^0.5.2;\n\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n */\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/Math.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Calculates the average of two numbers. Since these are integers,\n     * averages of an even and odd number cannot be represented, and will be\n     * rounded down.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n// File: contracts/token/ERC20/library/Snapshots.sol\n\n/**\n * @title Snapshot\n * @dev Utility library of the Snapshot structure, including getting value.\n * @author Validity Labs AG <[email protected]>\n */\npragma solidity 0.5.7;\n\n\n\n\nlibrary Snapshots {\n    using Math for uint256;\n    using SafeMath for uint256;\n\n    /**\n     * @notice This structure stores the historical value associate at a particular blocknumber\n     * @param fromBlock The blocknumber of the creation of the snapshot\n     * @param value The value to be recorded\n     */\n    struct Snapshot {\n        uint256 fromBlock;\n        uint256 value;\n    }\n\n    struct SnapshotList {\n        Snapshot[] history;\n    }\n\n    /**\n     * @notice This function creates snapshots for certain value...\n     * @dev To avoid having two Snapshots with the same block.number, we check if the last\n     * existing one is the current block.number, we update the last Snapshot\n     * @param item The SnapshotList to be operated\n     * @param _value The value associated the the item that is going to have a snapshot\n     */\n    function createSnapshot(SnapshotList storage item, uint256 _value) internal {\n        uint256 length = item.history.length;\n        if (length == 0 || (item.history[length.sub(1)].fromBlock < block.number)) {\n            item.history.push(Snapshot(block.number, _value));\n        } else {\n            // When the last existing snapshot is ready to be updated\n            item.history[length.sub(1)].value = _value;\n        }\n    }\n\n    /**\n     * @notice Find the index of the item in the SnapshotList that contains information\n     * corresponding to the blockNumber. (FindLowerBond of the array)\n     * @dev The binary search logic is inspired by the Arrays.sol from Openzeppelin\n     * @param item The list of Snapshots to be queried\n     * @param blockNumber The block number of the queried moment\n     * @return The index of the Snapshot array\n     */\n    function findBlockIndex(\n        SnapshotList storage item, \n        uint256 blockNumber\n    ) \n        internal\n        view \n        returns (uint256)\n    {\n        // Find lower bound of the array\n        uint256 length = item.history.length;\n\n        // Return value for extreme cases: If no snapshot exists and/or the last snapshot\n        if (item.history[length.sub(1)].fromBlock <= blockNumber) {\n            return length.sub(1);\n        } else {\n            // Need binary search for the value\n            uint256 low = 0;\n            uint256 high = length.sub(1);\n\n            while (low < high.sub(1)) {\n                uint256 mid = Math.average(low, high);\n                // mid will always be strictly less than high and it rounds down\n                if (item.history[mid].fromBlock <= blockNumber) {\n                    low = mid;\n                } else {\n                    high = mid;\n                }\n            }\n            return low;\n        }   \n    }\n\n    /**\n     * @notice This function returns the value of the corresponding Snapshot\n     * @param item The list of Snapshots to be queried\n     * @param blockNumber The block number of the queried moment\n     * @return The value of the queried moment\n     */\n    function getValueAt(\n        SnapshotList storage item, \n        uint256 blockNumber\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        if (item.history.length == 0 || blockNumber < item.history[0].fromBlock) {\n            return 0;\n        } else {\n            uint256 index = findBlockIndex(item, blockNumber);\n            return item.history[index].value;\n        }\n    }\n}\n\n// File: contracts/token/ERC20/IERC20Snapshot.sol\n\n/**\n * @title Interface ERC20 SnapshotToken (abstract contract)\n * @author Validity Labs AG <[email protected]>\n */\n\npragma solidity 0.5.7;  \n\n\n/* solhint-disable no-empty-blocks */\ninterface IERC20Snapshot {   \n    /**\n    * @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    * @param _owner The address from which the balance will be retrieved\n    * @param _blockNumber The block number when the balance is queried\n    * @return The balance at `_blockNumber`\n    */\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\n\n    /**\n    * @notice Total amount of tokens at a specific `_blockNumber`.\n    * @param _blockNumber The block number when the totalSupply is queried\n    * @return The total amount of tokens at `_blockNumber`\n    */\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\n}\n\n// File: contracts/token/ERC20/ERC20Snapshot.sol\n\n/**\n * @title Snapshot Token\n * @dev This is an ERC20 compatible token that takes snapshots of account balances.\n * @author Validity Labs AG <[email protected]>\n */\npragma solidity 0.5.7;  \n\n\n\n\n\ncontract ERC20Snapshot is ERC20, IERC20Snapshot {\n    using Snapshots for Snapshots.SnapshotList;\n\n    mapping(address => Snapshots.SnapshotList) private _snapshotBalances; \n    Snapshots.SnapshotList private _snapshotTotalSupply;   \n\n    event AccountSnapshotCreated(address indexed account, uint256 indexed blockNumber, uint256 value);\n    event TotalSupplySnapshotCreated(uint256 indexed blockNumber, uint256 value);\n\n    /**\n     * @notice Return the historical supply of the token at a certain time\n     * @param blockNumber The block number of the moment when token supply is queried\n     * @return The total supply at \"blockNumber\"\n     */\n    function totalSupplyAt(uint256 blockNumber) external view returns (uint256) {\n        return _snapshotTotalSupply.getValueAt(blockNumber);\n    }\n\n    /**\n     * @notice Return the historical balance of an account at a certain time\n     * @param owner The address of the token holder\n     * @param blockNumber The block number of the moment when token supply is queried\n     * @return The balance of the queried token holder at \"blockNumber\"\n     */\n    function balanceOfAt(address owner, uint256 blockNumber) \n        external \n        view \n        returns (uint256) \n    {\n        return _snapshotBalances[owner].getValueAt(blockNumber);\n    }\n\n    /** OVERRIDE\n     * @notice Transfer tokens between two accounts while enforcing the update of Snapshots\n     * @param from The address to transfer from\n     * @param to The address to transfer to\n     * @param value The amount to be transferred\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        super._transfer(from, to, value);\n\n        _snapshotBalances[from].createSnapshot(balanceOf(from));\n        _snapshotBalances[to].createSnapshot(balanceOf(to));\n\n        emit AccountSnapshotCreated(from, block.number, balanceOf(from));\n        emit AccountSnapshotCreated(to, block.number, balanceOf(to));\n    }\n\n    /** OVERRIDE\n     * @notice Mint tokens to one account while enforcing the update of Snapshots\n     * @param account The address that receives tokens\n     * @param value The amount of tokens to be created\n     */\n    function _mint(address account, uint256 value) internal {\n        super._mint(account, value);\n\n        _snapshotBalances[account].createSnapshot(balanceOf(account));\n        _snapshotTotalSupply.createSnapshot(totalSupply());\n        \n        emit AccountSnapshotCreated(account, block.number, balanceOf(account));\n        emit TotalSupplySnapshotCreated(block.number, totalSupply());\n    }\n\n    /** OVERRIDE\n     * @notice Burn tokens of one account\n     * @param account The address whose tokens will be burnt\n     * @param value The amount of tokens to be burnt\n     */\n    function _burn(address account, uint256 value) internal {\n        super._burn(account, value);\n\n        _snapshotBalances[account].createSnapshot(balanceOf(account));\n        _snapshotTotalSupply.createSnapshot(totalSupply());\n\n        emit AccountSnapshotCreated(account, block.number, balanceOf(account));\n        emit TotalSupplySnapshotCreated(block.number, totalSupply());\n    }\n}\n\n// File: contracts/token/ERC20/ERC20ForcedTransfer.sol\n\n/**\n * @title ERC20Confiscatable\n * @author Validity Labs AG <[email protected]>\n */\n\npragma solidity 0.5.7;  \n\n\n\n\n\ncontract ERC20ForcedTransfer is Ownable, ERC20 {\n    /*** EVENTS ***/\n    event ForcedTransfer(address indexed account, uint256 amount, address indexed receiver);\n\n    /*** FUNCTIONS ***/\n    /**\n    * @notice takes funds from _confiscatee and sends them to _receiver\n    * @param _confiscatee address who's funds are being confiscated\n    * @param _receiver address who's receiving the funds \n    * @param _amount uint256 amount of tokens to force transfer away\n    */\n    function forceTransfer(address _confiscatee, address _receiver, uint256 _amount) public onlyOwner {\n        _transfer(_confiscatee, _receiver, _amount);\n\n        emit ForcedTransfer(_confiscatee, _amount, _receiver);\n    }\n}\n\n// File: contracts/token/ERC20/ERC20Whitelist.sol\n\n/**\n * @title ERC20Whitelist\n * @author Validity Labs AG <[email protected]>\n */\n\npragma solidity 0.5.7;  \n\n\n\n\n\ncontract ERC20Whitelist is Ownable, ERC20 {   \n    GlobalWhitelist public whitelist;\n    bool public isWhitelisting = true;  // default to true\n\n    /** EVENTS **/\n    event ESTWhitelistingEnabled();\n    event ESTWhitelistingDisabled();\n\n    /*** FUNCTIONS ***/\n    /**\n    * @notice disables whitelist per individual EST\n    * @dev parnent contract, ExporoTokenFactory, is owner\n    */\n    function toggleWhitelist() external onlyOwner {\n        isWhitelisting = isWhitelisting ? false : true;\n        \n        if (isWhitelisting) {\n            emit ESTWhitelistingEnabled();\n        } else {\n            emit ESTWhitelistingDisabled();\n        }\n    }\n\n    /** OVERRIDE\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    * @return bool\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        if (checkWhitelistEnabled()) {\n            checkIfWhitelisted(msg.sender);\n            checkIfWhitelisted(_to);\n        }\n        return super.transfer(_to, _value);\n    }\n\n    /** OVERRIDE\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    * @return bool\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        if (checkWhitelistEnabled()) {\n            checkIfWhitelisted(_from);\n            checkIfWhitelisted(_to);\n        }\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n    * @dev check if whitelisting is in effect versus local and global bools\n    * @return bool\n    */\n    function checkWhitelistEnabled() public view returns (bool) {\n        // local whitelist\n        if (isWhitelisting) {\n            // global whitelist\n            if (whitelist.isWhitelisting()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /*** INTERNAL/PRIVATE ***/\n    /**\n    * @dev check if the address has been whitelisted by the Whitelist contract\n    * @param _account address of the account to check\n    */\n    function checkIfWhitelisted(address _account) internal view {\n        require(whitelist.isWhitelisted(_account), \"not whitelisted\");\n    }\n}\n\n// File: contracts/token/ERC20/ERC20DocumentRegistry.sol\n\n/**\n * @title ERC20 Document Registry Contract\n * @author Validity Labs AG <[email protected]>\n */\n \n pragma solidity 0.5.7;\n\n\n\n\n/**\n * @notice Prospectus and Quarterly Reports stored hashes via IPFS\n * @dev read IAgreement for details under /contracts/neufund/standards\n*/\n// solhint-disable not-rely-on-time\ncontract ERC20DocumentRegistry is Ownable {\n    using SafeMath for uint256;\n\n    struct HashedDocument {\n        uint256 timestamp;\n        string documentUri;\n    }\n\n    // array of all documents \n    HashedDocument[] private _documents;\n\n    event LogDocumentedAdded(string documentUri, uint256 indexed documentIndex);\n\n    /**\n    * @notice adds a document's uri from IPFS to the array\n    * @param documentUri string\n    */\n    function addDocument(string calldata documentUri) external onlyOwner {\n        require(bytes(documentUri).length > 0, \"invalid documentUri\");\n\n        HashedDocument memory document = HashedDocument({\n            timestamp: block.timestamp,\n            documentUri: documentUri\n        });\n\n        _documents.push(document);\n\n        emit LogDocumentedAdded(documentUri, _documents.length.sub(1));\n    }\n\n    /**\n    * @notice fetch the latest document on the array\n    * @return uint256, string, uint256 \n    */\n    function currentDocument() external view \n        returns (uint256 timestamp, string memory documentUri, uint256 index) {\n            require(_documents.length > 0, \"no documents exist\");\n            uint256 last = _documents.length.sub(1);\n\n            HashedDocument storage document = _documents[last];\n            return (document.timestamp, document.documentUri, last);\n        }\n\n    /**\n    * @notice fetches a document's uri\n    * @param documentIndex uint256\n    * @return uint256, string, uint256 \n    */\n    function getDocument(uint256 documentIndex) external view\n        returns (uint256 timestamp, string memory documentUri, uint256 index) {\n            require(documentIndex < _documents.length, \"invalid index\");\n\n            HashedDocument storage document = _documents[documentIndex];\n            return (document.timestamp, document.documentUri, documentIndex);\n        }\n\n    /**\n    * @notice return the total amount of documents in the array\n    * @return uint256\n    */\n    function documentCount() external view returns (uint256) {\n        return _documents.length;\n    }\n}\n\n// File: contracts/token/ERC20/ERC20BatchSend.sol\n\n/**\n * @title Batch Send\n * @author Validity Labs AG <[email protected]>\n */\n\npragma solidity 0.5.7;\n\n\n\ncontract ERC20BatchSend is ERC20 {\n    /**\n     * @dev Allows the transfer of token amounts to multiple addresses.\n     * @param beneficiaries Array of addresses that would receive the tokens.\n     * @param amounts Array of amounts to be transferred per beneficiary.\n     */\n    function batchSend(address[] calldata beneficiaries, uint256[] calldata amounts) external {\n        require(beneficiaries.length == amounts.length, \"mismatched array lengths\");\n\n        uint256 length = beneficiaries.length;\n\n        for (uint256 i = 0; i < length; i++) {\n            transfer(beneficiaries[i], amounts[i]);\n        }\n    }\n}\n\n// File: contracts/exporo/ExporoToken.sol\n\n/**\n * @title Exporo Token Contract\n * @author Validity Labs AG <[email protected]>\n */\n\npragma solidity 0.5.7;\n\n\n\n\n\n\n\n\n\n\n\n\ncontract ExporoToken is Ownable, ERC20Snapshot, ERC20Detailed, ERC20Burnable, ERC20ForcedTransfer, ERC20Whitelist, ERC20BatchSend, ERC20Pausable, ERC20DocumentRegistry {\n    /*** FUNCTIONS ***/\n    /**\n    * @dev constructor\n    * @param _name string\n    * @param _symbol string\n    * @param _decimal uint8\n    * @param _whitelist address\n    * @param _initialSupply uint256 initial total supply cap. can be 0\n    * @param _recipient address to recieve the tokens\n    */\n    /* solhint-disable */\n    constructor(string memory _name, string memory _symbol, uint8 _decimal, address _whitelist, uint256 _initialSupply, address _recipient)\n        public \n        ERC20Detailed(_name, _symbol, _decimal) {\n            _mint(_recipient, _initialSupply);\n\n            whitelist = GlobalWhitelist(_whitelist);\n        }\n    /* solhint-enable */\n}\n\n// File: contracts/exporo/ExporoTokenFactory.sol\n\n/**\n * @title Exporo Token Factory Contract\n * @author Validity Labs AG <[email protected]>\n */\n\npragma solidity 0.5.7;\n\n\n\n\n\n/* solhint-disable max-line-length */\n/* solhint-disable separate-by-one-line-in-contract */\ncontract ExporoTokenFactory is Manageable {\n    address public whitelist;\n\n    /*** EVENTS ***/\n    event NewTokenDeployed(address indexed contractAddress, string name, string symbol, uint8 decimals);\n   \n    /*** FUNCTIONS ***/\n    /**\n    * @dev constructor\n    * @param _whitelist address of the whitelist\n    */\n    constructor(address _whitelist) \n        public \n        onlyValidAddress(_whitelist) {\n            whitelist = _whitelist;\n        }\n\n    /**\n    * @dev allows a manager to launch a new token with a new name, symbol, and decimals.\n    * Defaults to using whitelist stored in this contract. If _whitelist is address(0), else it will use\n    * _whitelist as the param to pass into the new token's constructor upon deployment \n    * @param _name string\n    * @param _symbol string\n    * @param _decimals uint8 \n    * @param _initialSupply uint256 initial total supply cap\n    * @param _recipient address to recieve the initial token supply\n    */\n    function newToken(string calldata _name, string calldata _symbol, uint8 _decimals, uint256 _initialSupply, address _recipient) \n        external \n        onlyManager \n        onlyValidAddress(_recipient)\n        returns (address) {\n            require(bytes(_name).length > 0, \"name cannot be blank\");\n            require(bytes(_symbol).length > 0, \"symbol cannot be blank\");\n            require(_initialSupply > 0, \"supply cannot be 0\");\n\n            ExporoToken token = new ExporoToken(_name, _symbol, _decimals, whitelist, _initialSupply, _recipient);\n\n            emit NewTokenDeployed(address(token), _name, _symbol, _decimals);\n            \n            return address(token);\n        }\n    \n    /** MANGER FUNCTIONS **/\n    /**\n    * @notice Prospectus and Quarterly Reports \n    * @dev string null check is done at the token level - see ERC20DocumentRegistry\n    * @param _est address of the targeted EST\n    * @param _documentUri string IPFS URI to the document\n    */\n    function addDocument(address _est, string calldata _documentUri) external onlyValidAddress(_est) onlyManager {\n        ExporoToken(_est).addDocument(_documentUri);\n    }\n\n    /**\n    * @notice enable/disable whitelisting per individual EST\n    * @param _est address of the targeted EST\n    */\n    function toggleESTWhitelist(address _est) public onlyValidAddress(_est) onlyManager {\n        ExporoToken(_est).toggleWhitelist();\n    }\n\n    /**\n    * @notice pause or unpause individual EST\n    * @param _est address of the targeted EST\n    */\n    function togglePauseEST(address _est) public onlyValidAddress(_est) onlyManager {\n        ExporoToken est = ExporoToken(_est);\n        bool result = est.paused();\n        result ? est.unpause() : est.pause();\n    }\n\n    /**\n    * @notice force the transfer of tokens from _confiscatee to _receiver\n    * @param _est address of the targeted EST\n    * @param _confiscatee address to confiscate tokens from\n    * @param _receiver address to receive the balance of tokens\n    * @param _amount uint256 amount to take away from _confiscatee\n    */\n    function forceTransferEST(address _est, address _confiscatee, address _receiver, uint256 _amount) \n        public \n        onlyValidAddress(_est) \n        onlyValidAddress(_confiscatee)\n        onlyValidAddress(_receiver)\n        onlyManager {\n            require(_amount > 0, \"invalid amount\");\n\n            ExporoToken est = ExporoToken(_est);\n            est.forceTransfer(_confiscatee, _receiver, _amount);\n        }\n\n    /**\n    * @notice enable/disable Global Whitelisting\n    */\n    function toggleGlobalWhitelist() public onlyManager {\n        GlobalWhitelist(whitelist).toggleWhitelist();\n    }\n\n    /**\n    * @notice configure managers for the Global Whitelisting contract\n    * @param _manager address\n    * @param _active address\n    */\n    function whitelistSetManager(address _manager, bool _active) public onlyValidAddress(_manager) onlyManager {\n        GlobalWhitelist(whitelist).setManager(_manager, _active);\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160208062005a0b833981018060405260208110156200003357600080fd5b8101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3620001133360016200020160201b60201c565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620001b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620003c5565b620002116200036e60201b60201c565b6200021b57600080fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620002c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff167fc805cd93de579d61b0924c5b5ed9db042198f72031750f8c95608d1cf7d8385583604051808215151515815260200191505060405180910390a2505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b61563680620003d56000396000f3fe60806040523480156200001157600080fd5b5060043610620001005760003560e01c80638f32d59b1162000099578063a5e90eee116200006f578063a5e90eee14620004a7578063e2556f5d14620004fa578063f2fde38b146200058b578063f3ae241514620005d25762000100565b80638f32d59b14620003e457806393e59dc1146200040857806397445f6e14620004545762000100565b80636566876411620000db5780636566876414620002a6578063715018a61462000345578063749cac9f14620003515780638da5cb5b14620003985762000100565b806302c9d48414620001055780631ecc16d6146200025357806362ab34e1146200029a575b600080fd5b62000211600480360360a08110156200011d57600080fd5b81019080803590602001906401000000008111156200013b57600080fd5b8201836020820111156200014e57600080fd5b803590602001918460018302840111640100000000831117156200017157600080fd5b9091929391929390803590602001906401000000008111156200019357600080fd5b820183602082011115620001a657600080fd5b80359060200191846001830284011164010000000083111715620001c957600080fd5b9091929391929390803560ff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000631565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b62000298600480360360208110156200026b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000b0a565b005b620002a462000cd5565b005b6200034360048036036040811015620002be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115620002fc57600080fd5b8201836020820111156200030f57600080fd5b803590602001918460018302840111640100000000831117156200033257600080fd5b909192939192939050505062000e1b565b005b6200034f6200101f565b005b62000396600480360360208110156200036957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620010a1565b005b620003a26200136a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b620003ee62001393565b604051808215151515815260200191505060405180910390f35b62000412620013ea565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b620004a5600480360360408110156200046c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505062001410565b005b620004f860048036036040811015620004bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505062001641565b005b62000589600480360360808110156200051257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050620017a8565b005b620005d060048036036020811015620005a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001bb2565b005b6200061760048036036020811015620005ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001bd4565b604051808215151515815260200191505060405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16620006f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6973206e6f74206d616e6167657200000000000000000000000000000000000081525060200191505060405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b6000898990501162000812576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6e616d652063616e6e6f7420626520626c616e6b00000000000000000000000081525060200191505060405180910390fd5b600087879050116200088c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f73796d626f6c2063616e6e6f7420626520626c616e6b0000000000000000000081525060200191505060405180910390fd5b6000841162000903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f737570706c792063616e6e6f742062652030000000000000000000000000000081525060200191505060405180910390fd5b60008989898989600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a8a6040516200093d9062001ced565b8080602001806020018760ff1660ff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183810383528b8b82818152602001925080828437600081840152601f19601f8201169050808301925050508381038252898982818152602001925080828437600081840152601f19601f8201169050808301925050509a5050505050505050505050604051809103906000f08015801562000a3b573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff167fc48153a538e96379d201c100ee70cfaf9e827cb32432ce4c889d7bbae9ec400b8b8b8b8b8b6040518080602001806020018460ff1660ff1681526020018381038352888882818152602001925080828437600081840152601f19601f8201169050808301925050508381038252868682818152602001925080828437600081840152601f19601f82011690508083019250505097505050505050505060405180910390a28092505050979650505050505050565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000baf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1662000c6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6973206e6f74206d616e6167657200000000000000000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16637e15144b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000cb857600080fd5b505af115801562000ccd573d6000803e3d6000fd5b505050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1662000d95576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6973206e6f74206d616e6167657200000000000000000000000000000000000081525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637e15144b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000e0057600080fd5b505af115801562000e15573d6000803e3d6000fd5b50505050565b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000ec0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1662000f80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6973206e6f74206d616e6167657200000000000000000000000000000000000081525060200191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663f740e04584846040518363ffffffff1660e01b815260040180806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509350505050600060405180830381600087803b1580156200100057600080fd5b505af115801562001015573d6000803e3d6000fd5b5050505050505050565b6200102962001393565b6200103357600080fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f43616e6e6f742072656e6f756e6365206f776e6572736869700000000000000081525060200191505060405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562001146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1662001206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6973206e6f74206d616e6167657200000000000000000000000000000000000081525060200191505060405180910390fd5b600082905060008173ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200125457600080fd5b505afa15801562001269573d6000803e3d6000fd5b505050506040513d60208110156200128057600080fd5b810190808051906020019092919050505090508062001301578173ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620012e257600080fd5b505af1158015620012f7573d6000803e3d6000fd5b5050505062001364565b8173ffffffffffffffffffffffffffffffffffffffff16633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200134a57600080fd5b505af11580156200135f573d6000803e3d6000fd5b505050505b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620014b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1662001575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6973206e6f74206d616e6167657200000000000000000000000000000000000081525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5e90eee84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200192505050600060405180830381600087803b1580156200162357600080fd5b505af115801562001638573d6000803e3d6000fd5b50505050505050565b6200164b62001393565b6200165557600080fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620016fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff167fc805cd93de579d61b0924c5b5ed9db042198f72031750f8c95608d1cf7d8385583604051808215151515815260200191505060405180910390a2505050565b83600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200184d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b83600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620018f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b83600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562001997576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1662001a57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6973206e6f74206d616e6167657200000000000000000000000000000000000081525060200191505060405180910390fd5b6000841162001ace576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f696e76616c696420616d6f756e7400000000000000000000000000000000000081525060200191505060405180910390fd5b60008790508073ffffffffffffffffffffffffffffffffffffffff166333bebb778888886040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801562001b8f57600080fd5b505af115801562001ba4573d6000803e3d6000fd5b505050505050505050505050565b62001bbc62001393565b62001bc657600080fd5b62001bd18162001bf4565b50565b60016020528060005260406000206000915054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562001c2f57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61390f8062001cfc8339019056fe60806040526001600860156101000a81548160ff0219169083151502179055503480156200002c57600080fd5b506040516200390f3803806200390f833981018060405260c08110156200005257600080fd5b8101908080516401000000008111156200006b57600080fd5b828101905060208101848111156200008257600080fd5b8151856001820283011164010000000082111715620000a057600080fd5b50509291906020018051640100000000811115620000bd57600080fd5b82810190506020810184811115620000d457600080fd5b8151856001820283011164010000000082111715620000f257600080fd5b505092919060200180519060200190929190805190602001909291908051906020019092919080519060200190929190505050858585336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a38260069080519060200190620001fc929190620008b6565b50816007908051906020019062000215929190620008b6565b5080600860006101000a81548160ff021916908360ff1602179055505050506200024533620002bf60201b60201c565b6000600a60006101000a81548160ff0219169083151502179055506200027281836200032060201b60201c565b82600860016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505062000965565b620002da8160096200047360201b62002c561790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6200033782826200052960201b62002e1a1760201c565b6200039f6200034c836200068c60201b60201c565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020620006d560201b620028581790919060201c565b620003c9620003b3620007d860201b60201c565b6005620006d560201b620028581790919060201c565b438273ffffffffffffffffffffffffffffffffffffffff167f3c9804bd4ed58a4d26976be3767c732c59125bdbddbe3b8ed0a247b2640b810b62000413856200068c60201b60201c565b6040518082815260200191505060405180910390a3437fd4ef7e49cf313a9bb432e970a127e18e988925c846b38265a3cfa2787fc3b7f16200045a620007d860201b60201c565b6040518082815260200191505060405180910390a25050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620004ae57600080fd5b620004c08282620007e260201b60201c565b15620004cb57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200056457600080fd5b62000580816003546200087560201b620029481790919060201c565b600381905550620005df81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200087560201b620029481790919060201c565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008260000180549050905060008114806200072b575043836000016200070c6001846200089560201b6200230b1790919060201c565b815481106200071757fe5b906000526020600020906002020160000154105b15620007925782600001604051806040016040528043815260200184815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050620007d3565b8183600001620007b26001846200089560201b6200230b1790919060201c565b81548110620007bd57fe5b9060005260206000209060020201600101819055505b505050565b6000600354905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200081e57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000808284019050838110156200088b57600080fd5b8091505092915050565b600082821115620008a557600080fd5b600082840390508091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620008f957805160ff19168380011785556200092a565b828001600101855582156200092a579182015b82811115620009295782518255916020019190600101906200090c565b5b5090506200093991906200093d565b5090565b6200096291905b808211156200095e57600081600090555060010162000944565b5090565b90565b612f9a80620009756000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80637a53bcfc1161012557806395d89b41116100ad578063a9059cbb1161007c578063a9059cbb14610a8b578063dd62ed3e14610af1578063f2fde38b14610b69578063f740e04514610bad578063fcb343b314610c2657610211565b806395d89b4114610942578063981b24d0146109c5578063a457c2d714610a07578063a5b16b2e14610a6d57610211565b80638456cb59116100f45780638456cb59146108605780638da5cb5b1461086a5780638f32d59b146108b4578063914f5207146108d657806393e59dc1146108f857610211565b80637a53bcfc146107225780637b62ab6c146107f05780637e15144b1461081257806382dc1ec41461081c57610211565b80633f9b250a116101a85780635c975abb116101775780635c975abb146106465780636ef8d66d1461066857806370a0823114610672578063715018a6146106ca57806379cc6790146106d457610211565b80633f9b250a146104a557806342966c681461055a57806346fbf68e146105885780634ee2cd7e146105e457610211565b8063313ce567116101e4578063313ce567146103a357806333bebb77146103c757806339509351146104355780633f4ba83a1461049b57610211565b806306fdde0314610216578063095ea7b31461029957806318160ddd146102ff57806323b872dd1461031d575b600080fd5b61021e610cb7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025e578082015181840152602081019050610243565b50505050905090810190601f16801561028b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102e5600480360360408110156102af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d59565b604051808215151515815260200191505060405180910390f35b610307610d87565b6040518082815260200191505060405180910390f35b6103896004803603606081101561033357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d91565b604051808215151515815260200191505060405180910390f35b6103ab610dc1565b604051808260ff1660ff16815260200191505060405180910390f35b610433600480360360608110156103dd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610dd8565b005b6104816004803603604081101561044b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e5e565b604051808215151515815260200191505060405180910390f35b6104a3610e8c565b005b6104d1600480360360208110156104bb57600080fd5b8101908080359060200190929190505050610f37565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561051d578082015181840152602081019050610502565b50505050905090810190601f16801561054a5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6105866004803603602081101561057057600080fd5b810190808035906020019092919050505061108a565b005b6105ca6004803603602081101561059e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611097565b604051808215151515815260200191505060405180910390f35b610630600480360360408110156105fa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110b4565b6040518082815260200191505060405180910390f35b61064e61110f565b604051808215151515815260200191505060405180910390f35b610670611126565b005b6106b46004803603602081101561068857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611131565b6040518082815260200191505060405180910390f35b6106d261117a565b005b610720600480360360408110156106ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061124a565b005b6107ee6004803603604081101561073857600080fd5b810190808035906020019064010000000081111561075557600080fd5b82018360208201111561076757600080fd5b8035906020019184602083028401116401000000008311171561078957600080fd5b9091929391929390803590602001906401000000008111156107aa57600080fd5b8201836020820111156107bc57600080fd5b803590602001918460208302840111640100000000831117156107de57600080fd5b9091929391929390505050611258565b005b6107f8611343565b604051808215151515815260200191505060405180910390f35b61081a611414565b005b61085e6004803603602081101561083257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114d1565b005b6108686114ef565b005b61087261159b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108bc6115c4565b604051808215151515815260200191505060405180910390f35b6108de61161b565b604051808215151515815260200191505060405180910390f35b61090061162e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61094a611654565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561098a57808201518184015260208101905061096f565b50505050905090810190601f1680156109b75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6109f1600480360360208110156109db57600080fd5b81019080803590602001909291905050506116f6565b6040518082815260200191505060405180910390f35b610a5360048036036040811015610a1d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611713565b604051808215151515815260200191505060405180910390f35b610a75611741565b6040518082815260200191505060405180910390f35b610ad760048036036040811015610aa157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061174e565b604051808215151515815260200191505060405180910390f35b610b5360048036036040811015610b0757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061177c565b6040518082815260200191505060405180910390f35b610bab60048036036020811015610b7f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611803565b005b610c2460048036036020811015610bc357600080fd5b8101908080359060200190640100000000811115610be057600080fd5b820183602082011115610bf257600080fd5b80359060200191846001830284011164010000000083111715610c1457600080fd5b9091929391929390505050611820565b005b610c2e6119e6565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610c7a578082015181840152602081019050610c5f565b50505050905090810190601f168015610ca75780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b606060068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d4f5780601f10610d2457610100808354040283529160200191610d4f565b820191906000526020600020905b815481529060010190602001808311610d3257829003601f168201915b5050505050905090565b6000600a60009054906101000a900460ff1615610d7557600080fd5b610d7f8383611b55565b905092915050565b6000600354905090565b6000600a60009054906101000a900460ff1615610dad57600080fd5b610db8848484611b6c565b90509392505050565b6000600860009054906101000a900460ff16905090565b610de06115c4565b610de957600080fd5b610df4838383611ba2565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fa11ae3f873795da36b88189b71a9310742245b9d6e0bc5c3463bf8fb260281af836040518082815260200191505060405180910390a3505050565b6000600a60009054906101000a900460ff1615610e7a57600080fd5b610e848383611d12565b905092915050565b610e9533611097565b610e9e57600080fd5b600a60009054906101000a900460ff16610eb757600080fd5b6000600a60006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600060606000600b805490508410610fb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c696420696e6465780000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600b8581548110610fc657fe5b9060005260206000209060020201905080600001548160010186818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110755780601f1061104a57610100808354040283529160200191611075565b820191906000526020600020905b81548152906001019060200180831161105857829003601f168201915b50505050509150935093509350509193909250565b6110943382611db7565b50565b60006110ad826009611ecf90919063ffffffff16565b9050919050565b600061110782600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611f6190919063ffffffff16565b905092915050565b6000600a60009054906101000a900460ff16905090565b61112f33611fdf565b565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6111826115c4565b61118b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6112548282612039565b5050565b8181905084849050146112d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6d69736d617463686564206172726179206c656e67746873000000000000000081525060200191505060405180910390fd5b600084849050905060008090505b8181101561133b5761132d8686838181106112f857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1685858481811061132157fe5b9050602002013561174e565b5080806001019150506112e1565b505050505050565b6000600860159054906101000a900460ff161561140c57600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663914f52076040518163ffffffff1660e01b815260040160206040518083038186803b1580156113c257600080fd5b505afa1580156113d6573d6000803e3d6000fd5b505050506040513d60208110156113ec57600080fd5b81019080805190602001909291905050501561140b5760019050611411565b5b600090505b90565b61141c6115c4565b61142557600080fd5b600860159054906101000a900460ff16611440576001611443565b60005b600860156101000a81548160ff021916908315150217905550600860159054906101000a900460ff16156114a2577f0619aa5871528c196a8bee5d141b8471e0b31151f1c84c2f9330633a829b88cb60405160405180910390a16114cf565b7fefba29f8b62985a2fe3482b460d5bf4e0986196764b5a4a52ee894caa1d9d2cb60405160405180910390a15b565b6114da33611097565b6114e357600080fd5b6114ec816120e0565b50565b6114f833611097565b61150157600080fd5b600a60009054906101000a900460ff161561151b57600080fd5b6001600a60006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600860159054906101000a900460ff1681565b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116ec5780601f106116c1576101008083540402835291602001916116ec565b820191906000526020600020905b8154815290600101906020018083116116cf57829003601f168201915b5050505050905090565b600061170c826005611f6190919063ffffffff16565b9050919050565b6000600a60009054906101000a900460ff161561172f57600080fd5b611739838361213a565b905092915050565b6000600b80549050905090565b6000600a60009054906101000a900460ff161561176a57600080fd5b61177483836121df565b905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61180b6115c4565b61181457600080fd5b61181d81612213565b50565b6118286115c4565b61183157600080fd5b600082829050116118aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f696e76616c696420646f63756d656e745572690000000000000000000000000081525060200191505060405180910390fd5b6118b2612d5b565b604051806040016040528042815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152509050600b8190806001815401808255809150509060018203906000526020600020906002020160009091929091909150600082015181600001556020820151816001019080519060200190611961929190612d75565b5050505061197e6001600b8054905061230b90919063ffffffff16565b7f6a8f0ee5a5300087347ba2a68d54d3c5ddb7584a54dcd25e04685a7e9257f56f848460405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a2505050565b60006060600080600b8054905011611a66576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6e6f20646f63756d656e7473206578697374000000000000000000000000000081525060200191505060405180910390fd5b6000611a816001600b8054905061230b90919063ffffffff16565b90506000600b8281548110611a9257fe5b9060005260206000209060020201905080600001548160010183818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b415780601f10611b1657610100808354040283529160200191611b41565b820191906000526020600020905b815481529060010190602001808311611b2457829003601f168201915b505050505091509450945094505050909192565b6000611b6233848461232b565b6001905092915050565b6000611b76611343565b15611b8e57611b848461248a565b611b8d8361248a565b5b611b998484846125d9565b90509392505050565b611bad83838361268a565b611c06611bb984611131565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061285890919063ffffffff16565b611c5f611c1283611131565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061285890919063ffffffff16565b438373ffffffffffffffffffffffffffffffffffffffff167f3c9804bd4ed58a4d26976be3767c732c59125bdbddbe3b8ed0a247b2640b810b611ca186611131565b6040518082815260200191505060405180910390a3438273ffffffffffffffffffffffffffffffffffffffff167f3c9804bd4ed58a4d26976be3767c732c59125bdbddbe3b8ed0a247b2640b810b611cf885611131565b6040518082815260200191505060405180910390a3505050565b6000611dad3384611da885600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461294890919063ffffffff16565b61232b565b6001905092915050565b611dc18282612967565b611e1a611dcd83611131565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061285890919063ffffffff16565b611e35611e25610d87565b600561285890919063ffffffff16565b438273ffffffffffffffffffffffffffffffffffffffff167f3c9804bd4ed58a4d26976be3767c732c59125bdbddbe3b8ed0a247b2640b810b611e7785611131565b6040518082815260200191505060405180910390a3437fd4ef7e49cf313a9bb432e970a127e18e988925c846b38265a3cfa2787fc3b7f1611eb6610d87565b6040518082815260200191505060405180910390a25050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f0a57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008083600001805490501480611f98575082600001600081548110611f8357fe5b90600052602060002090600202016000015482105b15611fa65760009050611fd9565b6000611fb28484612abb565b9050836000018181548110611fc357fe5b9060005260206000209060020201600101549150505b92915050565b611ff3816009612bab90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b6120438282611db7565b6120dc82336120d784600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461230b90919063ffffffff16565b61232b565b5050565b6120f4816009612c5690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b60006121d533846121d085600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461230b90919063ffffffff16565b61232b565b6001905092915050565b60006121e9611343565b15612201576121f73361248a565b6122008361248a565b5b61220b8383612d02565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561224d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008282111561231a57600080fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561236557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561239f57600080fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af32abf826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561252957600080fd5b505afa15801561253d573d6000803e3d6000fd5b505050506040513d602081101561255357600080fd5b81019080805190602001909291905050506125d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6e6f742077686974656c6973746564000000000000000000000000000000000081525060200191505060405180910390fd5b50565b60006125e6848484611ba2565b61267f843361267a85600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461230b90919063ffffffff16565b61232b565b600190509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156126c457600080fd5b61271681600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461230b90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506127ab81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461294890919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008260000180549050905060008114806128a55750438360000161288760018461230b90919063ffffffff16565b8154811061289157fe5b906000526020600020906002020160000154105b1561290a5782600001604051806040016040528043815260200184815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050612943565b818360000161292360018461230b90919063ffffffff16565b8154811061292d57fe5b9060005260206000209060020201600101819055505b505050565b60008082840190508381101561295d57600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156129a157600080fd5b6129b68160035461230b90919063ffffffff16565b600381905550612a0e81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461230b90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080836000018054905090508284600001612ae160018461230b90919063ffffffff16565b81548110612aeb57fe5b90600052602060002090600202016000015411612b1e57612b1660018261230b90919063ffffffff16565b915050612ba5565b60008090506000612b3960018461230b90919063ffffffff16565b90505b612b5060018261230b90919063ffffffff16565b821015612b9e576000612b638383612d19565b905085876000018281548110612b7557fe5b90600052602060002090600202016000015411612b9457809250612b98565b8091505b50612b3c565b8193505050505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612be557600080fd5b612bef8282611ecf565b612bf857600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612c9057600080fd5b612c9a8282611ecf565b15612ca457600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000612d0f338484611ba2565b6001905092915050565b60006002808381612d2657fe5b0660028581612d3157fe5b060181612d3a57fe5b0460028381612d4557fe5b0460028581612d5057fe5b040101905092915050565b604051806040016040528060008152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612db657805160ff1916838001178555612de4565b82800160010185558215612de4579182015b82811115612de3578251825591602001919060010190612dc8565b5b509050612df19190612df5565b5090565b612e1791905b80821115612e13576000816000905550600101612dfb565b5090565b90565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612e5457600080fd5b612e698160035461294890919063ffffffff16565b600381905550612ec181600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461294890919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505056fea165627a7a72305820a2cbccdc05b6b9db80b37eb9b7c1784bddfe3c222d937aaa9866e0b50923d6250029a165627a7a723058201264dd321f64728a83e0ad14daf0664823adc532d3f977ec42d65818d35c68cd0029000000000000000000000000b28a9dccd099dc19bd1112fa33dfa640dd07d961",
  "constructorArguments": "000000000000000000000000b28a9dccd099dc19bd1112fa33dfa640dd07d961"
}