{
  "address": "0x7b57ee1e32e2b3453838482970bf63c28b2472c9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Safe",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-02\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// token contract interface\ninterface Token{\n    function balanceOf(address user) external returns(uint256);\n    function transfer(address to, uint256 amount) external returns(bool);\n}\n\ncontract Safe{\n    using SafeMath for uint256;\n    \n    // counter for signing transactions\n    uint8 public count;\n    \n    uint256 internal end;\n    uint256 internal timeOutAuthentication;\n    \n    // arrays of safe keys\n    mapping (address => bool) internal safeKeys;\n    address [] internal massSafeKeys = new address[](4);\n    \n    // array of keys that signed the transaction\n    mapping (address => bool) internal signKeys;\n    \n    // free amount in safe\n    uint256 internal freeAmount; \n    // event transferring money to safe\n    bool internal tranche;\n    \n    // fixing lockup in safe\n    bool internal lockupIsSet;\n    \n    // lockup of safe\n    uint256 internal mainLockup; \n    \n    address internal lastSafeKey;\n    \n    Token public token;\n    \n    // Amount of cells\n    uint256 public countOfCell;\n    \n    // cell structure\n    struct _Cell{\n        uint256 lockup;\n        uint256 balance;\n        bool exist;\n        uint256 timeOfDeposit;\n    }\n    \n    // cell addresses\n    mapping (address => _Cell) internal userCells;\n    \n    event CreateCell(address indexed key);\n    event Deposit(address indexed key, uint256 balance);\n    event Delete(address indexed key);\n    event Edit(address indexed key, uint256 lockup);\n    event Withdraw(address indexed who, uint256 balance);\n    event InternalTransfer(address indexed from, address indexed to, uint256 balance);\n\n    modifier firstLevel() {\n        require(msg.sender == lastSafeKey);\n        require(count>=1);\n        require(now < end);\n        _;\n    }\n    \n    modifier secondLevel() {\n        require(msg.sender == lastSafeKey);\n        require(count>=2);\n        require(now < end);\n        _;\n    }\n    \n    modifier thirdLevel() {\n        require(msg.sender == lastSafeKey);\n        require(count>=3);\n        require(now < end);\n        _;\n    }\n    \n    constructor (address _first, address _second, address _third, address _fourth) public {\n        require(\n            _first != _second && \n            _first != _third && \n            _first != _fourth && \n            _second != _third &&\n            _second != _fourth &&\n            _third != _fourth &&\n            _first != 0x0 &&\n            _second != 0x0 &&\n            _third != 0x0 &&\n            _fourth != 0x0\n        );\n        safeKeys[_first] = true;\n        safeKeys[_second] = true;\n        safeKeys[_third] = true;\n        safeKeys[_fourth] = true;\n        massSafeKeys[0] = _first;\n        massSafeKeys[1] = _second;\n        massSafeKeys[2] = _third;\n        massSafeKeys[3] = _fourth;\n        timeOutAuthentication = 1 hours;\n    }\n    \n    function AuthStart() public returns(bool){\n        require(safeKeys[msg.sender]);\n        require(timeOutAuthentication >=0);\n        require(!signKeys[msg.sender]);\n        signKeys[msg.sender] = true;\n        count++;\n        end = now.add(timeOutAuthentication);\n        lastSafeKey = msg.sender;\n        return true;\n    }\n    \n    // completion of operation with safe-keys\n    function AuthEnd() public returns(bool){\n        require (safeKeys[msg.sender]);\n        for(uint i=0; i<4; i++){\n          signKeys[massSafeKeys[i]] = false;\n        }\n        count = 0;\n        end = 0;\n        lastSafeKey = 0x0;\n        return true;\n    }\n    \n    function getTimeOutAuthentication() firstLevel public view returns(uint256){\n        return timeOutAuthentication;\n    }\n    \n    function getFreeAmount() firstLevel public view returns(uint256){\n        return freeAmount;\n    }\n    \n    function getLockupCell(address _user) firstLevel public view returns(uint256){\n        return userCells[_user].lockup;\n    }\n    \n    function getBalanceCell(address _user) firstLevel public view returns(uint256){\n        return userCells[_user].balance;\n    }\n    \n    function getExistCell(address _user) firstLevel public view returns(bool){\n        return userCells[_user].exist;\n    }\n    \n    function getSafeKey(uint i) firstLevel view public returns(address){\n        return massSafeKeys[i];\n    }\n    \n    // withdrawal tokens from safe for issuer\n    function AssetWithdraw(address _to, uint256 _balance) secondLevel public returns(bool){\n        require(_balance<=freeAmount);\n        require(now>=mainLockup);\n        freeAmount = freeAmount.sub(_balance);\n        token.transfer(_to, _balance);\n        emit Withdraw(this, _balance);\n        return true;\n    }\n    \n    function setCell(address _cell, uint256 _lockup) secondLevel public returns(bool){\n        require(userCells[_cell].lockup==0 && userCells[_cell].balance==0);\n        require(!userCells[_cell].exist);\n        require(_lockup >= mainLockup);\n        userCells[_cell].lockup = _lockup;\n        userCells[_cell].exist = true;\n        countOfCell = countOfCell.add(1);\n        emit CreateCell(_cell);\n        return true;\n    }\n\n    function deleteCell(address _key) secondLevel public returns(bool){\n        require(getBalanceCell(_key)==0);\n        require(userCells[_key].exist);\n        userCells[_key].lockup = 0;\n        userCells[_key].exist = false;\n        countOfCell = countOfCell.sub(1);\n        emit Delete(_key);\n        return true;\n    }\n    \n    // change parameters of the cell\n    function editCell(address _key, uint256 _lockup) secondLevel public returns(bool){\n        require(getBalanceCell(_key)==0);\n        require(_lockup>= mainLockup);\n        require(userCells[_key].exist);\n        userCells[_key].lockup = _lockup;\n        emit Edit(_key, _lockup);\n        return true;\n    }\n\n    function depositCell(address _key, uint256 _balance) secondLevel public returns(bool){\n        require(userCells[_key].exist);\n        require(_balance<=freeAmount);\n        freeAmount = freeAmount.sub(_balance);\n        userCells[_key].balance = userCells[_key].balance.add(_balance);\n        userCells[_key].timeOfDeposit = now;\n        emit Deposit(_key, _balance);\n        return true;\n    }\n    \n    function changeDepositCell(address _key, uint256 _balance) secondLevel public returns(bool){\n        require(userCells[_key].timeOfDeposit.add(1 hours)>now);\n        userCells[_key].balance = userCells[_key].balance.sub(_balance);\n        freeAmount = freeAmount.add(_balance);\n        return true;\n    }\n    \n    // installation of a lockup for safe, \n    // fixing free amount on balance, \n    // token installation\n    // (run once)\n    function setContract(Token _token, uint256 _lockup) thirdLevel public returns(bool){\n        require(_token != address(0x0));\n        require(!lockupIsSet);\n        require(!tranche);\n        token = _token;\n        freeAmount = getMainBalance();\n        mainLockup = _lockup;\n        tranche = true;\n        lockupIsSet = true;\n        return true;\n    }\n    \n    // change of safe-key\n    function changeKey(address _oldKey, address _newKey) thirdLevel public returns(bool){\n        require(safeKeys[_oldKey]);\n        require(_newKey != 0x0);\n        for(uint i=0; i<4; i++){\n          if(massSafeKeys[i]==_oldKey){\n            massSafeKeys[i] = _newKey;\n          }\n        }\n        safeKeys[_oldKey] = false;\n        safeKeys[_newKey] = true;\n        \n        if(_oldKey==lastSafeKey){\n            lastSafeKey = _newKey;\n        }\n        \n        return true;\n    }\n\n    function setTimeOutAuthentication(uint256 _time) thirdLevel public returns(bool){\n        require(\n            _time > 0 && \n            timeOutAuthentication != _time &&\n            _time <= (5000 * 1 minutes)\n        );\n        timeOutAuthentication = _time;\n        return true;\n    }\n\n    function withdrawCell(uint256 _balance) public returns(bool){\n        require(userCells[msg.sender].balance >= _balance);\n        require(now >= userCells[msg.sender].lockup);\n        userCells[msg.sender].balance = userCells[msg.sender].balance.sub(_balance);\n        token.transfer(msg.sender, _balance);\n        emit Withdraw(msg.sender, _balance);\n        return true;\n    }\n    \n    // transferring tokens from one cell to another\n    function transferCell(address _to, uint256 _balance) public returns(bool){\n        require(userCells[msg.sender].balance >= _balance);\n        require(userCells[_to].lockup>=userCells[msg.sender].lockup);\n        require(userCells[_to].exist);\n        userCells[msg.sender].balance = userCells[msg.sender].balance.sub(_balance);\n        userCells[_to].balance = userCells[_to].balance.add(_balance);\n        emit InternalTransfer(msg.sender, _to, _balance);\n        return true;\n    }\n    \n    // information on balance of cell for holder\n    \n    function getInfoCellBalance() view public returns(uint256){\n        return userCells[msg.sender].balance;\n    }\n    \n    // information on lockup of cell for holder\n    \n    function getInfoCellLockup() view public returns(uint256){\n        return userCells[msg.sender].lockup;\n    }\n    \n    function getMainBalance() public view returns(uint256){\n        return token.balanceOf(this);\n    }\n    \n    function getMainLockup() public view returns(uint256){\n        return mainLockup;\n    }\n    \n    function isTimeOver() view public returns(bool){\n        if(now > end){\n            return true;\n        } else{\n            return false;\n        }\n    }\n}",
  "bytecode": "600460808181526101206040529060a08280388339505081516200002b926004925060200190620002d0565b503480156200003957600080fd5b50604051608080620018598339810160409081528151602083015191830151606090930151909290600160a060020a038085169084161480159062000090575081600160a060020a031684600160a060020a031614155b8015620000af575080600160a060020a031684600160a060020a031614155b8015620000ce575081600160a060020a031683600160a060020a031614155b8015620000ed575080600160a060020a031683600160a060020a031614155b80156200010c575080600160a060020a031682600160a060020a031614155b8015620001215750600160a060020a03841615155b8015620001365750600160a060020a03831615155b80156200014b5750600160a060020a03821615155b8015620001605750600160a060020a03811615155b15156200016c57600080fd5b600160a060020a038481166000908152600360205260408082208054600160ff19918216811790925587851684528284208054821683179055868516845282842080548216831790559385168352908220805490931617909155600480548692908110620001d657fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555082600460018154811015156200021657fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555081600460028154811015156200025657fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555080600460038154811015156200029657fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790555050610e1060025550620003649050565b82805482825590600052602060002090810192821562000328579160200282015b82811115620003285782518254600160a060020a031916600160a060020a03909116178255602090920191600190910190620002f1565b50620003369291506200033a565b5090565b6200036191905b8082111562000336578054600160a060020a031916815560010162000341565b90565b6114e580620003746000396000f30060806040526004361061015e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025e8095811461016357806306661abd1461019b5780630b1ba852146101c657806314941e80146101ea57806314cf69831461021157806316f33fc21461023257806319921ad21461025357806319eaeccb1461026857806353ce910e1461027d57806355b9ca40146102b157806368b49b78146102c95780636defe0b9146102f05780636df03165146103055780637791dc1f1461031d57806378918e891461033257806388e490eb146103535780638dfb04fe146103685780638e15e94b14610389578063932838a11461039e57806399304cd4146103c2578063a22dff2c146103e6578063b5c3a111146103fb578063b734e98b1461041f578063bc428ee214610443578063e23a491614610458578063ed45747f1461046d578063fc0c546a14610491575b600080fd5b34801561016f57600080fd5b50610187600160a060020a03600435166024356104a6565b604080519115158252519081900360200190f35b3480156101a757600080fd5b506101b06105d7565b6040805160ff9092168252519081900360200190f35b3480156101d257600080fd5b50610187600160a060020a03600435166024356105e0565b3480156101f657600080fd5b506101ff6106be565b60408051918252519081900360200190f35b34801561021d57600080fd5b506101ff600160a060020a0360043516610703565b34801561023e57600080fd5b506101ff600160a060020a036004351661075f565b34801561025f57600080fd5b506101876107b8565b34801561027457600080fd5b506101ff610869565b34801561028957600080fd5b5061029560043561087c565b60408051600160a060020a039092168252519081900360200190f35b3480156102bd57600080fd5b506101876004356108e2565b3480156102d557600080fd5b50610187600160a060020a0360043581169060243516610a2b565b3480156102fc57600080fd5b50610187610ba3565b34801561031157600080fd5b50610187600435610bbf565b34801561032957600080fd5b50610187610c31565b34801561033e57600080fd5b50610187600160a060020a0360043516610ce0565b34801561035f57600080fd5b506101ff610dd3565b34801561037457600080fd5b50610187600160a060020a0360043516610de9565b34801561039557600080fd5b506101ff610e48565b3480156103aa57600080fd5b50610187600160a060020a0360043516602435610e4e565b3480156103ce57600080fd5b50610187600160a060020a0360043516602435610f8b565b3480156103f257600080fd5b506101ff6110d6565b34801561040757600080fd5b50610187600160a060020a036004351660243561116c565b34801561042b57600080fd5b50610187600160a060020a036004351660243561128d565b34801561044f57600080fd5b506101ff611359565b34801561046457600080fd5b506101ff61139d565b34801561047957600080fd5b50610187600160a060020a03600435166024356113a3565b34801561049d57600080fd5b50610295611485565b336000908152600c60205260408120600101548211156104c557600080fd5b336000908152600c602052604080822054600160a060020a038616835291205410156104f057600080fd5b600160a060020a0383166000908152600c602052604090206002015460ff16151561051a57600080fd5b336000908152600c602052604090206001015461053d908363ffffffff61149416565b336000908152600c6020526040808220600190810193909355600160a060020a038616825290200154610576908363ffffffff6114a616565b600160a060020a0384166000818152600c60209081526040918290206001019390935580518581529051919233927fe2080c8fc8d86c864d8dc081fadaebf2be7191086615e786f954420f13ed122a9281900390910190a350600192915050565b60005460ff1681565b600954600090600160a060020a031633146105fa57600080fd5b600054600260ff909116101561060f57600080fd5b600154421061061d57600080fd5b600160a060020a0383166000908152600c6020526040902060030154429061064d90610e1063ffffffff6114a616565b1161065757600080fd5b600160a060020a0383166000908152600c6020526040902060010154610683908363ffffffff61149416565b600160a060020a0384166000908152600c60205260409020600101556006546106b2908363ffffffff6114a616565b60065550600192915050565b600954600090600160a060020a031633146106d857600080fd5b600054600160ff90911610156106ed57600080fd5b60015442106106fb57600080fd5b506006545b90565b600954600090600160a060020a0316331461071d57600080fd5b600054600160ff909116101561073257600080fd5b600154421061074057600080fd5b50600160a060020a03166000908152600c602052604090206001015490565b600954600090600160a060020a0316331461077957600080fd5b600054600160ff909116101561078e57600080fd5b600154421061079c57600080fd5b50600160a060020a03166000908152600c602052604090205490565b3360009081526003602052604081205460ff1615156107d657600080fd5b600254600011156107e657600080fd5b3360009081526005602052604090205460ff161561080357600080fd5b3360009081526005602052604081208054600160ff199182168117909255825490811660ff918216909201161790556002546108409042906114a6565b60019081556009805473ffffffffffffffffffffffffffffffffffffffff191633179055905090565b336000908152600c602052604090205490565b600954600090600160a060020a0316331461089657600080fd5b600054600160ff90911610156108ab57600080fd5b60015442106108b957600080fd5b60048054839081106108c757fe5b600091825260209091200154600160a060020a031692915050565b336000908152600c602052604081206001015482111561090157600080fd5b336000908152600c602052604090205442101561091d57600080fd5b336000908152600c6020526040902060010154610940908363ffffffff61149416565b336000818152600c6020908152604080832060010194909455600a5484517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810194909452602484018790529351600160a060020a039094169363a9059cbb93604480820194918390030190829087803b1580156109c157600080fd5b505af11580156109d5573d6000803e3d6000fd5b505050506040513d60208110156109eb57600080fd5b505060408051838152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a2506001919050565b6009546000908190600160a060020a03163314610a4757600080fd5b600054600360ff9091161015610a5c57600080fd5b6001544210610a6a57600080fd5b600160a060020a03841660009081526003602052604090205460ff161515610a9157600080fd5b600160a060020a0383161515610aa657600080fd5b5060005b6004811015610b2e5783600160a060020a0316600482815481101515610acc57fe5b600091825260209091200154600160a060020a03161415610b265782600482815481101515610af757fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b600101610aaa565b600160a060020a03808516600081815260036020526040808220805460ff1990811690915587851683529120805490911660011790556009549091161415610b99576009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790555b5060019392505050565b6000600154421115610bb757506001610700565b506000610700565b600954600090600160a060020a03163314610bd957600080fd5b600054600360ff9091161015610bee57600080fd5b6001544210610bfc57600080fd5b600082118015610c0e57508160025414155b8015610c1d5750620493e08211155b1515610c2857600080fd5b50600255600190565b33600090815260036020526040812054819060ff161515610c5157600080fd5b5060005b6004811015610caf57600060056000600484815481101515610c7357fe5b600091825260208083209190910154600160a060020a031683528201929092526040019020805460ff1916911515919091179055600101610c55565b50506000805460ff1916815560019081556009805473ffffffffffffffffffffffffffffffffffffffff1916905590565b600954600090600160a060020a03163314610cfa57600080fd5b600054600260ff9091161015610d0f57600080fd5b6001544210610d1d57600080fd5b610d2682610703565b15610d3057600080fd5b600160a060020a0382166000908152600c602052604090206002015460ff161515610d5a57600080fd5b600160a060020a0382166000908152600c60205260408120908155600201805460ff19169055600b54610d9490600163ffffffff61149416565b600b55604051600160a060020a038316907fd03a4dcdd2ef0422b2b46019327660d3a7421e1bf95d023845072c55c1f223b890600090a2506001919050565b336000908152600c602052604090206001015490565b600954600090600160a060020a03163314610e0357600080fd5b600054600160ff9091161015610e1857600080fd5b6001544210610e2657600080fd5b50600160a060020a03166000908152600c602052604090206002015460ff1690565b600b5481565b600954600090600160a060020a03163314610e6857600080fd5b600054600260ff9091161015610e7d57600080fd5b6001544210610e8b57600080fd5b600160a060020a0383166000908152600c6020526040902054158015610eca5750600160a060020a0383166000908152600c6020526040902060010154155b1515610ed557600080fd5b600160a060020a0383166000908152600c602052604090206002015460ff1615610efe57600080fd5b600854821015610f0d57600080fd5b600160a060020a0383166000908152600c60205260409020828155600201805460ff19166001908117909155600b54610f4b9163ffffffff6114a616565b600b55604051600160a060020a038416907f8f3ae7fcaf4ef4d8c9240b6c820aef4bd2deb5922c9ba2d59e68ed5756fc1fef90600090a250600192915050565b600954600090600160a060020a03163314610fa557600080fd5b600054600260ff9091161015610fba57600080fd5b6001544210610fc857600080fd5b600654821115610fd757600080fd5b600854421015610fe657600080fd5b600654610ff9908363ffffffff61149416565b600655600a54604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561106b57600080fd5b505af115801561107f573d6000803e3d6000fd5b505050506040513d602081101561109557600080fd5b505060408051838152905130917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a250600192915050565b600a54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092600160a060020a0316916370a0823191602480830192602092919082900301818787803b15801561113b57600080fd5b505af115801561114f573d6000803e3d6000fd5b505050506040513d602081101561116557600080fd5b5051905090565b600954600090600160a060020a0316331461118657600080fd5b600054600260ff909116101561119b57600080fd5b60015442106111a957600080fd5b600160a060020a0383166000908152600c602052604090206002015460ff1615156111d357600080fd5b6006548211156111e257600080fd5b6006546111f5908363ffffffff61149416565b600655600160a060020a0383166000908152600c6020526040902060010154611224908363ffffffff6114a616565b600160a060020a0384166000818152600c60209081526040918290206001810194909455426003909401939093558051858152905191927fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c92918290030190a250600192915050565b600954600090600160a060020a031633146112a757600080fd5b600054600360ff90911610156112bc57600080fd5b60015442106112ca57600080fd5b600160a060020a03831615156112df57600080fd5b600754610100900460ff16156112f457600080fd5b60075460ff161561130457600080fd5b600a805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790556113346110d6565b600655506008555060078054610100600160ff19909216821761ff0019161790915590565b600954600090600160a060020a0316331461137357600080fd5b600054600160ff909116101561138857600080fd5b600154421061139657600080fd5b5060025490565b60085490565b600954600090600160a060020a031633146113bd57600080fd5b600054600260ff90911610156113d257600080fd5b60015442106113e057600080fd5b6113e983610703565b156113f357600080fd5b60085482101561140257600080fd5b600160a060020a0383166000908152600c602052604090206002015460ff16151561142c57600080fd5b600160a060020a0383166000818152600c6020908152604091829020859055815185815291517f667143d464294f5c8c03f810d6f6f657c27024e19dc61d23d60960d3859c41209281900390910190a250600192915050565b600a54600160a060020a031681565b6000828211156114a057fe5b50900390565b818101828110156114b357fe5b929150505600a165627a7a7230582040dab415c2ba6750ea9f60fd7ebbc6c3af23fe6d5e50cfb538022d49c256a4a40029000000000000000000000000569568bbf1746bed90dbe09d1f5b7277a4edcdd200000000000000000000000063484617d5c8e1f43e082565f6ec6eb832475bed000000000000000000000000345b1842815e89f3ee2576a1c2b828e88ef28c0e0000000000000000000000002c9b963917bc924abf8136b9f4c751b6227ec1e7",
  "constructorArguments": "000000000000000000000000569568bbf1746bed90dbe09d1f5b7277a4edcdd200000000000000000000000063484617d5c8e1f43e082565f6ec6eb832475bed000000000000000000000000345b1842815e89f3ee2576a1c2b828e88ef28c0e0000000000000000000000002c9b963917bc924abf8136b9f4c751b6227ec1e7"
}