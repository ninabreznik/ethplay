{
  "address": "0x11d635bbba3f9b8f7c9b91ca9f315a2207cb5ad5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "dHealthToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-27\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * Library easily handles the cases of overflow as well as underflow. \n * Also ensures that balance does nto get naegative\n */\nlibrary SafeMath {\n\t// multiplies two values safely and returns result\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t// devides two values safely and returns result\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\t// subtracts two values safely and returns result\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t// adds two values safely and returns result\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\taddress public owner;\n\n\t// Event to log whenever the ownership is tranferred\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\t/**\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n\t * account.\n\t */\n\tfunction Ownable() public {\n\t\towner = msg.sender;\n\t}\n\n\n\t/**\n\t * @dev Throws if called by any account other than the owner.\n\t */\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\n\t/**\n\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\n\t * @param newOwner The address to transfer ownership to.\n\t */\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\trequire(newOwner != address(0));\n\t\tOwnershipTransferred(owner, newOwner);\n\t\towner = newOwner;\n\t}\n\n}\n\n/**\n * @title Timestamped\n * @dev The Timestamped contract has sets dummy timestamp for method calls\n */\ncontract Timestamped is Ownable {\n\tuint256 public ts = 0;\n\tuint256 public plus = 0;\n\n\tfunction getBlockTime() public view returns (uint256) {\n\t\tif(ts > 0) {\n\t\t\treturn ts + plus;\n\t\t} else {\n\t\t\treturn block.timestamp + plus; \n\t\t}\n\t}\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n\tuint256 public totalSupply;\n\tfunction balanceOf(address who) public view returns (uint256);\n\tfunction transfer(address to, uint256 value) public returns (bool);\n\tevent Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n\tfunction allowance(address owner, address spender) public view returns (uint256);\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n\tfunction approve(address spender, uint256 value) public returns (bool);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n\tusing SafeMath for uint256;\n\n\tmapping(address => uint256) balances;\n\n\t/**\n\t* @dev transfer token for a specified address\n\t* @param _to The address to transfer to.\n\t* @param _value The amount to be transferred.\n\t*/\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[msg.sender]);\n\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\n\t\tbytes memory empty;\n\t\tTransfer(msg.sender, _to, _value, empty);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev Gets the balance of the specified address.\n\t* @param _owner The address to query the the balance of.\n\t* @return An uint256 representing the amount owned by the passed address.\n\t*/\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n\n\t// tracks the allowance of address. \n\tmapping (address => mapping (address => uint256)) internal allowed;\n\n\n\t/**\n\t * @dev Transfer tokens from one address to another\n\t * @param _from address The address which you want to send tokens from\n\t * @param _to address The address which you want to transfer to\n\t * @param _value uint256 the amount of tokens to be transferred\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[_from]);\n\t\trequire(_value <= allowed[_from][msg.sender]);\n\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n\t\tbytes memory empty;\n\t\tTransfer(_from, _to, _value, empty);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\t *\n\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\n\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n\t * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t * @param _spender The address which will spend the funds.\n\t * @param _value The amount of tokens to be spent.\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\n\t * @param _owner address The address which owns the funds.\n\t * @param _spender address The address which will spend the funds.\n\t * @return A uint256 specifying the amount of tokens still available for the spender.\n\t */\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\t/**\n\t * @dev Increase the amount of tokens that an owner allowed to a spender.\n\t *\n\t * approve should be called when allowed[_spender] == 0. To increment\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\n\t * the first transaction is mined)\n\t * From MonolithDAO Token.sol\n\t * @param _spender The address which will spend the funds.\n\t * @param _addedValue The amount of tokens to increase the allowance by.\n\t */\n\tfunction increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\n\t *\n\t * approve should be called when allowed[_spender] == 0. To decrement\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\n\t * the first transaction is mined)\n\t * From MonolithDAO Token.sol\n\t * @param _spender The address which will spend the funds.\n\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\n\t */\n\tfunction decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n\t\tuint256 oldValue = allowed[msg.sender][_spender];\n\t\tif (_subtractedValue > oldValue) {\n\t\t\tallowed[msg.sender][_spender] = 0;\n\t\t} else {\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\t\t}\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n}\n\n/**\n * @title ERC23Receiver interface\n * @dev see https://github.com/ethereum/EIPs/issues/223\n */\ncontract ERC223Receiver {\n\t \n\tstruct TKN {\n\t\taddress sender;\n\t\tuint256 value;\n\t\tbytes data;\n\t\tbytes4 sig;\n\t}\n\t\n\t/**\n\t * @dev Fallback function. Our ICO contract should implement this contract to receve ERC23 compatible tokens.\n\t * ERC23 protocol checks if contract has implemented this fallback method or not. \n\t * If this method is not implemented then tokens are not sent.\n\t * This method is introduced to avoid loss of tokens \n\t *\n\t * @param _from The address which will transfer the tokens.\n\t * @param _value Amount of tokens received.\n\t * @param _data Data sent along with transfer request.\n\t */\n\tfunction tokenFallback(address _from, uint256 _value, bytes _data) public pure {\n\t\tTKN memory tkn;\n\t\ttkn.sender = _from;\n\t\ttkn.value = _value;\n\t\ttkn.data = _data;\n\t\t// uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n\t\t// tkn.sig = bytes4(u);\n\t  \n\t\t/* tkn variable is analogue of msg variable of Ether transaction\n\t\t*  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n\t\t*  tkn.value the number of tokens that were sent   (analogue of msg.value)\n\t\t*  tkn.data is data of token transaction   (analogue of msg.data)\n\t\t*  tkn.sig is 4 bytes signature of function\n\t\t*  if data of token transaction is a function execution\n\t\t*/\n\t}\n}\n\n/**\n * @title ERC23 interface\n * @dev see https://github.com/ethereum/EIPs/issues/223\n */\ncontract ERC223 {\n\tuint256 public totalSupply;\n\tfunction balanceOf(address who) public view returns (uint256);\n\tfunction transfer(address to, uint256 value) public returns (bool);\n\tfunction transfer(address to, uint256 value, bytes data) public returns (bool);\n\tfunction transfer(address to, uint256 value, bytes data, string custom_fallback) public returns (bool);\n\tevent Transfer(address indexed from, address indexed to, uint256 value, bytes indexed data);\n}\n\n/**\n * @title Standard ERC223Token token\n *\n * @dev Implementation of the ERC23 token.\n * @dev https://github.com/ethereum/EIPs/issues/223\n */\n\ncontract ERC223Token is ERC223, StandardToken {\n\tusing SafeMath for uint256;\n\n\t/**\n\t * @dev Function that is called when a user or another contract wants to transfer funds .\n\t * This is method where you can supply fallback function name and that function will be triggered.\n\t * This method is added as part of ERC23 standard\n\t *\n\t * @param _to The address which will receive the tokens.\n\t * @param _value Amount of tokens received.\n\t * @param _data Data sent along with transfer request.\n\t * @param _custom_fallback Name of the method which should be called after transfer happens. If this method does not exists on contract then transaction will fail\n\t */\n\tfunction transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) public returns (bool success) {\n\t\t// check if receiving is contract\n\t\tif(isContract(_to)) {\n\t\t\t// validate the address and balance\n\t\t\trequire(_to != address(0));\n\t\t\trequire(_value <= balances[msg.sender]);\n\n\t\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\t\tbalances[_to] = balances[_to].add(_value);\n\t\n\t\t\t// invoke custom fallback function\t\t\t\n\t\t\tassert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n\t\t\tTransfer(msg.sender, _to, _value, _data);\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\t// receiver is not a contract so perform normal transfer to address\n\t\t\treturn transferToAddress(_to, _value, _data);\n\t\t}\n\t}\n  \n\n\t/**\n\t * @dev Function that is called when a user or another contract wants to transfer funds .\n\t * You can pass extra data which can be tracked in event.\n\t * This method is added as part of ERC23 standard\n\t *\n\t * @param _to The address which will receive the tokens.\n\t * @param _value Amount of tokens received.\n\t * @param _data Data sent along with transfer request.\n\t */\n\tfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\n\t\t// check if receiver is contract address\n\t\tif(isContract(_to)) {\n\t\t\t// invoke transfer request to contract\n\t\t\treturn transferToContract(_to, _value, _data);\n\t\t}\n\t\telse {\n\t\t\t// invoke transfer request to normal user wallet address\n\t\t\treturn transferToAddress(_to, _value, _data);\n\t\t}\n\t}\n  \n\t/**\n\t * @dev Standard function transfer similar to ERC20 transfer with no _data .\n\t * Added due to backwards compatibility reasons .\n\t *\n\t * @param _to The address which will receive the tokens.\n\t * @param _value Amount of tokens received.\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t//standard function transfer similar to ERC20 transfer with no _data\n\t\t//added due to backwards compatibility reasons\n\t\tbytes memory empty;\n\n\t\t// check if receiver is contract address\n\t\tif(isContract(_to)) {\n\t\t\t// invoke transfer request to contract\n\t\t\treturn transferToContract(_to, _value, empty);\n\t\t}\n\t\telse {\n\t\t\t// invoke transfer request to normal user wallet address\n\t\t\treturn transferToAddress(_to, _value, empty);\n\t\t}\n\t}\n\n\t/**\n\t * @dev assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n\t *\n\t * @param _addr The address which need to be checked if contract address or wallet address\n\t */\n\tfunction isContract(address _addr) private view returns (bool is_contract) {\n\t\tuint256 length;\n\t\tassembly {\n\t\t\t//retrieve the size of the code on target address, this needs assembly\n\t\t\tlength := extcodesize(_addr)\n\t\t}\n\t\treturn (length > 0);\n\t}\n\n\t/**\n\t * @dev Function that is called when transaction target is an address. This is private method.\n\t *\n\t * @param _to The address which will receive the tokens.\n\t * @param _value Amount of tokens received.\n\t * @param _data Data sent along with transfer request.\n\t */\n\tfunction transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool success) {\n\t\t// validate the address and balance\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[msg.sender]);\n\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\n\t\t// Log the transfer event\n\t\tTransfer(msg.sender, _to, _value, _data);\n\t\treturn true;\n\t}\n  \n\t/**\n\t * @dev Function that is called when transaction target is a contract. This is private method.\n\t *\n\t * @param _to The address which will receive the tokens.\n\t * @param _value Amount of tokens received.\n\t * @param _data Data sent along with transfer request.\n\t */\n\tfunction transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\n\t\t// validate the address and balance\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[msg.sender]);\n\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\n\t\t// call fallback function of contract\n\t\tERC223Receiver receiver = ERC223Receiver(_to);\n\t\treceiver.tokenFallback(msg.sender, _value, _data);\n\t\t\n\t\t// Log the transfer event\n\t\tTransfer(msg.sender, _to, _value, _data);\n\t\treturn true;\n\t}\n}\n\n/**\n* @title dHealthToken\n* @dev Very simple ERC23 Token example, where all tokens are pre-assigned to the creator.\n*/\ncontract dHealthToken is ERC223Token, Ownable {\n\n\tstring public constant name = \"dHealth\";\n\tstring public constant symbol = \"dHt\";\n\tuint256 public constant decimals = 18;\n\n\tuint256 constant INITIAL_SUPPLY = 500000000 * 1E18;\n\t\n\t/**\n\t* @dev Constructor that gives msg.sender all of existing tokens.\n\t*/\n\tfunction dHealthToken() public {\n\t\ttotalSupply = INITIAL_SUPPLY;\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\n\t}\n\n\t/**\n\t* @dev if ether is sent to this address, send it back.\n\t*/\n\tfunction() public payable {\n\t\trevert();\n\t}\n}\n\n/**\n * @title dHealthTokenDistributor\n * @dev The Distributor contract has an list of team member addresses and their share, \n * and provides method which can be called to distribute available smart contract balance across users.\n */\ncontract dHealthTokenDistributor is Ownable, Timestamped {\n\tusing SafeMath for uint256;\n\n\t// The token being sold, this holds reference to main token contract\n\tdHealthToken public token;\n\n\t// token vesting contract addresses\n\taddress public communityContract;\n\taddress public foundersContract;\n\taddress public technicalContract;\n\taddress public managementContract;\n\n\t// token vesting contract amounts\n\tuint256 public communityAmount;\n\tuint256 public foundersAmount;\n\tuint256 public technicalAmount;\n\tuint256 public managementAmount;\n\n\t/**\n\t* @dev Constructor that initializes team and share\n\t*/\n\tfunction dHealthTokenDistributor(address _token, address _communityContract, address _foundersContract, address _technicalContract, address _managementContract) public {\n\t\t// set token\n\t\ttoken = dHealthToken(_token);\n\n\t\t// initialize contract addresses\n\t\tcommunityContract = _communityContract;\n\t\tfoundersContract = _foundersContract;\n\t\ttechnicalContract = _technicalContract;\n\t\tmanagementContract = _managementContract;\n\n\t\t// initialize precentage share\n\t\tcommunityAmount = 10000000 * 1E18;\n\t\tfoundersAmount = 15000000 * 1E18;\n\t\ttechnicalAmount = 55000000 * 1E18;\n\t\tmanagementAmount = 60000000 * 1E18;\n\t}\n\n\t/**\n\t* @dev distribute funds.\n\t*/\t\n\tfunction distribute() onlyOwner public payable {\n\t\tbytes memory empty;\n\n\t\t// distribute funds to community \t\t\n\t\ttoken.transfer(communityContract, communityAmount, empty);\n\n\t\t// distribute funds to founders \t\t\n\t\ttoken.transfer(foundersContract, foundersAmount, empty);\n\n\t\t// distribute funds to technical \t\t\n\t\ttoken.transfer(technicalContract, technicalAmount, empty);\n\n\t\t// distribute funds to management \t\t\n\t\ttoken.transfer(managementContract, managementAmount, empty);\n\t}\n}\n\n/**\n * @title dHealthEtherDistributor\n * @dev The Distributor contract has an list of team member addresses and their share, \n * and provides method which can be called to distribute available smart contract balance across users.\n */\ncontract dHealthEtherDistributor is Ownable, Timestamped {\n\tusing SafeMath for uint256;\n\n\taddress public projectContract;\t\n\taddress public technologyContract;\t\n\taddress public founderContract;\t\n\n\tuint256 public projectShare;\n\tuint256 public technologyShare;\n\tuint256 public founderShare;\n\n\t/**\n\t* @dev Constructor that initializes team and share\n\t*/\n\tfunction dHealthEtherDistributor(address _projectContract, address _technologyContract, address _founderContract) public {\n\n\t\t// initialize contract addresses\n\t\tprojectContract = _projectContract;\t\n\t\ttechnologyContract = _technologyContract;\t\n\t\tfounderContract = _founderContract;\t\n\n\t\t// initialize precentage share\n\t\tprojectShare = 72;\n\t\ttechnologyShare = 18;\n\t\tfounderShare = 10;\n\t}\n\n\t/**\n\t* @dev distribute funds.\n\t*/\t\n\tfunction distribute() onlyOwner public payable {\n\t\tuint256 balance = this.balance;\n\t\t\n\t\t// distribute funds to founders \t\t\n\t\tuint256 founderPart = balance.mul(founderShare).div(100);\n\t\tif(founderPart > 0) {\n\t\t\tfounderContract.transfer(founderPart);\n\t\t}\n\n\t\t// distribute funds to technology \t\t\n\t\tuint256 technologyPart = balance.mul(technologyShare).div(100);\n\t\tif(technologyPart > 0) {\n\t\t\ttechnologyContract.transfer(technologyPart);\n\t\t}\n\n\t\t// distribute left balance to project\n\t\tuint256 projectPart = this.balance;\n\t\tif(projectPart > 0) {\n\t\t\tprojectContract.transfer(projectPart);\n\t\t}\n\t}\n}\n\n/**\n* @title dHealthTokenIncentive\n* @dev This is token incentive contract it receives tokens and holds it for certain period of time\n*/\ncontract dHealthTokenIncentive is dHealthTokenDistributor, ERC223Receiver {\n\tusing SafeMath for uint256;\n\n\t// The token being sold, this holds reference to main token contract\n\tdHealthToken public token;\n\n\t// amount of token on hold\n\tuint256 public maxTokenForHold = 140000000 * 1E18;\n\n\t// contract timeout \n\tuint256 public contractTimeout = 1555286400; // Monday, 15 April 2019 00:00:00\n\n\t/**\n\t* @dev Constructor that initializes vesting contract with contract addresses in parameter\n\t*/\n\tfunction dHealthTokenIncentive(address _token, address _communityContract, address _foundersContract, address _technicalContract, address _managementContract) \n\t\tdHealthTokenDistributor(_token, _communityContract, _foundersContract, _technicalContract, _managementContract)\n\t\tpublic {\n\t\t// set token\n\t\ttoken = dHealthToken(_token);\n\t}\n\n\t/**\n\t* @dev Method called by owner of contract to withdraw all tokens after timeout has reached\n\t*/\n\tfunction withdraw() onlyOwner public {\n\t\trequire(contractTimeout <= getBlockTime());\n\t\t\n\t\t// send remaining tokens back to owner.\n\t\tuint256 tokens = token.balanceOf(this); \n\t\tbytes memory empty;\n\t\ttoken.transfer(owner, tokens, empty);\n\t}\n}\n\n/**\n* @title dHealthTokenGrowth\n* @dev This is token growth contract it receives tokens and holds it for certain period of time\n*/\ncontract dHealthTokenGrowth is Ownable, ERC223Receiver, Timestamped {\n\tusing SafeMath for uint256;\n\n\t// The token being sold, this holds reference to main token contract\n\tdHealthToken public token;\n\n\t// amount of token on hold\n\tuint256 public maxTokenForHold = 180000000 * 1E18;\n\n\t// exchanges wallet address\n\taddress public exchangesWallet;\n\tuint256 public exchangesTokens = 45000000 * 1E18;\n\tuint256 public exchangesLockEndingAt = 1523750400; // Sunday, 15 April 2018 00:00:00\n\tbool public exchangesStatus = false;\n\n\t// countries wallet address\n\taddress public countriesWallet;\n\tuint256 public countriesTokens = 45000000 * 1E18;\n\tuint256 public countriesLockEndingAt = 1525132800; // Tuesday, 1 May 2018 00:00:00\n\tbool public countriesStatus = false;\n\n\t// acquisitions wallet address\n\taddress public acquisitionsWallet;\n\tuint256 public acquisitionsTokens = 45000000 * 1E18;\n\tuint256 public acquisitionsLockEndingAt = 1526342400; // Tuesday, 15 May 2018 00:00:00\n\tbool public acquisitionsStatus = false;\n\n\t// coindrops wallet address\n\taddress public coindropsWallet;\n\tuint256 public coindropsTokens = 45000000 * 1E18;\n\tuint256 public coindropsLockEndingAt = 1527811200; // Friday, 1 June 2018 00:00:00\n\tbool public coindropsStatus = false;\n\n\t// contract timeout \n\tuint256 public contractTimeout = 1555286400; // Monday, 15 April 2019 00:00:00\n\n\t/**\n\t* @dev Constructor that initializes vesting contract with contract addresses in parameter\n\t*/\n\tfunction dHealthTokenGrowth(address _token, address _exchangesWallet, address _countriesWallet, address _acquisitionsWallet, address _coindropsWallet) public {\n\t\t// set token\n\t\ttoken = dHealthToken(_token);\n\n\t\t// setup wallet addresses\n\t\texchangesWallet = _exchangesWallet;\n\t\tcountriesWallet = _countriesWallet;\n\t\tacquisitionsWallet = _acquisitionsWallet;\n\t\tcoindropsWallet = _coindropsWallet;\n\t}\n\n\t/**\n\t* @dev Method called by anyone to withdraw funds to exchanges wallet after locking period\n\t*/\n\tfunction withdrawExchangesToken() public {\n\t\t// check if time has reached\n\t\trequire(exchangesLockEndingAt <= getBlockTime());\n\t\t// ensure that tokens are not already transferred\n\t\trequire(exchangesStatus == false);\n\t\t\n\t\t// transfer tokens to wallet and change status to prevent double transfer\t\t\n\t\tbytes memory empty;\n\t\ttoken.transfer(exchangesWallet, exchangesTokens, empty);\n\t\texchangesStatus = true;\n\t}\n\n\t/**\n\t* @dev Method called by anyone to withdraw funds to countries wallet after locking period\n\t*/\n\tfunction withdrawCountriesToken() public {\n\t\t// check if time has reached\n\t\trequire(countriesLockEndingAt <= getBlockTime());\n\t\t// ensure that tokens are not already transferred\n\t\trequire(countriesStatus == false);\n\t\t\n\t\t// transfer tokens to wallet and change status to prevent double transfer\t\t\n\t\tbytes memory empty;\n\t\ttoken.transfer(countriesWallet, countriesTokens, empty);\n\t\tcountriesStatus = true;\n\t}\n\n\t/**\n\t* @dev Method called by anyone to withdraw funds to acquisitions wallet after locking period\n\t*/\n\tfunction withdrawAcquisitionsToken() public {\n\t\t// check if time has reached\n\t\trequire(acquisitionsLockEndingAt <= getBlockTime());\n\t\t// ensure that tokens are not already transferred\n\t\trequire(acquisitionsStatus == false);\n\t\t\n\t\t// transfer tokens to wallet and change status to prevent double transfer\t\t\n\t\tbytes memory empty;\n\t\ttoken.transfer(acquisitionsWallet, acquisitionsTokens, empty);\n\t\tacquisitionsStatus = true;\n\t}\n\n\t/**\n\t* @dev Method called by anyone to withdraw funds to coindrops wallet after locking period\n\t*/\n\tfunction withdrawCoindropsToken() public {\n\t\t// check if time has reached\n\t\trequire(coindropsLockEndingAt <= getBlockTime());\n\t\t// ensure that tokens are not already transferred\n\t\trequire(coindropsStatus == false);\n\t\t\n\t\t// transfer tokens to wallet and change status to prevent double transfer\t\t\n\t\tbytes memory empty;\n\t\ttoken.transfer(coindropsWallet, coindropsTokens, empty);\n\t\tcoindropsStatus = true;\n\t}\n\n\t/**\n\t* @dev Method called by owner of contract to withdraw all tokens after timeout has reached\n\t*/\n\tfunction withdraw() onlyOwner public {\n\t\trequire(contractTimeout <= getBlockTime());\n\t\t\n\t\t// send remaining tokens back to owner.\n\t\tuint256 tokens = token.balanceOf(this); \n\t\tbytes memory empty;\n\t\ttoken.transfer(owner, tokens, empty);\n\t}\n}\n\n\n/**\n* @title dHealthTokenSale\n* @dev This is ICO Contract. \n* This class accepts the token address as argument to talk with contract.\n* Once contract is deployed, funds are transferred to ICO smart contract address and then distributed with investor.\n* Sending funds to this ensures that no more than desired tokens are sold.\n*/\ncontract dHealthTokenSale is dHealthEtherDistributor, ERC223Receiver {\n\tusing SafeMath for uint256;\n\n\t// The token being sold, this holds reference to main token contract\n\tdHealthToken public token;\n\n\t// amount of token to be sold on sale\n\tuint256 public maxTokenForSale = 180000000 * 1E18;\n\n\t// timestamp when phase 1 starts\n\tuint256 public phase1StartingAt = 1516924800; // Friday, 26 January 2018 00:00:00\n\tuint256 public phase1EndingAt = 1518134399; // Thursday, 8 February 2018 23:59:59\n\tuint256 public phase1MaxTokenForSale = maxTokenForSale * 1 / 3;\n\tuint256 public phase1TokenPriceInEth = 0.0005 ether;\n\tuint256 public phase1TokenSold = 0;\n\n\t// timestamp when phase 2 starts\n\tuint256 public phase2StartingAt = 1518134400; // Friday, 9 February 2018 00:00:00\n\tuint256 public phase2EndingAt = 1519343999; // Thursday, 22 February 2018 23:59:59\n\tuint256 public phase2MaxTokenForSale = maxTokenForSale * 2 / 3;\n\tuint256 public phase2TokenPriceInEth = 0.000606060606 ether;\n\tuint256 public phase2TokenSold = 0;\n\n\t// timestamp when phase 3 starts\n\tuint256 public phase3StartingAt = 1519344000; // Friday, 23 February 2018 00:00:00\n\tuint256 public phase3EndingAt = 1520553599; // Thursday, 8 March 2018 23:59:59\n\tuint256 public phase3MaxTokenForSale = maxTokenForSale;\n\tuint256 public phase3TokenPriceInEth = 0.000769230769 ether;\n\tuint256 public phase3TokenSold = 0;\n\n\t// contract timeout to initiate left funds and token transfer\n\tuint256 public contractTimeout = 1520553600; // Friday, 9 March 2018 00:00:00\n\n\t// growth contract address\n\taddress public growthContract;\n\n\t// maximum ether invested per transaction\n\tuint256 public maxEthPerTransaction = 1000 ether;\n\n\t// minimum ether invested per transaction\n\tuint256 public minEthPerTransaction = 0.01 ether;\n\n\t// amount of token sold so far\n\tuint256 public totalTokenSold;\n\n\t// amount of ether raised in sale\n\tuint256 public totalEtherRaised;\n\n\t// ether raised per wallet\n\tmapping(address => uint256) public etherRaisedPerWallet;\n\n\t// is contract close and ended\n\tbool public isClose = false;\n\n\t// is contract paused\n\tbool public isPaused = false;\n\n\t// token purchsae event\n\tevent TokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount, uint256 _timestamp);\n\n\t// manual transfer by admin for external purchase\n\tevent TransferManual(address indexed _from, address indexed _to, uint256 _value, string _message);\n\n\t/**\n\t* @dev Constructor that initializes token contract with token address in parameter\n\t*/\n\tfunction dHealthTokenSale(address _token, address _projectContract, address _technologyContract, address _founderContract, address _growthContract)\n\t\tdHealthEtherDistributor(_projectContract, _technologyContract, _founderContract)\n\t\tpublic {\n\t\t// set token\n\t\ttoken = dHealthToken(_token);\n\n\t\t// set growth contract address\n\t\tgrowthContract = _growthContract;\n\t}\n\n\t/**\n\t * @dev Function that validates if the purchase is valid by verifying the parameters\n\t *\n\t * @param value Amount of ethers sent\n\t * @param amount Total number of tokens user is trying to buy.\n\t *\n\t * @return checks various conditions and returns the bool result indicating validity.\n\t */\n\tfunction validate(uint256 value, uint256 amount) internal constant returns (bool) {\n\t\t// check if timestamp and amount is falling in the range\n\t\tbool validTimestamp = false;\n\t\tbool validAmount = false;\n\n\t\t// check if phase 1 is running\t\n\t\tif(phase1StartingAt <= getBlockTime() && getBlockTime() <= phase1EndingAt) {\n\t\t\t// check if tokens is falling in timerange\n\t\t\tvalidTimestamp = true;\n\n\t\t\t// check if token amount is falling in limit\n\t\t\tvalidAmount = phase1MaxTokenForSale.sub(totalTokenSold) >= amount;\n\t\t}\n\n\t\t// check if phase 2 is running\t\n\t\tif(phase2StartingAt <= getBlockTime() && getBlockTime() <= phase2EndingAt) {\n\t\t\t// check if tokens is falling in timerange\n\t\t\tvalidTimestamp = true;\n\n\t\t\t// check if token amount is falling in limit\n\t\t\tvalidAmount = phase2MaxTokenForSale.sub(totalTokenSold) >= amount;\n\t\t}\n\n\t\t// check if phase 3 is running\t\n\t\tif(phase3StartingAt <= getBlockTime() && getBlockTime() <= phase3EndingAt) {\n\t\t\t// check if tokens is falling in timerange\n\t\t\tvalidTimestamp = true;\n\n\t\t\t// check if token amount is falling in limit\n\t\t\tvalidAmount = phase3MaxTokenForSale.sub(totalTokenSold) >= amount;\n\t\t}\n\n\t\t// check if value of the ether is valid\n\t\tbool validValue = value != 0;\n\n\t\t// check if the tokens available in contract for sale\n\t\tbool validToken = amount != 0;\n\n\t\t// validate if all conditions are met\n\t\treturn validTimestamp && validAmount && validValue && validToken && !isClose && !isPaused;\n\t}\n\n\tfunction calculate(uint256 value) internal constant returns (uint256) {\n\t\tuint256 amount = 0;\n\t\t\t\n\t\t// check if phase 1 is running\t\n\t\tif(phase1StartingAt <= getBlockTime() && getBlockTime() <= phase1EndingAt) {\n\t\t\t// calculate the amount of tokens\n\t\t\tamount = value.mul(1E18).div(phase1TokenPriceInEth);\n\t\t}\n\n\t\t// check if phase 2 is running\t\n\t\tif(phase2StartingAt <= getBlockTime() && getBlockTime() <= phase2EndingAt) {\n\t\t\t// calculate the amount of tokens\n\t\t\tamount = value.mul(1E18).div(phase2TokenPriceInEth);\n\t\t}\n\n\t\t// check if phase 3 is running\t\n\t\tif(phase3StartingAt <= getBlockTime() && getBlockTime() <= phase3EndingAt) {\n\t\t\t// calculate the amount of tokens\n\t\t\tamount = value.mul(1E18).div(phase3TokenPriceInEth);\n\t\t}\n\n\t\treturn amount;\n\t}\n\n\tfunction update(uint256 value, uint256 amount) internal returns (bool) {\n\n\t\t// update the state to log the sold tokens and raised ethers.\n\t\ttotalTokenSold = totalTokenSold.add(amount);\n\t\ttotalEtherRaised = totalEtherRaised.add(value);\n\t\tetherRaisedPerWallet[msg.sender] = etherRaisedPerWallet[msg.sender].add(value);\n\n\t\t// check if phase 1 is running\t\n\t\tif(phase1StartingAt <= getBlockTime() && getBlockTime() <= phase1EndingAt) {\n\t\t\t// add tokens to phase1 counts\n\t\t\tphase1TokenSold = phase1TokenSold.add(amount);\n\t\t}\n\n\t\t// check if phase 2 is running\t\n\t\tif(phase2StartingAt <= getBlockTime() && getBlockTime() <= phase2EndingAt) {\n\t\t\t// add tokens to phase2 counts\n\t\t\tphase2TokenSold = phase2TokenSold.add(amount);\n\t\t}\n\n\t\t// check if phase 3 is running\t\n\t\tif(phase3StartingAt <= getBlockTime() && getBlockTime() <= phase3EndingAt) {\n\t\t\t// add tokens to phase3 counts\n\t\t\tphase3TokenSold = phase3TokenSold.add(amount);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Default fallback method which will be called when any ethers are sent to contract\n\t */\n\tfunction() public payable {\n\t\tbuy(msg.sender);\n\t}\n\n\t/**\n\t * @dev Function that is called either externally or by default payable method\n\t *\n\t * @param beneficiary who should receive tokens\n\t */\n\tfunction buy(address beneficiary) public payable {\n\t\trequire(beneficiary != address(0));\n\n\t\t// amount of ethers sent\n\t\tuint256 value = msg.value;\n\n\t\t// throw error if not enough ethers sent\n\t\trequire(value >= minEthPerTransaction);\n\n\t\t// refund the extra ethers if sent more than allowed\n\t\tif(value > maxEthPerTransaction) {\n\t\t\t// more ethers are sent so refund extra\n\t\t\tmsg.sender.transfer(value.sub(maxEthPerTransaction));\n\t\t\tvalue = maxEthPerTransaction;\n\t\t}\n\t\t\n\t\t// calculate tokens\n\t\tuint256 tokens = calculate(value);\n\n\t\t// validate the purchase\n\t\trequire(validate(value , tokens));\n\n\t\t// update current state \n\t\tupdate(value , tokens);\n\t\t\n\t\t// transfer tokens from contract balance to beneficiary account. calling ERC223 method\n\t\tbytes memory empty;\n\t\ttoken.transfer(beneficiary, tokens, empty);\n\t\t\n\t\t// log event for token purchase\n\t\tTokenPurchase(msg.sender, beneficiary, value, tokens, now);\n\t}\n\n\t/**\n\t* @dev transmit token for a specified address. \n\t* This is owner only method and should be called using web3.js if someone is trying to buy token using bitcoin or any other altcoin.\n\t* \n\t* @param _to The address to transmit to.\n\t* @param _value The amount to be transferred.\n\t* @param _message message to log after transfer.\n\t*/\n\tfunction transferManual(address _to, uint256 _value, string _message) onlyOwner public returns (bool) {\n\t\trequire(_to != address(0));\n\n\t\t// transfer tokens manually from contract balance\n\t\ttoken.transfer(_to , _value);\n\t\tTransferManual(msg.sender, _to, _value, _message);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev sendToGrowthContract  \n\t* This will send remaining tokens to growth contract\n\t*/\t\n\tfunction sendToGrowthContract() onlyOwner public {\n\t\trequire(contractTimeout <= getBlockTime());\n\n\t\t// send remaining tokens to growth contract.\n\t\tuint256 tokens = token.balanceOf(this); \n\t\tbytes memory empty;\n\t\ttoken.transfer(growthContract, tokens, empty);\n\t}\n\n\t/**\n\t* @dev sendToVestingContract  \n\t* This will transfer any available ethers to vesting contracts\n\t*/\t\n\tfunction sendToVestingContract() onlyOwner public {\n\t\t// distribute funds \n\t\tdistribute();\n\t}\n\n\t/**\n\t* @dev withdraw funds and tokens \n\t* This will send remaining token balance to growth contract\n\t* This will distribute available funds across team members\n\t*/\t\n\tfunction withdraw() onlyOwner public {\n\t\trequire(contractTimeout <= getBlockTime());\n\n\t\t// send remaining tokens to growth contract.\n\t\tuint256 tokens = token.balanceOf(this); \n\t\tbytes memory empty;\n\t\ttoken.transfer(growthContract, tokens, empty);\n\n\t\t// distribute funds \n\t\tdistribute();\n\t}\n\n\t/**\n\t* @dev close contract \n\t* This will mark contract as closed\n\t*/\t\n\tfunction close() onlyOwner public {\n\t\t// mark the flag to indicate closure of the contract\n\t\tisClose = true;\n\t}\n\n\t/**\n\t* @dev pause contract \n\t* This will mark contract as paused\n\t*/\t\n\tfunction pause() onlyOwner public {\n\t\t// mark the flag to indicate pause of the contract\n\t\tisPaused = true;\n\t}\n\n\t/**\n\t* @dev resume contract \n\t* This will mark contract as resumed\n\t*/\t\n\tfunction resume() onlyOwner public {\n\t\t// mark the flag to indicate resume of the contract\n\t\tisPaused = false;\n\t}\n}\n\n/**\n* @title dHealthEtherVesting\n* @dev This is vesting contract it receives funds and those are used to release funds to fixed address\n*/\ncontract dHealthEtherVesting is Ownable, Timestamped {\n\tusing SafeMath for uint256;\n\n\t// wallet address which will receive funds on pay\n\taddress public wallet;\n\n\t// timestamp when vesting contract starts, this timestamp matches with sale contract\n\tuint256 public startingAt = 1516924800; // Friday, 26 January 2018 00:00:00\n\n\t// timestamp when vesting ends\n\tuint256 public endingAt = startingAt + 540 days;\n\n\t// how many % of ethers to vest on each call\n\tuint256 public vestingAmount = 20;\n\n\t// timestamp when vesting starts\n\tuint256 public vestingPeriodLength = 30 days;\n\n\t// time after which owner can withdraw all available funds\n\tuint256 public contractTimeout = startingAt + 2 years;\n\n\t// mapping that defines vesting structure\n\tstruct VestingStruct {\n\t\tuint256 period; \n\t\tbool status;\n\t\taddress wallet;\n\t\tuint256 amount;\n\t\tuint256 timestamp;\n\t}\n\n\t// vesting that tracks vestings done against the period.\n\tmapping (uint256 => VestingStruct) public vestings;\n\n\t// Event to log whenever the payment is done\n\tevent Payouts(uint256 indexed period, bool status, address wallet, uint256 amount, uint256 timestamp);\n\n\t/**\n\t* @dev Constructor that does nothing \n\t*/\n\tfunction dHealthEtherVesting(address _wallet) public {\n\t\twallet = _wallet;\n\t}\n\n\t/**\n\t* @dev default payable method to receive funds\n\t*/\n\tfunction() public payable {\n\t\t\n\t}\n\n\t/**\n\t* @dev Method called by owner of contract to withdraw funds\n\t*/\n\tfunction pay(uint256 percentage) public payable {\n\t\t// requested amount should always be less than vestingAmount variable\n\t\tpercentage = percentage <= vestingAmount ? percentage : vestingAmount;\n\n\t\t// calculate amount allowed\n\t\tvar (period, amount) = calculate(getBlockTime() , this.balance , percentage);\n\n\t\t// payment should not be done if period is zero\n\t\trequire(period > 0);\n\t\t// payment should not be done already\n\t\trequire(vestings[period].status == false);\n\t\t// wallet should not be set already.\n\t\trequire(vestings[period].wallet == address(0));\n\t\t// there should be amount to pay\n\t\trequire(amount > 0);\n\n\t\t// set period for storage\n\t\tvestings[period].period = period;\n\t\t// set status to avoid double payment\n\t\tvestings[period].status = true;\n\t\t// set wallet to track where payment was sent\n\t\tvestings[period].wallet = wallet;\n\t\t// set wallet to track how much amount sent\n\t\tvestings[period].amount = amount;\n\t\t// set timestamp of payment\n\t\tvestings[period].timestamp = getBlockTime();\n\n\t\t// transfer amount to wallet address\n\t\twallet.transfer(amount);\n\n\t\t// log event\n\t\tPayouts(period, vestings[period].status, vestings[period].wallet, vestings[period].amount, vestings[period].timestamp);\n\t}\n\n\t/**\n\t* @dev Internal method called to current vesting period\n\t*/\n\tfunction getPeriod(uint256 timestamp) public view returns (uint256) {\n\t\tfor(uint256 i = 1 ; i <= 18 ; i ++) {\n\t\t\t// calculate timestamp range\n\t\t\tuint256 startTime = startingAt + (vestingPeriodLength * (i - 1));\n\t\t\tuint256 endTime = startingAt + (vestingPeriodLength * (i));\n\n\t\t\tif(startTime <= timestamp && timestamp < endTime) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\t// calculate timestamp of last period\n\t\tuint256 lastEndTime = startingAt + (vestingPeriodLength * (18));\n\t\tif(lastEndTime <= timestamp) {\n\t\t\treturn 18;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t/**\n\t* @dev Internal method called to current vesting period range\n\t*/\n\tfunction getPeriodRange(uint256 timestamp) public view returns (uint256 , uint256) {\n\t\tfor(uint256 i = 1 ; i <= 18 ; i ++) {\n\t\t\t// calculate timestamp range\n\t\t\tuint256 startTime = startingAt + (vestingPeriodLength * (i - 1));\n\t\t\tuint256 endTime = startingAt + (vestingPeriodLength * (i));\n\n\t\t\tif(startTime <= timestamp && timestamp < endTime) {\n\t\t\t\treturn (startTime , endTime);\n\t\t\t}\n\t\t}\n\n\t\t// calculate timestamp of last period\n\t\tuint256 lastStartTime = startingAt + (vestingPeriodLength * (17));\n\t\tuint256 lastEndTime = startingAt + (vestingPeriodLength * (18));\n\t\tif(lastEndTime <= timestamp) {\n\t\t\treturn (lastStartTime , lastEndTime);\n\t\t}\n\n\t\treturn (0 , 0);\n\t}\n\n\t/**\n\t* @dev Internal method called to calculate withdrawal amount\n\t*/\n\tfunction calculate(uint256 timestamp, uint256 balance , uint256 percentage) public view returns (uint256 , uint256) {\n\t\t// find out current vesting period\n\t\tuint256 period = getPeriod(timestamp);\n\t\tif(period == 0) {\n\t\t\t// if period is not found then return zero;\n\t\t\treturn (0 , 0);\n\t\t}\n\n\t\t// get vesting object for period\n\t\tVestingStruct memory vesting = vestings[period];\t\n\t\t\n\t\t// check if payment is already done\n\t\tif(vesting.status == false) {\n\t\t\t// payment is not done yet\n\t\t\tuint256 amount;\n\n\t\t\t// if it is last month then send all remaining balance\n\t\t\tif(period == 18) {\n\t\t\t\t// send all\n\t\t\t\tamount = balance;\n\t\t\t} else {\n\t\t\t\t// calculate percentage and send\n\t\t\t\tamount = balance.mul(percentage).div(100);\n\t\t\t}\n\t\t\t\n\t\t\treturn (period, amount);\n\t\t} else {\n\t\t\t// payment is already done \n\t\t\treturn (period, 0);\n\t\t}\t\t\n\t}\n\n\t/**\n\t* @dev Method called by owner to change the wallet address\n\t*/\n\tfunction setWallet(address _wallet) onlyOwner public {\n\t\twallet = _wallet;\n\t}\n\n\t/**\n\t* @dev Method called by owner of contract to withdraw funds after timeout has reached\n\t*/\n\tfunction withdraw() onlyOwner public payable {\n\t\trequire(contractTimeout <= getBlockTime());\n\t\towner.transfer(this.balance);\n\t}\t\n}\n\n\n/**\n* @title dHealthTokenVesting\n* @dev This is vesting contract it receives tokens and those are used to release tokens to fixed address\n*/\ncontract dHealthTokenVesting is Ownable, Timestamped {\n\tusing SafeMath for uint256;\n\n\t// The token being sold, this holds reference to main token contract\n\tdHealthToken public token;\n\n\t// wallet address which will receive tokens on pay\n\taddress public wallet;\n\n\t// amount of token to be hold\n\tuint256 public maxTokenForHold;\n\n\t// timestamp when vesting contract starts, this timestamp matches with sale contract\n\tuint256 public startingAt = 1522281600; // Thursday, 29 March 2018 00:00:00\n\n\t// timestamp when vesting ends\n\tuint256 public endingAt = startingAt + 540 days;\n\n\t// how many % of ethers to vest on each call\n\tuint256 public vestingAmount = 20;\n\n\t// timestamp when vesting starts\n\tuint256 public vestingPeriodLength = 30 days;\n\n\t// time after which owner can withdraw all available funds\n\tuint256 public contractTimeout = startingAt + 2 years;\n\n\t// mapping that defines vesting structure\n\tstruct VestingStruct {\n\t\tuint256 period; \n\t\tbool status;\n\t\taddress wallet;\n\t\tuint256 amount;\n\t\tuint256 timestamp;\n\t}\n\n\t// vesting that tracks vestings done against the period.\n\tmapping (uint256 => VestingStruct) public vestings;\n\n\t// Event to log whenever the payment is done\n\tevent Payouts(uint256 indexed period, bool status, address wallet, uint256 amount, uint256 timestamp);\n\n\t/**\n\t* @dev Constructor that initializes token contract with token address in parameter\n\t*/\n\tfunction dHealthTokenVesting(address _token, address _wallet, uint256 _maxTokenForHold, uint256 _startingAt) public {\n\t\t// set token\n\t\ttoken = dHealthToken(_token);\n\n\t\t// set wallet address\n\t\twallet = _wallet;\n\n\t\t// set parameter specific to contract\n\t\tmaxTokenForHold = _maxTokenForHold;\t\n\t\t\n\t\t// setup timestamp\n\t\tstartingAt = _startingAt;\n\t\tendingAt = startingAt + 540 days;\n\t}\n\n\t/**\n\t* @dev default payable method to receive funds\n\t*/\n\tfunction() public payable {\n\t\t\n\t}\n\n\t/**\n\t* @dev Method called by owner of contract to withdraw funds\n\t*/\n\tfunction pay(uint256 percentage) public {\n\t\t// requested amount should always be less than vestingAmount variable\n\t\tpercentage = percentage <= vestingAmount ? percentage : vestingAmount;\n\n\t\t// get current token balance\n\t\tuint256 balance = token.balanceOf(this); \n\t\t\n\t\t// calculate amount allowed\n\t\tvar (period, amount) = calculate(getBlockTime() , balance , percentage);\n\n\t\t// payment should not be done if period is zero\n\t\trequire(period > 0);\n\t\t// payment should not be done already\n\t\trequire(vestings[period].status == false);\n\t\t// wallet should not be set already.\n\t\trequire(vestings[period].wallet == address(0));\n\t\t// there should be amount to pay\n\t\trequire(amount > 0);\n\n\t\t// set period for storage\n\t\tvestings[period].period = period;\n\t\t// set status to avoid double payment\n\t\tvestings[period].status = true;\n\t\t// set wallet to track where payment was sent\n\t\tvestings[period].wallet = wallet;\n\t\t// set wallet to track how much amount sent\n\t\tvestings[period].amount = amount;\n\t\t// set timestamp of payment\n\t\tvestings[period].timestamp = getBlockTime();\n\n\t\t// transfer amount to wallet address\n\t\tbytes memory empty;\n\t\ttoken.transfer(wallet, amount, empty);\n\n\t\t// log event\n\t\tPayouts(period, vestings[period].status, vestings[period].wallet, vestings[period].amount, vestings[period].timestamp);\n\t}\n\n\t/**\n\t* @dev Internal method called to current vesting period\n\t*/\n\tfunction getPeriod(uint256 timestamp) public view returns (uint256) {\n\t\tfor(uint256 i = 1 ; i <= 18 ; i ++) {\n\t\t\t// calculate timestamp range\n\t\t\tuint256 startTime = startingAt + (vestingPeriodLength * (i - 1));\n\t\t\tuint256 endTime = startingAt + (vestingPeriodLength * (i));\n\n\t\t\tif(startTime <= timestamp && timestamp < endTime) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\t// calculate timestamp of last period\n\t\tuint256 lastEndTime = startingAt + (vestingPeriodLength * (18));\n\t\tif(lastEndTime <= timestamp) {\n\t\t\treturn 18;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t/**\n\t* @dev Internal method called to current vesting period range\n\t*/\n\tfunction getPeriodRange(uint256 timestamp) public view returns (uint256 , uint256) {\n\t\tfor(uint256 i = 1 ; i <= 18 ; i ++) {\n\t\t\t// calculate timestamp range\n\t\t\tuint256 startTime = startingAt + (vestingPeriodLength * (i - 1));\n\t\t\tuint256 endTime = startingAt + (vestingPeriodLength * (i));\n\n\t\t\tif(startTime <= timestamp && timestamp < endTime) {\n\t\t\t\treturn (startTime , endTime);\n\t\t\t}\n\t\t}\n\n\t\t// calculate timestamp of last period\n\t\tuint256 lastStartTime = startingAt + (vestingPeriodLength * (17));\n\t\tuint256 lastEndTime = startingAt + (vestingPeriodLength * (18));\n\t\tif(lastEndTime <= timestamp) {\n\t\t\treturn (lastStartTime , lastEndTime);\n\t\t}\n\n\t\treturn (0 , 0);\n\t}\n\n\t/**\n\t* @dev Internal method called to calculate withdrawal amount\n\t*/\n\tfunction calculate(uint256 timestamp, uint256 balance , uint256 percentage) public view returns (uint256 , uint256) {\n\t\t// find out current vesting period\n\t\tuint256 period = getPeriod(timestamp);\n\t\tif(period == 0) {\n\t\t\t// if period is not found then return zero;\n\t\t\treturn (0 , 0);\n\t\t}\n\n\t\t// get vesting object for period\n\t\tVestingStruct memory vesting = vestings[period];\t\n\t\t\n\t\t// check if payment is already done\n\t\tif(vesting.status == false) {\n\t\t\t// payment is not done yet\n\t\t\tuint256 amount;\n\n\t\t\t// if it is last month then send all remaining balance\n\t\t\tif(period == 18) {\n\t\t\t\t// send all\n\t\t\t\tamount = balance;\n\t\t\t} else {\n\t\t\t\t// calculate percentage and send\n\t\t\t\tamount = balance.mul(percentage).div(100);\n\t\t\t}\n\t\t\t\n\t\t\treturn (period, amount);\n\t\t} else {\n\t\t\t// payment is already done \n\t\t\treturn (period, 0);\n\t\t}\t\t\n\t}\n\n\t/**\n\t* @dev Method called by owner to change the wallet address\n\t*/\n\tfunction setWallet(address _wallet) onlyOwner public {\n\t\twallet = _wallet;\n\t}\n\n\t/**\n\t* @dev Method called by owner of contract to withdraw funds after timeout has reached\n\t*/\n\tfunction withdraw() onlyOwner public payable {\n\t\trequire(contractTimeout <= getBlockTime());\n\t\t\n\t\t// send remaining tokens back to owner.\n\t\tuint256 tokens = token.balanceOf(this); \n\t\tbytes memory empty;\n\t\ttoken.transfer(owner, tokens, empty);\n\t}\t\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b019d971e4fe8401e740000006001819055506b019d971e4fe8401e74000000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ef6806100c26000396000f3006060604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100e0578063095ea7b31461016e57806318160ddd146101c857806323b872dd146101f1578063313ce5671461026a578063661884631461029357806370a08231146102ed5780638da5cb5b1461033a57806395d89b411461038f578063a9059cbb1461041d578063be45fd6214610477578063d73dd62314610514578063dd62ed3e1461056e578063f2fde38b146105da578063f6368f8a14610613575b600080fd5b34156100eb57600080fd5b6100f36106f3565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610133578082015181840152602081019050610118565b50505050905090810190601f1680156101605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017957600080fd5b6101ae600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061072c565b604051808215151515815260200191505060405180910390f35b34156101d357600080fd5b6101db61081e565b6040518082815260200191505060405180910390f35b34156101fc57600080fd5b610250600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610824565b604051808215151515815260200191505060405180910390f35b341561027557600080fd5b61027d610c5a565b6040518082815260200191505060405180910390f35b341561029e57600080fd5b6102d3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c5f565b604051808215151515815260200191505060405180910390f35b34156102f857600080fd5b610324600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ef0565b6040518082815260200191505060405180910390f35b341561034557600080fd5b61034d610f39565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561039a57600080fd5b6103a2610f5f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103e25780820151818401526020810190506103c7565b50505050905090810190601f16801561040f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561042857600080fd5b61045d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f98565b604051808215151515815260200191505060405180910390f35b341561048257600080fd5b6104fa600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610fd7565b604051808215151515815260200191505060405180910390f35b341561051f57600080fd5b610554600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061100e565b604051808215151515815260200191505060405180910390f35b341561057957600080fd5b6105c4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061120a565b6040518082815260200191505060405180910390f35b34156105e557600080fd5b610611600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611291565b005b341561061e57600080fd5b6106d9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506113e9565b604051808215151515815260200191505060405180910390f35b6040805190810160405280600781526020017f644865616c74680000000000000000000000000000000000000000000000000081525081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60015481565b600061082e611eb6565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561086a57600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156108b857600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561094357600080fd5b61099583600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461181f90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a2a83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461183890919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610afc83600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461181f90919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685846040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610c13578082015181840152602081019050610bf8565b50505050905090810190601f168015610c405780820380516001836020036101000a031916815260200191505b50935050505060405180910390a360019150509392505050565b601281565b600080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610d70576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e04565b610d83838261181f90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f644874000000000000000000000000000000000000000000000000000000000081525081565b6000610fa2611eb6565b610fab84611856565b15610fc257610fbb848483611869565b9150610fd0565b610fcd848483611c24565b91505b5092915050565b6000610fe284611856565b15610ff957610ff2848484611869565b9050611007565b611004848484611c24565b90505b9392505050565b600061109f82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461183890919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112ed57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561132957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006113f485611856565b1561180957600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561143557600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841115151561148357600080fd5b6114d584600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461181f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061156a84600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461183890919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff166000836040518082805190602001908083835b6020831015156115fc57805182526020820191506020810190506020830392506115d7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207c01000000000000000000000000000000000000000000000000000000009004903387876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828051906020019080838360005b838110156116dd5780820151818401526020810190506116c2565b50505050905090810190601f16801561170a5780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185886187965a03f19350505050151561172e57fe5b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1686866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156117c55780820151818401526020810190506117aa565b50505050905090810190601f1680156117f25780820380516001836020036101000a031916815260200191505b50935050505060405180910390a360019050611817565b611814858585611c24565b90505b949350505050565b600082821115151561182d57fe5b818303905092915050565b600080828401905083811015151561184c57fe5b8091505092915050565b600080823b905060008111915050919050565b600080600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515156118a857600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484111515156118f657600080fd5b61194884600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461181f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119dd84600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461183890919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611ae5578082015181840152602081019050611aca565b50505050905090810190601f168015611b125780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515611b3257600080fd5b6102c65a03f11515611b4357600080fd5b5050508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1686866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611bdd578082015181840152602081019050611bc2565b50505050905090810190601f168015611c0a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a360019150509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515611c6157600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515611caf57600080fd5b611d0183600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461181f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d9683600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461183890919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611e70578082015181840152602081019050611e55565b50505050905090810190601f168015611e9d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3600190509392505050565b6020604051908101604052806000815250905600a165627a7a72305820a8eb347fcd24462fa58c8df25e82934d80ae9fc64c324c4858d27f4419e7b2a50029"
}