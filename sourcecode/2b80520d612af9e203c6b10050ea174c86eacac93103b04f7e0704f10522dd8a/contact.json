{
  "address": "0x989af9516c7466fff588121059c7f069a2f5bb49",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Fishbank: Auction 1",
  "contractName": "ERC721Auction",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-18\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\n\n\n\n\ncontract Beneficiary is Ownable {\n\n    address public beneficiary;\n\n    function Beneficiary() public {\n        beneficiary = msg.sender;\n    }\n\n    function setBeneficiary(address _beneficiary) onlyOwner public {\n        beneficiary = _beneficiary;\n    }\n\n\n}\n\n\n/// @title Auction contract for any type of erc721 token\n/// @author Fishbank\n\ncontract ERC721 {\n\n    function implementsERC721() public pure returns (bool);\n\n    function totalSupply() public view returns (uint256 total);\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\n\n    function approve(address _to, uint256 _tokenId) public;\n\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool);\n\n    function transfer(address _to, uint256 _tokenId) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n}\n\n\ncontract ERC721Auction is Beneficiary {\n\n    struct Auction {\n        address seller;\n        uint256 tokenId;\n        uint64 auctionBegin;\n        uint64 auctionEnd;\n        uint256 startPrice;\n        uint256 endPrice;\n    }\n\n    uint32 public auctionDuration = 7 days;\n\n    ERC721 public ERC721Contract;\n    uint256 public fee = 45000; //in 1 10000th of a percent so 4.5% at the start\n    uint256 constant FEE_DIVIDER = 1000000;\n    mapping(uint256 => Auction) public auctions;\n\n    event AuctionWon(uint256 indexed tokenId, address indexed winner, address indexed seller, uint256 price);\n\n    event AuctionStarted(uint256 indexed tokenId, address indexed seller);\n\n    event AuctionFinalized(uint256 indexed tokenId, address indexed seller);\n\n\n    function startAuction(uint256 _tokenId, uint256 _startPrice, uint256 _endPrice) external {\n        require(ERC721Contract.transferFrom(msg.sender, address(this), _tokenId));\n        //Prices must be in range from 0.01 Eth and 10 000 Eth\n        require(_startPrice <= 10000 ether && _endPrice <= 10000 ether);\n        require(_startPrice >= (1 ether / 100) && _endPrice >= (1 ether / 100));\n\n        Auction memory auction;\n\n        auction.seller = msg.sender;\n        auction.tokenId = _tokenId;\n        auction.auctionBegin = uint64(now);\n        auction.auctionEnd = uint64(now + auctionDuration);\n        require(auction.auctionEnd > auction.auctionBegin);\n        auction.startPrice = _startPrice;\n        auction.endPrice = _endPrice;\n\n        auctions[_tokenId] = auction;\n\n        AuctionStarted(_tokenId, msg.sender);\n    }\n\n\n    function buyAuction(uint256 _tokenId) payable external {\n        Auction storage auction = auctions[_tokenId];\n\n        uint256 price = calculateBid(_tokenId);\n        uint256 totalFee = price * fee / FEE_DIVIDER; //safe math needed?\n\n        require(price <= msg.value); //revert if not enough ether send\n\n        if (price != msg.value) {//send back to much eth\n            msg.sender.transfer(msg.value - price);\n        }\n\n        beneficiary.transfer(totalFee);\n\n        auction.seller.transfer(price - totalFee);\n\n        if (!ERC721Contract.transfer(msg.sender, _tokenId)) {\n            revert();\n            //can't complete transfer if this fails\n        }\n\n        AuctionWon(_tokenId, msg.sender, auction.seller, price);\n\n        delete auctions[_tokenId];\n        //deletes auction\n    }\n\n    function saveToken(uint256 _tokenId) external {\n        require(auctions[_tokenId].auctionEnd < now);\n        //auction must have ended\n        require(ERC721Contract.transfer(auctions[_tokenId].seller, _tokenId));\n        //transfer fish back to seller\n\n        AuctionFinalized(_tokenId, auctions[_tokenId].seller);\n\n        delete auctions[_tokenId];\n        //delete auction\n    }\n\n    function ERC721Auction(address _ERC721Contract) public {\n        ERC721Contract = ERC721(_ERC721Contract);\n    }\n\n    function setFee(uint256 _fee) onlyOwner public {\n        if (_fee > fee) {\n            revert(); //fee can only be set to lower value to prevent attacks by owner\n        }\n        fee = _fee; // all is well set fee\n    }\n\n    function calculateBid(uint256 _tokenId) public view returns (uint256) {\n        Auction storage auction = auctions[_tokenId];\n\n        if (now >= auction.auctionEnd) {//if auction ended return auction end price\n            return auction.endPrice;\n        }\n        //get hours passed\n        uint256 hoursPassed = (now - auction.auctionBegin) / 1 hours;\n        uint256 currentPrice;\n        //get total hours\n        uint16 totalHours = uint16(auctionDuration /1 hours) - 1;\n\n        if (auction.endPrice > auction.startPrice) {\n            currentPrice = auction.startPrice + (hoursPassed * (auction.endPrice - auction.startPrice))/ totalHours;\n        } else if(auction.endPrice < auction.startPrice) {\n            currentPrice = auction.startPrice - (hoursPassed * (auction.startPrice - auction.endPrice))/ totalHours;\n        } else {//start and end are the same\n            currentPrice = auction.endPrice;\n        }\n\n        return uint256(currentPrice);\n        //return the price at this very moment\n    }\n\n    /// return token if case when need to redeploy auction contract\n    function returnToken(uint256 _tokenId) onlyOwner public {\n        require(ERC721Contract.transfer(auctions[_tokenId].seller, _tokenId));\n        //transfer fish back to seller\n\n        AuctionFinalized(_tokenId, auctions[_tokenId].seller);\n\n        delete auctions[_tokenId];\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"auctionDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"calculateBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC721Contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"auctionBegin\",\"type\":\"uint64\"},{\"name\":\"auctionEnd\",\"type\":\"uint64\"},{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"endPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"returnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"saveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ERC721Contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AuctionWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "606060405262093a80600160146101000a81548163ffffffff021916908363ffffffff16021790555061afc8600355341561003957600080fd5b60405160208061166283398101604052808051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061153b806101276000396000f3006060604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630cbf54c8146100d55780631c31f7101461010a5780632d4a170a1461014357806338af3eed1461017a578063397e953f146101cf578063571a26a0146102245780636178efee146102d25780636869b20e146102f557806369fe0e2d146103185780638da5cb5b1461033b57806391e078bb14610390578063ddca3f43146103c5578063f2fde38b146103ee578063fd8acc4214610427575b600080fd5b34156100e057600080fd5b6100e861043f565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b341561011557600080fd5b610141600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610455565b005b341561014e57600080fd5b61016460048080359060200190919050506104f4565b6040518082815260200191505060405180910390f35b341561018557600080fd5b61018d61062f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101da57600080fd5b6101e2610655565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561022f57600080fd5b610245600480803590602001909190505061067b565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018567ffffffffffffffff1667ffffffffffffffff1681526020018467ffffffffffffffff1667ffffffffffffffff168152602001838152602001828152602001965050505050505060405180910390f35b34156102dd57600080fd5b6102f360048080359060200190919050506106ff565b005b341561030057600080fd5b610316600480803590602001909190505061097e565b005b341561032357600080fd5b6103396004808035906020019091905050610be4565b005b341561034657600080fd5b61034e610c58565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561039b57600080fd5b6103c36004808035906020019091908035906020019091908035906020019091905050610c7d565b005b34156103d057600080fd5b6103d8610ff5565b6040518082815260200191505060405180910390f35b34156103f957600080fd5b610425600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ffb565b005b61043d6004808035906020019091905050611150565b005b600160149054906101000a900463ffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104b057600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008060006004600087815260200190815260200160002093508360020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16421015156105485783600401549450610626565b610e108460020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16420381151561057957fe5b0492506001610e10600160149054906101000a900463ffffffff1663ffffffff168115156105a357fe5b040390508360030154846004015411156105e0578061ffff16846003015485600401540384028115156105d257fe5b048460030154019150610622565b836003015484600401541015610619578061ffff168460040154856003015403840281151561060b57fe5b048460030154039150610621565b836004015491505b5b8194505b50505050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900467ffffffffffffffff16908060020160089054906101000a900467ffffffffffffffff16908060030154908060040154905086565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561075a57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6004600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561085457600080fd5b5af1151561086157600080fd5b50505060405180519050151561087657600080fd5b6004600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16817f95b73f79c6d7b09d4dd9a323589aec50a424621f53a70ece1cc21aa75554b51960405160405180910390a360046000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549067ffffffffffffffff02191690556002820160086101000a81549067ffffffffffffffff021916905560038201600090556004820160009055505050565b426004600083815260200190815260200160002060020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff161015156109c057600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6004600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610aba57600080fd5b5af11515610ac757600080fd5b505050604051805190501515610adc57600080fd5b6004600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16817f95b73f79c6d7b09d4dd9a323589aec50a424621f53a70ece1cc21aa75554b51960405160405180910390a360046000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549067ffffffffffffffff02191690556002820160086101000a81549067ffffffffffffffff021916905560038201600090556004820160009055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c3f57600080fd5b600354811115610c4e57600080fd5b8060038190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c856114ae565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1515610d7d57600080fd5b5af11515610d8a57600080fd5b505050604051805190501515610d9f57600080fd5b69021e19e0c9bab24000008311158015610dc3575069021e19e0c9bab24000008211155b1515610dce57600080fd5b662386f26fc100008310158015610dec5750662386f26fc100008210155b1515610df757600080fd5b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505042816040019067ffffffffffffffff16908167ffffffffffffffff1681525050600160149054906101000a900463ffffffff1663ffffffff164201816060019067ffffffffffffffff16908167ffffffffffffffff1681525050806040015167ffffffffffffffff16816060015167ffffffffffffffff16111515610ebd57600080fd5b82816080018181525050818160a0018181525050806004600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506080820151816003015560a082015181600401559050503373ffffffffffffffffffffffffffffffffffffffff16847f16da476d7265fc95576888b93de4fa4849d6cea1228235887f569c6530ddfec160405160405180910390a350505050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561105657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561109257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000600460008581526020019081526020016000209250611173846104f4565b9150620f4240600354830281151561118757fe5b04905034821115151561119957600080fd5b34821415156111e5573373ffffffffffffffffffffffffffffffffffffffff166108fc8334039081150290604051600060405180830381858888f1935050505015156111e457600080fd5b5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561124757600080fd5b8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8284039081150290604051600060405180830381858888f1935050505015156112ad57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561137157600080fd5b5af1151561137e57600080fd5b50505060405180519050151561139357600080fd5b8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16857ff45ffe0927ae1075e8fee946af81e958054939cefc6c6c643f7e01b1fe47688e856040518082815260200191505060405180910390a460046000858152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549067ffffffffffffffff02191690556002820160086101000a81549067ffffffffffffffff021916905560038201600090556004820160009055505050505050565b60c060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600081526020016000815250905600a165627a7a723058200df057af1ecedd8ced4f6da5abbfaadfa918b10c26fcec39382e7245a83b95cf0029000000000000000000000000a98ad92a642570b83b369c4eb70efefe638bc895",
  "constructorArguments": "000000000000000000000000a98ad92a642570b83b369c4eb70efefe638bc895"
}