{
  "address": "0x71f37730abe7da0a69886caf0e4b6702940d95b6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Deed",
  "compilerVersion": "v0.4.10+commit.f0d539ae",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-05-17\n*/\n\npragma solidity ^0.4.0;\n\n\n/*\n\nTemporary Hash Registrar\n========================\n\nThis is a simplified version of a hash registrar. It is purporsefully limited:\nnames cannot be six letters or shorter, new auctions will stop after 4 years.\n\nThe plan is to test the basic features and then move to a new contract in at most\n2 years, when some sort of renewal mechanism will be enabled.\n*/\n\ncontract AbstractENS {\n    function owner(bytes32 node) constant returns(address);\n    function resolver(bytes32 node) constant returns(address);\n    function ttl(bytes32 node) constant returns(uint64);\n    function setOwner(bytes32 node, address owner);\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\n    function setResolver(bytes32 node, address resolver);\n    function setTTL(bytes32 node, uint64 ttl);\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n}\n\n/**\n * @title Deed to hold ether in exchange for ownership of a node\n * @dev The deed can be controlled only by the registrar and can only send ether back to the owner.\n */\ncontract Deed {\n    address public registrar;\n    address constant burn = 0xdead;\n    uint public creationDate;\n    address public owner;\n    address public previousOwner;\n    uint public value;\n    event OwnerChanged(address newOwner);\n    event DeedClosed();\n    bool active;\n\n\n    modifier onlyRegistrar {\n        if (msg.sender != registrar) throw;\n        _;\n    }\n\n    modifier onlyActive {\n        if (!active) throw;\n        _;\n    }\n\n    function Deed(address _owner) payable {\n        owner = _owner;\n        registrar = msg.sender;\n        creationDate = now;\n        active = true;\n        value = msg.value;\n    }\n\n    function setOwner(address newOwner) onlyRegistrar {\n        if (newOwner == 0) throw;\n        previousOwner = owner;  // This allows contracts to check who sent them the ownership\n        owner = newOwner;\n        OwnerChanged(newOwner);\n    }\n\n    function setRegistrar(address newRegistrar) onlyRegistrar {\n        registrar = newRegistrar;\n    }\n\n    function setBalance(uint newValue, bool throwOnFailure) onlyRegistrar onlyActive {\n        // Check if it has enough balance to set the value\n        if (value < newValue) throw;\n        value = newValue;\n        // Send the difference to the owner\n        if (!owner.send(this.balance - newValue) && throwOnFailure) throw;\n    }\n\n    /**\n     * @dev Close a deed and refund a specified fraction of the bid value\n     * @param refundRatio The amount*1/1000 to refund\n     */\n    function closeDeed(uint refundRatio) onlyRegistrar onlyActive {\n        active = false;\n        if (! burn.send(((1000 - refundRatio) * this.balance)/1000)) throw;\n        DeedClosed();\n        destroyDeed();\n    }\n\n    /**\n     * @dev Close a deed and refund a specified fraction of the bid value\n     */\n    function destroyDeed() {\n        if (active) throw;\n        \n        // Instead of selfdestruct(owner), invoke owner fallback function to allow\n        // owner to log an event if desired; but owner should also be aware that\n        // its fallback function can also be invoked by setBalance\n        if(owner.send(this.balance)) {\n            selfdestruct(burn);\n        }\n    }\n}\n\n/**\n * @title Registrar\n * @dev The registrar handles the auction process for each subnode of the node it owns.\n */\ncontract Registrar {\n    AbstractENS public ens;\n    bytes32 public rootNode;\n\n    mapping (bytes32 => entry) _entries;\n    mapping (address => mapping(bytes32 => Deed)) public sealedBids;\n    \n    enum Mode { Open, Auction, Owned, Forbidden, Reveal, NotYetAvailable }\n\n    uint32 constant totalAuctionLength = 5 days;\n    uint32 constant revealPeriod = 48 hours;\n    uint32 public constant launchLength = 8 weeks;\n\n    uint constant minPrice = 0.01 ether;\n    uint public registryStarted;\n\n    event AuctionStarted(bytes32 indexed hash, uint registrationDate);\n    event NewBid(bytes32 indexed hash, address indexed bidder, uint deposit);\n    event BidRevealed(bytes32 indexed hash, address indexed owner, uint value, uint8 status);\n    event HashRegistered(bytes32 indexed hash, address indexed owner, uint value, uint registrationDate);\n    event HashReleased(bytes32 indexed hash, uint value);\n    event HashInvalidated(bytes32 indexed hash, string indexed name, uint value, uint registrationDate);\n\n    struct entry {\n        Deed deed;\n        uint registrationDate;\n        uint value;\n        uint highestBid;\n    }\n\n    // State transitions for names:\n    //   Open -> Auction (startAuction)\n    //   Auction -> Reveal\n    //   Reveal -> Owned\n    //   Reveal -> Open (if nobody bid)\n    //   Owned -> Open (releaseDeed or invalidateName)\n    function state(bytes32 _hash) constant returns (Mode) {\n        var entry = _entries[_hash];\n        \n        if(!isAllowed(_hash, now)) {\n            return Mode.NotYetAvailable;\n        } else if(now < entry.registrationDate) {\n            if (now < entry.registrationDate - revealPeriod) {\n                return Mode.Auction;\n            } else {\n                return Mode.Reveal;\n            }\n        } else {\n            if(entry.highestBid == 0) {\n                return Mode.Open;\n            } else {\n                return Mode.Owned;\n            }\n        }\n    }\n\n    modifier inState(bytes32 _hash, Mode _state) {\n        if(state(_hash) != _state) throw;\n        _;\n    }\n\n    modifier onlyOwner(bytes32 _hash) {\n        if (state(_hash) != Mode.Owned || msg.sender != _entries[_hash].deed.owner()) throw;\n        _;\n    }\n\n    modifier registryOpen() {\n        if(now < registryStarted  || now > registryStarted + 4 years || ens.owner(rootNode) != address(this)) throw;\n        _;\n    }\n\n    function entries(bytes32 _hash) constant returns (Mode, address, uint, uint, uint) {\n        entry h = _entries[_hash];\n        return (state(_hash), h.deed, h.registrationDate, h.value, h.highestBid);\n    }\n\n    /**\n     * @dev Constructs a new Registrar, with the provided address as the owner of the root node.\n     * @param _ens The address of the ENS\n     * @param _rootNode The hash of the rootnode.\n     */\n    function Registrar(AbstractENS _ens, bytes32 _rootNode, uint _startDate) {\n        ens = _ens;\n        rootNode = _rootNode;\n        registryStarted = _startDate > 0 ? _startDate : now;\n    }\n\n    /**\n     * @dev Returns the maximum of two unsigned integers\n     * @param a A number to compare\n     * @param b A number to compare\n     * @return The maximum of two unsigned integers\n     */\n    function max(uint a, uint b) internal constant returns (uint max) {\n        if (a > b)\n            return a;\n        else\n            return b;\n    }\n\n    /**\n     * @dev Returns the minimum of two unsigned integers\n     * @param a A number to compare\n     * @param b A number to compare\n     * @return The minimum of two unsigned integers\n     */\n    function min(uint a, uint b) internal constant returns (uint min) {\n        if (a < b)\n            return a;\n        else\n            return b;\n    }\n\n    /**\n     * @dev Returns the length of a given string\n     * @param s The string to measure the length of\n     * @return The length of the input string\n     */\n    function strlen(string s) internal constant returns (uint) {\n        // Starting here means the LSB will be the byte we care about\n        uint ptr;\n        uint end;\n        assembly {\n            ptr := add(s, 1)\n            end := add(mload(s), ptr)\n        }\n        for (uint len = 0; ptr < end; len++) {\n            uint8 b;\n            assembly { b := and(mload(ptr), 0xFF) }\n            if (b < 0x80) {\n                ptr += 1;\n            } else if(b < 0xE0) {\n                ptr += 2;\n            } else if(b < 0xF0) {\n                ptr += 3;\n            } else if(b < 0xF8) {\n                ptr += 4;\n            } else if(b < 0xFC) {\n                ptr += 5;\n            } else {\n                ptr += 6;\n            }\n        }\n        return len;\n    }\n    \n    /** \n     * @dev Determines if a name is available for registration yet\n     * \n     * Each name will be assigned a random date in which its auction \n     * can be started, from 0 to 13 weeks\n     * \n     * @param _hash The hash to start an auction on\n     * @param _timestamp The timestamp to query about\n     */\n     \n    function isAllowed(bytes32 _hash, uint _timestamp) constant returns (bool allowed){\n        return _timestamp > getAllowedTime(_hash);\n    }\n\n    /** \n     * @dev Returns available date for hash\n     * \n     * @param _hash The hash to start an auction on\n     */\n    function getAllowedTime(bytes32 _hash) constant returns (uint timestamp) {\n        return registryStarted + (launchLength*(uint(_hash)>>128)>>128);\n        // right shift operator: a >> b == a / 2**b\n    }\n    /**\n     * @dev Assign the owner in ENS, if we're still the registrar\n     * @param _hash hash to change owner\n     * @param _newOwner new owner to transfer to\n     */\n    function trySetSubnodeOwner(bytes32 _hash, address _newOwner) internal {\n        if(ens.owner(rootNode) == address(this))\n            ens.setSubnodeOwner(rootNode, _hash, _newOwner);        \n    }\n\n    /**\n     * @dev Start an auction for an available hash\n     *\n     * Anyone can start an auction by sending an array of hashes that they want to bid for.\n     * Arrays are sent so that someone can open up an auction for X dummy hashes when they\n     * are only really interested in bidding for one. This will increase the cost for an\n     * attacker to simply bid blindly on all new auctions. Dummy auctions that are\n     * open but not bid on are closed after a week.\n     *\n     * @param _hash The hash to start an auction on\n     */\n    function startAuction(bytes32 _hash) registryOpen() {\n        var mode = state(_hash);\n        if(mode == Mode.Auction) return;\n        if(mode != Mode.Open) throw;\n\n        entry newAuction = _entries[_hash];\n        newAuction.registrationDate = now + totalAuctionLength;\n        newAuction.value = 0;\n        newAuction.highestBid = 0;\n        AuctionStarted(_hash, newAuction.registrationDate);\n    }\n\n    /**\n     * @dev Start multiple auctions for better anonymity\n     * @param _hashes An array of hashes, at least one of which you presumably want to bid on\n     */\n    function startAuctions(bytes32[] _hashes)  {\n        for (uint i = 0; i < _hashes.length; i ++ ) {\n            startAuction(_hashes[i]);\n        }\n    }\n\n    /**\n     * @dev Hash the values required for a secret bid\n     * @param hash The node corresponding to the desired namehash\n     * @param value The bid amount\n     * @param salt A random value to ensure secrecy of the bid\n     * @return The hash of the bid values\n     */\n    function shaBid(bytes32 hash, address owner, uint value, bytes32 salt) constant returns (bytes32 sealedBid) {\n        return sha3(hash, owner, value, salt);\n    }\n\n    /**\n     * @dev Submit a new sealed bid on a desired hash in a blind auction\n     *\n     * Bids are sent by sending a message to the main contract with a hash and an amount. The hash\n     * contains information about the bid, including the bidded hash, the bid amount, and a random\n     * salt. Bids are not tied to any one auction until they are revealed. The value of the bid\n     * itself can be masqueraded by sending more than the value of your actual bid. This is\n     * followed by a 48h reveal period. Bids revealed after this period will be burned and the ether unrecoverable.\n     * Since this is an auction, it is expected that most public hashes, like known domains and common dictionary\n     * words, will have multiple bidders pushing the price up.\n     *\n     * @param sealedBid A sealedBid, created by the shaBid function\n     */\n    function newBid(bytes32 sealedBid) payable {\n        if (address(sealedBids[msg.sender][sealedBid]) > 0 ) throw;\n        if (msg.value < minPrice) throw;\n        // creates a new hash contract with the owner\n        Deed newBid = (new Deed).value(msg.value)(msg.sender);\n        sealedBids[msg.sender][sealedBid] = newBid;\n        NewBid(sealedBid, msg.sender, msg.value);\n    }\n\n    /**\n     * @dev Start a set of auctions and bid on one of them\n     *\n     * This method functions identically to calling `startAuctions` followed by `newBid`,\n     * but all in one transaction.\n     * @param hashes A list of hashes to start auctions on.\n     * @param sealedBid A sealed bid for one of the auctions.\n     */\n    function startAuctionsAndBid(bytes32[] hashes, bytes32 sealedBid) payable {\n        startAuctions(hashes);\n        newBid(sealedBid);\n    }\n\n    /**\n     * @dev Submit the properties of a bid to reveal them\n     * @param _hash The node in the sealedBid\n     * @param _value The bid amount in the sealedBid\n     * @param _salt The sale in the sealedBid\n     */\n    function unsealBid(bytes32 _hash, uint _value, bytes32 _salt) {\n        bytes32 seal = shaBid(_hash, msg.sender, _value, _salt);\n        Deed bid = sealedBids[msg.sender][seal];\n        if (address(bid) == 0 ) throw;\n        sealedBids[msg.sender][seal] = Deed(0);\n        entry h = _entries[_hash];\n        uint value = min(_value, bid.value());\n        bid.setBalance(value, true);\n\n        var auctionState = state(_hash);\n        if(auctionState == Mode.Owned) {\n            // Too late! Bidder loses their bid. Get's 0.5% back.\n            bid.closeDeed(5);\n            BidRevealed(_hash, msg.sender, value, 1);\n        } else if(auctionState != Mode.Reveal) {\n            // Invalid phase\n            throw;\n        } else if (value < minPrice || bid.creationDate() > h.registrationDate - revealPeriod) {\n            // Bid too low or too late, refund 99.5%\n            bid.closeDeed(995);\n            BidRevealed(_hash, msg.sender, value, 0);\n        } else if (value > h.highestBid) {\n            // new winner\n            // cancel the other bid, refund 99.5%\n            if(address(h.deed) != 0) {\n                Deed previousWinner = h.deed;\n                previousWinner.closeDeed(995);\n            }\n\n            // set new winner\n            // per the rules of a vickery auction, the value becomes the previous highestBid\n            h.value = h.highestBid;  // will be zero if there's only 1 bidder\n            h.highestBid = value;\n            h.deed = bid;\n            BidRevealed(_hash, msg.sender, value, 2);\n        } else if (value > h.value) {\n            // not winner, but affects second place\n            h.value = value;\n            bid.closeDeed(995);\n            BidRevealed(_hash, msg.sender, value, 3);\n        } else {\n            // bid doesn't affect auction\n            bid.closeDeed(995);\n            BidRevealed(_hash, msg.sender, value, 4);\n        }\n    }\n\n    /**\n     * @dev Cancel a bid\n     * @param seal The value returned by the shaBid function\n     */\n    function cancelBid(address bidder, bytes32 seal) {\n        Deed bid = sealedBids[bidder][seal];\n        \n        // If a sole bidder does not `unsealBid` in time, they have a few more days\n        // where they can call `startAuction` (again) and then `unsealBid` during\n        // the revealPeriod to get back their bid value.\n        // For simplicity, they should call `startAuction` within\n        // 9 days (2 weeks - totalAuctionLength), otherwise their bid will be\n        // cancellable by anyone.\n        if (address(bid) == 0\n            || now < bid.creationDate() + totalAuctionLength + 2 weeks) throw;\n\n        // Send the canceller 0.5% of the bid, and burn the rest.\n        bid.setOwner(msg.sender);\n        bid.closeDeed(5);\n        sealedBids[bidder][seal] = Deed(0);\n        BidRevealed(seal, bidder, 0, 5);\n    }\n\n    /**\n     * @dev Finalize an auction after the registration date has passed\n     * @param _hash The hash of the name the auction is for\n     */\n    function finalizeAuction(bytes32 _hash) onlyOwner(_hash) {\n        entry h = _entries[_hash];\n        \n        // handles the case when there's only a single bidder (h.value is zero)\n        h.value =  max(h.value, minPrice);\n        h.deed.setBalance(h.value, true);\n\n        trySetSubnodeOwner(_hash, h.deed.owner());\n        HashRegistered(_hash, h.deed.owner(), h.value, h.registrationDate);\n    }\n\n    /**\n     * @dev The owner of a domain may transfer it to someone else at any time.\n     * @param _hash The node to transfer\n     * @param newOwner The address to transfer ownership to\n     */\n    function transfer(bytes32 _hash, address newOwner) onlyOwner(_hash) {\n        if (newOwner == 0) throw;\n\n        entry h = _entries[_hash];\n        h.deed.setOwner(newOwner);\n        trySetSubnodeOwner(_hash, newOwner);\n    }\n\n    /**\n     * @dev After some time, or if we're no longer the registrar, the owner can release\n     *      the name and get their ether back.\n     * @param _hash The node to release\n     */\n    function releaseDeed(bytes32 _hash) onlyOwner(_hash) {\n        entry h = _entries[_hash];\n        Deed deedContract = h.deed;\n        if(now < h.registrationDate + 1 years && ens.owner(rootNode) == address(this)) throw;\n\n        h.value = 0;\n        h.highestBid = 0;\n        h.deed = Deed(0);\n\n        _tryEraseSingleNode(_hash);\n        deedContract.closeDeed(1000);\n        HashReleased(_hash, h.value);        \n    }\n\n    /**\n     * @dev Submit a name 6 characters long or less. If it has been registered,\n     * the submitter will earn 50% of the deed value. We are purposefully\n     * handicapping the simplified registrar as a way to force it into being restructured\n     * in a few years.\n     * @param unhashedName An invalid name to search for in the registry.\n     *\n     */\n    function invalidateName(string unhashedName) inState(sha3(unhashedName), Mode.Owned) {\n        if (strlen(unhashedName) > 6 ) throw;\n        bytes32 hash = sha3(unhashedName);\n\n        entry h = _entries[hash];\n\n        _tryEraseSingleNode(hash);\n\n        if(address(h.deed) != 0) {\n            // Reward the discoverer with 50% of the deed\n            // The previous owner gets 50%\n            h.value = max(h.value, minPrice);\n            h.deed.setBalance(h.value/2, false);\n            h.deed.setOwner(msg.sender);\n            h.deed.closeDeed(1000);\n        }\n\n        HashInvalidated(hash, unhashedName, h.value, h.registrationDate);\n\n        h.value = 0;\n        h.highestBid = 0;\n        h.deed = Deed(0);\n    }\n\n    /**\n     * @dev Allows anyone to delete the owner and resolver records for a (subdomain of) a\n     *      name that is not currently owned in the registrar. If passing, eg, 'foo.bar.eth',\n     *      the owner and resolver fields on 'foo.bar.eth' and 'bar.eth' will all be cleared.\n     * @param labels A series of label hashes identifying the name to zero out, rooted at the\n     *        registrar's root. Must contain at least one element. For instance, to zero \n     *        'foo.bar.eth' on a registrar that owns '.eth', pass an array containing\n     *        [sha3('foo'), sha3('bar')].\n     */\n    function eraseNode(bytes32[] labels) {\n        if(labels.length == 0) throw;\n        if(state(labels[labels.length - 1]) == Mode.Owned) throw;\n\n        _eraseNodeHierarchy(labels.length - 1, labels, rootNode);\n    }\n\n    function _tryEraseSingleNode(bytes32 label) internal {\n        if(ens.owner(rootNode) == address(this)) {\n            ens.setSubnodeOwner(rootNode, label, address(this));\n            var node = sha3(rootNode, label);\n            ens.setResolver(node, 0);\n            ens.setOwner(node, 0);\n        }\n    }\n\n    function _eraseNodeHierarchy(uint idx, bytes32[] labels, bytes32 node) internal {\n        // Take ownership of the node\n        ens.setSubnodeOwner(node, labels[idx], address(this));\n        node = sha3(node, labels[idx]);\n        \n        // Recurse if there's more labels\n        if(idx > 0)\n            _eraseNodeHierarchy(idx - 1, labels, node);\n\n        // Erase the resolver and owner records\n        ens.setResolver(node, 0);\n        ens.setOwner(node, 0);\n    }\n\n    /**\n     * @dev Transfers the deed to the current registrar, if different from this one.\n     * Used during the upgrade process to a permanent registrar.\n     * @param _hash The name hash to transfer.\n     */\n    function transferRegistrars(bytes32 _hash) onlyOwner(_hash) {\n        var registrar = ens.owner(rootNode);\n        if(registrar == address(this))\n            throw;\n\n        // Migrate the deed\n        entry h = _entries[_hash];\n        h.deed.setRegistrar(registrar);\n\n        // Call the new registrar to accept the transfer\n        Registrar(registrar).acceptRegistrarTransfer(_hash, h.deed, h.registrationDate);\n\n        // Zero out the entry\n        h.deed = Deed(0);\n        h.registrationDate = 0;\n        h.value = 0;\n        h.highestBid = 0;\n    }\n\n    /**\n     * @dev Accepts a transfer from a previous registrar; stubbed out here since there\n     *      is no previous registrar implementing this interface.\n     * @param hash The sha3 hash of the label to transfer.\n     * @param deed The Deed object for the name being transferred in.\n     * @param registrationDate The date at which the name was originally registered.\n     */\n    function acceptRegistrarTransfer(bytes32 hash, Deed deed, uint registrationDate) {}\n\n}",
  "bytecode": "606060405260405160208061051683398101604052515b60028054600160a060020a03808416600160a060020a0319928316179092556000805433909316929091169190911790554260019081556005805460ff19169091179055346004555b505b6104a6806100706000396000f300606060405236156100885763ffffffff60e060020a60003504166305b34410811461008a5780630b5ab3d5146100ac57806313af4035146100be5780632b20e397146100dc5780633fa4f24514610108578063674f220f1461012a5780638da5cb5b14610156578063b0c8097214610182578063bbe427711461019c578063faab9d39146101b1575bfe5b341561009257fe5b61009a6101cf565b60408051918252519081900360200190f35b34156100b457fe5b6100bc6101d5565b005b34156100c657fe5b6100bc600160a060020a036004351661021d565b005b34156100e457fe5b6100ec6102c3565b60408051600160a060020a039092168252519081900360200190f35b341561011057fe5b61009a6102d2565b60408051918252519081900360200190f35b341561013257fe5b6100ec6102d8565b60408051600160a060020a039092168252519081900360200190f35b341561015e57fe5b6100ec6102e7565b60408051600160a060020a039092168252519081900360200190f35b341561018a57fe5b6100bc60043560243515156102f6565b005b34156101a457fe5b6100bc600435610382565b005b34156101b957fe5b6100bc600160a060020a0360043516610431565b005b60015481565b60055460ff16156101e65760006000fd5b600254604051600160a060020a039182169130163180156108fc02916000818181858888f193505050501561021a5761deadff5b5b565b60005433600160a060020a039081169116146102395760006000fd5b600160a060020a038116151561024f5760006000fd5b600280546003805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03808516919091179092559084169116811790915560408051918252517fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf369181900360200190a15b5b50565b600054600160a060020a031681565b60045481565b600354600160a060020a031681565b600254600160a060020a031681565b60005433600160a060020a039081169116146103125760006000fd5b60055460ff1615156103245760006000fd5b8160045410156103345760006000fd5b6004829055600254604051600160a060020a039182169130163184900380156108fc02916000818181858888f193505050501580156103705750805b1561037b5760006000fd5b5b5b5b5050565b60005433600160a060020a0390811691161461039e5760006000fd5b60055460ff1615156103b05760006000fd5b6005805460ff1916905561dead6108fc6103e883810330600160a060020a031631025b604051919004801590920291906000818181858888f1935050505015156103fa5760006000fd5b6040517fbb2ce2f51803bba16bc85282b47deeea9a5c6223eabea1077be696b3f265cf1390600090a16102bf6101d5565b5b5b5b50565b60005433600160a060020a0390811691161461044d5760006000fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b505600a165627a7a72305820fbfa6f8a2024760ef0e0eb29a332c9a820526e92f8b4fbcce6f00c7643234b140029000000000000000000000000cafe00be401442bfb5e480c355393fd8c147abbb",
  "constructorArguments": "000000000000000000000000cafe00be401442bfb5e480c355393fd8c147abbb"
}