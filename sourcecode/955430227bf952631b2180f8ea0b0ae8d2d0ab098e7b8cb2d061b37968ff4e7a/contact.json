{
  "address": "0x6f397263ef9891864fdf9f5cc63b736adc00e652",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RCR",
  "compilerVersion": "v0.4.12+commit.194ff033",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-20\n*/\n\npragma solidity ^0.4.8;\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\ncontract RCR is SafeMath{\n    uint256 public totalSupply;\n\tstring public name = \"RisingCurrency\";\n    string public symbol = \"RCR\";\n\tuint8 public decimals = 8;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function RCR() {\n\t\ttotalSupply = 300000000 * 10 ** 8;                        // Update total supply\n        balanceOf[0xB97f41cc340899DbA210BdCc86a912ef100eFE96] = totalSupply;              // Give the creator all initial tokens\n    }\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) {\n        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n\t\tif (_value <= 0) throw; \n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value)\n        returns (bool success) {\n\t\tif (_value <= 0) throw; \n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\n\t\tif (_value <= 0) throw; \n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\t\n\t// can accept ether\n\tfunction() payable {\n\t\trevert();\n    }\n}",
  "bytecode": "60606040526040805190810160405280600e81526020017f526973696e6743757272656e63790000000000000000000000000000000000008152506001908051906020019061004f929190610132565b506040805190810160405280600381526020017f52435200000000000000000000000000000000000000000000000000000000008152506002908051906020019061009b929190610132565b506008600360006101000a81548160ff021916908360ff16021790555034156100c357600080fd5b5b666a94d74f4300006000819055506000546004600073b97f41cc340899dba210bdcc86a912ef100efe9673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6101d7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017357805160ff19168380011785556101a1565b828001600101855582156101a1579182015b828111156101a0578251825591602001919060010190610185565b5b5090506101ae91906101b2565b5090565b6101d491905b808211156101d05760008160009055506001016101b8565b5090565b90565b610d4a806101e66000396000f30060606040523615610097576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a4578063095ea7b31461013357806318160ddd1461018d57806323b872dd146101b6578063313ce5671461022f57806370a082311461025e57806395d89b41146102ab578063a9059cbb1461033a578063dd62ed3e1461037c575b6100a25b600080fd5b565b005b34156100af57600080fd5b6100b76103e8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f85780820151818401525b6020810190506100dc565b50505050905090810190601f1680156101255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013e57600080fd5b610173600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610486565b604051808215151515815260200191505060405180910390f35b341561019857600080fd5b6101a0610522565b6040518082815260200191505060405180910390f35b34156101c157600080fd5b610215600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610528565b604051808215151515815260200191505060405180910390f35b341561023a57600080fd5b61024261094d565b604051808260ff1660ff16815260200191505060405180910390f35b341561026957600080fd5b610295600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610960565b6040518082815260200191505060405180910390f35b34156102b657600080fd5b6102be610978565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102ff5780820151818401525b6020810190506102e3565b50505050905090810190601f16801561032c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561034557600080fd5b61037a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a16565b005b341561038757600080fd5b6103d2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ca4565b6040518082815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561047e5780601f106104535761010080835404028352916020019161047e565b820191906000526020600020905b81548152906001019060200180831161046157829003601f168201915b505050505081565b6000808211151561049657600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190505b92915050565b60005481565b6000808373ffffffffffffffffffffffffffffffffffffffff16141561054d57600080fd5b60008211151561055c57600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156105a857600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101561063557600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156106be57600080fd5b610707600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610cc9565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610793600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610ce3565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061085c600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610cc9565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b600360009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a0e5780601f106109e357610100808354040283529160200191610a0e565b820191906000526020600020905b8154815290600101906020018083116109f157829003601f168201915b505050505081565b60008273ffffffffffffffffffffffffffffffffffffffff161415610a3a57600080fd5b600081111515610a4957600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610a9557600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015610b2257600080fd5b610b6b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610cc9565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bf7600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610ce3565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5050565b6005602052816000526040600020602052806000526040600020600091509150505481565b6000610cd783831115610d0e565b81830390505b92915050565b6000808284019050610d03848210158015610cfe5750838210155b610d0e565b8091505b5092915050565b801515610d1a57600080fd5b5b505600a165627a7a72305820f529b0179c4ec48e1ba913497dd7d599f710cfb7519ccd3aac60193759eb66a20029"
}