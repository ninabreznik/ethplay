{
  "address": "0xE968aD47B1C071Ea3905ef982833552a495D6213",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoMarketAdsToken",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "byzantium",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-10\n*/\n\npragma solidity ^0.5.2;\n\ninterface IERC20 {\n\tfunction transfer(address to, uint256 value) external returns (bool);\n\n\tfunction approve(address spender, uint256 value) external returns (bool);\n\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\n\n\tfunction totalSupply() external view returns (uint256);\n\n\tfunction balanceOf(address who) external view returns (uint256);\n\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\t/**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 c = a * b;\n\t\trequire(c / a == b);\n\n\t\treturn c;\n\t}\n\n\t/**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// Solidity only automatically asserts when dividing by 0\n\t\trequire(b > 0);\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n\t\treturn c;\n\t}\n\n\t/**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\n\t\treturn c;\n\t}\n\n\t/**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\n\t\treturn c;\n\t}\n\n\t/**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b != 0);\n\t\treturn a % b;\n\t}\n}\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n\tstring private _name;\n\tstring private _symbol;\n\tuint8 private _decimals;\n\n\tconstructor (string memory name, string memory symbol, uint8 decimals) public {\n\t\t_name = name;\n\t\t_symbol = symbol;\n\t\t_decimals = decimals;\n\t}\n\n\t/**\n     * @return the name of the token.\n     */\n\tfunction name() public view returns (string memory) {\n\t\treturn _name;\n\t}\n\n\t/**\n     * @return the symbol of the token.\n     */\n\tfunction symbol() public view returns (string memory) {\n\t\treturn _symbol;\n\t}\n\n\t/**\n     * @return the number of decimals of the token.\n     */\n\tfunction decimals() public view returns (uint8) {\n\t\treturn _decimals;\n\t}\n}\n\ncontract ERC20 is IERC20 {\n\tusing SafeMath for uint256;\n\n\tmapping (address => uint256) private _balances;\n\n\tmapping (address => mapping (address => uint256)) private _allowed;\n\n\tuint256 private _totalSupply;\n\n\t/**\n     * @dev Total number of tokens in existence\n     */\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn _totalSupply;\n\t}\n\n\t/**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n\tfunction balanceOf(address owner) public view returns (uint256) {\n\t\treturn _balances[owner];\n\t}\n\n\t/**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n\tfunction allowance(address owner, address spender) public view returns (uint256) {\n\t\treturn _allowed[owner][spender];\n\t}\n\n\t/**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n\tfunction transfer(address to, uint256 value) public returns (bool) {\n\t\t_transfer(msg.sender, to, value);\n\t\treturn true;\n\t}\n\n\t/**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n\tfunction approve(address spender, uint256 value) public returns (bool) {\n\t\t_approve(msg.sender, spender, value);\n\t\treturn true;\n\t}\n\n\t/**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool) {\n\t\t_transfer(from, to, value);\n\t\t_approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n\t\treturn true;\n\t}\n\n\t/**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n\tfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\t\t_approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n\t\treturn true;\n\t}\n\n\t/**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\t\t_approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n\t\treturn true;\n\t}\n\n\t/**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n\tfunction _transfer(address from, address to, uint256 value) internal {\n\t\trequire(to != address(0));\n\n\t\t_balances[from] = _balances[from].sub(value);\n\t\t_balances[to] = _balances[to].add(value);\n\t\temit Transfer(from, to, value);\n\t}\n\n\t/**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n\tfunction _mint(address account, uint256 value) internal {\n\t\trequire(account != address(0));\n\n\t\t_totalSupply = _totalSupply.add(value);\n\t\t_balances[account] = _balances[account].add(value);\n\t\temit Transfer(address(0), account, value);\n\t}\n\n\t/**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n\tfunction _burn(address account, uint256 value) internal {\n\t\trequire(account != address(0));\n\n\t\t_totalSupply = _totalSupply.sub(value);\n\t\t_balances[account] = _balances[account].sub(value);\n\t\temit Transfer(account, address(0), value);\n\t}\n\n\t/**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n\tfunction _approve(address owner, address spender, uint256 value) internal {\n\t\trequire(spender != address(0));\n\t\trequire(owner != address(0));\n\n\t\t_allowed[owner][spender] = value;\n\t\temit Approval(owner, spender, value);\n\t}\n\n\t/**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n\tfunction _burnFrom(address account, uint256 value) internal {\n\t\t_burn(account, value);\n\t\t_approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n\t}\n}\n\npragma solidity ^0.5.0;\n\ncontract CryptoMarketAdsToken is ERC20, ERC20Detailed {\n\n\tuint256 private INITIAL_SUPPLY = 10000000000e18;\n\tconstructor () public\n\tERC20Detailed(\"CryptoMarketAdsToken\", \"CMA\", 18)\n\t{\n\t\t_mint(msg.sender, INITIAL_SUPPLY);\n\t}\n}",
  "bytecode": "60806040526b204fce5e3e2502611000000060065534801561002057600080fd5b50604080518082018252601481527f43727970746f4d61726b6574416473546f6b656e0000000000000000000000006020808301918252835180850190945260038085527f434d41000000000000000000000000000000000000000000000000000000000091850191909152825192939260129261009e92916101b6565b5081516100b29060049060208501906101b6565b506005805460ff191660ff9290921691909117905550506006546100e09033906401000000006100e5810204565b610251565b600160a060020a03821615156100fa57600080fd5b600254610114908264010000000061068261019d82021704565b600255600160a060020a038216600090815260208190526040902054610147908264010000000061068261019d82021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000828201838110156101af57600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101f757805160ff1916838001178555610224565b82800160010185558215610224579182015b82811115610224578251825591602001919060010190610209565b50610230929150610234565b5090565b61024e91905b80821115610230576000815560010161023a565b90565b6106c7806102606000396000f3fe608060405234801561001057600080fd5b50600436106100c6576000357c010000000000000000000000000000000000000000000000000000000090048063395093511161008e57806339509351146101f657806370a082311461022257806395d89b4114610248578063a457c2d714610250578063a9059cbb1461027c578063dd62ed3e146102a8576100c6565b806306fdde03146100cb578063095ea7b31461014857806318160ddd1461018857806323b872dd146101a2578063313ce567146101d8575b600080fd5b6100d36102d6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101746004803603604081101561015e57600080fd5b50600160a060020a03813516906020013561036c565b604080519115158252519081900360200190f35b610190610382565b60408051918252519081900360200190f35b610174600480360360608110156101b857600080fd5b50600160a060020a03813581169160208101359091169060400135610388565b6101e06103df565b6040805160ff9092168252519081900360200190f35b6101746004803603604081101561020c57600080fd5b50600160a060020a0381351690602001356103e8565b6101906004803603602081101561023857600080fd5b5035600160a060020a0316610424565b6100d361043f565b6101746004803603604081101561026657600080fd5b50600160a060020a0381351690602001356104a0565b6101746004803603604081101561029257600080fd5b50600160a060020a0381351690602001356104dc565b610190600480360360408110156102be57600080fd5b50600160a060020a03813581169160200135166104e9565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103625780601f1061033757610100808354040283529160200191610362565b820191906000526020600020905b81548152906001019060200180831161034557829003601f168201915b5050505050905090565b6000610379338484610514565b50600192915050565b60025490565b60006103958484846105a0565b600160a060020a0384166000908152600160209081526040808320338085529252909120546103d59186916103d0908663ffffffff61066d16565b610514565b5060019392505050565b60055460ff1690565b336000818152600160209081526040808320600160a060020a038716845290915281205490916103799185906103d0908663ffffffff61068216565b600160a060020a031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103625780601f1061033757610100808354040283529160200191610362565b336000818152600160209081526040808320600160a060020a038716845290915281205490916103799185906103d0908663ffffffff61066d16565b60006103793384846105a0565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600160a060020a038216151561052957600080fd5b600160a060020a038316151561053e57600080fd5b600160a060020a03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a03821615156105b557600080fd5b600160a060020a0383166000908152602081905260409020546105de908263ffffffff61066d16565b600160a060020a038085166000908152602081905260408082209390935590841681522054610613908263ffffffff61068216565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282111561067c57600080fd5b50900390565b60008282018381101561069457600080fd5b939250505056fea165627a7a723058201966e1e3cf42da8cc2110cb4066b6139570fa5ff2d823eb8ab15b34eaf5e99c90029"
}