{
  "address": "0x39755357759ce0d7f32dc8dc45414cca409ae24e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Eth2Dai",
  "contractName": "MatchingMarket",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-06\n*/\n\n/// matching_market.sol\n\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.18;\n\n/// expiring_market.sol\n\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.18;\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.13;\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    function DSAuth() public {\n        owner = msg.sender;\n        LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\n/// simple_market.sol\n\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.18;\n\n/// math.sol -- mixin for inline numerical wizardry\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.13;\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n/// erc20.sol -- API for the ERC20 token standard\n\n// See <https://github.com/ethereum/EIPs/issues/20>.\n\n// This file likely does not meet the threshold of originality\n// required for copyright to apply.  As a result, this is free and\n// unencumbered software belonging to the public domain.\n\npragma solidity ^0.4.8;\n\ncontract ERC20Events {\n    event Approval(address indexed src, address indexed guy, uint wad);\n    event Transfer(address indexed src, address indexed dst, uint wad);\n}\n\ncontract ERC20 is ERC20Events {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address guy) public view returns (uint);\n    function allowance(address src, address guy) public view returns (uint);\n\n    function approve(address guy, uint wad) public returns (bool);\n    function transfer(address dst, uint wad) public returns (bool);\n    function transferFrom(\n        address src, address dst, uint wad\n    ) public returns (bool);\n}\n\ncontract EventfulMarket {\n    event LogItemUpdate(uint id);\n    event LogTrade(uint pay_amt, address indexed pay_gem,\n                   uint buy_amt, address indexed buy_gem);\n\n    event LogMake(\n        bytes32  indexed  id,\n        bytes32  indexed  pair,\n        address  indexed  maker,\n        ERC20             pay_gem,\n        ERC20             buy_gem,\n        uint128           pay_amt,\n        uint128           buy_amt,\n        uint64            timestamp\n    );\n\n    event LogBump(\n        bytes32  indexed  id,\n        bytes32  indexed  pair,\n        address  indexed  maker,\n        ERC20             pay_gem,\n        ERC20             buy_gem,\n        uint128           pay_amt,\n        uint128           buy_amt,\n        uint64            timestamp\n    );\n\n    event LogTake(\n        bytes32           id,\n        bytes32  indexed  pair,\n        address  indexed  maker,\n        ERC20             pay_gem,\n        ERC20             buy_gem,\n        address  indexed  taker,\n        uint128           take_amt,\n        uint128           give_amt,\n        uint64            timestamp\n    );\n\n    event LogKill(\n        bytes32  indexed  id,\n        bytes32  indexed  pair,\n        address  indexed  maker,\n        ERC20             pay_gem,\n        ERC20             buy_gem,\n        uint128           pay_amt,\n        uint128           buy_amt,\n        uint64            timestamp\n    );\n}\n\ncontract SimpleMarket is EventfulMarket, DSMath {\n\n    uint public last_offer_id;\n\n    mapping (uint => OfferInfo) public offers;\n\n    bool locked;\n\n    struct OfferInfo {\n        uint     pay_amt;\n        ERC20    pay_gem;\n        uint     buy_amt;\n        ERC20    buy_gem;\n        address  owner;\n        uint64   timestamp;\n    }\n\n    modifier can_buy(uint id) {\n        require(isActive(id));\n        _;\n    }\n\n    modifier can_cancel(uint id) {\n        require(isActive(id));\n        require(getOwner(id) == msg.sender);\n        _;\n    }\n\n    modifier can_offer {\n        _;\n    }\n\n    modifier synchronized {\n        require(!locked);\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    function isActive(uint id) public constant returns (bool active) {\n        return offers[id].timestamp > 0;\n    }\n\n    function getOwner(uint id) public constant returns (address owner) {\n        return offers[id].owner;\n    }\n\n    function getOffer(uint id) public constant returns (uint, ERC20, uint, ERC20) {\n      var offer = offers[id];\n      return (offer.pay_amt, offer.pay_gem,\n              offer.buy_amt, offer.buy_gem);\n    }\n\n    // ---- Public entrypoints ---- //\n\n    function bump(bytes32 id_)\n        public\n        can_buy(uint256(id_))\n    {\n        var id = uint256(id_);\n        LogBump(\n            id_,\n            keccak256(offers[id].pay_gem, offers[id].buy_gem),\n            offers[id].owner,\n            offers[id].pay_gem,\n            offers[id].buy_gem,\n            uint128(offers[id].pay_amt),\n            uint128(offers[id].buy_amt),\n            offers[id].timestamp\n        );\n    }\n\n    // Accept given `quantity` of an offer. Transfers funds from caller to\n    // offer maker, and from market to caller.\n    function buy(uint id, uint quantity)\n        public\n        can_buy(id)\n        synchronized\n        returns (bool)\n    {\n        OfferInfo memory offer = offers[id];\n        uint spend = mul(quantity, offer.buy_amt) / offer.pay_amt;\n\n        require(uint128(spend) == spend);\n        require(uint128(quantity) == quantity);\n\n        // For backwards semantic compatibility.\n        if (quantity == 0 || spend == 0 ||\n            quantity > offer.pay_amt || spend > offer.buy_amt)\n        {\n            return false;\n        }\n\n        offers[id].pay_amt = sub(offer.pay_amt, quantity);\n        offers[id].buy_amt = sub(offer.buy_amt, spend);\n        require( offer.buy_gem.transferFrom(msg.sender, offer.owner, spend) );\n        require( offer.pay_gem.transfer(msg.sender, quantity) );\n\n        LogItemUpdate(id);\n        LogTake(\n            bytes32(id),\n            keccak256(offer.pay_gem, offer.buy_gem),\n            offer.owner,\n            offer.pay_gem,\n            offer.buy_gem,\n            msg.sender,\n            uint128(quantity),\n            uint128(spend),\n            uint64(now)\n        );\n        LogTrade(quantity, offer.pay_gem, spend, offer.buy_gem);\n\n        if (offers[id].pay_amt == 0) {\n          delete offers[id];\n        }\n\n        return true;\n    }\n\n    // Cancel an offer. Refunds offer maker.\n    function cancel(uint id)\n        public\n        can_cancel(id)\n        synchronized\n        returns (bool success)\n    {\n        // read-only offer. Modify an offer by directly accessing offers[id]\n        OfferInfo memory offer = offers[id];\n        delete offers[id];\n\n        require( offer.pay_gem.transfer(offer.owner, offer.pay_amt) );\n\n        LogItemUpdate(id);\n        LogKill(\n            bytes32(id),\n            keccak256(offer.pay_gem, offer.buy_gem),\n            offer.owner,\n            offer.pay_gem,\n            offer.buy_gem,\n            uint128(offer.pay_amt),\n            uint128(offer.buy_amt),\n            uint64(now)\n        );\n\n        success = true;\n    }\n\n    function kill(bytes32 id)\n        public\n    {\n        require(cancel(uint256(id)));\n    }\n\n    function make(\n        ERC20    pay_gem,\n        ERC20    buy_gem,\n        uint128  pay_amt,\n        uint128  buy_amt\n    )\n        public\n        returns (bytes32 id)\n    {\n        return bytes32(offer(pay_amt, pay_gem, buy_amt, buy_gem));\n    }\n\n    // Make a new offer. Takes funds from the caller into market escrow.\n    function offer(uint pay_amt, ERC20 pay_gem, uint buy_amt, ERC20 buy_gem)\n        public\n        can_offer\n        synchronized\n        returns (uint id)\n    {\n        require(uint128(pay_amt) == pay_amt);\n        require(uint128(buy_amt) == buy_amt);\n        require(pay_amt > 0);\n        require(pay_gem != ERC20(0x0));\n        require(buy_amt > 0);\n        require(buy_gem != ERC20(0x0));\n        require(pay_gem != buy_gem);\n\n        OfferInfo memory info;\n        info.pay_amt = pay_amt;\n        info.pay_gem = pay_gem;\n        info.buy_amt = buy_amt;\n        info.buy_gem = buy_gem;\n        info.owner = msg.sender;\n        info.timestamp = uint64(now);\n        id = _next_id();\n        offers[id] = info;\n\n        require( pay_gem.transferFrom(msg.sender, this, pay_amt) );\n\n        LogItemUpdate(id);\n        LogMake(\n            bytes32(id),\n            keccak256(pay_gem, buy_gem),\n            msg.sender,\n            pay_gem,\n            buy_gem,\n            uint128(pay_amt),\n            uint128(buy_amt),\n            uint64(now)\n        );\n    }\n\n    function take(bytes32 id, uint128 maxTakeAmount)\n        public\n    {\n        require(buy(uint256(id), maxTakeAmount));\n    }\n\n    function _next_id()\n        internal\n        returns (uint)\n    {\n        last_offer_id++; return last_offer_id;\n    }\n}\n\n// Simple Market with a market lifetime. When the close_time has been reached,\n// offers can only be cancelled (offer and buy will throw).\n\ncontract ExpiringMarket is DSAuth, SimpleMarket {\n    uint64 public close_time;\n    bool public stopped;\n\n    // after close_time has been reached, no new offers are allowed\n    modifier can_offer {\n        require(!isClosed());\n        _;\n    }\n\n    // after close, no new buys are allowed\n    modifier can_buy(uint id) {\n        require(isActive(id));\n        require(!isClosed());\n        _;\n    }\n\n    // after close, anyone can cancel an offer\n    modifier can_cancel(uint id) {\n        require(isActive(id));\n        require((msg.sender == getOwner(id)) || isClosed());\n        _;\n    }\n\n    function ExpiringMarket(uint64 _close_time)\n        public\n    {\n        close_time = _close_time;\n    }\n\n    function isClosed() public constant returns (bool closed) {\n        return stopped || getTime() > close_time;\n    }\n\n    function getTime() public constant returns (uint64) {\n        return uint64(now);\n    }\n\n    function stop() public auth {\n        stopped = true;\n    }\n}\n\n/// note.sol -- the `note' modifier, for logging calls as events\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.4.13;\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\ncontract MatchingEvents {\n    event LogBuyEnabled(bool isEnabled);\n    event LogMinSell(address pay_gem, uint min_amount);\n    event LogMatchingEnabled(bool isEnabled);\n    event LogUnsortedOffer(uint id);\n    event LogSortedOffer(uint id);\n    event LogInsert(address keeper, uint id);\n    event LogDelete(address keeper, uint id);\n}\n\ncontract MatchingMarket is MatchingEvents, ExpiringMarket, DSNote {\n    bool public buyEnabled = true;      //buy enabled\n    bool public matchingEnabled = true; //true: enable matching,\n                                         //false: revert to expiring market\n    struct sortInfo {\n        uint next;  //points to id of next higher offer\n        uint prev;  //points to id of previous lower offer\n        uint delb;  //the blocknumber where this entry was marked for delete\n    }\n    mapping(uint => sortInfo) public _rank;                     //doubly linked lists of sorted offer ids\n    mapping(address => mapping(address => uint)) public _best;  //id of the highest offer for a token pair\n    mapping(address => mapping(address => uint)) public _span;  //number of offers stored for token pair in sorted orderbook\n    mapping(address => uint) public _dust;                      //minimum sell amount for a token to avoid dust offers\n    mapping(uint => uint) public _near;         //next unsorted offer id\n    uint _head;                                 //first unsorted offer id\n    uint public dustId;                         // id of the latest offer marked as dust\n\n\n    function MatchingMarket(uint64 close_time) ExpiringMarket(close_time) public {\n    }\n\n    // After close, anyone can cancel an offer\n    modifier can_cancel(uint id) {\n        require(isActive(id), \"Offer was deleted or taken, or never existed.\");\n        require(\n            isClosed() || msg.sender == getOwner(id) || id == dustId,\n            \"Offer can not be cancelled because user is not owner, and market is open, and offer sells required amount of tokens.\"\n        );\n        _;\n    }\n\n    // ---- Public entrypoints ---- //\n\n    function make(\n        ERC20    pay_gem,\n        ERC20    buy_gem,\n        uint128  pay_amt,\n        uint128  buy_amt\n    )\n        public\n        returns (bytes32)\n    {\n        return bytes32(offer(pay_amt, pay_gem, buy_amt, buy_gem));\n    }\n\n    function take(bytes32 id, uint128 maxTakeAmount) public {\n        require(buy(uint256(id), maxTakeAmount));\n    }\n\n    function kill(bytes32 id) public {\n        require(cancel(uint256(id)));\n    }\n\n    // Make a new offer. Takes funds from the caller into market escrow.\n    //\n    // If matching is enabled:\n    //     * creates new offer without putting it in\n    //       the sorted list.\n    //     * available to authorized contracts only!\n    //     * keepers should call insert(id,pos)\n    //       to put offer in the sorted list.\n    //\n    // If matching is disabled:\n    //     * calls expiring market's offer().\n    //     * available to everyone without authorization.\n    //     * no sorting is done.\n    //\n    function offer(\n        uint pay_amt,    //maker (ask) sell how much\n        ERC20 pay_gem,   //maker (ask) sell which token\n        uint buy_amt,    //taker (ask) buy how much\n        ERC20 buy_gem    //taker (ask) buy which token\n    )\n        public\n        returns (uint)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        var fn = matchingEnabled ? _offeru : super.offer;\n        return fn(pay_amt, pay_gem, buy_amt, buy_gem);\n    }\n\n    // Make a new offer. Takes funds from the caller into market escrow.\n    function offer(\n        uint pay_amt,    //maker (ask) sell how much\n        ERC20 pay_gem,   //maker (ask) sell which token\n        uint buy_amt,    //maker (ask) buy how much\n        ERC20 buy_gem,   //maker (ask) buy which token\n        uint pos         //position to insert offer, 0 should be used if unknown\n    )\n        public\n        can_offer\n        returns (uint)\n    {\n        return offer(pay_amt, pay_gem, buy_amt, buy_gem, pos, true);\n    }\n\n    function offer(\n        uint pay_amt,    //maker (ask) sell how much\n        ERC20 pay_gem,   //maker (ask) sell which token\n        uint buy_amt,    //maker (ask) buy how much\n        ERC20 buy_gem,   //maker (ask) buy which token\n        uint pos,        //position to insert offer, 0 should be used if unknown\n        bool rounding    //match \"close enough\" orders?\n    )\n        public\n        can_offer\n        returns (uint)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        require(_dust[pay_gem] <= pay_amt);\n\n        if (matchingEnabled) {\n          return _matcho(pay_amt, pay_gem, buy_amt, buy_gem, pos, rounding);\n        }\n        return super.offer(pay_amt, pay_gem, buy_amt, buy_gem);\n    }\n\n    //Transfers funds from caller to offer maker, and from market to caller.\n    function buy(uint id, uint amount)\n        public\n        can_buy(id)\n        returns (bool)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        var fn = matchingEnabled ? _buys : super.buy;\n        return fn(id, amount);\n    }\n\n    // Cancel an offer. Refunds offer maker.\n    function cancel(uint id)\n        public\n        can_cancel(id)\n        returns (bool success)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        if (matchingEnabled) {\n            if (isOfferSorted(id)) {\n                require(_unsort(id));\n            } else {\n                require(_hide(id));\n            }\n        }\n        return super.cancel(id);    //delete the offer.\n    }\n\n    //insert offer into the sorted list\n    //keepers need to use this function\n    function insert(\n        uint id,   //maker (ask) id\n        uint pos   //position to insert into\n    )\n        public\n        returns (bool)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        require(!isOfferSorted(id));    //make sure offers[id] is not yet sorted\n        require(isActive(id));          //make sure offers[id] is active\n\n        _hide(id);                      //remove offer from unsorted offers list\n        _sort(id, pos);                 //put offer into the sorted offers list\n        LogInsert(msg.sender, id);\n        return true;\n    }\n\n    //deletes _rank [id]\n    //  Function should be called by keepers.\n    function del_rank(uint id)\n        public\n        returns (bool)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        require(!isActive(id) && _rank[id].delb != 0 && _rank[id].delb < block.number - 10);\n        delete _rank[id];\n        LogDelete(msg.sender, id);\n        return true;\n    }\n\n    //set the minimum sell amount for a token\n    //    Function is used to avoid \"dust offers\" that have\n    //    very small amount of tokens to sell, and it would\n    //    cost more gas to accept the offer, than the value\n    //    of tokens received.\n    function setMinSell(\n        ERC20 pay_gem,     //token to assign minimum sell amount to\n        uint dust          //maker (ask) minimum sell amount\n    )\n        public\n        auth\n        note\n        returns (bool)\n    {\n        _dust[pay_gem] = dust;\n        LogMinSell(pay_gem, dust);\n        return true;\n    }\n\n    //returns the minimum sell amount for an offer\n    function getMinSell(\n        ERC20 pay_gem      //token for which minimum sell amount is queried\n    )\n        public\n        constant\n        returns (uint)\n    {\n        return _dust[pay_gem];\n    }\n\n    //set buy functionality enabled/disabled\n    function setBuyEnabled(bool buyEnabled_) public auth returns (bool) {\n        buyEnabled = buyEnabled_;\n        LogBuyEnabled(buyEnabled);\n        return true;\n    }\n\n    //set matching enabled/disabled\n    //    If matchingEnabled true(default), then inserted offers are matched.\n    //    Except the ones inserted by contracts, because those end up\n    //    in the unsorted list of offers, that must be later sorted by\n    //    keepers using insert().\n    //    If matchingEnabled is false then MatchingMarket is reverted to ExpiringMarket,\n    //    and matching is not done, and sorted lists are disabled.\n    function setMatchingEnabled(bool matchingEnabled_) public auth returns (bool) {\n        matchingEnabled = matchingEnabled_;\n        LogMatchingEnabled(matchingEnabled);\n        return true;\n    }\n\n    //return the best offer for a token pair\n    //      the best offer is the lowest one if it's an ask,\n    //      and highest one if it's a bid offer\n    function getBestOffer(ERC20 sell_gem, ERC20 buy_gem) public constant returns(uint) {\n        return _best[sell_gem][buy_gem];\n    }\n\n    //return the next worse offer in the sorted list\n    //      the worse offer is the higher one if its an ask,\n    //      a lower one if its a bid offer,\n    //      and in both cases the newer one if they're equal.\n    function getWorseOffer(uint id) public constant returns(uint) {\n        return _rank[id].prev;\n    }\n\n    //return the next better offer in the sorted list\n    //      the better offer is in the lower priced one if its an ask,\n    //      the next higher priced one if its a bid offer\n    //      and in both cases the older one if they're equal.\n    function getBetterOffer(uint id) public constant returns(uint) {\n\n        return _rank[id].next;\n    }\n\n    //return the amount of better offers for a token pair\n    function getOfferCount(ERC20 sell_gem, ERC20 buy_gem) public constant returns(uint) {\n        return _span[sell_gem][buy_gem];\n    }\n\n    //get the first unsorted offer that was inserted by a contract\n    //      Contracts can't calculate the insertion position of their offer because it is not an O(1) operation.\n    //      Their offers get put in the unsorted list of offers.\n    //      Keepers can calculate the insertion position offchain and pass it to the insert() function to insert\n    //      the unsorted offer into the sorted list. Unsorted offers will not be matched, but can be bought with buy().\n    function getFirstUnsortedOffer() public constant returns(uint) {\n        return _head;\n    }\n\n    //get the next unsorted offer\n    //      Can be used to cycle through all the unsorted offers.\n    function getNextUnsortedOffer(uint id) public constant returns(uint) {\n        return _near[id];\n    }\n\n    function isOfferSorted(uint id) public constant returns(bool) {\n        return _rank[id].next != 0\n               || _rank[id].prev != 0\n               || _best[offers[id].pay_gem][offers[id].buy_gem] == id;\n    }\n\n    function sellAllAmount(ERC20 pay_gem, uint pay_amt, ERC20 buy_gem, uint min_fill_amount)\n        public\n        returns (uint fill_amt)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        uint offerId;\n        while (pay_amt > 0) {                           //while there is amount to sell\n            offerId = getBestOffer(buy_gem, pay_gem);   //Get the best offer for the token pair\n            require(offerId != 0);                      //Fails if there are not more offers\n\n            // There is a chance that pay_amt is smaller than 1 wei of the other token\n            if (pay_amt * 1 ether < wdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)) {\n                break;                                  //We consider that all amount is sold\n            }\n            if (pay_amt >= offers[offerId].buy_amt) {                       //If amount to sell is higher or equal than current offer amount to buy\n                fill_amt = add(fill_amt, offers[offerId].pay_amt);          //Add amount bought to acumulator\n                pay_amt = sub(pay_amt, offers[offerId].buy_amt);            //Decrease amount to sell\n                take(bytes32(offerId), uint128(offers[offerId].pay_amt));   //We take the whole offer\n            } else { // if lower\n                var baux = rmul(pay_amt * 10 ** 9, rdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)) / 10 ** 9;\n                fill_amt = add(fill_amt, baux);         //Add amount bought to acumulator\n                take(bytes32(offerId), uint128(baux));  //We take the portion of the offer that we need\n                pay_amt = 0;                            //All amount is sold\n            }\n        }\n        require(fill_amt >= min_fill_amount);\n    }\n\n    function buyAllAmount(ERC20 buy_gem, uint buy_amt, ERC20 pay_gem, uint max_fill_amount)\n        public\n        returns (uint fill_amt)\n    {\n        require(!locked, \"Reentrancy attempt\");\n        uint offerId;\n        while (buy_amt > 0) {                           //Meanwhile there is amount to buy\n            offerId = getBestOffer(buy_gem, pay_gem);   //Get the best offer for the token pair\n            require(offerId != 0);\n\n            // There is a chance that buy_amt is smaller than 1 wei of the other token\n            if (buy_amt * 1 ether < wdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)) {\n                break;                                  //We consider that all amount is sold\n            }\n            if (buy_amt >= offers[offerId].pay_amt) {                       //If amount to buy is higher or equal than current offer amount to sell\n                fill_amt = add(fill_amt, offers[offerId].buy_amt);          //Add amount sold to acumulator\n                buy_amt = sub(buy_amt, offers[offerId].pay_amt);            //Decrease amount to buy\n                take(bytes32(offerId), uint128(offers[offerId].pay_amt));   //We take the whole offer\n            } else {                                                        //if lower\n                fill_amt = add(fill_amt, rmul(buy_amt * 10 ** 9, rdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)) / 10 ** 9); //Add amount sold to acumulator\n                take(bytes32(offerId), uint128(buy_amt));                   //We take the portion of the offer that we need\n                buy_amt = 0;                                                //All amount is bought\n            }\n        }\n        require(fill_amt <= max_fill_amount);\n    }\n\n    function getBuyAmount(ERC20 buy_gem, ERC20 pay_gem, uint pay_amt) public constant returns (uint fill_amt) {\n        var offerId = getBestOffer(buy_gem, pay_gem);           //Get best offer for the token pair\n        while (pay_amt > offers[offerId].buy_amt) {\n            fill_amt = add(fill_amt, offers[offerId].pay_amt);  //Add amount to buy accumulator\n            pay_amt = sub(pay_amt, offers[offerId].buy_amt);    //Decrease amount to pay\n            if (pay_amt > 0) {                                  //If we still need more offers\n                offerId = getWorseOffer(offerId);               //We look for the next best offer\n                require(offerId != 0);                          //Fails if there are not enough offers to complete\n            }\n        }\n        fill_amt = add(fill_amt, rmul(pay_amt * 10 ** 9, rdiv(offers[offerId].pay_amt, offers[offerId].buy_amt)) / 10 ** 9); //Add proportional amount of last offer to buy accumulator\n    }\n\n    function getPayAmount(ERC20 pay_gem, ERC20 buy_gem, uint buy_amt) public constant returns (uint fill_amt) {\n        var offerId = getBestOffer(buy_gem, pay_gem);           //Get best offer for the token pair\n        while (buy_amt > offers[offerId].pay_amt) {\n            fill_amt = add(fill_amt, offers[offerId].buy_amt);  //Add amount to pay accumulator\n            buy_amt = sub(buy_amt, offers[offerId].pay_amt);    //Decrease amount to buy\n            if (buy_amt > 0) {                                  //If we still need more offers\n                offerId = getWorseOffer(offerId);               //We look for the next best offer\n                require(offerId != 0);                          //Fails if there are not enough offers to complete\n            }\n        }\n        fill_amt = add(fill_amt, rmul(buy_amt * 10 ** 9, rdiv(offers[offerId].buy_amt, offers[offerId].pay_amt)) / 10 ** 9); //Add proportional amount of last offer to pay accumulator\n    }\n\n    // ---- Internal Functions ---- //\n\n    function _buys(uint id, uint amount)\n        internal\n        returns (bool)\n    {\n        require(buyEnabled);\n        if (amount == offers[id].pay_amt) {\n            if (isOfferSorted(id)) {\n                //offers[id] must be removed from sorted list because all of it is bought\n                _unsort(id);\n            }else{\n                _hide(id);\n            }\n        }\n        require(super.buy(id, amount));\n        // If offer has become dust during buy, we cancel it\n        if (isActive(id) && offers[id].pay_amt < _dust[offers[id].pay_gem]) {\n            dustId = id; //enable current msg.sender to call cancel(id)\n            cancel(id);\n        }\n        return true;\n    }\n\n    //find the id of the next higher offer after offers[id]\n    function _find(uint id)\n        internal\n        view\n        returns (uint)\n    {\n        require( id > 0 );\n\n        address buy_gem = address(offers[id].buy_gem);\n        address pay_gem = address(offers[id].pay_gem);\n        uint top = _best[pay_gem][buy_gem];\n        uint old_top = 0;\n\n        // Find the larger-than-id order whose successor is less-than-id.\n        while (top != 0 && _isPricedLtOrEq(id, top)) {\n            old_top = top;\n            top = _rank[top].prev;\n        }\n        return old_top;\n    }\n\n    //find the id of the next higher offer after offers[id]\n    function _findpos(uint id, uint pos)\n        internal\n        view\n        returns (uint)\n    {\n        require(id > 0);\n\n        // Look for an active order.\n        while (pos != 0 && !isActive(pos)) {\n            pos = _rank[pos].prev;\n        }\n\n        if (pos == 0) {\n            //if we got to the end of list without a single active offer\n            return _find(id);\n\n        } else {\n            // if we did find a nearby active offer\n            // Walk the order book down from there...\n            if(_isPricedLtOrEq(id, pos)) {\n                uint old_pos;\n\n                // Guaranteed to run at least once because of\n                // the prior if statements.\n                while (pos != 0 && _isPricedLtOrEq(id, pos)) {\n                    old_pos = pos;\n                    pos = _rank[pos].prev;\n                }\n                return old_pos;\n\n            // ...or walk it up.\n            } else {\n                while (pos != 0 && !_isPricedLtOrEq(id, pos)) {\n                    pos = _rank[pos].next;\n                }\n                return pos;\n            }\n        }\n    }\n\n    //return true if offers[low] priced less than or equal to offers[high]\n    function _isPricedLtOrEq(\n        uint low,   //lower priced offer's id\n        uint high   //higher priced offer's id\n    )\n        internal\n        view\n        returns (bool)\n    {\n        return mul(offers[low].buy_amt, offers[high].pay_amt)\n          >= mul(offers[high].buy_amt, offers[low].pay_amt);\n    }\n\n    //these variables are global only because of solidity local variable limit\n\n    //match offers with taker offer, and execute token transactions\n    function _matcho(\n        uint t_pay_amt,    //taker sell how much\n        ERC20 t_pay_gem,   //taker sell which token\n        uint t_buy_amt,    //taker buy how much\n        ERC20 t_buy_gem,   //taker buy which token\n        uint pos,          //position id\n        bool rounding      //match \"close enough\" orders?\n    )\n        internal\n        returns (uint id)\n    {\n        uint best_maker_id;    //highest maker id\n        uint t_buy_amt_old;    //taker buy how much saved\n        uint m_buy_amt;        //maker offer wants to buy this much token\n        uint m_pay_amt;        //maker offer wants to sell this much token\n\n        // there is at least one offer stored for token pair\n        while (_best[t_buy_gem][t_pay_gem] > 0) {\n            best_maker_id = _best[t_buy_gem][t_pay_gem];\n            m_buy_amt = offers[best_maker_id].buy_amt;\n            m_pay_amt = offers[best_maker_id].pay_amt;\n\n            // Ugly hack to work around rounding errors. Based on the idea that\n            // the furthest the amounts can stray from their \"true\" values is 1.\n            // Ergo the worst case has t_pay_amt and m_pay_amt at +1 away from\n            // their \"correct\" values and m_buy_amt and t_buy_amt at -1.\n            // Since (c - 1) * (d - 1) > (a + 1) * (b + 1) is equivalent to\n            // c * d > a * b + a + b + c + d, we write...\n            if (mul(m_buy_amt, t_buy_amt) > mul(t_pay_amt, m_pay_amt) +\n                (rounding ? m_buy_amt + t_buy_amt + t_pay_amt + m_pay_amt : 0))\n            {\n                break;\n            }\n            // ^ The `rounding` parameter is a compromise borne of a couple days\n            // of discussion.\n            buy(best_maker_id, min(m_pay_amt, t_buy_amt));\n            t_buy_amt_old = t_buy_amt;\n            t_buy_amt = sub(t_buy_amt, min(m_pay_amt, t_buy_amt));\n            t_pay_amt = mul(t_buy_amt, t_pay_amt) / t_buy_amt_old;\n\n            if (t_pay_amt == 0 || t_buy_amt == 0) {\n                break;\n            }\n        }\n\n        if (t_buy_amt > 0 && t_pay_amt > 0 && t_pay_amt >= _dust[t_pay_gem]) {\n            //new offer should be created\n            id = super.offer(t_pay_amt, t_pay_gem, t_buy_amt, t_buy_gem);\n            //insert offer into the sorted list\n            _sort(id, pos);\n        }\n    }\n\n    // Make a new offer without putting it in the sorted list.\n    // Takes funds from the caller into market escrow.\n    // ****Available to authorized contracts only!**********\n    // Keepers should call insert(id,pos) to put offer in the sorted list.\n    function _offeru(\n        uint pay_amt,      //maker (ask) sell how much\n        ERC20 pay_gem,     //maker (ask) sell which token\n        uint buy_amt,      //maker (ask) buy how much\n        ERC20 buy_gem      //maker (ask) buy which token\n    )\n        internal\n        returns (uint id)\n    {\n        require(_dust[pay_gem] <= pay_amt);\n        id = super.offer(pay_amt, pay_gem, buy_amt, buy_gem);\n        _near[id] = _head;\n        _head = id;\n        LogUnsortedOffer(id);\n    }\n\n    //put offer into the sorted list\n    function _sort(\n        uint id,    //maker (ask) id\n        uint pos    //position to insert into\n    )\n        internal\n    {\n        require(isActive(id));\n\n        address buy_gem = address(offers[id].buy_gem);\n        address pay_gem = address(offers[id].pay_gem);\n        uint prev_id;                                      //maker (ask) id\n\n        pos = pos == 0 || offers[pos].pay_gem != pay_gem || offers[pos].buy_gem != buy_gem || !isOfferSorted(pos)\n        ?\n            _find(id)\n        :\n            _findpos(id, pos);\n\n        if (pos != 0) {                                    //offers[id] is not the highest offer\n            //requirement below is satisfied by statements above\n            //require(_isPricedLtOrEq(id, pos));\n            prev_id = _rank[pos].prev;\n            _rank[pos].prev = id;\n            _rank[id].next = pos;\n        } else {                                           //offers[id] is the highest offer\n            prev_id = _best[pay_gem][buy_gem];\n            _best[pay_gem][buy_gem] = id;\n        }\n\n        if (prev_id != 0) {                               //if lower offer does exist\n            //requirement below is satisfied by statements above\n            //require(!_isPricedLtOrEq(id, prev_id));\n            _rank[prev_id].next = id;\n            _rank[id].prev = prev_id;\n        }\n\n        _span[pay_gem][buy_gem]++;\n        LogSortedOffer(id);\n    }\n\n    // Remove offer from the sorted list (does not cancel offer)\n    function _unsort(\n        uint id    //id of maker (ask) offer to remove from sorted list\n    )\n        internal\n        returns (bool)\n    {\n        address buy_gem = address(offers[id].buy_gem);\n        address pay_gem = address(offers[id].pay_gem);\n        require(_span[pay_gem][buy_gem] > 0);\n\n        require(_rank[id].delb == 0 &&                    //assert id is in the sorted list\n                 isOfferSorted(id));\n\n        if (id != _best[pay_gem][buy_gem]) {              // offers[id] is not the highest offer\n            require(_rank[_rank[id].next].prev == id);\n            _rank[_rank[id].next].prev = _rank[id].prev;\n        } else {                                          //offers[id] is the highest offer\n            _best[pay_gem][buy_gem] = _rank[id].prev;\n        }\n\n        if (_rank[id].prev != 0) {                        //offers[id] is not the lowest offer\n            require(_rank[_rank[id].prev].next == id);\n            _rank[_rank[id].prev].next = _rank[id].next;\n        }\n\n        _span[pay_gem][buy_gem]--;\n        _rank[id].delb = block.number;                    //mark _rank[id] for deletion\n        return true;\n    }\n\n    //Hide offer from the unsorted order book (does not cancel offer)\n    function _hide(\n        uint id     //id of maker offer to remove from unsorted list\n    )\n        internal\n        returns (bool)\n    {\n        uint uid = _head;               //id of an offer in unsorted offers list\n        uint pre = uid;                 //id of previous offer in unsorted offers list\n\n        require(!isOfferSorted(id));    //make sure offer id is not in sorted offers list\n\n        if (_head == id) {              //check if offer is first offer in unsorted offers list\n            _head = _near[id];          //set head to new first unsorted offer\n            _near[id] = 0;              //delete order from unsorted order list\n            return true;\n        }\n        while (uid > 0 && uid != id) {  //find offer in unsorted order list\n            pre = uid;\n            uid = _near[uid];\n        }\n        if (uid != id) {                //did not find offer id in unsorted offers list\n            return false;\n        }\n        _near[pre] = _near[id];         //set previous unsorted offer to point to offer after offer id\n        _near[id] = 0;                  //delete order from unsorted order list\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"matchingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sell_gem\",\"type\":\"address\"},{\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"getBestOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"min_fill_amount\",\"type\":\"uint256\"}],\"name\":\"sellAllAmount\",\"outputs\":[{\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"name\":\"buy_amt\",\"type\":\"uint128\"}],\"name\":\"make\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"pay_amt\",\"type\":\"uint256\"}],\"name\":\"getBuyAmount\",\"outputs\":[{\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"offer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_offer_id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"matchingEnabled_\",\"type\":\"bool\"}],\"name\":\"setMatchingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"del_rank\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"maxTakeAmount\",\"type\":\"uint128\"}],\"name\":\"take\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pay_gem\",\"type\":\"address\"}],\"name\":\"getMinSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dustId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNextUnsortedOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"close_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_span\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_best\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id_\",\"type\":\"bytes32\"}],\"name\":\"bump\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sell_gem\",\"type\":\"address\"},{\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"getOfferCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"max_fill_amount\",\"type\":\"uint256\"}],\"name\":\"buyAllAmount\",\"outputs\":[{\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isActive\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFirstUnsortedOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBetterOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_dust\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWorseOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_near\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"setMinSell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"name\":\"closed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rank\",\"outputs\":[{\"name\":\"next\",\"type\":\"uint256\"},{\"name\":\"prev\",\"type\":\"uint256\"},{\"name\":\"delb\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isOfferSorted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyEnabled_\",\"type\":\"bool\"}],\"name\":\"setBuyEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"pos\",\"type\":\"uint256\"},{\"name\":\"rounding\",\"type\":\"bool\"}],\"name\":\"offer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"offer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pay_gem\",\"type\":\"address\"},{\"name\":\"buy_gem\",\"type\":\"address\"},{\"name\":\"buy_amt\",\"type\":\"uint256\"}],\"name\":\"getPayAmount\",\"outputs\":[{\"name\":\"fill_amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"close_time\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogItemUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pay_amt\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buy_amt\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buy_gem\",\"type\":\"address\"}],\"name\":\"LogTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"buy_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogMake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"buy_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogBump\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"take_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"give_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogTake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"pair\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buy_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"buy_amt\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"LogKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"LogBuyEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pay_gem\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"min_amount\",\"type\":\"uint256\"}],\"name\":\"LogMinSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"LogMatchingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogUnsortedOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogSortedOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogInsert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogDelete\",\"type\":\"event\"}]",
  "bytecode": "608060405260048054605860020a60ff0219605060020a60ff02199091166a010000000000000000000017166b01000000000000000000000017905534801561004757600080fd5b50604051602080613420833981016040819052905160018054600160a060020a0319163390811790915590918291907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a26004805467ffffffffffffffff9092166101000268ffffffffffffffff00199092169190911790555061334c806100d46000396000f3006080604052600436106102455763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301492a0b811461024a5780630374fc6f146102735780630621b4f6146102ac57806307da68f5146102da578063093f5198146102f157806313af40351461032a578063144a27521461034b5780631b33d412146103755780631d834a1b146103a6578063232cae0b146103c15780632aed1905146103d657806340e58ee5146103f05780634579268a14610408578063467f0b7b146104515780634960645514610469578063511fa4871461048d578063557ed1ba146104ae57806356ad8764146104e057806361f54a79146104f55780636377ebca1461050d578063677170e11461052257806374c1d7d31461054957806375f12b2114610570578063779997c3146105855780637a9e5e4b1461059d5780637ca9429a146105be5780638185402b146105e557806382afd23b146106135780638a72ea6a1461062b5780638af82a2e1461068d5780638da5cb5b146106a2578063911550f4146106d357806391be90c8146106eb578063943911bc1461070c578063a78d431614610724578063b4f9b6c81461073c578063bf7c734e14610754578063bf7e214f14610778578063c2b6b58c1461078d578063c2d526aa146107a2578063c41a360a146107d8578063d2b420ce146107f0578063d6f1546914610808578063d6febde814610822578063e1a6f0141461083d578063f09ea2a614610873578063f582d293146108a1578063ff1fd974146108b6575b600080fd5b34801561025657600080fd5b5061025f6108e0565b604080519115158252519081900360200190f35b34801561027f57600080fd5b5061029a600160a060020a03600435811690602435166108f8565b60408051918252519081900360200190f35b3480156102b857600080fd5b5061029a600160a060020a036004358116906024359060443516606435610925565b3480156102e657600080fd5b506102ef610ab4565b005b3480156102fd57600080fd5b5061029a600160a060020a03600435811690602435166001608060020a0360443581169060643516610af6565b34801561033657600080fd5b506102ef600160a060020a0360043516610b1f565b34801561035757600080fd5b5061029a600160a060020a0360043581169060243516604435610b9d565b34801561038157600080fd5b5061029a600435600160a060020a036024358116906044359060643516608435610c69565b3480156103b257600080fd5b5061025f600435602435610c96565b3480156103cd57600080fd5b5061029a610d61565b3480156103e257600080fd5b5061025f6004351515610d67565b3480156103fc57600080fd5b5061025f600435610dfd565b34801561041457600080fd5b50610420600435611033565b60408051948552600160a060020a039384166020860152848101929092529091166060830152519081900360800190f35b34801561045d57600080fd5b5061025f600435611069565b34801561047557600080fd5b506102ef6004356001608060020a0360243516611168565b34801561049957600080fd5b5061029a600160a060020a036004351661118a565b3480156104ba57600080fd5b506104c36111a5565b6040805167ffffffffffffffff9092168252519081900360200190f35b3480156104ec57600080fd5b5061029a6111a9565b34801561050157600080fd5b5061029a6004356111af565b34801561051957600080fd5b506104c36111c1565b34801561052e57600080fd5b5061029a600160a060020a03600435811690602435166111d6565b34801561055557600080fd5b5061029a600160a060020a03600435811690602435166111f3565b34801561057c57600080fd5b5061025f611210565b34801561059157600080fd5b506102ef600435611226565b3480156105a957600080fd5b506102ef600160a060020a0360043516611326565b3480156105ca57600080fd5b5061029a600160a060020a03600435811690602435166113a0565b3480156105f157600080fd5b5061029a600160a060020a0360043581169060243590604435166064356113cb565b34801561061f57600080fd5b5061025f60043561153f565b34801561063757600080fd5b50610643600435611566565b60408051968752600160a060020a039586166020880152868101949094529184166060860152909216608084015267ffffffffffffffff90911660a0830152519081900360c00190f35b34801561069957600080fd5b5061029a6115b8565b3480156106ae57600080fd5b506106b76115be565b60408051600160a060020a039092168252519081900360200190f35b3480156106df57600080fd5b5061029a6004356115cd565b3480156106f757600080fd5b5061029a600160a060020a03600435166115df565b34801561071857600080fd5b5061029a6004356115f1565b34801561073057600080fd5b5061029a600435611606565b34801561074857600080fd5b506102ef600435611618565b34801561076057600080fd5b5061025f600160a060020a036004351660243561162f565b34801561078457600080fd5b506106b7611703565b34801561079957600080fd5b5061025f611712565b3480156107ae57600080fd5b506107ba600435611759565b60408051938452602084019290925282820152519081900360600190f35b3480156107e457600080fd5b506106b760043561177a565b3480156107fc57600080fd5b5061025f600435611798565b34801561081457600080fd5b5061025f6004351515611809565b34801561082e57600080fd5b5061025f60043560243561189d565b34801561084957600080fd5b5061029a600435600160a060020a03602435811690604435906064351660843560a4351515611947565b34801561087f57600080fd5b5061029a600435600160a060020a036024358116906044359060643516611a0f565b3480156108ad57600080fd5b5061025f611a96565b3480156108c257600080fd5b5061029a600160a060020a0360043581169060243516604435611aad565b6004546b010000000000000000000000900460ff1681565b600160a060020a038083166000908152600660209081526040808320938516835292905220545b92915050565b6004546000908190819060ff1615610975576040805160e560020a62461bcd0281526020600482015260126024820152600080516020613301833981519152604482015290519081900360640190fd5b6000861115610a9d5761098885886108f8565b915081151561099657600080fd5b6000828152600360205260409020600281015490546109b59190611b66565b86670de0b6b3a76400000210156109cb57610a9d565b6000828152600360205260409020600201548610610a3f576000828152600360205260409020546109fd908490611b97565b600083815260036020526040902060020154909350610a1d908790611ba7565b600083815260036020526040902054909650610a3a908390611168565b610a98565b60008281526003602052604090208054600290910154633b9aca0091610a719189840291610a6c91611bb7565b611bd3565b811515610a7a57fe5b049050610a878382611b97565b9250610a938282611168565b600095505b610975565b83831015610aaa57600080fd5b5050949350505050565b610aca33600035600160e060020a031916611c03565b1515610ad557600080fd5b6004805469ff00000000000000000019166901000000000000000000179055565b6000610b16836001608060020a031686846001608060020a031687611a0f565b95945050505050565b610b3533600035600160e060020a031916611c03565b1515610b4057600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b600080610baa85856108f8565b90505b600081815260036020526040902060020154831115610c2757600081815260036020526040902054610be0908390611b97565b600082815260036020526040902060020154909250610c00908490611ba7565b92506000831115610c2257610c14816115f1565b9050801515610c2257600080fd5b610bad565b60008181526003602052604090208054600290910154610b16918491633b9aca0091610c5a9188840291610a6c91611bb7565b811515610c6357fe5b04611b97565b6000610c73611712565b15610c7d57600080fd5b610c8c86868686866001611947565b9695505050505050565b60045460009060ff1615610ce2576040805160e560020a62461bcd0281526020600482015260126024820152600080516020613301833981519152604482015290519081900360640190fd5b610ceb83611798565b15610cf557600080fd5b610cfe8361153f565b1515610d0957600080fd5b610d1283611d0a565b50610d1d8383611db2565b604080513381526020810185905281517f6d5c16212bdea16850dce4d9fa2314c446bd30ce84700d9c36c7677c6d283940929181900390910190a150600192915050565b60025481565b6000610d7f33600035600160e060020a031916611c03565b1515610d8a57600080fd5b600480548315156b0100000000000000000000009081026bff0000000000000000000000199092169190911791829055604080519190920460ff161515815290517fea11e00ec1642be9b494019b756440e2c57dbe9e59242c4f9c64ce33fb4f41d99181900360200190a1506001919050565b600081610e098161153f565b1515610e85576040805160e560020a62461bcd02815260206004820152602d60248201527f4f66666572207761732064656c65746564206f722074616b656e2c206f72206e60448201527f6576657220657869737465642e00000000000000000000000000000000000000606482015290519081900360840190fd5b610e8d611712565b80610eb15750610e9c8161177a565b600160a060020a031633600160a060020a0316145b80610ebd5750600b5481145b1515610f85576040805160e560020a62461bcd02815260206004820152607460248201527f4f666665722063616e206e6f742062652063616e63656c6c656420626563617560448201527f73652075736572206973206e6f74206f776e65722c20616e64206d61726b657460648201527f206973206f70656e2c20616e64206f666665722073656c6c732072657175697260848201527f656420616d6f756e74206f6620746f6b656e732e00000000000000000000000060a482015290519081900360c40190fd5b60045460ff1615610fce576040805160e560020a62461bcd0281526020600482015260126024820152600080516020613301833981519152604482015290519081900360640190fd5b6004546b010000000000000000000000900460ff161561102357610ff183611798565b1561100f57610fff83611f5c565b151561100a57600080fd5b611023565b61101883611d0a565b151561102357600080fd5b61102c8361211c565b9392505050565b600090815260036020819052604090912080546001820154600283015492909301549093600160a060020a039384169390911690565b60045460009060ff16156110b5576040805160e560020a62461bcd0281526020600482015260126024820152600080516020613301833981519152604482015290519081900360640190fd5b6110be8261153f565b1580156110db575060008281526005602052604090206002015415155b80156110fb57506000828152600560205260409020600201546009194301115b151561110657600080fd5b60008281526005602090815260408083208381556001810184905560020192909255815133815290810184905281517fcb9d6176c6aac6478ebb9a2754cdce22a944de29ed1f2642f8613884eba4b40c929181900390910190a1506001919050565b61117b826001608060020a03831661189d565b151561118657600080fd5b5050565b600160a060020a031660009081526008602052604090205490565b4290565b600b5481565b60009081526009602052604090205490565b600454610100900467ffffffffffffffff1681565b600760209081526000928352604080842090915290825290205481565b600660209081526000928352604080842090915290825290205481565b6004546901000000000000000000900460ff1681565b6000816112328161153f565b151561123d57600080fd5b611245611712565b1561124f57600080fd5b6000838152600360208181526040808420600481015460018201548286015484516c01000000000000000000000000600160a060020a03938416818102835292841690810260148301528651918290036028018220998d90529787528454600290950154918152958601969096526001608060020a039283168585015291909416606084015267ffffffffffffffff60a060020a850416608084015290518796509216929185917f70a14c213064359ede031fd2a1645a11ce2ec825ffe6ab5cfb5b160c3ef4d0a2919081900360a00190a4505050565b61133c33600035600160e060020a031916611c03565b151561134757600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091178083556040519116917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b600454600090819060ff1615611419576040805160e560020a62461bcd0281526020600482015260126024820152600080516020613301833981519152604482015290519081900360640190fd5b60008511156115295761142c86856108f8565b905080151561143a57600080fd5b6000818152600360205260409020805460029091015461145a9190611b66565b85670de0b6b3a764000002101561147057611529565b60008181526003602052604090205485106114e1576000818152600360205260409020600201546114a2908390611b97565b6000828152600360205260409020549092506114bf908690611ba7565b6000828152600360205260409020549095506114dc908290611168565b611524565b600081815260036020526040902060028101549054611513918491633b9aca0091610c5a918a840291610a6c91611bb7565b915061151f8186611168565b600094505b611419565b8282111561153657600080fd5b50949350505050565b60009081526003602052604081206004015460a060020a900467ffffffffffffffff161190565b6003602081905260009182526040909120805460018201546002830154938301546004909301549193600160a060020a039182169390929082169181169060a060020a900467ffffffffffffffff1686565b600a5490565b600154600160a060020a031681565b60009081526005602052604090205490565b60086020526000908152604090205481565b60009081526005602052604090206001015490565b60096020526000908152604090205481565b61162181610dfd565b151561162c57600080fd5b50565b600061164733600035600160e060020a031916611c03565b151561165257600080fd5b60408051348082526020820183815236938301849052600435936024359384938693339360008035600160e060020a031916949092606082018484808284376040519201829003965090945050505050a4600160a060020a0385166000818152600860209081526040918290208790558151928352820186905280517fc28d56449b0bb31e64ee7487e061f57a2e72aea8019d810832f26dda099823d09281900390910190a1506001949350505050565b600054600160a060020a031681565b6004546000906901000000000000000000900460ff16806117545750600454610100900467ffffffffffffffff166117486111a5565b67ffffffffffffffff16115b905090565b60056020526000908152604090208054600182015460029092015490919083565b600090815260036020526040902060040154600160a060020a031690565b6000818152600560205260408120541515806117c4575060008281526005602052604090206001015415155b8061091f57505060008181526003602081815260408084206001810154600160a060020a03908116865260068452828620919094015490931684529190529020541490565b600061182133600035600160e060020a031916611c03565b151561182c57600080fd5b600480548315156a01000000000000000000009081026aff00000000000000000000199092169190911791829055604080519190920460ff161515815290517f7089e4f0bcc948f9f723a361590c32d9c2284da7ab1981b1249ad2edb9f953c19181900360200190a1506001919050565b60006132c9836118ac8161153f565b15156118b757600080fd5b6118bf611712565b156118c957600080fd5b60045460ff1615611912576040805160e560020a62461bcd0281526020600482015260126024820152600080516020613301833981519152604482015290519081900360640190fd5b6004546b010000000000000000000000900460ff1661193357612623611937565b612ac65b9150610b1685858463ffffffff16565b6000611951611712565b1561195b57600080fd5b60045460ff16156119a4576040805160e560020a62461bcd0281526020600482015260126024820152600080516020613301833981519152604482015290519081900360640190fd5b600160a060020a0386166000908152600860205260409020548710156119c957600080fd5b6004546b010000000000000000000000900460ff16156119f8576119f1878787878787612b9c565b9050610c8c565b611a0487878787612d03565b979650505050505050565b6004546000906132c99060ff1615611a5f576040805160e560020a62461bcd0281526020600482015260126024820152600080516020613301833981519152604482015290519081900360640190fd5b6004546b010000000000000000000000900460ff16611a8057612d03611a84565b61303a5b9050610c8c868686868563ffffffff16565b6004546a0100000000000000000000900460ff1681565b600080611aba84866108f8565b90505b600081815260036020526040902054831115611b3457600081815260036020526040902060020154611af0908390611b97565b600082815260036020526040902054909250611b0d908490611ba7565b92506000831115611b2f57611b21816115f1565b9050801515611b2f57600080fd5b611abd565b600081815260036020526040902060028101549054610b16918491633b9aca0091610c5a9188840291610a6c91611bb7565b600081611b86611b7e85670de0b6b3a76400006130c4565b600285610c63565b811515611b8f57fe5b049392505050565b8082018281101561091f57600080fd5b8082038281111561091f57600080fd5b600081611b86611b7e856b033b2e3c9fd0803ce80000006130c4565b60006b033b2e3c9fd0803ce8000000611b86611bef85856130c4565b60026b033b2e3c9fd0803ce8000000610c63565b6000600160a060020a038316301415611c1e5750600161091f565b600154600160a060020a0384811691161415611c3c5750600161091f565b600054600160a060020a03161515611c565750600061091f565b60008054604080517fb7009613000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152306024830152600160e060020a0319871660448301529151919092169263b700961392606480820193602093909283900390910190829087803b158015611cd757600080fd5b505af1158015611ceb573d6000803e3d6000fd5b505050506040513d6020811015611d0157600080fd5b5051905061091f565b600a5460009080611d1a84611798565b15611d2457600080fd5b83600a541415611d4b5760008481526009602052604081208054600a555560019250611dab565b5b600082118015611d5c5750838214155b15611d77575060008181526009602052604090205490611d4c565b818414611d875760009250611dab565b60008481526009602052604080822080548484529183209190915585825255600192505b5050919050565b6000806000611dc08561153f565b1515611dcb57600080fd5b600085815260036020819052604090912090810154600190910154600160a060020a039182169450169150831580611e205750600084815260036020526040902060010154600160a060020a03838116911614155b80611e49575060008481526003602081905260409091200154600160a060020a03848116911614155b80611e5a5750611e5884611798565b155b611e6d57611e6885856130ec565b611e76565b611e76856131cb565b93508315611ea457506000838152600560205260408082206001018054908790558683529120849055611ed1565b50600160a060020a0381811660009081526006602090815260408083209386168352929052208054908590555b8015611ef55760008181526005602052604080822087905586825290206001018190555b600160a060020a03808316600090815260076020908152604080832093871683529281529082902080546001019055815187815291517f20fb9bad86c18f7e22e8065258790d9416a7d2df8ff05f80f82c46d38b925acd9281900390910190a15050505050565b600081815260036020818152604080842092830154600190930154600160a060020a03908116808652600784528286209190941680865292528320549091908310611fa657600080fd5b600084815260056020526040902060020154158015611fc95750611fc984611798565b1515611fd457600080fd5b600160a060020a03808216600090815260066020908152604080832093861683529290522054841461204757600084815260056020526040808220548252902060010154841461202357600080fd5b6000848152600560205260408082206001808201549154845291909220015561207d565b600084815260056020908152604080832060010154600160a060020a038086168552600684528285209087168552909252909120555b600084815260056020526040902060010154156120d45760008481526005602052604080822060010154825290205484146120b757600080fd5b600084815260056020526040808220805460019091015483529120555b600160a060020a039081166000908152600760209081526040808320949093168252928352818120805460001901905593845260059091529091204360029091015550600190565b60006121266132cb565b826121308161153f565b15156121ac576040805160e560020a62461bcd02815260206004820152602d60248201527f4f66666572207761732064656c65746564206f722074616b656e2c206f72206e60448201527f6576657220657869737465642e00000000000000000000000000000000000000606482015290519081900360840190fd5b6121b4611712565b806121d857506121c38161177a565b600160a060020a031633600160a060020a0316145b806121e45750600b5481145b15156122ac576040805160e560020a62461bcd02815260206004820152607460248201527f4f666665722063616e206e6f742062652063616e63656c6c656420626563617560448201527f73652075736572206973206e6f74206f776e65722c20616e64206d61726b657460648201527f206973206f70656e2c20616e64206f666665722073656c6c732072657175697260848201527f656420616d6f756e74206f6620746f6b656e732e00000000000000000000000060a482015290519081900360c40190fd5b60045460ff16156122bc57600080fd5b6001600460006101000a81548160ff0219169083151502179055506003600085815260200190815260200160002060c06040519081016040529081600082015481526020016001820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a03168152602001600282015481526020016003820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016004820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016004820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509150600360008581526020019081526020016000206000808201600090556001820160006101000a815490600160a060020a03021916905560028201600090556003820160006101000a815490600160a060020a0302191690556004820160006101000a815490600160a060020a0302191690556004820160146101000a81549067ffffffffffffffff021916905550508160200151600160a060020a031663a9059cbb836080015184600001516040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156124e257600080fd5b505af11580156124f6573d6000803e3d6000fd5b505050506040513d602081101561250c57600080fd5b5051151561251957600080fd5b6040805185815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a16080808301516020808501805160608088018051604080516c01000000000000000000000000600160a060020a039687168102825292861690920260148301528051918290036028018220955192518b51828d01519487168452908616978301979097526001608060020a0396871682820152959091169181019190915267ffffffffffffffff4216958101959095529151919092169287917f9577941d28fff863bfbee4694a6a4a56fb09e169619189d2eaa750b5b48199959181900360a00190a450506004805460ff19169055506001919050565b600061262d6132cb565b6000846126398161153f565b151561264457600080fd5b61264c611712565b1561265657600080fd5b60045460ff161561266657600080fd5b60048054600160ff1990911681178255600088815260036020818152604092839020835160c081018552815480825295820154600160a060020a03908116938201939093526002820154948101859052928101548216606084015290940154938416608082015260a060020a90930467ffffffffffffffff1660a0840152919450906126f39087906130c4565b8115156126fc57fe5b0491506001608060020a038216821461271457600080fd5b6001608060020a038516851461272957600080fd5b841580612734575081155b8061273f5750825185115b8061274d5750826040015182115b1561275b5760009350612ab3565b82516127679086611ba7565b60008781526003602052604090819020919091558301516127889083611ba7565b6000878152600360209081526040808320600201939093556060860151608087015184517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0391821660248201526044810188905294519116936323b872dd9360648083019493928390030190829087803b15801561281557600080fd5b505af1158015612829573d6000803e3d6000fd5b505050506040513d602081101561283f57600080fd5b5051151561284c57600080fd5b602080840151604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018990529051600160a060020a039092169263a9059cbb926044808401938290030181600087803b1580156128b657600080fd5b505af11580156128ca573d6000803e3d6000fd5b505050506040513d60208110156128e057600080fd5b505115156128ed57600080fd5b6040805187815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a16080808401516020808601805160608089018051604080516c01000000000000000000000000600160a060020a039687168102825292861690920260148301528051918290036028018220955192518f835292851696820196909652908316818601526001608060020a03808d16928201929092529088169581019590955267ffffffffffffffff421660a086015291513394939092169290917f3383e3357c77fd2e3a4b30deea81179bc70a795d053d14d5b7f2f01d0fd4596f9181900360c00190a48260600151600160a060020a03168360200151600160a060020a03167f819e390338feffe95e2de57172d6faf337853dfd15c7a09a32d76f7fd24438758785604051808381526020018281526020019250505060405180910390a36000868152600360205260409020541515612aae576000868152600360208190526040822082815560018101805473ffffffffffffffffffffffffffffffffffffffff19908116909155600282019390935590810180549092169091556004018054600160e060020a03191690555b600193505b50506004805460ff191690555092915050565b6004546000906a0100000000000000000000900460ff161515612ae857600080fd5b600083815260036020526040902054821415612b2657612b0783611798565b15612b1b57612b1583611f5c565b50612b26565b612b2483611d0a565b505b612b308383612623565b1515612b3b57600080fd5b612b448361153f565b8015612b7e575060008381526003602081815260408084206001810154600160a060020a0316855260088352908420549387905291905254105b15612b9357600b839055612b9183610dfd565b505b50600192915050565b60008060008060005b600160a060020a038089166000908152600660209081526040808320938e168352929052908120541115612ca4575050600160a060020a038087166000908152600660209081526040808320938c168352928152828220548083526003909152919020600281015490549193509085612c1f576000612c27565b808b8a840101015b612c318c836130c4565b01612c3c838b6130c4565b1115612c4757612ca4565b612c5a84612c55838c613254565b61189d565b50889250612c7189612c6c838c613254565b611ba7565b985082612c7e8a8d6130c4565b811515612c8757fe5b049a508a1580612c95575088155b15612c9f57612ca4565b612ba5565b600089118015612cb4575060008b115b8015612cd85750600160a060020a038a166000908152600860205260409020548b10155b15612cf557612ce98b8b8b8b612d03565b9450612cf58588611db2565b505050509695505050505050565b6000612d0d6132cb565b612d15611712565b15612d1f57600080fd5b60045460ff1615612d2f57600080fd5b6004805460ff191660011790556001608060020a0386168614612d5157600080fd5b6001608060020a0384168414612d6657600080fd5b60008611612d7357600080fd5b600160a060020a0385161515612d8857600080fd5b60008411612d9557600080fd5b600160a060020a0383161515612daa57600080fd5b600160a060020a038581169084161415612dc357600080fd5b858152600160a060020a038086166020830152604082018590528316606082015233608082015267ffffffffffffffff421660a0820152612e0261326b565b60008181526003602081815260408084208651815582870151600182018054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff1991821617909155838901516002840155606089015195830180549683169682169690961790955560808801516004928301805460a08b015167ffffffffffffffff1660a060020a027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff9385169190981617919091169590951790945581517f23b872dd0000000000000000000000000000000000000000000000000000000081523391810191909152306024820152604481018c90529051949650918916936323b872dd936064808501948390030190829087803b158015612f2357600080fd5b505af1158015612f37573d6000803e3d6000fd5b505050506040513d6020811015612f4d57600080fd5b50511515612f5a57600080fd5b6040805183815290517fa2c251311b1a7a475913900a2a73dc9789a21b04bc737e050bbc506dd4eb34889181900360200190a1604080516c01000000000000000000000000600160a060020a0388811682810284529087169182026014840152835192839003602801832090835260208301919091526001608060020a03808a16838501528716606083015267ffffffffffffffff42166080830152915133929185917f773ff502687307abfa024ac9f62f9752a0d210dac2ffd9a29e38e12e2ea82c829181900360a00190a4506004805460ff19169055949350505050565b600160a060020a03831660009081526008602052604081205485101561305f57600080fd5b61306b85858585612d03565b600a80546000838152600960209081526040918290209290925591839055815183815291519293507f8173832a493e0a3989e521458e55bfe9feac9f9b675a94e100b9d5a85f81486292918290030190a1949350505050565b60008115806130e15750508082028282828115156130de57fe5b04145b151561091f57600080fd5b6000808084116130fb57600080fd5b8215801590613110575061310e8361153f565b155b1561312e5760009283526005602052604090922060010154916130fb565b8215156131455761313e846131cb565b91506131c4565b61314f8484613279565b1561318f575b821580159061316957506131698484613279565b15613187575060008281526005602052604090206001015491613155565b8091506131c4565b82158015906131a557506131a38484613279565b155b156131c057600092835260056020526040909220549161318f565b8291505b5092915050565b6000808080808086116131dd57600080fd5b505050600083815260036020818152604080842092830154600190930154600160a060020a039081168086526006845282862091909416808652925283205490935090915b811580159061323657506132368683613279565b15610b16575060008181526005602052604090206001015490613222565b600081831115613264578161102c565b5090919050565b600280546001019081905590565b600081815260036020526040808220600201548483529082205461329d91906130c4565b600084815260036020526040808220600201548583529120546132c091906130c4565b10159392505050565bfe5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091529056005265656e7472616e637920617474656d70740000000000000000000000000000a165627a7a7230582070d9b1bb53fdc3bcb3297c97da72225e59da3f32a97ae9359d07e6a96556eddd0029000000000000000000000000000000000000000000000000000000005e3ea2c0",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005e3ea2c0"
}