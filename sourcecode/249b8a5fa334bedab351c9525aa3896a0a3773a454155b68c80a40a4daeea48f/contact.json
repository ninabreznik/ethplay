{
  "address": "0x51c8d180ffa4c81dfe719c162c935444530a8f73",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SuperStarsCard",
  "compilerVersion": "v0.4.26+commit.4563c3fc",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-05\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 indexed tokenId\n  );\n  event Approval(\n    address indexed owner,\n    address indexed approved,\n    uint256 indexed tokenId\n  );\n  event ApprovalForAll(\n    address indexed owner,\n    address indexed operator,\n    bool approved\n  );\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n  function approve(address to, uint256 tokenId) public;\n  function getApproved(uint256 tokenId)\n    public view returns (address operator);\n\n  function setApprovalForAll(address operator, bool _approved) public;\n  function isApprovedForAll(address owner, address operator)\n    public view returns (bool);\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n    public;\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes data\n  )\n    public;\n}\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safeTransfer`. This function MUST return the function selector,\n   * otherwise the caller will revert the transaction. The selector to be\n   * returned can be obtained as `this.onERC721Received.selector`. This\n   * function MAY throw to revert and reject the transfer.\n   * Note: the ERC721 contract address is always the message sender.\n   * @param operator The address which called `safeTransferFrom` function\n   * @param from The address which previously owned the token\n   * @param tokenId The NFT identifier which is being transferred\n   * @param data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes data\n  )\n    public\n    returns(bytes4);\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param account address of the account to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(account) }\n    return size > 0;\n  }\n\n}\n\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) private _supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    internal\n  {\n    _registerInterface(_InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return _supportedInterfaces[interfaceId];\n  }\n\n  /**\n   * @dev internal method for registering an interface\n   */\n  function _registerInterface(bytes4 interfaceId)\n    internal\n  {\n    require(interfaceId != 0xffffffff);\n    _supportedInterfaces[interfaceId] = true;\n  }\n}\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC165, IERC721 {\n\n  using SafeMath for uint256;\n  using Address for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) private _tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) private _ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address owner) public view returns (uint256) {\n    require(owner != address(0));\n    return _ownedTokensCount[owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 tokenId) public view returns (address) {\n    address owner = _tokenOwner[tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param to address to be approved for the given token ID\n   * @param tokenId uint256 ID of the token to be approved\n   */\n  function approve(address to, uint256 tokenId) public {\n    address owner = ownerOf(tokenId);\n    require(to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    _tokenApprovals[tokenId] = to;\n    emit Approval(owner, to, tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * Reverts if the token ID does not exist.\n   * @param tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 tokenId) public view returns (address) {\n    require(_exists(tokenId));\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param to operator address to set the approval\n   * @param approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address to, bool approved) public {\n    require(to != msg.sender);\n    _operatorApprovals[msg.sender][to] = approved;\n    emit ApprovalForAll(msg.sender, to, approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param owner owner address which you want to query the approval of\n   * @param operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address owner,\n    address operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    require(_isApprovedOrOwner(msg.sender, tokenId));\n    require(to != address(0));\n\n    _clearApproval(from, tokenId);\n    _removeTokenFrom(from, tokenId);\n    _addTokenTo(to, tokenId);\n\n    emit Transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param from current owner of the token\n   * @param to address to receive the ownership of the given token ID\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    public\n  {\n    transferFrom(from, to, tokenId);\n    // solium-disable-next-line arg-overflow\n    require(_checkOnERC721Received(from, to, tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function _exists(uint256 tokenId) internal view returns (bool) {\n    address owner = _tokenOwner[tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param spender address of the spender to query\n   * @param tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function _isApprovedOrOwner(\n    address spender,\n    uint256 tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      spender == owner ||\n      getApproved(tokenId) == spender ||\n      isApprovedForAll(owner, spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to The address that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    require(to != address(0));\n    _addTokenTo(to, tokenId);\n    emit Transfer(address(0), to, tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    _clearApproval(owner, tokenId);\n    _removeTokenFrom(owner, tokenId);\n    emit Transfer(owner, address(0), tokenId);\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    require(_tokenOwner[tokenId] == address(0));\n    _tokenOwner[tokenId] = to;\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n   * and doesn't clear approvals.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    require(ownerOf(tokenId) == from);\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n    _tokenOwner[tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!to.isContract()) {\n      return true;\n    }\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\n      msg.sender, from, tokenId, _data);\n    return (retval == _ERC721_RECEIVED);\n  }\n\n  /**\n   * @dev Private function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param owner owner of the token\n   * @param tokenId uint256 ID of the token to be transferred\n   */\n  function _clearApproval(address owner, uint256 tokenId) private {\n    require(ownerOf(tokenId) == owner);\n    if (_tokenApprovals[tokenId] != address(0)) {\n      _tokenApprovals[tokenId] = address(0);\n    }\n  }\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Metadata is IERC721 {\n  function name() external view returns (string);\n  function symbol() external view returns (string);\n  function tokenURI(uint256 tokenId) external view returns (string);\n}\n\n\n\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) private _tokenURIs;\n\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string name, string symbol) public {\n    _name = name;\n    _symbol = symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string) {\n    return _name;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 tokenId) external view returns (string) {\n    require(_exists(tokenId));\n    return _tokenURIs[tokenId];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param tokenId uint256 ID of the token to set its URI\n   * @param uri string URI to assign\n   */\n  function _setTokenURI(uint256 tokenId, string uri) internal {\n    require(_exists(tokenId));\n    _tokenURIs[tokenId] = uri;\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param owner owner of the token to burn\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\n      delete _tokenURIs[tokenId];\n    }\n  }\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721Enumerable is IERC721 {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256 tokenId);\n\n  function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\n\n\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) private _ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) private _ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] private _allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) private _allTokensIndex;\n\n  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  /**\n   * @dev Constructor function\n   */\n  constructor() public {\n    // register the supported interface to conform to ERC721 via ERC165\n    _registerInterface(_InterfaceId_ERC721Enumerable);\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param owner address owning the tokens list to be accessed\n   * @param index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address owner,\n    uint256 index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(index < balanceOf(owner));\n    return _ownedTokens[owner][index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return _allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 index) public view returns (uint256) {\n    require(index < totalSupply());\n    return _allTokens[index];\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * This function is internal due to language limitations, see the note in ERC721.sol.\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n   * @param to address representing the new owner of the given token ID\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function _addTokenTo(address to, uint256 tokenId) internal {\n    super._addTokenTo(to, tokenId);\n    uint256 length = _ownedTokens[to].length;\n    _ownedTokens[to].push(tokenId);\n    _ownedTokensIndex[tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * This function is internal due to language limitations, see the note in ERC721.sol.\n   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n   * and doesn't clear approvals.\n   * @param from address representing the previous owner of the given token ID\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\n    super._removeTokenFrom(from, tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n\n    _ownedTokens[from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    _ownedTokens[from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    _ownedTokensIndex[tokenId] = 0;\n    _ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param to address the beneficiary that will own the minted token\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address to, uint256 tokenId) internal {\n    super._mint(to, tokenId);\n\n    _allTokensIndex[tokenId] = _allTokens.length;\n    _allTokens.push(tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param owner owner of the token to burn\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address owner, uint256 tokenId) internal {\n    super._burn(owner, tokenId);\n\n    // Reorg all tokens array\n    uint256 tokenIndex = _allTokensIndex[tokenId];\n    uint256 lastTokenIndex = _allTokens.length.sub(1);\n    uint256 lastToken = _allTokens[lastTokenIndex];\n\n    _allTokens[tokenIndex] = lastToken;\n    _allTokens[lastTokenIndex] = 0;\n\n    _allTokens.length--;\n    _allTokensIndex[tokenId] = 0;\n    _allTokensIndex[lastToken] = tokenIndex;\n  }\n}\n\n\n\n\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n    public\n  {\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n\ncontract SuperStarsCardInfo is Ownable {\n    using SafeMath for uint64;\n    using SafeMath for uint256;\n\n    struct CardInfo {\n        // The Hash value of crypto asset\n        bytes32 cardHash;\n        // Card Type\n        string cardType;\n        // Card name\n        string name;\n        // Total issue amount\n        uint64 totalIssue;\n        // Timestamp of issued card\n        uint64 issueTime;\n    }\n\n    // All of issued card info\n    CardInfo[] cardInfos;\n    // Mapping from cardinfo id to position in the cardInfos array\n    mapping(uint256 => uint256) cardInfosIndex;\n\n    // An array of card type string\n    string[] cardTypes;\n\n    // The mapping value that checking card info exist.\n    mapping(bytes32 => bool) cardHashToExist;\n    mapping(uint256 => uint64) cardInfoIdToIssueCnt;\n    mapping(uint256 => mapping(uint64 => bool)) cardInfoIdToIssueNumToExist;\n\n    constructor() public\n    {\n        CardInfo memory _cardInfo = CardInfo({\n            cardHash: 0,\n            name: \"\",\n            cardType: \"\",\n            totalIssue: 0,\n            issueTime: uint64(now)\n        });\n        cardInfos.push(_cardInfo);\n\n        _addCardType(\"None\");\n        _addCardType(\"Normal1\");\n        _addCardType(\"Normal2\");\n        _addCardType(\"Rare\");\n        _addCardType(\"Epic\");\n\n    }\n\n    function _addCardType(string _cardType) internal onlyOwner returns (uint256) {\n        require(bytes(_cardType).length > 0, \"_cardType length must be greater than 0.\");\n        return cardTypes.push(_cardType);\n    }\n\n    function addCardType(string _cardType) external onlyOwner returns (uint256) {\n        return _addCardType(_cardType);\n    }\n\n    function getCardTypeCount() external view returns (uint256) {\n        return cardTypes.length;\n    }\n\n    function getCardTypeByIndex(uint64 _index) external view returns (string) {\n        return cardTypes[_index];\n    }\n\n    // Internal function that add new card info\n    function _addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        internal\n    {\n        // Input value can NOT exceed cardTypes length\n        require(_cardTypeIndex < cardTypes.length, \"CardTypeIndex can NOT exceed the cardTypes length.\");\n        // Only allow adding card infos that have NOT already been added.\n        require(cardHashToExist[_cardHash] == false, \"Only allow adding card info that have NOT already been added.\");\n\n        CardInfo memory _cardInfo = CardInfo({\n            cardHash: _cardHash,\n            name: _name,\n            cardType: cardTypes[_cardTypeIndex],\n            totalIssue: _totalIssue,\n            issueTime: uint64(now)\n        });\n\n        // Mapping for prevent additional issuance of already issued cards.\n        cardHashToExist[_cardHash] = true;\n\n        cardInfosIndex[_cardInfoId] = cardInfos.length;\n        cardInfos.push(_cardInfo);\n        cardInfoIdToIssueCnt[_cardInfoId] = 0;\n    }\n\n    // External function that add card info\n    // Only allow to admin(Owner)\n    function addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        external\n        onlyOwner\n    {\n        _addCardInfo(_cardInfoId, _cardHash, _name, _cardTypeIndex, _totalIssue);\n    }\n\n    function getCardInfo(\n        uint256 _cardInfoId\n    )\n        external\n        view\n        returns (\n            bytes32 cardHash,\n            string name,\n            string cardType,\n            uint64 totalIssue,\n            uint64 issueTime\n    ) {\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[_cardInfoId]];\n        cardHash = cardInfo.cardHash;\n        name = cardInfo.name;\n        cardType = cardInfo.cardType;\n        totalIssue = cardInfo.totalIssue;\n        issueTime = cardInfo.issueTime;\n    }\n\n    function getInfosLength() external view returns (uint256) {\n        return cardInfos.length.sub(1);\n    }\n\n}\n\nlibrary Strings {\n\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal pure returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function uint2str(uint i) internal pure returns (string) {\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n}\n\n\n// New Conract begin here\ncontract SuperStarsCard is SuperStarsCardInfo, ERC721Full {\n\n    using Strings for string;\n\n    struct Card {\n        // CardInfo ID\n        uint256 cardInfoId;\n        // Issue Number\n        uint64 issueNumber;\n    }\n\n    /*** STORAGE ***/\n    // An array containing the card struct for all cards (all issued NFT) in existence.\n    Card[] private cards;\n    // Mapping from cardinfo id to position in the cards array\n    mapping(uint256 => uint256) private cardsIndex;\n\n    constructor(\n        string name,\n        string symbol\n    )\n        ERC721Full(name, symbol)\n        public\n    {\n        require(bytes(name).length > 0 && bytes(symbol).length > 0, \"Token name and symbol required.\");\n\n        Card memory _card = Card({\n            cardInfoId: 0,\n            issueNumber: 0\n        });\n        cards.push(_card);\n    }\n\n    // Base Token URI\n    string private baseTokenURI;\n\n    function getBaseTokenURI() public view returns (string) {\n        return baseTokenURI;\n    }\n\n    function setBaseTokenURI(string _baseTokenURI) external onlyOwner {\n        baseTokenURI = _baseTokenURI;\n    }\n\n    // test\n    function getIssueNumberExist(uint256 _cardInfoId, uint64 _issueNumber) public view returns (bool) {\n        return cardInfoIdToIssueNumToExist[_cardInfoId][_issueNumber];\n    }\n\n    function mintSuperStarsCard(\n        uint256 _cardId,\n        uint256 _cardInfoId,\n        uint64 _issueNumber,\n        address _receiver\n    )\n        external\n        onlyOwner\n        returns (bool)\n    {\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[_cardInfoId]];\n        require(cardInfoIdToIssueCnt[_cardInfoId] < cardInfo.totalIssue, \"Can NOT exceed total issue limit.\");\n        require(cardInfoIdToIssueNumToExist[_cardInfoId][_issueNumber] == false, \"Issue number already exist.\");\n        require(_receiver != address(0), \"Invalid receiver address.\");\n\n        cardInfoIdToIssueCnt[_cardInfoId] = cardInfoIdToIssueCnt[_cardInfoId] + 1;\n        cardInfoIdToIssueNumToExist[_cardInfoId][_issueNumber] = true;\n\n        require(bytes(baseTokenURI).length > 0, \"You must enter the baseTokenURI first before issuing the card.\");\n\n        Card memory _card = Card({\n            cardInfoId: _cardInfoId,\n            issueNumber: _issueNumber\n        });\n\n        cardsIndex[_cardId] = cards.length;\n        cards.push(_card);\n        // uint256 cardTokenId = tokenId.next();\n        _mint(_receiver, _cardId);\n        _setTokenURI(_cardId, Strings.strConcat(getBaseTokenURI(), Strings.uint2str(_cardId)));\n\n        return true;\n    }\n\n    function getCard(\n        uint256 _cardTokenId\n    )\n        external\n        view\n        returns (\n            string cardType,\n            string name,\n            bytes32 cardHash,\n            uint64 totalIssue,\n            uint64 issueNumber,\n            uint64 issueTime\n    ) {\n        Card memory card = cards[cardsIndex[_cardTokenId]];\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[card.cardInfoId]];\n\n        cardType = cardInfo.cardType;\n        name = cardInfo.name;\n        cardHash = cardInfo.cardHash;\n        totalIssue = cardInfo.totalIssue;\n        issueNumber = card.issueNumber;\n        issueTime = cardInfo.issueTime;\n    }\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405162004ad438038062004ad483398101806040528101908080518201929190602001805182019291905050506200004a62000855565b828281816200005862000879565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360a06040519081016040528060006001026000191681526020016020604051908101604052806000815250815260200160206040519081016040528060008152508152602001600067ffffffffffffffff1681526020014267ffffffffffffffff16815250905060018190806001815401808255809150509060018203906000526020600020906004020160009091929091909150600082015181600001906000191690556020820151816001019080519060200190620001d7929190620008c0565b506040820151816002019080519060200190620001f6929190620008c0565b5060608201518160030160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160030160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050620002a76040805190810160405280600481526020017f4e6f6e650000000000000000000000000000000000000000000000000000000081525062000631640100000000026401000000009004565b50620002f76040805190810160405280600781526020017f4e6f726d616c310000000000000000000000000000000000000000000000000081525062000631640100000000026401000000009004565b50620003476040805190810160405280600781526020017f4e6f726d616c320000000000000000000000000000000000000000000000000081525062000631640100000000026401000000009004565b50620003976040805190810160405280600481526020017f526172650000000000000000000000000000000000000000000000000000000081525062000631640100000000026401000000009004565b50620003e76040805190810160405280600481526020017f457069630000000000000000000000000000000000000000000000000000000081525062000631640100000000026401000000009004565b5050620004266301ffc9a77c0100000000000000000000000000000000000000000000000000000000026200073f640100000000026401000000009004565b620004636380ac58cd7c0100000000000000000000000000000000000000000000000000000000026200073f640100000000026401000000009004565b620004a063780e9d637c0100000000000000000000000000000000000000000000000000000000026200073f640100000000026401000000009004565b8160109080519060200190620004b892919062000947565b508060119080519060200190620004d192919062000947565b506200050f635b5e139f7c0100000000000000000000000000000000000000000000000000000000026200073f640100000000026401000000009004565b505050506000835111801562000526575060008251115b15156200059b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f546f6b656e206e616d6520616e642073796d626f6c2072657175697265642e0081525060200191505060405180910390fd5b604080519081016040528060008152602001600067ffffffffffffffff168152509050601381908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050505050620009f6565b60006200064c620007fe640100000000026401000000009004565b15156200065857600080fd5b60008251111515620006f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f5f6361726454797065206c656e677468206d757374206265206772656174657281526020017f207468616e20302e00000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60038290806001815401808255809150509060018203906000526020600020016000909192909190915090805190602001906200073792919062000947565b509050919050565b63ffffffff7c010000000000000000000000000000000000000000000000000000000002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515156200079157600080fd5b600160076000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b604080519081016040528060008152602001600067ffffffffffffffff1681525090565b60a060405190810160405280600080191681526020016060815260200160608152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200090357805160ff191683800117855562000934565b8280016001018555821562000934579182015b828111156200093357825182559160200191906001019062000916565b5b509050620009439190620009ce565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200098a57805160ff1916838001178555620009bb565b82800160010185558215620009bb579182015b82811115620009ba5782518255916020019190600101906200099d565b5b509050620009ca9190620009ce565b5090565b620009f391905b80821115620009ef576000816000905550600101620009d5565b5090565b90565b6140ce8062000a066000396000f30060806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a71461019057806306fdde03146101f4578063081812fc14610284578063095ea7b3146102f157806318160ddd1461033e57806323b872dd146103695780632f745c59146103d657806330176e1314610437578063390cc9651461047257806342842e0e146104ed5780634e99bb7a1461055a5780634f6ccce7146105855780636352211e146105c657806370a0823114610633578063715018a61461068a5780638da5cb5b146106a15780638f32d59b146106f85780639188d3121461072757806395d89b4114610899578063970129be146109295780639c58f3c014610a80578063a22cb46514610ad9578063a6abb09814610b28578063b88d4fde14610b77578063bdc32be014610c2a578063c0c658d814610cba578063c73f0e2214610ce5578063c87b56dd14610d95578063dd06605a14610e3b578063e985e9c514610ebe578063f2fde38b14610f39575b600080fd5b34801561019c57600080fd5b506101da60048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610f7c565b604051808215151515815260200191505060405180910390f35b34801561020057600080fd5b50610209610fe4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561024957808201518184015260208101905061022e565b50505050905090810190601f1680156102765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029057600080fd5b506102af60048036038101908080359060200190929190505050611086565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102fd57600080fd5b5061033c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110d7565b005b34801561034a57600080fd5b5061035361121c565b6040518082815260200191505060405180910390f35b34801561037557600080fd5b506103d4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611229565b005b3480156103e257600080fd5b50610421600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112f8565b6040518082815260200191505060405180910390f35b34801561044357600080fd5b5061047060048036038101908080359060200190820180359060200191909192939192939050505061136f565b005b34801561047e57600080fd5b506104eb600480360381019080803590602001909291908035600019169060200190929190803590602001908201803590602001919091929391929390803567ffffffffffffffff169060200190929190803567ffffffffffffffff169060200190929190505050611398565b005b3480156104f957600080fd5b50610558600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113f2565b005b34801561056657600080fd5b5061056f611413565b6040518082815260200191505060405180910390f35b34801561059157600080fd5b506105b060048036038101908080359060200190929190505050611420565b6040518082815260200191505060405180910390f35b3480156105d257600080fd5b506105f160048036038101908080359060200190929190505050611458565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561063f57600080fd5b50610674600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114d6565b6040518082815260200191505060405180910390f35b34801561069657600080fd5b5061069f61155a565b005b3480156106ad57600080fd5b506106b661162c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561070457600080fd5b5061070d611655565b604051808215151515815260200191505060405180910390f35b34801561073357600080fd5b50610752600480360381019080803590602001909291905050506116ac565b60405180806020018060200187600019166000191681526020018667ffffffffffffffff1667ffffffffffffffff1681526020018567ffffffffffffffff1667ffffffffffffffff1681526020018467ffffffffffffffff1667ffffffffffffffff168152602001838103835289818151815260200191508051906020019080838360005b838110156107f25780820151818401526020810190506107d7565b50505050905090810190601f16801561081f5780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561085857808201518184015260208101905061083d565b50505050905090810190601f1680156108855780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156108a557600080fd5b506108ae61196f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108ee5780820151818401526020810190506108d3565b50505050905090810190601f16801561091b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561093557600080fd5b5061095460048036038101908080359060200190929190505050611a11565b60405180866000191660001916815260200180602001806020018567ffffffffffffffff1667ffffffffffffffff1681526020018467ffffffffffffffff1667ffffffffffffffff168152602001838103835287818151815260200191508051906020019080838360005b838110156109da5780820151818401526020810190506109bf565b50505050905090810190601f168015610a075780820380516001836020036101000a031916815260200191505b50838103825286818151815260200191508051906020019080838360005b83811015610a40578082015181840152602081019050610a25565b50505050905090810190601f168015610a6d5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610a8c57600080fd5b50610abf60048036038101908080359060200190929190803567ffffffffffffffff169060200190929190505050611c46565b604051808215151515815260200191505060405180910390f35b348015610ae557600080fd5b50610b26600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611c96565b005b348015610b3457600080fd5b50610b61600480360381019080803590602001908201803590602001919091929391929390505050611dd2565b6040518082815260200191505060405180910390f35b348015610b8357600080fd5b50610c28600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611e2a565b005b348015610c3657600080fd5b50610c3f611e52565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c7f578082015181840152602081019050610c64565b50505050905090810190601f168015610cac5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610cc657600080fd5b50610ccf611ef4565b6040518082815260200191505060405180910390f35b348015610cf157600080fd5b50610d1a600480360381019080803567ffffffffffffffff169060200190929190505050611f13565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d5a578082015181840152602081019050610d3f565b50505050905090810190601f168015610d875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610da157600080fd5b50610dc060048036038101908080359060200190929190505050611fd8565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e00578082015181840152602081019050610de5565b50505050905090810190601f168015610e2d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e4757600080fd5b50610ea46004803603810190808035906020019092919080359060200190929190803567ffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120a1565b604051808215151515815260200191505060405180910390f35b348015610eca57600080fd5b50610f1f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061274b565b604051808215151515815260200191505060405180910390f35b348015610f4557600080fd5b50610f7a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127df565b005b600060076000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060108054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561107c5780601f106110515761010080835404028352916020019161107c565b820191906000526020600020905b81548152906001019060200180831161105f57829003601f168201915b5050505050905090565b6000611091826127fe565b151561109c57600080fd5b6009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006110e282611458565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561111f57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061115f575061115e813361274b565b5b151561116a57600080fd5b826009600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000600e80549050905090565b6112333382612870565b151561123e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561127a57600080fd5b6112848382612905565b61128e8382612a08565b6112988282612bc4565b808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000611303836114d6565b8210151561131057600080fd5b600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561135c57fe5b9060005260206000200154905092915050565b611377611655565b151561138257600080fd5b818160159190611393929190613e66565b505050565b6113a0611655565b15156113ab57600080fd5b6113ea868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508585612c9b565b505050505050565b61140e8383836020604051908101604052806000815250611e2a565b505050565b6000600380549050905090565b600061142a61121c565b8210151561143757600080fd5b600e8281548110151561144657fe5b90600052602060002001549050919050565b6000806008600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156114cd57600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561151357600080fd5b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611562611655565b151561156d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6060806000806000806116bd613ee6565b6116c5613f0a565b6013601460008b8152602001908152602001600020548154811015156116e757fe5b9060005260206000209060020201604080519081016040529081600082015481526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509150600160026000846000015181526020019081526020016000205481548110151561176457fe5b906000526020600020906004020160a06040519081016040529081600082015460001916600019168152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118295780601f106117fe57610100808354040283529160200191611829565b820191906000526020600020905b81548152906001019060200180831161180c57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118cb5780601f106118a0576101008083540402835291602001916118cb565b820191906000526020600020905b8154815290600101906020018083116118ae57829003601f168201915b505050505081526020016003820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016003820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050806020015197508060400151965080600001519550806060015194508160200151935080608001519250505091939550919395565b606060118054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a075780601f106119dc57610100808354040283529160200191611a07565b820191906000526020600020905b8154815290600101906020018083116119ea57829003601f168201915b5050505050905090565b6000606080600080611a21613f0a565b60016002600089815260200190815260200160002054815481101515611a4357fe5b906000526020600020906004020160a06040519081016040529081600082015460001916600019168152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b085780601f10611add57610100808354040283529160200191611b08565b820191906000526020600020905b815481529060010190602001808311611aeb57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611baa5780601f10611b7f57610100808354040283529160200191611baa565b820191906000526020600020905b815481529060010190602001808311611b8d57829003601f168201915b505050505081526020016003820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016003820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050905080600001519550806040015194508060200151935080606001519250806080015191505091939590929450565b60006006600084815260200190815260200160002060008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611cd157600080fd5b80600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6000611ddc611655565b1515611de757600080fd5b611e2283838080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050613083565b905092915050565b611e35848484611229565b611e418484848461317c565b1515611e4c57600080fd5b50505050565b606060158054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611eea5780601f10611ebf57610100808354040283529160200191611eea565b820191906000526020600020905b815481529060010190602001808311611ecd57829003601f168201915b5050505050905090565b6000611f0e6001808054905061339e90919063ffffffff16565b905090565b606060038267ffffffffffffffff16815481101515611f2e57fe5b906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611fcc5780601f10611fa157610100808354040283529160200191611fcc565b820191906000526020600020905b815481529060010190602001808311611faf57829003601f168201915b50505050509050919050565b6060611fe3826127fe565b1515611fee57600080fd5b601260008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120955780601f1061206a57610100808354040283529160200191612095565b820191906000526020600020905b81548152906001019060200180831161207857829003601f168201915b50505050509050919050565b60006120ab613f0a565b6120b3613ee6565b6120bb611655565b15156120c657600080fd5b600160026000888152602001908152602001600020548154811015156120e857fe5b906000526020600020906004020160a06040519081016040529081600082015460001916600019168152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121ad5780601f10612182576101008083540402835291602001916121ad565b820191906000526020600020905b81548152906001019060200180831161219057829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561224f5780601f106122245761010080835404028352916020019161224f565b820191906000526020600020905b81548152906001019060200180831161223257829003601f168201915b505050505081526020016003820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016003820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509150816060015167ffffffffffffffff166005600088815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1610151561239a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f43616e204e4f542065786365656420746f74616c206973737565206c696d697481526020017f2e0000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600015156006600088815260200190815260200160002060008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561245b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4973737565206e756d62657220616c72656164792065786973742e000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515612500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f496e76616c696420726563656976657220616464726573732e0000000000000081525060200191505060405180910390fd5b60016005600088815260200190815260200160002060009054906101000a900467ffffffffffffffff16016005600088815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060016006600088815260200190815260200160002060008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060006015805460018160011615610100020316600290049050111515612669576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e8152602001807f596f75206d75737420656e746572207468652062617365546f6b656e5552492081526020017f6669727374206265666f72652069737375696e672074686520636172642e000081525060400191505060405180910390fd5b60408051908101604052808781526020018667ffffffffffffffff1681525090506013805490506014600089815260200190815260200160002081905550601381908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505061271b84886133bf565b61273d8761273861272a611e52565b6127338b613416565b61356d565b6135b4565b600192505050949350505050565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6127e7611655565b15156127f257600080fd5b6127fb816135f4565b50565b6000806008600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b60008061287c83611458565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806128eb57508373ffffffffffffffffffffffffffffffffffffffff166128d384611086565b73ffffffffffffffffffffffffffffffffffffffff16145b806128fc57506128fb818561274b565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff1661292582611458565b73ffffffffffffffffffffffffffffffffffffffff1614151561294757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612a045760006009600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b6000806000612a1785856136ee565b600d6000858152602001908152602001600020549250612a836001600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061339e90919063ffffffff16565b9150600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515612ad157fe5b9060005260206000200154905080600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515612b2b57fe5b9060005260206000200181905550600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003612b8b9190613f51565b506000600d60008681526020019081526020016000208190555082600d6000838152602001908152602001600020819055505050505050565b6000612bd0838361381d565b600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505090600182039060005260206000200160009091929091909150555080600d600084815260200190815260200160002081905550505050565b612ca3613f0a565b6003805490508367ffffffffffffffff16101515612d4f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f4361726454797065496e6465782063616e204e4f54206578636565642074686581526020017f20636172645479706573206c656e6774682e000000000000000000000000000081525060400191505060405180910390fd5b6000151560046000876000191660001916815260200190815260200160002060009054906101000a900460ff161515141515612e19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d8152602001807f4f6e6c7920616c6c6f7720616464696e67206361726420696e666f207468617481526020017f2068617665204e4f5420616c7265616479206265656e2061646465642e00000081525060400191505060405180910390fd5b60a0604051908101604052808660001916815260200160038567ffffffffffffffff16815481101515612e4857fe5b906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ee65780601f10612ebb57610100808354040283529160200191612ee6565b820191906000526020600020905b815481529060010190602001808311612ec957829003601f168201915b505050505081526020018581526020018367ffffffffffffffff1681526020014267ffffffffffffffff168152509050600160046000876000191660001916815260200190815260200160002060006101000a81548160ff021916908315150217905550600180549050600260008881526020019081526020016000208190555060018190806001815401808255809150509060018203906000526020600020906004020160009091929091909150600082015181600001906000191690556020820151816001019080519060200190612fc1929190613f7d565b506040820151816002019080519060200190612fde929190613f7d565b5060608201518160030160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160030160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505060006005600088815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050505050565b600061308d611655565b151561309857600080fd5b60008251111515613137576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f5f6361726454797065206c656e677468206d757374206265206772656174657281526020017f207468616e20302e00000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6003829080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190613174929190613ffd565b509050919050565b60008061319e8573ffffffffffffffffffffffffffffffffffffffff16613977565b15156131ad5760019150613395565b8473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156132a2578082015181840152602081019050613287565b50505050905090810190601f1680156132cf5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156132f157600080fd5b505af1158015613305573d6000803e3d6000fd5b505050506040513d602081101561331b57600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b6000808383111515156133b057600080fd5b82840390508091505092915050565b6133c9828261398a565b600e80549050600f600083815260200190815260200160002081905550600e8190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b60606000806060600080861415613464576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509450613564565b8593505b60008414151561348e578280600101935050600a8481151561348657fe5b049350613468565b826040519080825280601f01601f1916602001820160405280156134c15781602001602082028038833980820191505090505b5091506001830390505b60008614151561356057600a868115156134e157fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561351c57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681151561355857fe5b0495506134cb565b8194505b50505050919050565b60606135ac8383602060405190810160405280600081525060206040519081016040528060008152506020604051908101604052806000815250613a30565b905092915050565b6135bd826127fe565b15156135c857600080fd5b806012600084815260200190815260200160002090805190602001906135ef929190613ffd565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561363057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8173ffffffffffffffffffffffffffffffffffffffff1661370e82611458565b73ffffffffffffffffffffffffffffffffffffffff1614151561373057600080fd5b6137836001600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461339e90919063ffffffff16565b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006008600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff166008600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561388b57600080fd5b816008600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506139306001600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613e4590919063ffffffff16565b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156139c657600080fd5b6139d08282612bc4565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6060806060806060806060806000808e98508d97508c96508b95508a94508451865188518a518c51010101016040519080825280601f01601f191660200182016040528015613a8e5781602001602082028038833980820191505090505b50935083925060009150600090505b8851811015613b50578881815181101515613ab457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515613b1357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613a9d565b600090505b8751811015613c08578781815181101515613b6c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515613bcb57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613b55565b600090505b8651811015613cc0578681815181101515613c2457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515613c8357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613c0d565b600090505b8551811015613d78578581815181101515613cdc57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515613d3b57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613cc5565b600090505b8451811015613e30578481815181101515613d9457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515613df357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613d7d565b82995050505050505050505095945050505050565b6000808284019050838110151515613e5c57600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613ea757803560ff1916838001178555613ed5565b82800160010185558215613ed5579182015b82811115613ed4578235825591602001919060010190613eb9565b5b509050613ee2919061407d565b5090565b604080519081016040528060008152602001600067ffffffffffffffff1681525090565b60a060405190810160405280600080191681526020016060815260200160608152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b815481835581811115613f7857818360005260206000209182019101613f77919061407d565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613fbe57805160ff1916838001178555613fec565b82800160010185558215613fec579182015b82811115613feb578251825591602001919060010190613fd0565b5b509050613ff9919061407d565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061403e57805160ff191683800117855561406c565b8280016001018555821561406c579182015b8281111561406b578251825591602001919060010190614050565b5b509050614079919061407d565b5090565b61409f91905b8082111561409b576000816000905550600101614083565b5090565b905600a165627a7a72305820e12c17dad33443878b124d8473aa38994b40656a3f0ec37eb7409c225549e31f0029000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000016466f6f7462616c6c436c7562537570657273746172730000000000000000000000000000000000000000000000000000000000000000000000000000000000034643530000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000016466f6f7462616c6c436c7562537570657273746172730000000000000000000000000000000000000000000000000000000000000000000000000000000000034643530000000000000000000000000000000000000000000000000000000000"
}