{
  "address": "0x3bd3d07a2d352e7ca098cccb2b0882c9f45597d2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LiquidLong",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-12\n*/\n\npragma solidity 0.4.25;\npragma experimental ABIEncoderV2;\npragma experimental \"v0.5.0\";\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n* https://github.com/OpenZeppelin/openzeppelin-solidity/blob/56515380452baad9fcd32c5d4502002af0183ce9/contracts/math/SafeMath.sol\n*/\nlibrary SafeMath {\n\n\t/**\n\t* @dev Multiplies two numbers, throws on overflow.\n\t*/\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t* @dev Integer division of two numbers, truncating the quotient.\n\t*/\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t*/\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t* @dev Adds two numbers, throws on overflow.\n\t*/\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n\n}\n\n/**\n* @title Convenience and rounding functions when dealing with numbers already factored by 10**18 or 10**27\n* @dev Math operations with safety checks that throw on error\n* https://github.com/dapphub/ds-math/blob/87bef2f67b043819b7195ce6df3058bd3c321107/src/math.sol\n*/\nlibrary SafeMathFixedPoint {\n\tusing SafeMath for uint256;\n\n\tfunction mul27(uint256 x, uint256 y) internal pure returns (uint256 z) {\n\t\tz = x.mul(y).add(5 * 10**26).div(10**27);\n\t}\n\tfunction mul18(uint256 x, uint256 y) internal pure returns (uint256 z) {\n\t\tz = x.mul(y).add(5 * 10**17).div(10**18);\n\t}\n\n\tfunction div18(uint256 x, uint256 y) internal pure returns (uint256 z) {\n\t\tz = x.mul(10**18).add(y.div(2)).div(y);\n\t}\n\tfunction div27(uint256 x, uint256 y) internal pure returns (uint256 z) {\n\t\tz = x.mul(10**27).add(y.div(2)).div(y);\n\t}\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20Basic.sol\n */\ncontract ERC20Basic {\n\tfunction totalSupply() public view returns (uint256);\n\tfunction balanceOf(address who) public view returns (uint256);\n\tfunction transfer(address to, uint256 value) public returns (bool);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20.sol\n */\ncontract ERC20 is ERC20Basic {\n\tfunction allowance(address owner, address spender) public view returns (uint256);\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n\tfunction approve(address spender, uint256 value) public returns (bool);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\n */\ncontract Ownable {\n\taddress public owner;\n\n\tevent OwnershipRenounced(address indexed previousOwner);\n\tevent OwnershipTransferred(\n\t\taddress indexed previousOwner,\n\t\taddress indexed newOwner\n\t);\n\n\t/**\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n\t * account.\n\t */\n\tconstructor() public {\n\t\towner = msg.sender;\n\t}\n\n\t/**\n\t * @dev Throws if called by any account other than the owner.\n\t */\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\n\t * @param newOwner The address to transfer ownership to.\n\t */\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\trequire(newOwner != address(0));\n\t\temit OwnershipTransferred(owner, newOwner);\n\t\towner = newOwner;\n\t}\n\n\t/**\n\t * @dev Allows the current owner to relinquish control of the contract.\n\t */\n\tfunction renounceOwnership() public onlyOwner {\n\t\temit OwnershipRenounced(owner);\n\t\towner = address(0);\n\t}\n}\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Claimable.sol\n */\ncontract Claimable is Ownable {\n\taddress public pendingOwner;\n\n\t/**\n\t * @dev Modifier throws if called by any account other than the pendingOwner.\n\t */\n\tmodifier onlyPendingOwner() {\n\t\trequire(msg.sender == pendingOwner);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Allows the current owner to set the pendingOwner address.\n\t * @param newOwner The address to transfer ownership to.\n\t */\n\tfunction transferOwnership(address newOwner) onlyOwner public {\n\t\tpendingOwner = newOwner;\n\t}\n\n\t/**\n\t * @dev Allows the pendingOwner address to finalize the transfer.\n\t */\n\tfunction claimOwnership() onlyPendingOwner public {\n\t\temit OwnershipTransferred(owner, pendingOwner);\n\t\towner = pendingOwner;\n\t\tpendingOwner = address(0);\n\t}\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/lifecycle/Pausable.sol\n */\ncontract Pausable is Ownable {\n\tevent Pause();\n\tevent Unpause();\n\n\tbool public paused = false;\n\n\n\t/**\n\t * @dev Modifier to make a function callable only when the contract is not paused.\n\t */\n\tmodifier whenNotPaused() {\n\t\trequire(!paused);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Modifier to make a function callable only when the contract is paused.\n\t */\n\tmodifier whenPaused() {\n\t\trequire(paused);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev called by the owner to pause, triggers stopped state\n\t */\n\tfunction pause() onlyOwner whenNotPaused public {\n\t\tpaused = true;\n\t\temit Pause();\n\t}\n\n\t/**\n\t * @dev called by the owner to unpause, returns to normal state\n\t */\n\tfunction unpause() onlyOwner whenPaused public {\n\t\tpaused = false;\n\t\temit Unpause();\n\t}\n}\n\ncontract Dai is ERC20 {\n\n}\n\ncontract Weth is ERC20 {\n\tfunction deposit() public payable;\n\tfunction withdraw(uint wad) public;\n}\n\ncontract Mkr is ERC20 {\n\n}\n\ncontract Peth is ERC20 {\n\n}\n\ncontract Oasis {\n\tfunction getBuyAmount(ERC20 tokenToBuy, ERC20 tokenToPay, uint256 amountToPay) external view returns(uint256 amountBought);\n\tfunction getPayAmount(ERC20 tokenToPay, ERC20 tokenToBuy, uint amountToBuy) public constant returns (uint amountPaid);\n\tfunction getBestOffer(ERC20 sell_gem, ERC20 buy_gem) public constant returns(uint offerId);\n\tfunction getWorseOffer(uint id) public constant returns(uint offerId);\n\tfunction getOffer(uint id) public constant returns (uint pay_amt, ERC20 pay_gem, uint buy_amt, ERC20 buy_gem);\n\tfunction sellAllAmount(ERC20 pay_gem, uint pay_amt, ERC20 buy_gem, uint min_fill_amount) public returns (uint fill_amt);\n}\n\ncontract Medianizer {\n\tfunction read() external view returns(bytes32);\n}\n\ncontract Maker {\n\tfunction sai() external view returns(Dai);\n\tfunction gem() external view returns(Weth);\n\tfunction gov() external view returns(Mkr);\n\tfunction skr() external view returns(Peth);\n\tfunction pip() external view returns(Medianizer);\n\n\t// Join-Exit Spread\n\t uint256 public gap;\n\n\tstruct Cup {\n\t\t// CDP owner\n\t\taddress lad;\n\t\t// Locked collateral (in SKR)\n\t\tuint256 ink;\n\t\t// Outstanding normalised debt (tax only)\n\t\tuint256 art;\n\t\t// Outstanding normalised debt\n\t\tuint256 ire;\n\t}\n\n\tuint256 public cupi;\n\tmapping (bytes32 => Cup) public cups;\n\n\tfunction lad(bytes32 cup) public view returns (address);\n\tfunction per() public view returns (uint ray);\n\tfunction tab(bytes32 cup) public returns (uint);\n\tfunction ink(bytes32 cup) public returns (uint);\n\tfunction rap(bytes32 cup) public returns (uint);\n\tfunction chi() public returns (uint);\n\n\tfunction open() public returns (bytes32 cup);\n\tfunction give(bytes32 cup, address guy) public;\n\tfunction lock(bytes32 cup, uint wad) public;\n\tfunction draw(bytes32 cup, uint wad) public;\n\tfunction join(uint wad) public;\n\tfunction wipe(bytes32 cup, uint wad) public;\n}\n\ncontract DSProxy {\n\t// Technically from DSAuth\n\taddress public owner;\n\n\tfunction execute(address _target, bytes _data) public payable returns (bytes32 response);\n}\n\ncontract ProxyRegistry {\n\tmapping(address => DSProxy) public proxies;\n\tfunction build(address owner) public returns (DSProxy proxy);\n}\n\ncontract LiquidLong is Ownable, Claimable, Pausable {\n\tusing SafeMath for uint256;\n\tusing SafeMathFixedPoint for uint256;\n\n\tuint256 public providerFeePerEth;\n\n\tOasis public oasis;\n\tMaker public maker;\n\tDai public dai;\n\tWeth public weth;\n\tPeth public peth;\n\tMkr public mkr;\n\n\tProxyRegistry public proxyRegistry;\n\n\tevent NewCup(address user, bytes32 cup);\n\n\tconstructor(Oasis _oasis, Maker _maker, ProxyRegistry _proxyRegistry) public payable {\n\t\tproviderFeePerEth = 0.01 ether;\n\n\t\toasis = _oasis;\n\t\tmaker = _maker;\n\t\tdai = maker.sai();\n\t\tweth = maker.gem();\n\t\tpeth = maker.skr();\n\t\tmkr = maker.gov();\n\n\t\t// Oasis buy/sell\n\t\tdai.approve(address(_oasis), uint256(-1));\n\t\t// Wipe\n\t\tdai.approve(address(_maker), uint256(-1));\n\t\tmkr.approve(address(_maker), uint256(-1));\n\t\t// Join\n\t\tweth.approve(address(_maker), uint256(-1));\n\t\t// Lock\n\t\tpeth.approve(address(_maker), uint256(-1));\n\n\t\tproxyRegistry = _proxyRegistry;\n\n\t\tif (msg.value > 0) {\n\t\t\tweth.deposit.value(msg.value)();\n\t\t}\n\t}\n\n\t// Receive ETH from WETH withdraw\n\tfunction () external payable {\n\t}\n\n\tfunction wethDeposit() public payable {\n\t\tweth.deposit.value(msg.value)();\n\t}\n\n\tfunction wethWithdraw(uint256 _amount) public onlyOwner {\n\t\tweth.withdraw(_amount);\n\t\towner.transfer(_amount);\n\t}\n\n\tfunction ethWithdraw() public onlyOwner {\n\t\tuint256 _amount = address(this).balance;\n\t\towner.transfer(_amount);\n\t}\n\n\tfunction transferTokens(ERC20 _token) public onlyOwner {\n\t\t_token.transfer(owner, _token.balanceOf(this));\n\t}\n\n\tfunction ethPriceInUsd() public view returns (uint256 _attousd) {\n\t\treturn uint256(maker.pip().read());\n\t}\n\n\tfunction estimateDaiSaleProceeds(uint256 _attodaiToSell) public view returns (uint256 _daiPaid, uint256 _wethBought) {\n\t\treturn getPayPriceAndAmount(dai, weth, _attodaiToSell);\n\t}\n\n\t// buy/pay are from the perspective of the taker/caller (Oasis contracts use buy/pay terminology from perspective of the maker)\n\tfunction getPayPriceAndAmount(ERC20 _payGem, ERC20 _buyGem, uint256 _payDesiredAmount) public view returns (uint256 _paidAmount, uint256 _boughtAmount) {\n\t\tuint256 _offerId = oasis.getBestOffer(_buyGem, _payGem);\n\t\twhile (_offerId != 0) {\n\t\t\tuint256 _payRemaining = _payDesiredAmount.sub(_paidAmount);\n\t\t\t(uint256 _buyAvailableInOffer,  , uint256 _payAvailableInOffer,) = oasis.getOffer(_offerId);\n\t\t\tif (_payRemaining <= _payAvailableInOffer) {\n\t\t\t\tuint256 _buyRemaining = _payRemaining.mul(_buyAvailableInOffer).div(_payAvailableInOffer);\n\t\t\t\t_paidAmount = _paidAmount.add(_payRemaining);\n\t\t\t\t_boughtAmount = _boughtAmount.add(_buyRemaining);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t_paidAmount = _paidAmount.add(_payAvailableInOffer);\n\t\t\t_boughtAmount = _boughtAmount.add(_buyAvailableInOffer);\n\t\t\t_offerId = oasis.getWorseOffer(_offerId);\n\t\t}\n\t\treturn (_paidAmount, _boughtAmount);\n\t}\n\n\tmodifier wethBalanceIncreased() {\n\t\tuint256 _startingAttowethBalance = weth.balanceOf(this);\n\t\t_;\n\t\trequire(weth.balanceOf(this) > _startingAttowethBalance);\n\t}\n\n\t// TODO: change affiliate fee to be 50% of service fee, no parameter needed\n\tfunction openCdp(uint256 _leverage, uint256 _leverageSizeInAttoeth, uint256 _allowedFeeInAttoeth, address _affiliateAddress) public payable wethBalanceIncreased returns (bytes32 _cdpId) {\n\t\trequire(_leverage >= 100 && _leverage <= 300);\n\t\tuint256 _lockedInCdpInAttoeth = _leverageSizeInAttoeth.mul(_leverage).div(100);\n\t\tuint256 _loanInAttoeth = _lockedInCdpInAttoeth.sub(_leverageSizeInAttoeth);\n\t\tuint256 _feeInAttoeth = _loanInAttoeth.mul18(providerFeePerEth);\n\t\trequire(_feeInAttoeth <= _allowedFeeInAttoeth);\n\t\tuint256 _drawInAttodai = _loanInAttoeth.mul18(uint256(maker.pip().read()));\n\t\tuint256 _attopethLockedInCdp = _lockedInCdpInAttoeth.div27(maker.per());\n\n\t\t// Convert all incoming eth to weth (we will pay back later if too much)\n\t\tweth.deposit.value(msg.value)();\n\t\t// Open CDP\n\t\t_cdpId = maker.open();\n\t\t// Convert WETH into PETH\n\t\tmaker.join(_attopethLockedInCdp);\n\t\t// Store PETH in CDP\n\t\tmaker.lock(_cdpId, _attopethLockedInCdp);\n\t\t// Withdraw DAI from CDP\n\t\tmaker.draw(_cdpId, _drawInAttodai);\n\t\t// Sell DAI for WETH\n\t\tsellDai(_drawInAttodai, _lockedInCdpInAttoeth, _feeInAttoeth);\n\t\t// Pay provider fee\n\t\tif (_affiliateAddress != address(0)) {\n\t\t\t// Fee charged is constant. If affiliate provided, split fee with affiliate\n\t\t\t// Don't bother sending eth to owner, the owner has all non-async-sent eth anyway\n\t\t\tweth.transfer(_affiliateAddress, _feeInAttoeth.div(2));\n\t\t}\n\n\t\temit NewCup(msg.sender, _cdpId);\n\n\t\tgiveCdpToProxy(msg.sender, _cdpId);\n\t}\n\n\tfunction giveCdpToProxy(address _ownerOfProxy, bytes32 _cdpId) private {\n\t\tDSProxy _proxy = proxyRegistry.proxies(_ownerOfProxy);\n\t\tif (_proxy == DSProxy(0) || _proxy.owner() != _ownerOfProxy) {\n\t\t\t_proxy = proxyRegistry.build(_ownerOfProxy);\n\t\t}\n\t\t// Send the CDP to the owner's proxy instead of directly to owner\n\t\tmaker.give(_cdpId, _proxy);\n\t}\n\n\t// extracted function to mitigate stack depth issues\n\tfunction sellDai(uint256 _drawInAttodai, uint256 _lockedInCdpInAttoeth, uint256 _feeInAttoeth) private {\n\t\tuint256 _wethBoughtInAttoweth = oasis.sellAllAmount(dai, _drawInAttodai, weth, 0);\n\t\t// SafeMath failure below catches not enough eth provided\n\t\tuint256 _refundDue = msg.value.add(_wethBoughtInAttoweth).sub(_lockedInCdpInAttoeth).sub(_feeInAttoeth);\n\t\tif (_refundDue > 0) {\n\t\t\tweth.withdraw(_refundDue);\n\t\t\trequire(msg.sender.call.value(_refundDue)());\n\t\t}\n\t}\n}",
  "bytecode": "608060408190526001805460a060020a60ff02191690556060806200246a833981018060405262000034919081019062000785565b6000805433600160a060020a031991821617909155662386f26fc10000600255600380548216600160a060020a03868116919091179091556004805490921684821617808355604080517f9166cba400000000000000000000000000000000000000000000000000000000815290519190921692639166cba492808201926020929091829003018186803b158015620000cc57600080fd5b505afa158015620000e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000107919081019062000764565b60058054600160a060020a031916600160a060020a0392831617905560048054604080517f7bd2bea700000000000000000000000000000000000000000000000000000000815290519190931692637bd2bea79281810192602092909190829003018186803b1580156200017a57600080fd5b505afa1580156200018f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620001b5919081019062000764565b60068054600160a060020a031916600160a060020a0392831617905560048054604080517f0f8a771e00000000000000000000000000000000000000000000000000000000815290519190931692630f8a771e9281810192602092909190829003018186803b1580156200022857600080fd5b505afa1580156200023d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000263919081019062000764565b60078054600160a060020a031916600160a060020a0392831617905560048054604080517f12d43a51000000000000000000000000000000000000000000000000000000008152905191909316926312d43a519281810192602092909190829003018186803b158015620002d657600080fd5b505afa158015620002eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000311919081019062000764565b60088054600160a060020a031916600160a060020a039283161790556005546040517f095ea7b300000000000000000000000000000000000000000000000000000000815291169063095ea7b3906200037390869060001990600401620007f5565b602060405180830381600087803b1580156200038e57600080fd5b505af1158015620003a3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620003c991908101906200073b565b506005546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063095ea7b3906200041990859060001990600401620007f5565b602060405180830381600087803b1580156200043457600080fd5b505af115801562000449573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200046f91908101906200073b565b506008546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063095ea7b390620004bf90859060001990600401620007f5565b602060405180830381600087803b158015620004da57600080fd5b505af1158015620004ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200051591908101906200073b565b506006546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063095ea7b3906200056590859060001990600401620007f5565b602060405180830381600087803b1580156200058057600080fd5b505af115801562000595573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620005bb91908101906200073b565b506007546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063095ea7b3906200060b90859060001990600401620007f5565b602060405180830381600087803b1580156200062657600080fd5b505af11580156200063b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200066191908101906200073b565b5060098054600160a060020a031916600160a060020a03831617905560003411156200070f57600660009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0346040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b158015620006f457600080fd5b505af115801562000709573d6000803e3d6000fd5b50505050505b5050506200083b565b600062000726825162000823565b9392505050565b600062000726825162000828565b6000602082840312156200074e57600080fd5b60006200075c848462000718565b949350505050565b6000602082840312156200077757600080fd5b60006200075c84846200072d565b6000806000606084860312156200079b57600080fd5b6000620007a986866200072d565b9350506020620007bc868287016200072d565b9250506040620007cf868287016200072d565b9150509250925092565b620007e48162000814565b82525050565b620007e48162000820565b60408101620008058285620007d9565b620007266020830184620007ea565b600160a060020a031690565b90565b151590565b6000620008358262000814565b92915050565b611c1f806200084b6000396000f3006080604052600436106101245763ffffffff60e060020a6000350416630c89a0df81146101265780631a2def78146101465780632b1841d21461017d57806335cb1f071461019d5780633f4ba83a146101a55780633fc8cef3146101ba5780634e71e0c8146101dc57806350655d8c146101f1578063540c755f146102065780635988899c1461021b5780635c975abb1461023b578063683e0bcd1461025d578063715018a6146102725780637d211c75146102875780637e992cb81461029c5780638456cb59146102b15780638da5cb5b146102c65780639b121e7c146102e8578063a3afda1a14610308578063b50cbd9f1461031d578063e30c397814610332578063f2fde38b14610347578063f4b9fa7514610367578063fa72c53e1461037c575b005b34801561013257600080fd5b50610124610141366004611981565b610391565b34801561015257600080fd5b5061016661016136600461199f565b6104c2565b604051610174929190611b53565b60405180910390f35b61019061018b366004611a6b565b610747565b6040516101749190611b2a565b610124610e1c565b3480156101b157600080fd5b50610124610e8a565b3480156101c657600080fd5b506101cf610f13565b6040516101749190611b61565b3480156101e857600080fd5b50610124610f22565b3480156101fd57600080fd5b506101cf610faa565b34801561021257600080fd5b50610124610fb9565b34801561022757600080fd5b506101666102363660046119ec565b61100e565b34801561024757600080fd5b50610250611039565b6040516101749190611b1c565b34801561026957600080fd5b5061019061105a565b34801561027e57600080fd5b5061012461115d565b34801561029357600080fd5b506101cf6111c9565b3480156102a857600080fd5b506101cf6111d8565b3480156102bd57600080fd5b506101246111e7565b3480156102d257600080fd5b506102db611286565b6040516101749190611af3565b3480156102f457600080fd5b506101246103033660046119ec565b611295565b34801561031457600080fd5b506101cf611360565b34801561032957600080fd5b506101cf61136f565b34801561033e57600080fd5b506102db61137e565b34801561035357600080fd5b506101246103623660046118e3565b61138d565b34801561037357600080fd5b506101cf6113d3565b34801561038857600080fd5b506101906113e2565b600054600160a060020a031633146103a857600080fd5b6000546040517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038084169263a9059cbb9291169083906370a08231906103fc903090600401611b61565b60206040518083038186803b15801561041457600080fd5b505afa158015610428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061044c9190810190611945565b6040518363ffffffff1660e060020a02815260040161046c929190611b01565b602060405180830381600087803b15801561048657600080fd5b505af115801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104be9190810190611927565b5050565b6003546040517f0374fc6f000000000000000000000000000000000000000000000000000000008152600091829182918291829182918291600160a060020a031690630374fc6f9061051a908c908e90600401611bad565b60206040518083038186803b15801561053257600080fd5b505afa158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061056a9190810190611945565b94505b841561073a57610583888863ffffffff6113e816565b6003546040517f4579268a000000000000000000000000000000000000000000000000000000008152919550600160a060020a031690634579268a906105cd908890600401611b2a565b60806040518083038186803b1580156105e557600080fd5b505afa1580156105f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061061d9190810190611a0a565b50935050925081841115156106775761064c82610640868663ffffffff6113ff16565b9063ffffffff61142816565b905061065e878563ffffffff61143d16565b9650610670868263ffffffff61143d16565b955061073a565b610687878363ffffffff61143d16565b9650610699868463ffffffff61143d16565b6003546040517f943911bc000000000000000000000000000000000000000000000000000000008152919750600160a060020a03169063943911bc906106e3908890600401611b2a565b60206040518083038186803b1580156106fb57600080fd5b505afa15801561070f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107339190810190611945565b945061056d565b5050505050935093915050565b6006546040517f70a08231000000000000000000000000000000000000000000000000000000008152600091829182918291829182918291600160a060020a0316906370a082319061079d903090600401611b61565b60206040518083038186803b1580156107b557600080fd5b505afa1580156107c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107ed9190810190611945565b905060648b10158015610802575061012c8b11155b151561080d57600080fd5b61082260646106408c8e63ffffffff6113ff16565b9550610834868b63ffffffff6113e816565b945061084b6002548661144a90919063ffffffff16565b93508884111561085a57600080fd5b610966600460009054906101000a9004600160a060020a0316600160a060020a031663d741e2f96040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108e69190810190611963565b600160a060020a03166357de26a46040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561092157600080fd5b505afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109599190810190611945565b869063ffffffff61144a16565b9250610a01600460009054906101000a9004600160a060020a0316600160a060020a0316637ec9c3b86040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109f49190810190611945565b879063ffffffff61148716565b9150600660009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0346040518263ffffffff1660e060020a0281526004016000604051808303818588803b158015610a5657600080fd5b505af1158015610a6a573d6000803e3d6000fd5b505060048054604080517ffcfff16f0000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216955063fcfff16f94508083019350602092908290030181600087803b158015610acc57600080fd5b505af1158015610ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b049190810190611945565b600480546040517f049878f3000000000000000000000000000000000000000000000000000000008152929950600160a060020a03169163049878f391610b4d91869101611b2a565b600060405180830381600087803b158015610b6757600080fd5b505af1158015610b7b573d6000803e3d6000fd5b5050600480546040517fb3b77a51000000000000000000000000000000000000000000000000000000008152600160a060020a03909116935063b3b77a519250610bc9918b91879101611b53565b600060405180830381600087803b158015610be357600080fd5b505af1158015610bf7573d6000803e3d6000fd5b5050600480546040517f440f19ba000000000000000000000000000000000000000000000000000000008152600160a060020a03909116935063440f19ba9250610c45918b91889101611b53565b600060405180830381600087803b158015610c5f57600080fd5b505af1158015610c73573d6000803e3d6000fd5b50505050610c828387866114bd565b600160a060020a03881615610d2857600654600160a060020a031663a9059cbb89610cb487600263ffffffff61142816565b6040518363ffffffff1660e060020a028152600401610cd4929190611b01565b602060405180830381600087803b158015610cee57600080fd5b505af1158015610d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d269190810190611927565b505b7f09d6d33a845fa3f52a386be17335b767ed30f5ea181dd01e2fbf678af3c251573388604051610d59929190611b01565b60405180910390a1610d6b3388611634565b6006546040517f70a082310000000000000000000000000000000000000000000000000000000081528291600160a060020a0316906370a0823190610db4903090600401611b61565b60206040518083038186803b158015610dcc57600080fd5b505afa158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e049190810190611945565b11610e0e57600080fd5b505050505050949350505050565b600660009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0346040518263ffffffff1660e060020a0281526004016000604051808303818588803b158015610e6f57600080fd5b505af1158015610e83573d6000803e3d6000fd5b5050505050565b600054600160a060020a03163314610ea157600080fd5b60015474010000000000000000000000000000000000000000900460ff161515610eca57600080fd5b6001805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600654600160a060020a031681565b600154600160a060020a03163314610f3957600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600454600160a060020a031681565b60008054600160a060020a03163314610fd157600080fd5b5060008054604051303192600160a060020a03909216916108fc841502918491818181858888f193505050501580156104be573d6000803e3d6000fd5b600554600654600091829161103091600160a060020a039081169116856104c2565b91509150915091565b60015474010000000000000000000000000000000000000000900460ff1681565b6000600460009054906101000a9004600160a060020a0316600160a060020a031663d741e2f96040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156110ad57600080fd5b505afa1580156110c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110e59190810190611963565b600160a060020a03166357de26a46040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561112057600080fd5b505afa158015611134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111589190810190611945565b905090565b600054600160a060020a0316331461117457600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600754600160a060020a031681565b600854600160a060020a031681565b600054600160a060020a031633146111fe57600080fd5b60015474010000000000000000000000000000000000000000900460ff161561122657600080fd5b6001805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600054600160a060020a031681565b600054600160a060020a031633146112ac57600080fd5b6006546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600160a060020a0390911690632e1a7d4d906112f5908490600401611b2a565b600060405180830381600087803b15801561130f57600080fd5b505af1158015611323573d6000803e3d6000fd5b505060008054604051600160a060020a03909116935084156108fc0292508491818181858888f193505050501580156104be573d6000803e3d6000fd5b600354600160a060020a031681565b600954600160a060020a031681565b600154600160a060020a031681565b600054600160a060020a031633146113a457600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600554600160a060020a031681565b60025481565b6000828211156113f457fe5b508082035b92915050565b6000821515611410575060006113f9565b5081810281838281151561142057fe5b04146113f957fe5b6000818381151561143557fe5b049392505050565b818101828110156113f957fe5b6000611480670de0b6b3a76400006106406706f05b59d3b20000611474878763ffffffff6113ff16565b9063ffffffff61143d16565b9392505050565b6000611480826106406114a182600263ffffffff61142816565b611474876b033b2e3c9fd0803ce800000063ffffffff6113ff16565b6003546005546006546040517f0621b4f60000000000000000000000000000000000000000000000000000000081526000938493600160a060020a0391821693630621b4f69361151993928316928b9216908790600401611b6f565b602060405180830381600087803b15801561153357600080fd5b505af1158015611547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061156b9190810190611945565b915061158f836115838681348763ffffffff61143d16565b9063ffffffff6113e816565b90506000811115610e83576006546040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600160a060020a0390911690632e1a7d4d906115e3908490600401611b2a565b600060405180830381600087803b1580156115fd57600080fd5b505af1158015611611573d6000803e3d6000fd5b5050604051339250839150600081818185875af1925050501515610e8357600080fd5b6009546040517fc4552791000000000000000000000000000000000000000000000000000000008152600091600160a060020a03169063c45527919061167e908690600401611af3565b60206040518083038186803b15801561169657600080fd5b505afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116ce9190810190611963565b9050600160a060020a038116158061176b575082600160a060020a031681600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561172757600080fd5b505afa15801561173b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061175f9190810190611909565b600160a060020a031614155b1561180e576009546040517ff3701da2000000000000000000000000000000000000000000000000000000008152600160a060020a039091169063f3701da2906117b9908690600401611af3565b602060405180830381600087803b1580156117d357600080fd5b505af11580156117e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061180b9190810190611963565b90505b600480546040517fbaa8529c000000000000000000000000000000000000000000000000000000008152600160a060020a039091169163baa8529c91611858918691869101611b38565b600060405180830381600087803b15801561187257600080fd5b505af1158015611886573d6000803e3d6000fd5b50505050505050565b60006114808235611bbb565b60006114808251611bbb565b60006114808251611bc7565b60006114808251611bcc565b60006114808251611bcf565b60006114808235611bcf565b60006114808235611bcc565b6000602082840312156118f557600080fd5b6000611901848461188f565b949350505050565b60006020828403121561191b57600080fd5b6000611901848461189b565b60006020828403121561193957600080fd5b600061190184846118a7565b60006020828403121561195757600080fd5b600061190184846118b3565b60006020828403121561197557600080fd5b600061190184846118bf565b60006020828403121561199357600080fd5b600061190184846118cb565b6000806000606084860312156119b457600080fd5b60006119c086866118cb565b93505060206119d1868287016118cb565b92505060406119e2868287016118d7565b9150509250925092565b6000602082840312156119fe57600080fd5b600061190184846118d7565b60008060008060808587031215611a2057600080fd5b6000611a2c87876118b3565b9450506020611a3d878288016118bf565b9350506040611a4e878288016118b3565b9250506060611a5f878288016118bf565b91505092959194509250565b60008060008060808587031215611a8157600080fd5b6000611a8d87876118d7565b9450506020611a9e878288016118d7565b9350506040611aaf878288016118d7565b9250506060611a5f8782880161188f565b611ac981611bbb565b82525050565b611ac981611bc7565b611ac981611bcc565b611ac981611bcf565b611ac981611bda565b602081016113f98284611ac0565b60408101611b0f8285611ac0565b6114806020830184611ad8565b602081016113f98284611acf565b602081016113f98284611ad8565b60408101611b468285611ad8565b6114806020830184611ae1565b60408101611b0f8285611ad8565b602081016113f98284611ae1565b60808101611b7d8287611ae1565b611b8a6020830186611ad8565b611b976040830185611ae1565b611ba46060830184611aea565b95945050505050565b60408101611b468285611ae1565b600160a060020a031690565b151590565b90565b60006113f982611bbb565b60006113f982611bcc5600a265627a7a723058201d9d97c95a531212259ebbe9a826d324bac5c1f6e4a4e2b6b93bc76946bd21546c6578706572696d656e74616cf50037000000000000000000000000b7ac09c2c0217b07d7c103029b4918a2c401eecb000000000000000000000000448a5065aebb8e423f0896e6c5d525c040f59af30000000000000000000000004678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe4",
  "constructorArguments": "000000000000000000000000b7ac09c2c0217b07d7c103029b4918a2c401eecb000000000000000000000000448a5065aebb8e423f0896e6c5d525c040f59af30000000000000000000000004678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe4"
}