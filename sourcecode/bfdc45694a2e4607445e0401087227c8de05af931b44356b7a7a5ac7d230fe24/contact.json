{
  "address": "0x42ab724e2a6a75930d6735189fc4f7b2edaffc72",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bussiness",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-15\n*/\n\npragma solidity ^0.5.8;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract IERC721 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20BasicInterface {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    uint8 public decimals;\n}\n\ncontract Bussiness is Ownable {\n    address public ceoAddress = address(0xFce92D4163AA532AA096DE8a3C4fEf9f875Bc55F);\n    IERC721 public erc721Address = IERC721(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d);\n    ERC20BasicInterface public hbwalletToken = ERC20BasicInterface(0xEc7ba74789694d0d03D458965370Dc7cF2FE75Ba);\n    uint256 public ETHFee = 25; // 25 = 2,5 %\n    uint256 public Percen = 1000;\n    uint256 public HBWALLETExchange = 21;\n    // cong thuc hbFee = ETHFee / Percen * HBWALLETExchange / 2\n    uint256 public limitETHFee = 2000000000000000;\n    uint256 public limitHBWALLETFee = 2;\n    uint256 public hightLightFee = 30000000000000000;\n    constructor() public {}\n    struct Price {\n        address payable tokenOwner;\n        uint256 price;\n        uint256 fee;\n        uint256 hbfee;\n        bool isHightlight;\n    }\n\n    uint[] public arrayTokenIdSale;\n    mapping(uint256 => Price) public prices;\n\n    /**\n     * @dev Throws if called by any account other than the ceo address.\n     */\n    modifier onlyCeoAddress() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n    // Move the last element to the deleted spot.\n    // Delete the last element, then correct the length.\n    function _burnArrayTokenIdSale(uint index)  internal {\n        if (index >= arrayTokenIdSale.length) return;\n\n        for (uint i = index; i<arrayTokenIdSale.length-1; i++){\n            arrayTokenIdSale[i] = arrayTokenIdSale[i+1];\n        }\n        delete arrayTokenIdSale[arrayTokenIdSale.length-1];\n        arrayTokenIdSale.length--;\n    }\n    \n    function _burnArrayTokenIdSaleByArr(uint[] memory arr) internal {\n        for(uint i; i<arr.length; i++){\n            _burnArrayTokenIdSale(i);\n        }\n       \n    }\n    function ownerOf(uint256 _tokenId) public view returns (address){\n        return erc721Address.ownerOf(_tokenId);\n    }\n\n    function balanceOf() public view returns (uint256){\n        return address(this).balance;\n    }\n\n    function getApproved(uint256 _tokenId) public view returns (address){\n        return erc721Address.getApproved(_tokenId);\n    }\n\n    function setPrice(uint256 _tokenId, uint256 _ethPrice, uint256 _ethfee, uint256 _hbfee, bool _isHightLight) internal {\n        prices[_tokenId] = Price(msg.sender, _ethPrice, _ethfee, _hbfee, _isHightLight);\n        arrayTokenIdSale.push(_tokenId);\n    }\n\n    function calPriceFeeEth(uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public view returns(uint256, uint256) {\n        uint256 ethfee;\n        uint256 _hightLightFee = 0;\n        uint256 ethNeed;\n        if (_isHightLight == 1 && (prices[_tokenId].price == 0 || prices[_tokenId].isHightlight == false)) {\n            _hightLightFee = hightLightFee;\n        }\n        if (prices[_tokenId].price < _ethPrice) {\n            ethfee = (_ethPrice - prices[_tokenId].price) * ETHFee / Percen;\n            if(prices[_tokenId].price == 0) {\n                if (ethfee >= limitETHFee) {\n                    ethNeed = ethfee + _hightLightFee;\n                } else {\n                    ethNeed = limitETHFee + _hightLightFee;\n                }\n            }\n            \n        }\n        return (ethNeed, _hightLightFee);\n    }\n    function setPriceFeeEth(uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public payable {\n        require(erc721Address.ownerOf(_tokenId) == msg.sender && prices[_tokenId].price != _ethPrice);\n        uint256 ethfee;\n        uint256 _hightLightFee = 0;\n        if (_isHightLight == 1 && (prices[_tokenId].price == 0 || prices[_tokenId].isHightlight == false)) {\n            _hightLightFee = hightLightFee;\n        }\n        if (prices[_tokenId].price < _ethPrice) {\n            ethfee = (_ethPrice - prices[_tokenId].price) * ETHFee / Percen;\n            if(prices[_tokenId].price == 0) {\n                if (ethfee >= limitETHFee) {\n                    require(msg.value == ethfee + _hightLightFee);\n                } else {\n                    require(msg.value == limitETHFee + _hightLightFee);\n                    ethfee = limitETHFee;\n                }\n            }\n            ethfee += prices[_tokenId].fee;\n        } else ethfee = _ethPrice * ETHFee / Percen;\n\n        setPrice(_tokenId, _ethPrice, ethfee, 0, _isHightLight == 1 ? true : false);\n    }\n    function calPriceFeeHBWALLET(uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public view returns (uint256){\n        uint256 fee;\n        uint256 ethfee;\n        uint256 _hightLightFee = 0;\n        uint256 hbNeed;\n        if (_isHightLight == 1 && (prices[_tokenId].price == 0 || prices[_tokenId].isHightlight == false)) {\n            _hightLightFee = hightLightFee * HBWALLETExchange / 2 / (10 ** 16);\n        }\n        if (prices[_tokenId].price < _ethPrice) {\n            ethfee = (_ethPrice - prices[_tokenId].price) * ETHFee / Percen;\n            fee = ethfee * HBWALLETExchange / 2 / (10 ** 16);\n            // ethfee * HBWALLETExchange / 2 * (10 ** 2) / (10 ** 18)\n            if(prices[_tokenId].price == 0) {\n                if (fee >= limitHBWALLETFee) {\n                    hbNeed = fee + _hightLightFee;\n                } else {\n                    hbNeed = limitHBWALLETFee + _hightLightFee;\n                }\n            }\n        }\n        return hbNeed;\n    }\n    function setPriceFeeHBWALLET(uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public returns (bool){\n        require(erc721Address.ownerOf(_tokenId) == msg.sender && prices[_tokenId].price != _ethPrice);\n        uint256 fee;\n        uint256 ethfee;\n        uint256 _hightLightFee = 0;\n        if (_isHightLight == 1 && (prices[_tokenId].price == 0 || prices[_tokenId].isHightlight == false)) {\n            _hightLightFee = hightLightFee * HBWALLETExchange / 2 / (10 ** 16);\n        }\n        if (prices[_tokenId].price < _ethPrice) {\n            ethfee = (_ethPrice - prices[_tokenId].price) * ETHFee / Percen;\n            fee = ethfee * HBWALLETExchange / 2 / (10 ** 16);\n            // ethfee * HBWALLETExchange / 2 * (10 ** 2) / (10 ** 18)\n            if(prices[_tokenId].price == 0) {\n                if (fee >= limitHBWALLETFee) {\n                    require(hbwalletToken.transferFrom(msg.sender, address(this), fee + _hightLightFee));\n                } else {\n                    require(hbwalletToken.transferFrom(msg.sender, address(this), limitHBWALLETFee + _hightLightFee));\n                    fee = limitHBWALLETFee;\n                }\n            }\n            fee += prices[_tokenId].hbfee;\n        } else {\n            ethfee = _ethPrice * ETHFee / Percen;\n            fee = ethfee * HBWALLETExchange / 2 / (10 ** 16);\n        }\n\n        setPrice(_tokenId, _ethPrice, 0, fee, _isHightLight == 1 ? true : false);\n        return true;\n    }\n\n    function removePrice(uint256 tokenId) public returns (uint256){\n        require(erc721Address.ownerOf(tokenId) == msg.sender);\n        if (prices[tokenId].fee > 0) msg.sender.transfer(prices[tokenId].fee);\n        else if (prices[tokenId].hbfee > 0) hbwalletToken.transfer(msg.sender, prices[tokenId].hbfee);\n        resetPrice(tokenId);\n        return prices[tokenId].price;\n    }\n\n    function setFee(uint256 _ethFee, uint256 _HBWALLETExchange, uint256 _hightLightFee) public onlyOwner returns (uint256, uint256, uint256){\n        require(_ethFee >= 0 && _HBWALLETExchange >= 1 && _hightLightFee >= 0);\n        ETHFee = _ethFee;\n        HBWALLETExchange = _HBWALLETExchange;\n        hightLightFee = _hightLightFee;\n        return (ETHFee, HBWALLETExchange, hightLightFee);\n    }\n\n    function setLimitFee(uint256 _ethlimitFee, uint256 _hbWalletlimitFee) public onlyOwner returns (uint256, uint256){\n        require(_ethlimitFee >= 0 && _hbWalletlimitFee >= 0);\n        limitETHFee = _ethlimitFee;\n        limitHBWALLETFee = _hbWalletlimitFee;\n        return (limitETHFee, limitHBWALLETFee);\n    }\n    /**\n     * @dev Withdraw the amount of eth that is remaining in this contract.\n     * @param _address The address of EOA that can receive token from this contract.\n     */\n    function _withdraw(address payable _address, uint256 amount, uint256 _amountHB) internal {\n        require(_address != address(0) && amount >= 0 && address(this).balance >= amount && _amountHB >= 0 && hbwalletToken.balanceOf(address(this)) >= _amountHB);\n        _address.transfer(amount);\n        hbwalletToken.transferFrom(address(this), _address, _amountHB);\n    }\n    function withdraw(address payable _address, uint256 amount, uint256 _amountHB) public onlyCeoAddress {\n        _withdraw(_address, amount, _amountHB);\n    }\n    function cancelBussiness() public onlyCeoAddress {\n        for (uint i = 0; i < arrayTokenIdSale.length; i++) {\n            if (prices[arrayTokenIdSale[i]].tokenOwner == erc721Address.ownerOf(arrayTokenIdSale[i])) {\n                if (prices[arrayTokenIdSale[i]].fee > 0) {\n                    uint256 eth = prices[arrayTokenIdSale[i]].fee;\n                    if(prices[arrayTokenIdSale[i]].isHightlight == true) eth += hightLightFee;\n                    if(address(this).balance >= eth) {\n                        prices[arrayTokenIdSale[i]].tokenOwner.transfer(eth);\n                    } \n                }\n                else if (prices[arrayTokenIdSale[i]].hbfee > 0) {\n                    uint256 hb = prices[arrayTokenIdSale[i]].hbfee;\n                    if(prices[arrayTokenIdSale[i]].isHightlight == true) hb += hightLightFee * HBWALLETExchange / 2 / (10 ** 16);\n                    if(hbwalletToken.balanceOf(address(this)) >= hb) {\n                        hbwalletToken.transfer(prices[arrayTokenIdSale[i]].tokenOwner, hb);\n                    }\n                }\n            }\n        }\n        _withdraw(msg.sender, address(this).balance, hbwalletToken.balanceOf(address(this)));\n    }\n    \n    function revenue(bool _isEth) public view returns (uint256){\n        uint256 ethfee = 0;\n        uint256 hbfee = 0;\n        for (uint256 i = 0; i < arrayTokenIdSale.length; i++) {\n            if (prices[arrayTokenIdSale[i]].tokenOwner == erc721Address.ownerOf(arrayTokenIdSale[i])) {\n                if (prices[arrayTokenIdSale[i]].fee > 0) {\n                    ethfee += prices[arrayTokenIdSale[i]].fee;\n                }\n                else if (prices[arrayTokenIdSale[i]].hbfee > 0) {\n                    hbfee += prices[arrayTokenIdSale[i]].hbfee;\n                }\n            }\n        }\n        uint256 eth = address(this).balance - ethfee;\n        uint256 hb = hbwalletToken.balanceOf(address(this)) - hbfee;\n        return _isEth ? eth : hb;\n    }\n    \n    function changeCeo(address _address) public onlyCeoAddress {\n        require(_address != address(0));\n        ceoAddress = _address;\n\n    }\n\n    function buy(uint256 tokenId) public payable {\n        require(getApproved(tokenId) == address(this));\n        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);\n        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);\n        prices[tokenId].tokenOwner.transfer(msg.value);\n        resetPrice(tokenId);\n    }\n\n    function buyWithoutCheckApproved(uint256 tokenId) public payable {\n        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);\n        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);\n        prices[tokenId].tokenOwner.transfer(msg.value);\n        resetPrice(tokenId);\n    }\n\n    function resetPrice(uint256 tokenId) private {\n        prices[tokenId] = Price(address(0), 0, 0, 0, false);\n        for (uint256 i = 0; i < arrayTokenIdSale.length; i++) {\n            if (arrayTokenIdSale[i] == tokenId) {\n                _burnArrayTokenIdSale(i);\n            }\n        }\n    }\n}",
  "bytecode": "608060405273fce92d4163aa532aa096de8a3c4fef9f875bc55f600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507306012c8cf97bead5deae237070f9587f8e7a266d600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073ec7ba74789694d0d03d458965370dc7cf2fe75ba600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060196004556103e8600555601560065566071afd498d00006007556002600855666a94d74f43000060095534801561013a57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061324c8061018a6000396000f3fe6080604052600436106101c25760003560e01c8063966c17b8116100f7578063c8a6169811610095578063ebc4c0cb11610064578063ebc4c0cb14610954578063f095f081146109be578063f2fde38b146109e9578063f91d4fd914610a3a576101c2565b8063c8a616981461086d578063d96a094a146108be578063db83b4c0146108ec578063e0fe85fd14610903576101c2565b80639ed7a068116100d15780639ed7a068146106df578063a453f5c11461070d578063b5c5f6721461076d578063bc31c1c1146107d2576101c2565b8063966c17b8146105ff57806398208a83146106415780639cd0726a14610690576101c2565b80632619ba7f116101645780636352211e1161013e5780636352211e146104d75780636adeecb114610552578063722713f71461057d5780638da5cb5b146105a8576101c2565b80632619ba7f146103d85780635a79f63d146104035780635b65b9ab14610466576101c2565b80630eb0ef13116101a05780630eb0ef13146102c457806315171444146102ef5780631f3752a9146103565780632352a86414610381576101c2565b8063081812fc146101c75780630864f448146102425780630a0f81681461026d575b600080fd5b3480156101d357600080fd5b50610200600480360360208110156101ea57600080fd5b8101908080359060200190929190505050610a91565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024e57600080fd5b50610257610b48565b6040518082815260200191505060405180910390f35b34801561027957600080fd5b50610282610b4e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102d057600080fd5b506102d9610b74565b6040518082815260200191505060405180910390f35b3480156102fb57600080fd5b5061033c6004803603606081101561031257600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610b7a565b604051808215151515815260200191505060405180910390f35b34801561036257600080fd5b5061036b611072565b6040518082815260200191505060405180910390f35b34801561038d57600080fd5b50610396611078565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103e457600080fd5b506103ed61109e565b6040518082815260200191505060405180910390f35b34801561040f57600080fd5b506104506004803603606081101561042657600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506110a4565b6040518082815260200191505060405180910390f35b34801561047257600080fd5b506104b36004803603606081101561048957600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506111e4565b60405180848152602001838152602001828152602001935050505060405180910390f35b3480156104e357600080fd5b50610510600480360360208110156104fa57600080fd5b8101908080359060200190929190505050611297565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055e57600080fd5b5061056761134e565b6040518082815260200191505060405180910390f35b34801561058957600080fd5b50610592611354565b6040518082815260200191505060405180910390f35b3480156105b457600080fd5b506105bd611373565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61063f6004803603606081101561061557600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611398565b005b34801561064d57600080fd5b5061067a6004803603602081101561066457600080fd5b81019080803590602001909291905050506115fc565b6040518082815260200191505060405180910390f35b34801561069c57600080fd5b506106c9600480360360208110156106b357600080fd5b810190808035906020019092919050505061161d565b6040518082815260200191505060405180910390f35b61070b600480360360208110156106f557600080fd5b81019080803590602001909291905050506118c8565b005b34801561071957600080fd5b506107506004803603604081101561073057600080fd5b810190808035906020019092919080359060200190929190505050611ac0565b604051808381526020018281526020019250505060405180910390f35b34801561077957600080fd5b506107d06004803603606081101561079057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611b56565b005b3480156107de57600080fd5b5061080b600480360360208110156107f557600080fd5b8101908080359060200190929190505050611bc0565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001821515151581526020019550505050505060405180910390f35b34801561087957600080fd5b506108bc6004803603602081101561089057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c23565b005b6108ea600480360360208110156108d457600080fd5b8101908080359060200190929190505050611cfb565b005b3480156108f857600080fd5b50610901611f33565b005b34801561090f57600080fd5b5061093e6004803603602081101561092657600080fd5b8101908080351515906020019092919050505061264c565b6040518082815260200191505060405180910390f35b34801561096057600080fd5b506109a16004803603606081101561097757600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506129ac565b604051808381526020018281526020019250505060405180910390f35b3480156109ca57600080fd5b506109d3612ab0565b6040518082815260200191505060405180910390f35b3480156109f557600080fd5b50610a3860048036036020811015610a0c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ab6565b005b348015610a4657600080fd5b50610a4f612c07565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081812fc836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610b0657600080fd5b505afa158015610b1a573d6000803e3d6000fd5b505050506040513d6020811015610b3057600080fd5b81019080805190602001909291905050509050919050565b60095481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60003373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610c0657600080fd5b505afa158015610c1a573d6000803e3d6000fd5b505050506040513d6020811015610c3057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16148015610c7a575082600b60008681526020019081526020016000206001015414155b610c8357600080fd5b6000806000809050600185148015610ce357506000600b6000898152602001908152602001600020600101541480610ce2575060001515600b600089815260200190815260200160002060040160009054906101000a900460ff161515145b5b15610d0c57662386f26fc1000060026006546009540281610d0057fe5b0481610d0857fe5b0490505b85600b600089815260200190815260200160002060010154101561101157600554600454600b60008a81526020019081526020016000206001015488030281610d5157fe5b049150662386f26fc100006002600654840281610d6a57fe5b0481610d7257fe5b0492506000600b6000898152602001908152602001600020600101541415610ff1576008548310610ec557600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308487016040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610e7c57600080fd5b505af1158015610e90573d6000803e3d6000fd5b505050506040513d6020811015610ea657600080fd5b8101908080519060200190929190505050610ec057600080fd5b610ff0565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333084600854016040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610fa657600080fd5b505af1158015610fba573d6000803e3d6000fd5b505050506040513d6020811015610fd057600080fd5b8101908080519060200190929190505050610fea57600080fd5b60085492505b5b600b60008881526020019081526020016000206003015483019250611045565b60055460045487028161102057fe5b049150662386f26fc10000600260065484028161103957fe5b048161104157fe5b0492505b611064878760008660018a1461105c57600061105f565b60015b612c2d565b600193505050509392505050565b60065481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b60008060008060009050600060018614801561110857506000600b60008a8152602001908152602001600020600101541480611107575060001515600b60008a815260200190815260200160002060040160009054906101000a900460ff161515145b5b1561113157662386f26fc100006002600654600954028161112557fe5b048161112d57fe5b0491505b86600b60008a81526020019081526020016000206001015410156111d657600554600454600b60008b8152602001908152602001600020600101548903028161117657fe5b049250662386f26fc10000600260065485028161118f57fe5b048161119757fe5b0493506000600b60008a81526020019081526020016000206001015414156111d55760085484106111cc5781840190506111d4565b816008540190505b5b5b809450505050509392505050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461124257600080fd5b60008610158015611254575060018510155b8015611261575060008410155b61126a57600080fd5b85600481905550846006819055508360098190555060045460065460095492509250925093509350939050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561130c57600080fd5b505afa158015611320573d6000803e3d6000fd5b505050506040513d602081101561133657600080fd5b81019080805190602001909291905050509050919050565b60055481565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561142257600080fd5b505afa158015611436573d6000803e3d6000fd5b505050506040513d602081101561144c57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16148015611496575081600b60008581526020019081526020016000206001015414155b61149f57600080fd5b600080600090506001831480156114fe57506000600b60008781526020019081526020016000206001015414806114fd575060001515600b600087815260200190815260200160002060040160009054906101000a900460ff161515145b5b156115095760095490505b83600b60008781526020019081526020016000206001015410156115c357600554600454600b6000888152602001908152602001600020600101548603028161154e57fe5b0491506000600b60008781526020019081526020016000206001015414156115a357600754821061158c57808201341461158757600080fd5b6115a2565b8060075401341461159c57600080fd5b60075491505b5b600b600086815260200190815260200160002060020154820191506115d6565b6005546004548502816115d257fe5b0491505b6115f58585846000600188146115ed5760006115f0565b60015b612c2d565b5050505050565b600a818154811061160957fe5b906000526020600020016000915090505481565b60003373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156116a957600080fd5b505afa1580156116bd573d6000803e3d6000fd5b505050506040513d60208110156116d357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461170457600080fd5b6000600b6000848152602001908152602001600020600201541115611785573373ffffffffffffffffffffffffffffffffffffffff166108fc600b6000858152602001908152602001600020600201549081150290604051600060405180830381858888f1935050505015801561177f573d6000803e3d6000fd5b506118a1565b6000600b60008481526020019081526020016000206003015411156118a057600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600b6000868152602001908152602001600020600301546040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561186357600080fd5b505af1158015611877573d6000803e3d6000fd5b505050506040513d602081101561188d57600080fd5b8101908080519060200190929190505050505b5b6118aa82612d3a565b600b6000838152602001908152602001600020600101549050919050565b6000600b600083815260200190815260200160002060010154118015611903575034600b600083815260200190815260200160002060010154145b61190c57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600b600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015611a1f57600080fd5b505af1158015611a33573d6000803e3d6000fd5b50505050600b600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611ab3573d6000803e3d6000fd5b50611abd81612d3a565b50565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b1c57600080fd5b60008410158015611b2e575060008310155b611b3757600080fd5b8360078190555082600881905550600754600854915091509250929050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bb057600080fd5b611bbb838383612e66565b505050565b600b6020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c7d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611cb757600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3073ffffffffffffffffffffffffffffffffffffffff16611d1b82610a91565b73ffffffffffffffffffffffffffffffffffffffff1614611d3b57600080fd5b6000600b600083815260200190815260200160002060010154118015611d76575034600b600083815260200190815260200160002060010154145b611d7f57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600b600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015611e9257600080fd5b505af1158015611ea6573d6000803e3d6000fd5b50505050600b600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611f26573d6000803e3d6000fd5b50611f3081612d3a565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f8d57600080fd5b60008090505b600a8054905081101561254e57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e600a8381548110611feb57fe5b90600052602060002001546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561202a57600080fd5b505afa15801561203e573d6000803e3d6000fd5b505050506040513d602081101561205457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600b6000600a848154811061208c57fe5b9060005260206000200154815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612541576000600b6000600a84815481106120f857fe5b90600052602060002001548152602001908152602001600020600201541115612255576000600b6000600a848154811061212e57fe5b9060005260206000200154815260200190815260200160002060020154905060011515600b6000600a858154811061216257fe5b9060005260206000200154815260200190815260200160002060040160009054906101000a900460ff161515141561219c57600954810190505b803073ffffffffffffffffffffffffffffffffffffffff16311061224f57600b6000600a84815481106121cb57fe5b9060005260206000200154815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561224d573d6000803e3d6000fd5b505b50612540565b6000600b6000600a848154811061226857fe5b9060005260206000200154815260200190815260200160002060030154111561253f576000600b6000600a848154811061229e57fe5b9060005260206000200154815260200190815260200160002060030154905060011515600b6000600a85815481106122d257fe5b9060005260206000200154815260200190815260200160002060040160009054906101000a900460ff161515141561232a57662386f26fc100006002600654600954028161231c57fe5b048161232457fe5b04810190505b80600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156123ca57600080fd5b505afa1580156123de573d6000803e3d6000fd5b505050506040513d60208110156123f457600080fd5b81019080805190602001909291905050501061253d57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600b6000600a868154811061245957fe5b9060005260206000200154815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561250057600080fd5b505af1158015612514573d6000803e3d6000fd5b505050506040513d602081101561252a57600080fd5b8101908080519060200190929190505050505b505b5b5b8080600101915050611f93565b5061264a333073ffffffffffffffffffffffffffffffffffffffff1631600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561260a57600080fd5b505afa15801561261e573d6000803e3d6000fd5b505050506040513d602081101561263457600080fd5b8101908080519060200190929190505050612e66565b565b60008060009050600080905060008090505b600a8054905081101561289557600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e600a83815481106126b657fe5b90600052602060002001546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156126f557600080fd5b505afa158015612709573d6000803e3d6000fd5b505050506040513d602081101561271f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600b6000600a848154811061275757fe5b9060005260206000200154815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612888576000600b6000600a84815481106127c357fe5b9060005260206000200154815260200190815260200160002060020154111561281d57600b6000600a83815481106127f757fe5b906000526020600020015481526020019081526020016000206002015483019250612887565b6000600b6000600a848154811061283057fe5b9060005260206000200154815260200190815260200160002060030154111561288657600b6000600a838154811061286457fe5b9060005260206000200154815260200190815260200160002060030154820191505b5b5b808060010191505061265e565b506000823073ffffffffffffffffffffffffffffffffffffffff1631039050600082600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561295657600080fd5b505afa15801561296a573d6000803e3d6000fd5b505050506040513d602081101561298057600080fd5b81019080805190602001909291905050500390508561299f57806129a1565b815b945050505050919050565b600080600080600090506000600186148015612a1057506000600b60008a8152602001908152602001600020600101541480612a0f575060001515600b60008a815260200190815260200160002060040160009054906101000a900460ff161515145b5b15612a1b5760095491505b86600b60008a8152602001908152602001600020600101541015612a9f57600554600454600b60008b81526020019081526020016000206001015489030281612a6057fe5b0492506000600b60008a8152602001908152602001600020600101541415612a9e576007548310612a95578183019050612a9d565b816007540190505b5b5b808294509450505050935093915050565b60075481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612b0f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b4957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001821515815250600b600087815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050600a8590806001815401808255809150509060018203906000526020600020016000909192909190915055505050505050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160001515815250600b600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555090505060008090505b600a80549050811015612e625781600a8281548110612e3a57fe5b90600052602060002001541415612e5557612e5481613127565b5b8080600101915050612e1f565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612ea4575060008210155b8015612ec75750813073ffffffffffffffffffffffffffffffffffffffff163110155b8015612ed4575060008110155b8015612fb9575080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612f7b57600080fd5b505afa158015612f8f573d6000803e3d6000fd5b505050506040513d6020811015612fa557600080fd5b810190808051906020019092919050505010155b612fc257600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015613008573d6000803e3d6000fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3085846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156130e657600080fd5b505af11580156130fa573d6000803e3d6000fd5b505050506040513d602081101561311057600080fd5b810190808051906020019092919050505050505050565b600a805490508110613138576131cc565b60008190505b6001600a805490500381101561319157600a600182018154811061315e57fe5b9060005260206000200154600a828154811061317657fe5b9060005260206000200181905550808060010191505061313e565b50600a6001600a8054905003815481106131a757fe5b9060005260206000200160009055600a8054809190600190036131ca91906131cf565b505b50565b8154818355818111156131f6578183600052602060002091820191016131f591906131fb565b5b505050565b61321d91905b80821115613219576000816000905550600101613201565b5090565b9056fea165627a7a72305820a3871d99877efdcc2c705f75744d62a662c1e4006e79d72191781603f44663380029"
}