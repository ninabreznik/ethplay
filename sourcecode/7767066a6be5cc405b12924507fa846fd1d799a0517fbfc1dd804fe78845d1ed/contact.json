{
  "address": "0xcaec691284cb2d0cc5bd8987700fec8006a139fc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WRLToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-17\n*/\n\npragma solidity ^0.4.19;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  \n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ncontract StandardToken is ERC20, Ownable {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n  \n  address internal tokensHolder = 0x2Ff4be5E03a079D5FC20Dba8d763059FcB78CA9f;\n  address internal burnAndRef = 0x84765e3f2D0379eC7AAb7de8b480762a75f14ef4;\n\n  uint256 totalSupply_;\n  uint256 tokensDistributed_;\n  uint256 burnedTokens_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n  function tokensAvailable() public view returns (uint256) {\n    return balances[tokensHolder];\n  }\n  function tokensDistributed() public view returns (uint256) {\n    return tokensDistributed_;\n  }\n  function getTokensHolder() public view returns (address) {\n    return tokensHolder;\n  }\n  function burnedTokens() public view returns (uint256) {\n    return burnedTokens_;\n  }\n  function getRefAddress() public view returns (address) {\n    return burnAndRef;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  \n  function deposit(address _to, uint256 _value) onlyOwner public returns (bool) {\n    require(_to != address(0));\n    require(_value <= tokensAvailable());\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[tokensHolder] = balances[tokensHolder].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    tokensDistributed_ = tokensDistributed_.add(_value);\n    emit Transfer(address(0), _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract MintableToken is StandardToken {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\ncontract BurnableToken is MintableToken {\n\n  event Burn(address indexed burner, uint256 value);\n  \n  function transferToRef(address _to, uint256 _value) public onlyOwner {\n    require(_value <= balances[tokensHolder]);\n\n    balances[tokensHolder] = balances[tokensHolder].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    tokensDistributed_ = tokensDistributed_.add(_value);\n    emit Transfer(tokensHolder, address(0), _value);\n  }\n  \n  function burnTokens(uint256 _value) public onlyOwner {\n    require(_value <= balances[burnAndRef]);\n\n    balances[burnAndRef] = balances[burnAndRef].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    burnedTokens_ = burnedTokens_.add(_value);\n    emit Burn(burnAndRef, _value);\n    emit Transfer(burnAndRef, address(0), _value);\n  }\n}\n\ncontract WRLToken is BurnableToken {\n    string public name = \"Whyral Token\";\n    string public symbol = \"WRL\";\n    uint256 public decimals = 8;\n    \n    uint256 internal rate;\n    \n    uint256 public currentStage;\n  \n    uint256 internal stage0Cap = 42000000 * (10 ** uint256(decimals));\n    uint256 internal stage1Cap = 71165000 * (10 ** uint256(decimals));  //29165000\n    uint256 internal stage2Cap = 91165000 * (10 ** uint256(decimals));  //20000000\n    uint256 internal stage3Cap = 103497402 * (10 ** uint256(decimals)); //12332402\n\n    uint256 internal stage0Start = 1523782800; //15 April 2018\n    uint256 internal stage0End = 1527764400;   //31 May 2018\n    uint256 internal stage1Start = 1528016400; //3 June 2018\n    uint256 internal stage1End = 1530356400;   //30 June 2018\n    uint256 internal stage2Start = 1530608400; //3 July 2018\n    uint256 internal stage2End = 1532516400;   //25 July 2018\n    uint256 internal stage3Start = 1532768400; //28 July 2018\n    uint256 internal stage3End = 1534330800;   //15 Aug 2018\n    \n    uint256 internal stage0Rate = 700000;  //1 ETH = 7000.00 Decimal is considered while calculation\n    uint256 internal stage1Rate = 583300;  //1 ETH = 5833.00 Decimal is considered while calculation\n    uint256 internal stage2Rate = 500000;  //1 ETH = 5000.00 Decimal is considered while calculation\n    uint256 internal stage3Rate = 466782;  //1 ETH = 4667.82 Decimal is considered while calculation\n    \n    function getStage0Cap() public view returns (uint256) {\n        return stage0Cap;\n    }\n    function getStage1Cap() public view returns (uint256) {\n        return stage1Cap;\n    }\n    function getStage2Cap() public view returns (uint256) {\n        return stage2Cap;\n    }\n    function getStage3Cap() public view returns (uint256) {\n        return stage3Cap;\n    }\n    function getStage0End() public view returns (uint256) {\n        return stage0End;\n    }\n    function getStage1End() public view returns (uint256) {\n        return stage1End;\n    }\n    function getStage2End() public view returns (uint256) {\n        return stage2End;\n    }\n    function getStage3End() public view returns (uint256) {\n        return stage3End;\n    }\n    function getStage0Start() public view returns (uint256) {\n        return stage0Start;\n    }\n    function getStage1Start() public view returns (uint256) {\n        return stage1Start;\n    }\n    function getStage2Start() public view returns (uint256) {\n        return stage2Start;\n    }\n    function getStage3Start() public view returns (uint256) {\n        return stage3Start;\n    }\n    function getDecimals() public view returns (uint256) {\n        return decimals;\n    }\n\n    \n    function getRateStages(uint256 _tokens) public onlyOwner returns(uint256) {\n      uint256 tokensDistributedValue = tokensDistributed();\n      tokensDistributedValue = tokensDistributedValue.sub(4650259800000000);\n      uint256 burnedTokensValue = burnedTokens();\n      uint256 currentValue = tokensDistributedValue.add(burnedTokensValue);\n      uint256 finalTokenValue = currentValue.add(_tokens);\n      uint256 toBeBurned;\n      \n      if(now >= stage0Start && now < stage0End) {\n          if(finalTokenValue <= stage0Cap) {\n              rate = stage0Rate;\n              currentStage = 0;\n          }\n          else {\n              rate = 0;\n              currentStage = 0;\n          }\n      }\n      else if(now >= stage1Start && now < stage1End) {\n          if(currentValue < stage0Cap) {\n              toBeBurned = stage0Cap.sub(currentValue);\n              transferToRef(burnAndRef, toBeBurned);\n              \n              finalTokenValue = finalTokenValue.add(toBeBurned);\n              \n              if(finalTokenValue <= stage1Cap) {\n                  rate = stage1Rate;\n                  currentStage = 1;\n              }\n              else {\n                  rate = 0;\n                  currentStage = 1;\n              }\n          }\n          else {\n              if(finalTokenValue <= stage1Cap) {\n                  rate = stage1Rate;\n                  currentStage = 1;\n              }\n              else {\n                  rate = 0;\n                  currentStage = 1;\n              }\n          }\n      }\n      else if(now >= stage2Start && now < stage2End) {\n          if(currentValue < stage1Cap) {\n              toBeBurned = stage1Cap.sub(currentValue);\n              transferToRef(burnAndRef, toBeBurned);\n              \n              finalTokenValue = finalTokenValue.add(toBeBurned);\n              \n              if(finalTokenValue <= stage2Cap) {\n                  rate = stage2Rate;\n                  currentStage = 2;\n              }\n              else {\n                  rate = 0;\n                  currentStage = 2;\n              }\n          }\n          else {\n              if(finalTokenValue <= stage2Cap) {\n                  rate = stage2Rate;\n                  currentStage = 2;\n              }\n              else {\n                  rate = 0;\n                  currentStage = 2;\n              }\n          }\n      }\n      else if(now >= stage3Start && now < stage3End) {\n          if(currentValue < stage2Cap) {\n              toBeBurned = stage2Cap.sub(currentValue);\n              transferToRef(burnAndRef, toBeBurned);\n              \n              finalTokenValue = finalTokenValue.add(toBeBurned);\n              \n              if(finalTokenValue <= stage3Cap) {\n                  rate = stage3Rate;\n                  currentStage = 3;\n              }\n              else {\n                  rate = 0;\n                  currentStage = 3;\n              }\n          }\n          else {\n              if(finalTokenValue <= stage3Cap) {\n                  rate = stage3Rate;\n                  currentStage = 3;\n              }\n              else {\n                  rate = 0;\n                  currentStage = 3;\n              }\n          }\n      }\n      else if(now >= stage3End) {\n          if(currentValue < stage3Cap) {\n              toBeBurned = stage3Cap.sub(currentValue);\n              transferToRef(burnAndRef, toBeBurned);\n              \n              rate = 0;\n              currentStage = 4;\n          }\n          else {\n              rate = 0;\n              currentStage = 4;\n          }\n      }\n      else {\n          rate = 0;\n      }\n      \n      return rate;\n  }\n    \n    function WRLToken() public {\n        totalSupply_ = 0;\n        tokensDistributed_ = 0;\n        currentStage = 0;\n        \n        uint256 __initialSupply = 150000000 * (10 ** uint256(decimals));\n        address tokensHolder = getTokensHolder();\n        mint(tokensHolder, __initialSupply);\n        finishMinting();\n    }\n}\n\ncontract TimedCrowdsale {\n  using SafeMath for uint256;\n\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range. \n   */\n  modifier onlyWhileOpen {\n    require(now >= openingTime && now <= closingTime);\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param _openingTime Crowdsale opening time\n   * @param _closingTime Crowdsale closing time\n   */\n  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n    require(_openingTime >= now);\n    require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    return now > closingTime;\n  }\n  \n  function isOpen() public view returns (bool) {\n    return ((now > openingTime) && (now < closingTime));\n  }\n  \n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n    //super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\ncontract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n  \n  // The token being sold\n  WRLToken public token;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasClosed());\n\n    finalization();\n    emit Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n      token.getRateStages(0);\n  }\n}\n\ncontract WhitelistedCrowdsale is FinalizableCrowdsale {\n\n  mapping(address => bool) public whitelist;\n\n  /**\n   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n   */\n  modifier isWhitelisted(address _beneficiary) {\n    require(whitelist[_beneficiary]);\n    _;\n  }\n\n  /**\n   * @dev Adds single address to whitelist.\n   * @param _beneficiary Address to be added to the whitelist\n   */\n  function addToWhitelist(address _beneficiary) external onlyOwner {\n    whitelist[_beneficiary] = true;\n  }\n\n  /**\n   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n   * @param _beneficiaries Addresses to be added to the whitelist\n   */\n  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n      whitelist[_beneficiaries[i]] = true;\n    }\n  }\n\n  /**\n   * @dev Removes single address from whitelist.\n   * @param _beneficiary Address to be removed to the whitelist\n   */\n  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n    whitelist[_beneficiary] = false;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n   * @param _beneficiary Token beneficiary\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\ncontract WRLCrowdsale is WhitelistedCrowdsale {\n  using SafeMath for uint256;\n\n  // Address where funds are collected\n  address public wallet = 0x4fB0346F51fA853639EC0d0dA211Cb6F3e27a1f5;\n  // Other Addresses\n  address internal foundersAndTeam = 0x2E6f0ebFdee59546f224450Ba0c8F0522cedA2e9;\n  address internal advisors = 0xCa502d4cEaa99Bf1aD554f91FD2A9013511629D4;\n  address internal bounties = 0x45138E31Ab7402b8Cf363F9d4e732fdb020e5Dd8;\n  address internal reserveFund = 0xE9ebcAdB98127e3CDe242EaAdcCb57BF0d9576Cc;\n  \n  uint256 internal foundersAndTeamTokens = 22502598 * (10 ** uint256(8));\n  uint256 internal advisorsTokens = 12000000 * (10 ** uint256(8));\n  uint256 internal bountiesTokens = 6000000 * (10 ** uint256(8));\n  uint256 internal reserveFundTokens = 6000000 * (10 ** uint256(8));\n    \n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n  \n  //1523782800 : 15 April 2018\n  //1534330800 : 15 Aug 2018\n  function WRLCrowdsale() public \n     TimedCrowdsale(1523782800, 1534330800)\n  {\n      weiRaised = 0;\n      \n      token = new WRLToken();\n      \n      token.deposit(foundersAndTeam, foundersAndTeamTokens);\n      token.deposit(advisors, advisorsTokens);\n      token.deposit(bounties, bountiesTokens);\n      token.deposit(reserveFund, reserveFundTokens);\n  }\n  \n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n    require(msg.value >= 100000000000000000);\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n    uint256 rate = token.getRateStages(tokens);\n    require(rate != 0);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n  \n  function referralTokens(address _beneficiary, uint256 _tokens) onlyOwner public {\n      uint256 decimals = token.getDecimals();\n      _tokens = _tokens * (10 ** uint256(decimals));\n      _preValidatePurchase(_beneficiary, _tokens);\n      \n      uint256 rate = token.getRateStages(_tokens);\n      require(rate != 0);\n      \n      _processPurchase(_beneficiary, _tokens);\n      emit TokenPurchase(msg.sender, _beneficiary, 0, _tokens);\n      \n      _updatePurchasingState(_beneficiary, 0);\n      \n      _postValidatePurchase(_beneficiary, 0);\n  }\n  \n  function callStages() onlyOwner public {\n      token.getRateStages(0);\n  }\n  \n  function callBurnTokens(uint256 _tokens) public {\n      address a = token.getRefAddress();\n      require(msg.sender == a);\n      \n      token.burnTokens(_tokens);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n    require(_tokenAmount <= token.tokensAvailable());\n\n    token.deposit(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount) internal returns (uint256) {\n      uint256 tokenAmount = _weiAmount;\n      uint256 rate = token.getRateStages(0);\n      require(rate != 0);\n      tokenAmount = tokenAmount.mul(rate);\n      tokenAmount = tokenAmount.div(1000000000000);\n      return tokenAmount;\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage3End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage0Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage2End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage3Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRefAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage2Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage0End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"getRateStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage2Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage3Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage1Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage0Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage1End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage1Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604052732ff4be5e03a079d5fc20dba8d763059fcb78ca9f600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507384765e3f2d0379ec7aab7de8b480762a75f14ef4600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548160ff0219169083151502179055506040805190810160405280600c81526020017f57687972616c20546f6b656e00000000000000000000000000000000000000008152506008908051906020019062000116929190620005fa565b506040805190810160405280600381526020017f57524c00000000000000000000000000000000000000000000000000000000008152506009908051906020019062000164929190620005fa565b506008600a55600a54600a0a630280de8002600d55600a54600a0a63043de44802600e55600a54600a0a63056f114802600f55600a54600a0a63062b3eba02601055635ad31490601155635b0fd5b0601255635b13ae10601355635b3762b0601455635b3b3b10601555635b585830601655635b5c3090601755635b7407b0601855620aae606019556208e684601a556207a120601b5562071f5e601c5534156200020e57600080fd5b600080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060048190555060006005819055506000600c81905550600a54600a0a6308f0d18002915062000295620002df6401000000000262001201176401000000009004565b9050620002b78183620003096401000000000262000d68176401000000009004565b50620002d66200051264010000000002620015c2176401000000009004565b505050620006a9565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200036757600080fd5b600760009054906101000a900460ff161515156200038457600080fd5b620003a982600454620005db6401000000000262001f8b179091906401000000009004565b6004819055506200041182600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620005db6401000000000262001f8b179091906401000000009004565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200057057600080fd5b600760009054906101000a900460ff161515156200058d57600080fd5b6001600760006101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b6000808284019050838110151515620005f057fe5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200063d57805160ff19168380011785556200066e565b828001600101855582156200066e579182015b828111156200066d57825182559160200191906001019062000650565b5b5090506200067d919062000681565b5090565b620006a691905b80821115620006a257600081600090555060010162000688565b5090565b90565b611fd580620006b96000396000f3006060604052600436106101ac576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b146101b157806306fdde03146101de5780630caa86051461026c5780630dee302e146102955780630f8bca8c146102d7578063152e84a71461030057806318160ddd14610329578063253f055b14610352578063313ce5671461037b578063350279c6146103a45780633f9ce517146103cd5780633fa2dd2a1461042257806340c10f191461044b57806347b5dd54146104a557806347e7ef24146104ce578063566a3cb5146105285780635bf5d54c1461057d57806360659a92146105a657806363e94cee146105cf5780636d1b229d146105f857806370a082311461061b5780637d64bcb4146106685780638da5cb5b1461069557806395d89b41146106ea578063a007bc4514610778578063a6a5bfe3146107af578063a9059cbb146107d8578063dcd4090b14610832578063ebffd7e31461085b578063f0141d8414610884578063f0369550146108ad578063f2fde38b146108d6578063f315e81d1461090f578063f36e20db14610938575b600080fd5b34156101bc57600080fd5b6101c4610961565b604051808215151515815260200191505060405180910390f35b34156101e957600080fd5b6101f1610974565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610231578082015181840152602081019050610216565b50505050905090810190601f16801561025e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027757600080fd5b61027f610a12565b6040518082815260200191505060405180910390f35b34156102a057600080fd5b6102d5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a1c565b005b34156102e257600080fd5b6102ea610cfc565b6040518082815260200191505060405180910390f35b341561030b57600080fd5b610313610d06565b6040518082815260200191505060405180910390f35b341561033457600080fd5b61033c610d10565b6040518082815260200191505060405180910390f35b341561035d57600080fd5b610365610d1a565b6040518082815260200191505060405180910390f35b341561038657600080fd5b61038e610d24565b6040518082815260200191505060405180910390f35b34156103af57600080fd5b6103b7610d2a565b6040518082815260200191505060405180910390f35b34156103d857600080fd5b6103e0610d34565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561042d57600080fd5b610435610d5e565b6040518082815260200191505060405180910390f35b341561045657600080fd5b61048b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d68565b604051808215151515815260200191505060405180910390f35b34156104b057600080fd5b6104b8610f4f565b6040518082815260200191505060405180910390f35b34156104d957600080fd5b61050e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f59565b604051808215151515815260200191505060405180910390f35b341561053357600080fd5b61053b611201565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561058857600080fd5b61059061122b565b6040518082815260200191505060405180910390f35b34156105b157600080fd5b6105b9611231565b6040518082815260200191505060405180910390f35b34156105da57600080fd5b6105e261129a565b6040518082815260200191505060405180910390f35b341561060357600080fd5b61061960048080359060200190919050506112a4565b005b341561062657600080fd5b610652600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611579565b6040518082815260200191505060405180910390f35b341561067357600080fd5b61067b6115c2565b604051808215151515815260200191505060405180910390f35b34156106a057600080fd5b6106a8611689565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106f557600080fd5b6106fd6116ae565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561073d578082015181840152602081019050610722565b50505050905090810190601f16801561076a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561078357600080fd5b610799600480803590602001909190505061174c565b6040518082815260200191505060405180910390f35b34156107ba57600080fd5b6107c2611bb3565b6040518082815260200191505060405180910390f35b34156107e357600080fd5b610818600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611bbd565b604051808215151515815260200191505060405180910390f35b341561083d57600080fd5b610845611de1565b6040518082815260200191505060405180910390f35b341561086657600080fd5b61086e611deb565b6040518082815260200191505060405180910390f35b341561088f57600080fd5b610897611df5565b6040518082815260200191505060405180910390f35b34156108b857600080fd5b6108c0611dff565b6040518082815260200191505060405180910390f35b34156108e157600080fd5b61090d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e09565b005b341561091a57600080fd5b610922611f5e565b6040518082815260200191505060405180910390f35b341561094357600080fd5b61094b611f68565b6040518082815260200191505060405180910390f35b600760009054906101000a900460ff1681565b60088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a0a5780601f106109df57610100808354040283529160200191610a0a565b820191906000526020600020905b8154815290600101906020018083116109ed57829003601f168201915b505050505081565b6000601854905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a7757600080fd5b60016000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515610ae757600080fd5b610b5b8160016000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f7290919063ffffffff16565b60016000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c1281600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f8b90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c6a81600554611f8b90919063ffffffff16565b600581905550600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000601154905090565b6000600554905090565b6000600454905090565b6000601654905090565b600a5481565b6000601054905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600f54905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dc557600080fd5b600760009054906101000a900460ff16151515610de157600080fd5b610df682600454611f8b90919063ffffffff16565b600481905550610e4e82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f8b90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600654905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fb657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610ff257600080fd5b610ffa611231565b821115151561100857600080fd5b61107c8260016000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f7290919063ffffffff16565b60016000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061113382600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f8b90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061118b82600554611f8b90919063ffffffff16565b6005819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600c5481565b600060016000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000601254905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112ff57600080fd5b60016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561136f57600080fd5b6113e38160016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f7290919063ffffffff16565b60016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061145d81600454611f7290919063ffffffff16565b60048190555061147881600654611f8b90919063ffffffff16565b600681905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561161f57600080fd5b600760009054906101000a900460ff1615151561163b57600080fd5b6001600760006101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117445780601f1061171957610100808354040283529160200191611744565b820191906000526020600020905b81548152906001019060200180831161172757829003601f168201915b505050505081565b6000806000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117b057600080fd5b6117b8610d06565b94506117d466108562fb7e060086611f7290919063ffffffff16565b94506117de610f4f565b93506117f38486611f8b90919063ffffffff16565b92506118088784611f8b90919063ffffffff16565b9150601154421015801561181d575060125442105b1561185957600d548211151561184357601954600b819055506000600c81905550611854565b6000600b819055506000600c819055505b611ba4565b601354421015801561186c575060145442105b1561194257600d5483101561190a5761189083600d54611f7290919063ffffffff16565b90506118be600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682610a1c565b6118d18183611f8b90919063ffffffff16565b9150600e54821115156118f457601a54600b819055506001600c81905550611905565b6000600b819055506001600c819055505b61193d565b600e548211151561192b57601a54600b819055506001600c8190555061193c565b6000600b819055506001600c819055505b5b611ba3565b6015544210158015611955575060165442105b15611a2b57600e548310156119f35761197983600e54611f7290919063ffffffff16565b90506119a7600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682610a1c565b6119ba8183611f8b90919063ffffffff16565b9150600f54821115156119dd57601b54600b819055506002600c819055506119ee565b6000600b819055506002600c819055505b611a26565b600f5482111515611a1457601b54600b819055506002600c81905550611a25565b6000600b819055506002600c819055505b5b611ba2565b6017544210158015611a3e575060185442105b15611b1457600f54831015611adc57611a6283600f54611f7290919063ffffffff16565b9050611a90600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682610a1c565b611aa38183611f8b90919063ffffffff16565b915060105482111515611ac657601c54600b819055506003600c81905550611ad7565b6000600b819055506003600c819055505b611b0f565b60105482111515611afd57601c54600b819055506003600c81905550611b0e565b6000600b819055506003600c819055505b5b611ba1565b60185442101515611b9757601054831015611b8157611b3e83601054611f7290919063ffffffff16565b9050611b6c600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682610a1c565b6000600b819055506004600c81905550611b92565b6000600b819055506004600c819055505b611ba0565b6000600b819055505b5b5b5b5b600b5495505050505050919050565b6000601554905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611bfa57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611c4857600080fd5b611c9a82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f7290919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d2f82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f8b90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000601754905090565b6000600e54905090565b6000600a54905090565b6000600d54905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e6457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611ea057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000601454905090565b6000601354905090565b6000828211151515611f8057fe5b818303905092915050565b6000808284019050838110151515611f9f57fe5b80915050929150505600a165627a7a72305820eaa5444fed34abad52a506e4b72fc818d49358ae9e86df74d53c8c49c9fd2a280029"
}