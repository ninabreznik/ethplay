{
  "address": "0x0200412995f1bafef0d3f97c4e28ac2515ec1ece",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "FollowCoin Token",
  "contractName": "FollowCoin",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-20\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/ERC223Receiver.sol\n\n/**\n * @title Contract that will work with ERC223 tokens.\n */\n\ncontract ERC223Receiver {\n\t/**\n\t * @dev Standard ERC223 function that will handle incoming token transfers.\n\t *\n\t * @param _from  Token sender address.\n\t * @param _value Amount of tokens.\n\t * @param _data  Transaction metadata.\n\t */\n\tfunction tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/ownership/Claimable.sol\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/ERC223Token.sol\n\n/*!\tERC223 token implementation\n */\ncontract ERC223Token is StandardToken, Claimable {\n\tusing SafeMath for uint256;\n\n\tbool public erc223Activated;\n\n\t/*!\tWhitelisting addresses of smart contracts which have\n\n\t */\n\tmapping (address => bool) public whiteListContracts;\n\n\t/*!\tPer user: whitelisting addresses of smart contracts which have\n\n\t */\n\tmapping (address => mapping (address => bool) ) public userWhiteListContracts;\n\n\tfunction setERC223Activated(bool _activate) public onlyOwner {\n\t\terc223Activated = _activate;\n\t}\n\tfunction setWhiteListContract(address _addr, bool f) public onlyOwner {\n\t\twhiteListContracts[_addr] = f;\n\t}\n\tfunction setUserWhiteListContract(address _addr, bool f) public {\n\t\tuserWhiteListContracts[msg.sender][_addr] = f;\n\t}\n\n\tfunction checkAndInvokeReceiver(address _to, uint256 _value, bytes _data) internal {\n\t\tuint codeLength;\n\n\t\tassembly {\n\t\t\t// Retrieve the size of the code\n\t\t\tcodeLength := extcodesize(_to)\n\t\t}\n\n\t\tif (codeLength>0) {\n\t\t\tERC223Receiver receiver = ERC223Receiver(_to);\n\t\t\treceiver.tokenFallback(msg.sender, _value, _data);\n\t\t}\n\t}\n\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n\t\tbool ok = super.transfer(_to, _value);\n\t\tif (erc223Activated\n\t\t\t&& whiteListContracts[_to] ==false\n\t\t\t&& userWhiteListContracts[msg.sender][_to] ==false) {\n\t\t\tbytes memory empty;\n\t\t\tcheckAndInvokeReceiver(_to, _value, empty);\n\t\t}\n\t\treturn ok;\n\t}\n\n\tfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n\t\tbool ok = super.transfer(_to, _value);\n\t\tif (erc223Activated\n\t\t\t&& whiteListContracts[_to] ==false\n\t\t\t&& userWhiteListContracts[msg.sender][_to] ==false) {\n\t\t\tcheckAndInvokeReceiver(_to, _value, _data);\n\t\t}\n\t\treturn ok;\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\t\tbool ok = super.transferFrom(_from, _to, _value);\n\t\tif (erc223Activated\n\t\t\t&& whiteListContracts[_to] ==false\n\t\t\t&& userWhiteListContracts[_from][_to] ==false\n\t\t\t&& userWhiteListContracts[msg.sender][_to] ==false) {\n\t\t\tbytes memory empty;\n\t\t\tcheckAndInvokeReceiver(_to, _value, empty);\n\t\t}\n\t\treturn ok;\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n\t\tbool ok = super.transferFrom(_from, _to, _value);\n\t\tif (erc223Activated\n\t\t\t&& whiteListContracts[_to] ==false\n\t\t\t&& userWhiteListContracts[_from][_to] ==false\n\t\t\t&& userWhiteListContracts[msg.sender][_to] ==false) {\n\t\t\tcheckAndInvokeReceiver(_to, _value, _data);\n\t\t}\n\t\treturn ok;\n\t}\n\n}\n\n// File: contracts/BurnableToken.sol\n\n/*!\tFunctionality to keep burn for owner.\n\tCopy from Burnable token but only for owner\n */\ncontract BurnableToken is ERC223Token {\n\tusing SafeMath for uint256;\n\n\t/*! Copy from Burnable token but only for owner */\n\n\tevent Burn(address indexed burner, uint256 value);\n\n\t/**\n\t * @dev Burns a specific amount of tokens.\n\t * @param _value The amount of token to be burned.\n\t */\n\tfunction burnTokenBurn(uint256 _value) public onlyOwner {\n\t\trequire(_value <= balances[msg.sender]);\n\t\t// no need to require value <= totalSupply, since that would imply the\n\t\t// sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n\t\taddress burner = msg.sender;\n\t\tbalances[burner] = balances[burner].sub(_value);\n\t\ttotalSupply_ = totalSupply_.sub(_value);\n\t\tBurn(burner, _value);\n\t}\n}\n\n// File: contracts/HoldersToken.sol\n\n/*!\tFunctionality to keep up-to-dated list of all holders.\n */\ncontract HoldersToken is BurnableToken {\n\tusing SafeMath for uint256;\n\n\t/*!\tKeep the list of addresses of holders up-to-dated\n\n\t\tother contracts can communicate with or to do operations\n\t\twith all holders of tokens\n\t */\n\tmapping (address => bool) public isHolder;\n\taddress [] public holders;\n\n\tfunction addHolder(address _addr) internal returns (bool) {\n\t\tif (isHolder[_addr] != true) {\n\t\t\tholders[holders.length++] = _addr;\n\t\t\tisHolder[_addr] = true;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(this)); // Prevent transfer to contract itself\n\t\tbool ok = super.transfer(_to, _value);\n\t\taddHolder(_to);\n\t\treturn ok;\n\t}\n\n\tfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n\t\trequire(_to != address(this)); // Prevent transfer to contract itself\n\t\tbool ok = super.transfer(_to, _value, _data);\n\t\taddHolder(_to);\n\t\treturn ok;\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(this)); // Prevent transfer to contract itself\n\t\tbool ok = super.transferFrom(_from, _to, _value);\n\t\taddHolder(_to);\n\t\treturn ok;\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n\t\trequire(_to != address(this)); // Prevent transfer to contract itself\n\t\tbool ok = super.transferFrom(_from, _to, _value, _data);\n\t\taddHolder(_to);\n\t\treturn ok;\n\t}\n\n}\n\n// File: contracts/MigrationAgent.sol\n\n/*!\tDefinition of destination interface\n\tfor contract that can be used for migration\n */\ncontract MigrationAgent {\n\tfunction migrateFrom(address from, uint256 value) public returns (bool);\n}\n\n// File: contracts/MigratoryToken.sol\n\n/*!\tFunctionality to support migrations to new upgraded contract\n\tfor tokens. Only has effect if migrations are enabled and\n\taddress of new contract is known.\n */\ncontract MigratoryToken is HoldersToken {\n\tusing SafeMath for uint256;\n\n\t//! Address of new contract for possible upgrades\n\taddress public migrationAgent;\n\t//! Counter to iterate (by portions) through all addresses for migration\n\tuint256 public migrationCountComplete;\n\n\t/*!\tSetup the address for new contract (to migrate coins to)\n\t\tCan be called only by owner (onlyOwner)\n\t */\n\tfunction setMigrationAgent(address agent) public onlyOwner {\n\t\tmigrationAgent = agent;\n\t}\n\n\t/*!\tMigrate tokens to the new token contract\n\t\tThe method can be only called when migration agent is set.\n\n\t\tCan be called by user(holder) that would like to transfer\n\t\tcoins to new contract immediately.\n\t */\n\tfunction migrate() public returns (bool) {\n\t\trequire(migrationAgent != 0x0);\n\t\tuint256 value = balances[msg.sender];\n\t\tbalances[msg.sender] = balances[msg.sender].sub(value);\n\t\ttotalSupply_ = totalSupply_.sub(value);\n\t\tMigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\n\t\t// Notify anyone listening that this migration took place\n\t\tMigrate(msg.sender, value);\n\t\treturn true;\n\t}\n\n\t/*!\tMigrate holders of tokens to the new contract\n\t\tThe method can be only called when migration agent is set.\n\n\t\tCan be called only by owner (onlyOwner)\n\t */\n\tfunction migrateHolders(uint256 count) public onlyOwner returns (bool) {\n\t\trequire(count > 0);\n\t\trequire(migrationAgent != 0x0);\n\t\t// Calculate bounds for processing\n\t\tcount = migrationCountComplete.add(count);\n\t\tif (count > holders.length) {\n\t\t\tcount = holders.length;\n\t\t}\n\t\t// Process migration\n\t\tfor (uint256 i = migrationCountComplete; i < count; i++) {\n\t\t\taddress holder = holders[i];\n\t\t\tuint value = balances[holder];\n\t\t\tbalances[holder] = balances[holder].sub(value);\n\t\t\ttotalSupply_ = totalSupply_.sub(value);\n\t\t\tMigrationAgent(migrationAgent).migrateFrom(holder, value);\n\t\t\t// Notify anyone listening that this migration took place\n\t\t\tMigrate(holder, value);\n\t\t}\n\t\tmigrationCountComplete = count;\n\t\treturn true;\n\t}\n\n\tevent Migrate(address indexed owner, uint256 value);\n}\n\n// File: contracts/FollowCoin.sol\n\ncontract FollowCoin is MigratoryToken {\n\tusing SafeMath for uint256;\n\n\t//! Token name FollowCoin\n\tstring public name;\n\t//! Token symbol FLLW\n\tstring public symbol;\n\t//! Token decimals, 18\n\tuint8 public decimals;\n\n\t/*!\tContructor\n\t */\n\tfunction FollowCoin() public {\n\t\tname = \"FollowCoin\";\n\t\tsymbol = \"FLLW\";\n\t\tdecimals = 18;\n\t\ttotalSupply_ = 515547535173959076174820000;\n\t\tbalances[owner] = totalSupply_;\n\t\tholders[holders.length++] = owner;\n\t\tisHolder[owner] = true;\n\t}\n\n\t//! Address of migration gate to do transferMulti on migration\n\taddress public migrationGate;\n\n\t/*!\tSetup the address for new contract (to migrate coins to)\n\t\tCan be called only by owner (onlyOwner)\n\t */\n\tfunction setMigrationGate(address _addr) public onlyOwner {\n\t\tmigrationGate = _addr;\n\t}\n\n\t/*!\tThrows if called by any account other than the migrationGate.\n\t */\n\tmodifier onlyMigrationGate() {\n\t\trequire(msg.sender == migrationGate);\n\t\t_;\n\t}\n\n\t/*!\tTransfer tokens to multipe destination addresses\n\t\tReturns list with appropriate (by index) successful statuses.\n\t\t(string with 0 or 1 chars)\n\t */\n\tfunction transferMulti(address [] _tos, uint256 [] _values) public onlyMigrationGate returns (string) {\n\t\trequire(_tos.length == _values.length);\n\t\tbytes memory return_values = new bytes(_tos.length);\n\n\t\tfor (uint256 i = 0; i < _tos.length; i++) {\n\t\t\taddress _to = _tos[i];\n\t\t\tuint256 _value = _values[i];\n\t\t\treturn_values[i] = byte(48); //'0'\n\n\t\t\tif (_to != address(0) &&\n\t\t\t\t_value <= balances[msg.sender]) {\n\n\t\t\t\tbool ok = transfer(_to, _value);\n\t\t\t\tif (ok) {\n\t\t\t\t\treturn_values[i] = byte(49); //'1'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn string(return_values);\n\t}\n\n\t/*!\tDo not accept incoming ether\n\t */\n\tfunction() public payable {\n\t\trevert();\n\t}\n}",
  "bytecode": "606060405234156200001057600080fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600a81526020017f466f6c6c6f77436f696e00000000000000000000000000000000000000000000815250600b90805190602001906200009e92919062000293565b506040805190810160405280600481526020017f464c4c5700000000000000000000000000000000000000000000000000000000815250600c9080519060200190620000ec92919062000293565b506012600d60006101000a81548160ff021916908360ff1602179055506b01aa736fe1fc682411b6f2a0600181905550600154600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166008808054809190600101620001bd91906200031a565b815481101515620001ca57fe5b906000526020600020900160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160076000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000371565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002d657805160ff191683800117855562000307565b8280016001018555821562000307579182015b8281111562000306578251825591602001919060010190620002e9565b5b50905062000316919062000349565b5090565b815481835581811511620003445781836000526020600020918201910162000343919062000349565b5b505050565b6200036e91905b808211156200036a57600081600090555060010162000350565b5090565b90565b61363780620003816000396000f3006060604052600436106101ac576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101b1578063095ea7b31461023f57806318160ddd1461029957806323b872dd146102c25780632584295e1461033b5780632a11ced0146103ab578063313ce5671461040e57806335bce6e41461043d5780633664b12d146105505780634e71e0c81461057d57806351fbfe9d1461059257806366188463146105bb57806370a082311461061557806375e2ff65146106625780638328dbcd1461069b5780638da5cb5b146106f05780638f68ca70146107455780638fd3ab801461078957806394097168146107b657806395d89b41146107d95780639bdc652314610867578063a9059cbb146108ab578063aa65765814610905578063ab67aa581461093e578063be45fd62146109fa578063d32632fd14610a97578063d4d7b19a14610aec578063d73dd62314610b3d578063d8d1d50714610b97578063dd62ed3e14610be8578063ddf41bf414610c54578063e30c397814610c8f578063f2fde38b14610ce4578063f39e9fa614610d1d575b600080fd5b34156101bc57600080fd5b6101c4610d42565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102045780820151818401526020810190506101e9565b50505050905090810190601f1680156102315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024a57600080fd5b61027f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610de0565b604051808215151515815260200191505060405180910390f35b34156102a457600080fd5b6102ac610ed2565b6040518082815260200191505060405180910390f35b34156102cd57600080fd5b610321600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610edc565b604051808215151515815260200191505060405180910390f35b341561034657600080fd5b610391600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f3c565b604051808215151515815260200191505060405180910390f35b34156103b657600080fd5b6103cc6004808035906020019091905050610f6b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561041957600080fd5b610421610faa565b604051808260ff1660ff16815260200191505060405180910390f35b341561044857600080fd5b6104d560048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610fbd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105155780820151818401526020810190506104fa565b50505050905090810190601f1680156105425780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561055b57600080fd5b61056361121a565b604051808215151515815260200191505060405180910390f35b341561058857600080fd5b61059061122d565b005b341561059d57600080fd5b6105a56113ce565b6040518082815260200191505060405180910390f35b34156105c657600080fd5b6105fb600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506113d4565b604051808215151515815260200191505060405180910390f35b341561062057600080fd5b61064c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611665565b6040518082815260200191505060405180910390f35b341561066d57600080fd5b610699600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116ad565b005b34156106a657600080fd5b6106ae61174d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106fb57600080fd5b610703611773565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561075057600080fd5b610787600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050611799565b005b341561079457600080fd5b61079c611850565b604051808215151515815260200191505060405180910390f35b34156107c157600080fd5b6107d76004808035906020019091905050611ac9565b005b34156107e457600080fd5b6107ec611c77565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561082c578082015181840152602081019050610811565b50505050905090810190601f1680156108595780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561087257600080fd5b6108a9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080351515906020019091905050611d15565b005b34156108b657600080fd5b6108eb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611dad565b604051808215151515815260200191505060405180910390f35b341561091057600080fd5b61093c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e0b565b005b341561094957600080fd5b6109e0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611eab565b604051808215151515815260200191505060405180910390f35b3415610a0557600080fd5b610a7d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611f0d565b604051808215151515815260200191505060405180910390f35b3415610aa257600080fd5b610aaa611f6d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610af757600080fd5b610b23600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611f93565b604051808215151515815260200191505060405180910390f35b3415610b4857600080fd5b610b7d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611fb3565b604051808215151515815260200191505060405180910390f35b3415610ba257600080fd5b610bce600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506121af565b604051808215151515815260200191505060405180910390f35b3415610bf357600080fd5b610c3e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506121cf565b6040518082815260200191505060405180910390f35b3415610c5f57600080fd5b610c756004808035906020019091905050612256565b604051808215151515815260200191505060405180910390f35b3415610c9a57600080fd5b610ca26125cd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610cef57600080fd5b610d1b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506125f3565b005b3415610d2857600080fd5b610d4060048080351515906020019091905050612693565b005b600b8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dd85780601f10610dad57610100808354040283529160200191610dd8565b820191906000526020600020905b815481529060010190602001808311610dbb57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b6000803073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515610f1a57600080fd5b610f2585858561270c565b9050610f30846128df565b50809150509392505050565b60066020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600881815481101515610f7a57fe5b90600052602060002090016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d60009054906101000a900460ff1681565b610fc5613592565b610fcd6135a6565b600080600080600d60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561102f57600080fd5b8651885114151561103f57600080fd5b875160405180591061104e5750595b9080825280601f01601f19166020018201604052509450600093505b875184101561120c57878481518110151561108157fe5b906020019060200201519250868481518110151561109b57fe5b90602001906020020151915060307f01000000000000000000000000000000000000000000000000000000000000000285858151811015156110d957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561118457506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b156111ff576111938383611dad565b905080156111fe5760317f01000000000000000000000000000000000000000000000000000000000000000285858151811015156111cd57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b5b838060010194505061106a565b849550505050505092915050565b600460149054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561128957600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600a5481565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156114e5576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611579565b6114f88382612a1190919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561170957600080fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117f557600080fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000806000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561189b57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061192d816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a1190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061198481600154612a1190919063ffffffff16565b600181905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a3130e333836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611a5757600080fd5b6102c65a03f11515611a6857600080fd5b50505060405180519050503373ffffffffffffffffffffffffffffffffffffffff167fa59785389b00cbd19745afbe8d59b28e3161395c6b1e3525861a2b0dede0b90d826040518082815260200191505060405180910390a2600191505090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b2757600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611b7457600080fd5b339050611bc8826000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a1190919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c1f82600154612a1190919063ffffffff16565b6001819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b600c8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d0d5780601f10611ce257610100808354040283529160200191611d0d565b820191906000526020600020905b815481529060010190602001808311611cf057829003601f168201915b505050505081565b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000803073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151515611deb57600080fd5b611df58484612a2a565b9050611e00846128df565b508091505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e6757600080fd5b80600d60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000803073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515611ee957600080fd5b611ef586868686612b62565b9050611f00856128df565b5080915050949350505050565b6000803073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515611f4b57600080fd5b611f56858585612d2d565b9050611f61856128df565b50809150509392505050565b600d60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60076020528060005260406000206000915054906101000a900460ff1681565b600061204482600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e5d90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60056020528060005260406000206000915054906101000a900460ff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122b857600080fd5b6000851115156122c757600080fd5b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561230f57600080fd5b61232485600a54612e5d90919063ffffffff16565b945060088054905085111561233c5760088054905094505b600a5492505b848310156125ba5760088381548110151561235957fe5b906000526020600020900160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050612419816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a1190919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061247081600154612a1190919063ffffffff16565b600181905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a3130e383836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561254357600080fd5b6102c65a03f1151561255457600080fd5b50505060405180519050508173ffffffffffffffffffffffffffffffffffffffff167fa59785389b00cbd19745afbe8d59b28e3161395c6b1e3525861a2b0dede0b90d826040518082815260200191505060405180910390a28280600101935050612342565b84600a8190555060019350505050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561264f57600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156126ef57600080fd5b80600460146101000a81548160ff02191690831515021790555050565b6000806127176135a6565b612722868686612e7b565b9150600460149054906101000a900460ff168015612790575060001515600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b8015612829575060001515600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b80156128c2575060001515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b156128d3576128d2858583613235565b5b81925050509392505050565b600060011515600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515612a075781600880805480919060010161295191906135ba565b81548110151561295d57fe5b906000526020600020900160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019050612a0c565b600090505b919050565b6000828211151515612a1f57fe5b818303905092915050565b600080612a356135a6565b612a3f8585613373565b9150600460149054906101000a900460ff168015612aad575060001515600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b8015612b46575060001515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b15612b5757612b56858583613235565b5b819250505092915050565b600080612b70868686612e7b565b9050600460149054906101000a900460ff168015612bde575060001515600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b8015612c77575060001515600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b8015612d10575060001515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b15612d2157612d20858585613235565b5b80915050949350505050565b600080612d3a8585613373565b9050600460149054906101000a900460ff168015612da8575060001515600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b8015612e41575060001515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b15612e5257612e51858585613235565b5b809150509392505050565b6000808284019050838110151515612e7157fe5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612eb857600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515612f0557600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515612f9057600080fd5b612fe1826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a1190919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613074826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e5d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061314582600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a1190919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600080843b9150600082111561336c578490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561330a5780820151818401526020810190506132ef565b50505050905090810190601f1680156133375780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561335757600080fd5b6102c65a03f1151561336857600080fd5b5050505b5050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156133b057600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156133fd57600080fd5b61344e826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a1190919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506134e1826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e5d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b8154818355818115116135e1578183600052602060002091820191016135e091906135e6565b5b505050565b61360891905b808211156136045760008160009055506001016135ec565b5090565b905600a165627a7a7230582079fd2e3c3f44f62bc45dba20f755e3640deb87125e089f95957ec7314264f88a0029"
}