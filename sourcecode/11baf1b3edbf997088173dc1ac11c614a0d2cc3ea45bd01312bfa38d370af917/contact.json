{
  "address": "0x9582940f86d1da372f382de6fa027d49fc5e0d28",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ABERoll",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-06\n*/\n\npragma solidity ^0.4.24;\n\n// https://github.com/ethereum/EIPs/issues/20\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract ABERoll {\n    \n    ERC20 ABEToken = ERC20(0x1Dc2189B355B5F53b5fdF64d22891900b19FB5ea);\n    \n    /// *** Constants section\n    uint256 constant BASE_UNIT = 10 ** ABEToken.decimals() * 10000;//10 ** 18; // ABEToken.decimals() * 10000\n    // Each bet is deducted 1.5% in favour of the house, but no less than some minimum.\n    // The lower bound is dictated by gas costs of the settleBet transaction, providing\n    // headroom for up to 10 Gwei prices.\n    uint constant HOUSE_EDGE_PERCENT = 15;\n    uint constant HOUSE_EDGE_MINIMUM_AMOUNT = BASE_UNIT * 45/100000; //  0.00045 ABEToken\n\n    // Bets lower than this amount do not participate in jackpot rolls (and are\n    // not deducted JACKPOT_FEE).\n    uint constant MIN_JACKPOT_BET = BASE_UNIT * 1/10; //0.1 ABEToken\n\n    // Chance to win jackpot (currently 0.1%) and fee deducted into jackpot fund.\n    uint constant JACKPOT_MODULO = 1000;\n    uint constant JACKPOT_FEE = BASE_UNIT * 1/1000; //0.001 ABEToken\n\n    // There is minimum and maximum bets.\n    uint constant MIN_BET = BASE_UNIT * 1 /100; // 0.01 ABEToken\n    uint constant MAX_AMOUNT =  BASE_UNIT * 300000; // 300000 ABEToken\n\n    // Modulo is a number of equiprobable outcomes in a game:\n    //  - 2 for coin flip\n    //  - 6 for dice\n    //  - 6*6 = 36 for double dice\n    //  - 100 for etheroll\n    //  - 37 for roulette\n    //  etc.\n    // It's called so because 256-bit entropy is treated like a huge integer and\n    // the remainder of its division by modulo is considered bet outcome.\n    uint constant MAX_MODULO = 100;\n\n    // For modulos below this threshold rolls are checked against a bit mask,\n    // thus allowing betting on any combination of outcomes. For example, given\n    // modulo 6 for dice, 101000 mask (base-2, big endian) means betting on\n    // 4 and 6; for games with modulos higher than threshold (Etheroll), a simple\n    // limit is used, allowing betting on any outcome in [0, N) range.\n    //\n    // The specific value is dictated by the fact that 256-bit intermediate\n    // multiplication result allows implementing population count efficiently\n    // for numbers that are up to 42 bits, and 40 is the highest multiple of\n    // eight below 42.\n    uint constant MAX_MASK_MODULO = 40;\n\n    // This is a check on bet mask overflow.\n    uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO;\n\n    // EVM BLOCKHASH opcode can query no further than 256 blocks into the\n    // past. Given that settleBet uses block hash of placeBet as one of\n    // complementary entropy sources, we cannot process bets older than this\n    // threshold. On rare occasions EthRoll croupier may fail to invoke\n    // settleBet in this timespan due to technical issues or extreme Ethereum\n    // congestion; such bets can be refunded via invoking refundBet.\n    uint constant BET_EXPIRATION_BLOCKS = 250;\n\n    // Some deliberately invalid address to initialize the secret signer with.\n    // Forces maintainers to invoke setSecretSigner before processing any bets.\n    address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    // Standard contract ownership transfer.\n    address public owner;\n    address private nextOwner;\n\n    // Adjustable max bet profit. Used to cap bets against dynamic odds.\n    uint public maxProfit;\n\n    // The address corresponding to a private key used to sign placeBet commits.\n    address public secretSigner;\n\n    // Accumulated jackpot fund.\n    uint128 public jackpotSize;\n\n    // Funds that are locked in potentially winning bets. Prevents contract from\n    // committing to bets it cannot pay out.\n    uint128 public lockedInBets;\n\n    address public beneficiary_ = 0xAdD148Cc4F7B1b7520325a7C5934C002420Ab3d5;\n    // A structure representing a single bet.\n    struct Bet {\n        // Wager amount in wei.\n        uint amount;\n        // Modulo of a game.\n        uint8 modulo;\n        // Number of winning outcomes, used to compute winning payment (* modulo/rollUnder),\n        // and used instead of mask for games with modulo > MAX_MASK_MODULO.\n        uint8 rollUnder;\n        // Block number of placeBet tx.\n        uint40 placeBlockNumber;\n        // Bit mask representing winning bet outcomes (see MAX_MASK_MODULO comment).\n        uint40 mask;\n        // Address of a gambler, used to pay out winning bets.\n        address gambler;\n    }\n\n    // Mapping from commits to all currently active & processed bets.\n    mapping (uint => Bet) bets;\n\n    // Croupier account.\n    address public croupier;\n\n    // Events that are issued to make statistic recovery easier.\n    event FailedPayment(address indexed beneficiary, uint amount);\n    event Payment(address indexed beneficiary, uint amount);\n    event JackpotPayment(address indexed beneficiary, uint amount);\n\n    // This event is emitted in placeBet to record commit in the logs.\n    event Commit(uint commit);\n\n    // Constructor. Deliberately does not take any parameters.\n    constructor () public {\n        owner = msg.sender;\n        secretSigner = DUMMY_ADDRESS;\n        croupier = DUMMY_ADDRESS;\n    }\n\n    // Standard modifier on methods invokable only by contract owner.\n    modifier onlyOwner {\n        require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n        _;\n    }\n\n    // Standard modifier on methods invokable only by contract owner.\n    modifier onlyCroupier {\n        require (msg.sender == croupier, \"OnlyCroupier methods called by non-croupier.\");\n        _;\n    }\n\n    // Standard contract ownership transfer implementation,\n    function approveNextOwner(address _nextOwner) external onlyOwner {\n        require (_nextOwner != owner, \"Cannot approve current owner.\");\n        nextOwner = _nextOwner;\n    }\n\n    function acceptNextOwner() external {\n        require (msg.sender == nextOwner, \"Can only accept preapproved new owner.\");\n        owner = nextOwner;\n    }\n\n    // Fallback function deliberately left empty. It's primary use case\n    // is to top up the bank roll.\n    function () public payable {\n    }\n\n    // See comment for \"secretSigner\" variable.\n    function setSecretSigner(address newSecretSigner) external onlyOwner {\n        secretSigner = newSecretSigner;\n    }\n\n    // Change the croupier address.\n    function setCroupier(address newCroupier) external onlyOwner {\n        croupier = newCroupier;\n    }\n\n    // Change max bet reward. Setting this to zero effectively disables betting.\n    function setMaxProfit(uint _maxProfit) public onlyOwner {\n        require (_maxProfit < MAX_AMOUNT, \"maxProfit should be a sane number.\");\n        maxProfit = _maxProfit;\n    }\n\n    // This function is used to bump up the jackpot fund. Cannot be used to lower it.\n    function increaseJackpot(uint increaseAmount) external onlyOwner {\n        require (increaseAmount <= ABEToken.balanceOf(this), \"Increase amount larger than balance.\");\n        require (jackpotSize + lockedInBets + increaseAmount <= ABEToken.balanceOf(this), \"Not enough funds.\");\n        jackpotSize += uint128(increaseAmount);\n    }\n\n    // Funds withdrawal to cover costs of EthRoll operation.\n    function withdrawFunds(uint withdrawAmount) external onlyOwner {\n        require (withdrawAmount <= ABEToken.balanceOf(this), \"Increase amount larger than balance.\");\n        require (jackpotSize + lockedInBets + withdrawAmount <= ABEToken.balanceOf(this), \"Not enough funds.\");\n        sendFunds(beneficiary_, withdrawAmount, withdrawAmount);\n    }\n\n    // Contract may be destroyed only when there are no ongoing bets,\n    // either settled or refunded. All funds are transferred to contract owner.\n    function kill() external onlyOwner {\n        require (lockedInBets == 0, \"All bets should be processed (settled or refunded) before self-destruct.\");\n        require(ABEToken.transfer(beneficiary_,ABEToken.balanceOf(address(this))),\" send out all token failure\");\n        selfdestruct(beneficiary_);\n    }\n\n    /// *** Betting logic\n\n    // Bet states:\n    //  amount == 0 && gambler == 0 - 'clean' (can place a bet)\n    //  amount != 0 && gambler != 0 - 'active' (can be settled or refunded)\n    //  amount == 0 && gambler != 0 - 'processed' (can clean storage)\n    //\n    //  NOTE: Storage cleaning is not implemented in this contract version; it will be added\n    //        with the next upgrade to prevent polluting Ethereum state with expired bets.\n\n    // Bet placing transaction - issued by the player.\n    //  betMask         - bet outcomes bit mask for modulo <= MAX_MASK_MODULO,\n    //                    [0, betMask) for larger modulos.\n    //  modulo          - game modulo.\n    //  commitLastBlock - number of the maximum block where \"commit\" is still considered valid.\n    //  commit          - Keccak256 hash of some secret \"reveal\" random number, to be supplied\n    //                    by the EthRoll croupier bot in the settleBet transaction. Supplying\n    //                    \"commit\" ensures that \"reveal\" cannot be changed behind the scenes\n    //                    after placeBet have been mined.\n    //  r, s            - components of ECDSA signature of (commitLastBlock, commit). v is\n    //                    guaranteed to always equal 27.\n    //\n    // Commit, being essentially random 256-bit number, is used as a unique bet identifier in\n    // the 'bets' mapping.\n    //\n    // Commits are signed with a block limit to ensure that they are used at most once - otherwise\n    // it would be possible for a miner to place a bet with a known commit/reveal pair and tamper\n    // with the blockhash. Croupier guarantees that commitLastBlock will always be not greater than\n    // placeBet block number plus BET_EXPIRATION_BLOCKS. See whitepaper for details.\n    function placeBet(uint betMask, uint modulo, uint commitLastBlock, uint commit, bytes32 r, bytes32 s,uint amount) external {\n        // Check that the bet is in 'clean' state.\n        Bet storage bet = bets[commit];\n        require (bet.gambler == address(0), \"Bet should be in a 'clean' state.\");\n        \n        require(ABEToken.transferFrom(msg.sender,this,amount));//need user approve\n        \n        // Validate input data ranges.\n        // uint amount = msg.value;\n        require (modulo > 1 && modulo <= MAX_MODULO, \"Modulo should be within range.\");\n        require (amount >= MIN_BET && amount <= MAX_AMOUNT, \"Amount should be within range.\");\n        require (betMask > 0 && betMask < MAX_BET_MASK, \"Mask should be within range.\");\n\n        // Check that commit is valid - it has not expired and its signature is valid.\n        require (block.number <= commitLastBlock, \"Commit has expired.\");\n        bytes32 signatureHash = keccak256(abi.encodePacked(uint40(commitLastBlock), commit));\n        require (secretSigner == ecrecover(signatureHash, 27, r, s), \"ECDSA signature is not valid.\");\n\n        uint rollUnder;\n        uint mask;\n\n        if (modulo <= MAX_MASK_MODULO) {\n            // Small modulo games specify bet outcomes via bit mask.\n            // rollUnder is a number of 1 bits in this mask (population count).\n            // This magic looking formula is an efficient way to compute population\n            // count on EVM for numbers below 2**40. For detailed proof consult\n            // the EthRoll whitepaper.\n            rollUnder = ((betMask * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\n            mask = betMask;\n        } else {\n            // Larger modulos specify the right edge of half-open interval of\n            // winning bet outcomes.\n            require (betMask > 0 && betMask <= modulo, \"High modulo range, betMask larger than modulo.\");\n            rollUnder = betMask;\n        }\n\n        // Winning amount and jackpot increase.\n        uint possibleWinAmount;\n        uint jackpotFee;\n\n        (possibleWinAmount, jackpotFee) = getDiceWinAmount(amount, modulo, rollUnder);\n\n        // Enforce max profit limit.\n        require (possibleWinAmount <= amount + maxProfit, \"maxProfit limit violation.\");\n\n        // Lock funds.\n        lockedInBets += uint128(possibleWinAmount);\n        jackpotSize += uint128(jackpotFee);\n\n        // Check whether contract has enough funds to process this bet.\n        require (jackpotSize + lockedInBets <= ABEToken.balanceOf(this), \"Cannot afford to lose this bet.\");\n\n        // Record commit in logs.\n        emit Commit(commit);\n\n        // Store bet parameters on blockchain.\n        bet.amount = amount;\n        bet.modulo = uint8(modulo);\n        bet.rollUnder = uint8(rollUnder);\n        bet.placeBlockNumber = uint40(block.number);\n        bet.mask = uint40(mask);\n        bet.gambler = msg.sender;\n    }\n\n    // This is the method used to settle 99% of bets. To process a bet with a specific\n    // \"commit\", settleBet should supply a \"reveal\" number that would Keccak256-hash to\n    // \"commit\". \"blockHash\" is the block hash of placeBet block as seen by croupier; it\n    // is additionally asserted to prevent changing the bet outcomes on Ethereum reorgs.\n    function settleBet(uint reveal, bytes32 blockHash) external onlyCroupier {\n        uint commit = uint(keccak256(abi.encodePacked(reveal)));\n\n        Bet storage bet = bets[commit];\n        uint placeBlockNumber = bet.placeBlockNumber;\n\n        // Check that bet has not expired yet (see comment to BET_EXPIRATION_BLOCKS).\n        require (block.number > placeBlockNumber, \"settleBet in the same block as placeBet, or before.\");\n        require (block.number <= placeBlockNumber + BET_EXPIRATION_BLOCKS, \"Blockhash can't be queried by EVM.\");\n        require (blockhash(placeBlockNumber) == blockHash);\n\n        // Settle bet using reveal and blockHash as entropy sources.\n        settleBetCommon(bet, reveal, blockHash);\n    }\n\n    // This method is used to settle a bet that was mined into an uncle block. At this\n    // point the player was shown some bet outcome, but the blockhash at placeBet height\n    // is different because of Ethereum chain reorg. We supply a full merkle proof of the\n    // placeBet transaction receipt to provide untamperable evidence that uncle block hash\n    // indeed was present on-chain at some point.\n    function settleBetUncleMerkleProof(uint reveal, uint40 canonicalBlockNumber) external onlyCroupier {\n        // \"commit\" for bet settlement can only be obtained by hashing a \"reveal\".\n        uint commit = uint(keccak256(abi.encodePacked(reveal)));\n\n        Bet storage bet = bets[commit];\n\n        // Check that canonical block hash can still be verified.\n        require (block.number <= canonicalBlockNumber + BET_EXPIRATION_BLOCKS, \"Blockhash can't be queried by EVM.\");\n\n        // Verify placeBet receipt.\n        requireCorrectReceipt(4 + 32 + 32 + 4);\n\n        // Reconstruct canonical & uncle block hashes from a receipt merkle proof, verify them.\n        bytes32 canonicalHash;\n        bytes32 uncleHash;\n        (canonicalHash, uncleHash) = verifyMerkleProof(commit, 4 + 32 + 32);\n        require (blockhash(canonicalBlockNumber) == canonicalHash);\n\n        // Settle bet using reveal and uncleHash as entropy sources.\n        settleBetCommon(bet, reveal, uncleHash);\n    }\n\n    // Common settlement code for settleBet & settleBetUncleMerkleProof.\n    function settleBetCommon(Bet storage bet, uint reveal, bytes32 entropyBlockHash) private {\n        // Fetch bet parameters into local variables (to save gas).\n        uint amount = bet.amount;\n        uint modulo = bet.modulo;\n        uint rollUnder = bet.rollUnder;\n        address gambler = bet.gambler;\n\n        // Check that bet is in 'active' state.\n        require (amount != 0, \"Bet should be in an 'active' state\");\n\n        // Move bet into 'processed' state already.\n        bet.amount = 0;\n\n        // The RNG - combine \"reveal\" and blockhash of placeBet using Keccak256. Miners\n        // are not aware of \"reveal\" and cannot deduce it from \"commit\" (as Keccak256\n        // preimage is intractable), and house is unable to alter the \"reveal\" after\n        // placeBet have been mined (as Keccak256 collision finding is also intractable).\n        bytes32 entropy = keccak256(abi.encodePacked(reveal, entropyBlockHash));\n\n        // Do a roll by taking a modulo of entropy. Compute winning amount.\n        uint dice = uint(entropy) % modulo;\n\n        uint diceWinAmount;\n        uint _jackpotFee;\n        (diceWinAmount, _jackpotFee) = getDiceWinAmount(amount, modulo, rollUnder);\n\n        uint diceWin = 0;\n        uint jackpotWin = 0;\n\n        // Determine dice outcome.\n        if (modulo <= MAX_MASK_MODULO) {\n            // For small modulo games, check the outcome against a bit mask.\n            if ((2 ** dice) & bet.mask != 0) {\n                diceWin = diceWinAmount;\n            }\n\n        } else {\n            // For larger modulos, check inclusion into half-open interval.\n            if (dice < rollUnder) {\n                diceWin = diceWinAmount;\n            }\n\n        }\n\n        // Unlock the bet amount, regardless of the outcome.\n        lockedInBets -= uint128(diceWinAmount);\n\n        // Roll for a jackpot (if eligible).\n        if (amount >= MIN_JACKPOT_BET) {\n            // The second modulo, statistically independent from the \"main\" dice roll.\n            // Effectively you are playing two games at once!\n            uint jackpotRng = (uint(entropy) / modulo) % JACKPOT_MODULO;\n\n            // Bingo!\n            if (jackpotRng == 0) {\n                jackpotWin = jackpotSize;\n                jackpotSize = 0;\n            }\n        }\n\n        // Log jackpot win.\n        if (jackpotWin > 0) {\n            emit JackpotPayment(gambler, jackpotWin);\n        }\n\n        // Send the funds to gambler.\n        sendFunds(gambler, diceWin + jackpotWin == 0 ? 1 : diceWin + jackpotWin, diceWin);\n    }\n\n    // Refund transaction - return the bet amount of a roll that was not processed in a\n    // due timeframe. Processing such blocks is not possible due to EVM limitations (see\n    // BET_EXPIRATION_BLOCKS comment above for details). In case you ever find yourself\n    // in a situation like this, just contact the EthRoll support, however nothing\n    // precludes you from invoking this method yourself.\n    function refundBet(uint commit) external {\n        // Check that bet is in 'active' state.\n        Bet storage bet = bets[commit];\n        uint amount = bet.amount;\n\n        require (amount != 0, \"Bet should be in an 'active' state\");\n\n        // Check that bet has already expired.\n        require (block.number > bet.placeBlockNumber + BET_EXPIRATION_BLOCKS, \"Blockhash can't be queried by EVM.\");\n\n        // Move bet into 'processed' state, release funds.\n        bet.amount = 0;\n\n        uint diceWinAmount;\n        uint jackpotFee;\n        (diceWinAmount, jackpotFee) = getDiceWinAmount(amount, bet.modulo, bet.rollUnder);\n\n        lockedInBets -= uint128(diceWinAmount);\n        jackpotSize -= uint128(jackpotFee);\n\n        // Send the refund.\n        sendFunds(bet.gambler, amount, amount);\n    }\n\n    // Get the expected win amount after house edge is subtracted.\n    function getDiceWinAmount(uint amount, uint modulo, uint rollUnder) private pure returns (uint winAmount, uint jackpotFee) {\n        require (0 < rollUnder && rollUnder <= modulo, \"Win probability out of range.\");\n\n        jackpotFee = amount >= MIN_JACKPOT_BET ? JACKPOT_FEE : 0;\n\n        uint houseEdge = amount * HOUSE_EDGE_PERCENT / 1000;\n\n        if (houseEdge < HOUSE_EDGE_MINIMUM_AMOUNT) {\n            houseEdge = HOUSE_EDGE_MINIMUM_AMOUNT;\n        }\n\n        require (houseEdge + jackpotFee <= amount, \"Bet doesn't even cover house edge.\");\n        winAmount = (amount - houseEdge - jackpotFee) * modulo / rollUnder;\n    }\n\n    // Helper routine to process the payment.\n    function sendFunds(address beneficiary, uint amount, uint successLogAmount) private {\n        if (ABEToken.transfer(beneficiary,amount)) {//beneficiary.call.value(amount)()\n            emit Payment(beneficiary, successLogAmount);\n        } else {\n            emit FailedPayment(beneficiary, amount);\n        }\n    }\n\n    // This are some constants making O(1) population count in placeBet possible.\n    // See whitepaper for intuition and proofs behind it.\n    uint constant POPCNT_MULT = 0x0000000000002000000000100000000008000000000400000000020000000001;\n    uint constant POPCNT_MASK = 0x0001041041041041041041041041041041041041041041041041041041041041;\n    uint constant POPCNT_MODULO = 0x3F;\n\n    // *** Merkle proofs.\n\n    // This helpers are used to verify cryptographic proofs of placeBet inclusion into\n    // uncle blocks. They are used to prevent bet outcome changing on Ethereum reorgs without\n    // compromising the security of the smart contract. Proof data is appended to the input data\n    // in a simple prefix length format and does not adhere to the ABI.\n    // Invariants checked:\n    //  - receipt trie entry contains a (1) successful transaction (2) directed at this smart\n    //    contract (3) containing commit as a payload.\n    //  - receipt trie entry is a part of a valid merkle proof of a block header\n    //  - the block header is a part of uncle list of some block on canonical chain\n    // The implementation is optimized for gas cost and relies on the specifics of Ethereum internal data structures.\n    // Read the whitepaper for details.\n\n    // Helper to verify a full merkle proof starting from some seedHash (usually commit). \"offset\" is the location of the proof\n    // beginning in the calldata.\n    function verifyMerkleProof(uint seedHash, uint offset) pure private returns (bytes32 blockHash, bytes32 uncleHash) {\n        // (Safe) assumption - nobody will write into RAM during this method invocation.\n        uint scratchBuf1;  assembly { scratchBuf1 := mload(0x40) }\n\n        uint uncleHeaderLength; uint blobLength; uint shift; uint hashSlot;\n\n        // Verify merkle proofs up to uncle block header. Calldata layout is:\n        //  - 2 byte big-endian slice length\n        //  - 2 byte big-endian offset to the beginning of previous slice hash within the current slice (should be zeroed)\n        //  - followed by the current slice verbatim\n        for (;; offset += blobLength) {\n            assembly { blobLength := and(calldataload(sub(offset, 30)), 0xffff) }\n            if (blobLength == 0) {\n                // Zero slice length marks the end of uncle proof.\n                break;\n            }\n\n            assembly { shift := and(calldataload(sub(offset, 28)), 0xffff) }\n            require (shift + 32 <= blobLength, \"Shift bounds check.\");\n\n            offset += 4;\n            assembly { hashSlot := calldataload(add(offset, shift)) }\n            require (hashSlot == 0, \"Non-empty hash slot.\");\n\n            assembly {\n                calldatacopy(scratchBuf1, offset, blobLength)\n                mstore(add(scratchBuf1, shift), seedHash)\n                seedHash := sha3(scratchBuf1, blobLength)\n                uncleHeaderLength := blobLength\n            }\n        }\n\n        // At this moment the uncle hash is known.\n        uncleHash = bytes32(seedHash);\n\n        // Construct the uncle list of a canonical block.\n        uint scratchBuf2 = scratchBuf1 + uncleHeaderLength;\n        uint unclesLength; assembly { unclesLength := and(calldataload(sub(offset, 28)), 0xffff) }\n        uint unclesShift;  assembly { unclesShift := and(calldataload(sub(offset, 26)), 0xffff) }\n        require (unclesShift + uncleHeaderLength <= unclesLength, \"Shift bounds check.\");\n\n        offset += 6;\n        assembly { calldatacopy(scratchBuf2, offset, unclesLength) }\n        memcpy(scratchBuf2 + unclesShift, scratchBuf1, uncleHeaderLength);\n\n        assembly { seedHash := sha3(scratchBuf2, unclesLength) }\n\n        offset += unclesLength;\n\n        // Verify the canonical block header using the computed sha3Uncles.\n        assembly {\n            blobLength := and(calldataload(sub(offset, 30)), 0xffff)\n            shift := and(calldataload(sub(offset, 28)), 0xffff)\n        }\n        require (shift + 32 <= blobLength, \"Shift bounds check.\");\n\n        offset += 4;\n        assembly { hashSlot := calldataload(add(offset, shift)) }\n        require (hashSlot == 0, \"Non-empty hash slot.\");\n\n        assembly {\n            calldatacopy(scratchBuf1, offset, blobLength)\n            mstore(add(scratchBuf1, shift), seedHash)\n\n            // At this moment the canonical block hash is known.\n            blockHash := sha3(scratchBuf1, blobLength)\n        }\n    }\n\n    // Helper to check the placeBet receipt. \"offset\" is the location of the proof beginning in the calldata.\n    // RLP layout: [triePath, str([status, cumGasUsed, bloomFilter, [[address, [topics], data]])]\n    function requireCorrectReceipt(uint offset) view private {\n        uint leafHeaderByte; assembly { leafHeaderByte := byte(0, calldataload(offset)) }\n\n        require (leafHeaderByte >= 0xf7, \"Receipt leaf longer than 55 bytes.\");\n        offset += leafHeaderByte - 0xf6;\n\n        uint pathHeaderByte; assembly { pathHeaderByte := byte(0, calldataload(offset)) }\n\n        if (pathHeaderByte <= 0x7f) {\n            offset += 1;\n\n        } else {\n            require (pathHeaderByte >= 0x80 && pathHeaderByte <= 0xb7, \"Path is an RLP string.\");\n            offset += pathHeaderByte - 0x7f;\n        }\n\n        uint receiptStringHeaderByte; assembly { receiptStringHeaderByte := byte(0, calldataload(offset)) }\n        require (receiptStringHeaderByte == 0xb9, \"Receipt string is always at least 256 bytes long, but less than 64k.\");\n        offset += 3;\n\n        uint receiptHeaderByte; assembly { receiptHeaderByte := byte(0, calldataload(offset)) }\n        require (receiptHeaderByte == 0xf9, \"Receipt is always at least 256 bytes long, but less than 64k.\");\n        offset += 3;\n\n        uint statusByte; assembly { statusByte := byte(0, calldataload(offset)) }\n        require (statusByte == 0x1, \"Status should be success.\");\n        offset += 1;\n\n        uint cumGasHeaderByte; assembly { cumGasHeaderByte := byte(0, calldataload(offset)) }\n        if (cumGasHeaderByte <= 0x7f) {\n            offset += 1;\n\n        } else {\n            require (cumGasHeaderByte >= 0x80 && cumGasHeaderByte <= 0xb7, \"Cumulative gas is an RLP string.\");\n            offset += cumGasHeaderByte - 0x7f;\n        }\n\n        uint bloomHeaderByte; assembly { bloomHeaderByte := byte(0, calldataload(offset)) }\n        require (bloomHeaderByte == 0xb9, \"Bloom filter is always 256 bytes long.\");\n        offset += 256 + 3;\n\n        uint logsListHeaderByte; assembly { logsListHeaderByte := byte(0, calldataload(offset)) }\n        require (logsListHeaderByte == 0xf8, \"Logs list is less than 256 bytes long.\");\n        offset += 2;\n\n        uint logEntryHeaderByte; assembly { logEntryHeaderByte := byte(0, calldataload(offset)) }\n        require (logEntryHeaderByte == 0xf8, \"Log entry is less than 256 bytes long.\");\n        offset += 2;\n\n        uint addressHeaderByte; assembly { addressHeaderByte := byte(0, calldataload(offset)) }\n        require (addressHeaderByte == 0x94, \"Address is 20 bytes long.\");\n\n        uint logAddress; assembly { logAddress := and(calldataload(sub(offset, 11)), 0xffffffffffffffffffffffffffffffffffffffff) }\n        require (logAddress == uint(address(this)));\n    }\n\n    // Memory copy.\n    function memcpy(uint dest, uint src, uint len) pure private {\n        // Full 32 byte words\n        for(; len >= 32; len -= 32) {\n            assembly { mstore(dest, mload(src)) }\n            dest += 32; src += 32;\n        }\n\n        // Remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n}",
  "bytecode": "608060405260008054600160a060020a0319908116731dc2189b355b5f53b5fdf64d22891900b19fb5ea179091556006805490911673add148cc4f7b1b7520325a7c5934c002420ab3d517905534801561005857600080fd5b5060018054600160a060020a0319908116331790915560048054821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90811790915560088054909216179055612e5d806100a86000396000f3006080604052600436106100ed5763ffffffff60e060020a600035041663155dd5ee81146100ef578063403a0a781461010757806341c0e1b5146101315780634d61537f1461014657806356e0eec71461017757806357246d231461018c5780636b5c5f39146101bd57806374e048d5146101d25780638da5cb5b146101f4578063b539cd5514610209578063ca722cdc14610230578063d06c54fb1461024b578063d579fd4414610260578063d6d30a5114610281578063d702087f14610299578063df88126f146102ba578063e1fdb4b4146102cf578063f8bb201c146102e7578063fbd668a914610308575b005b3480156100fb57600080fd5b506100ed600435610320565b34801561011357600080fd5b506100ed60043560243560443560643560843560a43560c435610587565b34801561013d57600080fd5b506100ed610e6c565b34801561015257600080fd5b5061015b6110ea565b60408051600160a060020a039092168252519081900360200190f35b34801561018357600080fd5b5061015b6110f9565b34801561019857600080fd5b506101a1611108565b604080516001608060020a039092168252519081900360200190f35b3480156101c957600080fd5b5061015b611117565b3480156101de57600080fd5b506100ed60043564ffffffffff60243516611126565b34801561020057600080fd5b5061015b61130d565b34801561021557600080fd5b5061021e61131c565b60408051918252519081900360200190f35b34801561023c57600080fd5b506100ed600435602435611322565b34801561025757600080fd5b506100ed61156f565b34801561026c57600080fd5b506100ed600160a060020a0360043516611614565b34801561028d57600080fd5b506100ed60043561170b565b3480156102a557600080fd5b506100ed600160a060020a0360043516611988565b3480156102c657600080fd5b506101a1611a19565b3480156102db57600080fd5b506100ed600435611a2f565b3480156102f357600080fd5b506100ed600160a060020a0360043516611be5565b34801561031457600080fd5b506100ed600435611c76565b600154600160a060020a03163314610382576040805160e560020a62461bcd0281526020600482015260266024820152600080516020612e12833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b600080546040805160e060020a6370a082310281523060048201529051600160a060020a03909216926370a08231926024808401936020939083900390910190829087803b1580156103d357600080fd5b505af11580156103e7573d6000803e3d6000fd5b505050506040513d60208110156103fd57600080fd5b505181111561047b576040805160e560020a62461bcd028152602060048201526024808201527f496e63726561736520616d6f756e74206c6172676572207468616e2062616c6160448201527f6e63652e00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600080546040805160e060020a6370a082310281523060048201529051600160a060020a03909216926370a08231926024808401936020939083900390910190829087803b1580156104cc57600080fd5b505af11580156104e0573d6000803e3d6000fd5b505050506040513d60208110156104f657600080fd5b50516005546001608060020a03808216608060020a909204811691909101168201111561056d576040805160e560020a62461bcd02815260206004820152601160248201527f4e6f7420656e6f7567682066756e64732e000000000000000000000000000000604482015290519081900360640190fd5b60065461058490600160a060020a03168280611de0565b50565b6000848152600760205260408120600181015490919081908190819081906c010000000000000000000000009004600160a060020a031615610639576040805160e560020a62461bcd02815260206004820152602160248201527f4265742073686f756c6420626520696e20612027636c65616e2720737461746560448201527f2e00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008054604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018b90529051600160a060020a03909216926323b872dd926064808401936020939083900390910190829087803b1580156106ad57600080fd5b505af11580156106c1573d6000803e3d6000fd5b505050506040513d60208110156106d757600080fd5b505115156106e457600080fd5b60018c1180156106f5575060648c11155b151561074b576040805160e560020a62461bcd02815260206004820152601e60248201527f4d6f64756c6f2073686f756c642062652077697468696e2072616e67652e0000604482015290519081900360640190fd5b60646000809054906101000a9004600160a060020a0316600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561079f57600080fd5b505af11580156107b3573d6000803e3d6000fd5b505050506040513d60208110156107c957600080fd5b5051600a0a612710028115156107db57fe5b04871015801561087157506000809054906101000a9004600160a060020a0316600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561083857600080fd5b505af115801561084c573d6000803e3d6000fd5b505050506040513d602081101561086257600080fd5b5051600a0a63b2d05e00028711155b15156108c7576040805160e560020a62461bcd02815260206004820152601e60248201527f416d6f756e742073686f756c642062652077697468696e2072616e67652e0000604482015290519081900360640190fd5b60008d1180156108dc5750650100000000008d105b1515610932576040805160e560020a62461bcd02815260206004820152601c60248201527f4d61736b2073686f756c642062652077697468696e2072616e67652e00000000604482015290519081900360640190fd5b438b101561098a576040805160e560020a62461bcd02815260206004820152601360248201527f436f6d6d69742068617320657870697265642e00000000000000000000000000604482015290519081900360640190fd5b8a8a604051602001808364ffffffffff1664ffffffffff167b01000000000000000000000000000000000000000000000000000000028152600501828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610a0d5780518252601f1990920191602091820191016109ee565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209450600185601b8b8b604051600081526020016040526040518085600019166000191681526020018460ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015610ab1573d6000803e3d6000fd5b5050604051601f190151600454600160a060020a039081169116149050610b22576040805160e560020a62461bcd02815260206004820152601d60248201527f4543445341207369676e6174757265206973206e6f742076616c69642e000000604482015290519081900360640190fd5b60288c11610b7557603f7920000000001000000000080000000004000000000200000000018e027e01041041041041041041041041041041041041041041041041041041041041160693508c9250610c05565b60008d118015610b8557508b8d11155b1515610c01576040805160e560020a62461bcd02815260206004820152602e60248201527f48696768206d6f64756c6f2072616e67652c206265744d61736b206c6172676560448201527f72207468616e206d6f64756c6f2e000000000000000000000000000000000000606482015290519081900360840190fd5b8c93505b610c10878d86611f0c565b60035491935091508701821115610c71576040805160e560020a62461bcd02815260206004820152601a60248201527f6d617850726f666974206c696d69742076696f6c6174696f6e2e000000000000604482015290519081900360640190fd5b600580546001608060020a03608060020a808304821686018216029181169190911780821684019091166fffffffffffffffffffffffffffffffff1991909116179055600080546040805160e060020a6370a082310281523060048201529051600160a060020a03909216926370a08231926024808401936020939083900390910190829087803b158015610d0557600080fd5b505af1158015610d19573d6000803e3d6000fd5b505050506040513d6020811015610d2f57600080fd5b50516005546001608060020a03808216608060020a909204811691909101161115610da4576040805160e560020a62461bcd02815260206004820152601f60248201527f43616e6e6f74206166666f726420746f206c6f73652074686973206265742e00604482015290519081900360640190fd5b604080518b815290517f5bdd2fc99022530157777690475b670d3872f32262eb1d47d9ba8000dad58f879181900360200190a150509383556001909201805460ff191660ff998a161761ff00191661010099909316989098029190911766ffffffffff00001916620100004364ffffffffff90811691909102919091176bffffffffff0000000000000019166701000000000000009190931602919091176bffffffffffffffffffffffff16336c010000000000000000000000000217909555505050505050565b600154600160a060020a03163314610ece576040805160e560020a62461bcd0281526020600482015260266024820152600080516020612e12833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b600554608060020a90046001608060020a031615610f82576040805160e560020a62461bcd02815260206004820152604860248201527f416c6c20626574732073686f756c642062652070726f6365737365642028736560448201527f74746c6564206f7220726566756e64656429206265666f72652073656c662d6460648201527f657374727563742e000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600080546006546040805160e060020a6370a082310281523060048201529051600160a060020a039384169463a9059cbb949093169285926370a082319260248083019360209383900390910190829087803b158015610fe157600080fd5b505af1158015610ff5573d6000803e3d6000fd5b505050506040513d602081101561100b57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561105a57600080fd5b505af115801561106e573d6000803e3d6000fd5b505050506040513d602081101561108457600080fd5b505115156110dc576040805160e560020a62461bcd02815260206004820152601b60248201527f2073656e64206f757420616c6c20746f6b656e206661696c7572650000000000604482015290519081900360640190fd5b600654600160a060020a0316ff5b600454600160a060020a031681565b600654600160a060020a031681565b6005546001608060020a031681565b600854600160a060020a031681565b600854600090819081908190600160a060020a031633146111b7576040805160e560020a62461bcd02815260206004820152602c60248201527f4f6e6c7943726f7570696572206d6574686f64732063616c6c6564206279206e60448201527f6f6e2d63726f75706965722e0000000000000000000000000000000000000000606482015290519081900360840190fd5b85604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106112065780518252601f1990920191602091820191016111e7565b51815160209384036101000a600019018019909216911617905260408051929094018290039091206000818152600790925292902091975090955050505060fa64ffffffffff8616014311156112cc576040805160e560020a62461bcd02815260206004820152602260248201527f426c6f636b686173682063616e2774206265207175657269656420627920455660448201527f4d2e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6112d66048612284565b6112e1846044612805565b909250905064ffffffffff85164082146112fa57600080fd5b611305838783612a93565b505050505050565b600154600160a060020a031681565b60035481565b60085460009081908190600160a060020a031633146113b1576040805160e560020a62461bcd02815260206004820152602c60248201527f4f6e6c7943726f7570696572206d6574686f64732063616c6c6564206279206e60448201527f6f6e2d63726f75706965722e0000000000000000000000000000000000000000606482015290519081900360840190fd5b84604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106114005780518252601f1990920191602091820191016113e1565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008181526007909252929020600181015492975095505062010000900464ffffffffff1692505043821090506114cf576040805160e560020a62461bcd02815260206004820152603360248201527f736574746c6542657420696e207468652073616d6520626c6f636b206173207060448201527f6c6163654265742c206f72206265666f72652e00000000000000000000000000606482015290519081900360840190fd5b60fa8101431115611550576040805160e560020a62461bcd02815260206004820152602260248201527f426c6f636b686173682063616e2774206265207175657269656420627920455660448201527f4d2e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8040841461155d57600080fd5b611568828686612a93565b5050505050565b600254600160a060020a031633146115e3576040805160e560020a62461bcd02815260206004820152602660248201527f43616e206f6e6c792061636365707420707265617070726f766564206e657720604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b6002546001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055565b600154600160a060020a03163314611676576040805160e560020a62461bcd0281526020600482015260266024820152600080516020612e12833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b600154600160a060020a03828116911614156116dc576040805160e560020a62461bcd02815260206004820152601d60248201527f43616e6e6f7420617070726f76652063757272656e74206f776e65722e000000604482015290519081900360640190fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600160a060020a0316331461176d576040805160e560020a62461bcd0281526020600482015260266024820152600080516020612e12833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b600080546040805160e060020a6370a082310281523060048201529051600160a060020a03909216926370a08231926024808401936020939083900390910190829087803b1580156117be57600080fd5b505af11580156117d2573d6000803e3d6000fd5b505050506040513d60208110156117e857600080fd5b5051811115611866576040805160e560020a62461bcd028152602060048201526024808201527f496e63726561736520616d6f756e74206c6172676572207468616e2062616c6160448201527f6e63652e00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600080546040805160e060020a6370a082310281523060048201529051600160a060020a03909216926370a08231926024808401936020939083900390910190829087803b1580156118b757600080fd5b505af11580156118cb573d6000803e3d6000fd5b505050506040513d60208110156118e157600080fd5b50516005546001608060020a03808216608060020a9092048116919091011682011115611958576040805160e560020a62461bcd02815260206004820152601160248201527f4e6f7420656e6f7567682066756e64732e000000000000000000000000000000604482015290519081900360640190fd5b600580546fffffffffffffffffffffffffffffffff1981166001608060020a039182169390930116919091179055565b600154600160a060020a031633146119ea576040805160e560020a62461bcd0281526020600482015260266024820152600080516020612e12833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600554608060020a90046001608060020a031681565b60008181526007602052604081208054909180821515611abf576040805160e560020a62461bcd02815260206004820152602260248201527f4265742073686f756c6420626520696e20616e2027616374697665272073746160448201527f7465000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600184015464ffffffffff620100009091041660fa014311611b51576040805160e560020a62461bcd02815260206004820152602260248201527f426c6f636b686173682063616e2774206265207175657269656420627920455660448201527f4d2e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600084556001840154611b7190849060ff80821691610100900416611f0c565b600580546001608060020a03608060020a8083048216869003821602918116919091178082168490039091166fffffffffffffffffffffffffffffffff19919091161790556001860154919350915061156890600160a060020a036c01000000000000000000000000909104168480611de0565b600154600160a060020a03163314611c47576040805160e560020a62461bcd0281526020600482015260266024820152600080516020612e12833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600160a060020a03163314611cd8576040805160e560020a62461bcd0281526020600482015260266024820152600080516020612e12833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b6000809054906101000a9004600160a060020a0316600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611d2a57600080fd5b505af1158015611d3e573d6000803e3d6000fd5b505050506040513d6020811015611d5457600080fd5b5051600a0a63b2d05e00028110611ddb576040805160e560020a62461bcd02815260206004820152602260248201527f6d617850726f6669742073686f756c6420626520612073616e65206e756d626560448201527f722e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600355565b60008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152602482018790529151919092169263a9059cbb92604480820193602093909283900390910190829087803b158015611e5257600080fd5b505af1158015611e66573d6000803e3d6000fd5b505050506040513d6020811015611e7c57600080fd5b505115611ec757604080518281529051600160a060020a038516917fd4f43975feb89f48dd30cabbb32011045be187d1e11c8ea9faa43efc35282519919081900360200190a2611f07565b604080518381529051600160a060020a038516917fac464fe4d3a86b9121261ac0a01dd981bfe0777c7c9d9c8f4473d31a9c0f9d2d919081900360200190a25b505050565b6000806000836000108015611f215750848411155b1515611f77576040805160e560020a62461bcd02815260206004820152601d60248201527f57696e2070726f626162696c697479206f7574206f662072616e67652e000000604482015290519081900360640190fd5b600a6000809054906101000a9004600160a060020a0316600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611fcb57600080fd5b505af1158015611fdf573d6000803e3d6000fd5b505050506040513d6020811015611ff557600080fd5b5051600a0a6127100281151561200757fe5b048610156120165760006120a9565b6103e86000809054906101000a9004600160a060020a0316600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561206b57600080fd5b505af115801561207f573d6000803e3d6000fd5b505050506040513d602081101561209557600080fd5b5051600a0a612710028115156120a757fe5b045b91506103e8600f8702049050620186a06000809054906101000a9004600160a060020a0316600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561210b57600080fd5b505af115801561211f573d6000803e3d6000fd5b505050506040513d602081101561213557600080fd5b5051600a0a6206ddd00281151561214857fe5b048110156121e757620186a06000809054906101000a9004600160a060020a0316600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156121a657600080fd5b505af11580156121ba573d6000803e3d6000fd5b505050506040513d60208110156121d057600080fd5b5051600a0a6206ddd0028115156121e357fe5b0490505b808201861015612267576040805160e560020a62461bcd02815260206004820152602260248201527f42657420646f65736e2774206576656e20636f76657220686f7573652065646760448201527f652e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b838583838903030281151561227857fe5b04925050935093915050565b8035600090811a9080808080808080808060f78b1015612314576040805160e560020a62461bcd02815260206004820152602260248201527f52656365697074206c656166206c6f6e676572207468616e203535206279746560448201527f732e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b9a8a0160f519019a8b3560001a9950607f8a116123365760018c019b506123a7565b60808a10158015612348575060b78a11155b151561239e576040805160e560020a62461bcd02815260206004820152601660248201527f5061746820697320616e20524c5020737472696e672e00000000000000000000604482015290519081900360640190fd5b9a8901607e19019a5b8b3560001a985060b98914612453576040805160e560020a62461bcd028152602060048201526044602482018190527f5265636569707420737472696e6720697320616c77617973206174206c656173908201527f7420323536206279746573206c6f6e672c20627574206c657373207468616e2060648201527f36346b2e00000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b60039b909b019a8b3560001a975060f988146124df576040805160e560020a62461bcd02815260206004820152603d60248201527f5265636569707420697320616c77617973206174206c6561737420323536206260448201527f79746573206c6f6e672c20627574206c657373207468616e2036346b2e000000606482015290519081900360840190fd5b60039b909b019a8b3560001a965060018714612545576040805160e560020a62461bcd02815260206004820152601960248201527f5374617475732073686f756c6420626520737563636573732e00000000000000604482015290519081900360640190fd5b60019b909b019a8b3560001a9550607f86116125665760018c019b506125d7565b60808610158015612578575060b78611155b15156125ce576040805160e560020a62461bcd02815260206004820181905260248201527f43756d756c61746976652067617320697320616e20524c5020737472696e672e604482015290519081900360640190fd5b9a8501607e19019a5b8b3560001a945060b9851461265c576040805160e560020a62461bcd02815260206004820152602660248201527f426c6f6f6d2066696c74657220697320616c776179732032353620627974657360448201527f206c6f6e672e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6101039b909b019a8b3560001a935060f884146126e9576040805160e560020a62461bcd02815260206004820152602660248201527f4c6f6773206c697374206973206c657373207468616e2032353620627974657360448201527f206c6f6e672e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60029b909b019a8b3560001a925060f88314612775576040805160e560020a62461bcd02815260206004820152602660248201527f4c6f6720656e747279206973206c657373207468616e2032353620627974657360448201527f206c6f6e672e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60029b909b019a8b3560001a9150609482146127db576040805160e560020a62461bcd02815260206004820152601960248201527f41646472657373206973203230206279746573206c6f6e672e00000000000000604482015290519081900360640190fd5b50600a198b0135600160a060020a03163081146127f757600080fd5b505050505050505050505050565b6040516000908190818080808080805b601d198b013561ffff16955085151561282d57612911565b601b198b013561ffff16945060208501861015612894576040805160e560020a62461bcd02815260206004820152601360248201527f536869667420626f756e647320636865636b2e00000000000000000000000000604482015290519081900360640190fd5b60048b81019b86010135935083156128f6576040805160e560020a62461bcd02815260206004820152601460248201527f4e6f6e2d656d707479206861736820736c6f742e000000000000000000000000604482015290519081900360640190fd5b858b89378b858901528588209b50859650858b019a50612815565b508a9750505083850161ffff601b198a01358116906019198b013516808701821015612987576040805160e560020a62461bcd02815260206004820152601360248201527f536869667420626f756e647320636865636b2e00000000000000000000000000604482015290519081900360640190fd5b60068b019a50818b843761299e8184018989612dcd565b8183209b509981019961ffff601d198c013581169650601b198c013516945060208501861015612a18576040805160e560020a62461bcd02815260206004820152601360248201527f536869667420626f756e647320636865636b2e00000000000000000000000000604482015290519081900360640190fd5b60048b81019b8601013593508315612a7a576040805160e560020a62461bcd02815260206004820152601460248201527f4e6f6e2d656d707479206861736820736c6f742e000000000000000000000000604482015290519081900360640190fd5b858b893750505050830196909652509390932093915050565b8254600184015460ff808216916101008104909116906c010000000000000000000000009004600160a060020a031660008080808080808a1515612b47576040805160e560020a62461bcd02815260206004820152602260248201527f4265742073686f756c6420626520696e20616e2027616374697665272073746160448201527f7465000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008e600001819055508c8c604051602001808381526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310612bb05780518252601f199092019160209182019101612b91565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912099508c925089915050811515612beb57fe5b069550612bf98b8b8b611f0c565b90955093506000925082915060288a11612c395760018e0154600287900a6701000000000000009091041664ffffffffff1615612c34578492505b612c45565b88861015612c45578492505b600580546001608060020a03608060020a8083048216899003821602911617905560008054604080517f313ce5670000000000000000000000000000000000000000000000000000000081529051600a93600160a060020a039093169263313ce56792600480820193602093909283900390910190829087803b158015612ccb57600080fd5b505af1158015612cdf573d6000803e3d6000fd5b505050506040513d6020811015612cf557600080fd5b5051600a0a61271002811515612d0757fe5b048b10612d57576103e88a88811515612d1c57fe5b04811515612d2657fe5b069050801515612d5757600580546fffffffffffffffffffffffffffffffff1981169091556001608060020a031691505b6000821115612da057604080518381529051600160a060020a038a16917fc388db0e8aa560a59633c094a0d0aa21322cd6234836fd5bac00fc5ae63b5783919081900360200190a25b612dbd8884840115612db457838501612db7565b60015b85611de0565b5050505050505050505050505050565b60005b60208210612df2578251845260209384019390920191601f1990910190612dd0565b50905182516020929092036101000a600019018019909116911617905256004f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2da165627a7a723058207590beb0e9ce8675927ed23abcbc6c55fedc2fedacbbc2a393185766ad9d10440029"
}