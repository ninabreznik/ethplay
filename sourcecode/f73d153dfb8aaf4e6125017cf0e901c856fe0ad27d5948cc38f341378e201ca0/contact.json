{
  "address": "0x4af2a42cdf7c921a90ce3e9ead34c92cadad7a26",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TLFToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-22\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n\n  function balanceOf(address _who) public view returns (uint256);\n\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transfer(address _to, uint256 _value) public returns (bool);\n\n  function approve(address _spender, uint256 _value)\n    public returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n  \n  event Burn(address indexed from, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n\n\n/**\n * @title Standard ERC20, Cova Token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\n\ncontract TLFToken is ERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private balances;\n  mapping (address => mapping (address => uint256)) private allowed;\n\n  uint256 private totalSupply_ = 1000000000 * (10 ** 18);\n  string private constant name_ = 'TLFToken';                                 // Set the token name for display\n  string private constant symbol_ = 'TLF';                                         // Set the token symbol for display\n  uint8 private constant decimals_ = 18;                                          // Set the number of decimals for display\n  \n\n  constructor () public {\n    balances[msg.sender] = totalSupply_;\n    emit Transfer(address(0), msg.sender, totalSupply_);\n  }\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n  \n   /**\n  * @dev Token name\n  */\n  function name() public view returns (string) {\n    return name_;\n  }\n\n  /**\n  * @dev Token symbol\n  */\n  function symbol() public view returns (string) {\n    return symbol_;\n  }\n\n  /**\n  * @dev Token decinal\n  */\n  function decimals() public view returns (uint8) {\n    return decimals_;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    require(_spender != address(0));\n\t\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n  \n  function burn(uint256 _value) public returns (bool success) {\n    require(msg.sender != address(0));\n\trequire(balances[msg.sender] >= _value);   // 必须要有这么多\n\t\n\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\ttotalSupply_ = totalSupply_.sub(_value);\n\n\temit Burn(msg.sender, _value);\n    return true;\n  }\n}",
  "bytecode": "60806040526b033b2e3c9fd0803ce800000060025534801561002057600080fd5b5060025433600081815260208181526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a361071a8061007a6000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806318160ddd1461016a57806323b872dd14610191578063313ce567146101bb57806342966c68146101e657806370a08231146101fe57806395d89b411461021f578063a9059cbb14610234578063dd62ed3e14610258575b600080fd5b3480156100b457600080fd5b506100bd61027f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f75781810151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013e57600080fd5b50610156600160a060020a03600435166024356102b6565b604080519115158252519081900360200190f35b34801561017657600080fd5b5061017f610334565b60408051918252519081900360200190f35b34801561019d57600080fd5b50610156600160a060020a036004358116906024351660443561033a565b3480156101c757600080fd5b506101d06104af565b6040805160ff9092168252519081900360200190f35b3480156101f257600080fd5b506101566004356104b4565b34801561020a57600080fd5b5061017f600160a060020a0360043516610562565b34801561022b57600080fd5b506100bd61057d565b34801561024057600080fd5b50610156600160a060020a03600435166024356105b4565b34801561026457600080fd5b5061017f600160a060020a0360043581169060243516610693565b60408051808201909152600881527f544c46546f6b656e000000000000000000000000000000000000000000000000602082015290565b6000600160a060020a03831615156102cd57600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a03831660009081526020819052604081205482111561035f57600080fd5b600160a060020a038416600090815260016020908152604080832033845290915290205482111561038f57600080fd5b600160a060020a03831615156103a457600080fd5b600160a060020a0384166000908152602081905260409020546103cd908363ffffffff6106be16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610402908363ffffffff6106d516565b600160a060020a03808516600090815260208181526040808320949094559187168152600182528281203382529091522054610444908363ffffffff6106be16565b600160a060020a03808616600081815260016020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b601290565b60003315156104c257600080fd5b336000908152602081905260409020548211156104de57600080fd5b336000908152602081905260409020546104fe908363ffffffff6106be16565b33600090815260208190526040902055600254610521908363ffffffff6106be16565b60025560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b600160a060020a031660009081526020819052604090205490565b60408051808201909152600381527f544c460000000000000000000000000000000000000000000000000000000000602082015290565b336000908152602081905260408120548211156105d057600080fd5b600160a060020a03831615156105e557600080fd5b33600090815260208190526040902054610605908363ffffffff6106be16565b3360009081526020819052604080822092909255600160a060020a03851681522054610637908363ffffffff6106d516565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600080838311156106ce57600080fd5b5050900390565b6000828201838110156106e757600080fd5b93925050505600a165627a7a72305820e12baf4a93962ad0669cc7ce50d16859d2770c12e38b58b4dffaca688701bbe50029"
}