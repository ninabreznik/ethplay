{
  "address": "0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Magi",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-21\n*/\n\npragma solidity ^0.5.0;\n\nlibrary SafeMath {\n\tfunction mul(uint a, uint b) internal pure returns (uint) {\n\t\tuint c = a * b;\n\t\tassert(a == 0 || c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction div(uint a, uint b) internal pure returns (uint) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\tfunction sub(uint a, uint b) internal pure returns (uint) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint a, uint b) internal pure returns (uint) {\n\t\tuint c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n\n\tfunction diff(uint a, uint b) internal pure returns (uint) {\n\t\treturn a > b ? sub(a, b) : sub(b, a);\n\t}\n\n\tfunction gt(uint a, uint b) internal pure returns(bytes1) {\n\t\tbytes1 c;\n\t\tc = 0x00;\n\t\tif (a > b) {\n\t\t\tc = 0x01;\n\t\t}\n\t\treturn c;\n\t}\n}\n\ninterface IMultiSigManager {\n\tfunction provideAddress(address origin, uint poolIndex) external returns (address payable);\n\tfunction passedContract(address) external returns (bool);\n\tfunction moderator() external returns(address);\n}\n\ncontract Managed {\n\tIMultiSigManager roleManager;\n\taddress public roleManagerAddress;\n\taddress public operator;\n\tuint public lastOperationTime;\n\tuint public operationCoolDown;\n\tuint constant BP_DENOMINATOR = 10000;\n\n\tevent UpdateRoleManager(address newManagerAddress);\n\tevent UpdateOperator(address updater, address newOperator);\n\n\tmodifier only(address addr) {\n\t\trequire(msg.sender == addr);\n\t\t_;\n\t}\n\n\tmodifier inUpdateWindow() {\n\t\tuint currentTime = getNowTimestamp();\n\t\trequire(currentTime - lastOperationTime >= operationCoolDown);\n\t\t_;\n\t\tlastOperationTime = currentTime;\n\t}\n\n\tconstructor(\n\t\taddress roleManagerAddr,\n\t\taddress opt, \n\t\tuint optCoolDown\n\t) public {\n\t\troleManagerAddress = roleManagerAddr;\n\t\troleManager = IMultiSigManager(roleManagerAddr);\n\t\toperator = opt;\n\t\toperationCoolDown = optCoolDown;\n\t}\n\n\tfunction updateRoleManager(address newManagerAddr) \n\t\tinUpdateWindow() \n\t\tpublic \n\treturns (bool) {\n\t\trequire(roleManager.passedContract(newManagerAddr));\n\t\troleManagerAddress = newManagerAddr;\n\t\troleManager = IMultiSigManager(roleManagerAddress);\n\t\trequire(roleManager.moderator() != address(0));\n\t\temit UpdateRoleManager(newManagerAddr);\n\t\treturn true;\n\t}\n\n\tfunction updateOperator() public inUpdateWindow() returns (bool) {\t\n\t\taddress updater = msg.sender;\t\n\t\toperator = roleManager.provideAddress(updater, 0);\n\t\temit UpdateOperator(updater, operator);\t\n\t\treturn true;\n\t}\n\n\tfunction getNowTimestamp() internal view returns (uint) {\n\t\treturn now;\n\t}\n}\n\n/// @title Magi - oracle contract accepts price commit\n/// @author duo.network\ncontract Magi is Managed {\n\tusing SafeMath for uint;\n\n\t/*\n     * Storage\n     */\n\tstruct Price {\n\t\tuint priceInWei;\n\t\tuint timeInSecond;\n\t\taddress source;\n\t}\n\tPrice public firstPrice;\n\tPrice public secondPrice;\n\tPrice public lastPrice;\n\taddress public priceFeed1; \n\taddress public priceFeed2; \n\taddress public priceFeed3;\n\tuint public priceTolInBP = 500; \n\tuint public priceFeedTolInBP = 100;\n\tuint public priceFeedTimeTol = 1 minutes;\n\tuint public priceUpdateCoolDown;\n\tuint public numOfPrices = 0;\n\tbool public started = false;\n\n\t/*\n     * Modifier\n     */\n\tmodifier isPriceFeed() {\n\t\trequire(msg.sender == priceFeed1 || msg.sender == priceFeed2 || msg.sender == priceFeed3);\n\t\t_;\n\t}\n\n\t/*\n     * Events\n     */\n\tevent CommitPrice(uint indexed priceInWei, uint indexed timeInSecond, address sender, uint index);\n\tevent AcceptPrice(uint indexed priceInWei, uint indexed timeInSecond, address sender);\n\tevent SetValue(uint index, uint oldValue, uint newValue);\n\tevent UpdatePriceFeed(address updater, address newPriceFeed);\n\n\t/*\n     * Constructor\n     */\n\tconstructor(\n\t\taddress opt,\n\t\taddress pf1,\n\t\taddress pf2,\n\t\taddress pf3,\n\t\taddress roleManagerAddr,\n\t\tuint pxCoolDown,\n\t\tuint optCoolDown\n\t\t) \n\t\tpublic\n\t\tManaged(roleManagerAddr, opt, optCoolDown) \n\t{\n\t\tpriceFeed1 = pf1;\n\t\tpriceFeed2 = pf2;\n\t\tpriceFeed3 = pf3;\n\t\tpriceUpdateCoolDown = pxCoolDown;\n\t\troleManagerAddress = roleManagerAddr;\n\t\troleManager = IMultiSigManager(roleManagerAddr);\n\t\temit UpdateRoleManager(roleManagerAddress);\n\t}\n\n\n\t/*\n     * Public Functions\n     */\n\tfunction startOracle(\n\t\tuint priceInWei, \n\t\tuint timeInSecond\n\t)\n\t\tpublic \n\t\tisPriceFeed() \n\t\treturns (bool success) \n\t{\n\t\trequire(!started && timeInSecond <= getNowTimestamp());\n\t\tlastPrice.timeInSecond = timeInSecond;\n\t\tlastPrice.priceInWei = priceInWei;\n\t\tlastPrice.source = msg.sender;\n\t\tstarted = true;\n\t\temit AcceptPrice(priceInWei, timeInSecond, msg.sender);\n\t\treturn true;\n\t}\n\n\n\tfunction getLastPrice() public view returns(uint, uint) {\n\t\treturn (lastPrice.priceInWei, lastPrice.timeInSecond);\n\t}\n\n\t// start of oracle\n\tfunction commitPrice(uint priceInWei, uint timeInSecond) \n\t\tpublic \n\t\tisPriceFeed()\n\t\treturns (bool success)\n\t{\t\n\t\trequire(started && timeInSecond <= getNowTimestamp() && timeInSecond >= lastPrice.timeInSecond.add(priceUpdateCoolDown));\n\t\tuint priceDiff;\n\t\tif (numOfPrices == 0) {\n\t\t\tpriceDiff = priceInWei.diff(lastPrice.priceInWei);\n\t\t\tif (priceDiff.mul(BP_DENOMINATOR).div(lastPrice.priceInWei) <= priceTolInBP) {\n\t\t\t\tacceptPrice(priceInWei, timeInSecond, msg.sender);\n\t\t\t} else {\n\t\t\t\t// wait for the second price\n\t\t\t\tfirstPrice = Price(priceInWei, timeInSecond, msg.sender);\n\t\t\t\temit CommitPrice(priceInWei, timeInSecond, msg.sender, 0);\n\t\t\t\tnumOfPrices++;\n\t\t\t}\n\t\t} else if (numOfPrices == 1) {\n\t\t\tif (timeInSecond > firstPrice.timeInSecond.add(priceUpdateCoolDown)) {\n\t\t\t\tif (firstPrice.source == msg.sender)\n\t\t\t\t\tacceptPrice(priceInWei, timeInSecond, msg.sender);\n\t\t\t\telse\n\t\t\t\t\tacceptPrice(firstPrice.priceInWei, timeInSecond, firstPrice.source);\n\t\t\t} else {\n\t\t\t\trequire(firstPrice.source != msg.sender);\n\t\t\t\t// if second price times out, use first one\n\t\t\t\tif (firstPrice.timeInSecond.add(priceFeedTimeTol) < timeInSecond || \n\t\t\t\t\tfirstPrice.timeInSecond.sub(priceFeedTimeTol) > timeInSecond) {\n\t\t\t\t\tacceptPrice(firstPrice.priceInWei, firstPrice.timeInSecond, firstPrice.source);\n\t\t\t\t} else {\n\t\t\t\t\tpriceDiff = priceInWei.diff(firstPrice.priceInWei);\n\t\t\t\t\tif (priceDiff.mul(BP_DENOMINATOR).div(firstPrice.priceInWei) <= priceTolInBP) {\n\t\t\t\t\t\tacceptPrice(firstPrice.priceInWei, firstPrice.timeInSecond, firstPrice.source);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// wait for the third price\n\t\t\t\t\t\tsecondPrice = Price(priceInWei, timeInSecond, msg.sender);\n\t\t\t\t\t\temit CommitPrice(priceInWei, timeInSecond, msg.sender, 1);\n\t\t\t\t\t\tnumOfPrices++;\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t}\n\t\t} else if (numOfPrices == 2) {\n\t\t\tif (timeInSecond > firstPrice.timeInSecond + priceUpdateCoolDown) {\n\t\t\t\tif ((firstPrice.source == msg.sender || secondPrice.source == msg.sender))\n\t\t\t\t\tacceptPrice(priceInWei, timeInSecond, msg.sender);\n\t\t\t\telse\n\t\t\t\t\tacceptPrice(secondPrice.priceInWei, timeInSecond, secondPrice.source);\n\t\t\t} else {\n\t\t\t\trequire(firstPrice.source != msg.sender && secondPrice.source != msg.sender);\n\t\t\t\tuint acceptedPriceInWei;\n\t\t\t\t// if third price times out, use first one\n\t\t\t\tif (firstPrice.timeInSecond.add(priceFeedTimeTol) < timeInSecond || \n\t\t\t\t\tfirstPrice.timeInSecond.sub(priceFeedTimeTol) > timeInSecond) {\n\t\t\t\t\tacceptedPriceInWei = firstPrice.priceInWei;\n\t\t\t\t} else {\n\t\t\t\t\t// take median and proceed\n\t\t\t\t\t// first and second price will never be equal in this part\n\t\t\t\t\t// if second and third price are the same, they are median\n\t\t\t\t\tif (secondPrice.priceInWei == priceInWei) {\n\t\t\t\t\t\tacceptedPriceInWei = priceInWei;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tacceptedPriceInWei = getMedian(firstPrice.priceInWei, secondPrice.priceInWei, priceInWei);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tacceptPrice(acceptedPriceInWei, firstPrice.timeInSecond, firstPrice.source);\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/*Internal Functions\n     */\n\tfunction acceptPrice(uint priceInWei, uint timeInSecond, address source) internal {\n\t\tlastPrice.priceInWei = priceInWei;\n\t\tlastPrice.timeInSecond = timeInSecond;\n\t\tlastPrice.source = source;\n\t\tnumOfPrices = 0;\n\t\temit AcceptPrice(priceInWei, timeInSecond, source);\n\t}\n\n\tfunction getMedian(uint a, uint b, uint c) internal pure returns (uint) {\n\t\tif (a.gt(b) ^ c.gt(a) == 0x0) {\n\t\t\treturn a;\n\t\t} else if(b.gt(a) ^ c.gt(b) == 0x0) {\n\t\t\treturn b;\n\t\t} else {\n\t\t\treturn c;\n\t\t}\n\t}\n\t// end of oracle\n\n\t// start of operator function\n\tfunction updatePriceFeed(uint index) \n\t\tinUpdateWindow() \n\t\tpublic \n\treturns (bool) {\n\t\trequire(index < 3);\n\t\taddress updater = msg.sender;\n\t\taddress newAddr = roleManager.provideAddress(updater, 1);\n\t\tif(index == 0) \n\t\t\tpriceFeed1 = newAddr;\n\t\telse if (index == 1)\n\t\t\tpriceFeed2 = newAddr;\n\t\telse // index == 2\n\t\t\tpriceFeed3 = newAddr;\n\t\t\n\t\temit UpdatePriceFeed(updater, newAddr);\n\t\treturn true;\n\t}\n\n\tfunction setValue(\n\t\tuint idx, \n\t\tuint newValue\n\t) \n\t\tpublic \n\t\tonly(operator) \n\t\tinUpdateWindow() \n\treturns (bool success) {\n\t\tuint oldValue;\n\t\tif (idx == 0) {\n\t\t\toldValue = priceTolInBP;\n\t\t\tpriceTolInBP = newValue;\n\t\t} else if (idx == 1) {\n\t\t\toldValue = priceFeedTolInBP;\n\t\t\tpriceFeedTolInBP = newValue;\n\t\t} else if (idx == 2) {\n\t\t\toldValue = priceFeedTimeTol;\n\t\t\tpriceFeedTimeTol = newValue;\n\t\t} else if (idx == 3) {\n\t\t\toldValue = priceUpdateCoolDown;\n\t\t\tpriceUpdateCoolDown = newValue;\n\t\t} else {\n\t\t\trevert();\n\t\t}\n\n\t\temit SetValue(idx, oldValue, newValue);\n\t\treturn true;\n\t}\n\t// end of operator function\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"name\":\"timeInSecond\",\"type\":\"uint256\"}],\"name\":\"commitPrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"name\":\"timeInSecond\",\"type\":\"uint256\"},{\"name\":\"source\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManagerAddr\",\"type\":\"address\"}],\"name\":\"updateRoleManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastOperationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPrice\",\"outputs\":[{\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"name\":\"timeInSecond\",\"type\":\"uint256\"},{\"name\":\"source\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeed3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeedTolInBP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationCoolDown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeedTimeTol\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceTolInBP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"name\":\"timeInSecond\",\"type\":\"uint256\"}],\"name\":\"startOracle\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setValue\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeed1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPrice\",\"outputs\":[{\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"name\":\"timeInSecond\",\"type\":\"uint256\"},{\"name\":\"source\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roleManagerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceUpdateCoolDown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFeed2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"updatePriceFeed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"opt\",\"type\":\"address\"},{\"name\":\"pf1\",\"type\":\"address\"},{\"name\":\"pf2\",\"type\":\"address\"},{\"name\":\"pf3\",\"type\":\"address\"},{\"name\":\"roleManagerAddr\",\"type\":\"address\"},{\"name\":\"pxCoolDown\",\"type\":\"uint256\"},{\"name\":\"optCoolDown\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"timeInSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"CommitPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"timeInSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AcceptPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SetValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPriceFeed\",\"type\":\"address\"}],\"name\":\"UpdatePriceFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManagerAddress\",\"type\":\"address\"}],\"name\":\"UpdateRoleManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"UpdateOperator\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000ea9a5d3fb1fd82d152a30d71c2f9140798e6d8770000000000000000000000008cff57292ab098728f26f7d2e2bdfc6b1729dddb000000000000000000000000eaf02ce5f21bd3c07197a84e702ef2f44b8e718d000000000000000000000000e81bf853ab451e52ed926797ede98e4ac6e7c562000000000000000000000000baa6a5b0b63597bcf8a81b2b3e12becf591b77a90000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000015180"
}