{
  "address": "0x80804eccd64b153572dcd0f6f494253a0d013492",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OpenEthereumToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-06\n*/\n\npragma solidity ^0.4.25;\n\n\n/**\n* WHAT IS OpenEthereumToken?   \n * OpenEthereumToken for general ethereum NFT token use; NFT Block Chain Token, URL link, Ethereum Interface,\n *                                      Data Rewrite possible, On Chain Data Storage, Transfer of Token\n * \n *      Pay to Recieve token     Individual Token Optimization   Security Useage\n * \n * Contract for OET tokens\n *                      How to Use:\n *                              Send Ether to Contract Address Min amount 0.16 \n *                              Automatically recieve 1 OET Token to payee address, Inventory Number as next Minted\n *                              Add Token Information with addTokenData function (with contract write)\n *                                      any Information / Data can be written to Chain\n *                              Transfer via SafeTransfers (with contract write)\n * \n *\n**/\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     *  as the code is not actually created until after the constructor finishes.\n     * @param addr address to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(addr) }\n        return size > 0;\n    }\n\n\n}\n\n\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n    /**\n    * @dev Magic value to be returned upon successful reception of an NFT\n    *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\n    *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n    */\n    bytes4 internal constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n\n    /**\n    * @notice Handle the receipt of an NFT\n    * @dev The ERC721 smart contract calls this function on the recipient\n    * after a `safetransfer`. This function MAY throw to revert and reject the\n    * transfer. This function MUST use 50,000 gas or less. Return of other\n    * than the magic value MUST result in the transaction being reverted.\n    * Note: the contract address is always the message sender.\n    * @param _from The sending address\n    * @param _tokenId The NFT identifier which is being transfered\n    * @param _data Additional data with no specified format\n    * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n    */\n    function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n}\n\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n\n    /**\n     * @notice Query if a contract implements an interface\n     * @param _interfaceId The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas.\n     */\n    function supportsInterface(bytes4 _interfaceId) external view returns (bool);\n}\n\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n\n    function balanceOf(address _owner) public view returns (uint256 _balance);\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n    function exists(uint256 _tokenId) public view returns (bool _exists);\n\n\n    function approve(address _to, uint256 _tokenId) public;\n    function getApproved(uint256 _tokenId) public view returns (address _operator);\n\n\n    function setApprovalForAll(address _operator, bool _approved) public;\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n\n\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n\n\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\n}\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Enumerable is ERC721Basic {\n    function totalSupply() public view returns (uint256);\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n    function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n    function name() external view returns (string _name);\n    function symbol() external view returns (string _symbol);\n    function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n\n\n}\n\n\n\n\ncontract ERC721Holder is ERC721Receiver {\n    function onERC721Received(address, uint256, bytes) public returns(bytes4) {\n        return ERC721_RECEIVED;\n    }\n}\n\n\n\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n    bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n    /**\n     * 0x01ffc9a7 ===\n     *   bytes4(keccak256('supportsInterface(bytes4)'))\n     */\n\n\n    /**\n     * @dev a mapping of interface id to whether or not it's supported\n     */\n    mapping(bytes4 => bool) internal supportedInterfaces;\n\n\n    /**\n     * @dev A contract implementing SupportsInterfaceWithLookup\n     * implement ERC165 itself\n     */\n    constructor() public {\n        _registerInterface(InterfaceId_ERC165);\n    }\n\n\n    /**\n     * @dev implement supportsInterface(bytes4) using a lookup table\n     */\n    function supportsInterface(bytes4 _interfaceId) external view returns (bool) {\n        return supportedInterfaces[_interfaceId];\n    }\n\n\n    /**\n     * @dev private method for registering an interface\n     */\n    function _registerInterface(bytes4 _interfaceId) internal {\n        require(_interfaceId != 0xffffffff);\n        supportedInterfaces[_interfaceId] = true;\n    }\n}\n\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n\n    bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n    /*\n     * 0x80ac58cd ===\n     *   bytes4(keccak256('balanceOf(address)')) ^\n     *   bytes4(keccak256('ownerOf(uint256)')) ^\n     *   bytes4(keccak256('approve(address,uint256)')) ^\n     *   bytes4(keccak256('getApproved(uint256)')) ^\n     *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n     *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n     *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n     *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n     *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n     */\n\n\n    bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n    /*\n     * 0x4f558e79 ===\n     *   bytes4(keccak256('exists(uint256)'))\n     */\n\n\n    using SafeMath for uint256;\n    using AddressUtils for address;\n\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) internal tokenOwner;\n\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) internal tokenApprovals;\n\n\n    // Mapping from owner to number of owned token\n    mapping (address => uint256) internal ownedTokensCount;\n\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n\n    /**\n     * @dev Guarantees msg.sender is owner of the given token\n     * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n     */\n    modifier onlyOwnerOf(uint256 _tokenId) {\n        require(ownerOf(_tokenId) == msg.sender);\n        _;\n    }\n\n\n    /**\n     * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n     * @param _tokenId uint256 ID of the token to validate\n     */\n    modifier canTransfer(uint256 _tokenId) {\n        require(isApprovedOrOwner(msg.sender, _tokenId));\n        _;\n    }\n\n\n    constructor() public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(InterfaceId_ERC721);\n        _registerInterface(InterfaceId_ERC721Exists);\n    }\n\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param _owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        require(_owner != address(0));\n        return ownedTokensCount[_owner];\n    }\n\n\n    /**\n     * @dev Gets the owner of the specified token ID\n     * @param _tokenId uint256 ID of the token to query the owner of\n     * @return owner address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 _tokenId) public view returns (address) {\n        address owner = tokenOwner[_tokenId];\n        require(owner != address(0));\n        return owner;\n    }\n\n\n    /**\n     * @dev Returns whether the specified token exists\n     * @param _tokenId uint256 ID of the token to query the existence of\n     * @return whether the token exists\n     */\n    function exists(uint256 _tokenId) public view returns (bool) {\n        address owner = tokenOwner[_tokenId];\n        return owner != address(0);\n    }\n\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * @dev The zero address indicates there is no approved address.\n     * @dev There can only be one approved address per token at a given time.\n     * @dev Can only be called by the token owner or an approved operator.\n     * @param _to address to be approved for the given token ID\n     * @param _tokenId uint256 ID of the token to be approved\n     */\n    function approve(address _to, uint256 _tokenId) public {\n        address owner = ownerOf(_tokenId);\n        require(_to != owner);\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n\n        tokenApprovals[_tokenId] = _to;\n        emit Approval(owner, _to, _tokenId);\n    }\n\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * @param _tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 _tokenId) public view returns (address) {\n        return tokenApprovals[_tokenId];\n    }\n\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n     * @param _to operator address to set the approval\n     * @param _approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address _to, bool _approved) public {\n        require(_to != msg.sender);\n        operatorApprovals[msg.sender][_to] = _approved;\n        emit ApprovalForAll(msg.sender, _to, _approved);\n    }\n\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner\n     * @param _owner owner address which you want to query the approval of\n     * @param _operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n        return operatorApprovals[_owner][_operator];\n    }\n\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address\n     * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n     * @dev Requires the msg sender to be the owner, approved, or operator\n     * @param _from current owner of the token\n     * @param _to address to receive the ownership of the given token ID\n     * @param _tokenId uint256 ID of the token to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n        require(_from != address(0));\n        require(_to != address(0));\n\n\n        clearApproval(_from, _tokenId);\n        removeTokenFrom(_from, _tokenId);\n        addTokenTo(_to, _tokenId);\n\n\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * @dev If the target address is a contract, it must implement `onERC721Received`,\n     *  which is called upon a safe transfer, and return the magic value\n     *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n     *  the transfer is reverted.\n     * @dev Requires the msg sender to be the owner, approved, or operator\n     * @param _from current owner of the token\n     * @param _to address to receive the ownership of the given token ID\n     * @param _tokenId uint256 ID of the token to be transferred\n    */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n        // solium-disable-next-line arg-overflow\n        safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * @dev If the target address is a contract, it must implement `onERC721Received`,\n     *  which is called upon a safe transfer, and return the magic value\n     *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n     *  the transfer is reverted.\n     * @dev Requires the msg sender to be the owner, approved, or operator\n     * @param _from current owner of the token\n     * @param _to address to receive the ownership of the given token ID\n     * @param _tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public canTransfer(_tokenId) {\n        transferFrom(_from, _to, _tokenId);\n        // solium-disable-next-line arg-overflow\n        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n    }\n\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID\n     * @param _spender address of the spender to query\n     * @param _tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     *  is an operator of the owner, or is the owner of the token\n     */\n    function isApprovedOrOwner(\n        address _spender,\n        uint256 _tokenId\n    )\n        internal\n        view\n        returns (bool)\n    {\n        address owner = ownerOf(_tokenId);\n        // Disable solium check because of\n        // https://github.com/duaraghav8/Solium/issues/175\n        // solium-disable-next-line operator-whitespace\n        return (\n            _spender == owner ||\n            getApproved(_tokenId) == _spender ||\n            isApprovedForAll(owner, _spender)\n        );\n    }\n\n\n    /**\n     * @dev Internal function to mint a new token\n     * @dev Reverts if the given token ID already exists\n     * @param _to The address that will own the minted token\n     * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n     */\n    function _mint(address _to, uint256 _tokenId) internal {\n        require(_to != address(0));\n        addTokenTo(_to, _tokenId);\n        emit Transfer(address(0), _to, _tokenId);\n    }\n\n\n    /**\n     * @dev Internal function to clear current approval of a given token ID\n     * @dev Reverts if the given address is not indeed the owner of the token\n     * @param _owner owner of the token\n     * @param _tokenId uint256 ID of the token to be transferred\n     */\n    function clearApproval(address _owner, uint256 _tokenId) internal {\n        require(ownerOf(_tokenId) == _owner);\n        if (tokenApprovals[_tokenId] != address(0)) {\n            tokenApprovals[_tokenId] = address(0);\n            emit Approval(_owner, address(0), _tokenId);\n        }\n    }\n\n\n    /**\n     * @dev Internal function to add a token ID to the list of a given address\n     * @param _to address representing the new owner of the given token ID\n     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function addTokenTo(address _to, uint256 _tokenId) internal {\n        require(tokenOwner[_tokenId] == address(0));\n        tokenOwner[_tokenId] = _to;\n        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n    }\n\n\n    /**\n     * @dev Internal function to remove a token ID from the list of a given address\n     * @param _from address representing the previous owner of the given token ID\n     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n        require(ownerOf(_tokenId) == _from);\n        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n        tokenOwner[_tokenId] = address(0);\n    }\n\n\n    /**\n     * @dev Internal function to invoke `onERC721Received` on a target address\n     * The call is not executed if the target address is not a contract\n     * @param _from address representing the previous owner of the given token ID\n     * @param _to target address that will receive the tokens\n     * @param _tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function checkAndCallSafeTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes _data\n    )\n        internal\n        returns (bool)\n    {\n        if (!_to.isContract()) {\n            return true;\n        }\n\n\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(\n        _from, _tokenId, _data);\n        return (retval == ERC721_RECEIVED);\n    }\n}\n\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\n contract Ownable {\n     address public owner;\n     address public pendingOwner;\n     address public manager;\n\n\n     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n     /**\n     * @dev Throws if called by any account other than the owner.\n     */\n     modifier onlyOwner() {\n         require(msg.sender == owner);\n         _;\n     }\n\n\n     /**\n      * @dev Modifier throws if called by any account other than the manager.\n      */\n     modifier onlyManager() {\n         require(msg.sender == manager);\n         _;\n     }\n\n\n     /**\n      * @dev Modifier throws if called by any account other than the pendingOwner.\n      */\n     modifier onlyPendingOwner() {\n         require(msg.sender == pendingOwner);\n         _;\n     }\n\n\n     constructor() public {\n         owner = msg.sender;\n     }\n\n\n     /**\n      * @dev Allows the current owner to set the pendingOwner address.\n      * @param newOwner The address to transfer ownership to.\n      */\n     function transferOwnership(address newOwner) public onlyOwner {\n         pendingOwner = newOwner;\n     }\n\n\n     /**\n      * @dev Allows the pendingOwner address to finalize the transfer.\n      */\n     function claimOwnership() public onlyPendingOwner {\n         emit OwnershipTransferred(owner, pendingOwner);\n         owner = pendingOwner;\n         pendingOwner = address(0);\n     }\n\n\n     /**\n      * @dev Sets the manager address.\n      * @param _manager The manager address.\n      */\n     function setManager(address _manager) public onlyOwner {\n         require(_manager != address(0));\n         manager = _manager;\n     }\n\n\n }\n\n\n\n\n\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract OpenEthereumToken is SupportsInterfaceWithLookup, ERC721, ERC721BasicToken, Ownable {\n\n\n    bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n    /**\n     * 0x780e9d63 ===\n     *   bytes4(keccak256('totalSupply()')) ^\n     *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n     *   bytes4(keccak256('tokenByIndex(uint256)'))\n     */\n\n\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n    /**\n     * 0x5b5e139f ===\n     *   bytes4(keccak256('name()')) ^\n     *   bytes4(keccak256('symbol()')) ^\n     *   bytes4(keccak256('tokenURI(uint256)'))\n     */\n\n\n    // Token name\n    string public name_ = \"OpenEthereumToken\";\n\n\n    // Token symbol\n    string public symbol_ = \"OET\";\n    \n    uint public tokenIDCount = 0;\n\n\n    // Mapping from owner to list of owned token IDs\n    mapping(address => uint256[]) internal ownedTokens;\n\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) internal ownedTokensIndex;\n\n\n    // Array with all token ids, used for enumeration\n    uint256[] internal allTokens;\n\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) internal allTokensIndex;\n\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) internal tokenURIs;\n\n\n    struct Data{\n        string information;\n        string URL;\n    }\n    \n    mapping(uint256 => Data) internal tokenData;\n    /**\n     * @dev Constructor function\n     */\n    constructor() public {\n\n\n\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(InterfaceId_ERC721Enumerable);\n        _registerInterface(InterfaceId_ERC721Metadata);\n    }\n\n\n    /**\n     * @dev External function to mint a new token\n     * @dev Reverts if the given token ID already exists\n     * @param _to address the beneficiary that will own the minted token\n     */\n    function mint(address _to) external onlyManager {\n        _mint(_to, tokenIDCount++);\n    }\n\n\n    /**\n     * @dev Gets the token name\n     * @return string representing the token name\n     */\n    function name() external view returns (string) {\n        return name_;\n    }\n\n\n    /**\n     * @dev Gets the token symbol\n     * @return string representing the token symbol\n     */\n    function symbol() external view returns (string) {\n        return symbol_;\n    }\n\n\n    function arrayOfTokensByAddress(address _holder) public view returns(uint256[]) {\n        return ownedTokens[_holder];\n    }\n\n\n    /**\n     * @dev Returns an URI for a given token ID\n     * @dev Throws if the token ID does not exist. May return an empty string.\n     * @param _tokenId uint256 ID of the token to query\n     */\n    function tokenURI(uint256 _tokenId) public view returns (string) {\n        require(exists(_tokenId));\n        return tokenURIs[_tokenId];\n    }\n\n\n    /**\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner\n     * @param _owner address owning the tokens list to be accessed\n     * @param _index uint256 representing the index to be accessed of the requested tokens list\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n     */\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n        require(_index < balanceOf(_owner));\n        return ownedTokens[_owner][_index];\n    }\n\n\n    /**\n     * @dev Gets the total amount of tokens stored by the contract\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view returns (uint256) {\n        return allTokens.length;\n    }\n\n\n    /**\n     * @dev Gets the token ID at a given index of all the tokens in this contract\n     * @dev Reverts if the index is greater or equal to the total number of tokens\n     * @param _index uint256 representing the index to be accessed of the tokens list\n     * @return uint256 token ID at the given index of the tokens list\n     */\n    function tokenByIndex(uint256 _index) public view returns (uint256) {\n        require(_index < totalSupply());\n        return allTokens[_index];\n    }\n\n\n    /**\n     * @dev Internal function to set the token URI for a given token\n     * @dev Reverts if the token ID does not exist\n     * @param _tokenId uint256 ID of the token to set its URI\n     * @param _uri string URI to assign\n     */\n    function _setTokenURI(uint256 _tokenId, string _uri) internal {\n        require(exists(_tokenId));\n        tokenURIs[_tokenId] = _uri;\n    }\n\n\n    /**\n     * @dev Internal function to add a token ID to the list of a given address\n     * @param _to address representing the new owner of the given token ID\n     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function addTokenTo(address _to, uint256 _tokenId) internal {\n        super.addTokenTo(_to, _tokenId);\n        uint256 length = ownedTokens[_to].length;\n        ownedTokens[_to].push(_tokenId);\n        ownedTokensIndex[_tokenId] = length;\n    }\n\n\n    /**\n     * @dev Internal function to remove a token ID from the list of a given address\n     * @param _from address representing the previous owner of the given token ID\n     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n        super.removeTokenFrom(_from, _tokenId);\n\n\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\n        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n\n        ownedTokens[_from][tokenIndex] = lastToken;\n        ownedTokens[_from][lastTokenIndex] = 0;\n        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are\n        // going to be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are\n        // first swapping the lastToken to the first position, and then dropping the element placed in the last\n        // position of the list\n\n\n        ownedTokens[_from].length--;\n        ownedTokensIndex[_tokenId] = 0;\n        ownedTokensIndex[lastToken] = tokenIndex;\n    }\n\n\n    /**\n     * @dev Internal function to mint a new token\n     * @dev Reverts if the given token ID already exists\n     * @param _to address the beneficiary that will own the minted token\n     */\n    function _mint(address _to, uint256 _id) internal {\n        allTokens.push(_id);\n        allTokensIndex[_id] = _id;\n        super._mint(_to, _id);\n    }\n    \n    function addTokenData(uint _tokenId, string _information, string _URL) public {\n            require(ownerOf(_tokenId) == msg.sender);\n            tokenData[_tokenId].information = _information;\n            tokenData[_tokenId].URL = _URL;\n\n\n        \n    }\n    \n    function getTokenData(uint _tokenId) public view returns(string Liscence, string URL){\n        require(exists(_tokenId));\n        Liscence = tokenData[_tokenId].information;\n        URL = tokenData[_tokenId].URL;\n    }\n    \n    function() payable{\n        require(msg.value > 0.16 ether);\n        _mint(msg.sender, tokenIDCount++);\n    }\n    \n    function withdraw() public onlyManager{\n        require(0.5 ether > 0);\n        manager.transfer(0.5 ether);\n    }\n}",
  "bytecode": "60c0604052601160808190527f4f70656e457468657265756d546f6b656e00000000000000000000000000000060a090815262000040916008919062000224565b506040805180820190915260038082527f4f455400000000000000000000000000000000000000000000000000000000006020909201918252620000879160099162000224565b506000600a553480156200009a57600080fd5b50620000cf7f01ffc9a700000000000000000000000000000000000000000000000000000000640100000000620001b7810204565b620001037f80ac58cd00000000000000000000000000000000000000000000000000000000640100000000620001b7810204565b620001377f4f558e7900000000000000000000000000000000000000000000000000000000640100000000620001b7810204565b60058054600160a060020a031916331790556200017d7f780e9d6300000000000000000000000000000000000000000000000000000000640100000000620001b7810204565b620001b17f5b5e139f00000000000000000000000000000000000000000000000000000000640100000000620001b7810204565b620002c9565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415620001e757600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200026757805160ff191683800117855562000297565b8280016001018555821562000297579182015b82811115620002975782518255916020019190600101906200027a565b50620002a5929150620002a9565b5090565b620002c691905b80821115620002a55760008155600101620002b0565b90565b61191180620002d96000396000f3006080604052600436106101955763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146101c157806306fdde03146101f7578063081812fc14610281578063095ea7b3146102b55780631244861e146102d957806318160ddd1461037557806319fa8f501461039c57806323b872dd146103ce5780632f745c59146103f85780633ccfd60b1461041c5780633e0c8f201461043157806342842e0e14610446578063481c6a75146104705780634e71e0c8146104855780634f558e791461049a5780634f6ccce7146104b25780636352211e146104ca5780636a627842146104e257806370a08231146105035780638da5cb5b1461052457806395d89b4114610539578063a22cb4651461054e578063af17dea614610574578063b09afec114610589578063b1cee3301461067f578063b88d4fde146106f0578063c87b56dd1461075f578063d0ebdbe714610777578063e2b9e18614610798578063e30c3978146107ad578063e985e9c5146107c2578063f2fde38b146107e9575b6702386f26fc10000034116101a957600080fd5b600a8054600181019091556101bf90339061080a565b005b3480156101cd57600080fd5b506101e3600160e060020a031960043516610859565b604080519115158252519081900360200190f35b34801561020357600080fd5b5061020c610878565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024657818101518382015260200161022e565b50505050905090810190601f1680156102735780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028d57600080fd5b5061029960043561090f565b60408051600160a060020a039092168252519081900360200190f35b3480156102c157600080fd5b506101bf600160a060020a036004351660243561092a565b3480156102e557600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101bf95833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506109d39650505050505050565b34801561038157600080fd5b5061038a610a3b565b60408051918252519081900360200190f35b3480156103a857600080fd5b506103b1610a41565b60408051600160e060020a03199092168252519081900360200190f35b3480156103da57600080fd5b506101bf600160a060020a0360043581169060243516604435610a65565b34801561040457600080fd5b5061038a600160a060020a0360043516602435610b0a565b34801561042857600080fd5b506101bf610b57565b34801561043d57600080fd5b5061038a610bae565b34801561045257600080fd5b506101bf600160a060020a0360043581169060243516604435610bb4565b34801561047c57600080fd5b50610299610be6565b34801561049157600080fd5b506101bf610bf5565b3480156104a657600080fd5b506101e3600435610c72565b3480156104be57600080fd5b5061038a600435610c8f565b3480156104d657600080fd5b50610299600435610cc4565b3480156104ee57600080fd5b506101bf600160a060020a0360043516610cee565b34801561050f57600080fd5b5061038a600160a060020a0360043516610d1b565b34801561053057600080fd5b50610299610d4e565b34801561054557600080fd5b5061020c610d5d565b34801561055a57600080fd5b506101bf600160a060020a03600435166024351515610dbe565b34801561058057600080fd5b5061020c610e42565b34801561059557600080fd5b506105a1600435610ed0565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156105e25781810151838201526020016105ca565b50505050905090810190601f16801561060f5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561064257818101518382015260200161062a565b50505050905090810190601f16801561066f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561068b57600080fd5b506106a0600160a060020a0360043516611037565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156106dc5781810151838201526020016106c4565b505050509050019250505060405180910390f35b3480156106fc57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101bf94600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506110a39650505050505050565b34801561076b57600080fd5b5061020c6004356110e2565b34801561078357600080fd5b506101bf600160a060020a036004351661118d565b3480156107a457600080fd5b5061020c6111db565b3480156107b957600080fd5b50610299611236565b3480156107ce57600080fd5b506101e3600160a060020a0360043581169060243516611245565b3480156107f557600080fd5b506101bf600160a060020a0360043516611273565b600d8054600181019091557fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5018190556000818152600e6020526040902081905561085582826112ac565b5050565b600160e060020a03191660009081526020819052604090205460ff1690565b60088054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109045780601f106108d957610100808354040283529160200191610904565b820191906000526020600020905b8154815290600101906020018083116108e757829003601f168201915b505050505090505b90565b600090815260026020526040902054600160a060020a031690565b600061093582610cc4565b9050600160a060020a03838116908216141561095057600080fd5b33600160a060020a038216148061096c575061096c8133611245565b151561097757600080fd5b6000828152600260205260408082208054600160a060020a031916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b336109dd84610cc4565b600160a060020a0316146109f057600080fd5b60008381526010602090815260409091208351610a0f92850190611824565b5060008381526010602090815260409091208251610a3592600190920191840190611824565b50505050565b600d5490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b80610a703382611307565b1515610a7b57600080fd5b600160a060020a0384161515610a9057600080fd5b600160a060020a0383161515610aa557600080fd5b610aaf8483611366565b610ab984836113fe565b610ac38383611537565b8183600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b6000610b1583610d1b565b8210610b2057600080fd5b600160a060020a0383166000908152600b60205260409020805483908110610b4457fe5b9060005260206000200154905092915050565b600754600160a060020a03163314610b6e57600080fd5b600754604051600160a060020a03909116906000906706f05b59d3b200009082818181858883f19350505050158015610bab573d6000803e3d6000fd5b50565b600a5481565b80610bbf3382611307565b1515610bca57600080fd5b610a3584848460206040519081016040528060008152506110a3565b600754600160a060020a031681565b600654600160a060020a03163314610c0c57600080fd5b600654600554604051600160a060020a0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805460058054600160a060020a0319908116600160a060020a03841617909155169055565b600090815260016020526040902054600160a060020a0316151590565b6000610c99610a3b565b8210610ca457600080fd5b600d805483908110610cb257fe5b90600052602060002001549050919050565b600081815260016020526040812054600160a060020a0316801515610ce857600080fd5b92915050565b600754600160a060020a03163314610d0557600080fd5b600a805460018101909155610bab90829061080a565b6000600160a060020a0382161515610d3257600080fd5b50600160a060020a031660009081526003602052604090205490565b600554600160a060020a031681565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109045780601f106108d957610100808354040283529160200191610904565b600160a060020a038216331415610dd457600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6009805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ec85780601f10610e9d57610100808354040283529160200191610ec8565b820191906000526020600020905b815481529060010190602001808311610eab57829003601f168201915b505050505081565b606080610edc83610c72565b1515610ee757600080fd5b60008381526010602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610f7a5780601f10610f4f57610100808354040283529160200191610f7a565b820191906000526020600020905b815481529060010190602001808311610f5d57829003601f168201915b50505050509150601060008481526020019081526020016000206001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561102b5780601f106110005761010080835404028352916020019161102b565b820191906000526020600020905b81548152906001019060200180831161100e57829003601f168201915b50505050509050915091565b600160a060020a0381166000908152600b602090815260409182902080548351818402810184019094528084526060939283018282801561109757602002820191906000526020600020905b815481526020019060010190808311611083575b50505050509050919050565b816110ae3382611307565b15156110b957600080fd5b6110c4858585610a65565b6110d085858585611580565b15156110db57600080fd5b5050505050565b60606110ed82610c72565b15156110f857600080fd5b6000828152600f602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156110975780601f1061116057610100808354040283529160200191611097565b820191906000526020600020905b81548152906001019060200180831161116e5750939695505050505050565b600554600160a060020a031633146111a457600080fd5b600160a060020a03811615156111b957600080fd5b60078054600160a060020a031916600160a060020a0392909216919091179055565b6008805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ec85780601f10610e9d57610100808354040283529160200191610ec8565b600654600160a060020a031681565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600554600160a060020a0316331461128a57600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a03821615156112c157600080fd5b6112cb8282611537565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008061131383610cc4565b905080600160a060020a031684600160a060020a0316148061134e575083600160a060020a03166113438461090f565b600160a060020a0316145b8061135e575061135e8185611245565b949350505050565b81600160a060020a031661137982610cc4565b600160a060020a03161461138c57600080fd5b600081815260026020526040902054600160a060020a031615610855576000818152600260205260408082208054600160a060020a031916905551829190600160a060020a038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a45050565b600080600061140d85856116f1565b6000848152600c6020908152604080832054600160a060020a0389168452600b9092529091205490935061144890600163ffffffff61177a16565b600160a060020a0386166000908152600b602052604090208054919350908390811061147057fe5b9060005260206000200154905080600b600087600160a060020a0316600160a060020a03168152602001908152602001600020848154811015156114b057fe5b6000918252602080832090910192909255600160a060020a0387168152600b909152604081208054849081106114e257fe5b6000918252602080832090910192909255600160a060020a0387168152600b909152604090208054906115199060001983016118a2565b506000938452600c6020526040808520859055908452909220555050565b6000611543838361178c565b50600160a060020a039091166000908152600b6020908152604080832080546001810182559084528284208101859055938352600c909152902055565b60008061159585600160a060020a031661180f565b15156115a457600191506116e8565b84600160a060020a031663f0b9e5ba8786866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561163c578181015183820152602001611624565b50505050905090810190601f1680156116695780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561168a57600080fd5b505af115801561169e573d6000803e3d6000fd5b505050506040513d60208110156116b457600080fd5b5051600160e060020a031981167ff0b9e5ba0000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b81600160a060020a031661170482610cc4565b600160a060020a03161461171757600080fd5b600160a060020a03821660009081526003602052604090205461174190600163ffffffff61177a16565b600160a060020a039092166000908152600360209081526040808320949094559181526001909152208054600160a060020a0319169055565b60008282111561178657fe5b50900390565b600081815260016020526040902054600160a060020a0316156117ae57600080fd5b60008181526001602081815260408084208054600160a060020a031916600160a060020a03881690811790915584526003909152909120546117ef91611817565b600160a060020a0390921660009081526003602052604090209190915550565b6000903b1190565b81810182811015610ce857fe5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061186557805160ff1916838001178555611892565b82800160010185558215611892579182015b82811115611892578251825591602001919060010190611877565b5061189e9291506118cb565b5090565b8154818355818111156118c6576000838152602090206118c69181019083016118cb565b505050565b61090c91905b8082111561189e57600081556001016118d15600a165627a7a72305820f650b7c5ee8d44fc367f1299917cf672fea01cda2f4b61210a24c134f22ec4b70029"
}