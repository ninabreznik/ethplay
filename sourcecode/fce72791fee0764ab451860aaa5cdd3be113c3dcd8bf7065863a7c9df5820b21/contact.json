{
  "address": "0x87ec4ae05076bf9d2afcd48fa151c6fb4071e59d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FOXTWidget",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-04\n*/\n\npragma solidity ^0.4.25;\n\n\ncontract ErcInterface {\n    function transferFrom(address _from, address _to, uint256 _value) public;\n    function transfer(address _to, uint256 _value) public;\n    function balanceOf(address _who) public returns(uint256);\n}\n\ncontract Ownable {\n    \n    address public owner;\n\n    /**\n     * The address whcih deploys this contrcat is automatically assgined ownership.\n     * */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * Functions with this modifier can only be executed by the owner of the contract. \n     * */\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    event OwnershipTransferred(address indexed from, address indexed to);\n\n    /**\n    * Transfers ownership to new Ethereum address. This function can only be called by the \n    * owner.\n    * @param _newOwner the address to be granted ownership.\n    **/\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != 0x0);\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n\n\ncontract FOXTWidget is Ownable {\n    \n    using SafeMath for uint256;\n    \n    ErcInterface public constant FOXT = ErcInterface(0xFbe878CED08132bd8396988671b450793C44bC12); \n    \n    bool public contractFrozen;\n    \n    uint256 private rate;\n    uint256 private purchaseTimeLimit;\n    uint256 private txFee;\n\n    mapping (address => uint256) private purchaseDeadlines;\n    mapping (address => uint256) private maxPurchase;\n    mapping (address => bool) private isBotAddress;\n    \n    \n    address[] private botsOwedTxFees;\n    uint256 private indexOfOwedTxFees;\n    \n    event TokensPurchased(address indexed by, address indexed recipient, uint256 total, uint256 value);\n    event RateUpdated(uint256 latestRate);\n    \n    constructor() public {\n        purchaseTimeLimit = 10 minutes;\n        txFee = 300e14; //same as 0.03 ETH.\n        contractFrozen = false;\n        indexOfOwedTxFees = 0;\n    }\n    \n    \n    /**\n     * Allows the owner to freeze / unfreeze the contract \n     * */\n    function toggleFreeze() public onlyOwner {\n        contractFrozen = !contractFrozen;\n    }\n    \n    \n    /**\n     * Allows the owner of the contract to add a bot address\n     * */\n    function addBotAddress(address _botAddress) public onlyOwner {\n        require(!isBotAddress[_botAddress]);\n        isBotAddress[_botAddress] = true;\n    }\n    \n    \n    /**\n     * Allows the owner of the contract to remove a bot address \n     */\n    function removeBotAddress(address _botAddress) public onlyOwner  {\n        require(isBotAddress[_botAddress]);\n        isBotAddress[_botAddress] = false;\n    }\n    \n    \n    /**\n     * Allows the owner to change the time limit which buyers will have once they\n     * have been permitted to buy tokens with the contract update. \n     * \n     * @param _newPurchaseTimeLimit The new time limit which buyers will have to \n     * make a purchase. \n     * \n     * @return true if the function exeutes successfully, false otherwise\n     * */\n    function changeTimeLimitMinutes(uint256 _newPurchaseTimeLimit) public onlyOwner returns(bool) {\n        require(_newPurchaseTimeLimit > 0 && _newPurchaseTimeLimit != purchaseTimeLimit);\n        purchaseTimeLimit = _newPurchaseTimeLimit;\n        return true;\n    }\n    \n    \n    /**\n     * Allows the owner to change the fixed transaction fee which will be charged \n     * to the buyers. \n     * \n     * @param _newTxFee The new transaction fee which will be charged to the buyers. \n     * \n     * @return true if the function exeutes successfully, false otherwise\n     * */\n    function changeTxFee(uint256 _newTxFee) public onlyOwner returns(bool) {\n        require(_newTxFee != txFee);\n        txFee = _newTxFee;\n        return true;\n    }\n    \n    \n    /**\n     * Functions with this modifier can only be invoked by either one of the bot  \n     * addresses or the owner of the contract. \n     * */\n    modifier restricted {\n        require(isBotAddress[msg.sender] || msg.sender == owner);\n        _;\n    }\n    \n    \n    /**\n     * Allows the bot or the owner of the contract to update the contract (will \n     * usuall by invoked right before a buyer will make a purchase). \n     * \n     * @param _rate The rate at which the FOXT tokens are shwon on Coin Market Cap.\n     * @param _purchaser The address of the buyer.\n     * @param _ethInvestment The total amoun of ETH the buyer has specified he \n     * or she will send to the contract. \n     * \n     * @return true if the function exeutes successfully, false otherwise\n     * */\n    function updateContract(uint256 _rate, address _purchaser, uint256 _ethInvestment) public restricted returns(bool){\n        require(!contractFrozen);\n        require(_purchaser != address(0x0));\n        require(_ethInvestment > 0);\n        require(_rate != 0);\n        if(_rate != rate) {\n            rate = _rate;\n        }\n        maxPurchase[_purchaser] = _ethInvestment;\n        purchaseDeadlines[_purchaser] = now.add(purchaseTimeLimit);\n        botsOwedTxFees.push(msg.sender);\n        emit RateUpdated(rate);\n        return true;\n    }\n    \n    \n    /**\n     * @return The purchaseTimeLimit\n     * */\n    function getTimePurchase() public view returns(uint256) {\n        return purchaseTimeLimit;\n    }\n    \n        /**\n     * @return The current rate shown on Coin Market Cap. \n     * */\n    function getRate() public view returns(uint256) {\n        return rate;\n    }\n    \n    \n    \n    /**\n     * Checks if a purchaser is permitted to make a purchase by checking \n     * the following conditions. 1st condition is that the bot updated the contract \n     * with the purcahser's address no longer than the purchase deadline ago. 2nd \n     * condition is that the purchaser is allowed to make an investment which is \n     * greater than 0. \n     * \n     * @return true if the purchaser is permitted to make a purchase, false \n     * otherwise.\n     * */\n    function addrCanPurchase(address _purchaser) public view returns(bool) {\n        return now < purchaseDeadlines[_purchaser] && maxPurchase[_purchaser] > 0;\n    }\n    \n\n    /**\n     * Allows users to buy FOXT tokens. For the function to execute successfully\n     * the following conditions must be met: 1st the purchaser must purcahse the \n     * tokens before the time limit is up (time limit is set when the bot updates\n     * the contract). 2nd the purchaser must send at least enough ETH to cover the \n     * txFee to cover the cost of the update, however, if the purchaser sends more \n     * ETH than specified in the update, the purchaser will still get FOXT tokens \n     * but also the remaining ETH will be refunded. \n     * \n     * @param _purchaser The address of the buyer\n     * \n     * @return true if the function exeutes successfully, false otherwise\n     * */\n    function buyTokens(address _purchaser) public payable returns(bool){\n        require(!contractFrozen);\n        require(addrCanPurchase(_purchaser));\n        require(msg.value > txFee);\n        uint256 msgVal = msg.value;\n        if(msgVal > maxPurchase[_purchaser]) {\n            msg.sender.transfer(msg.value.sub(maxPurchase[_purchaser]));\n            msgVal = maxPurchase[_purchaser];\n        }\n        maxPurchase[_purchaser] = 0;\n        msgVal = msgVal.sub(txFee);\n        botsOwedTxFees[indexOfOwedTxFees].transfer(txFee);\n        indexOfOwedTxFees = indexOfOwedTxFees.add(1);\n        uint256 toSend = msgVal.mul(rate);\n        FOXT.transfer(_purchaser, toSend);\n        emit TokensPurchased(msg.sender, _purchaser, toSend, msg.value);\n    }\n    \n    \n    /**\n     * Fallback function invokes the buyTokens function. \n     * */\n    function() public payable {\n        buyTokens(msg.sender);\n    }\n    \n    \n    /**\n     * Allows the owner of the contract to withdraw all ETH.\n     * */\n    function withdrawETH() public onlyOwner {\n        owner.transfer(address(this).balance);\n    }\n    \n    \n    /**\n     * Allows the owner of the contract to withdraw FOXT tokens.\n     * \n     * @param _recipient The address of the receiver.\n     * @param _totalTokens The number of FOXT tokens to send. \n     * */\n    function withdrawFoxt(address _recipient, uint256 _totalTokens) public onlyOwner {\n        FOXT.transfer(_recipient, _totalTokens);\n    }\n    \n    \n    /**\n     * Allows the owner of the contract to withdraw any ERC20 token.\n     * \n     * @param _tokenAddr The contract address of the ERC20 token.\n     * @param _recipient The address of the receiver.\n     * @param _totalTokens The number of tokens to send\n     * */\n    function withdrawAnyERC20(address _tokenAddr, address _recipient, uint256 _totalTokens) public onlyOwner {\n        ErcInterface token = ErcInterface(_tokenAddr);\n        token.transfer(_recipient, _totalTokens);\n    }\n    \n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054610258600255666a94d74f43000060035560a060020a60ff0219600160a060020a03199091163317168155600855610be6806100526000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166334fc259181146100fc57806339785550146101135780635aff59e31461013d578063610103d914610172578063679aefce1461018a5780636f42934d146101b15780638da5cb5b146101c657806397c2a9b7146101f75780639fe81f521461021b578063babbffa314610233578063c31f353714610248578063c79bad4314610269578063e086e5ec1461027e578063e41765de14610293578063ec8ac4d8146102b4578063f2fde38b146102c8578063faabc195146102e9575b6100f933610310565b50005b34801561010857600080fd5b5061011161058a565b005b34801561011f57600080fd5b50610111600160a060020a03600435811690602435166044356105e4565b34801561014957600080fd5b5061015e600160a060020a0360043516610686565b604080519115158252519081900360200190f35b34801561017e57600080fd5b5061015e6004356106c9565b34801561019657600080fd5b5061019f6106f9565b60408051918252519081900360200190f35b3480156101bd57600080fd5b5061019f6106ff565b3480156101d257600080fd5b506101db610705565b60408051600160a060020a039092168252519081900360200190f35b34801561020357600080fd5b50610111600160a060020a0360043516602435610714565b34801561022757600080fd5b5061015e6004356107c2565b34801561023f57600080fd5b506101db610800565b34801561025457600080fd5b50610111600160a060020a0360043516610818565b34801561027557600080fd5b5061015e610877565b34801561028a57600080fd5b50610111610898565b34801561029f57600080fd5b50610111600160a060020a03600435166108ed565b61015e600160a060020a0360043516610310565b3480156102d457600080fd5b50610111600160a060020a036004351661094e565b3480156102f557600080fd5b5061015e600435600160a060020a03602435166044356109e2565b600080548190819074010000000000000000000000000000000000000000900460ff161561033d57600080fd5b61034684610686565b151561035157600080fd5b600354341161035f57600080fd5b600160a060020a0384166000908152600560205260409020543492508211156103f757600160a060020a03841660009081526005602052604090205433906108fc906103b290349063ffffffff610b5516565b6040518115909202916000818181858888f193505050501580156103da573d6000803e3d6000fd5b50600160a060020a03841660009081526005602052604090205491505b600160a060020a03841660009081526005602052604081205560035461042490839063ffffffff610b5516565b9150600760085481548110151561043757fe5b6000918252602082200154600354604051600160a060020a039092169281156108fc029290818181858888f19350505050158015610479573d6000803e3d6000fd5b5060085461048e90600163ffffffff610b7316565b6008556001546104a590839063ffffffff610b8c16565b604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038716600482015260248101839052905191925073fbe878ced08132bd8396988671b450793c44bc129163a9059cbb9160448082019260009290919082900301818387803b15801561052457600080fd5b505af1158015610538573d6000803e3d6000fd5b5050604080518481523460208201528151600160a060020a03891694503393507f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b929181900390910190a35050919050565b600054600160a060020a031633146105a157600080fd5b6000805474ff0000000000000000000000000000000000000000198116740100000000000000000000000000000000000000009182900460ff1615909102179055565b60008054600160a060020a031633146105fc57600080fd5b50604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018490529151859283169163a9059cbb91604480830192600092919082900301818387803b15801561066857600080fd5b505af115801561067c573d6000803e3d6000fd5b5050505050505050565b600160a060020a038116600090815260046020526040812054421080156106c35750600160a060020a038216600090815260056020526040812054115b92915050565b60008054600160a060020a031633146106e157600080fd5b6003548214156106f057600080fd5b50600355600190565b60015490565b60025490565b600054600160a060020a031681565b600054600160a060020a0316331461072b57600080fd5b604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038416600482015260248101839052905173fbe878ced08132bd8396988671b450793c44bc129163a9059cbb91604480830192600092919082900301818387803b1580156107a657600080fd5b505af11580156107ba573d6000803e3d6000fd5b505050505050565b60008054600160a060020a031633146107da57600080fd5b6000821180156107ec57506002548214155b15156107f757600080fd5b50600255600190565b73fbe878ced08132bd8396988671b450793c44bc1281565b600054600160a060020a0316331461082f57600080fd5b600160a060020a03811660009081526006602052604090205460ff16151561085657600080fd5b600160a060020a03166000908152600660205260409020805460ff19169055565b60005474010000000000000000000000000000000000000000900460ff1681565b600054600160a060020a031633146108af57600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f193505050501580156108ea573d6000803e3d6000fd5b50565b600054600160a060020a0316331461090457600080fd5b600160a060020a03811660009081526006602052604090205460ff161561092a57600080fd5b600160a060020a03166000908152600660205260409020805460ff19166001179055565b600054600160a060020a0316331461096557600080fd5b600160a060020a038116151561097a57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b3360009081526006602052604081205460ff1680610a0a5750600054600160a060020a031633145b1515610a1557600080fd5b60005474010000000000000000000000000000000000000000900460ff1615610a3d57600080fd5b600160a060020a0383161515610a5257600080fd5b60008211610a5f57600080fd5b831515610a6b57600080fd5b6001548414610a7a5760018490555b600160a060020a0383166000908152600560205260409020829055600254610aa990429063ffffffff610b7316565b600160a060020a0384166000908152600460209081526040808320939093556007805460018181018355919093527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688909201805473ffffffffffffffffffffffffffffffffffffffff1916331790559054825190815291517fe65c987b2e4668e09ba867026921588005b2b2063607a1e7e7d91683c8f91b7b9281900390910190a15060019392505050565b60008083831115610b6557600080fd5b5050808203805b5092915050565b600082820183811015610b8557600080fd5b9392505050565b600080831515610b9f5760009150610b6c565b50828202828482811515610baf57fe5b0414610b8557600080fd00a165627a7a72305820cf95b4ab133181511b3355a035b5865ce1dd17fa70bf6b001c313a1f64d212ac0029"
}