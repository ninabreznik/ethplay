{
  "address": "0xc3ca8b034e0ecdb124f295cd394d4e6fcb7b6c2d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "X2_555ETH",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-22\n*/\n\npragma solidity ^0.4.24;\n\n/*\n* ---How to use:\n*  1. Send from ETH wallet to the smart contract address\n*     any amount ETH.\n*  2. Claim your profit by sending 0 ether transaction (1 time per hour)\n*  3. If you earn more than 200%, you can withdraw only one finish time\n*/\ncontract X2_555ETH {\n\n    using SafeMath for uint;\n    mapping(address => uint) public balance;\n    mapping(address => uint) public time;\n    mapping(address => uint) public percentWithdraw;\n    mapping(address => uint) public allPercentWithdraw;\n    uint public stepTime = 1 hours;\n    uint public countOfInvestors = 0;\n    address public ownerAddress = 0x0921fF7C0a326c095844874aD82b2B6f30365554;\n    uint projectPercent = 11;\n\n    event Invest(address investor, uint256 amount);\n    event Withdraw(address investor, uint256 amount);\n\n    modifier userExist() {\n        require(balance[msg.sender] > 0, \"Address not found\");\n        _;\n    }\n\n    modifier checkTime() {\n        require(now >= time[msg.sender].add(stepTime), \"Too fast payout request\");\n        _;\n    }\n\n    function collectPercent() userExist checkTime internal {\n        if ((balance[msg.sender].mul(2)) <= allPercentWithdraw[msg.sender]) {\n            balance[msg.sender] = 0;\n            time[msg.sender] = 0;\n            percentWithdraw[msg.sender] = 0;\n        } else {\n            uint payout = payoutAmount();\n            percentWithdraw[msg.sender] = percentWithdraw[msg.sender].add(payout);\n            allPercentWithdraw[msg.sender] = allPercentWithdraw[msg.sender].add(payout);\n            msg.sender.transfer(payout);\n            emit Withdraw(msg.sender, payout);\n        }\n    }\n\n    function percentRate() public view returns(uint) {\n        uint contractBalance = address(this).balance;\n\n        if (contractBalance < 1000 ether) {\n            return (55);\n        }\n        if (contractBalance >= 1000 ether && contractBalance < 2500 ether) {\n            return (44);\n        }\n        if (contractBalance >= 2500 ether && contractBalance < 5000 ether) {\n            return (33);\n        }\n        if (contractBalance >= 5000 ether && contractBalance < 10000 ether) {\n            return (21);\n        }    \n        if (contractBalance >= 10000 ether) {\n            return (15);\n        }\n    }\n\n    function payoutAmount() public view returns(uint256) {\n        uint256 percent = percentRate();\n        uint256 different = now.sub(time[msg.sender]).div(stepTime);\n        uint256 rate = balance[msg.sender].mul(percent).div(1000);\n        uint256 withdrawalAmount = rate.mul(different).div(24).sub(percentWithdraw[msg.sender]);\n\n        return withdrawalAmount;\n    }\n\n    function deposit() private {\n        if (msg.value > 0) {\n            if (balance[msg.sender] == 0) {\n                countOfInvestors += 1;\n            }\n            if (balance[msg.sender] > 0 && now > time[msg.sender].add(stepTime)) {\n                collectPercent();\n                percentWithdraw[msg.sender] = 0;\n            }\n            balance[msg.sender] = balance[msg.sender].add(msg.value);\n            time[msg.sender] = now;\n\n            ownerAddress.transfer(msg.value.mul(projectPercent).div(100));\n            emit Invest(msg.sender, msg.value);\n        } else {\n            collectPercent();\n        }\n    }\n\n    function() external payable {\n        deposit();\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "6080604052610e10600455600060055560068054600160a060020a031916730921ff7c0a326c095844874ad82b2b6f30365554179055600b60075534801561004657600080fd5b506107cc806100566000396000f3006080604052600436106100985763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634883c32981146100a25780636b46c8c3146100d55780637960eff8146100ea5780637c67a3e21461010b5780638090114f1461012c5780638f84aa0914610141578063e3d670d714610172578063f3f7d63314610193578063f488fdd0146101a8575b6100a06101bd565b005b3480156100ae57600080fd5b506100c3600160a060020a0360043516610323565b60408051918252519081900360200190f35b3480156100e157600080fd5b506100c3610335565b3480156100f657600080fd5b506100c3600160a060020a03600435166103dc565b34801561011757600080fd5b506100c3600160a060020a03600435166103ee565b34801561013857600080fd5b506100c3610400565b34801561014d57600080fd5b506101566104c8565b60408051600160a060020a039092168252519081900360200190f35b34801561017e57600080fd5b506100c3600160a060020a03600435166104d7565b34801561019f57600080fd5b506100c36104e9565b3480156101b457600080fd5b506100c36104ef565b6000341115610319573360009081526020819052604090205415156101e6576005805460010190555b336000908152602081905260408120541180156102235750600454336000908152600160205260409020546102209163ffffffff6104f516565b42115b156102415761023061050f565b336000908152600260205260408120555b33600090815260208190526040902054610261903463ffffffff6104f516565b33600090815260208181526040808320939093556001905220429055600654600754600160a060020a03909116906108fc906102b1906064906102a590349061074c565b9063ffffffff61077716565b6040518115909202916000818181858888f193505050501580156102d9573d6000803e3d6000fd5b506040805133815234602082015281517fd90d253a9de34d2fdd5a75ae49ea17fcb43af32fc8ea08cc6d2341991dd3872e929181900390910190a1610321565b61032161050f565b565b60036020526000908152604090205481565b6000806000806000610345610400565b60045433600090815260016020526040902054919550610370916102a590429063ffffffff61078e16565b3360009081526020819052604090205490935061039b906103e8906102a5908763ffffffff61074c16565b336000908152600260205260409020549092506103d3906103c760186102a5868863ffffffff61074c16565b9063ffffffff61078e16565b95945050505050565b60026020526000908152604090205481565b60016020526000908152604090205481565b60003031683635c9adc5dea0000081101561041e57603791506104c4565b683635c9adc5dea00000811015801561043f575068878678326eac90000081105b1561044d57602c91506104c4565b68878678326eac900000811015801561046f575069010f0cf064dd5920000081105b1561047d57602191506104c4565b69010f0cf064dd5920000081101580156104a0575069021e19e0c9bab240000081105b156104ae57601591506104c4565b69021e19e0c9bab240000081106104c457600f91505b5090565b600654600160a060020a031681565b60006020819052908152604090205481565b60055481565b60045481565b60008282018381101561050457fe5b8091505b5092915050565b33600090815260208190526040812054811061058c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f41646472657373206e6f7420666f756e64000000000000000000000000000000604482015290519081900360640190fd5b600454336000908152600160205260409020546105ae9163ffffffff6104f516565b42101561061c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f546f6f2066617374207061796f75742072657175657374000000000000000000604482015290519081900360640190fd5b33600090815260036020908152604080832054918390529091205461064890600263ffffffff61074c16565b116106775733600090815260208181526040808320839055600182528083208390556002909152812055610749565b61067f610335565b336000908152600260205260409020549091506106a2908263ffffffff6104f516565b336000908152600260209081526040808320939093556003905220546106ce908263ffffffff6104f516565b33600081815260036020526040808220939093559151909183156108fc02918491818181858888f1935050505015801561070c573d6000803e3d6000fd5b50604080513381526020810183905281517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364929181900390910190a15b50565b60008083151561075f5760009150610508565b5082820282848281151561076f57fe5b041461050457fe5b600080828481151561078557fe5b04949350505050565b60008282111561079a57fe5b509003905600a165627a7a723058205636f6ebe7d0a94c465c0655f9b99b202c08f37903467954b0106fc4d47556aa0029"
}