{
  "address": "0x347d11b17022f0f636dda2492f980cc60117d3f7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MyAdvancedToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-12\n*/\n\npragma solidity ^0.4.24;\n\n \n\ncontract owned {\n\n    address public owner;\n\n \n\n    constructor() public {\n\n        owner = msg.sender;\n\n    }\n\n \n\n    modifier onlyOwner {\n\n        require(msg.sender == owner);\n\n        _;\n\n    }\n\n \n\n    function transferOwnership(address newOwner) onlyOwner public {\n\n        owner = newOwner;\n\n    }\n\n}\n\n \n\ninterface tokenRecipient  { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n \n\ncontract TokenERC20 {\n\n    // Public variables of the token\n\n    string public name = 'Universal Medical Coin';\n\n    string public symbol = 'UMC';\n\n    uint8 public decimals = 18;\n\n    // 18 decimals is the strongly suggested default, avoid changing it\n\n    uint256 public totalSupply = 1000000000 * 10 ** uint256(decimals);\n\n \n\n    // This creates an array with all balances\n\n    mapping (address => uint256) public balanceOf;\n\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n \n    // This notifies clients about the amount burnt\n\n    event Burn(address indexed from, uint256 value);\n\n    constructor() internal {\n        \n        balanceOf[msg.sender] = totalSupply;\n        \n    }\n\n\n    /**\n\n     * Internal transfer, only can be called by this contract\n\n     */\n\n    function _transfer(address _from, address _to, uint _value) internal {\n\n        // Prevent transfer to 0x0 address. Use burn() instead\n\n        require(_to != 0x0);\n\n        // Check if the sender has enough\n\n        require(balanceOf[_from] >= _value);\n\n        // Check for overflows\n\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n\n        // Save this for an assertion in the future\n\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\n        // Subtract from the sender\n\n        balanceOf[_from] -= _value;\n\n        // Add the same to the recipient\n\n        balanceOf[_to] += _value;\n\n        emit Transfer(_from, _to, _value);\n\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\n    }\n\n \n\n    /**\n\n     * Transfer tokens\n\n     *\n\n     * Send `_value` tokens to `_to` from your account\n\n     *\n\n     * @param _to The address of the recipient\n\n     * @param _value the amount to send\n\n     */\n\n    function transfer(address _to, uint256 _value) public {\n\n        _transfer(msg.sender, _to, _value);\n\n    }\n\n \n\n    /**\n\n     * Transfer tokens from other address\n\n     *\n\n     * Send `_value` tokens to `_to` in behalf of `_from`\n\n     *\n\n     * @param _from The address of the sender\n\n     * @param _to The address of the recipient\n\n     * @param _value the amount to send\n\n     */\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n\n        allowance[_from][msg.sender] -= _value;\n\n        _transfer(_from, _to, _value);\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Set allowance for other address\n\n     *\n\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\n     *\n\n     * @param _spender The address authorized to spend\n\n     * @param _value the max amount they can spend\n\n     */\n\n    function approve(address _spender, uint256 _value) public\n\n        returns (bool success) {\n\n        allowance[msg.sender][_spender] = _value;\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Set allowance for other address and notify\n\n     *\n\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\n     *\n\n     * @param _spender The address authorized to spend\n\n     * @param _value the max amount they can spend\n\n     * @param _extraData some extra information to send to the approved contract\n\n     */\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n\n        public\n\n        returns (bool success) {\n\n        tokenRecipient spender = tokenRecipient(_spender);\n\n        if (approve(_spender, _value)) {\n\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n\n        }\n\n    }\n\n \n\n    /**\n\n     * Destroy tokens\n\n     *\n\n     * Remove `_value` tokens from the system irreversibly\n\n     *\n\n     * @param _value the amount of money to burn\n\n     */\n\n    function burn(uint256 _value) public returns (bool success) {\n\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n\n        totalSupply -= _value;                      // Updates totalSupply\n\n        emit Burn(msg.sender, _value);\n\n        return true;\n\n    }\n\n \n\n    /**\n\n     * Destroy tokens from other account\n\n     *\n\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\n     *\n\n     * @param _from the address of the sender\n\n     * @param _value the amount of money to burn\n\n     */\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\n        totalSupply -= _value;                              // Update totalSupply\n\n        emit Burn(_from, _value);\n\n        return true;\n\n    }\n\n}\n\n \n\n/******************************************/\n\n/*       ADVANCED TOKEN STARTS HERE       */\n\n/******************************************/\n\n \n\ncontract MyAdvancedToken is owned, TokenERC20 {\n\n \n\n    uint256 public sellPrice;\n\n    uint256 public buyPrice;\n\n \n\n    mapping (address => bool) public frozenAccount;\n\n \n\n    /* This generates a public event on the blockchain that will notify clients */\n\n    event FrozenFunds(address target, bool frozen);\n\n\n\n    /* Internal transfer, only can be called by this contract */\n\n    function _transfer(address _from, address _to, uint _value) internal {\n\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n\n        emit Transfer(_from, _to, _value);\n\n    }\n\n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n\n    /// @param target Address to receive the tokens\n\n    /// @param mintedAmount the amount of tokens it will receive\n\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n\n        balanceOf[target] += mintedAmount;\n\n        totalSupply += mintedAmount;\n\n        emit Transfer(0, this, mintedAmount);\n\n        emit Transfer(this, target, mintedAmount);\n\n    }\n\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n\n    /// @param target Address to be frozen\n\n    /// @param freeze either to freeze it or not\n\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n\n        frozenAccount[target] = freeze;\n\n        emit FrozenFunds(target, freeze);\n\n    }\n\n \n\n}",
  "bytecode": "60806040526040805190810160405280601681526020017f556e6976657273616c204d65646963616c20436f696e00000000000000000000815250600190805190602001906200005192919062000167565b506040805190810160405280600381526020017f554d430000000000000000000000000000000000000000000000000000000000815250600290805190602001906200009f92919062000167565b506012600360006101000a81548160ff021916908360ff160217905550600360009054906101000a900460ff1660ff16600a0a633b9aca0002600455336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600454600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000216565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001aa57805160ff1916838001178555620001db565b82800160010185558215620001db579182015b82811115620001da578251825591602001919060010190620001bd565b5b509050620001ea9190620001ee565b5090565b6200021391905b808211156200020f576000816000905550600101620001f5565b5090565b90565b61162e80620002266000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461010c578063095ea7b31461019c57806318160ddd1461020157806323b872dd1461022c578063313ce567146102b157806342966c68146102e25780634b7503341461032757806370a082311461035257806379c65068146103a957806379cc6790146103f65780638620410b1461045b5780638da5cb5b1461048657806395d89b41146104dd578063a9059cbb1461056d578063b414d4b6146105ba578063cae9ca5114610615578063dd62ed3e146106c0578063e724529c14610737578063f2fde38b14610786575b600080fd5b34801561011857600080fd5b506101216107c9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610161578082015181840152602081019050610146565b50505050905090810190601f16801561018e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a857600080fd5b506101e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610867565b604051808215151515815260200191505060405180910390f35b34801561020d57600080fd5b506102166108f4565b6040518082815260200191505060405180910390f35b34801561023857600080fd5b50610297600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108fa565b604051808215151515815260200191505060405180910390f35b3480156102bd57600080fd5b506102c6610a27565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102ee57600080fd5b5061030d60048036038101908080359060200190929190505050610a3a565b604051808215151515815260200191505060405180910390f35b34801561033357600080fd5b5061033c610b3e565b6040518082815260200191505060405180910390f35b34801561035e57600080fd5b50610393600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b44565b6040518082815260200191505060405180910390f35b3480156103b557600080fd5b506103f4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b5c565b005b34801561040257600080fd5b50610441600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ccd565b604051808215151515815260200191505060405180910390f35b34801561046757600080fd5b50610470610ee7565b6040518082815260200191505060405180910390f35b34801561049257600080fd5b5061049b610eed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104e957600080fd5b506104f2610f12565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610532578082015181840152602081019050610517565b50505050905090810190601f16801561055f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561057957600080fd5b506105b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fb0565b005b3480156105c657600080fd5b506105fb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fbf565b604051808215151515815260200191505060405180910390f35b34801561062157600080fd5b506106a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610fdf565b604051808215151515815260200191505060405180910390f35b3480156106cc57600080fd5b50610721600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611162565b6040518082815260200191505060405180910390f35b34801561074357600080fd5b50610784600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611187565b005b34801561079257600080fd5b506107c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112ac565b005b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561085f5780601f106108345761010080835404028352916020019161085f565b820191906000526020600020905b81548152906001019060200180831161084257829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60045481565b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561098757600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610a1c84848461134a565b600190509392505050565b600360009054906101000a900460ff1681565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a8a57600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b60075481565b60056020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bb757600080fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806004600082825401925050819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610d1d57600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610da857600080fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fa85780601f10610f7d57610100808354040283529160200191610fa8565b820191906000526020600020905b815481529060010190602001808311610f8b57829003601f168201915b505050505081565b610fbb33838361134a565b5050565b60096020528060005260406000206000915054906101000a900460ff1681565b600080849050610fef8585610867565b15611159578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156110e95780820151818401526020810190506110ce565b50505050905090810190601f1680156111165780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561113857600080fd5b505af115801561114c573d6000803e3d6000fd5b505050506001915061115a565b5b509392505050565b6006602052816000526040600020602052806000526040600020600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111e257600080fd5b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561130757600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561137057600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156113be57600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111151561144c57600080fd5b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156114a557600080fd5b600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156114fe57600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050505600a165627a7a72305820fc757c81ca39fa175d01fc01d3db1072abe8b289afac56d0ff97862d0bdb39000029"
}