{
  "address": "0xda28d9cf5bea99f90f760327acd1ad22e30eaa3d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Eth2x",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-11\n*/\n\npragma solidity 0.4.25;\n\n/*\n* https://www.eth2x.fund/\n*\n* Eth2x - Ethereum Fund\n*\n* Maximum profit - 200%\n*\n* Distributions of funds:\n* Payments to investors - 90%\n* Project marketing - 10%\n*\n* [✓] Up to 100 eth / 1 % daily\n* [✓] From 200-300 eth / 2% daily\n* [✓] From 300-400 eth / 3% daily\n* [✓] From 400-500 eth / 4% daily\n* [✓] From 500 eth / 5% daily\n*\n* [✓] Referral bouns - 2%\n* [✓] Referral cashback - 3%\n*/\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        if(a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract Eth2x {\n    using SafeMath for uint;\n\n    struct Investor {\n        uint invested;\n        uint payouts;\n        uint first_invest;\n        uint last_payout;\n        address referrer;\n    }\n\n    uint constant public COMMISSION = 10;\n    uint constant public WITHDRAW = 50;\n    uint constant public REFBONUS = 2;\n    uint constant public CASHBACK = 3;\n    uint constant public MULTIPLICATION = 2;\n\n    address public beneficiary = 0x3368e0A06D0Ae1b826B5171Ced8C7c94D785f9E5;\n\n    mapping(address => Investor) public investors;\n\n    event AddInvestor(address indexed holder);\n\n    event Payout(address indexed holder, uint amount);\n    event Deposit(address indexed holder, uint amount, address referrer);\n    event RefBonus(address indexed from, address indexed to, uint amount);\n    event CashBack(address indexed holder, uint amount);\n    event Withdraw(address indexed holder, uint amount);\n\n    function bonusSize() view public returns(uint) {\n        uint b = address(this).balance;\n\n        if(b >= 500 ether) return 5;\n        if(b >= 400 ether) return 4;\n        if(b >= 300 ether) return 3;\n        if(b >= 200 ether) return 2;\n        return 1;\n    }\n\n    function payoutSize(address _to) view public returns(uint) {\n        uint max = investors[_to].invested.mul(MULTIPLICATION);\n        if(investors[_to].invested == 0 || investors[_to].payouts >= max) return 0;\n\n        uint payout = investors[_to].invested.mul(bonusSize()).div(100).mul(block.timestamp.sub(investors[_to].last_payout)).div(1 days);\n        return investors[_to].payouts.add(payout) > max ? max.sub(investors[_to].payouts) : payout;\n    }\n\n    function withdrawSize(address _to) view public returns(uint) {\n        uint max = investors[_to].invested.div(100).mul(WITHDRAW);\n        if(investors[_to].invested == 0 || investors[_to].payouts >= max) return 0;\n\n        return max.sub(investors[_to].payouts);\n    }\n\n    function bytesToAddress(bytes bys) pure private returns(address addr) {\n        assembly {\n            addr := mload(add(bys, 20))\n        }\n    }\n\n    function() payable external {\n        if(investors[msg.sender].invested > 0) {\n            uint payout = payoutSize(msg.sender);\n\n            require(msg.value > 0 || payout > 0, \"No payouts\");\n\n            if(payout > 0) {\n                investors[msg.sender].last_payout = block.timestamp;\n                investors[msg.sender].payouts = investors[msg.sender].payouts.add(payout);\n\n                msg.sender.transfer(payout);\n\n                emit Payout(msg.sender, payout);\n            }\n\n            if(investors[msg.sender].payouts >= investors[msg.sender].invested.mul(MULTIPLICATION)) {\n                delete investors[msg.sender];\n\n                emit Withdraw(msg.sender, 0);\n            }\n        }\n\n        if(msg.value == 0.00000007 ether) {\n            require(investors[msg.sender].invested > 0, \"You have not invested anything yet\");\n\n            uint amount = withdrawSize(msg.sender);\n\n            require(amount > 0, \"You have nothing to withdraw\");\n            \n            msg.sender.transfer(amount);\n\n            delete investors[msg.sender];\n            \n            emit Withdraw(msg.sender, amount);\n        }\n        else if(msg.value > 0) {\n            require(msg.value >= 0.01 ether, \"Minimum investment amount 0.01 ether\");\n\n            investors[msg.sender].last_payout = block.timestamp;\n            investors[msg.sender].invested = investors[msg.sender].invested.add(msg.value);\n\n            beneficiary.transfer(msg.value.mul(COMMISSION).div(100));\n\n            if(investors[msg.sender].first_invest == 0) {\n                investors[msg.sender].first_invest = block.timestamp;\n\n                if(msg.data.length > 0) {\n                    address ref = bytesToAddress(msg.data);\n\n                    if(ref != msg.sender && investors[ref].invested > 0 && msg.value >= 1 ether) {\n                        investors[msg.sender].referrer = ref;\n\n                        uint ref_bonus = msg.value.mul(REFBONUS).div(100);\n                        ref.transfer(ref_bonus);\n\n                        emit RefBonus(msg.sender, ref, ref_bonus);\n\n                        uint cashback_bonus = msg.value.mul(CASHBACK).div(100);\n                        msg.sender.transfer(cashback_bonus);\n\n                        emit CashBack(msg.sender, cashback_bonus);\n                    }\n                }\n                emit AddInvestor(msg.sender);\n            }\n\n            emit Deposit(msg.sender, msg.value, investors[msg.sender].referrer);\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"WITHDRAW\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFBONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CASHBACK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"payouts\",\"type\":\"uint256\"},{\"name\":\"first_invest\",\"type\":\"uint256\"},{\"name\":\"last_payout\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MULTIPLICATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payoutSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"AddInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CashBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]",
  "bytecode": "608060405260008054600160a060020a031916733368e0a06d0ae1b826b5171ced8c7c94d785f9e517905534801561003657600080fd5b50610cd3806100466000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166316ba719781146107e557806319c5b8871461080c578063227c76781461082157806338af3eed14610836578063562df3d5146108675780635718b7601461087c5780636f78cb411461089d5780636f7bc9be146108b2578063724e1b4214610821578063cd402c8e14610907575b336000908152600160205260408120548190819081908190811015610295576100cb33610924565b945060003411806100dc5750600085115b1515610132576040805160e560020a62461bcd02815260206004820152600a60248201527f4e6f207061796f75747300000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008511156101e0573360009081526001602081905260409091204260038201550154610165908663ffffffff610a9416565b336000818152600160208190526040808320909101939093559151909187156108fc02918891818181858888f193505050501580156101a8573d6000803e3d6000fd5b5060408051868152905133917f5afeca38b2064c23a692c4cf353015d80ab3ecc417b4f893f372690c11fbd9a6919081900360200190a25b3360009081526001602052604090205461020190600263ffffffff610ab116565b3360009081526001602081905260409091200154106102955733600081815260016020818152604080842084815592830184905560028301849055600383018490556004909201805473ffffffffffffffffffffffffffffffffffffffff19169055815192835290517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649281900390910190a25b3464104c533c00141561043e57336000908152600160205260408120541161032d576040805160e560020a62461bcd02815260206004820152602260248201527f596f752068617665206e6f7420696e76657374656420616e797468696e67207960448201527f6574000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61033633610adf565b935060008411610390576040805160e560020a62461bcd02815260206004820152601c60248201527f596f752068617665206e6f7468696e6720746f20776974686472617700000000604482015290519081900360640190fd5b604051339085156108fc029086906000818181858888f193505050501580156103bd573d6000803e3d6000fd5b503360008181526001602081815260408084208481559283018490556002830184905560038301939093556004909101805473ffffffffffffffffffffffffffffffffffffffff19169055815187815291517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649281900390910190a26107de565b60003411156107de57662386f26fc100003410156104cb576040805160e560020a62461bcd028152602060048201526024808201527f4d696e696d756d20696e766573746d656e7420616d6f756e7420302e3031206560448201527f7468657200000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600160205260409020426003820155546104f1903463ffffffff610a9416565b3360009081526001602052604081209190915554600160a060020a03166108fc610533606461052734600a63ffffffff610ab116565b9063ffffffff610b9b16565b6040518115909202916000818181858888f1935050505015801561055b573d6000803e3d6000fd5b503360009081526001602052604090206002015415156107825733600090815260016020526040812042600290910155361115610756576105cc6000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610bbe945050505050565b9250600160a060020a03831633148015906105fd5750600160a060020a038316600090815260016020526040812054115b80156106115750670de0b6b3a76400003410155b1561075657336000908152600160205260409020600401805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03851617905561065e6064610527346002610ab1565b604051909250600160a060020a0384169083156108fc029084906000818181858888f19350505050158015610697573d6000803e3d6000fd5b50604080518381529051600160a060020a0385169133917f328838ddfc48ad5ae5531b1ad95dfb22b42ff1866853e474375ffef2c63d8e509181900360200190a36106ee606461052734600363ffffffff610ab116565b604051909150339082156108fc029083906000818181858888f1935050505015801561071e573d6000803e3d6000fd5b5060408051828152905133917f4615c4123931012254d1da78d05803534c985008f2421c8f2921db902fcc4955919081900360200190a25b60405133907f387d39bfed02fad21f9108b51f3ba7fc3880f84960908214bb7d9460e73116d590600090a25b33600081815260016020908152604091829020600401548251348152600160a060020a039091169181019190915281517fe31c7b8d08ee7db0afa68782e1028ef92305caeea8626633ad44d413e30f6b2f929181900390910190a25b5050505050005b3480156107f157600080fd5b506107fa610bc5565b60408051918252519081900360200190f35b34801561081857600080fd5b506107fa610bca565b34801561082d57600080fd5b506107fa610c3b565b34801561084257600080fd5b5061084b610c40565b60408051600160a060020a039092168252519081900360200190f35b34801561087357600080fd5b506107fa610c4f565b34801561088857600080fd5b506107fa600160a060020a0360043516610adf565b3480156108a957600080fd5b506107fa610c54565b3480156108be57600080fd5b506108d3600160a060020a0360043516610c59565b604080519586526020860194909452848401929092526060840152600160a060020a03166080830152519081900360a00190f35b34801561091357600080fd5b506107fa600160a060020a03600435165b600160a060020a0381166000908152600160205260408120548190819061095290600263ffffffff610ab116565b600160a060020a03851660009081526001602052604090205490925015806109965750600160a060020a038416600090815260016020819052604090912001548211155b156109a45760009250610a8d565b600160a060020a038416600090815260016020526040902060030154610a1f906201518090610527906109de90429063ffffffff610c9016565b610a1360646105276109ee610bca565b600160a060020a038c166000908152600160205260409020549063ffffffff610ab116565b9063ffffffff610ab116565b600160a060020a038516600090815260016020819052604090912001549091508290610a51908363ffffffff610a9416565b11610a5c5780610a8a565b600160a060020a03841660009081526001602081905260409091200154610a8a90839063ffffffff610c9016565b92505b5050919050565b600082820183811015610aa657600080fd5b8091505b5092915050565b600080831515610ac45760009150610aaa565b50828202828482811515610ad457fe5b0414610aa657600080fd5b600160a060020a0381166000908152600160205260408120548190610b1290603290610a1390606463ffffffff610b9b16565b600160a060020a0384166000908152600160205260409020549091501580610b565750600160a060020a038316600090815260016020819052604090912001548111155b15610b645760009150610b95565b600160a060020a03831660009081526001602081905260409091200154610b9290829063ffffffff610c9016565b91505b50919050565b600080808311610baa57600080fd5b8284811515610bb557fe5b04949350505050565b6014015190565b603281565b60003031681b1ae4d6e2ef5000008110610be75760059150610c37565b6815af1d78b58c4000008110610c005760049150610c37565b681043561a88293000008110610c195760039150610c37565b680ad78ebc5ac62000008110610c325760029150610c37565b600191505b5090565b600281565b600054600160a060020a031681565b600a81565b600381565b60016020819052600091825260409091208054918101546002820154600383015460049093015491929091600160a060020a031685565b60008083831115610ca057600080fd5b50509003905600a165627a7a72305820772166b928db4ebc97cb7a56852889514cec395886624a7e08632d48a75aa5610029"
}