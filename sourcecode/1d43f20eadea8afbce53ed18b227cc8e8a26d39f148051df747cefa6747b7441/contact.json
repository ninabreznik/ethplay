{
  "address": "0x5d85ffe6dd65fc82980866f5e095c4ef22a137b2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Reborn Dollar",
  "contractName": "RebornDollar",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity ^0.5.2;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n// File: contracts/ERC1132/IERC1132.sol\n\n/**\n * @title ERC1132 interface\n * @dev see https://github.com/ethereum/EIPs/issues/1132\n */\ninterface IERC1132 {\n  /**\n   * @dev Records data of all the tokens Locked\n   */\n  event Locked(\n    address indexed _of,\n    bytes32 indexed _reason,\n    uint256 _amount,\n    uint256 _validity\n  );\n\n  /**\n   * @dev Records data of all the tokens unlocked\n   */\n  event Unlocked(\n    address indexed _of,\n    bytes32 indexed _reason,\n    uint256 _amount\n  );\n  \n  /**\n   * @dev Locks a specified amount of tokens against an address,\n   *   for a specified reason and time\n   * @param _reason The reason to lock tokens\n   * @param _amount Number of tokens to be locked\n   * @param _time Lock time in seconds\n   */\n  function lock(bytes32 _reason, uint256 _amount, uint256 _time)\n    external returns (bool);\n \n  /**\n   * @dev Returns tokens locked for a specified address for a\n   *   specified reason\n   *\n   * @param _of The address whose tokens are locked\n   * @param _reason The reason to query the lock tokens for\n   */\n  function tokensLocked(address _of, bytes32 _reason)\n    external view returns (uint256 amount);\n  \n  /**\n   * @dev Returns tokens locked for a specified address for a\n   *   specified reason at a specific time\n   *\n   * @param _of The address whose tokens are locked\n   * @param _reason The reason to query the lock tokens for\n   * @param _time The timestamp to query the lock tokens for\n   */\n  function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\n    external view returns (uint256 amount);\n  \n  /**\n   * @dev Returns total tokens held by an address (locked + transferable)\n   * @param _of The address to query the total balance of\n   */\n  function totalBalanceOf(address _of)\n    external view returns (uint256 amount);\n  \n  /**\n   * @dev Extends lock for a specified reason and time\n   * @param _reason The reason to lock tokens\n   * @param _time Lock extension time in seconds\n   */\n  function extendLock(bytes32 _reason, uint256 _time)\n    external returns (bool);\n  \n  /**\n   * @dev Increase number of tokens locked for a specified reason\n   * @param _reason The reason to lock tokens\n   * @param _amount Number of tokens to be increased\n   */\n  function increaseLockAmount(bytes32 _reason, uint256 _amount)\n    external returns (bool);\n\n  /**\n   * @dev Returns unlockable tokens for a specified address for a specified reason\n   * @param _of The address to query the the unlockable token count of\n   * @param _reason The reason to query the unlockable tokens for\n   */\n  function tokensUnlockable(address _of, bytes32 _reason)\n    external view returns (uint256 amount);\n \n  /**\n   * @dev Unlocks the unlockable tokens of a specified address\n   * @param _of Address of user, claiming back unlockable tokens\n   */\n  function unlock(address _of)\n    external returns (uint256 unlockableTokens);\n\n  /**\n   * @dev Gets the unlockable tokens of a specified address\n   * @param _of The address to query the the unlockable token count of\n   */\n  function getUnlockableTokens(address _of)\n    external view returns (uint256 unlockableTokens);\n\n}\n\n// File: contracts/ERC1132/ERC1132.sol\n\n/**\n * @title Standard ERC1132 implementation\n * @dev See https://github.com/OpenZeppelin/openzeppelin-solidity/pull/1298\n */\ncontract ERC1132 is ERC20,  IERC1132 {\n  /**\n   * @dev Error messages for require statements\n   */\n  string internal constant ALREADY_LOCKED = \"Tokens already locked\";\n  string internal constant NOT_LOCKED = \"No tokens locked\";\n  string internal constant AMOUNT_ZERO = \"Amount can not be 0\";\n\n  /**\n   * @dev Reasons why a user's tokens have been locked\n   */\n  mapping(address => bytes32[]) public lockReason;\n\n  /**\n   * @dev locked token structure\n   */\n  struct LockToken {\n    uint256 amount;\n    uint256 validity;\n    bool claimed;\n  }\n\n  /**\n   * @dev Holds number & validity of tokens locked for a given reason for\n   *   a specified address\n   */\n  mapping(address => mapping(bytes32 => LockToken)) public locked;\n\n  /**\n   * @dev Locks a specified amount of tokens against an address,\n   *   for a specified reason and time\n   * @param _reason The reason to lock tokens\n   * @param _amount Number of tokens to be locked\n   * @param _time Lock time in seconds\n   */\n  function lock(bytes32 _reason, uint256 _amount, uint256 _time)\n    public\n    returns (bool)\n  {\n    // solium-disable-next-line security/no-block-members\n    uint256 validUntil = now.add(_time); //solhint-disable-line\n\n    // If tokens are already locked, then functions extendLock or\n    // increaseLockAmount should be used to make any changes\n    require(tokensLocked(msg.sender, _reason) == 0, ALREADY_LOCKED);\n    require(_amount != 0, AMOUNT_ZERO);\n\n    if (locked[msg.sender][_reason].amount == 0)\n      lockReason[msg.sender].push(_reason);\n\n    transfer(address(this), _amount);\n\n    locked[msg.sender][_reason] = LockToken(_amount, validUntil, false);\n\n    emit Locked(\n      msg.sender,\n      _reason, \n      _amount, \n      validUntil\n    );\n    return true;\n  }\n  \n  /**\n   * @dev Transfers and Locks a specified amount of tokens,\n   *   for a specified reason and time\n   * @param _to adress to which tokens are to be transfered\n   * @param _reason The reason to lock tokens\n   * @param _amount Number of tokens to be transfered and locked\n   * @param _time Lock time in seconds\n   */\n  function transferWithLock(\n    address _to, \n    bytes32 _reason, \n    uint256 _amount, \n    uint256 _time\n  )\n    public\n    returns (bool)\n  {\n    // solium-disable-next-line security/no-block-members\n    uint256 validUntil = now.add(_time); //solhint-disable-line\n\n    require(tokensLocked(_to, _reason) == 0, ALREADY_LOCKED);\n    require(_amount != 0, AMOUNT_ZERO);\n\n    if (locked[_to][_reason].amount == 0)\n      lockReason[_to].push(_reason);\n\n    transfer(address(this), _amount);\n\n    locked[_to][_reason] = LockToken(_amount, validUntil, false);\n    \n    emit Locked(\n      _to, \n      _reason, \n      _amount, \n      validUntil\n    );\n    return true;\n  }\n\n  /**\n   * @dev Returns tokens locked for a specified address for a\n   *   specified reason\n   *\n   * @param _of The address whose tokens are locked\n   * @param _reason The reason to query the lock tokens for\n   */\n  function tokensLocked(address _of, bytes32 _reason)\n    public\n    view\n    returns (uint256 amount)\n  {\n    if (!locked[_of][_reason].claimed)\n      amount = locked[_of][_reason].amount;\n  }\n  \n  /**\n   * @dev Returns tokens locked for a specified address for a\n   *   specified reason at a specific time\n   *\n   * @param _of The address whose tokens are locked\n   * @param _reason The reason to query the lock tokens for\n   * @param _time The timestamp to query the lock tokens for\n   */\n  function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\n    public\n    view\n    returns (uint256 amount)\n  {\n    if (locked[_of][_reason].validity > _time)\n      amount = locked[_of][_reason].amount;\n  }\n\n  /**\n   * @dev Returns total tokens held by an address (locked + transferable)\n   * @param _of The address to query the total balance of\n   */\n  function totalBalanceOf(address _of)\n    public\n    view\n    returns (uint256 amount)\n  {\n    amount = balanceOf(_of);\n\n    for (uint256 i = 0; i < lockReason[_of].length; i++) {\n      amount = amount.add(tokensLocked(_of, lockReason[_of][i]));\n    }  \n  }  \n  \n  /**\n   * @dev Extends lock for a specified reason and time\n   * @param _reason The reason to lock tokens\n   * @param _time Lock extension time in seconds\n   */\n  function extendLock(bytes32 _reason, uint256 _time)\n    public\n    returns (bool)\n  {\n    require(tokensLocked(msg.sender, _reason) > 0, NOT_LOCKED);\n\n    locked[msg.sender][_reason].validity += _time;\n\n    emit Locked(\n      msg.sender, _reason, \n      locked[msg.sender][_reason].amount, \n      locked[msg.sender][_reason].validity\n    );\n    return true;\n  }\n  \n  /**\n   * @dev Increase number of tokens locked for a specified reason\n   * @param _reason The reason to lock tokens\n   * @param _amount Number of tokens to be increased\n   */\n  function increaseLockAmount(bytes32 _reason, uint256 _amount)\n    public\n    returns (bool)\n  {\n    require(tokensLocked(msg.sender, _reason) > 0, NOT_LOCKED);\n    transfer(address(this), _amount);\n\n    locked[msg.sender][_reason].amount += _amount;\n\n    emit Locked(\n      msg.sender, _reason, \n      locked[msg.sender][_reason].amount,\n      locked[msg.sender][_reason].validity\n    );\n    return true;\n  }\n\n  /**\n   * @dev Returns unlockable tokens for a specified address for a specified reason\n   * @param _of The address to query the the unlockable token count of\n   * @param _reason The reason to query the unlockable tokens for\n   */\n  function tokensUnlockable(address _of, bytes32 _reason)\n    public\n    view\n    returns (uint256 amount)\n  {\n    // solium-disable-next-line security/no-block-members\n    if (locked[_of][_reason].validity <= now && \n      !locked[_of][_reason].claimed) \n      amount = locked[_of][_reason].amount;\n  }\n\n  /**\n   * @dev Unlocks the unlockable tokens of a specified address\n   * @param _of Address of user, claiming back unlockable tokens\n   */\n  function unlock(address _of)\n    public\n    returns (uint256 unlockableTokens)\n  {\n    uint256 lockedTokens;\n\n    for (uint256 i = 0; i < lockReason[_of].length; i++) {\n      lockedTokens = tokensUnlockable(_of, lockReason[_of][i]);\n      if (lockedTokens > 0) {\n        unlockableTokens = unlockableTokens.add(lockedTokens);\n        locked[_of][lockReason[_of][i]].claimed = true;\n        emit Unlocked(_of, lockReason[_of][i], lockedTokens);\n      }\n    } \n\n    if (unlockableTokens > 0)\n      this.transfer(_of, unlockableTokens);\n  }\n\n  /**\n   * @dev Gets the unlockable tokens of a specified address\n   * @param _of The address to query the the unlockable token count of\n   */\n  function getUnlockableTokens(address _of)\n    public\n    view\n    returns (uint256 unlockableTokens)\n  {\n    for (uint256 i = 0; i < lockReason[_of].length; i++) {\n      unlockableTokens = unlockableTokens.add(\n        tokensUnlockable(_of, lockReason[_of][i])\n      );\n    } \n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The account whose tokens will be burned.\n     * @param value uint256 The amount of token to be burned.\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n// File: contracts/RebornDollar.sol\n\ncontract RebornDollar is ERC1132, ERC20Detailed, ERC20Mintable, ERC20Burnable {\n  string public constant NAME = \"Reborn Dollar\";\n  string public constant SYMBOL = \"REBD\";\n  uint8 public constant DECIMALS = 18;\n\n  uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(DECIMALS));\n\n  constructor()\n    ERC20Burnable()\n    ERC20Mintable()\n    ERC20Detailed(NAME, SYMBOL, DECIMALS)\n    ERC20()\n    public\n  {\n    _mint(msg.sender, INITIAL_SUPPLY);\n  }\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040805190810160405280600d81526020017f5265626f726e20446f6c6c6172000000000000000000000000000000000000008152506040805190810160405280600481526020017f5245424400000000000000000000000000000000000000000000000000000000815250601282600590805190602001906200009892919062000472565b508160069080519060200190620000b192919062000472565b5080600760006101000a81548160ff021916908360ff160217905550505050620000ea3362000119640100000000026401000000009004565b6200011333601260ff16600a0a6402540be4000262000183640100000000026401000000009004565b62000521565b6200013d816008620002f86401000000000262002f6e179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620001c057600080fd5b620001e581600254620003bb6401000000000262002ab6179091906401000000009004565b6002819055506200024c816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620003bb6401000000000262002ab6179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200033557600080fd5b620003508282620003dd640100000000026401000000009004565b1515156200035d57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000808284019050838110151515620003d357600080fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200041b57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004b557805160ff1916838001178555620004e6565b82800160010185558215620004e6579182015b82811115620004e5578251825591602001919060010190620004c8565b5b509050620004f59190620004f9565b5090565b6200051e91905b808211156200051a57600081600090555060010162000500565b5090565b90565b6130f980620005316000396000f3fe608060405234801561001057600080fd5b5060043610610218576000357c0100000000000000000000000000000000000000000000000000000000900480635ca48d8c11610137578063a3f4df7e116100ca578063aa271e1a11610099578063aa271e1a14610b86578063ab4a2eb314610be2578063d71be8db14610c3a578063dd62ed3e14610cae578063f76f8d7814610d2657610218565b8063a3f4df7e146109e7578063a457c2d714610a6a578063a9059cbb14610ad0578063a9dab16714610b3657610218565b806381fc4d901161010657806381fc4d90146108c657806395d89b4114610916578063983b2d561461099957806398650275146109dd57610218565b80635ca48d8c1461075c57806370a08231146107be57806371d66f001461081657806379cc67901461087857610218565b80632ff2e9dc116101af57806342966c681161017e57806342966c68146105fa5780634b0ee02a146106285780634cb5465f146106805780635294d0e8146106fa57610218565b80632ff2e9dc146104ec578063313ce5671461050a578063395093511461052e57806340c10f191461059457610218565b806323b872dd116101eb57806323b872dd146103905780632e0f2625146104165780632e82aaf21461043a5780632f6c493c1461049457610218565b806306fdde031461021d578063095ea7b3146102a0578063179e91f11461030657806318160ddd14610372575b600080fd5b610225610da9565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561026557808201518184015260208101905061024a565b50505050905090810190601f1680156102925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ec600480360360408110156102b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e4b565b604051808215151515815260200191505060405180910390f35b61035c6004803603606081101561031c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610e62565b6040518082815260200191505060405180910390f35b61037a610f1d565b6040518082815260200191505060405180910390f35b6103fc600480360360608110156103a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f27565b604051808215151515815260200191505060405180910390f35b61041e610fd8565b604051808260ff1660ff16815260200191505060405180910390f35b61047a6004803603606081101561045057600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610fdd565b604051808215151515815260200191505060405180910390f35b6104d6600480360360208110156104aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061139f565b6040518082815260200191505060405180910390f35b6104f46116d7565b6040518082815260200191505060405180910390f35b6105126116e9565b604051808260ff1660ff16815260200191505060405180910390f35b61057a6004803603604081101561054457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611700565b604051808215151515815260200191505060405180910390f35b6105e0600480360360408110156105aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117a5565b604051808215151515815260200191505060405180910390f35b6106266004803603602081101561061057600080fd5b81019080803590602001909291905050506117cf565b005b61066a6004803603602081101561063e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117dc565b6040518082815260200191505060405180910390f35b6106e06004803603608081101561069657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506118c0565b604051808215151515815260200191505060405180910390f35b6107466004803603604081101561071057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c83565b6040518082815260200191505060405180910390f35b6107a86004803603604081101561077257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611da8565b6040518082815260200191505060405180910390f35b610800600480360360208110156107d457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e6e565b6040518082815260200191505060405180910390f35b6108626004803603604081101561082c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611eb6565b6040518082815260200191505060405180910390f35b6108c46004803603604081101561088e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ee6565b005b6108fc600480360360408110156108dc57600080fd5b810190808035906020019092919080359060200190929190505050611ef4565b604051808215151515815260200191505060405180910390f35b61091e612154565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561095e578082015181840152602081019050610943565b50505050905090810190601f16801561098b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6109db600480360360208110156109af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121f6565b005b6109e5612216565b005b6109ef612221565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a2f578082015181840152602081019050610a14565b50505050905090810190601f168015610a5c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610ab660048036036040811015610a8057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061225a565b604051808215151515815260200191505060405180910390f35b610b1c60048036036040811015610ae657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506122ff565b604051808215151515815260200191505060405180910390f35b610b6c60048036036040811015610b4c57600080fd5b810190808035906020019092919080359060200190929190505050612316565b604051808215151515815260200191505060405180910390f35b610bc860048036036020811015610b9c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061256b565b604051808215151515815260200191505060405180910390f35b610c2460048036036020811015610bf857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612588565b6040518082815260200191505060405180910390f35b610c8660048036036040811015610c5057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612661565b6040518084815260200183815260200182151515158152602001935050505060405180910390f35b610d1060048036036040811015610cc457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126a5565b6040518082815260200191505060405180910390f35b610d2e61272c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d6e578082015181840152602081019050610d53565b50505050905090810190601f168015610d9b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e415780601f10610e1657610100808354040283529160200191610e41565b820191906000526020600020905b815481529060010190602001808311610e2457829003601f168201915b5050505050905090565b6000610e58338484612765565b6001905092915050565b600081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020600101541115610f1657600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206000015490505b9392505050565b6000600254905090565b6000610f348484846128c8565b610fcd8433610fc885600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a9490919063ffffffff16565b612765565b600190509392505050565b601281565b600080610ff38342612ab690919063ffffffff16565b905060006110013387611da8565b146040805190810160405280601581526020017f546f6b656e7320616c7265616479206c6f636b656400000000000000000000008152509015156110e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156110a557808201518184015260208101905061108a565b50505050905090810190601f1680156110d25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008414156040805190810160405280601381526020017f416d6f756e742063616e206e6f742062652030000000000000000000000000008152509015156111c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561118957808201518184015260208101905061116e565b50505050905090810190601f1680156111b65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060000154141561128b57600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208590806001815401808255809150509060018203906000526020600020016000909192909190915055505b61129530856122ff565b5060606040519081016040528085815260200182815260200160001515815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050843373ffffffffffffffffffffffffffffffffffffffff167fea90ef40963535482537f0689e05cb8d259e459ebd21530e826702294d0eafdd8684604051808381526020018281526020019250505060405180910390a360019150509392505050565b60008060008090505b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156115e75761145284600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561144257fe5b9060005260206000200154611c83565b915060008211156115da576114708284612ab690919063ffffffff16565b92506001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561150157fe5b9060005260206000200154815260200190815260200160002060020160006101000a81548160ff021916908315150217905550600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110151561158057fe5b90600052602060002001548473ffffffffffffffffffffffffffffffffffffffff167f11f87fd5adcd05786919b8b868f59a70d78ae4eb6f305c5927f9c5b1659841a4846040518082815260200191505060405180910390a35b80806001019150506113a8565b5060008211156116d1573073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561169457600080fd5b505af11580156116a8573d6000803e3d6000fd5b505050506040513d60208110156116be57600080fd5b8101908080519060200190929190505050505b50919050565b601260ff16600a0a6402540be4000281565b6000600760009054906101000a900460ff16905090565b600061179b338461179685600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ab690919063ffffffff16565b612765565b6001905092915050565b60006117b03361256b565b15156117bb57600080fd5b6117c58383612ad7565b6001905092915050565b6117d93382612c2b565b50565b60006117e782611e6e565b905060008090505b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156118ba576118ab61189c84600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561188c57fe5b9060005260206000200154611da8565b83612ab690919063ffffffff16565b915080806001019150506117ef565b50919050565b6000806118d68342612ab690919063ffffffff16565b905060006118e48787611da8565b146040805190810160405280601581526020017f546f6b656e7320616c7265616479206c6f636b656400000000000000000000008152509015156119c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561198857808201518184015260208101905061196d565b50505050905090810190601f1680156119b55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008414156040805190810160405280601381526020017f416d6f756e742063616e206e6f74206265203000000000000000000000000000815250901515611aa7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611a6c578082015181840152602081019050611a51565b50505050905090810190601f168015611a995780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020600001541415611b6e57600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208590806001815401808255809150509060018203906000526020600020016000909192909190915055505b611b7830856122ff565b5060606040519081016040528085815260200182815260200160001515815250600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050848673ffffffffffffffffffffffffffffffffffffffff167fea90ef40963535482537f0689e05cb8d259e459ebd21530e826702294d0eafdd8684604051808381526020018281526020019250505060405180910390a36001915050949350505050565b600042600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206001015411158015611d465750600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060020160009054906101000a900460ff16155b15611da257600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015490505b92915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060020160009054906101000a900460ff161515611e6857600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015490505b92915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360205281600052604060002081815481101515611ed157fe5b90600052602060002001600091509150505481565b611ef08282612d7f565b5050565b600080611f013385611da8565b116040805190810160405280601081526020017f4e6f20746f6b656e73206c6f636b656400000000000000000000000000000000815250901515611fe0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611fa5578082015181840152602081019050611f8a565b50505050905090810190601f168015611fd25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50611feb30836122ff565b5081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060000160008282540192505081905550823373ffffffffffffffffffffffffffffffffffffffff167fea90ef40963535482537f0689e05cb8d259e459ebd21530e826702294d0eafdd600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060000154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060010154604051808381526020018281526020019250505060405180910390a36001905092915050565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121ec5780601f106121c1576101008083540402835291602001916121ec565b820191906000526020600020905b8154815290600101906020018083116121cf57829003601f168201915b5050505050905090565b6121ff3361256b565b151561220a57600080fd5b61221381612e26565b50565b61221f33612e80565b565b6040805190810160405280600d81526020017f5265626f726e20446f6c6c61720000000000000000000000000000000000000081525081565b60006122f533846122f085600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a9490919063ffffffff16565b612765565b6001905092915050565b600061230c3384846128c8565b6001905092915050565b6000806123233385611da8565b116040805190810160405280601081526020017f4e6f20746f6b656e73206c6f636b656400000000000000000000000000000000815250901515612402576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156123c75780820151818401526020810190506123ac565b50505050905090810190601f1680156123f45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060010160008282540192505081905550823373ffffffffffffffffffffffffffffffffffffffff167fea90ef40963535482537f0689e05cb8d259e459ebd21530e826702294d0eafdd600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060000154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060010154604051808381526020018281526020019250505060405180910390a36001905092915050565b6000612581826008612eda90919063ffffffff16565b9050919050565b600080600090505b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561265b5761264c61263d84600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561262d57fe5b9060005260206000200154611c83565b83612ab690919063ffffffff16565b91508080600101915050612590565b50919050565b6004602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020160009054906101000a900460ff16905083565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6040805190810160405280600481526020017f524542440000000000000000000000000000000000000000000000000000000081525081565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156127a157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156127dd57600080fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561290457600080fd5b612955816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a9490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129e8816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ab690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000828211151515612aa557600080fd5b600082840390508091505092915050565b6000808284019050838110151515612acd57600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612b1357600080fd5b612b2881600254612ab690919063ffffffff16565b600281905550612b7f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ab690919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612c6757600080fd5b612c7c81600254612a9490919063ffffffff16565b600281905550612cd3816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a9490919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b612d898282612c2b565b612e228233612e1d84600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a9490919063ffffffff16565b612765565b5050565b612e3a816008612f6e90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b612e9481600861301e90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612f1757600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612faa57600080fd5b612fb48282612eda565b151515612fc057600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561305a57600080fd5b6130648282612eda565b151561306f57600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fea165627a7a72305820d1d7ed6be540055ba7608e3dc02cf5d45881761c941d3d1e3ac337fed606a7af0029"
}