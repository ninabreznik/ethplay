{
  "address": "0x9a78a1bcc4c254eba53b811bbb42dc0bf915e166",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthOwls",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-25\n*/\n\npragma solidity ^0.4.18; // solhint-disable-line\n\n// similar as shrimpfarmer, with below changes:\n// A. one fifth of your owls die when you sell eggs\n// B. you can transfer ownership of the devfee through sacrificing owls\n// C. the \"free\" 300 owls cost 0.001 eth (in line with the mining fee)\n// D. Inflation has been reduced by 20% (More Earnings!)\n// bots should have a harder time, and whales can compete for the devfee\n\ncontract EthOwls{\n    //uint256 EGGS_PER_SHRIMP_PER_SECOND=1;\n    uint256 public EGGS_TO_HATCH_1SHRIMP=86400; //seconds in a day\n    uint256 public STARTING_SHRIMP=300;\n    uint256 PSN=10000;\n    uint256 PSNH=5000;\n    uint256 r=6;\n    uint256 inf=5;\n    uint256 RINF = r / inf; // Inflation reducer \n    bool public initialized=false;\n    address public ceoAddress;\n    mapping (address => uint256) public hatcheryShrimp;\n    mapping (address => uint256) public claimedEggs;\n    mapping (address => uint256) public lastHatch;\n    mapping (address => address) public referrals;\n    uint256 public marketEggs;\n    uint256 public owlmasterReq=100000;\n    function ShrimpFarmer() public{\n        ceoAddress=msg.sender;\n    }\n    function becomeOwlmaster() public{\n        require(initialized);\n        require(hatcheryShrimp[msg.sender]>=owlmasterReq);\n        hatcheryShrimp[msg.sender]=SafeMath.sub(hatcheryShrimp[msg.sender],owlmasterReq);\n        owlmasterReq=SafeMath.add(owlmasterReq,100000);//+100k owls each time\n        ceoAddress=msg.sender;\n    }\n    function hatchEggs(address ref) public{\n        require(initialized);\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n            referrals[msg.sender]=ref;\n        }\n        uint256 eggsUsed=getMyEggs();\n        uint256 newShrimp=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP);\n        hatcheryShrimp[msg.sender]=SafeMath.add(hatcheryShrimp[msg.sender],newShrimp);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        \n        //send referral eggs\n        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n        \n        //boost market to nerf shrimp hoarding\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n    }\n    function sellEggs() public{\n        require(initialized);\n        uint256 hasEggs=getMyEggs();\n        uint256 eggValue=calculateEggSell(hasEggs);\n        uint256 fee=devFee(eggValue);\n        // kill one fifth of the owner's owls on egg sale\n        hatcheryShrimp[msg.sender]=SafeMath.mul(SafeMath.div(hatcheryShrimp[msg.sender],5),4);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\n        ceoAddress.transfer(fee);\n        msg.sender.transfer(SafeMath.sub(eggValue,fee));\n    }\n    function buyEggs() public payable{\n        require(initialized);\n        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n        ceoAddress.transfer(devFee(msg.value));\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\n    }\n    //magic trade balancing algorithm\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/(RINF*rt)));\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),SafeMath.mul(RINF,rt))));\n    }\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\n        return calculateTrade(eggs,marketEggs,this.balance);\n    }\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n        return calculateTrade(eth,contractBalance,marketEggs);\n    }\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n        return calculateEggBuy(eth,this.balance);\n    }\n    function devFee(uint256 amount) public view returns(uint256){\n        return SafeMath.div(SafeMath.mul(amount,4),100);\n    }\n    function seedMarket(uint256 eggs) public payable{\n        require(marketEggs==0);\n        initialized=true;\n        marketEggs=eggs;\n    }\n    function getFreeShrimp() public payable{\n        require(initialized);\n        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\n        ceoAddress.transfer(msg.value); //owlmaster gets this entrance fee\n        require(hatcheryShrimp[msg.sender]==0);\n        lastHatch[msg.sender]=now;\n        hatcheryShrimp[msg.sender]=STARTING_SHRIMP;\n    }\n    function getBalance() public view returns(uint256){\n        return this.balance;\n    }\n    function getMyShrimp() public view returns(uint256){\n        return hatcheryShrimp[msg.sender];\n    }\n    function getOwlmasterReq() public view returns(uint256){\n        return owlmasterReq;\n    }\n    function getMyEggs() public view returns(uint256){\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\n    }\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr]));\n        return SafeMath.mul(secondsPassed,hatcheryShrimp[adr]);\n    }\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "60806040526201518060005561012c60015561271060025561138860035560066004556005805560055460045481151561003557fe5b046006556000600760006101000a81548160ff021916908315150217905550620186a0600d5534801561006757600080fd5b50611658806100776000396000f30060806040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a0f8168146101645780630b6f5b3d146101bb57806312065fe0146101d2578063158ef93e146101fd578063229824c41461022c57806323b3c7711461028157806326fd84221461028b5780632e9392bb146102d65780633955f0fe146103015780633b653755146103185780633bc0461a146103385780633ec862a8146103795780633f18400e146103bc57806343ce7422146103e7578063467ece79146104125780634f73f71d146104695780634f74acfe14610494578063726703611461049e578063732e77d0146104f55780637e2cb974146105205780637e56fde5146105775780638e316327146105b85780639ca423b3146105f9578063c2127e031461067c578063d7c8843b146106a7578063df990c33146106fe578063fb05594f14610715575b600080fd5b34801561017057600080fd5b50610179610740565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101c757600080fd5b506101d0610766565b005b3480156101de57600080fd5b506101e76107a9565b6040518082815260200191505060405180910390f35b34801561020957600080fd5b506102126107c8565b604051808215151515815260200191505060405180910390f35b34801561023857600080fd5b5061026b6004803603810190808035906020019092919080359060200190929190803590602001909291905050506107db565b6040518082815260200191505060405180910390f35b610289610839565b005b34801561029757600080fd5b506102c060048036038101908080359060200190929190803590602001909291905050506109ac565b6040518082815260200191505060405180910390f35b3480156102e257600080fd5b506102eb6109c3565b6040518082815260200191505060405180910390f35b34801561030d57600080fd5b506103166109c9565b005b61033660048036038101908080359060200190929190505050610bf9565b005b34801561034457600080fd5b5061036360048036038101908080359060200190929190505050610c2f565b6040518082815260200191505060405180910390f35b34801561038557600080fd5b506103ba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c4d565b005b3480156103c857600080fd5b506103d16110a1565b6040518082815260200191505060405180910390f35b3480156103f357600080fd5b506103fc6110a7565b6040518082815260200191505060405180910390f35b34801561041e57600080fd5b50610453600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110ff565b6040518082815260200191505060405180910390f35b34801561047557600080fd5b5061047e611117565b6040518082815260200191505060405180910390f35b61049c611121565b005b3480156104aa57600080fd5b506104df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061127e565b6040518082815260200191505060405180910390f35b34801561050157600080fd5b5061050a611296565b6040518082815260200191505060405180910390f35b34801561052c57600080fd5b50610561600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061129c565b6040518082815260200191505060405180910390f35b34801561058357600080fd5b506105a2600480360381019080803590602001909291905050506112b4565b6040518082815260200191505060405180910390f35b3480156105c457600080fd5b506105e3600480360381019080803590602001909291905050506112de565b6040518082815260200191505060405180910390f35b34801561060557600080fd5b5061063a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061130b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561068857600080fd5b5061069161133e565b6040518082815260200191505060405180910390f35b3480156106b357600080fd5b506106e8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611385565b6040518082815260200191505060405180910390f35b34801561070a57600080fd5b5061071361142f565b005b34801561072157600080fd5b5061072a611580565b6040518082815260200191505060405180910390f35b600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b33600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600760009054906101000a900460ff1681565b60006108306107ec60025484611586565b61082b6003546108266108156108046002548a611586565b6108106003548c611586565b6115c1565b6108216006548b611586565b6115df565b6115c1565b6115df565b90509392505050565b600760009054906101000a900460ff16151561085457600080fd5b66038d7ea4c680003414151561086957600080fd5b600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156108d1573d6000803e3d6000fd5b506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561092057600080fd5b42600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600154600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60006109bb8383600c546107db565b905092915050565b600c5481565b6000806000600760009054906101000a900460ff1615156109e957600080fd5b6109f16110a7565b92506109fc836112de565b9150610a0782610c2f565b9050610a5d610a56600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460056115df565b6004611586565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b35600c54846115c1565b600c81905550600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ba3573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff166108fc610bc884846115fa565b9081150290604051600060405180830381858888f19350505050158015610bf3573d6000803e3d6000fd5b50505050565b6000600c54141515610c0a57600080fd5b6001600760006101000a81548160ff02191690831515021790555080600c8190555050565b6000610c46610c3f836004611586565b60646115df565b9050919050565b600080600760009054906101000a900460ff161515610c6b57600080fd5b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610d7b57503373ffffffffffffffffffffffffffffffffffffffff16600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610dff5782600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610e076110a7565b9150610e15826000546115df565b9050610e60600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826115c1565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fde60096000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fd98460056115df565b6115c1565b60096000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611096600c5461109184600a6115df565b6115c1565b600c81905550505050565b600d5481565b60006110fa600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110f533611385565b6115c1565b905090565b600a6020528060005260406000206000915090505481565b6000600d54905090565b6000600760009054906101000a900460ff16151561113e57600080fd5b611168346111633073ffffffffffffffffffffffffffffffffffffffff1631346115fa565b6109ac565b905061117c8161117783610c2f565b6115fa565b9050600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6111c334610c2f565b9081150290604051600060405180830381858888f193505050501580156111ee573d6000803e3d6000fd5b50611238600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826115c1565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60096020528060005260406000206000915090505481565b60005481565b60086020528060005260406000206000915090505481565b60006112d7823073ffffffffffffffffffffffffffffffffffffffff16316109ac565b9050919050565b600061130482600c543073ffffffffffffffffffffffffffffffffffffffff16316107db565b9050919050565b600b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000806113dc6000546113d742600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115fa565b611613565b905061142781600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611586565b915050919050565b600760009054906101000a900460ff16151561144a57600080fd5b600d54600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561149a57600080fd5b6114e5600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600d546115fa565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611537600d54620186a06115c1565b600d8190555033600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60015481565b600080600084141561159b57600091506115ba565b82840290508284828115156115ac57fe5b041415156115b657fe5b8091505b5092915050565b60008082840190508381101515156115d557fe5b8091505092915050565b60008082848115156115ed57fe5b0490508091505092915050565b600082821115151561160857fe5b818303905092915050565b60008183106116225781611624565b825b9050929150505600a165627a7a723058200123068bc71cf2c7017f4e0f0962482a20a145cb67852a143c91522687f546ae0029"
}