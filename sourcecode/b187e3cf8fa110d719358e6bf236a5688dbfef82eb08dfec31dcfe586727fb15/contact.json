{
  "address": "0x93c9291523cb95c0eb0bc379b0483f4d7fc05072",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LedToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-26\n*/\n\npragma solidity ^0.4.24;\n\ncontract TokenInfo {\n    // Base prices in wei, going off from an Ether value of $500\n    uint256 public constant PRIVATESALE_BASE_PRICE_IN_WEI = 200000000000000;\n    uint256 public constant PRESALE_BASE_PRICE_IN_WEI = 600000000000000;\n    uint256 public constant ICO_BASE_PRICE_IN_WEI = 800000000000000;\n    uint256 public constant FIRSTSALE_BASE_PRICE_IN_WEI = 200000000000000;\n\n    // First sale minimum and maximum contribution, going off from an Ether value of $500\n    uint256 public constant MIN_PURCHASE_OTHERSALES = 80000000000000000;\n    uint256 public constant MIN_PURCHASE = 1000000000000000000;\n    uint256 public constant MAX_PURCHASE = 1000000000000000000000;\n\n    // Bonus percentages for each respective sale level\n\n    uint256 public constant PRESALE_PERCENTAGE_1 = 10;\n    uint256 public constant PRESALE_PERCENTAGE_2 = 15;\n    uint256 public constant PRESALE_PERCENTAGE_3 = 20;\n    uint256 public constant PRESALE_PERCENTAGE_4 = 25;\n    uint256 public constant PRESALE_PERCENTAGE_5 = 35;\n\n    uint256 public constant ICO_PERCENTAGE_1 = 5;\n    uint256 public constant ICO_PERCENTAGE_2 = 10;\n    uint256 public constant ICO_PERCENTAGE_3 = 15;\n    uint256 public constant ICO_PERCENTAGE_4 = 20;\n    uint256 public constant ICO_PERCENTAGE_5 = 25;\n\n    // Bonus levels in wei for each respective level\n\n    uint256 public constant PRESALE_LEVEL_1 = 5000000000000000000;\n    uint256 public constant PRESALE_LEVEL_2 = 10000000000000000000;\n    uint256 public constant PRESALE_LEVEL_3 = 15000000000000000000;\n    uint256 public constant PRESALE_LEVEL_4 = 20000000000000000000;\n    uint256 public constant PRESALE_LEVEL_5 = 25000000000000000000;\n\n    uint256 public constant ICO_LEVEL_1 = 6666666666666666666;\n    uint256 public constant ICO_LEVEL_2 = 13333333333333333333;\n    uint256 public constant ICO_LEVEL_3 = 20000000000000000000;\n    uint256 public constant ICO_LEVEL_4 = 26666666666666666666;\n    uint256 public constant ICO_LEVEL_5 = 33333333333333333333;\n\n    // Caps for the respective sales, the amount of tokens allocated to the team and the total cap\n    uint256 public constant PRIVATESALE_TOKENCAP = 18750000;\n    uint256 public constant PRESALE_TOKENCAP = 18750000;\n    uint256 public constant ICO_TOKENCAP = 22500000;\n    uint256 public constant FIRSTSALE_TOKENCAP = 5000000;\n    uint256 public constant LEDTEAM_TOKENS = 35000000;\n    uint256 public constant TOTAL_TOKENCAP = 100000000;\n\n    uint256 public constant DECIMALS_MULTIPLIER = 1 ether;\n\n    address public constant LED_MULTISIG = 0x865e785f98b621c5fdde70821ca7cea9eeb77ef4;\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n  constructor() public {}\n\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    emit Pause();\n    return true;\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused returns (bool) {\n    paused = false;\n    emit Unpause();\n    return true;\n  }\n}\n\ncontract ApproveAndCallReceiver {\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n}\n\n/**\n * @title Controllable\n * @dev The Controllable contract has an controller address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Controllable {\n  address public controller;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n   */\n  constructor() public {\n    controller = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyController() {\n    require(msg.sender == controller);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newController The address to transfer ownership to.\n   */\n  function transferControl(address newController) public onlyController {\n    if (newController != address(0)) {\n      controller = newController;\n    }\n  }\n\n}\n\n/// @dev The token controller contract must implement these functions\ncontract ControllerInterface {\n\n    function proxyPayment(address _owner) public payable returns(bool);\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n    function onApprove(address _owner, address _spender, uint _amount) public returns(bool);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n\n  uint256 public totalSupply;\n\n  function balanceOf(address _owner) public constant returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool);\n  function approve(address _spender, uint256 _amount) public returns (bool);\n  function allowance(address _owner, address _spender) public constant returns (uint256);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\ncontract Crowdsale is Pausable, TokenInfo {\n\n  using SafeMath for uint256;\n\n  LedTokenInterface public ledToken;\n  uint256 public startTime;\n  uint256 public endTime;\n\n  uint256 public totalWeiRaised;\n  uint256 public tokensMinted;\n  uint256 public totalSupply;\n  uint256 public contributors;\n  uint256 public surplusTokens;\n\n  bool public finalized;\n\n  bool public ledTokensAllocated;\n  address public ledMultiSig = LED_MULTISIG;\n\n  //uint256 public tokenCap = FIRSTSALE_TOKENCAP;\n  //uint256 public cap = tokenCap * DECIMALS_MULTIPLIER;\n  //uint256 public weiCap = tokenCap * FIRSTSALE_BASE_PRICE_IN_WEI;\n\n  bool public started = false;\n\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n  event NewClonedToken(address indexed _cloneToken);\n  event OnTransfer(address _from, address _to, uint _amount);\n  event OnApprove(address _owner, address _spender, uint _amount);\n  event LogInt(string _name, uint256 _value);\n  event Finalized();\n\n  // constructor(address _tokenAddress, uint256 _startTime, uint256 _endTime) public {\n    \n\n  //   startTime = _startTime;\n  //   endTime = _endTime;\n  //   ledToken = LedTokenInterface(_tokenAddress);\n\n  //   assert(_tokenAddress != 0x0);\n  //   assert(_startTime > 0);\n  //   assert(_endTime > _startTime);\n  // }\n\n  /**\n   * Low level token purchase function\n   * @param _beneficiary will receive the tokens.\n   */\n  /*function buyTokens(address _beneficiary) public payable whenNotPaused whenNotFinalized {\n    require(_beneficiary != 0x0);\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n    require(weiAmount >= MIN_PURCHASE && weiAmount <= MAX_PURCHASE);\n    uint256 priceInWei = FIRSTSALE_BASE_PRICE_IN_WEI;\n    totalWeiRaised = totalWeiRaised.add(weiAmount);\n\n    uint256 tokens = weiAmount.mul(DECIMALS_MULTIPLIER).div(priceInWei);\n    tokensMinted = tokensMinted.add(tokens);\n    require(tokensMinted < cap);\n\n    contributors = contributors.add(1);\n\n    ledToken.mint(_beneficiary, tokens);\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n    forwardFunds();\n  }*/\n\n\n  /**\n  * Forwards funds to the tokensale wallet\n  */\n  function forwardFunds() internal {\n    ledMultiSig.transfer(msg.value);\n  }\n\n\n  /**\n  * Validates the purchase (period, minimum amount, within cap)\n  * @return {bool} valid\n  */\n  function validPurchase() internal constant returns (bool) {\n    uint256 current = now;\n    bool presaleStarted = (current >= startTime || started);\n    bool presaleNotEnded = current <= endTime;\n    bool nonZeroPurchase = msg.value != 0;\n    return nonZeroPurchase && presaleStarted && presaleNotEnded;\n  }\n\n  /**\n  * Returns the total Led token supply\n  * @return totalSupply {uint256} Led Token Total Supply\n  */\n  function totalSupply() public constant returns (uint256) {\n    return ledToken.totalSupply();\n  }\n\n  /**\n  * Returns token holder Led Token balance\n  * @param _owner {address} Token holder address\n  * @return balance {uint256} Corresponding token holder balance\n  */\n  function balanceOf(address _owner) public constant returns (uint256) {\n    return ledToken.balanceOf(_owner);\n  }\n\n  /**\n  * Change the Led Token controller\n  * @param _newController {address} New Led Token controller\n  */\n  function changeController(address _newController) public onlyOwner {\n    require(isContract(_newController));\n    ledToken.transferControl(_newController);\n  }\n\n  function enableMasterTransfers() public onlyOwner {\n    ledToken.enableMasterTransfers(true);\n  }\n\n  function lockMasterTransfers() public onlyOwner {\n    ledToken.enableMasterTransfers(false);\n  }\n\n  function forceStart() public onlyOwner {\n    started = true;\n  }\n\n  /*function finalize() public onlyOwner {\n    require(paused);\n    require(!finalized);\n    surplusTokens = cap - tokensMinted;\n    ledToken.mint(ledMultiSig, surplusTokens);\n    ledToken.transferControl(owner);\n\n    emit Finalized();\n\n    finalized = true;\n  }*/\n\n  function isContract(address _addr) constant internal returns(bool) {\n    uint size;\n    if (_addr == 0)\n      return false;\n    assembly {\n        size := extcodesize(_addr)\n    }\n    return size>0;\n  }\n\n  modifier whenNotFinalized() {\n    require(!finalized);\n    _;\n  }\n\n}\n/**\n * @title FirstSale\n * FirstSale allows investors to make token purchases and assigns them tokens based\n\n * on a token per ETH rate. Funds collected are forwarded to a wallet as they arrive.\n */\ncontract FirstSale is Crowdsale {\n\n  uint256 public tokenCap = FIRSTSALE_TOKENCAP;\n  uint256 public cap = tokenCap * DECIMALS_MULTIPLIER;\n  uint256 public weiCap = tokenCap * FIRSTSALE_BASE_PRICE_IN_WEI;\n\n  constructor(address _tokenAddress, uint256 _startTime, uint256 _endTime) public {\n    \n\n    startTime = _startTime;\n    endTime = _endTime;\n    ledToken = LedTokenInterface(_tokenAddress);\n\n    assert(_tokenAddress != 0x0);\n    assert(_startTime > 0);\n    assert(_endTime > _startTime);\n  }\n\n    /**\n   * High level token purchase function\n   */\n  function() public payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * Low level token purchase function\n   * @param _beneficiary will receive the tokens.\n   */\n  function buyTokens(address _beneficiary) public payable whenNotPaused whenNotFinalized {\n    require(_beneficiary != 0x0);\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n    require(weiAmount >= MIN_PURCHASE && weiAmount <= MAX_PURCHASE);\n    uint256 priceInWei = FIRSTSALE_BASE_PRICE_IN_WEI;\n    totalWeiRaised = totalWeiRaised.add(weiAmount);\n\n    uint256 tokens = weiAmount.mul(DECIMALS_MULTIPLIER).div(priceInWei);\n    tokensMinted = tokensMinted.add(tokens);\n    require(tokensMinted < cap);\n\n    contributors = contributors.add(1);\n\n    ledToken.mint(_beneficiary, tokens);\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n    forwardFunds();\n  }\n\n  function getInfo() public view returns(uint256, uint256, string, bool,  uint256, uint256, uint256, \n  bool, uint256, uint256){\n    uint256 decimals = 18;\n    string memory symbol = \"LED\";\n    bool transfersEnabled = ledToken.transfersEnabled();\n    return (\n      TOTAL_TOKENCAP, // Tokencap with the decimal point in place. should be 100.000.000\n      decimals, // Decimals\n      symbol,\n      transfersEnabled,\n      contributors,\n      totalWeiRaised,\n      tokenCap, // Tokencap for the first sale with the decimal point in place.\n      started,\n      startTime, // Start time and end time in Unix timestamp format with a length of 10 numbers.\n      endTime\n    );\n  }\n\n  function finalize() public onlyOwner {\n    require(paused);\n    require(!finalized);\n    surplusTokens = cap - tokensMinted;\n    ledToken.mint(ledMultiSig, surplusTokens);\n    ledToken.transferControl(owner);\n\n    emit Finalized();\n\n    finalized = true;\n  }\n\n}\n\ncontract LedToken is Controllable {\n\n  using SafeMath for uint256;\n  LedTokenInterface public parentToken;\n  TokenFactoryInterface public tokenFactory;\n\n  string public name;\n  string public symbol;\n  string public version;\n  uint8 public decimals;\n\n  uint256 public parentSnapShotBlock;\n  uint256 public creationBlock;\n  bool public transfersEnabled;\n\n  bool public masterTransfersEnabled;\n  address public masterWallet = 0x865e785f98b621c5fdde70821ca7cea9eeb77ef4;\n\n\n  struct Checkpoint {\n    uint128 fromBlock;\n    uint128 value;\n  }\n\n  Checkpoint[] totalSupplyHistory;\n  mapping(address => Checkpoint[]) balances;\n  mapping (address => mapping (address => uint)) allowed;\n\n  bool public mintingFinished = false;\n  bool public presaleBalancesLocked = false;\n\n  uint256 public totalSupplyAtCheckpoint;\n\n  event MintFinished();\n  event NewCloneToken(address indexed cloneToken);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n\n\n  constructor(\n    address _tokenFactory,\n    address _parentToken,\n    uint256 _parentSnapShotBlock,\n    string _tokenName,\n    string _tokenSymbol\n    ) public {\n      tokenFactory = TokenFactoryInterface(_tokenFactory);\n      parentToken = LedTokenInterface(_parentToken);\n      parentSnapShotBlock = _parentSnapShotBlock;\n      name = _tokenName;\n      symbol = _tokenSymbol;\n      decimals = 18;\n      transfersEnabled = false;\n      masterTransfersEnabled = false;\n      creationBlock = block.number;\n      version = '0.1';\n  }\n\n\n  /**\n  * Returns the total Led token supply at the current block\n  * @return total supply {uint256}\n  */\n  function totalSupply() public constant returns (uint256) {\n    return totalSupplyAt(block.number);\n  }\n\n  /**\n  * Returns the total Led token supply at the given block number\n  * @param _blockNumber {uint256}\n  * @return total supply {uint256}\n  */\n  function totalSupplyAt(uint256 _blockNumber) public constant returns(uint256) {\n    // These next few lines are used when the totalSupply of the token is\n    //  requested before a check point was ever created for this token, it\n    //  requires that the `parentToken.totalSupplyAt` be queried at the\n    //  genesis block for this token as that contains totalSupply of this\n    //  token at this block number.\n    if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n        if (address(parentToken) != 0x0) {\n            return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n        } else {\n            return 0;\n        }\n\n    // This will return the expected totalSupply during normal situations\n    } else {\n        return getValueAt(totalSupplyHistory, _blockNumber);\n    }\n  }\n\n  /**\n  * Returns the token holder balance at the current block\n  * @param _owner {address}\n  * @return balance {uint256}\n   */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balanceOfAt(_owner, block.number);\n  }\n\n  /**\n  * Returns the token holder balance the the given block number\n  * @param _owner {address}\n  * @param _blockNumber {uint256}\n  * @return balance {uint256}\n  */\n  function balanceOfAt(address _owner, uint256 _blockNumber) public constant returns (uint256) {\n    // These next few lines are used when the balance of the token is\n    //  requested before a check point was ever created for this token, it\n    //  requires that the `parentToken.balanceOfAt` be queried at the\n    //  genesis block for that token as this contains initial balance of\n    //  this token\n    if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n        if (address(parentToken) != 0x0) {\n            return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n        } else {\n            // Has no parent\n            return 0;\n        }\n\n    // This will return the expected balance during normal situations\n    } else {\n        return getValueAt(balances[_owner], _blockNumber);\n    }\n  }\n\n  /**\n  * Standard ERC20 transfer tokens function\n  * @param _to {address}\n  * @param _amount {uint}\n  * @return success {bool}\n  */\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\n    return doTransfer(msg.sender, _to, _amount);\n  }\n\n  /**\n  * Standard ERC20 transferFrom function\n  * @param _from {address}\n  * @param _to {address}\n  * @param _amount {uint256}\n  * @return success {bool}\n  */\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n    require(allowed[_from][msg.sender] >= _amount);\n    allowed[_from][msg.sender] -= _amount;\n    return doTransfer(_from, _to, _amount);\n  }\n\n  /**\n  * Standard ERC20 approve function\n  * @param _spender {address}\n  * @param _amount {uint256}\n  * @return success {bool}\n  */\n  function approve(address _spender, uint256 _amount) public returns (bool success) {\n    require(transfersEnabled);\n\n    //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _amount;\n    emit Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  /**\n  * Standard ERC20 approve function\n  * @param _spender {address}\n  * @param _amount {uint256}\n  * @return success {bool}\n  */\n  function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\n    approve(_spender, _amount);\n\n    ApproveAndCallReceiver(_spender).receiveApproval(\n        msg.sender,\n        _amount,\n        this,\n        _extraData\n    );\n\n    return true;\n  }\n\n  /**\n  * Standard ERC20 allowance function\n  * @param _owner {address}\n  * @param _spender {address}\n  * @return remaining {uint256}\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n  * Internal Transfer function - Updates the checkpoint ledger\n  * @param _from {address}\n  * @param _to {address}\n  * @param _amount {uint256}\n  * @return success {bool}\n  */\n  function doTransfer(address _from, address _to, uint256 _amount) internal returns(bool) {\n\n    if (msg.sender != masterWallet) {\n      require(transfersEnabled);\n    } else {\n      require(masterTransfersEnabled);\n    }\n\n    require(_amount > 0);\n    require(parentSnapShotBlock < block.number);\n    require((_to != address(0)) && (_to != address(this)));\n\n    // If the amount being transfered is more than the balance of the\n    // account the transfer returns false\n    uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n    require(previousBalanceFrom >= _amount);\n\n    // First update the balance array with the new value for the address\n    //  sending the tokens\n    updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n    // Then update the balance array with the new value for the address\n    //  receiving the tokens\n    uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n    updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n    // An event to make the transfer easy to find on the blockchain\n    emit Transfer(_from, _to, _amount);\n    return true;\n  }\n\n\n  /**\n  * Token creation functions - can only be called by the tokensale controller during the tokensale period\n  * @param _owner {address}\n  * @param _amount {uint256}\n  * @return success {bool}\n  */\n  function mint(address _owner, uint256 _amount) public onlyController canMint returns (bool) {\n    uint256 curTotalSupply = totalSupply();\n    uint256 previousBalanceTo = balanceOf(_owner);\n\n    require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n    updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n    updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n    emit Transfer(0, _owner, _amount);\n    return true;\n  }\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n\n  /**\n   * Import presale balances before the start of the token sale. After importing\n   * balances, lockPresaleBalances() has to be called to prevent further modification\n   * of presale balances.\n   * @param _addresses {address[]} Array of presale addresses\n   * @param _balances {uint256[]} Array of balances corresponding to presale addresses.\n   * @return success {bool}\n   */\n  function importPresaleBalances(address[] _addresses, uint256[] _balances) public onlyController returns (bool) {\n    require(presaleBalancesLocked == false);\n\n    for (uint256 i = 0; i < _addresses.length; i++) {\n      totalSupplyAtCheckpoint += _balances[i];\n      updateValueAtNow(balances[_addresses[i]], _balances[i]);\n      updateValueAtNow(totalSupplyHistory, totalSupplyAtCheckpoint);\n      emit Transfer(0, _addresses[i], _balances[i]);\n    }\n    return true;\n  }\n\n  /**\n   * Lock presale balances after successful presale balance import\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function lockPresaleBalances() public onlyController returns (bool) {\n    presaleBalancesLocked = true;\n    return true;\n  }\n\n  /**\n   * Lock the minting of Led Tokens - to be called after the presale\n   * @return {bool} success\n  */\n  function finishMinting() public onlyController returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n\n  /**\n   * Enable or block transfers - to be called in case of emergency\n   * @param _value {bool}\n  */\n  function enableTransfers(bool _value) public onlyController {\n    transfersEnabled = _value;\n  }\n\n  /**\n   * Enable or block transfers - to be called in case of emergency\n   * @param _value {bool}\n  */\n  function enableMasterTransfers(bool _value) public onlyController {\n    masterTransfersEnabled = _value;\n  }\n\n  /**\n   * Internal balance method - gets a certain checkpoint value a a certain _block\n   * @param _checkpoints {Checkpoint[]} List of checkpoints - supply history or balance history\n   * @return value {uint256} Value of _checkpoints at _block\n  */\n  function getValueAt(Checkpoint[] storage _checkpoints, uint256 _block) constant internal returns (uint256) {\n\n      if (_checkpoints.length == 0)\n        return 0;\n      // Shortcut for the actual value\n      if (_block >= _checkpoints[_checkpoints.length-1].fromBlock)\n        return _checkpoints[_checkpoints.length-1].value;\n      if (_block < _checkpoints[0].fromBlock)\n        return 0;\n\n      // Binary search of the value in the array\n      uint256 min = 0;\n      uint256 max = _checkpoints.length-1;\n      while (max > min) {\n          uint256 mid = (max + min + 1) / 2;\n          if (_checkpoints[mid].fromBlock<=_block) {\n              min = mid;\n          } else {\n              max = mid-1;\n          }\n      }\n      return _checkpoints[min].value;\n  }\n\n\n  /**\n  * Internal update method - updates the checkpoint ledger at the current block\n  * @param _checkpoints {Checkpoint[]}  List of checkpoints - supply history or balance history\n  * @return value {uint256} Value to add to the checkpoints ledger\n   */\n  function updateValueAtNow(Checkpoint[] storage _checkpoints, uint256 _value) internal {\n      if ((_checkpoints.length == 0) || (_checkpoints[_checkpoints.length-1].fromBlock < block.number)) {\n              Checkpoint storage newCheckPoint = _checkpoints[_checkpoints.length++];\n              newCheckPoint.fromBlock = uint128(block.number);\n              newCheckPoint.value = uint128(_value);\n          } else {\n              Checkpoint storage oldCheckPoint = _checkpoints[_checkpoints.length-1];\n              oldCheckPoint.value = uint128(_value);\n          }\n  }\n\n\n  function min(uint256 a, uint256 b) internal pure returns (uint) {\n      return a < b ? a : b;\n  }\n\n  /**\n  * Clones Led Token at the given snapshot block\n  * @param _snapshotBlock {uint256}\n  * @param _name {string} - The cloned token name\n  * @param _symbol {string} - The cloned token symbol\n  * @return clonedTokenAddress {address}\n   */\n  function createCloneToken(uint256 _snapshotBlock, string _name, string _symbol) public returns(address) {\n\n      if (_snapshotBlock == 0) {\n        _snapshotBlock = block.number;\n      }\n\n      if (_snapshotBlock > block.number) {\n        _snapshotBlock = block.number;\n      }\n\n      LedToken cloneToken = tokenFactory.createCloneToken(\n          this,\n          _snapshotBlock,\n          _name,\n          _symbol\n        );\n\n\n      cloneToken.transferControl(msg.sender);\n\n      // An event to make the token easy to find on the blockchain\n      emit NewCloneToken(address(cloneToken));\n      return address(cloneToken);\n    }\n\n}\n\n/**\n * @title LedToken (LED)\n * Standard Mintable ERC20 Token\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract LedTokenInterface is Controllable {\n\n  bool public transfersEnabled;\n\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n  event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\n  event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  function totalSupply() public constant returns (uint);\n  function totalSupplyAt(uint _blockNumber) public constant returns(uint);\n  function balanceOf(address _owner) public constant returns (uint256 balance);\n  function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint);\n  function transfer(address _to, uint256 _amount) public returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\n  function approve(address _spender, uint256 _amount) public returns (bool success);\n  function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success);\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n  function mint(address _owner, uint _amount) public returns (bool);\n  function importPresaleBalances(address[] _addresses, uint256[] _balances, address _presaleAddress) public returns (bool);\n  function lockPresaleBalances() public returns (bool);\n  function finishMinting() public returns (bool);\n  function enableTransfers(bool _value) public;\n  function enableMasterTransfers(bool _value) public;\n  function createCloneToken(uint _snapshotBlock, string _cloneTokenName, string _cloneTokenSymbol) public returns (address);\n\n}\n\n/**\n * @title Presale\n * Presale allows investors to make token purchases and assigns them tokens based\n\n * on a token per ETH rate. Funds collected are forwarded to a wallet as they arrive.\n */\ncontract Presale is Crowdsale {\n\n  uint256 public tokenCap = PRESALE_TOKENCAP;\n  uint256 public cap = tokenCap * DECIMALS_MULTIPLIER;\n  uint256 public weiCap = tokenCap * PRESALE_BASE_PRICE_IN_WEI;\n\n  constructor(address _tokenAddress, uint256 _startTime, uint256 _endTime) public {\n    \n\n    startTime = _startTime;\n    endTime = _endTime;\n    ledToken = LedTokenInterface(_tokenAddress);\n\n    assert(_tokenAddress != 0x0);\n    assert(_startTime > 0);\n    assert(_endTime > _startTime);\n  }\n\n    /**\n   * High level token purchase function\n   */\n  function() public payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * Low level token purchase function\n   * @param _beneficiary will receive the tokens.\n   */\n  function buyTokens(address _beneficiary) public payable whenNotPaused whenNotFinalized {\n    require(_beneficiary != 0x0);\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n    require(weiAmount >= MIN_PURCHASE_OTHERSALES && weiAmount <= MAX_PURCHASE);\n    uint256 priceInWei = PRESALE_BASE_PRICE_IN_WEI;\n    \n    totalWeiRaised = totalWeiRaised.add(weiAmount);\n\n    uint256 bonusPercentage = determineBonus(weiAmount);\n    uint256 bonusTokens;\n\n    uint256 initialTokens = weiAmount.mul(DECIMALS_MULTIPLIER).div(priceInWei);\n    if(bonusPercentage>0){\n      uint256 initialDivided = initialTokens.div(100);\n      bonusTokens = initialDivided.mul(bonusPercentage);\n    } else {\n      bonusTokens = 0;\n    }\n    uint256 tokens = initialTokens.add(bonusTokens);\n    tokensMinted = tokensMinted.add(tokens);\n    require(tokensMinted < cap);\n\n    contributors = contributors.add(1);\n\n    ledToken.mint(_beneficiary, tokens);\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n    forwardFunds();\n  }\n\n  function determineBonus(uint256 _wei) public view returns (uint256) {\n    if(_wei > PRESALE_LEVEL_1) {\n      if(_wei > PRESALE_LEVEL_2) {\n        if(_wei > PRESALE_LEVEL_3) {\n          if(_wei > PRESALE_LEVEL_4) {\n            if(_wei > PRESALE_LEVEL_5) {\n              return PRESALE_PERCENTAGE_5;\n            } else {\n              return PRESALE_PERCENTAGE_4;\n            }\n          } else {\n            return PRESALE_PERCENTAGE_3;\n          }\n        } else {\n          return PRESALE_PERCENTAGE_2;\n        }\n      } else {\n        return PRESALE_PERCENTAGE_1;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  function finalize() public onlyOwner {\n    require(paused);\n    require(!finalized);\n    surplusTokens = cap - tokensMinted;\n    ledToken.mint(ledMultiSig, surplusTokens);\n    ledToken.transferControl(owner);\n\n    emit Finalized();\n\n    finalized = true;\n  }\n\n  function getInfo() public view returns(uint256, uint256, string, bool,  uint256, uint256, uint256, \n  bool, uint256, uint256){\n    uint256 decimals = 18;\n    string memory symbol = \"LED\";\n    bool transfersEnabled = ledToken.transfersEnabled();\n    return (\n      TOTAL_TOKENCAP, // Tokencap with the decimal point in place. should be 100.000.000\n      decimals, // Decimals\n      symbol,\n      transfersEnabled,\n      contributors,\n      totalWeiRaised,\n      tokenCap, // Tokencap for the first sale with the decimal point in place.\n      started,\n      startTime, // Start time and end time in Unix timestamp format with a length of 10 numbers.\n      endTime\n    );\n  }\n  \n  function getInfoLevels() public view returns(uint256, uint256, uint256, uint256, uint256, uint256, \n  uint256, uint256, uint256, uint256){\n    return (\n      PRESALE_LEVEL_1, // Amount of ether needed per bonus level\n      PRESALE_LEVEL_2,\n      PRESALE_LEVEL_3,\n      PRESALE_LEVEL_4,\n      PRESALE_LEVEL_5,\n      PRESALE_PERCENTAGE_1, // Bonus percentage per bonus level\n      PRESALE_PERCENTAGE_2,\n      PRESALE_PERCENTAGE_3,\n      PRESALE_PERCENTAGE_4,\n      PRESALE_PERCENTAGE_5\n    );\n  }\n\n}\n\n/**\n * @title PrivateSale\n * PrivateSale allows investors to make token purchases and assigns them tokens based\n\n * on a token per ETH rate. Funds collected are forwarded to a wallet as they arrive.\n */\ncontract PrivateSale is Crowdsale {\n\n  uint256 public tokenCap = PRIVATESALE_TOKENCAP;\n  uint256 public cap = tokenCap * DECIMALS_MULTIPLIER;\n  uint256 public weiCap = tokenCap * PRIVATESALE_BASE_PRICE_IN_WEI;\n\n  constructor(address _tokenAddress, uint256 _startTime, uint256 _endTime) public {\n    \n\n    startTime = _startTime;\n    endTime = _endTime;\n    ledToken = LedTokenInterface(_tokenAddress);\n\n    assert(_tokenAddress != 0x0);\n    assert(_startTime > 0);\n    assert(_endTime > _startTime);\n  }\n\n    /**\n   * High level token purchase function\n   */\n  function() public payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * Low level token purchase function\n   * @param _beneficiary will receive the tokens.\n   */\n  function buyTokens(address _beneficiary) public payable whenNotPaused whenNotFinalized {\n    require(_beneficiary != 0x0);\n    require(validPurchase());\n\n\n    uint256 weiAmount = msg.value;\n    require(weiAmount >= MIN_PURCHASE_OTHERSALES && weiAmount <= MAX_PURCHASE);\n    uint256 priceInWei = PRIVATESALE_BASE_PRICE_IN_WEI;\n    totalWeiRaised = totalWeiRaised.add(weiAmount);\n\n    uint256 tokens = weiAmount.mul(DECIMALS_MULTIPLIER).div(priceInWei);\n    tokensMinted = tokensMinted.add(tokens);\n    require(tokensMinted < cap);\n\n    contributors = contributors.add(1);\n\n    ledToken.mint(_beneficiary, tokens);\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n    forwardFunds();\n  }\n\n  function finalize() public onlyOwner {\n    require(paused);\n    require(!finalized);\n    surplusTokens = cap - tokensMinted;\n    ledToken.mint(ledMultiSig, surplusTokens);\n    ledToken.transferControl(owner);\n\n    emit Finalized();\n\n    finalized = true;\n  }\n\n  function getInfo() public view returns(uint256, uint256, string, bool,  uint256, uint256, uint256, \n  bool, uint256, uint256){\n    uint256 decimals = 18;\n    string memory symbol = \"LED\";\n    bool transfersEnabled = ledToken.transfersEnabled();\n    return (\n      TOTAL_TOKENCAP, // Tokencap with the decimal point in place. should be 100.000.000\n      decimals, // Decimals\n      symbol,\n      transfersEnabled,\n      contributors,\n      totalWeiRaised,\n      tokenCap, // Tokencap for the first sale with the decimal point in place.\n      started,\n      startTime, // Start time and end time in Unix timestamp format with a length of 10 numbers.\n      endTime\n    );\n  }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract TokenFactory {\n\n    function createCloneToken(\n        address _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        string _tokenSymbol\n        ) public returns (LedToken) {\n\n        LedToken newToken = new LedToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _tokenSymbol\n        );\n\n        newToken.transferControl(msg.sender);\n        return newToken;\n    }\n}\n\ncontract TokenFactoryInterface {\n\n    function createCloneToken(\n        address _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        string _tokenSymbol\n      ) public returns (LedToken newToken);\n}\n\n/**\n * @title Tokensale\n * Tokensale allows investors to make token purchases and assigns them tokens based\n\n * on a token per ETH rate. Funds collected are forwarded to a wallet as they arrive.\n */\ncontract TokenSale is Crowdsale {\n\n  uint256 public tokenCap = ICO_TOKENCAP;\n  uint256 public cap = tokenCap * DECIMALS_MULTIPLIER;\n  uint256 public weiCap = tokenCap * ICO_BASE_PRICE_IN_WEI;\n\n  uint256 public allocatedTokens;\n\n  constructor(address _tokenAddress, uint256 _startTime, uint256 _endTime) public {\n    \n\n    startTime = _startTime;\n    endTime = _endTime;\n    ledToken = LedTokenInterface(_tokenAddress);\n\n    assert(_tokenAddress != 0x0);\n    assert(_startTime > 0);\n    assert(_endTime > _startTime);\n  }\n\n    /**\n   * High level token purchase function\n   */\n  function() public payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * Low level token purchase function\n   * @param _beneficiary will receive the tokens.\n   */\n  function buyTokens(address _beneficiary) public payable whenNotPaused whenNotFinalized {\n    require(_beneficiary != 0x0);\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n    require(weiAmount >= MIN_PURCHASE_OTHERSALES && weiAmount <= MAX_PURCHASE);\n    uint256 priceInWei = ICO_BASE_PRICE_IN_WEI;\n    totalWeiRaised = totalWeiRaised.add(weiAmount);\n\n    uint256 bonusPercentage = determineBonus(weiAmount);\n    uint256 bonusTokens;\n\n    uint256 initialTokens = weiAmount.mul(DECIMALS_MULTIPLIER).div(priceInWei);\n    if(bonusPercentage>0){\n      uint256 initialDivided = initialTokens.div(100);\n      bonusTokens = initialDivided.mul(bonusPercentage);\n    } else {\n      bonusTokens = 0;\n    }\n    uint256 tokens = initialTokens.add(bonusTokens);\n    tokensMinted = tokensMinted.add(tokens);\n    require(tokensMinted < cap);\n\n    contributors = contributors.add(1);\n\n    ledToken.mint(_beneficiary, tokens);\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n    forwardFunds();\n  }\n\n  function determineBonus(uint256 _wei) public view returns (uint256) {\n    if(_wei > ICO_LEVEL_1) {\n      if(_wei > ICO_LEVEL_2) {\n        if(_wei > ICO_LEVEL_3) {\n          if(_wei > ICO_LEVEL_4) {\n            if(_wei > ICO_LEVEL_5) {\n              return ICO_PERCENTAGE_5;\n            } else {\n              return ICO_PERCENTAGE_4;\n            }\n          } else {\n            return ICO_PERCENTAGE_3;\n          }\n        } else {\n          return ICO_PERCENTAGE_2;\n        }\n      } else {\n        return ICO_PERCENTAGE_1;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  function allocateLedTokens() public onlyOwner whenNotFinalized {\n    require(!ledTokensAllocated);\n    allocatedTokens = LEDTEAM_TOKENS.mul(DECIMALS_MULTIPLIER);\n    ledToken.mint(ledMultiSig, allocatedTokens);\n    ledTokensAllocated = true;\n  }\n\n  function finalize() public onlyOwner {\n    require(paused);\n    require(ledTokensAllocated);\n\n    surplusTokens = cap - tokensMinted;\n    ledToken.mint(ledMultiSig, surplusTokens);\n\n    ledToken.finishMinting();\n    ledToken.enableTransfers(true);\n    emit Finalized();\n\n    finalized = true;\n  }\n\n  function getInfo() public view returns(uint256, uint256, string, bool,  uint256, uint256, uint256, \n  bool, uint256, uint256){\n    uint256 decimals = 18;\n    string memory symbol = \"LED\";\n    bool transfersEnabled = ledToken.transfersEnabled();\n    return (\n      TOTAL_TOKENCAP, // Tokencap with the decimal point in place. should be 100.000.000\n      decimals, // Decimals\n      symbol,\n      transfersEnabled,\n      contributors,\n      totalWeiRaised,\n      tokenCap, // Tokencap for the first sale with the decimal point in place.\n      started,\n      startTime, // Start time and end time in Unix timestamp format with a length of 10 numbers.\n      endTime\n    );\n  }\n  \n  function getInfoLevels() public view returns(uint256, uint256, uint256, uint256, uint256, uint256, \n  uint256, uint256, uint256, uint256){\n    return (\n      ICO_LEVEL_1, // Amount of ether needed per bonus level\n      ICO_LEVEL_2,\n      ICO_LEVEL_3,\n      ICO_LEVEL_4,\n      ICO_LEVEL_5,\n      ICO_PERCENTAGE_1, // Bonus percentage per bonus level\n      ICO_PERCENTAGE_2,\n      ICO_PERCENTAGE_3,\n      ICO_PERCENTAGE_4,\n      ICO_PERCENTAGE_5\n    );\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"importPresaleBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleBalancesLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockPresaleBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"transferControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyAtCheckpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"enableMasterTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterTransfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"name\":\"_parentToken\",\"type\":\"address\"},{\"name\":\"_parentSnapShotBlock\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cloneToken\",\"type\":\"address\"}],\"name\":\"NewCloneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "608060405273865e785f98b621c5fdde70821ca7cea9eeb77ef4600960026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600d60006101000a81548160ff0219169083151502179055506000600d60016101000a81548160ff0219169083151502179055503480156200009c57600080fd5b5060405162002c0a38038062002c0a8339810180604052810190808051906020019092919080519060200190929190805190602001909291908051820192919060200180518201929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826007819055508160039080519060200190620001ca92919062000296565b508060049080519060200190620001e392919062000296565b506012600660006101000a81548160ff021916908360ff1602179055506000600960006101000a81548160ff0219169083151502179055506000600960016101000a81548160ff021916908315150217905550436008819055506040805190810160405280600381526020017f302e310000000000000000000000000000000000000000000000000000000000815250600590805190602001906200028a92919062000296565b50505050505062000345565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002d957805160ff19168380011785556200030a565b828001600101855582156200030a579182015b8281111562000309578251825591602001919060010190620002ec565b5b5090506200031991906200031d565b5090565b6200034291905b808211156200033e57600081600090555060010162000324565b5090565b90565b6128b580620003556000396000f300608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461019b57806306fdde03146101ca578063095ea7b31461025a578063128f04e7146102bf578063176345141461038057806318160ddd146103ab5780631a53cd90146103d657806323b872dd14610405578063313ce5671461048a57806340c10f19146104bb5780634ee2cd7e1461052057806354fd4d50146105815780635d0a7628146106115780636d16fa411461064057806370a08231146106835780637d64bcb4146106da57806380a540011461070957806387a9a8ef1461076057806395d89b411461078b578063981b24d01461081b5780639ed74a231461085c578063a9059cbb14610955578063aec318f1146109ba578063b127326e146109e9578063bef97c8714610a18578063c5bcc4f114610a47578063cae9ca5114610a72578063dd62ed3e14610b1d578063e77772fe14610b94578063f41e60c514610beb578063f77c479114610c1a578063fc0d011714610c71575b600080fd5b3480156101a757600080fd5b506101b0610cc8565b604051808215151515815260200191505060405180910390f35b3480156101d657600080fd5b506101df610cdb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561021f578082015181840152602081019050610204565b50505050905090810190601f16801561024c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026657600080fd5b506102a5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d79565b604051808215151515815260200191505060405180910390f35b3480156102cb57600080fd5b506103666004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610f1c565b604051808215151515815260200191505060405180910390f35b34801561038c57600080fd5b506103956110ea565b6040518082815260200191505060405180910390f35b3480156103b757600080fd5b506103c06110f0565b6040518082815260200191505060405180910390f35b3480156103e257600080fd5b506103eb611100565b604051808215151515815260200191505060405180910390f35b34801561041157600080fd5b50610470600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611113565b604051808215151515815260200191505060405180910390f35b34801561049657600080fd5b5061049f61123e565b604051808260ff1660ff16815260200191505060405180910390f35b3480156104c757600080fd5b50610506600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611251565b604051808215151515815260200191505060405180910390f35b34801561052c57600080fd5b5061056b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113b7565b6040518082815260200191505060405180910390f35b34801561058d57600080fd5b50610596611643565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d65780820151818401526020810190506105bb565b50505050905090810190601f1680156106035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061d57600080fd5b506106266116e1565b604051808215151515815260200191505060405180910390f35b34801561064c57600080fd5b50610681600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611760565b005b34801561068f57600080fd5b506106c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611835565b6040518082815260200191505060405180910390f35b3480156106e657600080fd5b506106ef611848565b604051808215151515815260200191505060405180910390f35b34801561071557600080fd5b5061071e6118f3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076c57600080fd5b50610775611919565b6040518082815260200191505060405180910390f35b34801561079757600080fd5b506107a061191f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107e05780820151818401526020810190506107c5565b50505050905090810190601f16801561080d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561082757600080fd5b50610846600480360381019080803590602001909291905050506119bd565b6040518082815260200191505060405180910390f35b34801561086857600080fd5b5061091360048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611b5d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561096157600080fd5b506109a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e56565b604051808215151515815260200191505060405180910390f35b3480156109c657600080fd5b506109e7600480360381019080803515159060200190929190505050611e6b565b005b3480156109f557600080fd5b506109fe611ee3565b604051808215151515815260200191505060405180910390f35b348015610a2457600080fd5b50610a2d611ef6565b604051808215151515815260200191505060405180910390f35b348015610a5357600080fd5b50610a5c611f09565b6040518082815260200191505060405180910390f35b348015610a7e57600080fd5b50610b03600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611f0f565b604051808215151515815260200191505060405180910390f35b348015610b2957600080fd5b50610b7e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612083565b6040518082815260200191505060405180910390f35b348015610ba057600080fd5b50610ba961210a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610bf757600080fd5b50610c18600480360381019080803515159060200190929190505050612130565b005b348015610c2657600080fd5b50610c2f6121a8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c7d57600080fd5b50610c866121cd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600d60009054906101000a900460ff1681565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d715780601f10610d4657610100808354040283529160200191610d71565b820191906000526020600020905b815481529060010190602001808311610d5457829003601f168201915b505050505081565b6000600960009054906101000a900460ff161515610d9657600080fd5b6000821480610e2157506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610e2c57600080fd5b81600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f7a57600080fd5b60001515600d60019054906101000a900460ff161515141515610f9c57600080fd5b600090505b83518110156110df578281815181101515610fb857fe5b90602001906020020151600e60008282540192505081905550611047600b60008684815181101515610fe657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848381518110151561103857fe5b906020019060200201516121f3565b611054600a600e546121f3565b838181518110151561106257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85848151811015156110b357fe5b906020019060200201516040518082815260200191505060405180910390a38080600101915050610fa1565b600191505092915050565b60085481565b60006110fb436119bd565b905090565b600d60019054906101000a900460ff1681565b600081600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156111a057600080fd5b81600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550611235848484612367565b90509392505050565b600660009054906101000a900460ff1681565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112b157600080fd5b600d60009054906101000a900460ff161515156112cd57600080fd5b6112d56110f0565b91506112e085611835565b905081848301101515156112f357600080fd5b808482011015151561130457600080fd5b611311600a8584016121f3565b61135b600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208583016121f3565b8473ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b600080600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490501480611490575081600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548110151561145257fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b156115f2576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156115e957600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e84611522856007546125d0565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156115a757600080fd5b505af11580156115bb573d6000803e3d6000fd5b505050506040513d60208110156115d157600080fd5b8101908080519060200190929190505050905061163d565b6000905061163d565b61163a600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836125e9565b90505b92915050565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116d95780601f106116ae576101008083540402835291602001916116d9565b820191906000526020600020905b8154815290600101906020018083116116bc57829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561173e57600080fd5b6001600d60016101000a81548160ff0219169083151502179055506001905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117bb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561183257806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600061184182436113b7565b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118a557600080fd5b6001600d60006101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e5481565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119b55780601f1061198a576101008083540402835291602001916119b5565b820191906000526020600020905b81548152906001019060200180831161199857829003601f168201915b505050505081565b600080600a805490501480611a1c575081600a60008154811015156119de57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b15611b4a576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611b4157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663981b24d0611aad846007546125d0565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611aff57600080fd5b505af1158015611b13573d6000803e3d6000fd5b505050506040513d6020811015611b2957600080fd5b81019080805190602001909291905050509050611b58565b60009050611b58565b611b55600a836125e9565b90505b919050565b6000806000851415611b6d574394505b43851115611b79574394505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359b58dba308787876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611c62578082015181840152602081019050611c47565b50505050905090810190601f168015611c8f5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611cc8578082015181840152602081019050611cad565b50505050905090810190601f168015611cf55780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b158015611d1857600080fd5b505af1158015611d2c573d6000803e3d6000fd5b505050506040513d6020811015611d4257600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16636d16fa41336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611df057600080fd5b505af1158015611e04573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167ff30000f977bee4f7df8246f69a4ba66f2d5be05d1fdaa0f0044d24fc52748b0060405160405180910390a2809150509392505050565b6000611e63338484612367565b905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ec657600080fd5b80600960016101000a81548160ff02191690831515021790555050565b600960019054906101000a900460ff1681565b600960009054906101000a900460ff1681565b60075481565b6000611f1b8484610d79565b508373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612011578082015181840152602081019050611ff6565b50505050905090810190601f16801561203e5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561206057600080fd5b505af1158015612074573d6000803e3d6000fd5b50505050600190509392505050565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561218b57600080fd5b80600960006101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008480549050148061225857504384600186805490500381548110151561221a57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16105b15612304578384805480919060010161227191906127f8565b81548110151561227d57fe5b906000526020600020019150438260000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550828260000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550612361565b83600185805490500381548110151561231957fe5b906000526020600020019050828160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b50505050565b6000806000600960029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123e357600960009054906101000a900460ff1615156123de57600080fd5b6123ff565b600960019054906101000a900460ff1615156123fe57600080fd5b5b60008411151561240e57600080fd5b4360075410151561241e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415801561248757503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b151561249257600080fd5b61249c86436113b7565b91508382101515156124ad57600080fd5b6124f7600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208584036121f3565b61250185436113b7565b9050808482011015151561251457600080fd5b61255e600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208583016121f3565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001925050509392505050565b60008183106125df57816125e1565b825b905092915050565b60008060008060008680549050141561260557600093506127ef565b85600187805490500381548110151561261a57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16851015156126b65785600187805490500381548110151561267357fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1693506127ef565b8560008154811015156126c557fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1685101561271157600093506127ef565b60009250600186805490500391505b828211156127a257600260018484010181151561273957fe5b04905084868281548110151561274b57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff161115156127965780925061279d565b6001810391505b612720565b85838154811015156127b057fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1693505b50505092915050565b81548183558181111561281f5781836000526020600020918201910161281e9190612824565b5b505050565b61288691905b8082111561288257600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff02191690555060010161282a565b5090565b905600a165627a7a723058202b0bf3ec435cc5002fdc6ecd2d837f02736ea387beb3972f482736651c5a2440002900000000000000000000000043aa88b0ad3cebf56a9b1936490bd72086e70b7b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000094c454420546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c45440000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000043aa88b0ad3cebf56a9b1936490bd72086e70b7b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000094c454420546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c45440000000000000000000000000000000000000000000000000000000000"
}