{
  "address": "0x0dba7ca3d25f8c2f46d9b06ba7b1b3144e206f38",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BFTToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-24\n*/\n\npragma solidity ^0.4.18;\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ForeignToken {\n    function balanceOf(address _0x395d5881be6ca42d96ba01a2de69416f10cebe29) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface Token { \n    function distr(address _to, uint256 _value) public returns (bool);\n    function totalSupply() constant public returns (uint256 supply);\n    function balanceOf(address _owner) constant public returns (uint256 balance);\n}\n\ncontract BFTToken is ERC20 {\n    \n    using SafeMath for uint256;\n    address owner = msg.sender;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public blacklist;\n    string public constant name = \"Burma first token\";\n    string public constant symbol = \"BFT\";\n    uint public constant decimals = 8;\n    \n    uint256 public totalSupply = 1000000000e8;\n    uint256 public totalDistributed = 300000000e8;\n    uint256 public totalRemaining = totalSupply.sub(totalDistributed);\n    uint256 public value;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    event Distr(address indexed to, uint256 amount);\n    event DistrFinished();\n    \n    event Burn(address indexed burner, uint256 value);\n\n    bool public distributionFinished = false;\n    \n    modifier canDistr() {\n        require(!distributionFinished);\n        _;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == 0x395d5881be6ca42d96ba01a2de69416f10cebe29);\n        _;\n    }\n    \n    modifier onlyWhitelist() {\n        require(blacklist[msg.sender] == false);\n        _;\n    }\n    \n    function BFTcoin () public {\n        owner = msg.sender;\n        value = 5000e8;\n        distr(0x395d5881be6ca42d96ba01a2de69416f10cebe29, totalDistributed);\n    }\n    \n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n    \n    function enableWhitelist(address[] addresses) onlyOwner public {\n        for (uint i = 0; i < addresses.length; i++) {\n            blacklist[addresses[i]] = false;\n        }\n    }\n\n    function disableWhitelist(address[] addresses) onlyOwner public {\n        for (uint i = 0; i < addresses.length; i++) {\n            blacklist[addresses[i]] = true;\n        }\n    }\n\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        DistrFinished();\n        return true;\n    }\n    \n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n        totalDistributed = totalDistributed.add(_amount);\n        totalRemaining = totalRemaining.sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Distr(_to, _amount);\n        Transfer(address(0), _to, _amount);\n        return true;\n        \n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n    }\n    \n    function airdrop(address[] addresses) onlyOwner canDistr public {\n        \n        require(addresses.length <= 255);\n        require(value <= totalRemaining);\n        \n        for (uint i = 0; i < addresses.length; i++) {\n            require(value <= totalRemaining);\n            distr(addresses[i], value);\n        }\n\t\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n    }\n    \n    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\n        \n        require(addresses.length <= 255);\n        require(amount <= totalRemaining);\n        \n        for (uint i = 0; i < addresses.length; i++) {\n            require(amount <= totalRemaining);\n            distr(addresses[i], amount);\n        }\n\t\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n    }\n    \n    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\n\n        require(addresses.length <= 255);\n        require(addresses.length == amounts.length);\n        \n        for (uint8 i = 0; i < addresses.length; i++) {\n            require(amounts[i] <= totalRemaining);\n            distr(addresses[i], amounts[i]);\n            \n            if (totalDistributed >= totalSupply) {\n                distributionFinished = true;\n            }\n        }\n    }\n    \n    function () external payable {\n            getTokens();\n     }\n    \n    function getTokens() payable canDistr onlyWhitelist public {\n        \n        if (value > totalRemaining) {\n            value = totalRemaining;\n        }\n        \n        require(value <= totalRemaining);\n        \n        address investor = msg.sender;\n        uint256 toGive = value;\n        \n        distr(investor, toGive);\n        \n        if (toGive > 0) {\n            blacklist[investor] = true;\n        }\n\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n        \n        value = value.div(100000).mul(99999);\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n\t    return balances[_owner];\n    }\n\n    // mitigates the ERC20 short address attack\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n    \n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n        \n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        \n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n        ForeignToken t = ForeignToken(tokenAddress);\n        uint bal = t.balanceOf(who);\n        return bal;\n    }\n    \n    function withdraw() onlyOwner public {\n        uint256 etherBalance = this.balance;\n        owner.transfer(etherBalance);\n    }\n    \n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        totalDistributed = totalDistributed.sub(_value);\n        Burn(burner, _value);\n    }\n    \n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n        ForeignToken token = ForeignToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n    \n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        \n        require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n        return true;\n    }\n\n}",
  "bytecode": "606060405260018054600160a060020a03191633600160a060020a031617905567016345785d8a00006005819055666a94d74f4300006006819055610051919064010000000061006e81026115701704565b6007556009805460ff19169055341561006957600080fd5b610080565b60008282111561007a57fe5b50900390565b6115dd8061008f6000396000f3006060604052600436106101505763ffffffff60e060020a60003504166306fdde03811461015a578063095ea7b3146101e457806318160ddd1461021a57806323b872dd1461023f578063313ce567146102675780633ccfd60b1461027a5780633fa4f2451461028d57806342966c68146102a0578063502dadb0146102b657806370a0823114610305578063729ad39e1461032457806395d89b41146103735780639b1cbccc146103865780639c09c83514610399578063a8c310d5146103e8578063a9059cbb14610477578063aa6ca80814610150578063c108d54214610499578063c489744b146104ac578063cae9ca51146104d1578063d8a5436014610536578063dd62ed3e14610549578063e58fc54c1461056e578063efca2eed1461058d578063f2fde38b146105a0578063f3e4877c146105bf578063f533673714610610578063f9f92be414610623575b610158610642565b005b341561016557600080fd5b61016d61072b565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101a9578082015183820152602001610191565b50505050905090810190601f1680156101d65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ef57600080fd5b610206600160a060020a0360043516602435610762565b604051901515815260200160405180910390f35b341561022557600080fd5b61022d6107cf565b60405190815260200160405180910390f35b341561024a57600080fd5b610206600160a060020a03600435811690602435166044356107d5565b341561027257600080fd5b61022d610965565b341561028557600080fd5b61015861096a565b341561029857600080fd5b61022d6109cb565b34156102ab57600080fd5b6101586004356109d1565b34156102c157600080fd5b6101586004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610ac695505050505050565b341561031057600080fd5b61022d600160a060020a0360043516610b48565b341561032f57600080fd5b6101586004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610b6395505050505050565b341561037e57600080fd5b61016d610c1c565b341561039157600080fd5b610206610c53565b34156103a457600080fd5b6101586004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610cc795505050505050565b34156103f357600080fd5b610158600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843750949650610d4595505050505050565b341561048257600080fd5b610206600160a060020a0360043516602435610e2f565b34156104a457600080fd5b610206610f38565b34156104b757600080fd5b61022d600160a060020a0360043581169060243516610f41565b34156104dc57600080fd5b61020660048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610fbe95505050505050565b341561054157600080fd5b61022d61115e565b341561055457600080fd5b61022d600160a060020a0360043581169060243516611164565b341561057957600080fd5b610206600160a060020a036004351661118f565b341561059857600080fd5b61022d6112b2565b34156105ab57600080fd5b610158600160a060020a03600435166112b8565b34156105ca57600080fd5b6101586004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650509335935061131792505050565b341561061b57600080fd5b6101586113cb565b341561062e57600080fd5b610206600160a060020a0360043516611418565b600954600090819060ff161561065757600080fd5b600160a060020a03331660009081526004602052604090205460ff161561067d57600080fd5b6007546008541115610690576007546008555b60075460085411156106a157600080fd5b505060085433906106b2828261142d565b5060008111156106e057600160a060020a0382166000908152600460205260409020805460ff191660011790555b600554600654106106f9576009805460ff191660011790555b6107246201869f610718620186a060085461152e90919063ffffffff16565b9063ffffffff61154516565b6008555050565b60408051908101604052601181527f4275726d6120666972737420746f6b656e000000000000000000000000000000602082015281565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60055481565b6000606060643610156107e457fe5b600160a060020a03841615156107f957600080fd5b600160a060020a03851660009081526002602052604090205483111561081e57600080fd5b600160a060020a038086166000908152600360209081526040808320339094168352929052205483111561085157600080fd5b600160a060020a03851660009081526002602052604090205461087a908463ffffffff61157016565b600160a060020a03808716600090815260026020908152604080832094909455600381528382203390931682529190915220546108bd908463ffffffff61157016565b600160a060020a0380871660009081526003602090815260408083203385168452825280832094909455918716815260029091522054610903908463ffffffff61158216565b600160a060020a03808616600081815260026020526040908190209390935591908716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b600881565b6000600080516020611592833981519152600160a060020a0333161461098f57600080fd5b50600154600160a060020a0330811631911681156108fc0282604051600060405180830381858888f1935050505015156109c857600080fd5b50565b60085481565b6000600080516020611592833981519152600160a060020a033316146109f657600080fd5b600160a060020a033316600090815260026020526040902054821115610a1b57600080fd5b5033600160a060020a038116600090815260026020526040902054610a409083611570565b600160a060020a038216600090815260026020526040902055600554610a6c908363ffffffff61157016565b600555600654610a82908363ffffffff61157016565b600655600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b6000600080516020611592833981519152600160a060020a03331614610aeb57600080fd5b5060005b8151811015610b4457600160046000848481518110610b0a57fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101610aef565b5050565b600160a060020a031660009081526002602052604090205490565b6000600080516020611592833981519152600160a060020a03331614610b8857600080fd5b60095460ff1615610b9857600080fd5b60ff82511115610ba757600080fd5b6007546008541115610bb857600080fd5b5060005b8151811015610c00576007546008541115610bd657600080fd5b610bf7828281518110610be557fe5b9060200190602002015160085461142d565b50600101610bbc565b60055460065410610b44576009805460ff191660011790555050565b60408051908101604052600381527f4246540000000000000000000000000000000000000000000000000000000000602082015281565b6000600080516020611592833981519152600160a060020a03331614610c7857600080fd5b60095460ff1615610c8857600080fd5b6009805460ff191660011790557f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a150600190565b6000600080516020611592833981519152600160a060020a03331614610cec57600080fd5b5060005b8151811015610b4457600060046000848481518110610d0b57fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101610cf0565b6000600080516020611592833981519152600160a060020a03331614610d6a57600080fd5b60095460ff1615610d7a57600080fd5b60ff83511115610d8957600080fd5b8151835114610d9757600080fd5b5060005b82518160ff161015610e2a57600754828260ff1681518110610db957fe5b906020019060200201511115610dce57600080fd5b610e08838260ff1681518110610de057fe5b90602001906020020151838360ff1681518110610df957fe5b9060200190602002015161142d565b5060055460065410610e22576009805460ff191660011790555b600101610d9b565b505050565b600060406044361015610e3e57fe5b600160a060020a0384161515610e5357600080fd5b600160a060020a033316600090815260026020526040902054831115610e7857600080fd5b600160a060020a033316600090815260026020526040902054610ea1908463ffffffff61157016565b600160a060020a033381166000908152600260205260408082209390935590861681522054610ed6908463ffffffff61158216565b600160a060020a0380861660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35060019392505050565b60095460ff1681565b60008281600160a060020a0382166370a0823185836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610f9b57600080fd5b6102c65a03f11515610fac57600080fd5b50505060405180519695505050505050565b600160a060020a03338116600081815260036020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a03166040517f72656365697665417070726f76616c28616464726573732c75696e743235362c81527f616464726573732c6279746573290000000000000000000000000000000000006020820152602e01604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b838110156110ff5780820151838201526020016110e7565b50505050905090810190601f16801561112c5780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038160008761646e5a03f192505050151561115457600080fd5b5060019392505050565b60075481565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60008080600080516020611592833981519152600160a060020a033316146111b657600080fd5b83915081600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561121057600080fd5b6102c65a03f1151561122157600080fd5b5050506040518051600154909250600160a060020a03808516925063a9059cbb91168360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561129057600080fd5b6102c65a03f115156112a157600080fd5b505050604051805195945050505050565b60065481565b600080516020611592833981519152600160a060020a033316146112db57600080fd5b600160a060020a038116156109c85760018054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b6000600080516020611592833981519152600160a060020a0333161461133c57600080fd5b60095460ff161561134c57600080fd5b60ff8351111561135b57600080fd5b60075482111561136a57600080fd5b5060005b82518110156113ae5760075482111561138657600080fd5b6113a583828151811061139557fe5b906020019060200201518361142d565b5060010161136e565b60055460065410610e2a576009805460ff19166001179055505050565b6001805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a031617905564746a5288006008556006546109c8906000805160206115928339815191529061142d565b60046020526000908152604090205460ff1681565b60095460009060ff161561144057600080fd5b600654611453908363ffffffff61158216565b600655600754611469908363ffffffff61157016565b600755600160a060020a038316600090815260026020526040902054611495908363ffffffff61158216565b600160a060020a0384166000818152600260205260409081902092909255907f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a779084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060016107c9565b600080828481151561153c57fe5b04949350505050565b6000828202831580611561575082848281151561155e57fe5b04145b151561156957fe5b9392505050565b60008282111561157c57fe5b50900390565b60008282018381101561156957fe00000000000000000000000000395d5881be6ca42d96ba01a2de69416f10cebe29a165627a7a72305820b84a7ed49a0ed795ff25940a4d5598c990ae2632bf90fd0e622b8119fa7f35390029"
}