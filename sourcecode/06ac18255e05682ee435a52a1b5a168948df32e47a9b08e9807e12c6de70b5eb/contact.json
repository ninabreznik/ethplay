{
  "address": "0xb7aa364b3e7d631f6cbb0bfde1236b1ebc6493d6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TBToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-08\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns(uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns(uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n  bool public paused = false;\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused {\n    require(paused);\n    _;\n  }\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused returns(bool) {\n    paused = true;\n    emit Pause();\n    return true;\n  }\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused returns(bool) {\n    paused = false;\n    emit Unpause();\n    return true;\n  }\n}\n\ncontract ERC20 {\n\n  uint256 public totalSupply;\n\n  function transfer(address _to, uint256 _value) public returns(bool success);\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\n\n  function balanceOf(address _owner) constant public returns(uint256 balance);\n\n  function approve(address _spender, uint256 _value) public returns(bool success);\n\n  function allowance(address _owner, address _spender) constant public returns(uint256 remaining);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract BasicToken is ERC20, Pausable {\n  using SafeMath for uint256;\n\n  event Frozen(address indexed _address, bool _value);\n\n  mapping(address => uint256) balances;\n  mapping(address => bool) public frozens;\n  mapping(address => mapping(address => uint256)) allowed;\n\n  function _transfer(address _from, address _to, uint256 _value) internal returns(bool success) {\n    require(_to != 0x0);\n    require(_value > 0);\n    require(frozens[_from] == false);\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns(bool success) {\n    require(balances[msg.sender] >= _value);\n    return _transfer(msg.sender, _to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns(bool success) {\n    require(balances[_from] >= _value);\n    require(allowed[_from][msg.sender] >= _value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    return _transfer(_from, _to, _value);\n  }\n\n  function balanceOf(address _owner) constant public returns(uint256 balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint256 _value) public returns(bool success) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) constant public returns(uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  function freeze(address[] _targets, bool _value) public onlyOwner returns(bool success) {\n    require(_targets.length > 0);\n    require(_targets.length <= 255);\n    for (uint8 i = 0; i < _targets.length; i++) {\n      assert(_targets[i] != 0x0);\n      frozens[_targets[i]] = _value;\n      emit Frozen(_targets[i], _value);\n    }\n    return true;\n  }\n\n  function transferMulti(address[] _to, uint256[] _value) public whenNotPaused returns(bool success) {\n    require(_to.length > 0);\n    require(_to.length <= 255);\n    require(_to.length == _value.length);\n    require(frozens[msg.sender] == false);\n    uint8 i;\n    uint256 amount;\n    for (i = 0; i < _to.length; i++) {\n      assert(_to[i] != 0x0);\n      assert(_value[i] > 0);\n      amount = amount.add(_value[i]);\n    }\n    require(balances[msg.sender] >= amount);\n    balances[msg.sender] = balances[msg.sender].sub(amount);\n    for (i = 0; i < _to.length; i++) {\n      balances[_to[i]] = balances[_to[i]].add(_value[i]);\n      emit Transfer(msg.sender, _to[i], _value[i]);\n    }\n    return true;\n  }\n}\n\ncontract TBToken is BasicToken {\n\n  string public constant name = \"ThailandBlockchainToken\";\n  string public constant symbol = \"TBT\";\n  uint256 public constant decimals = 18;\n\n  constructor() public {\n    assign(0x47deb87285F9BFb796E28Cb0B2b3CCf7b1b6E518, 300);\n    assign(0x4fb3B3312422B24D3e7b4b65Bc0F53691aAF8788, 300);\n    assign(0xcdC272917eF9518674778bc879B36b672958cEaf, 200);\n    assign(0x206473BC20fa80b933D22572cE49383280db89Aa, 200);\n  }\n\n  function assign(address _address, uint256 _value) private {\n    uint256 amount = _value * (10 ** 6) * (10 ** decimals);\n    balances[_address] = amount;\n    allowed[_address][owner] = amount;\n    totalSupply = totalSupply.add(amount);\n  }\n}",
  "bytecode": "60806040526001805460a060020a60ff021916905534801561002057600080fd5b5060018054600160a060020a0319163317905561005c7347deb87285f9bfb796e28cb0b2b3ccf7b1b6e51861012c6401000000006100da810204565b610085734fb3b3312422b24d3e7b4b65bc0f53691aaf878861012c6401000000006100da810204565b6100ad73cdc272917ef9518674778bc879b36b672958ceaf60c86401000000006100da810204565b6100d573206473bc20fa80b933d22572ce49383280db89aa60c86401000000006100da810204565b610155565b600160a060020a03808316600090815260026020908152604080832069d3c21bcecceda1000000860290819055600483528184206001549095168452939091528120829055546101379082640100000000610d2361013f82021704565b600055505050565b60008282018381101561014e57fe5b9392505050565b610d5e806101646000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b757806323b872dd146101de578063313ce5671461020857806335bce6e41461021d5780633f4ba83a146102ab5780635c975abb146102c057806370a08231146102d55780638456cb59146102f65780638da5cb5b1461030b57806395d89b411461033c578063a9059cbb14610351578063c8dbb68614610375578063dd62ed3e14610396578063e2dc7763146103bd578063f2fde38b14610416575b600080fd5b34801561010157600080fd5b5061010a610439565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a0360043516602435610470565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc6104d6565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101a3600160a060020a03600435811690602435166044356104dc565b34801561021457600080fd5b506101cc6105b6565b34801561022957600080fd5b50604080516020600480358082013583810280860185019096528085526101a395369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506105bb9650505050505050565b3480156102b757600080fd5b506101a3610847565b3480156102cc57600080fd5b506101a36108c6565b3480156102e157600080fd5b506101cc600160a060020a03600435166108d6565b34801561030257600080fd5b506101a36108f1565b34801561031757600080fd5b50610320610975565b60408051600160a060020a039092168252519081900360200190f35b34801561034857600080fd5b5061010a610984565b34801561035d57600080fd5b506101a3600160a060020a03600435166024356109bb565b34801561038157600080fd5b506101a3600160a060020a0360043516610a03565b3480156103a257600080fd5b506101cc600160a060020a0360043581169060243516610a18565b3480156103c957600080fd5b50604080516020600480358082013583810280860185019096528085526101a395369593946024949385019291829185019084908082843750949750505050913515159250610a43915050565b34801561042257600080fd5b50610437600160a060020a0360043516610b71565b005b60408051808201909152601781527f546861696c616e64426c6f636b636861696e546f6b656e000000000000000000602082015281565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005481565b60015460009060a060020a900460ff16156104f657600080fd5b600160a060020a03841660009081526002602052604090205482111561051b57600080fd5b600160a060020a038416600090815260046020908152604080832033845290915290205482111561054b57600080fd5b600160a060020a038416600090815260046020908152604080832033845290915290205461057f908363ffffffff610c0616565b600160a060020a03851660009081526004602090815260408083203384529091529020556105ae848484610c18565b949350505050565b601281565b6001546000908190819060a060020a900460ff16156105d957600080fd5b84516000106105e757600080fd5b845160ff10156105f657600080fd5b835185511461060457600080fd5b3360009081526003602052604090205460ff161561062157600080fd5b600091505b84518260ff1610156106ba57848260ff1681518110151561064357fe5b60209081029091010151600160a060020a0316151561065e57fe5b6000848360ff1681518110151561067157fe5b602090810290910101511161068257fe5b6106ad848360ff1681518110151561069657fe5b60209081029091010151829063ffffffff610d2316565b6001909201919050610626565b336000908152600260205260409020548111156106d657600080fd5b336000908152600260205260409020546106f6908263ffffffff610c0616565b3360009081526002602052604081209190915591505b84518260ff16101561083c5761077a848360ff1681518110151561072c57fe5b9060200190602002015160026000888660ff1681518110151561074b57fe5b6020908102909101810151600160a060020a03168252810191909152604001600020549063ffffffff610d2316565b60026000878560ff1681518110151561078f57fe5b6020908102909101810151600160a060020a03168252810191909152604001600020558451859060ff84169081106107c357fe5b90602001906020020151600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef868560ff1681518110151561081257fe5b906020019060200201516040518082815260200191505060405180910390a360019091019061070c565b506001949350505050565b600154600090600160a060020a0316331461086157600080fd5b60015460a060020a900460ff16151561087957600080fd5b6001805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a150600190565b60015460a060020a900460ff1681565b600160a060020a031660009081526002602052604090205490565b600154600090600160a060020a0316331461090b57600080fd5b60015460a060020a900460ff161561092257600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a150600190565b600154600160a060020a031681565b60408051808201909152600381527f5442540000000000000000000000000000000000000000000000000000000000602082015281565b60015460009060a060020a900460ff16156109d557600080fd5b336000908152600260205260409020548211156109f157600080fd5b6109fc338484610c18565b9392505050565b60036020526000908152604090205460ff1681565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b6001546000908190600160a060020a03163314610a5f57600080fd5b8351600010610a6d57600080fd5b835160ff1015610a7c57600080fd5b5060005b83518160ff161015610b6757838160ff16815181101515610a9d57fe5b60209081029091010151600160a060020a03161515610ab857fe5b8260036000868460ff16815181101515610ace57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff19169115159190911790558351849060ff8316908110610b1157fe5b90602001906020020151600160a060020a03167f713eb400302cebac61f82eb8de5051d38458517ffac43ae45f4a9fd5d09ee69884604051808215151515815260200191505060405180910390a2600101610a80565b5060019392505050565b600154600160a060020a03163314610b8857600080fd5b600160a060020a0381161515610b9d57600080fd5b600154604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610c1257fe5b50900390565b6000600160a060020a0383161515610c2f57600080fd5b60008211610c3c57600080fd5b600160a060020a03841660009081526003602052604090205460ff1615610c6257600080fd5b600160a060020a038316600090815260026020526040902054610c8b908363ffffffff610d2316565b600160a060020a038085166000908152600260205260408082209390935590861681522054610cc0908363ffffffff610c0616565b600160a060020a0380861660008181526002602090815260409182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b6000828201838110156109fc57fe00a165627a7a7230582066e81b8f1a21b624ea44a7a3c79b050a149bfabd78bb0fe430c7ce76dcfa4c5e0029"
}