{
  "address": "0x7816773556a09d06670a734caf5fa22562427b0c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "KitchanNetworkToken",
  "contractName": "KitchanNetworkToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-13\n*/\n\npragma solidity ^0.4.11;\n\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  function Ownable() {\n    owner = msg.sender;\n  }\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   */\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title Kitchan Network Token\n * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20 with the addition \n * of ownership, a lock and issuing.\n */\ncontract KitchanNetworkToken is Ownable, StandardToken {\n\n    using SafeMath for uint256;\n    \n\t// metadata\n    string public constant name = \"Kitchan Network\";\n    string public constant symbol = \"KCN\";\n    uint256 public constant decimals = 18;\n    uint256 public constant INITIAL_SUPPLY = 600 * (10**6) * 10**decimals; // Total 600m KCN\n\tuint256 public totalSale;\n\n    // crowdsale parameters\n    bool public isFinalized;              // switched to true in operational state\n\n    // Sale period.\n    uint256 public startDate;\n    \n    // 2017.10.10 02:00 UTC \n    uint256 public constant startIco = 1507600800;\n    \n    uint256 public constant tokenRatePre = 15000; // 15000 KCN tokens per 1 ETH when Pre-ICO\n    uint256 public constant tokenRate1 = 13000; // 13000 KCN tokens per 1 ETH when week 1\n    uint256 public constant tokenRate2 = 12000; // 12000 KCN tokens per 1 ETH when week 2\n    uint256 public constant tokenRate3 = 11000; // 11000 KCN tokens per 1 ETH when week 3\n    uint256 public constant tokenRate4 = 10000; // 10000 KCN tokens per 1 ETH when week 4\n\n    uint256 public constant tokenForTeam    = 100 * (10**6) * 10**decimals;\n    uint256 public constant tokenForAdvisor = 60 * (10**6) * 10**decimals;\n    uint256 public constant tokenForBounty  = 20 * (10**6) * 10**decimals;\n    uint256 public constant tokenForSale    = 420 * (10**6) * 10**decimals;\n\n\t// Address received Token\n    address public constant ethFundAddress = 0xc73a39834a14D91eCB701aEf41F5C71A0E95fB10;      // deposit address for ETH \n\taddress public constant teamAddress = 0x689ab85eBFF451f661665114Abb6EF7109175F9D;\n\taddress public constant advisorAddress = 0xe7F74ee4e03C14144936BF738c12865C489aF8A7;\n\taddress public constant bountyAddress = 0x65E5F11D845ecb2b7104Ad163B0B957Ed14D6EEF;\n  \n\n    // constructor\n    function KitchanNetworkToken() {\n      \tisFinalized = false;                   //controls pre through crowdsale state      \t\n      \ttotalSale = 0;\n      \tstartDate = getCurrent();\n      \tbalances[teamAddress] = tokenForTeam;   \n      \tbalances[advisorAddress] = tokenForAdvisor;\n      \tbalances[bountyAddress] = tokenForBounty;\n    }\n\n    function getCurrent() internal returns (uint256) {\n        return now;\n    }\n    \n\n    function getRateTime(uint256 at) internal returns (uint256) {\n        if (at < (startIco)) {\n            return tokenRatePre;\n        } else if (at < (startIco + 7 days)) {\n            return tokenRate1;\n        } else if (at < (startIco + 14 days)) {\n            return tokenRate2;\n        } else if (at < (startIco + 21 days)) {\n            return tokenRate3;\n        }\n        return tokenRate4;\n    }\n    \n    // Fallback function can be used to buy tokens\n    function () payable {\n        buyTokens(msg.sender, msg.value);\n    }\n    \t\n    // @dev Accepts ether and creates new KCN tokens.\n    function buyTokens(address sender, uint256 value) internal {\n        require(!isFinalized);\n        require(value > 0 ether);\n\n        // Calculate token  to be purchased\n        uint256 tokenRateNow = getRateTime(getCurrent());\n      \tuint256 tokens = value * tokenRateNow; // check that we're not over totals\n      \tuint256 checkedSupply = totalSale + tokens;\n      \t\n       \t// return money if something goes wrong\n      \trequire(tokenForSale >= checkedSupply);  // odd fractions won't be found     \t\n\n        // Transfer\n        balances[sender] += tokens;\n\n        // Update total sale.\n        totalSale = checkedSupply;\n\n        // Forward the fund to fund collection wallet.\n        ethFundAddress.transfer(value);\n    }\n\n    /// @dev Ends the funding period\n    function finalize() onlyOwner {\n        require(!isFinalized);\n    \trequire(msg.sender == ethFundAddress);\n    \trequire(tokenForSale > totalSale);\n    \t\n        balances[ethFundAddress] += (tokenForSale - totalSale);\n           \t      \t\n      \t// move to operational\n      \tisFinalized = true;\n\n    }\n    \n}",
  "bytecode": "6060604052341561000f57600080fd5b5b5b60008054600160a060020a03191633600160a060020a03161790555b6005805460ff191690556000600455610051640100000000610fab61010182021704565b60065560026020526a52b7d2dcc80cd2e40000007fe8f91b965f93950c13b3ecdf5c38c2094d97943e74e4df3767c7227af6f688c4556a31a17e847807b1bc0000007f8b7bdec2f9c0a8c249eb1efdf7b5b11a2a27eeacfabb91ff9ec036bb23a57ce8557365e5f11d845ecb2b7104ad163b0b957ed14d6eef6000526a108b2a2c280290940000007f26ddb7152c969cb670c8c354cd4072f3d7a316d0a84799b6fc5d3496bdbe3fb3555b610106565b425b90565b611070806101156000396000f300606060405236156101935763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101a1578063095ea7b31461022c5780630b97bc8614610262578063105498741461028757806318160ddd146102ac5780631c75f085146102d157806323b872dd14610300578063244978291461033c578063250b11541461036b5780632ff2e9dc14610390578063313ce567146103b55780633970f698146103da5780634bb278f3146103ff5780634c4a9761146104145780634cc09eac14610439578063661884631461045e57806370a082311461049457806389311e6f146104c55780638d4e4083146104ea5780638da5cb5b1461051157806395d89b411461054057806396d4d091146105cb578063a9059cbb146105fa578063beebeff714610630578063c516358f14610655578063d73dd62314610684578063dd62ed3e146106ba578063e1e46f24146106f1578063ea4ce23914610716578063ea98fcf91461073b578063f15a1b5914610760578063f2fde38b14610785575b5b61019e33346107a6565b5b005b34156101ac57600080fd5b6101b461086d565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101f15780820151818401525b6020016101d8565b50505050905090810190601f16801561021e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023757600080fd5b61024e600160a060020a03600435166024356108a4565b604051901515815260200160405180910390f35b341561026d57600080fd5b610275610911565b60405190815260200160405180910390f35b341561029257600080fd5b610275610917565b60405190815260200160405180910390f35b34156102b757600080fd5b61027561091d565b60405190815260200160405180910390f35b34156102dc57600080fd5b6102e4610923565b604051600160a060020a03909116815260200160405180910390f35b341561030b57600080fd5b61024e600160a060020a036004358116906024351660443561093b565b604051901515815260200160405180910390f35b341561034757600080fd5b6102e4610a67565b604051600160a060020a03909116815260200160405180910390f35b341561037657600080fd5b610275610a7f565b60405190815260200160405180910390f35b341561039b57600080fd5b610275610a85565b60405190815260200160405180910390f35b34156103c057600080fd5b610275610a95565b60405190815260200160405180910390f35b34156103e557600080fd5b610275610a9a565b60405190815260200160405180910390f35b341561040a57600080fd5b61019e610aaa565b005b341561041f57600080fd5b610275610b82565b60405190815260200160405180910390f35b341561044457600080fd5b610275610b88565b60405190815260200160405180910390f35b341561046957600080fd5b61024e600160a060020a0360043516602435610b8e565b604051901515815260200160405180910390f35b341561049f57600080fd5b610275600160a060020a0360043516610c8a565b60405190815260200160405180910390f35b34156104d057600080fd5b610275610ca9565b60405190815260200160405180910390f35b34156104f557600080fd5b61024e610cb1565b604051901515815260200160405180910390f35b341561051c57600080fd5b6102e4610cba565b604051600160a060020a03909116815260200160405180910390f35b341561054b57600080fd5b6101b4610cc9565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101f15780820151818401525b6020016101d8565b50505050905090810190601f16801561021e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105d657600080fd5b6102e4610d00565b604051600160a060020a03909116815260200160405180910390f35b341561060557600080fd5b61024e600160a060020a0360043516602435610d18565b604051901515815260200160405180910390f35b341561063b57600080fd5b610275610def565b60405190815260200160405180910390f35b341561066057600080fd5b6102e4610dfe565b604051600160a060020a03909116815260200160405180910390f35b341561068f57600080fd5b61024e600160a060020a0360043516602435610e16565b604051901515815260200160405180910390f35b34156106c557600080fd5b610275600160a060020a0360043581169060243516610ebb565b60405190815260200160405180910390f35b34156106fc57600080fd5b610275610ee8565b60405190815260200160405180910390f35b341561072157600080fd5b610275610eee565b60405190815260200160405180910390f35b341561074657600080fd5b610275610ef4565b60405190815260200160405180910390f35b341561076b57600080fd5b610275610f03565b60405190815260200160405180910390f35b341561079057600080fd5b61019e600160a060020a0360043516610f12565b005b6005546000908190819060ff16156107bd57600080fd5b600084116107ca57600080fd5b6107da6107d5610fab565b610fb0565b6004549093508484029250820190506b015b6a759f4835dc240000008190101561080357600080fd5b600160a060020a03851660009081526002602052604090819020805484019055600482905573c73a39834a14d91ecb701aef41f5c71a0e95fb109085156108fc0290869051600060405180830381858888f19350505050151561086557600080fd5b5b5050505050565b60408051908101604052600f81527f4b69746368616e204e6574776f726b0000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60065481565b6132c881565b60015481565b73689ab85ebff451f661665114abb6ef7109175f9d81565b600080600160a060020a038416151561095357600080fd5b50600160a060020a03808516600081815260036020908152604080832033909516835293815283822054928252600290529190912054610999908463ffffffff61101316565b600160a060020a0380871660009081526002602052604080822093909355908616815220546109ce908463ffffffff61102a16565b600160a060020a0385166000908152600260205260409020556109f7818463ffffffff61101316565b600160a060020a03808716600081815260036020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b73c73a39834a14d91ecb701aef41f5c71a0e95fb1081565b612af881565b6b01f04ef12cb04cf15800000081565b601281565b6b015b6a759f4835dc2400000081565b60005433600160a060020a03908116911614610ac557600080fd5b60055460ff1615610ad557600080fd5b33600160a060020a031673c73a39834a14d91ecb701aef41f5c71a0e95fb1014610afe57600080fd5b6004546b015b6a759f4835dc2400000011610b1857600080fd5b60045473c73a39834a14d91ecb701aef41f5c71a0e95fb1060005260026020527fb93e11d8e61be52ca8a779685acef4f297e1798684330d2578b30ebab211961d80546b015b6a759f4835dc240000009290920390910190556005805460ff191660011790555b5b565b61271081565b613a9881565b600160a060020a03338116600090815260036020908152604080832093861683529290529081205480831115610beb57600160a060020a033381166000908152600360209081526040808320938816835292905290812055610c22565b610bfb818463ffffffff61101316565b600160a060020a033381166000908152600360209081526040808320938916835292905220555b600160a060020a0333811660008181526003602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a0381166000908152600260205260409020545b919050565b6359dc29a081565b60055460ff1681565b600054600160a060020a031681565b60408051908101604052600381527f4b434e0000000000000000000000000000000000000000000000000000000000602082015281565b73e7f74ee4e03c14144936bf738c12865c489af8a781565b6000600160a060020a0383161515610d2f57600080fd5b600160a060020a033316600090815260026020526040902054610d58908363ffffffff61101316565b600160a060020a033381166000908152600260205260408082209390935590851681522054610d8d908363ffffffff61102a16565b600160a060020a0380851660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b6a31a17e847807b1bc00000081565b7365e5f11d845ecb2b7104ad163b0b957ed14d6eef81565b600160a060020a033381166000908152600360209081526040808320938616835292905290812054610e4e908363ffffffff61102a16565b600160a060020a0333811660008181526003602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060015b92915050565b600160a060020a038083166000908152600360209081526040808320938516835292905220545b92915050565b612ee081565b60045481565b6a108b2a2c2802909400000081565b6a52b7d2dcc80cd2e400000081565b60005433600160a060020a03908116911614610f2d57600080fd5b600160a060020a0381161515610f4257600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b425b90565b60006359dc29a0821015610fc75750613a98610ca4565b6359e56420821015610fdc57506132c8610ca4565b6359ee9ea0821015610ff15750612ee0610ca4565b6359f7d9208210156110065750612af8610ca4565b5b5b5b506127105b919050565b60008282111561101f57fe5b508082035b92915050565b60008282018381101561103957fe5b8091505b50929150505600a165627a7a7230582040a67578c5383b9d28ef6a0881d6c0d5f496d882497c0054190f2c588949fc910029"
}