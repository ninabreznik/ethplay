{
  "address": "0x715079d8285d91baab59055b47c17de4c5a378ac",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Fider",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-13\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor(string name, string symbol, uint8 decimals) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n  }\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns(string) {\n    return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns(string) {\n    return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\ncontract MinterRole {\n  using Roles for Roles.Role;\n\n  event MinterAdded(address indexed account);\n  event MinterRemoved(address indexed account);\n\n  Roles.Role private minters;\n\n  constructor() internal {\n    _addMinter(msg.sender);\n  }\n\n  modifier onlyMinter() {\n    require(isMinter(msg.sender));\n    _;\n  }\n\n  function isMinter(address account) public view returns (bool) {\n    return minters.has(account);\n  }\n\n  function addMinter(address account) public onlyMinter {\n    _addMinter(account);\n  }\n\n  function renounceMinter() public {\n    _removeMinter(msg.sender);\n  }\n\n  function _addMinter(address account) internal {\n    minters.add(account);\n    emit MinterAdded(account);\n  }\n\n  function _removeMinter(address account) internal {\n    minters.remove(account);\n    emit MinterRemoved(account);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n  /**\n   * @dev Function to mint tokens\n   * @param to The address that will receive the minted tokens.\n   * @param value The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address to,\n    uint256 value\n  )\n    public\n    onlyMinter\n    returns (bool)\n  {\n    _mint(to, value);\n    return true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Capped.sol\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract ERC20Capped is ERC20Mintable {\n\n  uint256 private _cap;\n\n  constructor(uint256 cap)\n    public\n  {\n    require(cap > 0);\n    _cap = cap;\n  }\n\n  /**\n   * @return the cap for the token minting.\n   */\n  function cap() public view returns(uint256) {\n    return _cap;\n  }\n\n  function _mint(address account, uint256 value) internal {\n    require(totalSupply().add(value) <= _cap);\n    super._mint(account, value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param value The amount of token to be burned.\n   */\n  function burn(uint256 value) public {\n    _burn(msg.sender, value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param from address The address which you want to send tokens from\n   * @param value uint256 The amount of token to be burned\n   */\n  function burnFrom(address from, uint256 value) public {\n    _burnFrom(from, value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\ncontract PauserRole {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private pausers;\n\n  constructor() internal {\n    _addPauser(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    _addPauser(account);\n  }\n\n  function renouncePauser() public {\n    _removePauser(msg.sender);\n  }\n\n  function _addPauser(address account) internal {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n  event Paused(address account);\n  event Unpaused(address account);\n\n  bool private _paused;\n\n  constructor() internal {\n    _paused = false;\n  }\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused(msg.sender);\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused(msg.sender);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n **/\ncontract ERC20Pausable is ERC20, Pausable {\n\n  function transfer(\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(to, value);\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(from, to, value);\n  }\n\n  function approve(\n    address spender,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(spender, value);\n  }\n\n  function increaseAllowance(\n    address spender,\n    uint addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseAllowance(spender, addedValue);\n  }\n\n  function decreaseAllowance(\n    address spender,\n    uint subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseAllowance(spender, subtractedValue);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n\n  using SafeMath for uint256;\n\n  function safeTransfer(\n    IERC20 token,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n    internal\n  {\n    // safeApprove should only be called when setting an initial allowance, \n    // or when resetting it to zero. To increase and decrease it, use \n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n    require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n    require(token.approve(spender, value));\n  }\n\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n    internal\n  {\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\n    require(token.approve(spender, newAllowance));\n  }\n\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n    internal\n  {\n    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n    require(token.approve(spender, newAllowance));\n  }\n}\n\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 indexed tokenId\n  );\n  event Approval(\n    address indexed owner,\n    address indexed approved,\n    uint256 indexed tokenId\n  );\n  event ApprovalForAll(\n    address indexed owner,\n    address indexed operator,\n    bool approved\n  );\n\n  function balanceOf(address owner) public view returns (uint256 balance);\n  function ownerOf(uint256 tokenId) public view returns (address owner);\n\n  function approve(address to, uint256 tokenId) public;\n  function getApproved(uint256 tokenId)\n    public view returns (address operator);\n\n  function setApprovalForAll(address operator, bool _approved) public;\n  function isApprovedForAll(address owner, address operator)\n    public view returns (bool);\n\n  function transferFrom(address from, address to, uint256 tokenId) public;\n  function safeTransferFrom(address from, address to, uint256 tokenId)\n    public;\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes data\n  )\n    public;\n}\n\n// File: contracts/AdminRole.sol\n\ncontract AdminRole {\n    using Roles for Roles.Role;\n\n    event AdminAdded(address indexed account);\n    event AdminRemoved(address indexed account);\n\n    Roles.Role private admins;\n\n    modifier onlyAdmin() {\n        require(isAdmin(msg.sender));\n        _;\n    }\n\n    function isAdmin(address account) public view returns (bool) {\n        return admins.has(account);\n    }\n\n    function renounceAdmin() public {\n        _removeAdmin(msg.sender);\n    }\n\n    function _addAdmin(address account) internal {\n        admins.add(account);\n        emit AdminAdded(account);\n    }\n\n    function _removeAdmin(address account) internal {\n        admins.remove(account);\n        emit AdminRemoved(account);\n    }\n}\n\n// File: contracts/SpenderRole.sol\n\ncontract SpenderRole {\n    using Roles for Roles.Role;\n\n    event SpenderAdded(address indexed account);\n    event SpenderRemoved(address indexed account);\n\n    Roles.Role private spenders;\n\n    modifier onlySpender() {\n        require(isSpender(msg.sender));\n        _;\n    }\n\n    function isSpender(address account) public view returns (bool) {\n        return spenders.has(account);\n    }\n\n    function renounceSpender() public {\n        _removeSpender(msg.sender);\n    }\n\n    function _addSpender(address account) internal {\n        spenders.add(account);\n        emit SpenderAdded(account);\n    }\n\n    function _removeSpender(address account) internal {\n        spenders.remove(account);\n        emit SpenderRemoved(account);\n    }\n}\n\n// File: contracts/RecipientRole.sol\n\ncontract RecipientRole {\n    using Roles for Roles.Role;\n\n    event RecipientAdded(address indexed account);\n    event RecipientRemoved(address indexed account);\n\n    Roles.Role private recipients;\n\n    modifier onlyRecipient() {\n        require(isRecipient(msg.sender));\n        _;\n    }\n\n    function isRecipient(address account) public view returns (bool) {\n        return recipients.has(account);\n    }\n\n    function renounceRecipient() public {\n        _removeRecipient(msg.sender);\n    }\n\n    function _addRecipient(address account) internal {\n        recipients.add(account);\n        emit RecipientAdded(account);\n    }\n\n    function _removeRecipient(address account) internal {\n        recipients.remove(account);\n        emit RecipientRemoved(account);\n    }\n}\n\n// File: contracts/Fider.sol\n\ncontract Fider is ERC20Detailed, ERC20Burnable, ERC20Capped, ERC20Pausable, AdminRole, SpenderRole, RecipientRole {\n    using SafeERC20 for IERC20;\n\n    address private root;\n\n    modifier onlyRoot() {\n        require(msg.sender == root, \"This operation can only be performed by root account\");\n        _;\n    }\n\n    constructor(string name, string symbol, uint8 decimals, uint256 cap)\n    ERC20Detailed(name, symbol, decimals) ERC20Capped(cap) ERC20Mintable()  ERC20() public {\n        // Contract deployer (root) is automatically added as a minter in the MinterRole constructor\n        // We revert this in here in order to separate the responsibilities of Root and Minter\n        _removeMinter(msg.sender);\n\n        // Contract deployer (root) is automatically added as a pauser in the PauserRole constructor\n        // We revert this in here in order to separate the responsibilities of Root and Pauser\n        _removePauser(msg.sender);\n\n        root = msg.sender;\n    }\n\n    /*** ACCESS CONTROL MANAGEMENT ***/\n\n    /**\n    * This is particularly for the cases where there is a chance that the keys are compromised\n    * but no one has attacked/abused them yet, this function gives company the option to be on\n    * the safe side and start using another address.\n    * @dev Transfers control of the contract to a newRoot.\n    * @param _newRoot The address to transfer ownership to.\n    */\n    function transferRoot(address _newRoot) external onlyRoot {\n        require(_newRoot != address(0));\n        root = _newRoot;\n    }\n\n    /**\n    * Designates a given account as an authorized Minter, where minter are the only ones who\n    * can call the mint function to create new tokens.\n    * This function can only be called by Root, which is the account who deployed the contract.\n    * @param account address The account who will be able to mint\n    */\n    function addMinter(address account) public onlyRoot {\n        _addMinter(account);\n    }\n\n    /**\n    * Revokes a given account as an authorized Minter, where minter are the only ones who\n    * can call the mint function to create new tokens.\n    * This function can only be called by Root, which is the account who deployed the contract.\n    * @param account address The account who will not be able to mint anymore\n    */\n    function removeMinter(address account) external onlyRoot {\n        _removeMinter(account);\n    }\n\n    /**\n    * Designates a given account as an authorized Pauser, where pausers are the only ones who\n    * can call the pause and unpause functions to freeze or unfreeze the transfer functions.\n    * This function can only be called by Root, which is the account who deployed the contract.\n    * @param account address The account who will be able to pause/unpause the token\n    */\n    function addPauser(address account) public onlyRoot {\n        _addPauser(account);\n    }\n\n    /**\n    * Revokes a given account as an authorized Pauser, where pausers are the only ones who\n    * can call the pause and unpause functions to freeze or unfreeze the transfer functions.\n    * This function can only be called by Root, which is the account who deployed the contract.\n    * @param account address The account who will not be able to pause/unpause the token anymore\n    */\n    function removePauser(address account) external onlyRoot {\n        _removePauser(account);\n    }\n\n    /**\n    * Designates a given account as an authorized Admin, where admins are the only ones who\n    * can call the addRecipient, removeRecipient, addSpender and removeSpender functions\n    * to authorize or revoke spenders and recipients\n    * This function can only be called by Root, which is the account who deployed the contract.\n    * @param account address The account who will be able to administer spenders and recipients\n    */\n    function addAdmin(address account) external onlyRoot {\n        _addAdmin(account);\n    }\n\n    /**\n    * Revokes a given account as an authorized Admin, where admins are the only ones who\n    * can call the addRecipient, removeRecipient, addSpender and removeSpender functions\n    * to authorize or revoke spenders and recipients\n    * This function can only be called by Root, which is the account who deployed the contract.\n    * @param account address The account who will not be able to administer spenders and recipients anymore\n    */\n    function removeAdmin(address account) external onlyRoot {\n        _removeAdmin(account);\n    }\n\n    /**\n    * Designates a given account as an authorized Spender, where spenders are the only ones who\n    * can call the transfer, approve, increaseAllowance, decreaseAllowance and transferFrom functions\n    * to send tokens to other accounts\n    * This function can only be called by an authorized admin\n    * @param account address The account who will be able to send tokens\n    */\n    function addSpender(address account) external onlyAdmin {\n        _addSpender(account);\n    }\n\n    /**\n    * Revokes a given account as an authorized Spender, where spenders are the only ones who\n    * can call the transfer, approve, increaseAllowance, decreaseAllowance and transferFrom functions\n    * to send tokens to other accounts\n    * This function can only be called by an authorized admin\n    * @param account address The account who will not be able to send tokens anymore\n    */\n    function removeSpender(address account) external onlyAdmin {\n        _removeSpender(account);\n    }\n\n    /**\n    * Designates a given account as an authorized Recipient, where recipients are the only ones who\n    * can be on the receiving end of a transfer, either through a normal transfer, or through a third\n    * party payment process (approve/transferFrom or increaseAllowance/transferFrom)\n    * This function can only be called by an authorized admin\n    * @param account address The account who will be able to receive tokens\n    */\n    function addRecipient(address account) external onlyAdmin {\n        _addRecipient(account);\n    }\n\n    /**\n    * Revokes a given account as an authorized Recipient, where recipients are the only ones who\n    * can be on the receiving end of a transfer, either through a normal transfer, or through a third\n    * party payment process (approve/transferFrom or increaseAllowance/transferFrom)\n    * This function can only be called by an authorized admin\n    * @param account address The account who will not be able to receive tokens anymore\n    */\n    function removeRecipient(address account) external onlyAdmin {\n        _removeRecipient(account);\n    }\n\n    /*** MINTING ***/\n\n    /**\n    * @dev Function to mint tokens\n    * @param to The address that will receive the minted tokens. Must be an authorized spender.\n    * @param value The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        require(isSpender(to), \"To must be an authorized spender\");\n        return super.mint(to, value);\n    }\n\n    /*** BURNING ***/\n\n    /**\n    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n    * This function can only be called by an authorized minter.\n    * @param from address The address which you want to burn tokens from\n    * @param value uint256 The amount of tokens to be burned\n    */\n    function burnFrom(address from, uint256 value) public onlyMinter {\n        _burnFrom(from, value);\n    }\n\n    /*** TRANSFER ***/\n\n    /**\n    * @dev Transfer token for a specified address\n    * This function can only be called by an authorized spender.\n    * @param to The address to transfer to. Must be an authorized recipient.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public onlySpender returns (bool) {\n        require(isRecipient(to), \"To must be an authorized recipient\");\n        return super.transfer(to, value);\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * This function can only be called by an authorized spender\n    * @param spender The address which will spend the funds. Must be an authorized spender or minter.\n    * @param value The amount of tokens to be spent.\n    */\n    function approve(address spender, uint256 value) public onlySpender returns (bool) {\n        require(isSpender(spender) || isMinter(spender), \"Spender must be an authorized spender or a minter\");\n        return super.approve(spender, value);\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * This function can only be called by an authorized spender.\n    * @param from address The address which you want to send tokens from. Must be an authorized spender.\n    * @param to address The address which you want to transfer to. Must be an authorized recipient.\n    * @param value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address from, address to, uint256 value) public onlySpender returns (bool) {\n        require(isSpender(from), \"From must be an authorized spender\");\n        require(isRecipient(to), \"To must be an authorized recipient\");\n        return super.transferFrom(from, to, value);\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed_[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * This function can only be called by an authorized spender.\n    * @param spender The address which will spend the funds. Must be an authorized spender or minter.\n    * @param addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseAllowance(address spender, uint256 addedValue) public onlySpender returns (bool) {\n        require(isSpender(spender) || isMinter(spender), \"Spender must be an authorized spender or a minter\");\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * This function can only be called by an authorized spender.\n     * @param spender The address which will spend the funds. Must be an authorized spender or minter.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public onlySpender returns (bool) {\n        require(isSpender(spender) || isMinter(spender), \"Spender must be an authorized spender or a minter\");\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n\n    /** RECOVERING ASSETS MISTAKENLY SENT TO CONTRACT **/\n\n    /**\n    * @dev Disallows direct send by setting a default function without the `payable` flag.\n    */\n    function() external {\n    }\n\n    /**\n    * @dev Transfer all Ether held by the contract to the root.\n    */\n    function reclaimEther() external onlyRoot {\n        root.transfer(address(this).balance);\n    }\n\n    /**\n    * @dev Reclaim all IERC20 compatible tokens\n    * @param _token IERC20 The address of the token contract\n    */\n    function reclaimERC20Token(IERC20 _token) external onlyRoot {\n        uint256 balance = _token.balanceOf(this);\n        _token.safeTransfer(root, balance);\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405162003ecd38038062003ecd833981018060405281019080805182019291906020018051820192919060200180519060200190929190805190602001909291905050508084848482600090805190602001906200007392919062000553565b5081600190805190602001906200008c92919062000553565b5080600260006101000a81548160ff021916908360ff160217905550505050620000c53362000191640100000000026401000000009004565b600081111515620000d557600080fd5b8060078190555050620000f733620001fb640100000000026401000000009004565b6000600960006101000a81548160ff0219169083151502179055506200012c3362000265640100000000026401000000009004565b6200014633620002cf640100000000026401000000009004565b33600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000602565b620001b5816006620003396401000000000262002dd0179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b6200021f816008620003396401000000000262002dd0179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b62000289816006620003fc6401000000000262002d21179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b620002f3816008620003fc6401000000000262002d21179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200037657600080fd5b620003918282620004be640100000000026401000000009004565b1515156200039e57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200043957600080fd5b620004548282620004be640100000000026401000000009004565b15156200046057600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620004fc57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200059657805160ff1916838001178555620005c7565b82800160010185558215620005c7579182015b82811115620005c6578251825591602001919060010190620005a9565b5b509050620005d69190620005da565b5090565b620005ff91905b80821115620005fb576000816000905550600101620005e1565b5090565b90565b6138bb80620006126000396000f3006080604052600436106101f9576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610208578063095ea7b31461029857806312a29198146102fd5780631785f53c1461034057806318160ddd146103835780631c3101d3146103ae57806323b872dd146103f157806324d7806c146104765780633092afd5146104d1578063313ce56714610514578063355274ea1461054557806339509351146105705780633f4ba83a146105d557806340c10f19146105ec57806342966c681461065157806346fbf68e1461067e5780635c975abb146106d95780636b2c0f55146107085780636ef8d66d1461074b578063704802751461076257806370a08231146107a557806379cc6790146107fc57806382dc1ec4146108495780638456cb591461088c5780638bad0c0a146108a35780638c5143ea146108ba5780638ce5877c1461091557806395d89b4114610958578063983b2d56146109e85780639865027514610a2b5780639a206ece14610a425780639f727c2714610a9d578063a457c2d714610ab4578063a531f50e14610b19578063a9059cbb14610b30578063aa271e1a14610b95578063c296302a14610bf0578063dd62ed3e14610c33578063e0052d7c14610caa578063e7a027ea14610ced578063e7e31e7a14610d04575b34801561020557600080fd5b50005b34801561021457600080fd5b5061021d610d47565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025d578082015181840152602081019050610242565b50505050905090810190601f16801561028a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a457600080fd5b506102e3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610de9565b604051808215151515815260200191505060405180910390f35b34801561030957600080fd5b5061033e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ec4565b005b34801561034c57600080fd5b50610381600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ee4565b005b34801561038f57600080fd5b50610398610fdb565b6040518082815260200191505060405180910390f35b3480156103ba57600080fd5b506103ef600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fe5565b005b3480156103fd57600080fd5b5061045c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611005565b604051808215151515815260200191505060405180910390f35b34801561048257600080fd5b506104b7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611175565b604051808215151515815260200191505060405180910390f35b3480156104dd57600080fd5b50610512600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611192565b005b34801561052057600080fd5b50610529611289565b604051808260ff1660ff16815260200191505060405180910390f35b34801561055157600080fd5b5061055a6112a0565b6040518082815260200191505060405180910390f35b34801561057c57600080fd5b506105bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112aa565b604051808215151515815260200191505060405180910390f35b3480156105e157600080fd5b506105ea611385565b005b3480156105f857600080fd5b50610637600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611434565b604051808215151515815260200191505060405180910390f35b34801561065d57600080fd5b5061067c600480360381019080803590602001909291905050506114d9565b005b34801561068a57600080fd5b506106bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114e6565b604051808215151515815260200191505060405180910390f35b3480156106e557600080fd5b506106ee611503565b604051808215151515815260200191505060405180910390f35b34801561071457600080fd5b50610749600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061151a565b005b34801561075757600080fd5b50610760611611565b005b34801561076e57600080fd5b506107a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061161c565b005b3480156107b157600080fd5b506107e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611713565b6040518082815260200191505060405180910390f35b34801561080857600080fd5b50610847600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061175c565b005b34801561085557600080fd5b5061088a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061177e565b005b34801561089857600080fd5b506108a1611875565b005b3480156108af57600080fd5b506108b8611925565b005b3480156108c657600080fd5b506108fb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611930565b604051808215151515815260200191505060405180910390f35b34801561092157600080fd5b50610956600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061194d565b005b34801561096457600080fd5b5061096d61196d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109ad578082015181840152602081019050610992565b50505050905090810190601f1680156109da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109f457600080fd5b50610a29600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a0f565b005b348015610a3757600080fd5b50610a40611b06565b005b348015610a4e57600080fd5b50610a83600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b11565b604051808215151515815260200191505060405180910390f35b348015610aa957600080fd5b50610ab2611b2e565b005b348015610ac057600080fd5b50610aff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c9b565b604051808215151515815260200191505060405180910390f35b348015610b2557600080fd5b50610b2e611d76565b005b348015610b3c57600080fd5b50610b7b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d81565b604051808215151515815260200191505060405180910390f35b348015610ba157600080fd5b50610bd6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e4c565b604051808215151515815260200191505060405180910390f35b348015610bfc57600080fd5b50610c31600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e69565b005b348015610c3f57600080fd5b50610c94600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fd4565b6040518082815260200191505060405180910390f35b348015610cb657600080fd5b50610ceb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061205b565b005b348015610cf957600080fd5b50610d02612271565b005b348015610d1057600080fd5b50610d45600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061227c565b005b606060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ddf5780601f10610db457610100808354040283529160200191610ddf565b820191906000526020600020905b815481529060010190602001808311610dc257829003601f168201915b5050505050905090565b6000610df433611b11565b1515610dff57600080fd5b610e0883611b11565b80610e185750610e1783611e4c565b5b1515610eb2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f5370656e646572206d75737420626520616e20617574686f72697a656420737081526020017f656e646572206f722061206d696e74657200000000000000000000000000000081525060400191505060405180910390fd5b610ebc838361229c565b905092915050565b610ecd33611175565b1515610ed857600080fd5b610ee1816122cc565b50565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fcf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001807f54686973206f7065726174696f6e2063616e206f6e6c7920626520706572666f81526020017f726d656420627920726f6f74206163636f756e7400000000000000000000000081525060400191505060405180910390fd5b610fd881612326565b50565b6000600554905090565b610fee33611175565b1515610ff957600080fd5b61100281612380565b50565b600061101033611b11565b151561101b57600080fd5b61102484611b11565b15156110be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f46726f6d206d75737420626520616e20617574686f72697a6564207370656e6481526020017f657200000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6110c783611930565b1515611161576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f546f206d75737420626520616e20617574686f72697a6564207265636970696581526020017f6e7400000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61116c8484846123da565b90509392505050565b600061118b82600a61240c90919063ffffffff16565b9050919050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561127d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001807f54686973206f7065726174696f6e2063616e206f6e6c7920626520706572666f81526020017f726d656420627920726f6f74206163636f756e7400000000000000000000000081525060400191505060405180910390fd5b611286816124a0565b50565b6000600260009054906101000a900460ff16905090565b6000600754905090565b60006112b533611b11565b15156112c057600080fd5b6112c983611b11565b806112d957506112d883611e4c565b5b1515611373576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f5370656e646572206d75737420626520616e20617574686f72697a656420737081526020017f656e646572206f722061206d696e74657200000000000000000000000000000081525060400191505060405180910390fd5b61137d83836124fa565b905092915050565b61138e336114e6565b151561139957600080fd5b600960009054906101000a900460ff1615156113b457600080fd5b6000600960006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600061143f33611e4c565b151561144a57600080fd5b61145383611b11565b15156114c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f546f206d75737420626520616e20617574686f72697a6564207370656e64657281525060200191505060405180910390fd5b6114d1838361252a565b905092915050565b6114e33382612554565b50565b60006114fc82600861240c90919063ffffffff16565b9050919050565b6000600960009054906101000a900460ff16905090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001807f54686973206f7065726174696f6e2063616e206f6e6c7920626520706572666f81526020017f726d656420627920726f6f74206163636f756e7400000000000000000000000081525060400191505060405180910390fd5b61160e816126e2565b50565b61161a336126e2565b565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001807f54686973206f7065726174696f6e2063616e206f6e6c7920626520706572666f81526020017f726d656420627920726f6f74206163636f756e7400000000000000000000000081525060400191505060405180910390fd5b6117108161273c565b50565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61176533611e4c565b151561177057600080fd5b61177a8282612796565b5050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611869576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001807f54686973206f7065726174696f6e2063616e206f6e6c7920626520706572666f81526020017f726d656420627920726f6f74206163636f756e7400000000000000000000000081525060400191505060405180910390fd5b6118728161293e565b50565b61187e336114e6565b151561188957600080fd5b600960009054906101000a900460ff161515156118a557600080fd5b6001600960006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b61192e33612326565b565b600061194682600c61240c90919063ffffffff16565b9050919050565b61195633611175565b151561196157600080fd5b61196a81612998565b50565b606060018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a055780601f106119da57610100808354040283529160200191611a05565b820191906000526020600020905b8154815290600101906020018083116119e857829003601f168201915b5050505050905090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611afa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001807f54686973206f7065726174696f6e2063616e206f6e6c7920626520706572666f81526020017f726d656420627920726f6f74206163636f756e7400000000000000000000000081525060400191505060405180910390fd5b611b03816129f2565b50565b611b0f336124a0565b565b6000611b2782600b61240c90919063ffffffff16565b9050919050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c19576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001807f54686973206f7065726174696f6e2063616e206f6e6c7920626520706572666f81526020017f726d656420627920726f6f74206163636f756e7400000000000000000000000081525060400191505060405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611c98573d6000803e3d6000fd5b50565b6000611ca633611b11565b1515611cb157600080fd5b611cba83611b11565b80611cca5750611cc983611e4c565b5b1515611d64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001807f5370656e646572206d75737420626520616e20617574686f72697a656420737081526020017f656e646572206f722061206d696e74657200000000000000000000000000000081525060400191505060405180910390fd5b611d6e8383612a4c565b905092915050565b611d7f336122cc565b565b6000611d8c33611b11565b1515611d9757600080fd5b611da083611930565b1515611e3a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f546f206d75737420626520616e20617574686f72697a6564207265636970696581526020017f6e7400000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611e448383612a7c565b905092915050565b6000611e6282600661240c90919063ffffffff16565b9050919050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f54576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001807f54686973206f7065726174696f6e2063616e206f6e6c7920626520706572666f81526020017f726d656420627920726f6f74206163636f756e7400000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611f9057600080fd5b80600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612148576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001807f54686973206f7065726174696f6e2063616e206f6e6c7920626520706572666f81526020017f726d656420627920726f6f74206163636f756e7400000000000000000000000081525060400191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156121e357600080fd5b505af11580156121f7573d6000803e3d6000fd5b505050506040513d602081101561220d57600080fd5b8101908080519060200190929190505050905061226d600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff16612aac9092919063ffffffff16565b5050565b61227a33612998565b565b61228533611175565b151561229057600080fd5b61229981612b9a565b50565b6000600960009054906101000a900460ff161515156122ba57600080fd5b6122c48383612bf4565b905092915050565b6122e081600c612d2190919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f8176fc5412eb5076fee7f1a264915b808c24d495c2698c189030e5200e707d2560405160405180910390a250565b61233a81600a612d2190919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f60405160405180910390a250565b61239481600c612dd090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f4205b1cf2b33c8147cc02b8fb0c9d3ff098218a686b0dd94b1e35d3c3968ad8c60405160405180910390a250565b6000600960009054906101000a900460ff161515156123f857600080fd5b612403848484612e80565b90509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561244957600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6124b4816006612d2190919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b6000600960009054906101000a900460ff1615151561251857600080fd5b6125228383613032565b905092915050565b600061253533611e4c565b151561254057600080fd5b61254a8383613269565b6001905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561257a57600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156125c857600080fd5b6125dd816005546132a190919063ffffffff16565b60058190555061263581600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132a190919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6126f6816008612d2190919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b61275081600a612dd090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33960405160405180910390a250565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561282157600080fd5b6128b081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132a190919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061293a8282612554565b5050565b612952816008612dd090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6129ac81600b612d2190919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fab8cff50266d80b9c9d9703af934ca455b9218286bf4fcaa05653a564c499e4b60405160405180910390a250565b612a06816006612dd090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b6000600960009054906101000a900460ff16151515612a6a57600080fd5b612a7483836132c2565b905092915050565b6000600960009054906101000a900460ff16151515612a9a57600080fd5b612aa483836134f9565b905092915050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612b4f57600080fd5b505af1158015612b63573d6000803e3d6000fd5b505050506040513d6020811015612b7957600080fd5b81019080805190602001909291905050501515612b9557600080fd5b505050565b612bae81600b612dd090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f3139419c41cdd7abca84fa19dd21118cd285d3e2ce1a9444e8161ce9fa62fdcd60405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612c3157600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612d5d57600080fd5b612d67828261240c565b1515612d7257600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612e0c57600080fd5b612e16828261240c565b151515612e2257600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515612f0d57600080fd5b612f9c82600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132a190919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613027848484613510565b600190509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561306f57600080fd5b6130fe82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461372e90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60075461328682613278610fdb565b61372e90919063ffffffff16565b1115151561329357600080fd5b61329d828261374f565b5050565b6000808383111515156132b357600080fd5b82840390508091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156132ff57600080fd5b61338e82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132a190919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000613506338484613510565b6001905092915050565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115151561355e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561359a57600080fd5b6135ec81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132a190919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061368181600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461372e90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080828401905083811015151561374557600080fd5b8091505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561377557600080fd5b61378a8160055461372e90919063ffffffff16565b6005819055506137e281600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461372e90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505600a165627a7a723058200263f906d97e70bd1cb272121de9b39a9911143a89b3fba8e94bdad599b0af360029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000002161356b39d6f308bc00000000000000000000000000000000000000000000000000000000000000000005466964657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034644520000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000002161356b39d6f308bc00000000000000000000000000000000000000000000000000000000000000000005466964657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034644520000000000000000000000000000000000000000000000000000000000"
}