{
  "address": "0x46a19d32be761efcab0bef87c92ab3911f3fab86",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HotLot",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-17\n*/\n\npragma solidity ^0.4.23;\n\n/**\n * @title SafeMaths\n * @dev Math operations with safety checks that throw on error\n */\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract HotLot {\n    using SafeMath for uint256;\n\n    uint256 public INTERVAL_TIME = 8 hours;\n    uint256 public JACKPOT_INTERVAL_TIME = 72 hours;\n    uint256 public constant PERCENT_REWARD_TO_JACKPOT = 20;\n    uint256 public constant PERCENT_REWARD_TOP_RANK = 30;\n    uint256 public constant PERCENT_REWARD_TOP1 = 60;\n    uint256 public constant PERCENT_REWARD_TOP2 = 30;\n    uint256 public constant PERCENT_REWARD_TOP3 = 10;\n    uint256 public DEPOSIT_AMOUNT = 0.02 * (10 ** 18);\n\n    address public owner;\n    address public winner1;\n    uint256 public winnerAmount1 = 0;\n    address public winner2;\n    uint256 public winnerAmount2 = 0;\n    address public winner3;\n    uint256 public winnerAmount3 = 0;\n\n    address public winnerJackpot1;\n    uint256 public winnerJackpotAmount1 = 0;\n    address public winnerJackpot2;\n    uint256 public winnerJackpotAmount2 = 0;\n    address public winnerJackpot3;\n    uint256 public winnerJackpotAmount3 = 0;\n\n    uint256 public amountRound = 0;\n    uint256 public amountJackpot = 0;\n    uint256 public roundTime;\n    uint256 public jackpotTime;\n    uint256 public countPlayerRound = 0;\n    uint256 public countPlayerJackpot = 0;\n    uint256 public countRound = 0;\n    uint256 public countJackpot = 0;\n    uint256 private _seed;\n\n    struct Player {\n        address wallet;\n        bool playing;\n        bool playingJackpot;\n    }\n\n    Player[] public players;\n\n    event DepositSuccess(address _from, uint256 _amount, uint256 countRound, uint256 countJackpot);\n    event RewardRoundWinner(\n        address wallet1, \n        uint256 amount1, \n        address wallet2, \n        uint256 amount2, \n        address wallet3, \n        uint256 amount3, \n        uint256 rewardRank\n    );\n    event RewardJackpotWinner(\n        address wallet1, uint256 amount1, \n        address wallet2, uint256 amount2, \n        address wallet3, uint256 amount3, \n        uint256 rewardRank\n    );\n\n    function HotLot() public {\n        owner = msg.sender;\n        roundTime = now.add(INTERVAL_TIME);\n        jackpotTime = now.add(JACKPOT_INTERVAL_TIME);\n    }\n\n    /**\n    * Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function () payable {\n        deposit();\n    }\n\n    /**\n    * Deposit from player\n    */\n    function deposit() public payable {\n        require(msg.value >= DEPOSIT_AMOUNT);\n\n        players.push(Player({\n            wallet: msg.sender,\n            playing: true,\n            playingJackpot: true\n        }));\n\n        amountRound = amountRound.add(msg.value);\n        countPlayerRound = countPlayerRound.add(1);\n        countPlayerJackpot = countPlayerJackpot.add(1);\n\n        emit DepositSuccess(msg.sender, msg.value, countRound, countJackpot);\n\n        if (now >= roundTime && amountRound > 0 && countPlayerRound > 1) {\n            roundTime = now.add(INTERVAL_TIME);\n            executeRound();\n\n            if (now >= jackpotTime && amountJackpot > 0 && countPlayerJackpot > 1) {\n                jackpotTime = now.add(JACKPOT_INTERVAL_TIME);\n                executeJackpot();\n            }\n        }\n    }\n\n    function executeRound() private {\n        uint256 count = 0;\n        address wallet1;\n        address wallet2;\n        address wallet3;\n        uint256 luckyNumber1 = generateLuckyNumber(countPlayerRound);\n        uint256 luckyNumber2 = generateLuckyNumber(countPlayerRound);\n        uint256 luckyNumber3 = generateLuckyNumber(countPlayerRound);\n\n        for (uint256 i = 0; i < players.length; i++) {\n            if (players[i].playing) {\n                count = count.add(1);\n                if (count == luckyNumber1) {\n                    wallet1 = players[i].wallet;\n                }\n                if (count == luckyNumber2) {\n                    wallet2 = players[i].wallet;\n                }\n                if (count == luckyNumber3) {\n                    wallet3 = players[i].wallet;\n                }\n                players[i].playing = false;\n            }\n        }\n\n        countRound = countRound.add(1);\n        uint256 rewardRank = amountRound.mul(PERCENT_REWARD_TOP_RANK).div(100);\n        uint256 amountToJackpot = amountRound.mul(PERCENT_REWARD_TO_JACKPOT).div(100);\n        uint256 reward = amountRound.sub(rewardRank.add(amountToJackpot));\n\n        amountJackpot = amountJackpot.add(amountToJackpot);\n\n        winnerAmount1 = reward.mul(PERCENT_REWARD_TOP1).div(100);\n        winner1 = wallet1;\n        winnerAmount2 = reward.mul(PERCENT_REWARD_TOP2).div(100);\n        winner2 = wallet2;\n        winnerAmount3 = reward.sub(winnerAmount1.add(winnerAmount2));\n        winner3 = wallet3;\n\n        amountRound = 0;\n        countPlayerRound = 0;\n\n        winner1.transfer(winnerAmount1);\n        winner2.transfer(winnerAmount2);\n        winner3.transfer(winnerAmount3);\n        owner.transfer(rewardRank);\n\n        emit RewardRoundWinner(\n            winner1, \n            winnerAmount1, \n            winner2, \n            winnerAmount2, \n            winner3, \n            winnerAmount3, \n            rewardRank\n        );\n    }\n\n    function executeJackpot() private {\n        uint256 count = 0;\n        address wallet1;\n        address wallet2;\n        address wallet3;\n        uint256 luckyNumber1 = generateLuckyNumber(countPlayerJackpot);\n        uint256 luckyNumber2 = generateLuckyNumber(countPlayerJackpot);\n        uint256 luckyNumber3 = generateLuckyNumber(countPlayerJackpot);\n\n        for (uint256 i = 0; i < players.length; i++) {\n            if (players[i].playingJackpot) {\n                count = count.add(1);\n                if (count == luckyNumber1) {\n                    wallet1 = players[i].wallet;\n                }\n                if (count == luckyNumber2) {\n                    wallet2 = players[i].wallet;\n                }\n                if (count == luckyNumber3) {\n                    wallet3 = players[i].wallet;\n                }\n                players[i].playing = false;\n            }\n        }\n\n        uint256 rewardRank = amountJackpot.mul(PERCENT_REWARD_TOP_RANK).div(100);\n        uint256 reward = amountJackpot.sub(rewardRank);\n\n        winnerJackpotAmount1 = reward.mul(PERCENT_REWARD_TOP1).div(100);\n        winnerJackpot1 = wallet1;\n        winnerJackpotAmount2 = reward.mul(PERCENT_REWARD_TOP2).div(100);\n        winnerJackpot2 = wallet2;\n        winnerJackpotAmount3 = reward.sub(winnerJackpotAmount1.add(winnerJackpotAmount2));\n        winnerJackpot3 = wallet3;\n\n        countJackpot = countJackpot.add(1);\n        amountJackpot = 0;\n        countPlayerJackpot = 0;\n        delete players;\n\n        owner.transfer(rewardRank);\n        winnerJackpot1.transfer(winnerJackpotAmount1);\n        winnerJackpot2.transfer(winnerJackpotAmount2);\n        winnerJackpot3.transfer(winnerJackpotAmount3);\n\n        emit RewardJackpotWinner(\n            winnerJackpot1, \n            winnerJackpotAmount1, \n            winnerJackpot2, \n            winnerJackpotAmount2, \n            winnerJackpot3, \n            winnerJackpotAmount3, \n            rewardRank\n        );\n    }\n\n    function maxRandom() public returns (uint256 number) {\n        _seed = uint256(keccak256(\n            _seed,\n            block.blockhash(block.number - 1),\n            block.coinbase,\n            block.difficulty,\n            players.length,\n            countPlayerJackpot,\n            countPlayerRound,\n            winnerJackpot1,\n            winnerJackpotAmount1,\n            winnerAmount1,\n            winner1,\n            now\n        ));\n\n        return _seed;\n    }\n\n    function generateLuckyNumber(uint256 maxNumber) private returns (uint256 number) {\n        return (maxRandom() % maxNumber) + 1;\n    }\n\n    /**\n    * Allows the current owner to transfer control of the contract to a newOwner.\n    * _newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != owner);\n        require(_newOwner != address(0x0));\n\n        owner = _newOwner;\n    }\n    \n    function setIntervalTime(uint256 _time) public onlyOwner {\n        require(_time > 0);\n        INTERVAL_TIME = _time;\n    }\n    \n    function setIntervalJackpotTime(uint256 _time) public onlyOwner {\n        require(_time > 0);\n        JACKPOT_INTERVAL_TIME = _time;\n    }\n    \n    function setMinAmountDeposit(uint256 _amount) public onlyOwner {\n        require(_amount > 0);\n        DEPOSIT_AMOUNT = _amount;\n    }\n}",
  "bytecode": ""
}