{
  "address": "0x3c24e076ea0d370c004e2771ad545e211860f5ce",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SparkleCrowdsale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-10\n*/\n\npragma solidity 0.4.25;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: contracts/MultiOwnable.sol\n\n/**\n * @title MultiOwnable.sol\n * @dev Provide multi-ownable functionality to a smart contract.\n * @dev Note this contract preserves the idea of a master owner where this owner\n * cannot be removed or deleted. Master owner's are the only owner's who can add\n * and remove other owner's. Transfer of master ownership is supported and can \n * also only be transferred by the current master owner\n * @dev When master ownership is transferred the original master owner is not\n * removed from the additional owners list\n */\npragma solidity 0.4.25;\n\n/**\n * @dev OpenZeppelin Solidity v2.0.0 imports (Using: npm [emailÂ protected])\n */\n\n\ncontract MultiOwnable is Ownable {\n\t/**\n\t * @dev Mapping of additional addresses that are considered owners\n\t */\n\tmapping (address => bool) additionalOwners;\n\n\t/**\n\t * @dev Modifier that overrides 'Ownable' to support multiple owners\n\t */\n\tmodifier onlyOwner() {\n\t\t// Ensure that msg.sender is an owner or revert\n\t\trequire(isOwner(msg.sender), \"Permission denied [owner].\");\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Modifier that provides additional testing to ensure msg.sender\n\t * is master owner, or first address to deploy contract\n\t */\n\tmodifier onlyMaster() {\n\t\t// Ensure that msg.sender is the master user\n\t\trequire(super.isOwner(), \"Permission denied [master].\");\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Ownership added event for Dapps interested in this event\n\t */\n\tevent OwnershipAdded (\n\t\taddress indexed addedOwner\n\t);\n\t\n\t/**\n\t * @dev Ownership removed event for Dapps interested in this event\n\t */\n\tevent OwnershipRemoved (\n\t\taddress indexed removedOwner\n\t);\n\n  \t/**\n\t * @dev MultiOwnable .cTor responsible for initialising the masterOwner\n\t * or contract super-user\n\t * @dev The super user cannot be deleted from the ownership mapping and\n\t * can only be transferred\n\t */\n\tconstructor() \n\tOwnable()\n\tpublic\n\t{\n\t\t// Obtain owner of the contract (msg.sender)\n\t\taddress masterOwner = owner();\n\t\t// Add the master owner to the additional owners list\n\t\tadditionalOwners[masterOwner] = true;\n\t}\n\n\t/**\n\t * @dev Returns the owner status of the specified address\n\t */\n\tfunction isOwner(address _ownerAddressToLookup)\n\tpublic\n\tview\n\treturns (bool)\n\t{\n\t\t// Return the ownership state of the specified owner address\n\t\treturn additionalOwners[_ownerAddressToLookup];\n\t}\n\n\t/**\n\t * @dev Returns the master status of the specfied address\n\t */\n\tfunction isMaster(address _masterAddressToLookup)\n\tpublic\n\tview\n\treturns (bool)\n\t{\n\t\treturn (super.owner() == _masterAddressToLookup);\n\t}\n\n\t/**\n\t * @dev Add a new owner address to additional owners mapping\n\t * @dev Only the master owner can add additional owner addresses\n\t */\n\tfunction addOwner(address _ownerToAdd)\n\tonlyMaster\n\tpublic\n\treturns (bool)\n\t{\n\t\t// Ensure the new owner address is not address(0)\n\t\trequire(_ownerToAdd != address(0), \"Invalid address specified (0x0)\");\n\t\t// Ensure that new owner address is not already in the owners list\n\t\trequire(!isOwner(_ownerToAdd), \"Address specified already in owners list.\");\n\t\t// Add new owner to additional owners mapping\n\t\tadditionalOwners[_ownerToAdd] = true;\n\t\temit OwnershipAdded(_ownerToAdd);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Add a new owner address to additional owners mapping\n\t * @dev Only the master owner can add additional owner addresses\n\t */\n\tfunction removeOwner(address _ownerToRemove)\n\tonlyMaster\n\tpublic\n\treturns (bool)\n\t{\n\t\t// Ensure that the address to remove is not the master owner\n\t\trequire(_ownerToRemove != super.owner(), \"Permission denied [master].\");\n\t\t// Ensure that owner address to remove is actually an owner\n\t\trequire(isOwner(_ownerToRemove), \"Address specified not found in owners list.\");\n\t\t// Add remove ownership from address in the additional owners mapping\n\t\tadditionalOwners[_ownerToRemove] = false;\n\t\temit OwnershipRemoved(_ownerToRemove);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Transfer ownership of this contract to another address\n\t * @dev Only the master owner can transfer ownership to another address\n\t * @dev Only existing owners can have ownership transferred to them\n\t */\n\tfunction transferOwnership(address _newOwnership) \n\tonlyMaster \n\tpublic \n\t{\n\t\t// Ensure the new ownership is not address(0)\n\t\trequire(_newOwnership != address(0), \"Invalid address specified (0x0)\");\n\t\t// Ensure the new ownership address is not the current ownership addressess\n\t\trequire(_newOwnership != owner(), \"Address specified must not match current owner address.\");\t\t\n\t\t// Ensure that the new ownership is promoted from existing owners\n\t\trequire(isOwner(_newOwnership), \"Master ownership can only be transferred to an existing owner address.\");\n\t\t// Call into the parent class and transfer ownership\n\t\tsuper.transferOwnership(_newOwnership);\n\t\t// If we get here, then add the new ownership address to the additional owners mapping\n\t\t// Note that the original master owner address was not removed and is still an owner until removed\n\t\tadditionalOwners[_newOwnership] = true;\n\t}\n\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\ncontract PauserRole {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private pausers;\n\n  constructor() internal {\n    _addPauser(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    _addPauser(account);\n  }\n\n  function renouncePauser() public {\n    _removePauser(msg.sender);\n  }\n\n  function _addPauser(address account) internal {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n  event Paused(address account);\n  event Unpaused(address account);\n\n  bool private _paused;\n\n  constructor() internal {\n    _paused = false;\n  }\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused(msg.sender);\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused(msg.sender);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n\n  using SafeMath for uint256;\n\n  function safeTransfer(\n    IERC20 token,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n    internal\n  {\n    // safeApprove should only be called when setting an initial allowance, \n    // or when resetting it to zero. To increase and decrease it, use \n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n    require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n    require(token.approve(spender, value));\n  }\n\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n    internal\n  {\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\n    require(token.approve(spender, newAllowance));\n  }\n\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n    internal\n  {\n    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n    require(token.approve(spender, newAllowance));\n  }\n}\n\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[emailÂ protected]Ï.com>, Eenae <[emailÂ protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /// @dev counter to allow mutex lock with only one SSTORE operation\n  uint256 private _guardCounter;\n\n  constructor() internal {\n    // The counter starts at one to prevent changing it from zero to a non-zero\n    // value, which is a more expensive operation.\n    _guardCounter = 1;\n  }\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * Calling a `nonReentrant` function from another `nonReentrant`\n   * function is not supported. It is possible to prevent this from happening\n   * by making the `nonReentrant` function external, and make it call a\n   * `private` function that does the actual work.\n   */\n  modifier nonReentrant() {\n    _guardCounter += 1;\n    uint256 localCounter = _guardCounter;\n    _;\n    require(localCounter == _guardCounter);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n * behavior.\n */\ncontract Crowdsale is ReentrancyGuard {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  // The token being sold\n  IERC20 private _token;\n\n  // Address where funds are collected\n  address private _wallet;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n  // 1 wei will give you 1 unit, or 0.001 TOK.\n  uint256 private _rate;\n\n  // Amount of wei raised\n  uint256 private _weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokensPurchased(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param rate Number of token units a buyer gets per wei\n   * @dev The rate is the conversion between wei and the smallest and indivisible\n   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n   * @param wallet Address where collected funds will be forwarded to\n   * @param token Address of the token being sold\n   */\n  constructor(uint256 rate, address wallet, IERC20 token) internal {\n    require(rate > 0);\n    require(wallet != address(0));\n    require(token != address(0));\n\n    _rate = rate;\n    _wallet = wallet;\n    _token = token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   * Note that other contracts will transfer fund with a base gas stipend\n   * of 2300, which is not enough to call buyTokens. Consider calling\n   * buyTokens directly when purchasing tokens from a contract.\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @return the token being sold.\n   */\n  function token() public view returns(IERC20) {\n    return _token;\n  }\n\n  /**\n   * @return the address where funds are collected.\n   */\n  function wallet() public view returns(address) {\n    return _wallet;\n  }\n\n  /**\n   * @return the number of token units a buyer gets per wei.\n   */\n  function rate() public view returns(uint256) {\n    return _rate;\n  }\n\n  /**\n   * @return the amount of wei raised.\n   */\n  function weiRaised() public view returns (uint256) {\n    return _weiRaised;\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * This function has a non-reentrancy guard, so it shouldn't be called by\n   * another `nonReentrant` function.\n   * @param beneficiary Recipient of the token purchase\n   */\n  function buyTokens(address beneficiary) public nonReentrant payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    _weiRaised = _weiRaised.add(weiAmount);\n\n    _processPurchase(beneficiary, tokens);\n    emit TokensPurchased(\n      msg.sender,\n      beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n   *   super._preValidatePurchase(beneficiary, weiAmount);\n   *   require(weiRaised().add(weiAmount) <= cap);\n   * @param beneficiary Address performing the token purchase\n   * @param weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n    view\n  {\n    require(beneficiary != address(0));\n    require(weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param beneficiary Address performing the token purchase\n   * @param weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n    view\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param beneficiary Address performing the token purchase\n   * @param tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address beneficiary,\n    uint256 tokenAmount\n  )\n    internal\n  {\n    _token.safeTransfer(beneficiary, tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send tokens.\n   * @param beneficiary Address receiving the tokens\n   * @param tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address beneficiary,\n    uint256 tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(beneficiary, tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param beneficiary Address receiving the tokens\n   * @param weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 weiAmount)\n    internal view returns (uint256)\n  {\n    return weiAmount.mul(_rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    _wallet.transfer(msg.value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 private _openingTime;\n  uint256 private _closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    require(isOpen());\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param openingTime Crowdsale opening time\n   * @param closingTime Crowdsale closing time\n   */\n  constructor(uint256 openingTime, uint256 closingTime) internal {\n    // solium-disable-next-line security/no-block-members\n    require(openingTime >= block.timestamp);\n    require(closingTime > openingTime);\n\n    _openingTime = openingTime;\n    _closingTime = closingTime;\n  }\n\n  /**\n   * @return the crowdsale opening time.\n   */\n  function openingTime() public view returns(uint256) {\n    return _openingTime;\n  }\n\n  /**\n   * @return the crowdsale closing time.\n   */\n  function closingTime() public view returns(uint256) {\n    return _closingTime;\n  }\n\n  /**\n   * @return true if the crowdsale is open, false otherwise.\n   */\n  function isOpen() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > _closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param beneficiary Token purchaser\n   * @param weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n    internal\n    onlyWhileOpen\n    view\n  {\n    super._preValidatePurchase(beneficiary, weiAmount);\n  }\n\n}\n\n// File: contracts/SparkleBaseCrowdsale.sol\n\n/**\n * @dev SparkelBaseCrowdsale: Core crowdsale functionality\n */\ncontract SparkleBaseCrowdsale is MultiOwnable, Pausable, TimedCrowdsale {\n\tusing SafeMath for uint256;\n\n\t/**\n\t * @dev CrowdsaleStage enumeration indicating which operational stage this contract is running\n\t */\n\tenum CrowdsaleStage { \n\t\tpreICO, \n\t\tbonusICO, \n\t\tmainICO\n\t}\n\n \t/**\n \t * @dev Internal contract variable stored\n \t */\n\tERC20   public tokenAddress;\n\tuint256 public tokenRate;\n\tuint256 public tokenCap;\n\tuint256 public startTime;\n\tuint256 public endTime;\n\taddress public depositWallet;\n\tbool    public kycRequired;\t\n\tbool\tpublic refundRemainingOk;\n\n\tuint256 public tokensSold;\n\n\t/**\n\t * @dev Contribution structure representing a token purchase \n\t */\n\tstruct OrderBook {\n\t\tuint256 weiAmount;   // Amount of Wei that has been contributed towards tokens by this address\n\t\tuint256 pendingTokens; // Total pending tokens held by this address waiting for KYC verification, and user to claim their tokens(pending restrictions)\n\t\tbool    kycVerified;   // Has this address been kyc validated\n\t}\n\n\t// Contributions mapping to user addresses\n\tmapping(address => OrderBook) private orders;\n\n\t// Initialize the crowdsale stage to preICO (this stage will change)\n\tCrowdsaleStage public crowdsaleStage = CrowdsaleStage.preICO;\n\n\t/**\n\t * @dev Event signaling that a number of addresses have been approved for KYC\n\t */\n\tevent ApprovedKYCAddresses (address indexed _appovedByAddress, uint256 _numberOfApprovals);\n\n\t/**\n\t * @dev Event signaling that a number of addresses have been revoked from KYC\n\t */\n\tevent RevokedKYCAddresses (address indexed _revokedByAddress, uint256 _numberOfRevokals);\n\n\t/**\n\t * @dev Event signalling that tokens have been claimed from the crowdsale\n\t */\n\tevent TokensClaimed (address indexed _claimingAddress, uint256 _tokensClaimed);\n\n\t/**\n\t * @dev Event signaling that tokens were sold and how many were sold\n\t */\n\tevent TokensSold(address indexed _beneficiary, uint256 _tokensSold);\n\n\t/**\n\t * @dev Event signaling that toke burn approval has been changed\n\t */\n\tevent TokenRefundApprovalChanged(address indexed _approvingAddress, bool tokenBurnApproved);\n\n\t/**\n\t * @dev Event signaling that token burn approval has been changed\n\t */\n\tevent CrowdsaleStageChanged(address indexed _changingAddress, uint _newStageValue);\n\n\t/**\n\t * @dev Event signaling that crowdsale tokens have been burned\n\t */\n\tevent CrowdsaleTokensRefunded(address indexed _refundingToAddress, uint256 _numberOfTokensBurned);\n\n\t/**\n\t * @dev SparkleTokenCrowdsale Contract contructor\n\t */\n\tconstructor(ERC20 _tokenAddress, uint256 _tokenRate, uint256 _tokenCap, uint256 _startTime, uint256 _endTime, address _depositWallet, bool _kycRequired)\n\tpublic\n\tCrowdsale(_tokenRate, _depositWallet, _tokenAddress)\n\tTimedCrowdsale(_startTime, _endTime)\n\tMultiOwnable()\n\tPausable()\n\t{ \n\t\ttokenAddress      = _tokenAddress;\n\t\ttokenRate         = _tokenRate;\n\t\ttokenCap          = _tokenCap;\n\t\tstartTime         = _startTime;\n\t\tendTime           = _endTime;\n\t\tdepositWallet     = _depositWallet;\n\t\tkycRequired       = _kycRequired;\n\t\trefundRemainingOk = false;\n\t}\n\n\t/**\n\t * @dev claimPendingTokens() provides users with a function to receive their purchase tokens\n\t * after their KYC Verification\n\t */\n\tfunction claimTokens()\n\twhenNotPaused\n\tonlyWhileOpen\n\tpublic\n\t{\n\t\t// Ensure calling address is not address(0)\n\t\trequire(msg.sender != address(0), \"Invalid address specified: address(0)\");\n\t\t// Obtain a copy of the caller's order record\n\t\tOrderBook storage order = orders[msg.sender];\n\t\t// Ensure caller has been KYC Verified\n\t\trequire(order.kycVerified, \"Address attempting to claim tokens is not KYC Verified.\");\n\t\t// Ensure caller has pending tokens to claim\n\t\trequire(order.pendingTokens > 0, \"Address does not have any pending tokens to claim.\");\n\t\t// For security sake grab the pending token value\n\t\tuint256 localPendingTokens = order.pendingTokens;\n\t\t// zero out pendingTokens to prevent potential re-entrancy vulnverability\n\t\torder.pendingTokens = 0;\n\t\t// Deliver the callers tokens\n\t\t_deliverTokens(msg.sender, localPendingTokens);\n\t\t// Emit event\n\t\temit TokensClaimed(msg.sender, localPendingTokens);\n\t}\n\n\t/**\n\t * @dev getExchangeRate() provides a public facing manner in which to \n\t * determine the current rate of exchange in the crowdsale\n\t * @param _weiAmount is the amount of wei to purchase tokens with\n\t * @return number of tokens the specified wei amount would purchase\n\t */\n\tfunction getExchangeRate(uint256 _weiAmount)\n\twhenNotPaused\n\tonlyWhileOpen\n\tpublic\n\tview\n\treturns (uint256)\n\t{\n\t\tif (crowdsaleStage == CrowdsaleStage.preICO) {\n\t\t\t// Ensure _weiAmount is > than current stage minimum\n\t\t\trequire(_weiAmount >= 1 ether, \"PreICO minimum ether required: 1 ETH.\");\n\t\t}\n\t\telse if (crowdsaleStage == CrowdsaleStage.bonusICO || crowdsaleStage == CrowdsaleStage.mainICO) {\n\t\t\t// Ensure _weiAmount is > than current stage minimum\n\t\t\trequire(_weiAmount >= 500 finney, \"bonusICO/mainICO minimum ether required: 0.5 ETH.\");\n\t\t}\n\n\t\t// Calculate the number of tokens this amount of wei is worth\n\t\tuint256 tokenAmount = _getTokenAmount(_weiAmount);\n\t\t// Ensure the number of tokens requests will not exceed available tokens\n\t\trequire(getRemainingTokens() >= tokenAmount, \"Specified wei value woudld exceed amount of tokens remaining.\");\n\t\t// Calculate and return the token amount this amount of wei is worth (includes bonus factor)\n\t\treturn tokenAmount;\n\t}\n\n\t/**\n\t * @dev getRemainingTokens() provides function to return the current remaining token count\n\t * @return number of tokens remaining in the crowdsale to be sold\n\t */\n\tfunction getRemainingTokens()\n\twhenNotPaused\n\tpublic\n\tview\n\treturns (uint256)\n\t{\n\t\t// Return the balance of the contract (IE: tokenCap - tokensSold)\n\t\treturn tokenCap.sub(tokensSold);\n\t}\n\n\t/**\n\t * @dev refundRemainingTokens provides functionn to refund remaining tokens to the specified address\n\t * @param _addressToRefund is the address in which the remaining tokens will be refunded to\n\t */\n\tfunction refundRemainingTokens(address _addressToRefund)\n\tonlyOwner\n\twhenNotPaused\n\tpublic\n\t{\n\t\t// Ensure the specified address is not address(0)\n\t\trequire(_addressToRefund != address(0), \"Specified address is invalid [0x0]\");\n\t\t// Ensure the crowdsale has closed before burning tokens\n\t\trequire(hasClosed(), \"Crowdsale must be finished to burn tokens.\");\n\t\t// Ensure that step-1 of the burning process is satisfied (owner set to true)\n\t\trequire(refundRemainingOk, \"Crowdsale remaining token refund is disabled.\");\n\t\tuint256 tempBalance = token().balanceOf(this);\n\t\t// Transfer the remaining tokens to specified address\n\t\t_deliverTokens(_addressToRefund, tempBalance);\n\t\t// Emit event\n\t\temit CrowdsaleTokensRefunded(_addressToRefund, tempBalance);\n\t}\n\n\t/**\n\t * @dev approveRemainingTokenRefund approves the function to withdraw any remaining tokens\n\t * after the crowdsale ends\n\t * @dev This was put in place as a two-step process to burn tokens so burning was secure\n\t */\n\tfunction approveRemainingTokenRefund()\n\tonlyOwner\n\twhenNotPaused\n\tpublic\n\t{\n\t\t// Ensure calling address is not address(0)\n\t\trequire(msg.sender != address(0), \"Calling address invalid [0x0]\");\n\t\t// Ensure the crowdsale has closed before approving token burning\n\t\trequire(hasClosed(), \"Token burn approval can only be set after crowdsale closes\");\n\t\trefundRemainingOk = true;\n\t\temit TokenRefundApprovalChanged(msg.sender, refundRemainingOk);\n\t}\n\n\t/**\n\t * @dev setStage() sets the current crowdsale stage to the specified value\n\t * @param _newStageValue is the new stage to be changed to\n\t */\n\tfunction changeCrowdsaleStage(uint _newStageValue)\n\tonlyOwner\n\twhenNotPaused\n\tonlyWhileOpen\n\tpublic\n\t{\n\t\t// Create temporary stage variable\n\t\tCrowdsaleStage _stage;\n\t\t// Determine if caller is trying to set: preICO\n\t\tif (uint(CrowdsaleStage.preICO) == _newStageValue) {\n\t\t\t// Set the internal stage to the new value\n\t\t\t_stage = CrowdsaleStage.preICO;\n\t\t}\n\t\t// Determine if caller is trying to set: bonusICO\n\t\telse if (uint(CrowdsaleStage.bonusICO) == _newStageValue) {\n\t\t\t// Set the internal stage to the new value\n\t\t\t_stage = CrowdsaleStage.bonusICO;\n\t\t}\n\t\t// Determine if caller is trying to set: mainICO\n\t\telse if (uint(CrowdsaleStage.mainICO) == _newStageValue) {\n\t\t\t// Set the internal stage to the new value\n\t\t\t_stage = CrowdsaleStage.mainICO;\n\t\t}\n\t\telse {\n\t\t\trevert(\"Invalid stage selected\");\n\t\t}\n\n\t\t// Update the internal crowdsale stage to the new stage\n\t\tcrowdsaleStage = _stage;\n\t\t// Emit event\n\t\temit CrowdsaleStageChanged(msg.sender, uint(_stage));\n\t}\n\n\t/**\n\t * @dev isAddressKYCVerified() checks the KYV Verification status of the specified address\n\t * @param _addressToLookuo address to check status of KYC Verification\n\t * @return kyc status of the specified address \n\t */\n\tfunction isKYCVerified(address _addressToLookuo) \n\twhenNotPaused\n\tonlyWhileOpen\n\tpublic\n\tview\n\treturns (bool)\n\t{\n\t\t// Ensure _addressToLookuo is not address(0)\n\t\trequire(_addressToLookuo != address(0), \"Invalid address specified: address(0)\");\n\t\t// Obtain the addresses order record\n\t\tOrderBook storage order = orders[_addressToLookuo];\n\t\t// Return the JYC Verification status for the specified address\n\t\treturn order.kycVerified;\n\t}\n\n\t/**\n\t * @dev Approve in bulk the specified addfresses indicating they were KYC Verified\n\t * @param _addressesForApproval is a list of addresses that are to be KYC Verified\n\t */\n\tfunction bulkApproveKYCAddresses(address[] _addressesForApproval) \n\tonlyOwner\n\twhenNotPaused\n\tonlyWhileOpen\n\tpublic\n\t{\n\n\t\t// Ensure that there are any address(es) in the provided array\n\t\trequire(_addressesForApproval.length > 0, \"Specified address array is empty\");\n\t\t// Interate through all addresses provided\n\t\tfor (uint i = 0; i <_addressesForApproval.length; i++) {\n\t\t\t// Approve this address using the internal function\n\t\t\t_approveKYCAddress(_addressesForApproval[i]);\n\t\t}\n\n\t\t// Emit event indicating address(es) have been approved for KYC Verification\n\t\temit ApprovedKYCAddresses(msg.sender, _addressesForApproval.length);\n\t}\n\n\t/**\n\t * @dev Revoke in bulk the specified addfresses indicating they were denied KYC Verified\n\t * @param _addressesToRevoke is a list of addresses that are to be KYC Verified\n\t */\n\tfunction bulkRevokeKYCAddresses(address[] _addressesToRevoke) \n\tonlyOwner\n\twhenNotPaused\n\tonlyWhileOpen\n\tpublic\n\t{\n\t\t// Ensure that there are any address(es) in the provided array\n\t\trequire(_addressesToRevoke.length > 0, \"Specified address array is empty\");\n\t\t// Interate through all addresses provided\n\t\tfor (uint i = 0; i <_addressesToRevoke.length; i++) {\n\t\t\t// Approve this address using the internal function\n\t\t\t_revokeKYCAddress(_addressesToRevoke[i]);\n\t\t}\n\n\t\t// Emit event indicating address(es) have been revoked for KYC Verification\n\t\temit RevokedKYCAddresses(msg.sender, _addressesToRevoke.length);\n\t}\n\n\t/**\n\t * @dev tokensPending() provides owners the function to retrieve an addresses pending\n\t * token amount\n\t * @param _addressToLookup is the address to return the pending token value for\n\t * @return the number of pending tokens waiting to be claimed from specified address\n\t */\n\tfunction tokensPending(address _addressToLookup)\n\tonlyOwner\n\twhenNotPaused\n\tonlyWhileOpen\n\tpublic\n\tview\n\treturns (uint256)\n\t{\n\t\t// Ensure specified address is not address(0)\n\t\trequire(_addressToLookup != address(0), \"Specified address is invalid [0x0]\");\n\t\t// Obtain the order for specified address\n\t\tOrderBook storage order = orders[_addressToLookup];\n\t\t// Return the pendingTokens amount\n\t\treturn order.pendingTokens;\n\t}\n\n\t/**\n\t * @dev contributionAmount() provides owners the function to retrieve an addresses total\n\t * contribution amount in eth\n\t * @param _addressToLookup is the address to return the contribution amount value for\n\t * @return the number of ether contribured to the crowdsale by specified address\n\t */\n\tfunction contributionAmount(address _addressToLookup)\n\tonlyOwner\n\twhenNotPaused\n\tonlyWhileOpen\n\tpublic\n\tview\n\treturns (uint256)\n\t{\n\t\t// Ensure specified address is not address(0)\n\t\trequire(_addressToLookup != address(0), \"Specified address is Invalid [0x0]\");\n\t\t// Obtain the order for specified address\n\t\tOrderBook storage order = orders[_addressToLookup];\n\t\t// Return the contribution amount in wei\n\t\treturn order.weiAmount;\n\t}\n\n\t/**\n\t * @dev _approveKYCAddress provides the function to approve the specified address \n\t * indicating KYC Verified\n\t * @param _addressToApprove of the user that is being verified\n\t */\n\tfunction _approveKYCAddress(address _addressToApprove) \n\tonlyOwner\n\tinternal\n\t{\n\t\t// Ensure that _addressToApprove is not address(0)\n\t\trequire(_addressToApprove != address(0), \"Invalid address specified: address(0)\");\n\t\t// Get this addesses contribution record\n\t\tOrderBook storage order = orders[_addressToApprove];\n\t\t// Set the contribution record to indicate address has been kyc verified\n\t\torder.kycVerified = true;\n\t}\n\n\t/**\n\t * @dev _revokeKYCAddress() provides the function to revoke previously\n\t * granted KYC verification in cases of fraud or false/invalid KYC data\n\t * @param _addressToRevoke is the address to remove KYC verification from\n\t */\n\tfunction _revokeKYCAddress(address _addressToRevoke)\n\tonlyOwner\n\tinternal\n\t{\n\t\t// Ensure address is not address(0)\n\t\trequire(_addressToRevoke != address(0), \"Invalid address specified: address(0)\");\n\t\t// Obtain a copy of this addresses contribution record\n\t\tOrderBook storage order = orders[_addressToRevoke];\n\t\t// Revoke this addresses KYC verification\n\t\torder.kycVerified = false;\n\t}\n\n\t/**\n\t * @dev _rate() provides the function of calcualting the rate based on crowdsale stage\n\t * @param _weiAmount indicated the amount of ether intended to use for purchase\n\t * @return number of tokens worth based on specified Wei value\n\t */\n\tfunction _rate(uint _weiAmount)\n\tinternal\n\tview\n\treturns (uint256)\n\t{\n\t\trequire(_weiAmount > 0, \"Specified wei amoount must be > 0\");\n\n\t\t// Determine if the current operation stage of the crowdsale is preICO\n\t\tif (crowdsaleStage == CrowdsaleStage.preICO)\n\t\t{\n\t\t\t// Determine if the purchase is >= 21 ether\n\t\t\tif (_weiAmount >= 21 ether) { // 20% bonus\n\t\t\t\treturn 480e8;\n\t\t\t}\n\t\t\t\n\t\t\t// Determine if the purchase is >= 11 ether\n\t\t\tif (_weiAmount >= 11 ether) { // 15% bonus\n\t\t\t\treturn 460e8;\n\t\t\t}\n\t\t\t\n\t\t\t// Determine if the purchase is >= 5 ether\n\t\t\tif (_weiAmount >= 5 ether) { // 10% bonus\n\t\t\t\treturn 440e8;\n\t\t\t}\n\n\t\t}\n\t\telse\n\t\t// Determine if the current operation stage of the crowdsale is bonusICO\n\t\tif (crowdsaleStage == CrowdsaleStage.bonusICO)\n\t\t{\n\t\t\t// Determine if the purchase is >= 21 ether\n\t\t\tif (_weiAmount >= 21 ether) { // 10% bonus\n\t\t\t\treturn 440e8;\n\t\t\t}\n\t\t\telse if (_weiAmount >= 11 ether) { // 7% bonus\n\t\t\t\treturn 428e8;\n\t\t\t}\n\t\t\telse\n\t\t\tif (_weiAmount >= 5 ether) { // 5% bonus\n\t\t\t\treturn 420e8;\n\t\t\t}\n\n\t\t}\n\n\t\t// Rate is either < bounus or is main sale so return base rate only\n\t\treturn rate();\n\t}\n\n\t/**\n\t * @dev Performs token to wei converstion calculations based on crowdsale specification\n\t * @param _weiAmount to spend\n\t * @return number of tokens purchasable for the specified _weiAmount at crowdsale stage rates\n\t */\n\tfunction _getTokenAmount(uint256 _weiAmount)\n\twhenNotPaused\n\tinternal\n\tview\n\treturns (uint256)\n\t{\n\t\t// Get the current rate set in the constructor and calculate token units per wei\n\t\tuint256 currentRate = _rate(_weiAmount);\n\t\t// Calculate the total number of tokens buyable at based rate (before adding bonus)\n\t\tuint256 sparkleToBuy = currentRate.mul(_weiAmount).div(10e17);\n\t\t// Return proposed token amount\n\t\treturn sparkleToBuy;\n\t}\n\n\t/**\n\t * @dev _preValidatePurchase provides the functionality of pre validating a potential purchase\n\t * @param _beneficiary is the address that is currently purchasing tokens\n\t * @param _weiAmount is the number of tokens this address is attempting to purchase\n\t */\n\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) \n\twhenNotPaused\n\tinternal\n\tview\n\t{\n\t\t// Call into the parent validation to ensure _beneficiary and _weiAmount are valid\n\t\tsuper._preValidatePurchase(_beneficiary, _weiAmount);\n\t\t// Calculate amount of tokens for the specified _weiAmount\n\t\tuint256 requestedTokens = getExchangeRate(_weiAmount);\n\t\t// Calculate the currently sold tokens\n\t\tuint256 tempTotalTokensSold = tokensSold;\n\t\t// Incrememt total tokens\t\t\n\t\ttempTotalTokensSold.add(requestedTokens);\n\t\t// Ensure total max token cap is > tempTotalTokensSold\n\t\trequire(tempTotalTokensSold <= tokenCap, \"Requested wei amount will exceed the max token cap and was not accepted.\");\n\t\t// Ensure that requested tokens will not go over the remaining token balance\n\t\trequire(requestedTokens <= getRemainingTokens(), \"Requested tokens would exceed tokens available and was not accepted.\");\n\t\t// Obtain the order record for _beneficiary if one exists\n\t\tOrderBook storage order = orders[_beneficiary];\n\t\t// Ensure this address has been kyc validated\n\t\trequire(order.kycVerified, \"Address attempting to purchase is not KYC Verified.\");\n\t\t// Update this addresses order to reflect the purchase and ether spent\n\t\torder.weiAmount = order.weiAmount.add(_weiAmount);\n\t\torder.pendingTokens = order.pendingTokens.add(requestedTokens);\n\t\t// increment totalTokens sold\n\t\ttokensSold = tokensSold.add(requestedTokens);\n\t\t// Emit event\n\t\temit TokensSold(_beneficiary, requestedTokens);\n\t}\n\n\t/**\n\t * @dev _processPurchase() is overridden and will be called by OpenZep v2.0 internally\n\t * @param _beneficiary is the address that is currently purchasing tokens\n\t * @param _tokenAmount is the number of tokens this address is attempting to purchase\n\t */\n\tfunction _processPurchase(address _beneficiary, uint256 _tokenAmount)\n\twhenNotPaused\n\tinternal\n\t{\n\t\t// We do not call the base class _processPurchase() functions. This is needed here or the base\n\t\t// classes function will be called.\n\t}\n\n}\n\n\n// File: contracts/SparkleCrowdsale.sol\n\ncontract SparkleCrowdsale is SparkleBaseCrowdsale {\n\n  // Token contract address \n  address public initTokenAddress = 0x4b7aD3a56810032782Afce12d7d27122bDb96efF;\n  // Crowdsale specification\n  uint256 public initTokenRate     = 400e8;\n  uint256 public initTokenCap      = 19698000e8;\n  uint256 public initStartTime     = now;\n  uint256 public initEndTime       = now + 12 weeks; // Set this accordingly as it cannot be changed\n  address public initDepositWallet = 0x0926a84C83d7B88338588Dca2729b590D787FA34;\n  bool public initKYCRequired      = true;\n\n  constructor() \n\tSparkleBaseCrowdsale(ERC20(initTokenAddress), initTokenRate, initTokenCap, initStartTime, initEndTime, initDepositWallet, initKYCRequired)\n\tpublic\n\t{\n\t}\n\n}",
  "bytecode": ""
}