{
  "address": "0xc0829421c1d260bd3cb3e0f06cfe2d52db2ce315",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Bancor: Ether Token 2",
  "contractName": "EtherToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-10\n*/\n\npragma solidity ^0.4.11;\n\n/*\n    Utilities & Common Modifiers\n*/\ncontract Utils {\n    /**\n        constructor\n    */\n    function Utils() {\n    }\n\n    // verifies that an amount is greater than zero\n    modifier greaterThanZero(uint256 _amount) {\n        require(_amount > 0);\n        _;\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        require(_address != 0x0);\n        _;\n    }\n\n    // verifies that the address is different than this contract address\n    modifier notThis(address _address) {\n        require(_address != address(this));\n        _;\n    }\n\n    // Overflow protected math functions\n\n    /**\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\n\n        @param _x   value 1\n        @param _y   value 2\n\n        @return sum\n    */\n    function safeAdd(uint256 _x, uint256 _y) internal returns (uint256) {\n        uint256 z = _x + _y;\n        assert(z >= _x);\n        return z;\n    }\n\n    /**\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n\n        @param _x   minuend\n        @param _y   subtrahend\n\n        @return difference\n    */\n    function safeSub(uint256 _x, uint256 _y) internal returns (uint256) {\n        assert(_x >= _y);\n        return _x - _y;\n    }\n\n    /**\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n\n        @param _x   factor 1\n        @param _y   factor 2\n\n        @return product\n    */\n    function safeMul(uint256 _x, uint256 _y) internal returns (uint256) {\n        uint256 z = _x * _y;\n        assert(_x == 0 || z / _x == _y);\n        return z;\n    }\n}\n\n/*\n    Owned contract interface\n*/\ncontract IOwned {\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n    function owner() public constant returns (address owner) { owner; }\n\n    function transferOwnership(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\n/*\n    Provides support and utilities for contract ownership\n*/\ncontract Owned is IOwned {\n    address public owner;\n    address public newOwner;\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n\n    /**\n        @dev constructor\n    */\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    /**\n        @dev allows transferring the contract ownership\n        the new owner still needs to accept the transfer\n        can only be called by the contract owner\n\n        @param _newOwner    new contract owner\n    */\n    function transferOwnership(address _newOwner) public ownerOnly {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    /**\n        @dev used by a new owner to accept an ownership transfer\n    */\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n}\n\n/*\n    Token Holder interface\n*/\ncontract ITokenHolder is IOwned {\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\n}\n\n/*\n    We consider every contract to be a 'token holder' since it's currently not possible\n    for a contract to deny receiving tokens.\n\n    The TokenHolder's contract sole purpose is to provide a safety mechanism that allows\n    the owner to send tokens that were sent to the contract by mistake back to their sender.\n*/\ncontract TokenHolder is ITokenHolder, Owned, Utils {\n    /**\n        @dev constructor\n    */\n    function TokenHolder() {\n    }\n\n    /**\n        @dev withdraws tokens held by the contract and sends them to an account\n        can only be called by the owner\n\n        @param _token   ERC20 token contract address\n        @param _to      account to receive the new amount\n        @param _amount  amount to withdraw\n    */\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount)\n        public\n        ownerOnly\n        validAddress(_token)\n        validAddress(_to)\n        notThis(_to)\n    {\n        assert(_token.transfer(_to, _amount));\n    }\n}\n\n/*\n    ERC20 Standard Token interface\n*/\ncontract IERC20Token {\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n    function name() public constant returns (string name) { name; }\n    function symbol() public constant returns (string symbol) { symbol; }\n    function decimals() public constant returns (uint8 decimals) { decimals; }\n    function totalSupply() public constant returns (uint256 totalSupply) { totalSupply; }\n    function balanceOf(address _owner) public constant returns (uint256 balance) { _owner; balance; }\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) { _owner; _spender; remaining; }\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n}\n\n/**\n    ERC20 Standard Token implementation\n*/\ncontract ERC20Token is IERC20Token, Utils {\n    string public standard = 'Token 0.1';\n    string public name = '';\n    string public symbol = '';\n    uint8 public decimals = 0;\n    uint256 public totalSupply = 0;\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /**\n        @dev constructor\n\n        @param _name        token name\n        @param _symbol      token symbol\n        @param _decimals    decimal points, for display purposes\n    */\n    function ERC20Token(string _name, string _symbol, uint8 _decimals) {\n        require(bytes(_name).length > 0 && bytes(_symbol).length > 0); // validate input\n\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    /**\n        @dev send coins\n        throws on any error rather then return a false flag to minimize user errors\n\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transfer(address _to, uint256 _value)\n        public\n        validAddress(_to)\n        returns (bool success)\n    {\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n        @dev an account/contract attempts to get the coins\n        throws on any error rather then return a false flag to minimize user errors\n\n        @param _from    source address\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        validAddress(_from)\n        validAddress(_to)\n        returns (bool success)\n    {\n        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n        @dev allow another account/contract to spend some tokens on your behalf\n        throws on any error rather then return a false flag to minimize user errors\n\n        also, to minimize the risk of the approve/transferFrom attack vector\n        (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice\n        in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value\n\n        @param _spender approved address\n        @param _value   allowance amount\n\n        @return true if the approval was successful, false if it wasn't\n    */\n    function approve(address _spender, uint256 _value)\n        public\n        validAddress(_spender)\n        returns (bool success)\n    {\n        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n}\n\n/*\n    Ether Token interface\n*/\ncontract IEtherToken is ITokenHolder, IERC20Token {\n    function deposit() public payable;\n    function withdraw(uint256 _amount) public;\n    function withdrawTo(address _to, uint256 _amount);\n}\n\n/**\n    Ether tokenization contract\n\n    'Owned' is specified here for readability reasons\n*/\ncontract EtherToken is IEtherToken, Owned, ERC20Token, TokenHolder {\n    // triggered when the total supply is increased\n    event Issuance(uint256 _amount);\n    // triggered when the total supply is decreased\n    event Destruction(uint256 _amount);\n\n    /**\n        @dev constructor\n    */\n    function EtherToken()\n        ERC20Token('Ether Token', 'ETH', 18) {\n    }\n\n    /**\n        @dev deposit ether in the account\n    */\n    function deposit() public payable {\n        balanceOf[msg.sender] = safeAdd(balanceOf[msg.sender], msg.value); // add the value to the account balance\n        totalSupply = safeAdd(totalSupply, msg.value); // increase the total supply\n\n        Issuance(msg.value);\n        Transfer(this, msg.sender, msg.value);\n    }\n\n    /**\n        @dev withdraw ether from the account\n\n        @param _amount  amount of ether to withdraw\n    */\n    function withdraw(uint256 _amount) public {\n        withdrawTo(msg.sender, _amount);\n    }\n\n    /**\n        @dev withdraw ether from the account to a target account\n\n        @param _to      account to receive the ether\n        @param _amount  amount of ether to withdraw\n    */\n    function withdrawTo(address _to, uint256 _amount)\n        public\n        notThis(_to)\n    {\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _amount); // deduct the amount from the account balance\n        totalSupply = safeSub(totalSupply, _amount); // decrease the total supply\n        _to.transfer(_amount); // send the amount to the target account\n\n        Transfer(msg.sender, this, _amount);\n        Destruction(_amount);\n    }\n\n    // ERC20 standard method overrides with some extra protection\n\n    /**\n        @dev send coins\n        throws on any error rather then return a false flag to minimize user errors\n\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transfer(address _to, uint256 _value)\n        public\n        notThis(_to)\n        returns (bool success)\n    {\n        assert(super.transfer(_to, _value));\n        return true;\n    }\n\n    /**\n        @dev an account/contract attempts to get the coins\n        throws on any error rather then return a false flag to minimize user errors\n\n        @param _from    source address\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        notThis(_to)\n        returns (bool success)\n    {\n        assert(super.transferFrom(_from, _to, _value));\n        return true;\n    }\n\n    /**\n        @dev deposit ether in the account\n    */\n    function() public payable {\n        deposit();\n    }\n}",
  "bytecode": "606060405260408051908101604052600981527f546f6b656e20302e310000000000000000000000000000000000000000000000602082015260029080516200004d929160200190620001a5565b50602060405190810160405260008152600390805162000072929160200190620001a5565b50602060405190810160405260008152600490805162000097929160200190620001a5565b506005805460ff1916905560006006553415620000b357600080fd5b5b5b604080519081016040908152600b82527f457468657220546f6b656e00000000000000000000000000000000000000000060208301528051908101604052600381527f4554480000000000000000000000000000000000000000000000000000000000602082015260125b5b5b60008054600160a060020a03191633600160a060020a03161790555b5b6000835111801562000152575060008251115b15156200015e57600080fd5b600383805162000173929160200190620001a5565b50600482805162000189929160200190620001a5565b506005805460ff191660ff83161790555b5050505b5b6200024f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001e857805160ff191683800117855562000218565b8280016001018555821562000218579182015b8281111562000218578251825591602001919060010190620001fb565b5b50620002279291506200022b565b5090565b6200024c91905b8082111562000227576000815560010162000232565b5090565b90565b610ecb806200025f6000396000f300606060405236156100f95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610105578063095ea7b31461019057806318160ddd146101c6578063205c2878146101eb57806323b872dd1461020f5780632e1a7d4d1461024b578063313ce567146102635780635a3b7e421461028c5780635e35359e1461031757806370a082311461034157806379ba5097146103725780638da5cb5b1461038757806395d89b41146103b6578063a9059cbb14610441578063d0e30db0146100f9578063d4ee1d9014610481578063dd62ed3e146104b0578063f2fde38b146104e7575b5b610102610508565b5b005b341561011057600080fd5b6101186105bf565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101555780820151818401525b60200161013c565b50505050905090810190601f1680156101825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019b57600080fd5b6101b2600160a060020a036004351660243561065d565b604051901515815260200160405180910390f35b34156101d157600080fd5b6101d961071d565b60405190815260200160405180910390f35b34156101f657600080fd5b610102600160a060020a0360043516602435610723565b005b341561021a57600080fd5b6101b2600160a060020a0360043581169060243516604435610831565b604051901515815260200160405180910390f35b341561025657600080fd5b610102600435610876565b005b341561026e57600080fd5b610276610884565b60405160ff909116815260200160405180910390f35b341561029757600080fd5b61011861088d565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101555780820151818401525b60200161013c565b50505050905090810190601f1680156101825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561032257600080fd5b610102600160a060020a036004358116906024351660443561092b565b005b341561034c57600080fd5b6101d9600160a060020a0360043516610a37565b60405190815260200160405180910390f35b341561037d57600080fd5b610102610a49565b005b341561039257600080fd5b61039a610af1565b604051600160a060020a03909116815260200160405180910390f35b34156103c157600080fd5b610118610b00565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101555780820151818401525b60200161013c565b50505050905090810190601f1680156101825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561044c57600080fd5b6101b2600160a060020a0360043516602435610b9e565b604051901515815260200160405180910390f35b610102610508565b005b341561048c57600080fd5b61039a610be1565b604051600160a060020a03909116815260200160405180910390f35b34156104bb57600080fd5b6101d9600160a060020a0360043581169060243516610bf0565b60405190815260200160405180910390f35b34156104f257600080fd5b610102600160a060020a0360043516610c0d565b005b600160a060020a03331660009081526007602052604090205461052b9034610c6d565b600160a060020a0333166000908152600760205260409020556006546105519034610c6d565b6006557f9386c90217c323f58030f9dadcbc938f807a940f4ff41cd4cead9562f5da7dc33460405190815260200160405180910390a133600160a060020a031630600160a060020a0316600080516020610e808339815191523460405190815260200160405180910390a35b565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106555780601f1061062a57610100808354040283529160200191610655565b820191906000526020600020905b81548152906001019060200180831161063857829003601f168201915b505050505081565b600082600160a060020a038116151561067557600080fd5b8215806106a55750600160a060020a03338116600090815260086020908152604080832093881683529290522054155b15156106b057600080fd5b600160a060020a03338116600081815260086020908152604080832094891680845294909152908190208690557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a3600191505b5b5092915050565b60065481565b8130600160a060020a031681600160a060020a03161415151561074557600080fd5b600160a060020a0333166000908152600760205260409020546107689083610c87565b600160a060020a03331660009081526007602052604090205560065461078e9083610c87565b600655600160a060020a03831682156108fc0283604051600060405180830381858888f1935050505015156107c257600080fd5b30600160a060020a031633600160a060020a0316600080516020610e808339815191528460405190815260200160405180910390a37f9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd34538260405190815260200160405180910390a15b5b505050565b60008230600160a060020a031681600160a060020a03161415151561085557600080fd5b610860858585610c9e565b151561086857fe5b600191505b5b509392505050565b6108803382610723565b5b50565b60055460ff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106555780601f1061062a57610100808354040283529160200191610655565b820191906000526020600020905b81548152906001019060200180831161063857829003601f168201915b505050505081565b60005433600160a060020a0390811691161461094357fe5b82600160a060020a038116151561095957600080fd5b82600160a060020a038116151561096f57600080fd5b8330600160a060020a031681600160a060020a03161415151561099157600080fd5b85600160a060020a031663a9059cbb86866000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610a0757600080fd5b6102c65a03f11515610a1857600080fd5b505050604051805190501515610a2a57fe5b5b5b505b505b505b505050565b60076020526000908152604090205481565b60015433600160a060020a03908116911614610a6457600080fd5b6000546001547f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a91600160a060020a039081169116604051600160a060020a039283168152911660208201526040908101905180910390a1600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038416179091551690555b565b600054600160a060020a031681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106555780601f1061062a57610100808354040283529160200191610655565b820191906000526020600020905b81548152906001019060200180831161063857829003601f168201915b505050505081565b60008230600160a060020a031681600160a060020a031614151515610bc257600080fd5b610bcc8484610dc2565b1515610bd457fe5b600191505b5b5092915050565b600154600160a060020a031681565b600860209081526000928352604080842090915290825290205481565b60005433600160a060020a03908116911614610c2557fe5b600054600160a060020a0382811691161415610c4057600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600082820183811015610c7c57fe5b8091505b5092915050565b600081831015610c9357fe5b508082035b92915050565b600083600160a060020a0381161515610cb657600080fd5b83600160a060020a0381161515610ccc57600080fd5b600160a060020a0380871660009081526008602090815260408083203390941683529290522054610cfd9085610c87565b600160a060020a038088166000818152600860209081526040808320339095168352938152838220949094559081526007909252902054610d3e9085610c87565b600160a060020a038088166000908152600760205260408082209390935590871681522054610d6d9085610c6d565b600160a060020a0380871660008181526007602052604090819020939093559190881690600080516020610e808339815191529087905190815260200160405180910390a3600192505b5b505b509392505050565b600082600160a060020a0381161515610dda57600080fd5b600160a060020a033316600090815260076020526040902054610dfd9084610c87565b600160a060020a033381166000908152600760205260408082209390935590861681522054610e2c9084610c6d565b600160a060020a038086166000818152600760205260409081902093909355913390911690600080516020610e808339815191529086905190815260200160405180910390a3600191505b5b50929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582051bdb7e5dfd46b1d719fbc0fc4ee0e2579654c20688c081ac7940e632f09b4760029"
}