{
  "address": "0x934296f39475cbdb4b1aff9b25f11fcdd0b22da8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RKRToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-06\n*/\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\npragma solidity ^0.4.24;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\npragma solidity ^0.4.24;\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n//File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n//File: contracts\\RKRToken.sol\n/**\n * @title RKR token\n *\n * @version 1.0\n * @author Rockerchain\n */\npragma solidity ^0.4.21;\n\n\n\n\n\n\ncontract RKRToken is ERC20, Ownable {\n    using SafeMath for uint256;\n    \n    string public constant name = \"RKRToken\";\n    string public constant symbol = \"RKR\";\n    uint8 public constant decimals = 18;\n    uint256 public constant UNLOCKED_SUPPLY = 36e6 * 1e18;\n    uint256 public constant TEAM_SUPPLY = 10e6 * 1e18;\n    uint256 public constant ADVISOR_SUPPLY = 10e6 * 1e18;\n    uint256 public constant RESERVED_SUPPLY = 44e6 * 1e18;\n    bool public ADVISOR_SUPPLY_INITIALIZED;\n    bool public TEAM_SUPPLY_INITIALIZED;\n    bool public RESERVED_SUPPLY_INITIALIZED;\n\n     /**\n     * @dev Constructor of RKRToken \n     */\n    constructor() public {\n        _mint(msg.sender, UNLOCKED_SUPPLY);\n        ADVISOR_SUPPLY_INITIALIZED = false;\n        TEAM_SUPPLY_INITIALIZED = false;\n        RESERVED_SUPPLY_INITIALIZED = false;\n    }\n\n     /**\n     * @dev Mints and initialize Advisor reserve \n     */\n    function initializeAdvisorVault(address advisorVault) public onlyOwner {\n        require(ADVISOR_SUPPLY_INITIALIZED == false);\n        ADVISOR_SUPPLY_INITIALIZED = true;\n        _mint(advisorVault, ADVISOR_SUPPLY);\n    }\n\n     /**\n     * @dev Mints and initialize Team reserve \n     */\n    function initializeTeamVault(address teamVault) public onlyOwner {\n        require(TEAM_SUPPLY_INITIALIZED == false);\n        TEAM_SUPPLY_INITIALIZED = true;\n        _mint(teamVault, TEAM_SUPPLY);\n    }\n\n     /**\n     * @dev Mints and initialize Reserved reserve \n     */\n    function initializeReservedVault(address reservedVault) public onlyOwner {\n        require(RESERVED_SUPPLY_INITIALIZED == false);\n        RESERVED_SUPPLY_INITIALIZED = true;\n        _mint(reservedVault, RESERVED_SUPPLY);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060038054600160a060020a031916331790819055604051600160a060020a0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a361007b336a1dc74be914d16aa4000000640100000000610092810204565b6003805460a060020a62ffffff0219169055610163565b600160a060020a03821615156100a757600080fd5b6002546100c19082640100000000610b7b61014a82021704565b600255600160a060020a0382166000908152602081905260409020546100f49082640100000000610b7b61014a82021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008282018381101561015c57600080fd5b9392505050565b610ce8806101726000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301c5168b811461014d57806306fdde0314610174578063095ea7b3146101fe57806318160ddd1461023657806323b872dd1461024b578063313ce5671461027557806331a53e9a146102a057806339509351146102b557806350c2e4f6146102d95780635bd9597d146102ee57806370a0823114610303578063715018a6146103245780637413801a1461033b5780638da5cb5b1461035c5780638f32d59b1461038d5780638f5f0328146103a257806395d89b41146103b7578063a457c2d7146103cc578063a9059cbb146103f0578063ac32818714610414578063ad2d10b214610435578063b9c3a818146102d9578063dd62ed3e14610456578063e4b4b1f01461047d578063f2fde38b14610492575b600080fd5b34801561015957600080fd5b506101626104b3565b60408051918252519081900360200190f35b34801561018057600080fd5b506101896104c2565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c35781810151838201526020016101ab565b50505050905090810190601f1680156101f05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020a57600080fd5b50610222600160a060020a03600435166024356104f9565b604080519115158252519081900360200190f35b34801561024257600080fd5b50610162610577565b34801561025757600080fd5b50610222600160a060020a036004358116906024351660443561057d565b34801561028157600080fd5b5061028a61061a565b6040805160ff9092168252519081900360200190f35b3480156102ac57600080fd5b5061016261061f565b3480156102c157600080fd5b50610222600160a060020a036004351660243561062e565b3480156102e557600080fd5b506101626106de565b3480156102fa57600080fd5b506102226106ed565b34801561030f57600080fd5b50610162600160a060020a036004351661070e565b34801561033057600080fd5b50610339610729565b005b34801561034757600080fd5b50610339600160a060020a0360043516610793565b34801561036857600080fd5b5061037161081b565b60408051600160a060020a039092168252519081900360200190f35b34801561039957600080fd5b5061022261082a565b3480156103ae57600080fd5b5061022261083b565b3480156103c357600080fd5b5061018961085e565b3480156103d857600080fd5b50610222600160a060020a0360043516602435610895565b3480156103fc57600080fd5b50610222600160a060020a03600435166024356108e0565b34801561042057600080fd5b50610339600160a060020a03600435166108f6565b34801561044157600080fd5b50610339600160a060020a036004351661097e565b34801561046257600080fd5b50610162600160a060020a0360043581169060243516610a09565b34801561048957600080fd5b50610222610a34565b34801561049e57600080fd5b50610339600160a060020a0360043516610a56565b6a1dc74be914d16aa400000081565b60408051808201909152600881527f524b52546f6b656e000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561051057600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a03831660009081526001602090815260408083203384529091528120548211156105ad57600080fd5b600160a060020a03841660009081526001602090815260408083203384529091529020546105e1908363ffffffff610a7216565b600160a060020a0385166000908152600160209081526040808320338452909152902055610610848484610a89565b5060019392505050565b601281565b6a24655cc78b38d7ac00000081565b6000600160a060020a038316151561064557600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610679908363ffffffff610b7b16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6a084595161401484a00000081565b60035474010000000000000000000000000000000000000000900460ff1681565b600160a060020a031660009081526020819052604090205490565b61073161082a565b151561073c57600080fd5b600354604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36003805473ffffffffffffffffffffffffffffffffffffffff19169055565b61079b61082a565b15156107a657600080fd5b60035474010000000000000000000000000000000000000000900460ff16156107ce57600080fd5b6003805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055610818816a084595161401484a000000610b94565b50565b600354600160a060020a031690565b600354600160a060020a0316331490565b600354760100000000000000000000000000000000000000000000900460ff1681565b60408051808201909152600381527f524b520000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a03831615156108ac57600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610679908363ffffffff610a7216565b60006108ed338484610a89565b50600192915050565b6108fe61082a565b151561090957600080fd5b6003547501000000000000000000000000000000000000000000900460ff161561093257600080fd5b6003805475ff00000000000000000000000000000000000000000019167501000000000000000000000000000000000000000000179055610818816a084595161401484a000000610b94565b61098661082a565b151561099157600080fd5b600354760100000000000000000000000000000000000000000000900460ff16156109bb57600080fd5b6003805476ff000000000000000000000000000000000000000000001916760100000000000000000000000000000000000000000000179055610818816a24655cc78b38d7ac000000610b94565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6003547501000000000000000000000000000000000000000000900460ff1681565b610a5e61082a565b1515610a6957600080fd5b61081881610c3e565b60008083831115610a8257600080fd5b5050900390565b600160a060020a038316600090815260208190526040902054811115610aae57600080fd5b600160a060020a0382161515610ac357600080fd5b600160a060020a038316600090815260208190526040902054610aec908263ffffffff610a7216565b600160a060020a038085166000908152602081905260408082209390935590841681522054610b21908263ffffffff610b7b16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082820183811015610b8d57600080fd5b9392505050565b600160a060020a0382161515610ba957600080fd5b600254610bbc908263ffffffff610b7b16565b600255600160a060020a038216600090815260208190526040902054610be8908263ffffffff610b7b16565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a0381161515610c5357600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582027bb394b3ffaa7b76c33623e82d789021f7f83894f35826a12aaf9f780ebf94a0029"
}