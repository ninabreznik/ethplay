{
  "address": "0x49aec0752e68d0282db544c677f6ba407ba17ed7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Billionaire Token",
  "contractName": "XBLToken",
  "compilerVersion": "v0.4.14+commit.c2215d46",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-01\n*/\n\npragma solidity ^0.4.8;\n\n/* Billionaire Token (XBL) source code. */\n  \n contract XBLToken {\n     \n    // Get the total token supply\n  \n    // Triggered when tokens are transferred.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  \n    // Triggered whenever approve(address _spender, uint256 _value) is called.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /* This notifies clients about the XBL amount burned */\n    event Burn(address indexed from, uint256 value);\n    \n    // And we begin:\n    string public constant symbol = \"XBL\";\n    string public constant name = \"Billionaire Token\";\n    uint8 public constant decimals = 18;\n    uint256 _totalSupply = 3333333000000000000000000;    // 3,333,333 tokens with 18 decimal places.\n    uint256 _totalBurned = 0;                            // Total burned initially starts at 0.\n     \n    /* The owner of this contract (initial address) */\n    address public owner;\n  \n    /* Dictionary containing balances for each account */\n    mapping(address => uint256) balances;\n  \n    /* Owner of account can approve (allow) the transfer of an amount to another account */\n    mapping(address => mapping (address => uint256)) allowed;\n  \n     // Functions with this modifier can only be executed by the owner\n    modifier onlyOwner() \n     {\n         if (msg.sender != owner) \n         {\n             throw;\n         }\n         _;\n     }\n  \n     // Constructor:\n     function XBLToken() \n     {\n        owner = msg.sender;\n        balances[owner] = _totalSupply;\n     }\n  \n     function totalSupply() constant returns (uint256 l_totalSupply) \n     {\n        l_totalSupply = _totalSupply;\n     }\n\n     function totalBurned() constant returns (uint256 l_totalBurned)\n     {\n        l_totalBurned = _totalBurned;\n     }\n  \n     /* What is the balance of a particular account? */\n     function balanceOf(address _owner) constant returns (uint256 balance) \n     {\n        return balances[_owner];\n     }\n  \n     /* Transfer the balance from owner's account to another account. */\n     function transfer(address _to, uint256 _amount) returns (bool success) \n     {\n        if (_to == 0x0) throw;      /* Prevents transferring to 0x0 addresses. Use burn() instead. */\n\n        if (balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) \n        {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n         } \n         else \n         {\n            return false;\n         }\n     }\n  \n     // Send _value amount of tokens from address _from to address _to\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n     // fees in sub-currencies; the command should fail unless the _from account has\n     // deliberately authorized the sender of the message via some mechanism; we propose\n     // these standardized APIs for approval:\n     function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) \n     {\n        if (_to == 0x0) throw;      /* Prevents transferring to 0x0 addresses. Use burn() instead. */\n\n        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) \n        {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n         } \n         else \n         {\n            return false;\n         }\n     }\n  \n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount) returns (bool success) \n     {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n     }\n  \n     /* Is the _spender allowed to spend on the behalf of the _owner? */ \n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) \n     {\n        return allowed[_owner][_spender];\n     }\n\n    function burn(uint256 _value) returns (bool success) \n    {\n        if (balances[msg.sender] < _value) throw;            // Check if the sender has enough\n        balances[msg.sender] -= _value;                      // Subtract from the sender\n        /* Updating indicator variables */\n        _totalSupply -= _value;          \n        _totalBurned += _value;                             \n        /* Send the event notification */\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) returns (bool success) \n    {\n        if (balances[_from] < _value) throw;                // Check if the sender has enough\n        if (_value > allowed[_from][msg.sender]) throw;     // Check allowance\n        balances[_from] -= _value;                          // Subtract from the sender\n        /* Updating indicator variables */\n        _totalSupply -= _value;                           \n        _totalBurned += _value;\n        /* Send the event notification */\n        Burn(_from, _value);\n        return true;\n    }\n }",
  "bytecode": "60606040526a02c1dc581118dc363400006000556000600155341561002357600080fd5b5b60028054600160a060020a03191633600160a060020a03908116919091179182905560008054929091168152600360205260409020555b5b6108d58061006b6000396000f300606060405236156100c25763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c7578063095ea7b31461015257806318160ddd1461018857806323b872dd146101ad578063313ce567146101e957806342966c681461021257806370a082311461023c57806379cc67901461026d5780638da5cb5b146102a357806395d89b41146102d2578063a9059cbb1461035d578063d89135cd14610393578063dd62ed3e146103b8575b600080fd5b34156100d257600080fd5b6100da6103ef565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101175780820151818401525b6020016100fe565b50505050905090810190601f1680156101445780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015d57600080fd5b610174600160a060020a0360043516602435610426565b604051901515815260200160405180910390f35b341561019357600080fd5b61019b610493565b60405190815260200160405180910390f35b34156101b857600080fd5b610174600160a060020a036004358116906024351660443561049a565b604051901515815260200160405180910390f35b34156101f457600080fd5b6101fc6105cd565b60405160ff909116815260200160405180910390f35b341561021d57600080fd5b6101746004356105d2565b604051901515815260200160405180910390f35b341561024757600080fd5b61019b600160a060020a0360043516610664565b60405190815260200160405180910390f35b341561027857600080fd5b610174600160a060020a0360043516602435610683565b604051901515815260200160405180910390f35b34156102ae57600080fd5b6102b6610749565b604051600160a060020a03909116815260200160405180910390f35b34156102dd57600080fd5b6100da610758565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101175780820151818401525b6020016100fe565b50505050905090810190601f1680156101445780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036857600080fd5b610174600160a060020a036004351660243561078f565b604051901515815260200160405180910390f35b341561039e57600080fd5b61019b610875565b60405190815260200160405180910390f35b34156103c357600080fd5b61019b600160a060020a036004358116906024351661087c565b60405190815260200160405180910390f35b60408051908101604052601181527f42696c6c696f6e6169726520546f6b656e000000000000000000000000000000602082015281565b600160a060020a03338116600081815260046020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b6000545b90565b6000600160a060020a03831615156104b157600080fd5b600160a060020a0384166000908152600360205260409020548290108015906105015750600160a060020a0380851660009081526004602090815260408083203390941683529290522054829010155b801561050d5750600082115b80156105325750600160a060020a038316600090815260036020526040902054828101115b156105c157600160a060020a0380851660008181526003602081815260408084208054899003905560048252808420338716855282528084208054899003905594881680845291905290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016105c5565b5060005b5b9392505050565b601281565b600160a060020a033316600090815260036020526040812054829010156105f857600080fd5b600160a060020a03331660008181526003602052604080822080548690039055815485900390915560018054850190557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a25060015b919050565b600160a060020a0381166000908152600360205260409020545b919050565b600160a060020a038216600090815260036020526040812054829010156106a957600080fd5b600160a060020a03808416600090815260046020908152604080832033909416835292905220548211156106dc57600080fd5b600160a060020a03831660008181526003602052604080822080548690039055815485900390915560018054850190557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a25060015b92915050565b600254600160a060020a031681565b60408051908101604052600381527f58424c0000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a03831615156107a657600080fd5b600160a060020a0333166000908152600360205260409020548290108015906107cf5750600082115b80156107f45750600160a060020a038316600090815260036020526040902054828101115b1561086657600160a060020a033381166000818152600360205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600161048d565b50600061048d565b5b92915050565b6001545b90565b600160a060020a038083166000908152600460209081526040808320938516835292905220545b929150505600a165627a7a7230582005130e88e667372b36b9467abf0ee497ea60a91861e4b102ffa203b9a860b9000029"
}