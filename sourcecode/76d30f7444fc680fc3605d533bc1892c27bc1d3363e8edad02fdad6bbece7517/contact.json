{
  "address": "0xa7f976c360ebbed4465c2855684d1aae5271efa9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "TrueFlip Token",
  "contractName": "TrueFlipToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-31\n*/\n\npragma solidity ^0.4.11;\n\ncontract Owned {\n\n    address public owner = msg.sender;\n    address public potentialOwner;\n\n    modifier onlyOwner {\n      require(msg.sender == owner);\n      _;\n    }\n\n    modifier onlyPotentialOwner {\n      require(msg.sender == potentialOwner);\n      _;\n    }\n\n    event NewOwner(address old, address current);\n    event NewPotentialOwner(address old, address potential);\n\n    function setOwner(address _new)\n      onlyOwner\n    {\n      NewPotentialOwner(owner, _new);\n      potentialOwner = _new;\n      // owner = _new;\n    }\n\n    function confirmOwnership()\n      onlyPotentialOwner\n    {\n      NewOwner(owner, potentialOwner);\n      owner = potentialOwner;\n      potentialOwner = 0;\n    }\n}\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function sub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract AbstractToken {\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\n    function totalSupply() constant returns (uint256) {}\n    function balanceOf(address owner) constant returns (uint256 balance);\n    function transfer(address to, uint256 value) returns (bool success);\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\n    function approve(address spender, uint256 value) returns (bool success);\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Issuance(address indexed to, uint256 value);\n}\n\n\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\ncontract StandardToken is AbstractToken {\n\n    /*\n     *  Data structures\n     */\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public totalSupply;\n\n    /*\n     *  Read and write storage functions\n     */\n    /// @dev Transfers sender's tokens to a given address. Returns success.\n    /// @param _to Address of token receiver.\n    /// @param _value Number of tokens to transfer.\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n    /// @param _from Address from where tokens are withdrawn.\n    /// @param _to Address to where tokens are sent.\n    /// @param _value Number of tokens to transfer.\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /// @dev Returns number of tokens owned by given address.\n    /// @param _owner Address of token owner.\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /// @dev Sets approved amount of tokens for spender. Returns success.\n    /// @param _spender Address of allowed account.\n    /// @param _value Number of approved tokens.\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /*\n     * Read storage functions\n     */\n    /// @dev Returns number of allowed tokens for given address.\n    /// @param _owner Address of token owner.\n    /// @param _spender Address of token spender.\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n}\n\n\n/// @title Token contract - Implements Standard Token Interface for TrueFlip.\n/// @author Zerion - <[email protected]>\ncontract TrueFlipToken is StandardToken, SafeMath, Owned {\n    /*\n     * External contracts\n     */\n    address public mintAddress;\n    /*\n     * Token meta data\n     */\n    string constant public name = \"TrueFlip\";\n    string constant public symbol = \"TFL\";\n    uint8 constant public decimals = 8;\n\n    // 1 050 000 TFL tokens were minted during PreICO\n    // 13 650 000 TFL tokens can be minted during ICO\n    // 2 100 000 TFL tokens can be minted for Advisory\n    // 4 200 000 TFL tokens can be minted for Team\n    // Overall, 21 000 000 TFL tokens can be minted\n    uint constant public maxSupply = 21000000 * 10 ** 8;\n\n    // Only true until finalize function is called.\n    bool public mintingAllowed = true;\n    // Address where minted tokens are reserved\n    address constant public mintedTokens = 0x6049604960496049604960496049604960496049;\n\n    modifier onlyMint() {\n        // Only minter is allowed to proceed.\n        require(msg.sender == mintAddress);\n        _;\n    }\n\n    /// @dev Function to change address that is allowed to do emission.\n    /// @param newAddress Address of new emission contract.\n    function setMintAddress(address newAddress)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        if (mintAddress == 0x0)\n            mintAddress = newAddress;\n    }\n\n    /// @dev Contract constructor function sets initial token balances.\n    function TrueFlipToken(address ownerAddress)\n    {\n        owner = ownerAddress;\n        balances[mintedTokens] = mul(1050000, 10 ** 8);\n        totalSupply = balances[mintedTokens];\n    }\n\n    function mint(address beneficiary, uint amount, bool transfer)\n        external\n        onlyMint\n        returns (bool success)\n    {\n        require(mintingAllowed == true);\n        require(add(totalSupply, amount) <= maxSupply);\n        totalSupply = add(totalSupply, amount);\n        if (transfer) {\n            balances[beneficiary] = add(balances[beneficiary], amount);\n        } else {\n            balances[mintedTokens] = add(balances[mintedTokens], amount);\n            if (beneficiary != 0) {\n                allowed[mintedTokens][beneficiary] = amount;\n            }\n        }\n        return true;\n    }\n\n    function finalize()\n        public\n        onlyMint\n        returns (bool success)\n    {\n        mintingAllowed = false;\n        return true;\n    }\n\n    function requestWithdrawal(address beneficiary, uint amount)\n        public\n        onlyOwner\n    {\n        allowed[mintedTokens][beneficiary] = amount;\n    }\n\n    function withdrawTokens()\n        public\n    {\n        transferFrom(mintedTokens, msg.sender, allowance(mintedTokens, msg.sender));\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"transfer\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setMintAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"potential\",\"type\":\"address\"}],\"name\":\"NewPotentialOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"}]",
  "bytecode": "606060405260038054600160a060020a033316600160a060020a03199091161790556005805460a060020a60ff02191674010000000000000000000000000000000000000000179055341561005057fe5b604051602080610dee83398101604052515b60038054600160a060020a031916600160a060020a03831617905561009b621005906305f5e1006401000000006100e68102610bef1704565b73604960496049604960496049604960496049604960009081526020527fa4a6c6de141338303eca348ba2e6b05804c813f84d7cfcb8bbbee1d2775a9e9d8190556002555b50610115565b600082820283158061010257508284828115156100ff57fe5b04145b151561010a57fe5b8091505b5092915050565b610cca806101246000396000f3006060604052361561010c5763ffffffff60e060020a60003504166306fdde03811461010e578063095ea7b31461019e57806313af4035146101d157806318160ddd146101ef57806323b872dd14610211578063313ce5671461024a578063425d4980146102705780634bb278f31461029c57806370a08231146102c05780637762df25146102ee5780638d75fe051461031a5780638d8f2adb146103465780638da5cb5b1461035857806395d89b411461038457806396532d1c14610414578063a9059cbb14610438578063d1a1beb41461046b578063d5abeb01146104a3578063d5d1e770146104c5578063da95ebf7146104d7578063dd62ed3e146104f8578063fab371541461052c575bfe5b341561011657fe5b61011e61055c565b604080516020808252835181830152835191928392908301918501908083838215610164575b80518252602083111561016457601f199092019160209182019101610144565b505050905090810190601f1680156101905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a657fe5b6101bd600160a060020a0360043516602435610581565b604080519115158252519081900360200190f35b34156101d957fe5b6101ed600160a060020a03600435166105ec565b005b34156101f757fe5b6101ff610670565b60408051918252519081900360200190f35b341561021957fe5b6101bd600160a060020a0360043581169060243516604435610676565b604080519115158252519081900360200190f35b341561025257fe5b61025a610771565b6040805160ff9092168252519081900360200190f35b341561027857fe5b610280610776565b60408051600160a060020a039092168252519081900360200190f35b34156102a457fe5b6101bd610785565b604080519115158252519081900360200190f35b34156102c857fe5b6101ff600160a060020a03600435166107bc565b60408051918252519081900360200190f35b34156102f657fe5b6102806107db565b60408051600160a060020a039092168252519081900360200190f35b341561032257fe5b6102806107ea565b60408051600160a060020a039092168252519081900360200190f35b341561034e57fe5b6101ed6107fc565b005b341561036057fe5b610280610830565b60408051600160a060020a039092168252519081900360200190f35b341561038c57fe5b61011e61083f565b604080516020808252835181830152835191928392908301918501908083838215610164575b80518252602083111561016457601f199092019160209182019101610144565b505050905090810190601f1680156101905780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561041c57fe5b6101bd61085f565b604080519115158252519081900360200190f35b341561044057fe5b6101bd600160a060020a036004351660243561086f565b604080519115158252519081900360200190f35b341561047357fe5b6101bd600160a060020a03600435166024356044351515610920565b604080519115158252519081900360200190f35b34156104ab57fe5b6101ff610a6e565b60408051918252519081900360200190f35b34156104cd57fe5b6101ed610a79565b005b34156104df57fe5b6101ed600160a060020a0360043516602435610b0a565b005b341561050057fe5b6101ff600160a060020a0360043581169060243516610b54565b60408051918252519081900360200190f35b341561053457fe5b6101bd600160a060020a0360043516610b81565b604080519115158252519081900360200190f35b604080518082019091526008815260c460020a67054727565466c69702602082015281565b600160a060020a03338116600081815260016020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60035433600160a060020a039081169116146106085760006000fd5b60035460408051600160a060020a039283168152918316602083015280517f8a95addc59dddee94a894365b5c66c6c2473b7084d3fd1df9f503db4a2cd6dcc9281900390910190a160048054600160a060020a031916600160a060020a0383161790555b5b50565b60025481565b600160a060020a0383166000908152602081905260408120548290108015906106c65750600160a060020a0380851660009081526001602090815260408083203390941683529290522054829010155b80156106eb5750600160a060020a038316600090815260208190526040902054828101115b1561076557600160a060020a038084166000818152602081815260408083208054880190558885168084528184208054899003905560018352818420339096168452948252918290208054879003905581518681529151929392600080516020610c7f8339815191529281900390910190a3506001610769565b5060005b5b9392505050565b600881565b600554600160a060020a031681565b60055460009033600160a060020a039081169116146107a45760006000fd5b506005805460a060020a60ff021916905560015b5b90565b600160a060020a0381166000908152602081905260409020545b919050565b600454600160a060020a031681565b600080516020610c3f83398151915281565b61066c600080516020610c3f83398151915233610827600080516020610c3f83398151915233610b54565b610676565b505b565b600354600160a060020a031681565b604080518082019091526003815260ea60020a6215119302602082015281565b60055460a060020a900460ff1681565b600160a060020a0333166000908152602081905260408120548290108015906108b15750600160a060020a038316600090815260208190526040902054828101115b1561091157600160a060020a033381166000818152602081815260408083208054889003905593871680835291849020805487019055835186815293519193600080516020610c7f833981519152929081900390910190a35060016105e6565b5060006105e6565b5b92915050565b60055460009033600160a060020a0390811691161461093f5760006000fd5b60055460a060020a900460ff16151560011461095b5760006000fd5b660775f05a07400061096f60025485610bd5565b111561097b5760006000fd5b61098760025484610bd5565b60025581156109d157600160a060020a0384166000908152602081905260409020546109b39084610bd5565b600160a060020a038516600090815260208190526040902055610a61565b600080516020610c3f8339815191526000908152602052600080516020610c1f83398151915254610a029084610bd5565b600080516020610c3f8339815191526000908152602052600080516020610c1f83398151915255600160a060020a03841615610a6157600160a060020a0384166000908152600080516020610c5f833981519152602052604090208390555b5b5060015b5b9392505050565b660775f05a07400081565b60045433600160a060020a03908116911614610a955760006000fd5b60035460045460408051600160a060020a03938416815292909116602083015280517f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b23649281900390910190a16004805460038054600160a060020a0319908116600160a060020a038416179091551690555b5b565b60035433600160a060020a03908116911614610b265760006000fd5b600160a060020a0382166000908152600080516020610c5f833981519152602052604090208190555b5b5050565b600160a060020a038083166000908152600160209081526040808320938516835292905220545b92915050565b60035460009033600160a060020a03908116911614610ba05760006000fd5b600554600160a060020a031615156107d65760058054600160a060020a031916600160a060020a0384161790555b5b5b919050565b600082820183811015610be457fe5b8091505b5092915050565b6000828202831580610c0b5750828482811515610c0857fe5b04145b1515610be457fe5b8091505b50929150505600a4a6c6de141338303eca348ba2e6b05804c813f84d7cfcb8bbbee1d2775a9e9d0000000000000000000000006049604960496049604960496049604960496049ed3e23dda14ab816abd4c272f9a3593b091a0dfd4ca4b019b82bcd34ac2c9960ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582090d92af996b9967c6c54f2b6aecd12ddef070c1655244820118788496c90b8930029000000000000000000000000b46c44facc34c1475124152404832f797da08c94",
  "constructorArguments": "000000000000000000000000b46c44facc34c1475124152404832f797da08c94"
}