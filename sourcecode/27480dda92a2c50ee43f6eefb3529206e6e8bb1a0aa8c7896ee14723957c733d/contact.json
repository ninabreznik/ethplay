{
  "address": "0xab244f9aa7a8dd03e8261b2508438d301ac05a4f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "XribaSwap",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-20\n*/\n\npragma solidity ^0.4.23;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n     return a / b;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\taddress public owner;\n\taddress public newOwner;\n\n\tevent OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n\n\tconstructor() public {\n\t\towner = msg.sender;\n\t\tnewOwner = address(0);\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner, \"msg.sender == owner\");\n\t\t_;\n\t}\n\n\tfunction transferOwnership(address _newOwner) public onlyOwner {\n\t\trequire(address(0) != _newOwner, \"address(0) != _newOwner\");\n\t\tnewOwner = _newOwner;\n\t}\n\n\tfunction acceptOwnership() public {\n\t\trequire(msg.sender == newOwner, \"msg.sender == newOwner\");\n\t\temit OwnershipTransferred(owner, msg.sender);\n\t\towner = msg.sender;\n\t\tnewOwner = address(0);\n\t}\n}\n\ncontract tokenInterface {\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance);\n\tfunction transfer(address _to, uint256 _value) public returns (bool);\n\tstring public symbols;\n\tfunction originTransfer(address _to, uint256 _value) public returns(bool);\n}\n\ncontract XribaSwap is Ownable {\n    using SafeMath for uint256;\n    \n    tokenInterface public mtv;\n    tokenInterface public xra;\n    \n    uint256 public startRelease;\n    uint256 public endRelease;\n    \n    mapping (address => uint256) public xra_amount;\n    mapping (address => uint256) public xra_sent;\n    \n    constructor(address _mtv, address _xra, uint256 _startRelease) public {\n        mtv = tokenInterface(_mtv);\n        xra = tokenInterface(_xra);\n        //require(mtv.symbols() == \"MTV\", \"mtv.symbols() == \\\"MTV\\\"\");\n        //require(xra.symbols() == \"XRA\", \"mtv.symbols() == \\\"XRA\\\"\");\n        \n        startRelease = _startRelease;\n        endRelease = startRelease.add(7*30 days);\n        \n    } \n    \n\tfunction withdrawTokens(address tknAddr, address to, uint256 value) public onlyOwner returns (bool) {\n        return tokenInterface(tknAddr).transfer(to, value);\n    }\n    \n    function changeTime(uint256 _startRelease) onlyOwner public {\n        startRelease = _startRelease;\n        endRelease = startRelease.add(7*30 days);\n    }\n\t\n\tfunction () public {\n\t\trequire ( msg.sender == tx.origin, \"msg.sender == tx.orgin\" );\n\t\trequire ( now > startRelease.sub(1 days) );\n\t\t\n\t\tuint256 mtv_amount = mtv.balanceOf(msg.sender);\n\t\tuint256 tknToSend;\n\t\t\n\t\tif( mtv_amount > 0 ) {\n\t\t    mtv.originTransfer(0x0Dead0DeAd0dead0DEad0DEAd0DEAD0deaD0DEaD, mtv_amount);\n\t\t    xra_amount[msg.sender] = xra_amount[msg.sender].add(mtv_amount.mul(5));\n\t\t    \n\t\t    tknToSend = xra_amount[msg.sender].mul(30).div(100).sub(xra_sent[msg.sender]);\n\t\t    xra_sent[msg.sender] = xra_sent[msg.sender].add(tknToSend);\n\t\t    \n\t\t    xra.transfer(msg.sender, tknToSend);\n\t\t}\n\t\t\n\t\trequire( xra_amount[msg.sender] > 0, \"xra_amount[msg.sender] > 0\");\n\t\t\n\t\tif ( now > startRelease ) {\n\t\t    uint256 timeframe = endRelease.sub(startRelease);\n\t\t    uint256 timeprogress = now.sub(startRelease);\n\t\t    uint256 rate = 0;\n\t\t    if( now > endRelease) { \n\t\t        rate = 1 ether;\n\t\t    } else {\n\t\t        rate =  timeprogress.mul(1 ether).div(timeframe);   \n\t\t    }\n\t\t    \n\t\t    uint256 alreadySent =  xra_amount[msg.sender].mul(0.3 ether).div(1 ether);\n\t\t    uint256 remainingToSend = xra_amount[msg.sender].mul(0.7 ether).div(1 ether);\n\t\t    \n\t\t    \n\t\t    tknToSend = alreadySent.add( remainingToSend.mul(rate).div(1 ether) ).sub( xra_sent[msg.sender] );\n\t\t    xra_sent[msg.sender] = xra_sent[msg.sender].add(tknToSend);\n\t\t    \n\t\t    require(tknToSend > 0,\"tknToSend > 0\");\n\t\t    xra.transfer(msg.sender, tknToSend);\n\t\t}\n\t\t\n\t\t\n\t}\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051606080610d1e8339810160409081528151602083015191909201516000805433600160a060020a0319918216179091556001805482169055600280548216600160a060020a038087169190911790915560038054909216908416179055600481905561009181630114db0064010000000061009d81026108591704565b600555506100b0915050565b818101828110156100aa57fe5b92915050565b610c5f806100bf6000396000f3006080604052600436106100b95763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ef771fb811461069d57806351d962e1146106d05780635e35359e146106e55780636c56a3f1146107235780637974f8fe1461073857806379ba5097146107525780638bc008e6146107675780638da5cb5b14610798578063d4ee1d90146107ad578063df49804a146107c2578063ee71f3f5146107d7578063f2fde38b146107f8575b3480156100c557600080fd5b506000808080808080333214610125576040805160e560020a62461bcd02815260206004820152601660248201527f6d73672e73656e646572203d3d2074782e6f7267696e00000000000000000000604482015290519081900360640190fd5b60045461013b906201518063ffffffff61081916565b421161014657600080fd5b600254604080517f70a082310000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b1580156101ac57600080fd5b505af11580156101c0573d6000803e3d6000fd5b505050506040513d60208110156101d657600080fd5b5051965060008711156103e257600254604080517f1d32ab99000000000000000000000000000000000000000000000000000000008152730dead0dead0dead0dead0dead0dead0dead0dead6004820152602481018a90529051600160a060020a0390921691631d32ab99916044808201926020929091908290030181600087803b15801561026457600080fd5b505af1158015610278573d6000803e3d6000fd5b505050506040513d602081101561028e57600080fd5b506102c190506102a588600563ffffffff61083016565b336000908152600660205260409020549063ffffffff61085916565b3360009081526006602081815260408084208590556007825290922054915261031491610308906064906102fc90601e63ffffffff61083016565b9063ffffffff61086616565b9063ffffffff61081916565b33600090815260076020526040902054909650610337908763ffffffff61085916565b3360008181526007602090815260408083209490945560035484517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810194909452602484018b90529351600160a060020a039094169363a9059cbb93604480820194918390030190829087803b1580156103b557600080fd5b505af11580156103c9573d6000803e3d6000fd5b505050506040513d60208110156103df57600080fd5b50505b3360009081526006602052604081205411610447576040805160e560020a62461bcd02815260206004820152601a60248201527f7872615f616d6f756e745b6d73672e73656e6465725d203e2030000000000000604482015290519081900360640190fd5b600454421115610694576004546005546104669163ffffffff61081916565b945061047d6004544261081990919063ffffffff16565b93506000925060055442111561049d57670de0b6b3a764000092506104bc565b6104b9856102fc86670de0b6b3a764000063ffffffff61083016565b92505b336000908152600660205260409020546104f290670de0b6b3a7640000906102fc90670429d069189e000063ffffffff61083016565b3360009081526006602052604090205490925061052b90670de0b6b3a7640000906102fc906709b6e64a8ec6000063ffffffff61083016565b3360009081526007602052604090205490915061056e90610308610561670de0b6b3a76400006102fc868963ffffffff61083016565b859063ffffffff61085916565b33600090815260076020526040902054909650610591908763ffffffff61085916565b3360009081526007602052604081209190915586116105fa576040805160e560020a62461bcd02815260206004820152600d60248201527f746b6e546f53656e64203e203000000000000000000000000000000000000000604482015290519081900360640190fd5b600354604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018990529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b15801561066757600080fd5b505af115801561067b573d6000803e3d6000fd5b505050506040513d602081101561069157600080fd5b50505b50505050505050005b3480156106a957600080fd5b506106be600160a060020a036004351661087b565b60408051918252519081900360200190f35b3480156106dc57600080fd5b506106be61088d565b3480156106f157600080fd5b5061070f600160a060020a0360043581169060243516604435610893565b604080519115158252519081900360200190f35b34801561072f57600080fd5b506106be6109a6565b34801561074457600080fd5b506107506004356109ac565b005b34801561075e57600080fd5b50610750610a2d565b34801561077357600080fd5b5061077c610af4565b60408051600160a060020a039092168252519081900360200190f35b3480156107a457600080fd5b5061077c610b03565b3480156107b957600080fd5b5061077c610b12565b3480156107ce57600080fd5b5061077c610b21565b3480156107e357600080fd5b506106be600160a060020a0360043516610b30565b34801561080457600080fd5b50610750600160a060020a0360043516610b42565b60008282111561082557fe5b508082035b92915050565b60008215156108415750600061082a565b5081810281838281151561085157fe5b041461082a57fe5b8181018281101561082a57fe5b6000818381151561087357fe5b049392505050565b60066020526000908152604090205481565b60055481565b60008054600160a060020a031633146108f6576040805160e560020a62461bcd02815260206004820152601360248201527f6d73672e73656e646572203d3d206f776e657200000000000000000000000000604482015290519081900360640190fd5b83600160a060020a031663a9059cbb84846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561097257600080fd5b505af1158015610986573d6000803e3d6000fd5b505050506040513d602081101561099c57600080fd5b5051949350505050565b60045481565b600054600160a060020a03163314610a0e576040805160e560020a62461bcd02815260206004820152601360248201527f6d73672e73656e646572203d3d206f776e657200000000000000000000000000604482015290519081900360640190fd5b6004819055610a2781630114db0063ffffffff61085916565b60055550565b600154600160a060020a03163314610a8f576040805160e560020a62461bcd02815260206004820152601660248201527f6d73672e73656e646572203d3d206e65774f776e657200000000000000000000604482015290519081900360640190fd5b600080546040513392600160a060020a03909216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff199081163317909155600180549091169055565b600354600160a060020a031681565b600054600160a060020a031681565b600154600160a060020a031681565b600254600160a060020a031681565b60076020526000908152604090205481565b600054600160a060020a03163314610ba4576040805160e560020a62461bcd02815260206004820152601360248201527f6d73672e73656e646572203d3d206f776e657200000000000000000000000000604482015290519081900360640190fd5b600160a060020a0381161515610c04576040805160e560020a62461bcd02815260206004820152601760248201527f6164647265737328302920213d205f6e65774f776e6572000000000000000000604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582064cac555090386fe646dc9fb2919b8fefb2c70747106a90d9d18f6588e725dd90029000000000000000000000000515818f6638ce8b0cd48d12244013290c3137f8c0000000000000000000000007025bab2ec90410de37f488d1298204cd4d6b29d000000000000000000000000000000000000000000000000000000005b2ace60",
  "constructorArguments": "000000000000000000000000515818f6638ce8b0cd48d12244013290c3137f8c0000000000000000000000007025bab2ec90410de37f488d1298204cd4d6b29d000000000000000000000000000000000000000000000000000000005b2ace60"
}