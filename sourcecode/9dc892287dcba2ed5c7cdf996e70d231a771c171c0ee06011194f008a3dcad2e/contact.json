{
  "address": "0x0f71b8de197a1c84d31de0f1fa7926c365f052b3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ArconaToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-11\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    \n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n \n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, require mintingFinished before start transfers\n */\ncontract BasicToken is ERC20Basic {\n    \n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n  bool public mintingFinished = false;\n\n  mapping(address => uint256) releaseTime;\n  // Only after finishMinting and checks for bounty accounts time restrictions\n  modifier timeAllowed() {\n    require(mintingFinished);\n    require(releaseTime[msg.sender] == 0 || now > releaseTime[msg.sender]); //finishSale + releasedays * 1 days\n    _;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public timeAllowed returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  // release time of freezed account\n  function checkReleaseAt(address _owner) public constant returns (uint256 date) {\n    return releaseTime[_owner];\n  }\n\n  // change restricted releaseXX account\n  function changeReleaseAccount(address _owner, address _newowner) internal returns (bool) {\n    require(balances[_newowner] == 0);\n    require(releaseTime[_owner] != 0 );\n    require(releaseTime[_newowner] == 0 );\n    balances[_newowner] = balances[_owner];\n    releaseTime[_newowner] = releaseTime[_owner];\n    balances[_owner] = 0;\n    releaseTime[_owner] = 0;\n    return true;\n  }\n\n  // release Customer's account after KYC\n  function releaseAccount(address _owner) internal returns (bool) {\n    releaseTime[_owner] = now;\n    return true;\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(mintingFinished);\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    \n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @param _releaseTime The (optional) freeze time - KYC & bounty accounts.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount, uint256 _releaseTime) internal canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    if ( _releaseTime > 0 ) {\n        releaseTime[_to] = _releaseTime;\n    }\n    emit Transfer(0x0, _to, _amount);\n    return true;\n  }\n\n  // drain tokens\n  function unMint(address _from) internal returns (bool) {\n    totalSupply = totalSupply.sub(balances[_from]);\n    emit Transfer(_from, 0x0, balances[_from]);\n    balances[_from] = 0;\n    return true;\n  }\n \n}\n  \n   \ncontract ArconaToken is MintableToken {\n\n    string public constant name = \"Arcona Distribution Contract\";\n    string public constant symbol = \"ARCONA\";\n    uint8 public constant decimals = 18;\n   \n    using SafeMath for uint;\n    \n    address public multisig;\n    address public restricted;\n    address public registerbot;\n    address public certbot;\n    address public release6m;\n    address public release12m;\n    address public release18m;\n\n    mapping (address => bool) registered;\n    mapping (address => address) referral;\n    mapping (string => address) certificate;\n\n    uint restrictedPercent = 40;\n    uint refererPercent = 55; // 5.5%\n    uint first24Percent = 50; // 50%\n    uint auctionPercent = 5; // 5%\n    uint bonusPeriod = 21; // 21 days (20 + 1st day whitelist sale)\n\n    uint public startSale;\n    uint public finishSale;\n    bool public isGlobalPause=false;\n    uint public minTokenSale = 10*10**18; // min 10 tokens\n    uint public totalWeiSale = 2746*10**18; // softcap reached on preICO:  0x516130856e743090af9d7fd95d6fc94c8743a4e1\n    bool public isFinished=false;\n\n    uint public startAuction;\n    uint public finishAuction;\n    uint public hardcap = 25*10**6; // USD\n    uint public rateSale = 400*10**18; // 1ETH = 400 ARN\n    uint public rateUSD = 500; // ETH Course in USD\n\n    // constructor\n    function ArconaToken(uint256 _startSale,uint256 _finishSale,address _multisig,address _restricted,address _registerbot,address _certbot, address _release6m, address _release12m, address _release18m) public  {\n        multisig = _multisig;\n        restricted = _restricted;\n        registerbot = _registerbot;\n        certbot = _certbot;\n        release6m = _release6m;\n        release12m = _release12m;\n        release18m = _release18m;\n        startSale = _startSale;\n        finishSale = _finishSale;\n    }\n\n    modifier isRegistered() {\n        require (registered[msg.sender]);\n        _;\n    }\n\n    modifier anySaleIsOn() {\n        require(now > startSale && now < finishSale && !isGlobalPause);\n        _;\n    }\n\n    modifier isUnderHardCap() {\n        uint totalUsdSale = rateUSD.mul(totalWeiSale).div(1 ether);\n        require(totalUsdSale <= hardcap);\n        _;\n    }\n\n    function changefirst24Percent(uint _percent) public onlyOwner {\n        first24Percent = _percent;\n    }\n\n    function changeCourse(uint _usd) public onlyOwner {\n        rateUSD = _usd;\n    }\n\n    function changeMultisig(address _new) public onlyOwner {\n        multisig = _new;\n    }\n\n    function changeRegisterBot(address _new) public onlyOwner {\n        registerbot = _new;\n    }\n\n    function changeCertBot(address _new) public onlyOwner {\n        certbot = _new;\n    }\n\n    function changeRestricted(address _new) public onlyOwner {\n        if (isFinished) {\n            changeReleaseAccount(restricted,_new);\n        }\n        restricted = _new;\n    }\n\n    function proceedKYC(address _customer) public {\n        require(msg.sender == registerbot || msg.sender == owner);\n        require(_customer != address(0));\n       releaseAccount(_customer);\n    }\n\n    function changeRelease6m(address _new) public onlyOwner {\n        if (isFinished) {\n            changeReleaseAccount(release6m,_new);\n        }\n        release6m = _new;\n    }\n\n    function changeRelease12m(address _new) public onlyOwner {\n        if (isFinished) {\n            changeReleaseAccount(release12m,_new);\n        }\n        release12m = _new;\n    }\n\n    function changeRelease18m(address _new) public onlyOwner {\n        if (isFinished) {\n            changeReleaseAccount(release18m,_new);\n        }\n        release18m = _new;\n    }\n\n    function addCertificate(string _id,  address _owner) public {\n        require(msg.sender == certbot || msg.sender == owner);\n        require(certificate[_id] == address(0));\n        if (_owner != address(0)) {\n            certificate[_id] = _owner;\n        } else {\n            certificate[_id] = owner;\n        }    \n    }\n\n    function editCertificate(string _id,  address _newowner) public {\n        require(certificate[_id] != address(0));\n        require(msg.sender == certificate[_id] || msg.sender == certbot || msg.sender == owner );\n        certificate[_id] = _newowner;\n    }\n\n    function checkCertificate(string _id) public view returns (address) {\n        return certificate[_id];\n    }\n\n    function deleteCertificate(string _id) public  {\n        require(msg.sender == certbot || msg.sender == owner);\n        delete certificate[_id];\n    }\n\n    function registerCustomer(address _customer, address _referral) public {\n        require(msg.sender == registerbot || msg.sender == owner);\n        require(_customer != address(0));\n        registered[_customer] = true;\n        if (_referral != address(0) && _referral != _customer) {\n            referral[_customer] = _referral;\n        }\n    }\n\n    function checkCustomer(address _customer) public view returns (bool, address) {\n        return ( registered[_customer], referral[_customer]);\n    }\n\n    // import preICO customers from 0x516130856e743090af9d7fd95d6fc94c8743a4e1\n    function importCustomer(address _customer, address _referral, uint _tokenAmount) public {\n        require(msg.sender == registerbot || msg.sender == owner);\n        require(_customer != address(0));\n        require(now < startSale); // before ICO starts\n        registered[_customer] = true;\n        if (_referral != address(0) && _referral != _customer) {\n            referral[_customer] = _referral;\n        }\n        mint(_customer, _tokenAmount, now + 99 * 1 years); // till KYC is completed\n    }\n\n    function deleteCustomer(address _customer) public {\n        require(msg.sender == registerbot || msg.sender == owner);\n        require(_customer!= address(0));\n        delete registered[_customer];\n        delete referral[_customer];\n        // Drain tokens\n        unMint(_customer);\n    }\n\n    function globalPause(bool _state) public onlyOwner {\n        isGlobalPause = _state;\n    }\n\n    function changeRateSale(uint _tokenAmount) public onlyOwner {\n        require(isGlobalPause || (now > startSale && now < finishSale));\n        rateSale = _tokenAmount;\n    }\n\n    function changeStartSale(uint256 _ts) public onlyOwner {\n        startSale = _ts;\n    }\n\n    function changeMinTokenSale(uint256 _ts) public onlyOwner {\n        minTokenSale = _ts;\n    }\n\n    function changeFinishSale(uint256 _ts) public onlyOwner {\n        finishSale = _ts;\n    }\n\n    function setAuction(uint256 _startAuction, uint256 _finishAuction, uint256 _auctionPercent) public onlyOwner {\n        require(_startAuction < _finishAuction);\n        require(_auctionPercent > 0);\n        require(_startAuction > startSale);\n        require(_finishAuction <= finishSale);\n        finishAuction = _finishAuction;\n        startAuction = _startAuction;\n        auctionPercent = _auctionPercent;\n    }\n\n    function finishMinting() public onlyOwner {\n        require(!isFinished);\n        isFinished=true;\n        uint issuedTokenSupply = totalSupply;\n        // 40% restricted + 60% issuedTokenSupply = 100%\n        uint restrictedTokens = issuedTokenSupply.mul(restrictedPercent).div(100 - restrictedPercent);\n        issuedTokenSupply = issuedTokenSupply.add(restrictedTokens);\n        // 13% - 11% for any purpose and 2% bounty\n        mint(restricted, issuedTokenSupply.mul(13).div(100), now);\n        // 27% - freezed founds to team & adwisers\n        mint(release6m, issuedTokenSupply.mul(85).div(1000), now + 180 * 1 days); // 8.5 %\n        mint(release12m, issuedTokenSupply.mul(85).div(1000), now + 365 * 1 days); // 8.5 %\n        mint(release18m, issuedTokenSupply.mul(10).div(100), now + 545 * 1 days); // 10 %\n        mintingFinished=true;\n    }\n\n    function foreignBuyTest(uint256 _weiAmount, uint256 _rate) public pure returns (uint tokenAmount) {\n        require(_weiAmount > 0);\n        require(_rate > 0);\n        return _rate.mul(_weiAmount).div(1 ether);\n    }\n    \n    // BTC external payments\n    function foreignBuy(address _holder, uint256 _weiAmount, uint256 _rate) public {\n        require(msg.sender == registerbot || msg.sender == owner);\n        require(_weiAmount > 0);\n        require(_rate > 0);\n        registered[_holder] = true;\n        uint tokens = _rate.mul(_weiAmount).div(1 ether);\n        mint(_holder, tokens, now + 99 * 1 years); // till KYC is completed\n        totalWeiSale = totalWeiSale.add(_weiAmount);\n    }\n\n    function createTokens() public isRegistered anySaleIsOn isUnderHardCap payable {\n        uint tokens = rateSale.mul(msg.value).div(1 ether);\n        require(tokens >= minTokenSale); // min 10 tokens\n        multisig.transfer(msg.value);\n        uint percent = 0;\n        uint bonusTokens = 0;\n        uint finishBonus = startSale + (bonusPeriod * 1 days);\n        if ( now < finishBonus ) {\n            if ( now <= startSale + 1 days ) {\n                percent = first24Percent;   // 1st day: 50% (for registered whitelist only)\n           } else {        // 25% total:\n               percent = (finishBonus - now).div(1 days); // last 15days -1% every day\n               if ( percent >= 15 ) {  //  first 5days, -1% every 12h\n                  percent = 27 - (now - startSale).div(1 hours).div(12);\n               } else {\n                  percent = percent.add(1);\n               }\t\t\t\t\n          }\n        } else {\n            if ( now >= startAuction && now < finishAuction ) {\n                percent = auctionPercent;\n            }\n        }\n        if ( percent > 0 ) {\n            bonusTokens = tokens.mul(percent).div(100);\n            tokens = tokens.add(bonusTokens);\n        }\n\n        totalWeiSale = totalWeiSale.add(msg.value);\n        mint(msg.sender, tokens, now + 99 * 1 years); // till KYC is completed\n\n        if ( referral[msg.sender] != address(0) ) {\n            uint refererTokens = tokens.mul(refererPercent).div(1000);\n            mint(referral[msg.sender], refererTokens, now + 99 * 1 years);\n        }\n    }\n\n    function() external isRegistered anySaleIsOn isUnderHardCap payable {\n        createTokens();\n    }\n    \n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_usd\",\"type\":\"uint256\"}],\"name\":\"changeCourse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_referral\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"importCustomer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"deleteCustomer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"release18m\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeMultisig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"release12m\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"changeMinTokenSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"changeStartSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"foreignBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"changeFinishSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"release6m\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startAuction\",\"type\":\"uint256\"},{\"name\":\"_finishAuction\",\"type\":\"uint256\"},{\"name\":\"_auctionPercent\",\"type\":\"uint256\"}],\"name\":\"setAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"restricted\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"changeRateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"proceedKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_newowner\",\"type\":\"address\"}],\"name\":\"editCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeRelease12m\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"foreignBuyTest\",\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"deleteCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"globalPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"checkReleaseAt\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registerbot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"checkCustomer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"certbot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeRegisterBot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeRelease18m\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"registerCustomer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"changefirst24Percent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeCertBot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGlobalPause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeRelease6m\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeRestricted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"checkCertificate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startSale\",\"type\":\"uint256\"},{\"name\":\"_finishSale\",\"type\":\"uint256\"},{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_restricted\",\"type\":\"address\"},{\"name\":\"_registerbot\",\"type\":\"address\"},{\"name\":\"_certbot\",\"type\":\"address\"},{\"name\":\"_release6m\",\"type\":\"address\"},{\"name\":\"_release12m\",\"type\":\"address\"},{\"name\":\"_release18m\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005ad1c310000000000000000000000000000000000000000000000000000000005afaa190000000000000000000000000fac6e76ed94ff2afa922124240fc696ebc518ad90000000000000000000000000afc517f9c629fb4c8082876d7e17b68da35859300000000000000000000000022599536e962e7cb54728f2e2d8b774872cdb94000000000000000000000000022599536e962e7cb54728f2e2d8b774872cdb9400000000000000000000000004d7cc6b188231ab3a76ac0d7a9db02ad40bb15370000000000000000000000000c8e784c46b299a6d196a24a5035e4e37a9655e9000000000000000000000000de0b45e898ac123b8667cd497e58095808af1ef3"
}