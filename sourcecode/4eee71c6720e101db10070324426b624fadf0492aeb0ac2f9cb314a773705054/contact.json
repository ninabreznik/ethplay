{
  "address": "0x869eb8a1a479a80f9907673eae8336625dc3e526",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoDuel",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-25\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\ncontract SafeMath {\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow.\n    */\n    function safeSub(uint256 x, uint256 y) internal pure returns (uint256) {\n        assert(y <= x);\n        uint256 z = x - y;\n        return z;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function safeAdd(uint256 x, uint256 y) internal pure returns (uint256) {\n        uint256 z = x + y;\n        assert(z >= x);\n        return z;\n    }\n\t\n\t/**\n    * @dev Integer division of two numbers, reverts on division by zero.\n    */\n    function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\n        uint256 z = x / y;\n        return z;\n    }\n    \n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\t\n    function safeMul(uint256 x, uint256 y) internal pure returns (uint256) {    \n        if (x == 0) {\n            return 0;\n        }\n    \n        uint256 z = x * y;\n        assert(z / x == y);\n        return z;\n    }\n\n    /**\n    * @dev Returns the integer percentage of the number.\n    */\n    function safePerc(uint256 x, uint256 y) internal pure returns (uint256) {\n        if (x == 0) {\n            return 0;\n        }\n        \n        uint256 z = x * y;\n        assert(z / x == y);    \n        z = z / 10000; // percent to hundredths\n        return z;\n    }\n\n    /**\n    * @dev Returns the minimum value of two numbers.\n    */\t\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\n        uint256 z = x <= y ? x : y;\n        return z;\n    }\n\n    /**\n    * @dev Returns the maximum value of two numbers.\n    */\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n        uint256 z = x >= y ? x : y;\n        return z;\n    }\n}\n\n\n/**\n * @title Ownable contract - base contract with an owner\n */\ncontract Ownable {\n  \n  address public owner;\n  address public newOwner;\n\n  event OwnershipTransferred(address indexed _from, address indexed _to);\n  \n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    assert(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    assert(_newOwner != address(0));      \n    newOwner = _newOwner;\n  }\n\n  /**\n   * @dev Accept transferOwnership.\n   */\n  function acceptOwnership() public {\n    if (msg.sender == newOwner) {\n      emit OwnershipTransferred(owner, newOwner);\n      owner = newOwner;\n    }\n  }\n}\n\n\n/**\n * @title Agent contract - base contract with an agent\n */\ncontract Agent is Ownable {\n\n  address public defAgent;\n\n  mapping(address => bool) public Agents;  \n\n  event UpdatedAgent(address _agent, bool _status);\n\n  constructor() public {\n    defAgent = msg.sender;\n    Agents[msg.sender] = true;\n  }\n  \n  modifier onlyAgent() {\n    assert(Agents[msg.sender]);\n    _;\n  }\n  \n  function updateAgent(address _agent, bool _status) public onlyOwner {\n    assert(_agent != address(0));\n    Agents[_agent] = _status;\n\n    emit UpdatedAgent(_agent, _status);\n  }  \n}\n\n\n/**\n * @title CryptoDuel game\n */\ncontract CryptoDuel is Agent, SafeMath {\n\n    uint public fee = 100;            //  1% from bet\n    uint public refGroupFee = 5000;   // 50% from profit\n    uint public refLevel1Fee = 1000;  // 10% from profit\n    uint public refLevel2Fee = 500;   //  5% from profit\n    uint public min = 1000000000000000;       // 0.001 ETH\n    uint public max = 1000000000000000000000;  // 1000 ETH\n\n    uint256 public start = 0;         // Must be equal to the date of issue tokens\n    uint256 public period = 30 days;  // By default, the dividend accrual period is 30 days\n\n    /** State\n     *\n     * - New: 0\n     * - Deleted: 1\n     * - OnGoing: 2\n     * - Closed: 3\n     */\n    enum State{New, Deleted, OnGoing, Closed}\n\n    struct _duel {\n        address creator;\n        address responder;\n        uint bet;\n        uint blocknumber;\n        int refID;\n        State state;\n    }\n\n    _duel[] public Duels;\n    mapping(int => address) public RefGroup;                 // RefGroup[id group] = address referrer\n    mapping(address => address) public RefAddr;              // RefAddr[address referal] = address referrer\n\n    mapping(uint => uint) public reward;                     // reward[period] = amount\n    mapping(address => uint) public rewardGroup;             // rewardGroup[address] = amount\n    mapping(address => uint) public rewardAddr;              // rewardAddr[address] = amount\n\n    mapping(uint => bool) public AlreadyReward;              // AlreadyReward[period] = true/false\n\n    event newDuel(uint duel, address indexed creator, address indexed responder, uint bet, int refID);\n    event deleteDuel(uint duel);\n    event respondDuel(uint duel, address indexed responder);\n\n    event refundDuel(uint duel);\n    event resultDuel(uint duel, address indexed winner, uint sum);\n\n    event changeMin(uint min);\n    event changeMax(uint max);\n    \n    event changeRefGroup(int ID, address referrer);\n    event changeRefAddr(address referal, address referrer);\n\n    event changeFee(uint fee);\n    event changeRefGroupFee(uint refGroupFee);\n    event changeRefLevel1Fee(uint refLevel1Fee);\n    event changeRefLevel2Fee(uint refLevel2Fee);    \n    \n    event withdrawProfit(uint fee, address RefGroup);\n\n    event UpdatedPeriod(uint _period);\n\n    constructor() public {\n        RefGroup[0] = msg.sender;\n        emit changeRefGroup(0, msg.sender);\n    }\n\n    function CreateDuel(address _responder) payable external {\n\n        require(msg.value >= min && msg.value <= max);        \n\n        Duels.push(_duel({\n            creator : msg.sender,\n            responder : _responder,\n            bet : msg.value,\n            blocknumber : 0,\n            state : State.New,\n            refID : 0\n            }));\n\n        emit newDuel(Duels.length - 1, msg.sender, _responder, msg.value, 0);\n    }\n\n    function CreateDuel(address _responder, int _refID) payable external {\n\n        require(msg.value >= min && msg.value <= max);\n        require(RefGroup[_refID] != address(0));\n\n        Duels.push(_duel({\n            creator : msg.sender,\n            responder : _responder,\n            bet : msg.value,\n            blocknumber : 0,\n            state : State.New,\n            refID : _refID\n            }));\n\n        emit newDuel(Duels.length - 1, msg.sender, _responder, msg.value, _refID);\n    }\n\n    function RespondDuel(uint _duelID) payable external {\n\n        _duel storage duel = Duels[_duelID];\n\n        require(duel.state == State.New);\n        require(duel.bet == msg.value);\n        require(duel.responder == msg.sender || duel.responder == address(0));\n\n        duel.state = State.OnGoing;\n        duel.responder = msg.sender;\n        duel.blocknumber = block.number;\n\n        emit respondDuel(_duelID, msg.sender);\n    }\n\n\n    function DeleteDuel(uint _duelID) external {\n\n        _duel storage duel = Duels[_duelID];\n\n        require(duel.creator == msg.sender);\n        require(duel.state == State.New);\n\n        duel.state = State.Deleted;\n\n        uint duel_fee = safePerc(duel.bet, fee);\n\n        uint256 N = 1;\n        if (block.timestamp > start) {\n            N = (block.timestamp - start) / period + 1;\n        }\n\n        reward[N] = safeAdd(reward[N], duel_fee);\n\n        duel.creator.transfer(safeSub(duel.bet, duel_fee));\n\n        emit deleteDuel(_duelID);\n    }\n\n\n    function GetWin(uint _duelID) external {\n\n        _duel storage duel = Duels[_duelID];\n\n        require(duel.state == State.OnGoing);\n        require(duel.creator == msg.sender || duel.responder == msg.sender);\n        require(block.number > duel.blocknumber + 1);\n\n        duel.state = State.Closed;\n        uint duel_fee = 0;\n\n        uint256 N = 1;\n        if (block.timestamp > start) {\n            N = (block.timestamp - start) / period + 1;\n        }\n\n        if (blockhash(duel.blocknumber) == 0 || (block.number - duel.blocknumber) > 256) {\n\n            duel_fee = safePerc(duel.bet, fee);\n\n            duel.creator.transfer(safeSub(duel.bet, duel_fee));\n            duel.responder.transfer(safeSub(duel.bet, duel_fee));\n\n            reward[N] = safeAdd(reward[N], safeMul(2, duel_fee));\n\n            emit refundDuel(_duelID);\n\n        } else {\n\n            uint hash = uint(keccak256(abi.encodePacked(blockhash(duel.blocknumber + 1), duel.creator, duel.responder, duel.bet)));\n\n            uint duel_bet_common = safeMul(2, duel.bet);\n            duel_fee = safePerc(duel_bet_common, fee);\n\n            uint refFee = 0;\n            uint sum = safeSub(duel_bet_common, duel_fee);\n\n            address winner;\n\n            if (hash % 2 == 0) {\n                duel.creator.transfer(sum);\n                winner = duel.creator;\n                emit resultDuel(_duelID, duel.creator, sum);\n\n            } else {                \n                duel.responder.transfer(sum);\n                winner = duel.responder;\n                emit resultDuel(_duelID, duel.responder, sum);\n            }\n\n            // ref level 1\n            if (RefAddr[winner] != address(0)) {                \n                refFee = refLevel1Fee;\n                rewardAddr[RefAddr[winner]] = safeAdd(rewardAddr[RefAddr[winner]], safePerc(duel_fee, refLevel1Fee));\n\n                // ref level 2\n                if (RefAddr[RefAddr[winner]] != address(0)) {\n                    refFee = safeAdd(refFee, refLevel2Fee);\n                    rewardAddr[RefAddr[RefAddr[winner]]] = safeAdd(rewardAddr[RefAddr[RefAddr[winner]]], safePerc(duel_fee, refLevel2Fee));\n                }\n            }\n            \n            // ref group\n            if (duel.refID != 0) {\n                refFee = safeSub(refGroupFee, refFee);\n                rewardGroup[RefGroup[duel.refID]] = safeAdd(rewardGroup[RefGroup[duel.refID]], safePerc(duel_fee, refFee));\n                reward[N] = safeAdd(reward[N], safeSub(duel_fee, safePerc(duel_fee, refGroupFee)));\n            } else {\n                reward[N] = safeAdd(reward[N], safeSub(duel_fee, safePerc(duel_fee, refFee)));\n            }            \n        }\n    }\n\n    function setMin(uint _min) external onlyOwner {\n        min = _min;\n        emit changeMin(_min);\n    }\n\n    function setMax(uint _max) external onlyOwner {\n        max = _max;\n        emit changeMax(_max);\n    }\n\n    function setFee(uint _fee) external onlyOwner {\n        fee = _fee;\n        emit changeFee(_fee);\n    }\n\n    function setRefGroupFee(uint _refGroupFee) external onlyOwner {\n        refGroupFee = _refGroupFee;        \n        emit changeRefGroupFee(_refGroupFee);\n    }\n    \n    function setRefLevel1Fee(uint _refLevel1Fee) external onlyOwner {\n        refLevel1Fee = _refLevel1Fee;\n        emit changeRefLevel1Fee(_refLevel1Fee);\n    }\n\n    function setRefLevel2Fee(uint _refLevel2Fee) external onlyOwner {\n        refLevel2Fee = _refLevel2Fee;\n        emit changeRefLevel2Fee(_refLevel2Fee);\n    }\n    \n    function setRefGroup(int _ID, address _referrer) external onlyAgent {\n        RefGroup[_ID] = _referrer;\n        emit changeRefGroup(_ID, _referrer);\n    }\n    \n    function setRefAddr(address _referral, address _referrer) external onlyAgent {\n        RefAddr[_referral] = _referrer;\n        emit changeRefAddr(_referral, _referrer);\n    }\n\n    function withdraw() external onlyOwner returns (bool success) {        \n        uint256 N = 1;\n        if (block.timestamp > start) {\n            N = (block.timestamp - start) / period;\n        }\n\n        if (!AlreadyReward[N]) {\n            uint amount = reward[N];\n            AlreadyReward[N] = true;\n            msg.sender.transfer(amount);\n            emit withdrawProfit(amount, msg.sender);\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    function withdrawRefGroup() external returns (bool success) {\n        require(rewardGroup[msg.sender] > 0);\n        uint amount = rewardGroup[msg.sender];\n        rewardGroup[msg.sender] = 0;\n        msg.sender.transfer(amount);\n        emit withdrawProfit(amount, msg.sender);\n        return true;\n    }\n\n    function withdrawRefAddr() external returns (bool success) {\n        require(rewardAddr[msg.sender] > 0);\n        uint amount = rewardAddr[msg.sender];\n        rewardAddr[msg.sender] = 0;\n        msg.sender.transfer(amount);\n        emit withdrawProfit(amount, msg.sender);\n        return true;\n    }\n\n    function withdrawRefBoth() external returns (bool success) {\n        require(rewardAddr[msg.sender] > 0 || rewardGroup[msg.sender] > 0);\n        uint amount = safeAdd(rewardAddr[msg.sender], rewardGroup[msg.sender]);\n        rewardAddr[msg.sender] = 0;\n        rewardGroup[msg.sender] = 0;\n        msg.sender.transfer(amount);\n        emit withdrawProfit(amount, msg.sender);\n        return true;\n    }\n\n    /**\n    * Owner can change period\n    */\n    function setPeriod(uint _period) external onlyOwner {\n        period = _period;\n        emit UpdatedPeriod(_period);\n    }\n\n    /**\n    * Owner can change start\n    */\n    function setStart(uint _start) external onlyOwner {        \n        start = _start;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"RefGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRefBoth\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRefGroup\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AlreadyReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refGroupFee\",\"type\":\"uint256\"}],\"name\":\"setRefGroupFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ID\",\"type\":\"int256\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setRefGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duelID\",\"type\":\"uint256\"}],\"name\":\"DeleteDuel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refLevel1Fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setMin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Agents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refLevel2Fee\",\"type\":\"uint256\"}],\"name\":\"setRefLevel2Fee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Duels\",\"outputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"responder\",\"type\":\"address\"},{\"name\":\"bet\",\"type\":\"uint256\"},{\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"name\":\"refID\",\"type\":\"int256\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_responder\",\"type\":\"address\"}],\"name\":\"CreateDuel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refLevel2Fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duelID\",\"type\":\"uint256\"}],\"name\":\"GetWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refGroupFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"RefAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refLevel1Fee\",\"type\":\"uint256\"}],\"name\":\"setRefLevel1Fee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referral\",\"type\":\"address\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setRefAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duelID\",\"type\":\"uint256\"}],\"name\":\"RespondDuel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRefAddr\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_responder\",\"type\":\"address\"},{\"name\":\"_refID\",\"type\":\"int256\"}],\"name\":\"CreateDuel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"duel\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"responder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refID\",\"type\":\"int256\"}],\"name\":\"newDuel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"duel\",\"type\":\"uint256\"}],\"name\":\"deleteDuel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"duel\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"responder\",\"type\":\"address\"}],\"name\":\"respondDuel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"duel\",\"type\":\"uint256\"}],\"name\":\"refundDuel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"duel\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sum\",\"type\":\"uint256\"}],\"name\":\"resultDuel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"changeMin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"changeMax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ID\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"changeRefGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"referal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"changeRefAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refGroupFee\",\"type\":\"uint256\"}],\"name\":\"changeRefGroupFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refLevel1Fee\",\"type\":\"uint256\"}],\"name\":\"changeRefLevel1Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refLevel2Fee\",\"type\":\"uint256\"}],\"name\":\"changeRefLevel2Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"RefGroup\",\"type\":\"address\"}],\"name\":\"withdrawProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"UpdatedPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_agent\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"UpdatedAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405260646004556113886005556103e86006556101f460075566038d7ea4c68000600855683635c9adc5dea000006009556000600a5562278d00600b5534801561004b57600080fd5b506000805433600160a060020a03199182168117835560028054831682179055808352600360209081526040808520805460ff19166001179055848052600d82527f81955a0a11e65eac625c29e8882660bae4e165a75d72780094acae8ece9a29ee80549094168317909355825193845283015280517f2eeb1402719c87048b9fd0ad0e3645e9b91070f3547fd54fb330fa84c76335369281900390910190a1611b07806100fa6000396000f3006080604052600436106101f85763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630f3a9f6581146101fd5780631fe9eabc14610217578063210e2c5d1461022f57806329cc2584146102635780632bbb6f0c1461028c5780632c40ef8b146102a15780632ff11f26146102b957806330893e47146102d157806338520451146102f55780633ccfd60b1461030d57806343e3b5761461032257806345dc3dd81461034957806350cdea091461036157806366d1d8f81461038257806369fe0e2d146103a35780636ac5db19146103bb5780636e84f870146103d05780637349a3c2146103f157806379ba5097146104095780637a1b4fe51461041e5780637e218fa1146104a15780638da5cb5b146104b5578063948102ac146104ca5780639e5fd0bb146104df578063a5d54a9d146104f4578063a6844c141461050c578063a9fb763c14610521578063b5668b4214610539578063b8ecaed71461055a578063bcbc825014610572578063be9a655514610599578063d4ee1d90146105ae578063d5a50165146105c3578063d903aa97146105ce578063ddca3f43146105e3578063e2dd3e0c146105f8578063ef78d4fd1461060f578063f2fde38b14610624578063f6a03ebf14610645578063f88979451461065d578063faad6eb514610672575b600080fd5b34801561020957600080fd5b50610215600435610698565b005b34801561022357600080fd5b506102156004356106e7565b34801561023b57600080fd5b50610247600435610736565b60408051600160a060020a039092168252519081900360200190f35b34801561026f57600080fd5b50610278610751565b604080519115158252519081900360200190f35b34801561029857600080fd5b5061027861083e565b3480156102ad57600080fd5b5061027860043561089d565b3480156102c557600080fd5b506102156004356108b2565b3480156102dd57600080fd5b50610215600435600160a060020a0360243516610901565b34801561030157600080fd5b50610215600435610984565b34801561031957600080fd5b50610278610ad4565b34801561032e57600080fd5b50610337610bc8565b60408051918252519081900360200190f35b34801561035557600080fd5b50610215600435610bce565b34801561036d57600080fd5b50610337600160a060020a0360043516610c1d565b34801561038e57600080fd5b50610337600160a060020a0360043516610c2f565b3480156103af57600080fd5b50610215600435610c41565b3480156103c757600080fd5b50610337610c90565b3480156103dc57600080fd5b50610278600160a060020a0360043516610c96565b3480156103fd57600080fd5b50610215600435610cab565b34801561041557600080fd5b50610215610cfa565b34801561042a57600080fd5b50610436600435610d6f565b6040518087600160a060020a0316600160a060020a0316815260200186600160a060020a0316600160a060020a0316815260200185815260200184815260200183815260200182600381111561048857fe5b60ff168152602001965050505050505060405180910390f35b610215600160a060020a0360043516610dc3565b3480156104c157600080fd5b50610247610f20565b3480156104d657600080fd5b50610337610f2f565b3480156104eb57600080fd5b50610247610f35565b34801561050057600080fd5b50610215600435610f44565b34801561051857600080fd5b5061033761156b565b34801561052d57600080fd5b50610337600435611571565b34801561054557600080fd5b50610247600160a060020a0360043516611583565b34801561056657600080fd5b5061021560043561159e565b34801561057e57600080fd5b50610215600160a060020a03600435811690602435166115ed565b3480156105a557600080fd5b50610337611675565b3480156105ba57600080fd5b5061024761167b565b61021560043561168a565b3480156105da57600080fd5b5061027861176f565b3480156105ef57600080fd5b506103376117ce565b610215600160a060020a03600435166024356117d4565b34801561061b57600080fd5b50610337611954565b34801561063057600080fd5b50610215600160a060020a036004351661195a565b34801561065157600080fd5b506102156004356119a2565b34801561066957600080fd5b506103376119bb565b34801561067e57600080fd5b50610215600160a060020a036004351660243515156119c1565b600054600160a060020a031633146106ac57fe5b600b8190556040805182815290517fe92c9d8e3252d3e4cd9d77ffca1d70a1eef8e8b477120ba7f6034ea494624a939181900360200190a150565b600054600160a060020a031633146106fb57fe5b60098190556040805182815290517f121dbc318539bdd1bf0ac7f18df9d6d0e63cb66a3b62e49881983273020132879181900360200190a150565b600d60205260009081526040902054600160a060020a031681565b33600090815260116020526040812054819081108061077d575033600090815260106020526040812054115b151561078857600080fd5b336000908152601160209081526040808320546010909252909120546107ae9190611a4b565b336000818152601160209081526040808320839055601090915280822082905551929350909183156108fc0291849190818181858888f193505050501580156107fb573d6000803e3d6000fd5b506040805182815233602082015281517f18e6938570e9975e166831d20a32b2779527bbc170b3693623cbac17384a8db4929181900390910190a1600191505090565b336000908152601060205260408120548190811061085b57600080fd5b5033600081815260106020526040808220805490839055905190929183156108fc02918491818181858888f193505050501580156107fb573d6000803e3d6000fd5b60126020526000908152604090205460ff1681565b600054600160a060020a031633146108c657fe5b60058190556040805182815290517f8e9039d753ba2f5311b055bf708f6d49941e0681fb76a62440d3012d4da715079181900360200190a150565b3360009081526003602052604090205460ff16151561091c57fe5b6000828152600d60209081526040918290208054600160a060020a031916600160a060020a03851690811790915582518581529182015281517f2eeb1402719c87048b9fd0ad0e3645e9b91070f3547fd54fb330fa84c7633536929181900390910190a15050565b6000806000600c8481548110151561099857fe5b600091825260209091206006909102018054909350600160a060020a031633146109c157600080fd5b6000600584015460ff1660038111156109d657fe5b146109e057600080fd5b60058301805460ff191660011790556002830154600454610a019190611a65565b915060019050600a54421115610a2957600b54600a544203811515610a2257fe5b0460010190505b6000818152600f6020526040902054610a429083611a4b565b6000828152600f602052604090205582546002840154600160a060020a03909116906108fc90610a729085611a9c565b6040518115909202916000818181858888f19350505050158015610a9a573d6000803e3d6000fd5b506040805185815290517f4b42dabac0acdba3ba531c35c031022c30bfb50bfd6512edb058bb1ecd93943a9181900360200190a150505050565b6000805481908190600160a060020a03163314610aed57fe5b60019150600a54421115610b1057600b54600a544203811515610b0c57fe5b0491505b60008281526012602052604090205460ff161515610bbe57506000818152600f60209081526040808320546012909252808320805460ff19166001179055519091339183156108fc0291849190818181858888f19350505050158015610b7a573d6000803e3d6000fd5b506040805182815233602082015281517f18e6938570e9975e166831d20a32b2779527bbc170b3693623cbac17384a8db4929181900390910190a160019250610bc3565b600092505b505090565b60065481565b600054600160a060020a03163314610be257fe5b60088190556040805182815290517f3bd0f412c0eef70e0eb982b0f391fa30c51d4e18d44a14c95bcf48384243af9f9181900360200190a150565b60106020526000908152604090205481565b60116020526000908152604090205481565b600054600160a060020a03163314610c5557fe5b60048190556040805182815290517f6a1db1bf884def8a99e3a9f0c8261f251fed9d085124f9c370396637512742159181900360200190a150565b60095481565b60036020526000908152604090205460ff1681565b600054600160a060020a03163314610cbf57fe5b60078190556040805182815290517fda4f08da1e48818a133d37b204f81103f4c9bfacfd1c475261e14f138e35d3c79181900360200190a150565b600154600160a060020a0316331415610d6d5760015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360015460008054600160a060020a031916600160a060020a039092169190911790555b565b600c805482908110610d7d57fe5b6000918252602090912060069091020180546001820154600283015460038401546004850154600590950154600160a060020a0394851696509390921693909260ff1686565b6008543410158015610dd757506009543411155b1515610de257600080fd5b600c60c06040519081016040528033600160a060020a0316815260200183600160a060020a03168152602001348152602001600081526020016000815260200160006003811115610e2f57fe5b905281546001808201808555600094855260209485902084516006909402018054600160a060020a0319908116600160a060020a039586161782559585015181840180549097169416939093179094556040830151600283015560608301516003808401919091556080840151600484015560a08401516005840180549193909260ff19909216918490811115610ec257fe5b021790555050600c5460408051600019909201825234602083015260008282015251600160a060020a03851693503392507f46a689ee52909ed7653c99df1bd17d87c723e0774623c64d69fb2cc15f48e2ac9181900360600190a350565b600054600160a060020a031681565b60075481565b600254600160a060020a031681565b600080600080600080600080600c89815481101515610f5f57fe5b6000918252602090912060069091020197506002600589015460ff166003811115610f8657fe5b14610f9057600080fd5b8754600160a060020a0316331480610fb457506001880154600160a060020a031633145b1515610fbf57600080fd5b60038801546001014311610fd257600080fd5b60058801805460ff19166003179055600a54600097506001965042111561100b57600b54600a54420381151561100457fe5b0460010195505b6003880154401580611024575061010088600301544303115b15611141576110398860020154600454611a65565b885460028a0154919850600160a060020a0316906108fc9061105b908a611a9c565b6040518115909202916000818181858888f19350505050158015611083573d6000803e3d6000fd5b5060018801546002890154600160a060020a03909116906108fc906110a8908a611a9c565b6040518115909202916000818181858888f193505050501580156110d0573d6000803e3d6000fd5b506000868152600f60205260409020546110f4906110ef60028a611ab0565b611a4b565b6000878152600f60209081526040918290209290925580518b815290517f1a354409b05f20e34b47462176326f0c68156e9c5dcdc9e9d01f74855a00c86b929181900390910190a1611560565b600388015488546001808b015460028c01546040805193909501406020808501919091526c01000000000000000000000000600160a060020a0395861681028588015294909216909302605483015260688083019390935283518083039093018352608890910192839052815191929182918401908083835b602083106111d95780518252601f1990920191602091820191016111ba565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004945061121b60028960020154611ab0565b935061122984600454611a65565b9650600092506112398488611a9c565b91506002850615156112cd578754604051600160a060020a039091169083156108fc029084906000818181858888f1935050505015801561127e573d6000803e3d6000fd5b50508654604080518a8152602081018490528151600160a060020a039093169283927fd5d7a0b8fab07917df716174aaf5340f123e0000a7d112f8eb289229f0de7486928290030190a2611357565b6001880154604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015611309573d6000803e3d6000fd5b50506001870154604080518a8152602081018490528151600160a060020a039093169283927fd5d7a0b8fab07917df716174aaf5340f123e0000a7d112f8eb289229f0de7486928290030190a25b600160a060020a038181166000908152600e6020526040902054161561147657600654600160a060020a038083166000908152600e602090815260408083205490931682526011905220549093506113b3906110ef8986611a65565b600160a060020a038083166000908152600e602081815260408084208054861685526011835281852096909655919052925482168152919091205416156114765761140083600754611a4b565b600160a060020a038083166000908152600e602090815260408083205484168352808320549093168252601190522054600754919450611445916110ef908a90611a65565b600160a060020a038083166000908152600e6020908152604080832054841683528083205490931682526011905220555b60048801541561152f5761148c60055484611a9c565b60048901546000908152600d6020908152604080832054600160a060020a0316835260109091529020549093506114c7906110ef8986611a65565b60048901546000908152600d6020908152604080832054600160a060020a031683526010825280832093909355888252600f9052205460055461151b91906110ef908a90611516908290611a65565b611a9c565b6000878152600f6020526040902055611560565b6000868152600f6020526040902054611550906110ef896115168188611a65565b6000878152600f60205260409020555b505050505050505050565b60055481565b600f6020526000908152604090205481565b600e60205260009081526040902054600160a060020a031681565b600054600160a060020a031633146115b257fe5b60068190556040805182815290517fbc8b6a0cf32a7f8154885a78cddd31ee6f746b16b1b0629857618728f44ea9049181900360200190a150565b3360009081526003602052604090205460ff16151561160857fe5b600160a060020a038281166000818152600e60209081526040918290208054600160a060020a0319169486169485179055815192835282019290925281517f7a831e6caa7442c8e5136a0922dd137af3523aafca96cbd62e6ec8924e017b98929181900390910190a15050565b600a5481565b600154600160a060020a031681565b6000600c8281548110151561169b57fe5b6000918252602082206006909102019150600582015460ff1660038111156116bf57fe5b146116c957600080fd5b600281015434146116d957600080fd5b6001810154600160a060020a03163314806116ff57506001810154600160a060020a0316155b151561170a57600080fd5b60058101805460ff1916600217905560018101805433600160a060020a031990911681179091554360038301556040805184815290517f8c0e4b140efc5c0284e63b4ea6428fd6b3fcd087e6bc50b31cba70c5dae8c6d8916020908290030190a25050565b336000908152601160205260408120548190811061178c57600080fd5b5033600081815260116020526040808220805490839055905190929183156108fc02918491818181858888f193505050501580156107fb573d6000803e3d6000fd5b60045481565b60085434101580156117e857506009543411155b15156117f357600080fd5b6000818152600d6020526040902054600160a060020a0316151561181657600080fd5b600c60c06040519081016040528033600160a060020a0316815260200184600160a060020a03168152602001348152602001600081526020018381526020016000600381111561186257fe5b905281546001808201808555600094855260209485902084516006909402018054600160a060020a0319908116600160a060020a039586161782559585015181840180549097169416939093179094556040830151600283015560608301516003808401919091556080840151600484015560a08401516005840180549193909260ff199092169184908111156118f557fe5b021790555050600c5460408051600019909201825234602083015281810185905251600160a060020a03861693503392507f46a689ee52909ed7653c99df1bd17d87c723e0774623c64d69fb2cc15f48e2ac9181900360600190a35050565b600b5481565b600054600160a060020a0316331461196e57fe5b600160a060020a038116151561198057fe5b60018054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a031633146119b657fe5b600a55565b60085481565b600054600160a060020a031633146119d557fe5b600160a060020a03821615156119e757fe5b600160a060020a038216600081815260036020908152604091829020805460ff191685151590811790915582519384529083015280517fefdea550a3bf9a494aa4c9dc6131b82ddac18bde46375308e367bcd2dda4d5c99281900390910190a15050565b600082820183811015611a5a57fe5b8091505b5092915050565b600080831515611a785760009150611a5e565b50828202828482811515611a8857fe5b0414611a9057fe5b61271090049392505050565b60008083831115611aa957fe5b5050900390565b600080831515611ac35760009150611a5e565b50828202828482811515611ad357fe5b0414611a5a57fe00a165627a7a72305820cd7a53a79ea5e16dce3fa3c211aed24928f6374177f28cd458709c73e90366ad0029"
}