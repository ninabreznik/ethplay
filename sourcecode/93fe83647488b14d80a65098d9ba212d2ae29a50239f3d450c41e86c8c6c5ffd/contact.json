{
  "address": "0xb07ec2c28834b889b1ce527ca0f19364cd38935c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Cardstack: Old Token",
  "contractName": "CardStackToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-26\n*/\n\npragma solidity ^0.4.13;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ninterface ITokenLedger {\n  function totalTokens() external view returns (uint256);\n  function totalInCirculation() external view returns (uint256);\n  function balanceOf(address account) external view returns (uint256);\n  function mintTokens(uint256 amount) external;\n  function transfer(address sender, address reciever, uint256 amount) external;\n  function creditAccount(address account, uint256 amount) external;\n  function debitAccount(address account, uint256 amount) external;\n  function addAdmin(address admin) external;\n  function removeAdmin(address admin) external;\n}\n\nlibrary CstLibrary {\n  using SafeMath for uint256;\n\n  function getTokenName(address _storage) public view returns(bytes32) {\n    return ExternalStorage(_storage).getBytes32Value(\"cstTokenName\");\n  }\n\n  function setTokenName(address _storage, bytes32 tokenName) public {\n    ExternalStorage(_storage).setBytes32Value(\"cstTokenName\", tokenName);\n  }\n\n  function getTokenSymbol(address _storage) public view returns(bytes32) {\n    return ExternalStorage(_storage).getBytes32Value(\"cstTokenSymbol\");\n  }\n\n  function setTokenSymbol(address _storage, bytes32 tokenName) public {\n    ExternalStorage(_storage).setBytes32Value(\"cstTokenSymbol\", tokenName);\n  }\n\n  function getBuyPrice(address _storage) public view returns(uint256) {\n    return ExternalStorage(_storage).getUIntValue(\"cstBuyPrice\");\n  }\n\n  function setBuyPrice(address _storage, uint256 value) public {\n    ExternalStorage(_storage).setUIntValue(\"cstBuyPrice\", value);\n  }\n\n  function getCirculationCap(address _storage) public view returns(uint256) {\n    return ExternalStorage(_storage).getUIntValue(\"cstCirculationCap\");\n  }\n\n  function setCirculationCap(address _storage, uint256 value) public {\n    ExternalStorage(_storage).setUIntValue(\"cstCirculationCap\", value);\n  }\n\n  function getBalanceLimit(address _storage) public view returns(uint256) {\n    return ExternalStorage(_storage).getUIntValue(\"cstBalanceLimit\");\n  }\n\n  function setBalanceLimit(address _storage, uint256 value) public {\n    ExternalStorage(_storage).setUIntValue(\"cstBalanceLimit\", value);\n  }\n\n  function getFoundation(address _storage) public view returns(address) {\n    return ExternalStorage(_storage).getAddressValue(\"cstFoundation\");\n  }\n\n  function setFoundation(address _storage, address value) public {\n    ExternalStorage(_storage).setAddressValue(\"cstFoundation\", value);\n  }\n\n  function getAllowance(address _storage, address account, address spender) public view returns (uint256) {\n    return ExternalStorage(_storage).getMultiLedgerValue(\"cstAllowance\", account, spender);\n  }\n\n  function setAllowance(address _storage, address account, address spender, uint256 allowance) public {\n    ExternalStorage(_storage).setMultiLedgerValue(\"cstAllowance\", account, spender, allowance);\n  }\n\n  function getCustomBuyerLimit(address _storage, address buyer) public view returns (uint256) {\n    return ExternalStorage(_storage).getLedgerValue(\"cstCustomBuyerLimit\", buyer);\n  }\n\n  function setCustomBuyerLimit(address _storage, address buyer, uint256 value) public {\n    ExternalStorage(_storage).setLedgerValue(\"cstCustomBuyerLimit\", buyer, value);\n  }\n\n  function getCustomBuyerForIndex(address _storage, uint256 index) public view returns (address) {\n    return ExternalStorage(_storage).ledgerEntryForIndex(keccak256(\"cstCustomBuyerLimit\"), index);\n  }\n\n  function getCustomBuyerMappingCount(address _storage) public view returns(uint256) {\n    return ExternalStorage(_storage).getLedgerCount(\"cstCustomBuyerLimit\");\n  }\n\n  function getApprovedBuyer(address _storage, address buyer) public view returns (bool) {\n    return ExternalStorage(_storage).getBooleanMapValue(\"cstApprovedBuyer\", buyer);\n  }\n\n  function setApprovedBuyer(address _storage, address buyer, bool value) public {\n    ExternalStorage(_storage).setBooleanMapValue(\"cstApprovedBuyer\", buyer, value);\n  }\n\n  function getApprovedBuyerForIndex(address _storage, uint256 index) public view returns (address) {\n    return ExternalStorage(_storage).booleanMapEntryForIndex(keccak256(\"cstApprovedBuyer\"), index);\n  }\n\n  function getApprovedBuyerMappingCount(address _storage) public view returns(uint256) {\n    return ExternalStorage(_storage).getBooleanMapCount(\"cstApprovedBuyer\");\n  }\n\n  function getTotalUnvestedAndUnreleasedTokens(address _storage) public view returns(uint256) {\n    return ExternalStorage(_storage).getUIntValue(\"cstUnvestedAndUnreleasedTokens\");\n  }\n\n  function setTotalUnvestedAndUnreleasedTokens(address _storage, uint256 value) public {\n    ExternalStorage(_storage).setUIntValue(\"cstUnvestedAndUnreleasedTokens\", value);\n  }\n\n  function vestingMappingSize(address _storage) public view returns(uint256) {\n    return ExternalStorage(_storage).getLedgerCount(\"cstFullyVestedAmount\");\n  }\n\n  function vestingBeneficiaryForIndex(address _storage, uint256 index) public view returns(address) {\n    return ExternalStorage(_storage).ledgerEntryForIndex(keccak256(\"cstFullyVestedAmount\"), index);\n  }\n\n  function releasableAmount(address _storage, address beneficiary) public view returns (uint256) {\n    uint256 releasedAmount = getVestingReleasedAmount(_storage, beneficiary);\n    return vestedAvailableAmount(_storage, beneficiary).sub(releasedAmount);\n  }\n\n  function vestedAvailableAmount(address _storage, address beneficiary) public view returns (uint256) {\n    uint256 start = getVestingStart(_storage, beneficiary);\n    uint256 fullyVestedAmount = getFullyVestedAmount(_storage, beneficiary);\n\n    if (start == 0 || fullyVestedAmount == 0) {\n      return 0;\n    }\n\n    uint256 duration = getVestingDuration(_storage, beneficiary);\n    if (duration == 0) {\n      return 0;\n    }\n    uint256 cliff = getVestingCliff(_storage, beneficiary);\n    uint256 revokeDate = getVestingRevokeDate(_storage, beneficiary);\n\n    if (now < cliff || (revokeDate > 0 && revokeDate < cliff)) {\n      return 0;\n    } else if (revokeDate > 0 && revokeDate > cliff) {\n      return fullyVestedAmount.mul(revokeDate.sub(start)).div(duration);\n    } else if (now >= start.add(duration)) {\n      return fullyVestedAmount;\n    } else {\n      return fullyVestedAmount.mul(now.sub(start)).div(duration);\n    }\n  }\n\n  function vestedAmount(address _storage, address beneficiary) public view returns (uint256) {\n    uint256 start = getVestingStart(_storage, beneficiary);\n    uint256 fullyVestedAmount = getFullyVestedAmount(_storage, beneficiary);\n\n    if (start == 0 || fullyVestedAmount == 0) {\n      return 0;\n    }\n\n    uint256 duration = getVestingDuration(_storage, beneficiary);\n    if (duration == 0) {\n      return 0;\n    }\n\n    uint256 revokeDate = getVestingRevokeDate(_storage, beneficiary);\n\n    if (now <= start) {\n      return 0;\n    } else if (revokeDate > 0) {\n      return fullyVestedAmount.mul(revokeDate.sub(start)).div(duration);\n    } else if (now >= start.add(duration)) {\n      return fullyVestedAmount;\n    } else {\n      return fullyVestedAmount.mul(now.sub(start)).div(duration);\n    }\n  }\n\n  function canGrantVestedTokens(address _storage, address beneficiary) public view returns (bool) {\n    uint256 existingFullyVestedAmount = getFullyVestedAmount(_storage, beneficiary);\n    if (existingFullyVestedAmount == 0) {\n      return true;\n    }\n\n    uint256 existingVestedAmount = vestedAvailableAmount(_storage, beneficiary);\n    uint256 existingReleasedAmount = getVestingReleasedAmount(_storage, beneficiary);\n    uint256 revokeDate = getVestingRevokeDate(_storage, beneficiary);\n\n    if (revokeDate > 0 ||\n        (existingVestedAmount == existingFullyVestedAmount &&\n        existingReleasedAmount == existingFullyVestedAmount)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function canRevokeVesting(address _storage, address beneficiary) public view returns (bool) {\n    bool isRevocable = getVestingRevocable(_storage, beneficiary);\n    uint256 revokeDate = getVestingRevokeDate(_storage, beneficiary);\n    uint256 start = getVestingStart(_storage, beneficiary);\n    uint256 duration = getVestingDuration(_storage, beneficiary);\n\n    return start > 0 &&\n           isRevocable &&\n           revokeDate == 0 &&\n           now < start.add(duration);\n  }\n\n  function revokeVesting(address _storage, address beneficiary) public {\n    require(canRevokeVesting(_storage, beneficiary));\n\n    uint256 totalUnvestedAndUnreleasedAmount = getTotalUnvestedAndUnreleasedTokens(_storage);\n    uint256 unvestedAmount = getFullyVestedAmount(_storage, beneficiary).sub(vestedAvailableAmount(_storage, beneficiary));\n\n    setVestingRevokeDate(_storage, beneficiary, now);\n    setTotalUnvestedAndUnreleasedTokens(_storage, totalUnvestedAndUnreleasedAmount.sub(unvestedAmount));\n  }\n\n  function getVestingSchedule(address _storage, address _beneficiary) public\n                                                                      view returns (uint256 startDate,\n                                                                                        uint256 cliffDate,\n                                                                                        uint256 durationSec,\n                                                                                        uint256 fullyVestedAmount,\n                                                                                        uint256 releasedAmount,\n                                                                                        uint256 revokeDate,\n                                                                                        bool isRevocable) {\n    startDate         = getVestingStart(_storage, _beneficiary);\n    cliffDate         = getVestingCliff(_storage, _beneficiary);\n    durationSec       = getVestingDuration(_storage, _beneficiary);\n    fullyVestedAmount = getFullyVestedAmount(_storage, _beneficiary);\n    releasedAmount    = getVestingReleasedAmount(_storage, _beneficiary);\n    revokeDate        = getVestingRevokeDate(_storage, _beneficiary);\n    isRevocable       = getVestingRevocable(_storage, _beneficiary);\n  }\n\n  function setVestingSchedule(address _storage,\n                              address beneficiary,\n                              uint256 fullyVestedAmount,\n                              uint256 startDate,\n                              uint256 cliffDate,\n                              uint256 duration,\n                              bool isRevocable) public {\n    require(canGrantVestedTokens(_storage, beneficiary));\n\n    uint256 totalUnvestedAndUnreleasedAmount = getTotalUnvestedAndUnreleasedTokens(_storage);\n    setTotalUnvestedAndUnreleasedTokens(_storage, totalUnvestedAndUnreleasedAmount.add(fullyVestedAmount));\n\n    ExternalStorage(_storage).setLedgerValue(\"cstVestingStart\", beneficiary, startDate);\n    ExternalStorage(_storage).setLedgerValue(\"cstVestingCliff\", beneficiary, cliffDate);\n    ExternalStorage(_storage).setLedgerValue(\"cstVestingDuration\", beneficiary, duration);\n    ExternalStorage(_storage).setLedgerValue(\"cstFullyVestedAmount\", beneficiary, fullyVestedAmount);\n    ExternalStorage(_storage).setBooleanMapValue(\"cstVestingRevocable\", beneficiary, isRevocable);\n\n    setVestingRevokeDate(_storage, beneficiary, 0);\n    setVestingReleasedAmount(_storage, beneficiary, 0);\n  }\n\n  function releaseVestedTokens(address _storage, address beneficiary) public {\n    uint256 unreleased = releasableAmount(_storage, beneficiary);\n    uint256 releasedAmount = getVestingReleasedAmount(_storage, beneficiary);\n    uint256 totalUnvestedAndUnreleasedAmount = getTotalUnvestedAndUnreleasedTokens(_storage);\n\n    releasedAmount = releasedAmount.add(unreleased);\n    setVestingReleasedAmount(_storage, beneficiary, releasedAmount);\n    setTotalUnvestedAndUnreleasedTokens(_storage, totalUnvestedAndUnreleasedAmount.sub(unreleased));\n  }\n\n  function getVestingStart(address _storage, address beneficiary) public view returns(uint256) {\n    return ExternalStorage(_storage).getLedgerValue(\"cstVestingStart\", beneficiary);\n  }\n\n  function getVestingCliff(address _storage, address beneficiary) public view returns(uint256) {\n    return ExternalStorage(_storage).getLedgerValue(\"cstVestingCliff\", beneficiary);\n  }\n\n  function getVestingDuration(address _storage, address beneficiary) public view returns(uint256) {\n    return ExternalStorage(_storage).getLedgerValue(\"cstVestingDuration\", beneficiary);\n  }\n\n  function getFullyVestedAmount(address _storage, address beneficiary) public view returns(uint256) {\n    return ExternalStorage(_storage).getLedgerValue(\"cstFullyVestedAmount\", beneficiary);\n  }\n\n  function getVestingRevocable(address _storage, address beneficiary) public view returns(bool) {\n    return ExternalStorage(_storage).getBooleanMapValue(\"cstVestingRevocable\", beneficiary);\n  }\n\n  function setVestingReleasedAmount(address _storage, address beneficiary, uint256 value) public {\n    ExternalStorage(_storage).setLedgerValue(\"cstVestingReleasedAmount\", beneficiary, value);\n  }\n\n  function getVestingReleasedAmount(address _storage, address beneficiary) public view returns(uint256) {\n    return ExternalStorage(_storage).getLedgerValue(\"cstVestingReleasedAmount\", beneficiary);\n  }\n\n  function setVestingRevokeDate(address _storage, address beneficiary, uint256 value) public {\n    ExternalStorage(_storage).setLedgerValue(\"cstVestingRevokeDate\", beneficiary, value);\n  }\n\n  function getVestingRevokeDate(address _storage, address beneficiary) public view returns(uint256) {\n    return ExternalStorage(_storage).getLedgerValue(\"cstVestingRevokeDate\", beneficiary);\n  }\n\n  function getRewardsContractHash(address _storage) public view returns (bytes32) {\n    return ExternalStorage(_storage).getBytes32Value(\"cstRewardsContractHash\");\n  }\n\n  function setRewardsContractHash(address _storage, bytes32 rewardsContractHash) public {\n    ExternalStorage(_storage).setBytes32Value(\"cstRewardsContractHash\", rewardsContractHash);\n  }\n\n}\n\ncontract ERC20 {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address account) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract administratable is Ownable {\n  using SafeMath for uint256;\n\n  address[] public adminsForIndex;\n  address[] public superAdminsForIndex;\n  mapping (address => bool) public admins;\n  mapping (address => bool) public superAdmins;\n  mapping (address => bool) private processedAdmin;\n  mapping (address => bool) private processedSuperAdmin;\n\n  event AddAdmin(address indexed admin);\n  event RemoveAdmin(address indexed admin);\n  event AddSuperAdmin(address indexed admin);\n  event RemoveSuperAdmin(address indexed admin);\n\n  modifier onlyAdmins {\n    if (msg.sender != owner && !superAdmins[msg.sender] && !admins[msg.sender]) revert();\n    _;\n  }\n\n  modifier onlySuperAdmins {\n    if (msg.sender != owner && !superAdmins[msg.sender]) revert();\n    _;\n  }\n\n  function totalSuperAdminsMapping() public view returns (uint256) {\n    return superAdminsForIndex.length;\n  }\n\n  function addSuperAdmin(address admin) public onlySuperAdmins {\n    require(admin != address(0));\n    superAdmins[admin] = true;\n    if (!processedSuperAdmin[admin]) {\n      superAdminsForIndex.push(admin);\n      processedSuperAdmin[admin] = true;\n    }\n\n    emit AddSuperAdmin(admin);\n  }\n\n  function removeSuperAdmin(address admin) public onlySuperAdmins {\n    require(admin != address(0));\n    superAdmins[admin] = false;\n\n    emit RemoveSuperAdmin(admin);\n  }\n\n  function totalAdminsMapping() public view returns (uint256) {\n    return adminsForIndex.length;\n  }\n\n  function addAdmin(address admin) public onlySuperAdmins {\n    require(admin != address(0));\n    admins[admin] = true;\n    if (!processedAdmin[admin]) {\n      adminsForIndex.push(admin);\n      processedAdmin[admin] = true;\n    }\n\n    emit AddAdmin(admin);\n  }\n\n  function removeAdmin(address admin) public onlySuperAdmins {\n    require(admin != address(0));\n    admins[admin] = false;\n\n    emit RemoveAdmin(admin);\n  }\n}\n\ncontract CstLedger is ITokenLedger, administratable {\n\n  using SafeMath for uint256;\n\n  uint256 private _totalInCirculation; // warning this does not take into account unvested nor vested-unreleased tokens into consideration\n  uint256 private _totalTokens;\n  mapping (address => uint256) private _balanceOf;\n  mapping (address => bool) private accounts;\n  address[] public accountForIndex;\n\n  function totalTokens() external view returns (uint256) {\n    return _totalTokens;\n  }\n\n  function totalInCirculation() external view returns (uint256) {\n    return _totalInCirculation;\n  }\n\n  function balanceOf(address account) external view returns (uint256) {\n    return _balanceOf[account];\n  }\n\n  function mintTokens(uint256 amount) external onlyAdmins {\n    _totalTokens = _totalTokens.add(amount);\n  }\n\n  function ledgerCount() external view returns (uint256) {\n    return accountForIndex.length;\n  }\n\n  function makeAccountIterable(address account) internal {\n    if (!accounts[account]) {\n      accountForIndex.push(account);\n      accounts[account] = true;\n    }\n  }\n\n  function transfer(address sender, address recipient, uint256 amount) external onlyAdmins {\n    require(sender != address(0));\n    require(recipient != address(0));\n    require(_balanceOf[sender] >= amount);\n\n    _balanceOf[sender] = _balanceOf[sender].sub(amount);\n    _balanceOf[recipient] = _balanceOf[recipient].add(amount);\n    makeAccountIterable(recipient);\n  }\n\n  function creditAccount(address account, uint256 amount) external onlyAdmins { // remove tokens\n    require(account != address(0));\n    require(_balanceOf[account] >= amount);\n\n    _totalInCirculation = _totalInCirculation.sub(amount);\n    _balanceOf[account] = _balanceOf[account].sub(amount);\n  }\n\n  function debitAccount(address account, uint256 amount) external onlyAdmins { // add tokens\n    require(account != address(0));\n    _totalInCirculation = _totalInCirculation.add(amount);\n    _balanceOf[account] = _balanceOf[account].add(amount);\n    makeAccountIterable(account);\n  }\n}\n\ncontract ExternalStorage is administratable {\n  using SafeMath for uint256;\n\n  mapping(bytes32 => address[]) public primaryLedgerEntryForIndex;\n  mapping(bytes32 => mapping(address => address[])) public secondaryLedgerEntryForIndex;\n  mapping(bytes32 => mapping(address => mapping(address => uint256))) private MultiLedgerStorage;\n  mapping(bytes32 => mapping(address => bool)) private ledgerPrimaryEntries;\n  mapping(bytes32 => mapping(address => mapping(address => bool))) private ledgerSecondaryEntries;\n\n  function getMultiLedgerValue(string record, address primaryAddress, address secondaryAddress) external view returns (uint256) {\n    return MultiLedgerStorage[keccak256(abi.encodePacked(record))][primaryAddress][secondaryAddress];\n  }\n\n  function primaryLedgerCount(string record) external view returns (uint256) {\n    return primaryLedgerEntryForIndex[keccak256(abi.encodePacked(record))].length;\n  }\n\n  function secondaryLedgerCount(string record, address primaryAddress) external view returns (uint256) {\n    return secondaryLedgerEntryForIndex[keccak256(abi.encodePacked(record))][primaryAddress].length;\n  }\n\n  function setMultiLedgerValue(string record, address primaryAddress, address secondaryAddress, uint256 value) external onlyAdmins {\n    bytes32 hash = keccak256(abi.encodePacked(record));\n    if (!ledgerSecondaryEntries[hash][primaryAddress][secondaryAddress]) {\n      secondaryLedgerEntryForIndex[hash][primaryAddress].push(secondaryAddress);\n      ledgerSecondaryEntries[hash][primaryAddress][secondaryAddress] = true;\n\n      if (!ledgerPrimaryEntries[hash][primaryAddress]) {\n        primaryLedgerEntryForIndex[hash].push(primaryAddress);\n        ledgerPrimaryEntries[hash][primaryAddress] = true;\n      }\n    }\n\n    MultiLedgerStorage[hash][primaryAddress][secondaryAddress] = value;\n  }\n\n  mapping(bytes32 => address[]) public ledgerEntryForIndex;\n  mapping(bytes32 => mapping(address => uint256)) private LedgerStorage;\n  mapping(bytes32 => mapping(address => bool)) private ledgerAccounts;\n\n  function getLedgerValue(string record, address _address) external view returns (uint256) {\n    return LedgerStorage[keccak256(abi.encodePacked(record))][_address];\n  }\n\n  function getLedgerCount(string record) external view returns (uint256) {\n    return ledgerEntryForIndex[keccak256(abi.encodePacked(record))].length;\n  }\n\n  function setLedgerValue(string record, address _address, uint256 value) external onlyAdmins {\n    bytes32 hash = keccak256(abi.encodePacked(record));\n    if (!ledgerAccounts[hash][_address]) {\n      ledgerEntryForIndex[hash].push(_address);\n      ledgerAccounts[hash][_address] = true;\n    }\n\n    LedgerStorage[hash][_address] = value;\n  }\n\n  mapping(bytes32 => address[]) public booleanMapEntryForIndex;\n  mapping(bytes32 => mapping(address => bool)) private BooleanMapStorage;\n  mapping(bytes32 => mapping(address => bool)) private booleanMapAccounts;\n\n  function getBooleanMapValue(string record, address _address) external view returns (bool) {\n    return BooleanMapStorage[keccak256(abi.encodePacked(record))][_address];\n  }\n\n  function getBooleanMapCount(string record) external view returns (uint256) {\n    return booleanMapEntryForIndex[keccak256(abi.encodePacked(record))].length;\n  }\n\n  function setBooleanMapValue(string record, address _address, bool value) external onlyAdmins {\n    bytes32 hash = keccak256(abi.encodePacked(record));\n    if (!booleanMapAccounts[hash][_address]) {\n      booleanMapEntryForIndex[hash].push(_address);\n      booleanMapAccounts[hash][_address] = true;\n    }\n\n    BooleanMapStorage[hash][_address] = value;\n  }\n\n  mapping(bytes32 => uint256) private UIntStorage;\n\n  function getUIntValue(string record) external view returns (uint256) {\n    return UIntStorage[keccak256(abi.encodePacked(record))];\n  }\n\n  function setUIntValue(string record, uint256 value) external onlyAdmins {\n    UIntStorage[keccak256(abi.encodePacked(record))] = value;\n  }\n\n  mapping(bytes32 => bytes32) private Bytes32Storage;\n\n  function getBytes32Value(string record) external view returns (bytes32) {\n    return Bytes32Storage[keccak256(abi.encodePacked(record))];\n  }\n\n  function setBytes32Value(string record, bytes32 value) external onlyAdmins {\n    Bytes32Storage[keccak256(abi.encodePacked(record))] = value;\n  }\n\n  mapping(bytes32 => address) private AddressStorage;\n\n  function getAddressValue(string record) external view returns (address) {\n    return AddressStorage[keccak256(abi.encodePacked(record))];\n  }\n\n  function setAddressValue(string record, address value) external onlyAdmins {\n    AddressStorage[keccak256(abi.encodePacked(record))] = value;\n  }\n\n  mapping(bytes32 => bytes) private BytesStorage;\n\n  function getBytesValue(string record) external view returns (bytes) {\n    return BytesStorage[keccak256(abi.encodePacked(record))];\n  }\n\n  function setBytesValue(string record, bytes value) external onlyAdmins {\n    BytesStorage[keccak256(abi.encodePacked(record))] = value;\n  }\n\n  mapping(bytes32 => bool) private BooleanStorage;\n\n  function getBooleanValue(string record) external view returns (bool) {\n    return BooleanStorage[keccak256(abi.encodePacked(record))];\n  }\n\n  function setBooleanValue(string record, bool value) external onlyAdmins {\n    BooleanStorage[keccak256(abi.encodePacked(record))] = value;\n  }\n\n  mapping(bytes32 => int256) private IntStorage;\n\n  function getIntValue(string record) external view returns (int256) {\n    return IntStorage[keccak256(abi.encodePacked(record))];\n  }\n\n  function setIntValue(string record, int256 value) external onlyAdmins {\n    IntStorage[keccak256(abi.encodePacked(record))] = value;\n  }\n}\n\ncontract configurable {\n  function configureFromStorage() public returns (bool);\n}\n\ncontract displayable {\n  function bytes32ToString(bytes32 x) public pure returns (string) {\n    bytes memory bytesString = new bytes(32);\n    uint256 charCount = 0;\n    for (uint256 j = 0; j < 32; j++) {\n      if (x[j] != 0) {\n        bytesString[charCount] = x[j];\n        charCount++;\n      }\n    }\n    bytes memory bytesStringTrimmed = new bytes(charCount);\n    for (j = 0; j < charCount; j++) {\n      bytesStringTrimmed[j] = bytesString[j];\n    }\n    return string(bytesStringTrimmed);\n  }\n}\n\ncontract freezable is administratable {\n  using SafeMath for uint256;\n\n  bool public frozenToken;\n  // TODO move this into external storage\n  address[] public frozenAccountForIndex;\n  mapping (address => bool) public frozenAccount;\n  mapping (address => bool) private processedAccount;\n\n  event FrozenFunds(address indexed target, bool frozen);\n  event FrozenToken(bool frozen);\n\n  modifier unlessFrozen {\n    require(!frozenToken);\n    require(!frozenAccount[msg.sender]);\n    _;\n  }\n\n  function totalFrozenAccountsMapping() public view returns(uint256) {\n    return frozenAccountForIndex.length;\n  }\n\n  function freezeAccount(address target, bool freeze) public onlySuperAdmins {\n    frozenAccount[target] = freeze;\n    if (!processedAccount[target]) {\n      frozenAccountForIndex.push(target);\n      processedAccount[target] = true;\n    }\n    emit FrozenFunds(target, freeze);\n  }\n\n  function freezeToken(bool freeze) public onlySuperAdmins {\n    frozenToken = freeze;\n    emit FrozenToken(frozenToken);\n  }\n\n}\n\ncontract IStorable {\n  function getLedgerNameHash() external view returns (bytes32);\n  function getStorageNameHash() external view returns (bytes32);\n}\n\ncontract upgradeable is administratable {\n  address public predecessor;\n  address public successor;\n  bool public isTokenContract;\n  string public version;\n\n  event Upgraded(address indexed successor);\n  event UpgradedFrom(address indexed predecessor);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n  modifier unlessUpgraded() {\n    if (msg.sender != successor && successor != address(0)) revert();\n    _;\n  }\n\n  modifier isUpgraded() {\n    if (successor == address(0)) revert();\n    _;\n  }\n\n  modifier hasPredecessor() {\n    if (predecessor == address(0)) revert();\n    _;\n  }\n\n  function isDeprecated() public view returns (bool) {\n    return successor != address(0);\n  }\n\n  function upgradeTo(address _successor, uint256 remainingContractBalance) public onlySuperAdmins unlessUpgraded returns (bool){\n    require(_successor != address(0));\n    successor = _successor;\n    if (remainingContractBalance > 0) {\n      emit Transfer(this, _successor, remainingContractBalance);\n    }\n\n    emit Upgraded(_successor);\n    return true;\n  }\n\n  function upgradedFrom(address _predecessor) public onlySuperAdmins returns (bool) {\n    require(_predecessor != address(0));\n\n    predecessor = _predecessor;\n\n    emit UpgradedFrom(_predecessor);\n\n    // TODO refactor this into registry contract when ready for registry upgrade\n    if (upgradeable(_predecessor).predecessor() != address(0)) {\n      if (upgradeable(_predecessor).isTokenContract()) {\n        emit Transfer(_predecessor, this, ERC20(_predecessor).balanceOf(_predecessor));\n      }\n    } else {\n      emit Transfer(this, this, 0); // make etherscan see this as an ERC-20. lets remove in v3\n    }\n\n    return true;\n  }\n}\n\ncontract CardStackToken is ERC20,\n                           freezable,\n                           displayable,\n                           upgradeable,\n                           configurable,\n                           IStorable {\n\n  using SafeMath for uint256;\n  using CstLibrary for address;\n\n  ITokenLedger public tokenLedger;\n  string public storageName;\n  string public ledgerName;\n  address public externalStorage;\n  address public registry;\n  uint8 public constant decimals = 18;\n  bool public isTokenContract = true;\n  bool public haltPurchase;\n\n  // This state is specific to the first version of the CST\n  // token contract and the token generation event, and hence\n  // there is no reason to persist in external storage for\n  // future contracts.\n  bool public allowTransfers;\n  mapping (address => bool) public whitelistedTransferer;\n  address[] public whitelistedTransfererForIndex;\n  mapping (address => bool) private processedWhitelistedTransferer;\n  uint256 public contributionMinimum;\n\n  event Mint(uint256 amountMinted, uint256 totalTokens, uint256 circulationCap);\n  event Approval(address indexed _owner,\n                 address indexed _spender,\n                 uint256 _value);\n  event Transfer(address indexed _from,\n                 address indexed _to,\n                 uint256 _value);\n  event WhiteList(address indexed buyer, uint256 holdCap);\n  event ConfigChanged(uint256 buyPrice, uint256 circulationCap, uint256 balanceLimit);\n  event VestedTokenGrant(address indexed beneficiary, uint256 startDate, uint256 cliffDate, uint256 durationSec, uint256 fullyVestedAmount, bool isRevocable);\n  event VestedTokenRevocation(address indexed beneficiary);\n  event VestedTokenRelease(address indexed beneficiary, uint256 amount);\n  event StorageUpdated(address storageAddress, address ledgerAddress);\n  event PurchaseHalted();\n  event PurchaseResumed();\n\n  modifier onlyFoundation {\n    address foundation = externalStorage.getFoundation();\n    require(foundation != address(0));\n    if (msg.sender != owner && msg.sender != foundation) revert();\n    _;\n  }\n\n  modifier initStorage {\n    address ledgerAddress = Registry(registry).getStorage(ledgerName);\n    address storageAddress = Registry(registry).getStorage(storageName);\n\n    tokenLedger = ITokenLedger(ledgerAddress);\n    externalStorage = storageAddress;\n    _;\n  }\n\n  constructor(address _registry, string _storageName, string _ledgerName) public payable {\n    isTokenContract = true;\n    version = \"2\";\n    require(_registry != address(0));\n    storageName = _storageName;\n    ledgerName = _ledgerName;\n    registry = _registry;\n\n    addSuperAdmin(registry);\n  }\n\n  /* This unnamed function is called whenever someone tries to send ether directly to the token contract */\n  function () public {\n    revert(); // Prevents accidental sending of ether\n  }\n\n  function getLedgerNameHash() external view returns (bytes32) {\n    return keccak256(abi.encodePacked(ledgerName));\n  }\n\n  function getStorageNameHash() external view returns (bytes32) {\n    return keccak256(abi.encodePacked(storageName));\n  }\n\n  function configure(bytes32 _tokenName,\n                     bytes32 _tokenSymbol,\n                     uint256 _buyPrice,\n                     uint256 _circulationCap,\n                     uint256 _balanceLimit,\n                     address _foundation) public onlySuperAdmins initStorage returns (bool) {\n\n    uint256 __buyPrice= externalStorage.getBuyPrice();\n    if (__buyPrice> 0 && __buyPrice!= _buyPrice) {\n      require(frozenToken);\n    }\n\n    externalStorage.setTokenName(_tokenName);\n    externalStorage.setTokenSymbol(_tokenSymbol);\n    externalStorage.setBuyPrice(_buyPrice);\n    externalStorage.setCirculationCap(_circulationCap);\n    externalStorage.setFoundation(_foundation);\n    externalStorage.setBalanceLimit(_balanceLimit);\n\n    emit ConfigChanged(_buyPrice, _circulationCap, _balanceLimit);\n\n    return true;\n  }\n\n  function configureFromStorage() public onlySuperAdmins unlessUpgraded initStorage returns (bool) {\n    freezeToken(true);\n    return true;\n  }\n\n  function updateStorage(string newStorageName, string newLedgerName) public onlySuperAdmins unlessUpgraded returns (bool) {\n    require(frozenToken);\n\n    storageName = newStorageName;\n    ledgerName = newLedgerName;\n\n    configureFromStorage();\n\n    address ledgerAddress = Registry(registry).getStorage(ledgerName);\n    address storageAddress = Registry(registry).getStorage(storageName);\n    emit StorageUpdated(storageAddress, ledgerAddress);\n    return true;\n  }\n\n  function name() public view unlessUpgraded returns(string) {\n    return bytes32ToString(externalStorage.getTokenName());\n  }\n\n  function symbol() public view unlessUpgraded returns(string) {\n    return bytes32ToString(externalStorage.getTokenSymbol());\n  }\n\n  function totalInCirculation() public view unlessUpgraded returns(uint256) {\n    return tokenLedger.totalInCirculation().add(totalUnvestedAndUnreleasedTokens());\n  }\n\n  function cstBalanceLimit() public view unlessUpgraded returns(uint256) {\n    return externalStorage.getBalanceLimit();\n  }\n\n  function buyPrice() public view unlessUpgraded returns(uint256) {\n    return externalStorage.getBuyPrice();\n  }\n\n  function circulationCap() public view unlessUpgraded returns(uint256) {\n    return externalStorage.getCirculationCap();\n  }\n\n  // intentionally allowing this to be visible if upgraded so foundation can\n  // withdraw funds from contract that has a successor\n  function foundation() public view returns(address) {\n    return externalStorage.getFoundation();\n  }\n\n  function totalSupply() public view unlessUpgraded returns(uint256) {\n    return tokenLedger.totalTokens();\n  }\n\n  function tokensAvailable() public view unlessUpgraded returns(uint256) {\n    return totalSupply().sub(totalInCirculation());\n  }\n\n  function balanceOf(address account) public view unlessUpgraded returns (uint256) {\n    address thisAddress = this;\n    if (thisAddress == account) {\n      return tokensAvailable();\n    } else {\n      return tokenLedger.balanceOf(account);\n    }\n  }\n\n  function transfer(address recipient, uint256 amount) public unlessFrozen unlessUpgraded returns (bool) {\n    require(allowTransfers || whitelistedTransferer[msg.sender]);\n    require(amount > 0);\n    require(!frozenAccount[recipient]);\n\n    tokenLedger.transfer(msg.sender, recipient, amount);\n    emit Transfer(msg.sender, recipient, amount);\n\n    return true;\n  }\n\n  function mintTokens(uint256 mintedAmount) public onlySuperAdmins unlessUpgraded returns (bool) {\n    uint256 _circulationCap = externalStorage.getCirculationCap();\n    tokenLedger.mintTokens(mintedAmount);\n\n    emit Mint(mintedAmount, tokenLedger.totalTokens(), _circulationCap);\n\n    emit Transfer(address(0), this, mintedAmount);\n\n    return true;\n  }\n\n  function grantTokens(address recipient, uint256 amount) public onlySuperAdmins unlessUpgraded returns (bool) {\n    require(amount <= tokensAvailable());\n    require(!frozenAccount[recipient]);\n\n    tokenLedger.debitAccount(recipient, amount);\n    emit Transfer(this, recipient, amount);\n\n    return true;\n  }\n\n  function setHaltPurchase(bool _haltPurchase) public onlySuperAdmins unlessUpgraded returns (bool) {\n    haltPurchase = _haltPurchase;\n\n    if (_haltPurchase) {\n      emit PurchaseHalted();\n    } else {\n      emit PurchaseResumed();\n    }\n    return true;\n  }\n\n  function buy() external payable unlessFrozen unlessUpgraded returns (uint256) {\n    require(!haltPurchase);\n    require(externalStorage.getApprovedBuyer(msg.sender));\n\n    uint256 _buyPriceTokensPerWei = externalStorage.getBuyPrice();\n    uint256 _circulationCap = externalStorage.getCirculationCap();\n    require(msg.value > 0);\n    require(_buyPriceTokensPerWei > 0);\n    require(_circulationCap > 0);\n\n    uint256 amount = msg.value.mul(_buyPriceTokensPerWei);\n    require(totalInCirculation().add(amount) <= _circulationCap);\n    require(amount <= tokensAvailable());\n\n    uint256 balanceLimit;\n    uint256 buyerBalance = tokenLedger.balanceOf(msg.sender);\n    uint256 customLimit = externalStorage.getCustomBuyerLimit(msg.sender);\n    require(contributionMinimum == 0 || buyerBalance.add(amount) >= contributionMinimum);\n\n    if (customLimit > 0) {\n      balanceLimit = customLimit;\n    } else {\n      balanceLimit = externalStorage.getBalanceLimit();\n    }\n\n    require(balanceLimit > 0 && balanceLimit >= buyerBalance.add(amount));\n\n    tokenLedger.debitAccount(msg.sender, amount);\n    emit Transfer(this, msg.sender, amount);\n\n    return amount;\n  }\n\n  // intentionally allowing this to be visible if upgraded so foundation can\n  // withdraw funds from contract that has a successor\n  function foundationWithdraw(uint256 amount) public onlyFoundation returns (bool) {\n    /* UNTRUSTED */\n    msg.sender.transfer(amount);\n\n    return true;\n  }\n\n  function foundationDeposit() public payable unlessUpgraded returns (bool) {\n    return true;\n  }\n\n  function allowance(address owner, address spender) public view unlessUpgraded returns (uint256) {\n    return externalStorage.getAllowance(owner, spender);\n  }\n\n  function transferFrom(address from, address to, uint256 value) public unlessFrozen unlessUpgraded returns (bool) {\n    require(allowTransfers);\n    require(!frozenAccount[from]);\n    require(!frozenAccount[to]);\n    require(from != msg.sender);\n    require(value > 0);\n\n    uint256 allowanceValue = allowance(from, msg.sender);\n    require(allowanceValue >= value);\n\n    tokenLedger.transfer(from, to, value);\n    externalStorage.setAllowance(from, msg.sender, allowanceValue.sub(value));\n\n    emit Transfer(from, to, value);\n    return true;\n  }\n\n  /* Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Please use `increaseApproval` or `decreaseApproval` instead.\n   */\n  function approve(address spender, uint256 value) public unlessFrozen unlessUpgraded returns (bool) {\n    require(spender != address(0));\n    require(!frozenAccount[spender]);\n    require(msg.sender != spender);\n\n    externalStorage.setAllowance(msg.sender, spender, value);\n\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  function increaseApproval(address spender, uint256 addedValue) public unlessFrozen unlessUpgraded returns (bool) {\n    return approve(spender, externalStorage.getAllowance(msg.sender, spender).add(addedValue));\n  }\n\n  function decreaseApproval(address spender, uint256 subtractedValue) public unlessFrozen unlessUpgraded returns (bool) {\n    uint256 oldValue = externalStorage.getAllowance(msg.sender, spender);\n\n    if (subtractedValue > oldValue) {\n      return approve(spender, 0);\n    } else {\n      return approve(spender, oldValue.sub(subtractedValue));\n    }\n  }\n\n  function grantVestedTokens(address beneficiary,\n                             uint256 fullyVestedAmount,\n                             uint256 startDate, // 0 indicates start \"now\"\n                             uint256 cliffSec,\n                             uint256 durationSec,\n                             bool isRevocable) public onlySuperAdmins unlessUpgraded returns(bool) {\n\n    uint256 _circulationCap = externalStorage.getCirculationCap();\n\n    require(beneficiary != address(0));\n    require(!frozenAccount[beneficiary]);\n    require(durationSec >= cliffSec);\n    require(totalInCirculation().add(fullyVestedAmount) <= _circulationCap);\n    require(fullyVestedAmount <= tokensAvailable());\n\n    uint256 _now = now;\n    if (startDate == 0) {\n      startDate = _now;\n    }\n\n    uint256 cliffDate = startDate.add(cliffSec);\n\n    externalStorage.setVestingSchedule(beneficiary,\n                                       fullyVestedAmount,\n                                       startDate,\n                                       cliffDate,\n                                       durationSec,\n                                       isRevocable);\n\n    emit VestedTokenGrant(beneficiary, startDate, cliffDate, durationSec, fullyVestedAmount, isRevocable);\n\n    return true;\n  }\n\n\n  function revokeVesting(address beneficiary) public onlySuperAdmins unlessUpgraded returns (bool) {\n    require(beneficiary != address(0));\n    externalStorage.revokeVesting(beneficiary);\n\n    releaseVestedTokensForBeneficiary(beneficiary);\n\n    emit VestedTokenRevocation(beneficiary);\n\n    return true;\n  }\n\n  function releaseVestedTokens() public unlessFrozen unlessUpgraded returns (bool) {\n    return releaseVestedTokensForBeneficiary(msg.sender);\n  }\n\n  function releaseVestedTokensForBeneficiary(address beneficiary) public unlessFrozen unlessUpgraded returns (bool) {\n    require(beneficiary != address(0));\n    require(!frozenAccount[beneficiary]);\n\n    uint256 unreleased = releasableAmount(beneficiary);\n\n    if (unreleased == 0) { return true; }\n\n    externalStorage.releaseVestedTokens(beneficiary);\n\n    tokenLedger.debitAccount(beneficiary, unreleased);\n    emit Transfer(this, beneficiary, unreleased);\n\n    emit VestedTokenRelease(beneficiary, unreleased);\n\n    return true;\n  }\n\n  function releasableAmount(address beneficiary) public view unlessUpgraded returns (uint256) {\n    return externalStorage.releasableAmount(beneficiary);\n  }\n\n  function totalUnvestedAndUnreleasedTokens() public view unlessUpgraded returns (uint256) {\n    return externalStorage.getTotalUnvestedAndUnreleasedTokens();\n  }\n\n  function vestingMappingSize() public view unlessUpgraded returns (uint256) {\n    return externalStorage.vestingMappingSize();\n  }\n\n  function vestingBeneficiaryForIndex(uint256 index) public view unlessUpgraded returns (address) {\n    return externalStorage.vestingBeneficiaryForIndex(index);\n  }\n\n  function vestingSchedule(address _beneficiary) public\n                                                 view unlessUpgraded returns (uint256 startDate,\n                                                                              uint256 cliffDate,\n                                                                              uint256 durationSec,\n                                                                              uint256 fullyVestedAmount,\n                                                                              uint256 vestedAmount,\n                                                                              uint256 vestedAvailableAmount,\n                                                                              uint256 releasedAmount,\n                                                                              uint256 revokeDate,\n                                                                              bool isRevocable) {\n    (\n      startDate,\n      cliffDate,\n      durationSec,\n      fullyVestedAmount,\n      releasedAmount,\n      revokeDate,\n      isRevocable\n    ) =  externalStorage.getVestingSchedule(_beneficiary);\n\n    vestedAmount = externalStorage.vestedAmount(_beneficiary);\n    vestedAvailableAmount = externalStorage.vestedAvailableAmount(_beneficiary);\n  }\n\n  function totalCustomBuyersMapping() public view returns (uint256) {\n    return externalStorage.getCustomBuyerMappingCount();\n  }\n\n  function customBuyerLimit(address buyer) public view returns (uint256) {\n    return externalStorage.getCustomBuyerLimit(buyer);\n  }\n\n  function customBuyerForIndex(uint256 index) public view returns (address) {\n    return externalStorage.getCustomBuyerForIndex(index);\n  }\n\n  function setCustomBuyer(address buyer, uint256 balanceLimit) public onlySuperAdmins unlessUpgraded returns (bool) {\n    require(buyer != address(0));\n    externalStorage.setCustomBuyerLimit(buyer, balanceLimit);\n    addBuyer(buyer);\n\n    return true;\n  }\n\n  function setAllowTransfers(bool _allowTransfers) public onlySuperAdmins unlessUpgraded returns (bool) {\n    allowTransfers = _allowTransfers;\n    return true;\n  }\n\n  function setContributionMinimum(uint256 _contributionMinimum) public onlySuperAdmins unlessUpgraded returns (bool) {\n    contributionMinimum = _contributionMinimum;\n    return true;\n  }\n\n  function totalBuyersMapping() public view returns (uint256) {\n    return externalStorage.getApprovedBuyerMappingCount();\n  }\n\n  function approvedBuyer(address buyer) public view returns (bool) {\n    return externalStorage.getApprovedBuyer(buyer);\n  }\n\n  function approvedBuyerForIndex(uint256 index) public view returns (address) {\n    return externalStorage.getApprovedBuyerForIndex(index);\n  }\n\n  function addBuyer(address buyer) public onlySuperAdmins unlessUpgraded returns (bool) {\n    require(buyer != address(0));\n    externalStorage.setApprovedBuyer(buyer, true);\n\n    uint256 balanceLimit = externalStorage.getCustomBuyerLimit(buyer);\n    if (balanceLimit == 0) {\n      balanceLimit = externalStorage.getBalanceLimit();\n    }\n\n    emit WhiteList(buyer, balanceLimit);\n\n    return true;\n  }\n\n  function removeBuyer(address buyer) public onlySuperAdmins unlessUpgraded returns (bool) {\n    require(buyer != address(0));\n    externalStorage.setApprovedBuyer(buyer, false);\n\n    return true;\n  }\n\n  function totalTransferWhitelistMapping() public view returns (uint256) {\n    return whitelistedTransfererForIndex.length;\n  }\n\n  function setWhitelistedTransferer(address transferer, bool _allowTransfers) public onlySuperAdmins unlessUpgraded returns (bool) {\n    require(transferer != address(0));\n    whitelistedTransferer[transferer] = _allowTransfers;\n    if (!processedWhitelistedTransferer[transferer]) {\n      whitelistedTransfererForIndex.push(transferer);\n      processedWhitelistedTransferer[transferer] = true;\n    }\n\n    return true;\n  }\n}\n\ncontract Registry is administratable, upgradeable {\n  using SafeMath for uint256;\n\n  bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\n  bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\n  bytes32 constant BARE_DOMAIN_NAMEHASH = 0x794941fae74d6435d1b29ee1c08cc39941ba78470872e6afd0693c7eeb63025c; // namehash for \"cardstack.eth\"\n\n  mapping(bytes32 => address) public storageForHash;\n  mapping(bytes32 => address) public contractForHash;\n  mapping(bytes32 => bytes32) public hashForNamehash;\n  mapping(bytes32 => bytes32) public namehashForHash;\n  string[] public contractNameForIndex;\n\n  event ContractRegistered(address indexed _contract, string _name, bytes32 namehash);\n  event ContractUpgraded(address indexed successor, address indexed predecessor, string name, bytes32 namehash);\n  event StorageAdded(address indexed storageAddress, string name);\n  event StorageRemoved(address indexed storageAddress, string name);\n  event AddrChanged(bytes32 indexed node, address a);\n\n  function() public {\n    revert();\n  }\n\n  function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\n    return interfaceId == ADDR_INTERFACE_ID ||\n           interfaceId == INTERFACE_META_ID;\n  }\n\n  function addr(bytes32 node) public view returns (address) {\n    return contractForHash[hashForNamehash[node]];\n  }\n\n  function getContractHash(string name) public view unlessUpgraded returns (bytes32) {\n    return keccak256(abi.encodePacked(name));\n  }\n\n  function numContracts() public view returns(uint256) {\n    return contractNameForIndex.length;\n  }\n\n  function setNamehash(string contractName, bytes32 namehash) external onlySuperAdmins unlessUpgraded returns (bool) {\n    require(namehash != 0x0);\n\n    bytes32 hash = keccak256(abi.encodePacked(contractName));\n    address contractAddress = contractForHash[hash];\n\n    require(contractAddress != 0x0);\n    require(hashForNamehash[namehash] == 0x0);\n\n    hashForNamehash[namehash] = hash;\n    namehashForHash[hash] = namehash;\n\n    emit AddrChanged(namehash, contractAddress);\n  }\n\n  function register(string name, address contractAddress, bytes32 namehash) external onlySuperAdmins unlessUpgraded returns (bool) {\n    bytes32 hash = keccak256(abi.encodePacked(name));\n    require(bytes(name).length > 0);\n    require(contractAddress != 0x0);\n    require(contractForHash[hash] == 0x0);\n    require(hashForNamehash[namehash] == 0x0);\n\n    contractNameForIndex.push(name);\n    contractForHash[hash] = contractAddress;\n\n    if (namehash != 0x0) {\n      hashForNamehash[namehash] = hash;\n      namehashForHash[hash] = namehash;\n    }\n\n    address storageAddress = storageForHash[IStorable(contractAddress).getStorageNameHash()];\n    address ledgerAddress = storageForHash[IStorable(contractAddress).getLedgerNameHash()];\n\n    if (storageAddress != 0x0) {\n      ExternalStorage(storageAddress).addAdmin(contractAddress);\n    }\n    if (ledgerAddress != 0x0) {\n      CstLedger(ledgerAddress).addAdmin(contractAddress);\n    }\n\n    configurable(contractAddress).configureFromStorage();\n\n    emit ContractRegistered(contractAddress, name, namehash);\n\n    if (namehash != 0x0) {\n      emit AddrChanged(namehash, contractAddress);\n    }\n\n    return true;\n  }\n\n  function upgradeContract(string name, address successor) external onlySuperAdmins unlessUpgraded returns (bytes32) {\n    bytes32 hash = keccak256(abi.encodePacked(name));\n    require(successor != 0x0);\n    require(contractForHash[hash] != 0x0);\n\n    address predecessor = contractForHash[hash];\n    require(freezable(predecessor).frozenToken());\n\n    contractForHash[hash] = successor;\n\n    uint256 remainingContractBalance;\n    // we need https://github.com/ethereum/EIPs/issues/165\n    // to be able to see if a contract is ERC20 or not...\n    if (hash == keccak256(\"cst\")) {\n      remainingContractBalance = ERC20(predecessor).balanceOf(predecessor);\n    }\n\n    upgradeable(predecessor).upgradeTo(successor,\n                                       remainingContractBalance);\n    upgradeable(successor).upgradedFrom(predecessor);\n\n    address successorStorageAddress = storageForHash[IStorable(successor).getStorageNameHash()];\n    address successorLedgerAddress = storageForHash[IStorable(successor).getLedgerNameHash()];\n    address predecessorStorageAddress = storageForHash[IStorable(predecessor).getStorageNameHash()];\n    address predecessorLedgerAddress = storageForHash[IStorable(predecessor).getLedgerNameHash()];\n\n    if (successorStorageAddress != 0x0) {\n      ExternalStorage(successorStorageAddress).addAdmin(successor);\n    }\n    if (predecessorStorageAddress != 0x0) {\n      ExternalStorage(predecessorStorageAddress).removeAdmin(predecessor);\n    }\n\n    if (successorLedgerAddress != 0x0) {\n      CstLedger(successorLedgerAddress).addAdmin(successor);\n    }\n    if (predecessorLedgerAddress != 0x0) {\n      CstLedger(predecessorLedgerAddress).removeAdmin(predecessor);\n    }\n\n    configurable(successor).configureFromStorage();\n\n    if (hashForNamehash[BARE_DOMAIN_NAMEHASH] == hash) {\n      emit AddrChanged(BARE_DOMAIN_NAMEHASH, successor);\n    }\n    if (namehashForHash[hash] != 0x0 && namehashForHash[hash] != BARE_DOMAIN_NAMEHASH) {\n      emit AddrChanged(namehashForHash[hash], successor);\n    }\n\n    emit ContractUpgraded(successor, predecessor, name, namehashForHash[hash]);\n    return hash;\n  }\n\n  function addStorage(string name, address storageAddress) external onlySuperAdmins unlessUpgraded {\n    require(storageAddress != address(0));\n    bytes32 hash = keccak256(abi.encodePacked(name));\n    storageForHash[hash] = storageAddress;\n\n    emit StorageAdded(storageAddress, name);\n  }\n\n  function getStorage(string name) public view unlessUpgraded returns (address) {\n    return storageForHash[keccak256(abi.encodePacked(name))];\n  }\n\n  function removeStorage(string name) public onlySuperAdmins unlessUpgraded {\n    address storageAddress = storageForHash[keccak256(abi.encodePacked(name))];\n    delete storageForHash[keccak256(abi.encodePacked(name))];\n\n    emit StorageRemoved(storageAddress, name);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"totalAdminsMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"customBuyerLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStorageName\",\"type\":\"string\"},{\"name\":\"newLedgerName\",\"type\":\"string\"}],\"name\":\"updateStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"configureFromStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingMappingSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFrozenAccountsMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminsForIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLedger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"revokeVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"vestingBeneficiaryForIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeSuperAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transferer\",\"type\":\"address\"},{\"name\":\"_allowTransfers\",\"type\":\"bool\"}],\"name\":\"setWhitelistedTransferer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseVestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInCirculation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"bytes32\"},{\"name\":\"_tokenSymbol\",\"type\":\"bytes32\"},{\"name\":\"_buyPrice\",\"type\":\"uint256\"},{\"name\":\"_circulationCap\",\"type\":\"uint256\"},{\"name\":\"_balanceLimit\",\"type\":\"uint256\"},{\"name\":\"_foundation\",\"type\":\"address\"}],\"name\":\"configure\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_predecessor\",\"type\":\"address\"}],\"name\":\"upgradedFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_haltPurchase\",\"type\":\"bool\"}],\"name\":\"setHaltPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"removeBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"successor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frozenAccountForIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cstBalanceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUnvestedAndUnreleasedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLedgerNameHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorageNameHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"releaseVestedTokensForBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"foundationDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistedTransfererForIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBuyersMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSuperAdminsMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"superAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addSuperAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"predecessor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"customBuyerForIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"addBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"approvedBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"superAdminsForIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDeprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"grantTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributionMinimum\",\"type\":\"uint256\"}],\"name\":\"setContributionMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"foundationWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ledgerName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"haltPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"storageName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"balanceLimit\",\"type\":\"uint256\"}],\"name\":\"setCustomBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowTransfers\",\"type\":\"bool\"}],\"name\":\"setAllowTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCustomBuyersMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTransferWhitelistMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedTransferer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"approvedBuyerForIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_successor\",\"type\":\"address\"},{\"name\":\"remainingContractBalance\",\"type\":\"uint256\"}],\"name\":\"upgradeTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"fullyVestedAmount\",\"type\":\"uint256\"},{\"name\":\"startDate\",\"type\":\"uint256\"},{\"name\":\"cliffSec\",\"type\":\"uint256\"},{\"name\":\"durationSec\",\"type\":\"uint256\"},{\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"grantVestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"vestingSchedule\",\"outputs\":[{\"name\":\"startDate\",\"type\":\"uint256\"},{\"name\":\"cliffDate\",\"type\":\"uint256\"},{\"name\":\"durationSec\",\"type\":\"uint256\"},{\"name\":\"fullyVestedAmount\",\"type\":\"uint256\"},{\"name\":\"vestedAmount\",\"type\":\"uint256\"},{\"name\":\"vestedAvailableAmount\",\"type\":\"uint256\"},{\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"name\":\"revokeDate\",\"type\":\"uint256\"},{\"name\":\"isRevocable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_storageName\",\"type\":\"string\"},{\"name\":\"_ledgerName\",\"type\":\"string\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"circulationCap\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"holdCap\",\"type\":\"uint256\"}],\"name\":\"WhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"circulationCap\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balanceLimit\",\"type\":\"uint256\"}],\"name\":\"ConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cliffDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"durationSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fullyVestedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"VestedTokenGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"VestedTokenRevocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestedTokenRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"storageAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ledgerAddress\",\"type\":\"address\"}],\"name\":\"StorageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PurchaseHalted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PurchaseResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"successor\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"predecessor\",\"type\":\"address\"}],\"name\":\"UpgradedFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddSuperAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"RemoveSuperAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000fc8deeb5cd80a3e8b8de353df9b5b09c71d3ef17000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a63737453746f7261676500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b6c65646765722d43415244000000000000000000000000000000000000000000",
  "libraries": [
    {
      "name": "CstLibrary",
      "address": "0x5f4928c421a53a9aa161d96886299ded68fb76a2"
    }
  ]
}