{
  "address": "0xe87227adf0fd3f6e580e2825069a0f8e8da66ad0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FeeManager",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-16\n*/\n\npragma solidity 0.4.24;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/interfaces/IAccessToken.sol\n\ninterface IAccessToken {\n  function lockBBK(\n    uint256 _value\n  )\n    external\n    returns (bool);\n\n  function unlockBBK(\n    uint256 _value\n  )\n    external\n    returns (bool);\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    external\n    returns (bool);\n\n  function distribute(\n    uint256 _amount\n  )\n    external\n    returns (bool);\n\n  function burn(\n    address _address,\n    uint256 _value\n  )\n    external\n    returns (bool);\n}\n\n// File: contracts/interfaces/IRegistry.sol\n\n// limited ContractRegistry definition\ninterface IRegistry {\n  function owner()\n    external\n    returns(address);\n\n  function updateContractAddress(\n    string _name,\n    address _address\n  )\n    external\n    returns (address);\n\n  function getContractAddress(\n    string _name\n  )\n    external\n    view\n    returns (address);\n}\n\n// File: contracts/FeeManager.sol\n\ncontract FeeManager {\n  using SafeMath for uint256;\n\n  uint8 public constant version = 1;\n  uint256 actRate = 1000;\n\n  IRegistry private registry;\n  constructor(\n    address _registryAddress\n  )\n    public\n  {\n    require(_registryAddress != address(0));\n    registry = IRegistry(_registryAddress);\n  }\n\n  function weiToAct(uint256 _wei)\n    public\n    view\n    returns (uint256)\n  {\n\n    return _wei.mul(actRate);\n  }\n\n  function actToWei(uint256 _act)\n    public\n    view\n    returns (uint256)\n  {\n    return _act.div(actRate);\n  }\n\n  function payFee()\n    public\n    payable\n    returns (bool)\n  {\n    IAccessToken act = IAccessToken(\n      registry.getContractAddress(\"AccessToken\")\n    );\n    require(act.distribute(weiToAct(msg.value)));\n    return true;\n  }\n\n  function claimFee(\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    IAccessToken act = IAccessToken(\n      registry.getContractAddress(\"AccessToken\")\n    );\n    require(act.burn(msg.sender, _value));\n    msg.sender.transfer(actToWei(_value));\n    return true;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"payFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_act\",\"type\":\"uint256\"}],\"name\":\"actToWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"weiToAct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"claimFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registryAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "60806040526103e860005534801561001657600080fd5b506040516020806105608339810160405251600160a060020a038116151561003d57600080fd5b60018054600160a060020a031916600160a060020a03929092169190911790556104f48061006c6000396000f30060806040526004361061006c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166329610252811461007157806354fd4d501461008d5780637ad8fe58146100b8578063ae128e75146100e2578063f667526a146100fa575b600080fd5b610079610112565b604080519115158252519081900360200190f35b34801561009957600080fd5b506100a2610298565b6040805160ff9092168252519081900360200190f35b3480156100c457600080fd5b506100d060043561029d565b60408051918252519081900360200190f35b3480156100ee57600080fd5b506100d06004356102b8565b34801561010657600080fd5b506100796004356102cd565b600154604080517f04433bbc000000000000000000000000000000000000000000000000000000008152602060048201819052600b60248301527f416363657373546f6b656e00000000000000000000000000000000000000000060448301529151600093849373ffffffffffffffffffffffffffffffffffffffff909116926304433bbc926064808301939282900301818787803b1580156101b457600080fd5b505af11580156101c8573d6000803e3d6000fd5b505050506040513d60208110156101de57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166391c05b0b610207346102b8565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561025957600080fd5b505af115801561026d573d6000803e3d6000fd5b505050506040513d602081101561028357600080fd5b5051151561029057600080fd5b600191505090565b600181565b600080546102b290839063ffffffff61048a16565b92915050565b600080546102b290839063ffffffff61049f16565b600154604080517f04433bbc000000000000000000000000000000000000000000000000000000008152602060048201819052600b60248301527f416363657373546f6b656e00000000000000000000000000000000000000000060448301529151600093849373ffffffffffffffffffffffffffffffffffffffff909116926304433bbc926064808301939282900301818787803b15801561036f57600080fd5b505af1158015610383573d6000803e3d6000fd5b505050506040513d602081101561039957600080fd5b5051604080517f9dc29fac00000000000000000000000000000000000000000000000000000000815233600482015260248101869052905191925073ffffffffffffffffffffffffffffffffffffffff831691639dc29fac916044808201926020929091908290030181600087803b15801561041457600080fd5b505af1158015610428573d6000803e3d6000fd5b505050506040513d602081101561043e57600080fd5b5051151561044b57600080fd5b336108fc6104588561029d565b6040518115909202916000818181858888f19350505050158015610480573d6000803e3d6000fd5b5060019392505050565b6000818381151561049757fe5b049392505050565b60008215156104b0575060006102b2565b508181028183828115156104c057fe5b04146102b257fe00a165627a7a72305820de35d014ab33df3dc3fd8cc8ee429e30e85faa968829a62b1ef645b3a6b6be1f00290000000000000000000000005973376b603268fe4251d13040226078257014f8",
  "constructorArguments": "0000000000000000000000005973376b603268fe4251d13040226078257014f8"
}