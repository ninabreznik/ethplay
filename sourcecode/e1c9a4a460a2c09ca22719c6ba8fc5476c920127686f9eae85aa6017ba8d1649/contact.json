{
  "address": "0x246c1fcb82fead8e67a364c13c5e410923f42369",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Regatta",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-13\n*/\n\npragma solidity ^0.5.7;\n\ncontract Regatta {\n\n    event Declare(uint race_number);\n    event Enter(uint race_number, address entrant, uint8 class, uint8 variant, bool repellent);\n\n    event Void(uint race_number, address judge);\n    event Finish(uint race_number, uint block_finish, address judge);\n    event Rename(address boat, bytes32 name);\n    event CashOut(address winner);\n\n    struct Race {\n        uint pool;\n\n        uint block_start;\n        uint block_finish;\n\n        Boat[10] boats;\n\n        uint boat_count;\n    }\n\n    struct Boat {\n        address owner;\n        uint8 class;\n        uint8 variant;\n        bool repellent;\n    }\n\n\n    mapping(address => uint) bank;\n    mapping(address => bytes32) boat_names;\n    mapping(uint => Race) races;\n\n    address blackbeard;\n    function mutiny(address new_beard) external{\n        require(msg.sender == blackbeard,\"impostor\");\n        blackbeard = new_beard;\n    }\n\n\n\n    uint race_number;\n    uint constant COURSE_LENGTH = 50;\n\n    uint constant PRICE_REPELLENT = 10; //%\n\n    uint[3] PRICE_CLASS = [\n    5 finney,\n    15 finney,\n    30 finney\n    ];\n\n    uint[3] MULTIPLIER_CLASS = [\n    100, //%\n    115, //%\n    130 //%\n    ];\n\n    uint constant MULTIPLIER_VARIANT = 2;\n    uint constant TIME_WAIT = 3;\n    uint constant MODULO_SQUID = 3;\n\n    constructor() public{\n        blackbeard = msg.sender;\n    }\n\n    //Added set price function in case ETH price changes make it too expensive\n    function set_PRICE_CLASS(uint class, uint PRICE) external{\n        require(msg.sender == blackbeard,\"permission\");\n        require(class < 3,\"class\");\n        PRICE_CLASS[class] = PRICE;\n    }\n\n    function calculate_fee(uint8 class, bool repellent) internal view returns(uint){\n        if(repellent){\n            return PRICE_CLASS[class] * (100 + PRICE_REPELLENT) / 100;\n        }else{\n            return PRICE_CLASS[class];\n        }\n    }\n    function increment_boat(uint hash, uint weather, uint boatNum, uint8 class, uint variant) internal view returns(uint){\n        uint increment = uint(keccak256(abi.encodePacked(boatNum,hash)))%10 * MULTIPLIER_CLASS[class]/100;\n        if(weather == variant){\n            increment *= MULTIPLIER_VARIANT;\n        }\n        return increment;\n    }\n    function check_race_finished() view internal returns(bool){\n        if(race_number == 0){\n            return true;\n        }else{\n            return races[race_number].block_finish != 0;\n        }\n    }\n    function check_race_started() view internal returns(bool){\n        return races[ race_number ].block_start != 0 &&\n        races[ race_number ].block_start < block.number;\n    }\n\n    //Void\n    function declare_void() public {\n        require(races[race_number].block_start != 0,\"unstarted\");\n        require(block.number > races[race_number].block_start + 255,\"not_void\");\n        require(races[race_number].block_finish == 0,\"finished\");\n\n        do_declare_void();\n\n        uint balance = bank[msg.sender];\n        bank[msg.sender] = 0;\n        msg.sender.transfer( balance );\n    }\n    //  -> set and pay\n    function do_declare_void() internal {\n        races[race_number].block_finish = races[race_number].block_start;\n\n        bank[ blackbeard ] += races[race_number].pool * 99/100;\n        bank[ msg.sender ] += races[race_number].pool /100;\n\n        emit Void(race_number, msg.sender);\n    }\n\n    //Finish\n    function declare_finish(uint block_finish) external {\n        require(races[race_number].block_start != 0,\"unstarted\");\n        require(block_finish < block.number, \"undetermined\");\n        require(block.number <= races[race_number].block_start + 255,\"void\");\n\n        if( races[race_number].block_finish != 0 ){\n            //Fallback and just withdraw that shit\n            uint balance = bank[msg.sender];\n            require(balance > 0, \"finished\");\n            bank[msg.sender] = 0;\n            msg.sender.transfer( balance );\n            emit CashOut( msg.sender );\n            return;\n        }\n\n        do_declare_finish(block_finish);\n\n        uint balance = bank[msg.sender];\n        bank[msg.sender] = 0;\n        msg.sender.transfer( balance );\n    }\n    //  -> set and pay\n    function do_declare_finish(uint block_finish) internal {\n        uint squid = 11;\n        uint leader;\n        uint[10] memory progress;\n        uint winners;\n\n        bool finished;\n\n\n        for(uint b = races[race_number].block_start; b <= block_finish; b++){\n            uint hash = uint(blockhash(b));\n            uint weather = hash%3;\n            for(uint boat = 0; boat < races[race_number].boat_count; boat++){\n                if(squid != boat){\n                    progress[boat] += increment_boat(\n                        hash,\n                        weather,\n                        boat,\n                        races[race_number].boats[boat].class,\n                        races[race_number].boats[boat].variant\n                    );\n                }\n                if(progress[boat] >= progress[leader]){\n                    leader = boat;\n                }\n\n                if(b == block_finish - 1){\n                    require(progress[boat] < COURSE_LENGTH,\"passed\");\n                }else if(b == block_finish){\n                    finished = finished || progress[boat] >= COURSE_LENGTH;\n                    if(progress[boat] >= COURSE_LENGTH){\n                        winners++;\n                    }\n                }\n            }\n            if(progress[leader] < COURSE_LENGTH && progress[leader] > COURSE_LENGTH/2 && !races[race_number].boats[leader].repellent && squid == 11 &&  uint(hash)%MODULO_SQUID == 0){\n                squid =  leader;\n            }\n        }\n\n        require(finished,\"unfinished\");\n        races[race_number].block_finish = block_finish;\n\n        uint paid = 0;\n        uint reward = races[race_number].pool * 95 / winners /100;\n        for( uint boat = 0; boat < races[race_number].boat_count; boat++){\n            if(progress[boat] >= COURSE_LENGTH){\n                bank[\n                races[race_number].boats[boat].owner\n                ] += reward;\n\n                paid += reward;\n            }\n        }\n        bank[ msg.sender ] += races[race_number].pool /100;\n        paid += races[race_number].pool /100;\n\n        bank[ blackbeard ] += races[race_number].pool - paid;\n\n\n        emit Finish(race_number, block_finish, msg.sender);\n    }\n\n    //Declare Race\n    function declare_race(uint8 class, uint8 variant, bool repellent) public payable{\n\n        require(races[race_number].block_finish != 0 || race_number == 0,\"unfinished\");\n\n        require(class < 3,\"class\");\n        uint fee = calculate_fee(class,repellent);\n        uint contribution = calculate_fee(class,false);\n        require( msg.value == fee, \"payment\");\n        require(variant < 3,\"variant\");\n\n        race_number++;\n\n        races[race_number].boat_count = 2;\n        races[race_number].boats[0] = Boat(msg.sender,class,variant,repellent);\n        races[race_number].pool += contribution;\n\n        if(fee > contribution){\n            bank[blackbeard] += fee - contribution;\n        }\n\n\n        emit Declare(race_number);\n        emit Enter(race_number, msg.sender, class, variant, repellent);\n    }\n\n    //Enter Race\n    function enter_race(uint8 class, uint8 variant, bool repellent) public payable{\n\n        require(class < 3,\"class\");\n        uint fee = calculate_fee(class,repellent);\n        uint contribution = calculate_fee(class,false);\n        require( msg.value == fee, \"payment\");\n        require(variant < 3,\"variant\");\n\n        require(!check_race_started(),\"started\");\n        require(!check_race_finished(),\"finished\");\n\n        require(races[race_number].boat_count < 10,\"full\");\n        require(race_number > 0,\"undeclared\");\n\n        if(races[race_number].block_start == 0){\n            races[race_number].block_start = block.number + TIME_WAIT;\n            races[race_number].boats[1] = Boat(msg.sender,class,variant,repellent);\n        }else{\n            races[race_number].boats[\n            races[race_number].boat_count\n            ] = Boat(msg.sender,class,variant,repellent);\n            races[race_number].boat_count++;\n        }\n        races[race_number].pool += contribution;\n\n        if(fee > contribution){\n            bank[blackbeard] += fee - contribution;\n        }\n\n        emit Enter(race_number, msg.sender, class, variant, repellent);\n\n    }\n\n    //Important guys\n    function cleanup(uint block_finish_last) internal {\n        if(race_number == 0){\n            //Initial condition, skip\n        }else if(races[race_number].block_start != 0\n        && races[race_number].block_start == races[race_number].block_finish\n        ){\n            //If races[race_number].block_start == races[race_number].block_finish,\n            //it's been voided, skip\n        }else\n\n        //If block_finish_last isn't 0\n        //&& there is an unfinished race,\n        //finish it, (pay winners)\n            if(block_finish_last != 0\n            && races[race_number].block_finish == 0\n            && races[race_number].block_start != 0\n            && races[race_number].block_start < block.number\n            && block_finish_last <  block.number\n            ){\n                //Finish it\n                do_declare_finish(block_finish_last);\n            }else\n\n            //else if block_finish_last is 0\n            //&& there is a void race\n            //void it\n                if(block_finish_last == 0\n                && races[race_number].block_finish == 0\n                && races[race_number].block_start != 0\n                && races[race_number].block_start + 255 < block.number\n                ){\n                    //Void it\n                    do_declare_void();\n                }\n    }\n    function enter_next_race(uint block_finish_last, uint8 class, uint8 variant, bool repellent) external payable{\n        cleanup(block_finish_last);\n\n        //if the current race is finished\n        if(races[race_number].block_finish != 0 || race_number == 0){\n            //Start new race\n            declare_race(class,variant,repellent);\n        }else{\n            //Enter next race\n            enter_race(class,variant,repellent);\n        }\n\n\n    }\n    function collect_winnings(uint block_finish_last) external {\n        cleanup(block_finish_last);\n\n        grab_gold();\n    }\n\n\n    //Admin\n    function rename_boat(bytes32 name) external {\n        boat_names[msg.sender] = name;\n        emit Rename(msg.sender,name);\n    }\n    function grab_gold() public {\n        uint balance = bank[msg.sender];\n        require(balance > 0,\"broke\");\n        bank[msg.sender] = 0;\n\n\n        msg.sender.transfer( balance );\n        emit CashOut(msg.sender);\n    }\n\n\n    //Read\n    function get_pool() external view returns(uint){\n        return races[race_number].pool;\n    }\n    function get_race_number() public view returns (uint){\n        return race_number;\n    }\n    function get_weather() public view returns (uint){\n        uint hash = uint(blockhash(block.number - 1));\n        return  hash%3;\n    }\n    function get_progress() public view  returns (uint[10] memory progress, uint block_finish, uint weather, uint squid, uint block_now, bytes32[10] memory history, uint block_squid){\n        //History\n        for(uint b = 0; b < 10; b++){\n            history[b] = blockhash(b + block.number - 10 );\n        }\n\n        if(races[race_number].block_start == 0){\n            return (progress, block_finish, 0, 11, block.number, history, 0);\n        }\n\n        squid = 11;\n        uint leader;\n        for(uint b = races[race_number].block_start; b < block.number; b++){\n            uint hash = uint(blockhash(b));\n            weather = hash%3;\n            for(uint boat = 0; boat < races[race_number].boat_count; boat++){\n                if(squid != boat){\n                    progress[boat] += increment_boat(\n                        hash,\n                        weather,\n                        boat,\n                        races[race_number].boats[boat].class,\n                        races[race_number].boats[boat].variant\n                    );\n                }\n                if(progress[boat] >= progress[leader]){\n                    leader = boat;\n                }\n                if(progress[boat] >= COURSE_LENGTH ){\n                    block_finish = b;\n                }\n            }\n\n            if(block_finish != 0){\n                break;\n            }\n            if(\n                progress[leader] < COURSE_LENGTH\n                && progress[leader] > COURSE_LENGTH/2\n                && !races[race_number].boats[leader].repellent\n            && squid == 11\n            && hash%MODULO_SQUID == 0\n            ){\n                squid =  leader;\n                block_squid = b;\n            }\n        }\n\n        return (progress, block_finish, weather, squid, block.number, history, block_squid);\n    }\n\n    function get_times() public view returns (uint block_start, uint block_finish, uint block_current){\n        return (\n        races[race_number].block_start,\n        races[race_number].block_finish,\n        block.number\n        );\n    }\n    function get_boats() public view returns (\n        address[10] memory owner,\n        uint8[10] memory class,\n        uint8[10] memory variant,\n        bool[10] memory repellent\n    ){\n        for(uint boat = 0; boat < 10; boat++){\n            owner[boat] = races[race_number].boats[boat].owner;\n            class[boat] = races[race_number].boats[boat].class;\n            variant[boat] = races[race_number].boats[boat].variant;\n            repellent[boat] = races[race_number].boats[boat].repellent;\n        }\n        return (owner,class,variant,repellent);\n    }\n\n    function get_name(address boat) public view returns(bytes32 name){\n        return boat_names[boat];\n    }\n    function get_balance() public view returns(uint balance){\n        return bank[msg.sender];\n    }\n    function get_boat_count() public view returns(uint boat_count){\n        return races[race_number].boat_count;\n    }\n    function get_pool_past(uint past_race_number) external view returns(uint pool){\n        return races[past_race_number].pool;\n    }\n}",
  "bytecode": "608060405260405180606001604052806611c37937e0800066ffffffffffffff16815260200166354a6ba7a1800066ffffffffffffff168152602001666a94d74f43000066ffffffffffffff16815250600590600362000061929190620000f1565b506040518060600160405280606460ff168152602001607360ff168152602001608260ff1681525060089060036200009b92919062000141565b50348015620000a957600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001b3565b82600381019282156200012e579160200282015b828111156200012d578251829066ffffffffffffff1690559160200191906001019062000105565b5b5090506200013d91906200018b565b5090565b826003810192821562000178579160200282015b8281111562000177578251829060ff1690559160200191906001019062000155565b5b5090506200018791906200018b565b5090565b620001b091905b80821115620001ac57600081600090555060010162000192565b5090565b90565b61304d80620001c36000396000f3fe60806040526004361061011f5760003560e01c80637bf468a0116100a0578063d7eb7a3911610064578063d7eb7a3914610464578063e6ae3e6f1461048f578063e845c18314610534578063f3a0a3a914610614578063f869d96f146106795761011f565b80637bf468a01461035e57806392336f9314610399578063a09715e9146103e3578063a7ee32121461040e578063c1cfb99a146104395761011f565b80636061c3dc116100e75780636061c3dc1461022b5780636cc86e221461024257806371834ff2146102875780637848b017146102c05780637a95e9a91461030a5761011f565b806316a30e69146101245780631ee4c5661461014f5780633a36fa781461018a5780633fd0b500146101d95780634c648dd6146101f0575b600080fd5b34801561013057600080fd5b506101396106ca565b6040518082815260200191505060405180910390f35b34801561015b57600080fd5b506101886004803603602081101561017257600080fd5b81019080803590602001909291905050506106e8565b005b34801561019657600080fd5b506101c3600480360360208110156101ad57600080fd5b8101908080359060200190929190505050610b25565b6040518082815260200191505060405180910390f35b3480156101e557600080fd5b506101ee610b45565b005b3480156101fc57600080fd5b506102296004803603602081101561021357600080fd5b8101908080359060200190929190505050610cee565b005b34801561023757600080fd5b50610240610d02565b005b34801561024e57600080fd5b506102856004803603604081101561026557600080fd5b810190808035906020019092919080359060200190929190505050610f88565b005b34801561029357600080fd5b5061029c6110d8565b60405180848152602001838152602001828152602001935050505060405180910390f35b610308600480360360608110156102d657600080fd5b81019080803560ff169060200190929190803560ff16906020019092919080351515906020019092919050505061111b565b005b61035c6004803603608081101561032057600080fd5b8101908080359060200190929190803560ff169060200190929190803560ff1690602001909291908035151590602001909291905050506115ee565b005b34801561036a57600080fd5b506103976004803603602081101561038157600080fd5b8101908080359060200190929190505050611648565b005b6103e1600480360360608110156103af57600080fd5b81019080803560ff169060200190929190803560ff1690602001909291908035151590602001909291905050506116fa565b005b3480156103ef57600080fd5b506103f8611e5b565b6040518082815260200191505060405180910390f35b34801561041a57600080fd5b50610423611e65565b6040518082815260200191505060405180910390f35b34801561044557600080fd5b5061044e611e85565b6040518082815260200191505060405180910390f35b34801561047057600080fd5b50610479611ecb565b6040518082815260200191505060405180910390f35b34801561049b57600080fd5b506104a4611eeb565b6040518088600a60200280838360005b838110156104cf5780820151818401526020810190506104b4565b5050505090500187815260200186815260200185815260200184815260200183600a60200280838360005b838110156105155780820151818401526020810190506104fa565b5050505090500182815260200197505050505050505060405180910390f35b34801561054057600080fd5b506105496121bd565b6040518085600a60200280838360005b83811015610574578082015181840152602081019050610559565b5050505090500184600a60200280838360005b838110156105a2578082015181840152602081019050610587565b5050505090500183600a60200280838360005b838110156105d05780820151818401526020810190506105b5565b5050505090500182600a60200280838360005b838110156105fe5780820151818401526020810190506105e3565b5050505090500194505050505060405180910390f35b34801561062057600080fd5b506106636004803603602081101561063757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061238b565b6040518082815260200191505060405180910390f35b34801561068557600080fd5b506106c86004803603602081101561069c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123d4565b005b600080600143034060001c9050600381816106e157fe5b0691505090565b6000600260006004548152602001908152602001600020600101541415610777576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f756e73746172746564000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b4381106107ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f756e64657465726d696e6564000000000000000000000000000000000000000081525060200191505060405180910390fd5b60ff600260006004548152602001908152602001600020600101540143111561087d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f766f69640000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60006002600060045481526020019081526020016000206002015414610a495760008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610956576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260088152602001807f66696e697368656400000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156109e0573d6000803e3d6000fd5b507e10c32246c8e33bffe9bae9a9a52bfb8b0737a17ff2b7e89ec9e4f4744c48a133604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150610b22565b610a52816124db565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610b1f573d6000803e3d6000fd5b50505b50565b600060026000838152602001908152602001600020600001549050919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610bfe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260058152602001807f62726f6b6500000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610c88573d6000803e3d6000fd5b507e10c32246c8e33bffe9bae9a9a52bfb8b0737a17ff2b7e89ec9e4f4744c48a133604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b610cf781612b01565b610cff610b45565b50565b6000600260006004548152602001908152602001600020600101541415610d91576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f756e73746172746564000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60ff60026000600454815260200190815260200160002060010154014311610e21576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260088152602001807f6e6f745f766f696400000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60006002600060045481526020019081526020016000206002015414610eaf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260088152602001807f66696e697368656400000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b610eb7612c89565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610f84573d6000803e3d6000fd5b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461104b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f7065726d697373696f6e0000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600382106110c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260058152602001807f636c61737300000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600583600381106110cf57fe5b01819055505050565b6000806000600260006004548152602001908152602001600020600101546002600060045481526020019081526020016000206002015443925092509250909192565b60006002600060045481526020019081526020016000206002015414158061114557506000600454145b6111b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f756e66696e69736865640000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60038360ff1610611230576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260058152602001807f636c61737300000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600061123c8483612e2e565b9050600061124b856000612e2e565b90508134146112c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f7061796d656e740000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60038460ff161061133b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f76617269616e740000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60046000815480929190600101919050555060028060006004548152602001908152602001600020600d018190555060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018660ff1681526020018560ff1681526020018415158152506002600060045481526020019081526020016000206003016000600a81106113cd57fe5b0160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff16021790555060408201518160000160156101000a81548160ff021916908360ff16021790555060608201518160000160166101000a81548160ff02191690831515021790555090505080600260006004548152602001908152602001600020600001600082825401925050819055508082111561151957808203600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b7ffd6d91f7ea032faf70487333ddf93dfbe62ac21238b0f186fec06be74d677fbd6004546040518082815260200191505060405180910390a17fb06f9154ab2075941d9bf552ffd22e3fdd4f38e1cdf116a5e3c80d868031db4f60045433878787604051808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018460ff1660ff1681526020018360ff1660ff168152602001821515151581526020019550505050505060405180910390a15050505050565b6115f784612b01565b60006002600060045481526020019081526020016000206002015414158061162157506000600454145b156116365761163183838361111b565b611642565b6116418383836116fa565b5b50505050565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f423d14f67655d255b116910e4dc1950fa3ff6f89cc38652a0b490a56b34da9b23382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b60038360ff1610611773576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260058152602001807f636c61737300000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600061177f8483612e2e565b9050600061178e856000612e2e565b9050813414611805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f7061796d656e740000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60038460ff161061187e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f76617269616e740000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b611886612e7a565b156118f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f737461727465640000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b611901612ec0565b15611974576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260088152602001807f66696e697368656400000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600a600260006004548152602001908152602001600020600d015410611a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f66756c6c0000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600060045411611a7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f756e6465636c617265640000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600260006004548152602001908152602001600020600101541415611bd057600343016002600060045481526020019081526020016000206001018190555060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018660ff1681526020018560ff1681526020018415158152506002600060045481526020019081526020016000206003016001600a8110611b1e57fe5b0160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff16021790555060408201518160000160156101000a81548160ff021916908360ff16021790555060608201518160000160166101000a81548160ff021916908315150217905550905050611d20565b60405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018660ff1681526020018560ff168152602001841515815250600260006004548152602001908152602001600020600301600260006004548152602001908152602001600020600d0154600a8110611c4a57fe5b0160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff16021790555060408201518160000160156101000a81548160ff021916908360ff16021790555060608201518160000160166101000a81548160ff021916908315150217905550905050600260006004548152602001908152602001600020600d01600081548092919060010191905055505b806002600060045481526020019081526020016000206000016000828254019250508190555080821115611dbf57808203600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b7fb06f9154ab2075941d9bf552ffd22e3fdd4f38e1cdf116a5e3c80d868031db4f60045433878787604051808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018460ff1660ff1681526020018360ff1660ff168152602001821515151581526020019550505050505060405180910390a15050505050565b6000600454905090565b6000600260006004548152602001908152602001600020600d0154905090565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600060026000600454815260200190815260200160002060000154905090565b611ef3612f72565b600080600080611f01612f95565b600080600090505b600a811015611f3b57600a43820103408382600a8110611f2557fe5b6020020181815250508080600101915050611f09565b506000600260006004548152602001908152602001600020600101541415611f835786866000600b4386600084945083935080905096509650965096509650965096506121b4565b600b93506000806002600060045481526020019081526020016000206001015490505b4381101561219c576000814060001c905060038181611fc157fe5b06975060008090505b600260006004548152602001908152602001600020600d01548110156120d95780881461208557612069828a8360026000600454815260200190815260200160002060030185600a811061201a57fe5b0160000160149054906101000a900460ff1660026000600454815260200190815260200160002060030186600a811061204f57fe5b0160000160159054906101000a900460ff1660ff16612ef8565b8b82600a811061207557fe5b6020020181815101915081815250505b8a84600a811061209157fe5b60200201518b82600a81106120a257fe5b6020020151106120b0578093505b60328b82600a81106120be57fe5b6020020151106120cc578299505b8080600101915050611fca565b50600089146120e8575061219c565b60328a84600a81106120f657fe5b60200201511080156121225750600260328161210e57fe5b048a84600a811061211b57fe5b6020020151115b8015612160575060026000600454815260200190815260200160002060030183600a811061214c57fe5b0160000160169054906101000a900460ff16155b801561216c5750600b87145b8015612182575060006003828161217f57fe5b06145b1561218e578296508193505b508080600101915050611fa6565b50878787874387879750975097509750975097509750505b90919293949596565b6121c5612fb8565b6121cd612fdb565b6121d5612fdb565b6121dd612ffe565b60008090505b600a8110156123785760026000600454815260200190815260200160002060030181600a811061220f57fe5b0160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168582600a811061224057fe5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060026000600454815260200190815260200160002060030181600a811061229a57fe5b0160000160149054906101000a900460ff168482600a81106122b857fe5b602002019060ff16908160ff168152505060026000600454815260200190815260200160002060030181600a81106122ec57fe5b0160000160159054906101000a900460ff168382600a811061230a57fe5b602002019060ff16908160ff168152505060026000600454815260200190815260200160002060030181600a811061233e57fe5b0160000160169054906101000a900460ff168282600a811061235c57fe5b60200201901515908115158152505080806001019150506121e3565b5083838383935093509350935090919293565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612497576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260088152602001807f696d706f73746f7200000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600b905060006124eb612f72565b60008060006002600060045481526020019081526020016000206001015490505b8681116127b7576000814060001c905060006003828161252857fe5b06905060008090505b600260006004548152602001908152602001600020600d0154811015612704578089146125ec576125d083838360026000600454815260200190815260200160002060030185600a811061258157fe5b0160000160149054906101000a900460ff1660026000600454815260200190815260200160002060030186600a81106125b657fe5b0160000160159054906101000a900460ff1660ff16612ef8565b8782600a81106125dc57fe5b6020020181815101915081815250505b8688600a81106125f857fe5b60200201518782600a811061260957fe5b602002015110612617578097505b60018a038414156126ad5760328782600a811061263057fe5b6020020151106126a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260068152602001807f706173736564000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6126f7565b898414156126f65784806126d2575060328782600a81106126ca57fe5b602002015110155b945060328782600a81106126e257fe5b6020020151106126f55785806001019650505b5b5b8080600101915050612531565b5060328688600a811061271357fe5b602002015110801561273f5750600260328161272b57fe5b048688600a811061273857fe5b6020020151115b801561277d575060026000600454815260200190815260200160002060030187600a811061276957fe5b0160000160169054906101000a900460ff16155b80156127895750600b88145b801561279f575060006003838161279c57fe5b06145b156127a8578697505b5050808060010191505061250c565b508061282b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f756e66696e69736865640000000000000000000000000000000000000000000081525060200191505060405180910390fd5b856002600060045481526020019081526020016000206002018190555060008090506000606484605f60026000600454815260200190815260200160002060000154028161287557fe5b048161287d57fe5b04905060008090505b600260006004548152602001908152602001600020600d01548110156129645760328682600a81106128b457fe5b602002015110612957578160008060026000600454815260200190815260200160002060030184600a81106128e557fe5b0160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081830192505b8080600101915050612886565b506064600260006004548152602001908152602001600020600001548161298757fe5b046000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550606460026000600454815260200190815260200160002060000154816129f557fe5b0482019150816002600060045481526020019081526020016000206000015403600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507ff859b2b3a1437968c54b736faceab8cb2157515a072c0364d598a91d59403d386004548933604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a15050505050505050565b60006004541415612b1157612c86565b60006002600060045481526020019081526020016000206001015414158015612b6957506002600060045481526020019081526020016000206002015460026000600454815260200190815260200160002060010154145b15612b7357612c85565b60008114158015612b9c5750600060026000600454815260200190815260200160002060020154145b8015612bc1575060006002600060045481526020019081526020016000206001015414155b8015612be457504360026000600454815260200190815260200160002060010154105b8015612bef57504381105b15612c0257612bfd816124db565b612c84565b600081148015612c2a5750600060026000600454815260200190815260200160002060020154145b8015612c4f575060006002600060045481526020019081526020016000206001015414155b8015612c7557504360ff6002600060045481526020019081526020016000206001015401105b15612c8357612c82612c89565b5b5b5b5b50565b600260006004548152602001908152602001600020600101546002600060045481526020019081526020016000206002018190555060646063600260006004548152602001908152602001600020600001540281612ce357fe5b04600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060646002600060045481526020019081526020016000206000015481612d7357fe5b046000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507f27d9e4e82e66f47a126dd5323a9eb9f6cee58c94e887a6a0848f83c06007a18b60045433604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1565b60008115612e5f576064600a60640160058560ff1660038110612e4d57fe5b01540281612e5757fe5b049050612e74565b60058360ff1660038110612e6f57fe5b015490505b92915050565b6000806002600060045481526020019081526020016000206001015414158015612ebb57504360026000600454815260200190815260200160002060010154105b905090565b6000806004541415612ed55760019050612ef5565b600060026000600454815260200190815260200160002060020154141590505b90565b600080606460088560ff1660038110612f0d57fe5b0154600a878a60405160200180838152602001828152602001925050506040516020818303038152906040528051906020012060001c81612f4a57fe5b060281612f5357fe5b04905082861415612f65576002810290505b8091505095945050505050565b604051806101400160405280600a90602082028038833980820191505090505090565b604051806101400160405280600a90602082028038833980820191505090505090565b604051806101400160405280600a90602082028038833980820191505090505090565b604051806101400160405280600a90602082028038833980820191505090505090565b604051806101400160405280600a9060208202803883398082019150509050509056fea165627a7a723058201e38f8a2d0104c1c7d1eef2de47d7d6461c6f94cd2a9400e71db539b115bc2740029"
}