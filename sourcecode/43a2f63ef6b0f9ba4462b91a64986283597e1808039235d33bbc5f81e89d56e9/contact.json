{
  "address": "0x5eee354e36ac51e9d3f7283005cab0c55f423b23",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ArbitrageETHStaking",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-18\n*/\n\npragma solidity ^0.4.23;\n\n// File: contracts/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/ArbitrageETHStaking.sol\n\n/**\n* @title ArbitrageETHStaking\n* @dev The ArbitrageETHStaking contract staking Ether(ETH) tokens.\n*      Here is stored all function and data of user stakes in contract.\n*      Staking is configured for 2%.\n*/\ncontract ArbitrageETHStaking is Ownable {\n\n    using SafeMath for uint256;\n\n    /*==============================\n     =            EVENTS            =\n     ==============================*/\n\n    event onPurchase(\n       address indexed customerAddress,\n       uint256 etherIn,\n       uint256 contractBal,\n       uint256 poolFee,\n       uint timestamp\n    );\n\n    event onWithdraw(\n         address indexed customerAddress,\n         uint256 etherOut,\n         uint256 contractBal,\n         uint timestamp\n    );\n\n\n    /*** STORAGE ***/\n\n    mapping(address => uint256) internal personalFactorLedger_; // personal factor ledger\n    mapping(address => uint256) internal balanceLedger_; // users balance ledger\n\n    // Configurations\n    uint256 minBuyIn = 0.001 ether; // can't buy less then 0.0001 ETH\n    uint256 stakingPrecent = 2;\n    uint256 internal globalFactor = 10e21; // global factor\n    uint256 constant internal constantFactor = 10e21 * 10e21; // constant factor\n\n    /// @dev Forward all Ether in buy() function\n    function() external payable {\n        buy();\n    }\n\n    // @dev Buy in staking pool, transfer ethereum in the contract, pay 2% fee\n    function buy()\n        public\n        payable\n    {\n        address _customerAddress = msg.sender;\n\n        require(msg.value >= minBuyIn, \"should be more the 0.0001 ether sent\");\n\n        uint256 _etherBeforeBuyIn = getBalance().sub(msg.value);\n\n        uint256 poolFee;\n        // Check is not a first buy in\n        if (_etherBeforeBuyIn != 0) {\n\n            // Add 2% fee of the buy to the staking pool\n            poolFee = msg.value.mul(stakingPrecent).div(100);\n\n            // Increase amount of eth everyone else owns\n            uint256 globalIncrease = globalFactor.mul(poolFee) / _etherBeforeBuyIn;\n            globalFactor = globalFactor.add(globalIncrease);\n        }\n\n\n        balanceLedger_[_customerAddress] = ethBalanceOf(_customerAddress).add(msg.value).sub(poolFee);\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n\n        emit onPurchase(_customerAddress, msg.value, getBalance(), poolFee, now);\n    }\n\n    /**\n     * @dev Withdraw selected amount of ethereum from the contract back to user,\n     *      update the balance.\n     * @param _sellEth - Amount of ethereum to withdraw from contract\n     */\n    function withdraw(uint256 _sellEth)\n        public\n    {\n        address _customerAddress = msg.sender;\n        // User must have enough eth and cannot sell 0\n        require(_sellEth > 0, \"user cant spam transactions with 0 value\");\n        require(_sellEth <= ethBalanceOf(_customerAddress), \"user cant withdraw more then he holds \");\n\n\n        // Transfer balance and update user ledgers\n        _customerAddress.transfer(_sellEth);\n        balanceLedger_[_customerAddress] = ethBalanceOf(_customerAddress).sub(_sellEth);\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n\n        emit onWithdraw(_customerAddress, _sellEth, getBalance(), now);\n    }\n\n    // @dev Withdraw all the ethereum user holds in the contract, set balance to 0\n    function withdrawAll()\n        public\n    {\n        address _customerAddress = msg.sender;\n        // Set the sell amount to the user's full balance, don't sell if empty\n        uint256 _sellEth = ethBalanceOf(_customerAddress);\n        require(_sellEth > 0, \"user cant call withdraw, when holds nothing\");\n        // Transfer balance and update user ledgers\n        _customerAddress.transfer(_sellEth);\n        balanceLedger_[_customerAddress] = 0;\n        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n\n        emit onWithdraw(_customerAddress, _sellEth, getBalance(), now);\n    }\n\n    /**\n    * UI Logic - View Functions\n    */\n\n    // @dev Returns contract ETH balance\n    function getBalance()\n        public\n        view\n        returns (uint256)\n    {\n        return address(this).balance;\n    }\n\n    // @dev Returns user ETH tokens balance in contract\n    function ethBalanceOf(address _customerAddress)\n        public\n        view\n        returns (uint256)\n    {\n        // Balance ledger * personal factor * globalFactor / constantFactor\n        return balanceLedger_[_customerAddress].mul(personalFactorLedger_[_customerAddress]).mul(globalFactor) / constantFactor;\n    }\n}",
  "bytecode": "608060405266038d7ea4c68000600355600260045569021e19e0c9bab240000060055560008054600160a060020a03191633179055610896806100436000396000f30060806040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312065fe081146100975780632e1a7d4d146100be578063715018a6146100d65780637252bbf2146100eb578063853828b61461010c5780638da5cb5b14610121578063a6f2ae3a1461008d578063f2fde38b14610152575b610095610173565b005b3480156100a357600080fd5b506100ac610348565b60408051918252519081900360200190f35b3480156100ca57600080fd5b5061009560043561034d565b3480156100e257600080fd5b5061009561053a565b3480156100f757600080fd5b506100ac600160a060020a03600435166105a6565b34801561011857600080fd5b50610095610614565b34801561012d57600080fd5b50610136610759565b60408051600160a060020a039092168252519081900360200190f35b34801561015e57600080fd5b50610095600160a060020a0360043516610768565b6003543390600090819081903410156101fb576040805160e560020a62461bcd028152602060048201526024808201527f73686f756c64206265206d6f72652074686520302e303030312065746865722060448201527f73656e7400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61021334610207610348565b9063ffffffff61078b16565b9250821561027e576102416064610235600454346107a290919063ffffffff16565b9063ffffffff6107cb16565b915082610259836005546107a290919063ffffffff16565b81151561026257fe5b04905061027a816005546107e090919063ffffffff16565b6005555b61029b826102073461028f886105a6565b9063ffffffff6107e016565b600160a060020a03851660009081526002602052604090205560055472047bf19673df52e37f2410011d1000000000008115156102d457fe5b600160a060020a0386166000818152600160205260409020929091049091557f140d188d405280ed343000927009b1db02841e6710c720013411024d04ca3c5e3461031d610348565b604080519283526020830191909152818101869052426060830152519081900360800190a250505050565b303190565b33600082116103cc576040805160e560020a62461bcd02815260206004820152602860248201527f757365722063616e74207370616d207472616e73616374696f6e73207769746860448201527f20302076616c7565000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6103d5816105a6565b821115610452576040805160e560020a62461bcd02815260206004820152602660248201527f757365722063616e74207769746864726177206d6f7265207468656e2068652060448201527f686f6c6473200000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b604051600160a060020a0382169083156108fc029084906000818181858888f19350505050158015610488573d6000803e3d6000fd5b5061049682610207836105a6565b600160a060020a03821660009081526002602052604090205560055472047bf19673df52e37f2410011d1000000000008115156104cf57fe5b600160a060020a0383166000818152600160205260409020929091049091557f90ebb005d68efee044927e1e77e1fd0cecc508368aa72c39250a787eed5f0a7083610518610348565b6040805192835260208301919091524282820152519081900360600190a25050565b600054600160a060020a0316331461055157600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600554600160a060020a0382166000908152600160209081526040808320546002909252822054919272047bf19673df52e37f2410011d10000000000092610604926105f8919063ffffffff6107a216565b9063ffffffff6107a216565b81151561060d57fe5b0492915050565b336000610620826105a6565b9050600081116106a0576040805160e560020a62461bcd02815260206004820152602b60248201527f757365722063616e742063616c6c2077697468647261772c207768656e20686f60448201527f6c6473206e6f7468696e67000000000000000000000000000000000000000000606482015290519081900360840190fd5b604051600160a060020a0383169082156108fc029083906000818181858888f193505050501580156106d6573d6000803e3d6000fd5b50600160a060020a03821660009081526002602052604081205560055472047bf19673df52e37f2410011d10000000000081151561071057fe5b600160a060020a0384166000818152600160205260409020929091049091557f90ebb005d68efee044927e1e77e1fd0cecc508368aa72c39250a787eed5f0a7082610518610348565b600054600160a060020a031681565b600054600160a060020a0316331461077f57600080fd5b610788816107ed565b50565b60008282111561079757fe5b508082035b92915050565b60008215156107b35750600061079c565b508181028183828115156107c357fe5b041461079c57fe5b600081838115156107d857fe5b049392505050565b8181018281101561079c57fe5b600160a060020a038116151561080257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820ed59da05b704105bd3ef89142c9bfd81c5dfcf1087263cfa7cc6bd3f7c03eddf0029"
}