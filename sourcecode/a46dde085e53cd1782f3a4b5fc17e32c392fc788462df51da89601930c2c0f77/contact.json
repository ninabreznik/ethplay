{
  "address": "0x424dc31ddaff31b539bc87fec9486f0bc6c55ff3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MARA",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-18\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n\tfunction mul(uint256 a, uint256 b) internal constant returns (uint256) {\n\t\tuint256 c = a * b;\n\t\tassert(a == 0 || c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction div(uint256 a, uint256 b) internal constant returns (uint256) {\n\t\tassert(b > 0); \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Solidity automatically throws when dividing by 0\n\t\tuint256 c = a / b;\n\t\tassert(a == b * c + a % b); \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal constant returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\t// ERC20 Token Smart Contract\n\tcontract MARA {\t\n\t\tstring  public constant name \t\t= \"MARA\";\n\t\tstring  public constant symbol \t\t= \"MARA\";\n\t\tuint8   public constant decimals\t= 0;\n\t\tuint    public _totalSupply \t\t= 100000000;\n\t\tuint256 public RATE \t\t\t\t= 1;\n\t\tbool    public isMinting \t\t\t= false;\n\t\tstring  public constant generatedBy\t= \"MARAChain Secure Exchange of Digital Documents - www.marachain.eu\";\n\t\t\n\t\tusing SafeMath for uint256;\n\t\taddress public owner;\n\t\t\n\t\t// Functions with this modifier can only be executed by the owner\n\t\tmodifier onlyOwner() {\n\t\t\tif (msg.sender != owner) {\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\t_;\n\t\t}\n\t\t\n\t\tmapping(address => uint256) balances;\t\t\t\t\t\t\t\t\t\t\t\t\t// Balances for each account\n\t\tmapping(address => mapping(address=>uint256)) allowed;\t\t\t\t\t\t\t\t\t// Owner of account approves the transfer of an amount to another account\n\n\t\tfunction () payable{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Its a payable function works as a token factory\n\t\t\tcreateTokens();\n\t\t}\n\n\t\t// Constructor\n\t\tconstructor() public {\n\t\t\towner = 0x65e1A84eFA8f217DA90fDe7a60fA02fDc0cd5b8C; \n\t\t\tbalances[owner] = _totalSupply;\n\t\t}\n\n\t\t//allows owner to burn tokens that are not sold in a crowdsale\n\t\tfunction burnTokens(uint256 _value) onlyOwner {\n\t\t\trequire(balances[msg.sender] >= _value && _value > 0 );\n\t\t\t_totalSupply = _totalSupply.sub(_value);\n\t\t\tbalances[msg.sender] = balances[msg.sender].sub(_value); \n\t\t}\n\n\t\t// This function creates Tokens  \n\t\tfunction createTokens() payable {\n\t\t\tif(isMinting == true){\n\t\t\t\trequire(msg.value > 0);\n\t\t\t\tuint256  tokens = msg.value.div(100000000000000).mul(RATE);\n\t\t\t\tbalances[msg.sender] = balances[msg.sender].add(tokens);\n\t\t\t\t_totalSupply = _totalSupply.add(tokens);\n\t\t\t\towner.transfer(msg.value);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthrow;\n\t\t\t}\n\t\t}\n\n\t\tfunction endCrowdsale() onlyOwner {\n\t\t\tisMinting = false;\n\t\t}\n\n\t\tfunction changeCrowdsaleRate(uint256 _value) onlyOwner {\n\t\t\tRATE = _value;\n\t\t}\n\t\t\n\t\tfunction totalSupply() constant returns(uint256){\n\t\t\treturn _totalSupply;\n\t\t}\n\t\t\n\t\tfunction balanceOf(address _owner) constant returns(uint256){\t\t\t\t\t\t\t// What is the balance of a particular account?\n\t\t\treturn balances[_owner];\n\t\t}\n   \n\t\tfunction transfer(address _to, uint256 _value)  returns(bool) {\t\t\t\t\t\t\t// Transfer the balance from owner's account to another account\n\t\t\trequire(balances[msg.sender] >= _value && _value > 0 );\n\t\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\t\tbalances[_to] = balances[_to].add(_value);\n\t\t\tTransfer(msg.sender, _to, _value);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t// Send _value amount of tokens from address _from to address _to\n\t// The transferFrom method is used for a withdraw workflow, allowing contracts to send\n\t// tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n\t// fees in sub-currencies; the command should fail unless the _from account has\n\t// deliberately authorized the sender of the message via some mechanism; we propose\n\t// these standardized APIs for approval:\n\tfunction transferFrom(address _from, address _to, uint256 _value)  returns(bool) {\n\t\trequire(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t\tTransfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\t\n\t// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n\t// If this function is called again it overwrites the current allowance with _value.\n\tfunction approve(address _spender, uint256 _value) returns(bool){\n\t\tallowed[msg.sender][_spender] = _value; \n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\t\n\t// Returns the amount which _spender is still allowed to withdraw from _owner\n\tfunction allowance(address _owner, address _spender) constant returns(uint256){\n\t\treturn allowed[_owner][_spender];\n\t}\n\t\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "bytecode": "60806040526305f5e100600055600180556000600260006101000a81548160ff02191690831515021790555034801561003757600080fd5b507365e1a84efa8f217da90fde7a60fa02fdc0cd5b8c600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005460036000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113b6806101046000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610106578063095ea7b3146101965780630ced8c69146101fb57806318160ddd1461028b5780632095f2d4146102b657806323b872dd146102cd5780632a8092df14610352578063313ce567146103815780633eaaf86b146103b25780635c07ac94146103dd578063664e97041461040a5780636d1b229d1461043557806370a08231146104625780638da5cb5b146104b957806395d89b4114610510578063a9059cbb146105a0578063b442726314610605578063dd62ed3e1461060f575b610104610686565b005b34801561011257600080fd5b5061011b610808565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a257600080fd5b506101e1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610841565b604051808215151515815260200191505060405180910390f35b34801561020757600080fd5b50610210610933565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610250578082015181840152602081019050610235565b50505050905090810190601f16801561027d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029757600080fd5b506102a06109b9565b6040518082815260200191505060405180910390f35b3480156102c257600080fd5b506102cb6109c2565b005b3480156102d957600080fd5b50610338600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a3b565b604051808215151515815260200191505060405180910390f35b34801561035e57600080fd5b50610367610dc8565b604051808215151515815260200191505060405180910390f35b34801561038d57600080fd5b50610396610ddb565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103be57600080fd5b506103c7610de0565b6040518082815260200191505060405180910390f35b3480156103e957600080fd5b5061040860048036038101908080359060200190929190505050610de6565b005b34801561041657600080fd5b5061041f610e4c565b6040518082815260200191505060405180910390f35b34801561044157600080fd5b5061046060048036038101908080359060200190929190505050610e52565b005b34801561046e57600080fd5b506104a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fbb565b6040518082815260200191505060405180910390f35b3480156104c557600080fd5b506104ce611004565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561051c57600080fd5b5061052561102a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056557808201518184015260208101905061054a565b50505050905090810190601f1680156105925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105ac57600080fd5b506105eb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611063565b604051808215151515815260200191505060405180910390f35b61060d610686565b005b34801561061b57600080fd5b50610670600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611258565b6040518082815260200191505060405180910390f35b600060011515600260009054906101000a900460ff1615151415610800576000341115156106b357600080fd5b6106e06001546106d2655af3107a4000346112df90919063ffffffff16565b61132090919063ffffffff16565b905061073481600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135390919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061078c8160005461135390919063ffffffff16565b600081905550600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156107fa573d6000803e3d6000fd5b50610805565b600080fd5b50565b6040805190810160405280600481526020017f4d4152410000000000000000000000000000000000000000000000000000000081525081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b608060405190810160405280604181526020017f4d415241436861696e205365637572652045786368616e6765206f662044696781526020017f6974616c20446f63756d656e7473202d207777772e6d617261636861696e2e6581526020017f750000000000000000000000000000000000000000000000000000000000000081525081565b60008054905090565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a1e57600080fd5b6000600260006101000a81548160ff021916908315150217905550565b600081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610b08575081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610b145750600082115b1515610b1f57600080fd5b610b7182600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461137190919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c0682600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135390919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cd882600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461137190919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600260009054906101000a900460ff1681565b600081565b60005481565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e4257600080fd5b8060018190555050565b60015481565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eae57600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610efd5750600081115b1515610f0857600080fd5b610f1d8160005461137190919063ffffffff16565b600081905550610f7581600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461137190919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f4d4152410000000000000000000000000000000000000000000000000000000081525081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156110b45750600082115b15156110bf57600080fd5b61111182600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461137190919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111a682600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461135390919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000831115156112ee57fe5b82848115156112f957fe5b049050828481151561130757fe5b06818402018414151561131657fe5b8091505092915050565b60008082840290506000841480611341575082848281151561133e57fe5b04145b151561134957fe5b8091505092915050565b600080828401905083811015151561136757fe5b8091505092915050565b600082821115151561137f57fe5b8183039050929150505600a165627a7a723058201677a5580bf5fdd2a466bde7b79de66185589e69255afc564f3b808894cab9ab0029"
}