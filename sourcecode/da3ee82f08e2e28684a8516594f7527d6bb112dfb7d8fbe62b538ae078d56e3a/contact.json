{
  "address": "0x4ae0ede482f825fb9cccce8f0fe089f0379eaa2a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "MCH: Gum Gateway 1",
  "contractName": "GumGateway",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-29\n*/\n\npragma solidity 0.4.24;\n\n// File: contracts/lib/openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\ncontract PauserRole {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private pausers;\n\n  constructor() public {\n    pausers.add(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function renouncePauser() public {\n    pausers.remove(msg.sender);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n  event Paused();\n  event Unpaused();\n\n  bool private _paused = false;\n\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused();\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    _owner = msg.sender;\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(_owner);\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: contracts/access/roles/ReferrerRole.sol\n\ncontract ReferrerRole is Ownable {\n    using Roles for Roles.Role;\n\n    event ReferrerAdded(address indexed account);\n    event ReferrerRemoved(address indexed account);\n\n    Roles.Role private referrers;\n\n    constructor() public {\n        referrers.add(msg.sender);\n    }\n\n    modifier onlyReferrer() {\n        require(isReferrer(msg.sender));\n        _;\n    }\n    \n    function isReferrer(address account) public view returns (bool) {\n        return referrers.has(account);\n    }\n\n    function addReferrer(address account) public onlyOwner() {\n        referrers.add(account);\n        emit ReferrerAdded(account);\n    }\n\n    function removeReferrer(address account) public onlyOwner() {\n        referrers.remove(account);\n        emit ReferrerRemoved(account);\n    }\n\n}\n\n// File: contracts/shop/DailyAction.sol\n\ncontract DailyAction is Ownable, Pausable {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) public latestActionTime;\n    uint256 public term;\n\n    event Action(\n        address indexed user,\n        address indexed referrer,\n        uint256 at\n    );\n\n    event UpdateTerm(\n        uint256 term\n    );\n    \n    constructor() public {\n        term = 86400;\n    }\n\n    function withdrawEther() external onlyOwner() {\n        owner().transfer(address(this).balance);\n    }\n\n    function updateTerm(uint256 num) external onlyOwner() {\n        term = num;\n\n        emit UpdateTerm(\n            term\n        );\n    }\n\n    function requestDailyActionReward(address referrer) external whenNotPaused() {\n        require(!isInTerm(msg.sender), \"this sender got daily reward within term\");\n\n        emit Action(\n            msg.sender,\n            referrer,\n            block.timestamp\n        );\n\n        latestActionTime[msg.sender] = block.timestamp;\n    }\n\n    function isInTerm(address sender) public view returns (bool) {\n        if (latestActionTime[sender] == 0) {\n            return false;\n        } else if (block.timestamp >= latestActionTime[sender].add(term)) {\n            return false;\n        }\n        return true;\n    }\n}\n\n// File: contracts/shop/GumGateway.sol\n\ncontract GumGateway is ReferrerRole, Pausable, DailyAction {\n    using SafeMath for uint256;\n\n    uint256 internal ethBackRate;\n    uint256 internal minimumAmount;\n\n    event Sold(\n        address indexed user,\n        address indexed referrer,\n        uint256 value,\n        uint256 at\n    );\n    \n    constructor() public {\n        minimumAmount = 10000000000000000;\n    }\n    \n    function updateEthBackRate(uint256 _newEthBackRate) external onlyOwner() {\n        ethBackRate = _newEthBackRate;\n    }\n\n    function updateMinimumAmount(uint256 _newMinimumAmount) external onlyOwner() {\n        minimumAmount = _newMinimumAmount;\n    }\n\n    function getEthBackRate() external onlyOwner() view returns (uint256) {\n        return ethBackRate;\n    }\n\n    function withdrawEther() external onlyOwner() {\n        owner().transfer(address(this).balance);\n    }\n\n    function buy(address _referrer) external payable whenNotPaused() {\n        require(msg.value >= minimumAmount, \"msg.value should be more than minimum ether amount\");\n        \n        address referrer;\n        if (_referrer == msg.sender){\n            referrer = address(0x0);\n        } else {\n            referrer = _referrer;\n        }\n        if ((referrer != address(0x0)) && isReferrer(referrer)) {\n            referrer.transfer(msg.value.mul(ethBackRate).div(100));\n        }\n        emit Sold(\n            msg.sender,\n            referrer,\n            msg.value,\n            block.timestamp\n        );\n    }\n\n}",
  "bytecode": "60806040526000600360006101000a81548160ff02191690831515021790555034801561002b57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061008d3360016100cb640100000000026110e9179091906401000000009004565b6100ae3360026100cb640100000000026110e9179091906401000000009004565b62015180600581905550662386f26fc10000600781905550610165565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561010757600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b611332806101746000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633696d3aa1461013857806337c351571461017b5780633f4ba83a146101a857806346fbf68e146101bf5780635c975abb1461021a57806360ffc1cf146102495780636ef8d66d14610274578063715018a61461028b5780637362377b146102a25780637a00e2e3146102b95780637b049a46146102fc57806382dc1ec4146103295780638456cb591461036c5780638da5cb5b146103835780638f32d59b146103da578063937adbe614610409578063a10ffbed14610464578063bb8e5b571461048f578063d64d6968146104bc578063f088d54714610517578063f2fde38b1461054d578063f73171f114610590578063fefa9bb1146105e7575b600080fd5b34801561014457600080fd5b50610179600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061062a565b005b34801561018757600080fd5b506101a660048036038101908080359060200190929190505050610796565b005b3480156101b457600080fd5b506101bd6107ec565b005b3480156101cb57600080fd5b50610200600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610864565b604051808215151515815260200191505060405180910390f35b34801561022657600080fd5b5061022f610881565b604051808215151515815260200191505060405180910390f35b34801561025557600080fd5b5061025e610898565b6040518082815260200191505060405180910390f35b34801561028057600080fd5b506102896108b5565b005b34801561029757600080fd5b506102a06108cb565b005b3480156102ae57600080fd5b506102b7610985565b005b3480156102c557600080fd5b506102fa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109ff565b005b34801561030857600080fd5b5061032760048036038101908080359060200190929190505050610a6c565b005b34801561033557600080fd5b5061036a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a89565b005b34801561037857600080fd5b50610381610af7565b005b34801561038f57600080fd5b50610398610b70565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103e657600080fd5b506103ef610b99565b604051808215151515815260200191505060405180910390f35b34801561041557600080fd5b5061044a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bf0565b604051808215151515815260200191505060405180910390f35b34801561047057600080fd5b50610479610cb1565b6040518082815260200191505060405180910390f35b34801561049b57600080fd5b506104ba60048036038101908080359060200190929190505050610cb7565b005b3480156104c857600080fd5b506104fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cd4565b604051808215151515815260200191505060405180910390f35b61054b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cf1565b005b34801561055957600080fd5b5061058e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f17565b005b34801561059c57600080fd5b506105d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f36565b6040518082815260200191505060405180910390f35b3480156105f357600080fd5b50610628600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f4e565b005b600360009054906101000a900460ff1615151561064657600080fd5b61064f33610bf0565b1515156106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f746869732073656e64657220676f74206461696c79207265776172642077697481526020017f68696e207465726d00000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f03bee8945a564e58a4243604a426d1168e3654790c5ad819fd04206500e60b36426040518082815260200191505060405180910390a342600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b61079e610b99565b15156107a957600080fd5b806005819055507f42abe072cac69cb13b03255cb2c26297e10970937da5386e8f1ae78c21d2f01c6005546040518082815260200191505060405180910390a150565b6107f533610864565b151561080057600080fd5b600360009054906101000a900460ff16151561081b57600080fd5b6000600360006101000a81548160ff0219169083151502179055507fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693360405160405180910390a1565b600061087a826002610fbb90919063ffffffff16565b9050919050565b6000600360009054906101000a900460ff16905090565b60006108a2610b99565b15156108ad57600080fd5b600654905090565b6108c933600261104f90919063ffffffff16565b565b6108d3610b99565b15156108de57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61098d610b99565b151561099857600080fd5b6109a0610b70565b73ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156109fc573d6000803e3d6000fd5b50565b610a07610b99565b1515610a1257600080fd5b610a2681600161104f90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f68e673b5cfb652e620fba208d02d6b172a0dc242d4497d94a1f92bb5fa92bc3160405160405180910390a250565b610a74610b99565b1515610a7f57600080fd5b8060068190555050565b610a9233610864565b1515610a9d57600080fd5b610ab18160026110e990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b610b0033610864565b1515610b0b57600080fd5b600360009054906101000a900460ff16151515610b2757600080fd5b6001600360006101000a81548160ff0219169083151502179055507f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75260405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610c425760009050610cac565b610c96600554600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461118390919063ffffffff16565b42101515610ca75760009050610cac565b600190505b919050565b60055481565b610cbf610b99565b1515610cca57600080fd5b8060078190555050565b6000610cea826001610fbb90919063ffffffff16565b9050919050565b6000600360009054906101000a900460ff16151515610d0f57600080fd5b6007543410151515610daf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f6d73672e76616c75652073686f756c64206265206d6f7265207468616e206d6981526020017f6e696d756d20657468657220616d6f756e74000000000000000000000000000081525060400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610dec5760009050610df0565b8190505b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610e325750610e3181610cd4565b5b15610ea6578073ffffffffffffffffffffffffffffffffffffffff166108fc610e796064610e6b600654346111a490919063ffffffff16565b6111e290919063ffffffff16565b9081150290604051600060405180830381858888f19350505050158015610ea4573d6000803e3d6000fd5b505b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f16dd16959a056953a63cf14bf427881e762e54f03d86b864efea8238dd3b822f3442604051808381526020018281526020019250505060405180910390a35050565b610f1f610b99565b1515610f2a57600080fd5b610f338161120c565b50565b60046020528060005260406000206000915090505481565b610f56610b99565b1515610f6157600080fd5b610f758160016110e990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f51e6bb66cce1aac9478cbafcad3421bf2a600ce8ec3874296c671ab32c68ce9260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610ff857600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561108b57600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561112557600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080828401905083811015151561119a57600080fd5b8091505092915050565b60008060008414156111b957600091506111db565b82840290508284828115156111ca57fe5b041415156111d757600080fd5b8091505b5092915050565b6000806000831115156111f457600080fd5b82848115156111ff57fe5b0490508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561124857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a723058204853437823a2138e9e6ed19241b1031a55d97fb35a7dcf6633796d60254def0a0029"
}