{
  "address": "0x74f4ef03989702d1a6daeecc23e16e408604e3ff",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PGDToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-15\n*/\n\npragma solidity ^0.4.13;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n\ncontract PGDToken is StandardToken,Ownable{\n\n\t//the base info of the token\n\tstring public constant name=\"pagoda coin\";\n\tstring public constant symbol=\"PGD\";\n\tstring public constant version = \"1.0\";\n\tuint256 public constant decimals = 18;\n\n\tuint256 public constant MAX_SUPPLY=200000000*10**decimals;\n\tuint256 public constant MAX_FUNDING_SUPPLY=100000000*10**decimals;\n\t//teamKeeping\n\tuint256 public constant TEAM_KEEPING=100000000*10**decimals;\n\n\tuint256 public constant rate=17000;\n\t\n\tuint256 public totalFundingSupply;\n\tuint256 public totalTeamWithdrawSupply;\n\n\tuint256 public startBlock;\n\tuint256 public endBlock;\n\taddress[] public allFundingUsers;\n\n\tmapping(address=>uint256) public fundBalance;\n\t\n\n\tfunction PGDToken(){\n\t\ttotalSupply = 0 ;\n\t\ttotalFundingSupply = 0;\n\t\ttotalTeamWithdrawSupply=0;\n\n\t\tstartBlock = 4000000;\n\t\tendBlock = 6000000;\n\t}\n\n\tmodifier beforeBlock(uint256 _blockNum){\n\t\tassert(getCurrentBlockNum()<_blockNum);\n\t\t_;\n\t}\n\n\tmodifier afterBlock(uint256 _blockNum){\n\t\tassert(getCurrentBlockNum()>=_blockNum);\n\t\t_;\n\t}\n\n\tmodifier notReachTotalSupply(uint256 _value,uint256 _rate){\n\t\tassert(MAX_SUPPLY>=totalSupply.add(_value.mul(_rate)));\n\t\t_;\n\t}\n\n\tmodifier notReachFundingSupply(uint256 _value,uint256 _rate){\n\t\tassert(MAX_FUNDING_SUPPLY>=totalFundingSupply.add(_value.mul(_rate)));\n\t\t_;\n\t}\n\n\tmodifier notReachTeamWithdrawSupply(uint256 _value,uint256 _rate){\n\t\tassert(TEAM_KEEPING>=totalTeamWithdrawSupply.add(_value.mul(_rate)));\n\t\t_;\n\t}\n\n\t//owner有权限提取账户中的eth\n\tfunction etherProceeds() external\n\t\tonlyOwner\n\n\t{\n\t\tif(!msg.sender.send(this.balance)) revert();\n\t}\n\n\n\t//众筹，不超过最大众筹份额,要在众筹时间内\n\tfunction () payable external\n\t\tafterBlock(startBlock)\n\t\tbeforeBlock(endBlock)\n\t\tnotReachFundingSupply(msg.value,rate)\n\t{\n\t\t\tprocessFunding(msg.sender,msg.value,rate);\n\t\t\t//增加已众筹份额\n\t\t\tuint256 amount=msg.value.mul(rate);\n\t\t\ttotalFundingSupply = totalFundingSupply.add(amount);\n\t\t\t\n\t\t\t//另外记录众筹数据，以避免受转账影响\n\t\t\tallFundingUsers.push(msg.sender);\n\t\t\tfundBalance[msg.sender]=fundBalance[msg.sender].add(amount);\n\n\n\t}\n\n\t//众筹完成后，owner可以按比例给用户分发剩余代币\n\tfunction airdrop(address receiver,uint256 _value) external\n\t    onlyOwner\n\t\tafterBlock(endBlock)\n\t\tnotReachFundingSupply(_value,1)\n\t{\n\t\tprocessFunding(receiver,_value,1);\n\t\t//增加已众筹份额\n\t\ttotalFundingSupply=totalFundingSupply.add(_value);\n\t}\n\n\t//owner有权限提取币\n\tfunction patformWithdraw(uint256 _value) external\n\t\tonlyOwner\n\t\tnotReachTeamWithdrawSupply(_value,1)\n\n\t{\n\t\tprocessFunding(msg.sender,_value,1);\n\t\t//增加团队已提现份额\n\t\ttotalTeamWithdrawSupply=totalTeamWithdrawSupply.add(_value);\n\n\t}\n\t//不能超过最大分发限额\n\tfunction processFunding(address receiver,uint256 _value,uint256 _rate) internal\n\t\tnotReachTotalSupply(_value,_rate)\n\t{\n\t\tuint256 amount=_value.mul(_rate);\n\t\ttotalSupply=totalSupply.add(amount);\n\t\tbalances[receiver] +=amount;\n\t\tTransfer(0x0, receiver, amount);\n\t}\n\n\n\tfunction getCurrentBlockNum() internal returns (uint256){\n\t\treturn block.number;\n\t}\n\n\n\n    function setupFundingInfo(uint256 _startBlock,uint256 _endBlock) external\n        onlyOwner\n    {\n\t\tstartBlock=_startBlock;\n\t\tendBlock=_endBlock;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"patformWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_KEEPING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_FUNDING_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"etherProceeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTeamWithdrawSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allFundingUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"setupFundingInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000808190555060006004819055506000600581905550623d0900600681905550625b8d806007819055506117ce8061008a6000396000f300606060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063034741a8146102ff57806306fdde0314610322578063083c6323146103b0578063095ea7b3146103d95780630ad5a8651461043357806318160ddd1461048057806322dd0d2c146104a957806323b872dd146104d25780632c4e722e1461054b578063313ce5671461057457806332cb6b0c1461059d57806343525d73146105c657806348cd4cb1146105ef57806354fd4d501461061857806370a08231146106a6578063801aba56146106f35780638ba4cc3c146107085780638da5cb5b1461074a57806395d89b411461079f578063a7502a3f1461082d578063a9059cbb14610856578063a93b5331146108b0578063bba49529146108d9578063dd62ed3e1461093c578063f2fde38b146109a8578063f699ad94146109e1575b600060065480610162610a0d565b1015151561016c57fe5b60075480610178610a0d565b10151561018157fe5b346142686101ac61019b8284610a1590919063ffffffff16565b600454610a4890919063ffffffff16565b6012600a0a6305f5e10002101515156101c157fe5b6101ce3334614268610a66565b6101e361426834610a1590919063ffffffff16565b94506101fa85600454610a4890919063ffffffff16565b600481905550600880548060010182816102149190611751565b9160005260206000209001600033909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506102b585600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a4890919063ffffffff16565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050005b341561030a57600080fd5b6103206004808035906020019091905050610b7b565b005b341561032d57600080fd5b610335610c42565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561037557808201518184015260208101905061035a565b50505050905090810190601f1680156103a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103bb57600080fd5b6103c3610c7b565b6040518082815260200191505060405180910390f35b34156103e457600080fd5b610419600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c81565b604051808215151515815260200191505060405180910390f35b341561043e57600080fd5b61046a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e08565b6040518082815260200191505060405180910390f35b341561048b57600080fd5b610493610e20565b6040518082815260200191505060405180910390f35b34156104b457600080fd5b6104bc610e26565b6040518082815260200191505060405180910390f35b34156104dd57600080fd5b610531600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e34565b604051808215151515815260200191505060405180910390f35b341561055657600080fd5b61055e6110e4565b6040518082815260200191505060405180910390f35b341561057f57600080fd5b6105876110ea565b6040518082815260200191505060405180910390f35b34156105a857600080fd5b6105b06110ef565b6040518082815260200191505060405180910390f35b34156105d157600080fd5b6105d96110fd565b6040518082815260200191505060405180910390f35b34156105fa57600080fd5b61060261110b565b6040518082815260200191505060405180910390f35b341561062357600080fd5b61062b611111565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561066b578082015181840152602081019050610650565b50505050905090810190601f1680156106985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106b157600080fd5b6106dd600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061114a565b6040518082815260200191505060405180910390f35b34156106fe57600080fd5b610706611193565b005b341561071357600080fd5b610748600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611248565b005b341561075557600080fd5b61075d611327565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107aa57600080fd5b6107b261134d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107f25780820151818401526020810190506107d7565b50505050905090810190601f16801561081f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561083857600080fd5b610840611386565b6040518082815260200191505060405180910390f35b341561086157600080fd5b610896600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061138c565b604051808215151515815260200191505060405180910390f35b34156108bb57600080fd5b6108c3611527565b6040518082815260200191505060405180910390f35b34156108e457600080fd5b6108fa600480803590602001909190505061152d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561094757600080fd5b610992600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061156c565b6040518082815260200191505060405180910390f35b34156109b357600080fd5b6109df600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115f3565b005b34156109ec57600080fd5b610a0b60048080359060200190919080359060200190919050506116ca565b005b600043905090565b60008082840290506000841480610a365750828482811515610a3357fe5b04145b1515610a3e57fe5b8091505092915050565b6000808284019050838110151515610a5c57fe5b8091505092915050565b60008282610a91610a808284610a1590919063ffffffff16565b600054610a4890919063ffffffff16565b6012600a0a630bebc2000210151515610aa657fe5b610ab98486610a1590919063ffffffff16565b9250610ad083600054610a4890919063ffffffff16565b60008190555082600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508573ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd757600080fd5b806001610c01610bf08284610a1590919063ffffffff16565b600554610a4890919063ffffffff16565b6012600a0a6305f5e1000210151515610c1657fe5b610c2233846001610a66565b610c3783600554610a4890919063ffffffff16565b600581905550505050565b6040805190810160405280600b81526020017f7061676f646120636f696e00000000000000000000000000000000000000000081525081565b60075481565b600080821480610d0d57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610d1857600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60096020528060005260406000206000915090505481565b60005481565b6012600a0a6305f5e1000281565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610f0883600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a4890919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f9d83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461173890919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ff3838261173890919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b61426881565b601281565b6012600a0a630bebc2000281565b6012600a0a6305f5e1000281565b60065481565b6040805190810160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111ef57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561124657600080fd5b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112a457600080fd5b600754806112b0610a0d565b101515156112ba57fe5b8160016112e46112d38284610a1590919063ffffffff16565b600454610a4890919063ffffffff16565b6012600a0a6305f5e10002101515156112f957fe5b61130585856001610a66565b61131a84600454610a4890919063ffffffff16565b6004819055505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f504744000000000000000000000000000000000000000000000000000000000081525081565b60055481565b60006113e082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461173890919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061147582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a4890919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60045481565b60088181548110151561153c57fe5b90600052602060002090016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561164f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156116c75780600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561172657600080fd5b81600681905550806007819055505050565b600082821115151561174657fe5b818303905092915050565b81548183558181151161177857818360005260206000209182019101611777919061177d565b5b505050565b61179f91905b8082111561179b576000816000905550600101611783565b5090565b905600a165627a7a7230582079e893c9a72c55a7a25038896567248c8176b440b1e8158decd47bf4e5772dad0029"
}