{
  "address": "0x6fc9c554c2363805673f18b3a2b1912cce8bfb8a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RocketCoin",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-15\n*/\n\npragma solidity ^0.4.18;\n\n\ncontract Token {\n    function balanceOf(address _account) public constant returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n}\n\n\ncontract RocketCoin {\n    string public constant symbol = \"XRC\";\n\n    string public constant name = \"Rocket Coin\";\n\n    uint public constant decimals = 18;\n\n    uint public constant totalSupply = 10000000 * 10 ** decimals;\n\n    address owner;\n\n    bool airDropStatus = true;\n\n    uint airDropAmount = 300 * 10 ** decimals;\n\n    uint airDropGasPrice = 20 * 10 ** 9;\n\n    mapping (address => bool) participants;\n\n    mapping (address => uint256) balances;\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function RocketCoin() public {\n        owner = msg.sender;\n        balances[owner] = totalSupply;\n        Transfer(address(0), owner, totalSupply);\n    }\n\n    function() public payable {\n        require(airDropStatus && balances[owner] >= airDropAmount && !participants[msg.sender] && tx.gasprice >= airDropGasPrice);\n        balances[owner] -= airDropAmount;\n        balances[msg.sender] += airDropAmount;\n        Transfer(owner, msg.sender, airDropAmount);\n        participants[msg.sender] = true;\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        require(balances[msg.sender] >= _amount && _amount > 0);\n        balances[msg.sender] -= _amount;\n        balances[_to] += _amount;\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function multiTransfer(address[] _addresses, uint[] _amounts) public returns (bool success) {\n        require(_addresses.length <= 100 && _addresses.length == _amounts.length);\n        uint totalAmount;\n        for (uint a = 0; a < _amounts.length; a++) {\n            totalAmount += _amounts[a];\n        }\n        require(totalAmount > 0 && balances[msg.sender] >= totalAmount);\n        balances[msg.sender] -= totalAmount;\n        for (uint b = 0; b < _addresses.length; b++) {\n            if (_amounts[b] > 0) {\n                balances[_addresses[b]] += _amounts[b];\n                Transfer(msg.sender, _addresses[b], _amounts[b]);\n            }\n        }\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0);\n        balances[_from] -= _amount;\n        allowed[_from][msg.sender] -= _amount;\n        balances[_to] += _amount;\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function setupAirDrop(bool _status, uint _amount, uint _Gwei) public returns (bool success) {\n        require(msg.sender == owner);\n        airDropStatus = _status;\n        airDropAmount = _amount * 10 ** decimals;\n        airDropGasPrice = _Gwei * 10 ** 9;\n        return true;\n    }\n\n    function withdrawFunds(address _token) public returns (bool success) {\n        require(msg.sender == owner);\n        if (_token == address(0)) {\n            owner.transfer(this.balance);\n        }\n        else {\n            Token ERC20 = Token(_token);\n            ERC20.transfer(owner, ERC20.balanceOf(this));\n        }\n        return true;\n    }\n}",
  "bytecode": "60606040526001600060146101000a81548160ff0219169083151502179055506012600a0a61012c026001556404a817c800600255341561003f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600a0a6298968002600460008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6012600a0a62989680026040518082815260200191505060405180910390a36113f58061018c6000396000f3006060604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610348578063095ea7b3146103d657806318160ddd146104305780631e89d5451461045957806323b872dd1461050b578063313ce5671461058457806368742da6146105ad57806370a08231146105fe5780638213dafc1461064b57806395d89b411461069a578063a9059cbb14610728578063dd62ed3e14610782575b600060149054906101000a900460ff1680156101385750600154600460008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b801561018e5750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b801561019c57506002543a10155b15156101a757600080fd5b600154600460008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6001546040518082815260200191505060405180910390a36001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550005b341561035357600080fd5b61035b6107ee565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039b578082015181840152602081019050610380565b50505050905090810190601f1680156103c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103e157600080fd5b610416600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610827565b604051808215151515815260200191505060405180910390f35b341561043b57600080fd5b610443610919565b6040518082815260200191505060405180910390f35b341561046457600080fd5b6104f160048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050610926565b604051808215151515815260200191505060405180910390f35b341561051657600080fd5b61056a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b7f565b604051808215151515815260200191505060405180910390f35b341561058f57600080fd5b610597610df7565b6040518082815260200191505060405180910390f35b34156105b857600080fd5b6105e4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dfc565b604051808215151515815260200191505060405180910390f35b341561060957600080fd5b610635600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110bf565b6040518082815260200191505060405180910390f35b341561065657600080fd5b61068060048080351515906020019091908035906020019091908035906020019091905050611108565b604051808215151515815260200191505060405180910390f35b34156106a557600080fd5b6106ad6111a4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106ed5780820151818401526020810190506106d2565b50505050905090810190601f16801561071a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561073357600080fd5b610768600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111dd565b604051808215151515815260200191505060405180910390f35b341561078d57600080fd5b6107d8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611342565b6040518082815260200191505060405180910390f35b6040805190810160405280600b81526020017f526f636b657420436f696e00000000000000000000000000000000000000000081525081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6012600a0a629896800281565b600080600080606486511115801561093f575084518651145b151561094a57600080fd5b600091505b845182101561098157848281518110151561096657fe5b9060200190602002015183019250818060010192505061094f565b6000831180156109d0575082600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15156109db57600080fd5b82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600090505b8551811015610b725760008582815181101515610a4657fe5b906020019060200201511115610b65578481815181101515610a6457fe5b90602001906020020151600460008884815181101515610a8057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508581815181101515610adf57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8784815181101515610b4557fe5b906020019060200201516040518082815260200191505060405180910390a35b8080600101915050610a2d565b6001935050505092915050565b600081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610c4c575081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610c585750600082115b1515610c6357600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e5a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f0c576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515610f0757600080fd5b6110b5565b8290508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610ff057600080fd5b6102c65a03f1151561100157600080fd5b505050604051805190506000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561109857600080fd5b6102c65a03f115156110a957600080fd5b50505060405180519050505b6001915050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561116557600080fd5b83600060146101000a81548160ff0219169083151502179055506012600a0a8302600181905550633b9aca008202600281905550600190509392505050565b6040805190810160405280600381526020017f585243000000000000000000000000000000000000000000000000000000000081525081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561122e5750600082115b151561123957600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505600a165627a7a7230582049409ba0127973ef7cce5429148aa422ae70cf82dc1fdac14ca2507799080cec0029"
}