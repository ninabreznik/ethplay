{
  "address": "0x7e7190ba44a8b6461fc3644f86c6e576a2bbbd56",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Hyperexchange",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-10\n*/\n\npragma solidity ^0.4.24;\n\n/***\n * https://hypereth.net\n * \n * No administrators or developers, this contract is fully autonomous\n *\n * 10 % entry fee \n * 3 % of entry fee to masternode referrals\n * 0 % transfer fee\n * Exit fee starts at 50% from contract start\n * Exit fee decreases over 30 days until 15%\n * Stays at 15% forever.\n */\ncontract Hyperexchange {\n\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n\n    /// @dev Only people with tokens\n    modifier onlyBagholders {\n        require(myTokens() > 0);\n        _;\n    }\n\n    /// @dev Only people with profits\n    modifier onlyStronghands {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n    /// @dev notGasbag\n    modifier notGasbag() {\n      require(tx.gasprice < 200999999999);\n      _;\n    }\n\n    /// @dev Preventing unstable dumping and limit ambassador mine\n    modifier antiEarlyWhale {\n        if (address(this).balance  -msg.value < whaleBalanceLimit){\n          require(msg.value <= maxEarlyStake);\n        }\n        if (depositCount_ == 0){\n          require(ambassadors_[msg.sender] && msg.value == 0.01 ether);\n        }else\n        if (depositCount_ < 1){\n          require(ambassadors_[msg.sender] && msg.value == 0.05 ether);\n        }else\n        if (depositCount_ == 1 || depositCount_==2){\n          require(ambassadors_[msg.sender] && msg.value == 0.1 ether);\n        }\n        _;\n    }\n\n    /// @dev notGasbag\n    modifier isControlled() {\n      require(isPremine() || isStarted());\n      _;\n    }\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n\n    string public name = \"HYPER Token\";\n    string public symbol = \"HYPER\";\n    uint8 constant public decimals = 18;\n\n    /// @dev 10% dividends for token purchase\n    uint8 constant internal entryFee_ = 10;\n\n    /// @dev 50% dividends for token selling\n    uint8 constant internal startExitFee_ = 50;\n\n    /// @dev 15% dividends for token selling after step\n    uint8 constant internal finalExitFee_ = 15;\n\n    /// @dev Exit fee falls over period of 30 days\n    uint256 constant internal exitFeeFallDuration_ = 30 days;\n\n    /// @dev 3% masternode\n    uint8 constant internal refferalFee_ = 3;\n\n    /// @dev P3D pricing\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n\n    uint256 constant internal magnitude = 2 ** 64;\n\n    /// @dev 300 needed for masternode activation\n    uint256 public stakingRequirement = 300e18;\n\n    /// @dev anti-early-whale\n    uint256 public maxEarlyStake = 3 ether;\n    uint256 public whaleBalanceLimit = 125 ether;\n\n    /// @dev apex starting gun\n    address public apex;\n\n    /// @dev starting\n    uint256 public startTime = 0; //  January 1, 1970 12:00:00\n\n   /*=================================\n    =            DATASETS            =\n    ================================*/\n\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => uint256) internal bonusBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n    uint256 public depositCount_;\n\n    mapping(address => bool) internal ambassadors_;\n\n    /*=======================================\n    =            CONSTRUCTOR                =\n    =======================================*/\n\n   constructor () public {\n\n     //HyperETH Funding Allocations\n     ambassadors_[msg.sender]=true;\n     //1\n     ambassadors_[0x250F9cD6D75C8CDc34183a51b68ed727B86C1b41]=true;\n         \n     apex = msg.sender;\n   }\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS           =\n    =======================================*/\n\n    // @dev Function setting the start time of the system\n    function setStartTime(uint256 _startTime) public {\n      require(msg.sender==apex && !isStarted() && now < _startTime);\n      startTime = _startTime;\n    }\n\n    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n    function buy(address _referredBy) antiEarlyWhale notGasbag isControlled public payable  returns (uint256) {\n        purchaseTokens(msg.value, _referredBy , msg.sender);\n    }\n\n    /// @dev Converts to tokens on behalf of the customer - this allows gifting and integration with other systems\n    function buyFor(address _referredBy, address _customerAddress) antiEarlyWhale notGasbag isControlled public payable returns (uint256) {\n        purchaseTokens(msg.value, _referredBy , _customerAddress);\n    }\n\n    /**\n     * @dev Fallback function to handle ethereum that was send straight to the contract\n     *  Unfortunately we cannot use a referral address this way.\n     */\n    function() antiEarlyWhale notGasbag isControlled payable public {\n        purchaseTokens(msg.value, 0x0 , msg.sender);\n    }\n\n    /// @dev Converts all of caller's dividends to tokens.\n    function reinvest() onlyStronghands public {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n\n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0 , _customerAddress);\n\n        // fire event\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    /// @dev Alias of sell() and withdraw().\n    function exit() public {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n\n        // capitulation\n        withdraw();\n    }\n\n    /// @dev Withdraws all of the callers earnings.\n    function withdraw() onlyStronghands public {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n\n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n\n        // fire event\n        emit onWithdraw(_customerAddress, _dividends);\n    }\n\n    /// @dev Liquifies tokens to ethereum.\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n\n        // fire event\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n    }\n\n\n    /**\n     * @dev Transfer tokens from the caller to a new holder.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\n        // setup\n        address _customerAddress = msg.sender;\n\n        // make sure we have the requested tokens\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        // withdraw all outstanding dividends first\n        if (myDividends(true) > 0) {\n            withdraw();\n        }\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n\n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n\n        // fire event\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\n\n        // ERC20\n        return true;\n    }\n\n\n    /*=====================================\n    =      HELPERS AND CALCULATORS        =\n    =====================================*/\n\n    /**\n     * @dev Method to view the current Ethereum stored in the contract\n     *  Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @dev Retrieve the total token supply.\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n    /// @dev Retrieve the tokens owned by the caller.\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    /**\n     * @dev Retrieve the dividends owned by the caller.\n     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     *  But in the internal calculations, we want them separate.\n     */\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    /// @dev Retrieve the token balance of any single address.\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    /// @dev Retrieve the dividend balance of any single address.\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    /// @dev Return the sell price of 1 individual token.\n    function sellPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    /// @dev Return the buy price of 1 individual token.\n    function buyPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        return _amountOfTokens;\n    }\n\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n    /// @dev Function for the frontend to get untaxed receivable ethereum.\n    function calculateUntaxedEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        //uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n        //uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _ethereum;\n    }\n\n\n    /// @dev Function for getting the current exitFee\n    function exitFee() public view returns (uint8) {\n        if (startTime==0){\n           return startExitFee_;\n        }\n        if ( now < startTime) {\n          return 0;\n        }\n        uint256 secondsPassed = now - startTime;\n        if (secondsPassed >= exitFeeFallDuration_) {\n            return finalExitFee_;\n        }\n        uint8 totalChange = startExitFee_ - finalExitFee_;\n        uint8 currentChange = uint8(totalChange * secondsPassed / exitFeeFallDuration_);\n        uint8 currentFee = startExitFee_- currentChange;\n        return currentFee;\n    }\n\n    // @dev Function for find if premine\n    function isPremine() public view returns (bool) {\n      return depositCount_<=7;\n    }\n\n    // @dev Function for find if premine\n    function isStarted() public view returns (bool) {\n      return startTime!=0 && now > startTime;\n    }\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n\n    /// @dev Internal function to actually purchase the tokens.\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy , address _customerAddress) internal returns (uint256) {\n        // data setup\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n\n        // is the user referred by a masternode?\n        if (\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ) {\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        // we can't give people infinite ethereum\n        if (tokenSupply_ > 0) {\n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n\n            // calculate the amount of tokens the customer receives over his purchase\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        // really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n\n        // fire event\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n\n        // Keep track\n        depositCount_++;\n        return _amountOfTokens;\n    }\n\n    /**\n     * @dev Calculate Token price based on an amount of incoming ethereum\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial ** 2)\n                            +\n                            (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\n                            +\n                            ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\n                            +\n                            (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            ) / (tokenPriceIncremental_)\n        ) - (tokenSupply_);\n\n        return _tokensReceived;\n    }\n\n    /**\n     * @dev Calculate token sell value.\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\n                        ) - tokenPriceIncremental_\n                    ) * (tokens_ - 1e18)\n                ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\n            )\n        / 1e18);\n\n        return _etherReceived;\n    }\n\n    /// @dev This is where all your gas goes.\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}",
  "bytecode": "60c0604052600b60808190527f485950455220546f6b656e00000000000000000000000000000000000000000060a090815262000040916000919062000139565b506040805180820190915260058082527f48595045520000000000000000000000000000000000000000000000000000006020909201918252620000879160019162000139565b50681043561a88293000006002556729a2241af62c00006003556806c6b935b8bbd400006004556000600655348015620000c057600080fd5b50336000818152600e602052604081208054600160ff19918216811790925573250f9cd6d75c8cdc34183a51b68ed727b86c1b419092527f6f8a9b0eda7da97a327fbb069d2605f0825e6fe9999a43672c57912c82d5cd5e805490921617905560058054600160a060020a0319169091179055620001de565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017c57805160ff1916838001178555620001ac565b82800160010185558215620001ac579182015b82811115620001ac5782518255916020019190600101906200018f565b50620001ba929150620001be565b5090565b620001db91905b80821115620001ba5760008155600101620001c5565b90565b6114d880620001ee6000396000f3006080604052600436106101895763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b81146102a557806306fdde03146102d857806310d0ffdd1461036257806318160ddd1461037a578063226093731461038f57806323b3b704146103a7578063313ce567146103bf5780633ccfd60b146103ea5780633e0a322d146104015780634b75033414610419578063544736e61461042e57806356d399e814610457578063585bc2811461046c5780636284ae4114610481578063688abbf7146104965780636b2f4632146104b057806370a08231146104c557806378e97925146104e65780638620410b146104fb57806391e3310714610510578063949e8acd1461052557806395d89b411461053a578063a9059cbb1461054f578063caa877e714610573578063d6dda33d1461058d578063da7af32d146105a2578063e4849b32146105b7578063e9fad8ee146105cf578063f088d547146105e4578063fdb5a03e146105f8578063ff295c5d1461060d575b6004543430310310156101a5576003543411156101a557600080fd5b600d5415156101e357336000908152600e602052604090205460ff1680156101d3575034662386f26fc10000145b15156101de57600080fd5b610264565b6001600d54101561021b57336000908152600e602052604090205460ff1680156101d3575066b1a2bc2ec5000034146101de57600080fd5b600d546001148061022e5750600d546002145b1561026457336000908152600e602052604090205460ff16801561025957503467016345785d8a0000145b151561026457600080fd5b642ecc8899ff3a1061027557600080fd5b61027d61063e565b8061028b575061028b610648565b151561029657600080fd5b6102a234600033610663565b50005b3480156102b157600080fd5b506102c6600160a060020a03600435166108cd565b60408051918252519081900360200190f35b3480156102e457600080fd5b506102ed610908565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032757818101518382015260200161030f565b50505050905090810190601f1680156103545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036e57600080fd5b506102c6600435610996565b34801561038657600080fd5b506102c66109c9565b34801561039b57600080fd5b506102c66004356109cf565b3480156103b357600080fd5b506102c6600435610a14565b3480156103cb57600080fd5b506103d4610a3d565b6040805160ff9092168252519081900360200190f35b3480156103f657600080fd5b506103ff610a42565b005b34801561040d57600080fd5b506103ff600435610b15565b34801561042557600080fd5b506102c6610b4f565b34801561043a57600080fd5b50610443610648565b604080519115158252519081900360200190f35b34801561046357600080fd5b506102c6610ba7565b34801561047857600080fd5b506102c6610bad565b34801561048d57600080fd5b506103d4610bb3565b3480156104a257600080fd5b506102c66004351515610c1b565b3480156104bc57600080fd5b506102c6610c5c565b3480156104d157600080fd5b506102c6600160a060020a0360043516610c61565b3480156104f257600080fd5b506102c6610c7c565b34801561050757600080fd5b506102c6610c82565b34801561051c57600080fd5b506102c6610ccd565b34801561053157600080fd5b506102c6610cd3565b34801561054657600080fd5b506102ed610ce5565b34801561055b57600080fd5b50610443600160a060020a0360043516602435610d3f565b6102c6600160a060020a0360043581169060243516610e6e565b34801561059957600080fd5b5061044361063e565b3480156105ae57600080fd5b506102c6610f89565b3480156105c357600080fd5b506103ff600435610f8f565b3480156105db57600080fd5b506103ff611102565b6102c6600160a060020a036004351661112f565b34801561060457600080fd5b506103ff61124a565b34801561061957600080fd5b50610622611301565b60408051600160a060020a039092168252519081900360200190f35b600d546007101590565b600060065460001415801561065e575060065442115b905090565b60008080808080808061068161067a8c600a611310565b606461133b565b965061069161067a886003611310565b955061069d8787611352565b94506106a98b88611352565b93506106b484611364565b925068010000000000000000850291506000831180156106de5750600b546106dc84826113fc565b115b15156106e957600080fd5b600160a060020a038a1615801590610713575088600160a060020a03168a600160a060020a031614155b80156107395750600254600160a060020a038b1660009081526007602052604090205410155b1561077f57600160a060020a038a1660009081526008602052604090205461076190876113fc565b600160a060020a038b1660009081526008602052604090205561079a565b61078985876113fc565b945068010000000000000000850291505b6000600b5411156107fe576107b1600b54846113fc565b600b8190556801000000000000000086028115156107cb57fe5b600c8054929091049091019055600b546801000000000000000086028115156107f057fe5b048302820382039150610804565b600b8390555b600160a060020a03891660009081526007602052604090205461082790846113fc565b600160a060020a03808b16600081815260076020908152604080832095909555600c54600a909152939020805493870286900393840190559192508b16907f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8d8642610891610c82565b604080519485526020850193909352838301919091526060830152519081900360800190a35050600d8054600101905598975050505050505050565b600160a060020a03166000908152600a6020908152604080832054600790925290912054600c54680100000000000000009102919091030490565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561098e5780601f106109635761010080835404028352916020019161098e565b820191906000526020600020905b81548152906001019060200180831161097157829003601f168201915b505050505081565b60008080806109a961067a86600a611310565b92506109b58584611352565b91506109c082611364565b95945050505050565b600b5490565b600080600080600b5485111515156109e657600080fd5b6109ef8561140b565b9250610a0861067a84610a00610bb3565b60ff16611310565b91506109c08383611352565b600080600b548311151515610a2857600080fd5b610a318361140b565b90508091505b50919050565b601281565b6000806000610a516001610c1b565b11610a5b57600080fd5b339150610a686000610c1b565b600160a060020a0383166000818152600a6020908152604080832080546801000000000000000087020190556008909152808220805490839055905193019350909183156108fc0291849190818181858888f19350505050158015610ad1573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a25050565b600554600160a060020a031633148015610b345750610b32610648565b155b8015610b3f57508042105b1515610b4a57600080fd5b600655565b600080600080600b5460001415610b6d576414f46b04009350610ba1565b610b7e670de0b6b3a764000061140b565b9250610b8f61067a84610a00610bb3565b9150610b9b8383611352565b90508093505b50505090565b60025481565b60035481565b600080600080600060065460001415610bcf5760329450610c14565b600654421015610be25760009450610c14565b6006544203935062278d008410610bfc57600f9450610c14565b6023925062278d008484020491508160320390508094505b5050505090565b60003382610c3157610c2c816108cd565b610c55565b600160a060020a038116600090815260086020526040902054610c53826108cd565b015b9392505050565b303190565b600160a060020a031660009081526007602052604090205490565b60065481565b600080600080600b5460001415610ca05764199c82cc009350610ba1565b610cb1670de0b6b3a764000061140b565b9250610cc161067a84600a611310565b9150610b9b83836113fc565b60045481565b600033610cdf81610c61565b91505090565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561098e5780601f106109635761010080835404028352916020019161098e565b6000806000610d4c610cd3565b11610d5657600080fd5b5033600081815260076020526040902054831115610d7357600080fd5b6000610d7f6001610c1b565b1115610d8d57610d8d610a42565b600160a060020a038116600090815260076020526040902054610db09084611352565b600160a060020a038083166000908152600760205260408082209390935590861681522054610ddf90846113fc565b600160a060020a03858116600081815260076020908152604080832095909555600c8054948716808452600a83528684208054968b02909603909555548383529185902080549289029092019091558351878152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3600191505b5092915050565b600454600090343031031015610e8d57600354341115610e8d57600080fd5b600d541515610ecb57336000908152600e602052604090205460ff168015610ebb575034662386f26fc10000145b1515610ec657600080fd5b610f4c565b6001600d541015610f0357336000908152600e602052604090205460ff168015610ebb575066b1a2bc2ec500003414610ec657600080fd5b600d5460011480610f165750600d546002145b15610f4c57336000908152600e602052604090205460ff168015610f4157503467016345785d8a0000145b1515610f4c57600080fd5b642ecc8899ff3a10610f5d57600080fd5b610f6561063e565b80610f735750610f73610648565b1515610f7e57600080fd5b610e67348484610663565b600d5481565b6000806000806000806000610fa2610cd3565b11610fac57600080fd5b33600081815260076020526040902054909650871115610fcb57600080fd5b869450610fd78561140b565b9350610fe861067a85610a00610bb3565b9250610ff48484611352565b9150611002600b5486611352565b600b55600160a060020a0386166000908152600760205260409020546110289086611352565b600160a060020a038716600090815260076020908152604080832093909355600c54600a909152918120805492880268010000000000000000860201928390039055600b54919250101561109e5761109a600c54600b5468010000000000000000860281151561109457fe5b046113fc565b600c555b85600160a060020a03167f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e8684426110d4610c82565b604080519485526020850193909352838301919091526060830152519081900360800190a250505050505050565b33600081815260076020526040812054908111156111235761112381610f8f565b61112b610a42565b5050565b60045460009034303103101561114e5760035434111561114e57600080fd5b600d54151561118c57336000908152600e602052604090205460ff16801561117c575034662386f26fc10000145b151561118757600080fd5b61120d565b6001600d5410156111c457336000908152600e602052604090205460ff16801561117c575066b1a2bc2ec50000341461118757600080fd5b600d54600114806111d75750600d546002145b1561120d57336000908152600e602052604090205460ff16801561120257503467016345785d8a0000145b151561120d57600080fd5b642ecc8899ff3a1061121e57600080fd5b61122661063e565b806112345750611234610648565b151561123f57600080fd5b610a37348333610663565b60008060008061125a6001610c1b565b1161126457600080fd5b61126e6000610c1b565b336000818152600a60209081526040808320805468010000000000000000870201905560089091528120805490829055909201945092506112b190849084610663565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b600554600160a060020a031681565b6000808315156113235760009150610e67565b5082820282848281151561133357fe5b0414610c5557fe5b600080828481151561134957fe5b04949350505050565b60008282111561135e57fe5b50900390565b600b546000906c01431e0fae6d7217caa00000009082906402540be4006113e96113e3730380d4bd8a8678c1bb542c80deb4800000000000880268056bc75e2d631000006002860a02017005e0a1fd2712875988becaad0000000000850201780197d4df19d605767337e9f14d3eec8920e40000000000000001611477565b85611352565b8115156113f257fe5b0403949350505050565b600082820183811015610c5557fe5b600b54600090670de0b6b3a76400008381019181019083906114646414f46b04008285046402540be40002018702600283670de0b6b3a763ffff1982890a8b900301046402540be4000281151561145e57fe5b04611352565b81151561146d57fe5b0495945050505050565b80600260018201045b81811015610a3757809150600281828581151561149957fe5b04018115156114a457fe5b0490506114805600a165627a7a72305820a6e8014bdc9598579cda477accefd7d4ca68bbb7d23b98fd448ab95b03c1a32b0029"
}