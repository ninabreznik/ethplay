{
  "address": "0xb33ad2acedea7d698b987e0d8195c4df3f6629e8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FCCToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-28\n*/\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n\n\n\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\ncontract Recoverable is Ownable {\n\n  /// @dev Empty constructor (for now)\n  function Recoverable() {\n  }\n\n  /// @dev This will be invoked by the owner, when owner wants to rescue tokens\n  /// @param token Token which will we rescue to the owner from the contract\n  function recoverTokens(ERC20Basic token) onlyOwner public {\n    token.transfer(owner, tokensToBeReturned(token));\n  }\n\n  /// @dev Interface function, can be overwritten by the superclass\n  /// @param token Token which balance we will check and return\n  /// @return The amount of tokens (in smallest denominator) the contract owns\n  function tokensToBeReturned(ERC20Basic token) public returns (uint) {\n    return token.balanceOf(this);\n  }\n}\n\n\n\n/**\n * Standard EIP-20 token with an interface marker.\n *\n * @notice Interface marker is used by crowdsale contracts to validate that addresses point a good token contract.\n *\n */\ncontract StandardTokenExt is StandardToken, Recoverable {\n\n  /* Interface declaration */\n  function isToken() public constant returns (bool weAre) {\n    return true;\n  }\n}\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n/**\n * Upgrade agent interface inspired by Lunyr.\n *\n * Upgrade agent transfers tokens to a new contract.\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n */\ncontract UpgradeAgent {\n\n  uint public originalSupply;\n\n  /** Interface marker */\n  function isUpgradeAgent() public constant returns (bool) {\n    return true;\n  }\n\n  function upgradeFrom(address _from, uint256 _value) public;\n\n}\n\n\n/**\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n *\n * First envisioned by Golem and Lunyr projects.\n */\ncontract UpgradeableToken is StandardTokenExt {\n\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n  address public upgradeMaster;\n\n  /** The next contract where the tokens will be migrated. */\n  UpgradeAgent public upgradeAgent;\n\n  /** How many tokens we have upgraded by now. */\n  uint256 public totalUpgraded;\n\n  /**\n   * Upgrade states.\n   *\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n   *\n   */\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n\n  /**\n   * Somebody has upgraded some of his tokens.\n   */\n  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * New upgrade agent available.\n   */\n  event UpgradeAgentSet(address agent);\n\n  /**\n   * Do not allow construction without upgrade master set.\n   */\n  function UpgradeableToken(address _upgradeMaster) {\n    upgradeMaster = _upgradeMaster;\n  }\n\n  /**\n   * Allow the token holder to upgrade some of their tokens to a new contract.\n   */\n  function upgrade(uint256 value) public {\n\n      UpgradeState state = getUpgradeState();\n      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n        // Called in a bad state\n        throw;\n      }\n\n      // Validate input value.\n      if (value == 0) throw;\n\n      balances[msg.sender] = balances[msg.sender].sub(value);\n\n      // Take tokens out from circulation\n      totalSupply_ = totalSupply_.sub(value);\n      totalUpgraded = totalUpgraded.add(value);\n\n      // Upgrade agent reissues the tokens\n      upgradeAgent.upgradeFrom(msg.sender, value);\n      Upgrade(msg.sender, upgradeAgent, value);\n  }\n\n  /**\n   * Set an upgrade agent that handles\n   */\n  function setUpgradeAgent(address agent) external {\n\n      if(!canUpgrade()) {\n        // The token is not yet in a state that we could think upgrading\n        throw;\n      }\n\n      if (agent == 0x0) throw;\n      // Only a master can designate the next agent\n      if (msg.sender != upgradeMaster) throw;\n      // Upgrade has already begun for an agent\n      if (getUpgradeState() == UpgradeState.Upgrading) throw;\n\n      upgradeAgent = UpgradeAgent(agent);\n\n      // Bad interface\n      if(!upgradeAgent.isUpgradeAgent()) throw;\n      // Make sure that token supplies match in source and target\n      if (upgradeAgent.originalSupply() != totalSupply_) throw;\n\n      UpgradeAgentSet(upgradeAgent);\n  }\n\n  /**\n   * Get the state of the token upgrade.\n   */\n  function getUpgradeState() public constant returns(UpgradeState) {\n    if(!canUpgrade()) return UpgradeState.NotAllowed;\n    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n    else return UpgradeState.Upgrading;\n  }\n\n  /**\n   * Change the upgrade master.\n   *\n   * This allows us to set a new owner for the upgrade mechanism.\n   */\n  function setUpgradeMaster(address master) public {\n      if (master == 0x0) throw;\n      if (msg.sender != upgradeMaster) throw;\n      upgradeMaster = master;\n  }\n\n  /**\n   * Child contract can enable to provide the condition when the upgrade can begun.\n   */\n  function canUpgrade() public constant returns(bool) {\n     return true;\n  }\n\n}\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n\n\n\n/**\n * Define interface for releasing the token transfer after a successful crowdsale.\n */\ncontract ReleasableToken is StandardTokenExt {\n\n  /* The finalizer contract that allows unlift the transfer limits on this token */\n  address public releaseAgent;\n\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n  bool public released = false;\n\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n  mapping (address => bool) public transferAgents;\n\n  /**\n   * Limit token transfer until the crowdsale is over.\n   *\n   */\n  modifier canTransfer(address _sender) {\n\n    if(!released) {\n        if(!transferAgents[_sender]) {\n            throw;\n        }\n    }\n\n    _;\n  }\n\n  /**\n   * Set the contract that can call release and make the token transferable.\n   *\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n   */\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\n    releaseAgent = addr;\n  }\n\n  /**\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n   */\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n    transferAgents[addr] = state;\n  }\n\n  /**\n   * One way function to release the tokens to the wild.\n   *\n   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n   */\n  function releaseTokenTransfer() public onlyReleaseAgent {\n    released = true;\n  }\n\n  /** The function can be called only before or after the tokens have been releasesd */\n  modifier inReleaseState(bool releaseState) {\n    if(releaseState != released) {\n        throw;\n    }\n    _;\n  }\n\n  /** The function can be called only by a whitelisted release agent. */\n  modifier onlyReleaseAgent() {\n    if(msg.sender != releaseAgent) {\n        throw;\n    }\n    _;\n  }\n\n  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\n    // Call StandardToken.transfer()\n   return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\n    // Call StandardToken.transferForm()\n    return super.transferFrom(_from, _to, _value);\n  }\n\n}\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n */\n\n\n/**\n * Safe unsigned safe math.\n *\n * https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli\n *\n * Originally from https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol\n *\n * Maintained here until merged to mainline zeppelin-solidity.\n *\n */\nlibrary SafeMathLib {\n\n  function times(uint a, uint b) returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function minus(uint a, uint b) returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function plus(uint a, uint b) returns (uint) {\n    uint c = a + b;\n    assert(c>=a);\n    return c;\n  }\n\n}\n\n\n\n/**\n * A token that can increase its supply by another contract.\n *\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\n * Only mint agents, contracts whitelisted by owner, can mint new tokens.\n *\n */\ncontract MintableToken is StandardTokenExt {\n\n  using SafeMathLib for uint;\n\n  bool public mintingFinished = false;\n\n  /** List of agents that are allowed to create new tokens */\n  mapping (address => bool) public mintAgents;\n\n  event MintingAgentChanged(address addr, bool state);\n  event Minted(address receiver, uint amount);\n\n  /**\n   * Create new tokens and allocate them to an address..\n   *\n   * Only callably by a crowdsale contract (mint agent).\n   */\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n    totalSupply_ = totalSupply_.plus(amount);\n    balances[receiver] = balances[receiver].plus(amount);\n\n    // This will make the mint transaction apper in EtherScan.io\n    // We can remove this after there is a standardized minting event\n    Transfer(0, receiver, amount);\n  }\n\n  /**\n   * Owner can allow a crowdsale contract to mint new tokens.\n   */\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n    mintAgents[addr] = state;\n    MintingAgentChanged(addr, state);\n  }\n\n  modifier onlyMintAgent() {\n    // Only crowdsale contracts are allowed to mint new tokens\n    if(!mintAgents[msg.sender]) {\n        throw;\n    }\n    _;\n  }\n\n  /** Make sure we are not done yet. */\n  modifier canMint() {\n    if(mintingFinished) throw;\n    _;\n  }\n}\n\n\n\n/**\n * A crowdsaled token.\n *\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n *\n * - The token transfer() is disabled until the crowdsale is over\n * - The token contract gives an opt-in upgrade path to a new contract\n * - The same token can be part of several crowdsales through approve() mechanism\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n *\n */\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken {\n\n  /** Name and symbol were updated. */\n  event UpdatedTokenInformation(string newName, string newSymbol);\n\n  string public name;\n\n  string public symbol;\n\n  uint public decimals;\n\n  /**\n   * Construct the token.\n   *\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n   *\n   * @param _name Token name\n   * @param _symbol Token symbol - should be all caps\n   * @param _initialSupply How many tokens we start with\n   * @param _decimals Number of decimal places\n   * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\n   */\n  function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable)\n    UpgradeableToken(msg.sender) {\n\n    // Create any address, can be transferred\n    // to team multisig via changeOwner(),\n    // also remember to call setUpgradeMaster()\n    owner = msg.sender;\n\n    name = _name;\n    symbol = _symbol;\n\n    totalSupply_ = _initialSupply;\n\n    decimals = _decimals;\n\n    // Create initially all balance on the team multisig\n    balances[owner] = totalSupply_;\n\n    if(totalSupply_ > 0) {\n      Minted(owner, totalSupply_);\n    }\n\n    // No more new supply allowed after the token creation\n    if(!_mintable) {\n      mintingFinished = true;\n      if(totalSupply_ == 0) {\n        throw; // Cannot create a token without supply and no minting\n      }\n    }\n  }\n\n  /**\n   * When token is released to be transferable, enforce no new tokens can be created.\n   */\n  function releaseTokenTransfer() public onlyReleaseAgent {\n    mintingFinished = true;\n    super.releaseTokenTransfer();\n  }\n\n  /**\n   * Allow upgrade agent functionality kick in only if the crowdsale was success.\n   */\n  function canUpgrade() public constant returns(bool) {\n    return released && super.canUpgrade();\n  }\n\n  /**\n   * Owner can update token information here.\n   *\n   * It is often useful to conceal the actual token association, until\n   * the token operations, like central issuance or reissuance have been completed.\n   *\n   * This function allows the token owner to rename the token after the operations\n   * have been completed and then point the audience to use the token contract.\n   */\n  function setTokenInformation(string _name, string _symbol) onlyOwner {\n    name = _name;\n    symbol = _symbol;\n\n    UpdatedTokenInformation(name, symbol);\n  }\n\n}\n\n\n/**\n * Define interface for releasing the token transfer after a successful crowdsale.\n */\ncontract FCCToken is CrowdsaleToken {\n\n    using SafeMath for uint;\n\n    /**\n    * Define spending amount schedule using Period.\n    */\n    struct Period {\n\n        // UNIX timestamp when this milestone kicks in\n        uint time;\n\n        // How many percentage of invesetedTokens\n        uint percentage;\n    }\n\n    // Store periods in a fixed array, so that it can be seen in a blockchain explorer\n    Period[2] public periods;\n\n    // Get specified period by index\n    function getPeriod(uint n) public view returns (uint, uint) {\n        return (periods[n].time, periods[n].percentage);\n    }\n\n    // Get transfered token of specified address\n    function transferedTokenOf(address _owner) public view returns (uint256 balance) {\n        return transferedToken[_owner];\n    }\n\n    // Get purchased token of specified address\n    function investedCrowdsaleTokenOf(address _owner) public view returns (uint256 balance) {\n        return investedCrowdsaleToken[_owner];\n    }\n\n    // Get received token of specified address\n    function receivedTokenOf(address _owner) public view returns (uint256 balance) {\n        return receivedToken[_owner];\n    }\n\n    // This contains all crowdedsale addresses, and their transfered token\n    mapping(address => uint256) transferedToken;\n    // This contains all crowdedsale addresses, and their received token\n    mapping(address => uint256) receivedToken;\n\n    // This contains all crowdedsale addresses, and their token which they bought in crowedsale\n    mapping(address => uint256) investedCrowdsaleToken;\n\n    /**\n    * Limit amount of token transfer after the crowdsale is over.\n    */\n    modifier fccTokenCanTransfer(address _sender, uint256 _value) {\n        // Verify if sender is not transfer agent\n        if(!transferAgents[_sender]){\n            // Verify if present time is not exceed upper bounds period\n            if(now < periods[1].time){\n\n                // Amount of token which sender can transfer\n                // base on amount of token that they invested in crowdsale and percentage of period\n                uint256 transferableCrowedSaleToken = 0;\n\n                // Verify if present time is not exceed lower bounds period\n                if(now < periods[0].time){\n                    transferableCrowedSaleToken = (investedCrowdsaleToken[_sender].mul(periods[0].percentage)).div(100);\n                }else{\n                    transferableCrowedSaleToken = (investedCrowdsaleToken[_sender].mul(periods[1].percentage)).div(100);\n                }\n\n                // Amount of token that sender have\n                // exclude the token which they invest in crowdsale\n                uint256 afterCrowedsaleTokenBalance = 0;\n                if (receivedToken[_sender] > investedCrowdsaleToken[_sender]) {\n                    afterCrowedsaleTokenBalance = receivedToken[_sender].sub(investedCrowdsaleToken[_sender]);\n                }\n\n                // Amount of token that sender can transfer\n                uint256 totalTransferableBalance = afterCrowedsaleTokenBalance.add(transferableCrowedSaleToken);\n\n                // Amount of transfered and intend to transfer token\n                uint256 totalTransfer = _value.add(transferedToken[_sender]);\n\n                require (totalTransferableBalance >= totalTransfer);\n            }\n        }\n\n        _;\n    }\n\n    /**\n    * Construct the token.\n    *\n    * @param _name Token name\n    * @param _symbol Token symbol - should be all caps\n    * @param _initialSupply How many tokens we start with\n    * @param _decimals Number of decimal places\n    */\n    function FCCToken(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable) public\n    CrowdsaleToken(_name, _symbol, _initialSupply, _decimals, _mintable){}\n\n    // Set _periods Spending amount percentage with time schedule using Period\n    function setPeriod(uint[] _periods) public\n    onlyOwner()\n    {\n        // Check period array length\n        require(_periods.length == 4);\n\n        // Set Period\n        for(uint i=0; i<_periods.length/2; i++) {\n            periods[i].time = _periods[i*2];\n            periods[i].percentage = _periods[i*2+1];\n        }\n\n        // Verify if lower bound is greater than upper bound\n        require(periods[0].time <= periods[1].time);\n    }\n\n    /**\n    * Override method\n    * Return fasle because token does not need upgrade\n    */\n    function canUpgrade() public view returns(bool) {\n        return false;\n    }\n\n    function transfer(address _to, uint256 _value) public\n    canTransfer(msg.sender)\n    fccTokenCanTransfer(msg.sender, _value)\n    returns (bool success) {\n\n        // Verify if present time is not exceed release time\n        // and _to is not transfer agent\n        // present time is crowdedsale time\n        if(!released && !transferAgents[_to]) {\n            // Increase _to investedCrowdsaleToken\n            investedCrowdsaleToken[_to] = _value.add(investedCrowdsaleToken[_to]);\n        }\n\n        // Verify if present time is not exceed upper bound period\n        // and msg.sender is not transfer agent\n        // present time is restricted transfering amount time after crowdedsale\n        if (now < periods[1].time){\n            if (!transferAgents[_to]) {\n                receivedToken[_to] = _value.add(receivedToken[_to]);\n            }\n            // Increase msg.sender transferedToken\n            if (!transferAgents[msg.sender]) {\n                transferedToken[msg.sender] = _value.add(transferedToken[msg.sender]);\n            }\n        }\n\n        // Call CrowdsaleToken.transfer()\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public\n    canTransfer(_from)\n    fccTokenCanTransfer(_from, _value)\n    returns (bool success) {\n\n        // Verify if present time is not exceed release time\n        // and _to is not transfer agent\n        // present time is crowdedsale time\n        if(!released && !transferAgents[_to]) {\n            // Increase _to investedCrowdsaleToken\n            investedCrowdsaleToken[_to] = _value.add(investedCrowdsaleToken[_to]);\n        }\n\n        // Verify if present time is not exceed upper bound period\n        // and _from is not transfer agent\n        // present time is restricted transfering amount time after crowdedsale\n        if (now < periods[1].time){\n            if(!transferAgents[_to]){\n                receivedToken[_to] = _value.add(receivedToken[_to]);\n            }\n            // Increase msg.sender transferedToken\n            if(!transferAgents[_from]){\n                transferedToken[_from] = _value.add(transferedToken[_from]);\n            }\n        }\n\n        // Call CrowdsaleToken.transferForm()\n        return super.transferFrom(_from, _to, _value);\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_periods\",\"type\":\"uint256[]\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMintAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferedTokenOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"receivedTokenOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokensToBeReturned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"investedCrowdsaleTokenOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isToken\",\"outputs\":[{\"name\":\"weAre\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"name\":\"setUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_mintable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"MintingAgentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526004805460a060020a60ff02191690556006805460ff1916905534156200002a57600080fd5b604051620023f2380380620023f2833981016040528080518201919060200180518201919060200180519190602001805191906020018051600380546008805433600160a060020a0316600160a060020a031991821681179092559182168117909116179055915085905084848484600b858051620000ae9291602001906200017d565b50600c848051620000c49291602001906200017d565b506001839055600d829055600354600160a060020a0316600090815260208190526040812084905583111562000148576003546001547f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe91600160a060020a031690604051600160a060020a03909216825260208201526040908101905180910390a15b8015156200016d576006805460ff191660019081179091555415156200016d57600080fd5b5050505050505050505062000222565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001c057805160ff1916838001178555620001f0565b82800160010185558215620001f0579182015b82811115620001f0578251825591602001919060010190620001d3565b50620001fe92915062000202565b5090565b6200021f91905b80821115620001fe576000815560010162000209565b90565b6121c080620002326000396000f3006060604052600436106101df5763ffffffff60e060020a60003504166302f652a381146101e457806305d2035b1461020a57806306fdde0314610231578063095ea7b3146102bb57806314363e65146102dd57806316114acd1461032c57806318160ddd1461034b57806323b872dd1461037057806329ff4f5314610398578063313ce567146103b757806340c10f19146103ca57806342c1867b146103ec578063432146751461040b57806345977d031461042f5780634b2c0706146104455780634eee966f14610473578063522567c8146105065780635de4ccb0146105255780635f412d4f14610554578063600440cb14610567578063661884631461057a57806370a082311461059c5780638444b391146105bb578063867c2857146105f25780638da5cb5b1461061157806395d89b411461062457806396132521146106375780639738968c1461064a578063a2ea771f1461065d578063a9059cbb1461067c578063c45d19db1461069e578063c752ff62146106bd578063d1f276d3146106d0578063d73dd623146106e3578063d7e7088a14610705578063dd62ed3e14610724578063dff114dd14610749578063ea4a110414610768578063eefa597b1461077e578063f2fde38b14610791578063ffeb7d75146107b0575b600080fd5b34156101ef57600080fd5b610208600160a060020a036004351660243515156107cf565b005b341561021557600080fd5b61021d610830565b604051901515815260200160405180910390f35b341561023c57600080fd5b610244610839565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610280578082015183820152602001610268565b50505050905090810190601f1680156102ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102c657600080fd5b61021d600160a060020a03600435166024356108d7565b34156102e857600080fd5b610208600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061094395505050505050565b341561033757600080fd5b610208600160a060020a0360043516610a0f565b341561035657600080fd5b61035e610ab3565b60405190815260200160405180910390f35b341561037b57600080fd5b61021d600160a060020a0360043581169060243516604435610aba565b34156103a357600080fd5b610208600160a060020a0360043516610db5565b34156103c257600080fd5b61035e610e1a565b34156103d557600080fd5b610208600160a060020a0360043516602435610e20565b34156103f757600080fd5b61021d600160a060020a0360043516610fbe565b341561041657600080fd5b610208600160a060020a03600435166024351515610fd3565b341561043a57600080fd5b61020860043561106f565b341561045057600080fd5b61045b6004356111d7565b60405191825260208201526040908101905180910390f35b341561047e57600080fd5b61020860046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061120f95505050505050565b341561051157600080fd5b61035e600160a060020a036004351661137d565b341561053057600080fd5b610538611398565b604051600160a060020a03909116815260200160405180910390f35b341561055f57600080fd5b6102086113a7565b341561057257600080fd5b6105386113d9565b341561058557600080fd5b61021d600160a060020a03600435166024356113e8565b34156105a757600080fd5b61035e600160a060020a03600435166114e4565b34156105c657600080fd5b6105ce6114ff565b604051808260048111156105de57fe5b60ff16815260200191505060405180910390f35b34156105fd57600080fd5b61021d600160a060020a036004351661154a565b341561061c57600080fd5b61053861155f565b341561062f57600080fd5b61024461156e565b341561064257600080fd5b61021d6115d9565b341561065557600080fd5b61021d6115e9565b341561066857600080fd5b61035e600160a060020a03600435166115ee565b341561068757600080fd5b61021d600160a060020a0360043516602435611609565b34156106a957600080fd5b61035e600160a060020a03600435166118d3565b34156106c857600080fd5b61035e61194c565b34156106db57600080fd5b610538611952565b34156106ee57600080fd5b61021d600160a060020a0360043516602435611961565b341561071057600080fd5b610208600160a060020a0360043516611a05565b341561072f57600080fd5b61035e600160a060020a0360043581169060243516611bb7565b341561075457600080fd5b61035e600160a060020a0360043516611be2565b341561077357600080fd5b61045b600435611bfd565b341561078957600080fd5b61021d611c1c565b341561079c57600080fd5b610208600160a060020a0360043516611c21565b34156107bb57600080fd5b610208600160a060020a0360043516611cbc565b60035433600160a060020a039081169116146107ea57600080fd5b60045460009060a060020a900460ff161561080457600080fd5b50600160a060020a03919091166000908152600560205260409020805460ff1916911515919091179055565b60065460ff1681565b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108cf5780601f106108a4576101008083540402835291602001916108cf565b820191906000526020600020905b8154815290600101906020018083116108b257829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035460009033600160a060020a0390811691161461096157600080fd5b815160041461096f57600080fd5b5060005b6002825181151561098057fe5b048110156109fa5781816002028151811061099757fe5b90602001906020020151600e82600281106109ae57fe5b60020201600001819055508181600202600101815181106109cb57fe5b90602001906020020151600e82600281106109e257fe5b60020201600101819055508080600101915050610973565b601054600e541115610a0b57600080fd5b5050565b60035433600160a060020a03908116911614610a2a57600080fd5b600354600160a060020a038083169163a9059cbb9116610a49846118d3565b60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610a9557600080fd5b6102c65a03f11515610aa657600080fd5b5050506040518051505050565b6001545b90565b600454600090849060a060020a900460ff161515610af957600160a060020a03811660009081526005602052604090205460ff161515610af957600080fd5b600160a060020a0385166000908152600560205260408120548691859181908190819060ff161515610c4957601054421015610c4957600e5460009450421015610b8457610b7d6064610b71600e60005b6002020160010154600160a060020a038a1660009081526014602052604090205490611d1b565b9063ffffffff611d4d16565b9350610b98565b610b956064610b71600e6001610b4a565b93505b600160a060020a0386166000908152601460209081526040808320546013909252822054919450901115610bfd57600160a060020a038616600090815260146020908152604080832054601390925290912054610bfa9163ffffffff611d6416565b92505b610c0d838563ffffffff611d7616565b600160a060020a038716600090815260126020526040902054909250610c3a90869063ffffffff611d7616565b905080821015610c4957600080fd5b60045460a060020a900460ff16158015610c7c5750600160a060020a038a1660009081526005602052604090205460ff16155b15610cc557600160a060020a038a16600090815260146020526040902054610cab908a9063ffffffff611d7616565b600160a060020a038b166000908152601460205260409020555b601054421015610d9b57600160a060020a038a1660009081526005602052604090205460ff161515610d3557600160a060020a038a16600090815260136020526040902054610d1b908a9063ffffffff611d7616565b600160a060020a038b166000908152601360205260409020555b600160a060020a038b1660009081526005602052604090205460ff161515610d9b57600160a060020a038b16600090815260126020526040902054610d81908a9063ffffffff611d7616565b600160a060020a038c166000908152601260205260409020555b610da68b8b8b611d85565b9b9a5050505050505050505050565b60035433600160a060020a03908116911614610dd057600080fd5b60045460009060a060020a900460ff1615610dea57600080fd5b506004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600d5481565b600160a060020a03331660009081526007602052604090205460ff161515610e4757600080fd5b60065460ff1615610e5757600080fd5b60015473506ba7c0a739b4ddc910075b73b72132f0aae5e66366098d4f90918360006040516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b1515610eb957600080fd5b6102c65a03f41515610eca57600080fd5b505050604051805160015550600160a060020a0382166000908152602081905260408082205473506ba7c0a739b4ddc910075b73b72132f0aae5e6926366098d4f92859190516020015260405160e060020a63ffffffff85160281526004810192909252602482015260440160206040518083038186803b1515610f4d57600080fd5b6102c65a03f41515610f5e57600080fd5b5050506040518051600160a060020a03841660008181526020819052604080822093909355909250907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050565b60076020526000908152604090205460ff1681565b60035433600160a060020a03908116911614610fee57600080fd5b60065460ff1615610ffe57600080fd5b600160a060020a03821660009081526007602052604090819020805460ff19168315151790557f4b0adf6c802794c7dde28a08a4e07131abcff3bf9603cd71f14f90bec7865efa908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60006110796114ff565b9050600381600481111561108957fe5b14806110a05750600481600481111561109e57fe5b145b15156110ab57600080fd5b8115156110b757600080fd5b600160a060020a0333166000908152602081905260409020546110e0908363ffffffff611d6416565b600160a060020a03331660009081526020819052604090205560015461110c908363ffffffff611d6416565b600155600a54611122908363ffffffff611d7616565b600a55600954600160a060020a031663753e88e5338460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561117b57600080fd5b6102c65a03f1151561118c57600080fd5b5050600954600160a060020a03908116915033167f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac8460405190815260200160405180910390a35050565b600080600e83600281106111e757fe5b6002020160000154600e846002811015156111fe57fe5b600202016001015491509150915091565b60035433600160a060020a0390811691161461122a57600080fd5b600b82805161123d9291602001906120fc565b50600c8180516112519291602001906120fc565b507fd131ab1e6f279deea74e13a18477e13e2107deb6dc8ae955648948be5841fb46600b600c6040516040808252835460026000196101006001841615020190911604908201819052819060208201906060830190869080156112f55780601f106112ca576101008083540402835291602001916112f5565b820191906000526020600020905b8154815290600101906020018083116112d857829003601f168201915b50508381038252845460026000196101006001841615020190911604808252602090910190859080156113695780601f1061133e57610100808354040283529160200191611369565b820191906000526020600020905b81548152906001019060200180831161134c57829003601f168201915b505094505050505060405180910390a15050565b600160a060020a031660009081526012602052604090205490565b600954600160a060020a031681565b60045433600160a060020a039081169116146113c257600080fd5b6006805460ff191660011790556113d7611dd8565b565b600854600160a060020a031681565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561144557600160a060020a03338116600090815260026020908152604080832093881683529290529081205561147c565b611455818463ffffffff611d6416565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a031660009081526020819052604090205490565b60006115096115e9565b151561151757506001610ab7565b600954600160a060020a0316151561153157506002610ab7565b600a54151561154257506003610ab7565b506004610ab7565b60056020526000908152604090205460ff1681565b600354600160a060020a031681565b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108cf5780601f106108a4576101008083540402835291602001916108cf565b60045460a060020a900460ff1681565b600090565b600160a060020a031660009081526013602052604090205490565b600454600090339060a060020a900460ff16151561164857600160a060020a03811660009081526005602052604090205460ff16151561164857600080fd5b33600160a060020a03811660009081526005602052604081205485919081908190819060ff1615156117695760105442101561176957600e54600094504210156116a45761169d6064610b71600e6000610b4a565b93506116b8565b6116b56064610b71600e6001610b4a565b93505b600160a060020a038616600090815260146020908152604080832054601390925282205491945090111561171d57600160a060020a03861660009081526014602090815260408083205460139092529091205461171a9163ffffffff611d6416565b92505b61172d838563ffffffff611d7616565b600160a060020a03871660009081526012602052604090205490925061175a90869063ffffffff611d7616565b90508082101561176957600080fd5b60045460a060020a900460ff1615801561179c5750600160a060020a038a1660009081526005602052604090205460ff16155b156117e557600160a060020a038a166000908152601460205260409020546117cb908a9063ffffffff611d7616565b600160a060020a038b166000908152601460205260409020555b6010544210156118bb57600160a060020a038a1660009081526005602052604090205460ff16151561185557600160a060020a038a1660009081526013602052604090205461183b908a9063ffffffff611d7616565b600160a060020a038b166000908152601360205260409020555b600160a060020a03331660009081526005602052604090205460ff1615156118bb57600160a060020a0333166000908152601260205260409020546118a1908a9063ffffffff611d7616565b600160a060020a0333166000908152601260205260409020555b6118c58a8a611e19565b9a9950505050505050505050565b600081600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561192c57600080fd5b6102c65a03f1151561193d57600080fd5b50505060405180519392505050565b600a5481565b600454600160a060020a031681565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054611999908363ffffffff611d7616565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b611a0d6115e9565b1515611a1857600080fd5b600160a060020a0381161515611a2d57600080fd5b60085433600160a060020a03908116911614611a4857600080fd5b6004611a526114ff565b6004811115611a5d57fe5b1415611a6857600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055166361d3d7a66000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611ad357600080fd5b6102c65a03f11515611ae457600080fd5b505050604051805190501515611af957600080fd5b600154600954600160a060020a0316634b2ba0dd6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611b4457600080fd5b6102c65a03f11515611b5557600080fd5b50505060405180519050141515611b6b57600080fd5b6009547f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc90600160a060020a0316604051600160a060020a03909116815260200160405180910390a150565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600160a060020a031660009081526014602052604090205490565b600e8160028110611c0a57fe5b60020201805460019091015490915082565b600190565b60035433600160a060020a03908116911614611c3c57600080fd5b600160a060020a0381161515611c5157600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0381161515611cd157600080fd5b60085433600160a060020a03908116911614611cec57600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080831515611d2e57600091506114dd565b50828202828482811515611d3e57fe5b0414611d4657fe5b9392505050565b6000808284811515611d5b57fe5b04949350505050565b600082821115611d7057fe5b50900390565b600082820183811015611d4657fe5b600454600090849060a060020a900460ff161515611dc457600160a060020a03811660009081526005602052604090205460ff161515611dc457600080fd5b611dcf858585611e6a565b95945050505050565b60045433600160a060020a03908116911614611df357600080fd5b6004805474ff0000000000000000000000000000000000000000191660a060020a179055565b600454600090339060a060020a900460ff161515611e5857600160a060020a03811660009081526005602052604090205460ff161515611e5857600080fd5b611e628484611fea565b949350505050565b6000600160a060020a0383161515611e8157600080fd5b600160a060020a038416600090815260208190526040902054821115611ea657600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115611ed957600080fd5b600160a060020a038416600090815260208190526040902054611f02908363ffffffff611d6416565b600160a060020a038086166000908152602081905260408082209390935590851681522054611f37908363ffffffff611d7616565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054611f7d908363ffffffff611d6416565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b6000600160a060020a038316151561200157600080fd5b600160a060020a03331660009081526020819052604090205482111561202657600080fd5b600160a060020a03331660009081526020819052604090205461204f908363ffffffff611d6416565b600160a060020a033381166000908152602081905260408082209390935590851681522054612084908363ffffffff611d7616565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061213d57805160ff191683800117855561216a565b8280016001018555821561216a579182015b8281111561216a57825182559160200191906001019061214f565b5061217692915061217a565b5090565b610ab791905b8082111561217657600081556001016121805600a165627a7a7230582061c75fb16996415d9bb2066affc4e63b424d9c8ea2f3122b69f2a9716af129ed002900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000019d971e4fe8401e7400000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e46697665436f6c6f7273436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034643430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000019d971e4fe8401e7400000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e46697665436f6c6f7273436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034643430000000000000000000000000000000000000000000000000000000000",
  "libraries": [
    {
      "name": "SafeMathLib",
      "address": "0x506ba7c0a739b4ddc910075b73b72132f0aae5e6"
    }
  ]
}