{
  "address": "0xc8330fb0b7d80a7be4edb624139e15ec1f3ffea3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DAppNodePackageDirectory",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-26\n*/\n\n//File: contracts/Owned.sol\npragma solidity ^0.4.19;\n\n\n/// @title Owned\n/// @author Adrià Massanet <[email protected]>\n/// @notice The Owned contract has an owner address, and provides basic \n///  authorization control functions, this simplifies & the implementation of\n///  user permissions; this contract has three work flows for a change in\n///  ownership, the first requires the new owner to validate that they have the\n///  ability to accept ownership, the second allows the ownership to be\n///  directly transfered without requiring acceptance, and the third allows for\n///  the ownership to be removed to allow for decentralization \ncontract Owned {\n\n    address public owner;\n    address public newOwnerCandidate;\n\n    event OwnershipRequested(address indexed by, address indexed to);\n    event OwnershipTransferred(address indexed from, address indexed to);\n    event OwnershipRemoved();\n\n    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    /// @dev `owner` is the only address that can call a function with this\n    /// modifier\n    modifier onlyOwner() {\n        require (msg.sender == owner);\n        _;\n    }\n    \n    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must\n    ///  be called first by the current `owner` then `acceptOwnership()` must be\n    ///  called by the `newOwnerCandidate`\n    /// @notice `onlyOwner` Proposes to transfer control of the contract to a\n    ///  new owner\n    /// @param _newOwnerCandidate The address being proposed as the new owner\n    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {\n        newOwnerCandidate = _newOwnerCandidate;\n        OwnershipRequested(msg.sender, newOwnerCandidate);\n    }\n\n    /// @notice Can only be called by the `newOwnerCandidate`, accepts the\n    ///  transfer of ownership\n    function acceptOwnership() public {\n        require(msg.sender == newOwnerCandidate);\n\n        address oldOwner = owner;\n        owner = newOwnerCandidate;\n        newOwnerCandidate = 0x0;\n\n        OwnershipTransferred(oldOwner, owner);\n    }\n\n    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can\n    ///  be called and it will immediately assign ownership to the `newOwner`\n    /// @notice `owner` can step down and assign some other address to this role\n    /// @param _newOwner The address of the new owner\n    function changeOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != 0x0);\n\n        address oldOwner = owner;\n        owner = _newOwner;\n        newOwnerCandidate = 0x0;\n\n        OwnershipTransferred(oldOwner, owner);\n    }\n\n    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can\n    ///  be called and it will immediately assign ownership to the 0x0 address;\n    ///  it requires a 0xdece be input as a parameter to prevent accidental use\n    /// @notice Decentralizes the contract, this operation cannot be undone \n    /// @param _dac `0xdac` has to be entered for this function to work\n    function removeOwnership(address _dac) public onlyOwner {\n        require(_dac == 0xdac);\n        owner = 0x0;\n        newOwnerCandidate = 0x0;\n        OwnershipRemoved();     \n    }\n} \n//File: contracts/ERC20.sol\npragma solidity ^0.4.19;\n\n\n/**\n * @title ERC20\n * @dev A standard interface for tokens.\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n */\ncontract ERC20 {\n  \n    /// @dev Returns the total token supply\n    function totalSupply() public constant returns (uint256 supply);\n\n    /// @dev Returns the account balance of the account with address _owner\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    /// @dev Transfers _value number of tokens to address _to\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @dev Transfers _value number of tokens from address _from to address _to\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @dev Allows _spender to withdraw from the msg.sender's account up to the _value amount\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n//File: contracts/Escapable.sol\npragma solidity ^0.4.19;\n/*\n    Copyright 2016, Jordi Baylina\n    Contributor: Adrià Massanet <[email protected]>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n\n\n\n/// @dev `Escapable` is a base level contract built off of the `Owned`\n///  contract; it creates an escape hatch function that can be called in an\n///  emergency that will allow designated addresses to send any ether or tokens\n///  held in the contract to an `escapeHatchDestination` as long as they were\n///  not blacklisted\ncontract Escapable is Owned {\n    address public escapeHatchCaller;\n    address public escapeHatchDestination;\n    mapping (address=>bool) private escapeBlacklist; // Token contract addresses\n\n    /// @notice The Constructor assigns the `escapeHatchDestination` and the\n    ///  `escapeHatchCaller`\n    /// @param _escapeHatchCaller The address of a trusted account or contract\n    ///  to call `escapeHatch()` to send the ether in this contract to the\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\n    ///  cannot move funds out of `escapeHatchDestination`\n    /// @param _escapeHatchDestination The address of a safe location (usu a\n    ///  Multisig) to send the ether held in this contract; if a neutral address\n    ///  is required, the WHG Multisig is an option:\n    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 \n    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) public {\n        escapeHatchCaller = _escapeHatchCaller;\n        escapeHatchDestination = _escapeHatchDestination;\n    }\n\n    /// @dev The addresses preassigned as `escapeHatchCaller` or `owner`\n    ///  are the only addresses that can call a function with this modifier\n    modifier onlyEscapeHatchCallerOrOwner {\n        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));\n        _;\n    }\n\n    /// @notice Creates the blacklist of tokens that are not able to be taken\n    ///  out of the contract; can only be done at the deployment, and the logic\n    ///  to add to the blacklist will be in the constructor of a child contract\n    /// @param _token the token contract address that is to be blacklisted \n    function blacklistEscapeToken(address _token) internal {\n        escapeBlacklist[_token] = true;\n        EscapeHatchBlackistedToken(_token);\n    }\n\n    /// @notice Checks to see if `_token` is in the blacklist of tokens\n    /// @param _token the token address being queried\n    /// @return False if `_token` is in the blacklist and can't be taken out of\n    ///  the contract via the `escapeHatch()`\n    function isTokenEscapable(address _token) view public returns (bool) {\n        return !escapeBlacklist[_token];\n    }\n\n    /// @notice The `escapeHatch()` should only be called as a last resort if a\n    /// security issue is uncovered or something unexpected happened\n    /// @param _token to transfer, use 0x0 for ether\n    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   \n        require(escapeBlacklist[_token]==false);\n\n        uint256 balance;\n\n        /// @dev Logic for ether\n        if (_token == 0x0) {\n            balance = this.balance;\n            escapeHatchDestination.transfer(balance);\n            EscapeHatchCalled(_token, balance);\n            return;\n        }\n        /// @dev Logic for tokens\n        ERC20 token = ERC20(_token);\n        balance = token.balanceOf(this);\n        require(token.transfer(escapeHatchDestination, balance));\n        EscapeHatchCalled(_token, balance);\n    }\n\n    /// @notice Changes the address assigned to call `escapeHatch()`\n    /// @param _newEscapeHatchCaller The address of a trusted account or\n    ///  contract to call `escapeHatch()` to send the value in this contract to\n    ///  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`\n    ///  cannot move funds out of `escapeHatchDestination`\n    function changeHatchEscapeCaller(address _newEscapeHatchCaller) public onlyEscapeHatchCallerOrOwner {\n        escapeHatchCaller = _newEscapeHatchCaller;\n    }\n\n    event EscapeHatchBlackistedToken(address token);\n    event EscapeHatchCalled(address token, uint amount);\n}\n//File: contracts/DAppNodePackageDirectory.sol\npragma solidity ^0.4.19;\n\n/*\n    Copyright 2018, Eduardo Antuña\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/// @title DAppNodePackageDirectory Contract\n/// @author Eduardo Antuña\n/// @dev The goal of this smartcontrat is to keep a list of available packages \n///  to install in the DAppNode\n\n\n\n\ncontract DAppNodePackageDirectory is Owned,Escapable {\n\n    enum DAppNodePackageStatus {Preparing, Develop, Active, Deprecated, Deleted}\n\n    struct DAppNodePackage {\n        string name;\n        DAppNodePackageStatus status;\n    }\n\n    DAppNodePackage[] DAppNodePackages;\n\n    event PackageAdded(uint indexed idPackage, string name);\n    event PackageUpdated(uint indexed idPackage, string name);\n    event StatusChanged(uint idPackage, DAppNodePackageStatus newStatus);\n\n    /// @notice The Constructor assigns the `escapeHatchDestination` and the\n    ///  `escapeHatchCaller`\n    /// @param _escapeHatchCaller The address of a trusted account or contract\n    ///  to call `escapeHatch()` to send the ether in this contract to the\n    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`\n    ///  cannot move funds out of `escapeHatchDestination`\n    /// @param _escapeHatchDestination The address of a safe location (usu a\n    ///  Multisig) to send the ether held in this contract; if a neutral address\n    ///  is required, the WHG Multisig is an option:\n    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 \n    function DAppNodePackageDirectory(\n        address _escapeHatchCaller,\n        address _escapeHatchDestination\n    ) \n        Escapable(_escapeHatchCaller, _escapeHatchDestination)\n        public\n    {\n    }\n\n    /// @notice Add a new DAppNode package\n    /// @param name the ENS name of the package\n    /// @return the idPackage of the new package\n    function addPackage (\n        string name\n    ) onlyOwner public returns(uint idPackage) {\n        idPackage = DAppNodePackages.length++;\n        DAppNodePackage storage c = DAppNodePackages[idPackage];\n        c.name = name;\n        // An event to notify that a new package has been added\n        PackageAdded(idPackage,name);\n    }\n\n    /// @notice Update a DAppNode package\n    /// @param idPackage the id of the package to be changed\n    /// @param name the new ENS name of the package\n    function updatePackage (\n        uint idPackage,\n        string name\n    ) onlyOwner public {\n        require(idPackage < DAppNodePackages.length);\n        DAppNodePackage storage c = DAppNodePackages[idPackage];\n        c.name = name;\n        // An event to notify that a package has been updated\n        PackageUpdated(idPackage,name);\n    }\n\n    /// @notice Change the status of a DAppNode package\n    /// @param idPackage the id of the package to be changed\n    /// @param newStatus the new status of the package\n    function changeStatus(\n        uint idPackage,\n        DAppNodePackageStatus newStatus\n    ) onlyOwner public {\n        require(idPackage < DAppNodePackages.length);\n        DAppNodePackage storage c = DAppNodePackages[idPackage];\n        c.status = newStatus;\n        // An event to notify that the status of a packet has been updated\n        StatusChanged(idPackage, newStatus);\n    }\n\n    /// @notice Returns the information of a DAppNode package\n    /// @param idPackage the id of the package to be changed\n    /// @return name the new name of the package\n    /// @return status the status of the package\n    function getPackage(uint idPackage) constant public returns (\n        string name,\n        DAppNodePackageStatus status\n    ) {\n        require(idPackage < DAppNodePackages.length);\n        DAppNodePackage storage c = DAppNodePackages[idPackage];\n        name = c.name;\n        status = c.status;\n    }\n\n    /// @notice its goal is to return the total number of DAppNode packages\n    /// @return the total number of DAppNode packages\n    function numberOfDAppNodePackages() view public returns (uint) {\n        return DAppNodePackages.length;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addPackage\",\"outputs\":[{\"name\":\"idPackage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dac\",\"type\":\"address\"}],\"name\":\"removeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenEscapable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"escapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idPackage\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"updatePackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfDAppNodePackages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idPackage\",\"type\":\"uint256\"}],\"name\":\"getPackage\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idPackage\",\"type\":\"uint256\"},{\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"changeStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEscapeHatchCaller\",\"type\":\"address\"}],\"name\":\"changeHatchEscapeCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escapeHatchDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_escapeHatchCaller\",\"type\":\"address\"},{\"name\":\"_escapeHatchDestination\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPackage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"PackageAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPackage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"PackageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"idPackage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"StatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EscapeHatchBlackistedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscapeHatchCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRemoved\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060405160408061195383398101806040528101908080519060200190929190805190602001909291905050508181336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505061183f806101146000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ace8c9a146100eb5780631f6eb6e7146101685780632af4c31e146101bf578063666a342714610202578063710bf3221461024557806379ba509714610288578063892db0571461029f5780638da5cb5b146102fa578063a142d60814610351578063a979169f14610394578063aa6ebdcb14610407578063b99dfe1814610432578063c5a8a2ab146104ed578063d091b55014610527578063d836fbe81461057e578063f5b61230146105c1575b600080fd5b3480156100f757600080fd5b50610152600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610618565b6040518082815260200191505060405180910390f35b34801561017457600080fd5b5061017d610767565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101cb57600080fd5b50610200600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061078d565b005b34801561020e57600080fd5b50610243600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610935565b005b34801561025157600080fd5b50610286600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a68565b005b34801561029457600080fd5b5061029d610b83565b005b3480156102ab57600080fd5b506102e0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d27565b604051808215151515815260200191505060405180910390f35b34801561030657600080fd5b5061030f610d7e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561035d57600080fd5b50610392600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610da3565b005b3480156103a057600080fd5b5061040560048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611221565b005b34801561041357600080fd5b5061041c61136b565b6040518082815260200191505060405180910390f35b34801561043e57600080fd5b5061045d60048036038101908080359060200190929190505050611378565b604051808060200183600481111561047157fe5b60ff168152602001828103825284818151815260200191508051906020019080838360005b838110156104b1578082015181840152602081019050610496565b50505050905090810190601f1680156104de5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156104f957600080fd5b5061052560048036038101908080359060200190929190803560ff169060200190929190505050611468565b005b34801561053357600080fd5b5061053c61156e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561058a57600080fd5b506105bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611594565b005b3480156105cd57600080fd5b506105d661168b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561067657600080fd5b6005805480919060010161068a91906116b1565b915060058281548110151561069b57fe5b90600052602060002090600202019050828160000190805190602001906106c39291906116e3565b50817fd3c6cda16c9d227ecc25c9bd457ad0e53a946b5ae8ab77bfeef53bb96e47c172846040518080602001828103825283818151815260200191508051906020019080838360005b8381101561072757808201518184015260208101905061070c565b50505050905090810190601f1680156107545780820380516001836020036101000a031916815260200191505b509250505060405180910390a250919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107ea57600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff161415151561081057600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561099057600080fd5b610dac8173ffffffffffffffffffffffffffffffffffffffff161415156109b657600080fd5b60008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f94e8b32e01b9eedfddd778ffbd051a7718cdc14781702884561162dca6f74dbb60405160405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ac357600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f13a4b3bc0d5234dd3d87c9f1557d8faefa37986da62c36ba49309e2fb2c9aec460405160405180910390a350565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610be157600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16159050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610e4e57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610e5957600080fd5b60001515600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610eb857600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415610fca573073ffffffffffffffffffffffffffffffffffffffff16319150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610f59573d6000803e3d6000fd5b507fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a161121c565b8290508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561106857600080fd5b505af115801561107c573d6000803e3d6000fd5b505050506040513d602081101561109257600080fd5b810190808051906020019092919050505091508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561116a57600080fd5b505af115801561117e573d6000803e3d6000fd5b505050506040513d602081101561119457600080fd5b810190808051906020019092919050505015156111b057600080fd5b7fa50dde912fa22ea0d215a0236093ac45b4d55d6ef0c604c319f900029c5d10f28383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561127e57600080fd5b6005805490508310151561129157600080fd5b6005838154811015156112a057fe5b90600052602060002090600202019050818160000190805190602001906112c89291906116e3565b50827f829d673bbabc10e064cbd3d47b0991a0420285f161ac45401281749443f920e0836040518080602001828103825283818151815260200191508051906020019080838360005b8381101561132c578082015181840152602081019050611311565b50505050905090810190601f1680156113595780820380516001836020036101000a031916815260200191505b509250505060405180910390a2505050565b6000600580549050905090565b60606000806005805490508410151561139057600080fd5b60058481548110151561139f57fe5b90600052602060002090600202019050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114475780601f1061141c57610100808354040283529160200191611447565b820191906000526020600020905b81548152906001019060200180831161142a57829003601f168201915b505050505092508060010160009054906101000a900460ff16915050915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114c557600080fd5b600580549050831015156114d857600080fd5b6005838154811015156114e757fe5b90600052602060002090600202019050818160010160006101000a81548160ff0219169083600481111561151757fe5b02179055507f365a3d0a71be5f440c8224437355d5bd81a703759bf906e441902272bfbafcb383836040518083815260200182600481111561155557fe5b60ff1681526020019250505060405180910390a1505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061163c57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561164757600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8154818355818111156116de576002028160020283600052602060002091820191016116dd9190611763565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061172457805160ff1916838001178555611752565b82800160010185558215611752579182015b82811115611751578251825591602001919060010190611736565b5b50905061175f91906117a6565b5090565b6117a391905b8082111561179f576000808201600061178291906117cb565b6001820160006101000a81549060ff021916905550600201611769565b5090565b90565b6117c891905b808211156117c45760008160009055506001016117ac565b5090565b90565b50805460018160011615610100020316600290046000825580601f106117f15750611810565b601f01602090049060005260206000209081019061180f91906117a6565b5b505600a165627a7a7230582070844c97184b31ae1a69c48f180263846dda2714faf8dd367dae3ea1d8b5fde90029000000000000000000000000f35960302a07022aba880dffaec2fdd64d5bf1c100000000000000000000000000cf36853aa4024fb5bf5cc377dfd85844b411a0",
  "constructorArguments": "000000000000000000000000f35960302a07022aba880dffaec2fdd64d5bf1c100000000000000000000000000cf36853aa4024fb5bf5cc377dfd85844b411a0"
}