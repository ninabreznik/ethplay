{
  "address": "0x8c3806b0148551d5ad0c8b7dbf1bc252e46c9524",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthToSmthSwaps",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-15\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns(uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns(uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract EthToSmthSwaps {\n\n  using SafeMath for uint;\n\n  address public owner;\n  address public ratingContractAddress;\n  uint256 SafeTime = 1 hours; // atomic swap timeOut\n\n  struct Swap {\n    address targetWallet;\n    bytes32 secret;\n    bytes20 secretHash;\n    uint256 createdAt;\n    uint256 balance;\n  }\n\n  // ETH Owner => BTC Owner => Swap\n  mapping(address => mapping(address => Swap)) public swaps;\n  mapping(address => mapping(address => uint)) public participantSigns;\n\n  constructor () public {\n    owner = msg.sender;\n  }\n\n\n\n\n  event CreateSwap(address _buyer, address _seller, uint256 _value, bytes20 _secretHash, uint256 createdAt);\n\n  // ETH Owner creates Swap with secretHash\n  // ETH Owner make token deposit\n  function createSwap(bytes20 _secretHash, address _participantAddress) public payable {\n    require(msg.value > 0);\n    require(swaps[msg.sender][_participantAddress].balance == uint256(0));\n\n    swaps[msg.sender][_participantAddress] = Swap(\n      _participantAddress,\n      bytes32(0),\n      _secretHash,\n      now,\n      msg.value\n    );\n\n    CreateSwap(_participantAddress, msg.sender, msg.value, _secretHash, now);\n  }\n\n  // ETH Owner creates Swap with secretHash\n  // ETH Owner make token deposit\n  function createSwapTarget(bytes20 _secretHash, address _participantAddress, address _targetWallet) public payable {\n    require(msg.value > 0);\n    require(swaps[msg.sender][_participantAddress].balance == uint256(0));\n\n    swaps[msg.sender][_participantAddress] = Swap(\n      _targetWallet,\n      bytes32(0),\n      _secretHash,\n      now,\n      msg.value\n    );\n\n    CreateSwap(_participantAddress, msg.sender, msg.value, _secretHash, now);\n  }\n\n  function getBalance(address _ownerAddress) public view returns (uint256) {\n    return swaps[_ownerAddress][msg.sender].balance;\n  }\n\n  // Get target wallet (buyer check)\n  function getTargetWallet(address _ownerAddress) public returns (address) {\n      return swaps[_ownerAddress][msg.sender].targetWallet;\n  }\n\n  event Withdraw(address _buyer, address _seller, uint256 withdrawnAt);\n\n  // BTC Owner withdraw money and adds secret key to swap\n  // BTC Owner receive +1 reputation\n  function withdraw(bytes32 _secret, address _ownerAddress) public {\n    Swap memory swap = swaps[_ownerAddress][msg.sender];\n\n    require(swap.secretHash == ripemd160(_secret));\n    require(swap.balance > uint256(0));\n    require(swap.createdAt.add(SafeTime) > now);\n\n    swap.targetWallet.transfer(swap.balance);\n\n    swaps[_ownerAddress][msg.sender].balance = 0;\n    swaps[_ownerAddress][msg.sender].secret = _secret;\n\n    Withdraw(msg.sender, _ownerAddress, now); \n  }\n  // BTC Owner withdraw money and adds secret key to swap\n  // BTC Owner receive +1 reputation\n  function withdrawNoMoney(bytes32 _secret, address participantAddress) public {\n    Swap memory swap = swaps[msg.sender][participantAddress];\n\n    require(swap.secretHash == ripemd160(_secret));\n    require(swap.balance > uint256(0));\n    require(swap.createdAt.add(SafeTime) > now);\n\n    swap.targetWallet.transfer(swap.balance);\n\n    swaps[msg.sender][participantAddress].balance = 0;\n    swaps[msg.sender][participantAddress].secret = _secret;\n\n    Withdraw(participantAddress, msg.sender, now); \n  }\n  // BTC Owner withdraw money and adds secret key to swap\n  // BTC Owner receive +1 reputation\n  function withdrawOther(bytes32 _secret, address _ownerAddress, address participantAddress) public {\n    Swap memory swap = swaps[_ownerAddress][participantAddress];\n\n    require(swap.secretHash == ripemd160(_secret));\n    require(swap.balance > uint256(0));\n    require(swap.createdAt.add(SafeTime) > now);\n\n    swap.targetWallet.transfer(swap.balance);\n\n    swaps[_ownerAddress][participantAddress].balance = 0;\n    swaps[_ownerAddress][participantAddress].secret = _secret;\n\n    Withdraw(participantAddress, _ownerAddress, now); \n  }\n\n  // ETH Owner receive secret\n  function getSecret(address _participantAddress) public view returns (bytes32) {\n    return swaps[msg.sender][_participantAddress].secret;\n  }\n\n  event Close(address _buyer, address _seller);\n\n\n\n  event Refund(address _buyer, address _seller);\n\n  // ETH Owner refund money\n  // BTC Owner gets -1 reputation\n  function refund(address _participantAddress) public {\n    Swap memory swap = swaps[msg.sender][_participantAddress];\n\n    require(swap.balance > uint256(0));\n    require(swap.createdAt.add(SafeTime) < now);\n\n    msg.sender.transfer(swap.balance);\n\n    clean(msg.sender, _participantAddress);\n\n    Refund(_participantAddress, msg.sender);\n  }\n\n  function clean(address _ownerAddress, address _participantAddress) internal {\n    delete swaps[_ownerAddress][_participantAddress];\n    delete participantSigns[_ownerAddress][_participantAddress];\n  }\n}",
  "bytecode": "6080604052610e1060025534801561001657600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611f35806100666000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631b258d50146100ca578063284180fc1461011b5780634d025fdf1461017a5780635721b89a146101f15780638da5cb5b1461024257806393716de81461029957806399caf97514610308578063a543bae7146103ed578063d348b5a41461043c578063dcb5930a146104ad578063e03ec01d14610504578063f8b2cb4f14610587578063fa89401a146105de575b600080fd5b3480156100d657600080fd5b506101196004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610621565b005b34801561012757600080fd5b5061015c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a25565b60405180826000191660001916815260200191505060405180910390f35b34801561018657600080fd5b506101db600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aae565b6040518082815260200191505060405180910390f35b3480156101fd57600080fd5b506102406004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ad3565b005b34801561024e57600080fd5b50610257610ed7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61030660048036038101908080356bffffffffffffffffffffffff19169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610efc565b005b34801561031457600080fd5b50610369600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111eb565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018560001916600019168152602001846bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526020018381526020018281526020019550505050505060405180910390f35b61043a60048036038101908080356bffffffffffffffffffffffff19169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611267565b005b34801561044857600080fd5b506104ab6004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611555565b005b3480156104b957600080fd5b506104c261195a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561051057600080fd5b50610545600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611980565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561059357600080fd5b506105c8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a29565b6040518082815260200191505060405180910390f35b3480156105ea57600080fd5b5061061f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ab2565b005b610629611eb1565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154600019166000191681526020016002820160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526020016003820154815260200160048201548152505090506003836040518082600019166000191681526020019150506020604051808303816000865af11580156107a7573d6000803e3d6000fd5b505050604051516c01000000000000000000000000026bffffffffffffffffffffffff191681604001516bffffffffffffffffffffffff19161415156107ec57600080fd5b600081608001511115156107ff57600080fd5b426108196002548360600151611d2a90919063ffffffff16565b11151561082557600080fd5b806000015173ffffffffffffffffffffffffffffffffffffffff166108fc82608001519081150290604051600060405180830381858888f19350505050158015610873573d6000803e3d6000fd5b506000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555082600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181600019169055507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb338342604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b6004602052816000526040600020602052806000526040600020600091509150505481565b610adb611eb1565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154600019166000191681526020016002820160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526020016003820154815260200160048201548152505090506003836040518082600019166000191681526020019150506020604051808303816000865af1158015610c59573d6000803e3d6000fd5b505050604051516c01000000000000000000000000026bffffffffffffffffffffffff191681604001516bffffffffffffffffffffffff1916141515610c9e57600080fd5b60008160800151111515610cb157600080fd5b42610ccb6002548360600151611d2a90919063ffffffff16565b111515610cd757600080fd5b806000015173ffffffffffffffffffffffffffffffffffffffff166108fc82608001519081150290604051600060405180830381858888f19350505050158015610d25573d6000803e3d6000fd5b506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555082600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181600019169055507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb823342604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600034111515610f0b57600080fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154141515610f9957600080fd5b60a0604051908101604052808273ffffffffffffffffffffffffffffffffffffffff1681526020016000600102600019168152602001846bffffffffffffffffffffffff1916815260200142815260200134815250600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019060001916905560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c010000000000000000000000009004021790555060608201518160030155608082015181600401559050507f67984a2c2da3fe41a664c2f5d2d644b1c822e267ad1b6d70545f2370dd72661c8233348642604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001836bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526020018281526020019550505050505060405180910390a1505050565b6003602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a90046c0100000000000000000000000002908060030154908060040154905085565b60003411151561127657600080fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015414151561130457600080fd5b60a0604051908101604052808273ffffffffffffffffffffffffffffffffffffffff1681526020016000600102600019168152602001836bffffffffffffffffffffffff1916815260200142815260200134815250600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019060001916905560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c010000000000000000000000009004021790555060608201518160030155608082015181600401559050507f67984a2c2da3fe41a664c2f5d2d644b1c822e267ad1b6d70545f2370dd72661c8133348542604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001836bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526020018281526020019550505050505060405180910390a15050565b61155d611eb1565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154600019166000191681526020016002820160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526020016003820154815260200160048201548152505090506003846040518082600019166000191681526020019150506020604051808303816000865af11580156116db573d6000803e3d6000fd5b505050604051516c01000000000000000000000000026bffffffffffffffffffffffff191681604001516bffffffffffffffffffffffff191614151561172057600080fd5b6000816080015111151561173357600080fd5b4261174d6002548360600151611d2a90919063ffffffff16565b11151561175957600080fd5b806000015173ffffffffffffffffffffffffffffffffffffffff166108fc82608001519081150290604051600060405180830381858888f193505050501580156117a7573d6000803e3d6000fd5b506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018190555083600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181600019169055507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb828442604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a150505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b611aba611eb1565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154600019166000191681526020016002820160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200160038201548152602001600482015481525050905060008160800151111515611c1457600080fd5b42611c2e6002548360600151611d2a90919063ffffffff16565b101515611c3a57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc82608001519081150290604051600060405180830381858888f19350505050158015611c84573d6000803e3d6000fd5b50611c8f3383611d48565b7fb729d6b342228d6ea12447653c89ed703850f0523fcdeb339fd1603578b1fc108233604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b6000808284019050838110151515611d3e57fe5b8091505092915050565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000905560048201600090555050600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090555050565b60a060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000801916815260200160006bffffffffffffffffffffffff19168152602001600081526020016000815250905600a165627a7a72305820255676d5aa401bd3587baa81092efd944a0a8fc9122d1fa7e951151fc4ad21e60029"
}