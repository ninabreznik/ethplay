{
  "address": "0x72fa6623cc0800bc180639d60c33c95426d76576",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KassaNetwork",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-11\n*/\n\npragma solidity ^0.4.25;\n\n//This smart-contract was developed exclusively for kassa.network\n//if you need smart-contracts like this, more complicated or more simple, please contact [emailÂ protected]\n\ncontract Ownable\n{\n    address public laxmi;\n    address public newLaxmi;\n\n    constructor() public\n    {\n        laxmi = msg.sender;\n    }\n\n    modifier onlyLaxmi()\n    {\n        require(msg.sender == laxmi, \"Can used only by owner\");\n        _;\n    }\n\n    function changeLaxmi(address _laxmi) onlyLaxmi public\n    {\n        require(_laxmi != 0, \"Please provide new owner address\");\n        newLaxmi = _laxmi;\n    }\n\n    function confirmLaxmi() public\n    {\n        require(newLaxmi == msg.sender, \"Please call from new owner\");\n        laxmi = newLaxmi;\n        delete newLaxmi;\n    }\n}\n\nlibrary SafeMath\n{\n\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c)\n    {\n        if (_a == 0) { return 0; }\n\n        c = _a * _b;\n        assert(c / _a == _b);\n        return c;\n    }\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256)\n    {\n        return _a / _b;\n    }\n\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256)\n    {\n        assert(_b <= _a);\n        return _a - _b;\n    }\n\n\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c)\n    {\n        c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n}\n\n\ncontract KassaNetwork is Ownable\n{\n    using SafeMath for uint;\n\n    string  public constant name    = 'Kassa 200/50';\n    uint public startTimestamp = now;\n\n    uint public constant procKoef = 10000;\n    uint public constant perDay = 75;\n    uint public constant ownerFee = 700;\n    uint[3] public bonusReferrer = [500, 200, 100];\n\n    uint public constant procReturn = 9000;\n\n\n    uint public constant maxDepositDays = 200;\n\n\n    uint public constant minimalDeposit = 0.5 ether;\n    uint public constant maximalDepositStart = 30 ether;\n    uint public constant maximalDepositFinish = 100 ether;\n\n    uint public constant minimalDepositForBonusReferrer = 0.015 ether;\n\n    uint public constant dayLimitStart = 50 ether;\n\n\n    uint public constant progressProcKoef = 100;\n    uint public constant dayLimitProgressProc = 2;\n    uint public constant maxDepositProgressProc = 1;\n\n    uint public countInvestors = 0;\n    uint public totalInvest = 0;\n    uint public totalPenalty = 0;\n    uint public totalSelfInvest = 0;\n    uint public totalPaid = 0;\n    uint public unlimitedInvest = 3000 ether;\n    bool public isUnlimitedContractInvest = false;\n    bool public isUnlimitedDayInvest = false;\n\n    event LogInvestment(address _addr, uint _value, bytes _refData);\n    event LogTransfer(address _addr, uint _amount, uint _contactBalance);\n    event LogSelfInvestment(uint _value);\n\n    event LogPreparePayment(address _addr, uint _totalInteres, uint _paidInteres, uint _amount);\n    event LogSkipPreparePayment(address _addr, uint _totalInteres, uint _paidInteres);\n\n    event LogPreparePaymentReferrer(address _addr, uint _totalReferrals, uint _paidReferrals, uint _amount);\n    event LogSkipPreparePaymentReferrer(address _addr, uint _totalReferrals, uint _paidReferrals);\n    event LogNewReferralAtLevel(address _addr, uint[3] _levels);\n\n    event LogMinimalDepositPayment(address _addr, uint _money, uint _totalPenalty);\n    event LogPenaltyPayment(address _addr, uint currentSenderDeposit, uint referrerAdressLength, address _referrer, uint currentReferrerDeposit, uint _money, uint _sendBackAmount, uint _totalPenalty);\n    event LogExceededRestDepositPerDay(address _addr, address _referrer, uint _money, uint _nDay, uint _restDepositPerDay, uint _badDeposit, uint _sendBackAmount, uint _totalPenalty, uint _willDeposit);\n\n    event LogUsedRestDepositPerDay(address _addr, address _referrer, uint _money, uint _nDay, uint _restDepositPerDay, uint _realDeposit, uint _usedDepositPerDay);\n    event LogCalcBonusReferrer(address _referrer, uint _money, uint _index, uint _bonusReferrer, uint _amountReferrer, address _nextReferrer);\n\n\n    struct User\n    {\n        uint balance;\n        uint paidInteres;\n        uint timestamp;\n        uint countReferrals;\n        uint[3] countReferralsByLevel;\n        uint earnOnReferrals;\n        uint paidReferrals;\n        address referrer;\n    }\n\n    mapping (address => User) private user;\n\n    mapping (uint => uint) private usedDeposit;\n\n    function getInteres(address addr) private view returns(uint interes)\n    {\n        uint diffDays = getNDay(user[addr].timestamp);\n\n        if( diffDays > maxDepositDays ) diffDays = maxDepositDays;\n\n        interes = user[addr].balance.mul(perDay).mul(diffDays).div(procKoef);\n    }\n\n    function getUser(address addr) public view returns(uint balance, uint timestamp, uint paidInteres, uint totalInteres, uint countReferrals, uint[3] countReferralsByLevel, uint earnOnReferrals, uint paidReferrals, address referrer)\n    {\n        address a = addr;\n        return (\n        user[a].balance,\n        user[a].timestamp,\n        user[a].paidInteres,\n        getInteres(a),\n        user[a].countReferrals,\n        user[a].countReferralsByLevel,\n        user[a].earnOnReferrals,\n        user[a].paidReferrals,\n        user[a].referrer\n        );\n    }\n\n    function getCurrentDay() public view returns(uint nday)\n    {\n        nday = getNDay(startTimestamp);\n    }\n\n    function getNDay(uint date) public view returns(uint nday)\n    {\n        uint diffTime = date > 0 ? now.sub(date) : 0;\n\n        nday = diffTime.div(24 hours);\n    }\n\n    function getCurrentDayDepositLimit() public view returns(uint limit)\n    {\n        if (isUnlimitedDayInvest) {\n            limit = maximalDepositFinish;\n            return limit;\n        }\n\n        uint nDay = getCurrentDay();\n\n        uint dayDepositLimit = getDayDepositLimit(nDay);\n\n        if (dayDepositLimit <= maximalDepositFinish)\n        {\n            limit = dayDepositLimit;\n        }\n        else\n        {\n            limit = maximalDepositFinish;\n        }\n    }\n\n    function calcProgress(uint start, uint proc, uint nDay) public pure returns(uint res)\n    {\n        uint s = start;\n\n        uint base = 1 ether;\n\n        if (proc == 1)\n        {\n            s = s + base.mul(nDay.mul(nDay).mul(35).div(10000)) + base.mul(nDay.mul(4589).div(10000));\n        }\n        else\n        {\n            s = s + base.mul(nDay.mul(nDay).mul(141).div(10000)) + base.mul(nDay.mul(8960).div(10000));\n        }\n\n        return s;\n    }\n\n    function getDayDepositLimit(uint nDay) public pure returns(uint limit)\n    {\n        return calcProgress(dayLimitStart, dayLimitProgressProc, nDay );\n    }\n\n    function getMaximalDeposit(uint nDay) public pure returns(uint limit)\n    {\n        return calcProgress(maximalDepositStart, maxDepositProgressProc, nDay );\n    }\n\n    function getCurrentDayRestDepositLimit() public view returns(uint restLimit)\n    {\n        uint nDay = getCurrentDay();\n\n        restLimit = getDayRestDepositLimit(nDay);\n    }\n\n    function getDayRestDepositLimit(uint nDay) public view returns(uint restLimit)\n    {\n        restLimit = getCurrentDayDepositLimit().sub(usedDeposit[nDay]);\n    }\n\n    function getCurrentMaximalDeposit() public view returns(uint maximalDeposit)\n    {\n        uint nDay = getCurrentDay();\n\n        if (isUnlimitedContractInvest)\n        {\n            maximalDeposit = 0;\n        }\n        else\n        {\n            maximalDeposit = getMaximalDeposit(nDay);\n        }\n    }\n\n    function() external payable\n    {\n        emit LogInvestment(msg.sender, msg.value, msg.data);\n        processPayment(msg.value, msg.data);\n    }\n\n    function processPayment(uint moneyValue, bytes refData) private\n    {\n        if (msg.sender == laxmi)\n        {\n            totalSelfInvest = totalSelfInvest.add(moneyValue);\n            emit LogSelfInvestment(moneyValue);\n            return;\n        }\n\n        if (moneyValue == 0)\n        {\n            preparePayment();\n            return;\n        }\n\n        if (moneyValue < minimalDeposit)\n        {\n            totalPenalty = totalPenalty.add(moneyValue);\n            emit LogMinimalDepositPayment(msg.sender, moneyValue, totalPenalty);\n\n            return;\n        }\n\n        checkLimits(moneyValue);\n\n        address referrer = bytesToAddress(refData);\n\n        if (user[msg.sender].balance > 0 ||\n        refData.length != 20 ||\n        (!isUnlimitedContractInvest && moneyValue > getCurrentMaximalDeposit()) ||\n        referrer != laxmi &&\n        (\n        user[referrer].balance <= 0 ||\n        referrer == msg.sender)\n        )\n        {\n            uint amount = moneyValue.mul(procReturn).div(procKoef);\n\n            totalPenalty = totalPenalty.add(moneyValue.sub(amount));\n\n            emit LogPenaltyPayment(msg.sender, user[msg.sender].balance, refData.length, referrer, user[referrer].balance, moneyValue, amount, totalPenalty);\n\n            msg.sender.transfer(amount);\n\n            return;\n        }\n\n\n\n        uint nDay = getCurrentDay();\n\n        uint restDepositPerDay = getDayRestDepositLimit(nDay);\n\n        uint addDeposit = moneyValue;\n\n\n        if (!isUnlimitedDayInvest && moneyValue > restDepositPerDay)\n        {\n            uint returnDeposit = moneyValue.sub(restDepositPerDay);\n\n            uint returnAmount = returnDeposit.mul(procReturn).div(procKoef);\n\n            addDeposit = addDeposit.sub(returnDeposit);\n\n            totalPenalty = totalPenalty.add(returnDeposit.sub(returnAmount));\n\n            emit LogExceededRestDepositPerDay(msg.sender, referrer, moneyValue, nDay, restDepositPerDay, returnDeposit, returnAmount, totalPenalty, addDeposit);\n\n            msg.sender.transfer(returnAmount);\n        }\n\n        usedDeposit[nDay] = usedDeposit[nDay].add(addDeposit);\n\n        emit LogUsedRestDepositPerDay(msg.sender, referrer, moneyValue, nDay, restDepositPerDay, addDeposit, usedDeposit[nDay]);\n\n\n        registerInvestor(referrer);\n        sendOwnerFee(addDeposit);\n        calcBonusReferrers(referrer, addDeposit);\n        updateInvestBalance(addDeposit);\n\n    }\n\n\n    function registerInvestor(address referrer) private\n    {\n        user[msg.sender].timestamp = now;\n        countInvestors++;\n\n        user[msg.sender].referrer = referrer;\n        //user[referrer].countReferrals++;\n        countReferralsByLevel(referrer, 0);\n    }\n\n    function countReferralsByLevel(address referrer, uint level) private\n    {\n        if (level > 2)\n        {\n            return;\n        }\n\n        uint l = level;\n\n        user[referrer].countReferralsByLevel[l]++;\n\n        emit LogNewReferralAtLevel(referrer, user[referrer].countReferralsByLevel);\n\n        address _nextReferrer = user[referrer].referrer;\n\n        if (_nextReferrer != 0)\n        {\n            l++;\n            countReferralsByLevel(_nextReferrer, l);\n        }\n\n        return;\n    }\n\n    function sendOwnerFee(uint addDeposit) private\n    {\n        transfer(laxmi, addDeposit.mul(ownerFee).div(procKoef));\n    }\n\n    function calcBonusReferrers(address referrer, uint addDeposit) private\n    {\n        address r = referrer;\n\n        for (uint i = 0; i < bonusReferrer.length && r != 0; i++)\n        {\n            uint amountReferrer = addDeposit.mul(bonusReferrer[i]).div(procKoef);\n\n            address nextReferrer = user[r].referrer;\n\n            emit LogCalcBonusReferrer(r, addDeposit, i, bonusReferrer[i], amountReferrer, nextReferrer);\n\n            preparePaymentReferrer(r, amountReferrer);\n\n            r = nextReferrer;\n        }\n    }\n\n    function checkLimits(uint value) private\n    {\n        if (totalInvest + value > unlimitedInvest)\n        {\n            isUnlimitedContractInvest = true;\n        }\n\n        uint nDay = getCurrentDay();\n\n        uint dayDepositLimit = getDayDepositLimit(nDay);\n\n        if (dayDepositLimit > maximalDepositFinish)\n        {\n            isUnlimitedDayInvest = true;\n        }\n\n    }\n\n    function preparePaymentReferrer(address referrer, uint amountReferrer) private\n    {\n        user[referrer].earnOnReferrals = user[referrer].earnOnReferrals.add(amountReferrer);\n\n        uint totalReferrals = user[referrer].earnOnReferrals;\n        uint paidReferrals = user[referrer].paidReferrals;\n\n\n        if (totalReferrals >= paidReferrals.add(minimalDepositForBonusReferrer))\n        {\n            uint amount = totalReferrals.sub(paidReferrals);\n\n            user[referrer].paidReferrals = user[referrer].paidReferrals.add(amount);\n\n            emit LogPreparePaymentReferrer(referrer, totalReferrals, paidReferrals, amount);\n\n            transfer(referrer, amount);\n        }\n        else\n        {\n            emit LogSkipPreparePaymentReferrer(referrer, totalReferrals, paidReferrals);\n        }\n\n    }\n\n\n    function preparePayment() public\n    {\n        uint totalInteres = getInteres(msg.sender);\n        uint paidInteres = user[msg.sender].paidInteres;\n        if (totalInteres > paidInteres)\n        {\n            uint amount = totalInteres.sub(paidInteres);\n\n            emit LogPreparePayment(msg.sender, totalInteres, paidInteres, amount);\n\n            user[msg.sender].paidInteres = user[msg.sender].paidInteres.add(amount);\n            transfer(msg.sender, amount);\n        }\n        else\n        {\n            emit LogSkipPreparePayment(msg.sender, totalInteres, paidInteres);\n        }\n    }\n\n    function updateInvestBalance(uint addDeposit) private\n    {\n        user[msg.sender].balance = user[msg.sender].balance.add(addDeposit);\n        totalInvest = totalInvest.add(addDeposit);\n    }\n\n    function transfer(address receiver, uint amount) private\n    {\n        if (amount > 0)\n        {\n            if (receiver != laxmi) { totalPaid = totalPaid.add(amount); }\n\n            uint balance = address(this).balance;\n\n            emit LogTransfer(receiver, amount, balance);\n\n            require(amount < balance, \"Not enough balance. Please retry later.\");\n\n            receiver.transfer(amount);\n        }\n    }\n\n    function bytesToAddress(bytes source) private pure returns(address addr)\n    {\n        assembly { addr := mload(add(source,0x14)) }\n        return addr;\n    }\n\n    function getTotals() public view returns(uint _maxDepositDays,\n        uint _perDay,\n        uint _startTimestamp,\n\n        uint _minimalDeposit,\n        uint _maximalDeposit,\n        uint[3] _bonusReferrer,\n        uint _minimalDepositForBonusReferrer,\n        uint _ownerFee,\n\n        uint _countInvestors,\n        uint _totalInvest,\n        uint _totalPenalty,\n    //                                             uint _totalSelfInvest,\n        uint _totalPaid,\n\n        uint _currentDayDepositLimit,\n        uint _currentDayRestDepositLimit)\n    {\n        return (\n        maxDepositDays,\n        perDay,\n        startTimestamp,\n\n        minimalDeposit,\n        getCurrentMaximalDeposit(),\n        bonusReferrer,\n        minimalDepositForBonusReferrer,\n        ownerFee,\n\n        countInvestors,\n        totalInvest,\n        totalPenalty,\n        //                 totalSelfInvest,\n        totalPaid,\n\n        getCurrentDayDepositLimit(),\n        getCurrentDayRestDepositLimit()\n        );\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"nDay\",\"type\":\"uint256\"}],\"name\":\"getDayRestDepositLimit\",\"outputs\":[{\"name\":\"restLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmLaxmi\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_laxmi\",\"type\":\"address\"}],\"name\":\"changeLaxmi\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDayDepositLimit\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUnlimitedDayInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDepositDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"procReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"name\":\"nday\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDepositProgressProc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"progressProcKoef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"preparePayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"laxmi\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlimitedInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximalDepositStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"paidInteres\",\"type\":\"uint256\"},{\"name\":\"totalInteres\",\"type\":\"uint256\"},{\"name\":\"countReferrals\",\"type\":\"uint256\"},{\"name\":\"countReferralsByLevel\",\"type\":\"uint256[3]\"},{\"name\":\"earnOnReferrals\",\"type\":\"uint256\"},{\"name\":\"paidReferrals\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"procKoef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newLaxmi\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotals\",\"outputs\":[{\"name\":\"_maxDepositDays\",\"type\":\"uint256\"},{\"name\":\"_perDay\",\"type\":\"uint256\"},{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_minimalDeposit\",\"type\":\"uint256\"},{\"name\":\"_maximalDeposit\",\"type\":\"uint256\"},{\"name\":\"_bonusReferrer\",\"type\":\"uint256[3]\"},{\"name\":\"_minimalDepositForBonusReferrer\",\"type\":\"uint256\"},{\"name\":\"_ownerFee\",\"type\":\"uint256\"},{\"name\":\"_countInvestors\",\"type\":\"uint256\"},{\"name\":\"_totalInvest\",\"type\":\"uint256\"},{\"name\":\"_totalPenalty\",\"type\":\"uint256\"},{\"name\":\"_totalPaid\",\"type\":\"uint256\"},{\"name\":\"_currentDayDepositLimit\",\"type\":\"uint256\"},{\"name\":\"_currentDayRestDepositLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDayRestDepositLimit\",\"outputs\":[{\"name\":\"restLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nDay\",\"type\":\"uint256\"}],\"name\":\"getDayDepositLimit\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSelfInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"proc\",\"type\":\"uint256\"},{\"name\":\"nDay\",\"type\":\"uint256\"}],\"name\":\"calcProgress\",\"outputs\":[{\"name\":\"res\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayLimitStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUnlimitedContractInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalDepositForBonusReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayLimitProgressProc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPenalty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentMaximalDeposit\",\"outputs\":[{\"name\":\"maximalDeposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nDay\",\"type\":\"uint256\"}],\"name\":\"getMaximalDeposit\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximalDepositFinish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"getNDay\",\"outputs\":[{\"name\":\"nday\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_refData\",\"type\":\"bytes\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_contactBalance\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogSelfInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalInteres\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paidInteres\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogPreparePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalInteres\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paidInteres\",\"type\":\"uint256\"}],\"name\":\"LogSkipPreparePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalReferrals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paidReferrals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogPreparePaymentReferrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalReferrals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_paidReferrals\",\"type\":\"uint256\"}],\"name\":\"LogSkipPreparePaymentReferrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_levels\",\"type\":\"uint256[3]\"}],\"name\":\"LogNewReferralAtLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalPenalty\",\"type\":\"uint256\"}],\"name\":\"LogMinimalDepositPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentSenderDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrerAdressLength\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"currentReferrerDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sendBackAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalPenalty\",\"type\":\"uint256\"}],\"name\":\"LogPenaltyPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_restDepositPerDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_badDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sendBackAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalPenalty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_willDeposit\",\"type\":\"uint256\"}],\"name\":\"LogExceededRestDepositPerDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_restDepositPerDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_realDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_usedDepositPerDay\",\"type\":\"uint256\"}],\"name\":\"LogUsedRestDepositPerDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bonusReferrer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amountReferrer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nextReferrer\",\"type\":\"address\"}],\"name\":\"LogCalcBonusReferrer\",\"type\":\"event\"}]",
  "bytecode": "6080604052426002556060604051908101604052806101f461ffff16815260200160c861ffff168152602001606461ffff16815250600390600362000046929190620000e9565b5060006006556000600755600060085560006009556000600a5568a2a15d09519be00000600b556000600c60006101000a81548160ff0219169083151502179055506000600c60016101000a81548160ff021916908315150217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200015c565b826003810192821562000121579160200282015b8281111562000120578251829061ffff16905591602001919060010190620000fd565b5b50905062000130919062000134565b5090565b6200015991905b80821115620001555760008160009055506001016200013b565b5090565b90565b612d4b806200016c6000396000f3006080604052600436106101ed576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062a9f0d4146102ba57806306fdde03146102fb5780630c793e841461038b5780630ed0e484146103a2578063174b9fa4146103e55780631762d21d146104105780631dec55b31461043f5780632319bb2a1461048057806330df4b3c146104ab5780633636080b146104d65780633e6968b61461050157806342a64f1c1461052c57806343ccee12146105575780634733ec9014610582578063473cba6814610599578063505b0e66146105f0578063616b40e31461061b5780636189168b146106465780636f77926b146106715780636fe4d97a14610754578063760bb6d11461077f5780637887bcfc146107aa57806384e10a90146108015780638c85ec66146108af5780638f25159c146108da5780638fa023781461091b578063959cf2ac14610946578063afe76ab114610971578063affe06c5146109c6578063bae6234e146109f1578063c791fbb714610a20578063d5b2a01a14610a4b578063d74319e014610a76578063e6af61c814610aa1578063e6fd48bc14610acc578063e7b0f66614610af7578063fa212d3714610b22578063fc9ee04514610b4d578063fd6dd75c14610b8e578063fe16ed1314610bb9575b7f99e2484dc464ddf092d71c20d980a682dbf05009ca71f79590e2d3f5675efe5f3334600036604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200180602001828103825284848281815260200192508082843782019150509550505050505060405180910390a16102b8346000368080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050610bfa565b005b3480156102c657600080fd5b506102e5600480360381019080803590602001909291905050506113e5565b6040518082815260200191505060405180910390f35b34801561030757600080fd5b5061031061141b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610350578082015181840152602081019050610335565b50505050905090810190601f16801561037d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039757600080fd5b506103a0611454565b005b3480156103ae57600080fd5b506103e3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115a2565b005b3480156103f157600080fd5b506103fa611739565b6040518082815260200191505060405180910390f35b34801561041c57600080fd5b506104256117a9565b604051808215151515815260200191505060405180910390f35b34801561044b57600080fd5b5061046a600480360381019080803590602001909291905050506117bc565b6040518082815260200191505060405180910390f35b34801561048c57600080fd5b506104956117d6565b6040518082815260200191505060405180910390f35b3480156104b757600080fd5b506104c06117db565b6040518082815260200191505060405180910390f35b3480156104e257600080fd5b506104eb6117e1565b6040518082815260200191505060405180910390f35b34801561050d57600080fd5b506105166117e7565b6040518082815260200191505060405180910390f35b34801561053857600080fd5b506105416117f9565b6040518082815260200191505060405180910390f35b34801561056357600080fd5b5061056c6117fe565b6040518082815260200191505060405180910390f35b34801561058e57600080fd5b50610597611803565b005b3480156105a557600080fd5b506105ae611a13565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105fc57600080fd5b50610605611a38565b6040518082815260200191505060405180910390f35b34801561062757600080fd5b50610630611a3e565b6040518082815260200191505060405180910390f35b34801561065257600080fd5b5061065b611a44565b6040518082815260200191505060405180910390f35b34801561067d57600080fd5b506106b2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a51565b604051808a815260200189815260200188815260200187815260200186815260200185600360200280838360005b838110156106fb5780820151818401526020810190506106e0565b505050509050018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001995050505050505050505060405180910390f35b34801561076057600080fd5b50610769611d09565b6040518082815260200191505060405180910390f35b34801561078b57600080fd5b50610794611d15565b6040518082815260200191505060405180910390f35b3480156107b657600080fd5b506107bf611d1b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561080d57600080fd5b50610816611d41565b604051808f81526020018e81526020018d81526020018c81526020018b81526020018a600360200280838360005b8381101561085f578082015181840152602081019050610844565b505050509050018981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019e50505050505050505050505050505060405180910390f35b3480156108bb57600080fd5b506108c4611e09565b6040518082815260200191505060405180910390f35b3480156108e657600080fd5b5061090560048036038101908080359060200190929190505050611e25565b6040518082815260200191505060405180910390f35b34801561092757600080fd5b50610930611e43565b6040518082815260200191505060405180910390f35b34801561095257600080fd5b5061095b611e49565b6040518082815260200191505060405180910390f35b34801561097d57600080fd5b506109b0600480360381019080803590602001909291908035906020019092919080359060200190929190505050611e4e565b6040518082815260200191505060405180910390f35b3480156109d257600080fd5b506109db611f94565b6040518082815260200191505060405180910390f35b3480156109fd57600080fd5b50610a06611fa1565b604051808215151515815260200191505060405180910390f35b348015610a2c57600080fd5b50610a35611fb4565b6040518082815260200191505060405180910390f35b348015610a5757600080fd5b50610a60611fbf565b6040518082815260200191505060405180910390f35b348015610a8257600080fd5b50610a8b611fc5565b6040518082815260200191505060405180910390f35b348015610aad57600080fd5b50610ab6611fca565b6040518082815260200191505060405180910390f35b348015610ad857600080fd5b50610ae1611fd0565b6040518082815260200191505060405180910390f35b348015610b0357600080fd5b50610b0c611fd6565b6040518082815260200191505060405180910390f35b348015610b2e57600080fd5b50610b37611fdc565b6040518082815260200191505060405180910390f35b348015610b5957600080fd5b50610b7860048036038101908080359060200190929190505050612017565b6040518082815260200191505060405180910390f35b348015610b9a57600080fd5b50610ba3612035565b6040518082815260200191505060405180910390f35b348015610bc557600080fd5b50610be460048036038101908080359060200190929190505050612042565b6040518082815260200191505060405180910390f35b60008060008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610cb157610c6f8960095461208890919063ffffffff16565b6009819055507f3585958531221565c883e7a8ba901a55ac36449b6bfe60a9dbe534db7c21f0f5896040518082815260200191505060405180910390a16113da565b6000891415610cc757610cc2611803565b6113da565b6706f05b59d3b20000891015610d6c57610cec8960085461208890919063ffffffff16565b6008819055507f3654ed221c1eb7340b328ed3408f7cc02d706326934eec02698a25eda9ffcb5c338a600854604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a16113da565b610d75896120a4565b610d7e88612118565b96506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541180610dd357506014885114155b80610dfd5750600c60009054906101000a900460ff16158015610dfc5750610df9611fdc565b89115b5b80610eda57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614158015610ed957506000600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154111580610ed857503373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16145b5b5b156110d157610f08612710610efa6123288c61212990919063ffffffff16565b61216190919063ffffffff16565b9550610f31610f20878b61217790919063ffffffff16565b60085461208890919063ffffffff16565b6008819055507f5e8cddbb251d1b21cc4db87b9d1157cc97d91a4439b41aa4d01567dc8060a6ed33600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548a518a600d60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548e8c600854604051808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390a13373ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f193505050501580156110cb573d6000803e3d6000fd5b506113da565b6110d96117e7565b94506110e4856113e5565b9350889250600c60019054906101000a900460ff1615801561110557508389115b156112a55761111d848a61217790919063ffffffff16565b915061114861271061113a6123288561212990919063ffffffff16565b61216190919063ffffffff16565b905061115d828461217790919063ffffffff16565b9250611186611175828461217790919063ffffffff16565b60085461208890919063ffffffff16565b6008819055507f17eaccf7da42210592a965bb9e884cd2664e53ad0faaff1e8d8439052f17b0a933888b888887876008548b604051808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001888152602001878152602001868152602001858152602001848152602001838152602001828152602001995050505050505050505060405180910390a13373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156112a3573d6000803e3d6000fd5b505b6112cb83600e60008881526020019081526020016000205461208890919063ffffffff16565b600e6000878152602001908152602001600020819055507f761add23ed054f41556a04f26f05e19442fefa49e127dde0e9bb6a385976d29033888b888888600e60008d815260200190815260200160002054604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405180910390a16113bd87612190565b6113c683612278565b6113d087846122ce565b6113d98361248f565b5b505050505050505050565b6000611414600e600084815260200190815260200160002054611406611739565b61217790919063ffffffff16565b9050919050565b6040805190810160405280600c81526020017f4b61737361203230302f3530000000000000000000000000000000000000000081525081565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f506c656173652063616c6c2066726f6d206e6577206f776e657200000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611666576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f43616e2075736564206f6e6c79206279206f776e65720000000000000000000081525060200191505060405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16141515156116f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f506c656173652070726f76696465206e6577206f776e6572206164647265737381525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000600c60019054906101000a900460ff16156117675768056bc75e2d6310000092508292506117a4565b61176f6117e7565b915061177a82611e25565b905068056bc75e2d6310000081111515611796578092506117a3565b68056bc75e2d6310000092505b5b505090565b600c60019054906101000a900460ff1681565b6003816003811015156117cb57fe5b016000915090505481565b60c881565b61232881565b60065481565b60006117f4600254612042565b905090565b600181565b606481565b600080600061181133612548565b9250600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015491508183111561199a57611873828461217790919063ffffffff16565b90507f57c51513ed5ecca02e35c0a9c73f9031060fffb0ee67e5ba2ae3a7876bcc466033848484604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a161194581600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461208890919063ffffffff16565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550611995338261262a565b611a0e565b7f269d6e9105178515061a0776774390056c694e459c03ba0bcf1fe366e44ca123338484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b60075481565b6801a055690d9db8000081565b6000806000806000611a61612cfc565b6000806000808a9050600d60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154611b3c84612548565b600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070154600d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080154600d60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600380602002604051908101604052809291908260038015611ce2576020028201915b815481526020019060010190808311611cce575b50505050509350995099509950995099509950995099509950509193959799909294969850565b6706f05b59d3b2000081565b61271081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806000611d51612cfc565b60008060008060008060008060c8604b6002546706f05b59d3b20000611d75611fdc565b600366354a6ba7a180006102bc600654600754600854600a54611d96611739565b611d9e611e09565b88600380602002604051908101604052809291908260038015611dd6576020028201915b815481526020019060010190808311611dc2575b505050505098509d509d509d509d509d509d509d509d509d509d509d509d509d509d50909192939495969798999a9b9c9d565b600080611e146117e7565b9050611e1f816113e5565b91505090565b6000611e3c6802b5e3af16b1880000600284611e4e565b9050919050565b60095481565b604b81565b6000806000859150670de0b6b3a764000090506001851415611efb57611ea5611e96612710611e886111ed8861212990919063ffffffff16565b61216190919063ffffffff16565b8261212990919063ffffffff16565b611ef1611ee2612710611ed46023611ec68a8b61212990919063ffffffff16565b61212990919063ffffffff16565b61216190919063ffffffff16565b8361212990919063ffffffff16565b8301019150611f88565b611f36611f27612710611f196123008861212990919063ffffffff16565b61216190919063ffffffff16565b8261212990919063ffffffff16565b611f82611f73612710611f65608d611f578a8b61212990919063ffffffff16565b61212990919063ffffffff16565b61216190919063ffffffff16565b8361212990919063ffffffff16565b83010191505b81925050509392505050565b6802b5e3af16b188000081565b600c60009054906101000a900460ff1681565b66354a6ba7a1800081565b6102bc81565b600281565b60085481565b60025481565b600a5481565b600080611fe76117e7565b9050600c60009054906101000a900460ff16156120075760009150612013565b61201081612017565b91505b5090565b600061202e6801a055690d9db80000600184611e4e565b9050919050565b68056bc75e2d6310000081565b60008060008311612054576000612068565b612067834261217790919063ffffffff16565b5b9050612080620151808261216190919063ffffffff16565b915050919050565b6000818301905082811015151561209b57fe5b80905092915050565b600080600b54836007540111156120d1576001600c60006101000a81548160ff0219169083151502179055505b6120d96117e7565b91506120e482611e25565b905068056bc75e2d63100000811115612113576001600c60016101000a81548160ff0219169083151502179055505b505050565b600060148201519050809050919050565b60008083141561213c576000905061215b565b818302905081838281151561214d57fe5b0414151561215757fe5b8090505b92915050565b6000818381151561216e57fe5b04905092915050565b600082821115151561218557fe5b818303905092915050565b42600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555060066000815480929190600101919050555080600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060090160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061227581600061281d565b50565b6122cb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166122c66127106122b86102bc8661212990919063ffffffff16565b61216190919063ffffffff16565b61262a565b50565b600080600080859350600092505b600383108015612303575060008473ffffffffffffffffffffffffffffffffffffffff1614155b156124875761233f61271061233160038660038110151561232057fe5b01548861212990919063ffffffff16565b61216190919063ffffffff16565b9150600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690507f7e12d55f7c1ae1ac0321507b7d010aab01dc2ede8a458d9c22e24116c608c19b8486856003876003811015156123d957fe5b01548686604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001965050505050505060405180910390a161247784836129fc565b80935082806001019350506122dc565b505050505050565b6124e481600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461208890919063ffffffff16565b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061253f8160075461208890919063ffffffff16565b60078190555050565b600080612596600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154612042565b905060c88111156125a65760c890505b61262261271061261483612606604b600d60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461212990919063ffffffff16565b61212990919063ffffffff16565b61216190919063ffffffff16565b915050919050565b600080821115612818576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415156126a65761269f82600a5461208890919063ffffffff16565b600a819055505b3073ffffffffffffffffffffffffffffffffffffffff163190507f18b0800c80490f5a2cdb8878912fa0744819cf79cb6bda0573399ceee459b66a838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a180821015156127d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f4e6f7420656e6f7567682062616c616e63652e20506c6561736520726574727981526020017f206c617465722e0000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015612816573d6000803e3d6000fd5b505b505050565b600080600283111561282e576129f6565b829150600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018260038110151561288057fe5b01600081548092919060010191905055507feee88e6ea0cb773b74c140b9dddedee2505e720087f299c06e219096c042438484600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826003801561294f576020028201915b81548152602001906001019080831161293b575b50509250505060405180910390a1600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060090160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff161415156129f55781806001019250506129f4818361281d565b5b5b50505050565b6000806000612a5684600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007015461208890919063ffffffff16565b600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070181905550600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701549250600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600801549150612b4066354a6ba7a180008361208890919063ffffffff16565b83101515612c8157612b5b828461217790919063ffffffff16565b9050612bb281600d60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008015461208890919063ffffffff16565b600d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600801819055507e260dbd6ad9a7bc95a107bbd98c073edf3b09c4bec03b39f37d0dc88b8d347585848484604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a1612c7c858261262a565b612cf5565b7f7d11a9324c66449899d527db8661c450d2049209ed0afc56d94d759f31da6e73858484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b5050505050565b6060604051908101604052806003906020820280388339808201915050905050905600a165627a7a723058208569d1f964aac5ba7db89f7a1f7655957feb950d974f27dbb2e08e2085bbf7b90029"
}