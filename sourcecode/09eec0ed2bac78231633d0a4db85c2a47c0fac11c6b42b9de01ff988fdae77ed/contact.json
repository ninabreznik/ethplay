{
  "address": "0xbddc4fe9b07ad7243abffaec9ef35daac4a3f95c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IonChain",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-25\n*/\n\npragma solidity 0.4.24;\n\n// File: contracts/commons/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// File: contracts/flavours/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n// File: contracts/flavours/Lockable.sol\n\n/**\n * @title Lockable\n * @dev Base contract which allows children to\n *      implement main operations locking mechanism.\n */\ncontract Lockable is Ownable {\n    event Lock();\n    event Unlock();\n\n    bool public locked = false;\n\n    /**\n     * @dev Modifier to make a function callable\n    *       only when the contract is not locked.\n     */\n    modifier whenNotLocked() {\n        require(!locked);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable\n     *      only when the contract is locked.\n     */\n    modifier whenLocked() {\n        require(locked);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to locke, triggers locked state\n     */\n    function lock() public onlyOwner whenNotLocked {\n        locked = true;\n        emit Lock();\n    }\n\n    /**\n     * @dev called by the owner\n     *      to unlock, returns to unlocked state\n     */\n    function unlock() public onlyOwner whenLocked {\n        locked = false;\n        emit Unlock();\n    }\n}\n\n// File: contracts/base/BaseFixedERC20Token.sol\n\ncontract BaseFixedERC20Token is Lockable {\n    using SafeMath for uint;\n\n    /// @dev ERC20 Total supply\n    uint public totalSupply;\n\n    mapping(address => uint) public balances;\n\n    mapping(address => mapping(address => uint)) private allowed;\n\n    /// @dev Fired if token is transferred according to ERC20 spec\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    /// @dev Fired if token withdrawal is approved according to ERC20 spec\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param owner_ The address to query the the balance of\n     * @return An uint representing the amount owned by the passed address\n     */\n    function balanceOf(address owner_) public view returns (uint balance) {\n        return balances[owner_];\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param to_ The address to transfer to.\n     * @param value_ The amount to be transferred.\n     */\n    function transfer(address to_, uint value_) public whenNotLocked returns (bool) {\n        require(to_ != address(0) && value_ <= balances[msg.sender]);\n        // SafeMath.sub will throw an exception if there is not enough balance\n        balances[msg.sender] = balances[msg.sender].sub(value_);\n        balances[to_] = balances[to_].add(value_);\n        emit Transfer(msg.sender, to_, value_);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param from_ address The address which you want to send tokens from\n     * @param to_ address The address which you want to transfer to\n     * @param value_ uint the amount of tokens to be transferred\n     */\n    function transferFrom(address from_, address to_, uint value_) public whenNotLocked returns (bool) {\n        require(to_ != address(0) && value_ <= balances[from_] && value_ <= allowed[from_][msg.sender]);\n        balances[from_] = balances[from_].sub(value_);\n        balances[to_] = balances[to_].add(value_);\n        allowed[from_][msg.sender] = allowed[from_][msg.sender].sub(value_);\n        emit Transfer(from_, to_, value_);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering\n     *\n     * To change the approve amount you first have to reduce the addresses\n     * allowance to zero by calling `approve(spender_, 0)` if it is not\n     * already 0 to mitigate the race condition described in:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * @param spender_ The address which will spend the funds.\n     * @param value_ The amount of tokens to be spent.\n     */\n    function approve(address spender_, uint value_) public whenNotLocked returns (bool) {\n        if (value_ != 0 && allowed[msg.sender][spender_] != 0) {\n            revert();\n        }\n        allowed[msg.sender][spender_] = value_;\n        emit Approval(msg.sender, spender_, value_);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\n     * @param owner_ address The address which owns the funds\n     * @param spender_ address The address which will spend the funds\n     * @return A uint specifying the amount of tokens still available for the spender\n     */\n    function allowance(address owner_, address spender_) public view returns (uint) {\n        return allowed[owner_][spender_];\n    }\n}\n\n// File: contracts/IonChain.sol\n\n/**\n * @title IONC token contract.\n */\ncontract IonChain is BaseFixedERC20Token {\n    using SafeMath for uint;\n\n    string public constant name = \"IonChain\";\n\n    string public constant symbol = \"IONC\";\n\n    uint8 public constant decimals = 6;\n\n    uint internal constant ONE_TOKEN = 1e6;\n\n    constructor(uint totalSupplyTokens_) public {\n        locked = false;\n        totalSupply = totalSupplyTokens_ * ONE_TOKEN;\n        address creator = msg.sender;\n        balances[creator] = totalSupply;\n\n        emit Transfer(0, this, totalSupply);\n        emit Transfer(this, creator, balances[creator]);\n    }\n\n    // Disable direct payments\n    function() external payable {\n        revert();\n    }\n\n}",
  "bytecode": "60806040526000805460a060020a60ff021916905534801561002057600080fd5b50604051602080610ad683398101604081815291516000805433600160a060020a0319909116811760a060020a60ff0219168255620f424083026001819055818352600260209081528684208290559085529451929490933093600080516020610ab6833981519152929181900390910190a3600160a060020a03811660008181526002602090815260409182902054825190815291513092600080516020610ab683398151915292908290030190a350506109d5806100e16000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806318160ddd146101a157806323b872dd146101c857806327e235e3146101f2578063313ce5671461021357806370a082311461023e5780638da5cb5b1461025f57806395d89b4114610290578063a69df4b5146102a5578063a9059cbb146102bc578063cf309012146102e0578063dd62ed3e146102f5578063f2fde38b1461031c578063f83d08ba1461033d575b600080fd5b3480156100eb57600080fd5b506100f4610352565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012e578181015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017557600080fd5b5061018d600160a060020a0360043516602435610389565b604080519115158252519081900360200190f35b3480156101ad57600080fd5b506101b6610454565b60408051918252519081900360200190f35b3480156101d457600080fd5b5061018d600160a060020a036004358116906024351660443561045a565b3480156101fe57600080fd5b506101b6600160a060020a03600435166105fa565b34801561021f57600080fd5b5061022861060c565b6040805160ff9092168252519081900360200190f35b34801561024a57600080fd5b506101b6600160a060020a0360043516610611565b34801561026b57600080fd5b5061027461062c565b60408051600160a060020a039092168252519081900360200190f35b34801561029c57600080fd5b506100f461063b565b3480156102b157600080fd5b506102ba610672565b005b3480156102c857600080fd5b5061018d600160a060020a03600435166024356106f9565b3480156102ec57600080fd5b5061018d610804565b34801561030157600080fd5b506101b6600160a060020a0360043581169060243516610825565b34801561032857600080fd5b506102ba600160a060020a0360043516610850565b34801561034957600080fd5b506102ba6108e4565b60408051808201909152600881527f496f6e436861696e000000000000000000000000000000000000000000000000602082015281565b6000805474010000000000000000000000000000000000000000900460ff16156103b257600080fd5b81158015906103e35750336000908152600360209081526040808320600160a060020a038716845290915290205415155b156103ed57600080fd5b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60015481565b6000805474010000000000000000000000000000000000000000900460ff161561048357600080fd5b600160a060020a038316158015906104b35750600160a060020a0384166000908152600260205260409020548211155b80156104e25750600160a060020a03841660009081526003602090815260408083203384529091529020548211155b15156104ed57600080fd5b600160a060020a038416600090815260026020526040902054610516908363ffffffff61098116565b600160a060020a03808616600090815260026020526040808220939093559085168152205461054b908363ffffffff61099316565b600160a060020a03808516600090815260026020908152604080832094909455918716815260038252828120338252909152205461058f908363ffffffff61098116565b600160a060020a03808616600081815260036020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60026020526000908152604090205481565b600681565b600160a060020a031660009081526002602052604090205490565b600054600160a060020a031681565b60408051808201909152600481527f494f4e4300000000000000000000000000000000000000000000000000000000602082015281565b600054600160a060020a0316331461068957600080fd5b60005474010000000000000000000000000000000000000000900460ff1615156106b257600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f70e3fffea7bbb557facdee48ed7f7af5179030adef9ad0c876df039a718f359e9190a1565b6000805474010000000000000000000000000000000000000000900460ff161561072257600080fd5b600160a060020a038316158015906107495750336000908152600260205260409020548211155b151561075457600080fd5b33600090815260026020526040902054610774908363ffffffff61098116565b3360009081526002602052604080822092909255600160a060020a038516815220546107a6908363ffffffff61099316565b600160a060020a0384166000818152600260209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60005474010000000000000000000000000000000000000000900460ff1681565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600054600160a060020a0316331461086757600080fd5b600160a060020a038116151561087c57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633146108fb57600080fd5b60005474010000000000000000000000000000000000000000900460ff161561092357600080fd5b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556040517f46620e39f4e119bf05f13544f8ef38338fc06c17f6b731c7f95bee356572db969190a1565b60008282111561098d57fe5b50900390565b6000828201838110156109a257fe5b93925050505600a165627a7a72305820c4ceba836c3f2f196b37871bde2890a83d00910860754f96fa4e4bd9db18072c0029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef000000000000000000000000000000000000000000000000000000003b9aca00",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00"
}