{
  "address": "0x2c680955cd340eae72703e6886957bf8465f9583",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Voting",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-28\n*/\n\npragma solidity 0.4.24;\n\n/**\n * Simple Public Voting/Poll Demo\n *\n * This is a DEMO contract. Please carefully inspect the source code and\n * understand what it is doing before using any of this in production.\n *\n *\n * Disclaimer of Warranty:\n * THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\n * EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\n * PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n * FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\n * PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL\n * NECESSARY SERVICING, REPAIR OR CORRECTION.\n *\n */\n\n\n\n// File: contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n *\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n    address private _owner;\n\n    event OwnershipRenounced(address indexed previousOwner);\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor()\n    public {\n        _owner = msg.sender;\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner()\n    public\n    view\n    returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Only the owner can do this.\");\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner()\n    public\n    view\n    returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership()\n    public\n    onlyOwner {\n        emit OwnershipRenounced(_owner);\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner)\n    public\n    onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner)\n    internal {\n        require(newOwner != address(0), \"New owner cannot be 0x0.\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/lifecycle/Destructible.sol\n\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n\n    /**\n     * @notice Destructs this contract (removes it from the blockchain) and sends all funds in it\n     *     to the owner.\n     *\n     * @dev Transfers the current balance to the owner and terminates the contract.\n     */\n    function destroy()\n    public\n    onlyOwner {\n        selfdestruct(owner());\n    }\n\n    /**\n     * @notice Destructs this contract (removes it from the blockchain) and sends all funds in it\n     *     to the specified recipient address.\n     *\n     * @dev Transfers the current balance to the specified recipient and terminates the contract.\n     */\n    function destroyAndSend(address _recipient)\n    public\n    onlyOwner {\n        selfdestruct(_recipient);\n    }\n}\n\n// File: contracts/interfaces/IERC20.sol\n\n/**\n * @title ERC20 interface\n *\n * @notice Used to call methods in ERC-20 contracts.\n *\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n\n    function transfer(address to, uint256 value)\n    external\n    returns (bool);\n\n    function balanceOf(address who)\n    external\n    view\n    returns (uint256);\n\n    function totalSupply()\n    external\n    view\n    returns (uint256);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n}\n\n// File: contracts/tokenutils/CanRescueERC20.sol\n\n/**\n * @title CanRescueERC20\n *\n * Provides a function to recover ERC-20 tokens which are accidentally sent\n * to the address of this contract (the owner can rescue ERC-20 tokens sent\n * to this contract back to himself).\n */\ncontract CanRescueERC20 is Ownable {\n\n    /**\n     * Enable the owner to rescue ERC20 tokens, which are sent accidentally\n     * to this contract.\n     *\n     * @dev This will be invoked by the owner, when owner wants to rescue tokens\n     * @notice Recover tokens accidentally sent to this contract. They will be sent to the\n     *     contract owner. Can only be called by the owner.\n     * @param token Token which will we rescue to the owner from the contract\n     */\n    function recoverTokens(IERC20 token)\n    public\n    onlyOwner {\n        uint256 balance = token.balanceOf(this);\n        // Caution: ERC-20 standard doesn't require to throw exception on failures\n        // (although most ERC-20 tokens do so), but instead returns a bool value.\n        // Therefore let's check if it really returned true, and throw otherwise.\n        require(token.transfer(owner(), balance), \"Token transfer failed, transfer() returned false.\");\n    }\n\n}\n\n// File: contracts/Voting.sol\n\ncontract Voting is Ownable, Destructible, CanRescueERC20 {\n\n    /**\n     * @dev number of possible choices. Constant set at compile time.\n     */\n    uint8 internal constant NUMBER_OF_CHOICES = 4;\n\n    /**\n     * @notice Number of total cast votes (uint40 is enough as at most\n     *     we support 4 choices and 2^32 votes per choice).\n     */\n    uint40 public voteCountTotal;\n\n    /**\n     * @notice Number of votes, summarized per choice.\n     *\n     * @dev uint32 allows 4,294,967,296 possible votes per choice, should be enough,\n     *     and still allows 8 entries to be packed in a single storage slot\n     *     (EVM wordsize is 256 bit). And of course we check for overflows.\n     */\n    uint32[NUMBER_OF_CHOICES] internal currentVoteResults;\n\n    /**\n     * @notice Mapping of address to vote details\n     */\n    mapping(address => Voter) public votersInfo;\n\n    /**\n     * @notice Event gets emitted every time when a new vote is cast.\n     *\n     * @param addedVote choice in the vote\n     * @param allVotes array containing updated intermediate result\n     */\n    event NewVote(uint8 indexed addedVote, uint32[NUMBER_OF_CHOICES] allVotes);\n\n    /**\n     * @dev Represent info about a single voter.\n     */\n    struct Voter {\n        bool exists;\n        uint8 choice;\n        string name;\n    }\n\n    /**\n     * @notice Fallback function. Will be called whenever the contract receives ether, or\n     *     when is called without data or with unknown function signature.\n     */\n    function()\n    public {\n    }\n\n    /**\n     * @notice Cast your note. In a real world scenario, you might want to have address\n     *     voting only once. In this DEMO we allow unlimited number of votes per address.\n     * @param voterName Name of the voter, will be publicly visible on the blockchain\n     * @param givenVote choice the caller has voted for\n     */\n    function castVote(string voterName, uint8 givenVote)\n    external {\n        // answer must be given\n        require(givenVote < numberOfChoices(), \"Choice must be less than contract configured numberOfChoices.\");\n\n        // DEMO MODE: FOR EASIER TESTING, WE ALLOW UNLIMITED VOTES PER ADDRESS.\n        // check if already voted\n        //require(!votersInfo[msg.sender].exists, \"This address has already voted. Vote denied.\");\n\n        //  voter name has to have at least 3 bytes (note: with utf8 some chars have\n        // more than 1 byte, so this check is not fully accurate but ok here)\n        require(bytes(voterName).length > 2, \"Name of voter is too short.\");\n\n        // everything ok, add voter\n        votersInfo[msg.sender] = Voter(true, givenVote, voterName);\n        voteCountTotal = safeAdd40(voteCountTotal, 1);\n        currentVoteResults[givenVote] = safeAdd32(currentVoteResults[givenVote], 1);\n\n        // emit a NewVote event at this point in time, so that a web3 Dapp\n        // can react it to it immediately. Emit full current vote state, as\n        // events are cheaper for light clients than querying the state.\n        emit NewVote(givenVote, currentVoteResults);\n    }\n\n    /**\n    * @notice checks if this address has already cast a vote\n    *  this is required to find out if it is safe to call the other \"thisVoters...\" views.\n    */\n    function thisVoterExists()\n    external\n    view\n    returns (bool) {\n        return votersInfo[msg.sender].exists;\n    }\n\n    /**\n     * @notice Returns the vote details of calling address or throws\n     *    if address has not voted yet.\n     */\n    function thisVotersChoice()\n    external\n    view\n    returns (uint8) {\n        // check if msg sender exists in voter mapping\n        require(votersInfo[msg.sender].exists, \"No vote so far.\");\n        return votersInfo[msg.sender].choice;\n    }\n\n    /**\n     * @notice Returns the entered voter name of the calling address or throws\n     *    if address has not voted yet.\n     */\n    function thisVotersName()\n    external\n    view\n    returns (string) {\n        // check if msg sender exists in voter mapping\n        require(votersInfo[msg.sender].exists, \"No vote so far.\");\n        return votersInfo[msg.sender].name;\n    }\n\n    /**\n     * @notice Return array with sums of votes per choice.\n     *\n     * @dev Note that this only will work for external callers, and not\n     *      for other contracts (as of solidity 0.4.24 returning of dynamically\n     *      sized data is still not in stable, it's only available with the\n     *      experimental \"ABIEncoderV2\" pragma). Also some block-explorers,\n     *      like etherscan, will have problems to display this correctly.\n     */\n    function currentResult()\n    external\n    view\n    returns (uint32[NUMBER_OF_CHOICES]) {\n        return currentVoteResults;\n    }\n\n    /**\n     * @notice Return number of votes for one of the options.\n     */\n    function votesPerChoice(uint8 option)\n    external\n    view\n    returns (uint32) {\n        require(option < numberOfChoices(), \"Choice must be less than contract configured numberOfChoices.\");\n        return currentVoteResults[option];\n    }\n\n    /**\n     * @notice Returns the number of possible choices, which can be voted for.\n     */\n    function numberOfChoices()\n    public\n    view\n    returns (uint8) {\n        // save as we only initialize array length in constructor\n        // and there we check it's never larger than uint8.\n        return uint8(currentVoteResults.length);\n    }\n\n    /**\n     * @dev Adds two uint40 numbers, throws on overflow.\n     */\n    function safeAdd40(uint40 _a, uint40 _b)\n    internal\n    pure\n    returns (uint40 c) {\n        c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n\n    /**\n     * @dev Adds two uint32 numbers, throws on overflow.\n     */\n    function safeAdd32(uint32 _a, uint32 _b)\n    internal\n    pure\n    returns (uint32 c) {\n        c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n}",
  "bytecode": "608060405260008054600160a060020a031916331790556110c4806100256000396000f3006080604052600436106100e55763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630ee4dc5a81146100f457806316114acd146101a557806333b3dc04146101c85780633b7a3b7f146101f05780634d14e3441461027a5780635961e4fb146102a5578063715018a6146102d457806379a3510d146102e957806383197ef0146103125780638da5cb5b146103275780638f32d59b14610358578063a9f165291461036d578063ab6f9e4a14610382578063c6c4676c146103b6578063f2fde38b14610403578063f5074f4114610424575b3480156100f157600080fd5b50005b34801561010057600080fd5b50610115600160a060020a0360043516610445565b60405180841515151581526020018360ff1660ff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610168578181015183820152602001610150565b50505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156101b157600080fd5b506101c6600160a060020a03600435166104f4565b005b3480156101d457600080fd5b506101c6602460048035828101929101359060ff903516610700565b3480156101fc57600080fd5b50610205610a00565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561023f578181015183820152602001610227565b50505050905090810190601f16801561026c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028657600080fd5b5061028f610b0a565b6040805160ff9092168252519081900360200190f35b3480156102b157600080fd5b506102ba610b0f565b6040805164ffffffffff9092168252519081900360200190f35b3480156102e057600080fd5b506101c6610b34565b3480156102f557600080fd5b506102fe610bd5565b604080519115158252519081900360200190f35b34801561031e57600080fd5b506101c6610beb565b34801561033357600080fd5b5061033c610c4a565b60408051600160a060020a039092168252519081900360200190f35b34801561036457600080fd5b506102fe610c59565b34801561037957600080fd5b5061028f610c6a565b34801561038e57600080fd5b5061039d60ff60043516610cef565b6040805163ffffffff9092168252519081900360200190f35b3480156103c257600080fd5b506103cb610db0565b6040518082608080838360005b838110156103f05781810151838201526020016103d8565b5050505090500191505060405180910390f35b34801561040f57600080fd5b506101c6600160a060020a0360043516610e16565b34801561043057600080fd5b506101c6600160a060020a0360043516610e6e565b60026020818152600092835260409283902080546001808301805487516101009382161584026000190190911696909604601f810186900486028701860190975286865260ff80841697929093049092169492938301828280156104ea5780601f106104bf576101008083540402835291602001916104ea565b820191906000526020600020905b8154815290600101906020018083116104cd57829003601f168201915b5050505050905083565b60006104fe610c59565b1515610542576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611079833981519152604482015290519081900360640190fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b1580156105a357600080fd5b505af11580156105b7573d6000803e3d6000fd5b505050506040513d60208110156105cd57600080fd5b50519050600160a060020a03821663a9059cbb6105e8610c4a565b836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561065457600080fd5b505af1158015610668573d6000803e3d6000fd5b505050506040513d602081101561067e57600080fd5b505115156106fc576040805160e560020a62461bcd02815260206004820152603160248201527f546f6b656e207472616e73666572206661696c65642c207472616e736665722860448201527f292072657475726e65642066616c73652e000000000000000000000000000000606482015290519081900360840190fd5b5050565b610708610b0a565b60ff168160ff1610151561078c576040805160e560020a62461bcd02815260206004820152603d60248201527f43686f696365206d757374206265206c657373207468616e20636f6e7472616360448201527f7420636f6e66696775726564206e756d6265724f6643686f696365732e000000606482015290519081900360840190fd5b600282116107e4576040805160e560020a62461bcd02815260206004820152601b60248201527f4e616d65206f6620766f74657220697320746f6f2073686f72742e0000000000604482015290519081900360640190fd5b6060604051908101604052806001151581526020018260ff16815260200184848080601f01602080910402602001604051908101604052809392919081815260200183838082843750505092909352505033600090815260026020908152604091829020845181548684015160ff166101000261ff001992151560ff19909216919091179190911617815591840151805192935061088b9260018501929190910190610fc1565b50506000546108bb915074010000000000000000000000000000000000000000900464ffffffffff166001610ec6565b6000805464ffffffffff92909216740100000000000000000000000000000000000000000278ffffffffff00000000000000000000000000000000000000001990921691909117905561093a600160ff83166004811061091757fe5b600891828204019190066004029054906101000a900463ffffffff166001610ee3565b600160ff83166004811061094a57fe5b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055508060ff167ff3c6ef0f972a2318778c473d9159a24462efb8565045b5882dbd9b8f96d8485360016040518082600480156109ee576020028201916000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116109b15790505b505091505060405180910390a2505050565b3360009081526002602052604090205460609060ff161515610a6c576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f20766f746520736f206661722e0000000000000000000000000000000000604482015290519081900360640190fd5b336000908152600260208181526040928390206001908101805485519281161561010002600019011693909304601f81018390048302820183019094528381529290830182828015610aff5780601f10610ad457610100808354040283529160200191610aff565b820191906000526020600020905b815481529060010190602001808311610ae257829003601f168201915b505050505090505b90565b600490565b60005474010000000000000000000000000000000000000000900464ffffffffff1681565b610b3c610c59565b1515610b80576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611079833981519152604482015290519081900360640190fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b3360009081526002602052604090205460ff1690565b610bf3610c59565b1515610c37576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611079833981519152604482015290519081900360640190fd5b610c3f610c4a565b600160a060020a0316ff5b600054600160a060020a031690565b600054600160a060020a0316331490565b3360009081526002602052604081205460ff161515610cd3576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f20766f746520736f206661722e0000000000000000000000000000000000604482015290519081900360640190fd5b5033600090815260026020526040902054610100900460ff1690565b6000610cf9610b0a565b60ff168260ff16101515610d7d576040805160e560020a62461bcd02815260206004820152603d60248201527f43686f696365206d757374206265206c657373207468616e20636f6e7472616360448201527f7420636f6e66696775726564206e756d6265724f6643686f696365732e000000606482015290519081900360840190fd5b600160ff831660048110610d8d57fe5b600891828204019190066004029054906101000a900463ffffffff169050919050565b610db861103f565b60408051608081019182905290600190600490826000855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610dd05790505050505050905090565b610e1e610c59565b1515610e62576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611079833981519152604482015290519081900360640190fd5b610e6b81610ef9565b50565b610e76610c59565b1515610eba576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020611079833981519152604482015290519081900360640190fd5b80600160a060020a0316ff5b81810164ffffffffff8084169082161015610edd57fe5b92915050565b81810163ffffffff8084169082161015610edd57fe5b600160a060020a0381161515610f59576040805160e560020a62461bcd02815260206004820152601860248201527f4e6577206f776e65722063616e6e6f74206265203078302e0000000000000000604482015290519081900360640190fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061100257805160ff191683800117855561102f565b8280016001018555821561102f579182015b8281111561102f578251825591602001919060010190611014565b5061103b92915061105e565b5090565b6080604051908101604052806004906020820280388339509192915050565b610b0791905b8082111561103b576000815560010161106456004f6e6c7920746865206f776e65722063616e20646f20746869732e0000000000a165627a7a72305820c6fffb76da1119106c36e499b29b2073f20c663fd3181c4bd610ac45b29f8c040029"
}