{
  "address": "0x6051988f38808c695546ccb55f1c6930848a8a23",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TriipInvestorsServices",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-26\n*/\n\npragma solidity ^0.4.25;\n\n/** KPI is 100k USD (~ETH rate fix at start of contract) target selling period is 45 days*/\n\n/** If NCryptBit reached 100k before 45 days -> payoff immediately 10% commission through `claim` function */\n\n/** \nPay 4k USD (in ETH) first installment of comission fee immediately after startTime (confirm purchased) `ONE day` (through claimFirstInstallment())\n\nRemaining installment fee will be paid dependTime on KPI below:\n    \n    - Trunk payment period when reach partial KPI\n        * 0 -> 15 date reach >=25k -> 1/3 Remaining Installment Fee (~2k USD)\n        * 15 -> 30 date reach >=25k -> 1/3 Remaining Installment Fee (~2k USD)\n        * 45  reach >=25k -> 1/3 Remaining Installment Fee (~2k USD)\n        \n    NOTE: Remaining ETH will refund to Triip through `refund` function at endTime of this campaign\n*/\n\ncontract TriipInvestorsServices {\n\n    event ConfirmPurchase(address _sender, uint _startTime, uint _amount);\n\n    event Payoff(address _seller, uint _amount, uint _kpi);\n    \n    event Refund(address _buyer, uint _amount);\n\n    event Claim(address _sender, uint _counting, uint _buyerWalletBalance);\n\n    enum PaidStage {\n        NONE,\n        FIRST_PAYMENT,\n        SECOND_PAYMENT,\n        FINAL_PAYMENT\n    }\n\n    uint public KPI_0k = 0;\n    uint public KPI_25k = 25;\n    uint public KPI_50k = 50;\n    uint public KPI_100k = 100;    \n    \n    address public seller; // NCriptBit\n    address public buyer;  // Triip Protocol wallet use for refunding\n    address public buyerWallet; // Triip Protocol's raising ETH wallet\n    \n    uint public startTime = 0;\n    uint public endTime = 0;\n    bool public isEnd = false;    \n\n    uint decimals = 18;\n    uint unit = 10 ** decimals;\n    \n    uint public paymentAmount = 69 * unit;                // 69 ETH equals to 10k USD upfront, fixed at deploy of contract manually\n    uint public targetSellingAmount = 10 * paymentAmount; // 690 ETH equals to 100k USD upfront\n    \n    uint claimCounting = 0;\n\n    PaidStage public paidStage = PaidStage.NONE;\n\n    uint public balance;\n\n    // Begin: only for testing\n\n    // function setPaymentAmount(uint _paymentAmount) public returns (bool) {\n    //     paymentAmount = _paymentAmount;\n    //     return true;\n    // }\n\n    // function setStartTime(uint _startTime) public returns (bool) {\n    //     startTime = _startTime;\n    //     return true;\n    // }\n\n    // function setEndTime(uint _endTime) public returns (bool) {\n    //     endTime = _endTime;\n    //     return true;\n    // }\n\n    // function getNow() public view returns (uint) {\n    //     return now;\n    // }\n\n    // End: only for testing\n\n    constructor(address _buyer, address _seller, address _buyerWallet) public {\n\n        seller = _seller;\n        buyer = _buyer;\n        buyerWallet = _buyerWallet;\n\n    }\n\n    modifier whenNotEnd() {\n        require(!isEnd, \"This contract should not be endTime\") ;\n        _;\n    }\n\n    function confirmPurchase() public payable { // Trigger by Triip with the ETH amount agreed for installment\n\n        require(startTime == 0);\n\n        require(msg.value == paymentAmount, \"Not equal installment fee\");\n\n        startTime = now;\n\n        endTime = startTime + ( 45 * 1 days );\n\n        balance += msg.value;\n\n        emit ConfirmPurchase(msg.sender, startTime, balance);\n    }\n\n    function contractEthBalance() public view returns (uint) {\n\n        return balance;\n    }\n\n    function buyerWalletBalance() public view returns (uint) {\n        \n        return address(buyerWallet).balance;\n    }\n\n    function claimFirstInstallment() public whenNotEnd returns (bool) {\n\n        require(paidStage == PaidStage.NONE, \"First installment has already been claimed\");\n\n        require(now >= startTime + 1 days, \"Require first installment fee to be claimed after startTime + 1 day\");\n\n        uint payoffAmount = balance * 40 / 100; // 40% of agreed commission\n\n        // update balance\n        balance = balance - payoffAmount; // ~5k gas as of writing\n\n        seller.transfer(payoffAmount); // ~21k gas as of writing\n\n        emit Payoff(seller, payoffAmount, KPI_0k );\n        emit Claim(msg.sender, claimCounting, buyerWalletBalance());\n\n        return true;\n    }\n    \n    function claim() public whenNotEnd returns (uint) {\n\n        claimCounting = claimCounting + 1;\n\n        uint payoffAmount = 0;\n\n        uint sellingAmount  = targetSellingAmount;\n        uint buyerBalance = buyerWalletBalance();\n\n        emit Claim(msg.sender, claimCounting, buyerWalletBalance());\n        \n        if ( buyerBalance >= sellingAmount ) {\n\n            payoffAmount = balance;\n\n            seller.transfer(payoffAmount);\n            paidStage = PaidStage.FINAL_PAYMENT;\n\n            balance = 0;\n            endContract();\n\n            emit Payoff(seller, payoffAmount, KPI_100k);\n\n        }\n        else {\n            payoffAmount = claimByKPI();\n\n        }\n\n        return payoffAmount;\n    }\n\n    function claimByKPI() private returns (uint) {\n\n        uint payoffAmount = 0;\n        uint sellingAmount = targetSellingAmount;\n        uint buyerBalance = buyerWalletBalance();\n\n        if ( buyerBalance >= ( sellingAmount * KPI_50k / 100) \n            && now >= (startTime + ( 30 * 1 days) )\n            ) {\n\n            uint paidPercent = 66;\n\n            if ( paidStage == PaidStage.NONE) {\n                paidPercent = 66; // 66% of 6k installment equals 4k\n            }else if( paidStage == PaidStage.FIRST_PAYMENT) {\n                // 33 % of total balance\n                // 50% of remaining balance\n                paidPercent = 50;\n            }\n\n            payoffAmount = balance * paidPercent / 100;\n\n            // update balance\n            balance = balance - payoffAmount;\n\n            seller.transfer(payoffAmount);\n\n            emit Payoff(seller, payoffAmount, KPI_50k);\n\n            paidStage = PaidStage.SECOND_PAYMENT;\n        }\n\n        if( buyerBalance >= ( sellingAmount * KPI_25k / 100) \n            && now >= (startTime + (15 * 1 days) )\n            && paidStage == PaidStage.NONE ) {\n\n            payoffAmount = balance * 33 / 100;\n\n            // update balance\n            balance = balance - payoffAmount;\n\n            seller.transfer(payoffAmount);\n\n            emit Payoff(seller, payoffAmount, KPI_25k );\n\n            paidStage = PaidStage.FIRST_PAYMENT;\n\n        }\n\n        if(now >= (startTime + (45 * 1 days) )) {\n\n            endContract();\n        }\n\n        return payoffAmount;\n    }\n\n    function endContract() private {\n        isEnd = true;\n    }\n    \n    function refund() public returns (uint) {\n\n        require(now >= endTime);\n\n        // refund remaining balance\n        uint refundAmount = address(this).balance;\n\n        buyer.transfer(refundAmount);\n\n        emit Refund(buyer, refundAmount);\n\n        return refundAmount;\n    }\n}",
  "bytecode": "60806040526000808055601960015560326002556064600355600781905560088190556009805460ff199081169091556012600a55670de0b6b3a7640000600b556803bd913e6c1df40000600c55682567ac70392b880000600d55600e91909155600f8054909116905534801561007557600080fd5b50604051606080610c9b83398101604090815281516020830151919092015160048054600160a060020a0319908116600160a060020a039485161790915560058054821694841694909417909355600680549093169116179055610bbd806100de6000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166308551a5381146101165780632af7b8c2146101475780632fc6e8b71461016e5780633197cbb6146101975780633b6f38f8146101ac57806342dc9e0a146101c15780634e71d92d146101d657806358949ea7146101eb578063590e1ae3146102005780635d58ce3614610215578063617eae751461022a5780637150d8ae1461023f57806378e979251461025457806391f11f6a146102695780639d7df5a3146102a2578063b69ef8a8146102b7578063b6b0b712146102cc578063c35905c6146102e1578063d6960697146102f6578063e49e292414610300575b600080fd5b34801561012257600080fd5b5061012b610315565b60408051600160a060020a039092168252519081900360200190f35b34801561015357600080fd5b5061015c610324565b60408051918252519081900360200190f35b34801561017a57600080fd5b5061018361032a565b604080519115158252519081900360200190f35b3480156101a357600080fd5b5061015c610333565b3480156101b857600080fd5b5061015c610339565b3480156101cd57600080fd5b5061015c610349565b3480156101e257600080fd5b5061015c61034f565b3480156101f757600080fd5b5061015c6104ff565b34801561020c57600080fd5b5061015c610505565b34801561022157600080fd5b5061015c6105a2565b34801561023657600080fd5b5061015c6105a8565b34801561024b57600080fd5b5061012b6105ae565b34801561026057600080fd5b5061015c6105bd565b34801561027557600080fd5b5061027e6105c3565b6040518082600381111561028e57fe5b60ff16815260200191505060405180910390f35b3480156102ae57600080fd5b5061015c6105cc565b3480156102c357600080fd5b5061015c6105d2565b3480156102d857600080fd5b5061012b6105d8565b3480156102ed57600080fd5b5061015c6105e7565b6102fe6105ed565b005b34801561030c57600080fd5b506101836106af565b600454600160a060020a031681565b60005481565b60095460ff1681565b60085481565b600654600160a060020a03163190565b60015481565b60095460009081908190819060ff16156103d9576040805160e560020a62461bcd02815260206004820152602360248201527f5468697320636f6e74726163742073686f756c64206e6f7420626520656e645460448201527f696d650000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600e80546001019055600d546000935091506103f3610339565b90507f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf733600e54610422610339565b60408051600160a060020a039094168452602084019290925282820152519081900360600190a18181106104ec57601054600454604051919450600160a060020a03169084156108fc029085906000818181858888f1935050505015801561048e573d6000803e3d6000fd5b50600f805460ff1916600317905560006010556104a9610956565b60045460035460408051600160a060020a039093168352602083018690528281019190915251600080516020610b728339815191529181900360600190a16104f7565b6104f4610965565b92505b509092915050565b60035481565b600080600854421015151561051957600080fd5b50600554604051303191600160a060020a03169082156108fc029083906000818181858888f19350505050158015610555573d6000803e3d6000fd5b5060055460408051600160a060020a0390921682526020820183905280517fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d9281900390910190a1919050565b60105490565b60025481565b600554600160a060020a031681565b60075481565b600f5460ff1681565b600d5481565b60105481565b600654600160a060020a031681565b600c5481565b600754156105fa57600080fd5b600c543414610653576040805160e560020a62461bcd02815260206004820152601960248201527f4e6f7420657175616c20696e7374616c6c6d656e742066656500000000000000604482015290519081900360640190fd5b426007819055623b538081016008556010805434019081905560408051338152602081019390935282810191909152517f3a8cb01c244284118c04f450164e69492c0f491463033af5e63772c9b9f8b9e89181900360600190a1565b600954600090819060ff1615610735576040805160e560020a62461bcd02815260206004820152602360248201527f5468697320636f6e74726163742073686f756c64206e6f7420626520656e645460448201527f696d650000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000600f5460ff16600381111561074857fe5b146107c3576040805160e560020a62461bcd02815260206004820152602a60248201527f466972737420696e7374616c6c6d656e742068617320616c726561647920626560448201527f656e20636c61696d656400000000000000000000000000000000000000000000606482015290519081900360840190fd5b600754620151800142101561086e576040805160e560020a62461bcd02815260206004820152604360248201527f5265717569726520666972737420696e7374616c6c6d656e742066656520746f60448201527f20626520636c61696d656420616674657220737461727454696d65202b20312060648201527f6461790000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b50601080546064602882020490819003909155600454604051600160a060020a03909116906108fc8315029083906000818181858888f193505050501580156108bb573d6000803e3d6000fd5b5060045460005460408051600160a060020a039093168352602083018490528281019190915251600080516020610b728339815191529181900360600190a17f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf733600e54610927610339565b60408051600160a060020a039094168452602084019290925282820152519081900360600190a1600191505090565b6009805460ff19166001179055565b600d5460009081908180610977610339565b6002549092506064908402048210158015610999575060075462278d00014210155b15610a78575060426000600f5460ff1660038111156109b457fe5b14156109c2575060426109df565b6001600f5460ff1660038111156109d557fe5b14156109df575060325b6010805460648382020490819003909155600454604051919550600160a060020a0316906108fc8615029086906000818181858888f19350505050158015610a2b573d6000803e3d6000fd5b5060045460025460408051600160a060020a039093168352602083018790528281019190915251600080516020610b728339815191529181900360600190a1600f805460ff191660021790555b6001546064908402048210158015610a9757506007546213c680014210155b8015610ab357506000600f5460ff166003811115610ab157fe5b145b15610b5257601080546064602182020490819003909155600454604051919550600160a060020a0316906108fc8615029086906000818181858888f19350505050158015610b05573d6000803e3d6000fd5b5060045460015460408051600160a060020a039093168352602083018790528281019190915251600080516020610b728339815191529181900360600190a1600f805460ff191660011790555b600754623b5380014210610b6857610b68610956565b5091939250505056008f00ec3b8c46aedcacf9a1a93534a6e6f2a826b930b034495fd1d785d244c77ba165627a7a723058204232e5d0feb6d200630d7dbc2cf61b3a6eaea43416a49bc697ee24cbb2d8915a0029000000000000000000000000c66ee7780d78fde56c30386f973dab8965a8165c0000000000000000000000009a68128176f968ee451ba8b25d0439d7ac9b3a47000000000000000000000000c7b28a61d57912f327e16192919339e24b82cc0f",
  "constructorArguments": "000000000000000000000000c66ee7780d78fde56c30386f973dab8965a8165c0000000000000000000000009a68128176f968ee451ba8b25d0439d7ac9b3a47000000000000000000000000c7b28a61d57912f327e16192919339e24b82cc0f"
}