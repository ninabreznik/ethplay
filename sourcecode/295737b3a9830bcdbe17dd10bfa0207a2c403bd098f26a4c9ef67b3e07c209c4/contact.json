{
  "address": "0x5973376b603268fe4251d13040226078257014f8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ContractRegistry",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-16\n*/\n\npragma solidity 0.4.24;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/ContractRegistry.sol\n\ncontract ContractRegistry is Ownable {\n\n  uint8 public constant version = 1;\n  mapping (bytes32 => address) private contractAddresses;\n\n  event UpdateContract(string name, address indexed contractAddress);\n\n  /**\n    @notice Ensures that a given address is a contract by making sure it has code.\n   */\n  function isContract(address _address)\n    private\n    view\n    returns (bool)\n  {\n    uint256 _size;\n    assembly { _size := extcodesize(_address) }\n    return _size > 0;\n  }\n\n  function updateContractAddress(string _name, address _address)\n    public\n    onlyOwner\n    returns (address)\n  {\n    require(isContract(_address));\n    require(_address != contractAddresses[keccak256(_name)]);\n\n    contractAddresses[keccak256(_name)] = _address;\n    emit UpdateContract(_name, _address);\n\n    return _address;\n  }\n\n  function getContractAddress(string _name)\n    public\n    view\n    returns (address)\n  {\n    require(contractAddresses[keccak256(_name)] != address(0));\n    return contractAddresses[keccak256(_name)];\n  }\n\n  function getContractAddress32(bytes32 _name32)\n    public\n    view\n    returns (address)\n  {\n    require(contractAddresses[_name32] != address(0));\n    return contractAddresses[_name32];\n  }\n}",
  "bytecode": "608060405260008054600160a060020a03191633179055610683806100256000396000f3006080604052600436106100825763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304433bbc811461008757806338aed2f7146100fc57806354fd4d5014610160578063715018a61461018b5780638da5cb5b146101a2578063f2fde38b146101b7578063fccb9bc9146101d8575b600080fd5b34801561009357600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100e09436949293602493928401919081908401838280828437509497506101f09650505050505050565b60408051600160a060020a039092168252519081900360200190f35b34801561010857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100e094369492936024939284019190819084018382808284375094975050509235600160a060020a0316935061030292505050565b34801561016c57600080fd5b506101756104f0565b6040805160ff9092168252519081900360200190f35b34801561019757600080fd5b506101a06104f5565b005b3480156101ae57600080fd5b506100e0610561565b3480156101c357600080fd5b506101a0600160a060020a0360043516610570565b3480156101e457600080fd5b506100e0600435610593565b600080600160a060020a031660016000846040518082805190602001908083835b602083106102305780518252601f199092019160209182019101610211565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912086528501959095529290920160002054600160a060020a03169390931415925061028491505057600080fd5b60016000836040518082805190602001908083835b602083106102b85780518252601f199092019160209182019101610299565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912086528501959095529290920160002054600160a060020a031695945050505050565b60008054600160a060020a0316331461031a57600080fd5b610323826105d2565b151561032e57600080fd5b60016000846040518082805190602001908083835b602083106103625780518252601f199092019160209182019101610343565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912086528501959095529290920160002054600160a060020a03908116908616141592506103b891505057600080fd5b8160016000856040518082805190602001908083835b602083106103ed5780518252601f1990920191602091820191016103ce565b51815160209384036101000a60001901801990921691161790526040805192909401829003909120865285810196909652509283016000908120805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0397881617905583518581528951818701528951968916967fbc3033706311de40ef10e265f8dd3d699529b780126a1c727cb205cc798cbbab968b9692955085945091840192918601918190849084905b838110156104b0578181015183820152602001610498565b50505050905090810190601f1680156104dd5780820380516001836020036101000a031916815260200191505b509250505060405180910390a250919050565b600181565b600054600160a060020a0316331461050c57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b600054600160a060020a0316331461058757600080fd5b610590816105da565b50565b600081815260016020526040812054600160a060020a031615156105b657600080fd5b50600090815260016020526040902054600160a060020a031690565b6000903b1190565b600160a060020a03811615156105ef57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820baf569678f17f8991340002cac016ab71d66fc559c1a6e70a177e793f6075c6b0029"
}