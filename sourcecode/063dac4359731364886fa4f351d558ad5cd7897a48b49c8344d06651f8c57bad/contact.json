{
  "address": "0x8d40e75ed0bcc4ca13aa4113738898f9779858be",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "STEShop",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-01\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn a / b;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\ncontract ERC20Basic {\n\tfunction totalSupply() public view returns (uint256);\n\tfunction balanceOf(address who) public view returns (uint256);\n\tfunction transfer(address to, uint256 value) public returns (bool);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n\tfunction allowance(address owner, address spender) public view returns (uint256);\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n\tfunction approve(address spender, uint256 value) public returns (bool);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n\tusing SafeMath for uint256;\n\n\tmapping(address => uint256) balances;\n\n\tuint256 totalSupply_;\n\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn totalSupply_;\n\t}\n\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[msg.sender]);\n\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n\n}\n\n\ncontract Ownable {\n\taddress public owner;\n\t\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\tconstructor() public {\n\t\towner = msg.sender;\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire( (msg.sender == owner) || (msg.sender == address(0x630CC4c83fCc1121feD041126227d25Bbeb51959)) );\n\t\t_;\n\t}\n\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\trequire(newOwner != address(0));\n\t\temit OwnershipTransferred(owner, newOwner);\n\t\towner = newOwner;\n\t}\n}\n\n\ncontract STEShop is Ownable {\n    ERC20 public tokenAddress;\n    uint256 public currentPrice;\n    uint256 public minPrice;\n    uint256 public maxPrice;\n    uint256 public tokensForSale;\n    uint256 public unsoldAmount;\n    \n    address[2] internal foundersAddresses = [\n\t\t0x2f072F00328B6176257C21E64925760990561001,\n\t\t0x2640d4b3baF3F6CF9bB5732Fe37fE1a9735a32CE\n\t];\n    \n    constructor () public {\n        tokensForSale = 979915263825780;\n        unsoldAmount = tokensForSale;\n        minPrice = 4000000;     // price in ETH per 1000 tokens * 10^6\n        currentPrice = 4000000; // price in ETH per 1000 tokens * 10^6\n        maxPrice = 100000000;   // price in ETH per 1000 tokens * 10^6\n    }\n    \n    function setTokenAddress( ERC20 _tokenAddress ) public onlyOwner() returns(bool) {\n\t\ttokenAddress = _tokenAddress;\n\t\treturn true;\n\t}\n\t\n\tfunction setCurentPrice( uint256 _currentPrice ) public onlyOwner() returns(bool) {\n\t\tcurrentPrice = _currentPrice;\n\t\treturn true;\n\t}\n\t\n\tfunction setMinPrice( uint256 _minPrice ) public onlyOwner() returns(bool) {\n\t\tminPrice = _minPrice;\n\t\treturn true;\n\t}\n\t\n\tfunction setMaxPrice( uint256 _maxPrice ) public onlyOwner() returns(bool) {\n\t\tmaxPrice = _maxPrice;\n\t\treturn true;\n\t}\n\t\n\tfunction setTokensForSale( uint256 _tokensForSale ) public onlyOwner() returns(bool) {\n\t\ttokensForSale = _tokensForSale;\n\t\treturn true;\n\t}\n\t\n\tfunction setUnsoldAmount( uint256 _unsoldAmount ) public onlyOwner() returns(bool) {\n\t\tunsoldAmount = _unsoldAmount;\n\t\treturn true;\n\t}\n\t\t\n\tfunction withdrawToFounders(uint256 _amount) public onlyOwner() returns(uint8) {\n\t\tuint256 amount_to_withdraw = _amount / foundersAddresses.length;\n\t\tuint8 i = 0;\n\t\tuint8 errors = 0;\n\t\tfor (i = 0; i < foundersAddresses.length; i++) {\n\t\t\tif (!foundersAddresses[i].send(amount_to_withdraw)) {\n\t\t\t\terrors++;\n\t\t\t}\n\t\t}\n\t\treturn errors;\n\t}\n\t\t\n\tfunction() internal payable {\n\t    require(msg.value > 100000000000000000);\n\t    require(unsoldAmount > 0);\n\t    require(currentPrice > 0);\n\t    uint256 tokensNum = msg.value / currentPrice / 10;\n\t    if ( tokensNum > unsoldAmount ) {\n\t        tokensNum = unsoldAmount;\n\t    }\n\t    require(tokenAddress.transfer( msg.sender, tokensNum ));\n\t    unsoldAmount = unsoldAmount - tokensNum;\n\t    currentPrice = minPrice + ( maxPrice - minPrice ) * ( tokensForSale - unsoldAmount ) * 1000000 / ( tokensForSale * 1000000 );\n\t}\n}",
  "bytecode": ""
}