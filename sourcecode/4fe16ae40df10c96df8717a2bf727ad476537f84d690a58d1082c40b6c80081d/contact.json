{
  "address": "0xa17e695ffb62f546eaa7f33c66f41c8b1e028595",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GirlAuction",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-06\n*/\n\npragma solidity ^0.4.21;\n\n// File: contracts\\ERC721\\ERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n *  from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\n   *  than the magic value MUST result in the transaction being reverted.\n   *  Note: the contract address is always the message sender.\n   * @param _from The sending address\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n   */\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n}\n\n// File: contracts\\utils\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts\\utils\\Serialize.sol\n\ncontract Serialize {\n    using SafeMath for uint256;\n    function addAddress(uint _offst, bytes memory _output, address _input) internal pure returns(uint _offset) {\n      assembly {\n        mstore(add(_output, _offst), _input)\n      }\n      return _offst.sub(20);\n    }\n\n    function addUint(uint _offst, bytes memory _output, uint _input) internal pure returns (uint _offset) {\n      assembly {\n        mstore(add(_output, _offst), _input)\n      }\n      return _offst.sub(32);\n    }\n\n    function addUint8(uint _offst, bytes memory _output, uint _input) internal pure returns (uint _offset) {\n      assembly {\n        mstore(add(_output, _offst), _input)\n      }\n      return _offst.sub(1);\n    }\n\n    function addUint16(uint _offst, bytes memory _output, uint _input) internal pure returns (uint _offset) {\n      assembly {\n        mstore(add(_output, _offst), _input)\n      }\n      return _offst.sub(2);\n    }\n\n    function addUint64(uint _offst, bytes memory _output, uint _input) internal pure returns (uint _offset) {\n      assembly {\n        mstore(add(_output, _offst), _input)\n      }\n      return _offst.sub(8);\n    }\n\n    function getAddress(uint _offst, bytes memory _input) internal pure returns (address _output, uint _offset) {\n      assembly {\n        _output := mload(add(_input, _offst))\n      }\n      return (_output, _offst.sub(20));\n    }\n\n    function getUint(uint _offst, bytes memory _input) internal pure returns (uint _output, uint _offset) {\n      assembly {\n          _output := mload(add(_input, _offst))\n      }\n      return (_output, _offst.sub(32));\n    }\n\n    function getUint8(uint _offst, bytes memory _input) internal pure returns (uint8 _output, uint _offset) {\n      assembly {\n        _output := mload(add(_input, _offst))\n      }\n      return (_output, _offst.sub(1));\n    }\n\n    function getUint16(uint _offst, bytes memory _input) internal pure returns (uint16 _output, uint _offset) {\n      assembly {\n        _output := mload(add(_input, _offst))\n      }\n      return (_output, _offst.sub(2));\n    }\n\n    function getUint64(uint _offst, bytes memory _input) internal pure returns (uint64 _output, uint _offset) {\n      assembly {\n        _output := mload(add(_input, _offst))\n      }\n      return (_output, _offst.sub(8));\n    }\n}\n\n// File: contracts\\utils\\AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *  as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n    return size > 0;\n  }\n\n}\n\n// File: contracts\\utils\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts\\utils\\Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: contracts\\ERC721\\ERC721Basic.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic {\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n// File: contracts\\ERC721\\ERC721BasicToken.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721BasicToken is ERC721Basic, Pausable {\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /**\n   * @dev Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /**\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n   * @param _tokenId uint256 ID of the token to validate\n   */\n  modifier canTransfer(uint256 _tokenId) {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    _;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existance of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * @dev The zero address indicates there is no approved address.\n   * @dev There can only be one approved address per token at a given time.\n   * @dev Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n      tokenApprovals[_tokenId] = _to;\n      emit Approval(owner, _to, _tokenId);\n    }\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for a the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  function transferBatch(address _from, address _to, uint[] _tokenIds) public {\n    require(_from != address(0));\n    require(_to != address(0));\n\n    for(uint i=0; i<_tokenIds.length; i++) {\n      require(isApprovedOrOwner(msg.sender, _tokenIds[i]));\n      clearApproval(_from,  _tokenIds[i]);\n      removeTokenFrom(_from, _tokenIds[i]);\n      addTokenTo(_to, _tokenIds[i]);\n\n      emit Transfer(_from, _to, _tokenIds[i]);\n    }\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\n   *  which is called upon a safe transfer, and return the magic value\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n   *  the transfer is reverted.\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\n   *  which is called upon a safe transfer, and return the magic value\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\n   *  the transfer is reverted.\n   * @dev Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    canTransfer(_tokenId)\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n    address owner = ownerOf(_tokenId);\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * @dev Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * @dev Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * @dev Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n      emit Approval(_owner, address(0), _tokenId);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal whenNotPaused {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal whenNotPaused{\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * @dev The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\n// File: contracts\\ERC721\\GirlBasicToken.sol\n\n// add atomic swap feature in the token contract.\ncontract GirlBasicToken is ERC721BasicToken, Serialize {\n\n  event CreateGirl(address owner, uint256 tokenID, uint256 genes, uint64 birthTime, uint64 cooldownEndTime, uint16 starLevel);\n  event CoolDown(uint256 tokenId, uint64 cooldownEndTime);\n  event GirlUpgrade(uint256 tokenId, uint64 starLevel);\n\n  struct Girl{\n    /**\n    少女基因,生成以后不会改变\n    **/\n    uint genes;\n\n    /*\n    出生时间 少女创建时候的时间戳\n    */\n    uint64 birthTime;\n\n    /*\n    冷却结束时间\n    */\n    uint64 cooldownEndTime;\n    /*\n    star level\n    */\n    uint16 starLevel;\n  }\n\n  Girl[] girls;\n\n\n  function totalSupply() public view returns (uint256) {\n    return girls.length;\n  }\n\n  function getGirlGene(uint _index) public view returns (uint) {\n    return girls[_index].genes;\n  }\n\n  function getGirlBirthTime(uint _index) public view returns (uint64) {\n    return girls[_index].birthTime;\n  }\n\n  function getGirlCoolDownEndTime(uint _index) public view returns (uint64) {\n    return girls[_index].cooldownEndTime;\n  }\n\n  function getGirlStarLevel(uint _index) public view returns (uint16) {\n    return girls[_index].starLevel;\n  }\n\n  function isNotCoolDown(uint _girlId) public view returns(bool) {\n    return uint64(now) > girls[_girlId].cooldownEndTime;\n  }\n\n  function _createGirl(\n      uint _genes,\n      address _owner,\n      uint16 _starLevel\n  ) internal returns (uint){\n      Girl memory _girl = Girl({\n          genes:_genes,\n          birthTime:uint64(now),\n          cooldownEndTime:0,\n          starLevel:_starLevel\n      });\n      uint256 girlId = girls.push(_girl) - 1;\n      _mint(_owner, girlId);\n      emit CreateGirl(_owner, girlId, _genes, _girl.birthTime, _girl.cooldownEndTime, _girl.starLevel);\n      return girlId;\n  }\n\n  function _setCoolDownTime(uint _tokenId, uint _coolDownTime) internal {\n    girls[_tokenId].cooldownEndTime = uint64(now.add(_coolDownTime));\n    emit CoolDown(_tokenId, girls[_tokenId].cooldownEndTime);\n  }\n\n  function _LevelUp(uint _tokenId) internal {\n    require(girls[_tokenId].starLevel < 65535);\n    girls[_tokenId].starLevel = girls[_tokenId].starLevel + 1;\n    emit GirlUpgrade(_tokenId, girls[_tokenId].starLevel);\n  }\n\n  // ---------------\n  // this is atomic swap for girl to be set cross chain.\n  // ---------------\n  uint8 constant public GIRLBUFFERSIZE = 50;  // buffer size need to serialize girl data; used for cross chain sync\n\n  struct HashLockContract {\n    address sender;\n    address receiver;\n    uint tokenId;\n    bytes32 hashlock;\n    uint timelock;\n    bytes32 secret;\n    States state;\n    bytes extraData;\n  }\n\n  enum States {\n    INVALID,\n    OPEN,\n    CLOSED,\n    REFUNDED\n  }\n\n  mapping (bytes32 => HashLockContract) private contracts;\n\n  modifier contractExists(bytes32 _contractId) {\n    require(_contractExists(_contractId));\n    _;\n  }\n\n  modifier hashlockMatches(bytes32 _contractId, bytes32 _secret) {\n    require(contracts[_contractId].hashlock == keccak256(_secret));\n    _;\n  }\n\n  modifier closable(bytes32 _contractId) {\n    require(contracts[_contractId].state == States.OPEN);\n    require(contracts[_contractId].timelock > now);\n    _;\n  }\n\n  modifier refundable(bytes32 _contractId) {\n    require(contracts[_contractId].state == States.OPEN);\n    require(contracts[_contractId].timelock <= now);\n    _;\n  }\n\n  event NewHashLockContract (\n    bytes32 indexed contractId,\n    address indexed sender,\n    address indexed receiver,\n    uint tokenId,\n    bytes32 hashlock,\n    uint timelock,\n    bytes extraData\n  );\n\n  event SwapClosed(bytes32 indexed contractId);\n  event SwapRefunded(bytes32 indexed contractId);\n\n  function open (\n    address _receiver,\n    bytes32 _hashlock,\n    uint _duration,\n    uint _tokenId\n  ) public\n    onlyOwnerOf(_tokenId)\n    returns (bytes32 contractId)\n  {\n    uint _timelock = now.add(_duration);\n\n    // compute girl data;\n    bytes memory _extraData = new bytes(GIRLBUFFERSIZE);\n    uint offset = GIRLBUFFERSIZE;\n\n    offset = addUint16(offset, _extraData, girls[_tokenId].starLevel);\n    offset = addUint64(offset, _extraData, girls[_tokenId].cooldownEndTime);\n    offset = addUint64(offset, _extraData, girls[_tokenId].birthTime);\n    offset = addUint(offset, _extraData, girls[_tokenId].genes);\n\n    contractId = keccak256 (\n      msg.sender,\n      _receiver,\n      _tokenId,\n      _hashlock,\n      _timelock,\n      _extraData\n    );\n\n    // the new contract must not exist\n    require(!_contractExists(contractId));\n\n    // temporary change the ownership to this contract address.\n    // the ownership will be change to user when close is called.\n    clearApproval(msg.sender, _tokenId);\n    removeTokenFrom(msg.sender, _tokenId);\n    addTokenTo(address(this), _tokenId);\n\n\n    contracts[contractId] = HashLockContract(\n      msg.sender,\n      _receiver,\n      _tokenId,\n      _hashlock,\n      _timelock,\n      0x0,\n      States.OPEN,\n      _extraData\n    );\n\n    emit NewHashLockContract(contractId, msg.sender, _receiver, _tokenId, _hashlock, _timelock, _extraData);\n  }\n\n  function close(bytes32 _contractId, bytes32 _secret)\n    public\n    contractExists(_contractId)\n    hashlockMatches(_contractId, _secret)\n    closable(_contractId)\n    returns (bool)\n  {\n    HashLockContract storage c = contracts[_contractId];\n    c.secret = _secret;\n    c.state = States.CLOSED;\n\n    // transfer token ownership from this contract address to receiver.\n    // clearApproval(address(this), c.tokenId);\n    removeTokenFrom(address(this), c.tokenId);\n    addTokenTo(c.receiver, c.tokenId);\n\n    emit SwapClosed(_contractId);\n    return true;\n  }\n\n  function refund(bytes32 _contractId)\n    public\n    contractExists(_contractId)\n    refundable(_contractId)\n    returns (bool)\n  {\n    HashLockContract storage c = contracts[_contractId];\n    c.state = States.REFUNDED;\n\n    // transfer token ownership from this contract address to receiver.\n    // clearApproval(address(this), c.tokenId);\n    removeTokenFrom(address(this), c.tokenId);\n    addTokenTo(c.sender, c.tokenId);\n\n\n    emit SwapRefunded(_contractId);\n    return true;\n  }\n\n  function _contractExists(bytes32 _contractId) internal view returns (bool exists) {\n    exists = (contracts[_contractId].sender != address(0));\n  }\n\n  function checkContract(bytes32 _contractId)\n    public\n    view\n    contractExists(_contractId)\n    returns (\n      address sender,\n      address receiver,\n      uint amount,\n      bytes32 hashlock,\n      uint timelock,\n      bytes32 secret,\n      bytes extraData\n    )\n  {\n    HashLockContract memory c = contracts[_contractId];\n    return (\n      c.sender,\n      c.receiver,\n      c.tokenId,\n      c.hashlock,\n      c.timelock,\n      c.secret,\n      c.extraData\n    );\n  }\n\n\n}\n\n// File: contracts\\utils\\AccessControl.sol\n\ncontract AccessControl is Ownable{\n    address CFO;\n    //Owner address can set to COO address. it have same effect.\n\n    modifier onlyCFO{\n        require(msg.sender == CFO);\n        _;\n    }\n\n    function setCFO(address _newCFO)public onlyOwner {\n        CFO = _newCFO;\n    }\n\n    //use pausable in the contract that need to pause. save gas and clear confusion.\n\n}\n\n// File: contracts\\Auction\\ClockAuctionBase.sol\n\n/// @title Auction Core\n/// @dev Contains models, variables, and internal methods for the auction.\ncontract ClockAuctionBase {\n\n    // Represents an auction on an NFT\n    struct Auction {\n        // Current owner of NFT\n        address seller;\n        // Price (in wei) at beginning of auction\n        uint128 startingPrice;\n        // Price (in wei) at end of auction\n        uint128 endingPrice;\n        // Duration (in seconds) of auction\n        uint64 duration;\n        // Time when auction started\n        // NOTE: 0 if this auction has been concluded\n        uint64 startedAt;\n    }\n\n    // Reference to contract tracking NFT ownership\n    GirlBasicToken public girlBasicToken;\n\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\n    // Values 0-10,000 map to 0%-100%\n    uint256 public ownerCut;\n\n    // Map from token ID to their corresponding auction.\n    mapping (uint256 => Auction) tokenIdToAuction;\n\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\n    event AuctionCancelled(uint256 tokenId);\n\n    /// @dev DON'T give me your money.\n    function() external {}\n\n\n    /// @dev Returns true if the claimant owns the token.\n    /// @param _claimant - Address claiming to own the token.\n    /// @param _tokenId - ID of token whose ownership to verify.\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return (girlBasicToken.ownerOf(_tokenId) == _claimant);\n    }\n\n    /// @dev Escrows the NFT, assigning ownership to this contract.\n    /// Throws if the escrow fails.\n    /// @param _owner - Current owner address of token to escrow.\n    /// @param _tokenId - ID of token whose approval to verify.\n    // function _escrow(address _owner, uint256 _tokenId) internal {\n    //     // it will throw if transfer fails\n    //     nonFungibleContract.transfer(_owner, _tokenId);\n    // }\n\n    /// @dev Transfers an NFT owned by this contract to another address.\n    /// Returns true if the transfer succeeds.\n    /// @param _receiver - Address to transfer NFT to.\n    /// @param _tokenId - ID of token to transfer.\n    function _transfer(address _receiver, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        girlBasicToken.safeTransferFrom(address(this), _receiver, _tokenId);\n    }\n\n    /// @dev Adds an auction to the list of open auctions. Also fires the\n    ///  AuctionCreated event.\n    /// @param _tokenId The ID of the token to be put on auction.\n    /// @param _auction Auction to add.\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        tokenIdToAuction[_tokenId] = _auction;\n\n        emit AuctionCreated(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration)\n        );\n    }\n\n    /// @dev Cancels an auction unconditionally.\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\n        _removeAuction(_tokenId);\n        _transfer(_seller, _tokenId);\n        emit AuctionCancelled(_tokenId);\n    }\n\n    /// @dev Computes the price and transfers winnings.\n    /// Does NOT transfer ownership of token.\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\n        internal\n        returns (uint256)\n    {\n        // Get a reference to the auction struct\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n        // Explicitly check that this auction is currently live.\n        // (Because of how Ethereum mappings work, we can't just count\n        // on the lookup above failing. An invalid _tokenId will just\n        // return an auction object that is all zeros.)\n        require(_isOnAuction(auction));\n\n        // Check that the incoming bid is higher than the current\n        // price\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Grab a reference to the seller before the auction struct\n        // gets deleted.\n        address seller = auction.seller;\n\n        // The bid is good! Remove the auction before sending the fees\n        // to the sender so we can't have a reentrancy attack.\n        _removeAuction(_tokenId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            //  Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            //  value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // NOTE: Doing a transfer() in the middle of a complex\n            // method like this is generally discouraged because of\n            // reentrancy attacks and DoS attacks if the seller is\n            // a contract with an invalid fallback function. We explicitly\n            // guard against reentrancy attacks by removing the auction\n            // before calling transfer(), and the only thing the seller\n            // can DoS is the sale of their own asset! (And if it's an\n            // accident, they can call cancelAuction(). )\n            seller.transfer(sellerProceeds);\n        }\n\n        // Tell the world!\n        emit AuctionSuccessful(_tokenId, price, msg.sender);\n\n        return price;\n    }\n\n    /// @dev Removes an auction from the list of open auctions.\n    /// @param _tokenId - ID of NFT on auction.\n    function _removeAuction(uint256 _tokenId) internal {\n        delete tokenIdToAuction[_tokenId];\n    }\n\n    /// @dev Returns true if the NFT is on auction.\n    /// @param _auction - Auction to check.\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n        return (_auction.startedAt > 0);\n    }\n\n    /// @dev Returns current price of an NFT on auction. Broken into two\n    ///  functions (this one, that computes the duration from the auction\n    ///  structure, and the other that does the price computation) so we\n    ///  can easily test that the price computation works correctly.\n    function _currentPrice(Auction storage _auction)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 secondsPassed = 0;\n\n        // A bit of insurance against negative values (or wraparound).\n        // Probably not necessary (since Ethereum guarnatees that the\n        // now variable doesn't ever go backwards).\n        if (now > _auction.startedAt) {\n            secondsPassed = now - _auction.startedAt;\n        }\n\n        return _computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        );\n    }\n\n    /// @dev Computes the current price of an auction. Factored out\n    ///  from _currentPrice so we can run extensive unit tests.\n    ///  When testing, make this function public and turn on\n    ///  `Current price computation` test suite.\n    function _computeCurrentPrice(\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        uint256 _secondsPassed\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our public functions carefully cap the maximum values for\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\n        //  also known to be non-zero (see the require() statement in\n        //  _addAuction())\n        if (_secondsPassed >= _duration) {\n            // We've reached the end of the dynamic pricing portion\n            // of the auction, just return the end price.\n            return _endingPrice;\n        } else {\n            // Starting price can be higher than ending price (and often is!), so\n            // this delta can be negative.\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n\n            // This multiplication can't overflow, _secondsPassed will easily fit within\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n            // will always fit within 256-bits.\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n\n            // currentPriceChange can be negative, but if so, will have a magnitude\n            // less that _startingPrice. Thus, this result will always end up positive.\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n\n            return uint256(currentPrice);\n        }\n    }\n\n    /// @dev Computes owner's cut of a sale.\n    /// @param _price - Sale price of NFT.\n    function _computeCut(uint256 _price) internal view returns (uint256) {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our entry functions carefully cap the maximum values for\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\n        //  statement in the ClockAuction constructor). The result of this\n        //  function is always guaranteed to be <= _price.\n        return _price * ownerCut / 10000;\n    }\n\n}\n\n// File: contracts\\Auction\\ClockAuction.sol\n\n/// @title Clock auction for non-fungible tokens.\ncontract ClockAuction is Pausable, ClockAuctionBase, AccessControl {\n\n    /// @dev Constructor creates a reference to the NFT ownership contract\n    ///  and verifies the owner cut is in the valid range.\n    /// @param _nftAddress - address of a deployed contract implementing\n    ///  the Nonfungible Interface.\n    /// @param _cut - percent cut the owner takes on each auction, must be\n    ///  between 0-10,000.\n    constructor(address _nftAddress, uint256 _cut) public {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n\n        GirlBasicToken candidateContract = GirlBasicToken(_nftAddress);\n        //require(candidateContract.implementsERC721());\n        girlBasicToken = candidateContract;\n    }\n\n    function withDrawBalance(uint256 amount) public onlyCFO {\n      require(address(this).balance >= amount);\n      CFO.transfer(amount);\n    }\n\n\n    /// @dev Bids on an open auction, completing the auction and transferring\n    ///  ownership of the NFT if enough Ether is supplied.\n    /// @param _tokenId - ID of token to bid on.\n    function bid(uint256 _tokenId)\n        public\n        payable\n        whenNotPaused\n    {\n        // _bid will throw if the bid or funds transfer fails\n        _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n    }\n\n    /// @dev Cancels an auction that hasn't been won yet.\n    ///  Returns the NFT to original owner.\n    /// @notice This is a state-modifying function that can\n    ///  be called while the contract is paused.\n    /// @param _tokenId - ID of token on auction\n    function cancelAuction(uint256 _tokenId)\n        public\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n    }\n\n    /// @dev Cancels an auction when the contract is paused.\n    ///  Only the owner may do this, and NFTs are returned to\n    ///  the seller. This should only be used in emergencies.\n    /// @param _tokenId - ID of the NFT on auction to cancel.\n    function cancelAuctionWhenPaused(uint256 _tokenId)\n        whenPaused\n        onlyOwner\n        public\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        _cancelAuction(_tokenId, auction.seller);\n    }\n\n    /// @dev Returns auction info for an NFT on auction.\n    /// @param _tokenId - ID of NFT on auction.\n    function getAuction(uint256 _tokenId)\n        public\n        view\n        returns\n    (\n        address seller,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        uint256 startedAt\n    ) {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return (\n            auction.seller,\n            auction.startingPrice,\n            auction.endingPrice,\n            auction.duration,\n            auction.startedAt\n        );\n    }\n\n    /// @dev Returns the current price of an auction.\n    /// @param _tokenId - ID of the token price we are checking.\n    function getCurrentPrice(uint256 _tokenId)\n        public\n        view\n        returns (uint256)\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }\n\n    function setOwnerCut(uint _cut) public onlyOwner {\n      ownerCut  = _cut;\n    }\n\n}\n\n// File: contracts\\GenesFactory.sol\n\ncontract GenesFactory{\n    function mixGenes(uint256 gene1, uint gene2) public returns(uint256);\n    function getPerson(uint256 genes) public pure returns (uint256 person);\n    function getRace(uint256 genes) public pure returns (uint256);\n    function getRarity(uint256 genes) public pure returns (uint256);\n    function getBaseStrengthenPoint(uint256 genesMain,uint256 genesSub) public pure returns (uint256);\n\n    function getCanBorn(uint256 genes) public pure returns (uint256 canBorn,uint256 cooldown);\n}\n\n// File: contracts\\GirlOperation\\GirlAuction.sol\n\ncontract GirlAuction is Serialize, ERC721Receiver, ClockAuction {\n\n  event GirlAuctionCreated(address sender, uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\n\n\n  constructor(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {}\n  // example:\n  // _startingPrice = 5000000000000,\n  // _endingPrice = 100000000000,\n  // _duration = 600,\n  // _data = 0x0000000000000000000000000000000000000000000000000000000000000258000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000000000000000000000000000000000048c27395000\n\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4) {\n\n    require(msg.sender == address(girlBasicToken));\n\n    uint _startingPrice;\n    uint _endingPrice;\n    uint _duration;\n\n    uint offset = 96;\n    (_startingPrice, offset) = getUint(offset, _data);\n    (_endingPrice, offset) = getUint(offset, _data);\n    (_duration, offset) = getUint(offset, _data);\n\n    require(_startingPrice > _endingPrice);\n    require(girlBasicToken.isNotCoolDown(_tokenId));\n\n\n    emit GirlAuctionCreated(_from, _tokenId, _startingPrice, _endingPrice, _duration);\n\n\n    require(_startingPrice <= 340282366920938463463374607431768211455);\n    require(_endingPrice <= 340282366920938463463374607431768211455);\n    require(_duration <= 18446744073709551615);\n\n    Auction memory auction = Auction(\n        _from,\n        uint128(_startingPrice),\n        uint128(_endingPrice),\n        uint64(_duration),\n        uint64(now)\n    );\n    _addAuction(_tokenId, auction);\n\n    return ERC721_RECEIVED;\n  }\n\n\n\n\n}",
  "bytecode": "608060405260008060146101000a81548160ff02191690831515021790555034801561002a57600080fd5b5060405160408061194b833981018060405281019080805190602001909291908051906020019092919050505081816000336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061271082111515156100ac57600080fd5b8160028190555082905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050506118408061010b6000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633f4ba83a146100f5578063454a2ab31461010c5780634e0a33791461012c5780635c975abb1461016f5780636ba9a40b1461019e578063757de573146101cb57806378bd7935146101f857806383b5ff8b146102815780638456cb59146102ac578063878eb368146102c35780638da5cb5b146102f057806396b5a75514610347578063c55d0f5614610374578063f0b9e5ba146103b5578063f2fde38b1461049a578063f534d187146104dd575b3480156100f257600080fd5b50005b34801561010157600080fd5b5061010a610534565b005b61012a600480360381019080803590602001909291905050506105f2565b005b34801561013857600080fd5b5061016d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610626565b005b34801561017b57600080fd5b506101846106c5565b604051808215151515815260200191505060405180910390f35b3480156101aa57600080fd5b506101c9600480360381019080803590602001909291905050506106d8565b005b3480156101d757600080fd5b506101f6600480360381019080803590602001909291905050506107c6565b005b34801561020457600080fd5b506102236004803603810190808035906020019092919050505061082b565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b34801561028d57600080fd5b5061029661094e565b6040518082815260200191505060405180910390f35b3480156102b857600080fd5b506102c1610954565b005b3480156102cf57600080fd5b506102ee60048036038101908080359060200190929190505050610a14565b005b3480156102fc57600080fd5b50610305610ae6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561035357600080fd5b5061037260048036038101908080359060200190929190505050610b0b565b005b34801561038057600080fd5b5061039f60048036038101908080359060200190929190505050610ba7565b6040518082815260200191505060405180910390f35b3480156103c157600080fd5b50610446600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610be4565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3480156104a657600080fd5b506104db600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610efb565b005b3480156104e957600080fd5b506104f2611050565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561058f57600080fd5b600060149054906101000a900460ff1615156105aa57600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600060149054906101000a900460ff1615151561060e57600080fd5b6106188134611076565b5061062333826111d4565b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561068157600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060149054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561073457600080fd5b803073ffffffffffffffffffffffffffffffffffffffff16311015151561075a57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156107c2573d6000803e3d6000fd5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561082157600080fd5b8060028190555050565b600080600080600080600360008881526020019081526020016000209050610852816112e9565b151561085d57600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a90046fffffffffffffffffffffffffffffffff168260010160109054906101000a90046fffffffffffffffffffffffffffffffff168360020160009054906101000a900467ffffffffffffffff168460020160089054906101000a900467ffffffffffffffff16836fffffffffffffffffffffffffffffffff169350826fffffffffffffffffffffffffffffffff1692508167ffffffffffffffff1691508067ffffffffffffffff169050955095509550955095505091939590929450565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109af57600080fd5b600060149054906101000a900460ff161515156109cb57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b60008060149054906101000a900460ff161515610a3057600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a8b57600080fd5b600360008381526020019081526020016000209050610aa9816112e9565b1515610ab457600080fd5b610ae2828260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611317565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600360008481526020019081526020016000209150610b2c826112e9565b1515610b3757600080fd5b8160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b9857600080fd5b610ba28382611317565b505050565b600080600360008481526020019081526020016000209050610bc8816112e9565b1515610bd357600080fd5b610bdc81611365565b915050919050565b6000806000806000610bf4611796565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c5057600080fd5b60609150610c5e8288611458565b8093508196505050610c708288611458565b8093508195505050610c828288611458565b80935081945050508385111515610c9857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663291f232f896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610d2957600080fd5b505af1158015610d3d573d6000803e3d6000fd5b505050506040513d6020811015610d5357600080fd5b81019080805190602001909291905050501515610d6f57600080fd5b7f6aaa7a533aeff3e1e549b411a318c93a6e6636e2db7a5f7c7bd2315a0ffa9a018989878787604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a16fffffffffffffffffffffffffffffffff8511151515610e1157600080fd5b6fffffffffffffffffffffffffffffffff8411151515610e3057600080fd5b67ffffffffffffffff8311151515610e4757600080fd5b60a0604051908101604052808a73ffffffffffffffffffffffffffffffffffffffff168152602001866fffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff1681526020018467ffffffffffffffff1681526020014267ffffffffffffffff168152509050610ec98882611481565b63f0b9e5ba7c010000000000000000000000000000000000000000000000000000000002955050505050509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f5657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610f9257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060008060036000898152602001908152602001600020945061109d856112e9565b15156110a857600080fd5b6110b185611365565b93508387101515156110c257600080fd5b8460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692506110f288611666565b60008411156111535761110484611722565b915081840390508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611151573d6000803e3d6000fd5b505b7f4fcc30d90a842164dd58501ab874a101a3749c3d4747139cefe7c876f4ccebd2888533604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1839550505050505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3084846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156112cd57600080fd5b505af11580156112e1573d6000803e3d6000fd5b505050505050565b6000808260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16119050919050565b61132082611666565b61132a81836111d4565b7f2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df826040518082815260200191505060405180910390a15050565b600080600090508260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff164211156113be578260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16420390505b6114508360010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168460010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168560020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168461173d565b915050919050565b6000808383015191508161147660208661177d90919063ffffffff16565b915091509250929050565b603c816060015167ffffffffffffffff161015151561149f57600080fd5b806003600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060608201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050507fa9c8dfcda5664a5a124c713e386da27de87432d5b668e79458501eb296389ba78282602001516fffffffffffffffffffffffffffffffff1683604001516fffffffffffffffffffffffffffffffff16846060015167ffffffffffffffff166040518085815260200184815260200183815260200182815260200194505050505060405180910390a15050565b60036000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906fffffffffffffffffffffffffffffffff02191690556002820160006101000a81549067ffffffffffffffff02191690556002820160086101000a81549067ffffffffffffffff0219169055505050565b6000612710600254830281151561173557fe5b049050919050565b600080600080858510151561175457869350611772565b87870392508585840281151561176657fe5b05915081880190508093505b505050949350505050565b600082821115151561178b57fe5b818303905092915050565b60a060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff16815250905600a165627a7a72305820c3089dd458a8117cc914ae3db3f56db810836f2f7b8caf22ef703929a0ac453a0029000000000000000000000000b71b092367b638b93bac3e0a2d5c7f411e9c89be00000000000000000000000000000000000000000000000000000000000000c8",
  "constructorArguments": "000000000000000000000000b71b092367b638b93bac3e0a2d5c7f411e9c89be00000000000000000000000000000000000000000000000000000000000000c8"
}