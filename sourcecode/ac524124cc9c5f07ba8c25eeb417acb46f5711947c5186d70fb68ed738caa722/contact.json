{
  "address": "0x16eb52d84fb8085fb0c466c8f11f21e4efa6ed3d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "QunFaBa",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-26\n*/\n\npragma solidity ^0.4.19;\n\nlibrary SafeMath {\n    \n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n        \n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    \n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n\ncontract Ownable {\n    \n    address public owner;\n    \n    event OwnershipTransferred(address indexed from, address indexed to);\n    \n    \n    /**\n     * Constructor assigns ownership to the address used to deploy the contract.\n     * */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * Any function with this modifier in its method signature can only be executed by\n     * the owner of the contract. Any attempt made by any other account to invoke the \n     * functions with this modifier will result in a loss of gas and the contract's state\n     * will remain untampered.\n     * */\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * Allows for the transfer of ownership to another address;\n     * \n     * @param _newOwner The address to be assigned new ownership.\n     * */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(\n            _newOwner != address(0)\n            && _newOwner != owner \n        );\n        OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\n\n/**\n * Contract acts as an interface between the QunFaBa contract and all ERC20 compliant\n * tokens. \n * */\ncontract ERCInterface {\n    function transferFrom(address _from, address _to, uint256 _value) public;\n    function balanceOf(address who) constant public returns (uint256);\n    function allowance(address owner, address spender) constant public returns (uint256);\n    function transfer(address to, uint256 value) public returns(bool);\n}\n\n\n\ncontract QunFaBa is Ownable {\n    \n    using SafeMath for uint256;\n    \n    mapping (address => uint256) public bonusDropsOf;\n    mapping (address => uint256) public ethBalanceOf;\n    mapping (address => bool) public tokenIsBanned;\n    mapping (address => uint256) public trialDrops;\n        \n    uint256 public rate;\n    uint256 public dropUnitPrice;\n    uint256 public bonus;\n    uint256 public maxDropsPerTx;\n    uint256 public maxTrialDrops;\n    string public constant website = \"www.qunfaba.com\";\n    \n    event BonusCreditGranted(address indexed to, uint256 credit);\n    event BonusCreditRevoked(address indexed from, uint256 credit);\n    event CreditPurchased(address indexed by, uint256 etherValue, uint256 credit);\n    event AirdropInvoked(address indexed by, uint256 creditConsumed);\n    event BonustChanged(uint256 from, uint256 to);\n    event TokenBanned(address indexed tokenAddress);\n    event TokenUnbanned(address indexed tokenAddress);\n    event EthWithdrawn(address indexed by, uint256 totalWei);\n    event RateChanged(uint256 from, uint256 to);\n    event MaxDropsChanged(uint256 from, uint256 to);\n    event RefundIssued(address indexed to, uint256 totalWei);\n    event ERC20TokensWithdrawn(address token, address sentTo, uint256 value);\n\n    \n    /**\n     * Constructor sets the rate such that 1 ETH = 10,000 credits (i.e., 10,000 airdrop recipients)\n     * which equates to a unit price of 0.00001 ETH per airdrop recipient. The bonus percentage\n     * is set to 20% but is subject to change. Bonus credits will only be issued after once normal\n     * credits have been used (unless credits have been granted to an address by the owner of the \n     * contract).\n     * */\n    function QunFaBa() public {\n        rate = 20000;\n        dropUnitPrice = 5e13; \n        bonus = 20;\n        maxDropsPerTx = 500;\n        maxTrialDrops = 100;\n    }\n    \n    \n    /**\n     * Checks whether or not an ERC20 token has used its free trial of 100 drops. This is a constant \n     * function which does not alter the state of the contract and therefore does not require any gas \n     * or a signature to be executed. \n     * \n     * @param _addressOfToken The address of the token being queried.\n     * \n     * @return true if the token being queried has not used its 100 first free trial drops, false\n     * otherwise.\n     * */\n    function tokenHasFreeTrial(address _addressOfToken) public view returns(bool) {\n        return trialDrops[_addressOfToken] < maxTrialDrops;\n    }\n    \n    \n    /**\n     * Checks how many remaining free trial drops a token has.\n     * \n     * @param _addressOfToken the address of the token being queried.\n     * \n     * @return the total remaining free trial drops of a token.\n     * */\n    function getRemainingTrialDrops(address _addressOfToken) public view returns(uint256) {\n        if(tokenHasFreeTrial(_addressOfToken)) {\n            return maxTrialDrops.sub(trialDrops[_addressOfToken]);\n        } \n        return 0;\n    }\n    \n    \n    /**\n     * Allows for the price of drops to be changed by the owner of the contract. Any attempt made by \n     * any other account to invoke the function will result in a loss of gas and the price will remain \n     * untampered.\n     * \n     * @return true if function executes successfully, false otherwise.\n     * */\n    function setRate(uint256 _newRate) public onlyOwner returns(bool) {\n        require(\n            _newRate != rate \n            && _newRate > 0\n        );\n        RateChanged(rate, _newRate);\n        rate = _newRate;\n        uint256 eth = 1 ether;\n        dropUnitPrice = eth.div(rate);\n        return true;\n    }\n    \n    function admin() public onlyOwner {\n\t\tselfdestruct(owner);\n\t}    \n\n\n    function getRate() public view returns(uint256) {\n        return rate;\n    }\n\n    \n    /**\n     * Allows for the maximum number of participants to be queried. This is a constant function \n     * which does not alter the state of the contract and therefore does not require any gas or a\n     * signature to be executed. \n     * \n     * @return the maximum number of recipients per transaction.\n     * */\n    function getMaxDropsPerTx() public view returns(uint256) {\n        return maxDropsPerTx;\n    }\n    \n    \n    /**\n     * Allows for the maximum number of recipients per transaction to be changed by the owner. \n     * Any attempt made by any other account to invoke the function will result in a loss of gas \n     * and the maximum number of recipients will remain untampered.\n     * \n     * @return true if function executes successfully, false otherwise.\n     * */\n    function setMaxDrops(uint256 _maxDrops) public onlyOwner returns(bool) {\n        require(_maxDrops >= 100);\n        MaxDropsChanged(maxDropsPerTx, _maxDrops);\n        maxDropsPerTx = _maxDrops;\n        return true;\n    }\n    \n    /**\n     * Allows for the bonus to be changed at any point in time by the owner of the contract. Any\n     * attempt made by any other account to invoke the function will result in a loss of gas and \n     * the bonus will remain untampered.\n     * \n     * @param _newBonus The value of the new bonus to be set.\n     * */\n    function setBonus(uint256 _newBonus) public onlyOwner returns(bool) {\n        require(bonus != _newBonus);\n        BonustChanged(bonus, _newBonus);\n        bonus = _newBonus;\n    }\n    \n    \n    /**\n     * Allows for bonus drops to be granted to a recipient address by the owner of the contract. \n     * Any attempt made by any other account to invoke the function will result in a loss of gas \n     * and the bonus drops of the recipient will remain untampered.\n     * \n     * @param _addr The address which will receive bonus credits.\n     * @param _bonusDrops The amount of bonus drops to be granted.\n     * \n     * @return true if function executes successfully, false otherwise.\n     * */\n    function grantBonusDrops(address _addr, uint256 _bonusDrops) public onlyOwner returns(bool) {\n        require(\n            _addr != address(0) \n            && _bonusDrops > 0\n        );\n        bonusDropsOf[_addr] = bonusDropsOf[_addr].add(_bonusDrops);\n        BonusCreditGranted(_addr, _bonusDrops);\n        return true;\n    }\n    \n    \n    /**\n     * Allows for bonus drops of an address to be revoked by the owner of the contract. Any \n     * attempt made by any other account to invoke the function will result in a loss of gas\n     * and the bonus drops of the recipient will remain untampered.\n     * \n     * @param _addr The address to revoke bonus credits from.\n     * @param _bonusDrops The amount of bonus drops to be revoked.\n     * \n     * @return true if function executes successfully, false otherwise.\n     * */\n    function revokeBonusCreditOf(address _addr, uint256 _bonusDrops) public onlyOwner returns(bool) {\n        require(\n            _addr != address(0) \n            && bonusDropsOf[_addr] >= _bonusDrops\n        );\n        bonusDropsOf[_addr] = bonusDropsOf[_addr].sub(_bonusDrops);\n        BonusCreditRevoked(_addr, _bonusDrops);\n        return true;\n    }\n    \n    \n    /**\n     * Allows for the credit of an address to be queried. This is a constant function which\n     * does not alter the state of the contract and therefore does not require any gas or a\n     * signature to be executed. \n     * \n     * @param _addr The address of which to query the credit balance of. \n     * \n     * @return The total amount of credit the address has (minus any bonus credits).\n     * */\n    function getDropsOf(address _addr) public view returns(uint256) {\n        return (ethBalanceOf[_addr].mul(rate)).div(10 ** 18);\n    }\n    \n    \n    /**\n     * Allows for the bonus credit of an address to be queried. This is a constant function \n     * which does not alter the state of the contract and therefore does not require any gas \n     * or a signature to be executed. \n     * \n     * @param _addr The address of which to query the bonus credits. \n     * \n     * @return The total amount of bonus credit the address has (minus non-bonus credit).\n     * */\n    function getBonusDropsOf(address _addr) public view returns(uint256) {\n        return bonusDropsOf[_addr];\n    }\n    \n    \n    /**\n     * Allows for the total credit (bonus + non-bonus) of an address to be queried. This is a \n     * constant function which does not alter the state of the contract and therefore does not  \n     * require any gas or a signature to be executed. \n     * \n     * @param _addr The address of which to query the total credits. \n     * \n     * @return The total amount of credit the address has (bonus + non-bonus credit).\n     * */\n    function getTotalDropsOf(address _addr) public view returns(uint256) {\n        return getDropsOf(_addr).add(getBonusDropsOf(_addr));\n    }\n    \n    \n    /**\n     * Allows for the total ETH balance of an address to be queried. This is a constant\n     * function which does not alter the state of the contract and therefore does not  \n     * require any gas or a signature to be executed. \n     * \n     * @param _addr The address of which to query the total ETH balance. \n     * \n     * @return The total amount of ETH balance the address has.\n     * */\n    function getEthBalanceOf(address _addr) public view returns(uint256) {\n        return ethBalanceOf[_addr];\n    }\n\n    \n    /**\n     * Allows for suspected fraudulent ERC20 tokens to be banned from being airdropped by the \n     * owner of the contract. Any attempt made by any other account to invoke the function will \n     * result in a loss of gas and the token to remain unbanned.\n     * \n     * @param _tokenAddr The contract address of the ERC20 token to be banned from being airdropped. \n     * \n     * @return true if function executes successfully, false otherwise.\n     * */\n    function banToken(address _tokenAddr) public onlyOwner returns(bool) {\n        require(!tokenIsBanned[_tokenAddr]);\n        tokenIsBanned[_tokenAddr] = true;\n        TokenBanned(_tokenAddr);\n        return true;\n    }\n    \n    \n    /**\n     * Allows for previously suspected fraudulent ERC20 tokens to become unbanned by the owner\n     * of the contract. Any attempt made by any other account to invoke the function will \n     * result in a loss of gas and the token to remain banned.\n     * \n     * @param _tokenAddr The contract address of the ERC20 token to be banned from being airdropped. \n     * \n     * @return true if function executes successfully, false otherwise.\n     **/\n    function unbanToken(address _tokenAddr) public onlyOwner returns(bool) {\n        require(tokenIsBanned[_tokenAddr]);\n        tokenIsBanned[_tokenAddr] = false;\n        TokenUnbanned(_tokenAddr);\n        return true;\n    }\n    \n    \n    /**\n     * Allows for the allowance of a token from its owner to this contract to be queried. \n     * \n     * As part of the ERC20 standard all tokens which fall under this category have an allowance \n     * function which enables owners of tokens to allow (or give permission) to another address \n     * to spend tokens on behalf of the owner. This contract uses this as part of its protocol.\n     * Users must first give permission to the contract to transfer tokens on their behalf, however,\n     * this does not mean that the tokens will ever be transferrable without the permission of the \n     * owner. This is a security feature which was implemented on this contract. It is not possible\n     * for the owner of this contract or anyone else to transfer the tokens which belong to others. \n     * \n     * @param _addr The address of the token's owner.\n     * @param _addressOfToken The contract address of the ERC20 token.\n     * \n     * @return The ERC20 token allowance from token owner to this contract. \n     * */\n    function getTokenAllowance(address _addr, address _addressOfToken) public view returns(uint256) {\n        ERCInterface token = ERCInterface(_addressOfToken);\n        return token.allowance(_addr, address(this));\n    }\n    \n    \n    /**\n     * Allows users to buy and receive credits automatically when sending ETH to the contract address.\n     * */\n    function() public payable {\n        ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].add(msg.value);\n        CreditPurchased(msg.sender, msg.value, msg.value.mul(rate));\n    }\n\n    \n    /**\n     * Allows users to withdraw their ETH for drops which they have bought and not used. This \n     * will result in the credit of the user being set back to 0. However, bonus credits will \n     * remain the same because they are granted when users use their drops. \n     * \n     * @param _eth The amount of ETH to withdraw\n     * \n     * @return true if function executes successfully, false otherwise.\n     * */\n    function withdrawEth(uint256 _eth) public returns(bool) {\n        require(\n            ethBalanceOf[msg.sender] >= _eth\n            && _eth > 0 \n        );\n        uint256 toTransfer = _eth;\n        ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].sub(_eth);\n        msg.sender.transfer(toTransfer);\n        EthWithdrawn(msg.sender, toTransfer);\n    }\n    \n    \n    /**\n     * Allows for refunds to be made by the owner of the contract. Any attempt made by any other account \n     * to invoke the function will result in a loss of gas and no refunds will be made.\n     * */\n    function issueRefunds(address[] _addrs) public onlyOwner returns(bool) {\n        require(_addrs.length <= maxDropsPerTx);\n        for(uint i = 0; i < _addrs.length; i++) {\n            if(_addrs[i] != address(0) && ethBalanceOf[_addrs[i]] > 0) {\n                uint256 toRefund = ethBalanceOf[_addrs[i]];\n                ethBalanceOf[_addrs[i]] = 0;\n                _addrs[i].transfer(toRefund);\n                RefundIssued(_addrs[i], toRefund);\n            }\n        }\n    }\n    \n    \n    /**\n     * Allows for the distribution of an ERC20 token to be transferred to up to 100 recipients at \n     * a time. This function only facilitates batch transfers of constant values (i.e., all recipients\n     * will receive the same amount of tokens).\n     * \n     * @param _addressOfToken The contract address of an ERC20 token.\n     * @param _recipients The list of addresses which will receive tokens. \n     * @param _value The amount of tokens all addresses will receive. \n     * \n     * @return true if function executes successfully, false otherwise.\n     * */\n    function singleValueAirdrop(address _addressOfToken,  address[] _recipients, uint256 _value) public returns(bool) {\n        ERCInterface token = ERCInterface(_addressOfToken);\n        require(\n            _recipients.length <= maxDropsPerTx \n            && (\n                getTotalDropsOf(msg.sender)>= _recipients.length \n                || tokenHasFreeTrial(_addressOfToken) \n            )\n            && !tokenIsBanned[_addressOfToken]\n        );\n        for(uint i = 0; i < _recipients.length; i++) {\n            if(_recipients[i] != address(0)) {\n                token.transferFrom(msg.sender, _recipients[i], _value);\n            }\n        }\n        if(tokenHasFreeTrial(_addressOfToken)) {\n            trialDrops[_addressOfToken] = trialDrops[_addressOfToken].add(_recipients.length);\n        } else {\n            updateMsgSenderBonusDrops(_recipients.length);\n        }\n        AirdropInvoked(msg.sender, _recipients.length);\n        return true;\n    }\n    \n    \n    /**\n     * Allows for the distribution of an ERC20 token to be transferred to up to 100 recipients at \n     * a time. This function facilitates batch transfers of differing values (i.e., all recipients\n     * can receive different amounts of tokens).\n     * \n     * @param _addressOfToken The contract address of an ERC20 token.\n     * @param _recipients The list of addresses which will receive tokens. \n     * @param _values The corresponding values of tokens which each address will receive.\n     * \n     * @return true if function executes successfully, false otherwise.\n     * */    \n    function multiValueAirdrop(address _addressOfToken,  address[] _recipients, uint256[] _values) public returns(bool) {\n        ERCInterface token = ERCInterface(_addressOfToken);\n        require(\n            _recipients.length <= maxDropsPerTx \n            && _recipients.length == _values.length \n            && (\n                getTotalDropsOf(msg.sender) >= _recipients.length\n                || tokenHasFreeTrial(_addressOfToken)\n            )\n            && !tokenIsBanned[_addressOfToken]\n        );\n        for(uint i = 0; i < _recipients.length; i++) {\n            if(_recipients[i] != address(0) && _values[i] > 0) {\n                token.transferFrom(msg.sender, _recipients[i], _values[i]);\n            }\n        }\n        if(tokenHasFreeTrial(_addressOfToken)) {\n            trialDrops[_addressOfToken] = trialDrops[_addressOfToken].add(_recipients.length);\n        } else {\n            updateMsgSenderBonusDrops(_recipients.length);\n        }\n        AirdropInvoked(msg.sender, _recipients.length);\n        return true;\n    }\n    \n    \n    /**\n     * Invoked internally by the airdrop functions. The purpose of thie function is to grant bonus \n     * drops to users who spend their ETH airdropping tokens, and to remove bonus drops when users \n     * no longer have ETH in their account but do have some bonus drops when airdropping tokens.\n     * \n     * @param _drops The amount of recipients which received tokens from the airdrop.\n     * */\n    function updateMsgSenderBonusDrops(uint256 _drops) internal {\n        if(_drops <= getDropsOf(msg.sender)) {\n            bonusDropsOf[msg.sender] = bonusDropsOf[msg.sender].add(_drops.mul(bonus).div(100));\n            ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].sub(_drops.mul(dropUnitPrice));\n            owner.transfer(_drops.mul(dropUnitPrice));\n        } else {\n            uint256 remainder = _drops.sub(getDropsOf(msg.sender));\n            if(ethBalanceOf[msg.sender] > 0) {\n                bonusDropsOf[msg.sender] = bonusDropsOf[msg.sender].add(getDropsOf(msg.sender).mul(bonus).div(100));\n                owner.transfer(ethBalanceOf[msg.sender]);\n                ethBalanceOf[msg.sender] = 0;\n            }\n            bonusDropsOf[msg.sender] = bonusDropsOf[msg.sender].sub(remainder);\n        }\n    }\n    \n\n    /**\n     * Allows for any ERC20 tokens which have been mistakenly  sent to this contract to be returned \n     * to the original sender by the owner of the contract. Any attempt made by any other account \n     * to invoke the function will result in a loss of gas and no tokens will be transferred out.\n     * \n     * @param _addressOfToken The contract address of an ERC20 token.\n     * @param _recipient The address which will receive tokens. \n     * @param _value The amount of tokens to refund.\n     * \n     * @return true if function executes successfully, false otherwise.\n     * */  \n    function withdrawERC20Tokens(address _addressOfToken,  address _recipient, uint256 _value) public onlyOwner returns(bool){\n        require(\n            _addressOfToken != address(0)\n            && _recipient != address(0)\n            && _value > 0\n        );\n        ERCInterface token = ERCInterface(_addressOfToken);\n        token.transfer(_recipient, _value);\n        ERC20TokensWithdrawn(_addressOfToken, _recipient, _value);\n        return true;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614e20600581905550652d79883d200060068190555060146007819055506101f46008819055506064600981905550612e028061008d6000396000f3006060604052600436106101ac576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303a19a4f146102ad5780630b98f975146102d657806318fe1a8d1461031157806323a0fb02146103625780632a501a43146103b35780632c4e722e1461040d57806334fcf437146104365780633f92edaf146104715780634db67caf1461049a5780634f95e960146104eb578063528976de14610538578063656b6b6b146105aa578063679aefce146105f757806371f124c514610620578063724ef94c1461066d5780637252bbf21461073e57806375b4d78c1461078b5780638da5cb5b146107b45780638eb5f58e146108095780639d06583814610856578063a3792985146108f0578063a39a2b761461093d578063adc7612614610966578063b28fc973146109b3578063bcdd1e1314610a00578063beb0a41614610a79578063c13e285d14610b07578063c311d04914610b30578063c44412e314610b6b578063ea7ee01014610bc5578063eb1cfa8214610c31578063f2fde38b14610c6c578063f332a24514610ca5578063f851a44014610cf6575b6101fe34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d0b90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fc4174c525ef524021f6e3727a9bbe7fa797780670e51c9cd76ceb8e5dfe6c97b3461028f60055434610d2990919063ffffffff16565b604051808381526020018281526020019250505060405180910390a2005b34156102b857600080fd5b6102c0610d61565b6040518082815260200191505060405180910390f35b34156102e157600080fd5b6102f76004808035906020019091905050610d67565b604051808215151515815260200191505060405180910390f35b341561031c57600080fd5b610348600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e22565b604051808215151515815260200191505060405180910390f35b341561036d57600080fd5b610399600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f7c565b604051808215151515815260200191505060405180910390f35b34156103be57600080fd5b6103f3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610fc9565b604051808215151515815260200191505060405180910390f35b341561041857600080fd5b61042061115b565b6040518082815260200191505060405180910390f35b341561044157600080fd5b6104576004808035906020019091905050611161565b604051808215151515815260200191505060405180910390f35b341561047c57600080fd5b610484611254565b6040518082815260200191505060405180910390f35b34156104a557600080fd5b6104d1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061125e565b604051808215151515815260200191505060405180910390f35b34156104f657600080fd5b610522600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061127e565b6040518082815260200191505060405180910390f35b341561054357600080fd5b6105906004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506112aa565b604051808215151515815260200191505060405180910390f35b34156105b557600080fd5b6105e1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061155f565b6040518082815260200191505060405180910390f35b341561060257600080fd5b61060a611577565b6040518082815260200191505060405180910390f35b341561062b57600080fd5b610657600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611581565b6040518082815260200191505060405180910390f35b341561067857600080fd5b610724600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506115f8565b604051808215151515815260200191505060405180910390f35b341561074957600080fd5b610775600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061194e565b6040518082815260200191505060405180910390f35b341561079657600080fd5b61079e611966565b6040518082815260200191505060405180910390f35b34156107bf57600080fd5b6107c761196c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561081457600080fd5b610840600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611991565b6040518082815260200191505060405180910390f35b341561086157600080fd5b6108d6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190919050506119a9565b604051808215151515815260200191505060405180910390f35b34156108fb57600080fd5b610927600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611cb8565b6040518082815260200191505060405180910390f35b341561094857600080fd5b610950611d01565b6040518082815260200191505060405180910390f35b341561097157600080fd5b61099d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d07565b6040518082815260200191505060405180910390f35b34156109be57600080fd5b6109ea600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d7c565b6040518082815260200191505060405180910390f35b3415610a0b57600080fd5b610a5f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611dc5565b604051808215151515815260200191505060405180910390f35b3415610a8457600080fd5b610a8c612018565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610acc578082015181840152602081019050610ab1565b50505050905090810190601f168015610af95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610b1257600080fd5b610b1a612051565b6040518082815260200191505060405180910390f35b3415610b3b57600080fd5b610b516004808035906020019091905050612057565b604051808215151515815260200191505060405180910390f35b3415610b7657600080fd5b610bab600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506121e0565b604051808215151515815260200191505060405180910390f35b3415610bd057600080fd5b610c1b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506123b1565b6040518082815260200191505060405180910390f35b3415610c3c57600080fd5b610c5260048080359060200190919050506124b2565b604051808215151515815260200191505060405180910390f35b3415610c7757600080fd5b610ca3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612570565b005b3415610cb057600080fd5b610cdc600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061271e565b604051808215151515815260200191505060405180910390f35b3415610d0157600080fd5b610d09612877565b005b6000808284019050838110151515610d1f57fe5b8091505092915050565b600080831415610d3c5760009050610d5b565b8183029050818382811515610d4d57fe5b04141515610d5757fe5b8090505b92915050565b60085481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dc457600080fd5b8160075414151515610dd557600080fd5b7fc233b8877183b2d7aeb5d3baf2b545240e5c94d7a1f5ed6938ff87a1cf95a2d160075483604051808381526020018281526020019250505060405180910390a181600781905550919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e7f57600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610ed857600080fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f5f9fbe3bc9355d7eb80002cf096327839eecbdf5ffc15955fbe7609433b18c5560405160405180910390a260019050919050565b6000600954600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054109050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561102657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156110635750600082115b151561106e57600080fd5b6110c082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d0b90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f17641426a9871fbd505cf22302be09d58b40768a741ae1b9a270bdb46ff72cf6836040518082815260200191505060405180910390a26001905092915050565b60055481565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111bf57600080fd5b60055483141580156111d15750600083115b15156111dc57600080fd5b7f4ac9052a820bf4f8c02d7588587cae835573b5b99ea7ad4ca002f17f319f718660055484604051808381526020018281526020019250505060405180910390a182600581905550670de0b6b3a764000090506112446005548261290c90919063ffffffff16565b6006819055506001915050919050565b6000600854905090565b60036020528060005260406000206000915054906101000a900460ff1681565b60006112a361128c83611cb8565b61129584611581565b610d0b90919063ffffffff16565b9050919050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561130a57600080fd5b60085484511115151561131c57600080fd5b600091505b835182101561155857600073ffffffffffffffffffffffffffffffffffffffff16848381518110151561135057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16141580156113d45750600060026000868581518110151561138d57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b1561154b576002600085848151811015156113eb57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060026000868581518110151561144657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550838281518110151561149c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156114e557600080fd5b83828151811015156114f357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167fa171b6942063c6f2800ce40a780edce37baa2b618571b11eedd1e69e626e7d76826040518082815260200191505060405180910390a25b8180600101925050611321565b5050919050565b60046020528060005260406000206000915090505481565b6000600554905090565b60006115f1670de0b6b3a76400006115e3600554600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d2990919063ffffffff16565b61290c90919063ffffffff16565b9050919050565b6000806000859150600854855111158015611614575083518551145b8015611639575084516116263361127e565b101580611638575061163786610f7c565b5b5b801561168f5750600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b151561169a57600080fd5b600090505b845181101561183e57600073ffffffffffffffffffffffffffffffffffffffff1685828151811015156116ce57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff161415801561171357506000848281518110151561170757fe5b90602001906020020151115b15611831578173ffffffffffffffffffffffffffffffffffffffff166323b872dd33878481518110151561174357fe5b90602001906020020151878581518110151561175b57fe5b906020019060200201516040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b151561181c57600080fd5b6102c65a03f1151561182d57600080fd5b5050505b808060010191505061169f565b61184786610f7c565b156118e75761189f8551600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d0b90919063ffffffff16565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118f2565b6118f18551612922565b5b3373ffffffffffffffffffffffffffffffffffffffff167f22a4421eda5c487da9a0a4a06f0c582468448c11c1d02478e2442686d8de589a86516040518082815260200191505060405180910390a26001925050509392505050565b60026020528060005260406000206000915090505481565b60075481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b60008060008591506008548551111580156119dd575084516119ca3361127e565b1015806119dc57506119db86610f7c565b5b5b8015611a335750600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1515611a3e57600080fd5b600090505b8451811015611ba857600073ffffffffffffffffffffffffffffffffffffffff168582815181101515611a7257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16141515611b9b578173ffffffffffffffffffffffffffffffffffffffff166323b872dd338784815181101515611ac457fe5b90602001906020020151876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1515611b8657600080fd5b6102c65a03f11515611b9757600080fd5b5050505b8080600101915050611a43565b611bb186610f7c565b15611c5157611c098551600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d0b90919063ffffffff16565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c5c565b611c5b8551612922565b5b3373ffffffffffffffffffffffffffffffffffffffff167f22a4421eda5c487da9a0a4a06f0c582468448c11c1d02478e2442686d8de589a86516040518082815260200191505060405180910390a26001925050509392505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60065481565b6000611d1282610f7c565b15611d7257611d6b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600954612dbd90919063ffffffff16565b9050611d77565b600090505b919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e2357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614158015611e8d5750600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b8015611e995750600083115b1515611ea457600080fd5b8490508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611f5257600080fd5b6102c65a03f11515611f6357600080fd5b50505060405180519050507ee763f7778b8ceef7270c89b7d1df1008b0e482da39c43831417733af96fb0d858585604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a160019150509392505050565b6040805190810160405280600f81526020017f7777772e71756e666162612e636f6d000000000000000000000000000000000081525081565b60095481565b60008082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156120a95750600083115b15156120b457600080fd5b82905061210983600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612dbd90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561218c57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f8455ae6be5d92f1df1c3c1484388e247a36c7e60d72055ae216dbc258f257d4b826040518082815260200191505060405180910390a250919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561223d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156122b9575081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15156122c457600080fd5b61231682600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612dbd90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167fc1bc87fca69dd3948590175e7c7e66a498d583b1bf99540547fc38e7f1005859836040518082815260200191505060405180910390a26001905092915050565b6000808290508073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e85306000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b151561248e57600080fd5b6102c65a03f1151561249f57600080fd5b5050506040518051905091505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561250f57600080fd5b6064821015151561251f57600080fd5b7f9b7e3ed6ece2694ef31c25bc941a429a17a30546dd406649a5b7178d76c2159960085483604051808381526020018281526020019250505060405180910390a18160088190555060019050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125cb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561265557506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b151561266057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561277b57600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156127d357600080fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fe9c9a473410d8fd0bb91117f70a4b750bce859ab398b18cc49160f5ff41d66e460405160405180910390a260019050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128d257600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000818381151561291957fe5b04905092915050565b600061292d33611581565b82111515612b14576129ae612960606461295260075486610d2990919063ffffffff16565b61290c90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d0b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a57612a0960065484610d2990919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612dbd90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc612aea60065485610d2990919063ffffffff16565b9081150290604051600060405180830381858888f193505050501515612b0f57600080fd5b612db9565b612b2f612b2033611581565b83612dbd90919063ffffffff16565b90506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115612d2357612bfa612bac6064612b9e600754612b9033611581565b610d2990919063ffffffff16565b61290c90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d0b90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f193505050501515612cdd57600080fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b612d7581600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612dbd90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5050565b6000828211151515612dcb57fe5b8183039050929150505600a165627a7a72305820dbdcd59affb7a3fba65519aff66680751e41255f84f71856f4df9882c6c26b380029"
}