{
  "address": "0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TrustlessOTC",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-08\n*/\n\npragma solidity ^0.5.4;\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type,\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * > It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ncontract TrustlessOTC is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    mapping(address => uint256) public balanceTracker;\n    mapping(address => uint256) public feeTracker;\n    mapping(address => uint[]) public tradeTracker;\n\n    event OfferCreated(uint indexed tradeID);\n    event OfferCancelled(uint indexed tradeID);\n    event OfferTaken(uint indexed tradeID);\n\n    uint256 public feeBasisPoints;\n\n    constructor (uint256 _feeBasisPoints) public {\n      feeBasisPoints = _feeBasisPoints;\n    }\n\n    struct TradeOffer {\n        address tokenFrom;\n        address tokenTo;\n        uint256 amountFrom;\n        uint256 amountTo;\n        address payable creator;\n        address optionalTaker;\n        bool active;\n        bool completed;\n        uint tradeID;\n    }\n\n    TradeOffer[] public offers;\n\n    function initiateTrade(\n        address _tokenFrom,\n        address _tokenTo,\n        uint256 _amountFrom,\n        uint256 _amountTo,\n        address _optionalTaker\n        ) public payable returns (uint newTradeID) {\n            if (_tokenFrom == address(0)) {\n                require(msg.value == _amountFrom);\n            } else {\n                require(msg.value == 0);\n                IERC20(_tokenFrom).safeTransferFrom(msg.sender, address(this), _amountFrom);\n            }\n            newTradeID = offers.length;\n            offers.length++;\n            TradeOffer storage o = offers[newTradeID];\n            balanceTracker[_tokenFrom] = balanceTracker[_tokenFrom].add(_amountFrom);\n            o.tokenFrom = _tokenFrom;\n            o.tokenTo = _tokenTo;\n            o.amountFrom = _amountFrom;\n            o.amountTo = _amountTo;\n            o.creator = msg.sender;\n            o.optionalTaker = _optionalTaker;\n            o.active = true;\n            o.tradeID = newTradeID;\n            tradeTracker[msg.sender].push(newTradeID);\n            emit OfferCreated(newTradeID);\n    }\n\n    function cancelTrade(uint tradeID) public returns (bool) {\n        TradeOffer storage o = offers[tradeID];\n        require(msg.sender == o.creator);\n        require(o.active == true);\n        o.active = false;\n        if (o.tokenFrom == address(0)) {\n          msg.sender.transfer(o.amountFrom);\n        } else {\n          IERC20(o.tokenFrom).safeTransfer(o.creator, o.amountFrom);\n        }\n        balanceTracker[o.tokenFrom] -= o.amountFrom;\n        emit OfferCancelled(tradeID);\n        return true;\n    }\n\n    function take(uint tradeID) public payable returns (bool) {\n        TradeOffer storage o = offers[tradeID];\n        require(o.optionalTaker == msg.sender || o.optionalTaker == address(0));\n        require(o.active == true);\n        o.active = false;\n        balanceTracker[o.tokenFrom] = balanceTracker[o.tokenFrom].sub(o.amountFrom);\n        uint256 fee = o.amountFrom.mul(feeBasisPoints).div(10000);\n        feeTracker[o.tokenFrom] = feeTracker[o.tokenFrom].add(fee);\n        tradeTracker[msg.sender].push(tradeID);\n\n        if (o.tokenFrom == address(0)) {\n            msg.sender.transfer(o.amountFrom.sub(fee));\n        } else {\n          IERC20(o.tokenFrom).safeTransfer(msg.sender, o.amountFrom.sub(fee));\n        }\n\n        if (o.tokenTo == address(0)) {\n            require(msg.value == o.amountTo);\n            o.creator.transfer(msg.value);\n        } else {\n            require(msg.value == 0);\n            IERC20(o.tokenTo).safeTransferFrom(msg.sender, o.creator, o.amountTo);\n        }\n        o.completed = true;\n        emit OfferTaken(tradeID);\n        return true;\n    }\n\n    function getOfferDetails(uint tradeID) external view returns (\n        address _tokenFrom,\n        address _tokenTo,\n        uint256 _amountFrom,\n        uint256 _amountTo,\n        address _creator,\n        uint256 _fee,\n        bool _active,\n        bool _completed\n    ) {\n        TradeOffer storage o = offers[tradeID];\n        _tokenFrom = o.tokenFrom;\n        _tokenTo = o.tokenTo;\n        _amountFrom = o.amountFrom;\n        _amountTo = o.amountTo;\n        _creator = o.creator;\n        _fee = o.amountFrom.mul(feeBasisPoints).div(10000);\n        _active = o.active;\n        _completed = o.completed;\n    }\n\n    function getUserTrades(address user) external view returns (uint[] memory){\n      return tradeTracker[user];\n    }\n\n    function reclaimToken(IERC20 _token) external onlyOwner {\n        uint256 balance = _token.balanceOf(address(this));\n        uint256 excess = balance.sub(balanceTracker[address(_token)]);\n        require(excess > 0);\n        if (address(_token) == address(0)) {\n            msg.sender.transfer(excess);\n        } else {\n            _token.safeTransfer(owner(), excess);\n        }\n    }\n\n    function claimFees(IERC20 _token) external onlyOwner {\n        uint256 feesToClaim = feeTracker[address(_token)];\n        feeTracker[address(_token)] = 0;\n        require(feesToClaim > 0);\n        if (address(_token) == address(0)) {\n            msg.sender.transfer(feesToClaim);\n        } else {\n            _token.safeTransfer(owner(), feesToClaim);\n        }\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"cancelTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"name\":\"_tokenTo\",\"type\":\"address\"},{\"name\":\"_amountFrom\",\"type\":\"uint256\"},{\"name\":\"_amountTo\",\"type\":\"uint256\"},{\"name\":\"_optionalTaker\",\"type\":\"address\"}],\"name\":\"initiateTrade\",\"outputs\":[{\"name\":\"newTradeID\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradeTracker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"getOfferDetails\",\"outputs\":[{\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"name\":\"_tokenTo\",\"type\":\"address\"},{\"name\":\"_amountFrom\",\"type\":\"uint256\"},{\"name\":\"_amountTo\",\"type\":\"uint256\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_active\",\"type\":\"bool\"},{\"name\":\"_completed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"take\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTracker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"name\":\"tokenFrom\",\"type\":\"address\"},{\"name\":\"tokenTo\",\"type\":\"address\"},{\"name\":\"amountFrom\",\"type\":\"uint256\"},{\"name\":\"amountTo\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"optionalTaker\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"completed\",\"type\":\"bool\"},{\"name\":\"tradeID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTrades\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceTracker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeBasisPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_feeBasisPoints\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"OfferTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b506040516020806116248339810180604052602081101561003057600080fd5b505160008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36004556115978061008d6000396000f3fe608060405260043610610110576000357c010000000000000000000000000000000000000000000000000000000090048063715018a6116100a7578063927c774211610076578063927c7742146103fc5780639c1e89d61461047f578063b8606eef146104b2578063f2fde38b146104c757610110565b8063715018a61461031a5780638a72ea6a1461032f5780638da5cb5b146103b65780638f32d59b146103e757610110565b80632b4c1fdc116100e35780632b4c1fdc146102115780634fb64be21461024a5780634fd9efc4146102ca5780635d58bcce146102e757610110565b806309ec6cc7146101155780630adbf7431461015357806315a0ea6a146101a957806317ffc320146101de575b600080fd5b34801561012157600080fd5b5061013f6004803603602081101561013857600080fd5b50356104fa565b604080519115158252519081900360200190f35b610197600480360360a081101561016957600080fd5b50600160a060020a03813581169160208101358216916040820135916060810135916080909101351661063e565b60408051918252519081900360200190f35b3480156101b557600080fd5b506101dc600480360360208110156101cc57600080fd5b5035600160a060020a03166107d9565b005b3480156101ea57600080fd5b506101dc6004803603602081101561020157600080fd5b5035600160a060020a031661087f565b34801561021d57600080fd5b506101976004803603604081101561023457600080fd5b50600160a060020a0381351690602001356109c8565b34801561025657600080fd5b506102746004803603602081101561026d57600080fd5b50356109f8565b60408051600160a060020a03998a168152978916602089015287810196909652606087019490945291909516608085015260a084019490945292151560c083015291151560e08201529051908190036101000190f35b61013f600480360360208110156102e057600080fd5b5035610ac2565b3480156102f357600080fd5b506101976004803603602081101561030a57600080fd5b5035600160a060020a0316610dc0565b34801561032657600080fd5b506101dc610dd2565b34801561033b57600080fd5b506103596004803603602081101561035257600080fd5b5035610e3c565b60408051600160a060020a039a8b168152988a1660208a01528881019790975260608801959095529287166080870152951660a085015293151560c084015292151560e08301526101008201929092529051908190036101200190f35b3480156103c257600080fd5b506103cb610ec3565b60408051600160a060020a039092168252519081900360200190f35b3480156103f357600080fd5b5061013f610ed3565b34801561040857600080fd5b5061042f6004803603602081101561041f57600080fd5b5035600160a060020a0316610ee4565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561046b578181015183820152602001610453565b505050509050019250505060405180910390f35b34801561048b57600080fd5b50610197600480360360208110156104a257600080fd5b5035600160a060020a0316610f50565b3480156104be57600080fd5b50610197610f62565b3480156104d357600080fd5b506101dc600480360360208110156104ea57600080fd5b5035600160a060020a0316610f68565b60008060058381548110151561050c57fe5b600091825260209091206007909102016004810154909150600160a060020a0316331461053857600080fd5b600581015460a060020a900460ff16151560011461055557600080fd5b60058101805474ff0000000000000000000000000000000000000000191690558054600160a060020a031615156105bc576002810154604051339180156108fc02916000818181858888f193505050501580156105b6573d6000803e3d6000fd5b506105e6565b6004810154600282015482546105e692600160a060020a039182169291169063ffffffff610f8716565b60028101548154600160a060020a0316600090815260016020526040808220805493909303909255905184917fc28b4aed030bfacc245c0501326e1beb8c0ef0d60e4edc21067fdeb52da2a7aa91a250600192915050565b6000600160a060020a03861615156106615734841461065c57600080fd5b610687565b341561066c57600080fd5b610687600160a060020a03871633308763ffffffff61100716565b506005805490819061069c9060018301611479565b5060006005828154811015156106ae57fe5b60009182526020808320600160a060020a038b1684526001909152604090922054600790910290910191506106e9908663ffffffff61109516565b600160a060020a03808916600081815260016020818152604080842096909655865473ffffffffffffffffffffffffffffffffffffffff19908116909417875586820180548d8716908616179055600287018b905560038088018b905560048801805486163390811790915560058901805474ff000000000000000000000000000000000000000019988d169716969096179690961660a060020a179094556006870188905593825291835283812080549283018155815291822001849055905183917f682fd9923da5632e7c7702dabcfa626195d5f444833bc25f94e418e258e7918691a25095945050505050565b6107e1610ed3565b15156107ec57600080fd5b600160a060020a038116600090815260026020526040812080549082905590811161081657600080fd5b600160a060020a038216151561085957604051339082156108fc029083906000818181858888f19350505050158015610853573d6000803e3d6000fd5b5061087b565b61087b610864610ec3565b600160a060020a038416908363ffffffff610f8716565b5050565b610887610ed3565b151561089257600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600091600160a060020a038416916370a0823191602480820192602092909190829003018186803b1580156108f557600080fd5b505afa158015610909573d6000803e3d6000fd5b505050506040513d602081101561091f57600080fd5b5051600160a060020a0383166000908152600160205260408120549192509061094f90839063ffffffff6110fb16565b90506000811161095e57600080fd5b600160a060020a03831615156109a157604051339082156108fc029083906000818181858888f1935050505015801561099b573d6000803e3d6000fd5b506109c3565b6109c36109ac610ec3565b600160a060020a038516908363ffffffff610f8716565b505050565b6003602052816000526040600020818154811015156109e357fe5b90600052602060002001600091509150505481565b600080600080600080600080600060058a815481101515610a1557fe5b6000918252602090912060079091020180546001820154600283015460038401546004808601549054600160a060020a039586169f509385169d50919b5099509091169650909150610a829061271090610a76908a9063ffffffff61115b16565b9063ffffffff6111bb16565b600590910154989a9799509597949693959460ff60a060020a82048116957501000000000000000000000000000000000000000000909204169350915050565b600080600583815481101515610ad457fe5b60009182526020909120600560079092020190810154909150600160a060020a0316331480610b0e57506005810154600160a060020a0316155b1515610b1957600080fd5b600581015460a060020a900460ff161515600114610b3657600080fd5b60058101805474ff00000000000000000000000000000000000000001916905560028101548154600160a060020a0316600090815260016020526040902054610b849163ffffffff6110fb16565b8154600160a060020a03166000908152600160205260408120919091556004546002830154610bc09161271091610a769163ffffffff61115b16565b8254600160a060020a0316600090815260026020526040902054909150610bed908263ffffffff61109516565b8254600160a060020a039081166000908152600260209081526040808320949094553382526003815292812080546001810182559082529290209091018590558254161515610c7f57600282015433906108fc90610c51908463ffffffff6110fb16565b6040518115909202916000818181858888f19350505050158015610c79573d6000803e3d6000fd5b50610cb2565b610cb233610c9a8385600201546110fb90919063ffffffff16565b8454600160a060020a0316919063ffffffff610f8716565b6001820154600160a060020a03161515610d175760038201543414610cd657600080fd5b6004820154604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610d11573d6000803e3d6000fd5b50610d52565b3415610d2257600080fd5b600482015460038301546001840154610d5292600160a060020a039182169233929091169063ffffffff61100716565b60058201805475ff0000000000000000000000000000000000000000001916750100000000000000000000000000000000000000000017905560405184907f8d41497c7e1d1f357a01f988d454a86c537c3800ab8da3f91bfa5f5e73a1d5f290600090a25060019392505050565b60026020526000908152604090205481565b610dda610ed3565b1515610de557600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6005805482908110610e4a57fe5b60009182526020909120600790910201805460018201546002830154600384015460048501546005860154600690960154600160a060020a0395861697509385169592949193908216929182169160ff60a060020a82048116927501000000000000000000000000000000000000000000909204169089565b600054600160a060020a03165b90565b600054600160a060020a0316331490565b600160a060020a038116600090815260036020908152604091829020805483518184028101840190945280845260609392830182828015610f4457602002820191906000526020600020905b815481526020019060010190808311610f30575b50505050509050919050565b60016020526000908152604090205481565b60045481565b610f70610ed3565b1515610f7b57600080fd5b610f848161122a565b50565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526109c39084906112a7565b60408051600160a060020a0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261108f9085906112a7565b50505050565b6000828201838110156110f2576040805160e560020a62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b600082821115611155576040805160e560020a62461bcd02815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082151561116c575060006110f5565b82820282848281151561117b57fe5b04146110f25760405160e560020a62461bcd0281526004018080602001828103825260218152602001806115216021913960400191505060405180910390fd5b6000808211611214576040805160e560020a62461bcd02815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b6000828481151561122157fe5b04949350505050565b600160a060020a038116151561123f57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6112b982600160a060020a0316611471565b151561130f576040805160e560020a62461bcd02815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b6000606083600160a060020a0316836040518082805190602001908083835b6020831061134d5780518252601f19909201916020918201910161132e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146113af576040519150601f19603f3d011682016040523d82523d6000602084013e6113b4565b606091505b5091509150811515611410576040805160e560020a62461bcd02815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b60008151111561108f5780806020019051602081101561142f57600080fd5b5051151561108f5760405160e560020a62461bcd02815260040180806020018281038252602a815260200180611542602a913960400191505060405180910390fd5b6000903b1190565b8154818355818111156109c3576000838152602090206109c391610ed09160079182028101918502015b8082111561151c57805473ffffffffffffffffffffffffffffffffffffffff199081168255600182018054821690556000600283018190556003830181905560048301805490921690915560058201805475ffffffffffffffffffffffffffffffffffffffffffff1916905560068201556007016114a3565b509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a165627a7a7230582092790bd8214de57ecb2eb3cb78ee69d94fbeb22308917ea95dfd886ef41f2c9700290000000000000000000000000000000000000000000000000000000000000002",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000002"
}