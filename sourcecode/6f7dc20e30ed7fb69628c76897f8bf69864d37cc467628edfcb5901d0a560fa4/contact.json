{
  "address": "0x7eb9a0ab72b6fdfbc483d9edd7f51cd86c586573",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DRE",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-04\n*/\n\npragma solidity ^0.4.18;\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n}\ncontract Ownable {\n    address public owner;\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert();\n        }\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n    function destruct() public onlyOwner {\n        selfdestruct(owner);\n    }\n}\ncontract ERC20Basic {\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public;\n    function approve(address spender, uint256 value) public;\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n    uint256 public totalSupply;\n\n    modifier onlyPayloadSize(uint256 size) {\n        if(msg.data.length < size + 4) {\n            revert();\n        }\n        _;\n    }\n\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\ncontract StandardToken is BasicToken, ERC20 {\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        var _allowance = allowed[_from][msg.sender];\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public {\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\ncontract DRE is StandardToken, Ownable {\n\n    string public constant name = \"Darwin\";\n    string public constant symbol = \"DRE\";\n    uint256 public constant decimals = 18;\n\n    function DRE() public {\n        owner = msg.sender;\n        totalSupply=1000000000000000000000000000;\n        balances[owner]=totalSupply;\n    }\n\n    function () public {\n        revert();\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60038054600160a060020a03338116600160a060020a03199283168117909216909117918290556b033b2e3c9fd0803ce80000006001819055911660009081526020819052604090205561079c806100686000396000f3006060604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd1461017757806323b872dd1461019c5780632b68b9c6146101c4578063313ce567146101d757806370a08231146101ea5780638da5cb5b1461020957806395d89b4114610238578063a9059cbb1461024b578063dd62ed3e1461026d578063f2fde38b14610292575b34156100c457600080fd5b600080fd5b34156100d457600080fd5b6100dc6102b1565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610118578082015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015e57600080fd5b610175600160a060020a03600435166024356102e8565b005b341561018257600080fd5b61018a610389565b60405190815260200160405180910390f35b34156101a757600080fd5b610175600160a060020a036004358116906024351660443561038f565b34156101cf57600080fd5b61017561051c565b34156101e257600080fd5b61018a610545565b34156101f557600080fd5b61018a600160a060020a036004351661054a565b341561021457600080fd5b61021c610565565b604051600160a060020a03909116815260200160405180910390f35b341561024357600080fd5b6100dc610574565b341561025657600080fd5b610175600160a060020a03600435166024356105ab565b341561027857600080fd5b61018a600160a060020a03600435811690602435166106c7565b341561029d57600080fd5b610175600160a060020a03600435166106f2565b60408051908101604052600681527f44617277696e0000000000000000000000000000000000000000000000000000602082015281565b801580159061031b5750600160a060020a0333811660009081526002602090815260408083209386168352929052205415155b1561032557600080fd5b600160a060020a03338116600081815260026020908152604080832094871680845294909152908190208490557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35050565b60015481565b6000606060643610156103a157600080fd5b600160a060020a03841615156103b657600080fd5b600160a060020a0385166000908152602081905260409020548311156103db57600080fd5b600160a060020a038086166000908152600260209081526040808320339094168352929052205483111561040e57600080fd5b600160a060020a0380861660009081526002602090815260408083203385168452825280832054938816835290829052902054909250610454908463ffffffff61074816565b600160a060020a038086166000908152602081905260408082209390935590871681522054610489908463ffffffff61075e16565b600160a060020a0386166000908152602081905260409020556104b2828463ffffffff61075e16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35050505050565b60035433600160a060020a0390811691161461053757600080fd5b600354600160a060020a0316ff5b601281565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031681565b60408051908101604052600381527f4452450000000000000000000000000000000000000000000000000000000000602082015281565b604060443610156105bb57600080fd5b600160a060020a03831615156105d057600080fd5b600160a060020a0333166000908152602081905260409020548211156105f557600080fd5b600160a060020a03331660009081526020819052604090205461061e908363ffffffff61075e16565b600160a060020a033381166000908152602081905260408082209390935590851681522054610653908363ffffffff61074816565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a3505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461070d57600080fd5b600160a060020a03811615610745576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60008282018381101561075757fe5b9392505050565b60008282111561076a57fe5b509003905600a165627a7a72305820e99fc9befd6bc6187d4cc62d591076c78f19ef60218066193a01d43ae71821cd0029"
}