{
  "address": "0x8993f76e40ed605f930b13b860bfabdee0756858",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BFEXToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-12\n*/\n\npragma solidity ^0.4.21;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract ERC223 {\n    uint256 public totalSupply_;\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function totalSupply() public view returns (uint256 _supply);\n\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function transfer(address to, uint value) public returns (bool success);\n    function transfer(address to, uint value, bytes data) public returns (bool success);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n}\n\n\ncontract ContractReceiver {\n    /**\n     * @dev Standard ERC223 function that will handle incoming token transfers.\n     * @param _from  Token sender address.\n     * @param _value Amount of tokens.\n     * @param _data  Transaction metadata.\n     */\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\n\ncontract ERC223Token is ERC223 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    uint256 public totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256 _supply) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    * @param _data Transaction metadata.\n    */\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        } else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    /**\n    * @dev transfer token for a specified address similar to ERC20 transfer.\n    * @dev Added due to backwards compatibility reasons.\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint _value) public returns (bool success) {\n        bytes memory empty;\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        } else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev isContract\n    * @param _addr The address to check if it's a contract or not\n    * @return true if _addr is a contract\n    */\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        /* solium-disable-next-line */\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        if (length > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n    * @dev transferToAddress transfers the specified amount of tokens to the specified address\n    * @param _to    Receiver address.\n    * @param _value Amount of tokens that will be transferred.\n    * @param _data  Transaction metadata.\n    * @return true  if transaction went through\n    */\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n        balances[_to] = balanceOf(_to).add(_value);\n        Transfer(msg.sender, _to, _value);\n        ERC223Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n\n    /**\n    * @dev transferToContract transfers the specified amount of tokens to the specified contract address\n    * @param _to    Receiver address.\n    * @param _value Amount of tokens that will be transferred.\n    * @param _data  Transaction metadata.\n    * @return true  if transaction went through\n    */\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n        balances[_to] = balanceOf(_to).add(_value);\n        ContractReceiver reciever = ContractReceiver(_to);\n        reciever.tokenFallback(msg.sender, _value, _data);\n        Transfer(msg.sender, _to, _value);\n        ERC223Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n}\n\n/**\n * @title BFEXToken Bank Future Exchange Token Contract by AngelCoin.io\n */\ncontract BFEXToken is ERC223Token {\n\n    string public constant name = \"Bank Future Exchange\";\n    string public constant symbol = \"BFEX\";\n    uint8 public constant decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 210000000 * (10 ** uint256(decimals));\n\n    /**\n     * @dev BFEXToken Constructor gives msg..\n     */\n    function BFEXToken() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    }\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b6aadb53acfa41aee120000006003819055600160a060020a033316600081815260016020526040808220849055919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a3610c72806100816000396000f3006060604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019457806323b872dd146101b95780632ff2e9dc146101e1578063313ce567146101f4578063324536eb1461021d578063661884631461023057806370a082311461025257806395d89b4114610271578063a9059cbb14610284578063be45fd62146102a6578063d73dd6231461030b578063dd62ed3e1461032d575b600080fd5b34156100df57600080fd5b6100e7610352565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012357808201518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016957600080fd5b610180600160a060020a0360043516602435610389565b604051901515815260200160405180910390f35b341561019f57600080fd5b6101a76103f5565b60405190815260200160405180910390f35b34156101c457600080fd5b610180600160a060020a03600435811690602435166044356103fb565b34156101ec57600080fd5b6101a761057e565b34156101ff57600080fd5b61020761058d565b60405160ff909116815260200160405180910390f35b341561022857600080fd5b6101a7610592565b341561023b57600080fd5b610180600160a060020a0360043516602435610598565b341561025d57600080fd5b6101a7600160a060020a0360043516610694565b341561027c57600080fd5b6100e76106af565b341561028f57600080fd5b610180600160a060020a03600435166024356106e6565b34156102b157600080fd5b61018060048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061071b95505050505050565b341561031657600080fd5b610180600160a060020a0360043516602435610748565b341561033857600080fd5b6101a7600160a060020a03600435811690602435166107ec565b60408051908101604052601481527f42616e6b204675747572652045786368616e6765000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035490565b6000600160a060020a038316151561041257600080fd5b600160a060020a03841660009081526001602052604090205482111561043757600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561046a57600080fd5b600160a060020a038416600090815260016020526040902054610493908363ffffffff61081716565b600160a060020a0380861660009081526001602052604080822093909355908516815220546104c8908363ffffffff61082916565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610510908363ffffffff61081716565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b9392505050565b6aadb53acfa41aee1200000081565b601281565b60035481565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156105f557600160a060020a03338116600090815260026020908152604080832093881683529290529081205561062c565b610605818463ffffffff61081716565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a031660009081526001602052604090205490565b60408051908101604052600481527f4246455800000000000000000000000000000000000000000000000000000000602082015281565b60006106f0610c34565b6106f98461083c565b156107105761070984848361085c565b915061068d565b610709848483610ad4565b60006107268461083c565b1561073d5761073684848461085c565b9050610577565b610736848484610ad4565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610780908363ffffffff61082916565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282111561082357fe5b50900390565b8181018281101561083657fe5b92915050565b6000813b818111156108515760019150610856565b600091505b50919050565b6000808361086933610694565b101561087457600080fd5b61088d8461088133610694565b9063ffffffff61081716565b600160a060020a0333166000908152600160205260409020556108bf846108b387610694565b9063ffffffff61082916565b600160a060020a03861660008181526001602052604090819020929092558692509063c0ee0b8a90339087908790518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610971578082015183820152602001610959565b50505050905090810190601f16801561099e5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15156109be57600080fd5b5af115156109cb57600080fd5b50505084600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a384600160a060020a031633600160a060020a03167f9bfafdc2ae8835972d7b64ef3f8f307165ac22ceffde4a742c52da5487f45fd1868660405182815260406020820181815290820183818151815260200191508051906020019080838360005b83811015610a8e578082015183820152602001610a76565b50505050905090810190601f168015610abb5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3506001949350505050565b600082610ae033610694565b1015610aeb57600080fd5b610af88361088133610694565b600160a060020a033316600090815260016020526040902055610b1e836108b386610694565b600160a060020a0380861660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a383600160a060020a031633600160a060020a03167f9bfafdc2ae8835972d7b64ef3f8f307165ac22ceffde4a742c52da5487f45fd1858560405182815260406020820181815290820183818151815260200191508051906020019080838360005b83811015610bef578082015183820152602001610bd7565b50505050905090810190601f168015610c1c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35060019392505050565b602060405190810160405260008152905600a165627a7a72305820b55da6b2e890e66653a92829d97cd785839e7f636c5682bcbc75f90e4af213e10029"
}