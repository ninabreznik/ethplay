{
  "address": "0x98bde3a768401260e7025faf9947ef1b81295519",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "BCShop.io Token",
  "contractName": "BCSToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-08\n*/\n\n/*************************************************************************\n * This contract has been merged with solidify\n * https://github.com/tiesnetwork/solidify\n *************************************************************************/\n \n pragma solidity ^0.4.10;\n\n/*************************************************************************\n * import \"../common/Manageable.sol\" : start\n *************************************************************************/\n\n/*************************************************************************\n * import \"../common/Owned.sol\" : start\n *************************************************************************/\n\n\ncontract Owned {\n    address public owner;        \n\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    /**@dev allows transferring the contract ownership. */\n    function transferOwnership(address _newOwner) public ownerOnly {\n        require(_newOwner != owner);\n        owner = _newOwner;\n    }\n}\n/*************************************************************************\n * import \"../common/Owned.sol\" : end\n *************************************************************************/\n\n///A token that have an owner and a list of managers that can perform some operations\n///Owner is always a manager too\ncontract Manageable is Owned {\n\n    event ManagerSet(address manager, bool state);\n\n    mapping (address => bool) public managers;\n\n    function Manageable() Owned() {\n        managers[owner] = true;\n    }\n\n    /**@dev Allows execution by managers only */\n    modifier managerOnly {\n        assert(managers[msg.sender]);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public ownerOnly {\n        super.transferOwnership(_newOwner);\n\n        managers[_newOwner] = true;\n        managers[msg.sender] = false;\n    }\n\n    function setManager(address manager, bool state) ownerOnly {\n        managers[manager] = state;\n        ManagerSet(manager, state);\n    }\n}/*************************************************************************\n * import \"../common/Manageable.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./ValueToken.sol\" : start\n *************************************************************************/\n\n/*************************************************************************\n * import \"./ERC20StandardToken.sol\" : start\n *************************************************************************/\n\n/*************************************************************************\n * import \"./IERC20Token.sol\" : start\n *************************************************************************/\n\n/**@dev ERC20 compliant token interface. \nhttps://theethereum.wiki/w/index.php/ERC20_Token_Standard \nhttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md */\ncontract IERC20Token {\n\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external    \n    function name() public constant returns (string _name) { _name; }\n    function symbol() public constant returns (string _symbol) { _symbol; }\n    function decimals() public constant returns (uint8 _decimals) { _decimals; }\n    \n    function totalSupply() constant returns (uint total) {total;}\n    function balanceOf(address _owner) constant returns (uint balance) {_owner; balance;}    \n    function allowance(address _owner, address _spender) constant returns (uint remaining) {_owner; _spender; remaining;}\n\n    function transfer(address _to, uint _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n    function approve(address _spender, uint _value) returns (bool success);\n    \n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n/*************************************************************************\n * import \"./IERC20Token.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"../common/SafeMath.sol\" : start\n *************************************************************************/\n\n/**dev Utility methods for overflow-proof arithmetic operations \n*/\ncontract SafeMath {\n\n    /**dev Returns the sum of a and b. Throws an exception if it exceeds uint256 limits*/\n    function safeAdd(uint256 a, uint256 b) internal returns (uint256) {        \n        uint256 c = a + b;\n        assert(c >= a);\n\n        return c;\n    }\n\n    /**dev Returns the difference of a and b. Throws an exception if a is less than b*/\n    function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n        assert(a >= b);\n        return a - b;\n    }\n\n    /**dev Returns the product of a and b. Throws an exception if it exceeds uint256 limits*/\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n        uint256 z = x * y;\n        assert((x == 0) || (z / x == y));\n        return z;\n    }\n\n    function safeDiv(uint256 x, uint256 y) internal returns (uint256) {\n        assert(y != 0);\n        return x / y;\n    }\n}/*************************************************************************\n * import \"../common/SafeMath.sol\" : end\n *************************************************************************/\n\n/**@dev Standard ERC20 compliant token implementation */\ncontract ERC20StandardToken is IERC20Token, SafeMath {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    //tokens already issued\n    uint256 tokensIssued;\n    //balances for each account\n    mapping (address => uint256) balances;\n    //one account approves the transfer of an amount to another account\n    mapping (address => mapping (address => uint256)) allowed;\n\n    function ERC20StandardToken() {\n     \n    }    \n\n    //\n    //IERC20Token implementation\n    // \n\n    function totalSupply() constant returns (uint total) {\n        total = tokensIssued;\n    }\n \n    function balanceOf(address _owner) constant returns (uint balance) {\n        balance = balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) returns (bool) {\n        require(_to != address(0));\n\n        // safeSub inside doTransfer will throw if there is not enough balance.\n        doTransfer(msg.sender, _to, _value);        \n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n        require(_to != address(0));\n        \n        // Check for allowance is not needed because sub(_allowance, _value) will throw if this condition is not met\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);        \n        // safeSub inside doTransfer will throw if there is not enough balance.\n        doTransfer(_from, _to, _value);        \n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        remaining = allowed[_owner][_spender];\n    }    \n\n    //\n    // Additional functions\n    //\n    /**@dev Gets real token amount in the smallest token units */\n    function getRealTokenAmount(uint256 tokens) constant returns (uint256) {\n        return tokens * (uint256(10) ** decimals);\n    }\n\n    //\n    // Internal functions\n    //    \n    \n    function doTransfer(address _from, address _to, uint256 _value) internal {\n        balances[_from] = safeSub(balances[_from], _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n    }\n}/*************************************************************************\n * import \"./ERC20StandardToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"../token/ValueTokenAgent.sol\" : start\n *************************************************************************/\n\n\n\n\n/**@dev Watches transfer operation of tokens to validate value-distribution state */\ncontract ValueTokenAgent {\n\n    /**@dev Token whose transfers that contract watches */\n    ValueToken public valueToken;\n\n    /**@dev Allows only token to execute method */\n    modifier valueTokenOnly {require(msg.sender == address(valueToken)); _;}\n\n    function ValueTokenAgent(ValueToken token) {\n        valueToken = token;\n    }\n\n    /**@dev Called just before the token balance update*/   \n    function tokenIsBeingTransferred(address from, address to, uint256 amount);\n\n    /**@dev Called when non-transfer token state change occurs: burn, issue, change of valuable tokens.\n    holder - address of token holder that committed the change\n    amount - amount of new or deleted tokens  */\n    function tokenChanged(address holder, uint256 amount);\n}/*************************************************************************\n * import \"../token/ValueTokenAgent.sol\" : end\n *************************************************************************/\n\n\n/**@dev Can be relied on to distribute values according to its balances \n Can set some reserve addreses whose tokens don't take part in dividend distribution */\ncontract ValueToken is Manageable, ERC20StandardToken {\n    \n    /**@dev Watches transfer operation of this token */\n    ValueTokenAgent valueAgent;\n\n    /**@dev Holders of reserved tokens */\n    mapping (address => bool) public reserved;\n\n    /**@dev Reserved token amount */\n    uint256 public reservedAmount;\n\n    function ValueToken() {}\n\n    /**@dev Sets new value agent */\n    function setValueAgent(ValueTokenAgent newAgent) managerOnly {\n        valueAgent = newAgent;\n    }\n\n    function doTransfer(address _from, address _to, uint256 _value) internal {\n\n        if (address(valueAgent) != 0x0) {\n            //first execute agent method\n            valueAgent.tokenIsBeingTransferred(_from, _to, _value);\n        }\n\n        //first check if addresses are reserved and adjust reserved amount accordingly\n        if (reserved[_from]) {\n            reservedAmount = safeSub(reservedAmount, _value);\n            //reservedAmount -= _value;\n        } \n        if (reserved[_to]) {\n            reservedAmount = safeAdd(reservedAmount, _value);\n            //reservedAmount += _value;\n        }\n\n        //then do actual transfer\n        super.doTransfer(_from, _to, _value);\n    }\n\n    /**@dev Returns a token amount that is accounted in the process of dividend calculation */\n    function getValuableTokenAmount() constant returns (uint256) {\n        return totalSupply() - reservedAmount;\n    }\n\n    /**@dev Sets specific address to be reserved */\n    function setReserved(address holder, bool state) managerOnly {        \n\n        uint256 holderBalance = balanceOf(holder);\n        if (address(valueAgent) != 0x0) {            \n            valueAgent.tokenChanged(holder, holderBalance);\n        }\n\n        //change reserved token amount according to holder's state\n        if (state) {\n            //reservedAmount += holderBalance;\n            reservedAmount = safeAdd(reservedAmount, holderBalance);\n        } else {\n            //reservedAmount -= holderBalance;\n            reservedAmount = safeSub(reservedAmount, holderBalance);\n        }\n\n        reserved[holder] = state;\n    }\n}/*************************************************************************\n * import \"./ValueToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./ReturnableToken.sol\" : start\n *************************************************************************/\n\n\n\n/*************************************************************************\n * import \"./ReturnTokenAgent.sol\" : start\n *************************************************************************/\n\n\n\n\n///Returnable tokens receiver\ncontract ReturnTokenAgent is Manageable {\n    //ReturnableToken public returnableToken;\n\n    /**@dev List of returnable tokens in format token->flag  */\n    mapping (address => bool) public returnableTokens;\n\n    /**@dev Allows only token to execute method */\n    //modifier returnableTokenOnly {require(msg.sender == address(returnableToken)); _;}\n    modifier returnableTokenOnly {require(returnableTokens[msg.sender]); _;}\n\n    /**@dev Executes when tokens are transferred to this */\n    function returnToken(address from, uint256 amountReturned);\n\n    /**@dev Sets token that can call returnToken method */\n    function setReturnableToken(ReturnableToken token) managerOnly {\n        returnableTokens[address(token)] = true;\n    }\n\n    /**@dev Removes token that can call returnToken method */\n    function removeReturnableToken(ReturnableToken token) managerOnly {\n        returnableTokens[address(token)] = false;\n    }\n}/*************************************************************************\n * import \"./ReturnTokenAgent.sol\" : end\n *************************************************************************/\n\n///Token that when sent to specified contract (returnAgent) invokes additional actions\ncontract ReturnableToken is Manageable, ERC20StandardToken {\n\n    /**@dev List of return agents */\n    mapping (address => bool) public returnAgents;\n\n    function ReturnableToken() {}    \n    \n    /**@dev Sets new return agent */\n    function setReturnAgent(ReturnTokenAgent agent) managerOnly {\n        returnAgents[address(agent)] = true;\n    }\n\n    /**@dev Removes return agent from list */\n    function removeReturnAgent(ReturnTokenAgent agent) managerOnly {\n        returnAgents[address(agent)] = false;\n    }\n\n    function doTransfer(address _from, address _to, uint256 _value) internal {\n        super.doTransfer(_from, _to, _value);\n        if (returnAgents[_to]) {\n            ReturnTokenAgent(_to).returnToken(_from, _value);                \n        }\n    }\n}/*************************************************************************\n * import \"./ReturnableToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./IBurnableToken.sol\" : start\n *************************************************************************/\n\n/**@dev A token that can be burnt */\ncontract IBurnableToken {\n    function burn(uint256 _value);\n}/*************************************************************************\n * import \"./IBurnableToken.sol\" : end\n *************************************************************************/\n\n/**@dev bcshop.io crowdsale token */\ncontract BCSToken is ValueToken, ReturnableToken, IBurnableToken {\n\n    /**@dev Specifies allowed address that always can transfer tokens in case of global transfer lock */\n    mapping (address => bool) public transferAllowed;\n    /**@dev Specifies timestamp when specific token holder can transfer funds */    \n    mapping (address => uint256) public transferLockUntil; \n    /**@dev True if transfer is locked for all holders, false otherwise */\n    bool public transferLocked;\n\n    event Burn(address sender, uint256 value);\n\n    /**@dev Creates a token with given initial supply  */\n    function BCSToken(uint256 _initialSupply, uint8 _decimals) {\n        name = \"BCShop.io Token\";\n        symbol = \"BCS\";\n        decimals = _decimals;        \n\n        tokensIssued = _initialSupply * (uint256(10) ** decimals);\n        //store all tokens at the owner's address;\n        balances[msg.sender] = tokensIssued;\n\n        transferLocked = true;\n        transferAllowed[msg.sender] = true;        \n    }\n\n    /**@dev ERC20StandatdToken override */\n    function doTransfer(address _from, address _to, uint256 _value) internal {\n        require(canTransfer(_from));\n        super.doTransfer(_from, _to, _value);\n    }    \n\n    /**@dev Returns true if given address can transfer tokens */\n    function canTransfer(address holder) constant returns (bool) {\n        if(transferLocked) {\n            return transferAllowed[holder];\n        } else {\n            return now > transferLockUntil[holder];\n        }\n        //return !transferLocked && now > transferLockUntil[holder];\n    }    \n\n    /**@dev Lock transfer for a given holder for a given amount of days */\n    function lockTransferFor(address holder, uint256 daysFromNow) managerOnly {\n        transferLockUntil[holder] = daysFromNow * 1 days + now;\n    }\n\n    /**@dev Sets transfer allowance for specific holder */\n    function allowTransferFor(address holder, bool state) managerOnly {\n        transferAllowed[holder] = state;\n    }\n\n    /**@dev Locks or allows transfer for all holders, for emergency reasons*/\n    function setLockedState(bool state) managerOnly {\n        transferLocked = state;\n    }\n    \n    function burn(uint256 _value) managerOnly {        \n        require (balances[msg.sender] >= _value);            // Check if the sender has enough\n\n        if (address(valueAgent) != 0x0) {            \n            valueAgent.tokenChanged(msg.sender, _value);\n        }\n\n        balances[msg.sender] -= _value;                      // Subtract from the sender\n        tokensIssued -= _value;                              // Updates totalSupply        \n\n        Burn(msg.sender, _value);        \n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAgent\",\"type\":\"address\"}],\"name\":\"setValueAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setReturnAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"allowTransferFor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferLockUntil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getValuableTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"canTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setLockedState\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"removeReturnAgent\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"returnAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"getRealTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setReserved\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"daysFromNow\",\"type\":\"uint256\"}],\"name\":\"lockTransferFor\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ManagerSet\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200001057600080fd5b6040516040806200155a83398101604052808051919060200180519150505b5b5b5b5b5b60008054600160a060020a03191633600160a060020a03161790555b60008054600160a060020a03168152600160208190526040909120805460ff191690911790555b5b5b5b60408051908101604052600f81527f424353686f702e696f20546f6b656e000000000000000000000000000000000060208201526002908051620000c392916020019062000175565b506040805190810160405260038082527f424353000000000000000000000000000000000000000000000000000000000060208301529080516200010c92916020019062000175565b506004805460ff80841660ff19928316179283905591909116600a0a83026005819055600160a060020a033316600090815260066020908152604080832093909355600e805485166001908117909155600c90915291902080549092161790555b50506200021f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001b857805160ff1916838001178555620001e8565b82800160010185558215620001e8579182015b82811115620001e8578251825591602001919060010190620001cb565b5b50620001f7929150620001fb565b5090565b6200021c91905b80821115620001f7576000815560010162000202565b5090565b90565b61132b806200022f6000396000f300606060405236156101645763ffffffff60e060020a60003504166306fdde038114610169578063095ea7b3146101f457806312686aae1461022a578063151eeb551461025157806318160ddd1461028457806322e63356146102a957806323b872dd146102ca578063313ce5671461030657806342966c681461032f5780634e98323c146103475780635333c5071461036857806359b0a1741461038e57806360cce8a5146103bf57806370a08231146103e457806378fc3cb3146104155780637d9f298e146104485780638da5cb5b1461046257806395d89b4114610491578063a084ee761461051c578063a1b16e5c1461053d578063a5e90eee14610570578063a9059cbb14610596578063c0956fd9146105cc578063c47af732146105f4578063da9425e21461061a578063dcdbbe371461064d578063dd62ed3e14610671578063f2fde38b146106a8578063f92c45b7146106c9578063fdff9b4d146106ee575b600080fd5b341561017457600080fd5b61017c610721565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101b95780820151818401525b6020016101a0565b50505050905090810190601f1680156101e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ff57600080fd5b610216600160a060020a03600435166024356107bf565b604051901515815260200160405180910390f35b341561023557600080fd5b61021661082c565b604051901515815260200160405180910390f35b341561025c57600080fd5b610216600160a060020a0360043516610835565b604051901515815260200160405180910390f35b341561028f57600080fd5b61029761084a565b60405190815260200160405180910390f35b34156102b457600080fd5b6102c8600160a060020a0360043516610851565b005b34156102d557600080fd5b610216600160a060020a03600435811690602435166044356108a2565b604051901515815260200160405180910390f35b341561031157600080fd5b61031961096e565b60405160ff909116815260200160405180910390f35b341561033a57600080fd5b6102c8600435610977565b005b341561035257600080fd5b6102c8600160a060020a0360043516610ab1565b005b341561037357600080fd5b6102c8600160a060020a03600435166024351515610afd565b005b341561039957600080fd5b610297600160a060020a0360043516610b4b565b60405190815260200160405180910390f35b34156103ca57600080fd5b610297610b5d565b60405190815260200160405180910390f35b34156103ef57600080fd5b610297600160a060020a0360043516610b71565b60405190815260200160405180910390f35b341561042057600080fd5b610216600160a060020a0360043516610b90565b604051901515815260200160405180910390f35b341561045357600080fd5b6102c86004351515610be7565b005b341561046d57600080fd5b610475610c1e565b604051600160a060020a03909116815260200160405180910390f35b341561049c57600080fd5b61017c610c2d565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101b95780820151818401525b6020016101a0565b50505050905090810190601f1680156101e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561052757600080fd5b6102c8600160a060020a0360043516610ccb565b005b341561054857600080fd5b610216600160a060020a0360043516610d14565b604051901515815260200160405180910390f35b341561057b57600080fd5b6102c8600160a060020a03600435166024351515610d29565b005b34156105a157600080fd5b610216600160a060020a0360043516602435610db4565b604051901515815260200160405180910390f35b34156105d757600080fd5b610297600435610e27565b60405190815260200160405180910390f35b34156105ff57600080fd5b6102c8600160a060020a03600435166024351515610e38565b005b341561062557600080fd5b610216600160a060020a0360043516610f39565b604051901515815260200160405180910390f35b341561065857600080fd5b6102c8600160a060020a0360043516602435610f4e565b005b341561067c57600080fd5b610297600160a060020a0360043581169060243516610f9a565b60405190815260200160405180910390f35b34156106b357600080fd5b6102c8600160a060020a0360043516610fc7565b005b34156106d457600080fd5b610297611026565b60405190815260200160405180910390f35b34156106f957600080fd5b610216600160a060020a036004351661102c565b604051901515815260200160405180910390f35b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107b75780601f1061078c576101008083540402835291602001916107b7565b820191906000526020600020905b81548152906001019060200180831161079a57829003601f168201915b505050505081565b600160a060020a03338116600081815260076020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600e5460ff1681565b600c6020526000908152604090205460ff1681565b6005545b90565b600160a060020a03331660009081526001602052604090205460ff16151561087557fe5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b6000600160a060020a03831615156108b957600080fd5b600160a060020a03808516600090815260076020908152604080832033909416835292905220546108ea9083611041565b600160a060020a038086166000908152600760209081526040808320339094168352929052205561091c848484611058565b82600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b9392505050565b60045460ff1681565b600160a060020a03331660009081526001602052604090205460ff16151561099b57fe5b600160a060020a033316600090815260066020526040902054819010156109c157600080fd5b600854600160a060020a031615610a3d57600854600160a060020a0316630963b12d338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610a2857600080fd5b6102c65a03f11515610a3957600080fd5b5050505b33600160a060020a03811660009081526006602052604090819020805484900390556005805484900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59190839051600160a060020a03909216825260208201526040908101905180910390a15b5b50565b600160a060020a03331660009081526001602052604090205460ff161515610ad557fe5b600160a060020a0381166000908152600b60205260409020805460ff191660011790555b5b50565b600160a060020a03331660009081526001602052604090205460ff161515610b2157fe5b600160a060020a0382166000908152600c60205260409020805460ff19168215151790555b5b5050565b600d6020526000908152604090205481565b6000600a54610b6a61084a565b0390505b90565b600160a060020a0381166000908152600660205260409020545b919050565b600e5460009060ff1615610bc05750600160a060020a0381166000908152600c602052604090205460ff16610b8b565b50600160a060020a0381166000908152600d60205260409020544211610b8b565b5b919050565b600160a060020a03331660009081526001602052604090205460ff161515610c0b57fe5b600e805460ff19168215151790555b5b50565b600054600160a060020a031681565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107b75780601f1061078c576101008083540402835291602001916107b7565b820191906000526020600020905b81548152906001019060200180831161079a57829003601f168201915b505050505081565b600160a060020a03331660009081526001602052604090205460ff161515610cef57fe5b600160a060020a0381166000908152600b60205260409020805460ff191690555b5b50565b600b6020526000908152604090205460ff1681565b60005433600160a060020a03908116911614610d4157fe5b600160a060020a03821660009081526001602052604090819020805460ff19168315151790557fff83ce179bad4fbdb0e98074011487cde624295a52d8189d92d5d8b06c914eda908390839051600160a060020a039092168252151560208201526040908101905180910390a15b5b5050565b6000600160a060020a0383161515610dcb57600080fd5b610dd6338484611058565b82600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b92915050565b60045460ff16600a0a81025b919050565b600160a060020a03331660009081526001602052604081205460ff161515610e5c57fe5b610e6583610b71565b600854909150600160a060020a031615610ee457600854600160a060020a0316630963b12d848360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610ecf57600080fd5b6102c65a03f11515610ee057600080fd5b5050505b8115610efe57610ef6600a548261107d565b600a55610f0e565b610f0a600a5482611041565b600a555b600160a060020a0383166000908152600960205260409020805460ff19168315151790555b5b505050565b60096020526000908152604090205460ff1681565b600160a060020a03331660009081526001602052604090205460ff161515610f7257fe5b600160a060020a0382166000908152600d60205260409020620151808202420190555b5b5050565b600160a060020a038083166000908152600760209081526040808320938516835292905220545b92915050565b60005433600160a060020a03908116911614610fdf57fe5b610fe881611097565b600160a060020a038082166000908152600160208190526040808320805460ff199081169093179055339093168252919020805490911690555b5b50565b600a5481565b60016020526000908152604090205460ff1681565b60008183101561104d57fe5b508082035b92915050565b61106183610b90565b151561106c57600080fd5b610f338383836110f7565b5b505050565b60008282018381101561108c57fe5b8091505b5092915050565b60005433600160a060020a039081169116146110af57fe5b600054600160a060020a03828116911614156110ca57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b611102838383611192565b600160a060020a0382166000908152600b602052604090205460ff1615610f335781600160a060020a0316637d24a8a1848360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561117757600080fd5b6102c65a03f1151561118857600080fd5b5050505b5b505050565b600854600160a060020a03161561121b57600854600160a060020a03166354fbed3784848460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b151561120657600080fd5b6102c65a03f1151561121757600080fd5b5050505b600160a060020a03831660009081526009602052604090205460ff161561124c57611248600a5482611041565b600a555b600160a060020a03821660009081526009602052604090205460ff161561127d57611279600a548261107d565b600a555b610f3383838361128e565b5b505050565b600160a060020a0383166000908152600660205260409020546112b19082611041565b600160a060020a0380851660009081526006602052604080822093909355908416815220546112e0908261107d565b600160a060020a0383166000908152600660205260409020555b5050505600a165627a7a72305820474149328d7edafd2632a1df93a432971d50262829325ad61f7e45b82a3cd3d1002900000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000000000012",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000000000012"
}