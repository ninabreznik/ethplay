{
  "address": "0xf09209cc5eae846ee2cc4a493e7b962ca7bcfbbb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RLC",
  "compilerVersion": "v0.4.12+commit.194ff033",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-20\n*/\n\npragma solidity ^0.4.8;\n\ncontract ERC20 {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function allowance(address owner, address spender) constant returns (uint);\n\n  function transfer(address to, uint value) returns (bool ok);\n  function transferFrom(address from, address to, uint value) returns (bool ok);\n  function approve(address spender, uint value) returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\ncontract Ownable {\n  address public owner;\n\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    if (msg.sender == owner)\n      _;\n  }\n\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) owner = newOwner;\n  }\n\n}\n\ncontract TokenSpender {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n}\n\ncontract SafeMath {\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\ncontract PullPayment {\n  mapping(address => uint) public payments;\n  event RefundETH(address to, uint value);\n  // store sent amount as credit to be pulled, called by payer\n  function asyncSend(address dest, uint amount) internal {\n    payments[dest] += amount;\n  }\n\n  // withdraw accumulated balance, called by payee\n  function withdrawPayments() {\n    address payee = msg.sender;\n    uint payment = payments[payee];\n    \n    if (payment == 0) {\n      throw;\n    }\n\n    if (this.balance < payment) {\n      throw;\n    }\n\n    payments[payee] = 0;\n\n    if (!payee.send(payment)) {\n      throw;\n    }\n    RefundETH(payee,payment);\n  }\n}\n\ncontract Pausable is Ownable {\n  bool public stopped;\n\n  modifier stopInEmergency {\n    if (stopped) {\n      throw;\n    }\n    _;\n  }\n  \n  modifier onlyInEmergency {\n    if (!stopped) {\n      throw;\n    }\n    _;\n  }\n\n  // called by the owner on emergency, triggers stopped state\n  function emergencyStop() external onlyOwner {\n    stopped = true;\n  }\n\n  // called by the owner on end of emergency, returns to normal state\n  function release() external onlyOwner onlyInEmergency {\n    stopped = false;\n  }\n\n}\n\n\ncontract RLC is ERC20, SafeMath, Ownable {\n\n    /* Public variables of the token */\n  string public name;       //fancy name\n  string public symbol;\n  uint8 public decimals;    //How many decimals to show.\n  string public version = 'v0.1'; \n  uint public initialSupply;\n  uint public totalSupply;\n  bool public locked;\n  //uint public unlockBlock;\n\n  mapping(address => uint) balances;\n  mapping (address => mapping (address => uint)) allowed;\n\n  // lock transfer during the ICO\n  modifier onlyUnlocked() {\n    if (msg.sender != owner && locked) throw;\n    _;\n  }\n\n  /*\n   *  The RLC Token created with the time at which the crowdsale end\n   */\n\n  function RLC() {\n    // lock the transfer function during the crowdsale\n    locked = true;\n    //unlockBlock=  now + 45 days; // (testnet) - for mainnet put the block number\n\n    initialSupply = 87000000000000000;\n    totalSupply = initialSupply;\n    balances[msg.sender] = initialSupply;// Give the creator all initial tokens                    \n    name = 'iEx.ec Network Token';        // Set the name for display purposes     \n    symbol = 'RLC';                       // Set the symbol for display purposes  \n    decimals = 9;                        // Amount of decimals for display purposes\n  }\n\n  function unlock() onlyOwner {\n    locked = false;\n  }\n\n  function burn(uint256 _value) returns (bool){\n    balances[msg.sender] = safeSub(balances[msg.sender], _value) ;\n    totalSupply = safeSub(totalSupply, _value);\n    Transfer(msg.sender, 0x0, _value);\n    return true;\n  }\n\n  function transfer(address _to, uint _value) onlyUnlocked returns (bool) {\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint _value) onlyUnlocked returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n    \n    balances[_to] = safeAdd(balances[_to], _value);\n    balances[_from] = safeSub(balances[_from], _value);\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint _value) returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n    /* Approve and then comunicate the approved contract in a single tx */\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData){    \n      TokenSpender spender = TokenSpender(_spender);\n      if (approve(_spender, _value)) {\n          spender.receiveApproval(msg.sender, _value, this, _extraData);\n      }\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n  \n}\n\n\n\n\ncontract Crowdsale is SafeMath, PullPayment, Pausable {\n\n  \tstruct Backer {\n\t\tuint weiReceived;\t// Amount of ETH given\n\t\tstring btc_address;  //store the btc address for full traceability\n\t\tuint satoshiReceived;\t// Amount of BTC given\n\t\tuint rlcSent;\n\t}\n\n\tRLC \tpublic rlc;         // RLC contract reference\n\taddress public owner;       // Contract owner (iEx.ec team)\n\taddress public multisigETH; // Multisig contract that will receive the ETH\n\taddress public BTCproxy;\t// address of the BTC Proxy\n\n\tuint public RLCPerETH;      // Number of RLC per ETH\n\tuint public RLCPerSATOSHI;  // Number of RLC per SATOSHI\n\tuint public ETHReceived;    // Number of ETH received\n\tuint public BTCReceived;    // Number of BTC received\n\tuint public RLCSentToETH;   // Number of RLC sent to ETH contributors\n\tuint public RLCSentToBTC;   // Number of RLC sent to BTC contributors\n\tuint public startBlock;     // Crowdsale start block\n\tuint public endBlock;       // Crowdsale end block\n\tuint public minCap;         // Minimum number of RLC to sell\n\tuint public maxCap;         // Maximum number of RLC to sell\n\tbool public maxCapReached;  // Max cap has been reached\n\tuint public minInvestETH;   // Minimum amount to invest\n\tuint public minInvestBTC;   // Minimum amount to invest\n\tbool public crowdsaleClosed;// Is crowdsale still on going\n\n\taddress public bounty;\t\t// address at which the bounty RLC will be sent\n\taddress public reserve; \t// address at which the contingency reserve will be sent\n\taddress public team;\t\t// address at which the team RLC will be sent\n\n\tuint public rlc_bounty;\t\t// amount of bounties RLC\n\tuint public rlc_reserve;\t// amount of the contingency reserve\n\tuint public rlc_team;\t\t// amount of the team RLC \n\tmapping(address => Backer) public backers; //backersETH indexed by their ETH address\n\n\tmodifier onlyBy(address a){\n\t\tif (msg.sender != a) throw;  \n\t\t_;\n\t}\n\n\tmodifier minCapNotReached() {\n\t\tif ((now<endBlock) || RLCSentToETH + RLCSentToBTC >= minCap ) throw;\n\t\t_;\n\t}\n\n\tmodifier respectTimeFrame() {\n\t\tif ((now < startBlock) || (now > endBlock )) throw;\n\t\t_;\n\t}\n\n\t/*\n\t* Event\n\t*/\n\tevent ReceivedETH(address addr, uint value);\n\tevent ReceivedBTC(address addr, string from, uint value, string txid);\n\tevent RefundBTC(string to, uint value);\n\tevent Logs(address indexed from, uint amount, string value);\n\n\t/*\n\t*\tConstructor\n\t*/\n\t//function Crowdsale() {\n\tfunction Crowdsale() {\n\t\towner = msg.sender;\n\t\tBTCproxy = 0x75c6cceb1a33f177369053f8a0e840de96b4ed0e;\n\t\trlc = RLC(0x6031203f6D83A674a43528A1eBd4b4129F5526CC);\n\t\tmultisigETH = 0xAe307e3871E5A321c0559FBf0233A38c937B826A;\n\t\tteam = 0xd65380D773208a6Aa49472Bf55186b855B393298;\n\t\treserve = 0x24F6b37770C6067D05ACc2aD2C42d1Bafde95d48;\n\t\tbounty = 0x8226a24dA0870Fb8A128E4Fc15228a9c4a5baC29;\n\t\tRLCSentToETH = 0;\n\t\tRLCSentToBTC = 0;\n\t\tminInvestETH = 1 ether;\n\t\tminInvestBTC = 5000000;\t\t\t// approx 50 USD or 0.05000000 BTC\n\t\tstartBlock = 0 ;            \t// should wait for the call of the function start\n\t\tendBlock =  0;  \t\t\t\t// should wait for the call of the function start\n\t\tRLCPerETH = 200000000000;\t\t// will be update every 10min based on the kraken ETHBTC\n\t\tRLCPerSATOSHI = 50000;\t\t\t// 5000 RLC par BTC == 50,000 RLC per satoshi\n\t\tminCap=12000000000000000;\n\t\tmaxCap=60000000000000000;\n\t\trlc_bounty=1700000000000000;\t// max 6000000 RLC\n\t\trlc_reserve=1700000000000000;\t// max 6000000 RLC\n\t\trlc_team=12000000000000000;\n\t}\n\n\t/* \n\t * The fallback function corresponds to a donation in ETH\n\t */\n\tfunction() payable {\n\t\tif (now > endBlock) throw;\n\t\treceiveETH(msg.sender);\n\t}\n\n\t/* \n\t * To call to start the crowdsale\n\t */\n\tfunction start() onlyBy(owner) {\n\t\tstartBlock = now ;            \n\t\tendBlock =  now + 30 days;    \n\t}\n\n\t/*\n\t*\tReceives a donation in ETH\n\t*/\n\tfunction receiveETH(address beneficiary) internal stopInEmergency  respectTimeFrame  {\n\t\tif (msg.value < minInvestETH) throw;\t\t\t\t\t\t\t\t//don't accept funding under a predefined threshold\n\t\tuint rlcToSend = bonus(safeMul(msg.value,RLCPerETH)/(1 ether));\t\t//compute the number of RLC to send\n\t\tif (safeAdd(rlcToSend, safeAdd(RLCSentToETH, RLCSentToBTC)) > maxCap) throw;\t\n\n\t\tBacker backer = backers[beneficiary];\n\t\tif (!rlc.transfer(beneficiary, rlcToSend)) throw;     \t\t\t\t// Do the RLC transfer right now \n\t\tbacker.rlcSent = safeAdd(backer.rlcSent, rlcToSend);\n\t\tbacker.weiReceived = safeAdd(backer.weiReceived, msg.value);\t\t// Update the total wei collected during the crowdfunding for this backer    \n\t\tETHReceived = safeAdd(ETHReceived, msg.value);\t\t\t\t\t\t// Update the total wei collected during the crowdfunding\n\t\tRLCSentToETH = safeAdd(RLCSentToETH, rlcToSend);\n\n\t\temitRLC(rlcToSend);\t\t\t\t\t\t\t\t\t\t\t\t\t// compute the variable part \n\t\tReceivedETH(beneficiary,ETHReceived);\t\t\t\t\t\t\t\t// send the corresponding contribution event\n\t}\n\t\n\t/*\n\t* receives a donation in BTC\n\t*/\n\tfunction receiveBTC(address beneficiary, string btc_address, uint value, string txid) stopInEmergency respectTimeFrame onlyBy(BTCproxy) returns (bool res){\n\t\tif (value < minInvestBTC) throw;\t\t\t\t\t\t\t\t\t\t\t// this verif is also made on the btcproxy\n\n\t\tuint rlcToSend = bonus(safeMul(value,RLCPerSATOSHI));\t\t\t\t\t\t//compute the number of RLC to send\n\t\tif (safeAdd(rlcToSend, safeAdd(RLCSentToETH, RLCSentToBTC)) > maxCap) {\t\t// check if we are not reaching the maxCap by accepting this donation\n\t\t\tRefundBTC(btc_address , value);\n\t\t\treturn false;\n\t\t}\n\n\t\tBacker backer = backers[beneficiary];\n\t\tif (!rlc.transfer(beneficiary, rlcToSend)) throw;\t\t\t\t\t\t\t// Do the transfer right now \n\t\tbacker.rlcSent = safeAdd(backer.rlcSent , rlcToSend);\n\t\tbacker.btc_address = btc_address;\n\t\tbacker.satoshiReceived = safeAdd(backer.satoshiReceived, value);\n\t\tBTCReceived =  safeAdd(BTCReceived, value);\t\t\t\t\t\t\t\t\t// Update the total satoshi collected during the crowdfunding for this backer\n\t\tRLCSentToBTC = safeAdd(RLCSentToBTC, rlcToSend);\t\t\t\t\t\t\t// Update the total satoshi collected during the crowdfunding\n\t\temitRLC(rlcToSend);\n\t\tReceivedBTC(beneficiary, btc_address, BTCReceived, txid);\n\t\treturn true;\n\t}\n\n\t/*\n\t *Compute the variable part\n\t */\n\tfunction emitRLC(uint amount) internal {\n\t\trlc_bounty = safeAdd(rlc_bounty, amount/10);\n\t\trlc_team = safeAdd(rlc_team, amount/20);\n\t\trlc_reserve = safeAdd(rlc_reserve, amount/10);\n\t\tLogs(msg.sender ,amount, \"emitRLC\");\n\t}\n\n\t/*\n\t *Compute the RLC bonus according to the investment period\n\t */\n\tfunction bonus(uint amount) internal constant returns (uint) {\n\t\tif (now < safeAdd(startBlock, 10 days)) return (safeAdd(amount, amount/5));   // bonus 20%\n\t\tif (now < safeAdd(startBlock, 20 days)) return (safeAdd(amount, amount/10));  // bonus 10%\n\t\treturn amount;\n\t}\n\n\t/* \n\t * When mincap is not reach backer can call the approveAndCall function of the RLC token contract\n\t * with this crowdsale contract on parameter with all the RLC they get in order to be refund\n\t */\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) minCapNotReached public {\n\t\tif (msg.sender != address(rlc)) throw; \n\t\tif (_extraData.length != 0) throw;\t\t\t\t\t\t\t\t// no extradata needed\n\t\tif (_value != backers[_from].rlcSent) throw;\t\t\t\t\t// compare value from backer balance\n\t\tif (!rlc.transferFrom(_from, address(this), _value)) throw ;\t// get the token back to the crowdsale contract\n\t\tif (!rlc.burn(_value)) throw ;\t\t\t\t\t\t\t\t\t// token sent for refund are burnt\n\t\tuint ETHToSend = backers[_from].weiReceived;\n\t\tbackers[_from].weiReceived=0;\n\t\tuint BTCToSend = backers[_from].satoshiReceived;\n\t\tbackers[_from].satoshiReceived = 0;\n\t\tif (ETHToSend > 0) {\n\t\t\tasyncSend(_from,ETHToSend);\t\t\t\t\t\t\t\t\t// pull payment to get refund in ETH\n\t\t}\n\t\tif (BTCToSend > 0)\n\t\t\tRefundBTC(backers[_from].btc_address ,BTCToSend);\t\t\t// event message to manually refund BTC\n\t}\n\n\t/*\n\t* Update the rate RLC per ETH, computed externally by using the ETHBTC index on kraken every 10min\n\t*/\n\tfunction setRLCPerETH(uint rate) onlyBy(BTCproxy) {\n\t\tRLCPerETH=rate;\n\t}\n\t\n\t/*\t\n\t* Finalize the crowdsale, should be called after the refund period\n\t*/\n\tfunction finalize() onlyBy(owner) {\n\t\t// check\n\t\tif (RLCSentToETH + RLCSentToBTC < maxCap - 5000000000000 && now < endBlock) throw;\t// cannot finalise before 30 day until maxcap is reached minus 1BTC\n\t\tif (RLCSentToETH + RLCSentToBTC < minCap && now < endBlock + 15 days) throw ;\t\t// if mincap is not reached donors have 15days to get refund before we can finalise\n\t\tif (!multisigETH.send(this.balance)) throw;\t\t\t\t\t\t\t\t\t\t\t// moves the remaining ETH to the multisig address\n\t\tif (rlc_reserve > 6000000000000000){\t\t\t\t\t\t\t\t\t\t\t\t// moves RLC to the team, reserve and bounty address\n\t\t\tif(!rlc.transfer(reserve,6000000000000000)) throw;\t\t\t\t\t\t\t\t// max cap 6000000RLC\n\t\t\trlc_reserve = 6000000000000000;\n\t\t} else {\n\t\t\tif(!rlc.transfer(reserve,rlc_reserve)) throw;  \n\t\t}\n\t\tif (rlc_bounty > 6000000000000000){\n\t\t\tif(!rlc.transfer(bounty,6000000000000000)) throw;\t\t\t\t\t\t\t\t// max cap 6000000RLC\n\t\t\trlc_bounty = 6000000000000000;\n\t\t} else {\n\t\t\tif(!rlc.transfer(bounty,rlc_bounty)) throw;\n\t\t}\n\t\tif (!rlc.transfer(team,rlc_team)) throw;\n\t\tuint RLCEmitted = rlc_reserve + rlc_bounty + rlc_team + RLCSentToBTC + RLCSentToETH;\n\t\tif (RLCEmitted < rlc.totalSupply())\t\t\t\t\t\t\t\t\t\t\t\t\t// burn the rest of RLC\n\t\t\t  rlc.burn(rlc.totalSupply() - RLCEmitted);\n\t\trlc.unlock();\n\t\tcrowdsaleClosed = true;\n\t}\n\n\t/*\t\n\t* Failsafe drain\n\t*/\n\tfunction drain() onlyBy(owner) {\n\t\tif (!owner.send(this.balance)) throw;\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405260408051908101604052600481527f76302e31000000000000000000000000000000000000000000000000000000006020820152600590805161004b929160200190610153565b50341561005757600080fd5b5b5b60018054600160a060020a03191633600160a060020a03161790555b6008805460ff191660011790556701351609ff75800060068190556007819055600160a060020a03331660009081526009602052604090819020919091558051908101604052601481527f6945782e6563204e6574776f726b20546f6b656e000000000000000000000000602082015260029080516100f8929160200190610153565b506040805190810160405260038082527f524c430000000000000000000000000000000000000000000000000000000000602083015290805161013f929160200190610153565b506004805460ff191660091790555b6101f3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061019457805160ff19168380011785556101c1565b828001600101855582156101c1579182015b828111156101c15782518255916020019190600101906101a6565b5b506101ce9291506101d2565b5090565b6101f091905b808211156101ce57600081556001016101d8565b5090565b90565b610cc1806102026000396000f300606060405236156100ee5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f3578063095ea7b31461017e57806318160ddd146101b457806323b872dd146101d9578063313ce56714610215578063378dc3dc1461023e57806342966c681461026357806354fd4d501461028d57806370a08231146103185780638da5cb5b1461034957806395d89b4114610378578063a69df4b514610403578063a9059cbb14610418578063cae9ca511461044e578063cf309012146104b5578063dd62ed3e146104dc578063f2fde38b14610513575b600080fd5b34156100fe57600080fd5b610106610534565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018957600080fd5b6101a0600160a060020a03600435166024356105d2565b604051901515815260200160405180910390f35b34156101bf57600080fd5b6101c761063f565b60405190815260200160405180910390f35b34156101e457600080fd5b6101a0600160a060020a0360043581169060243516604435610645565b604051901515815260200160405180910390f35b341561022057600080fd5b610228610777565b60405160ff909116815260200160405180910390f35b341561024957600080fd5b6101c7610780565b60405190815260200160405180910390f35b341561026e57600080fd5b6101a0600435610786565b604051901515815260200160405180910390f35b341561029857600080fd5b61010661081a565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561032357600080fd5b6101c7600160a060020a03600435166108b8565b60405190815260200160405180910390f35b341561035457600080fd5b61035c6108d7565b604051600160a060020a03909116815260200160405180910390f35b341561038357600080fd5b6101066108e6565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561040e57600080fd5b610416610984565b005b341561042357600080fd5b6101a0600160a060020a03600435166024356109aa565b604051901515815260200160405180910390f35b341561045957600080fd5b61041660048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610a8d95505050505050565b005b34156104c057600080fd5b6101a0610bb9565b604051901515815260200160405180910390f35b34156104e757600080fd5b6101c7600160a060020a0360043581169060243516610bc2565b60405190815260200160405180910390f35b341561051e57600080fd5b610416600160a060020a0360043516610bef565b005b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105ca5780601f1061059f576101008083540402835291602001916105ca565b820191906000526020600020905b8154815290600101906020018083116105ad57829003601f168201915b505050505081565b600160a060020a033381166000818152600a6020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60075481565b600154600090819033600160a060020a0390811691161480159061066b575060085460ff165b1561067557600080fd5b50600160a060020a038085166000908152600a602090815260408083203385168452825280832054938716835260099091529020546106b49084610c44565b600160a060020a0380861660009081526009602052604080822093909355908716815220546106e39084610c6c565b600160a060020a0386166000908152600960205260409020556107068184610c6c565b600160a060020a038087166000818152600a6020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b5b509392505050565b60045460ff1681565b60065481565b600160a060020a0333166000908152600960205260408120546107a99083610c6c565b600160a060020a0333166000908152600960205260409020556007546107cf9083610c6c565b6007556000600160a060020a0333167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b919050565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105ca5780601f1061059f576101008083540402835291602001916105ca565b820191906000526020600020905b8154815290600101906020018083116105ad57829003601f168201915b505050505081565b600160a060020a0381166000908152600960205260409020545b919050565b600154600160a060020a031681565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105ca5780601f1061059f576101008083540402835291602001916105ca565b820191906000526020600020905b8154815290600101906020018083116105ad57829003601f168201915b505050505081565b60015433600160a060020a03908116911614156109a6576008805460ff191690555b5b5b565b60015460009033600160a060020a039081169116148015906109ce575060085460ff165b156109d857600080fd5b600160a060020a0333166000908152600960205260409020546109fb9083610c6c565b600160a060020a033381166000908152600960205260408082209390935590851681522054610a2a9083610c44565b600160a060020a0380851660008181526009602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b5b92915050565b82610a9881846105d2565b15610bb25780600160a060020a0316638f4ffcb1338530866040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b4f5780820151818401525b602001610b36565b50505050905090810190601f168015610b7c5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610b9d57600080fd5b6102c65a03f11515610bae57600080fd5b5050505b5b50505050565b60085460ff1681565b600160a060020a038083166000908152600a60209081526040808320938516835292905220545b92915050565b60015433600160a060020a0390811691161415610c3e57600160a060020a03811615610c3e576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b5b50565b6000828201610c61848210801590610c5c5750838210155b610c85565b8091505b5092915050565b6000610c7a83831115610c85565b508082035b92915050565b801515610c3e57600080fd5b5b505600a165627a7a72305820663fae0502006a8c744274ff13aa9047a951788032dc9aec964d87b5ad3a63380029"
}