{
  "address": "0x7b5a91d0915f01e46f18becba0560e900228afae",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LuckySeven",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-27\n*/\n\npragma solidity ^0.4.24;\n\n/*\n    Lucky 7 - https://luckyseven.me/\n    7% Daily from your investment! Small dev fee - 3.5%,\n*/\n\ncontract LuckySeven {\n\n    using SafeMath for uint256;\n\n    mapping(address => uint256) investments;\n    mapping(address => uint256) joined;\n    mapping(address => uint256) withdrawals;\n    mapping(address => uint256) referrer;\n\n    uint256 public step = 7;\n    uint256 public minimum = 10 finney;\n    uint256 public stakingRequirement = 0.5 ether;\n    address public ownerWallet;\n    address public owner;\n    bool public gameStarted;\n\n    event Invest(address investor, uint256 amount);\n    event Withdraw(address investor, uint256 amount);\n    event Bounty(address hunter, uint256 amount);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Ð¡onstructor Sets the original roles of the contract\n     */\n\n    constructor() public {\n        owner = msg.sender;\n        ownerWallet = msg.sender;\n    }\n\n    /**\n     * @dev Modifiers\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function startGame() public onlyOwner {\n        gameStarted = true;\n    }\n\n    /**\n     * @dev Allows current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     * @param newOwnerWallet The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner, address newOwnerWallet) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        ownerWallet = newOwnerWallet;\n    }\n\n    /**\n     * @dev Investments\n     */\n    function () public payable {\n        buy(0x0);\n    }\n\n    function buy(address _referredBy) public payable {\n        require(msg.value >= minimum);\n        require(gameStarted);\n\n        address _customerAddress = msg.sender;\n\n        if(\n           // is this a referred purchase?\n           _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n           // no cheating!\n           _referredBy != _customerAddress &&\n\n           // does the referrer have at least X whole tokens?\n           // i.e is the referrer a godly chad masternode\n           investments[_referredBy] >= stakingRequirement\n       ){\n           // wealth redistribution\n           referrer[_referredBy] = referrer[_referredBy].add(msg.value.mul(85).div(1000));\n       }\n\n       if (investments[msg.sender] > 0){\n           if (withdraw()){\n               withdrawals[msg.sender] = 0;\n           }\n       }\n       investments[msg.sender] = investments[msg.sender].add(msg.value);\n       joined[msg.sender] = block.timestamp;\n       \n       // 3.5% dev fee\n       ownerWallet.transfer(msg.value.mul(35).div(1000));\n       emit Invest(msg.sender, msg.value);\n    }\n\n    /**\n    * @dev Evaluate current balance\n    * @param _address Address of investor\n    */\n    function getBalance(address _address) view public returns (uint256) {\n        uint256 minutesCount = now.sub(joined[_address]).div(1 minutes);\n        uint256 percent = investments[_address].mul(step).div(100);\n        uint256 different = percent.mul(minutesCount).div(1440);\n        uint256 balance = different.sub(withdrawals[_address]);\n\n        return balance;\n    }\n\n    /**\n    * @dev Withdraw dividends from contract\n    */\n    function withdraw() public returns (bool){\n        require(joined[msg.sender] > 0);\n        uint256 balance = getBalance(msg.sender);\n        if (address(this).balance > balance){\n            if (balance > 0){\n                withdrawals[msg.sender] = withdrawals[msg.sender].add(balance);\n                msg.sender.transfer(balance);\n                emit Withdraw(msg.sender, balance);\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n    * @dev Bounty reward\n    */\n    function bounty() public {\n        uint256 refBalance = checkReferral(msg.sender);\n        if(refBalance >= minimum) {\n             if (address(this).balance > refBalance) {\n                referrer[msg.sender] = 0;\n                msg.sender.transfer(refBalance);\n                emit Bounty(msg.sender, refBalance);\n             }\n        }\n    }\n\n    /**\n    * @dev Gets balance of the sender address.\n    * @return An uint256 representing the amount owned by the msg.sender.\n    */\n    function checkBalance() public view returns (uint256) {\n        return getBalance(msg.sender);\n    }\n\n    /**\n    * @dev Gets withdrawals of the specified address.\n    * @param _investor The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function checkWithdrawals(address _investor) public view returns (uint256) {\n        return withdrawals[_investor];\n    }\n\n    /**\n    * @dev Gets investments of the specified address.\n    * @param _investor The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function checkInvestments(address _investor) public view returns (uint256) {\n        return investments[_investor];\n    }\n\n    /**\n    * @dev Gets referrer balance of the specified address.\n    * @param _hunter The address of the referrer\n    * @return An uint256 representing the referral earnings.\n    */\n    function checkReferral(address _hunter) public view returns (uint256) {\n        return referrer[_hunter];\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "60806040526007600455662386f26fc100006005556706f05b59d3b2000060065534801561002c57600080fd5b506008805433600160a060020a031991821681179092556007805490911690911790556109338061005e6000396000f3006080604052600436106100e55763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c19f80e81146100f15780633ccfd60b1461012457806352d6804d1461014d57806356d399e8146101625780635e123ce4146101775780636d4354211461018c578063835c1154146101b35780638da5cb5b146101d45780639335dcb714610205578063943dfef11461021a5780639d9fcc721461022f578063c71daccb14610250578063d65ab5f214610265578063e25fe1751461027a578063f088d5471461028f578063f8b2cb4f146102a3575b6100ef60006102c4565b005b3480156100fd57600080fd5b50610112600160a060020a03600435166104b8565b60408051918252519081900360200190f35b34801561013057600080fd5b506101396104d3565b604080519115158252519081900360200190f35b34801561015957600080fd5b506101126105ba565b34801561016e57600080fd5b506101126105c0565b34801561018357600080fd5b506101396105c6565b34801561019857600080fd5b506100ef600160a060020a03600435811690602435166105e7565b3480156101bf57600080fd5b50610112600160a060020a0360043516610688565b3480156101e057600080fd5b506101e96106a3565b60408051600160a060020a039092168252519081900360200190f35b34801561021157600080fd5b506101e96106b2565b34801561022657600080fd5b506100ef6106c1565b34801561023b57600080fd5b50610112600160a060020a036004351661075c565b34801561025c57600080fd5b50610112610777565b34801561027157600080fd5b506100ef610787565b34801561028657600080fd5b506101126107d5565b6100ef600160a060020a03600435166102c4565b3480156102af57600080fd5b50610112600160a060020a03600435166107db565b6005546000903410156102d657600080fd5b60085474010000000000000000000000000000000000000000900460ff1615156102ff57600080fd5b5033600160a060020a0382161580159061032b575080600160a060020a031682600160a060020a031614155b80156103515750600654600160a060020a03831660009081526020819052604090205410155b156103bb576103a161037c6103e861037034605563ffffffff61089916565b9063ffffffff6108cf16565b600160a060020a0384166000908152600360205260409020549063ffffffff6108e616565b600160a060020a0383166000908152600360205260409020555b3360009081526020819052604081205411156103ef576103d96104d3565b156103ef57336000908152600260205260408120555b3360009081526020819052604090205461040f903463ffffffff6108e616565b33600090815260208181526040808320939093556001905220429055600754600160a060020a03166108fc6104516103e861037034602363ffffffff61089916565b6040518115909202916000818181858888f19350505050158015610479573d6000803e3d6000fd5b506040805133815234602082015281517fd90d253a9de34d2fdd5a75ae49ea17fcb43af32fc8ea08cc6d2341991dd3872e929181900390910190a15050565b600160a060020a031660009081526003602052604090205490565b33600090815260016020526040812054819081106104f057600080fd5b6104f9336107db565b905030318110156105b15760008111156105a8573360009081526002602052604090205461052d908263ffffffff6108e616565b33600081815260026020526040808220939093559151909183156108fc02918491818181858888f1935050505015801561056b573d6000803e3d6000fd5b50604080513381526020810183905281517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364929181900390910190a15b600191506105b6565b600091505b5090565b60055481565b60065481565b60085474010000000000000000000000000000000000000000900460ff1681565b600854600160a060020a031633146105fe57600080fd5b600160a060020a038216151561061357600080fd5b600854604051600160a060020a038085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360088054600160a060020a0393841673ffffffffffffffffffffffffffffffffffffffff199182161790915560078054929093169116179055565b600160a060020a031660009081526020819052604090205490565b600854600160a060020a031681565b600754600160a060020a031681565b60006106cc336104b8565b600554909150811061075957303181101561075957336000818152600360205260408082208290555183156108fc0291849190818181858888f1935050505015801561071c573d6000803e3d6000fd5b50604080513381526020810183905281517f4cc4e2a1284006914465e82a99bce908c3ad5b5d4b08fbef40faf68169cee2a8929181900390910190a15b50565b600160a060020a031660009081526002602052604090205490565b6000610782336107db565b905090565b600854600160a060020a0316331461079e57600080fd5b6008805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b60045481565b600160a060020a038116600090815260016020526040812054819081908190819061081490603c9061037090429063ffffffff6108f516565b600454600160a060020a03881660009081526020819052604090205491955061084a91606491610370919063ffffffff61089916565b92506108626105a0610370858763ffffffff61089916565b600160a060020a03871660009081526002602052604090205490925061088f90839063ffffffff6108f516565b9695505050505050565b6000808315156108ac57600091506108c8565b508282028284828115156108bc57fe5b04146108c457fe5b8091505b5092915050565b60008082848115156108dd57fe5b04949350505050565b6000828201838110156108c457fe5b60008282111561090157fe5b509003905600a165627a7a723058206c25c0dd2bfa242afcdeba2c8a0463c6d16b945eda75f70ca08e507a867e3c020029"
}