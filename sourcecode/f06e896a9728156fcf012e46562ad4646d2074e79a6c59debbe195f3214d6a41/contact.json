{
  "address": "0x058a144951e062fc14f310057d2fd9ef0cf5095b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HourglassX",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "2900",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-04\n*/\n\npragma solidity ^0.5.0;\n/* Oh wow, it's finally happening /*\n╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\n║           $$$$$$$\\            $$\\      $$\\ $$\\   $$\\        $$$$$$\\  $$$$$$$\\        $$$$$$$$\\                       ║\n║           $$  __$$\\           $$ | $\\  $$ |$$ |  $$ |      $$ ___$$\\ $$  __$$\\       $$  _____|                      ║\n║           $$ |  $$ | $$$$$$\\  $$ |$$$\\ $$ |$$ |  $$ |      \\_/   $$ |$$ |  $$ |      $$ |      $$\\   $$\\             ║\n║           $$$$$$$  |$$  __$$\\ $$ $$ $$\\$$ |$$$$$$$$ |        $$$$$ / $$ |  $$ |      $$$$$\\    \\$$\\ $$  |            ║\n║           $$  ____/ $$ /  $$ |$$$$  _$$$$ |$$  __$$ |        \\___$$\\ $$ |  $$ |      $$  __|    \\$$$$  /             ║\n║           $$ |      $$ |  $$ |$$$  / \\$$$ |$$ |  $$ |      $$\\   $$ |$$ |  $$ |      $$ |       $$  $$<              ║\n║           $$ |      \\$$$$$$  |$$  /   \\$$ |$$ |  $$ |      \\$$$$$$  |$$$$$$$  |      $$$$$$$$\\ $$  /\\$$\\             ║\n║           \\__|       \\______/ \\__/     \\__|\\__|  \\__|       \\______/ \\_______/       \\________|\\__/  \\__|            ║\n║                                                                                                                      ║\n╠══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣\n║           _____                  __          __  __          __        _      _    _                 _               ║\n║          |  __ \\                / _|        / _| \\ \\        / /       | |    | |  | |               | |              ║\n║          | |__) | __ ___   ___ | |_    ___ | |_   \\ \\  /\\  / /__  __ _| | __ | |__| | __ _ _ __   __| |___           ║\n║          |  ___/ '__/ _ \\ / _ \\|  _|  / _ \\|  _|   \\ \\/  \\/ / _ \\/ _` | |/ / |  __  |/ _` | '_ \\ / _` / __|          ║\n║          | |   | | | (_) | (_) | |   | (_) | |      \\  /\\  /  __/ (_| |   <  | |  | | (_| | | | | (_| \\__ \\          ║\n║          |_|   |_|  \\___/ \\___/|_|    \\___/|_|       \\/  \\/ \\___|\\__,_|_|\\_\\ |_|  |_|\\__,_|_| |_|\\__,_|___/          ║\n║                       ____  _____        ________   _________ ______ _   _ _____  ______ _____                       ║\n║                      |___ \\|  __ \\   _  |  ____\\ \\ / /__   __|  ____| \\ | |  __ \\|  ____|  __ \\                      ║\n║                        __) | |  | | (_) | |__   \\ V /   | |  | |__  |  \\| | |  | | |__  | |  | |                     ║\n║                       |__ <| |  | |     |  __|   > <    | |  |  __| | . ` | |  | |  __| | |  | |                     ║\n║                       ___) | |__| |  _  | |____ / . \\   | |  | |____| |\\  | |__| | |____| |__| |                     ║\n║                      |____/|_____/  (_) |______/_/ \\_\\  |_|  |______|_| \\_|_____/|______|_____/                      ║\n║                                             ╔══════════════════════════╗                                             ║\n╚═════════════════════════════════════════════╣ Created by ARitz Cracker ╠═════════════════════════════════════════════╝\n\t\t\t\t\t\t\t\t\t\t\t  ╚══════════════════════════╝\n\nIn a world, where  people wanted more 3rd party dApp integration with P3D, a small \"Jack of all trades\" developer,\nARitz Cracker set out to create an addon-token for P3D that would add the functionality required for 3rd party dApp\nintegration. However, while creating this, he had another calling... Replacing web3js and Metamask a grand feat, for\nsure. Unfortunately, this left the extension token aside. One man took advantage of this functionality-vacuum and\ncreated his own extension, but it was forged by greed... and would force its users to pay additional fees and taxes to\nthe creator and anyone he saw fit. ARitz Cracker saw this as a sign... \"People need community focused dApp extensions\nnow!\" And so, he set out to have it completed, audited, and ready for the community as soon as possible... In order to\nprevent the greedy ones from taking power away from the community.\n\nThus, P3X was born.\n\nSo, what does this thing actually do?\n* P3X is a utility token tethered to P3D.\n* The total P3X supply will always be equal to the amount of P3D bought by this contract.\n* P3X Price will always be equal to P3D price\n* Dividends per P3X token is the same as P3D\n* Functionally identical to P3D Exept:\n*   0% token fees on transfers\n*   Full ERC20 and ERC223 functionality, allowing for external dApps to _actually_ receive funds and interact with the contract.\n*   Optional gauntlets which prevent you from selling (literally!)\n*   For more information, please visit the wiki page: https://powh3d.hostedwiki.co/pages/What%20is%20P3X\n\nAlso, this is my f̶i̶r̶s̶t̶ second contract on main-net please be gentle :S\n*/\n\n// Interfaces for easy copypasta\n\ninterface ERC20interface {\n\tfunction transfer(address to, uint value) external returns(bool success);\n\tfunction approve(address spender, uint tokens) external returns(bool success);\n\tfunction transferFrom(address from, address to, uint tokens) external returns(bool success);\n\n\tfunction allowance(address tokenOwner, address spender) external view returns(uint remaining);\n\tfunction balanceOf(address tokenOwner) external view returns(uint balance);\n}\n\ninterface ERC223interface {\n\tfunction transfer(address to, uint value) external returns(bool ok);\n\tfunction transfer(address to, uint value, bytes calldata data) external returns(bool ok);\n\tfunction transfer(address to, uint value, bytes calldata data, string calldata customFallback) external returns(bool ok);\n\n\tfunction balanceOf(address who) external view returns(uint);\n}\n\n// If your contract wants to accept P3X, implement this function\ninterface ERC223Handler {\n\tfunction tokenFallback(address _from, uint _value, bytes calldata _data) external;\n}\n\n// External gauntlet interfaces can be useful for something like voting systems or contests\ninterface ExternalGauntletInterface {\n\tfunction gauntletRequirement(address wearer, uint256 oldAmount, uint256 newAmount) external returns(bool);\n\tfunction gauntletRemovable(address wearer) external view returns(bool);\n}\n\n// This is P3D itself (not a cimplete interface)\ninterface Hourglass {\n\tfunction decimals() external view returns(uint8);\n\tfunction stakingRequirement() external view returns(uint256);\n\tfunction balanceOf(address tokenOwner) external view returns(uint);\n\tfunction dividendsOf(address tokenOwner) external view returns(uint);\n\tfunction calculateTokensReceived(uint256 _ethereumToSpend) external view returns(uint256);\n\tfunction calculateEthereumReceived(uint256 _tokensToSell) external view returns(uint256);\n\tfunction myTokens() external view returns(uint256);\n\tfunction myDividends(bool _includeReferralBonus) external view returns(uint256);\n\tfunction totalSupply() external view returns(uint256);\n\n\tfunction transfer(address to, uint value) external returns(bool);\n\tfunction buy(address referrer) external payable returns(uint256);\n\tfunction sell(uint256 amount) external;\n\tfunction withdraw() external;\n}\n\n// This a name database used in Fomo3D (Also not a complete interface)\ninterface TeamJustPlayerBook {\n\tfunction pIDxName_(bytes32 name) external view returns(uint256);\n\tfunction pIDxAddr_(address addr) external view returns(uint256);\n\tfunction getPlayerAddr(uint256 pID) external view returns(address);\n}\n\n// Here's an interface in case you want to integration your dApp with this.\n// Descriptions of each function are down below in the soure code.\n// NOTE: It's not _entirely_ compatible with the P3D interface. myTokens() has been renamed to myBalance().\n/*\ninterface HourglassX {\n\tfunction buy(address referrerAddress) payable external returns(uint256 tokensReceieved);\n\tfunction buy(string calldata referrerName) payable external returns(uint256 tokensReceieved);\n\tfunction reinvest() external returns(uint256 tokensReceieved);\n\tfunction reinvestPartial(uint256 ethToReinvest) external returns(uint256 tokensReceieved);\n\tfunction reinvestPartial(uint256 ethToReinvest, bool withdrawAfter) external returns(uint256 tokensReceieved);\n\tfunction sell(uint256 amount, bool withdrawAfter) external returns(uint256 ethReceieved);\n\tfunction sell(uint256 amount) external returns(uint256 ethReceieved); // Alias of sell(amount, false)\n\tfunction withdraw() external;\n\tfunction exit() external;\n\tfunction acquireGauntlet(uint256 amount, uint8 gType, uint256 end) external;\n\tfunction acquireExternalGauntlet(uint256 amount, address extGauntlet) external;\n\tfunction setReferrer(address referrer) external;\n\tfunction setReferrer(string calldata referrerName) external;\n\n\tfunction myBalance() external view returns(uint256 balance);\n\tfunction dividendsOf(address accountHolder, bool includeReferralBonus) external view returns(uint256 divs);\n\tfunction dividendsOf(address accountHolder) external view returns(uint256 divs); // Alias of dividendsOf(accountHolder, true)\n\tfunction myDividends(bool includeReferralBonus) external view returns(uint256 divs);\n\tfunction myDividends() external view returns(uint256 divs); // Alias of myDividends(true);\n\n\tfunction usableBalanceOf(address accountHolder) external view returns(uint256 balance);\n\tfunction myUsableBalance() external view returns(uint256 balance);\n\tfunction refBonusOf(address customerAddress) external view returns(uint256);\n\tfunction myRefBonus() external view returns(uint256);\n\tfunction gauntletTypeOf(address accountHolder) external view returns(uint256 stakeAmount, uint256 gType, uint256 end);\n\tfunction myGauntletType() external view returns(uint256 stakeAmount, uint256 gType, uint256 end);\n\tfunction stakingRequirement() external view returns(uint256);\n\tfunction savedReferral(address accountHolder) external view returns(address);\n\n\t// ERC 20/223\n\tfunction balanceOf(address tokenOwner) external view returns(uint balance);\n\tfunction transfer(address to, uint value) external returns(bool ok);\n\tfunction transfer(address to, uint value, bytes data) external returns(bool ok);\n\tfunction transfer(address to, uint value, bytes data, string customFallback) external returns(bool ok);\n\tfunction allowance(address tokenOwner, address spender) external view returns(uint remaining);\n\tfunction approve(address spender, uint tokens) external returns(bool success);\n\tfunction transferFrom(address from, address to, uint tokens) external returns(bool success);\n\n\t// Events (cannot be in interfaces used here as a reference)\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\tevent Transfer(address indexed from, address indexed to, uint value);\n\tevent Transfer(address indexed from, address indexed to, uint value, bytes data);\n\tevent onTokenPurchase(\n\t\taddress indexed accountHolder,\n\t\tuint256 ethereumSpent,\n\t\tuint256 tokensCreated,\n\t\tuint256 tokensGiven,\n\t\taddress indexed referrer,\n\t\tuint8 bitFlags // 1 = invalidMasternode, 2 = usedHourglassMasternode, 4 = reinvestment\n\t);\n\tevent onTokenSell(\n\t\taddress indexed accountHolder,\n\t\tuint256 tokensDestroyed,\n\t\tuint256 ethereumEarned\n\t);\n\tevent onWithdraw(\n\t\taddress indexed accountHolder,\n\t\tuint256 earningsWithdrawn,\n\t\tuint256 refBonusWithdrawn,\n\t\tbool reinvestment\n\t);\n\tevent onDonatedDividends(\n\t\taddress indexed donator,\n\t\tuint256 ethereumDonated\n\t);\n\tevent onGauntletAcquired(\n\t\taddress indexed strongHands,\n\t\tuint256 stakeAmount,\n\t\tuint8 gauntletType,\n\t\tuint256 end\n\t);\n\tevent onExternalGauntletAcquired(\n\t\taddress indexed strongHands,\n\t\tuint256 stakeAmount,\n\t\taddress indexed extGauntlet\n\t);\n\t// Gauntlet events will be emitted with stakeAmount == 0 when the gauntlets expire.\n}\n*/\n\n// This contract is intended to only be used by HourglassX. Think of this as HourglassX's second account (or child slave with its own account)\n\ncontract HourglassXReferralHandler {\n\tusing SafeMath for uint256;\n\tusing SafeMath for uint;\n\taddress internal parent;\n\tHourglass internal hourglass;\n\n\tconstructor(Hourglass h) public {\n\t\thourglass = h;\n\t\tparent = msg.sender;\n\t}\n\n\t// Don't expose this account to literally everyone\n\tmodifier onlyParent {\n\t\trequire(msg.sender == parent, \"Can only be executed by parent process\");\n\t\t_;\n\t}\n\n\t// Contract's total ETH balance including divs\n\tfunction totalBalance() public view returns(uint256) {\n\t\treturn address(this).balance + hourglass.myDividends(true);\n\t}\n\n\t// Buy P3D from given ether\n\tfunction buyTokens(address referrer) public payable onlyParent {\n\t\thourglass.buy.value(msg.value)(referrer);\n\t}\n\n\t// Buy P3D from own ether balance\n\tfunction buyTokensFromBalance(address referrer, uint256 amount) public onlyParent {\n\t\tif (address(this).balance < amount) {\n\t\t\thourglass.withdraw();\n\t\t}\n\t\thourglass.buy.value(amount)(referrer);\n\t}\n\n\t// Sell a specified amount of P3D for ether\n\tfunction sellTokens(uint256 amount) public onlyParent {\n\t\tif (amount > 0) {\n\t\t\thourglass.sell(amount);\n\t\t}\n\t}\n\n\t// Withdraw outstanding divs to internal balance\n\tfunction withdrawDivs() public onlyParent {\n\t\thourglass.withdraw();\n\t}\n\n\t// Send eth from internal balance to a specified account\n\tfunction sendETH(address payable to, uint256 amount) public onlyParent {\n\t\tif (address(this).balance < amount) {\n\t\t\thourglass.withdraw();\n\t\t}\n\t\tto.transfer(amount);\n\t}\n\n\t// Only allow ETH from our master or from the hourglass.\n\tfunction() payable external {\n\t\trequire(msg.sender == address(hourglass) || msg.sender == parent, \"No, I don't accept donations\");\n\t}\n\n\t// Reject possible accidental sendin of higher-tech shitcoins.\n\tfunction tokenFallback(address from, uint value, bytes memory data) public pure {\n\t\trevert(\"I don't want your shitcoins!\");\n\t}\n\n\t// Allow anyone else to take forcefully sent low-tech shitcoins. (I sure as hell don't want them)\n\tfunction takeShitcoin(address shitCoin) public {\n\t\trequire(shitCoin != address(hourglass), \"P3D isn't a shitcoin\");\n\t\tERC20interface s = ERC20interface(shitCoin);\n\t\ts.transfer(msg.sender, s.balanceOf(address(this)));\n\t}\n}\n\ncontract HourglassX {\n\tusing SafeMath for uint256;\n\tusing SafeMath for uint;\n\tusing SafeMath for int256;\n\n\tmodifier onlyOwner {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\tmodifier playerBookEnabled {\n\t\trequire(address(playerBook) != NULL_ADDRESS, \"named referrals not enabled\");\n\t\t_;\n\t}\n\n\t// Make the thing\n\tconstructor(address h, address p) public {\n\t\t// Set up ERC20 values\n\t\tname = \"PoWH3D Extended\";\n\t\tsymbol = \"P3X\";\n\t\tdecimals = 18;\n\t\ttotalSupply = 0;\n\n\t\t// Add external contracts\n\t\thourglass = Hourglass(h);\n\t\tplayerBook = TeamJustPlayerBook(p);\n\n\t\t// Set referral requirement to be the same as P3D by default.\n\t\treferralRequirement = hourglass.stakingRequirement();\n\n\t\t// Yes I could deploy 2 contracts myself, but I'm lazy. :^)\n\t\trefHandler = new HourglassXReferralHandler(hourglass);\n\n\t\t// Internal stuffs\n\t\tignoreTokenFallbackEnable = false;\n\t\towner = msg.sender;\n\t}\n\t// HourglassX-specific data\n\taddress owner;\n\taddress newOwner;\n\n\tuint256 referralRequirement;\n\tuint256 internal profitPerShare = 0;\n\tuint256 public lastTotalBalance = 0;\n\tuint256 constant internal ROUNDING_MAGNITUDE = 2**64;\n\taddress constant internal NULL_ADDRESS = 0x0000000000000000000000000000000000000000;\n\n\t// I would get this from hourglass, but these values are inaccessable to the public.\n\tuint8 constant internal HOURGLASS_FEE = 10;\n\tuint8 constant internal HOURGLASS_BONUS = 3;\n\n\t// External contracts\n\tHourglass internal hourglass;\n\tHourglassXReferralHandler internal refHandler;\n\tTeamJustPlayerBook internal playerBook;\n\n\t// P3X Specific data\n\tmapping(address => int256) internal payouts;\n\tmapping(address => uint256) internal bonuses;\n\tmapping(address => address) public savedReferral;\n\n\t// Futureproofing stuffs\n\tmapping(address => mapping (address => bool)) internal ignoreTokenFallbackList;\n\tbool internal ignoreTokenFallbackEnable;\n\n\t// Gauntlets\n\tmapping(address => uint256) internal gauntletBalance;\n\tmapping(address => uint256) internal gauntletEnd;\n\tmapping(address => uint8) internal gauntletType; // 1 = Time, 2 = P3D Supply, 3 = External\n\n\t// Normal token data\n\tmapping(address => uint256) internal balances;\n\tmapping(address => mapping (address => uint256)) internal allowances;\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\tuint256 public totalSupply;\n\n\t// --Events\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\tevent Transfer(address indexed from, address indexed to, uint value);\n\tevent Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n\t// Q: Why do you have 2 transfer events?\n\t// A: Because keccak256(\"Transfer(address,address,uint256)\") != keccak256(\"Transfer(address,address,uint256,bytes)\")\n\t//    and etherscan listens for the former.\n\n\n\tevent onTokenPurchase(\n\t\taddress indexed accountHolder,\n\t\tuint256 ethereumSpent,\n\t\tuint256 tokensCreated,\n\t\t// If P3D is given to the contract, that amount in P3X will be given to the next buyer since we have no idea who gave us the P3D.\n\t\tuint256 tokensGiven,\n\t\taddress indexed referrer,\n\t\tuint8 indexed bitFlags // 1 = invalidMasternode, 2 = usedHourglassMasternode, 4 = reinvestment\n\t);\n\tevent onTokenSell(\n\t\taddress indexed accountHolder,\n\t\tuint256 tokensDestroyed,\n\t\tuint256 ethereumEarned\n\t);\n\tevent onWithdraw(\n\t\taddress indexed accountHolder,\n\t\tuint256 earningsWithdrawn,\n\t\tuint256 refBonusWithdrawn,\n\t\tbool indexed reinvestment\n\t);\n\tevent onDonatedDividends(\n\t\taddress indexed donator,\n\t\tuint256 ethereumDonated\n\t);\n\tevent onGauntletAcquired(\n\t\taddress indexed strongHands,\n\t\tuint256 stakeAmount,\n\t\tuint8 indexed gauntletType,\n\t\tuint256 end\n\t);\n\tevent onExternalGauntletAcquired(\n\t\taddress indexed strongHands,\n\t\tuint256 stakeAmount,\n\t\taddress indexed extGauntlet\n\t);\n\t// --Events--\n\n\t// --Owner only functions\n\tfunction setNewOwner(address o) public onlyOwner {\n\t\tnewOwner = o;\n\t}\n\n\tfunction acceptNewOwner() public {\n\t\trequire(msg.sender == newOwner);\n\t\towner = msg.sender;\n\t}\n\n\t// P3D allows re-branding, makes sense if P3X allows it too.\n\tfunction rebrand(string memory n, string memory s) public onlyOwner {\n\t\tname = n;\n\t\tsymbol = s;\n\t}\n\n\t// P3X selling point: _lower staking requirement than P3D!!_\n\tfunction setReferralRequirement(uint256 r) public onlyOwner {\n\t\treferralRequirement = r;\n\t}\n\n\t// Enables the function defined below.\n\tfunction allowIgnoreTokenFallback() public onlyOwner {\n\t\tignoreTokenFallbackEnable = true;\n\t}\n\t// --Owner only functions--\n\n\t// --Public write functions\n\n\t// Ethereum _might_ implement something where every address, including ones controlled by humans, is a smart contract.\n\t// Obviously transfering P3X to other people with no fee is one of its selling points.\n\t// A somewhat future-proofing fix is for the sender to specify that their recipiant is human if such a change ever takes place.\n\t// However, due to the popularity of ERC223, this might not be necessary.\n\tfunction ignoreTokenFallback(address to, bool ignore) public {\n\t\trequire(ignoreTokenFallbackEnable, \"This function is disabled\");\n\t\tignoreTokenFallbackList[msg.sender][to] = ignore;\n\t}\n\n\t// Transfer tokens to the specified address, call the specified function, and pass the specified data\n\tfunction transfer(address payable to, uint value, bytes memory data, string memory func) public returns(bool) {\n\t\tactualTransfer(msg.sender, to, value, data, func, true);\n\t\treturn true;\n\t}\n\n\t// Transfer tokens to the specified address, call tokenFallback, and pass the specified data\n\tfunction transfer(address payable to, uint value, bytes memory data) public returns(bool) {\n\t\tactualTransfer(msg.sender, to, value, data, \"\", true);\n\t\treturn true;\n\t}\n\n\t// Transfer tokens to the specified address, call tokenFallback if applicable\n\tfunction transfer(address payable to, uint value) public returns(bool) {\n\t\tactualTransfer(msg.sender, to, value, \"\", \"\", !ignoreTokenFallbackList[msg.sender][to]);\n\t\treturn true;\n\t}\n\n\t// Allow someone else to spend your tokens\n\tfunction approve(address spender, uint value) public returns(bool) {\n\t\trequire(updateUsableBalanceOf(msg.sender) >= value, \"Insufficient balance to approve\");\n\t\tallowances[msg.sender][spender] = value;\n\t\temit Approval(msg.sender, spender, value);\n\t\treturn true;\n\t}\n\n\t// Have that someone else spend your tokens\n\tfunction transferFrom(address payable from, address payable to, uint value) public returns(bool success) {\n\t\tuint256 allowance = allowances[from][msg.sender];\n\t\trequire(allowance > 0, \"Not approved\");\n\t\trequire(allowance >= value, \"Over spending limit\");\n\t\tallowances[from][msg.sender] = allowance.sub(value);\n\t\tactualTransfer(from, to, value, \"\", \"\", false);\n\t\treturn true;\n\t}\n\n\t// The fallback function\n\tfunction() payable external{\n\t\t// Only accept free ETH from the hourglass and from our child slave.\n\t\tif (msg.sender != address(hourglass) && msg.sender != address(refHandler)) {\n\t\t\t// Now, sending ETH increases the balance _before_ the transaction has been fully processed.\n\t\t\t// We don't want to distribute the entire purchase order as dividends.\n\t\t\tif (msg.value > 0) {\n\t\t\t\tlastTotalBalance += msg.value;\n\t\t\t\tdistributeDividends(0, NULL_ADDRESS);\n\t\t\t\tlastTotalBalance -= msg.value;\n\t\t\t}\n\t\t\tcreateTokens(msg.sender, msg.value, NULL_ADDRESS, false);\n\t\t}\n\t}\n\n\t// Worried about having weak hands? Put on an optional gauntlet.\n\t// Prevents you from selling or transfering a specified amount of tokens\n\tfunction acquireGauntlet(uint256 amount, uint8 gType, uint256 end) public{\n\t\trequire(amount <= balances[msg.sender], \"Insufficient balance\");\n\n\t\t// We need to apply the data first in order to prevent re-entry attacks.\n\t\t// ExternalGauntletInterface.gauntletRequirement _is_ a function which can change the state, after all.\n\t\tuint256 oldGauntletType = gauntletType[msg.sender];\n\t\tuint256 oldGauntletBalance = gauntletBalance[msg.sender];\n\t\tuint256 oldGauntletEnd = gauntletEnd[msg.sender];\n\n\t\tgauntletType[msg.sender] = gType;\n\t\tgauntletEnd[msg.sender] = end;\n\t\tgauntletBalance[msg.sender] = amount;\n\n\t\tif (oldGauntletType == 0) {\n\t\t\tif (gType == 1) {\n\t\t\t\trequire(end >= (block.timestamp + 97200), \"Gauntlet time must be >= 4 weeks\"); //97200 seconds = 3 weeks and 6 days.\n\t\t\t\temit onGauntletAcquired(msg.sender, amount, gType, end);\n\t\t\t} else if (gType == 2) {\n\t\t\t\tuint256 P3DSupply = hourglass.totalSupply();\n\t\t\t\trequire(end >= (P3DSupply + (P3DSupply / 5)), \"Gauntlet must make a profit\"); // P3D buyers are down 19% when they buy, so make gauntlet gainz a minimum of 20%.\n\t\t\t\temit onGauntletAcquired(msg.sender, amount, gType, end);\n\t\t\t} else if (gType == 3) {\n\t\t\t\trequire(end <= 0x00ffffffffffffffffffffffffffffffffffffffff, \"Invalid address\");\n\t\t\t\trequire(ExternalGauntletInterface(address(end)).gauntletRequirement(msg.sender, 0, amount), \"External gauntlet check failed\");\n\t\t\t\temit onExternalGauntletAcquired(msg.sender, amount, address(end));\n\t\t\t} else {\n\t\t\t\trevert(\"Invalid gauntlet type\");\n\t\t\t}\n\t\t} else if (oldGauntletType == 3) {\n\t\t\trequire(gType == 3, \"New gauntlet must be same type\");\n\t\t\trequire(end == gauntletEnd[msg.sender], \"Must be same external gauntlet\");\n\t\t\trequire(ExternalGauntletInterface(address(end)).gauntletRequirement(msg.sender, oldGauntletBalance, amount), \"External gauntlet check failed\");\n\t\t\temit onExternalGauntletAcquired(msg.sender, amount, address(end));\n\t\t} else {\n\t\t\trequire(gType == oldGauntletType, \"New gauntlet must be same type\");\n\t\t\trequire(end > oldGauntletEnd, \"Gauntlet must be an upgrade\");\n\t\t\trequire(amount >= oldGauntletBalance, \"New gauntlet must hold more tokens\");\n\t\t\temit onGauntletAcquired(msg.sender, amount, gType, end);\n\t\t}\n\t}\n\n\tfunction acquireExternalGauntlet(uint256 amount, address extGauntlet) public{\n\t\tacquireGauntlet(amount, 3, uint256(extGauntlet));\n\t}\n\n\t// Throw your money at this thing with a referrer specified by their Ethereum address.\n\t// Returns the amount of tokens created.\n\tfunction buy(address referrerAddress) payable public returns(uint256) {\n\t\t// Now, sending ETH increases the balance _before_ the transaction has been fully processed.\n\t\t// We don't want to distribute the entire purchase order as dividends.\n\t\tif (msg.value > 0) {\n\t\t\tlastTotalBalance += msg.value;\n\t\t\tdistributeDividends(0, NULL_ADDRESS);\n\t\t\tlastTotalBalance -= msg.value;\n\t\t}\n\t\treturn createTokens(msg.sender, msg.value, referrerAddress, false);\n\t}\n\n\t// I'm only copy/pasting these functions due to the stack limit.\n\t// Throw your money at this thing with a referrer specified by their team JUST playerbook name.\n\t// Returns the amount of tokens created.\n\tfunction buy(string memory referrerName) payable public playerBookEnabled returns(uint256) {\n\t\taddress referrerAddress = getAddressFromReferralName(referrerName);\n\t\t// As I said before, we don't want to distribute the entire purchase order as dividends.\n\t\tif (msg.value > 0) {\n\t\t\tlastTotalBalance += msg.value;\n\t\t\tdistributeDividends(0, NULL_ADDRESS);\n\t\t\tlastTotalBalance -= msg.value;\n\t\t}\n\t\treturn createTokens(msg.sender, msg.value, referrerAddress, false);\n\t}\n\n\t// Use all the ETH you earned hodling P3X to buy more P3X.\n\t// Returns the amount of tokens created.\n\tfunction reinvest() public returns(uint256) {\n\t\taddress accountHolder = msg.sender;\n\t\tdistributeDividends(0, NULL_ADDRESS); // Just in case P3D-only transactions happened.\n\t\tuint256 payout;\n\t\tuint256 bonusPayout;\n\t\t(payout, bonusPayout) = clearDividends(accountHolder);\n\t\temit onWithdraw(accountHolder, payout, bonusPayout, true);\n\t\treturn createTokens(accountHolder, payout + bonusPayout, NULL_ADDRESS, true);\n\t}\n\n\t// Use some of the ETH you earned hodling P3X to buy more P3X.\n\t// You can withdraw the rest or keept it in here allocated for you.\n\t// Returns the amount of tokens created.\n\tfunction reinvestPartial(uint256 ethToReinvest, bool withdrawAfter) public returns(uint256 tokensCreated) {\n\t\taddress payable accountHolder = msg.sender;\n\t\tdistributeDividends(0, NULL_ADDRESS); // Just in case P3D-only transactions happened.\n\n\t\tuint256 payout = dividendsOf(accountHolder, false);\n\t\tuint256 bonusPayout = bonuses[accountHolder];\n\n\t\tuint256 payoutReinvested = 0;\n\t\tuint256 bonusReinvested;\n\n\t\trequire((payout + bonusPayout) >= ethToReinvest, \"Insufficient balance for reinvestment\");\n\t\t// We're going to take ETH out of the masternode bonus first, then the outstanding divs.\n\t\tif (ethToReinvest > bonusPayout){\n\t\t\tpayoutReinvested = ethToReinvest - bonusPayout;\n\t\t\tbonusReinvested = bonusPayout;\n\t\t\t// Take ETH out from outstanding dividends.\n\t\t\tpayouts[accountHolder] += int256(payoutReinvested * ROUNDING_MAGNITUDE);\n\t\t}else{\n\t\t\tbonusReinvested = ethToReinvest;\n\t\t}\n\t\t// Take ETH from the masternode bonus.\n\t\tbonuses[accountHolder] -= bonusReinvested;\n\n\t\temit onWithdraw(accountHolder, payoutReinvested, bonusReinvested, true);\n\t\t// Do the buy thing!\n\t\ttokensCreated = createTokens(accountHolder, ethToReinvest, NULL_ADDRESS, true);\n\n\t\tif (withdrawAfter && dividendsOf(msg.sender, true) > 0) {\n\t\t\twithdrawDividends(msg.sender);\n\t\t}\n\t\treturn tokensCreated;\n\t}\n\n\t// I'm just a man who loves \"default variables\"\n\tfunction reinvestPartial(uint256 ethToReinvest) public returns(uint256) {\n\t\treturn reinvestPartial(ethToReinvest, true);\n\t}\n\n\t// There's literally no reason to call this function\n\tfunction sell(uint256 amount, bool withdrawAfter) public returns(uint256) {\n\t\trequire(amount > 0, \"You have to sell something\");\n\t\tuint256 sellAmount = destroyTokens(msg.sender, amount);\n\t\tif (withdrawAfter && dividendsOf(msg.sender, true) > 0) {\n\t\t\twithdrawDividends(msg.sender);\n\t\t}\n\t\treturn sellAmount;\n\t}\n\n\t// Again with the default variables!\n\tfunction sell(uint256 amount) public returns(uint256) {\n\t\trequire(amount > 0, \"You have to sell something\");\n\t\treturn destroyTokens(msg.sender, amount);\n\t}\n\n\t// Transfer the sender's masternode bonuses and their outstanding divs to their wallet.\n\tfunction withdraw() public{\n\t\trequire(dividendsOf(msg.sender, true) > 0, \"No dividends to withdraw\");\n\t\twithdrawDividends(msg.sender);\n\t}\n\n\t// There's definitely no reason to call this function\n\tfunction exit() public{\n\t\taddress payable accountHolder = msg.sender;\n\t\tuint256 balance = balances[accountHolder];\n\t\tif (balance > 0) {\n\t\t\tdestroyTokens(accountHolder, balance);\n\t\t}\n\t\tif (dividendsOf(accountHolder, true) > 0) {\n\t\t\twithdrawDividends(accountHolder);\n\t\t}\n\t}\n\n\t// Since website won't be released on launch, provide something on etherscan which will allow users to easily set masternodes.\n\tfunction setReferrer(address ref) public{\n\t\tsavedReferral[msg.sender] = ref;\n\t}\n\n\t// Same as above except using the team JUST player book\n\tfunction setReferrer(string memory refName) public{\n\t\tsavedReferral[msg.sender] = getAddressFromReferralName(refName);\n\t}\n\n\t// Another P3X selling point: Get P3X-exclusive didvidends _combined with_ P3D dividends!\n\tfunction donateDividends() payable public{\n\t\tdistributeDividends(0, NULL_ADDRESS);\n\t\temit onDonatedDividends(msg.sender, msg.value);\n\t}\n\n\t// --Public write functions--\n\n\t// --Public read-only functions\n\n\t// Returns the P3D address.\n\tfunction baseHourglass() external view returns(address) {\n\t\treturn address(hourglass);\n\t}\n\n\t// Returns the salve account address (was mostly used for debugging purposes)\n\tfunction refHandlerAddress() external view returns(address) {\n\t\treturn address(refHandler);\n\t}\n\n\t// Get someone's address from their team JUST playerbook name\n\tfunction getAddressFromReferralName(string memory refName) public view returns (address){\n\t\treturn playerBook.getPlayerAddr(playerBook.pIDxName_(stringToBytes32(refName)));\n\t}\n\n\t// Retruns an addresses gauntlet type.\n\tfunction gauntletTypeOf(address accountHolder) public view returns(uint stakeAmount, uint gType, uint end) {\n\t\tif (isGauntletExpired(accountHolder)) {\n\t\t\treturn (0, 0, gauntletEnd[accountHolder]);\n\t\t} else {\n\t\t\treturn (gauntletBalance[accountHolder], gauntletType[accountHolder], gauntletEnd[accountHolder]);\n\t\t}\n\t}\n\n\t// Same as above except for msg.sender\n\tfunction myGauntletType() public view returns(uint stakeAmount, uint gType, uint end) {\n\t\treturn gauntletTypeOf(msg.sender);\n\t}\n\n\t// Returns an addresse's P3X balance minus what they have in their gauntlet.\n\tfunction usableBalanceOf(address accountHolder) public view returns(uint balance) {\n\t\tif (isGauntletExpired(accountHolder)) {\n\t\t\treturn balances[accountHolder];\n\t\t} else {\n\t\t\treturn balances[accountHolder].sub(gauntletBalance[accountHolder]);\n\t\t}\n\t}\n\n\t// Same as above except for msg.sender\n\tfunction myUsableBalance() public view returns(uint balance) {\n\t\treturn usableBalanceOf(msg.sender);\n\t}\n\n\t// I mean, every ERC20 token has this function. I'm sure you know what it does.\n\tfunction balanceOf(address accountHolder) external view returns(uint balance) {\n\t\treturn balances[accountHolder];\n\t}\n\n\t// Same as above except for msg.sender\n\tfunction myBalance() public view returns(uint256) {\n\t\treturn balances[msg.sender];\n\t}\n\n\t// See if the specified sugardaddy allows the spender to spend their tokens\n\tfunction allowance(address sugardaddy, address spender) external view returns(uint remaining) {\n\t\treturn allowances[sugardaddy][spender];\n\t}\n\n\t// Returns all the ETH that this contract has access to\n\tfunction totalBalance() public view returns(uint256) {\n\t\treturn address(this).balance + hourglass.myDividends(true) + refHandler.totalBalance();\n\t}\n\n\t// Returns the ETH the specified address is owed.\n\tfunction dividendsOf(address customerAddress, bool includeReferralBonus) public view returns(uint256) {\n\t\tuint256 divs = uint256(int256(profitPerShare * balances[customerAddress]) - payouts[customerAddress]) / ROUNDING_MAGNITUDE;\n\t\tif (includeReferralBonus) {\n\t\t\tdivs += bonuses[customerAddress];\n\t\t}\n\t\treturn divs;\n\t}\n\n\t// Same as above except includes the masternode bonus\n\tfunction dividendsOf(address customerAddress) public view returns(uint256) {\n\t\treturn dividendsOf(customerAddress, true);\n\t}\n\n\t// Alias of dividendsOf(msg.sender)\n\tfunction myDividends() public view returns(uint256) {\n\t\treturn dividendsOf(msg.sender, true);\n\t}\n\n\t// Alias of dividendsOf(msg.sender, includeReferralBonus)\n\tfunction myDividends(bool includeReferralBonus) public view returns(uint256) {\n\t\treturn dividendsOf(msg.sender, includeReferralBonus);\n\t}\n\n\t// Returns the masternode earnings of a specified account\n\tfunction refBonusOf(address customerAddress) external view returns(uint256) {\n\t\treturn bonuses[customerAddress];\n\t}\n\n\t// Same as above xcept with msg.sender\n\tfunction myRefBonus() external view returns(uint256) {\n\t\treturn bonuses[msg.sender];\n\t}\n\n\t// Backwards compatibility with the P3D interface\n\tfunction stakingRequirement() external view returns(uint256) {\n\t\treturn referralRequirement;\n\t}\n\n\t// Backwards compatibility with the P3D interface\n\tfunction calculateTokensReceived(uint256 ethereumToSpend) public view returns(uint256) {\n\t\treturn hourglass.calculateTokensReceived(ethereumToSpend);\n\t}\n\n\t// Backwards compatibility with the P3D interface\n\tfunction calculateEthereumReceived(uint256 tokensToSell) public view returns(uint256) {\n\t\treturn hourglass.calculateEthereumReceived(tokensToSell);\n\t}\n\t// --Public read-only functions--\n\n\t// Internal functions\n\n\t// Returns true if the gauntlet has expired. Otherwise, false.\n\tfunction isGauntletExpired(address holder) internal view returns(bool) {\n\t\tif (gauntletType[holder] != 0) {\n\t\t\tif (gauntletType[holder] == 1) {\n\t\t\t\treturn (block.timestamp >= gauntletEnd[holder]);\n\t\t\t} else if (gauntletType[holder] == 2) {\n\t\t\t\treturn (hourglass.totalSupply() >= gauntletEnd[holder]);\n\t\t\t} else if (gauntletType[holder] == 3) {\n\t\t\t\treturn ExternalGauntletInterface(gauntletEnd[holder]).gauntletRemovable(holder);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t// Same as usableBalanceOf, except the gauntlet is lifted when it's expired.\n\tfunction updateUsableBalanceOf(address holder) internal returns(uint256) {\n\t\t// isGauntletExpired is a _view_ function, with uses STATICCALL in solidity 0.5.0 or later.\n\t\t// Since STATICCALLs can't modifiy the state, re-entry attacks aren't possible here.\n\t\tif (isGauntletExpired(holder)) {\n\t\t\tif (gauntletType[holder] == 3){\n\t\t\t\temit onExternalGauntletAcquired(holder, 0, NULL_ADDRESS);\n\t\t\t}else{\n\t\t\t\temit onGauntletAcquired(holder, 0, 0, 0);\n\t\t\t}\n\t\t\tgauntletType[holder] = 0;\n\t\t\tgauntletBalance[holder] = 0;\n\n\t\t\treturn balances[holder];\n\t\t}\n\t\treturn balances[holder] - gauntletBalance[holder];\n\t}\n\n\t// This is the actual buy function\n\tfunction createTokens(address creator, uint256 eth, address referrer, bool reinvestment) internal returns(uint256) {\n\t\t// Let's not call the parent hourglass all the time.\n\t\tuint256 parentReferralRequirement = hourglass.stakingRequirement();\n\t\t// How much ETH will be given to the referrer if there is one.\n\t\tuint256 referralBonus = eth / HOURGLASS_FEE / HOURGLASS_BONUS;\n\n\t\tbool usedHourglassMasternode = false;\n\t\tbool invalidMasternode = false;\n\t\tif (referrer == NULL_ADDRESS) {\n\t\t\treferrer = savedReferral[creator];\n\t\t}\n\n\t\t// Solidity has limited amount of local variables, so the memory allocated to this one gets reused for other purposes later.\n\t\t//uint256 refHandlerBalance = hourglass.balanceOf(address(refHandler));\n\t\tuint256 tmp = hourglass.balanceOf(address(refHandler));\n\n\t\t// Let's once again pretend this actually prevents people from cheating.\n\t\tif (creator == referrer) {\n\t\t\t// Tell everyone that no referral purchase was made because cheating (unlike P3D)\n\t\t\tinvalidMasternode = true;\n\t\t} else if (referrer == NULL_ADDRESS) {\n\t\t\tusedHourglassMasternode = true;\n\t\t// Make sure that the referrer has enough funds to _be_ a referrer, and make sure that we have our own P3D masternode to get that extra ETH\n\t\t} else if (balances[referrer] >= referralRequirement && (tmp >= parentReferralRequirement || hourglass.balanceOf(address(this)) >= parentReferralRequirement)) {\n\t\t\t// It's a valid P3X masternode, hooray! (do nothing)\n\t\t} else if (hourglass.balanceOf(referrer) >= parentReferralRequirement) {\n\t\t\tusedHourglassMasternode = true;\n\t\t} else {\n\t\t\t// Tell everyone that no referral purchase was made because not enough balance (again, unlike P3D)\n\t\t\tinvalidMasternode = true;\n\t\t}\n\n\t\t// Thanks to Crypto McPump for helping me _not_ waste gas here.\n\t\t/*\n\t\tuint256 createdTokens = hourglass.calculateTokensReceived(eth); // See? Look how much gas I would have wasted.\n\t\ttotalSupply += createdTokens;\n\t\t*/\n\t\tuint256 createdTokens = hourglass.totalSupply();\n\n\t\t// KNOWN BUG: If lord Justo increases the staking requirement to something above both of the contract's P3D\n\t\t// balance, then all masternodes won't work until there are enough buy orders to make the refHandler's P3D\n\t\t// balance above P3D's masternode requirement.\n\n\t\t// if the refHandler hass less P3D than P3D's masternode requirement, then it should buy the tokens.\n\t\tif (tmp < parentReferralRequirement) {\n\t\t\tif (reinvestment) {\n\t\t\t\t// We need to know if the refHandler has enough ETH to do the reinvestment on its own\n\t\t\t\t//uint256 refHandlerEthBalance = refHandler.totalBalance();\n\t\t\t\ttmp = refHandler.totalBalance();\n\t\t\t\tif (tmp < eth) {\n\t\t\t\t\t// If it doesn't, then we must transfer it the remaining ETH it needs.\n\t\t\t\t\ttmp = eth - tmp; // fundsToGive = eth - refHandlerEthBalance;\n\t\t\t\t\tif (address(this).balance < tmp) {\n\t\t\t\t\t\t// If this fails, something went horribly wrong because the client is attempting to reinvest more ethereum than we've got\n\t\t\t\t\t\thourglass.withdraw();\n\t\t\t\t\t}\n\t\t\t\t\taddress(refHandler).transfer(tmp);\n\t\t\t\t}\n\t\t\t\t// Reinvestments are always done using the null referrer\n\t\t\t\trefHandler.buyTokensFromBalance(NULL_ADDRESS, eth);\n\t\t\t} else {\n\t\t\t\t// these nested ? statements are only here because I can only have a limited amount of local variables.\n\t\t\t\t// Forward the ETH we were sent to the refHandler to place the buy order.\n\t\t\t\trefHandler.buyTokens.value(eth)(invalidMasternode ? NULL_ADDRESS : (usedHourglassMasternode ? referrer : address(this)));\n\t\t\t}\n\t\t\ttmp = hourglass.balanceOf(address(refHandler));\n\t\t} else {\n\t\t\tif (reinvestment) {\n\t\t\t\t// If we don't have enough ETH to do the reinvestment, withdraw.\n\t\t\t\tif (address(this).balance < eth && hourglass.myDividends(true) > 0) {\n\t\t\t\t\thourglass.withdraw();\n\t\t\t\t}\n\t\t\t\t// If we _still_ don't have enough ETH to do the reinvestment, have the refHandler sends us some.\n\t\t\t\tif (address(this).balance < eth) {\n\t\t\t\t\trefHandler.sendETH(address(this), eth - address(this).balance);\n\t\t\t\t}\n\t\t\t}\n\t\t\thourglass.buy.value(eth)(invalidMasternode ? NULL_ADDRESS : (usedHourglassMasternode ? referrer : address(refHandler)));\n\t\t}\n\n\t\t// Use the delta from before and after the buy order to get the amount of P3D created.\n\t\tcreatedTokens = hourglass.totalSupply() - createdTokens;\n\t\ttotalSupply += createdTokens;\n\n\t\t// This is here for when someone transfers P3D to the contract directly. We have no way of knowing who it's from, so we'll just give it to the next person who happens to buy.\n\t\tuint256 bonusTokens = hourglass.myTokens() + tmp - totalSupply;\n\n\t\t// Here I now re-use that uint256 to create the bit flags.\n\t\ttmp = 0;\n\t\tif (invalidMasternode)\t\t\t{ tmp |= 1; }\n\t\tif (usedHourglassMasternode)\t{ tmp |= 2; }\n\t\tif (reinvestment)\t\t\t\t{ tmp |= 4; }\n\n\t\temit onTokenPurchase(creator, eth, createdTokens, bonusTokens, referrer, uint8(tmp));\n\t\tcreatedTokens += bonusTokens;\n\t\t// We can finally give the P3X to the buyer!\n\t\tbalances[creator] += createdTokens;\n\t\ttotalSupply += bonusTokens;\n\n\t\t//Updates services like etherscan which track token hodlings.\n\t\temit Transfer(address(this), creator, createdTokens, \"\");\n\t\temit Transfer(address(this), creator, createdTokens);\n\n\t\t// Unfortunatly, SafeMath cannot be used here, otherwise the stack gets too deep\n\t\tpayouts[creator] += int256(profitPerShare * createdTokens); // You don't deserve the dividends before you owned the tokens.\n\n\t\tif (reinvestment) {\n\t\t\t// No dividend distribution underflows allowed.\n\t\t\t// Ethereum has been given away after a \"reinvestment\" purchase, so we have to keep track of that.\n\t\t\tlastTotalBalance = lastTotalBalance.sub(eth);\n\t\t}\n\t\tdistributeDividends((usedHourglassMasternode || invalidMasternode) ? 0 : referralBonus, referrer);\n\t\tif (referrer != NULL_ADDRESS) {\n\t\t\t// Save the referrer for next time!\n\t\t\tsavedReferral[creator] = referrer;\n\t\t}\n\t\treturn createdTokens;\n\t}\n\n\t// This is marked as an internal function because selling could have been the result of transfering P3X to the contract via a transferFrom transaction.\n\tfunction destroyTokens(address weakHand, uint256 bags) internal returns(uint256) {\n\t\trequire(updateUsableBalanceOf(weakHand) >= bags, \"Insufficient balance\");\n\n\t\t// Give the weak hand the last of their deserved payout.\n\t\t// Also updates lastTotalBalance\n\t\tdistributeDividends(0, NULL_ADDRESS);\n\t\tuint256 tokenBalance = hourglass.myTokens();\n\n\t\t// We can't rely on ETH balance delta because we get cut of the sell fee ourselves.\n\t\tuint256 ethReceived = hourglass.calculateEthereumReceived(bags);\n\t\tlastTotalBalance += ethReceived;\n\t\tif (tokenBalance >= bags) {\n\t\t\thourglass.sell(bags);\n\t\t} else {\n\t\t\t// If we don't have enough P3D to sell ourselves, get the slave to sell some, too.\n\t\t\tif (tokenBalance > 0) {\n\t\t\t\thourglass.sell(tokenBalance);\n\t\t\t}\n\t\t\trefHandler.sellTokens(bags - tokenBalance);\n\t\t}\n\n\t\t// Put the ETH in outstanding dividends, and allow the weak hand access to the divs they've accumilated before they sold.\n\t\tint256 updatedPayouts = int256(profitPerShare * bags + (ethReceived * ROUNDING_MAGNITUDE));\n\t\tpayouts[weakHand] = payouts[weakHand].sub(updatedPayouts);\n\n\t\t// We already checked the balance of the weakHanded person, so SafeMathing here is redundant.\n\t\tbalances[weakHand] -= bags;\n\t\ttotalSupply -= bags;\n\n\t\temit onTokenSell(weakHand, bags, ethReceived);\n\n\t\t// Tell etherscan of this tragity.\n\t\temit Transfer(weakHand, address(this), bags, \"\");\n\t\temit Transfer(weakHand, address(this), bags);\n\t\treturn ethReceived;\n\t}\n\n\t// sends ETH to the specified account, using all the ETH P3X has access to.\n\tfunction sendETH(address payable to, uint256 amount) internal {\n\t\tuint256 childTotalBalance = refHandler.totalBalance();\n\t\tuint256 thisBalance = address(this).balance;\n\t\tuint256 thisTotalBalance = thisBalance + hourglass.myDividends(true);\n\t\tif (childTotalBalance >= amount) {\n\t\t\t// the refHanlder has enough of its own ETH to send, so it should do that.\n\t\t\trefHandler.sendETH(to, amount);\n\t\t} else if (thisTotalBalance >= amount) {\n\t\t\t// We have enough ETH of our own to send.\n\t\t\tif (thisBalance < amount) {\n\t\t\t\thourglass.withdraw();\n\t\t\t}\n\t\t\tto.transfer(amount);\n\t\t} else {\n\t\t\t// Neither we nor the refHandler has enough ETH to send individually, so both contracts have to send ETH.\n\t\t\trefHandler.sendETH(to, childTotalBalance);\n\t\t\tif (hourglass.myDividends(true) > 0) {\n\t\t\t\thourglass.withdraw();\n\t\t\t}\n\t\t\tto.transfer(amount - childTotalBalance);\n\t\t}\n\t\t// keep the dividend tracker in check.\n\t\tlastTotalBalance = lastTotalBalance.sub(amount);\n\t}\n\n\t// Take the ETH we've got and distribute it among our token holders.\n\tfunction distributeDividends(uint256 bonus, address bonuser) internal{\n\t\t// Prevents \"HELP I WAS THE LAST PERSON WHO SOLD AND I CAN'T WITHDRAW MY ETH WHAT DO????\" (dividing by 0 results in a crash)\n\t\tif (totalSupply > 0) {\n\t\t\tuint256 tb = totalBalance();\n\t\t\tuint256 delta = tb - lastTotalBalance;\n\t\t\tif (delta > 0) {\n\t\t\t\t// We have more ETH than before, so we'll just distribute those dividends among our token holders.\n\t\t\t\tif (bonus != 0) {\n\t\t\t\t\tbonuses[bonuser] += bonus;\n\t\t\t\t}\n\t\t\t\tprofitPerShare = profitPerShare.add(((delta - bonus) * ROUNDING_MAGNITUDE) / totalSupply);\n\t\t\t\tlastTotalBalance += delta;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Clear out someone's dividends.\n\tfunction clearDividends(address accountHolder) internal returns(uint256, uint256) {\n\t\tuint256 payout = dividendsOf(accountHolder, false);\n\t\tuint256 bonusPayout = bonuses[accountHolder];\n\n\t\tpayouts[accountHolder] += int256(payout * ROUNDING_MAGNITUDE);\n\t\tbonuses[accountHolder] = 0;\n\n\t\t// External apps can now get reliable masternode statistics\n\t\treturn (payout, bonusPayout);\n\t}\n\n\t// Withdraw 100% of someone's dividends\n\tfunction withdrawDividends(address payable accountHolder) internal {\n\t\tdistributeDividends(0, NULL_ADDRESS); // Just in case P3D-only transactions happened.\n\t\tuint256 payout;\n\t\tuint256 bonusPayout;\n\t\t(payout, bonusPayout) = clearDividends(accountHolder);\n\t\temit onWithdraw(accountHolder, payout, bonusPayout, false);\n\t\tsendETH(accountHolder, payout + bonusPayout);\n\t}\n\n\t// The internal transfer function.\n\tfunction actualTransfer (address payable from, address payable to, uint value, bytes memory data, string memory func, bool careAboutHumanity) internal{\n\t\trequire(updateUsableBalanceOf(from) >= value, \"Insufficient balance\");\n\t\trequire(to != address(refHandler), \"My slave doesn't get paid\"); // I don't know why anyone would do this, but w/e\n\t\trequire(to != address(hourglass), \"P3D has no need for these\"); // Prevent l33x h4x0rs from having P3X call arbitrary P3D functions.\n\n\t\tif (to == address(this)) {\n\t\t\t// Treat transfers to this contract as a sell and withdraw order.\n\t\t\tif (value == 0) {\n\t\t\t\t// Transfers of 0 still have to be emitted... for some reason.\n\t\t\t\temit Transfer(from, to, value, data);\n\t\t\t\temit Transfer(from, to, value);\n\t\t\t} else {\n\t\t\t\tdestroyTokens(from, value);\n\t\t\t}\n\t\t\twithdrawDividends(from);\n\t\t} else {\n\t\t\tdistributeDividends(0, NULL_ADDRESS); // Just in case P3D-only transactions happened.\n\t\t\t// I was going to add a value == 0 check here, but if you're sending 0 tokens to someone, you deserve to pay for wasted gas.\n\n\t\t\t// Throwing an exception undos all changes. Otherwise changing the balance now would be a shitshow\n\t\t\tbalances[from] = balances[from].sub(value);\n\t\t\tbalances[to] = balances[to].add(value);\n\n\t\t\t// Sender can have their dividends from when they owned the tokens\n\t\t\tpayouts[from] -= int256(profitPerShare * value);\n\t\t\t// Receiver is not allowed to have dividends from before they owned the tokens.\n\t\t\tpayouts[to] += int256(profitPerShare * value);\n\n\t\t\tif (careAboutHumanity && isContract(to)) {\n\t\t\t\tif (bytes(func).length == 0) {\n\t\t\t\t\tERC223Handler receiver = ERC223Handler(to);\n\t\t\t\t\treceiver.tokenFallback(from, value, data);\n\t\t\t\t} else {\n\t\t\t\t\tbool success;\n\t\t\t\t\tbytes memory returnData;\n\t\t\t\t\t(success, returnData) = to.call.value(0)(abi.encodeWithSignature(func, from, value, data));\n\t\t\t\t\tassert(success);\n\t\t\t\t}\n\t\t\t}\n\t\t\temit Transfer(from, to, value, data);\n\t\t\temit Transfer(from, to, value);\n\t\t}\n\t}\n\n\t// The playerbook contract accepts a bytes32. We'll be converting for convenience sense.\n\tfunction bytesToBytes32(bytes memory data) internal pure returns(bytes32){\n\t\tuint256 result = 0;\n\t\tuint256 len = data.length;\n\t\tuint256 singleByte;\n\t\tfor (uint256 i = 0; i<len; i+=1){\n\t\t\tsingleByte = uint256(uint8(data[i])) << ( (31 - i) * 8);\n\t\t\trequire(singleByte != 0, \"bytes cannot contain a null byte\");\n\t\t\tresult |= singleByte;\n\t\t}\n\t\treturn bytes32(result);\n\t}\n\n\t// haha casting types.\n\tfunction stringToBytes32(string memory data) internal pure returns(bytes32){\n\t\treturn bytesToBytes32(bytes(data));\n\t}\n\n\t// If bytecode exists at _addr then the _addr is a contract.\n\tfunction isContract(address _addr) internal view returns(bool) {\n\t\tuint length;\n\t\tassembly {\n\t\t\t//retrieve the size of the code on target address, this needs assembly\n\t\t\tlength := extcodesize(_addr)\n\t\t}\n\t\treturn (length>0);\n\t}\n\n\t// Reject possible accidental sendin of higher-tech shitcoins. (with a fancy message)\n\tfunction tokenFallback(address from, uint value, bytes memory data) public pure{\n\t\trevert(\"I don't want your shitcoins!\");\n\t}\n\n\t// Allow anyone else to take forcefully sent low-tech shitcoins. (I sure as hell don't want them)\n\tfunction takeShitcoin(address shitCoin) public{\n\t\t// Don't allow people to siphon funds from us\n\t\trequire(shitCoin != address(hourglass), \"P3D isn't a shitcoin\");\n\t\tERC20interface s = ERC20interface(shitCoin);\n\t\ts.transfer(msg.sender, s.balanceOf(address(this)));\n\t}\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t* @dev Multiplies two numbers, throws on overflow.\n\t*/\n\tfunction mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\n\t\tif (a == 0 || b == 0) {\n\t\t   return 0;\n\t\t}\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t* @dev Integer division of two numbers, truncating the quotient.\n\t*/\n\tfunction div(uint256 a, uint256 b) internal pure returns(uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t*/\n\tfunction sub(uint256 a, uint256 b) internal pure returns(uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t* @dev Adds two numbers, throws on overflow.\n\t*/\n\tfunction add(uint256 a, uint256 b) internal pure returns(uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n\n\t/**\n\t* @dev Subtracts two numbers, throws on underflow\n\t*/\n\tfunction sub(int256 a, int256 b) internal pure returns(int256 c) {\n\t\tc = a - b;\n\t\tassert(c <= a);\n\t\treturn c;\n\t}\n\n\t/**\n\t* @dev Adds two numbers, throws on overflow.\n\t*/\n\tfunction add(int256 a, int256 b) internal pure returns(int256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"withdrawAfter\",\"type\":\"bool\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accountHolder\",\"type\":\"address\"}],\"name\":\"gauntletTypeOf\",\"outputs\":[{\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"name\":\"gType\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethToReinvest\",\"type\":\"uint256\"}],\"name\":\"reinvestPartial\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"ignore\",\"type\":\"bool\"}],\"name\":\"ignoreTokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"extGauntlet\",\"type\":\"address\"}],\"name\":\"acquireExternalGauntlet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myGauntletType\",\"outputs\":[{\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"name\":\"gType\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerName\",\"type\":\"string\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowIgnoreTokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setReferralRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTotalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accountHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customerAddress\",\"type\":\"address\"},{\"name\":\"includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customerAddress\",\"type\":\"address\"}],\"name\":\"refBonusOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refHandlerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"gType\",\"type\":\"uint8\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"acquireGauntlet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donateDividends\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"string\"},{\"name\":\"s\",\"type\":\"string\"}],\"name\":\"rebrand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"shitCoin\",\"type\":\"address\"}],\"name\":\"takeShitcoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myRefBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethToReinvest\",\"type\":\"uint256\"},{\"name\":\"withdrawAfter\",\"type\":\"bool\"}],\"name\":\"reinvestPartial\",\"outputs\":[{\"name\":\"tokensCreated\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"setReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"savedReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sugardaddy\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accountHolder\",\"type\":\"address\"}],\"name\":\"usableBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"refName\",\"type\":\"string\"}],\"name\":\"getAddressFromReferralName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseHourglass\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myUsableBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"o\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"func\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"h\",\"type\":\"address\"},{\"name\":\"p\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"accountHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensCreated\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensGiven\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"bitFlags\",\"type\":\"uint8\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"accountHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensDestroyed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"accountHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"earningsWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refBonusWithdrawn\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"reinvestment\",\"type\":\"bool\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"donator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumDonated\",\"type\":\"uint256\"}],\"name\":\"onDonatedDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"strongHands\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"gauntletType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"onGauntletAcquired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"strongHands\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"extGauntlet\",\"type\":\"address\"}],\"name\":\"onExternalGauntletAcquired\",\"type\":\"event\"}]",
  "bytecode": "6080604052600060035560006004553480156200001b57600080fd5b5060405160408062005fc5833981018060405260408110156200003d57600080fd5b50805160209182015160408051808201909152600f8082527f506f5748334420457874656e6465640000000000000000000000000000000000919094019081529192909162000090916012919062000222565b506040805180820190915260038082527f50335800000000000000000000000000000000000000000000000000000000006020909201918252620000d79160139162000222565b506014805460ff19166012179055600060155560058054600160a060020a03808516600160a060020a0319928316179283905560078054858316931692909217909155604080517f56d399e8000000000000000000000000000000000000000000000000000000008152905192909116916356d399e891600480820192602092909190829003018186803b1580156200016f57600080fd5b505afa15801562000184573d6000803e3d6000fd5b505050506040513d60208110156200019b57600080fd5b5051600255600554600160a060020a0316620001b6620002a7565b600160a060020a03909116815260405190819003602001906000f080158015620001e4573d6000803e3d6000fd5b5060068054600160a060020a0392909216600160a060020a0319928316179055600c805460ff19169055600080549091163317905550620002d89050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200026557805160ff191683800117855562000295565b8280016001018555821562000295579182015b828111156200029557825182559160200191906001019062000278565b50620002a3929150620002b8565b5090565b604051610e4e806200517783390190565b620002d591905b80821115620002a35760008155600101620002bf565b90565b614e8f80620002e86000396000f3fe608060405260043610610275577c0100000000000000000000000000000000000000000000000000000000600035046265318b81146102d7578063010dbfec1461031c57806306fdde031461034e578063095ea7b3146103d85780630f66d0821461042557806310d0ffdd1461047657806318160ddd146104a05780631d54e16e146104b557806322609373146104df57806323b872dd146105095780632c23f91a1461054c578063313ce567146105875780633151ecfc146105b2578063365db060146105c75780633ccfd60b1461060057806341e2cdf414610615578063492cc7691461062a5780634f092510146106d057806356d399e8146106e5578063688abbf7146106fa5780636addf029146107265780636b5cb95e1461075057806370a082311461076557806374a76816146107985780637b169f8c146107d357806382ea872c1461080657806395d89b41146108375780639de6c1621461084c5780639e4ba75b14610885578063a18a7bfc1461088d578063a615237e146108c0578063a9059cbb146109fa578063ad7a672f14610a33578063ade342ab14610a48578063ba61ee0914610a7b578063bc2c587314610a90578063bc9a9ebf14610ac2578063be45fd6214610b75578063c0ee0b8a14610c3d578063c9116b6914610d05578063d259930014610d1a578063dd62ed3e14610d4d578063e4849b3214610d88578063e9fad8ee14610db2578063ebec775214610dc7578063ec677ba014610dfa578063f05a781d14610ead578063f088d54714610ec2578063f288713214610ee8578063f30c929614610efd578063f5a1f5b414610f12578063f6368f8a14610f45578063fdb5a03e14611094575b600554600160a060020a0316331480159061029b5750600654600160a060020a03163314155b156102d55760003411156102c65760048054340190556102bc6000806110a9565b6004805434900390555b6102d33334600080611135565b505b005b3480156102e357600080fd5b5061030a600480360360208110156102fa57600080fd5b5035600160a060020a0316611ddc565b60408051918252519081900360200190f35b34801561032857600080fd5b5061030a6004803603604081101561033f57600080fd5b50803590602001351515611df1565b34801561035a57600080fd5b50610363611e89565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561039d578181015183820152602001610385565b50505050905090810190601f1680156103ca5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103e457600080fd5b50610411600480360360408110156103fb57600080fd5b50600160a060020a038135169060200135611f17565b604080519115158252519081900360200190f35b34801561043157600080fd5b506104586004803603602081101561044857600080fd5b5035600160a060020a0316611fe5565b60408051938452602084019290925282820152519081900360600190f35b34801561048257600080fd5b5061030a6004803603602081101561049957600080fd5b5035612058565b3480156104ac57600080fd5b5061030a6120ef565b3480156104c157600080fd5b5061030a600480360360208110156104d857600080fd5b50356120f5565b3480156104eb57600080fd5b5061030a6004803603602081101561050257600080fd5b5035612102565b34801561051557600080fd5b506104116004803603606081101561052c57600080fd5b50600160a060020a03813581169160208101359091169060400135612167565b34801561055857600080fd5b506102d56004803603604081101561056f57600080fd5b50600160a060020a03813516906020013515156122ab565b34801561059357600080fd5b5061059c612344565b6040805160ff9092168252519081900360200190f35b3480156105be57600080fd5b5061030a61234d565b3480156105d357600080fd5b506102d5600480360360408110156105ea57600080fd5b5080359060200135600160a060020a0316612360565b34801561060c57600080fd5b506102d5612375565b34801561062157600080fd5b506104586123e7565b61030a6004803603602081101561064057600080fd5b81019060208101813564010000000081111561065b57600080fd5b82018360208201111561066d57600080fd5b8035906020019184600183028401116401000000008311171561068f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612400945050505050565b3480156106dc57600080fd5b506102d56124aa565b3480156106f157600080fd5b5061030a6124d0565b34801561070657600080fd5b5061030a6004803603602081101561071d57600080fd5b503515156124d6565b34801561073257600080fd5b506102d56004803603602081101561074957600080fd5b50356124e2565b34801561075c57600080fd5b5061030a6124fe565b34801561077157600080fd5b5061030a6004803603602081101561078857600080fd5b5035600160a060020a0316612504565b3480156107a457600080fd5b5061030a600480360360408110156107bb57600080fd5b50600160a060020a038135169060200135151561251f565b3480156107df57600080fd5b5061030a600480360360208110156107f657600080fd5b5035600160a060020a031661257f565b34801561081257600080fd5b5061081b61259a565b60408051600160a060020a039092168252519081900360200190f35b34801561084357600080fd5b506103636125a9565b34801561085857600080fd5b506102d56004803603606081101561086f57600080fd5b5080359060ff6020820135169060400135612604565b6102d5612e54565b34801561089957600080fd5b506102d5600480360360208110156108b057600080fd5b5035600160a060020a0316612e97565b3480156108cc57600080fd5b506102d5600480360360408110156108e357600080fd5b8101906020810181356401000000008111156108fe57600080fd5b82018360208201111561091057600080fd5b8035906020019184600183028401116401000000008311171561093257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561098557600080fd5b82018360208201111561099757600080fd5b803590602001918460018302840111640100000000831117156109b957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612ed3945050505050565b348015610a0657600080fd5b5061041160048036036040811015610a1d57600080fd5b50600160a060020a038135169060200135612f16565b348015610a3f57600080fd5b5061030a612f6b565b348015610a5457600080fd5b506102d560048036036020811015610a6b57600080fd5b5035600160a060020a031661308f565b348015610a8757600080fd5b5061030a613221565b348015610a9c57600080fd5b5061030a60048036036040811015610ab357600080fd5b50803590602001351515613234565b348015610ace57600080fd5b506102d560048036036020811015610ae557600080fd5b810190602081018135640100000000811115610b0057600080fd5b820183602082011115610b1257600080fd5b80359060200191846001830284011164010000000083111715610b3457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506133ce945050505050565b348015610b8157600080fd5b5061041160048036036060811015610b9857600080fd5b600160a060020a0382351691602081013591810190606081016040820135640100000000811115610bc857600080fd5b820183602082011115610bda57600080fd5b80359060200191846001830284011164010000000083111715610bfc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613414945050505050565b348015610c4957600080fd5b506102d560048036036060811015610c6057600080fd5b600160a060020a0382351691602081013591810190606081016040820135640100000000811115610c9057600080fd5b820183602082011115610ca257600080fd5b80359060200191846001830284011164010000000083111715610cc457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061343f945050505050565b348015610d1157600080fd5b5061030a613494565b348015610d2657600080fd5b5061081b60048036036020811015610d3d57600080fd5b5035600160a060020a03166134a7565b348015610d5957600080fd5b5061030a60048036036040811015610d7057600080fd5b50600160a060020a03813581169160200135166134c2565b348015610d9457600080fd5b5061030a60048036036020811015610dab57600080fd5b50356134ed565b348015610dbe57600080fd5b506102d5613555565b348015610dd357600080fd5b5061030a60048036036020811015610dea57600080fd5b5035600160a060020a0316613595565b348015610e0657600080fd5b5061081b60048036036020811015610e1d57600080fd5b810190602081018135640100000000811115610e3857600080fd5b820183602082011115610e4a57600080fd5b80359060200191846001830284011164010000000083111715610e6c57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506135ff945050505050565b348015610eb957600080fd5b506102d56136f2565b61030a60048036036020811015610ed857600080fd5b5035600160a060020a031661372a565b348015610ef457600080fd5b5061081b61375e565b348015610f0957600080fd5b5061030a61376d565b348015610f1e57600080fd5b506102d560048036036020811015610f3557600080fd5b5035600160a060020a0316613778565b348015610f5157600080fd5b5061041160048036036080811015610f6857600080fd5b600160a060020a0382351691602081013591810190606081016040820135640100000000811115610f9857600080fd5b820183602082011115610faa57600080fd5b80359060200191846001830284011164010000000083111715610fcc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561101f57600080fd5b82018360208201111561103157600080fd5b8035906020019184600183028401116401000000008311171561105357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506137be945050505050565b3480156110a057600080fd5b5061030a6137cf565b600060155411156111315760006110be612f6b565b6004549091508103600081111561112e5783156110f457600160a060020a03831660009081526009602052604090208054850190555b611122601554680100000000000000008684030281151561111157fe5b60035491900463ffffffff61384d16565b60035560048054820190555b50505b5050565b600080600560009054906101000a9004600160a060020a0316600160a060020a03166356d399e86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156111a257600080fd5b505afa1580156111b6573d6000803e3d6000fd5b505050506040513d60208110156111cc57600080fd5b505190506003600a860404600080600160a060020a038716151561120857600160a060020a03808a166000908152600a60205260409020541696505b600554600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152905160009392909216916370a0823191602480820192602092909190829003018186803b15801561127557600080fd5b505afa158015611289573d6000803e3d6000fd5b505050506040513d602081101561129f57600080fd5b50519050600160a060020a038a811690891614156112c0576001915061144c565b600160a060020a03881615156112d9576001925061144c565b600254600160a060020a0389166000908152601060205260409020541080159061139a5750848110158061139a5750600554604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518792600160a060020a0316916370a08231916024808301926020929190829003018186803b15801561136b57600080fd5b505afa15801561137f573d6000803e3d6000fd5b505050506040513d602081101561139557600080fd5b505110155b156113a45761144c565b600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038b811660048301529151889392909216916370a0823191602480820192602092909190829003018186803b15801561140d57600080fd5b505afa158015611421573d6000803e3d6000fd5b505050506040513d602081101561143757600080fd5b505110611447576001925061144c565b600191505b600554604080517f18160ddd0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916318160ddd916004808301926020929190829003018186803b1580156114aa57600080fd5b505afa1580156114be573d6000803e3d6000fd5b505050506040513d60208110156114d457600080fd5b50519050858210156118225787156116dd57600660009054906101000a9004600160a060020a0316600160a060020a031663ad7a672f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561155057600080fd5b505afa158015611564573d6000803e3d6000fd5b505050506040513d602081101561157a57600080fd5b50519150898210156116545790890390303182111561161857600560009054906101000a9004600160a060020a0316600160a060020a0316633ccfd60b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156115ff57600080fd5b505af1158015611613573d6000803e3d6000fd5b505050505b600654604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015611652573d6000803e3d6000fd5b505b600654604080517f27c2e437000000000000000000000000000000000000000000000000000000008152600060048201819052602482018e90529151600160a060020a03909316926327c2e4379260448084019391929182900301818387803b1580156116c057600080fd5b505af11580156116d4573d6000803e3d6000fd5b50505050611786565b600654600160a060020a031663ec8ac4d88b8561170657866116ff5730611701565b8b5b611709565b60005b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a031681526020019150506000604051808303818588803b15801561176c57600080fd5b505af1158015611780573d6000803e3d6000fd5b50505050505b600554600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152905191909216916370a08231916024808301926020929190829003018186803b1580156117ef57600080fd5b505afa158015611803573d6000803e3d6000fd5b505050506040513d602081101561181957600080fd5b50519150611aa9565b87156119e15730318a1180156118c65750600554604080517f688abbf7000000000000000000000000000000000000000000000000000000008152600160048201529051600092600160a060020a03169163688abbf7916024808301926020929190829003018186803b15801561189857600080fd5b505afa1580156118ac573d6000803e3d6000fd5b505050506040513d60208110156118c257600080fd5b5051115b1561195057600560009054906101000a9004600160a060020a0316600160a060020a0316633ccfd60b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561193757600080fd5b505af115801561194b573d6000803e3d6000fd5b505050505b30318a11156119e157600654604080517f64a197f30000000000000000000000000000000000000000000000000000000081523060048201819052318d0360248201529051600160a060020a03909216916364a197f39160448082019260009290919082900301818387803b1580156119c857600080fd5b505af11580156119dc573d6000803e3d6000fd5b505050505b600554600160a060020a031663f088d5478b85611a155786611a0e57600654600160a060020a0316611a10565b8b5b611a18565b60005b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a031681526020019150506020604051808303818588803b158015611a7b57600080fd5b505af1158015611a8f573d6000803e3d6000fd5b50505050506040513d6020811015611aa657600080fd5b50505b600554604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290518392600160a060020a0316916318160ddd916004808301926020929190829003018186803b158015611b0657600080fd5b505afa158015611b1a573d6000803e3d6000fd5b505050506040513d6020811015611b3057600080fd5b5051601580549290910391820190819055600554604080517f949e8acd00000000000000000000000000000000000000000000000000000000815290519394506000938692600160a060020a03169163949e8acd916004808301926020929190829003018186803b158015611ba457600080fd5b505afa158015611bb8573d6000803e3d6000fd5b505050506040513d6020811015611bce57600080fd5b505160009550010390508315611be5576001831792505b8415611bf2576002831792505b8815611bff576004831792505b8260ff168a600160a060020a03168d600160a060020a03167f815415bfeceef6daa3628de56840fbe7d8bfe09cb247b08b17e7f844c7e808478e868660405180848152602001838152602001828152602001935050505060405180910390a4600160a060020a038c16600081815260106020908152604091829020805495850195860190556015805485019055815185815291517fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470939230927fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1692918290030190a4604080518381529051600160a060020a038e169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3600354600160a060020a038d166000908152600860205260409020805491840290910190558815611d6357600454611d5f908c63ffffffff61386016565b6004555b611d828580611d6f5750845b611d795786611d7c565b60005b8b6110a9565b600160a060020a038a1615611dcd57600160a060020a038c81166000908152600a60205260409020805473ffffffffffffffffffffffffffffffffffffffff1916918c169190911790555b509a9950505050505050505050565b6000611de982600161251f565b90505b919050565b6000808311611e4f5760408051600080516020614e44833981519152815260206004820152601a60248201527f596f75206861766520746f2073656c6c20736f6d657468696e67000000000000604482015290519081900360640190fd5b6000611e5b3385613872565b9050828015611e7457506000611e7233600161251f565b115b15611e8257611e8233613cf9565b9392505050565b6012805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611f0f5780601f10611ee457610100808354040283529160200191611f0f565b820191906000526020600020905b815481529060010190602001808311611ef257829003601f168201915b505050505081565b600081611f2333613d69565b1015611f7e5760408051600080516020614e44833981519152815260206004820152601f60248201527f496e73756666696369656e742062616c616e636520746f20617070726f766500604482015290519081900360640190fd5b336000818152601160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b6000806000611ff384613e94565b1561201b57505050600160a060020a0381166000908152600e60205260408120548190612051565b505050600160a060020a0381166000908152600d6020908152604080832054600f835281842054600e90935292205460ff909116905b9193909250565b600554604080517f10d0ffdd000000000000000000000000000000000000000000000000000000008152600481018490529051600092600160a060020a0316916310d0ffdd916024808301926020929190829003018186803b1580156120bd57600080fd5b505afa1580156120d1573d6000803e3d6000fd5b505050506040513d60208110156120e757600080fd5b505192915050565b60155481565b6000611de9826001613234565b600554604080517f22609373000000000000000000000000000000000000000000000000000000008152600481018490529051600092600160a060020a0316916322609373916024808301926020929190829003018186803b1580156120bd57600080fd5b600160a060020a03831660009081526011602090815260408083203384529091528120548181116121e75760408051600080516020614e44833981519152815260206004820152600c60248201527f4e6f7420617070726f7665640000000000000000000000000000000000000000604482015290519081900360640190fd5b828110156122445760408051600080516020614e44833981519152815260206004820152601360248201527f4f766572207370656e64696e67206c696d697400000000000000000000000000604482015290519081900360640190fd5b612254818463ffffffff61386016565b600160a060020a03861660009081526011602090815260408083203384528252808320939093558251808201845282815283519182019093528181526122a09288928892889291614094565b506001949350505050565b600c5460ff16151561230c5760408051600080516020614e44833981519152815260206004820152601960248201527f546869732066756e6374696f6e2069732064697361626c656400000000000000604482015290519081900360640190fd5b336000908152600b60209081526040808320600160a060020a0395909516835293905291909120805460ff1916911515919091179055565b60145460ff1681565b600061235a33600161251f565b90505b90565b61113182600383600160a060020a0316612604565b600061238233600161251f565b116123dc5760408051600080516020614e44833981519152815260206004820152601860248201527f4e6f206469766964656e647320746f2077697468647261770000000000000000604482015290519081900360640190fd5b6123e533613cf9565b565b60008060006123f533611fe5565b925092509250909192565b600754600090600160a060020a0316151561246a5760408051600080516020614e44833981519152815260206004820152601b60248201527f6e616d656420726566657272616c73206e6f7420656e61626c65640000000000604482015290519081900360640190fd5b6000612475836135ff565b9050600034111561249d5760048054340190556124936000806110a9565b6004805434900390555b611e823334836000611135565b600054600160a060020a031633146124c157600080fd5b600c805460ff19166001179055565b60025490565b6000611de9338361251f565b600054600160a060020a031633146124f957600080fd5b600255565b60045481565b600160a060020a031660009081526010602052604090205490565b600160a060020a038216600090815260086020908152604080832054601090925282205460035468010000000000000000910291909103048215611e8257600160a060020a03841660009081526009602052604090205401905092915050565b600160a060020a031660009081526009602052604090205490565b600654600160a060020a031690565b6013805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611f0f5780601f10611ee457610100808354040283529160200191611f0f565b336000908152601060205260409020548311156126705760408051600080516020614e44833981519152815260206004820152601460248201527f496e73756666696369656e742062616c616e6365000000000000000000000000604482015290519081900360640190fd5b336000908152600f602090815260408083208054600d8085528386208054600e875294909620805460ff8a811660ff19861617909555908890559452938790559092169190821515612abc578460ff16600114156127715762017bb0420184101561272a5760408051600080516020614e44833981519152815260206004820181905260248201527f4761756e746c65742074696d65206d757374206265203e3d2034207765656b73604482015290519081900360640190fd5b6040805187815260208101869052815160ff88169233927fa9990927036c19f74afbaf4840fd3ee8fa7a6f72d787106800bbc215c1bcc538929081900390910190a3612ab7565b8460ff16600214156128b357600554604080517f18160ddd0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916318160ddd916004808301926020929190829003018186803b1580156127db57600080fd5b505afa1580156127ef573d6000803e3d6000fd5b505050506040513d602081101561280557600080fd5b5051905060058104810185101561286b5760408051600080516020614e44833981519152815260206004820152601b60248201527f4761756e746c6574206d757374206d616b6520612070726f6669740000000000604482015290519081900360640190fd5b6040805188815260208101879052815160ff89169233927fa9990927036c19f74afbaf4840fd3ee8fa7a6f72d787106800bbc215c1bcc538929081900390910190a350612ab7565b8460ff1660031415612a6257600160a060020a038411156129235760408051600080516020614e44833981519152815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b604080517f127b0efd000000000000000000000000000000000000000000000000000000008152336004820152600060248201819052604482018990529151600160a060020a0387169263127b0efd92606480820193602093909283900390910190829087803b15801561299657600080fd5b505af11580156129aa573d6000803e3d6000fd5b505050506040513d60208110156129c057600080fd5b50511515612a1d5760408051600080516020614e44833981519152815260206004820152601e60248201527f45787465726e616c206761756e746c657420636865636b206661696c65640000604482015290519081900360640190fd5b604080518781529051600160a060020a0386169133917ffd485e840ff263867a8e752aa5182c86e69052b8d3b7ca0f0e2092927f4a41259181900360200190a3612ab7565b60408051600080516020614e44833981519152815260206004820152601560248201527f496e76616c6964206761756e746c657420747970650000000000000000000000604482015290519081900360640190fd5b612e4c565b8260031415612ccb57600360ff861614612b255760408051600080516020614e44833981519152815260206004820152601e60248201527f4e6577206761756e746c6574206d7573742062652073616d6520747970650000604482015290519081900360640190fd5b336000908152600e60205260409020548414612b905760408051600080516020614e44833981519152815260206004820152601e60248201527f4d7573742062652073616d652065787465726e616c206761756e746c65740000604482015290519081900360640190fd5b604080517f127b0efd00000000000000000000000000000000000000000000000000000000815233600482015260248101849052604481018890529051600160a060020a0386169163127b0efd9160648083019260209291908290030181600087803b158015612bff57600080fd5b505af1158015612c13573d6000803e3d6000fd5b505050506040513d6020811015612c2957600080fd5b50511515612c865760408051600080516020614e44833981519152815260206004820152601e60248201527f45787465726e616c206761756e746c657420636865636b206661696c65640000604482015290519081900360640190fd5b604080518781529051600160a060020a0386169133917ffd485e840ff263867a8e752aa5182c86e69052b8d3b7ca0f0e2092927f4a41259181900360200190a3612e4c565b60ff85168314612d2a5760408051600080516020614e44833981519152815260206004820152601e60248201527f4e6577206761756e746c6574206d7573742062652073616d6520747970650000604482015290519081900360640190fd5b808411612d865760408051600080516020614e44833981519152815260206004820152601b60248201527f4761756e746c6574206d75737420626520616e20757067726164650000000000604482015290519081900360640190fd5b81861015612e095760408051600080516020614e44833981519152815260206004820152602260248201527f4e6577206761756e746c6574206d75737420686f6c64206d6f726520746f6b6560448201527f6e73000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6040805187815260208101869052815160ff88169233927fa9990927036c19f74afbaf4840fd3ee8fa7a6f72d787106800bbc215c1bcc538929081900390910190a35b505050505050565b612e5f6000806110a9565b60408051348152905133917fce52884489674b3dab23b5fa20d06b50095e888dcab638e6a31276c442a0bf6b919081900360200190a2565b336000908152600a60205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314612eea57600080fd5b8151612efd906012906020850190614dab565b508051612f11906013906020840190614dab565b505050565b604080516020818101835260008083528351808301855281815233808352600b8452858320600160a060020a0389168452909352938120549093612f6293879287929060ff1615614094565b50600192915050565b600654604080517fad7a672f0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163ad7a672f916004808301926020929190829003018186803b158015612fc957600080fd5b505afa158015612fdd573d6000803e3d6000fd5b505050506040513d6020811015612ff357600080fd5b5051600554604080517f688abbf7000000000000000000000000000000000000000000000000000000008152600160048201529051600160a060020a039092169163688abbf791602480820192602092909190829003018186803b15801561305a57600080fd5b505afa15801561306e573d6000803e3d6000fd5b505050506040513d602081101561308457600080fd5b505130310101905090565b600554600160a060020a03828116911614156130fa5760408051600080516020614e44833981519152815260206004820152601460248201527f5033442069736e277420612073686974636f696e000000000000000000000000604482015290519081900360640190fd5b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518291600160a060020a0383169163a9059cbb91339184916370a08231916024808301926020929190829003018186803b15801561316557600080fd5b505afa158015613179573d6000803e3d6000fd5b505050506040513d602081101561318f57600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156131f757600080fd5b505af115801561320b573d6000803e3d6000fd5b505050506040513d602081101561112e57600080fd5b3360009081526009602052604090205490565b60003361324182806110a9565b600061324e82600061251f565b600160a060020a038316600090815260096020526040812054919250808284018811156132f05760408051600080516020614e44833981519152815260206004820152602560248201527f496e73756666696369656e742062616c616e636520666f72207265696e76657360448201527f746d656e74000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8288111561332f575050600160a060020a0383166000908152600860205260409020805482880368010000000000000000810290910190915581613332565b50865b600160a060020a0385166000818152600960209081526040918290208054859003905581518581529081018490528151600193927f2c0790d4cb2a4cd6281eeb9a251fcfb577eacacbf422f94ff8a2888b924b167b928290030190a361339c858960006001611135565b95508680156133b5575060006133b333600161251f565b115b156133c3576133c333613cf9565b505050505092915050565b6133d7816135ff565b336000908152600a60205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905550565b60006134353385858560206040519081016040528060008152506001614094565b5060019392505050565b60408051600080516020614e44833981519152815260206004820152601c60248201527f4920646f6e27742077616e7420796f75722073686974636f696e732100000000604482015290519081900360640190fd5b3360009081526010602052604090205490565b600a60205260009081526040902054600160a060020a031681565b600160a060020a03918216600090815260116020908152604080832093909416825291909152205490565b600080821161354b5760408051600080516020614e44833981519152815260206004820152601a60248201527f596f75206861766520746f2073656c6c20736f6d657468696e67000000000000604482015290519081900360640190fd5b611de93383613872565b3360008181526010602052604081205490811115613579576135778282613872565b505b600061358683600161251f565b11156111315761113182613cf9565b60006135a082613e94565b156135c45750600160a060020a038116600090815260106020526040902054611dec565b600160a060020a0382166000908152600d60209081526040808320546010909252909120546135f89163ffffffff61386016565b9050611dec565b600754600090600160a060020a0316634d0d35ff81632e19ebdc6136228661479f565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561367257600080fd5b505afa158015613686573d6000803e3d6000fd5b505050506040513d602081101561369c57600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff85160281526004810192909252516024808301926020929190829003018186803b1580156120bd57600080fd5b600154600160a060020a0316331461370957600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff191633179055565b6000803411156137515760048054340190556137476000806110a9565b6004805434900390555b611de93334846000611135565b600554600160a060020a031690565b600061235a33613595565b600054600160a060020a0316331461378f57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60006122a033868686866001614094565b6000336137dc82806110a9565b6000806137e8836147aa565b60408051838152602081018390528151939550919350600192600160a060020a038716927f2c0790d4cb2a4cd6281eeb9a251fcfb577eacacbf422f94ff8a2888b924b167b92908290030190a36138458382840160006001611135565b935050505090565b8181018281101561385a57fe5b92915050565b60008282111561386c57fe5b50900390565b60008161387e84613d69565b10156138d95760408051600080516020614e44833981519152815260206004820152601460248201527f496e73756666696369656e742062616c616e6365000000000000000000000000604482015290519081900360640190fd5b6138e46000806110a9565b600554604080517f949e8acd0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163949e8acd916004808301926020929190829003018186803b15801561394257600080fd5b505afa158015613956573d6000803e3d6000fd5b505050506040513d602081101561396c57600080fd5b5051600554604080517f22609373000000000000000000000000000000000000000000000000000000008152600481018790529051929350600092600160a060020a0390921691632260937391602480820192602092909190829003018186803b1580156139d957600080fd5b505afa1580156139ed573d6000803e3d6000fd5b505050506040513d6020811015613a0357600080fd5b505160048054820190559050838210613a9957600554604080517fe4849b32000000000000000000000000000000000000000000000000000000008152600481018790529051600160a060020a039092169163e4849b329160248082019260009290919082900301818387803b158015613a7c57600080fd5b505af1158015613a90573d6000803e3d6000fd5b50505050613ba1565b6000821115613b2157600554604080517fe4849b32000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a039092169163e4849b329160248082019260009290919082900301818387803b158015613b0857600080fd5b505af1158015613b1c573d6000803e3d6000fd5b505050505b600654604080517f6c11bcd300000000000000000000000000000000000000000000000000000000815284870360048201529051600160a060020a0390921691636c11bcd39160248082019260009290919082900301818387803b158015613b8857600080fd5b505af1158015613b9c573d6000803e3d6000fd5b505050505b600354600160a060020a0386166000908152600860205260409020549085026801000000000000000083020190613bde908263ffffffff61480016565b600160a060020a0387166000818152600860209081526040808320949094556010815290839020805489900390556015805489900390558251888152908101859052825191927fc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a3113992918290030190a26040805186815290517fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470913091600160a060020a038a16917fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16919081900360200190a46040805186815290513091600160a060020a038916917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350949350505050565b613d046000806110a9565b600080613d10836147aa565b60408051838152602081018390528151939550919350600092600160a060020a038716927f2c0790d4cb2a4cd6281eeb9a251fcfb577eacacbf422f94ff8a2888b924b167b92908290030190a3612f118382840161480d565b6000613d7482613e94565b15613e6b57600160a060020a0382166000908152600f602052604090205460ff1660031415613de3576040805160008082529151600160a060020a038516917ffd485e840ff263867a8e752aa5182c86e69052b8d3b7ca0f0e2092927f4a4125919081900360200190a3613e30565b600082600160a060020a03167fa9990927036c19f74afbaf4840fd3ee8fa7a6f72d787106800bbc215c1bcc538600080604051808381526020018281526020019250505060405180910390a35b50600160a060020a0381166000908152600f60209081526040808320805460ff19169055600d82528083208390556010909152902054611dec565b50600160a060020a03166000908152600d60209081526040808320546010909252909120540390565b600160a060020a0381166000908152600f602052604081205460ff161561408c57600160a060020a0382166000908152600f602052604090205460ff1660011415613efb5750600160a060020a0381166000908152600e6020526040902054421015611dec565b600160a060020a0382166000908152600f602052604090205460ff1660021415613fc257600160a060020a038083166000908152600e60209081526040918290205460055483517f18160ddd0000000000000000000000000000000000000000000000000000000081529351919416926318160ddd926004808301939192829003018186803b158015613f8d57600080fd5b505afa158015613fa1573d6000803e3d6000fd5b505050506040513d6020811015613fb757600080fd5b505110159050611dec565b600160a060020a0382166000908152600f602052604090205460ff166003141561408c57600160a060020a038083166000818152600e60209081526040918290205482517f1308d2c2000000000000000000000000000000000000000000000000000000008152600481019490945291519190931692631308d2c29260248082019391829003018186803b15801561405957600080fd5b505afa15801561406d573d6000803e3d6000fd5b505050506040513d602081101561408357600080fd5b50519050611dec565b506000919050565b8361409e87613d69565b10156140f95760408051600080516020614e44833981519152815260206004820152601460248201527f496e73756666696369656e742062616c616e6365000000000000000000000000604482015290519081900360640190fd5b600654600160a060020a03868116911614156141645760408051600080516020614e44833981519152815260206004820152601960248201527f4d7920736c61766520646f65736e277420676574207061696400000000000000604482015290519081900360640190fd5b600554600160a060020a03868116911614156141cf5760408051600080516020614e44833981519152815260206004820152601960248201527f50334420686173206e6f206e65656420666f7220746865736500000000000000604482015290519081900360640190fd5b600160a060020a0385163014156142e5578315156142d057826040518082805190602001908083835b602083106142175780518252601f1990920191602091820191016141f8565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208a83529351939550600160a060020a038b811695508c16937fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c169350918290030190a484600160a060020a031686600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36142dc565b6142da8685613872565b505b612ab786613cf9565b6142f06000806110a9565b600160a060020a038616600090815260106020526040902054614319908563ffffffff61386016565b600160a060020a03808816600090815260106020526040808220939093559087168152205461434e908563ffffffff61384d16565b600160a060020a0386811660008181526010602090815260408083209590955560038054948c16835260089091528482208054948a029094039093559154908252919020805491860290910190558080156143ad57506143ad85614c8e565b156146b357815115156144b0576040517fc0ee0b8a000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483019081526024830187905260606044840190815286516064850152865189949385169363c0ee0b8a938c938b938b9360840190602085019080838360005b8381101561444457818101518382015260200161442c565b50505050905090810190601f1680156144715780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561449257600080fd5b505af11580156144a6573d6000803e3d6000fd5b50505050506146b3565b6000606086600160a060020a03166000858a89896040516024018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561452257818101518382015260200161450a565b50505050905090810190601f16801561454f5780820380516001836020036101000a031916815260200191505b50945050505050604051602081830303815290604052906040518082805190602001908083835b602083106145955780518252601f199092019160209182019101614576565b51815160001960209485036101000a01908116901991909116179052604080519490920184900390932092860180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317835251855190945084935090508083835b6020831061463a5780518252601f19909201916020918201910161461b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461469c576040519150601f19603f3d011682016040523d82523d6000602084013e6146a1565b606091505b5090925090508115156146b057fe5b50505b826040518082805190602001908083835b602083106146e35780518252601f1990920191602091820191016146c4565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208a83529351939550600160a060020a038b811695508c16937fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c169350918290030190a484600160a060020a031686600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3505050505050565b6000611de982614c96565b60008060006147ba84600061251f565b600160a060020a039490941660009081526009602081815260408084208054600884529185208054680100000000000000008b0201905592909152919055939492505050565b8082038281131561385a57fe5b600654604080517fad7a672f0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163ad7a672f916004808301926020929190829003018186803b15801561486b57600080fd5b505afa15801561487f573d6000803e3d6000fd5b505050506040513d602081101561489557600080fd5b5051600554604080517f688abbf7000000000000000000000000000000000000000000000000000000008152600160048201529051929350303192600092600160a060020a03169163688abbf7916024808301926020929190829003018186803b15801561490257600080fd5b505afa158015614916573d6000803e3d6000fd5b505050506040513d602081101561492c57600080fd5b5051820190508383106149c457600654604080517f64a197f3000000000000000000000000000000000000000000000000000000008152600160a060020a03888116600483015260248201889052915191909216916364a197f391604480830192600092919082900301818387803b1580156149a757600080fd5b505af11580156149bb573d6000803e3d6000fd5b50505050614c71565b838110614a945783821015614a5857600560009054906101000a9004600160a060020a0316600160a060020a0316633ccfd60b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015614a3f57600080fd5b505af1158015614a53573d6000803e3d6000fd5b505050505b604051600160a060020a0386169085156108fc029086906000818181858888f19350505050158015614a8e573d6000803e3d6000fd5b50614c71565b600654604080517f64a197f3000000000000000000000000000000000000000000000000000000008152600160a060020a03888116600483015260248201879052915191909216916364a197f391604480830192600092919082900301818387803b158015614b0257600080fd5b505af1158015614b16573d6000803e3d6000fd5b5050600554604080517f688abbf700000000000000000000000000000000000000000000000000000000815260016004820152905160009450600160a060020a03909216925063688abbf7916024808301926020929190829003018186803b158015614b8157600080fd5b505afa158015614b95573d6000803e3d6000fd5b505050506040513d6020811015614bab57600080fd5b50511115614c3857600560009054906101000a9004600160a060020a0316600160a060020a0316633ccfd60b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015614c1f57600080fd5b505af1158015614c33573d6000803e3d6000fd5b505050505b604051600160a060020a0386169084860380156108fc02916000818181858888f19350505050158015614c6f573d6000803e3d6000fd5b505b600454614c84908563ffffffff61386016565b6004555050505050565b6000903b1190565b8051600090819081805b82811015614da15780601f036008028682815181101515614cbd57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff169060020a02915081600014151515614d955760408051600080516020614e44833981519152815260206004820181905260248201527f62797465732063616e6e6f7420636f6e7461696e2061206e756c6c2062797465604482015290519081900360640190fd5b92811792600101614ca0565b5091949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614dec57805160ff1916838001178555614e19565b82800160010185558215614e19579182015b82811115614e19578251825591602001919060010190614dfe565b50614e25929150614e29565b5090565b61235d91905b80821115614e255760008155600101614e2f56fe08c379a000000000000000000000000000000000000000000000000000000000a165627a7a723058209b84719365fea1ddc4a2700162d2156aff27c5584a6b5396bef734817271f1f10029608060405234801561001057600080fd5b50604051602080610e4e8339810180604052602081101561003057600080fd5b505160018054600160a060020a03909216600160a060020a03199283161790556000805490911633179055610de48061006a6000396000f3fe608060405260043610610087577c0100000000000000000000000000000000000000000000000000000000600035046327c2e437811461013357806364a197f3146101795780636c11bcd3146101bf5780639ddf840d146101e9578063ad7a672f146101fe578063ade342ab14610225578063c0ee0b8a14610265578063ec8ac4d81461033a575b60015473ffffffffffffffffffffffffffffffffffffffff163314806100c4575060005473ffffffffffffffffffffffffffffffffffffffff1633145b151561013157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4e6f2c204920646f6e27742061636365707420646f6e6174696f6e7300000000604482015290519081900360640190fd5b005b34801561013f57600080fd5b506101316004803603604081101561015657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561036d565b34801561018557600080fd5b506101316004803603604081101561019c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610569565b3480156101cb57600080fd5b50610131600480360360208110156101e257600080fd5b5035610705565b3480156101f557600080fd5b50610131610849565b34801561020a57600080fd5b5061021361098f565b60408051918252519081900360200190f35b34801561023157600080fd5b506101316004803603602081101561024857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a38565b34801561027157600080fd5b506101316004803603606081101561028857600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516916020810135918101906060810160408201356401000000008111156102c557600080fd5b8201836020820111156102d757600080fd5b803590602001918460018302840111640100000000831117156102f957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c03945050505050565b6101316004803603602081101561035057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610c6a565b60005473ffffffffffffffffffffffffffffffffffffffff16331461041957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f43616e206f6e6c7920626520657865637574656420627920706172656e74207060448201527f726f636573730000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b30318111156104c157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156104a857600080fd5b505af11580156104bc573d6000803e3d6000fd5b505050505b600154604080517ff088d54700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529151919092169163f088d54791849160248082019260209290919082900301818588803b15801561053857600080fd5b505af115801561054c573d6000803e3d6000fd5b50505050506040513d602081101561056357600080fd5b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461061557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f43616e206f6e6c7920626520657865637574656420627920706172656e74207060448201527f726f636573730000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b30318111156106bd57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156106a457600080fd5b505af11580156106b8573d6000803e3d6000fd5b505050505b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610700573d6000803e3d6000fd5b505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107b157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f43616e206f6e6c7920626520657865637574656420627920706172656e74207060448201527f726f636573730000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600081111561084657600154604080517fe4849b3200000000000000000000000000000000000000000000000000000000815260048101849052905173ffffffffffffffffffffffffffffffffffffffff9092169163e4849b329160248082019260009290919082900301818387803b15801561082d57600080fd5b505af1158015610841573d6000803e3d6000fd5b505050505b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f43616e206f6e6c7920626520657865637574656420627920706172656e74207060448201527f726f636573730000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561097b57600080fd5b505af1158015610563573d6000803e3d6000fd5b60018054604080517f688abbf700000000000000000000000000000000000000000000000000000000815260048101939093525160009273ffffffffffffffffffffffffffffffffffffffff9092169163688abbf7916024808301926020929190829003018186803b158015610a0457600080fd5b505afa158015610a18573d6000803e3d6000fd5b505050506040513d6020811015610a2e57600080fd5b5051303101905090565b60015473ffffffffffffffffffffffffffffffffffffffff82811691161415610ac257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5033442069736e277420612073686974636f696e000000000000000000000000604482015290519081900360640190fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051829173ffffffffffffffffffffffffffffffffffffffff83169163a9059cbb91339184916370a08231916024808301926020929190829003018186803b158015610b3a57600080fd5b505afa158015610b4e573d6000803e3d6000fd5b505050506040513d6020811015610b6457600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff861602815273ffffffffffffffffffffffffffffffffffffffff909316600484015260248301919091525160448083019260209291908290030181600087803b158015610bd957600080fd5b505af1158015610bed573d6000803e3d6000fd5b505050506040513d602081101561056357600080fd5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4920646f6e27742077616e7420796f75722073686974636f696e732100000000604482015290519081900360640190fd5b60005473ffffffffffffffffffffffffffffffffffffffff163314610d1657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f43616e206f6e6c7920626520657865637574656420627920706172656e74207060448201527f726f636573730000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600154604080517ff088d54700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169163f088d54791349160248082019260209290919082900301818588803b158015610d8d57600080fd5b505af1158015610da1573d6000803e3d6000fd5b50505050506040513d602081101561070057600080fdfea165627a7a72305820a586e76d178329e332e21182f8b507a19715ac229cb36eccf897f578a8fe42aa0029000000000000000000000000b3775fb83f7d12a36e0475abdd1fca35c091efbe000000000000000000000000d60d353610d9a5ca478769d371b53cefaa7b6e4c",
  "constructorArguments": "000000000000000000000000b3775fb83f7d12a36e0475abdd1fca35c091efbe000000000000000000000000d60d353610d9a5ca478769d371b53cefaa7b6e4c"
}