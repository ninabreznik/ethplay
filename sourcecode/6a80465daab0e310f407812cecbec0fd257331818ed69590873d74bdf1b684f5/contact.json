{
  "address": "0x8ab96f7b6c60df169296bc0a5a794cae90493bd9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SelfServiceEditionCuration",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-08\n*/\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts/v2/tools/SelfServiceEditionCuration.sol\n\npragma solidity 0.4.24;\n\n\n\n\ninterface IKODAV2SelfServiceEditionCuration {\n\n  function createActiveEdition(\n    uint256 _editionNumber,\n    bytes32 _editionData,\n    uint256 _editionType,\n    uint256 _startDate,\n    uint256 _endDate,\n    address _artistAccount,\n    uint256 _artistCommission,\n    uint256 _priceInWei,\n    string _tokenUri,\n    uint256 _totalAvailable\n  ) external returns (bool);\n\n  function artistsEditions(address _artistsAccount) external returns (uint256[1] _editionNumbers);\n\n  function totalAvailableEdition(uint256 _editionNumber) external returns (uint256);\n\n  function highestEditionNumber() external returns (uint256);\n}\n\ninterface IKODAAuction {\n  function setArtistsControlAddressAndEnabledEdition(uint256 _editionNumber, address _address) external;\n}\n\ncontract SelfServiceEditionCuration is Ownable, Pausable {\n  using SafeMath for uint256;\n\n  event SelfServiceEditionCreated(\n    uint256 indexed _editionNumber,\n    address indexed _creator,\n    uint256 _priceInWei,\n    uint256 _totalAvailable,\n    bool _enableAuction\n  );\n\n  // Calling address\n  IKODAV2SelfServiceEditionCuration public kodaV2;\n  IKODAAuction public auction;\n\n  // Default artist commission\n  uint256 public artistCommission = 85;\n\n  // When true any existing KO artist can mint their own editions\n  bool public openToAllArtist = false;\n\n  // Simple map to only allow certain artist create editions at first\n  mapping(address => bool) public allowedArtists;\n\n  // Config which enforces editions to not be over this size\n  uint256 public maxEditionSize = 100;\n\n  // When true this will skip the invocation in time period check\n  bool public disableInvocationCheck = false;\n\n  // Max number of editions to be created in the time period\n  uint256 public maxInvocations = 3;\n\n  // The rolling time period for max number of invocations\n  uint256 public maxInvocationsTimePeriod = 1 days;\n\n  // Number of invocations the caller has performed in the time period\n  mapping(address => uint256) public invocationsInTimePeriod;\n\n  // When the current time period started\n  mapping(address => uint256) public timeOfFirstInvocationInPeriod;\n\n  /**\n   * @dev Construct a new instance of the contract\n   */\n  constructor(IKODAV2SelfServiceEditionCuration _kodaV2, IKODAAuction _auction) public {\n    kodaV2 = _kodaV2;\n    auction = _auction;\n  }\n\n  /**\n   * @dev Called by artists, create new edition on the KODA platform\n   */\n  function createEdition(\n    uint256 _totalAvailable,\n    uint256 _priceInWei,\n    uint256 _startDate,\n    string _tokenUri,\n    bool _enableAuction\n  )\n  public\n  whenNotPaused\n  returns (uint256 _editionNumber)\n  {\n    validateInvocations();\n    return _createEdition(msg.sender, _totalAvailable, _priceInWei, _startDate, _tokenUri, _enableAuction);\n  }\n\n  /**\n   * @dev Caller by owner, can create editions for other artists\n   * @dev Only callable from owner regardless of pause state\n   */\n  function createEditionFor(\n    address _artist,\n    uint256 _totalAvailable,\n    uint256 _priceInWei,\n    uint256 _startDate,\n    string _tokenUri,\n    bool _enableAuction\n  )\n  public\n  onlyOwner\n  returns (uint256 _editionNumber)\n  {\n    return _createEdition(_artist, _totalAvailable, _priceInWei, _startDate, _tokenUri, _enableAuction);\n  }\n\n  /**\n   * @dev Internal function for edition creation\n   */\n  function _createEdition(\n    address _artist,\n    uint256 _totalAvailable,\n    uint256 _priceInWei,\n    uint256 _startDate,\n    string _tokenUri,\n    bool _enableAuction\n  )\n  internal\n  returns (uint256 _editionNumber){\n\n    // Enforce edition size\n    require(_totalAvailable > 0, \"Must be at least one available in edition\");\n    require(_totalAvailable <= maxEditionSize, \"Must not exceed max edition size\");\n\n\n    // If we are the owner, skip this artists check\n    if (msg.sender != owner) {\n\n      // Enforce who can call this\n      if (!openToAllArtist) {\n        require(allowedArtists[_artist], \"Only allowed artists can create editions for now\");\n      }\n    }\n\n    // Find the next edition number we can use\n    uint256 editionNumber = getNextAvailableEditionNumber();\n\n    // Attempt to create a new edition\n    require(\n      _createNewEdition(editionNumber, _artist, _totalAvailable, _priceInWei, _startDate, _tokenUri),\n      \"Failed to create new edition\"\n    );\n\n    // Enable the auction if desired\n    if (_enableAuction) {\n      auction.setArtistsControlAddressAndEnabledEdition(editionNumber, _artist);\n    }\n\n    // Trigger event\n    emit SelfServiceEditionCreated(editionNumber, _artist, _priceInWei, _totalAvailable, _enableAuction);\n\n    return editionNumber;\n  }\n\n  /**\n   * @dev Internal function for calling external create methods with some none configurable defaults\n   */\n  function _createNewEdition(\n    uint256 _editionNumber,\n    address _artist,\n    uint256 _totalAvailable,\n    uint256 _priceInWei,\n    uint256 _startDate,\n    string _tokenUri\n  )\n  internal\n  returns (bool) {\n    return kodaV2.createActiveEdition(\n      _editionNumber,\n      0x0, // _editionData - no edition data\n      1, // _editionType - KODA always type 1\n      _startDate,\n      0, // _endDate - 0 = MAX unit256\n      _artist,\n      artistCommission,\n      _priceInWei,\n      _tokenUri,\n      _totalAvailable\n    );\n  }\n\n  function validateInvocations() internal {\n    if (disableInvocationCheck) {\n      return;\n    }\n    uint256 invocationPeriodStart = timeOfFirstInvocationInPeriod[msg.sender];\n\n    // If we are new to this process or its been cleared, skip the check\n    if (invocationPeriodStart != 0) {\n\n      // Work out how much time has passed\n      uint256 timePassedInPeriod = block.timestamp - invocationPeriodStart;\n\n      // If we are still in this time period\n      if (timePassedInPeriod < maxInvocationsTimePeriod) {\n\n        uint256 invocations = invocationsInTimePeriod[msg.sender];\n\n        // Ensure the number of invocations does not exceed the max number of invocations allowed\n        require(invocations <= maxInvocations, \"Exceeded max invocations for time period\");\n\n        // Update the invocations for this period if passed validation check\n        invocationsInTimePeriod[msg.sender] = invocations + 1;\n\n      } else {\n        // if we have passed the time period simple clear out the fields and start the period again\n        invocationsInTimePeriod[msg.sender] = 1;\n        timeOfFirstInvocationInPeriod[msg.sender] = block.number;\n      }\n\n    } else {\n      // initial the counters if not used before\n      invocationsInTimePeriod[msg.sender] = 1;\n      timeOfFirstInvocationInPeriod[msg.sender] = block.number;\n    }\n  }\n\n  /**\n   * @dev Internal function for dynamically generating the next KODA edition number\n   */\n  function getNextAvailableEditionNumber()\n  internal\n  returns (uint256 editionNumber) {\n\n    // Get current highest edition and total in the edition\n    uint256 highestEditionNumber = kodaV2.highestEditionNumber();\n    uint256 totalAvailableEdition = kodaV2.totalAvailableEdition(highestEditionNumber);\n\n    // Add the current highest plus its total, plus 1 as tokens start at 1 not zero\n    uint256 nextAvailableEditionNumber = highestEditionNumber.add(totalAvailableEdition).add(1);\n\n    // Round up to next 100, 1000 etc based on max allowed size\n    return ((nextAvailableEditionNumber + maxEditionSize - 1) / maxEditionSize) * maxEditionSize;\n  }\n\n  /**\n   * @dev Sets the KODA address\n   * @dev Only callable from owner\n   */\n  function setKodavV2(IKODAV2SelfServiceEditionCuration _kodaV2) onlyOwner public {\n    kodaV2 = _kodaV2;\n  }\n\n  /**\n   * @dev Sets the KODA auction\n   * @dev Only callable from owner\n   */\n  function setAuction(IKODAAuction _auction) onlyOwner public {\n    auction = _auction;\n  }\n\n  /**\n   * @dev Sets the default commission for each edition\n   * @dev Only callable from owner\n   */\n  function setArtistCommission(uint256 _artistCommission) onlyOwner public {\n    artistCommission = _artistCommission;\n  }\n\n  /**\n   * @dev Controls is the contract is open to all\n   * @dev Only callable from owner\n   */\n  function setOpenToAllArtist(bool _openToAllArtist) onlyOwner public {\n    openToAllArtist = _openToAllArtist;\n  }\n\n  /**\n   * @dev Controls who can call this contract\n   * @dev Only callable from owner\n   */\n  function setAllowedArtist(address _artist, bool _allowed) onlyOwner public {\n    allowedArtists[_artist] = _allowed;\n  }\n\n  /**\n   * @dev Sets the max edition size\n   * @dev Only callable from owner\n   */\n  function setMaxEditionSize(uint256 _maxEditionSize) onlyOwner public {\n    maxEditionSize = _maxEditionSize;\n  }\n\n  /**\n   * @dev Sets the max invocations\n   * @dev Only callable from owner\n   */\n  function setMaxInvocations(uint256 _maxInvocations) onlyOwner public {\n    maxInvocations = _maxInvocations;\n  }\n\n  /**\n   * @dev Sets the disable invocation check, when true the invocation in time period check is skipped\n   * @dev Only callable from owner\n   */\n  function setDisableInvocationCheck(bool _disableInvocationCheck) onlyOwner public {\n    disableInvocationCheck = _disableInvocationCheck;\n  }\n\n  /**\n   * @dev Checks to see if the account can mint more assets\n   */\n  function canCreateAnotherEdition(address account) public view returns (bool) {\n    return isEnabledForAccount(account) && invocationsInTimePeriod[account] <= maxInvocations;\n  }\n\n  /**\n   * @dev Checks to see if the account can create editions\n   */\n  function isEnabledForAccount(address account) public view returns (bool) {\n    if (openToAllArtist) {\n      return true;\n    }\n    return allowedArtists[account];\n  }\n\n  /**\n   * @dev Allows for the ability to extract stuck ether\n   * @dev Only callable from owner\n   */\n  function withdrawStuckEther(address _withdrawalAccount) onlyOwner public {\n    require(_withdrawalAccount != address(0), \"Invalid address provided\");\n    _withdrawalAccount.transfer(address(this).balance);\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_disableInvocationCheck\",\"type\":\"bool\"}],\"name\":\"setDisableInvocationCheck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawalAccount\",\"type\":\"address\"}],\"name\":\"withdrawStuckEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isEnabledForAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeOfFirstInvocationInPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invocationsInTimePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedArtists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxEditionSize\",\"type\":\"uint256\"}],\"name\":\"setMaxEditionSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kodaV2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artistCommission\",\"type\":\"uint256\"}],\"name\":\"setArtistCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxInvocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEditionSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"disableInvocationCheck\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxInvocations\",\"type\":\"uint256\"}],\"name\":\"setMaxInvocations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"artistCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artist\",\"type\":\"address\"},{\"name\":\"_totalAvailable\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_tokenUri\",\"type\":\"string\"},{\"name\":\"_enableAuction\",\"type\":\"bool\"}],\"name\":\"createEditionFor\",\"outputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artist\",\"type\":\"address\"},{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedArtist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalAvailable\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_tokenUri\",\"type\":\"string\"},{\"name\":\"_enableAuction\",\"type\":\"bool\"}],\"name\":\"createEdition\",\"outputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canCreateAnotherEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxInvocationsTimePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kodaV2\",\"type\":\"address\"}],\"name\":\"setKodavV2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_openToAllArtist\",\"type\":\"bool\"}],\"name\":\"setOpenToAllArtist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openToAllArtist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kodaV2\",\"type\":\"address\"},{\"name\":\"_auction\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalAvailable\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_enableAuction\",\"type\":\"bool\"}],\"name\":\"SelfServiceEditionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526000805460a060020a60ff0219169055605560039081556004805460ff1990811690915560646006556007805490911690556008556201518060095534801561004c57600080fd5b506040516040806112c583398101604052805160209091015160008054600160a060020a0319908116331790915560018054600160a060020a0394851690831617905560028054939092169216919091179055611217806100ae6000396000f3006080604052600436106101665763ffffffff60e060020a60003504166321319d4d811461016b57806326ccd77a146101875780632bd3152d146101a85780632ec8d5bb146101dd5780633f4ba83a1461021057806343ce33541461022557806346f7c98a14610246578063566aac2f146102675780635b638fa51461027f5780635c975abb146102b057806367a27b91146102c55780636cbdef61146102dd578063715018a6146102f25780637b37ce4f146103075780637d9f6db51461031c5780638456cb59146103315780638da5cb5b146103465780638e6e15771461035b57806397e950f714610370578063983586b1146103885780639ca3bbb31461039d578063a2ed408814610415578063a86f20571461043b578063ab1183e0146104a2578063b83281b0146104c3578063b8c6f579146104d8578063bbee17a3146104f9578063df282d911461051a578063e29cda4814610534578063f2fde38b14610549575b600080fd5b34801561017757600080fd5b50610185600435151561056a565b005b34801561019357600080fd5b50610185600160a060020a0360043516610594565b3480156101b457600080fd5b506101c9600160a060020a0360043516610645565b604080519115158252519081900360200190f35b3480156101e957600080fd5b506101fe600160a060020a036004351661067e565b60408051918252519081900360200190f35b34801561021c57600080fd5b50610185610690565b34801561023157600080fd5b506101fe600160a060020a0360043516610706565b34801561025257600080fd5b506101c9600160a060020a0360043516610718565b34801561027357600080fd5b5061018560043561072d565b34801561028b57600080fd5b50610294610749565b60408051600160a060020a039092168252519081900360200190f35b3480156102bc57600080fd5b506101c9610758565b3480156102d157600080fd5b50610185600435610768565b3480156102e957600080fd5b506101fe610784565b3480156102fe57600080fd5b5061018561078a565b34801561031357600080fd5b506101fe6107f6565b34801561032857600080fd5b506102946107fc565b34801561033d57600080fd5b5061018561080b565b34801561035257600080fd5b50610294610886565b34801561036757600080fd5b506101c9610895565b34801561037c57600080fd5b5061018560043561089e565b34801561039457600080fd5b506101fe6108ba565b3480156103a957600080fd5b50604080516020601f6084356004818101359283018490048402850184019095528184526101fe94600160a060020a03813516946024803595604435956064359536959460a49490939101919081908401838280828437509497505050509135151592506108c0915050565b34801561042157600080fd5b50610185600160a060020a036004351660243515156108f1565b34801561044757600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101fe9480359460248035956044359536956084949301918190840183828082843750949750505050913515159250610933915050565b3480156104ae57600080fd5b506101c9600160a060020a036004351661096b565b3480156104cf57600080fd5b506101fe6109a2565b3480156104e457600080fd5b50610185600160a060020a03600435166109a8565b34801561050557600080fd5b50610185600160a060020a03600435166109ee565b34801561052657600080fd5b506101856004351515610a34565b34801561054057600080fd5b506101c9610a5e565b34801561055557600080fd5b50610185600160a060020a0360043516610a67565b600054600160a060020a0316331461058157600080fd5b6007805460ff1916911515919091179055565b600054600160a060020a031633146105ab57600080fd5b600160a060020a038116151561060b576040805160e560020a62461bcd02815260206004820152601860248201527f496e76616c696420616464726573732070726f76696465640000000000000000604482015290519081900360640190fd5b604051600160a060020a03821690303180156108fc02916000818181858888f19350505050158015610641573d6000803e3d6000fd5b5050565b60045460009060ff161561065b57506001610679565b50600160a060020a03811660009081526005602052604090205460ff165b919050565b600b6020526000908152604090205481565b600054600160a060020a031633146106a757600080fd5b60005460a060020a900460ff1615156106bf57600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b600a6020526000908152604090205481565b60056020526000908152604090205460ff1681565b600054600160a060020a0316331461074457600080fd5b600655565b600154600160a060020a031681565b60005460a060020a900460ff1681565b600054600160a060020a0316331461077f57600080fd5b600355565b60085481565b600054600160a060020a031633146107a157600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60065481565b600254600160a060020a031681565b600054600160a060020a0316331461082257600080fd5b60005460a060020a900460ff161561083957600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600054600160a060020a031681565b60075460ff1681565b600054600160a060020a031633146108b557600080fd5b600855565b60035481565b60008054600160a060020a031633146108d857600080fd5b6108e6878787878787610a8a565b979650505050505050565b600054600160a060020a0316331461090857600080fd5b600160a060020a03919091166000908152600560205260409020805460ff1916911515919091179055565b6000805460a060020a900460ff161561094b57600080fd5b610953610d6e565b610961338787878787610a8a565b9695505050505050565b600061097682610645565b801561099c5750600854600160a060020a0383166000908152600a602052604090205411155b92915050565b60095481565b600054600160a060020a031633146109bf57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610a0557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610a4b57600080fd5b6004805460ff1916911515919091179055565b60045460ff1681565b600054600160a060020a03163314610a7e57600080fd5b610a8781610ea3565b50565b600080808711610b0a576040805160e560020a62461bcd02815260206004820152602960248201527f4d757374206265206174206c65617374206f6e6520617661696c61626c65206960448201527f6e2065646974696f6e0000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600654871115610b64576040805160e560020a62461bcd02815260206004820181905260248201527f4d757374206e6f7420657863656564206d61782065646974696f6e2073697a65604482015290519081900360640190fd5b600054600160a060020a03163314610c1a5760045460ff161515610c1a57600160a060020a03881660009081526005602052604090205460ff161515610c1a576040805160e560020a62461bcd02815260206004820152603060248201527f4f6e6c7920616c6c6f77656420617274697374732063616e206372656174652060448201527f65646974696f6e7320666f72206e6f7700000000000000000000000000000000606482015290519081900360840190fd5b610c22610f20565b9050610c3281898989898961107f565b1515610c88576040805160e560020a62461bcd02815260206004820152601c60248201527f4661696c656420746f20637265617465206e65772065646974696f6e00000000604482015290519081900360640190fd5b8215610d1557600254604080517fb5e7f3c300000000000000000000000000000000000000000000000000000000815260048101849052600160a060020a038b811660248301529151919092169163b5e7f3c391604480830192600092919082900301818387803b158015610cfc57600080fd5b505af1158015610d10573d6000803e3d6000fd5b505050505b6040805187815260208101899052841515818301529051600160a060020a038a169183917faa456f9f24703ca25ecf5b0bfd7bed18ed96589119418060049a312d983727669181900360600190a3979650505050505050565b6007546000908190819060ff1615610d8557610e9e565b336000908152600b602052604090205492508215610e7d578242039150600954821015610e575750336000908152600a6020526040902054600854811115610e3d576040805160e560020a62461bcd02815260206004820152602860248201527f4578636565646564206d617820696e766f636174696f6e7320666f722074696d60448201527f6520706572696f64000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600a60205260409020600182019055610e78565b336000908152600a6020908152604080832060019055600b90915290204390555b610e9e565b336000908152600a6020908152604080832060019055600b90915290204390555b505050565b600160a060020a0381161515610eb857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080600080600160009054906101000a9004600160a060020a0316600160a060020a031663abf3260f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f7957600080fd5b505af1158015610f8d573d6000803e3d6000fd5b505050506040513d6020811015610fa357600080fd5b5051600154604080517f6a028692000000000000000000000000000000000000000000000000000000008152600481018490529051929550600160a060020a0390911691636a028692916024808201926020929091908290030181600087803b15801561100f57600080fd5b505af1158015611023573d6000803e3d6000fd5b505050506040513d602081101561103957600080fd5b5051915061105e6001611052858563ffffffff6111de16565b9063ffffffff6111de16565b600654909150806000198184010181151561107557fe5b0402935050505090565b6000600160009054906101000a9004600160a060020a0316600160a060020a0316638bbb594a88600060018760008c6003548c8b8f6040518b63ffffffff1660e060020a028152600401808b81526020018a60010260001916815260200189815260200188815260200187815260200186600160a060020a0316600160a060020a0316815260200185815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561115257818101518382015260200161113a565b50505050905090810190601f16801561117f5780820380516001836020036101000a031916815260200191505b509b505050505050505050505050602060405180830381600087803b1580156111a757600080fd5b505af11580156111bb573d6000803e3d6000fd5b505050506040513d60208110156111d157600080fd5b5051979650505050505050565b8181018281101561099c57fe00a165627a7a723058207c1c02a0194f0e1adc4b144d7012a94eeb9e5bbee5caca48fbd4be36cc24e80b0029000000000000000000000000fbeef911dc5821886e1dda71586d90ed28174b7d000000000000000000000000848b0ea643e5a352d78e2c0c12a2dd8c96fec639",
  "constructorArguments": "000000000000000000000000fbeef911dc5821886e1dda71586d90ed28174b7d000000000000000000000000848b0ea643e5a352d78e2c0c12a2dd8c96fec639"
}