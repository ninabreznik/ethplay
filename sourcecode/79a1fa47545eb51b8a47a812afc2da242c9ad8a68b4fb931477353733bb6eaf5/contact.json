{
  "address": "0x7b406ae86dbd48125cd7b6fc8f524d697a79cadd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IRobo",
  "compilerVersion": "v0.4.25-nightly.2018.6.6+commit.59b35fa5",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-08\n*/\n\ncontract ERC20Token {\n    uint256 public totalSupply;\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\nlibrary SafeMathLib {\n    //\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    //\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0 && a > 0);\n        // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        return c;\n    }\n\n    //\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    //\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n}\n\ncontract StandardToken is ERC20Token {\n    using SafeMathLib for uint;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    //\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    //\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_value > 0 && balances[msg.sender] >= _value);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    //\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value > 0 && balances[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value);\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    //\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\ncontract IRobo is StandardToken {\n    using SafeMathLib for uint256;\n\n    string public name = \"IRobo Chain\";\n    string public symbol = \"IRB\";\n    uint256 public decimals = 18;\n    uint256 public INITIAL_SUPPLY = (21) * (10 ** 8) * (10 ** 18);//21\n\n    function IRobo(){\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = totalSupply;\n\n    }\n\n}",
  "bytecode": "60c0604052600b60808190527f49526f626f20436861696e00000000000000000000000000000000000000000060a090815261003e91600391906100c0565b506040805180820190915260038082527f49524200000000000000000000000000000000000000000000000000000000006020909201918252610083916004916100c0565b5060126005556b06c9144c1c690d4cb40000006006553480156100a557600080fd5b5060065460008181553381526001602052604090205561015b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010157805160ff191683800117855561012e565b8280016001018555821561012e579182015b8281111561012e578251825591602001919060010190610113565b5061013a92915061013e565b5090565b61015891905b8082111561013a5760008155600101610144565b90565b6106b48061016a6000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806318160ddd1461016a57806323b872dd146101915780632ff2e9dc146101bb578063313ce567146101d057806370a08231146101e557806395d89b4114610206578063a9059cbb1461021b578063dd62ed3e1461023f575b600080fd5b3480156100b457600080fd5b506100bd610266565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f75781810151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013e57600080fd5b50610156600160a060020a03600435166024356102f4565b604080519115158252519081900360200190f35b34801561017657600080fd5b5061017f61035a565b60408051918252519081900360200190f35b34801561019d57600080fd5b50610156600160a060020a0360043581169060243516604435610360565b3480156101c757600080fd5b5061017f6104ca565b3480156101dc57600080fd5b5061017f6104d0565b3480156101f157600080fd5b5061017f600160a060020a03600435166104d6565b34801561021257600080fd5b506100bd6104f1565b34801561022757600080fd5b50610156600160a060020a036004351660243561054c565b34801561024b57600080fd5b5061017f600160a060020a0360043581169060243516610627565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102ec5780601f106102c1576101008083540402835291602001916102ec565b820191906000526020600020905b8154815290600101906020018083116102cf57829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005481565b600080821180156103895750600160a060020a0384166000908152600160205260409020548211155b151561039457600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156103c457600080fd5b600160a060020a0383166000908152600160205260409020546103ed908363ffffffff61065216565b600160a060020a038085166000908152600160205260408082209390935590861681522054610422908363ffffffff61067616565b600160a060020a038516600090815260016020908152604080832093909355600281528282203383529052205461045f908363ffffffff61067616565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60065481565b60055481565b600160a060020a031660009081526001602052604090205490565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102ec5780601f106102c1576101008083540402835291602001916102ec565b6000808211801561056c5750336000908152600160205260409020548211155b151561057757600080fd5b33600090815260016020526040902054610597908363ffffffff61067616565b3360009081526001602052604080822092909255600160a060020a038516815220546105c9908363ffffffff61065216565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282018381108015906106675750828110155b151561066f57fe5b9392505050565b60008282111561068257fe5b509003905600a165627a7a72305820e1b236da085206618465fcc3735f13138fa9042dd24f9bf080ec760302d208e50029"
}