{
  "address": "0xfef55728bf49bd294be3759cc952b971ea4b3d74",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OKFToken",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-27\n*/\n\npragma solidity ^0.4.11;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyOwner() { require(msg.sender == owner); _; }\n\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract Pausable is Ownable {\n    bool public paused = false;\n\n    event Pause();\n    event Unpause();\n\n    modifier whenNotPaused() { require(!paused); _; }\n    modifier whenPaused() { require(paused); _; }\n\n    function pause() onlyOwner whenNotPaused {\n        paused = true;\n        Pause();\n    }\n    \n    function unpause() onlyOwner whenPaused {\n        paused = false;\n        Unpause();\n    }\n}\n\ncontract ERC20 {\n    uint256 public totalSupply;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function balanceOf(address who) constant returns (uint256);\n    function transfer(address to, uint256 value) returns (bool);\n    function transferFrom(address from, address to, uint256 value) returns (bool);\n    function allowance(address owner, address spender) constant returns (uint256);\n    function approve(address spender, uint256 value) returns (bool);\n}\n\ncontract StandardToken is ERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    function balanceOf(address _owner) constant returns(uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) returns(bool success) {\n        require(_to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\n        require(_to != address(0));\n\n        var _allowance = allowed[_from][msg.sender];\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n\n        Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function approve(address _spender, uint256 _value) returns(bool success) {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) returns(bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) returns(bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if(_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        \n        return true;\n    }\n}\n\ncontract BurnableToken is StandardToken {\n    event Burn(address indexed burner, uint256 value);\n\n    function burn(uint256 _value) public {\n        require(_value > 0);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n\ncontract OKFToken is BurnableToken, Ownable {\n    string public name = \"KickingOff Cinema Token\";\n    string public symbol = \"OKF\";\n    uint256 public decimals = 18;\n    \n    uint256 public INITIAL_SUPPLY = 11000000 * 1 ether;                                // Amount tokens\n\n    function OKFToken() {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n    }\n}\n\ncontract OKFCrowdsale is Pausable {\n    using SafeMath for uint;\n\n    OKFToken public token;\n    address public beneficiary = 0x97F795fbdEf69ee530d54e7Dc4eCDCc0244aAf00;        // Beneficiary 90%\n    address public command = 0xEe7410eCf01988A61Ba2C3f66283c08859414F6B;            // Command 10%\n\n    uint public collectedWei;\n    uint public collectedUSD;\n    uint public tokensSold;\n\n    uint public tokensForSale = 10000000 * 1 ether;                                 // Amount tokens for sale\n    uint public priceETHUSD = 250;                                                  // Ether price USD\n    uint public softCapUSD = 1500000;                                               // Soft cap USD\n    uint public hardCapUSD = 2500000;                                               // Hard cap USD\n    uint public softCapWei = softCapUSD * 1 ether / priceETHUSD;\n    uint public hardCapWei = hardCapUSD * 1 ether / priceETHUSD;\n    uint public priceTokenWei = 1 ether / 1000;\n\n    uint public startTime = 1507032000;                                             // Date start 03.10.2017 12:00 +0\n    uint public endTime = 1517659200;                                               // Date end 03.02.2018 12:00 +0\n    bool public crowdsaleFinished = false;\n\n    event NewContribution(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\n    event SoftCapReached(uint256 etherAmount);\n    event HardCapReached(uint256 etherAmount);\n    event Withdraw();\n\n    function OKFCrowdsale() {\n        token = new OKFToken();\n        require(token.transfer(0x915c517cB57fAB7C532262cB9f109C875bEd7d18, 1000000 * 1 ether));    // Bounty tokens\n    }\n\n    function() payable {\n        purchase();\n    }\n    \n    function purchase() whenNotPaused payable {\n        require(!crowdsaleFinished);\n        require(now >= startTime && now < endTime);\n        require(tokensSold < tokensForSale);\n        require(msg.value >= 0.001 * 1 ether);\n        require(msg.value <= 50 * 1 ether);\n\n        uint sum = msg.value;\n        uint amount = sum.div(priceTokenWei).mul(1 ether);\n        \n        if(tokensSold.add(amount) > tokensForSale) {\n            uint retAmount = tokensSold.add(amount).sub(tokensForSale);\n            uint retSum = retAmount.mul(priceTokenWei).div(1 ether);\n\n            amount = amount.sub(retAmount);\n            sum = sum.sub(retSum);\n\n            require(msg.sender.send(retSum));\n        }\n\n        require(token.transfer(msg.sender, amount));\n        require(beneficiary.send(sum.div(100).mul(90)));\n        require(command.send(sum.sub(sum.div(100).mul(90))));\n\n        if(collectedWei < softCapWei && collectedWei.add(sum) >= softCapWei) {\n            SoftCapReached(collectedWei);\n        }\n\n        if(collectedWei < hardCapWei && collectedWei.add(sum) >= hardCapWei) {\n            HardCapReached(collectedWei);\n        }\n\n        tokensSold = tokensSold.add(amount);\n        collectedWei = collectedWei.add(sum);\n        collectedUSD = collectedWei * priceETHUSD / 1 ether;\n\n        NewContribution(msg.sender, amount, sum);\n    }\n\n    function withdraw() onlyOwner {\n        require(!crowdsaleFinished);\n\n        token.transfer(beneficiary, token.balanceOf(this));\n        token.transferOwnership(beneficiary);\n        crowdsaleFinished = true;\n\n        Withdraw();\n    }\n}",
  "bytecode": "60606040526040805190810160405280601781526020017f4b69636b696e674f66662043696e656d6120546f6b656e000000000000000000815250600490805190602001906200005192919062000156565b506040805190810160405280600381526020017f4f4b460000000000000000000000000000000000000000000000000000000000815250600590805190602001906200009f92919062000156565b5060126006556a09195731e2ce35eb0000006007553415620000c057600080fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600754600081905550600754600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000205565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019957805160ff1916838001178555620001ca565b82800160010185558215620001ca579182015b82811115620001c9578251825591602001919060010190620001ac565b5b509050620001d99190620001dd565b5090565b6200020291905b80821115620001fe576000816000905550600101620001e4565b5090565b90565b6115aa80620002156000396000f300606060405236156100d9576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100de578063095ea7b31461016c57806318160ddd146101c657806323b872dd146101ef5780632ff2e9dc14610268578063313ce5671461029157806342966c68146102ba57806366188463146102dd57806370a08231146103375780638da5cb5b1461038457806395d89b41146103d9578063a9059cbb14610467578063d73dd623146104c1578063dd62ed3e1461051b578063f2fde38b14610587575b600080fd5b34156100e957600080fd5b6100f16105c0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610131578082015181840152602081019050610116565b50505050905090810190601f16801561015e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017757600080fd5b6101ac600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061065e565b604051808215151515815260200191505060405180910390f35b34156101d157600080fd5b6101d96107e5565b6040518082815260200191505060405180910390f35b34156101fa57600080fd5b61024e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107eb565b604051808215151515815260200191505060405180910390f35b341561027357600080fd5b61027b610ad7565b6040518082815260200191505060405180910390f35b341561029c57600080fd5b6102a4610add565b6040518082815260200191505060405180910390f35b34156102c557600080fd5b6102db6004808035906020019091905050610ae3565b005b34156102e857600080fd5b61031d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bf8565b604051808215151515815260200191505060405180910390f35b341561034257600080fd5b61036e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e89565b6040518082815260200191505060405180910390f35b341561038f57600080fd5b610397610ed2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103e457600080fd5b6103ec610ef8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561042c578082015181840152602081019050610411565b50505050905090810190601f1680156104595780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561047257600080fd5b6104a7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f96565b604051808215151515815260200191505060405180910390f35b34156104cc57600080fd5b610501600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061116c565b604051808215151515815260200191505060405180910390f35b341561052657600080fd5b610571600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611368565b6040518082815260200191505060405180910390f35b341561059257600080fd5b6105be600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113ef565b005b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106565780601f1061062b57610100808354040283529160200191610656565b820191906000526020600020905b81548152906001019060200180831161063957829003601f168201915b505050505081565b6000808214806106ea57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b15156106f557600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561082a57600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506108fb83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461154790919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061099083600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461156090919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109e6838261154790919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60075481565b60065481565b60008082111515610af357600080fd5b339050610b4882600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461154790919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ba08260005461154790919063ffffffff16565b6000819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610d09576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d9d565b610d1c838261154790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f8e5780601f10610f6357610100808354040283529160200191610f8e565b820191906000526020600020905b815481529060010190602001808311610f7157829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610fd357600080fd5b61102582600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461154790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110ba82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461156090919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006111fd82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461156090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561144b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561148757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561155557fe5b818303905092915050565b600080828401905083811015151561157457fe5b80915050929150505600a165627a7a7230582089276c38f9169e52cfd5b4bf3adcf4991d1e619b370795a49ebbe77aa5d7051f0029"
}