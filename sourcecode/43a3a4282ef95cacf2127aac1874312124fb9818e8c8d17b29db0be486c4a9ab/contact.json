{
  "address": "0x591d02bf8ddf41ef71847a78fd8d39e31c055aa4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "reanimator",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-15\n*/\n\npragma solidity ^0.5.1;\n\ncontract reanimator {\n    uint public advertisingPot;\n    mapping (uint256 => uint256) advertisingPotDistributed;\n    uint public lastDistrib;\n    uint public currentDistribRound;\n    uint public numOfAdvert;\n\n    address payable support;\n\n    mapping (address => uint256) double;\n    mapping (address => uint256) oneAndAHalf;\n    mapping (address => uint256) twoWeeks;\n    mapping (address => uint256) maximum;\n    mapping (address => uint256) advertising;\n    mapping (address => uint) advertisingLastWithdrawal;\n\n    constructor () public {\n        currentDistribRound = 0;\n        support = 0x3442d50F3F5c5E796d2ed3DdB95f0fB4fA54F144;\n        lastDistrib = now;\n    }\n\n    function () payable external {\n        support.transfer((3*msg.value)/50);\n        if (msg.value < 10**17) {advertisingPot += msg.value; return;}\n        if (msg.value == 10**19) {maximum[msg.sender] = now; return;}\n        if (msg.value == 5*10**18) {twoWeeks[msg.sender] = now; return;}\n        if (msg.value == 10**18) {oneAndAHalf[msg.sender] = now; return;}\n        if (msg.value == 3*10**17) {double[msg.sender] = now; return;}\n        if (msg.value == 10**17) {advertising[msg.sender] = now; advertisingLastWithdrawal[msg.sender] = currentDistribRound; numOfAdvert += 1; return;}\n        if (msg.value == 0) {withdraw(msg.sender); return;}\n        advertisingPot += msg.value;\n    }\n\n    function distributeAdvertisingFunds() public {\n        require (now - lastDistrib >= 1 weeks);\n        advertisingPotDistributed[currentDistribRound] = (advertisingPot / ( 2 * numOfAdvert));\n        currentDistribRound +=1;\n        advertisingPot = 0;\n        lastDistrib = now;\n    }\n\n    function getAdvBalance(address addr) public view returns (uint balance) {\n        uint _balance;\n        for (uint i = advertisingLastWithdrawal[addr]; i<currentDistribRound; i+=1) {\n                _balance += advertisingPotDistributed[i];\n        }\n        return _balance;\n    }\n    \n    function getAdvLastWithdrawal(address addr) public view returns (uint round) {\n        return advertisingLastWithdrawal[addr];\n    }\n\n    function withdraw(address payable addr) public {\n        uint toTransfer;\n\n        if (maximum[addr] != 0 && (now - maximum[addr] > 1 weeks)) {\n            toTransfer = 10**19 + 10**17 * (now - maximum[addr]) / 1 days;\n            maximum[addr] = 0;\n            addr.transfer(toTransfer);\n            return;\n        }\n\n        if (twoWeeks[addr] !=0 && (now - twoWeeks[addr] > 2 weeks)) {\n            toTransfer = 5 * 10**18 + 10**17 * (now - twoWeeks[addr]) / 1 days;\n            if (toTransfer > 6 * 10**18) toTransfer = 6 * 10**18;\n            twoWeeks[addr] = 0;\n            addr.transfer(toTransfer);\n            return;\n        }\n\n        if (oneAndAHalf[addr] !=0 && (now - oneAndAHalf[addr] > 28 days)) {\n            toTransfer = 10**18 + 2 * 10**16 * (now - oneAndAHalf[addr]) / 1 days;\n            if (toTransfer > 15 * 10**17) toTransfer =  15 * 10**17;\n            oneAndAHalf[addr] = 0;\n            addr.transfer(toTransfer);\n            return;\n        }\n\n        if (double[addr]!= 0 && (now - double[addr] > 53 days) ) {\n            toTransfer = 3 * 10**17 + 6 * 10**15 * (now - double[addr]) / 1 days;\n            if (toTransfer > 6 * 10**17) toTransfer = 6 * 10**17;\n            double[addr] = 0;\n            addr.transfer(toTransfer);\n            return;\n        }\n\n        if (advertising[addr] != 0) {\n            toTransfer = getAdvBalance(addr);\n            require (toTransfer>0);\n            advertisingLastWithdrawal[addr] = currentDistribRound;\n            addr.transfer(toTransfer);\n            return;\n        }\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506000600381905550733442d50f3f5c5e796d2ed3ddb95f0fb4fa54f144600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600281905550610e3c806100846000396000f3fe608060405260043610610088576000357c01000000000000000000000000000000000000000000000000000000009004806327c21c8e14610361578063342ee5af1461037857806347f4056f146103dd57806351cff8d9146104085780638fcce4121461045957806392ce055014610484578063bcf7a64c146104af578063c30cec04146104da575b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6032346003028115156100d357fe5b049081150290604051600060405180830381858888f193505050501580156100ff573d6000803e3d6000fd5b5067016345785d8a00003410156101245734600080828254019250508190555061035f565b678ac7230489e8000034141561017d5742600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061035f565b674563918244f400003414156101d65742600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061035f565b670de0b6b3a764000034141561022f5742600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061035f565b670429d069189e00003414156102885742600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061035f565b67016345785d8a00003414156103385742600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600354600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160046000828254019250508190555061035f565b600034141561034f5761034a3361053f565b61035f565b3460008082825401925050819055505b005b34801561036d57600080fd5b50610376610ccd565b005b34801561038457600080fd5b506103c76004803603602081101561039b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d30565b6040518082815260200191505060405180910390f35b3480156103e957600080fd5b506103f2610daf565b6040518082815260200191505060405180910390f35b34801561041457600080fd5b506104576004803603602081101561042b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061053f565b005b34801561046557600080fd5b5061046e610db5565b6040518082815260200191505060405180910390f35b34801561049057600080fd5b50610499610dbb565b6040518082815260200191505060405180910390f35b3480156104bb57600080fd5b506104c4610dc1565b6040518082815260200191505060405180910390f35b3480156104e657600080fd5b50610529600480360360208110156104fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dc7565b6040518082815260200191505060405180910390f35b600080600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141580156105d3575062093a80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544203115b156106d05762015180600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054420367016345785d8a00000281151561063157fe5b04678ac7230489e800000190506000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106c9573d6000803e3d6000fd5b5050610cca565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414158015610763575062127500600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544203115b1561087c5762015180600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054420367016345785d8a0000028115156107c157fe5b04674563918244f400000190506753444835ec5800008111156107ea576753444835ec58000090505b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610875573d6000803e3d6000fd5b5050610cca565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415801561090f57506224ea00600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544203115b15610a275762015180600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054420366470de4df8200000281151561096c57fe5b04670de0b6b3a76400000190506714d1120d7b160000811115610995576714d1120d7b16000090505b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a20573d6000803e3d6000fd5b5050610cca565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414158015610aba57506245df80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544203115b15610bd25762015180600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544203661550f7dca7000002811515610b1757fe5b04670429d069189e0000019050670853a0d2313c0000811115610b4057670853a0d2313c000090505b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610bcb573d6000803e3d6000fd5b5050610cca565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515610cc857610c2482610d30565b9050600081111515610c3557600080fd5b600354600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610cc1573d6000803e3d6000fd5b5050610cca565b505b50565b62093a80600254420310151515610ce357600080fd5b600454600202600054811515610cf557fe5b046001600060035481526020019081526020016000208190555060016003600082825401925050819055506000808190555042600281905550565b6000806000600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b600354811015610da557600160008281526020019081526020016000205482019150600181019050610d78565b5080915050919050565b60035481565b60045481565b60005481565b60025481565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905091905056fea165627a7a723058205e360109d3a644068f7fdf9177aa5395356da2ccda71ee48312ba89d6e14abe90029"
}