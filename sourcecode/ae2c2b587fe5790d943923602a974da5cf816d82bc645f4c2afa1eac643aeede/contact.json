{
  "address": "0xcbe7ab529a147149b1cf982c3a169f728bc0c3ca",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Aion",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-13\n*/\n\npragma solidity ^0.4.24; \n\n/* ----------------------------------------------------------------------------\n Client contract.\n This contract is generated for each user (user account). All the transactions of a user are executed from this contract.\n Only Aion smart contract can interact with the user account and only when the user schedules transactions.\n ----------------------------------------------------------------------------*/\n\ncontract AionClient {\n    \n    address private AionAddress;\n\n    constructor(address addraion) public{\n        AionAddress = addraion;\n    }\n\n    \n    function execfunct(address to, uint256 value, uint256 gaslimit, bytes data) external returns(bool) {\n        require(msg.sender == AionAddress);\n        return to.call.value(value).gas(gaslimit)(data);\n\n    }\n    \n\n    function () payable public {}\n\n}\n\n\n// ----------------------------------------------------------------------------\n// SafeMat library\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n  /** @dev Multiplies two numbers, throws on overflow.*/\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {return 0;}\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n  /** @dev Integer division of two numbers, truncating the quotient.*/\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n  /**@dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).*/\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n  /** @dev Adds two numbers, throws on overflow.*/\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n}\n\n\n\n/* ----------------------------------------------------------------------------\n Aion Smart contract (by ETH-Pantheon)\n  ----------------------------------------------------------------------------*/\n\ncontract Aion {\n    using SafeMath for uint256;\n\n    address public owner;\n    uint256 public serviceFee;\n    uint256 public AionID;\n    uint256 public feeChangeInterval;\n    mapping(address => address) public clientAccount;\n    mapping(uint256 => bytes32) public scheduledCalls;\n\n    // Log for executed transactions.\n    event ExecutedCallEvent(address indexed from, uint256 indexed AionID, bool TxStatus, bool TxStatus_cancel, bool reimbStatus);\n    \n    // Log for scheduled transactions.                        \n    event ScheduleCallEvent(uint256 indexed blocknumber, address indexed from, address to, uint256 value, uint256 gaslimit,\n                            uint256 gasprice, uint256 fee, bytes data, uint256 indexed AionID, bool schedType);\n    \n    // Log for cancelation of a scheduled call (no fee is charged, all funds are moved from client's smart contract to client's address)                        \n    event CancellScheduledTxEvent(address indexed from, uint256 Total, bool Status, uint256 indexed AionID);\n    \n\n    // Log for changes in the service fee\n    event feeChanged(uint256 newfee, uint256 oldfee);\n    \n\n    \n    \n    constructor () public {\n        owner = msg.sender;\n        serviceFee = 500000000000000;\n    }    \n\n    // This function allows to change the address of the owner (admin of the contract)\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == owner);\n        withdraw();\n        owner = newOwner;\n    }\n\n    // This function creates an account (contract) for a client if his address is \n    // not yet associated to an account\n    function createAccount() internal {\n        if(clientAccount[msg.sender]==address(0x0)){\n            AionClient newContract = new AionClient(address(this));\n            clientAccount[msg.sender] = address(newContract);\n        }\n    }\n    \n    \n    \n    /* This function schedules transactions: client should provide an amount of Ether equal to value + gaslimit*gasprice + serviceFee\n    @param blocknumber block or timestamp at which the transaction should be executed. \n    @param to recipient of the transaction.\n    @param value Amount of Wei to send with the transaction.\n    @param gaslimit maximum amount of gas to spend in the transaction.\n    @param gasprice value to pay per unit of gas.\n    @param data transaction data.\n    @param schedType determines if the transaction is scheduled on blocks or timestamp (true->timestamp)\n    @return uint256 Identification of the transaction\n    @return address address of the client account created\n    */\n    function ScheduleCall(uint256 blocknumber, address to, uint256 value, uint256 gaslimit, uint256 gasprice, bytes data, bool schedType) public payable returns (uint,address){\n        require(msg.value == value.add(gaslimit.mul(gasprice)).add(serviceFee));\n        AionID = AionID + 1;\n        scheduledCalls[AionID] = keccak256(abi.encodePacked(blocknumber, msg.sender, to, value, gaslimit, gasprice, serviceFee, data, schedType));\n        createAccount();\n        clientAccount[msg.sender].transfer(msg.value);\n        emit ScheduleCallEvent(blocknumber, msg.sender, to, value, gaslimit, gasprice, serviceFee, data, AionID, schedType);\n        return (AionID,clientAccount[msg.sender]);\n    }\n\n    \n    /* This function executes the transaction at the correct time/block\n    Aion off-chain system should provide the correct information for executing a transaction.\n    The information is checked against the hash of the original data provided by the user saved in scheduledCalls.\n    If the information does not match, the transaction is reverted.\n    */\n    function executeCall(uint256 blocknumber, address from, address to, uint256 value, uint256 gaslimit, uint256 gasprice,\n                         uint256 fee, bytes data, uint256 aionId, bool schedType) external {\n        require(msg.sender==owner);\n        if(schedType) require(blocknumber <= block.timestamp);\n        if(!schedType) require(blocknumber <= block.number);\n        \n        require(scheduledCalls[aionId]==keccak256(abi.encodePacked(blocknumber, from, to, value, gaslimit, gasprice, fee, data, schedType)));\n        AionClient instance = AionClient(clientAccount[from]);\n        \n        require(instance.execfunct(address(this), gasprice*gaslimit+fee, 2100, hex\"00\"));\n        bool TxStatus = instance.execfunct(to, value, gasleft().sub(50000), data);\n        \n        // If the user tx fails return the ether to user\n        bool TxStatus_cancel;\n        if(!TxStatus && value>0){TxStatus_cancel = instance.execfunct(from, value, 2100, hex\"00\");}\n        \n        delete scheduledCalls[aionId];\n        bool reimbStatus = from.call.value((gasleft()).mul(gasprice)).gas(2100)();\n        emit ExecutedCallEvent(from, aionId,TxStatus, TxStatus_cancel, reimbStatus);\n        \n    }\n\n    \n    /* This function allows clients to cancel scheduled transctions. No fee is charged.\n    Parameters are the same as in ScheduleCall.\n    @return bool indicating success or failure.\n    */\n    function cancellScheduledTx(uint256 blocknumber, address from, address to, uint256 value, uint256 gaslimit, uint256 gasprice,\n                         uint256 fee, bytes data, uint256 aionId, bool schedType) external returns(bool) {\n        if(schedType) require(blocknumber >=  block.timestamp+(3 minutes) || blocknumber <= block.timestamp-(5 minutes));\n        if(!schedType) require(blocknumber >  block.number+10 || blocknumber <= block.number-20);\n        require(scheduledCalls[aionId]==keccak256(abi.encodePacked(blocknumber, from, to, value, gaslimit, gasprice, fee, data, schedType)));\n        require(msg.sender==from);\n        AionClient instance = AionClient(clientAccount[msg.sender]);\n        \n        bool Status = instance.execfunct(from, value+gasprice*gaslimit+fee, 3000, hex\"00\");\n        require(Status);\n        emit CancellScheduledTxEvent(from, value+gasprice*gaslimit+fee, Status, aionId);\n        delete scheduledCalls[aionId];\n        return true;\n    }\n    \n    \n    \n    \n    // This function allows the owner of the contract to retrieve the fees and the gas price\n    function withdraw() public {\n        require(msg.sender==owner);\n        owner.transfer(address(this).balance);\n    }\n    \n    \n    // This function updates the service fee.\n    // To provide security to the clients the fee can only be updated once per day.\n    // This is to maintain the same price despite the Ether variation.\n    // Also, the amount of the update (if increased) can only increase 10% each time.\n    // Furthermore, an event is fired when the fee has been changed to inform the network.\n    function updatefee(uint256 fee) public{\n        require(msg.sender==owner);\n        require(feeChangeInterval<block.timestamp);\n        uint256 oldfee = serviceFee;\n        if(fee>serviceFee){\n            require(((fee.sub(serviceFee)).mul(100)).div(serviceFee)<=10);\n            serviceFee = fee;\n        } else{\n            serviceFee = fee;\n        }\n        feeChangeInterval = block.timestamp + (1 days);\n        emit feeChanged(serviceFee, oldfee);\n    } \n    \n\n    \n    // fallback- receive Ether\n    function () public payable {\n    \n    }\n\n\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a031916331790556601c6bf526340006001556112528061003d6000396000f3006080604052600436106100a05763ffffffff60e060020a60003504166325a811c881146100a25780633ccfd60b146101095780635d69ac2f1461011e5780637c732a041461015b5780637e965019146101825780638abdf5aa146101975780638da5cb5b146101ac578063a0135b2b146101c1578063dea8dc4f146101d9578063f2fde38b14610266578063f379dae714610287578063f608a5321461029f575b005b3480156100ae57600080fd5b506100f56004803590600160a060020a036024803582169260443590921691606435916084359160a4359160c4359160e435918201910135610104356101243515156102f2565b604080519115158252519081900360200190f35b34801561011557600080fd5b506100a06105fa565b34801561012a57600080fd5b5061013f600160a060020a036004351661064f565b60408051600160a060020a039092168252519081900360200190f35b34801561016757600080fd5b5061017061066a565b60408051918252519081900360200190f35b34801561018e57600080fd5b50610170610670565b3480156101a357600080fd5b50610170610676565b3480156101b857600080fd5b5061013f61067c565b3480156101cd57600080fd5b506100a060043561068b565b604080516020600460a43581810135601f81018490048402850184019095528484526102459482359460248035600160a060020a0316956044359560643595608435953695929460c4949201918190840183828082843750949750505050913515159250610759915050565b60408051928352600160a060020a0390911660208301528051918290030190f35b34801561027257600080fd5b506100a0600160a060020a0360043516610a76565b34801561029357600080fd5b50610170600435610ac4565b3480156102ab57600080fd5b506100a06004803590600160a060020a036024803582169260443590921691606435916084359160a4359160c4359160e43591820191013561010435610124351515610ad6565b6000806000831561031e574260b4018e101580610313575061012c42038e11155b151561031e57600080fd5b8315156103445743600a018e11806103395750601443038e11155b151561034457600080fd5b8d8d8d8d8d8d8d8d8d8c604051602001808b81526020018a600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140189600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018881526020018781526020018681526020018581526020018484808284378201915050821515151560f860020a0281526001019a50505050505050505050506040516020818303038152906040526040518082805190602001908083835b602083106104265780518252601f199092019160209182019101610407565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008b8152600590925292902054909114925061046d91505057600080fd5b33600160a060020a038e161461048257600080fd5b6004600033600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a9004600160a060020a0316915081600160a060020a0316630ed080eb8e8a8d8d028f0101610bb86040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200182815260200180602001828103825260018152602001806000815250602001945050505050602060405180830381600087803b15801561054a57600080fd5b505af115801561055e573d6000803e3d6000fd5b505050506040513d602081101561057457600080fd5b5051905080151561058457600080fd5b848d600160a060020a03167f4d6b1e7497da9b00075ded0c2f91f70f71a7a663e81ffaedf8170a1a0b33a2188a8d8d028f01018460405180838152602001821515151581526020019250505060405180910390a35050506000918252506005602052604081205550600198975050505050505050565b600054600160a060020a0316331461061157600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f1935050505015801561064c573d6000803e3d6000fd5b50565b600460205260009081526040902054600160a060020a031681565b60025481565b60035481565b60015481565b600054600160a060020a031681565b60008054600160a060020a031633146106a357600080fd5b60035442116106b157600080fd5b506001548082111561070957600154600a906106f4906106e860646106dc878463ffffffff610f8816565b9063ffffffff610f9d16565b9063ffffffff610fd616565b11156106ff57600080fd5b600182905561070f565b60018290555b620151804201600355600154604080519182526020820183905280517f854231545a00e13c316c82155f2b8610d638e9ff6ebc4930676f84a5af08a49a9281900390910190a15050565b600080610791600154610785610778888a610f9d90919063ffffffff16565b8a9063ffffffff610fed16565b9063ffffffff610fed16565b341461079c57600080fd5b6002546001016002819055508833898989896001548a8a604051602001808a815260200189600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140188600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140187815260200186815260200185815260200184815260200183805190602001908083835b602083106108515780518252601f199092019160209182019101610832565b6001836020036101000a038019825116818451168082178552505050505050905001821515151560f860020a02815260010199505050505050505050506040516020818303038152906040526040518082805190602001908083835b602083106108cc5780518252601f1990920191602091820191016108ad565b51815160209384036101000a600019018019909216911617905260408051929094018290039091206002546000908152600590925292902091909155506109159150610fff9050565b33600090815260046020526040808220549051600160a060020a0391909116913480156108fc02929091818181858888f1935050505015801561095c573d6000803e3d6000fd5b5060025433600160a060020a03168a7f2e884b4d116d81ab91e6efef064c69834e571bc1a85d40bd09762246261e0d708b8b8b8b6001548c8c6040518088600160a060020a0316600160a060020a031681526020018781526020018681526020018581526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b83811015610a0c5781810151838201526020016109f4565b50505050905090810190601f168015610a395780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a4505060025433600090815260046020526040902054600160a060020a031697509795505050505050565b600054600160a060020a03163314610a8d57600080fd5b610a956105fa565b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60056020526000908152604090205481565b60008054819081908190600160a060020a03163314610af457600080fd5b8415610b0757428f1115610b0757600080fd5b841515610b1b57438f1115610b1b57600080fd5b8e8e8e8e8e8e8e8e8e8d604051602001808b81526020018a600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140189600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018881526020018781526020018681526020018581526020018484808284378201915050821515151560f860020a0281526001019a50505050505050505050506040516020818303038152906040526040518082805190602001908083835b60208310610bfd5780518252601f199092019160209182019101610bde565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008c81526005909252929020549091149250610c4491505057600080fd5b600460008f600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a9004600160a060020a0316935083600160a060020a0316630ed080eb308b8e8e02016108346040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200182815260200180602001828103825260018152602001806000815250602001945050505050602060405180830381600087803b158015610d0a57600080fd5b505af1158015610d1e573d6000803e3d6000fd5b505050506040513d6020811015610d3457600080fd5b50511515610d4157600080fd5b83600160a060020a0316630ed080eb8e8e610d6561c3505a9063ffffffff610f8816565b8c8c6040518663ffffffff1660e060020a0281526004018086600160a060020a0316600160a060020a0316815260200185815260200184815260200180602001828103825284848281815260200192508082843782019150509650505050505050602060405180830381600087803b158015610de057600080fd5b505af1158015610df4573d6000803e3d6000fd5b505050506040513d6020811015610e0a57600080fd5b5051925082158015610e1c575060008c115b15610ed75783600160a060020a0316630ed080eb8f8e6108346040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200182815260200180602001828103825260018152602001806000815250602001945050505050602060405180830381600087803b158015610ea857600080fd5b505af1158015610ebc573d6000803e3d6000fd5b505050506040513d6020811015610ed257600080fd5b505191505b600086815260056020526040812055600160a060020a038e16610f018b5a9063ffffffff610f9d16565b60405161083491906000818181858888f193505050509050858e600160a060020a03167f261fcf4574a6d4150b477d663bcb54f3e85d06205e87069e22a1d7214a43a02f85858560405180841515151581526020018315151515815260200182151515158152602001935050505060405180910390a3505050505050505050505050505050565b600082821115610f9757600080fd5b50900390565b600080831515610fb05760009150610fcf565b50828202828482811515610fc057fe5b0414610fcb57600080fd5b8091505b5092915050565b6000808284811515610fe457fe5b04949350505050565b600082820183811015610fcb57600080fd5b33600090815260046020526040812054600160a060020a0316151561064c5730611027611091565b600160a060020a03909116815260405190819003602001906000f080158015611054573d6000803e3d6000fd5b503360009081526004602052604090208054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116179055905050565b604051610185806110a2833901905600608060405234801561001057600080fd5b50604051602080610185833981016040525160008054600160a060020a03909216600160a060020a0319909216919091179055610133806100526000396000f3006080604052600436106100405763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630ed080eb8114610042575b005b34801561004e57600080fd5b506100846004803573ffffffffffffffffffffffffffffffffffffffff1690602480359160443591606435908101910135610098565b604080519115158252519081900360200190f35b6000805473ffffffffffffffffffffffffffffffffffffffff1633146100bd57600080fd5b8573ffffffffffffffffffffffffffffffffffffffff16858590858560405180838380828437820191505092505050600060405180830381858888f19a99505050505050505050505600a165627a7a723058208cf03540fd3ee51d4f43d399bad625c9cf6909621d874f6b55cbc702ebec5bda0029a165627a7a72305820c9b820131ffa273f2a598b1da16f9678991dd7157b7f4097db818681364be2770029"
}