{
  "address": "0x0EAb6F04D173d055676e68876c22fAB00aD9FE83",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Cert",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-09\n*/\n\n// File: ../3rdparty/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: ../3rdparty/openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: ../3rdparty/openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n// File: contracts/Whitelist.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\ncontract Whitelist is Ownable{\n    mapping (uint256 => uint8) private _partners;\n    mapping (address => uint256) private _partner_ids;\n    mapping (uint256 => address) private _partner_address;\n    uint256 public partners_counter=1;\n    mapping (address => uint8) private _whitelist;\n    mapping (address => uint256) private _referrals;\n    mapping (uint256 => mapping(uint256=>address)) private _partners_referrals;\n    mapping (uint256 => uint256) _partners_referrals_counter;\n\n    uint8 public constant STATE_NEW = 0;\n    uint8 public constant STATE_WHITELISTED = 1;\n    uint8 public constant STATE_BLACKLISTED = 2;\n    uint8 public constant STATE_ONHOLD = 3;\n\n    event Whitelisted(address indexed partner, address indexed subscriber);\n    event AddPartner(address indexed partner, uint256 partner_id);\n\n    function _add_partner(address partner) private returns (bool){\n        _partner_ids[partner] = partners_counter;\n        _partner_address[partners_counter] = partner;\n        _partners[partners_counter] = STATE_WHITELISTED;\n        _whitelist[partner] = STATE_WHITELISTED;\n        emit AddPartner(partner, partners_counter);\n        partners_counter++;\n    }\n    \n    constructor () public {\n        _add_partner(msg.sender);\n    }\n\n    function getPartnerId(address partner) public view returns (uint256){\n        return _partner_ids[partner];\n    }\n\n    modifier onlyWhiteisted(){\n        require(_whitelist[msg.sender] == STATE_WHITELISTED, \"Ownable: caller is not whitelisted\");\n        _;\n    }\n\n    function isPartner() public view returns (bool){\n        return _partners[_partner_ids[msg.sender]] == STATE_WHITELISTED;\n    }\n\n    function partnerStatus(address partner) public view returns (uint8){\n        return _partners[_partner_ids[partner]];\n    }\n\n\n    modifier onlyPartnerOrOwner(){\n        require(isOwner() || isPartner(), \"Ownable: caller is not the owner or partner\");\n        _;\n    }\n\n    function setPartnerState(address partner, uint8 state) public onlyOwner returns(bool){\n        uint256 partner_id = getPartnerId(partner);\n        if( partner_id == 0 && state == STATE_WHITELISTED){\n            _add_partner(partner);\n        }else{\n            _partners[partner_id] = state;\n        }\n        return true;\n    }\n\n\n    function addPartner(address partner) public onlyOwner returns(bool){\n        _add_partner(partner);\n        return true;\n    }\n\n    function whitelist(address referral) public onlyPartnerOrOwner returns (bool){\n        require(_whitelist[referral] == STATE_NEW, \"Referral is already whitelisted\");\n        uint256 partner_id = getPartnerId(msg.sender);\n        require(partner_id != 0, \"Partner not found\");\n        _whitelist[referral] = STATE_WHITELISTED;\n        _referrals[referral] = partner_id;\n        _partners_referrals[partner_id][_partners_referrals_counter[partner_id]] = referral;\n        _partners_referrals_counter[partner_id] ++;\n        emit Whitelisted(msg.sender, referral);\n\n    }\n\n    function setWhitelistState(address referral, uint8 state) public onlyOwner returns (bool){\n        require(_whitelist[referral] != STATE_NEW, \"Referral is not in list\");\n        _whitelist[referral] = state;\n    }\n\n    function getWhitelistState(address referral) public view returns (uint8){\n        return _whitelist[referral];\n    }\n\n    function getPartner(address referral) public view returns (address){\n        return _partner_address[_referrals[referral]];\n    }\n\n    function setPartnersAddress(uint256 partner_id, address new_partner) public onlyOwner returns (bool){\n        _partner_address[partner_id] = new_partner;\n        _partner_ids[new_partner] = partner_id;\n        return true;\n    }\n\n    function bulkWhitelist(address[] memory address_list) public returns(bool){\n        for(uint256 i = 0; i < address_list.length; i++){\n            whitelist(address_list[i]);\n        }\n        return true;\n    }\n\n}\n\n// File: contracts/Periods.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\ncontract Periods is Ownable{\n    uint16 private _current_period;\n    uint16 private _total_periods;\n    mapping (uint16=>uint256) _periods;\n    bool _adjustable;\n\n    constructor() public{\n        _adjustable = true;\n    }\n\n    function getPeriodsCounter() public view returns(uint16){\n        return _total_periods;\n    }\n\n    function getCurrentPeriod() public view returns(uint16){\n        return _checkCurrentPeriod();\n    }\n\n    function getCurrentTime() public view returns(uint256){\n        return now;\n    }\n\n\n    function getCurrentPeriodTimestamp() public view returns(uint256){\n        return _periods[_current_period];\n    }\n\n    function getPeriodTimestamp(uint16 period) public view returns(uint256){\n        return _periods[period];\n    }\n\n    \n    function setCurrentPeriod(uint16 period) public onlyOwner returns (bool){\n        require(period < _total_periods, \"Do not have timestamp for that period\");\n        _current_period = period;\n        return true;\n    }\n\n\n    function addPeriodTimestamp(uint256 timestamp) public onlyOwner returns (bool){\n//        require(_total_periods - _current_period < 50, \"Cannot add more that 50 periods from now\");\n//        require((_current_period == 0) || (timestamp - _periods[_total_periods-1] > 28 days && (timestamp - _periods[_total_periods-1] < 32 days )), \"Incorrect period)\");\n        _periods[_total_periods] = timestamp;\n        _total_periods++;\n        return true;\n    }\n\n    function _checkCurrentPeriod() private view returns (uint16){\n        uint16 current_period = _current_period;\n        while( current_period < _total_periods-1){\n            if( now < _periods[current_period] ){\n                break;\n            }\n            current_period ++;\n        }\n        return current_period;\n    }\n\n    function adjustCurrentPeriod( ) public returns (uint16){\n        if(!_adjustable){\n            return _current_period;\n        }\n        require(_total_periods > 1, \"Periods are not set\");\n        require(_current_period < _total_periods, \"Last period reached\");\n        //require(_total_periods - _current_period < 50, \"Adjust more that 50 periods from now\");\n        uint16 current_period = _checkCurrentPeriod();\n        if(current_period > _current_period){\n            _current_period = current_period;\n        }\n        return current_period;\n    }\n\n    function addPeriodTimestamps(uint256[] memory timestamps) public onlyOwner returns(bool){\n        //require(timestamps.length < 50, \"Cannot set more than 50 periods\");\n        for(uint16 current_timestamp = 0; current_timestamp < timestamps.length; current_timestamp ++){\n            addPeriodTimestamp(timestamps[current_timestamp]);\n        }\n        return true;\n    }\n\n    function setLastPeriod(uint16 period) public onlyOwner returns(bool){\n        require(period < _total_periods-1, \"Incorrect period\");\n        require(period > _current_period, \"Cannot change passed periods\");\n        _total_periods = period;\n        return true;\n    }\n\n\n}\n\n// File: contracts/Subscriptions.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\n\n\ncontract Subscriptions is Ownable, Periods {\n    using SafeMath for uint256;\n\n    uint8 STATE_MISSING = 0;\n    uint8 STATE_ACTIVE = 1;\n    uint8 STATE_WITHDRAWN = 2;\n    uint8 STATE_PAID = 3;\n\n    uint256 ROUNDING = 1000;\n\n    struct Subscription{\n        uint256 subscriber_id;\n        uint256 subscription;\n        uint256 certificates;\n        uint256 certificate_rate;\n        uint256 certificate_partners_rate;\n        uint16 period;\n        uint16 lockout_period;\n        uint16 total_periods;\n        uint256 certificates_redeemed;\n        uint256 redemption;\n        uint256 payout;\n        uint256 deposit;\n        uint256 commission;\n        uint256 paid_to_partner;\n        uint256 redeem_requested;\n        uint256 redeem_delivered;\n    }\n\n    mapping (address=>uint256) private _subscribers;\n    mapping (uint256=>address) private _subscribers_id;\n    uint256 private _subscribers_counter=1;\n\n    mapping (uint256=>Subscription) private _subscriptions;\n    mapping (uint256=>mapping(uint256=>uint256)) private _subscribers_subscriptions;\n    mapping (uint256=>mapping(uint16=>uint256)) private _subscribers_subscriptions_by_period;\n    mapping (uint256=>uint16) private _subscribers_subscriptions_recent;\n    uint256 private _subscriptions_counter=1;\n    mapping (uint256=>uint256) private _subscribers_subscriptions_counter;\n\n    uint256 private _commission;\n\n    uint256 private _total_subscription=0;\n    uint16 private _lockout_period;\n    uint16 private _max_period;\n\n    event Subscribe(address subscriber, uint256 subscription, uint256 certs );\n    event Topup(address indexed subscriber, uint256 subscription_id, uint256 amount);\n    event Payout(address indexed subscriber, uint256 subscription_id, uint256 amount);\n    event Redemption(address indexed subscriber, uint256 subscription_id, uint256 amount);\n    event RedemptionPartner(address indexed partner, address indexed subscriber, uint256 subscription_id, uint256 amount);\n    event AmountCertNickelWireReceived(address indexed subscriber, uint256 subscription_id, uint256 amount);\n\n    constructor() public{\n        _lockout_period = 3;\n        _max_period = 24;\n        _commission = 1000;\n    }\n\n    function floor(uint a, uint m) internal pure returns (uint256 ) {\n        return ((a ) / m) * m;\n    }\n\n    function ceil(uint a, uint m) internal pure returns (uint256 ) {\n        return ((a + m + 1) / m) * m;\n    }\n\n\n    function get_subscriber_id(address subscriber_address) public view returns (uint256){\n        return _subscribers[subscriber_address];\n    }\n\n    function get_subscriber_address(uint256 subscriber_id) public view returns (address){\n        return _subscribers_id[subscriber_id];\n    }\n\n    function lockoutPeriod() public view returns(uint16){\n        return _lockout_period;\n    }\n\n    function setLockoutPeriod(uint16 period) public returns (bool){\n        _lockout_period = period;\n        return true;\n    }\n\n    function maxPeriod() public view returns(uint16){\n        return _max_period;\n    }\n\n    function setMaxPeriod(uint16 period) public onlyOwner returns(bool){\n        _max_period = period;\n        return true;\n    }\n\n    function commission() public view returns(uint256){\n        return _commission;\n    }\n\n    function setCommission(uint256 value) public onlyOwner returns(bool){\n        _commission = value;\n        return true;\n    }\n\n\n    function _new_subscription(uint256 subscriber_id, uint16 period, uint256 amount, uint256 units, uint256 unit_rate, uint256 partners_rate) private returns(bool){\n            Subscription memory subscription = Subscription(\n                subscriber_id,\n                amount, // subscription\n                units, // certificates\n                unit_rate, // certificate_rate\n                partners_rate, // certificate_partners_rate\n                period, // period\n                _lockout_period, // lockout_period\n                _max_period, // total_periods\n                0, // certificates_redeemed\n                0, // redemption\n                0, // redemption\n                0, // deposit\n                0, // commission\n                0,  // paidtopartner\n                0, // redemptiuon requested\n                0 // redeemption delivered\n                );\n\n            uint256 subscription_id = _subscriptions_counter;\n            _subscriptions[subscription_id] = subscription;\n            uint256 subscribers_subscriptions_counter = _subscribers_subscriptions_counter[subscriber_id];\n            _subscribers_subscriptions[subscriber_id][subscribers_subscriptions_counter] = subscription_id;\n            _subscribers_subscriptions_by_period[subscriber_id][period] = subscription_id;\n            if(_subscribers_subscriptions_recent[subscriber_id] < period){\n                _subscribers_subscriptions_recent[subscriber_id] = period;\n            }\n            _subscribers_subscriptions_counter[subscriber_id]++;\n            _subscriptions_counter++;\n    }\n\n\n    function _subscribe(address subscriber, uint256 amount, uint256 units, uint256 unit_rate, uint256 partners_rate ) private returns(bool){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        uint16 current_period = getCurrentPeriod();\n        if( subscriber_id == 0 ){\n            subscriber_id = _subscribers_counter;\n            _subscribers[subscriber] = subscriber_id;\n            _subscribers_id[subscriber_id] = subscriber;\n            _subscribers_counter ++;\n        }\n\n        if(_subscribers_subscriptions_counter[subscriber_id] == 0){\n            _new_subscription(subscriber_id, current_period, amount, units, unit_rate, partners_rate);\n        }else{\n            Subscription memory subscription = _subscriptions[_subscribers_subscriptions_by_period[subscriber_id][_subscribers_subscriptions_recent[subscriber_id]]];\n            if( subscription.period == current_period){\n                subscription.subscription = subscription.subscription.add(amount);\n                if(units != 0){\n                    subscription.certificate_rate = subscription.certificate_rate.mul(subscription.certificates).add(units.mul(unit_rate)).div(subscription.certificates.add(units));\n                    subscription.certificate_partners_rate = subscription.certificate_partners_rate.mul(subscription.certificates).add(units.mul(partners_rate)).div(subscription.certificates.add(units));\n                    subscription.certificates = subscription.certificates.add(units);\n                }\n            }else{\n                _new_subscription(subscriber_id, current_period, amount, units, unit_rate, partners_rate);\n            }\n        }\n        emit Subscribe(subscriber, amount, units);\n        return true;\n    }\n\n    function _payout(address subscriber, uint256 subscription_id, uint256 amount ) private returns(bool){\n        uint subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n\n        Subscription storage subscription = _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        uint256 total_payout = subscription.payout.add(amount);\n        require (subscription.subscription >= total_payout, \"Payout exceeds subscription\");\n        subscription.payout = total_payout;\n        return true;\n    }\n\n    function _return_payout(address subscriber, uint256 subscription_id, uint256 amount ) private returns(bool){\n        uint subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        Subscription storage subscription = _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        uint256 total_payout = subscription.payout.sub(amount);\n        require(total_payout <= subscription.subscription, \"Cannot return more than initial subscription\");\n        subscription.payout = total_payout;\n        return true;\n    }\n\n\n    function _redeem(uint256 subscriber_id, uint256 subscription_id, uint256 amount ) private returns(bool){\n        Subscription storage subscription = _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        require( subscription.certificates.sub(subscription.certificates_redeemed) >= amount, \"Not enough certificates\");\n\n        uint256 pay_to_partner_rate = 0;\n        if( getCurrentPeriod() >= subscription.period + subscription.lockout_period ){\n             pay_to_partner_rate = subscription.certificate_partners_rate.mul( getCurrentPeriod() - subscription.period - subscription.lockout_period).div(subscription.total_periods-subscription.lockout_period);\n        }\n\n        uint256 subscription_required = floor(amount.mul(subscription.certificate_rate.add(pay_to_partner_rate).add(commission())), ROUNDING);\n\n        uint256 subscription_debit = subscription.subscription.add(subscription.deposit);\n        uint256 subscription_credit = subscription.redemption.add(subscription.payout).add(subscription.commission).add(subscription.paid_to_partner);\n\n        require(subscription_debit > subscription_credit, \"Too much credited\");\n        require(subscription_required <= subscription_debit.sub(subscription_credit), \"Not enough funds\");\n\n        uint256 redemption_total = floor(amount.mul(subscription.certificate_rate), ROUNDING);\n\n        subscription.certificates_redeemed = subscription.certificates_redeemed.add(amount);\n        subscription.redemption = subscription.redemption.add( redemption_total);\n        subscription.paid_to_partner = subscription.paid_to_partner.add( _get_partners_payout(subscriber_id, subscription_id, amount) );\n        subscription.commission = floor(subscription.commission.add( amount.mul(commission())), ROUNDING);\n        return true;\n    }\n\n    function _partners_redeem(uint256 partners_subscriber_id, uint256 subscriber_id, uint256 subscription_id, uint256 amount ) private returns(bool){\n\n        Subscription memory subscription = _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        Subscription storage partners_subscription = _subscriptions[_subscribers_subscriptions_by_period[partners_subscriber_id][subscription.period]]; \n\n        uint256 redemption_total = amount.mul(subscription.certificate_partners_rate);\n        partners_subscription.redemption = partners_subscription.redemption.add( redemption_total);\n        partners_subscription.deposit = partners_subscription.deposit.add( _get_partners_payout(subscriber_id, subscription_id, amount ));\n        return true;\n    }\n\n    function _get_subscriptions_count(uint256 subscriber_id) private view returns(uint256){\n        return _subscribers_subscriptions_counter[subscriber_id];\n    }\n\n\n    function getSubscriptionsCountAll() public view returns(uint256) {\n        return _subscriptions_counter;\n    }\n\n    function getSubscriptionsCount(address subscriber) public view returns (uint256){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        return _get_subscriptions_count(subscriber_id);\n    }\n\n    function _getSubscription(uint256 subscriber_id, uint256 subscription_id) private view returns (uint256){\n        Subscription memory subscription = _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        return subscription.subscription;\n\n    }\n\n    function _getPayout(uint256 subscriber_id, uint256 subscription_id) private view returns (uint256){\n        Subscription memory subscription = _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        return subscription.payout;\n\n    }\n\n\n    function _getCertificates(uint256 subscriber_id, uint256 subscription_id) private view returns (uint256){\n        Subscription memory subscription = _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        return subscription.certificates;\n\n    }\n\n \n\n\n    function subscribe(address subscriber, uint256 amount, uint256 units, uint256 unit_rate, uint256 partner_rate) internal returns(bool){\n        _subscribe(subscriber, amount, units, unit_rate, partner_rate);\n        return true;\n    }\n\n    function _getCertificatesAvailable(uint256 subscriber_id, uint256 subscription_id) private view returns (uint256){\n        Subscription memory subscription = _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        uint256 subscription_debit = subscription.subscription.add(subscription.deposit);\n        uint256 subscription_credit = subscription.redemption.add(subscription.payout).add(subscription.commission).add(subscription.paid_to_partner);\n        if( subscription_credit >= subscription_debit){\n            return 0;\n        }\n        uint256 pay_to_partner_rate = 0;\n        if( getCurrentPeriod() >= subscription.period + subscription.lockout_period ){\n             pay_to_partner_rate = subscription.certificate_partners_rate.mul( getCurrentPeriod() - subscription.period - subscription.lockout_period).div(subscription.total_periods-subscription.lockout_period);\n        }\n        uint256 cert_rate = subscription.certificate_rate.add(pay_to_partner_rate).add(commission());\n        return ( subscription_debit.sub(subscription_credit).div( floor(cert_rate, ROUNDING)) );\n    }    \n\n    function _getTopupAmount(uint256 subscriber_id, uint256 subscription_id, uint256 amount) private view returns (uint256){\n        Subscription memory subscription = _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        require( amount <= subscription.certificates - subscription.certificates_redeemed, \"Cannot calculate for amount greater than available\");\n        uint256 calc_amount = amount;\n        if( amount == 0){\n            calc_amount = subscription.certificates - subscription.certificates_redeemed;\n        }\n        uint256 subscription_debit = subscription.subscription.add(subscription.deposit);\n        uint256 subscription_credit = subscription.redemption.add(subscription.payout).add(subscription.commission).add(subscription.paid_to_partner);\n\n        uint256 pay_to_partner_rate = 0;\n        if( getCurrentPeriod() >= subscription.period + subscription.lockout_period ){\n             pay_to_partner_rate = floor(subscription.certificate_partners_rate.\n                                    mul( getCurrentPeriod() - subscription.period - subscription.lockout_period).\n                                    div(subscription.total_periods-subscription.lockout_period), ROUNDING);\n        }\n        uint256 cert_rate = subscription.certificate_rate.add(pay_to_partner_rate).add(commission());\n        uint256 required_amount = cert_rate.mul(calc_amount);\n\n        if( required_amount <= subscription_debit.sub(subscription_credit) ) return 0;\n\n        return ( ceil(required_amount.sub(subscription_debit.sub(subscription_credit)), 1000));\n    }\n\n\n    function _get_available_payout(uint256 subscriber_id, uint256 subscription_id) private view returns (uint256){\n        Subscription memory subscription = _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        uint16 periods_passed = getCurrentPeriod() - subscription.period;\n        if( periods_passed <= subscription.lockout_period) {\n            return 0;\n        }\n        if( periods_passed > subscription.total_periods) {\n            return subscription.subscription.add(subscription.deposit).sub(subscription.payout).\n                sub(subscription.redemption).sub(subscription.commission).sub(subscription.paid_to_partner);\n        }\n        uint256 debit = subscription.subscription.sub(subscription.redemption).\n            div(subscription.total_periods - subscription.lockout_period).mul(periods_passed - subscription.lockout_period).add(subscription.deposit);\n        uint256 credit = subscription.paid_to_partner.add(subscription.payout).add(subscription.commission);\n        //if (credit >= debit) return 0;\n        return floor(debit.sub(credit), 1000);\n    }\n\n    function get_available(address subscriber, uint256 subscription_id) private view returns (uint256){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        return(_get_available_payout(subscriber_id, subscription_id));\n    }\n\n    function get_available_certs(address subscriber, uint256 subscription_id) private view returns (uint256){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        return(_get_available_payout(subscriber_id, subscription_id));\n    }\n    function _get_partners_payout(uint256 subscriber_id, uint256 subscription_id, uint256 amount) private view returns (uint256){\n        Subscription memory subscription = _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        uint16 periods_passed = getCurrentPeriod() - subscription.period;\n        if( periods_passed <= subscription.lockout_period) {\n            return 0;\n        }\n        if( periods_passed > subscription.total_periods) {\n            return floor(amount.mul(subscription.certificate_partners_rate), ROUNDING);\n        }\n        uint256 partners_payout = floor(amount.mul(subscription.certificate_partners_rate).\n                                        div(subscription.total_periods - subscription.lockout_period).\n                                        mul(periods_passed - subscription.lockout_period), ROUNDING);\n        return partners_payout;\n    }\n\n    function get_partners_payout(address subscriber, uint256 subscription_id, uint256 amount) private view returns (uint256){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        return(_get_partners_payout(subscriber_id, subscription_id, amount));\n    }\n\n    function payout(address subscriber, uint256 subscription_id, uint256 amount) internal returns(bool){\n        uint256 available = get_available(subscriber, subscription_id);\n        require(available >= amount, \"Not enough funds for withdrawal\");\n        _payout(subscriber, subscription_id, amount);\n        emit Payout(subscriber, subscription_id, amount);\n        return true;\n    }\n\n    function redeem(address subscriber, uint256 subscription_id, uint256 amount) internal returns(bool){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        _redeem(subscriber_id, subscription_id, amount);\n        emit Redemption(subscriber, subscription_id, amount);\n\n    }\n\n    function partners_redeem(address partner, address subscriber, uint256 subscription_id, uint256 amount) internal returns(bool){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        uint256 partners_subscriber_id = get_subscriber_id(partner);\n        require(partners_subscriber_id != 0, \"No subscriber id found\");\n        _partners_redeem(partners_subscriber_id, subscriber_id, subscription_id, amount);\n        emit RedemptionPartner(partner, subscriber, subscription_id, amount);\n    }\n\n    function return_payout(address subscriber, uint256 subscription_id, uint256 amount) internal returns(bool){\n        _return_payout(subscriber, subscription_id, amount);\n        return true;\n    }\n\n    function getAvailable(address subscriber, uint256 subscription_id) public view returns(uint256){\n        return get_available(subscriber, subscription_id);\n    }\n\n    function _changeSubscriptionOwner(address old_subscriber_address, address new_subscriber_address) internal returns (bool){\n        uint256 subscriber_id = get_subscriber_id(old_subscriber_address);\n        require(getSubscriptionsCount(new_subscriber_address) == 0, \"New subscriber has subscriptions\");\n        _subscribers[new_subscriber_address] = subscriber_id;\n        _subscribers_id[subscriber_id] = new_subscriber_address;\n        return true;\n    }\n\n    function _get_subscription(uint256 subscriber_id, uint256 subscription_id) private view returns(Subscription memory){\n        return  _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n    }\n\n\n\n    function get_subscription(address subscriber, uint256 subscription_id) internal view returns(Subscription memory){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        return  _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n    }\n\n    function get_global_subscription(uint256 subscription_id) internal view returns(Subscription memory){\n        return  _subscriptions[subscription_id];\n    }\n\n\n    function _top(uint256 subscriber_id, uint256 subscription_id, uint256 amount) private returns(bool){\n        Subscription storage subscription =  _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        subscription.deposit = subscription.deposit.add(amount);\n        return true;\n    }\n\n\n    function top(address subscriber, uint256 subscription_id, uint256 amount) internal returns(bool){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        //require(_getTopupAmount(subscriber_id, subscription_id, 0) >= amount, \"Cannot topup more that available\");\n        _top(subscriber_id, subscription_id, amount);\n        emit Topup(subscriber,subscription_id,amount);\n    }\n\n\n    function getCertSubscriptionStartDate(address subscriber, uint256 subscription_id) public view returns(uint256){\n        Subscription memory subscription = get_subscription(subscriber, subscription_id);\n        return getPeriodTimestamp(subscription.period);\n    }\n\n    function getNWXgrantedToInvestor(address subscriber, uint256 subscription_id) public view returns(uint256){\n        Subscription memory subscription = get_subscription(subscriber, subscription_id);\n        return subscription.subscription;\n    }\n\n    function getNWXgrantedToPartner(address subscriber, uint256 subscription_id) public view returns(uint256){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        Subscription memory subscription = get_subscription(subscriber, subscription_id);\n        return _get_partners_payout(subscriber_id, subscription_id, subscription.certificates.sub(subscription.certificates_redeemed) ).add(subscription.paid_to_partner);\n    }\n\n    function getNWXpayedToInvestor(address subscriber, uint256 subscription_id) public view returns(uint256){\n        Subscription memory subscription = get_subscription(subscriber, subscription_id);\n        return subscription.payout;\n    }\n\n    function getNWXpayedToPartner(address subscriber, uint256 subscription_id) public view returns(uint256){\n        Subscription memory subscription = get_subscription(subscriber, subscription_id);\n        return subscription.paid_to_partner;\n    }\n\n\n    function  getAmountCertRedemptionRequested(address subscriber, uint256 subscription_id) public view returns(uint256){\n        Subscription memory subscription = get_subscription(subscriber, subscription_id);\n        return subscription.certificates_redeemed;\n    }\n\n    function  getAmountCertNickelWireReceived(address subscriber, uint256 subscription_id) public view returns(uint256){\n        Subscription memory subscription = get_subscription(subscriber, subscription_id);\n        return subscription.redeem_delivered;\n    }\n\n    function  setAmountCertNickelWireReceived(address subscriber, uint256 subscription_id, uint256 amount ) public onlyOwner returns(bool){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        Subscription storage subscription = _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        require(subscription.certificates_redeemed>=amount, \"Not enough redeemed certs\");\n        subscription.redeem_delivered = amount;\n        emit AmountCertNickelWireReceived(subscriber, subscription_id, amount);\n        return true;\n    }\n    /*\n    function  setAmountCertRedemptionRequested(address subscriber, uint256 subscription_id, uint256 amount ) public onlyOwner returns(bool){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        Subscription storage subscription = _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        require(subscription.certificates_redeemed>=amount, \"Not enough redeemed certs\");\n        subscription.redeem_requested = amount;\n        return true;\n    }\n    */\n    /*\n    function  requestRedemption(uint256 subscription_id, uint256 amount ) public returns(bool){\n        uint256 subscriber_id = get_subscriber_id(msg.sender);\n        Subscription storage subscription = _subscriptions[_subscribers_subscriptions[subscriber_id][subscription_id]];\n        require(subscription.certificates_redeemed>=subscription.redeem_requested.add(amount), \"Not enough redeemed certs\");\n        subscription.redeem_requested = subscription.redeem_requested.add(amount);\n        return true;\n    }\n    */\n\n   function getTopupAmount(address subscriber, uint256 subscription_id, uint256 amount) public view returns (uint256){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        return _getTopupAmount(subscriber_id, subscription_id, amount);\n    }\n\n\n    function getSubscription(address subscriber, uint256 subscription_id) public view returns (uint256){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        return _getSubscription(subscriber_id, subscription_id);\n    }\n\n    function getPayout(address subscriber, uint256 subscription_id) public view returns (uint256){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        return _getPayout(subscriber_id, subscription_id);\n    }\n\n\n    function getSubscriptionAll(address subscriber) public view returns (uint256){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        uint256 total_subscription = 0;\n        for( uint256 subscription_id = 0; subscription_id < _subscribers_subscriptions_counter[subscriber_id]; subscription_id++){\n            total_subscription = total_subscription.add(_getSubscription(subscriber_id, subscription_id));\n        }\n        return total_subscription;\n    }\n\n\n    function getCertificatesRedeemedQty(address subscriber, uint256 subscription_id) public view returns (uint256){\n        Subscription memory subscription = get_subscription(subscriber, subscription_id);\n        return subscription.certificates_redeemed;\n    }\n\n\n    function getCertificatesQty(address subscriber, uint256 subscription_id) public view returns (uint256){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        return _getCertificates(subscriber_id, subscription_id);\n    }\n\n\n    function getCertificatesQtyAll(address subscriber) public view returns (uint256){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        uint256 total_certificates = 0;\n        for( uint256 subscription_id = 0; subscription_id < _subscribers_subscriptions_counter[subscriber_id]; subscription_id++){\n            total_certificates = total_certificates.add(_getCertificates(subscriber_id, subscription_id));\n        }\n        return total_certificates;\n    }\n\n\n\n    function getCertificatesQtyAvailable(address subscriber, uint256 subscription_id) public view returns (uint256){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        return _getCertificatesAvailable(subscriber_id, subscription_id);\n    }\n\n    function getCertificatesQtyAvailableAll(address subscriber) public view returns (uint256){\n        uint256 subscriber_id = get_subscriber_id(subscriber);\n        require(subscriber_id != 0, \"No subscriber id found\");\n        uint256 total_certificates = 0;\n        for( uint256 subscription_id = 0; subscription_id < _subscribers_subscriptions_counter[subscriber_id]; subscription_id++){\n            total_certificates = total_certificates.add(_getCertificatesAvailable(subscriber_id, subscription_id));\n        }\n        return total_certificates;\n    }\n\n\n}\n\n// File: contracts/INIWIX.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\ninterface INIWIX {\n    function tokenFallback( address from, uint256 value ) external returns(bool);\n}\n\n// File: contracts/Cert.sol\n\npragma solidity >=0.4.25 <0.6.0;\npragma experimental ABIEncoderV2;\n\n\n\n\n\n\n\n\ncontract Cert is Ownable, Whitelist, Subscriptions{\n    using SafeMath for uint256;\n\n    string private _name;\n\n    IERC20 _niwix;\n    IERC20 _euron;\n\n    uint256 private _deposit_niwix_rate;\n    uint256 private _subscription_niwix_rate;\n    uint256 private _subscription_partner_rate;\n    uint256 private _subscription_unit_rate;\n\n    uint public n;\n    address public sender;\n\n    event TokenFallbackCert(address indexed where, address indexed sender, address indexed from, uint256 value);\n    event DepositTo(address indexed where, address indexed sender, address indexed to, uint256 value);\n    event Redemption(address indexed subscriber, uint256 subscription_id, uint256 amount);\n    event ChangeSubscriber(address indexed from, address indexed to);\n    event Withdraw(address indexed subscriber, uint256 subscription_id, uint256 amount);\n    event Deposit(address indexed subscriber, uint256 amount);\n    event SetNIWIXRate(uint256 rate);\n    event SetUnitPrice(uint256 rate);\n    event SetSubscriptionPartnerRate(uint256 rate);\n\n    mapping (uint256=>uint256) paper_certificate;\n\n    function tokenFallback( address from, uint256 value ) public returns(bool){\n        if( msg.sender == address(_euron)){\n            if( from != address(_niwix) )\n            {\n                _euron.transfer(address(_niwix), value);\n                INIWIX(address(_niwix)).tokenFallback(from, value);\n            }\n        }\n        return true;\n    }\n\n\n    constructor() public {\n        _name = \"NiwixCert\";\n        _deposit_niwix_rate = 1000 * 10 ** 8;\n        _subscription_niwix_rate = 10000 * 10 ** 8;\n        _subscription_unit_rate = 100 * 10 ** 8;\n    }\n\n    function name() public view returns(string memory){\n        return _name;\n    }\n\n    function setNiwix(address contract_address) public onlyOwner returns(bool){\n        _niwix = IERC20(contract_address);\n        return true;\n    }\n\n    function setEURON(address contract_address) public onlyOwner returns(bool){\n        _euron = IERC20(contract_address);\n        return true;\n    }\n\n    function depositNiwixRate() public view returns(uint256){\n        return _deposit_niwix_rate;\n    }\n\n    function setDepositNiwixRate(uint256 value) public onlyOwner returns(uint256){\n        _deposit_niwix_rate = value;\n    }\n\n    function setSubscriptionUnitRate(uint256 value) public onlyOwner returns(uint256){\n        _subscription_unit_rate = value;\n    }\n\n    function setSubscriptionNiwixRate(uint256 value) public onlyOwner returns(uint256){\n        _subscription_niwix_rate = value;\n    }\n\n    function getSubscriptionUnitRate() public view returns(uint256){\n        return(_subscription_unit_rate);\n    }\n\n\n    function getDepositNiwixValue(uint256 euron_amount) public view returns(uint256){\n        return euron_amount.div(_subscription_unit_rate).mul(depositNiwixRate());\n    }\n\n\n    function setSubscriptionParnerRate(uint256 value) public onlyOwner returns(uint256){\n        _subscription_partner_rate = value;\n    }\n\n    function subscriptionPartnerRate() public view returns(uint256){\n        return _subscription_partner_rate;\n    }\n\n    function _get_subscription_units(uint256 value) public view returns (uint256){\n        return value.div(_subscription_unit_rate);\n    }\n\n    function _get_subscription_change(uint256 value) public view returns (uint256){\n        uint256 units = value.div(_subscription_unit_rate);\n        uint256 subscription = units.mul(_subscription_unit_rate);\n        return value.sub(subscription);\n    }\n\n    function get_subscription_value(uint256 value) public view returns (uint256, uint256, uint256){\n        uint256 units = _get_subscription_units(value);\n        uint256 subscription = units.mul(_subscription_unit_rate);\n        return (units, subscription, value.sub(subscription));\n    }\n\n\n    function _deposit(address euron_address, uint256 euron_amount, address niwix_address ) private returns (uint256 subscription_value){\n        _euron.transferFrom(euron_address, address(this), euron_amount);\n        uint256 subscription_change;\n        uint256 subscription_units;\n        (subscription_units, subscription_value, subscription_change) = get_subscription_value(euron_amount);\n        uint256 niwix_amount = getDepositNiwixValue(euron_amount);\n\n        if(niwix_amount>0){\n            _niwix.transferFrom(niwix_address, address(this), niwix_amount);\n        }\n        if(subscription_change > 0 ){\n            _euron.transfer(niwix_address, subscription_change);\n        }\n        address partner = getPartner(niwix_address);\n        if (partner != address(0)){\n            subscribe(partner, subscription_units.mul(_subscription_partner_rate), 0, 0, 0);\n        }\n\n        subscribe(niwix_address, subscription_units.mul(_subscription_niwix_rate), subscription_units, _subscription_niwix_rate, _subscription_partner_rate );\n    }\n\n    function depositTo(address address_to, uint256 value) public returns (bool){\n        require(getWhitelistState(address_to) == Whitelist.STATE_WHITELISTED, \"Address needs to be whitelisted\");\n        require(partnerStatus(address_to) == Whitelist.STATE_NEW, \"Cannot deposit to partner\");\n        emit DepositTo(address(this), msg.sender, address_to, value);\n        _deposit(msg.sender, value, address_to);\n        emit Deposit(address_to, value);\n        return true;\n    }\n\n    function deposit(uint256 value) public returns (bool){\n        require(getWhitelistState(msg.sender) == Whitelist.STATE_WHITELISTED, \"You need to be whitelisted\");\n        require(partnerStatus(msg.sender) == Whitelist.STATE_NEW, \"Partner cannot deposit\");\n        uint256 amount = value;\n        if(value == 0){\n            amount = _euron.allowance(msg.sender, address(this));\n        }\n        _deposit(msg.sender, amount, msg.sender);\n        emit Deposit(msg.sender, amount);\n    }\n\n    function withdraw(uint256 subscription_id, uint256 value) public returns (bool){\n        uint256 amount = value;\n        if(value == 0){\n            amount = getAvailable(msg.sender, subscription_id);\n        }\n        require(amount > 0, \"Wrong value or no funds availabe for withdrawal\");\n\n        payout(msg.sender, subscription_id, amount);\n        _niwix.transfer(msg.sender, amount);\n        emit Withdraw(msg.sender, subscription_id, amount);\n        return true;\n    }\n    /*\n    function return_withdrawal(uint256 subscription_id, uint256 value ) public returns (bool){\n        _niwix.transferFrom(msg.sender, address(this), value);\n        return_payout(msg.sender, subscription_id, value);\n        emit ReturnRedemption(msg.sender, subscription_id, value);\n        return true;\n    }\n    */\n    function change_subscribers_address(address from, address to) public onlyOwner returns (bool){\n        require(getWhitelistState(to) == Whitelist.STATE_WHITELISTED, \"To address must be whitelisted\");\n\n        _changeSubscriptionOwner(from, to);\n        emit ChangeSubscriber(from, to);\n        return true;\n    }\n\n    function change_address( address to) public returns (bool){\n        require(getWhitelistState(to) == Whitelist.STATE_WHITELISTED, \"To address must be whitelisted\");\n        _changeSubscriptionOwner(msg.sender, to);\n        emit ChangeSubscriber(msg.sender, to);\n        return true;\n    }\n\n\n    function redemption(uint256 subscription_id, uint256 amount) public  returns (bool){\n        address partner = getPartner(msg.sender);\n        if (partner != address(0)){\n           partners_redeem(partner, msg.sender, subscription_id, amount);\n        }\n\n        redeem(msg.sender, subscription_id, amount);\n        return true;\n    }\n\n    function topup(uint256 subscription_id, uint256 amount) public  returns (bool){\n        _niwix.transferFrom(msg.sender, address(this), amount);\n        top(msg.sender, subscription_id, amount);\n        return true;\n    }\n\n    function topupOwner(address to, uint256 subscription_id, uint256 amount) public onlyOwner  returns (bool){\n        top(to, subscription_id, amount);\n        return true;\n    }\n\n\n    function transfer(address to, uint256 subscription_id, uint256 amount) public returns (bool)\n    {\n//        Subscription memory subscription = get_subscription(msg.sender, subscription_id);\n//        uint256 subscription_certificates = subscription.certificates;\n        redemption(subscription_id, amount);\n        subscribe(to, amount.mul(_subscription_niwix_rate), amount, _subscription_niwix_rate, _subscription_partner_rate );\n        address partner = getPartner(to);\n        if (partner != address(0)){\n            subscribe(partner, amount.mul(_subscription_partner_rate), 0, 0, 0);\n        }\n\n    }\n\n    function viewSubscription(address subscriber, uint256 subscription_id) public view returns(Subscription memory){\n        if( subscriber == address(0) )\n        {\n            return get_global_subscription( subscription_id );\n        }\n        return get_subscription(subscriber, subscription_id);\n    }\n\n\n    function reclaimEther(address payable _to) external onlyOwner {\n        _to.transfer(address(this).balance);\n    }\n\n    function reclaimToken(IERC20 token, address _to) external onlyOwner {\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(_to, balance);\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"subscription_id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redemption\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_get_subscription_units\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSubscriptionsCountAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partner_id\",\"type\":\"uint256\"},{\"name\":\"new_partner\",\"type\":\"address\"}],\"name\":\"setPartnersAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATE_BLACKLISTED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAmountCertNickelWireReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"subscriptionPartnerRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"subscription_id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDepositNiwixRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topupOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"}],\"name\":\"getSubscription\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"}],\"name\":\"getNWXgrantedToInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"getWhitelistState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"subscription_id\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"partnerStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamps\",\"type\":\"uint256[]\"}],\"name\":\"addPeriodTimestamps\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adjustCurrentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"}],\"name\":\"getPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATE_NEW\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"change_subscribers_address\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSubscriptionUnitRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"getCertificatesQtyAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partner\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"setPartnerState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addPeriodTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"}],\"name\":\"getAmountCertRedemptionRequested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATE_WHITELISTED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"period\",\"type\":\"uint16\"}],\"name\":\"setMaxPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"addPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"get_subscription_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"setWhitelistState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"}],\"name\":\"getAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTopupAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"}],\"name\":\"getCertificatesQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPeriodsCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"}],\"name\":\"viewSubscription\",\"outputs\":[{\"components\":[{\"name\":\"subscriber_id\",\"type\":\"uint256\"},{\"name\":\"subscription\",\"type\":\"uint256\"},{\"name\":\"certificates\",\"type\":\"uint256\"},{\"name\":\"certificate_rate\",\"type\":\"uint256\"},{\"name\":\"certificate_partners_rate\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint16\"},{\"name\":\"lockout_period\",\"type\":\"uint16\"},{\"name\":\"total_periods\",\"type\":\"uint16\"},{\"name\":\"certificates_redeemed\",\"type\":\"uint256\"},{\"name\":\"redemption\",\"type\":\"uint256\"},{\"name\":\"payout\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"commission\",\"type\":\"uint256\"},{\"name\":\"paid_to_partner\",\"type\":\"uint256\"},{\"name\":\"redeem_requested\",\"type\":\"uint256\"},{\"name\":\"redeem_delivered\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"getPartnerId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"period\",\"type\":\"uint16\"}],\"name\":\"setLastPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"}],\"name\":\"getCertificatesQtyAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partners_counter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositNiwixRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATE_ONHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"euron_amount\",\"type\":\"uint256\"}],\"name\":\"getDepositNiwixValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"period\",\"type\":\"uint16\"}],\"name\":\"getPeriodTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contract_address\",\"type\":\"address\"}],\"name\":\"setNiwix\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"change_address\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"}],\"name\":\"getCertSubscriptionStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"}],\"name\":\"getNWXpayedToPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSubscriptionNiwixRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contract_address\",\"type\":\"address\"}],\"name\":\"setEURON\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"getSubscriptionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"}],\"name\":\"getCertificatesRedeemedQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber_id\",\"type\":\"uint256\"}],\"name\":\"get_subscriber_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"period\",\"type\":\"uint16\"}],\"name\":\"setLockoutPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockoutPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"getPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"getSubscriptionAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"}],\"name\":\"getNWXgrantedToPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"}],\"name\":\"getNWXpayedToInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"period\",\"type\":\"uint16\"}],\"name\":\"setCurrentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"getCertificatesQtyAvailableAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber\",\"type\":\"address\"},{\"name\":\"subscription_id\",\"type\":\"uint256\"}],\"name\":\"getAmountCertNickelWireReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSubscriptionParnerRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSubscriptionUnitRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_list\",\"type\":\"address[]\"}],\"name\":\"bulkWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_get_subscription_change\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriber_address\",\"type\":\"address\"}],\"name\":\"get_subscriber_id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPeriodTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"where\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenFallbackCert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"where\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"subscription_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ChangeSubscriber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"subscription_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"SetNIWIXRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"SetUnitPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"SetSubscriptionPartnerRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"subscription\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"certs\",\"type\":\"uint256\"}],\"name\":\"Subscribe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"subscription_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Topup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"subscription_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"subscription_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedemptionPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"subscription_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AmountCertNickelWireReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"partner_id\",\"type\":\"uint256\"}],\"name\":\"AddPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405260016004819055600b80546201000062ffff00199091161763ff000000191663020000001764ff0000000019166403000000001790556103e8600c55600f81905560145560006017553480156200005a57600080fd5b50600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620000b5336200014f60201b60201c565b50600b8054600160ff1990911617905560188054600361ffff199091161763ffff00001916621800001790556103e86016556040805180820190915260098082527f4e6977697843657274000000000000000000000000000000000000000000000060209092019182526200012d9160199162000201565b5064174876e800601c5564e8d4a51000601d556402540be400601f55620002cd565b600480546001600160a01b03831660008181526002602090815260408083208590559382526003815283822080546001600160a01b03191684179055845482526001808252848320805460ff199081168317909155848452600590925284832080549092161790559254915190917f45a17b1f6da9d421a049a082c945cf2865e865647dc0689cd8abccdbecac3a7991620001eb9190620002b7565b60405180910390a2600480546001019055919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024457805160ff191683800117855562000274565b8280016001018555821562000274579182015b828111156200027457825182559160200191906001019062000257565b506200028292915062000286565b5090565b620002a391905b808211156200028257600081556001016200028d565b90565b620002b181620002a3565b82525050565b60208101620002c78284620002a6565b92915050565b6153ee80620002dd6000396000f3fe608060405234801561001057600080fd5b50600436106104cd5760003560e01c80639379d2a111610283578063c968ac8e1161015c578063e66fdd3b116100ce578063f4e819fa11610092578063f4e819fa14610a3a578063f73b554114610a4d578063faa9331014610a60578063fd68919614610a73578063ff0c929414610a86578063ffaad6a514610a8e576104cd565b8063e66fdd3b146109db578063e9cc8dca146109ee578063ea830bb714610a01578063ec4825ff14610a14578063f2fde38b14610a27576104cd565b8063d40027ec11610120578063d40027ec1461097f578063d50f6d3a14610987578063d5add2fc1461099a578063deeaa7ad146109ad578063e1489191146109c0578063e14a514c146109c8576104cd565b8063c968ac8e14610933578063ca79237014610946578063ce61145e14610722578063cef5a4d714610959578063d12d15ba1461096c576104cd565b8063b5d56c24116101f5578063bc7323ce116101b9578063bc7323ce146108c1578063be4062f6146108d4578063c2758007146108e7578063c4f70183146108fa578063c522cd891461090d578063c6c11b1414610920576104cd565b8063b5d56c2414610883578063b6b55f251461088b578063b74bec8f1461089e578063bbf1de1d146108a6578063bc528a00146108ae576104cd565b80639e9fca8b116102475780639e9fca8b1461080f578063a8707a1214610822578063b138638b1461082a578063b181a9771461084a578063b54a6d901461085d578063b56b058e14610870576104cd565b80639379d2a1146107b057806394fe4211146107c35780639a6a30a4146107d65780639b19251a146107e95780639d559e0f146107fc576104cd565b806349b9a67f116103b55780636cf5f8ef1161032757806388ee39cc116102eb57806388ee39cc146107455780638b1519d9146107585780638bf342371461076b5780638da5cb5b1461077e5780638f32d59b1461078657806391da8f961461078e576104cd565b80636cf5f8ef14610705578063715018a6146107185780637bdce1f81461072257806382ebcbf014610735578063866b319b1461073d576104cd565b80635b73892f116103795780635b73892f146106a757806366e4e26e146106af57806367e404ce146106c2578063683a428a146106d75780636885c9b9146106df5780636a6851d3146106f2576104cd565b806349b9a67f1461065e57806349e85f1d14610666578063500e57a514610679578063515e5e2f1461068c578063565eea1914610694576104cd565b8063184ff47f1161044e578063355e6b4311610412578063355e6b43146105ec5780633ae9a18e146105ff5780633b22cca3146106125780633b66d02b146106255780634007ed7c14610638578063441a3e701461064b576104cd565b8063184ff47f146105a3578063273d3ffa146105b6578063286a4b81146105c957806329cb924d146105dc5780632e52d606146105e4576104cd565b8063095bcdb611610495578063095bcdb61461054d5780630e5a74ef14610560578063138c6a1b1461057357806314d61acf146105885780631708c1ac1461059b576104cd565b806302eb8bf6146104d25780630408dc06146104fb57806304edf7331461051b57806306fdde0314610523578063086146d214610538575b600080fd5b6104e56104e036600461469f565b610aa1565b6040516104f29190615055565b60405180910390f35b61050e610509366004614644565b610ae4565b6040516104f29190615271565b61050e610afb565b61052b610b02565b6040516104f29190615063565b610540610b98565b6040516104f29190615263565b6104e561055b366004614502565b610ba7565b6104e561056e366004614680565b610c23565b61057b610c92565b6040516104f2919061529b565b6104e5610596366004614502565b610c97565b61050e610d73565b6104e56105b136600461469f565b610d79565b61050e6105c4366004614644565b610e19565b6104e56105d7366004614502565b610e4b565b61050e610e8a565b61050e610e8e565b6104e56105fa366004614644565b610e94565b61050e61060d3660046144d2565b610ec6565b61050e6106203660046144d2565b610f06565b6104e56106333660046144d2565b610f26565b61057b61064636600461447a565b61106d565b6104e561065936600461469f565b61108b565b6105406111a4565b61057b61067436600461447a565b6111b4565b6104e56106873660046145b4565b6111df565b610540611241565b61050e6106a23660046144d2565b6112f0565b61057b611328565b6104e56106bd366004614498565b61132d565b6106ca6113d8565b6040516104f29190614fb2565b61050e6113e7565b61050e6106ed36600461447a565b6113ed565b6104e561070036600461454f565b611459565b6104e5610713366004614644565b6114d9565b610720611546565b005b61050e6107303660046144d2565b6115b7565b6104e56115d8565b61057b6115fe565b610720610753366004614607565b611603565b6104e5610766366004614626565b611738565b6104e561077936600461447a565b611783565b6106ca6117b5565b6104e56117c4565b6107a161079c366004614644565b6117d5565b6040516104f29392919061528d565b6104e56107be36600461454f565b611820565b61050e6107d13660046144d2565b6118b3565b6107206107e436600461447a565b6118bf565b6104e56107f736600461447a565b611920565b61050e61080a366004614502565b611a57565b61050e61081d3660046144d2565b611a99565b610540611ad1565b61083d6108383660046144d2565b611ae1565b6040516104f29190615254565b61050e61085836600461447a565b611b11565b6104e561086b366004614626565b611b2c565b61050e61087e3660046144d2565b611bdb565b61050e611c13565b6104e5610899366004614644565b611c19565b61050e611d58565b61057b611d5e565b61050e6108bc366004614644565b611d63565b61050e6108cf366004614626565b611d90565b6104e56108e236600461447a565b611da6565b6104e56108f536600461447a565b611df4565b61050e6109083660046144d2565b611e6d565b61050e61091b3660046144d2565b611e90565b61050e61092e366004614644565b611eb1565b6104e561094136600461447a565b611ee3565b61050e61095436600461447a565b611f31565b6106ca610967366004614644565b611f68565b6104e561097a366004614626565b611f83565b610540611f9d565b6106ca61099536600461447a565b611fa7565b61050e6109a836600461447a565b611fd2565b61050e6109bb3660046144d2565b612031565b61050e61208e565b61050e6109d63660046144d2565b612094565b6104e56109e9366004614626565b6120b5565b61050e6109fc36600461447a565b61212b565b61050e610a0f3660046144d2565b61218a565b61050e610a22366004614644565b6121ab565b610720610a3536600461447a565b6121dd565b61050e610a48366004614644565b612210565b6104e5610a5b36600461457f565b612242565b61050e610a6e366004614644565b612274565b61050e610a8136600461447a565b6122b7565b61050e6122d2565b6104e5610a9c3660046144d2565b6122eb565b600080610aad33611fa7565b90506001600160a01b03811615610acc57610aca813386866123f4565b505b610ad73385856124b3565b5060019150505b92915050565b6000610ade601f548361251890919063ffffffff16565b6014545b90565b60198054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b8e5780601f10610b6357610100808354040283529160200191610b8e565b820191906000526020600020905b815481529060010190602001808311610b7157829003601f168201915b5050505050905090565b6000610ba2612550565b905090565b6000610bb38383610aa1565b50610bd984610bcd601d54856125a190919063ffffffff16565b84601d54601e546125de565b506000610be585611fa7565b90506001600160a01b03811615610c1b57610c1981610c0f601e54866125a190919063ffffffff16565b60008060006125de565b505b509392505050565b6000610c2d6117c4565b610c5557604051600160e51b62461bcd028152600401610c4c906151d4565b60405180910390fd5b50600082815260036020908152604080832080546001600160a01b0319166001600160a01b03959095169485179055928252600290522055600190565b600281565b6000610ca16117c4565b610cc057604051600160e51b62461bcd028152600401610c4c906151d4565b6000610ccb856122b7565b6000818152601160209081526040808320888452825280832054835260109091529020600681015491925090841115610d1957604051600160e51b62461bcd028152600401610c4c90615124565b8381600d0181905550856001600160a01b03167f26d24a30ab61cbe9192310e19ef13ecd75cee7116a2a783e551cb364d260ee7d8686604051610d5d92919061527f565b60405180910390a26001925050505b9392505050565b601e5490565b601a54604051600160e01b6323b872dd0281526000916001600160a01b0316906323b872dd90610db190339030908790600401614fdb565b602060405180830381600087803b158015610dcb57600080fd5b505af1158015610ddf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e0391908101906145e9565b50610e0f3384846125fa565b5060019392505050565b6000610e236117c4565b610e4257604051600160e51b62461bcd028152600401610c4c906151d4565b601c9190915590565b6000610e556117c4565b610e7457604051600160e51b62461bcd028152600401610c4c906151d4565b610e7f8484846125fa565b506001949350505050565b4290565b60205481565b6000610e9e6117c4565b610ebd57604051600160e51b62461bcd028152600401610c4c906151d4565b50601655600190565b600080610ed2846122b7565b905080610ef457604051600160e51b62461bcd028152600401610c4c90615234565b610efe818461264f565b949350505050565b6000610f106142b5565b610f1a848461273e565b60200151949350505050565b601b546000906001600160a01b031633141561106457601a546001600160a01b0384811691161461106457601b54601a54604051600160e01b63a9059cbb0281526001600160a01b039283169263a9059cbb92610f8a92911690869060040161502c565b602060405180830381600087803b158015610fa457600080fd5b505af1158015610fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fdc91908101906145e9565b50601a54604051600160e01b633b66d02b0281526001600160a01b0390911690633b66d02b90611012908690869060040161502c565b602060405180830381600087803b15801561102c57600080fd5b505af1158015611040573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e0f91908101906145e9565b50600192915050565b6001600160a01b031660009081526005602052604090205460ff1690565b600081806110a05761109d33856118b3565b90505b600081116110c357604051600160e51b62461bcd028152600401610c4c90615104565b6110ce33858361285b565b50601a54604051600160e01b63a9059cbb0281526001600160a01b039091169063a9059cbb906111049033908590600401615003565b602060405180830381600087803b15801561111e57600080fd5b505af1158015611132573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061115691908101906145e9565b50336001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568858360405161119292919061527f565b60405180910390a25060019392505050565b60185462010000900461ffff1690565b6001600160a01b03166000908152600260209081526040808320548352600190915290205460ff1690565b60006111e96117c4565b61120857604051600160e51b62461bcd028152600401610c4c906151d4565b60005b82518161ffff16101561106457611238838261ffff168151811061122b57fe5b60200260200101516114d9565b5060010161120b565b600b5460009060ff1661125b575060095461ffff16610aff565b60095460016201000090910461ffff161161128b57604051600160e51b62461bcd028152600401610c4c906151e4565b60095461ffff62010000820481169116106112bb57604051600160e51b62461bcd028152600401610c4c90615134565b60006112c5612550565b60095490915061ffff9081169082161115610ba2576009805461ffff191661ffff8316179055905090565b6000806112fc846122b7565b90508061131e57604051600160e51b62461bcd028152600401610c4c90615234565b610efe81846128e7565b600081565b60006113376117c4565b61135657604051600160e51b62461bcd028152600401610c4c906151d4565b60016113618361106d565b60ff161461138457604051600160e51b62461bcd028152600401610c4c90615204565b61138e83836129dd565b50816001600160a01b0316836001600160a01b03167f531c4128c05f710cf7fe0fb60420b4b062f34b95342cd3dd71d50df93586b31160405160405180910390a350600192915050565b6021546001600160a01b031681565b601f5490565b6000806113f9836122b7565b90508061141b57604051600160e51b62461bcd028152600401610c4c90615234565b6000805b600083815260156020526040902054811015610c1b5761144f6114428483612a57565b839063ffffffff612b4816565b915060010161141f565b60006114636117c4565b61148257604051600160e51b62461bcd028152600401610c4c906151d4565b600061148d84611b11565b9050801580156114a0575060ff83166001145b156114b4576114ae84612b70565b50610e0f565b6000818152600160205260409020805460ff191660ff85161790555060019392505050565b60006114e36117c4565b61150257604051600160e51b62461bcd028152600401610c4c906151d4565b506009805461ffff620100009182900481166000908152600a6020526040902093909355815460018282048516810190941690910263ffff00001990911617905590565b61154e6117c4565b61156d57604051600160e51b62461bcd028152600401610c4c906151d4565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60006115c16142b5565b6115cb848461273e565b6101000151949350505050565b3360009081526002602090815260408083205483526001918290529091205460ff161490565b600181565b61160b6117c4565b61162a57604051600160e51b62461bcd028152600401610c4c906151d4565b604051600160e01b6370a082310281526000906001600160a01b038416906370a082319061165c903090600401614fb2565b60206040518083038186803b15801561167457600080fd5b505afa158015611688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116ac9190810190614662565b604051600160e01b63a9059cbb0281529091506001600160a01b0384169063a9059cbb906116e0908590859060040161502c565b602060405180830381600087803b1580156116fa57600080fd5b505af115801561170e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061173291908101906145e9565b50505050565b60006117426117c4565b61176157604051600160e51b62461bcd028152600401610c4c906151d4565b506018805461ffff8316620100000263ffff0000199091161790556001919050565b600061178d6117c4565b6117ac57604051600160e51b62461bcd028152600401610c4c906151d4565b61106482612b70565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6000806000806117e485610ae4565b905060006117fd601f54836125a190919063ffffffff16565b90508181611811888263ffffffff612c2016565b94509450945050509193909250565b600061182a6117c4565b61184957604051600160e51b62461bcd028152600401610c4c906151d4565b6001600160a01b03831660009081526005602052604090205460ff1661188457604051600160e51b62461bcd028152600401610c4c90615174565b6001600160a01b039092166000908152600560205260409020805460ff90921660ff1990921691909117905590565b6000610d6c8383612c4b565b6118c76117c4565b6118e657604051600160e51b62461bcd028152600401610c4c906151d4565b6040516001600160a01b03821690303180156108fc02916000818181858888f1935050505015801561191c573d6000803e3d6000fd5b5050565b600061192a6117c4565b8061193857506119386115d8565b61195757604051600160e51b62461bcd028152600401610c4c90615074565b6001600160a01b03821660009081526005602052604090205460ff161561199357604051600160e51b62461bcd028152600401610c4c90615244565b600061199e33611b11565b9050806119c057604051600160e51b62461bcd028152600401610c4c90615224565b6001600160a01b0383166000818152600560209081526040808320805460ff19166001908117909155600683528184208690558584526007835281842060088085528386208054875291855283862080546001600160a01b031916881790558786529093528254019091555133917f6661a7108aecd07864384529117d96c319c1163e3010c01390f6b704726e07de91a350919050565b600080611a63856122b7565b905080611a8557604051600160e51b62461bcd028152600401610c4c90615234565b611a90818585612c83565b95945050505050565b600080611aa5846122b7565b905080611ac757604051600160e51b62461bcd028152600401610c4c90615234565b610efe8184612a57565b60095462010000900461ffff1690565b611ae96142b5565b6001600160a01b038316611b0757611b0082612f13565b9050610ade565b610d6c838361273e565b6001600160a01b031660009081526002602052604090205490565b6000611b366117c4565b611b5557604051600160e51b62461bcd028152600401610c4c906151d4565b60095460001961ffff62010000909204821601811690831610611b8d57604051600160e51b62461bcd028152600401610c4c906150d4565b60095461ffff90811690831611611bb957604051600160e51b62461bcd028152600401610c4c90615194565b506009805461ffff8316620100000263ffff0000199091161790556001919050565b600080611be7846122b7565b905080611c0957604051600160e51b62461bcd028152600401610c4c90615234565b610efe8184612fee565b60045481565b60006001611c263361106d565b60ff1614611c4957604051600160e51b62461bcd028152600401610c4c90615214565b6000611c54336111b4565b60ff1614611c7757604051600160e51b62461bcd028152600401610c4c906151c4565b8180611d0557601b54604051600160e11b636eb1769f0281526001600160a01b039091169063dd62ed3e90611cb29033903090600401614fc0565b60206040518083038186803b158015611cca57600080fd5b505afa158015611cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d029190810190614662565b90505b611d103382336131e9565b50336001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051611d4a9190615271565b60405180910390a250919050565b601c5490565b600381565b6000610ade611d70611d58565b601f54611d8490859063ffffffff61251816565b9063ffffffff6125a116565b61ffff166000908152600a602052604090205490565b6000611db06117c4565b611dcf57604051600160e51b62461bcd028152600401610c4c906151d4565b50601a80546001600160a01b0383166001600160a01b03199091161790556001919050565b60006001611e018361106d565b60ff1614611e2457604051600160e51b62461bcd028152600401610c4c90615204565b611e2e33836129dd565b506040516001600160a01b0383169033907f531c4128c05f710cf7fe0fb60420b4b062f34b95342cd3dd71d50df93586b31190600090a3506001919050565b6000611e776142b5565b611e81848461273e565b9050610efe8160a00151611d90565b6000611e9a6142b5565b611ea4848461273e565b6101a00151949350505050565b6000611ebb6117c4565b611eda57604051600160e51b62461bcd028152600401610c4c906151d4565b601d9190915590565b6000611eed6117c4565b611f0c57604051600160e51b62461bcd028152600401610c4c906151d4565b50601b80546001600160a01b0383166001600160a01b03199091161790556001919050565b600080611f3d836122b7565b905080611f5f57604051600160e51b62461bcd028152600401610c4c90615234565b610d6c8161341c565b6000908152600e60205260409020546001600160a01b031690565b6018805461ffff831661ffff199091161790556001919050565b60185461ffff1690565b6001600160a01b03908116600090815260066020908152604080832054835260039091529020541690565b600080611fde836122b7565b90508061200057604051600160e51b62461bcd028152600401610c4c90615234565b6000805b600083815260156020526040902054811015610c1b57612027611442848361264f565b9150600101612004565b60008061203d846122b7565b90506120476142b5565b612051858561273e565b9050611a90816101a00151612082848761207d8661010001518760400151612c2090919063ffffffff16565b61342e565b9063ffffffff612b4816565b60165490565b600061209e6142b5565b6120a8848461273e565b6101400151949350505050565b60006120bf6117c4565b6120de57604051600160e51b62461bcd028152600401610c4c906151d4565b60095461ffff6201000090910481169083161061211057604051600160e51b62461bcd028152600401610c4c906150f4565b506009805461ffff831661ffff199091161790556001919050565b600080612137836122b7565b90508061215957604051600160e51b62461bcd028152600401610c4c90615234565b6000805b600083815260156020526040902054811015610c1b576121806114428483612fee565b915060010161215d565b60006121946142b5565b61219e848461273e565b6101e00151949350505050565b60006121b56117c4565b6121d457604051600160e51b62461bcd028152600401610c4c906151d4565b601e9190915590565b6121e56117c4565b61220457604051600160e51b62461bcd028152600401610c4c906151d4565b61220d816135c5565b50565b600061221a6117c4565b61223957604051600160e51b62461bcd028152600401610c4c906151d4565b601f9190915590565b6000805b82518110156110645761226b83828151811061225e57fe5b6020026020010151611920565b50600101612246565b60008061228c601f548461251890919063ffffffff16565b905060006122a5601f54836125a190919063ffffffff16565b9050610efe848263ffffffff612c2016565b6001600160a01b03166000908152600d602052604090205490565b60095461ffff166000908152600a602052604090205490565b600060016122f88461106d565b60ff161461231b57604051600160e51b62461bcd028152600401610c4c90615084565b6000612326846111b4565b60ff161461234957604051600160e51b62461bcd028152600401610c4c90615184565b826001600160a01b0316336001600160a01b0316306001600160a01b03167f594fae5846bf06b6f5833f494f7f319f2c273e9e17db709d1afdeac3066f6c5d856040516123969190615271565b60405180910390a46123a93383856131e9565b50826001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c836040516123e39190615271565b60405180910390a250600192915050565b600080612400856122b7565b90508061242257604051600160e51b62461bcd028152600401610c4c90615234565b600061242d876122b7565b90508061244f57604051600160e51b62461bcd028152600401610c4c90615234565b61245b81838787613649565b50856001600160a01b0316876001600160a01b03167f031a710ee19dd039b089d654fa2eeca76f5e60b8ae671dcbf4f73c1855e7deeb87876040516124a192919061527f565b60405180910390a35050949350505050565b6000806124bf856122b7565b90506124cc8185856137bd565b50846001600160a01b03167feebddeddf4ae1ee54a48517af27958e7666d69c7ba2e3e7c2b0ff87ef5f4491e858560405161250892919061527f565b60405180910390a2509392505050565b600080821161253c57604051600160e51b62461bcd028152600401610c4c90615164565b600082848161254757fe5b04949350505050565b60095460009061ffff165b60095460001961ffff6201000090920482160181169082161015610ba25761ffff81166000908152600a602052604090205442101561259957610ba2565b60010161255b565b6000826125b057506000610ade565b828202828482816125bd57fe5b0414610d6c57604051600160e51b62461bcd028152600401610c4c906151b4565b60006125ed8686868686613a2d565b5060019695505050505050565b600080612606856122b7565b9050612613818585613cec565b50846001600160a01b03167f6d4f4d29f1e5fcc4cc296c4f82a4091603352c8dd28d9ec455eeb703b3b54393858560405161250892919061527f565b60006126596142b5565b5050600091825260116020908152604080842092845291815281832054835260108152918190208151610200810183528154815260018201549381018490526002820154928101929092526003810154606083015260048101546080830152600581015461ffff80821660a0850152620100008204811660c0850152600160201b9091041660e08301526006810154610100830152600781015461012083015260088101546101408301526009810154610160830152600a810154610180830152600b8101546101a0830152600c8101546101c0830152600d01546101e09091015290565b6127466142b5565b6000612751846122b7565b90508061277357604051600160e51b62461bcd028152600401610c4c90615234565b60009081526011602090815260408083209483529381528382205482526010815290839020835161020081018552815481526001820154928101929092526002810154938201939093526003830154606082015260048301546080820152600583015461ffff80821660a0840152620100008204811660c0840152600160201b9091041660e08201526006830154610100820152600783015461012082015260088301546101408201526009830154610160820152600a830154610180820152600b8301546101a0820152600c8301546101c0820152600d909201546101e083015250919050565b6000806128688585612c4b565b90508281101561288d57604051600160e51b62461bcd028152600401610c4c906150b4565b612898858585613d34565b50846001600160a01b03167f634235fcf5af0adbca1a405ec65f6f6c08f55e1f379c2c45cd10f23cb29e0e3185856040516128d492919061527f565b60405180910390a2506001949350505050565b60006128f16142b5565b5050600082815260116020908152604080832084845282528083205483526010825291829020825161020081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015461ffff80821660a0840152620100008204811660c0840152600160201b9091041660e082015260068201546101008201526007820154610120820152600882015461014082018190526009830154610160830152600a830154610180830152600b8301546101a0830152600c8301546101c0830152600d909201546101e09091015292915050565b6000806129e9846122b7565b90506129f483611f31565b15612a1457604051600160e51b62461bcd028152600401610c4c906151a4565b6001600160a01b0383166000818152600d60209081526040808320859055938252600e90529190912080546001600160a01b031916909117905550600192915050565b6000612a616142b5565b50506000828152601160209081526040808320848452825280832054835260108252918290208251610200810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015461ffff80821660a0850152620100008204811660c0850152600160201b9091041660e08301526006810154610100830152600781015461012083015260088101546101408301526009810154610160830152600a810154610180830152600b8101546101a0830152600c8101546101c0830152600d01546101e09091015292915050565b600082820183811015610d6c57604051600160e51b62461bcd028152600401610c4c906150e4565b600480546001600160a01b03831660008181526002602090815260408083208590559382526003815283822080546001600160a01b03191684179055845482526001808252848320805460ff199081168317909155848452600590925284832080549092161790559254915190917f45a17b1f6da9d421a049a082c945cf2865e865647dc0689cd8abccdbecac3a7991612c0a9190615271565b60405180910390a2600480546001019055919050565b600082821115612c4557604051600160e51b62461bcd028152600401610c4c90615144565b50900390565b600080612c57846122b7565b905080612c7957604051600160e51b62461bcd028152600401610c4c90615234565b610efe8184613dd8565b6000612c8d6142b5565b506000848152601160209081526040808320868452825280832054835260108252918290208251610200810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015461ffff80821660a0850152620100008204811660c0850152600160201b9091041660e083015260068101546101008301819052600782015461012084015260088201546101408401526009820154610160840152600a820154610180840152600b8201546101a0840152600c8201546101c0840152600d909101546101e0830152909103831115612d9557604051600160e51b62461bcd028152600401610c4c906151f4565b8280612da957506101008101516040820151035b6000612dc78361016001518460200151612b4890919063ffffffff16565b90506000612dfa846101a00151612082866101800151612082886101400151896101200151612b4890919063ffffffff16565b905060008090508460c001518560a001510161ffff16612e18610b98565b61ffff1610612e7b57612e78612e708660c001518760e001510361ffff16612e648860c001518960a00151612e4b610b98565b030361ffff1689608001516125a190919063ffffffff16565b9063ffffffff61251816565b600c54613fe4565b90505b6000612e9d612e8861208e565b6060880151612082908563ffffffff612b4816565b90506000612eb1828763ffffffff6125a116565b9050612ec3858563ffffffff612c2016565b8111612ed9576000975050505050505050610d6c565b612f04612efc612eef878763ffffffff612c2016565b839063ffffffff612c2016565b6103e8613ff9565b9b9a5050505050505050505050565b612f1b6142b5565b50600090815260106020908152604091829020825161020081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015461ffff80821660a0840152620100008204811660c0840152600160201b9091041660e08201526006820154610100820152600782015461012082015260088201546101408201526009820154610160820152600a820154610180820152600b8201546101a0820152600c8201546101c0820152600d909101546101e082015290565b6000612ff86142b5565b5060008381526011602090815260408083208584528252808320548352601082528083208151610200810183528154815260018201549381018490526002820154928101929092526003810154606083015260048101546080830152600581015461ffff80821660a0850152620100008204811660c0850152600160201b9091041660e083015260068101546101008301526007810154610120830152600881015461014083015260098101546101608301819052600a820154610180840152600b8201546101a0840152600c8201546101c0840152600d909101546101e08301529092916130ec9163ffffffff612b4816565b9050600061311f836101a00151612082856101800151612082876101400151886101200151612b4890919063ffffffff16565b90508181106131345760009350505050610ade565b60c083015160a08401516000910161ffff1661314e610b98565b61ffff161061319a576131978460c001518560e001510361ffff16612e648660c001518760a0015161317e610b98565b030361ffff1687608001516125a190919063ffffffff16565b90505b60006131bc6131a761208e565b6060870151612082908563ffffffff612b4816565b90506131dd6131cd82600c54613fe4565b612e64868663ffffffff612c2016565b98975050505050505050565b601b54604051600160e01b6323b872dd0281526000916001600160a01b0316906323b872dd906132219087903090889060040161501e565b602060405180830381600087803b15801561323b57600080fd5b505af115801561324f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061327391908101906145e9565b50600080613280856117d5565b90945092509050600061329286611d63565b9050801561332557601a54604051600160e01b6323b872dd0281526001600160a01b03909116906323b872dd906132d19088903090869060040161501e565b602060405180830381600087803b1580156132eb57600080fd5b505af11580156132ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061332391908101906145e9565b505b82156133b457601b54604051600160e01b63a9059cbb0281526001600160a01b039091169063a9059cbb90613360908890879060040161502c565b602060405180830381600087803b15801561337a57600080fd5b505af115801561338e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133b291908101906145e9565b505b60006133bf86611fa7565b90506001600160a01b038116156133eb576133e981610c0f601e54866125a190919063ffffffff16565b505b61341086613404601d54866125a190919063ffffffff16565b85601d54601e546125de565b50505050509392505050565b60009081526015602052604090205490565b60006134386142b5565b506000848152601160209081526040808320868452825280832054835260108252808320815161020081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015461ffff80821660a08501819052620100008304821660c0860152600160201b9092041660e08401526006820154610100840152600782015461012084015260088201546101408401526009820154610160840152600a820154610180840152600b8201546101a0840152600c8201546101c0840152600d909101546101e0830152909190613526610b98565b0390508160c0015161ffff168161ffff161161354757600092505050610d6c565b8160e0015161ffff168161ffff16111561357e57613575612e708360800151866125a190919063ffffffff16565b92505050610d6c565b60006135ba612e708460c00151840361ffff16611d848660c001518760e001510361ffff16612e6488608001518b6125a190919063ffffffff16565b979650505050505050565b6001600160a01b0381166135ee57604051600160e51b62461bcd028152600401610c4c906150c4565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006136536142b5565b506000848152601160209081526040808320868452825280832054835260108083528184208251610200810184528154815260018201548186015260028201548185015260038201546060820152600482015460808201908152600583015461ffff80821660a08501908152620100008304821660c0860152600160201b909204811660e08501526006850154610100850152600785015461012085015260088501546101408501526009850154610160850152600a850154610180850152600b8501546101a0850152600c8501546101c0850152600d909401546101e08401528c8852601287528588209051909316875291855283862054865291909352908320915190929061376b90869063ffffffff6125a116565b6007830154909150613783908263ffffffff612b4816565b60078301556137a761379688888861342e565b60098401549063ffffffff612b4816565b6009909201919091555060019695505050505050565b60008381526011602090815260408083208584528252808320548352601090915281206006810154600282015484916137fc919063ffffffff612c2016565b101561381d57604051600160e51b62461bcd028152600401610c4c90615094565b600581015460009061ffff8082166201000090920481169190910116613841610b98565b61ffff16106138965760058201546138939061ffff6201000082048116600160201b83048216819003821692612e64921661387a610b98565b030361ffff1685600401546125a190919063ffffffff16565b90505b60006138cb612e706138be6138a961208e565b6003870154612082908763ffffffff612b4816565b879063ffffffff6125a116565b905060006138ea84600901548560010154612b4890919063ffffffff16565b9050600061391985600b015461208287600a015461208289600801548a60070154612b4890919063ffffffff16565b905080821161393d57604051600160e51b62461bcd028152600401610c4c90615154565b61394d828263ffffffff612c2016565b83111561396f57604051600160e51b62461bcd028152600401610c4c90615114565b600061398b612e7087600301548a6125a190919063ffffffff16565b60068701549091506139a3908963ffffffff612b4816565b600687015560078601546139bd908263ffffffff612b4816565b60078701556139e16139d08b8b8b61342e565b600b8801549063ffffffff612b4816565b600b870155613a15612e70613a046139f761208e565b8b9063ffffffff6125a116565b600a8901549063ffffffff612b4816565b600a9096019590955550600198975050505050505050565b600080613a39876122b7565b90506000613a45610b98565b905081613a9457600f80546001600160a01b038a166000818152600d60209081526040808320859055848352600e909152902080546001600160a01b0319169091179055815460010190915591505b600082815260156020526040902054613abb57613ab582828989898961400a565b50613ca3565b613ac36142b5565b506000828152601260209081526040808320601383528184205461ffff90811685529083528184205484526010835292819020815161020081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015480841660a08401819052620100008204851660c0850152600160201b909104841660e08401526006820154610100840152600782015461012084015260088201546101408401526009820154610160840152600a820154610180840152600b8201546101a0840152600c8201546101c0840152600d909101546101e0830152909183161415613c91576020810151613bd2908963ffffffff612b4816565b60208201528615613c8c576040810151613c2290613bf6908963ffffffff612b4816565b612e64613c098a8a63ffffffff6125a116565b604085015160608601516120829163ffffffff6125a116565b60608201526040810151613c6c90613c40908963ffffffff612b4816565b612e64613c538a8963ffffffff6125a116565b604085015160808601516120829163ffffffff6125a116565b60808201526040810151613c86908863ffffffff612b4816565b60408201525b613ca1565b613c9f83838a8a8a8a61400a565b505b505b7f4614f8a9907ae69d017525a0d85be89c0321d65d51f2e88e42a5caed59c3a0a3888888604051613cd69392919061503a565b60405180910390a1506001979650505050505050565b60008381526011602090815260408083208584528252808320548352601090915281206009810154613d24908463ffffffff612b4816565b6009909101555060019392505050565b600080613d40856122b7565b905080613d6257604051600160e51b62461bcd028152600401610c4c90615234565b60008181526011602090815260408083208784528252808320548352601090915281206008810154909190613d9d908663ffffffff612b4816565b90508082600101541015613dc657604051600160e51b62461bcd028152600401610c4c906150a4565b60089091015550600190509392505050565b6000613de26142b5565b506000838152601160209081526040808320858452825280832054835260108252808320815161020081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015461ffff80821660a08501819052620100008304821660c0860152600160201b9092041660e08401526006820154610100840152600782015461012084015260088201546101408401526009820154610160840152600a820154610180840152600b8201546101a0840152600c8201546101c0840152600d909101546101e0830152909190613ed0610b98565b0390508160c0015161ffff168161ffff1611613ef157600092505050610ade565b8160e0015161ffff168161ffff161115613f5a57613f51826101a00151613f45846101800151613f45866101200151613f45886101400151613f458a61016001518b60200151612b4890919063ffffffff16565b9063ffffffff612c2016565b92505050610ade565b6000613fa18361016001516120828560c00151850361ffff16611d848760c001518860e001510361ffff16612e648961012001518a60200151612c2090919063ffffffff16565b90506000613fcb846101800151612082866101400151876101a00151612b4890919063ffffffff16565b90506135ba613fe0838363ffffffff612c2016565b6103e85b600081828481613ff057fe5b04029392505050565b6000818283850160010181613ff057fe5b60006140146142b5565b6040518061020001604052808981526020018781526020018681526020018581526020018481526020018861ffff168152602001601860009054906101000a900461ffff1661ffff168152602001601860029054906101000a900461ffff1661ffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509050600060145490508160106000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548161ffff021916908361ffff16021790555060c08201518160050160026101000a81548161ffff021916908361ffff16021790555060e08201518160050160046101000a81548161ffff021916908361ffff160217905550610100820151816006015561012082015181600701556101408201518160080155610160820151816009015561018082015181600a01556101a082015181600b01556101c082015181600c01556101e082015181600d01559050506000601560008b815260200190815260200160002054905081601160008c815260200190815260200160002060008381526020019081526020016000208190555081601260008c815260200190815260200160002060008b61ffff1661ffff168152602001908152602001600020819055508861ffff16601360008c815260200190815260200160002060009054906101000a900461ffff1661ffff1610156142865760008a8152601360205260409020805461ffff191661ffff8b161790555b505050600096875260156020526040909620805460019081019091556014805490910190555093949350505050565b6040518061020001604052806000815260200160008152602001600081526020016000815260200160008152602001600061ffff168152602001600061ffff168152602001600061ffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8035610ade81615373565b600082601f83011261435a57600080fd5b813561436d614368826152d0565b6152a9565b9150818183526020840193506020810190508385602084028201111561439257600080fd5b60005b838110156143be57816143a8888261433e565b8452506020928301929190910190600101614395565b5050505092915050565b600082601f8301126143d957600080fd5b81356143e7614368826152d0565b9150818183526020840193506020810190508385602084028201111561440c57600080fd5b60005b838110156143be57816144228882614459565b845250602092830192919091019060010161440f565b8051610ade81615387565b8035610ade81615390565b8035610ade81615399565b8035610ade816153a2565b8051610ade816153a2565b8035610ade816153ab565b60006020828403121561448c57600080fd5b6000610efe848461433e565b600080604083850312156144ab57600080fd5b60006144b7858561433e565b92505060206144c88582860161433e565b9150509250929050565b600080604083850312156144e557600080fd5b60006144f1858561433e565b92505060206144c885828601614459565b60008060006060848603121561451757600080fd5b6000614523868661433e565b935050602061453486828701614459565b925050604061454586828701614459565b9150509250925092565b6000806040838503121561456257600080fd5b600061456e858561433e565b92505060206144c88582860161446f565b60006020828403121561459157600080fd5b813567ffffffffffffffff8111156145a857600080fd5b610efe84828501614349565b6000602082840312156145c657600080fd5b813567ffffffffffffffff8111156145dd57600080fd5b610efe848285016143c8565b6000602082840312156145fb57600080fd5b6000610efe8484614438565b6000806040838503121561461a57600080fd5b60006144b78585614443565b60006020828403121561463857600080fd5b6000610efe848461444e565b60006020828403121561465657600080fd5b6000610efe8484614459565b60006020828403121561467457600080fd5b6000610efe8484614464565b6000806040838503121561469357600080fd5b60006144b78585614459565b600080604083850312156146b257600080fd5b60006144f18585614459565b6146c781615332565b82525050565b6146c7816152fe565b6146c781615309565b60006146ea826152f1565b6146f481856152f5565b935061470481856020860161533d565b61470d81615369565b9093019392505050565b6000614724602b836152f5565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728152600160a91b6a1037b9103830b93a3732b902602082015260400192915050565b6000614774601f836152f5565b7f41646472657373206e6565647320746f2062652077686974656c697374656400815260200192915050565b60006147ad6017836152f5565b7f4e6f7420656e6f75676820636572746966696361746573000000000000000000815260200192915050565b60006147e6601b836152f5565b7f5061796f7574206578636565647320737562736372697074696f6e0000000000815260200192915050565b600061481f601f836152f5565b7f4e6f7420656e6f7567682066756e647320666f72207769746864726177616c00815260200192915050565b60006148586026836152f5565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20618152600160d01b6564647265737302602082015260400192915050565b60006148a36010836152f5565b7f496e636f727265637420706572696f6400000000000000000000000000000000815260200192915050565b60006148dc601b836152f5565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006149156025836152f5565b7f446f206e6f7420686176652074696d657374616d7020666f72207468617420708152600160da1b64195c9a5bd902602082015260400192915050565b600061495f602f836152f5565b7f57726f6e672076616c7565206f72206e6f2066756e647320617661696c61626581527f20666f72207769746864726177616c0000000000000000000000000000000000602082015260400192915050565b60006149be6010836152f5565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000815260200192915050565b60006149f76019836152f5565b7f4e6f7420656e6f7567682072656465656d656420636572747300000000000000815260200192915050565b6000614a306013836152f5565b7f4c61737420706572696f64207265616368656400000000000000000000000000815260200192915050565b6000614a69601e836152f5565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b6000614aa26011836152f5565b7f546f6f206d756368206372656469746564000000000000000000000000000000815260200192915050565b6000614adb601a836152f5565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b6000614b146017836152f5565b7f526566657272616c206973206e6f7420696e206c697374000000000000000000815260200192915050565b6000614b4d6019836152f5565b7f43616e6e6f74206465706f73697420746f20706172746e657200000000000000815260200192915050565b6000614b86601c836152f5565b7f43616e6e6f74206368616e67652070617373656420706572696f647300000000815260200192915050565b6000614bbf6020836152f5565b7f4e657720737562736372696265722068617320737562736372697074696f6e73815260200192915050565b6000614bf86021836152f5565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152600160f81b607702602082015260400192915050565b6000614c3e6016836152f5565b7f506172746e65722063616e6e6f74206465706f73697400000000000000000000815260200192915050565b6000614c776020836152f5565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572815260200192915050565b6000614cb06013836152f5565b7f506572696f647320617265206e6f742073657400000000000000000000000000815260200192915050565b6000614ce96032836152f5565b7f43616e6e6f742063616c63756c61746520666f7220616d6f756e74206772656181527f746572207468616e20617661696c61626c650000000000000000000000000000602082015260400192915050565b6000614d48601e836152f5565b7f546f2061646472657373206d7573742062652077686974656c69737465640000815260200192915050565b6000614d81601a836152f5565b7f596f75206e65656420746f2062652077686974656c6973746564000000000000815260200192915050565b6000614dba6011836152f5565b7f506172746e6572206e6f7420666f756e64000000000000000000000000000000815260200192915050565b6000614df36016836152f5565b7f4e6f207375627363726962657220696420666f756e6400000000000000000000815260200192915050565b6000614e2c601f836152f5565b7f526566657272616c20697320616c72656164792077686974656c697374656400815260200192915050565b8051610200830190614e6a8482614fa0565b506020820151614e7d6020850182614fa0565b506040820151614e906040850182614fa0565b506060820151614ea36060850182614fa0565b506080820151614eb66080850182614fa0565b5060a0820151614ec960a0850182614f97565b5060c0820151614edc60c0850182614f97565b5060e0820151614eef60e0850182614f97565b50610100820151614f04610100850182614fa0565b50610120820151614f19610120850182614fa0565b50610140820151614f2e610140850182614fa0565b50610160820151614f43610160850182614fa0565b50610180820151614f58610180850182614fa0565b506101a0820151614f6d6101a0850182614fa0565b506101c0820151614f826101c0850182614fa0565b506101e08201516117326101e0850182614fa0565b6146c781615319565b6146c781610aff565b6146c78161532c565b60208101610ade82846146cd565b60408101614fce82856146be565b610d6c60208301846146cd565b60608101614fe982866146be565b614ff660208301856146cd565b610efe6040830184614fa0565b6040810161501182856146be565b610d6c6020830184614fa0565b60608101614fe982866146cd565b6040810161501182856146cd565b6060810161504882866146cd565b614ff66020830185614fa0565b60208101610ade82846146d6565b60208082528101610d6c81846146df565b60208082528101610ade81614717565b60208082528101610ade81614767565b60208082528101610ade816147a0565b60208082528101610ade816147d9565b60208082528101610ade81614812565b60208082528101610ade8161484b565b60208082528101610ade81614896565b60208082528101610ade816148cf565b60208082528101610ade81614908565b60208082528101610ade81614952565b60208082528101610ade816149b1565b60208082528101610ade816149ea565b60208082528101610ade81614a23565b60208082528101610ade81614a5c565b60208082528101610ade81614a95565b60208082528101610ade81614ace565b60208082528101610ade81614b07565b60208082528101610ade81614b40565b60208082528101610ade81614b79565b60208082528101610ade81614bb2565b60208082528101610ade81614beb565b60208082528101610ade81614c31565b60208082528101610ade81614c6a565b60208082528101610ade81614ca3565b60208082528101610ade81614cdc565b60208082528101610ade81614d3b565b60208082528101610ade81614d74565b60208082528101610ade81614dad565b60208082528101610ade81614de6565b60208082528101610ade81614e1f565b6102008101610ade8284614e58565b60208101610ade8284614f97565b60208101610ade8284614fa0565b604081016150118285614fa0565b606081016150488286614fa0565b60208101610ade8284614fa9565b60405181810167ffffffffffffffff811182821017156152c857600080fd5b604052919050565b600067ffffffffffffffff8211156152e757600080fd5b5060209081020190565b5190565b90815260200190565b6000610ade82615320565b151590565b6000610ade826152fe565b61ffff1690565b6001600160a01b031690565b60ff1690565b6000610ade8261530e565b60005b83811015615358578181015183820152602001615340565b838111156117325750506000910152565b601f01601f191690565b61537c816152fe565b811461220d57600080fd5b61537c81615309565b61537c8161530e565b61537c81615319565b61537c81610aff565b61537c8161532c56fea265627a7a72305820b2c86f572325656e27eb9b53f3494ddf5c1b7fc591d9b7b86e3822a9f0d31b476c6578706572696d656e74616cf50037",
  "constructorArguments": "054906101000a900461ffff1661ffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509050600060145490508160106000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548161ffff021916908361ffff16021790555060c08201518160050160026101000a81548161ffff021916908361ffff16021790555060e08201518160050160046101000a81548161ffff021916908361ffff160217905550610100820151816006015561012082015181600701556101408201518160080155610160820151816009015561018082015181600a01556101a082015181600b01556101c082015181600c01556101e082015181600d01559050506000601560008b815260200190815260200160002054905081601160008c815260200190815260200160002060008381526020019081526020016000208190555081601260008c815260200190815260200160002060008b61ffff1661ffff168152602001908152602001600020819055508861ffff16601360008c815260200190815260200160002060009054906101000a900461ffff1661ffff1610156142865760008a8152601360205260409020805461ffff191661ffff8b161790555b505050600096875260156020526040909620805460019081019091556014805490910190555093949350505050565b6040518061020001604052806000815260200160008152602001600081526020016000815260200160008152602001600061ffff168152602001600061ffff168152602001600061ffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8035610ade81615373565b600082601f83011261435a57600080fd5b813561436d614368826152d0565b6152a9565b9150818183526020840193506020810190508385602084028201111561439257600080fd5b60005b838110156143be57816143a8888261433e565b8452506020928301929190910190600101614395565b5050505092915050565b600082601f8301126143d957600080fd5b81356143e7614368826152d0565b9150818183526020840193506020810190508385602084028201111561440c57600080fd5b60005b838110156143be57816144228882614459565b845250602092830192919091019060010161440f565b8051610ade81615387565b8035610ade81615390565b8035610ade81615399565b8035610ade816153a2565b8051610ade816153a2565b8035610ade816153ab565b60006020828403121561448c57600080fd5b6000610efe848461433e565b600080604083850312156144ab57600080fd5b60006144b7858561433e565b92505060206144c88582860161433e565b9150509250929050565b600080604083850312156144e557600080fd5b60006144f1858561433e565b92505060206144c885828601614459565b60008060006060848603121561451757600080fd5b6000614523868661433e565b935050602061453486828701614459565b925050604061454586828701614459565b9150509250925092565b6000806040838503121561456257600080fd5b600061456e858561433e565b92505060206144c88582860161446f565b60006020828403121561459157600080fd5b813567ffffffffffffffff8111156145a857600080fd5b610efe84828501614349565b6000602082840312156145c657600080fd5b813567ffffffffffffffff8111156145dd57600080fd5b610efe848285016143c8565b6000602082840312156145fb57600080fd5b6000610efe8484614438565b6000806040838503121561461a57600080fd5b60006144b78585614443565b60006020828403121561463857600080fd5b6000610efe848461444e565b60006020828403121561465657600080fd5b6000610efe8484614459565b60006020828403121561467457600080fd5b6000610efe8484614464565b6000806040838503121561469357600080fd5b60006144b78585614459565b600080604083850312156146b257600080fd5b60006144f18585614459565b6146c781615332565b82525050565b6146c7816152fe565b6146c781615309565b60006146ea826152f1565b6146f481856152f5565b935061470481856020860161533d565b61470d81615369565b9093019392505050565b6000614724602b836152f5565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728152600160a91b6a1037b9103830b93a3732b902602082015260400192915050565b6000614774601f836152f5565b7f41646472657373206e6565647320746f2062652077686974656c697374656400815260200192915050565b60006147ad6017836152f5565b7f4e6f7420656e6f75676820636572746966696361746573000000000000000000815260200192915050565b60006147e6601b836152f5565b7f5061796f7574206578636565647320737562736372697074696f6e0000000000815260200192915050565b600061481f601f836152f5565b7f4e6f7420656e6f7567682066756e647320666f72207769746864726177616c00815260200192915050565b60006148586026836152f5565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20618152600160d01b6564647265737302602082015260400192915050565b60006148a36010836152f5565b7f496e636f727265637420706572696f6400000000000000000000000000000000815260200192915050565b60006148dc601b836152f5565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006149156025836152f5565b7f446f206e6f7420686176652074696d657374616d7020666f72207468617420708152600160da1b64195c9a5bd902602082015260400192915050565b600061495f602f836152f5565b7f57726f6e672076616c7565206f72206e6f2066756e647320617661696c61626581527f20666f72207769746864726177616c0000000000000000000000000000000000602082015260400192915050565b60006149be6010836152f5565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000815260200192915050565b60006149f76019836152f5565b7f4e6f7420656e6f7567682072656465656d656420636572747300000000000000815260200192915050565b6000614a306013836152f5565b7f4c61737420706572696f64207265616368656400000000000000000000000000815260200192915050565b6000614a69601e836152f5565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b6000614aa26011836152f5565b7f546f6f206d756368206372656469746564000000000000000000000000000000815260200192915050565b6000614adb601a836152f5565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b6000614b146017836152f5565b7f526566657272616c206973206e6f7420696e206c697374000000000000000000815260200192915050565b6000614b4d6019836152f5565b7f43616e6e6f74206465706f73697420746f20706172746e657200000000000000815260200192915050565b6000614b86601c836152f5565b7f43616e6e6f74206368616e67652070617373656420706572696f647300000000815260200192915050565b6000614bbf6020836152f5565b7f4e657720737562736372696265722068617320737562736372697074696f6e73815260200192915050565b6000614bf86021836152f5565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152600160f81b607702602082015260400192915050565b6000614c3e6016836152f5565b7f506172746e65722063616e6e6f74206465706f73697400000000000000000000815260200192915050565b6000614c776020836152f5565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572815260200192915050565b6000614cb06013836152f5565b7f506572696f647320617265206e6f742073657400000000000000000000000000815260200192915050565b6000614ce96032836152f5565b7f43616e6e6f742063616c63756c61746520666f7220616d6f756e74206772656181527f746572207468616e20617661696c61626c650000000000000000000000000000602082015260400192915050565b6000614d48601e836152f5565b7f546f2061646472657373206d7573742062652077686974656c69737465640000815260200192915050565b6000614d81601a836152f5565b7f596f75206e65656420746f2062652077686974656c6973746564000000000000815260200192915050565b6000614dba6011836152f5565b7f506172746e6572206e6f7420666f756e64000000000000000000000000000000815260200192915050565b6000614df36016836152f5565b7f4e6f207375627363726962657220696420666f756e6400000000000000000000815260200192915050565b6000614e2c601f836152f5565b7f526566657272616c20697320616c72656164792077686974656c697374656400815260200192915050565b8051610200830190614e6a8482614fa0565b506020820151614e7d6020850182614fa0565b506040820151614e906040850182614fa0565b506060820151614ea36060850182614fa0565b506080820151614eb66080850182614fa0565b5060a0820151614ec960a0850182614f97565b5060c0820151614edc60c0850182614f97565b5060e0820151614eef60e0850182614f97565b50610100820151614f04610100850182614fa0565b50610120820151614f19610120850182614fa0565b50610140820151614f2e610140850182614fa0565b50610160820151614f43610160850182614fa0565b50610180820151614f58610180850182614fa0565b506101a0820151614f6d6101a0850182614fa0565b506101c0820151614f826101c0850182614fa0565b506101e08201516117326101e0850182614fa0565b6146c781615319565b6146c781610aff565b6146c78161532c565b60208101610ade82846146cd565b60408101614fce82856146be565b610d6c60208301846146cd565b60608101614fe982866146be565b614ff660208301856146cd565b610efe6040830184614fa0565b6040810161501182856146be565b610d6c6020830184614fa0565b60608101614fe982866146cd565b6040810161501182856146cd565b6060810161504882866146cd565b614ff66020830185614fa0565b60208101610ade82846146d6565b60208082528101610d6c81846146df565b60208082528101610ade81614717565b60208082528101610ade81614767565b60208082528101610ade816147a0565b60208082528101610ade816147d9565b60208082528101610ade81614812565b60208082528101610ade8161484b565b60208082528101610ade81614896565b60208082528101610ade816148cf565b60208082528101610ade81614908565b60208082528101610ade81614952565b60208082528101610ade816149b1565b60208082528101610ade816149ea565b60208082528101610ade81614a23565b60208082528101610ade81614a5c565b60208082528101610ade81614a95565b60208082528101610ade81614ace565b60208082528101610ade81614b07565b60208082528101610ade81614b40565b60208082528101610ade81614b79565b60208082528101610ade81614bb2565b60208082528101610ade81614beb565b60208082528101610ade81614c31565b60208082528101610ade81614c6a565b60208082528101610ade81614ca3565b60208082528101610ade81614cdc565b60208082528101610ade81614d3b565b60208082528101610ade81614d74565b60208082528101610ade81614dad565b60208082528101610ade81614de6565b60208082528101610ade81614e1f565b6102008101610ade8284614e58565b60208101610ade8284614f97565b60208101610ade8284614fa0565b604081016150118285614fa0565b606081016150488286614fa0565b60208101610ade8284614fa9565b60405181810167ffffffffffffffff811182821017156152c857600080fd5b604052919050565b600067ffffffffffffffff8211156152e757600080fd5b5060209081020190565b5190565b90815260200190565b6000610ade82615320565b151590565b6000610ade826152fe565b61ffff1690565b6001600160a01b031690565b60ff1690565b6000610ade8261530e565b60005b83811015615358578181015183820152602001615340565b838111156117325750506000910152565b601f01601f191690565b61537c816152fe565b811461220d57600080fd5b61537c81615309565b61537c8161530e565b61537c81615319565b61537c81610aff565b61537c8161532c56fea265627a7a72305820b2c86f572325656e27eb9b53f3494ddf5c1b7fc591d9b7b86e3822a9f0d31b476c6578706572696d656e74616cf50037"
}