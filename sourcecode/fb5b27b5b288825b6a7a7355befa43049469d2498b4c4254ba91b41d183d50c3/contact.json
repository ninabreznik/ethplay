{
  "address": "0x7e0855e4d0c87542752d20d52d0096868d20d860",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Luckyblock",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-03\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title -\n * play a luckyblock : )\n * Contact us for further cooperation [email protected]\n *\n * ██╗      ██╗   ██╗  ██████╗ ██╗  ██╗ ██╗   ██╗ ██████╗  ██╗       ██████╗   ██████╗ ██╗  ██╗\n * ██║      ██║   ██║ ██╔════╝ ██║ ██╔╝ ╚██╗ ██╔╝ ██╔══██╗ ██║      ██╔═══██╗ ██╔════╝ ██║ ██╔╝\n * ██║      ██║   ██║ ██║      █████╔╝   ╚████╔╝  ██████╔╝ ██║      ██║   ██║ ██║      █████╔╝\n * ██║      ██║   ██║ ██║      ██╔═██╗    ╚██╔╝   ██╔══██╗ ██║      ██║   ██║ ██║      ██╔═██╗\n * ███████╗ ╚██████╔╝ ╚██████╗ ██║  ██╗    ██║    ██████╔╝ ███████╗ ╚██████╔╝ ╚██████╗ ██║  ██╗\n * ╚══════╝  ╚═════╝   ╚═════╝ ╚═╝  ╚═╝    ╚═╝    ╚═════╝  ╚══════╝  ╚═════╝   ╚═════╝ ╚═╝  ╚═╝\n *\n * ---\n * POWERED BY\n * ╦   ╔═╗ ╦═╗ ╔╦╗ ╦   ╔═╗ ╔═╗ ╔═╗      ╔╦╗ ╔═╗ ╔═╗ ╔╦╗\n * ║   ║ ║ ╠╦╝  ║║ ║   ║╣  ╚═╗ ╚═╗       ║  ║╣  ╠═╣ ║║║\n * ╩═╝ ╚═╝ ╩╚═ ═╩╝ ╩═╝ ╚═╝ ╚═╝ ╚═╝       ╩  ╚═╝ ╩ ╩ ╩ ╩\n * game at https://game.lordless.io\n * code at https://github.com/lordlessio\n */\n\n\n\n\n\n// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: node_modules/zeppelin-solidity/contracts/access/rbac/Roles.sol\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage _role, address _addr)\n    internal\n    view\n  {\n    require(has(_role, _addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage _role, address _addr)\n    internal\n    view\n    returns (bool)\n  {\n    return _role.bearer[_addr];\n  }\n}\n\n// File: node_modules/zeppelin-solidity/contracts/access/rbac/RBAC.sol\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    public\n    view\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    public\n    view\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n// File: node_modules/zeppelin-solidity/contracts/ownership/Superuser.sol\n\n/**\n * @title Superuser\n * @dev The Superuser contract defines a single superuser who can transfer the ownership\n * of a contract to a new address, even if he is not the owner.\n * A superuser can transfer his role to a new address.\n */\ncontract Superuser is Ownable, RBAC {\n  string public constant ROLE_SUPERUSER = \"superuser\";\n\n  constructor () public {\n    addRole(msg.sender, ROLE_SUPERUSER);\n  }\n\n  /**\n   * @dev Throws if called by any account that's not a superuser.\n   */\n  modifier onlySuperuser() {\n    checkRole(msg.sender, ROLE_SUPERUSER);\n    _;\n  }\n\n  modifier onlyOwnerOrSuperuser() {\n    require(msg.sender == owner || isSuperuser(msg.sender));\n    _;\n  }\n\n  /**\n   * @dev getter to determine if address has superuser role\n   */\n  function isSuperuser(address _addr)\n    public\n    view\n    returns (bool)\n  {\n    return hasRole(_addr, ROLE_SUPERUSER);\n  }\n\n  /**\n   * @dev Allows the current superuser to transfer his role to a newSuperuser.\n   * @param _newSuperuser The address to transfer ownership to.\n   */\n  function transferSuperuser(address _newSuperuser) public onlySuperuser {\n    require(_newSuperuser != address(0));\n    removeRole(msg.sender, ROLE_SUPERUSER);\n    addRole(_newSuperuser, ROLE_SUPERUSER);\n  }\n\n  /**\n   * @dev Allows the current superuser or owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwnerOrSuperuser {\n    _transferOwnership(_newOwner);\n  }\n}\n\n// File: contracts/lib/SafeMath.sol\n\n/**\n * @title SafeMath\n */\nlibrary SafeMath {\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) \n      internal \n      pure \n      returns (uint256 c) \n  {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    require(c / a == b, \"SafeMath mul failed\");\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b)\n      internal\n      pure\n      returns (uint256) \n  {\n    require(b <= a, \"SafeMath sub failed\");\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b)\n      internal\n      pure\n      returns (uint256 c) \n  {\n    c = a + b;\n    require(c >= a, \"SafeMath add failed\");\n    return c;\n  }\n  \n  /**\n    * @dev gives square root of given x.\n    */\n  function sqrt(uint256 x)\n      internal\n      pure\n      returns (uint256 y) \n  {\n    uint256 z = ((add(x,1)) / 2);\n    y = x;\n    while (z < y) \n    {\n      y = z;\n      z = ((add((x / z),z)) / 2);\n    }\n  }\n  \n  /**\n    * @dev gives square. batchplies x by x\n    */\n  function sq(uint256 x)\n      internal\n      pure\n      returns (uint256)\n  {\n    return (mul(x,x));\n  }\n  \n  /**\n    * @dev x to the power of y \n    */\n  function pwr(uint256 x, uint256 y)\n      internal \n      pure \n      returns (uint256)\n  {\n    if (x==0)\n        return (0);\n    else if (y==0)\n        return (1);\n    else \n    {\n      uint256 z = x;\n      for (uint256 i=1; i < y; i++)\n        z = mul(z,x);\n      return (z);\n    }\n  }\n}\n\n// File: contracts/luckyblock/ILuckyblock.sol\n\n/**\n * @title -luckyblock Interface\n */\n\ninterface ILuckyblock{\n\n  function getLuckyblockSpend(\n    bytes32 luckyblockId\n  ) external view returns (\n    address[],\n    uint256[],\n    uint256\n  ); \n\n  function getLuckyblockEarn(\n    bytes32 luckyblockId\n    ) external view returns (\n    address[],\n    uint256[],\n    int[],\n    uint256,\n    int\n  );\n\n  function getLuckyblockBase(\n    bytes32 luckyblockId\n    ) external view returns (\n      bool\n  );\n\n  function addLuckyblock(uint256 seed) external;\n\n  function start(\n    bytes32 luckyblockId\n  ) external;\n\n  function stop(\n    bytes32 luckyblockId\n  ) external;\n\n  function updateLuckyblockSpend(\n    bytes32 luckyblockId,\n    address[] spendTokenAddresses, \n    uint256[] spendTokenCount,\n    uint256 spendEtherCount\n  ) external;\n\n  function updateLuckyblockEarn (\n    bytes32 luckyblockId,\n    address[] earnTokenAddresses,\n    uint256[] earnTokenCount,\n    int[] earnTokenProbability, // (0 - 100)\n    uint256 earnEtherCount,\n    int earnEtherProbability\n  ) external;\n  function setRandomContract(address _randomContract) external;\n  function getLuckyblockIds()external view returns(bytes32[]);\n  function play(bytes32 luckyblockId) public payable;\n  function withdrawToken(address contractAddress, address to, uint256 balance) external;\n  function withdrawEth(address to, uint256 balance) external;\n\n  \n  \n\n  /* Events */\n\n  event Play (\n    bytes32 indexed luckyblockId,\n    address user,\n    uint8 random\n  );\n\n  event WithdrawToken (\n    address indexed contractAddress,\n    address to,\n    uint256 count\n  );\n\n  event WithdrawEth (\n    address to,\n    uint256 count\n  );\n\n  event Pay (\n    address from,\n    uint256 value\n  );\n}\n\n\ncontract ERC20Interface {\n  function transfer(address to, uint tokens) public returns (bool);\n  function transferFrom(address from, address to, uint tokens) public returns (bool);\n  function balanceOf(address tokenOwner) public view returns (uint256);\n  function allowance(address tokenOwner, address spender) public view returns (uint);\n}\n\ncontract Random {\n  function getRandom() external view returns (uint8);\n}\n\ncontract Luckyblock is Superuser, Pausable, ILuckyblock {\n\n  using SafeMath for *;\n\n  address public randomContract;\n\n  struct User {\n    address user;\n    string name;\n    uint256 verifytime;\n    uint256 verifyFee;\n  }\n\n  struct LuckyblockBase {\n    bool ended;\n  }\n\n  struct LuckyblockSpend {\n    address[] spendTokenAddresses;\n    uint256[] spendTokenCount;\n    uint256 spendEtherCount;\n  }\n\n  struct LuckyblockEarn {\n    address[] earnTokenAddresses;\n    uint256[] earnTokenCount;\n    int[] earnTokenProbability; // (0 - 100)\n    uint256 earnEtherCount;\n    int earnEtherProbability;\n  }\n\n  bytes32[] public luckyblockIds; //\n\n  mapping (address => bytes32[]) contractAddressToLuckyblockId;\n\n  mapping (bytes32 => LuckyblockEarn) luckyblockIdToLuckyblockEarn;\n  mapping (bytes32 => LuckyblockSpend) luckyblockIdToLuckyblockSpend;\n  mapping (bytes32 => LuckyblockBase) luckyblockIdToLuckyblockBase;\n\n\n  mapping (bytes32 => mapping (address => bool)) luckyblockIdToUserAddress;\n  mapping (address => uint256) contractAddressToLuckyblockCount;\n\n  function () public payable {\n    emit Pay(msg.sender, msg.value);\n  }\n\n  function setRandomContract(address _randomContract) external onlyOwnerOrSuperuser {\n    randomContract = _randomContract;\n  }\n\n  function getLuckyblockIds()external view returns(bytes32[]){\n    return luckyblockIds;\n  }\n\n  function getLuckyblockSpend(\n    bytes32 luckyblockId\n    ) external view returns (\n      address[],\n      uint256[],\n      uint256\n    ) {\n    LuckyblockSpend storage _luckyblockSpend = luckyblockIdToLuckyblockSpend[luckyblockId];\n    return (\n      _luckyblockSpend.spendTokenAddresses,\n      _luckyblockSpend.spendTokenCount,\n      _luckyblockSpend.spendEtherCount\n      );\n  }\n\n  function getLuckyblockEarn(\n    bytes32 luckyblockId\n    ) external view returns (\n      address[],\n      uint256[],\n      int[],\n      uint256,\n      int\n    ) {\n    LuckyblockEarn storage _luckyblockEarn = luckyblockIdToLuckyblockEarn[luckyblockId];\n    return (\n      _luckyblockEarn.earnTokenAddresses,\n      _luckyblockEarn.earnTokenCount,\n      _luckyblockEarn.earnTokenProbability,\n      _luckyblockEarn.earnEtherCount,\n      _luckyblockEarn.earnEtherProbability\n      );\n  }\n\n  function getLuckyblockBase(\n    bytes32 luckyblockId\n    ) external view returns (\n      bool\n    ) {\n    LuckyblockBase storage _luckyblockBase = luckyblockIdToLuckyblockBase[luckyblockId];\n    return (\n      _luckyblockBase.ended\n      );\n  }\n  \n  function addLuckyblock(uint256 seed) external onlyOwnerOrSuperuser {\n    bytes32 luckyblockId = keccak256(\n      abi.encodePacked(block.timestamp, seed)\n    );\n    LuckyblockBase memory _luckyblockBase = LuckyblockBase(\n      false\n    );\n    luckyblockIds.push(luckyblockId);\n    luckyblockIdToLuckyblockBase[luckyblockId] = _luckyblockBase;\n  }\n\n  function start(bytes32 luckyblockId) external{\n    LuckyblockBase storage _luckyblockBase = luckyblockIdToLuckyblockBase[luckyblockId];\n    _luckyblockBase.ended = false;\n    luckyblockIdToLuckyblockBase[luckyblockId] = _luckyblockBase;\n  }\n\n  function stop(bytes32 luckyblockId) external{\n    LuckyblockBase storage _luckyblockBase = luckyblockIdToLuckyblockBase[luckyblockId];\n    _luckyblockBase.ended = true;\n    luckyblockIdToLuckyblockBase[luckyblockId] = _luckyblockBase;\n  }\n\n  function updateLuckyblockSpend (\n    bytes32 luckyblockId,\n    address[] spendTokenAddresses, \n    uint256[] spendTokenCount,\n    uint256 spendEtherCount\n    ) external onlyOwnerOrSuperuser {\n    LuckyblockSpend memory _luckyblockSpend = LuckyblockSpend(\n      spendTokenAddresses,\n      spendTokenCount,\n      spendEtherCount\n    );\n    luckyblockIdToLuckyblockSpend[luckyblockId] = _luckyblockSpend;\n  }\n\n  function updateLuckyblockEarn (\n    bytes32 luckyblockId,\n    address[] earnTokenAddresses,\n    uint256[] earnTokenCount,\n    int[] earnTokenProbability, // (0 - 100)\n    uint256 earnEtherCount,\n    int earnEtherProbability\n    ) external onlyOwnerOrSuperuser {\n    LuckyblockEarn memory _luckyblockEarn = LuckyblockEarn(\n      earnTokenAddresses,\n      earnTokenCount,\n      earnTokenProbability, // (0 - 100)\n      earnEtherCount,\n      earnEtherProbability\n    );\n    luckyblockIdToLuckyblockEarn[luckyblockId] = _luckyblockEarn;\n  }\n\n  // function isContract(address _address) private view returns (bool){\n  //   uint size;\n  //   assembly { size := extcodesize(addr) }\n  //   return size > 0;\n  // }\n\n  function isContract(address addr) private returns (bool) {\n    uint size;\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n  function play(bytes32 luckyblockId) public payable whenNotPaused {\n    require(!isContract(msg.sender));\n    LuckyblockBase storage _luckyblockBase = luckyblockIdToLuckyblockBase[luckyblockId];\n    LuckyblockSpend storage _luckyblockSpend = luckyblockIdToLuckyblockSpend[luckyblockId];\n    LuckyblockEarn storage _luckyblockEarn = luckyblockIdToLuckyblockEarn[luckyblockId];\n    \n    require(!_luckyblockBase.ended, \"luckyblock is ended\");\n\n    // check sender's ether balance \n    require(msg.value >= _luckyblockSpend.spendEtherCount, \"sender value not enough\");\n\n    // check spend\n    if (_luckyblockSpend.spendTokenAddresses[0] != address(0x0)) {\n      for (uint8 i = 0; i < _luckyblockSpend.spendTokenAddresses.length; i++) {\n\n        // check sender's erc20 balance \n        require(\n          ERC20Interface(\n            _luckyblockSpend.spendTokenAddresses[i]\n          ).balanceOf(address(msg.sender)) >= _luckyblockSpend.spendTokenCount[i]\n        );\n\n        require(\n          ERC20Interface(\n            _luckyblockSpend.spendTokenAddresses[i]\n          ).allowance(address(msg.sender), address(this)) >= _luckyblockSpend.spendTokenCount[i]\n        );\n\n        // transfer erc20 token\n        ERC20Interface(_luckyblockSpend.spendTokenAddresses[i])\n          .transferFrom(msg.sender, address(this), _luckyblockSpend.spendTokenCount[i]);\n        }\n    }\n    \n    // check earn erc20\n    if (_luckyblockEarn.earnTokenAddresses[0] !=\n      address(0x0)) {\n      for (uint8 j= 0; j < _luckyblockEarn.earnTokenAddresses.length; j++) {\n        // check sender's erc20 balance \n        uint256 earnTokenCount = _luckyblockEarn.earnTokenCount[j];\n        require(\n          ERC20Interface(_luckyblockEarn.earnTokenAddresses[j])\n          .balanceOf(address(this)) >= earnTokenCount\n        );\n      }\n    }\n    \n    // check earn ether\n    require(address(this).balance >= _luckyblockEarn.earnEtherCount, \"contract value not enough\");\n\n    // do a random\n    uint8 _random = random();\n\n    // earn erc20\n    for (uint8 k = 0; k < _luckyblockEarn.earnTokenAddresses.length; k++){\n      // if win erc20\n      if (_luckyblockEarn.earnTokenAddresses[0]\n        != address(0x0)){\n        if (_random + _luckyblockEarn.earnTokenProbability[k] >= 100) {\n          ERC20Interface(_luckyblockEarn.earnTokenAddresses[k])\n            .transfer(msg.sender, _luckyblockEarn.earnTokenCount[k]);\n        }\n      }\n    }\n    uint256 value = msg.value;\n    uint256 payExcess = value.sub(_luckyblockSpend.spendEtherCount);\n    \n    // if win ether\n    if (_random + _luckyblockEarn.earnEtherProbability >= 100) {\n      uint256 balance = _luckyblockEarn.earnEtherCount.add(payExcess);\n      if (balance > 0){\n        msg.sender.transfer(balance);\n      }\n    } else if (payExcess > 0) {\n      msg.sender.transfer(payExcess);\n    }\n    \n    emit Play(luckyblockId, msg.sender, _random);\n  }\n\n  function withdrawToken(address contractAddress, address to, uint256 balance)\n    external onlyOwnerOrSuperuser {\n    ERC20Interface erc20 = ERC20Interface(contractAddress);\n    if (balance == uint256(0x0)){\n      erc20.transfer(to, erc20.balanceOf(address(this)));\n      emit WithdrawToken(contractAddress, to, erc20.balanceOf(address(this)));\n    } else {\n      erc20.transfer(to, balance);\n      emit WithdrawToken(contractAddress, to, balance);\n    }\n  }\n\n  function withdrawEth(address to, uint256 balance) external onlySuperuser {\n    if (balance == uint256(0x0)) {\n      to.transfer(address(this).balance);\n      emit WithdrawEth(to, address(this).balance);\n    } else {\n      to.transfer(balance);\n      emit WithdrawEth(to, balance);\n    }\n  }\n\n  function random() private view returns (uint8) {\n    return Random(randomContract).getRandom(); // random 0-99\n  }\n}",
  "bytecode": ""
}