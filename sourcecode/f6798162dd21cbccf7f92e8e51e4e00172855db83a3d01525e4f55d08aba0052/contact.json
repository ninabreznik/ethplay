{
  "address": "0x3038045cd883abff0c6eea4b1954843c0fa5a735",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RequestEthereum",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-27\n*/\n\npragma solidity 0.4.18;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\n    int256 b = int256(a);\n    assert(b >= 0);\n    return b;\n  }\n}\n\n\n/**\n * @title SafeMathInt\n * @dev Math operations with safety checks that throw on error\n * @dev SafeMath adapted for int256\n */\nlibrary SafeMathInt {\n  function mul(int256 a, int256 b) internal pure returns (int256) {\n    // Prevent overflow when multiplying INT256_MIN with -1\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\n    assert(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\n\n    int256 c = a * b;\n    assert((b == 0) || (c / b == a));\n    return c;\n  }\n\n  function div(int256 a, int256 b) internal pure returns (int256) {\n    // Prevent overflow when dividing INT256_MIN by -1\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\n    assert(!(a == - 2**255 && b == -1));\n\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    int256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(int256 a, int256 b) internal pure returns (int256) {\n    assert((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\n\n    return a - b;\n  }\n\n  function add(int256 a, int256 b) internal pure returns (int256) {\n    int256 c = a + b;\n    assert((b >= 0 && c >= a) || (b < 0 && c < a));\n    return c;\n  }\n\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\n    assert(a>=0);\n    return uint256(a);\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @dev SafeMath adapted for uint8\n */\nlibrary SafeMathUint8 {\n  function mul(uint8 a, uint8 b) internal pure returns (uint8) {\n    uint8 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint8 a, uint8 b) internal pure returns (uint8) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint8 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint8 a, uint8 b) internal pure returns (uint8) {\n    uint8 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n * @dev SafeMath adapted for uint96\n */\nlibrary SafeMathUint96 {\n  function mul(uint96 a, uint96 b) internal pure returns (uint96) {\n    uint96 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint96 a, uint96 b) internal pure returns (uint96) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint96 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint96 a, uint96 b) internal pure returns (uint96) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint96 a, uint96 b) internal pure returns (uint96) {\n    uint96 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Administrable\n * @dev Base contract for the administration of Core. Handles whitelisting of currency contracts\n */\ncontract Administrable is Pausable {\n\n    // mapping of address of trusted contract\n    mapping(address => uint8) public trustedCurrencyContracts;\n\n    // Events of the system\n    event NewTrustedContract(address newContract);\n    event RemoveTrustedContract(address oldContract);\n\n    /**\n     * @dev add a trusted currencyContract \n     *\n     * @param _newContractAddress The address of the currencyContract\n     */\n    function adminAddTrustedCurrencyContract(address _newContractAddress)\n        external\n        onlyOwner\n    {\n        trustedCurrencyContracts[_newContractAddress] = 1; //Using int instead of boolean in case we need several states in the future.\n        NewTrustedContract(_newContractAddress);\n    }\n\n    /**\n     * @dev remove a trusted currencyContract \n     *\n     * @param _oldTrustedContractAddress The address of the currencyContract\n     */\n    function adminRemoveTrustedCurrencyContract(address _oldTrustedContractAddress)\n        external\n        onlyOwner\n    {\n        require(trustedCurrencyContracts[_oldTrustedContractAddress] != 0);\n        trustedCurrencyContracts[_oldTrustedContractAddress] = 0;\n        RemoveTrustedContract(_oldTrustedContractAddress);\n    }\n\n    /**\n     * @dev get the status of a trusted currencyContract \n     * @dev Not used today, useful if we have several states in the future.\n     *\n     * @param _contractAddress The address of the currencyContract\n     * @return The status of the currencyContract. If trusted 1, otherwise 0\n     */\n    function getStatusContract(address _contractAddress)\n        view\n        external\n        returns(uint8) \n    {\n        return trustedCurrencyContracts[_contractAddress];\n    }\n\n    /**\n     * @dev check if a currencyContract is trusted\n     *\n     * @param _contractAddress The address of the currencyContract\n     * @return bool true if contract is trusted\n     */\n    function isTrustedContract(address _contractAddress)\n        public\n        view\n        returns(bool)\n    {\n        return trustedCurrencyContracts[_contractAddress] == 1;\n    }\n}\n\n/**\n * @title RequestCore\n *\n * @dev The Core is the main contract which stores all the requests.\n *\n * @dev The Core philosophy is to be as much flexible as possible to adapt in the future to any new system\n * @dev All the important conditions and an important part of the business logic takes place in the currency contracts.\n * @dev Requests can only be created in the currency contracts\n * @dev Currency contracts have to be allowed by the Core and respect the business logic.\n * @dev Request Network will develop one currency contracts per currency and anyone can creates its own currency contracts.\n */\ncontract RequestCore is Administrable {\n    using SafeMath for uint256;\n    using SafeMathUint96 for uint96;\n    using SafeMathInt for int256;\n    using SafeMathUint8 for uint8;\n\n    enum State { Created, Accepted, Canceled }\n\n    struct Request {\n        // ID address of the payer\n        address payer;\n\n        // Address of the contract managing the request\n        address currencyContract;\n\n        // State of the request\n        State state;\n\n        // Main payee\n        Payee payee;\n    }\n\n    // Structure for the payees. A sub payee is an additional entity which will be paid during the processing of the invoice.\n    // ex: can be used for routing taxes or fees at the moment of the payment.\n    struct Payee {\n        // ID address of the payee\n        address addr;\n\n        // amount expected for the payee. \n        // Not uint for evolution (may need negative amounts one day), and simpler operations\n        int256 expectedAmount;\n\n        // balance of the payee\n        int256 balance;\n    }\n\n    // Count of request in the mapping. A maximum of 2^96 requests can be created per Core contract.\n    // Integer, incremented for each request of a Core contract, starting from 0\n    // RequestId (256bits) = contract address (160bits) + numRequest\n    uint96 public numRequests; \n    \n    // Mapping of all the Requests. The key is the request ID.\n    // not anymore public to avoid \"UnimplementedFeatureError: Only in-memory reference type can be stored.\"\n    // https://github.com/ethereum/solidity/issues/3577\n    mapping(bytes32 => Request) requests;\n\n    // Mapping of subPayees of the requests. The key is the request ID.\n    // This array is outside the Request structure to optimize the gas cost when there is only 1 payee.\n    mapping(bytes32 => Payee[256]) public subPayees;\n\n    /*\n     *  Events \n     */\n    event Created(bytes32 indexed requestId, address indexed payee, address indexed payer, address creator, string data);\n    event Accepted(bytes32 indexed requestId);\n    event Canceled(bytes32 indexed requestId);\n\n    // Event for Payee & subPayees\n    event NewSubPayee(bytes32 indexed requestId, address indexed payee); // Separated from the Created Event to allow a 4th indexed parameter (subpayees)\n    event UpdateExpectedAmount(bytes32 indexed requestId, uint8 payeeIndex, int256 deltaAmount);\n    event UpdateBalance(bytes32 indexed requestId, uint8 payeeIndex, int256 deltaAmount);\n\n    /*\n     * @dev Function used by currency contracts to create a request in the Core\n     *\n     * @dev _payees and _expectedAmounts must have the same size\n     *\n     * @param _creator Request creator. The creator is the one who initiated the request (create or sign) and not necessarily the one who broadcasted it\n     * @param _payees array of payees address (the index 0 will be the payee the others are subPayees). Size must be smaller than 256.\n     * @param _expectedAmounts array of Expected amount to be received by each payees. Must be in same order than the payees. Size must be smaller than 256.\n     * @param _payer Entity expected to pay\n     * @param _data data of the request\n     * @return Returns the id of the request\n     */\n    function createRequest(\n        address     _creator,\n        address[]   _payees,\n        int256[]    _expectedAmounts,\n        address     _payer,\n        string      _data)\n        external\n        whenNotPaused \n        returns (bytes32 requestId) \n    {\n        // creator must not be null\n        require(_creator!=0); // not as modifier to lighten the stack\n        // call must come from a trusted contract\n        require(isTrustedContract(msg.sender)); // not as modifier to lighten the stack\n\n        // Generate the requestId\n        requestId = generateRequestId();\n\n        address mainPayee;\n        int256 mainExpectedAmount;\n        // extract the main payee if filled\n        if(_payees.length!=0) {\n            mainPayee = _payees[0];\n            mainExpectedAmount = _expectedAmounts[0];\n        }\n\n        // Store the new request\n        requests[requestId] = Request(_payer, msg.sender, State.Created, Payee(mainPayee, mainExpectedAmount, 0));\n\n        // Declare the new request\n        Created(requestId, mainPayee, _payer, _creator, _data);\n        \n        // Store and declare the sub payees (needed in internal function to avoid \"stack too deep\")\n        initSubPayees(requestId, _payees, _expectedAmounts);\n\n        return requestId;\n    }\n\n    /*\n     * @dev Function used by currency contracts to create a request in the Core from bytes\n     * @dev Used to avoid receiving a stack too deep error when called from a currency contract with too many parameters.\n     * @audit Note that to optimize the stack size and the gas cost we do not extract the params and store them in the stack. As a result there is some code redundancy\n     * @param _data bytes containing all the data packed :\n            address(creator)\n            address(payer)\n            uint8(number_of_payees)\n            [\n                address(main_payee_address)\n                int256(main_payee_expected_amount)\n                address(second_payee_address)\n                int256(second_payee_expected_amount)\n                ...\n            ]\n            uint8(data_string_size)\n            size(data)\n     * @return Returns the id of the request \n     */ \n    function createRequestFromBytes(bytes _data) \n        external\n        whenNotPaused \n        returns (bytes32 requestId) \n    {\n        // call must come from a trusted contract\n        require(isTrustedContract(msg.sender)); // not as modifier to lighten the stack\n\n        // extract address creator & payer\n        address creator = extractAddress(_data, 0);\n\n        address payer = extractAddress(_data, 20);\n\n        // creator must not be null\n        require(creator!=0);\n        \n        // extract the number of payees\n        uint8 payeesCount = uint8(_data[40]);\n\n        // get the position of the dataSize in the byte (= number_of_payees * (address_payee_size + int256_payee_size) + address_creator_size + address_payer_size + payees_count_size\n        //                                              (= number_of_payees * (20+32) + 20 + 20 + 1 )\n        uint256 offsetDataSize = uint256(payeesCount).mul(52).add(41);\n\n        // extract the data size and then the data itself\n        uint8 dataSize = uint8(_data[offsetDataSize]);\n        string memory dataStr = extractString(_data, dataSize, offsetDataSize.add(1));\n\n        address mainPayee;\n        int256 mainExpectedAmount;\n        // extract the main payee if possible\n        if(payeesCount!=0) {\n            mainPayee = extractAddress(_data, 41);\n            mainExpectedAmount = int256(extractBytes32(_data, 61));\n        }\n\n        // Generate the requestId\n        requestId = generateRequestId();\n\n        // Store the new request\n        requests[requestId] = Request(payer, msg.sender, State.Created, Payee(mainPayee, mainExpectedAmount, 0));\n\n        // Declare the new request\n        Created(requestId, mainPayee, payer, creator, dataStr);\n\n        // Store and declare the sub payees\n        for(uint8 i = 1; i < payeesCount; i = i.add(1)) {\n            address subPayeeAddress = extractAddress(_data, uint256(i).mul(52).add(41));\n\n            // payees address cannot be 0x0\n            require(subPayeeAddress != 0);\n\n            subPayees[requestId][i-1] =  Payee(subPayeeAddress, int256(extractBytes32(_data, uint256(i).mul(52).add(61))), 0);\n            NewSubPayee(requestId, subPayeeAddress);\n        }\n\n        return requestId;\n    }\n\n    /*\n     * @dev Function used by currency contracts to accept a request in the Core.\n     * @dev callable only by the currency contract of the request\n     * @param _requestId Request id\n     */ \n    function accept(bytes32 _requestId) \n        external\n    {\n        Request storage r = requests[_requestId];\n        require(r.currencyContract==msg.sender); \n        r.state = State.Accepted;\n        Accepted(_requestId);\n    }\n\n    /*\n     * @dev Function used by currency contracts to cancel a request in the Core. Several reasons can lead to cancel a request, see request life cycle for more info.\n     * @dev callable only by the currency contract of the request\n     * @param _requestId Request id\n     */ \n    function cancel(bytes32 _requestId)\n        external\n    {\n        Request storage r = requests[_requestId];\n        require(r.currencyContract==msg.sender);\n        r.state = State.Canceled;\n        Canceled(_requestId);\n    }   \n\n    /*\n     * @dev Function used to update the balance\n     * @dev callable only by the currency contract of the request\n     * @param _requestId Request id\n     * @param _payeeIndex index of the payee (0 = main payee)\n     * @param _deltaAmount modifier amount\n     */ \n    function updateBalance(bytes32 _requestId, uint8 _payeeIndex, int256 _deltaAmount)\n        external\n    {   \n        Request storage r = requests[_requestId];\n        require(r.currencyContract==msg.sender);\n\n        if( _payeeIndex == 0 ) {\n            // modify the main payee\n            r.payee.balance = r.payee.balance.add(_deltaAmount);\n        } else {\n            // modify the sub payee\n            Payee storage sp = subPayees[_requestId][_payeeIndex-1];\n            sp.balance = sp.balance.add(_deltaAmount);\n        }\n        UpdateBalance(_requestId, _payeeIndex, _deltaAmount);\n    }\n\n    /*\n     * @dev Function update the expectedAmount adding additional or subtract\n     * @dev callable only by the currency contract of the request\n     * @param _requestId Request id\n     * @param _payeeIndex index of the payee (0 = main payee)\n     * @param _deltaAmount modifier amount\n     */ \n    function updateExpectedAmount(bytes32 _requestId, uint8 _payeeIndex, int256 _deltaAmount)\n        external\n    {   \n        Request storage r = requests[_requestId];\n        require(r.currencyContract==msg.sender); \n\n        if( _payeeIndex == 0 ) {\n            // modify the main payee\n            r.payee.expectedAmount = r.payee.expectedAmount.add(_deltaAmount);    \n        } else {\n            // modify the sub payee\n            Payee storage sp = subPayees[_requestId][_payeeIndex-1];\n            sp.expectedAmount = sp.expectedAmount.add(_deltaAmount);\n        }\n        UpdateExpectedAmount(_requestId, _payeeIndex, _deltaAmount);\n    }\n\n    /*\n     * @dev Internal: Init payees for a request (needed to avoid 'stack too deep' in createRequest())\n     * @param _requestId Request id\n     * @param _payees array of payees address\n     * @param _expectedAmounts array of payees initial expected amounts\n     */ \n    function initSubPayees(bytes32 _requestId, address[] _payees, int256[] _expectedAmounts)\n        internal\n    {\n        require(_payees.length == _expectedAmounts.length);\n     \n        for (uint8 i = 1; i < _payees.length; i = i.add(1))\n        {\n            // payees address cannot be 0x0\n            require(_payees[i] != 0);\n            subPayees[_requestId][i-1] = Payee(_payees[i], _expectedAmounts[i], 0);\n            NewSubPayee(_requestId, _payees[i]);\n        }\n    }\n\n\n    /* GETTER */\n    /*\n     * @dev Get address of a payee\n     * @param _requestId Request id\n     * @param _payeeIndex payee index (0 = main payee)\n     * @return payee address\n     */ \n    function getPayeeAddress(bytes32 _requestId, uint8 _payeeIndex)\n        public\n        constant\n        returns(address)\n    {\n        if(_payeeIndex == 0) {\n            return requests[_requestId].payee.addr;\n        } else {\n            return subPayees[_requestId][_payeeIndex-1].addr;\n        }\n    }\n\n    /*\n     * @dev Get payer of a request\n     * @param _requestId Request id\n     * @return payer address\n     */ \n    function getPayer(bytes32 _requestId)\n        public\n        constant\n        returns(address)\n    {\n        return requests[_requestId].payer;\n    }\n\n    /*\n     * @dev Get amount expected of a payee\n     * @param _requestId Request id\n     * @param _payeeIndex payee index (0 = main payee)\n     * @return amount expected\n     */     \n    function getPayeeExpectedAmount(bytes32 _requestId, uint8 _payeeIndex)\n        public\n        constant\n        returns(int256)\n    {\n        if(_payeeIndex == 0) {\n            return requests[_requestId].payee.expectedAmount;\n        } else {\n            return subPayees[_requestId][_payeeIndex-1].expectedAmount;\n        }\n    }\n\n    /*\n     * @dev Get number of subPayees for a request\n     * @param _requestId Request id\n     * @return number of subPayees\n     */     \n    function getSubPayeesCount(bytes32 _requestId)\n        public\n        constant\n        returns(uint8)\n    {\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1)) {\n            // nothing to do\n        }\n        return i;\n    }\n\n    /*\n     * @dev Get currencyContract of a request\n     * @param _requestId Request id\n     * @return currencyContract address\n     */\n    function getCurrencyContract(bytes32 _requestId)\n        public\n        constant\n        returns(address)\n    {\n        return requests[_requestId].currencyContract;\n    }\n\n    /*\n     * @dev Get balance of a payee\n     * @param _requestId Request id\n     * @param _payeeIndex payee index (0 = main payee)\n     * @return balance\n     */     \n    function getPayeeBalance(bytes32 _requestId, uint8 _payeeIndex)\n        public\n        constant\n        returns(int256)\n    {\n        if(_payeeIndex == 0) {\n            return requests[_requestId].payee.balance;    \n        } else {\n            return subPayees[_requestId][_payeeIndex-1].balance;\n        }\n    }\n\n    /*\n     * @dev Get balance total of a request\n     * @param _requestId Request id\n     * @return balance\n     */     \n    function getBalance(bytes32 _requestId)\n        public\n        constant\n        returns(int256)\n    {\n        int256 balance = requests[_requestId].payee.balance;\n\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1))\n        {\n            balance = balance.add(subPayees[_requestId][i].balance);\n        }\n\n        return balance;\n    }\n\n\n    /*\n     * @dev check if all the payees balances are null\n     * @param _requestId Request id\n     * @return true if all the payees balances are equals to 0\n     */     \n    function areAllBalanceNull(bytes32 _requestId)\n        public\n        constant\n        returns(bool isNull)\n    {\n        isNull = requests[_requestId].payee.balance == 0;\n\n        for (uint8 i = 0; isNull && subPayees[_requestId][i].addr != address(0); i = i.add(1))\n        {\n            isNull = subPayees[_requestId][i].balance == 0;\n        }\n\n        return isNull;\n    }\n\n    /*\n     * @dev Get total expectedAmount of a request\n     * @param _requestId Request id\n     * @return balance\n     */     \n    function getExpectedAmount(bytes32 _requestId)\n        public\n        constant\n        returns(int256)\n    {\n        int256 expectedAmount = requests[_requestId].payee.expectedAmount;\n\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1))\n        {\n            expectedAmount = expectedAmount.add(subPayees[_requestId][i].expectedAmount);\n        }\n\n        return expectedAmount;\n    }\n\n    /*\n     * @dev Get state of a request\n     * @param _requestId Request id\n     * @return state\n     */ \n    function getState(bytes32 _requestId)\n        public\n        constant\n        returns(State)\n    {\n        return requests[_requestId].state;\n    }\n\n    /*\n     * @dev Get address of a payee\n     * @param _requestId Request id\n     * @return payee index (0 = main payee) or -1 if not address not found\n     */\n    function getPayeeIndex(bytes32 _requestId, address _address)\n        public\n        constant\n        returns(int16)\n    {\n        // return 0 if main payee\n        if(requests[_requestId].payee.addr == _address) return 0;\n\n        for (uint8 i = 0; subPayees[_requestId][i].addr != address(0); i = i.add(1))\n        {\n            if(subPayees[_requestId][i].addr == _address) {\n                // if found return subPayee index + 1 (0 is main payee)\n                return i+1;\n            }\n        }\n        return -1;\n    }\n\n    /*\n     * @dev getter of a request\n     * @param _requestId Request id\n     * @return request as a tuple : (address payer, address currencyContract, State state, address payeeAddr, int256 payeeExpectedAmount, int256 payeeBalance)\n     */ \n    function getRequest(bytes32 _requestId) \n        external\n        constant\n        returns(address payer, address currencyContract, State state, address payeeAddr, int256 payeeExpectedAmount, int256 payeeBalance)\n    {\n        Request storage r = requests[_requestId];\n        return ( r.payer, \n                 r.currencyContract, \n                 r.state, \n                 r.payee.addr, \n                 r.payee.expectedAmount, \n                 r.payee.balance );\n    }\n\n    /*\n     * @dev extract a string from a bytes. Extracts a sub-part from tha bytes and convert it to string\n     * @param data bytes from where the string will be extracted\n     * @param size string size to extract\n     * @param _offset position of the first byte of the string in bytes\n     * @return string\n     */ \n    function extractString(bytes data, uint8 size, uint _offset) \n        internal \n        pure \n        returns (string) \n    {\n        bytes memory bytesString = new bytes(size);\n        for (uint j = 0; j < size; j++) {\n            bytesString[j] = data[_offset+j];\n        }\n        return string(bytesString);\n    }\n\n    /*\n     * @dev generate a new unique requestId\n     * @return a bytes32 requestId \n     */ \n    function generateRequestId()\n        internal\n        returns (bytes32)\n    {\n        // Update numRequest\n        numRequests = numRequests.add(1);\n        // requestId = ADDRESS_CONTRACT_CORE + numRequests (0xADRRESSCONTRACT00000NUMREQUEST)\n        return bytes32((uint256(this) << 96).add(numRequests));\n    }\n\n    /*\n     * @dev extract an address from a bytes at a given position\n     * @param _data bytes from where the address will be extract\n     * @param _offset position of the first byte of the address\n     * @return address\n     */\n    function extractAddress(bytes _data, uint offset)\n        internal\n        pure\n        returns (address m)\n    {\n        require(offset >=0 && offset + 20 <= _data.length);\n        assembly {\n            m := and( mload(add(_data, add(20, offset))), \n                      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n    }\n\n    /*\n     * @dev extract a bytes32 from a bytes\n     * @param data bytes from where the bytes32 will be extract\n     * @param offset position of the first byte of the bytes32\n     * @return address\n     */\n    function extractBytes32(bytes _data, uint offset)\n        public\n        pure\n        returns (bytes32 bs)\n    {\n        require(offset >=0 && offset + 32 <= _data.length);\n        assembly {\n            bs := mload(add(_data, add(32, offset)))\n        }\n    }\n\n    /**\n     * @dev transfer to owner any tokens send by mistake on this contracts\n     * @param token The address of the token to transfer.\n     * @param amount The amount to be transfered.\n     */\n    function emergencyERC20Drain(ERC20 token, uint amount )\n        public\n        onlyOwner \n    {\n        token.transfer(owner, amount);\n    }\n}\n\n/**\n * @title RequestEthereumCollect\n *\n * @dev RequestEthereumCollect is a contract managing the fees for ethereum currency contract\n */\ncontract RequestEthereumCollect is Pausable {\n    using SafeMath for uint256;\n\n    // fees percentage (per 10 000)\n    uint256 public feesPer10000;\n\n    // maximum fees in wei\n    uint256 public maxFees;\n\n    // address of the contract that will burn req token (probably through Kyber)\n    address public requestBurnerContract;\n\n    /*\n     * @dev Constructor\n     * @param _requestBurnerContract Address of the contract where to send the ethers. \n     * This burner contract will have a function that can be called by anyone and will exchange ethers to req via Kyber and burn the REQ\n     */  \n    function RequestEthereumCollect(address _requestBurnerContract) \n        public\n    {\n        requestBurnerContract = _requestBurnerContract;\n    }\n\n    /*\n     * @dev send fees to the request burning address\n     * @param _amount amount to send to the burning address\n     */  \n    function collectForREQBurning(uint256 _amount)\n        internal\n        returns(bool)\n    {\n        return requestBurnerContract.send(_amount);\n    }\n\n    /*\n     * @dev compute the fees\n     * @param _expectedAmount amount expected for the request\n     * @return \n     */  \n    function collectEstimation(int256 _expectedAmount)\n        public\n        view\n        returns(uint256)\n    {\n        // Force potential negative number to 0\n        if (_expectedAmount <= 0) {\n            return 0;\n        }\n        uint256 computedCollect = uint256(_expectedAmount).mul(feesPer10000).div(10000);\n        return computedCollect < maxFees ? computedCollect : maxFees;\n    }\n\n    /*\n     * @dev set the fees rate (per 10 000)\n     * @param _newRate new rate\n     * @return \n     */  \n    function setFeesPerTenThousand(uint256 _newRate) \n        external\n        onlyOwner\n    {\n        feesPer10000=_newRate;\n    }\n\n    /*\n     * @dev set the maximum fees in wei\n     * @param _newMax new max\n     * @return \n     */  \n    function setMaxCollectable(uint256 _newMax) \n        external\n        onlyOwner\n    {\n        maxFees=_newMax;\n    }\n\n    /*\n     * @dev set the request burner address\n     * @param _requestBurnerContract address of the contract that will burn req token (probably through Kyber)\n     * @return \n     */  \n    function setRequestBurnerContract(address _requestBurnerContract) \n        external\n        onlyOwner\n    {\n        requestBurnerContract=_requestBurnerContract;\n    }\n}\n\n\n\n/**\n * @title RequestEthereum\n *\n * @dev RequestEthereum is the currency contract managing the request in Ethereum\n * @dev The contract can be paused. In this case, nobody can create Requests anymore but people can still interact with them.\n *\n * @dev Requests can be created by the Payee with createRequestAsPayee(), by the payer with createRequestAsPayer() or by the payer from a request signed offchain by the payee with broadcastSignedRequestAsPayer()\n */\ncontract RequestEthereum is RequestEthereumCollect {\n    using SafeMath for uint256;\n    using SafeMathInt for int256;\n    using SafeMathUint8 for uint8;\n\n    // RequestCore object\n    RequestCore public requestCore;\n\n    // payment addresses by requestId (optional). We separate the Identity of the payee/payer (in the core) and the wallet address in the currency contract\n    mapping(bytes32 => address[256]) public payeesPaymentAddress;\n    mapping(bytes32 => address) public payerRefundAddress;\n\n    /*\n     * @dev Constructor\n     * @param _requestCoreAddress Request Core address\n     * @param _requestBurnerAddress Request Burner contract address\n     */\n    function RequestEthereum(address _requestCoreAddress, address _requestBurnerAddress) RequestEthereumCollect(_requestBurnerAddress) public\n    {\n        requestCore=RequestCore(_requestCoreAddress);\n    }\n\n    /*\n     * @dev Function to create a request as payee\n     *\n     * @dev msg.sender will be the payee\n     * @dev if _payeesPaymentAddress.length > _payeesIdAddress.length, the extra addresses will be stored but never used\n     * @dev If a contract is given as a payee make sure it is payable. Otherwise, the request will not be payable.\n     *\n     * @param _payeesIdAddress array of payees address (the index 0 will be the payee - must be msg.sender - the others are subPayees)\n     * @param _payeesPaymentAddress array of payees address for payment (optional)\n     * @param _expectedAmounts array of Expected amount to be received by each payees\n     * @param _payer Entity expected to pay\n     * @param _payerRefundAddress Address of refund for the payer (optional)\n     * @param _data Hash linking to additional data on the Request stored on IPFS\n     *\n     * @return Returns the id of the request\n     */\n    function createRequestAsPayee(\n        address[]   _payeesIdAddress,\n        address[]   _payeesPaymentAddress,\n        int256[]    _expectedAmounts,\n        address     _payer,\n        address     _payerRefundAddress,\n        string      _data)\n        external\n        payable\n        whenNotPaused\n        returns(bytes32 requestId)\n    {\n        require(msg.sender == _payeesIdAddress[0] && msg.sender != _payer && _payer != 0);\n\n        uint256 fees;\n        (requestId, fees) = createRequest(_payer, _payeesIdAddress, _payeesPaymentAddress, _expectedAmounts, _payerRefundAddress, _data);\n\n        // check if the value send match exactly the fees (no under or over payment allowed)\n        require(fees == msg.value);\n\n        return requestId;\n    }\n\n    /*\n     * @dev Function to create a request as payer. The request is payed if _payeeAmounts > 0.\n     *\n     * @dev msg.sender will be the payer\n     * @dev If a contract is given as a payee make sure it is payable. Otherwise, the request will not be payable.\n     *\n     * @param _payeesIdAddress array of payees address (the index 0 will be the payee the others are subPayees)\n     * @param _expectedAmounts array of Expected amount to be received by each payees\n     * @param _payerRefundAddress Address of refund for the payer (optional)\n     * @param _payeeAmounts array of amount repartition for the payment\n     * @param _additionals array to increase the ExpectedAmount for payees\n     * @param _data Hash linking to additional data on the Request stored on IPFS\n     *\n     * @return Returns the id of the request\n     */\n    function createRequestAsPayer(\n        address[]   _payeesIdAddress,\n        int256[]    _expectedAmounts,\n        address     _payerRefundAddress,\n        uint256[]   _payeeAmounts,\n        uint256[]   _additionals,\n        string      _data)\n        external\n        payable\n        whenNotPaused\n        returns(bytes32 requestId)\n    {\n        require(msg.sender != _payeesIdAddress[0] && _payeesIdAddress[0] != 0);\n\n        // payeesPaymentAddress is not offered as argument here to avoid scam\n        address[] memory emptyPayeesPaymentAddress = new address[](0);\n        uint256 fees;\n        (requestId, fees) = createRequest(msg.sender, _payeesIdAddress, emptyPayeesPaymentAddress, _expectedAmounts, _payerRefundAddress, _data);\n\n        // accept and pay the request with the value remaining after the fee collect\n        acceptAndPay(requestId, _payeeAmounts, _additionals, msg.value.sub(fees));\n\n        return requestId;\n    }\n\n\n    /*\n     * @dev Function to broadcast and accept an offchain signed request (can be paid and additionals also)\n     *\n     * @dev _payer will be set msg.sender\n     * @dev if _payeesPaymentAddress.length > _requestData.payeesIdAddress.length, the extra addresses will be stored but never used\n     * @dev If a contract is given as a payee make sure it is payable. Otherwise, the request will not be payable.\n     *\n     * @param _requestData nested bytes containing : creator, payer, payees, expectedAmounts, data\n     * @param _payeesPaymentAddress array of payees address for payment (optional) \n     * @param _payeeAmounts array of amount repartition for the payment\n     * @param _additionals array to increase the ExpectedAmount for payees\n     * @param _expirationDate timestamp after that the signed request cannot be broadcasted\n     * @param _signature ECDSA signature in bytes\n     *\n     * @return Returns the id of the request\n     */\n    function broadcastSignedRequestAsPayer(\n        bytes       _requestData, // gather data to avoid \"stack too deep\"\n        address[]   _payeesPaymentAddress,\n        uint256[]   _payeeAmounts,\n        uint256[]   _additionals,\n        uint256     _expirationDate,\n        bytes       _signature)\n        external\n        payable\n        whenNotPaused\n        returns(bytes32)\n    {\n        // check expiration date\n        require(_expirationDate >= block.timestamp);\n\n        // check the signature\n        require(checkRequestSignature(_requestData, _payeesPaymentAddress, _expirationDate, _signature));\n\n        // create accept and pay the request\n        return createAcceptAndPayFromBytes(_requestData,  _payeesPaymentAddress, _payeeAmounts, _additionals);\n    }\n\n    /*\n     * @dev Internal function to create, accept, add additionals and pay a request as Payer\n     *\n     * @dev msg.sender must be _payer\n     *\n     * @param _requestData nasty bytes containing : creator, payer, payees|expectedAmounts, data\n     * @param _payeesPaymentAddress array of payees address for payment (optional)\n     * @param _payeeAmounts array of amount repartition for the payment\n     * @param _additionals Will increase the ExpectedAmount of the request right after its creation by adding additionals\n     *\n     * @return Returns the id of the request\n     */\n    function createAcceptAndPayFromBytes(\n        bytes       _requestData,\n        address[]   _payeesPaymentAddress,\n        uint256[]   _payeeAmounts,\n        uint256[]   _additionals)\n        internal\n        returns(bytes32 requestId)\n    {\n        // extract main payee\n        address mainPayee = extractAddress(_requestData, 41);\n        require(msg.sender != mainPayee && mainPayee != 0);\n        // creator must be the main payee\n        require(extractAddress(_requestData, 0) == mainPayee);\n\n        // extract the number of payees\n        uint8 payeesCount = uint8(_requestData[40]);\n        int256 totalExpectedAmounts = 0;\n        for(uint8 i = 0; i < payeesCount; i++) {\n            // extract the expectedAmount for the payee[i]\n            // NB: no need of SafeMath here because 0 < i < 256 (uint8)\n            int256 expectedAmountTemp = int256(extractBytes32(_requestData, 61 + 52 * uint256(i)));\n            // compute the total expected amount of the request\n            totalExpectedAmounts = totalExpectedAmounts.add(expectedAmountTemp);\n            // all expected amount must be positibe\n            require(expectedAmountTemp>0);\n        }\n\n        // collect the fees\n        uint256 fees = collectEstimation(totalExpectedAmounts);\n\n        // check fees has been well received\n        // do the action and assertion in one to save a variable\n        require(collectForREQBurning(fees));\n\n        // insert the msg.sender as the payer in the bytes\n        updateBytes20inBytes(_requestData, 20, bytes20(msg.sender));\n        // store request in the core,\n        requestId = requestCore.createRequestFromBytes(_requestData);\n\n        // set payment addresses for payees\n        for (uint8 j = 0; j < _payeesPaymentAddress.length; j = j.add(1)) {\n            payeesPaymentAddress[requestId][j] = _payeesPaymentAddress[j];\n        }\n\n        // accept and pay the request with the value remaining after the fee collect\n        acceptAndPay(requestId, _payeeAmounts, _additionals, msg.value.sub(fees));\n\n        return requestId;\n    }\n\n\n    /*\n     * @dev Internal function to create a request\n     *\n     * @dev msg.sender is the creator of the request\n     *\n     * @param _payer Payer identity address\n     * @param _payees Payees identity address\n     * @param _payeesPaymentAddress Payees payment address\n     * @param _expectedAmounts Expected amounts to be received by payees\n     * @param _payerRefundAddress payer refund address\n     * @param _data Hash linking to additional data on the Request stored on IPFS\n     *\n     * @return Returns the id of the request\n     */\n    function createRequest(\n        address     _payer,\n        address[]   _payees,\n        address[]   _payeesPaymentAddress,\n        int256[]    _expectedAmounts,\n        address     _payerRefundAddress,\n        string      _data)\n        internal\n        returns(bytes32 requestId, uint256 fees)\n    {\n        int256 totalExpectedAmounts = 0;\n        for (uint8 i = 0; i < _expectedAmounts.length; i = i.add(1))\n        {\n            // all expected amount must be positive\n            require(_expectedAmounts[i]>=0);\n            // compute the total expected amount of the request\n            totalExpectedAmounts = totalExpectedAmounts.add(_expectedAmounts[i]);\n        }\n\n        // collect the fees\n        fees = collectEstimation(totalExpectedAmounts);\n        // check fees has been well received\n        require(collectForREQBurning(fees));\n\n        // store request in the core\n        requestId= requestCore.createRequest(msg.sender, _payees, _expectedAmounts, _payer, _data);\n\n        // set payment addresses for payees\n        for (uint8 j = 0; j < _payeesPaymentAddress.length; j = j.add(1)) {\n            payeesPaymentAddress[requestId][j] = _payeesPaymentAddress[j];\n        }\n        // set payment address for payer\n        if(_payerRefundAddress != 0) {\n            payerRefundAddress[requestId] = _payerRefundAddress;\n        }\n    }\n\n    /*\n     * @dev Internal function to accept, add additionals and pay a request as Payer\n     *\n     * @param _requestId id of the request\n     * @param _payeesAmounts Amount to pay to payees (sum must be equals to _amountPaid)\n     * @param _additionals Will increase the ExpectedAmounts of payees\n     * @param _amountPaid amount in msg.value minus the fees\n     *\n     */ \n    function acceptAndPay(\n        bytes32 _requestId,\n        uint256[] _payeeAmounts,\n        uint256[] _additionals,\n        uint256 _amountPaid)\n        internal\n    {\n        requestCore.accept(_requestId);\n        \n        additionalInternal(_requestId, _additionals);\n\n        if(_amountPaid > 0) {\n            paymentInternal(_requestId, _payeeAmounts, _amountPaid);\n        }\n    }\n\n    // ---- INTERFACE FUNCTIONS ------------------------------------------------------------------------------------\n\n    /*\n     * @dev Function to accept a request\n     *\n     * @dev msg.sender must be _payer\n     * @dev A request can also be accepted by using directly the payment function on a request in the Created status\n     *\n     * @param _requestId id of the request\n     */\n    function accept(bytes32 _requestId)\n        external\n        whenNotPaused\n        condition(requestCore.getPayer(_requestId)==msg.sender)\n        condition(requestCore.getState(_requestId)==RequestCore.State.Created)\n    {\n        requestCore.accept(_requestId);\n    }\n\n    /*\n     * @dev Function to cancel a request\n     *\n     * @dev msg.sender must be the _payer or the _payee.\n     * @dev only request with balance equals to zero can be cancel\n     *\n     * @param _requestId id of the request\n     */\n    function cancel(bytes32 _requestId)\n        external\n        whenNotPaused\n    {\n        // payer can cancel if request is just created\n        bool isPayerAndCreated = requestCore.getPayer(_requestId)==msg.sender && requestCore.getState(_requestId)==RequestCore.State.Created;\n\n        // payee can cancel when request is not canceled yet\n        bool isPayeeAndNotCanceled = requestCore.getPayeeAddress(_requestId,0)==msg.sender && requestCore.getState(_requestId)!=RequestCore.State.Canceled;\n\n        require(isPayerAndCreated || isPayeeAndNotCanceled);\n\n        // impossible to cancel a Request with any payees balance != 0\n        require(requestCore.areAllBalanceNull(_requestId));\n\n        requestCore.cancel(_requestId);\n    }\n\n    // ----------------------------------------------------------------------------------------\n\n\n    // ---- CONTRACT FUNCTIONS ------------------------------------------------------------------------------------\n    /*\n     * @dev Function PAYABLE to pay a request in ether.\n     *\n     * @dev the request will be automatically accepted if msg.sender==payer.\n     *\n     * @param _requestId id of the request\n     * @param _payeesAmounts Amount to pay to payees (sum must be equal to msg.value) in wei\n     * @param _additionalsAmount amount of additionals per payee in wei to declare\n     */\n    function paymentAction(\n        bytes32 _requestId,\n        uint256[] _payeeAmounts,\n        uint256[] _additionalAmounts)\n        external\n        whenNotPaused\n        payable\n        condition(requestCore.getState(_requestId)!=RequestCore.State.Canceled)\n        condition(_additionalAmounts.length == 0 || msg.sender == requestCore.getPayer(_requestId))\n    {\n        // automatically accept request if request is created and msg.sender is payer\n        if(requestCore.getState(_requestId)==RequestCore.State.Created && msg.sender == requestCore.getPayer(_requestId)) {\n            requestCore.accept(_requestId);\n        }\n\n        additionalInternal(_requestId, _additionalAmounts);\n\n        paymentInternal(_requestId, _payeeAmounts, msg.value);\n    }\n\n    /*\n     * @dev Function PAYABLE to pay back in ether a request to the payer\n     *\n     * @dev msg.sender must be one of the payees\n     * @dev the request must be created or accepted\n     *\n     * @param _requestId id of the request\n     */\n    function refundAction(bytes32 _requestId)\n        external\n        whenNotPaused\n        payable\n    {\n        refundInternal(_requestId, msg.sender, msg.value);\n    }\n\n    /*\n     * @dev Function to declare a subtract\n     *\n     * @dev msg.sender must be _payee\n     * @dev the request must be accepted or created\n     *\n     * @param _requestId id of the request\n     * @param _subtractAmounts amounts of subtract in wei to declare (index 0 is for main payee)\n     */\n    function subtractAction(bytes32 _requestId, uint256[] _subtractAmounts)\n        external\n        whenNotPaused\n        condition(requestCore.getState(_requestId)!=RequestCore.State.Canceled)\n        onlyRequestPayee(_requestId)\n    {\n        for(uint8 i = 0; i < _subtractAmounts.length; i = i.add(1)) {\n            if(_subtractAmounts[i] != 0) {\n                // subtract must be equal or lower than amount expected\n                require(requestCore.getPayeeExpectedAmount(_requestId,i) >= _subtractAmounts[i].toInt256Safe());\n                // store and declare the subtract in the core\n                requestCore.updateExpectedAmount(_requestId, i, -_subtractAmounts[i].toInt256Safe());\n            }\n        }\n    }\n\n    /*\n     * @dev Function to declare an additional\n     *\n     * @dev msg.sender must be _payer\n     * @dev the request must be accepted or created\n     *\n     * @param _requestId id of the request\n     * @param _additionalAmounts amounts of additional in wei to declare (index 0 is for main payee)\n     */\n    function additionalAction(bytes32 _requestId, uint256[] _additionalAmounts)\n        external\n        whenNotPaused\n        condition(requestCore.getState(_requestId)!=RequestCore.State.Canceled)\n        onlyRequestPayer(_requestId)\n    {\n        additionalInternal(_requestId, _additionalAmounts);\n    }\n    // ----------------------------------------------------------------------------------------\n\n\n    // ---- INTERNAL FUNCTIONS ------------------------------------------------------------------------------------\n    /*\n     * @dev Function internal to manage additional declaration\n     *\n     * @param _requestId id of the request\n     * @param _additionalAmounts amount of additional to declare\n     */\n    function additionalInternal(bytes32 _requestId, uint256[] _additionalAmounts)\n        internal\n    {\n        // we cannot have more additional amounts declared than actual payees but we can have fewer\n        require(_additionalAmounts.length <= requestCore.getSubPayeesCount(_requestId).add(1));\n\n        for(uint8 i = 0; i < _additionalAmounts.length; i = i.add(1)) {\n            if(_additionalAmounts[i] != 0) {\n                // Store and declare the additional in the core\n                requestCore.updateExpectedAmount(_requestId, i, _additionalAmounts[i].toInt256Safe());\n            }\n        }\n    }\n\n    /*\n     * @dev Function internal to manage payment declaration\n     *\n     * @param _requestId id of the request\n     * @param _payeesAmounts Amount to pay to payees (sum must be equals to msg.value)\n     * @param _value amount paid\n     */\n    function paymentInternal(\n        bytes32     _requestId,\n        uint256[]   _payeeAmounts,\n        uint256     _value)\n        internal\n    {\n        // we cannot have more amounts declared than actual payees\n        require(_payeeAmounts.length <= requestCore.getSubPayeesCount(_requestId).add(1));\n\n        uint256 totalPayeeAmounts = 0;\n\n        for(uint8 i = 0; i < _payeeAmounts.length; i = i.add(1)) {\n            if(_payeeAmounts[i] != 0) {\n                // compute the total amount declared\n                totalPayeeAmounts = totalPayeeAmounts.add(_payeeAmounts[i]);\n\n                // Store and declare the payment to the core\n                requestCore.updateBalance(_requestId, i, _payeeAmounts[i].toInt256Safe());\n\n                // pay the payment address if given, the id address otherwise\n                address addressToPay;\n                if(payeesPaymentAddress[_requestId][i] == 0) {\n                    addressToPay = requestCore.getPayeeAddress(_requestId, i);\n                } else {\n                    addressToPay = payeesPaymentAddress[_requestId][i];\n                }\n\n                //payment done, the money was sent\n                fundOrderInternal(addressToPay, _payeeAmounts[i]);\n            }\n        }\n\n        // check if payment repartition match the value paid\n        require(_value==totalPayeeAmounts);\n    }\n\n    /*\n     * @dev Function internal to manage refund declaration\n     *\n     * @param _requestId id of the request\n\n     * @param _fromAddress address from where the refund has been done\n     * @param _amount amount of the refund in wei to declare\n     *\n     * @return true if the refund is done, false otherwise\n     */\n    function refundInternal(\n        bytes32 _requestId,\n        address _fromAddress,\n        uint256 _amount)\n        condition(requestCore.getState(_requestId)!=RequestCore.State.Canceled)\n        internal\n    {\n        // Check if the _fromAddress is a payeesId\n        // int16 to allow -1 value\n        int16 payeeIndex = requestCore.getPayeeIndex(_requestId, _fromAddress);\n        if(payeeIndex < 0) {\n            uint8 payeesCount = requestCore.getSubPayeesCount(_requestId).add(1);\n\n            // if not ID addresses maybe in the payee payments addresses\n            for (uint8 i = 0; i < payeesCount && payeeIndex == -1; i = i.add(1)) {\n                if(payeesPaymentAddress[_requestId][i] == _fromAddress) {\n                    // get the payeeIndex\n                    payeeIndex = int16(i);\n                }\n            }\n        }\n        // the address must be found somewhere\n        require(payeeIndex >= 0); \n\n        // Casting to uin8 doesn't lose bits because payeeIndex < 256. payeeIndex was declared int16 to allow -1\n        requestCore.updateBalance(_requestId, uint8(payeeIndex), -_amount.toInt256Safe());\n\n        // refund to the payment address if given, the id address otherwise\n        address addressToPay = payerRefundAddress[_requestId];\n        if(addressToPay == 0) {\n            addressToPay = requestCore.getPayer(_requestId);\n        }\n\n        // refund declared, the money is ready to be sent to the payer\n        fundOrderInternal(addressToPay, _amount);\n    }\n\n    /*\n     * @dev Function internal to manage fund mouvement\n     * @dev We had to chose between a withdrawal pattern, a transfer pattern or a transfer+withdrawal pattern and chose the transfer pattern.\n     * @dev The withdrawal pattern would make UX difficult. The transfer+withdrawal pattern would make contracts interacting with the request protocol complex.\n     * @dev N.B.: The transfer pattern will have to be clearly explained to users. It enables a payee to create unpayable requests.\n     *\n     * @param _recipient address where the wei has to be sent to\n     * @param _amount amount in wei to send\n     *\n     */\n    function fundOrderInternal(\n        address _recipient,\n        uint256 _amount)\n        internal\n    {\n        _recipient.transfer(_amount);\n    }\n\n    /*\n     * @dev Function internal to calculate Keccak-256 hash of a request with specified parameters\n     *\n     * @param _data bytes containing all the data packed\n     * @param _payeesPaymentAddress array of payees payment addresses\n     * @param _expirationDate timestamp after what the signed request cannot be broadcasted\n     *\n     * @return Keccak-256 hash of (this,_requestData, _payeesPaymentAddress, _expirationDate)\n     */\n    function getRequestHash(\n        // _requestData is from the core\n        bytes       _requestData,\n\n        // _payeesPaymentAddress and _expirationDate are not from the core but needs to be signed\n        address[]   _payeesPaymentAddress,\n        uint256     _expirationDate)\n        internal\n        view\n        returns(bytes32)\n    {\n        return keccak256(this, _requestData, _payeesPaymentAddress, _expirationDate);\n    }\n\n    /*\n     * @dev Verifies that a hash signature is valid. 0x style\n     * @param signer address of signer.\n     * @param hash Signed Keccak-256 hash.\n     * @param v ECDSA signature parameter v.\n     * @param r ECDSA signature parameters r.\n     * @param s ECDSA signature parameters s.\n     * @return Validity of order signature.\n     */\n    function isValidSignature(\n        address signer,\n        bytes32 hash,\n        uint8   v,\n        bytes32 r,\n        bytes32 s)\n        public\n        pure\n        returns (bool)\n    {\n        return signer == ecrecover(\n            keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash),\n            v,\n            r,\n            s\n        );\n    }\n\n    /*\n     * @dev Check the validity of a signed request & the expiration date\n     * @param _data bytes containing all the data packed :\n            address(creator)\n            address(payer)\n            uint8(number_of_payees)\n            [\n                address(main_payee_address)\n                int256(main_payee_expected_amount)\n                address(second_payee_address)\n                int256(second_payee_expected_amount)\n                ...\n            ]\n            uint8(data_string_size)\n            size(data)\n     * @param _payeesPaymentAddress array of payees payment addresses (the index 0 will be the payee the others are subPayees)\n     * @param _expirationDate timestamp after that the signed request cannot be broadcasted\n     * @param _signature ECDSA signature containing v, r and s as bytes\n     *\n     * @return Validity of order signature.\n     */ \n    function checkRequestSignature(\n        bytes       _requestData,\n        address[]   _payeesPaymentAddress,\n        uint256     _expirationDate,\n        bytes       _signature)\n        public\n        view\n        returns (bool)\n    {\n        bytes32 hash = getRequestHash(_requestData, _payeesPaymentAddress, _expirationDate);\n\n        // extract \"v, r, s\" from the signature\n        uint8 v = uint8(_signature[64]);\n        v = v < 27 ? v.add(27) : v;\n        bytes32 r = extractBytes32(_signature, 0);\n        bytes32 s = extractBytes32(_signature, 32);\n\n        // check signature of the hash with the creator address\n        return isValidSignature(extractAddress(_requestData, 0), hash, v, r, s);\n    }\n\n    //modifier\n    modifier condition(bool c)\n    {\n        require(c);\n        _;\n    }\n\n    /*\n     * @dev Modifier to check if msg.sender is payer\n     * @dev Revert if msg.sender is not payer\n     * @param _requestId id of the request\n     */ \n    modifier onlyRequestPayer(bytes32 _requestId)\n    {\n        require(requestCore.getPayer(_requestId)==msg.sender);\n        _;\n    }\n    \n    /*\n     * @dev Modifier to check if msg.sender is the main payee\n     * @dev Revert if msg.sender is not the main payee\n     * @param _requestId id of the request\n     */ \n    modifier onlyRequestPayee(bytes32 _requestId)\n    {\n        require(requestCore.getPayeeAddress(_requestId, 0)==msg.sender);\n        _;\n    }\n\n    /*\n     * @dev modify 20 bytes in a bytes\n     * @param data bytes to modify\n     * @param offset position of the first byte to modify\n     * @param b bytes20 to insert\n     * @return address\n     */\n    function updateBytes20inBytes(bytes data, uint offset, bytes20 b)\n        internal\n        pure\n    {\n        require(offset >=0 && offset + 20 <= data.length);\n        assembly {\n            let m := mload(add(data, add(20, offset)))\n            m := and(m, 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000)\n            m := or(m, div(b, 0x1000000000000000000000000))\n            mstore(add(data, add(20, offset)), m)\n        }\n    }\n\n    /*\n     * @dev extract an address in a bytes\n     * @param data bytes from where the address will be extract\n     * @param offset position of the first byte of the address\n     * @return address\n     */\n    function extractAddress(bytes _data, uint offset)\n        internal\n        pure\n        returns (address m) \n    {\n        require(offset >=0 && offset + 20 <= _data.length);\n        assembly {\n            m := and( mload(add(_data, add(20, offset))), \n                      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n    }\n\n    /*\n     * @dev extract a bytes32 from a bytes\n     * @param data bytes from where the bytes32 will be extract\n     * @param offset position of the first byte of the bytes32\n     * @return address\n     */\n    function extractBytes32(bytes _data, uint offset)\n        public\n        pure\n        returns (bytes32 bs)\n    {\n        require(offset >=0 && offset + 32 <= _data.length);\n        assembly {\n            bs := mload(add(_data, add(32, offset)))\n        }\n    }\n\n\n    /**\n     * @dev transfer to owner any tokens send by mistake on this contracts\n     * @param token The address of the token to transfer.\n     * @param amount The amount to be transfered.\n     */\n    function emergencyERC20Drain(ERC20 token, uint amount )\n        public\n        onlyOwner \n    {\n        token.transfer(owner, amount);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_expectedAmount\",\"type\":\"int256\"}],\"name\":\"collectEstimation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payeesIdAddress\",\"type\":\"address[]\"},{\"name\":\"_expectedAmounts\",\"type\":\"int256[]\"},{\"name\":\"_payerRefundAddress\",\"type\":\"address\"},{\"name\":\"_payeeAmounts\",\"type\":\"uint256[]\"},{\"name\":\"_additionals\",\"type\":\"uint256[]\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"createRequestAsPayer\",\"outputs\":[{\"name\":\"requestId\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"name\":\"_payeeAmounts\",\"type\":\"uint256[]\"},{\"name\":\"_additionalAmounts\",\"type\":\"uint256[]\"}],\"name\":\"paymentAction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"name\":\"_subtractAmounts\",\"type\":\"uint256[]\"}],\"name\":\"subtractAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setFeesPerTenThousand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestData\",\"type\":\"bytes\"},{\"name\":\"_payeesPaymentAddress\",\"type\":\"address[]\"},{\"name\":\"_expirationDate\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"checkRequestSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestBurnerContract\",\"type\":\"address\"}],\"name\":\"setRequestBurnerContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"name\":\"_additionalAmounts\",\"type\":\"uint256[]\"}],\"name\":\"additionalAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestData\",\"type\":\"bytes\"},{\"name\":\"_payeesPaymentAddress\",\"type\":\"address[]\"},{\"name\":\"_payeeAmounts\",\"type\":\"uint256[]\"},{\"name\":\"_additionals\",\"type\":\"uint256[]\"},{\"name\":\"_expirationDate\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"broadcastSignedRequestAsPayer\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"payerRefundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payeesIdAddress\",\"type\":\"address[]\"},{\"name\":\"_payeesPaymentAddress\",\"type\":\"address[]\"},{\"name\":\"_expectedAmounts\",\"type\":\"int256[]\"},{\"name\":\"_payer\",\"type\":\"address\"},{\"name\":\"_payerRefundAddress\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"createRequestAsPayee\",\"outputs\":[{\"name\":\"requestId\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"extractBytes32\",\"outputs\":[{\"name\":\"bs\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesPer10000\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payeesPaymentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"refundAction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxCollectable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestBurnerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"accept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_requestCoreAddress\",\"type\":\"address\"},{\"name\":\"_requestBurnerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "606060405260008060146101000a81548160ff021916908315150217905550341561002957600080fd5b6040516040806145dd8339810160405280805190602001909190805190602001909190505080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506144ba806101236000396000f30060606040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806318954b3e1461016f5780631e24e029146101a657806327dd16e514610254578063289b45fb1461029857806338bf77c3146102d35780633f4ba83a146102f65780634b0a0d041461030b578063524eb29c1461040c5780635c975abb146104455780636c4fbaa4146104725780638163681e146104c757806383565cc71461054b5780638456cb59146105865780638da5cb5b1461059b5780639dbdd85c146105f0578063a460b89c14610688578063afd6b607146106ef578063b1e05e8a146107a8578063b2ba0aa51461082a578063b2f35bdd14610853578063b9103e1f146108c3578063c4d252f5146108df578063d7b8de0014610906578063db0e16f114610929578063e40e84571461096b578063e4725ba1146109c0578063e83e34b1146109e7578063f2fde38b14610a10575b600080fd5b341561017a57600080fd5b6101906004808035906020019091905050610a49565b6040518082815260200191505060405180910390f35b61023660048080359060200190820180359060200191909192908035906020019082018035906020019190919290803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019082018035906020019190919290803590602001908201803590602001919091929080359060200190820180359060200191909192905050610aa6565b60405180826000191660001916815260200191505060405180910390f35b61029660048080356000191690602001909190803590602001908201803590602001919091929080359060200190820180359060200191909192905050610cd9565b005b34156102a357600080fd5b6102d160048080356000191690602001909190803590602001908201803590602001919091929050506111cf565b005b34156102de57600080fd5b6102f46004808035906020019091905050611604565b005b341561030157600080fd5b610309611669565b005b341561031657600080fd5b6103f2600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611727565b604051808215151515815260200191505060405180910390f35b341561041757600080fd5b610443600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611825565b005b341561045057600080fd5b6104586118c4565b604051808215151515815260200191505060405180910390f35b341561047d57600080fd5b6104856118d7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104d257600080fd5b610531600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080356000191690602001909190803560ff1690602001909190803560001916906020019091908035600019169060200190919050506118fd565b604051808215151515815260200191505060405180910390f35b341561055657600080fd5b6105846004808035600019169060200190919080359060200190820180359060200191909192905050611a04565b005b341561059157600080fd5b610599611c37565b005b34156105a657600080fd5b6105ae611cf7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61066a600480803590602001908201803590602001919091929080359060200190820180359060200191909192908035906020019082018035906020019190919290803590602001908201803590602001919091929080359060200190919080359060200190820180359060200191909192905050611d1c565b60405180826000191660001916815260200191505060405180910390f35b341561069357600080fd5b6106ad600480803560001916906020019091905050611ece565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61078a600480803590602001908201803590602001919091929080359060200190820180359060200191909192908035906020019082018035906020019190919290803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190820180359060200191909192905050611f01565b60405180826000191660001916815260200191505060405180910390f35b34156107b357600080fd5b61080c600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919050506120d5565b60405180826000191660001916815260200191505060405180910390f35b341561083557600080fd5b61083d612105565b6040518082815260200191505060405180910390f35b341561085e57600080fd5b61088160048080356000191690602001909190803590602001909190505061210b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108dd600480803560001916906020019091905050612150565b005b34156108ea57600080fd5b61090460048080356000191690602001909190505061217a565b005b341561091157600080fd5b61092760048080359060200190919050506126c2565b005b341561093457600080fd5b610969600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612727565b005b341561097657600080fd5b61097e61286e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109cb57600080fd5b6109e5600480803560001916906020019091905050612894565b005b34156109f257600080fd5b6109fa612b38565b6040518082815260200191505060405180910390f35b3415610a1b57600080fd5b610a47600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612b3e565b005b600080600083131515610a5f5760009150610aa0565b610a88612710610a7a60015486612c9390919063ffffffff16565b612cc690919063ffffffff16565b90506002548110610a9b57600254610a9d565b805b91505b50919050565b6000610ab061447a565b60008060149054906101000a900460ff16151515610acd57600080fd5b8d8d60008181101515610adc57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610b76575060008e8e60008181101515610b4057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1515610b8157600080fd5b6000604051805910610b905750595b90808252806020026020018201604052509150610c41338f8f80806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050848f8f808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508e8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050612ce1565b8092508194505050610cc5838a8a80806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050898980806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050610cc085346130e690919063ffffffff16565b6130ff565b82925050509b9a5050505050505050505050565b600060149054906101000a900460ff16151515610cf557600080fd5b600280811115610d0157fe5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309648a9d876000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515610da257600080fd5b6102c65a03f11515610db357600080fd5b505050604051805190506002811115610dc857fe5b1415801515610dd657600080fd5b6000838390501480610ece5750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a12cad70876000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515610e8457600080fd5b6102c65a03f11515610e9557600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b801515610eda57600080fd5b60006002811115610ee757fe5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309648a9d896000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515610f8857600080fd5b6102c65a03f11515610f9957600080fd5b505050604051805190506002811115610fae57fe5b1480156110a15750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a12cad70886000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561105757600080fd5b6102c65a03f1151561106857600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561115357600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4725ba1886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b151561113e57600080fd5b6102c65a03f1151561114f57600080fd5b5050505b61118c878585808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050506131d0565b6111c687878780806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050346133f3565b50505050505050565b60008060149054906101000a900460ff161515156111ec57600080fd5b6002808111156111f857fe5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309648a9d866000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561129957600080fd5b6102c65a03f115156112aa57600080fd5b5050506040518051905060028111156112bf57fe5b14158015156112cd57600080fd5b843373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166392fd1f0183600080604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018260ff16815260200192505050602060405180830381600087803b151561139157600080fd5b6102c65a03f115156113a257600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff161415156113ce57600080fd5b600092505b848490508360ff1610156115fc57600085858560ff1681811015156113f457fe5b905060200201351415156115de5761142285858560ff16818110151561141657fe5b9050602002013561380f565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ad8d87588866000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018260ff1660ff16815260200192505050602060405180830381600087803b15156114d157600080fd5b6102c65a03f115156114e257600080fd5b50505060405180519050121515156114f957600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce165894878561155989898960ff16818110151561154d57fe5b9050602002013561380f565b6000036040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600019166000191681526020018360ff1660ff1681526020018281526020019350505050600060405180830381600087803b15156115c957600080fd5b6102c65a03f115156115da57600080fd5b5050505b6115f560018460ff1661382b90919063ffffffff16565b92506113d3565b505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561165f57600080fd5b8060018190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116c457600080fd5b600060149054906101000a900460ff1615156116df57600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600080600080600061173a89898961384f565b935085604081518110151561174b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090049250601b8360ff16106117cc57826117e4565b6117e3601b8460ff1661382b90919063ffffffff16565b5b92506117f18660006120d5565b91506117fe8660206120d5565b905061181761180e8a600061393d565b858585856118fd565b945050505050949350505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561188057600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060149054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060018560405180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c0182600019166000191681526020019150506040518091039020858585604051600081526020016040526000604051602001526040518085600019166000191681526020018460ff1660ff16815260200183600019166000191681526020018260001916600019168152602001945050505050602060405160208103908084039060008661646e5a03f115156119c257600080fd5b50506020604051035173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614905095945050505050565b600060149054906101000a900460ff16151515611a2057600080fd5b600280811115611a2c57fe5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309648a9d856000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515611acd57600080fd5b6102c65a03f11515611ade57600080fd5b505050604051805190506002811115611af357fe5b1415801515611b0157600080fd5b833373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a12cad70836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515611bba57600080fd5b6102c65a03f11515611bcb57600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff16141515611bf757600080fd5b611c30858585808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050506131d0565b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c9257600080fd5b600060149054906101000a900460ff16151515611cae57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060149054906101000a900460ff16151515611d3957600080fd5b428410151515611d4857600080fd5b611de78c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508b8b808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508686868080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611727565b1515611df257600080fd5b611ebd8c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508b8b808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508a8a80806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050898980806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050613983565b90509b9a5050505050505050505050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600060149054906101000a900460ff16151515611f2057600080fd5b8b8b60008181101515611f2f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611fb257508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b8015611fd5575060008673ffffffffffffffffffffffffffffffffffffffff1614155b1515611fe057600080fd5b6120ad868d8d808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508c8c808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508b8b808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050508989898080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050612ce1565b809250819350505034811415156120c357600080fd5b819150509a9950505050505050505050565b60008082101580156120eb575082516020830111155b15156120f657600080fd5b81602001830151905092915050565b60015481565b6005602052816000526040600020816101008110151561212757fe5b016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060149054906101000a900460ff1615151561216c57600080fd5b612177813334613d58565b50565b600080600060149054906101000a900460ff1615151561219957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a12cad70856000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561225157600080fd5b6102c65a03f1151561226257600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff1614801561236057506000600281111561229757fe5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309648a9d856000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561233857600080fd5b6102c65a03f1151561234957600080fd5b50505060405180519050600281111561235e57fe5b145b91503373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166392fd1f0185600080604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018260ff16815260200192505050602060405180830381600087803b151561242557600080fd5b6102c65a03f1151561243657600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff16148015612534575060028081111561246a57fe5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309648a9d856000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561250b57600080fd5b6102c65a03f1151561251c57600080fd5b50505060405180519050600281111561253157fe5b14155b9050818061253f5750805b151561254a57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307550f0a846000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15156125eb57600080fd5b6102c65a03f115156125fc57600080fd5b50505060405180519050151561261157600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4d252f5846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b15156126a957600080fd5b6102c65a03f115156126ba57600080fd5b505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561271d57600080fd5b8060028190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561278257600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561284e57600080fd5b6102c65a03f1151561285f57600080fd5b50505060405180519050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060149054906101000a900460ff161515156128b057600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a12cad70836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561296857600080fd5b6102c65a03f1151561297957600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff16148015156129a657600080fd5b600060028111156129b357fe5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309648a9d846000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515612a5457600080fd5b6102c65a03f11515612a6557600080fd5b505050604051805190506002811115612a7a57fe5b14801515612a8757600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4725ba1846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b1515612b1f57600080fd5b6102c65a03f11515612b3057600080fd5b505050505050565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b9957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612bd557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008082840290506000841480612cb45750828482811515612cb157fe5b04145b1515612cbc57fe5b8091505092915050565b6000808284811515612cd457fe5b0490508091505092915050565b6000806000806000809250600091505b87518260ff161015612d74576000888360ff16815181101515612d1057fe5b9060200190602002015112151515612d2757600080fd5b612d54888360ff16815181101515612d3b57fe5b906020019060200201518461430990919063ffffffff16565b9250612d6d60018360ff1661382b90919063ffffffff16565b9150612cf1565b612d7d83610a49565b9350612d888461434a565b1515612d9357600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343107290338c8b8f8b6000604051602001526040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848103845288818151815260200191508051906020019060200280838360005b83811015612eb9578082015181840152602081019050612e9e565b50505050905001848103835287818151815260200191508051906020019060200280838360005b83811015612efb578082015181840152602081019050612ee0565b50505050905001848103825285818151815260200191508051906020019080838360005b83811015612f3a578082015181840152602081019050612f1f565b50505050905090810190601f168015612f675780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1515612f8b57600080fd5b6102c65a03f11515612f9c57600080fd5b505050604051805190509450600090505b88518160ff16101561305d57888160ff16815181101515612fca57fe5b906020019060200201516005600087600019166000191681526020019081526020016000208260ff166101008110151561300057fe5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061305660018260ff1661382b90919063ffffffff16565b9050612fad565b60008773ffffffffffffffffffffffffffffffffffffffff161415156130d8578660066000876000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050965096945050505050565b60008282111515156130f457fe5b818303905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4725ba1856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b151561319757600080fd5b6102c65a03f115156131a857600080fd5b5050506131b584836131d0565b60008111156131ca576131c98484836133f3565b5b50505050565b60006132a46001600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663caef5dec866000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561327857600080fd5b6102c65a03f1151561328957600080fd5b5050506040518051905060ff1661382b90919063ffffffff16565b60ff168251111515156132b657600080fd5b600090505b81518160ff1610156133ee576000828260ff168151811015156132da57fe5b906020019060200201511415156133d057600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce165894848361334e868660ff1681518110151561333f57fe5b9060200190602002015161380f565b6040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600019166000191681526020018360ff1660ff1681526020018281526020019350505050600060405180830381600087803b15156133bb57600080fd5b6102c65a03f115156133cc57600080fd5b5050505b6133e760018260ff1661382b90919063ffffffff16565b90506132bb565b505050565b60008060006134ca6001600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663caef5dec896000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b151561349e57600080fd5b6102c65a03f115156134af57600080fd5b5050506040518051905060ff1661382b90919063ffffffff16565b60ff168551111515156134dc57600080fd5b60009250600091505b84518260ff1610156137f9576000858360ff1681518110151561350457fe5b906020019060200201511415156137db57613542858360ff1681518110151561352957fe5b90602001906020020151846143aa90919063ffffffff16565b9250600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b073f52b87846135a7898760ff1681518110151561359857fe5b9060200190602002015161380f565b6040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600019166000191681526020018360ff1660ff1681526020018281526020019350505050600060405180830381600087803b151561361457600080fd5b6102c65a03f1151561362557600080fd5b50505060006005600088600019166000191681526020019081526020016000208360ff166101008110151561365657fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561376557600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166392fd1f0187846000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018260ff1660ff16815260200192505050602060405180830381600087803b151561374357600080fd5b6102c65a03f1151561375457600080fd5b5050506040518051905090506137b6565b6005600087600019166000191681526020019081526020016000208260ff166101008110151561379157fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b6137da81868460ff168151811015156137cb57fe5b906020019060200201516143c8565b5b6137f260018360ff1661382b90919063ffffffff16565b91506134e5565b828414151561380757600080fd5b505050505050565b6000808290506000811215151561382257fe5b80915050919050565b60008082840190508360ff168160ff161015151561384557fe5b8091505092915050565b600030848484604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140184805190602001908083835b6020831015156138cb57805182526020820191506020810190506020830392506138a6565b6001836020036101000a038019825116818451168082178552505050505050905001838051906020019060200280838360005b838110156139195780820151818401526020810190506138fe565b50505050905001828152602001945050505050604051809103902090509392505050565b6000808210158015613953575082516014830111155b151561395e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8260140184015116905092915050565b60008060008060008060008061399a8c602961393d565b96508673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156139ef575060008773ffffffffffffffffffffffffffffffffffffffff1614155b15156139fa57600080fd5b8673ffffffffffffffffffffffffffffffffffffffff16613a1c8d600061393d565b73ffffffffffffffffffffffffffffffffffffffff16141515613a3e57600080fd5b8b6028815181101515613a4d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004955060009450600093505b8560ff168460ff161015613b1e57613ae78c8560ff16603402603d016120d5565b600190049250613b00838661430990919063ffffffff16565b9450600083131515613b1157600080fd5b8380600101945050613ac6565b613b2785610a49565b9150613b328261434a565b1515613b3d57600080fd5b613b588c6014336c010000000000000000000000000261440c565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e1cda4688d6000604051602001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613c0b578082015181840152602081019050613bf0565b50505050905090810190601f168015613c385780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1515613c5657600080fd5b6102c65a03f11515613c6757600080fd5b505050604051805190509750600090505b8a518160ff161015613d28578a8160ff16815181101515613c9557fe5b90602001906020020151600560008a600019166000191681526020019081526020016000208260ff1661010081101515613ccb57fe5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613d2160018260ff1661382b90919063ffffffff16565b9050613c78565b613d46888b8b613d4186346130e690919063ffffffff16565b6130ff565b87975050505050505050949350505050565b600080600080600280811115613d6a57fe5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309648a9d896000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515613e0b57600080fd5b6102c65a03f11515613e1c57600080fd5b505050604051805190506002811115613e3157fe5b1415801515613e3f57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6112d6889896000604051602001526040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515613f1457600080fd5b6102c65a03f11515613f2557600080fd5b50505060405180519050945060008560010b12156140f95761400f6001600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663caef5dec8b6000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1515613fe357600080fd5b6102c65a03f11515613ff457600080fd5b5050506040518051905060ff1661382b90919063ffffffff16565b9350600092505b8360ff168360ff1610801561404d57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8560010b145b156140f8578673ffffffffffffffffffffffffffffffffffffffff16600560008a600019166000191681526020019081526020016000208460ff166101008110151561409557fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156140da578260ff1694505b6140f160018460ff1661382b90919063ffffffff16565b9250614016565b5b60008560010b1215151561410c57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b073f52b89876141558a61380f565b6000036040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600019166000191681526020018360ff1660ff1681526020018281526020019350505050600060405180830381600087803b15156141c557600080fd5b6102c65a03f115156141d657600080fd5b50505060066000896000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915060008273ffffffffffffffffffffffffffffffffffffffff1614156142f557600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a12cad70896000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15156142d757600080fd5b6102c65a03f115156142e857600080fd5b5050506040518051905091505b6142ff82876143c8565b5050505050505050565b6000808284019050600083121580156143225750838112155b80614338575060008312801561433757508381125b5b151561434057fe5b8091505092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050509050919050565b60008082840190508381101515156143be57fe5b8091505092915050565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561440857600080fd5b5050565b60008210158015614421575082516014830111155b151561442c57600080fd5b816014018301517fffffffffffffffffffffffff0000000000000000000000000000000000000000811690506c01000000000000000000000000820481179050808360140185015250505050565b6020604051908101604052806000815250905600a165627a7a72305820b7b7de135c9eef2f859422958047d56a4552bfdcdc9c55e27c6ec758d24886ff0029000000000000000000000000db600fda54568a35b78565b5257125bebc51eb27000000000000000000000000fcb4393e7faef06fab01c00d67c1895545aff3b8",
  "constructorArguments": "000000000000000000000000db600fda54568a35b78565b5257125bebc51eb27000000000000000000000000fcb4393e7faef06fab01c00d67c1895545aff3b8"
}