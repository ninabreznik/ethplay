{
  "address": "0x94c7300b007126a467ed144c7926a503ffa4e6c1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HappyToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-20\n*/\n\npragma solidity ^0.4.24;\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n  function totalSupply() public constant returns (uint);\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\n  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n  function transfer(address to, uint tokens) public returns (bool success);\n  function approve(address spender, uint tokens) public returns (bool success);\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n  event Transfer(address indexed from, address indexed to, uint tokens);\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n  function safeAdd(uint a, uint b) public pure returns (uint c) {\n    c = a + b;\n    require(c >= a, \"This addition will cause overflow!\");\n  }\n\n  function safeSub(uint a, uint b) public pure returns (uint c) {\n    require(b <= a, \"This substraction will cause unsigned integer underflow!\");\n    c = a - b;\n  }\n\n  function safeMul(uint a, uint b) public pure returns (uint c) {\n    c = a * b;\n    require(a == 0 || c / a == b, \"This multiplication will cause overflow!\");\n  }\n  \n  function safeDiv(uint a, uint b) public pure returns (uint c) {\n    require(b > 0, \"Negative divisor or division by zero!\");\n    c = a / b;\n  }\n}\n\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n  address public owner;\n  address public newOwner;\n\n  event OwnershipTransferred(address indexed _from, address indexed _to);\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner {\n    require(msg.sender == owner, \"Sender is not the owner!\");\n    _;\n  }\n\n  function transferOwnership(address _newOwner) public onlyOwner {\n    newOwner = _newOwner;\n  }\n  \n  function acceptOwnership() public {\n    require(msg.sender == newOwner, \"Sender is not the new owner!\");\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n    newOwner = address(0);\n  }\n}\n\n\n\n// ----------------------------------------------------------------------------\n// 'HAPPY' token contract\n//\n// Deployed to : HappyTeamWallet\n// Symbol      : HPT\n// Name        : Happy Token\n// Total supply: 1000000000\n// Decimals    : 18\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n  function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\n// token transfers\n// ----------------------------------------------------------------------------\ncontract HappyToken is ERC20Interface, Owned, SafeMath {\n  address public happyTeamWallet;\n  string public symbol;\n  string public  name;\n  uint8 public decimals;\n  uint public _totalSupply;\n\n  mapping(address => uint) balances;\n  mapping(address => mapping(address => uint)) allowed;\n\n  // ------------------------------------------------------------------------\n  // Constructor\n  // ------------------------------------------------------------------------\n  constructor() public {\n    symbol = \"HPT\";\n    name = \"Happy Token\";\n    decimals = 18;\n    _totalSupply = 1000000000000000000000000000;\n    balances[msg.sender] = _totalSupply;\n    emit Transfer(address(0), happyTeamWallet, _totalSupply);\n  }\n\n\n  // ------------------------------------------------------------------------\n  // Total supply\n  // ------------------------------------------------------------------------\n  function totalSupply() public view returns (uint) {\n    return _totalSupply - balances[address(0)];\n  }\n\n\n  // ------------------------------------------------------------------------\n  // Get the token balance for account tokenOwner\n  // ------------------------------------------------------------------------\n  function balanceOf(address tokenOwner) public view returns (uint balance) {\n    return balances[tokenOwner];\n  }\n\n\n  // ------------------------------------------------------------------------\n  // Transfer the balance from token owner's account to to account\n  // - Owner's account must have sufficient balance to transfer\n  // - 0 value transfers are allowed\n  // ------------------------------------------------------------------------\n  function transfer(address to, uint tokens) public returns (bool success) {\n    balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n    balances[to] = safeAdd(balances[to], tokens);\n    emit Transfer(msg.sender, to, tokens);\n    return true;\n  }\n\n\n  // ------------------------------------------------------------------------\n  // Token owner can approve for spender to transferFrom(...) tokens\n  // from the token owner's account\n  //\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n  // recommends that there are no checks for the approval double-spend attack\n  // as this should be implemented in user interfaces \n  // ------------------------------------------------------------------------\n  function approve(address spender, uint tokens) public returns (bool success) {\n    allowed[msg.sender][spender] = tokens;\n    emit Approval(msg.sender, spender, tokens);\n    return true;\n  }\n\n\n  // ------------------------------------------------------------------------\n  // Transfer tokens from the from account to the to account\n  // \n  // The calling account must already have sufficient tokens approve(...)-d\n  // for spending from the from account and\n  // - From account must have sufficient balance to transfer\n  // - Spender must have sufficient allowance to transfer\n  // - 0 value transfers are allowed\n  // ------------------------------------------------------------------------\n  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n    balances[from] = safeSub(balances[from], tokens);\n    allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n    balances[to] = safeAdd(balances[to], tokens);\n    emit Transfer(from, to, tokens);\n    return true;\n  }\n\n\n  // ------------------------------------------------------------------------\n  // Returns the amount of tokens approved by the owner that can be\n  // transferred to the spender's account\n  // ------------------------------------------------------------------------\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n    return allowed[tokenOwner][spender];\n  }\n\n\n  // ------------------------------------------------------------------------\n  // Token owner can approve for spender to transferFrom(...) tokens\n  // from the token owner's account. The spender contract function\n  // receiveApproval(...) is then executed\n  // ------------------------------------------------------------------------\n  function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n    allowed[msg.sender][spender] = tokens;\n    emit Approval(msg.sender, spender, tokens);\n    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n    return true;\n  }\n\n\n  // ------------------------------------------------------------------------\n  // Don't accept ETH\n  // ------------------------------------------------------------------------\n  function () public payable {\n    revert();\n  }\n\n\n  // ------------------------------------------------------------------------\n  // Owner can transfer out any accidentally sent ERC20 tokens\n  // ------------------------------------------------------------------------\n  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n    return ERC20Interface(tokenAddress).transfer(owner, tokens);\n  }\n}",
  "bytecode": "60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600381526020017f4850540000000000000000000000000000000000000000000000000000000000815250600390805190602001906200009f929190620001f3565b506040805190810160405280600b81526020017f486170707920546f6b656e00000000000000000000000000000000000000000081525060049080519060200190620000ed929190620001f3565b506012600560006101000a81548160ff021916908360ff1602179055506b033b2e3c9fd0803ce8000000600681905550600654600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006546040518082815260200191505060405180910390a3620002a2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023657805160ff191683800117855562000267565b8280016001018555821562000267579182015b828111156200026657825182559160200191906001019062000249565b5b5090506200027691906200027a565b5090565b6200029f91905b808211156200029b57600081600090555060010162000281565b5090565b90565b611a8e80620002b26000396000f30060806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610122578063095ea7b3146101b257806318160ddd1461021757806323b872dd14610242578063313ce567146102c75780633eaaf86b146102f857806370a082311461032357806379ba50971461037a5780638da5cb5b1461039157806395d89b41146103e857806399137c3114610478578063a293d1e8146104cf578063a9059cbb1461051a578063b5931f7c1461057f578063cae9ca51146105ca578063d05c78da14610675578063d4ee1d90146106c0578063dc39d06d14610717578063dd62ed3e1461077c578063e6cb9013146107f3578063f2fde38b1461083e575b600080fd5b34801561012e57600080fd5b50610137610881565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017757808201518184015260208101905061015c565b50505050905090810190601f1680156101a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101be57600080fd5b506101fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061091f565b604051808215151515815260200191505060405180910390f35b34801561022357600080fd5b5061022c610a11565b6040518082815260200191505060405180910390f35b34801561024e57600080fd5b506102ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a5c565b604051808215151515815260200191505060405180910390f35b3480156102d357600080fd5b506102dc610cec565b604051808260ff1660ff16815260200191505060405180910390f35b34801561030457600080fd5b5061030d610cff565b6040518082815260200191505060405180910390f35b34801561032f57600080fd5b50610364600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d05565b6040518082815260200191505060405180910390f35b34801561038657600080fd5b5061038f610d4e565b005b34801561039d57600080fd5b506103a6610f56565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103f457600080fd5b506103fd610f7b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561043d578082015181840152602081019050610422565b50505050905090810190601f16801561046a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561048457600080fd5b5061048d611019565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104db57600080fd5b50610504600480360381019080803590602001909291908035906020019092919050505061103f565b6040518082815260200191505060405180910390f35b34801561052657600080fd5b50610565600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110ea565b604051808215151515815260200191505060405180910390f35b34801561058b57600080fd5b506105b46004803603810190808035906020019092919080359060200190929190505050611273565b6040518082815260200191505060405180910390f35b3480156105d657600080fd5b5061065b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611326565b604051808215151515815260200191505060405180910390f35b34801561068157600080fd5b506106aa6004803603810190808035906020019092919080359060200190929190505050611575565b6040518082815260200191505060405180910390f35b3480156106cc57600080fd5b506106d5611635565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561072357600080fd5b50610762600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061165b565b604051808215151515815260200191505060405180910390f35b34801561078857600080fd5b506107dd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611828565b6040518082815260200191505060405180910390f35b3480156107ff57600080fd5b5061082860048036038101908080359060200190929190803590602001909291905050506118af565b6040518082815260200191505060405180910390f35b34801561084a57600080fd5b5061087f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061195a565b005b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109175780601f106108ec57610100808354040283529160200191610917565b820191906000526020600020905b8154815290600101906020018083116108fa57829003601f168201915b505050505081565b600081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600760008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460065403905090565b6000610aa7600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361103f565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b70600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361103f565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c39600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836118af565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600560009054906101000a900460ff1681565b60065481565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f53656e646572206973206e6f7420746865206e6577206f776e6572210000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110115780601f10610fe657610100808354040283529160200191611011565b820191906000526020600020905b815481529060010190602001808311610ff457829003601f168201915b505050505081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008282111515156110df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001807f5468697320737562737472616374696f6e2077696c6c20636175736520756e7381526020017f69676e656420696e746567657220756e646572666c6f7721000000000000000081525060400191505060405180910390fd5b818303905092915050565b6000611135600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361103f565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111c1600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836118af565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008082111515611312576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f4e656761746976652064697669736f72206f72206469766973696f6e2062792081526020017f7a65726f2100000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b818381151561131d57fe5b04905092915050565b600082600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156115035780820151818401526020810190506114e8565b50505050905090810190601f1680156115305780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561155257600080fd5b505af1158015611566573d6000803e3d6000fd5b50505050600190509392505050565b600081830290506000831480611595575081838281151561159257fe5b04145b151561162f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f54686973206d756c7469706c69636174696f6e2077696c6c206361757365206f81526020017f766572666c6f772100000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611721576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f53656e646572206973206e6f7420746865206f776e657221000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156117e557600080fd5b505af11580156117f9573d6000803e3d6000fd5b505050506040513d602081101561180f57600080fd5b8101908080519060200190929190505050905092915050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008183019050828110151515611954576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f54686973206164646974696f6e2077696c6c206361757365206f766572666c6f81526020017f772100000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a1e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f53656e646572206973206e6f7420746865206f776e657221000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820e479b84dc67e7664cd821f9a618b5551a4dbdf697b0365263f4c265c65e42cd50029"
}