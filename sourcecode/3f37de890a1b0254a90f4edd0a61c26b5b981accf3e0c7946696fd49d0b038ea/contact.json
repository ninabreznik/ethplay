{
  "address": "0x8c5344637d2b14d1c2b340fe0a118580738198fb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Seeflast",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-25\n*/\n\npragma solidity ^0.4.25;\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n/**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {if (a == 0) {return 0;}\n    uint256 c = a * b;require(c / a == b);return c;}\n/**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {require(b > 0); uint256 c = a / b;\n    // assert(a == b * c + a % b); \nreturn c;}\n/**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {require(b <= a);uint256 c = a - b;return c;}\n/**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {uint256 c = a + b;require(c >= a);\n  return c;}\n/**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {require(b != 0);return a % b;}}\ncontract Owned {\n    address public owner;\n    address public newOwner;\n    modifier onlyOwner {require(msg.sender == owner);_;}\n    function transferOwnership(address _newOwner) public onlyOwner {newOwner = _newOwner;}\n    function acceptOwnership() public {require(msg.sender == newOwner);owner = newOwner;}}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\nfunction totalSupply() external view returns (uint256);\nfunction balanceOf(address who) external view returns (uint256);\nfunction allowance(address owner, address spender)\nexternal view returns (uint256);\nfunction transfer(address to, uint256 value) external returns (bool);\nfunction approve(address spender, uint256 value)\nexternal returns (bool);\nfunction transferFrom(address from, address to, uint256 value)\nexternal returns (bool);\nevent Transfer(address indexed from,address indexed to,uint256 value);\nevent Approval(address indexed owner,address indexed spender,uint256 value);}\ncontract Seeflast is IERC20, Owned {\n    using SafeMath for uint256;\n    constructor() public {\n        owner = 0x947e40854A000a43Dad75E63caDA3E318f13277d;\n        contractAddress = this;\n        _balances[0x74dF2809598C8AfCf655d305e5D10C8Ab824F0Eb] = 260000000 * 10 ** decimals;\n        emit Transfer(contractAddress, 0x74dF2809598C8AfCf655d305e5D10C8Ab824F0Eb, 260000000 * 10 ** decimals);\n        _balances[0x8ec5BD55f5CC10743E598194A769712043cCDD38] = 400000000 * 10 ** decimals;\n        emit Transfer(contractAddress, 0x8ec5BD55f5CC10743E598194A769712043cCDD38, 400000000 * 10 ** decimals);\n        _balances[0x9d357507556a9FeD2115aAb6CFc6527968B1F9c9] = 50000000 * 10 ** decimals;\n        emit Transfer(contractAddress, 0x9d357507556a9FeD2115aAb6CFc6527968B1F9c9, 50000000 * 10 ** decimals);\n        _balances[0x369760682f292584921f45F498cC525127Aa12a5] = 50000000 * 10 ** decimals;\n        emit Transfer(contractAddress, 0x369760682f292584921f45F498cC525127Aa12a5, 50000000 * 10 ** decimals);\n        _balances[0x98046c6bee217B9A0d13507a47423F891E8Ef22A] = 50000000 * 10 ** decimals;\n        emit Transfer(contractAddress, 0x98046c6bee217B9A0d13507a47423F891E8Ef22A, 50000000 * 10 ** decimals);\n        _balances[0xf0b8dBcaF8A89A49Fa2adf25b4CCC9234258A8E6] = 50000000 * 10 ** decimals;\n        emit Transfer(contractAddress, 0xf0b8dBcaF8A89A49Fa2adf25b4CCC9234258A8E6, 50000000 * 10 ** decimals);\n       _balances[0x8877e7974d6D708c403cB9C9A65873a3e57382E4] = 60000000 * 10 ** decimals;\n        emit Transfer(contractAddress, 0x8877e7974d6D708c403cB9C9A65873a3e57382E4, 60000000 * 10 ** decimals);\n       _balances[0x0452453D9e32B80F024bf9D6Bb35A76A785ba6a2] = 20000000 * 10 ** decimals;\n        emit Transfer(contractAddress, 0x0452453D9e32B80F024bf9D6Bb35A76A785ba6a2, 20000000 * 10 ** decimals);\n       _balances[0x1DBe051fDE7fBEE760A6ED7dfFc0fEC6c469dB77] = 1020000000 * 10 ** decimals;\n        emit Transfer(contractAddress, 0x1DBe051fDE7fBEE760A6ED7dfFc0fEC6c469dB77, 1020000000 * 10 ** decimals); \n       _balances[contractAddress] = 40000000 * 10 ** decimals;\n        emit Transfer(contractAddress, contractAddress, 40000000 * 10 ** decimals);}\n\n    event Error(string err);\n    event Mint(uint mintAmount, uint newSupply);\n    string public constant name = \"Seeflast\"; \n    string public constant symbol = \"SFT\"; \n    uint256 public constant decimals = 8;\n    uint256 public constant supply = 2000000000 * 10 ** decimals;\n    address public contractAddress;\n    mapping (address => bool) public claimed;\n    mapping(address => uint256) _balances;\n mapping(address => mapping (address => uint256)) public _allowed;\n function totalSupply() public constant returns (uint) {\n        return supply;}\n function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return _balances[tokenOwner];}\n function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return _allowed[tokenOwner][spender];}\n function transfer(address to, uint value) public returns (bool success) {\n        require(_balances[msg.sender] >= value);\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(msg.sender, to, value);\n        return true;}\n  function approve(address spender, uint value) public returns (bool success) {\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;}\n  function transferFrom(address from, address to, uint value) public returns (bool success) {\n        require(value <= balanceOf(from));\n        require(value <= allowance(from, to));\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        _allowed[from][to] = _allowed[from][to].sub(value);\n        emit Transfer(from, to, value);\n        return true;}\n    function () public payable {\n        if (msg.value == 0 && claimed[msg.sender] == false) {\n            require(_balances[contractAddress] >= 500 * 10 ** decimals);\n            _balances[contractAddress] -= 500 * 10 ** decimals;\n            _balances[msg.sender] += 500 * 10 ** decimals;\n            claimed[msg.sender] = true;\n            emit Transfer(contractAddress, msg.sender, 500 * 10 ** decimals);} \n        else if (msg.value == 0.01 ether) {\n            require(_balances[contractAddress] >= 400 * 10 ** decimals);\n            _balances[contractAddress] -= 400 * 10 ** decimals;\n            _balances[msg.sender] += 400 * 10 ** decimals;\n            emit Transfer(contractAddress, msg.sender, 400 * 10 ** decimals);} \n        else if (msg.value == 0.1 ether) {\n            require(_balances[contractAddress] >= 4200 * 10 ** decimals);\n            _balances[contractAddress] -= 4200 * 10 ** decimals;\n            _balances[msg.sender] += 4200 * 10 ** decimals;\n            emit Transfer(contractAddress, msg.sender, 4200 * 10 ** decimals);} \n        else if (msg.value == 1 ether) {\n            require(_balances[contractAddress] >= 45000 * 10 ** decimals);\n            _balances[contractAddress] -= 45000 * 10 ** decimals;\n            _balances[msg.sender] += 45000 * 10 ** decimals;\n            emit Transfer(contractAddress, msg.sender, 45000 * 10 ** decimals);} \n        else {revert();}}\n    function collectETH() public onlyOwner {owner.transfer(contractAddress.balance);}\n    \n}",
  "bytecode": "608060405234801561001057600080fd5b5073947e40854a000a43dad75e63cada3e318f13277d6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555030600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506008600a0a630f7f490002600460007374df2809598c8afcf655d305e5d10c8ab824f0eb73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507374df2809598c8afcf655d305e5d10c8ab824f0eb73ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008600a0a630f7f4900026040518082815260200191505060405180910390a36008600a0a6317d784000260046000738ec5bd55f5cc10743e598194a769712043ccdd3873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550738ec5bd55f5cc10743e598194a769712043ccdd3873ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008600a0a6317d78400026040518082815260200191505060405180910390a36008600a0a6302faf0800260046000739d357507556a9fed2115aab6cfc6527968b1f9c973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550739d357507556a9fed2115aab6cfc6527968b1f9c973ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008600a0a6302faf080026040518082815260200191505060405180910390a36008600a0a6302faf080026004600073369760682f292584921f45f498cc525127aa12a573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555073369760682f292584921f45f498cc525127aa12a573ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008600a0a6302faf080026040518082815260200191505060405180910390a36008600a0a6302faf08002600460007398046c6bee217b9a0d13507a47423f891e8ef22a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507398046c6bee217b9a0d13507a47423f891e8ef22a73ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008600a0a6302faf080026040518082815260200191505060405180910390a36008600a0a6302faf080026004600073f0b8dbcaf8a89a49fa2adf25b4ccc9234258a8e673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555073f0b8dbcaf8a89a49fa2adf25b4ccc9234258a8e673ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008600a0a6302faf080026040518082815260200191505060405180910390a36008600a0a63039387000260046000738877e7974d6d708c403cb9c9a65873a3e57382e473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550738877e7974d6d708c403cb9c9a65873a3e57382e473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008600a0a6303938700026040518082815260200191505060405180910390a36008600a0a6301312d000260046000730452453d9e32b80f024bf9d6bb35a76a785ba6a273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550730452453d9e32b80f024bf9d6bb35a76a785ba6a273ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008600a0a6301312d00026040518082815260200191505060405180910390a36008600a0a633ccbf7000260046000731dbe051fde7fbee760a6ed7dffc0fec6c469db7773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550731dbe051fde7fbee760a6ed7dffc0fec6c469db7773ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008600a0a633ccbf700026040518082815260200191505060405180910390a36008600a0a6302625a000260046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008600a0a6302625a00026040518082815260200191505060405180910390a36119f580610b176000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063047fc9aa1461095257806306fdde031461097d578063095ea7b314610a0d57806318160ddd14610a7257806323b872dd14610a9d578063313ce56714610b2257806370a0823114610b4d57806379ba509714610ba45780638da5cb5b14610bbb57806395d89b4114610c12578063a9059cbb14610ca2578063ba0fb86114610d07578063c884ef8314610d7e578063d4ee1d9014610dd9578063dd62ed3e14610e30578063f2fde38b14610ea7578063f6b4dfb414610eea578063fdff9b8114610f41575b60003414801561015c575060001515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b15610391576008600a0a6101f40260046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156101d957600080fd5b6008600a0a6101f40260046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506008600a0a6101f402600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008600a0a6101f4026040518082815260200191505060405180910390a3610950565b662386f26fc10000341415610578576008600a0a6101900260046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561041857600080fd5b6008600a0a6101900260046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506008600a0a61019002600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008600a0a610190026040518082815260200191505060405180910390a361094f565b67016345785d8a0000341415610760576008600a0a6110680260046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561060057600080fd5b6008600a0a6110680260046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506008600a0a61106802600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008600a0a611068026040518082815260200191505060405180910390a361094e565b670de0b6b3a7640000341415610948576008600a0a61afc80260046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156107e857600080fd5b6008600a0a61afc80260046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506008600a0a61afc802600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008600a0a61afc8026040518082815260200191505060405180910390a361094d565b600080fd5b5b5b5b005b34801561095e57600080fd5b50610967610f58565b6040518082815260200191505060405180910390f35b34801561098957600080fd5b50610992610f66565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109d25780820151818401526020810190506109b7565b50505050905090810190601f1680156109ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a1957600080fd5b50610a58600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f9f565b604051808215151515815260200191505060405180910390f35b348015610a7e57600080fd5b50610a87611091565b6040518082815260200191505060405180910390f35b348015610aa957600080fd5b50610b08600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110a3565b604051808215151515815260200191505060405180910390f35b348015610b2e57600080fd5b50610b3761137d565b6040518082815260200191505060405180910390f35b348015610b5957600080fd5b50610b8e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611382565b6040518082815260200191505060405180910390f35b348015610bb057600080fd5b50610bb96113cb565b005b348015610bc757600080fd5b50610bd061148b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c1e57600080fd5b50610c276114b0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c67578082015181840152602081019050610c4c565b50505050905090810190601f168015610c945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610cae57600080fd5b50610ced600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114e9565b604051808215151515815260200191505060405180910390f35b348015610d1357600080fd5b50610d68600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116d2565b6040518082815260200191505060405180910390f35b348015610d8a57600080fd5b50610dbf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116f7565b604051808215151515815260200191505060405180910390f35b348015610de557600080fd5b50610dee611717565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e3c57600080fd5b50610e91600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061173d565b6040518082815260200191505060405180910390f35b348015610eb357600080fd5b50610ee8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117c4565b005b348015610ef657600080fd5b50610eff611863565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f4d57600080fd5b50610f56611889565b005b6008600a0a63773594000281565b6040805190810160405280600881526020017f536565666c61737400000000000000000000000000000000000000000000000081525081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60006008600a0a637735940002905090565b60006110ae84611382565b82111515156110bc57600080fd5b6110c6848461173d565b82111515156110d457600080fd5b61112682600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461198790919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111bb82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119a890919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061128d82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461198790919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600881565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561142757600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f534654000000000000000000000000000000000000000000000000000000000081525081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561153957600080fd5b61158b82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461198790919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061162082600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119a890919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6005602052816000526040600020602052806000526040600020600091509150505481565b60036020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561181f57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118e457600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611984573d6000803e3d6000fd5b50565b60008083831115151561199957600080fd5b82840390508091505092915050565b60008082840190508381101515156119bf57600080fd5b80915050929150505600a165627a7a7230582035b417311de99cc6bdfcbe8cd2ffbfdf1b89b360e7fb3a29353aed9ef9dff4240029"
}