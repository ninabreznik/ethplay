{
  "address": "0x4ff159ba8e573cee12f6c71f5a36a4494985218d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-19\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract owned {\n    address public owner;\n\n    function owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        if (msg.sender != owner) throw;\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n}\n\n\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n\ncontract token {\n    /* Public variables of the token */\n    string public standard = \"Viacash Token\";\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function token(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol\n        ) {\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n        totalSupply = initialSupply;                        // Update total supply\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\n    }\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) {\n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value)\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /* Approve and then communicate the approved contract in a single tx */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /* A contract attempts _ to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n        balanceOf[_from] -= _value;                          // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /* This unnamed function is called whenever someone tries to send ether to it */\n    function () {\n        throw;     // Prevents accidental sending of ether\n    }\n}\n\ncontract ViacashToken is owned, token {\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    mapping(address=>bool) public frozenAccount;\n\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    uint256 public constant initialSupply = 12000000000 * 10**18;\n    uint8 public constant decimalUnits = 18;\n    string public tokenName = \"ViacashToken\";\n    string public tokenSymbol = \"Viacash\";\n    function ViacashToken() token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\n     /* Send coins */\n    function transfer(address _to, uint256 _value) {\n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n        if (frozenAccount[msg.sender]) throw;                // Check if frozen\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (frozenAccount[_from]) throw;                        // Check if frozen\n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n        balanceOf[_from] -= _value;                          // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n    }\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable {\n        uint amount = msg.value / buyPrice;                // calculates the amount\n        if (balanceOf[this] < amount) throw;               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                   // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                         // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);                // execute an event reflecting the change\n    }\n\n    function sell(uint256 amount) {\n        if (balanceOf[msg.sender] < amount ) throw;        // checks if the sender has enough to sell\n        balanceOf[this] += amount;                         // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                   // subtracts the amount from seller's balance\n        if (!msg.sender.send(amount * sellPrice)) {        // sends ether to the seller. It's important\n            throw;                                         // to do this last to avoid recursion attacks\n        } else {\n            Transfer(msg.sender, this, amount);            // executes an event reflecting on the change\n        }\n    }\n}\n\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public{\n    owner = msg.sender;\n  }\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale is Ownable {\n  using SafeMath for uint256;\n\n  // The token being sold\n  token myToken;\n  \n  // address where funds are collected\n  address public wallet;\n  \n  // rate => tokens per ether\n  uint256 public rate = 10000000 ; \n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  constructor(address tokenContractAddress, address _walletAddress) public{\n    wallet = _walletAddress;\n    myToken = token(tokenContractAddress);\n  }\n\n  // fallback function can be used to buy tokens\n  function () payable public{\n    buyTokens(msg.sender);\n  }\n\n  function getBalance() public constant returns(uint256){\n      return myToken.balanceOf(this);\n  }    \n\n  // low level token purchase function\n  function buyTokens(address beneficiary) public payable {\n    require(beneficiary != 0x0);\n    require(msg.value >= 10000000000000000);// min contribution 0.01ETH\n    require(msg.value <= 1000000000000000000);// max contribution 1ETH\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be created\n    uint256 tokens = weiAmount.mul(rate).div(100);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    myToken.transfer(beneficiary, tokens);\n\n    emit TokenPurchase(beneficiary, weiAmount, tokens);\n  }\n\n  // to change rate\n  function updateRate(uint256 new_rate) onlyOwner public{\n    rate = new_rate;\n  }\n\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() onlyOwner public {\n    wallet.transfer(address(this).balance);\n  }\n\n  function transferBackTo(uint256 tokens, address beneficiary) onlyOwner public returns (bool){\n    myToken.transfer(beneficiary, tokens);\n    return true;\n  }\n\n}",
  "bytecode": "60806040526298968060035534801561001757600080fd5b50604051604080610bb68339810180604052810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610a9f806101176000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312065fe0146100af5780632c4e722e146100da5780634042b66f14610105578063521eb2731461013057806369ea1771146101875780638da5cb5b146101b45780639d7352861461020b578063a37be00f14610222578063ec8ac4d814610287578063f2fde38b146102bd575b6100ad33610300565b005b3480156100bb57600080fd5b506100c46104d6565b6040518082815260200191505060405180910390f35b3480156100e657600080fd5b506100ef6105d5565b6040518082815260200191505060405180910390f35b34801561011157600080fd5b5061011a6105db565b6040518082815260200191505060405180910390f35b34801561013c57600080fd5b506101456105e1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019357600080fd5b506101b260048036038101908080359060200190929190505050610607565b005b3480156101c057600080fd5b506101c961066c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021757600080fd5b50610220610691565b005b34801561022e57600080fd5b5061026d60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061076e565b604051808215151515815260200191505060405180910390f35b6102bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610300565b005b3480156102c957600080fd5b506102fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108b2565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff161415151561032957600080fd5b662386f26fc10000341015151561033f57600080fd5b670de0b6b3a7640000341115151561035657600080fd5b349150610381606461037360035485610a0790919063ffffffff16565b610a3a90919063ffffffff16565b905061039882600454610a5590919063ffffffff16565b600481905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561046357600080fd5b505af1158015610477573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f8383604051808381526020018281526020019250505060405180910390a2505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561059557600080fd5b505af11580156105a9573d6000803e3d6000fd5b505050506040513d60208110156105bf57600080fd5b8101908080519060200190929190505050905090565b60035481565b60045481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561066257600080fd5b8060038190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106ec57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561076b573d6000803e3d6000fd5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107cb57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561089057600080fd5b505af11580156108a4573d6000803e3d6000fd5b505050506001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561090d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561094957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008082840290506000841480610a285750828482811515610a2557fe5b04145b1515610a3057fe5b8091505092915050565b6000808284811515610a4857fe5b0490508091505092915050565b6000808284019050838110151515610a6957fe5b80915050929150505600a165627a7a7230582053a493af2d5c372b316bd665cd8d02a7e7068912577c83df6dc19662f48d23590029000000000000000000000000dd5c87aba6df58e1474ea1ffb64c36f3f7175a2f000000000000000000000000f51f73b4a686502dcdb267f99960905f66ba7722",
  "constructorArguments": "000000000000000000000000dd5c87aba6df58e1474ea1ffb64c36f3f7175a2f000000000000000000000000f51f73b4a686502dcdb267f99960905f66ba7722"
}