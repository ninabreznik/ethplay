{
  "address": "0x90c93e7fe79fd0c9d1a437ac715ff8752e3eac88",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "QurozToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-19\n*/\n\npragma solidity ^0.4.24;\n// This is based on https://github.com/OpenZeppelin/openzeppelin-solidity.\n// We announced each .sol file and omitted the verbose comments.\n// Gas limit : 5,000,000\n\nlibrary SafeMath {                             //SafeMath.sol\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) { return 0; }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract QurozToken {\n  using SafeMath for uint256;\n  address public owner;                                              //Ownable.sol\n  string public name = \"Qfora\";                                      //DetailedERC20.sol\n  string public symbol = \"Quroz\";                                    //DetailedERC20.sol\n  string public version = \"Quroz v1.1\";              // new\n  uint256 public decimals = 18;                                        //DetailedERC20.sol  \n  uint256 totalSupply_ = 12e8 * (10**uint256(decimals));             //BasicToken.sol\n  uint256 public cap = totalSupply_;                                 //CappedToken.sol\n  bool public paused = false;                                         //Pausable.sol\n  bool public mintingFinished = true;                                //MintableToken.sol\n  mapping(address => uint256) balances;                              //BasicToken.sol\n  mapping(address => mapping (address => uint256)) internal allowed; //StandardToken.sol\n  mapping(address => bool) internal locked;          // new\n  event Burn(address indexed burner, uint256 value);                               //BurnableToken.sol\n  event Approval(address indexed owner, address indexed spender,uint256 value);    //ERC20.sol\n  event Transfer(address indexed from, address indexed to, uint256 value);         //ERC20Basic.sol\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); //Ownable.sol\n  event Pause();                                                                   //Pausable.sol\n  event Unpause();                                                                 //Pausable.sol\n  event Mint(address indexed to, uint256 amount, string reason);                   //MintableToken.sol, \"reason\" added\n  event MintFinished();                                                            //MintableToken.sol\n  event MintStarted(string reason);                      // new\n  event Lock(address indexed LockedAddress);             // new. lock each address\n  event Unlock(address indexed LockedAddress);           // new\n  event CapChange(uint256 Cap, string reason);           // new\n\n  constructor() public { \n    owner = msg.sender;\n    balances[owner] = totalSupply_ ;\n  }\n\n  modifier onlyOwner()         {require(msg.sender == owner); _;}  //Ownable.sol\n  modifier whenPaused()        {require(paused); _; }              //Pausable.sol\n  modifier whenNotPaused()     {require(!paused); _;}              //Pausable.sol\n  modifier canMint()           {require(!mintingFinished); _;}     //MintableToken.sol\n  modifier cannotMint()        {require(mintingFinished); _;}      // new\n  modifier hasMintPermission() {require(msg.sender == owner);  _;} //MintableToken.sol\n\n  function balanceOf(address _owner) public view returns (uint256) {  //BasicToken.sol\n    return balances[_owner];\n  }\n\n  function totalSupply() public view returns (uint256) {  //BasicToken.sol\n    return totalSupply_;\n  }\n  \n  function burn(uint256 _value) public { //BurnableToken.sol\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {  //BurnableToken.sol\n    require(_value <= balances[_who]);\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n  \n  function burnFrom(address _from, uint256 _value) public {  //StandardBurnableToken.sol\n    require(_value <= allowed[_from][msg.sender]);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _burn(_from, _value);\n  }\n  \n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n      //StandardToken.sol, PausableToken.sol\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) { //StandardToken.sol\n    return allowed[_owner][_spender];\n  }\n\n  function increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns(bool){\n      //StandardToken.sol, PausableToken.sol\n    allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns(bool) {\n      //StandardToken.sol, PausableToken.sol\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) { allowed[msg.sender][_spender] = 0;\n    } else                           { allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);}\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {//BasicToken.sol, PausableToken.sol\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n    require(locked[msg.sender] != true);                                                             // new\n    require(locked[_to] != true);                                                                    // new\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns(bool) {  \n      //StandardToken.sol, PausableToken.sol\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(locked[_from] != true);                                                             // new\n    require(locked[_to] != true);                                                               // new\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function transferOwnership(address _newOwner) public onlyOwner {   //Ownable.sol\n    _transferOwnership(_newOwner);\n  }\n\n  function _transferOwnership(address _newOwner) internal {   //Ownable.sol\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n\n  function pause() onlyOwner whenNotPaused public {   //Pausable.sol, stop whole transfer\n    paused = true;\n    emit Pause();\n  }\n\n  function unpause() onlyOwner whenPaused public {   //Pausable.sol\n    paused = false;\n    emit Unpause();\n  }\n\n  function mint(address _to, uint256 _amount, string _reason) hasMintPermission canMint public returns (bool)  { \n      //MintableToken.sol, CappedToken.sol\n    require(totalSupply_.add(_amount) <= cap);\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount, _reason);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  function finishMinting() onlyOwner canMint public returns (bool) { //MintableToken.sol\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n\n  function destroyAndSend(address _recipient) onlyOwner public {   //Destructible.sol\n    selfdestruct(_recipient);\n  }\n  \n/* new functions */\n  function startMinting(string reason) onlyOwner cannotMint public returns (bool) {\n    mintingFinished = false;\n    emit MintStarted(reason);\n    return true;\n  }\n\n  function burnOf(address _who, uint256 _value) public onlyOwner { // burn by owner\n    _burn(_who, _value);\n  }\n\n  function setCap(uint256 _cap, string _reason) public onlyOwner {\n    _setCap(_cap, _reason);\n  }\n\n  function _setCap(uint256 _cap, string _reason) internal onlyOwner { // change the limit of cap\n    cap = _cap;\n    emit CapChange(_cap, _reason);\n  }\n  \n  function multiTransfer(address[] _to, uint256[] _amount) whenNotPaused public returns (bool) {\n    require(locked[msg.sender] != true);\n    require(_to.length == _amount.length);\n    uint256 i;\n    uint256 amountSum = 0;\n    for (i=0; i < _amount.length; i++){\n      require(_amount[i] > 0);\n      require(_to[i] != address(0));\n      require(locked[_to[i]] != true);                                                            \n      amountSum = amountSum.add(_amount[i]);\n    }\n    require(amountSum <= balances[msg.sender]);\n    for (i=0; i < _to.length; i++){\n      balances[_to[i]] = balances[_to[i]].add(_amount[i]);\n      emit Transfer(msg.sender, _to[i], _amount[i]);\n    }\n    balances[msg.sender] = balances[msg.sender].sub(amountSum);\n    return true;\n  }\n  \n  function multiMint(address[] _to, uint256[] _amount, string _reason) hasMintPermission canMint public returns (bool) {\n    require(_to.length == _amount.length);\n    uint16 i;              // less than 65536 at one time\n    uint256 amountSum = 0;\n    for (i=0; i < _amount.length; i++){\n      require(_amount[i] > 0);\n      require(_to[i] != address(0));\n      amountSum = amountSum.add(_amount[i]);\n    }\n    require(totalSupply_.add(amountSum) <= cap);\n    for (i=0; i < _to.length; i++){\n      mint(_to[i], _amount[i], _reason);\n    }\n    return true;\n  }\n  \n  function lock(address _lockAddress) public onlyOwner returns (bool) {  // stop _lockAddress's transfer\n    require(_lockAddress != address(0));\n    require(_lockAddress != owner);\n    require(locked[_lockAddress] != true);\n    locked[_lockAddress] = true;\n    emit Lock(_lockAddress);\n    return true;\n  }\n\n  function unlock(address _lockAddress) public onlyOwner returns (bool) {\n    require(_lockAddress != address(0));\n    require(_lockAddress != owner);\n    require(locked[_lockAddress] ==  true);\n    locked[_lockAddress] = false;\n    emit Unlock(_lockAddress);\n    return true;\n  }\n\n  function multiLock(address[] _lockAddress) public onlyOwner {\n    for (uint i=0; i < _lockAddress.length; i++){\n      lock(_lockAddress[i]);\n    }\n  }\n\n  function multiUnlock(address[] _lockAddress) public onlyOwner {\n    for (uint i=0; i < _lockAddress.length; i++){\n      unlock(_lockAddress[i]);\n    }\n  }\n  \n  function checkLock(address _address) public view onlyOwner returns (bool) {\n    return locked[_address];\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockAddress\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"multiMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"startMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockAddress\",\"type\":\"address[]\"}],\"name\":\"multiUnlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"setCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnOf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockAddress\",\"type\":\"address[]\"}],\"name\":\"multiLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockAddress\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"MintStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"LockedAddress\",\"type\":\"address\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"LockedAddress\",\"type\":\"address\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Cap\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"CapChange\",\"type\":\"event\"}]",
  "bytecode": "60c0604052600560808190527f51666f726100000000000000000000000000000000000000000000000000000060a09081526200004091600191906200013b565b506040805180820190915260058082527f5175726f7a000000000000000000000000000000000000000000000000000000602090920191825262000087916002916200013b565b5060408051808201909152600a8082527f5175726f7a2076312e31000000000000000000000000000000000000000000006020909201918252620000ce916003916200013b565b5060126004556b03e09de2596099e2b000000060058190556006556007805461ffff19166101001790553480156200010557600080fd5b5060008054600160a060020a0319163317808255600554600160a060020a039190911682526008602052604090912055620001e0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017e57805160ff1916838001178555620001ae565b82800160010185558215620001ae579182015b82811115620001ae57825182559160200191906001019062000191565b50620001bc929150620001c0565b5090565b620001dd91905b80821115620001bc5760008155600101620001c7565b90565b611d1a80620001f06000396000f3006080604052600436106101ab5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146101b057806306fdde03146101d9578063095ea7b31461026357806318160ddd1461028757806318955d96146102ae5780631e89d545146102cf57806323b872dd1461035d5780632f6c493c14610387578063313ce567146103a8578063355274ea146103bd5780633f4ba83a146103d257806342966c68146103e9578063468ae69d1461040157806354fd4d50146104cd5780635c975abb146104e257806366188463146104f757806370a082311461051b57806379cc67901461053c5780637d64bcb4146105605780637f9bf9e4146105755780638456cb59146105ce5780638d14670a146105e35780638da5cb5b1461063857806395d89b4114610669578063a70fc3ba1461067e578063a9059cbb146106dc578063d3f233af14610700578063d3fc986414610724578063d73dd6231461078d578063dd62ed3e146107b1578063f2fde38b146107d8578063f3512ce0146107f9578063f435f5a71461084e578063f5074f411461086f575b600080fd5b3480156101bc57600080fd5b506101c5610890565b604080519115158252519081900360200190f35b3480156101e557600080fd5b506101ee61089e565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610228578181015183820152602001610210565b50505050905090810190601f1680156102555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026f57600080fd5b506101c5600160a060020a036004351660243561092b565b34801561029357600080fd5b5061029c6109a5565b60408051918252519081900360200190f35b3480156102ba57600080fd5b506101c5600160a060020a03600435166109ab565b3480156102db57600080fd5b50604080516020600480358082013583810280860185019096528085526101c595369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506109e29650505050505050565b34801561036957600080fd5b506101c5600160a060020a0360043581169060243516604435610c70565b34801561039357600080fd5b506101c5600160a060020a0360043516610e3e565b3480156103b457600080fd5b5061029c610efe565b3480156103c957600080fd5b5061029c610f04565b3480156103de57600080fd5b506103e7610f0a565b005b3480156103f557600080fd5b506103e7600435610f67565b34801561040d57600080fd5b50604080516020600480358082013583810280860185019096528085526101c595369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610f749650505050505050565b3480156104d957600080fd5b506101ee6110d0565b3480156104ee57600080fd5b506101c561112b565b34801561050357600080fd5b506101c5600160a060020a0360043516602435611134565b34801561052757600080fd5b5061029c600160a060020a036004351661123a565b34801561054857600080fd5b506103e7600160a060020a0360043516602435611255565b34801561056c57600080fd5b506101c56112eb565b34801561058157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101c59436949293602493928401919081908401838280828437509497506113569650505050505050565b3480156105da57600080fd5b506103e761142f565b3480156105ef57600080fd5b50604080516020600480358082013583810280860185019096528085526103e79536959394602494938501929182918501908490808284375094975061148e9650505050505050565b34801561064457600080fd5b5061064d6114dc565b60408051600160a060020a039092168252519081900360200190f35b34801561067557600080fd5b506101ee6114eb565b34801561068a57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526103e79583359536956044949193909101919081908401838280828437509497506115439650505050505050565b3480156106e857600080fd5b506101c5600160a060020a0360043516602435611564565b34801561070c57600080fd5b506103e7600160a060020a0360043516602435611693565b34801561073057600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101c5948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506116b49650505050505050565b34801561079957600080fd5b506101c5600160a060020a036004351660243561184e565b3480156107bd57600080fd5b5061029c600160a060020a03600435811690602435166118fa565b3480156107e457600080fd5b506103e7600160a060020a0360043516611925565b34801561080557600080fd5b50604080516020600480358082013583810280860185019096528085526103e7953695939460249493850192918291850190849080828437509497506119459650505050505050565b34801561085a57600080fd5b506101c5600160a060020a0360043516611993565b34801561087b57600080fd5b506103e7600160a060020a0360043516611a57565b600754610100900460ff1681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109235780601f106108f857610100808354040283529160200191610923565b820191906000526020600020905b81548152906001019060200180831161090657829003601f168201915b505050505081565b60075460009060ff161561093e57600080fd5b336000818152600960209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60055490565b60008054600160a060020a031633146109c357600080fd5b50600160a060020a03166000908152600a602052604090205460ff1690565b6007546000908190819060ff16156109f957600080fd5b336000908152600a602052604090205460ff16151560011415610a1b57600080fd5b8351855114610a2957600080fd5b5060009050805b8351821015610b085760008483815181101515610a4957fe5b6020908102909101015111610a5d57600080fd5b8451600090869084908110610a6e57fe5b60209081029091010151600160a060020a03161415610a8c57600080fd5b600a60008684815181101515610a9e57fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff16151560011415610ad357600080fd5b610afb8483815181101515610ae457fe5b60209081029091010151829063ffffffff611a7a16565b6001909201919050610a30565b33600090815260086020526040902054811115610b2457600080fd5b600091505b8451821015610c3557610b8e8483815181101515610b4357fe5b90602001906020020151600860008886815181101515610b5f57fe5b6020908102909101810151600160a060020a03168252810191909152604001600020549063ffffffff611a7a16565b600860008785815181101515610ba057fe5b6020908102909101810151600160a060020a03168252810191909152604001600020558451859083908110610bd157fe5b90602001906020020151600160a060020a031633600160a060020a0316600080516020611ccf8339815191528685815181101515610c0b57fe5b906020019060200201516040518082815260200191505060405180910390a3600190910190610b29565b33600090815260086020526040902054610c55908263ffffffff611a8d16565b33600090815260086020526040902055506001949350505050565b60075460009060ff1615610c8357600080fd5b600160a060020a0383161515610c9857600080fd5b600160a060020a038416600090815260086020526040902054821115610cbd57600080fd5b600160a060020a0384166000908152600960209081526040808320338452909152902054821115610ced57600080fd5b600160a060020a0384166000908152600a602052604090205460ff16151560011415610d1857600080fd5b600160a060020a0383166000908152600a602052604090205460ff16151560011415610d4357600080fd5b600160a060020a038416600090815260086020526040902054610d6c908363ffffffff611a8d16565b600160a060020a038086166000908152600860205260408082209390935590851681522054610da1908363ffffffff611a7a16565b600160a060020a038085166000908152600860209081526040808320949094559187168152600982528281203382529091522054610de5908363ffffffff611a8d16565b600160a060020a0380861660008181526009602090815260408083203384528252918290209490945580518681529051928716939192600080516020611ccf833981519152929181900390910190a35060019392505050565b60008054600160a060020a03163314610e5657600080fd5b600160a060020a0382161515610e6b57600080fd5b600054600160a060020a0383811691161415610e8657600080fd5b600160a060020a0382166000908152600a602052604090205460ff161515600114610eb057600080fd5b600160a060020a0382166000818152600a6020526040808220805460ff19169055517f0be774851955c26a1d6a32b13b020663a069006b4a3b643ff0b809d3182605729190a2506001919050565b60045481565b60065481565b600054600160a060020a03163314610f2157600080fd5b60075460ff161515610f3257600080fd5b6007805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b610f713382611a9f565b50565b6000805481908190600160a060020a03163314610f9057600080fd5b600754610100900460ff1615610fa557600080fd5b8451865114610fb357600080fd5b5060009050805b84518261ffff161015611044576000858361ffff16815181101515610fdb57fe5b6020908102909101015111610fef57600080fd5b8551600090879061ffff851690811061100457fe5b60209081029091010151600160a060020a0316141561102257600080fd5b611037858361ffff16815181101515610ae457fe5b6001909201919050610fba565b60065460055461105a908363ffffffff611a7a16565b111561106557600080fd5b600091505b85518261ffff1610156110c4576110b8868361ffff1681518110151561108c57fe5b90602001906020020151868461ffff168151811015156110a857fe5b90602001906020020151866116b4565b5060019091019061106a565b50600195945050505050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109235780601f106108f857610100808354040283529160200191610923565b60075460ff1681565b600754600090819060ff161561114957600080fd5b50336000908152600960209081526040808320600160a060020a03871684529091529020548083111561119f57336000908152600960209081526040808320600160a060020a03881684529091528120556111d4565b6111af818463ffffffff611a8d16565b336000908152600960209081526040808320600160a060020a03891684529091529020555b336000818152600960209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526008602052604090205490565b600160a060020a038216600090815260096020908152604080832033845290915290205481111561128557600080fd5b600160a060020a03821660009081526009602090815260408083203384529091529020546112b9908263ffffffff611a8d16565b600160a060020a03831660009081526009602090815260408083203384529091529020556112e78282611a9f565b5050565b60008054600160a060020a0316331461130357600080fd5b600754610100900460ff161561131857600080fd5b6007805461ff0019166101001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b60008054600160a060020a0316331461136e57600080fd5b600754610100900460ff16151561138457600080fd5b6007805461ff001916905560408051602080825284518183015284517f2e95b2145dd7edd2e5c8a5840ee939293ec7dcf3b54025e59d8ff349a8cf2a0b938693928392918301919085019080838360005b838110156113ed5781810151838201526020016113d5565b50505050905090810190601f16801561141a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a1506001919050565b600054600160a060020a0316331461144657600080fd5b60075460ff161561145657600080fd5b6007805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b60008054600160a060020a031633146114a657600080fd5b5060005b81518110156112e7576114d382828151811015156114c457fe5b90602001906020020151610e3e565b506001016114aa565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156109235780601f106108f857610100808354040283529160200191610923565b600054600160a060020a0316331461155a57600080fd5b6112e78282611b8e565b60075460009060ff161561157757600080fd5b600160a060020a038316151561158c57600080fd5b336000908152600860205260409020548211156115a857600080fd5b336000908152600a602052604090205460ff161515600114156115ca57600080fd5b600160a060020a0383166000908152600a602052604090205460ff161515600114156115f557600080fd5b33600090815260086020526040902054611615908363ffffffff611a8d16565b3360009081526008602052604080822092909255600160a060020a03851681522054611647908363ffffffff611a7a16565b600160a060020a038416600081815260086020908152604091829020939093558051858152905191923392600080516020611ccf8339815191529281900390910190a350600192915050565b600054600160a060020a031633146116aa57600080fd5b6112e78282611a9f565b60008054600160a060020a031633146116cc57600080fd5b600754610100900460ff16156116e157600080fd5b6006546005546116f7908563ffffffff611a7a16565b111561170257600080fd5b600554611715908463ffffffff611a7a16565b600555600160a060020a038416600090815260086020526040902054611741908463ffffffff611a7a16565b6008600086600160a060020a0316600160a060020a031681526020019081526020016000208190555083600160a060020a03167f85a66b9141978db9980f7e0ce3b468cebf4f7999f32b23091c5c03e798b1ba7a84846040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156117da5781810151838201526020016117c2565b50505050905090810190601f1680156118075780820380516001836020036101000a031916815260200191505b50935050505060405180910390a2604080518481529051600160a060020a03861691600091600080516020611ccf8339815191529181900360200190a35060019392505050565b60075460009060ff161561186157600080fd5b336000908152600960209081526040808320600160a060020a0387168452909152902054611895908363ffffffff611a7a16565b336000818152600960209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b600054600160a060020a0316331461193c57600080fd5b610f7181611c51565b60008054600160a060020a0316331461195d57600080fd5b5060005b81518110156112e75761198a828281518110151561197b57fe5b90602001906020020151611993565b50600101611961565b60008054600160a060020a031633146119ab57600080fd5b600160a060020a03821615156119c057600080fd5b600054600160a060020a03838116911614156119db57600080fd5b600160a060020a0382166000908152600a602052604090205460ff16151560011415611a0657600080fd5b600160a060020a0382166000818152600a6020526040808220805460ff19166001179055517fc1b5f12cea7c200ad495a43bf2d4c7ba1a753343c06c339093937849de84d9139190a2506001919050565b600054600160a060020a03163314611a6e57600080fd5b80600160a060020a0316ff5b81810182811015611a8757fe5b92915050565b600082821115611a9957fe5b50900390565b600160a060020a038216600090815260086020526040902054811115611ac457600080fd5b600160a060020a038216600090815260086020526040902054611aed908263ffffffff611a8d16565b600160a060020a038316600090815260086020526040902055600554611b19908263ffffffff611a8d16565b600555604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020611ccf8339815191529181900360200190a35050565b600054600160a060020a03163314611ba557600080fd5b816006819055507fc837e8e0c12ab1e3b41ff3a094985d1d4bcc004b2c8dfad49a4b123b9cf2573982826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611c12578181015183820152602001611bfa565b50505050905090810190601f168015611c3f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b600160a060020a0381161515611c6657600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820be53ee6e5e0b49049bc243b65985912cbf1ecd6f7251f1e46b20f3f05e6f42550029"
}