{
  "address": "0x6cabf1b590ee8daa30a1c76ff5dd21284d8681d8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HCHToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-05\n*/\n\npragma solidity ^0.4.16;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract HCHToken {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n    // Administrator\n    address public owner;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function HCHToken(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        owner = msg.sender; \n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n    \n    \n\tfunction mintToken(address target, uint256 mintedAmount) public{\n\t\tif (owner != target) return;\n\t\t\n\t\tmintedAmount = mintedAmount * 10 ** uint256(decimals);\n\t\t\n\t\tbalanceOf[target] += mintedAmount;\t\t//Increase the number of tokens for a given target\n\t\ttotalSupply += mintedAmount;\t\t\t//Increase the total amount of tokens by the appropriate number\n\t\t\n\t\tTransfer(0, owner, mintedAmount);\n\t\tTransfer(owner, target, mintedAmount);\n\t}\t\n}",
  "bytecode": "60606040526002805460ff19166012179055341561001c57600080fd5b604051610b85380380610b85833981016040528080519190602001805182019190602001805160025460ff16600a0a85026003819055600160a060020a03331660009081526005602052604081209190915592019190508280516100849291602001906100bd565b5060018180516100989291602001906100bd565b505060048054600160a060020a03191633600160a060020a0316179055506101589050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100fe57805160ff191683800117855561012b565b8280016001018555821561012b579182015b8281111561012b578251825591602001919060010190610110565b5061013792915061013b565b5090565b61015591905b808211156101375760008155600101610141565b90565b610a1e806101676000396000f3006060604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019457806323b872dd146101b9578063313ce567146101e157806342966c681461020a57806370a082311461022057806379c650681461023f57806379cc6790146102635780638da5cb5b1461028557806395d89b41146102b4578063a9059cbb146102c7578063cae9ca51146102e9578063dd62ed3e1461034e575b600080fd5b34156100df57600080fd5b6100e7610373565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012357808201518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016957600080fd5b610180600160a060020a0360043516602435610411565b604051901515815260200160405180910390f35b341561019f57600080fd5b6101a7610441565b60405190815260200160405180910390f35b34156101c457600080fd5b610180600160a060020a0360043581169060243516604435610447565b34156101ec57600080fd5b6101f46104be565b60405160ff909116815260200160405180910390f35b341561021557600080fd5b6101806004356104c7565b341561022b57600080fd5b6101a7600160a060020a0360043516610552565b341561024a57600080fd5b610261600160a060020a0360043516602435610564565b005b341561026e57600080fd5b610180600160a060020a036004351660243561063c565b341561029057600080fd5b610298610718565b604051600160a060020a03909116815260200160405180910390f35b34156102bf57600080fd5b6100e7610727565b34156102d257600080fd5b610261600160a060020a0360043516602435610792565b34156102f457600080fd5b61018060048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061079d95505050505050565b341561035957600080fd5b6101a7600160a060020a03600435811690602435166108cf565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104095780601f106103de57610100808354040283529160200191610409565b820191906000526020600020905b8154815290600101906020018083116103ec57829003601f168201915b505050505081565b600160a060020a033381166000908152600660209081526040808320938616835292905220819055600192915050565b60035481565b600160a060020a0380841660009081526006602090815260408083203390941683529290529081205482111561047c57600080fd5b600160a060020a03808516600090815260066020908152604080832033909416835292905220805483900390556104b48484846108ec565b5060019392505050565b60025460ff1681565b600160a060020a033316600090815260056020526040812054829010156104ed57600080fd5b600160a060020a03331660008181526005602052604090819020805485900390556003805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b60056020526000908152604090205481565b600454600160a060020a0383811691161461057e57610638565b600254600160a060020a03808416600090815260056020526040808220805460ff909516600a0a959095029384019094556003805484019055600454929392909116917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a3600454600160a060020a0380841691167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35b5050565b600160a060020a0382166000908152600560205260408120548290101561066257600080fd5b600160a060020a038084166000908152600660209081526040808320339094168352929052205482111561069557600080fd5b600160a060020a038084166000818152600560209081526040808320805488900390556006825280832033909516835293905282902080548590039055600380548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b600454600160a060020a031681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104095780601f106103de57610100808354040283529160200191610409565b6106383383836108ec565b6000836107aa8185610411565b156108c75780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610860578082015183820152602001610848565b50505050905090810190601f16801561088d5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15156108ae57600080fd5b6102c65a03f115156108bf57600080fd5b505050600191505b509392505050565b600660209081526000928352604080842090915290825290205481565b6000600160a060020a038316151561090357600080fd5b600160a060020a0384166000908152600560205260409020548290101561092957600080fd5b600160a060020a0383166000908152600560205260409020548281011161094f57600080fd5b50600160a060020a0380831660008181526005602052604080822080549488168084528284208054888103909155938590528154870190915591909301927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3600160a060020a038084166000908152600560205260408082205492871682529020540181146109ec57fe5b505050505600a165627a7a723058204ba791d659c6e2c42e840cdd79210666982aea76a20756316813e65f7ec219d800290000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000b686f74636861696e2e696f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034843480000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000b686f74636861696e2e696f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034843480000000000000000000000000000000000000000000000000000000000"
}