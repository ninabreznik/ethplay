{
  "address": "0x00000000e82eb0431756271f0d00cfb143685e7b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MetamorphicContractFactory",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "999",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-07\n*/\n\npragma solidity 0.5.6;\n\n\n/**\n * @title Metamorphic Contract Factory\n * @author 0age\n * @notice This contract creates metamorphic contracts, or contracts that can be\n * redeployed with new code to the same address. It does so by deploying a\n * contract with fixed, non-deterministic initialization code via the CREATE2\n * opcode. This contract clones the implementation contract in its constructor.\n * Once a contract undergoes metamorphosis, all existing storage will be deleted\n * and any existing contract code will be replaced with the deployed contract\n * code of the new implementation contract.\n * @dev CREATE2 will not be available on mainnet until (at least) block\n * 7,280,000. This contract has not yet been fully tested or audited - proceed\n * with caution and please share any exploits or optimizations you discover.\n */\ncontract MetamorphicContractFactory {\n  // fires when a metamorphic contract is deployed by cloning another contract.\n  event Metamorphosed(address metamorphicContract, address newImplementation);\n  \n  // fires when a metamorphic contract is deployed through a transient contract.\n  event MetamorphosedWithConstructor(\n    address metamorphicContract,\n    address transientContract\n  );\n\n  // store the initialization code for metamorphic contracts.\n  bytes private _metamorphicContractInitializationCode;\n\n  // store hash of the initialization code for metamorphic contracts as well.\n  bytes32 private _metamorphicContractInitializationCodeHash;\n\n  // store init code for transient contracts that deploy metamorphic contracts.\n  bytes private _transientContractInitializationCode;\n\n  // store the hash of the initialization code for transient contracts as well.\n  bytes32 private _transientContractInitializationCodeHash;\n\n  // maintain a mapping of metamorphic contracts to metamorphic implementations.\n  mapping(address => address) private _implementations;\n\n  // maintain a mapping of transient contracts to metamorphic init codes.\n  mapping(address => bytes) private _initCodes;\n\n  /**\n   * @dev In the constructor, set up the initialization code for metamorphic\n   * contracts as well as the keccak256 hash of the given initialization code.\n   * @param transientContractInitializationCode bytes The initialization code\n   * that will be used to deploy any transient contracts, which will deploy any\n   * metamorphic contracts that require the use of a constructor.\n   * \n   * Metamorphic contract initialization code (29 bytes): \n   *\n   *       0x5860208158601c335a63aaf10f428752fa158151803b80938091923cf3\n   *\n   * Description:\n   *\n   * pc|op|name         | [stack]                                | <memory>\n   *\n   * ** set the first stack item to zero - used later **\n   * 00 58 getpc          [0]                                       <>\n   *\n   * ** set second stack item to 32, length of word returned from staticcall **\n   * 01 60 push1\n   * 02 20 outsize        [0, 32]                                   <>\n   *\n   * ** set third stack item to 0, position of word returned from staticcall **\n   * 03 81 dup2           [0, 32, 0]                                <>\n   *\n   * ** set fourth stack item to 4, length of selector given to staticcall **\n   * 04 58 getpc          [0, 32, 0, 4]                             <>\n   *\n   * ** set fifth stack item to 28, position of selector given to staticcall **\n   * 05 60 push1\n   * 06 1c inpos          [0, 32, 0, 4, 28]                         <>\n   *\n   * ** set the sixth stack item to msg.sender, target address for staticcall **\n   * 07 33 caller         [0, 32, 0, 4, 28, caller]                 <>\n   *\n   * ** set the seventh stack item to msg.gas, gas to forward for staticcall **\n   * 08 5a gas            [0, 32, 0, 4, 28, caller, gas]            <>\n   *\n   * ** set the eighth stack item to selector, \"what\" to store via mstore **\n   * 09 63 push4\n   * 10 aaf10f42 selector [0, 32, 0, 4, 28, caller, gas, 0xaaf10f42]    <>\n   *\n   * ** set the ninth stack item to 0, \"where\" to store via mstore ***\n   * 11 87 dup8           [0, 32, 0, 4, 28, caller, gas, 0xaaf10f42, 0] <>\n   *\n   * ** call mstore, consume 8 and 9 from the stack, place selector in memory **\n   * 12 52 mstore         [0, 32, 0, 4, 0, caller, gas]             <0xaaf10f42>\n   *\n   * ** call staticcall, consume items 2 through 7, place address in memory **\n   * 13 fa staticcall     [0, 1 (if successful)]                    <address>\n   *\n   * ** flip success bit in second stack item to set to 0 **\n   * 14 15 iszero         [0, 0]                                    <address>\n   *\n   * ** push a third 0 to the stack, position of address in memory **\n   * 15 81 dup2           [0, 0, 0]                                 <address>\n   *\n   * ** place address from position in memory onto third stack item **\n   * 16 51 mload          [0, 0, address]                           <>\n   *\n   * ** place address to fourth stack item for extcodesize to consume **\n   * 17 80 dup1           [0, 0, address, address]                  <>\n   *\n   * ** get extcodesize on fourth stack item for extcodecopy **\n   * 18 3b extcodesize    [0, 0, address, size]                     <>\n   *\n   * ** dup and swap size for use by return at end of init code **\n   * 19 80 dup1           [0, 0, address, size, size]               <> \n   * 20 93 swap4          [size, 0, address, size, 0]               <>\n   *\n   * ** push code position 0 to stack and reorder stack items for extcodecopy **\n   * 21 80 dup1           [size, 0, address, size, 0, 0]            <>\n   * 22 91 swap2          [size, 0, address, 0, 0, size]            <>\n   * 23 92 swap3          [size, 0, size, 0, 0, address]            <>\n   *\n   * ** call extcodecopy, consume four items, clone runtime code to memory **\n   * 24 3c extcodecopy    [size, 0]                                 <code>\n   *\n   * ** return to deploy final code in memory **\n   * 25 f3 return         []                                        *deployed!*\n   *\n   *\n   * Transient contract initialization code derived from TransientContract.sol.\n   */\n  constructor(bytes memory transientContractInitializationCode) public {\n    // assign the initialization code for the metamorphic contract.\n    _metamorphicContractInitializationCode = (\n      hex\"5860208158601c335a63aaf10f428752fa158151803b80938091923cf3\"\n    );\n\n    // calculate and assign keccak256 hash of metamorphic initialization code.\n    _metamorphicContractInitializationCodeHash = keccak256(\n      abi.encodePacked(\n        _metamorphicContractInitializationCode\n      )\n    );\n\n    // store the initialization code for the transient contract.\n    _transientContractInitializationCode = transientContractInitializationCode;\n\n    // calculate and assign keccak256 hash of transient initialization code.\n    _transientContractInitializationCodeHash = keccak256(\n      abi.encodePacked(\n        _transientContractInitializationCode\n      )\n    );\n  }\n\n  /* solhint-disable function-max-lines */\n  /**\n   * @dev Deploy a metamorphic contract by submitting a given salt or nonce\n   * along with the initialization code for the metamorphic contract, and\n   * optionally provide calldata for initializing the new metamorphic contract.\n   * To replace the contract, first selfdestruct the current contract, then call\n   * with the same salt value and new initialization code (be aware that all\n   * existing state will be wiped from the existing contract). Also note that\n   * the first 20 bytes of the salt must match the calling address, which\n   * prevents contracts from being created by unintended parties.\n   * @param salt bytes32 The nonce that will be passed into the CREATE2 call and\n   * thus will determine the resulant address of the metamorphic contract.\n   * @param implementationContractInitializationCode bytes The initialization\n   * code for the implementation contract for the metamorphic contract. It will\n   * be used to deploy a new contract that the metamorphic contract will then\n   * clone in its constructor.\n   * @param metamorphicContractInitializationCalldata bytes An optional data\n   * parameter that can be used to atomically initialize the metamorphic\n   * contract.\n   * @return Address of the metamorphic contract that will be created.\n   */\n  function deployMetamorphicContract(\n    bytes32 salt,\n    bytes calldata implementationContractInitializationCode,\n    bytes calldata metamorphicContractInitializationCalldata\n  ) external payable containsCaller(salt) returns (\n    address metamorphicContractAddress\n  ) {\n    // move implementation init code and initialization calldata to memory.\n    bytes memory implInitCode = implementationContractInitializationCode;\n    bytes memory data = metamorphicContractInitializationCalldata;\n\n    // move the initialization code from storage to memory.\n    bytes memory initCode = _metamorphicContractInitializationCode;\n\n    // declare variable to verify successful metamorphic contract deployment.\n    address deployedMetamorphicContract;\n\n    // determine the address of the metamorphic contract.\n    metamorphicContractAddress = _getMetamorphicContractAddress(salt);\n\n    // declare a variable for the address of the implementation contract.\n    address implementationContract;\n\n    // load implementation init code and length, then deploy via CREATE.\n    /* solhint-disable no-inline-assembly */\n    assembly {\n      let encoded_data := add(0x20, implInitCode) // load initialization code.\n      let encoded_size := mload(implInitCode)     // load init code's length.\n      implementationContract := create(       // call CREATE with 3 arguments.\n        0,                                    // do not forward any endowment.\n        encoded_data,                         // pass in initialization code.\n        encoded_size                          // pass in init code's length.\n      )\n    } /* solhint-enable no-inline-assembly */\n\n    require(\n      implementationContract != address(0),\n      \"Could not deploy implementation.\"\n    );\n\n    // store the implementation to be retrieved by the metamorphic contract.\n    _implementations[metamorphicContractAddress] = implementationContract;\n\n    // load metamorphic contract data and length of data and deploy via CREATE2.\n    /* solhint-disable no-inline-assembly */\n    assembly {\n      let encoded_data := add(0x20, initCode) // load initialization code.\n      let encoded_size := mload(initCode)     // load the init code's length.\n      deployedMetamorphicContract := create2( // call CREATE2 with 4 arguments.\n        0,                                    // do not forward any endowment.\n        encoded_data,                         // pass in initialization code.\n        encoded_size,                         // pass in init code's length.\n        salt                                  // pass in the salt value.\n      )\n    } /* solhint-enable no-inline-assembly */\n\n    // ensure that the contracts were successfully deployed.\n    require(\n      deployedMetamorphicContract == metamorphicContractAddress,\n      \"Failed to deploy the new metamorphic contract.\"\n    );\n\n    // initialize the new metamorphic contract if any data or value is provided.\n    if (data.length > 0 || msg.value > 0) {\n      /* solhint-disable avoid-call-value */\n      (bool success,) = deployedMetamorphicContract.call.value(msg.value)(data);\n      /* solhint-enable avoid-call-value */\n\n      require(success, \"Failed to initialize the new metamorphic contract.\");\n    }\n\n    emit Metamorphosed(deployedMetamorphicContract, implementationContract);\n  } /* solhint-enable function-max-lines */\n\n  /**\n   * @dev Deploy a metamorphic contract by submitting a given salt or nonce\n   * along with the address of an existing implementation contract to clone, and\n   * optionally provide calldata for initializing the new metamorphic contract.\n   * To replace the contract, first selfdestruct the current contract, then call\n   * with the same salt value and a new implementation address (be aware that\n   * all existing state will be wiped from the existing contract). Also note\n   * that the first 20 bytes of the salt must match the calling address, which\n   * prevents contracts from being created by unintended parties.\n   * @param salt bytes32 The nonce that will be passed into the CREATE2 call and\n   * thus will determine the resulant address of the metamorphic contract.\n   * @param implementationContract address The address of the existing\n   * implementation contract to clone.\n   * @param metamorphicContractInitializationCalldata bytes An optional data\n   * parameter that can be used to atomically initialize the metamorphic\n   * contract.\n   * @return Address of the metamorphic contract that will be created.\n   */\n  function deployMetamorphicContractFromExistingImplementation(\n    bytes32 salt,\n    address implementationContract,\n    bytes calldata metamorphicContractInitializationCalldata\n  ) external payable containsCaller(salt) returns (\n    address metamorphicContractAddress\n  ) {\n    // move initialization calldata to memory.\n    bytes memory data = metamorphicContractInitializationCalldata;\n\n    // move the initialization code from storage to memory.\n    bytes memory initCode = _metamorphicContractInitializationCode;\n\n    // declare variable to verify successful metamorphic contract deployment.\n    address deployedMetamorphicContract;\n\n    // determine the address of the metamorphic contract.\n    metamorphicContractAddress = _getMetamorphicContractAddress(salt);\n\n    // store the implementation to be retrieved by the metamorphic contract.\n    _implementations[metamorphicContractAddress] = implementationContract;\n\n    // using inline assembly: load data and length of data, then call CREATE2.\n    /* solhint-disable no-inline-assembly */\n    assembly {\n      let encoded_data := add(0x20, initCode) // load initialization code.\n      let encoded_size := mload(initCode)     // load the init code's length.\n      deployedMetamorphicContract := create2( // call CREATE2 with 4 arguments.\n        0,                                    // do not forward any endowment.\n        encoded_data,                         // pass in initialization code.\n        encoded_size,                         // pass in init code's length.\n        salt                                  // pass in the salt value.\n      )\n    } /* solhint-enable no-inline-assembly */\n\n    // ensure that the contracts were successfully deployed.\n    require(\n      deployedMetamorphicContract == metamorphicContractAddress,\n      \"Failed to deploy the new metamorphic contract.\"\n    );\n\n    // initialize the new metamorphic contract if any data or value is provided.\n    if (data.length > 0 || msg.value > 0) {\n      /* solhint-disable avoid-call-value */\n      (bool success,) = metamorphicContractAddress.call.value(msg.value)(data);\n      /* solhint-enable avoid-call-value */\n\n      require(success, \"Failed to initialize the new metamorphic contract.\");\n    }\n\n    emit Metamorphosed(deployedMetamorphicContract, implementationContract);\n  }\n\n  /* solhint-disable function-max-lines */\n  /**\n   * @dev Deploy a metamorphic contract by submitting a given salt or nonce\n   * along with the initialization code to a transient contract which will then\n   * deploy the metamorphic contract before immediately selfdestructing. To\n   * replace the metamorphic contract, first selfdestruct the current contract,\n   * then call with the same salt value and new initialization code (be aware\n   * that all existing state will be wiped from the existing contract). Also\n   * note that the first 20 bytes of the salt must match the calling address,\n   * which prevents contracts from being created by unintended parties.\n   * @param salt bytes32 The nonce that will be passed into the CREATE2 call and\n   * thus will determine the resulant address of the metamorphic contract.\n   * @param initializationCode bytes The initialization code for the metamorphic\n   * contract that will be deployed by the transient contract.\n   * @return Address of the metamorphic contract that will be created.\n   */\n  function deployMetamorphicContractWithConstructor(\n    bytes32 salt,\n    bytes calldata initializationCode\n  ) external payable containsCaller(salt) returns (\n    address metamorphicContractAddress\n  ) {\n    // move transient contract initialization code from storage to memory.\n    bytes memory initCode = _transientContractInitializationCode;\n\n    // declare variable to verify successful transient contract deployment.\n    address deployedTransientContract;\n\n    // determine the address of the transient contract.\n    address transientContractAddress = _getTransientContractAddress(salt);\n\n    // store the initialization code to be retrieved by the transient contract.\n    _initCodes[transientContractAddress] = initializationCode;\n\n    // load transient contract data and length of data, then deploy via CREATE2.\n    /* solhint-disable no-inline-assembly */\n    assembly {\n      let encoded_data := add(0x20, initCode) // load initialization code.\n      let encoded_size := mload(initCode)     // load the init code's length.\n      deployedTransientContract := create2(   // call CREATE2 with 4 arguments.\n        callvalue,                            // forward any supplied endowment.\n        encoded_data,                         // pass in initialization code.\n        encoded_size,                         // pass in init code's length.\n        salt                                  // pass in the salt value.\n      )\n    } /* solhint-enable no-inline-assembly */\n\n    // ensure that the contracts were successfully deployed.\n    require(\n      deployedTransientContract == transientContractAddress,\n      \"Failed to deploy metamorphic contract using given salt and init code.\"\n    );\n\n    metamorphicContractAddress = _getMetamorphicContractAddressWithConstructor(\n      transientContractAddress\n    );\n\n    emit MetamorphosedWithConstructor(\n      metamorphicContractAddress,\n      transientContractAddress\n    );\n  } /* solhint-enable function-max-lines */\n\n  /**\n   * @dev View function for retrieving the address of the implementation\n   * contract to clone. Called by the constructor of each metamorphic contract.\n   */\n  function getImplementation() external view returns (address implementation) {\n    return _implementations[msg.sender];\n  }\n\n  /**\n   * @dev View function for retrieving the initialization code for a given\n   * metamorphic contract to deploy via a transient contract. Called by the\n   * constructor of each transient contract.\n   * @return The initialization code to use to deploy the metamorphic contract.\n   */\n  function getInitializationCode() external view returns (\n    bytes memory initializationCode\n  ) {\n    return _initCodes[msg.sender];\n  }\n\n  /**\n   * @dev View function for retrieving the address of the current implementation\n   * contract of a given metamorphic contract, where the address of the contract\n   * is supplied as an argument. Be aware that the implementation contract has\n   * an independent state and may have been altered or selfdestructed from when\n   * it was last cloned by the metamorphic contract.\n   * @param metamorphicContractAddress address The address of the metamorphic\n   * contract.\n   * @return Address of the corresponding implementation contract.\n   */\n  function getImplementationContractAddress(\n    address metamorphicContractAddress\n  ) external view returns (address implementationContractAddress) {\n    return _implementations[metamorphicContractAddress];\n  }\n\n  /**\n   * @dev View function for retrieving the initialization code for a given\n   * metamorphic contract instance deployed via a transient contract, where the address\n   * of the transient contract is supplied as an argument.\n   * @param transientContractAddress address The address of the transient\n   * contract that deployed the metamorphic contract.\n   * @return The initialization code used to deploy the metamorphic contract.\n   */\n  function getMetamorphicContractInstanceInitializationCode(\n    address transientContractAddress\n  ) external view returns (bytes memory initializationCode) {\n    return _initCodes[transientContractAddress];\n  }\n\n  /**\n   * @dev Compute the address of the metamorphic contract that will be created\n   * upon submitting a given salt to the contract.\n   * @param salt bytes32 The nonce passed into CREATE2 by metamorphic contract.\n   * @return Address of the corresponding metamorphic contract.\n   */\n  function findMetamorphicContractAddress(\n    bytes32 salt\n  ) external view returns (address metamorphicContractAddress) {\n    // determine the address where the metamorphic contract will be deployed.\n    metamorphicContractAddress = _getMetamorphicContractAddress(salt);\n  }\n\n  /**\n   * @dev Compute the address of the transient contract that will be created\n   * upon submitting a given salt to the contract.\n   * @param salt bytes32 The nonce passed into CREATE2 when deploying the\n   * transient contract.\n   * @return Address of the corresponding transient contract.\n   */\n  function findTransientContractAddress(\n    bytes32 salt\n  ) external view returns (address transientContractAddress) {\n    // determine the address where the transient contract will be deployed.\n    transientContractAddress = _getTransientContractAddress(salt);\n  }\n\n  /**\n   * @dev Compute the address of the metamorphic contract that will be created\n   * by the transient contract upon submitting a given salt to the contract.\n   * @param salt bytes32 The nonce passed into CREATE2 when deploying the\n   * transient contract.\n   * @return Address of the corresponding metamorphic contract.\n   */\n  function findMetamorphicContractAddressWithConstructor(\n    bytes32 salt\n  ) external view returns (address metamorphicContractAddress) {\n    // determine the address of the metamorphic contract.\n    metamorphicContractAddress = _getMetamorphicContractAddressWithConstructor(\n      _getTransientContractAddress(salt)\n    );\n  }\n\n  /**\n   * @dev View function for retrieving the initialization code of metamorphic\n   * contracts for purposes of verification.\n   */\n  function getMetamorphicContractInitializationCode() external view returns (\n    bytes memory metamorphicContractInitializationCode\n  ) {\n    return _metamorphicContractInitializationCode;\n  }\n\n  /**\n   * @dev View function for retrieving the keccak256 hash of the initialization\n   * code of metamorphic contracts for purposes of verification.\n   */\n  function getMetamorphicContractInitializationCodeHash() external view returns (\n    bytes32 metamorphicContractInitializationCodeHash\n  ) {\n    return _metamorphicContractInitializationCodeHash;\n  }\n\n  /**\n   * @dev View function for retrieving the initialization code of transient\n   * contracts for purposes of verification.\n   */\n  function getTransientContractInitializationCode() external view returns (\n    bytes memory transientContractInitializationCode\n  ) {\n    return _transientContractInitializationCode;\n  }\n\n  /**\n   * @dev View function for retrieving the keccak256 hash of the initialization\n   * code of transient contracts for purposes of verification.\n   */\n  function getTransientContractInitializationCodeHash() external view returns (\n    bytes32 transientContractInitializationCodeHash\n  ) {\n    return _transientContractInitializationCodeHash;\n  }\n\n  /**\n   * @dev Internal view function for calculating a metamorphic contract address\n   * given a particular salt.\n   */\n  function _getMetamorphicContractAddress(\n    bytes32 salt\n  ) internal view returns (address) {\n    // determine the address of the metamorphic contract.\n    return address(\n      uint160(                      // downcast to match the address type.\n        uint256(                    // convert to uint to truncate upper digits.\n          keccak256(                // compute the CREATE2 hash using 4 inputs.\n            abi.encodePacked(       // pack all inputs to the hash together.\n              hex\"ff\",              // start with 0xff to distinguish from RLP.\n              address(this),        // this contract will be the caller.\n              salt,                 // pass in the supplied salt value.\n              _metamorphicContractInitializationCodeHash // the init code hash.\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * @dev Internal view function for calculating a transient contract address\n   * given a particular salt.\n   */\n  function _getTransientContractAddress(\n    bytes32 salt\n  ) internal view returns (address) {\n    // determine the address of the transient contract.\n    return address(\n      uint160(                      // downcast to match the address type.\n        uint256(                    // convert to uint to truncate upper digits.\n          keccak256(                // compute the CREATE2 hash using 4 inputs.\n            abi.encodePacked(       // pack all inputs to the hash together.\n              hex\"ff\",              // start with 0xff to distinguish from RLP.\n              address(this),        // this contract will be the caller.\n              salt,                 // pass in the supplied salt value.\n              _transientContractInitializationCodeHash // supply init code hash.\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * @dev Internal view function for calculating a metamorphic contract address\n   * that has been deployed via a transient contract given the address of the\n   * transient contract.\n   */\n  function _getMetamorphicContractAddressWithConstructor(\n    address transientContractAddress\n  ) internal pure returns (address) { \n    // determine the address of the metamorphic contract.\n    return address(\n      uint160(                          // downcast to match the address type.\n        uint256(                        // set to uint to truncate upper digits.\n          keccak256(                    // compute CREATE hash via RLP encoding.\n            abi.encodePacked(           // pack all inputs to the hash together.\n              byte(0xd6),               // first RLP byte.\n              byte(0x94),               // second RLP byte.\n              transientContractAddress, // called by the transient contract.\n              byte(0x01)                // nonce begins at 1 for contracts.\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * @dev Modifier to ensure that the first 20 bytes of a submitted salt match\n   * those of the calling account. This provides protection against the salt\n   * being stolen by frontrunners or other attackers.\n   * @param salt bytes32 The salt value to check against the calling address.\n   */\n  modifier containsCaller(bytes32 salt) {\n    // prevent contract submissions from being stolen from tx.pool by requiring\n    // that the first 20 bytes of the submitted salt match msg.sender.\n    require(\n      address(bytes20(salt)) == msg.sender,\n      \"Invalid salt - first 20 bytes of the salt must match calling address.\"\n    );\n    _;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"getTransientContractInitializationCodeHash\",\"outputs\":[{\"name\":\"transientContractInitializationCodeHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTransientContractInitializationCode\",\"outputs\":[{\"name\":\"transientContractInitializationCode\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"salt\",\"type\":\"bytes32\"},{\"name\":\"initializationCode\",\"type\":\"bytes\"}],\"name\":\"deployMetamorphicContractWithConstructor\",\"outputs\":[{\"name\":\"metamorphicContractAddress\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationCode\",\"outputs\":[{\"name\":\"initializationCode\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transientContractAddress\",\"type\":\"address\"}],\"name\":\"getMetamorphicContractInstanceInitializationCode\",\"outputs\":[{\"name\":\"initializationCode\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMetamorphicContractInitializationCodeHash\",\"outputs\":[{\"name\":\"metamorphicContractInitializationCodeHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"findMetamorphicContractAddressWithConstructor\",\"outputs\":[{\"name\":\"metamorphicContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"salt\",\"type\":\"bytes32\"},{\"name\":\"implementationContractInitializationCode\",\"type\":\"bytes\"},{\"name\":\"metamorphicContractInitializationCalldata\",\"type\":\"bytes\"}],\"name\":\"deployMetamorphicContract\",\"outputs\":[{\"name\":\"metamorphicContractAddress\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"salt\",\"type\":\"bytes32\"},{\"name\":\"implementationContract\",\"type\":\"address\"},{\"name\":\"metamorphicContractInitializationCalldata\",\"type\":\"bytes\"}],\"name\":\"deployMetamorphicContractFromExistingImplementation\",\"outputs\":[{\"name\":\"metamorphicContractAddress\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"findTransientContractAddress\",\"outputs\":[{\"name\":\"transientContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"name\":\"implementation\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"findMetamorphicContractAddress\",\"outputs\":[{\"name\":\"metamorphicContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"metamorphicContractAddress\",\"type\":\"address\"}],\"name\":\"getImplementationContractAddress\",\"outputs\":[{\"name\":\"implementationContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMetamorphicContractInitializationCode\",\"outputs\":[{\"name\":\"metamorphicContractInitializationCode\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"transientContractInitializationCode\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"metamorphicContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"Metamorphosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"metamorphicContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transientContract\",\"type\":\"address\"}],\"name\":\"MetamorphosedWithConstructor\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000108608060408190527f57b9f52300000000000000000000000000000000000000000000000000000000815260609033906357b9f5239060849060009060048186803b15801561004c57600080fd5b505afa158015610060573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561008957600080fd5b8101908080516401000000008111156100a157600080fd5b820160208101848111156100b457600080fd5b81516401000000008111828201871017156100ce57600080fd5b505092919050505090506000816020018251808234f0925050506001600160a01b0381166100fb57600080fd5b806001600160a01b0316fffe000000000000000000000000000000000000000000000000"
}