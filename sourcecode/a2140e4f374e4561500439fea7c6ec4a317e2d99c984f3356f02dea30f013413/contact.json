{
  "address": "0xba7eba2b45006ce96795ded79d2ed06f8f3be692",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthRV2",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-10\n*/\n\npragma solidity 0.4.25;\n\n\ncontract EthRV2 {\n  using SafeMath for uint;\n\n  struct Investor {\n    uint deposit;\n    uint paymentTime;\n    uint withdrawal;\n    uint boostStartup;\n    bool isParticipant;\n  }\n\n  mapping (address => Investor) public investors;\n  address public admin1Address;\n  address public admin2Address;\n  address public admin3Address;\n  address public owner;\n  uint public investmentsNumber;\n  uint public investorsNumber;\n\n  modifier onlyOwner() {\n    require(msg.sender == owner, \"access denied\");\n    _;\n  }\n\n  event OnRefLink(address indexed referral, uint referrarBonus, address indexed referrer,  uint referrerBonus, uint time);\n  event OnNewInvestor(address indexed addr, uint time);\n  event OnInvesment(address indexed addr, uint deposit, uint time);\n  event OnBoostChanged(address indexed addr, bool isActive, uint time);\n  event OnEarlyWithdrawal(address indexed addr, uint withdrawal, uint time);\n  event OnDeleteInvestor(address indexed addr, uint time);\n  event OnWithdraw(address indexed addr, uint withdrawal, uint time);\n  event OnBoostBonus(address indexed addr, uint bonus, uint time);\n  event OnNotEnoughBalance(uint time);\n\n  constructor() public {\n    owner = msg.sender;\n    admin1Address = msg.sender;\n    admin2Address = msg.sender;\n    admin3Address = msg.sender;\n  }\n\n  function() external payable {\n    if (msg.value == 0) {\n      withdraw();\n    } else if (msg.value == 0.0077777 ether) {\n      boost();\n    } else if (msg.value == 0.0088888 ether) {\n      earlyWithdrawal();\n    } else {\n      deposit(bytes2address(msg.data));\n    }\n  }\n\n  function disown() public onlyOwner {\n    owner = address(0x0);\n  }\n\n  function setAdminsAddress(uint n, address addr) public onlyOwner {\n    require(n >= 1 && n <= 3, \"invalid number of admin`s address\");\n    if (n == 1) {\n      admin1Address = addr;\n    } else if (n == 2) {\n      admin2Address = addr;\n    } else {\n      admin3Address = addr;\n    }\n  }\n\n  function investorDividends(address investorAddr) public view returns(uint dividends, uint boostBonus) {\n    return getDividends(investorAddr);\n  }\n\n  function withdraw() public {\n    address investorAddr = msg.sender;\n    (uint dividends, uint boostBonus) = getDividends(investorAddr);\n    require(dividends > 0, \"cannot to pay zero dividends\");\n    require(address(this).balance > 0, \"fund is empty\");\n    uint withdrawal = dividends + boostBonus;\n\n    // fund limit\n    if (address(this).balance <= withdrawal) {\n      emit OnNotEnoughBalance(now);\n      withdrawal = address(this).balance;\n    }\n\n    Investor storage investor = investors[investorAddr];\n    uint withdrawalLimit = investor.deposit * 200 / 100; // 200%\n    uint totalWithdrawal = withdrawal + investor.withdrawal;\n\n    // withdrawal limit - 200%\n    if (totalWithdrawal >= withdrawalLimit) {\n      withdrawal = withdrawalLimit.sub(investor.withdrawal);\n      if (boostBonus > 0 ) {\n        emit OnBoostBonus(investorAddr, boostBonus, now);\n      }\n      deleteInvestor(investorAddr);\n    } else {\n      // normal withdraw - dont use boostBonus\n      if (withdrawal > dividends) {\n        withdrawal = dividends;\n      }\n      investor.withdrawal += withdrawal;\n      investor.paymentTime = now;\n      if (investor.boostStartup > 0) {\n        investor.boostStartup = 0;\n        emit OnBoostChanged(investorAddr, false, now);\n      }\n    }\n\n    investorAddr.transfer(withdrawal);\n    emit OnWithdraw(investorAddr, withdrawal, now);\n  }\n\n  function earlyWithdrawal() public {\n    address investorAddr = msg.sender;\n    Investor storage investor = investors[investorAddr];\n    require(investor.deposit > 0, \"sender must be an investor\");\n\n    uint earlyWithdrawalLimit = investor.deposit * 70 / 100; // 70%\n    require(earlyWithdrawalLimit > investor.withdrawal, \"early withdraw only before 70% deposit`s withdrawal\");\n\n    uint withdrawal = earlyWithdrawalLimit.sub(investor.withdrawal); \n    investorAddr.transfer(withdrawal);\n    emit OnEarlyWithdrawal(investorAddr, withdrawal, now);\n\n    deleteInvestor(investorAddr);\n  }\n\n  function boost() public {\n    Investor storage investor = investors[msg.sender];\n    require(investor.deposit > 0, \"sender must be an investor\");\n    require(investor.boostStartup == 0, \"boost is already activated\");\n    investor.boostStartup = now;\n    emit OnBoostChanged(msg.sender, true, now);\n  }\n\n  function deposit(address referrerAddr) public payable {\n    uint depositAmount = msg.value;\n    address investorAddr = msg.sender;\n    require(isNotContract(investorAddr), \"invest from contracts is not supported\");\n    require(depositAmount > 0, \"deposit amount cannot be zero\");\n\n    admin1Address.send(depositAmount * 70 / 1000); //   7%\n    admin2Address.send(depositAmount * 15 / 1000); // 1.5%\n    admin3Address.send(depositAmount * 15 / 1000); // 1.5%\n\n    Investor storage investor = investors[investorAddr];\n    bool senderIsNotPaticipant = !investor.isParticipant;\n    bool referrerIsParticipant = investors[referrerAddr].isParticipant;\n\n    // ref link\n    if (senderIsNotPaticipant && referrerIsParticipant && referrerAddr != investorAddr) {\n      uint referrerBonus = depositAmount * 3 / 100; // 3%\n      uint referralBonus = depositAmount * 1 / 100; // 1%\n      referrerAddr.transfer(referrerBonus);\n      investorAddr.transfer(referralBonus);\n      emit OnRefLink(investorAddr, referralBonus, referrerAddr, referrerBonus, now);\n    }\n\n    if (investor.deposit == 0) {\n      investorsNumber++;\n      investor.isParticipant = true;\n      emit OnNewInvestor(investorAddr, now);\n    }\n\n    investor.deposit += depositAmount;\n    investor.paymentTime = now;\n\n    investmentsNumber++;\n    emit OnInvesment(investorAddr, depositAmount, now);\n  }\n\n  function getDividends(address investorAddr) internal view returns(uint dividends, uint boostBonus) {\n    Investor storage investor = investors[investorAddr];\n    if (investor.deposit == 0) {\n      return (0, 0);\n    }\n\n    if (investor.boostStartup > 0) {\n      uint boostDays = now.sub(investor.boostStartup).div(24 hours);\n      boostBonus = boostDays * investor.deposit * 5 / 100000; // 0.005%\n    }\n\n    uint depositDays = now.sub(investor.paymentTime).div(24 hours);\n    dividends = depositDays * investor.deposit * 1 / 100; // 1%\n\n    uint depositAmountBonus;\n    if (10 ether <= investor.deposit && investor.deposit <= 50 ether) {\n      depositAmountBonus = depositDays * investor.deposit * 5 / 10000; // 0.05%\n    } else if (50 ether < investor.deposit) {\n      depositAmountBonus = depositDays * investor.deposit * 11 / 10000; // 0.11%\n    }\n\n    dividends += depositAmountBonus;\n  }\n\n  function isNotContract(address addr) internal view returns (bool) {\n    uint length;\n    assembly { length := extcodesize(addr) }\n    return length == 0;\n  }\n\n  function bytes2address(bytes memory source) internal pure returns(address addr) {\n    assembly { addr := mload(add(source, 0x14)) }\n    return addr;\n  }\n\n  function deleteInvestor(address investorAddr) private {\n    delete investors[investorAddr].deposit;\n    delete investors[investorAddr].paymentTime;\n    delete investors[investorAddr].withdrawal;\n    delete investors[investorAddr].boostStartup;\n    emit OnDeleteInvestor(investorAddr, now);\n    investorsNumber--;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"investorAddr\",\"type\":\"address\"}],\"name\":\"investorDividends\",\"outputs\":[{\"name\":\"dividends\",\"type\":\"uint256\"},{\"name\":\"boostBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin1Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin2Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin3Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAdminsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"paymentTime\",\"type\":\"uint256\"},{\"name\":\"withdrawal\",\"type\":\"uint256\"},{\"name\":\"boostStartup\",\"type\":\"uint256\"},{\"name\":\"isParticipant\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"earlyWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"boost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddr\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrarBonus\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrerBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnRefLink\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnNewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnInvesment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnBoostChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnEarlyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnDeleteInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withdrawal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnBoostBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OnNotEnoughBalance\",\"type\":\"event\"}]",
  "bytecode": ""
}