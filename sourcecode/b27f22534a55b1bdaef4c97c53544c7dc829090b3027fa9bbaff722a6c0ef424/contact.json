{
  "address": "0xae842fa579c308a0e0018fc192d2e504b25d4496",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ContractiumSalePackage",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-11\n*/\n\npragma solidity ^0.4.18 ;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n\n  \n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  \n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  \n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n\ncontract ContractiumInterface {\n    function balanceOf(address who) public view returns (uint256);\n    function contractSpend(address _from, uint256 _value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function allowance(address _owner, address _spender) public view returns (uint256);\n\n    function owner() public view returns (address);\n\n    function bonusRateOneEth() public view returns (uint256);\n    function currentTotalTokenOffering() public view returns (uint256);\n    function currentTokenOfferingRaised() public view returns (uint256);\n\n    function isOfferingStarted() public view returns (bool);\n    function offeringEnabled() public view returns (bool);\n    function startTime() public view returns (uint256);\n    function endTime() public view returns (uint256);\n}\n\n\ncontract ContractiumSalePackage is Ownable {\n\n    using SafeMath for uint256;\n\n    ContractiumInterface ctuContract;\n    address public constant CONTRACTIUM = 0x943aca8ed65fbf188a7d369cfc2bee0ae435ee1b;\n    address public ownerCtuContract;\n    address public owner;\n\n    uint8 public constant decimals = 18;\n    uint256 public unitsOneEthCanBuy = 15000;\n    \n    // Current token offering raised in CTUSalePackages\n    uint256 public currentTokenOfferingRaised;\n    \n    // Sale packages and intervals\n    uint256[] public intervals;\n    uint256[] public packages;\n    \n    constructor() public {\n        ctuContract = ContractiumInterface(CONTRACTIUM);\n        ownerCtuContract = ctuContract.owner();\n        owner = msg.sender;\n        \n        intervals = [\n            0,\n            10000000000000000,      // 0.01 Ether\n            100000000000000000,     // 0.1 ether\n            1000000000000000000,    // 01 Ether\n            3000000000000000000,    // 03 Ether\n            5000000000000000000,    // 05 Ether\n            10000000000000000000    // 10 Ether\n        ];\n        \n        packages = [\n            0,\n            750,   // 5% \n            1500,  // 10% \n            3000,  // 20%\n            4500,  // 30%\n            6000,  // 40%\n            7500   // 50%\n        ];\n    }\n\n    function() public payable {\n\n        require(msg.sender != owner);\n\n        // Number of tokens to sale in wei\n        uint256 amount = msg.value.mul(unitsOneEthCanBuy);\n        \n        // Bonus rate\n        uint256 bonusRate = getNearestPackage(msg.value);\n        \n        // Amount of bonus tokens\n        uint256 amountBonus = msg.value.mul(bonusRate);\n        \n        // Amount with bonus value\n        amount = amount.add(amountBonus);\n\n        // Offering validation\n        uint256 remain = ctuContract.balanceOf(ownerCtuContract);\n        require(remain >= amount);\n        preValidatePurchase(amount);\n\n        address _from = ownerCtuContract;\n        address _to = msg.sender;\n        require(ctuContract.transferFrom(_from, _to, amount));\n        ownerCtuContract.transfer(msg.value);  \n\n        currentTokenOfferingRaised = currentTokenOfferingRaised.add(amount);  \n    }\n    \n    /**\n    * @dev Get package bonus.\n    */\n    function getNearestPackage(uint256 _amount) view internal returns (uint256) {\n        require(_amount > 0);\n        uint indexPackage = 0;\n        for (uint i = intervals.length - 1; i >= 0 ; i--){\n            if (intervals[i] <= _amount) {\n                indexPackage = i;\n                break;\n            }\n        }\n        return packages[indexPackage];\n    }\n    \n    /**\n    * @dev Validate before purchasing.\n    */\n    function preValidatePurchase(uint256 _amount) view internal {\n        require(_amount > 0);\n        require(ctuContract.isOfferingStarted());\n        require(ctuContract.offeringEnabled());\n        require(currentTokenOfferingRaised.add(ctuContract.currentTokenOfferingRaised().add(_amount)) <= ctuContract.currentTotalTokenOffering());\n        require(block.timestamp >= ctuContract.startTime() && block.timestamp <= ctuContract.endTime());\n    }\n    \n    /**\n    * @dev Set Contractium address and related parameter from Contractium Smartcontract.\n    */\n    function setCtuContract(address _ctuAddress) public onlyOwner {\n        require(_ctuAddress != address(0x0));\n        ctuContract = ContractiumInterface(_ctuAddress);\n        ownerCtuContract = ctuContract.owner();\n    }\n\n    /**\n    * @dev Reset current token offering raised for new Sale.\n    */\n    function resetCurrentTokenOfferingRaised() public onlyOwner {\n        currentTokenOfferingRaised = 0;\n    }\n    \n    /**\n    * @dev Clear package bonus.\n    */\n    function clearPackages() public onlyOwner returns (bool) {\n        intervals = [0];\n        packages = [0];\n        return true;\n    }\n    \n    /**\n    * @dev Set package bonus.\n    */\n    function setPackages(uint256[] _interval, uint256[] _packages) public checkPackages(_interval, _packages) returns (bool) {\n        intervals = _interval;\n        packages = _packages;\n        return true;\n    }\n    \n    /**\n    *  Check packages and intervals is valid or not\n    */\n    modifier checkPackages(uint256[] _interval, uint256[] _packages) {\n        require(_interval.length == _packages.length);\n        bool validIntervalArr = true;\n        for (uint i = 0; i < intervals.length - 1 ; i++){\n            if (intervals[i] >= intervals[i + 1]) {\n                validIntervalArr = false;\n                break;\n            }\n        }\n        require(validIntervalArr);\n        _;\n    }\n}",
  "bytecode": ""
}