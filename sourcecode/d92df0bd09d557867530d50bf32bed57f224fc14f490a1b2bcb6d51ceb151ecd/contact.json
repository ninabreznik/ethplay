{
  "address": "0x46492473755e8df960f8034877f61732d718ce96",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "StarCreditsToken",
  "contractName": "StandardToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-22\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * Authors: Justin Jones, Marshall Stokes\n * Published: 2017 by Sprux LLC\n */\n\n\n/* Contract provides functions so only contract owner can execute a function */\ncontract owned {\n    address public owner;                                    //the contract owner\n\n    function owned() {\n        owner = msg.sender;                                  //constructor initializes the creator as the owner on initialization\n    }\n\n    modifier onlyOwner {\n        if (msg.sender != owner) throw;                      // functions with onlyOwner will throw an exception if not the contract owner\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner { // transfer contract owner to new owner\n        owner = newOwner;\n    }\n}\n\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n\n\n/**\n * Centrally issued Ethereum token.\n * \n *\n * Token supply is created on deployment and allocated to contract owner and two \n * time-locked acccounts. The account deadlines (lock time) are in minutes from now.\n * The owner can then transfer from its supply to crowdfund participants.\n * The owner can burn any excessive tokens.\n * The owner can freeze and unfreeze accounts\n *\n */\n\ncontract StandardToken is owned{ \n    /* Public variables of the token */\n    string public standard = 'Token 0.1';\n    string public name;                     // the token name \n    string public symbol;                   // the ticker symbol\n    uint8 public decimals;                  // amount of decimal places in the token\n    address public the120address;           // the 120-day-locked address\n    address public the365address;           // the 365-day-locked address\n    uint public deadline120;                // days from contract creation in minutes to lock the120address (172800 minutes == 120 days)\n    uint public deadline365;                // days from contract creation in minutes to lock the365address (525600 minutes == 365 days)\n    uint256 public totalSupply;             // total number of tokens that exist (e.g. not burned)\n    \n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    \n    /* This creates an array with all frozen accounts */\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /* Initializes contract with entire supply of tokens assigned to our distro accounts */\n    function StandardToken(\n\n        string tokenName,   \n        uint8 decimalUnits,\n        string tokenSymbol,\n        \n        uint256 distro1,            // the initial crowdfund distro amount\n        uint256 distro120,          // the 120 day distro amount\n        uint256 distro365,          // the 365 day distro amount\n        address address120,         // the 120 day address \n        address address365,         // the 365 day address\n        uint durationInMinutes120,  // amount of minutes to lock address120\n        uint durationInMinutes365   // amount of minutes to lock address365\n        \n        ) {\n        balanceOf[msg.sender] = distro1;                         // Give the owner tokens for initial crowdfund distro\n        balanceOf[address120] = distro120;                       // Set 120 day address balance (to be locked)\n        balanceOf[address365] = distro365;                       // Set 365 day address balance (to be locked)\n        freezeAccount(address120, true);                         // Freeze the 120 day address on creation\n        freezeAccount(address365, true);                         // Freeze the 120 day address on creation\n        totalSupply = distro1+distro120+distro365;               // Total supply is sum of tokens assigned to distro accounts\n        deadline120 = now + durationInMinutes120 * 1 minutes;    // Set the 120 day deadline\n        deadline365 = now + durationInMinutes365 * 1 minutes;    // Set the 365 day deadline\n        the120address = address120;                              // Set the publicly accessible 120 access\n        the365address = address365;                              // Set the publicly accessible 365 access\n        name = tokenName;                                        // Set the name for display purposes\n        symbol = tokenSymbol;                                    // Set the symbol for display purposes\n        decimals = decimalUnits;                                 // Number of decimals for display purposes\n    }\n\n    /* Send tokens */\n    function transfer(address _to, uint256 _value) returns (bool success){\n        if (_value == 0) return false; \t\t\t\t             // Don't waste gas on zero-value transaction\n        if (balanceOf[msg.sender] < _value) return false;        // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n        if (frozenAccount[msg.sender]) throw;                // Check if sender is frozen\n        if (frozenAccount[_to]) throw;                       // Check if target is frozen                 \n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n        return true;\n    }\n\n    /* Allow another contract to spend some tokens on your behalf */\n    function approve(address _spender, uint256 _value)\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /* Approve and then communicate the approved contract in a single tx */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }        \n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (frozenAccount[_from]) throw;                        // Check if sender frozen       \n        if (frozenAccount[_to]) throw;                          // Check if target frozen                 \n        if (balanceOf[_from] < _value) return false;            // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;    // Check for overflows\n        if (_value > allowance[_from][msg.sender]) throw;       // Check allowance\n        balanceOf[_from] -= _value;                             // Subtract from the sender\n        balanceOf[_to] += _value;                               // Add the same to the recipient\n        allowance[_from][msg.sender] -= _value;                 // Allowance changes\n        Transfer(_from, _to, _value);                           // Tokens are send\n        return true;\n    }\n    \n    /* A function to freeze or un-freeze an account, to and from */\n    function freezeAccount(address target, bool freeze ) onlyOwner {    \n        if ((target == the120address) && (now < deadline120)) throw;    // Ensure you can not change 120address frozen status until deadline\n        if ((target == the365address) && (now < deadline365)) throw;    // Ensure you can not change 365address frozen status until deadline\n        frozenAccount[target] = freeze;                                 // Set the array object to the value of bool freeze\n        FrozenFunds(target, freeze);                                    // Notify event\n    }\n    \n    /* A function to burn tokens and remove from supply */\n    function burn(uint256 _value) returns (bool success)  {\n\t\tif (frozenAccount[msg.sender]) throw;                  // Check if sender frozen       \n        if (_value == 0) return false;\t\t\t               // Don't waste gas on zero-value transaction\n        if (balanceOf[msg.sender] < _value) return false;      // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;                       // Subtract from the sender\n        totalSupply -= _value;                                 // Reduce totalSupply accordingly\n        Transfer(msg.sender,0, _value);                        // Burn baby burn\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) onlyOwner returns (bool success)  {\n        if (frozenAccount[msg.sender]) throw;                  // Check if sender frozen       \n        if (frozenAccount[_from]) throw;                       // Check if recipient frozen \n        if (_value == 0) return false;\t\t\t               // Don't waste gas on zero-value transaction\n        if (balanceOf[_from] < _value) return false;           // Check if the sender has enough\n        if (_value > allowance[_from][msg.sender]) throw;      // Check allowance\n        balanceOf[_from] -= _value;                            // Subtract from the sender\n        allowance[_from][msg.sender] -= _value;                // Allowance is updated\n        totalSupply -= _value;                                 // Updates totalSupply\n        Transfer(_from, 0, _value);\n        return true;\n    }\n\n}",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000019945ca26200000000000000000000000000000000000000000000000000000019945ca2620000000000000000000000000000000000000000000000000000003e871b540c0000000000000000000000000002b2ec6739fecb9021cfa48a1c263b24e371484a80000000000000000000000003b2e10f7f855abb2204a19230d7f35cbf9aa76050000000000000000000000000000000000000000000000000000000000020c2f000000000000000000000000000000000000000000000000000000000005f56f000000000000000000000000000000000000000000000000000000000000000b537461724372656469747300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045354524300000000000000000000000000000000000000000000000000000000"
}