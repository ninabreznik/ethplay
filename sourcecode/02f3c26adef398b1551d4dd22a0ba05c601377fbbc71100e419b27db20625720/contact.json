{
  "address": "0x248d27095a659fc125a16b6191fb6b904936f475",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AerumCrowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-31\n*/\n\npragma solidity ^0.4.24;\n\ncontract Crowdsale {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  // The token being sold\n  ERC20 public token;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n  // 1 wei will give you 1 unit, or 0.001 TOK.\n  uint256 public rate;\n\n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param _rate Number of token units a buyer gets per wei\n   * @param _wallet Address where collected funds will be forwarded to\n   * @param _token Address of the token being sold\n   */\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n    require(_rate > 0);\n    require(_wallet != address(0));\n    require(_token != address(0));\n\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method: \n   *   super._preValidatePurchase(_beneficiary, _weiAmount);\n   *   require(weiRaised.add(_weiAmount) <= cap);\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    token.safeTransfer(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount)\n    internal view returns (uint256)\n  {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}\n\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param _openingTime Crowdsale opening time\n   * @param _closingTime Crowdsale closing time\n   */\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(_openingTime >= block.timestamp);\n    require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n    onlyWhileOpen\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\ncontract PostDeliveryCrowdsale is TimedCrowdsale {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) public balances;\n\n  /**\n   * @dev Withdraw tokens only after crowdsale ends.\n   */\n  function withdrawTokens() public {\n    require(hasClosed());\n    uint256 amount = balances[msg.sender];\n    require(amount > 0);\n    balances[msg.sender] = 0;\n    _deliverTokens(msg.sender, amount);\n  }\n\n  /**\n   * @dev Overrides parent by storing balances instead of issuing tokens right away.\n   * @param _beneficiary Token purchaser\n   * @param _tokenAmount Amount of tokens purchased\n   */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n  }\n\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\ncontract Oraclized is Ownable {\n\n    address public oracle;\n\n    constructor(address _oracle) public {\n        oracle = _oracle;\n    }\n\n    /**\n     * @dev Change oracle address\n     * @param _oracle Oracle address\n     */\n    function setOracle(address _oracle) public onlyOwner {\n        oracle = _oracle;\n    }\n\n    /**\n     * @dev Modifier to allow access only by oracle\n     */\n    modifier onlyOracle() {\n        require(msg.sender == oracle);\n        _;\n    }\n\n    /**\n     * @dev Modifier to allow access only by oracle or owner\n     */\n    modifier onlyOwnerOrOracle() {\n        require((msg.sender == oracle) || (msg.sender == owner));\n        _;\n    }\n}\n\ncontract KYCCrowdsale is Oraclized, PostDeliveryCrowdsale {\n    using SafeMath for uint256;\n\n    /**\n     * @dev etherPriceInUsd Ether price in cents\n     * @dev usdRaised Total USD raised while ICO in cents\n     * @dev weiInvested Stores amount of wei invested by each user\n     * @dev usdInvested Stores amount of USD invested by each user in cents\n     */\n    uint256 public etherPriceInUsd;\n    uint256 public usdRaised;\n    mapping (address => uint256) public weiInvested;\n    mapping (address => uint256) public usdInvested;\n\n    /**\n     * @dev KYCPassed Registry of users who passed KYC\n     * @dev KYCRequired Registry of users who has to passed KYC\n     */\n    mapping (address => bool) public KYCPassed;\n    mapping (address => bool) public KYCRequired;\n\n    /**\n     * @dev KYCRequiredAmountInUsd Amount in cents invested starting from which user must pass KYC\n     */\n    uint256 public KYCRequiredAmountInUsd;\n\n    event EtherPriceUpdated(uint256 _cents);\n\n    /**\n     * @param _kycAmountInUsd Amount in cents invested starting from which user must pass KYC\n     */\n    constructor(uint256 _kycAmountInUsd, uint256 _etherPrice) public {\n        require(_etherPrice > 0);\n\n        KYCRequiredAmountInUsd = _kycAmountInUsd;\n        etherPriceInUsd = _etherPrice;\n    }\n\n    /**\n     * @dev Update amount required to pass KYC\n     * @param _cents Amount in cents invested starting from which user must pass KYC\n     */\n    function setKYCRequiredAmount(uint256 _cents) external onlyOwnerOrOracle {\n        require(_cents > 0);\n\n        KYCRequiredAmountInUsd = _cents;\n    }\n\n    /**\n     * @dev Set ether conversion rate\n     * @param _cents Price of 1 ETH in cents\n     */\n    function setEtherPrice(uint256 _cents) public onlyOwnerOrOracle {\n        require(_cents > 0);\n\n        etherPriceInUsd = _cents;\n\n        emit EtherPriceUpdated(_cents);\n    }\n\n    /**\n     * @dev Check if KYC is required for address\n     * @param _address Address to check\n     */\n    function isKYCRequired(address _address) external view returns(bool) {\n        return KYCRequired[_address];\n    }\n\n    /**\n     * @dev Check if KYC is passed by address\n     * @param _address Address to check\n     */\n    function isKYCPassed(address _address) external view returns(bool) {\n        return KYCPassed[_address];\n    }\n\n    /**\n     * @dev Check if KYC is not required or passed\n     * @param _address Address to check\n     */\n    function isKYCSatisfied(address _address) public view returns(bool) {\n        return !KYCRequired[_address] || KYCPassed[_address];\n    }\n\n    /**\n     * @dev Returns wei invested by specific amount\n     * @param _account Account you would like to get wei for\n     */\n    function weiInvestedOf(address _account) external view returns (uint256) {\n        return weiInvested[_account];\n    }\n\n    /**\n     * @dev Returns cents invested by specific amount\n     * @param _account Account you would like to get cents for\n     */\n    function usdInvestedOf(address _account) external view returns (uint256) {\n        return usdInvested[_account];\n    }\n\n    /**\n     * @dev Update KYC status for set of addresses\n     * @param _addresses Addresses to update\n     * @param _completed Is KYC passed or not\n     */\n    function updateKYCStatus(address[] _addresses, bool _completed) public onlyOwnerOrOracle {\n        for (uint16 index = 0; index < _addresses.length; index++) {\n            KYCPassed[_addresses[index]] = _completed;\n        }\n    }\n\n    /**\n     * @dev Override update purchasing state\n     *      - update sum of funds invested\n     *      - if total amount invested higher than KYC amount set KYC required to true\n     */\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n        super._updatePurchasingState(_beneficiary, _weiAmount);\n\n        uint256 usdAmount = _weiToUsd(_weiAmount);\n        usdRaised = usdRaised.add(usdAmount);\n        usdInvested[_beneficiary] = usdInvested[_beneficiary].add(usdAmount);\n        weiInvested[_beneficiary] = weiInvested[_beneficiary].add(_weiAmount);\n\n        if (usdInvested[_beneficiary] >= KYCRequiredAmountInUsd) {\n            KYCRequired[_beneficiary] = true;\n        }\n    }\n\n    /**\n     * @dev Override token withdraw\n     *      - do not allow token withdraw in case KYC required but not passed\n     */\n    function withdrawTokens() public {\n        require(isKYCSatisfied(msg.sender));\n\n        super.withdrawTokens();\n    }\n\n    /**\n     * @dev Converts wei to cents\n     * @param _wei Wei amount\n     */\n    function _weiToUsd(uint256 _wei) internal view returns (uint256) {\n        return _wei.mul(etherPriceInUsd).div(1e18);\n    }\n\n    /**\n     * @dev Converts cents to wei\n     * @param _cents Cents amount\n     */\n    function _usdToWei(uint256 _cents) internal view returns (uint256) {\n        return _cents.mul(1e18).div(etherPriceInUsd);\n    }\n}\n\ncontract KYCRefundableCrowdsale is KYCCrowdsale {\n    using SafeMath for uint256;\n\n    /**\n     * @dev percentage multiplier to present percentage as decimals. 5 decimal by default\n     * @dev weiOnFinalize ether balance which was on finalize & will be returned to users in case of failed crowdsale\n     */\n    uint256 private percentage = 100 * 1000;\n    uint256 private weiOnFinalize;\n\n    /**\n     * @dev goalReached specifies if crowdsale goal is reached\n     * @dev isFinalized is crowdsale finished\n     * @dev tokensWithdrawn total amount of tokens already withdrawn\n     */\n    bool public goalReached = false;\n    bool public isFinalized = false;\n    uint256 public tokensWithdrawn;\n\n    event Refund(address indexed _account, uint256 _amountInvested, uint256 _amountRefunded);\n    event Finalized();\n    event OwnerWithdraw(uint256 _amount);\n\n    /**\n     * @dev Set is goal reached or not\n     * @param _success Is goal reached or not\n     */\n    function setGoalReached(bool _success) external onlyOwner {\n        require(!isFinalized);\n        goalReached = _success;\n    }\n\n    /**\n     * @dev Investors can claim refunds here if crowdsale is unsuccessful\n     */\n    function claimRefund() public {\n        require(isFinalized);\n        require(!goalReached);\n\n        uint256 refundPercentage = _refundPercentage();\n        uint256 amountInvested = weiInvested[msg.sender];\n        uint256 amountRefunded = amountInvested.mul(refundPercentage).div(percentage);\n        weiInvested[msg.sender] = 0;\n        usdInvested[msg.sender] = 0;\n        msg.sender.transfer(amountRefunded);\n\n        emit Refund(msg.sender, amountInvested, amountRefunded);\n    }\n\n    /**\n     * @dev Must be called after crowdsale ends, to do some extra finalization works.\n     */\n    function finalize() public onlyOwner {\n        require(!isFinalized);\n\n        // NOTE: We do this because we would like to allow withdrawals earlier than closing time in case of crowdsale success\n        closingTime = block.timestamp;\n        weiOnFinalize = address(this).balance;\n        isFinalized = true;\n\n        emit Finalized();\n    }\n\n    /**\n     * @dev Override. Withdraw tokens only after crowdsale ends.\n     * Make sure crowdsale is successful & finalized\n     */\n    function withdrawTokens() public {\n        require(isFinalized);\n        require(goalReached);\n\n        tokensWithdrawn = tokensWithdrawn.add(balances[msg.sender]);\n\n        super.withdrawTokens();\n    }\n\n    /**\n     * @dev Is called by owner to send funds to ICO wallet.\n     * params _amount Amount to be sent.\n     */\n    function ownerWithdraw(uint256 _amount) external onlyOwner {\n        require(_amount > 0);\n\n        wallet.transfer(_amount);\n\n        emit OwnerWithdraw(_amount);\n    }\n\n    /**\n     * @dev Override. Determines how ETH is stored/forwarded on purchases.\n     */\n    function _forwardFunds() internal {\n        // NOTE: Do nothing here. Keep funds in contract by default\n    }\n\n    /**\n     * @dev Calculates refund percentage in case some funds will be used by dev team on crowdsale needs\n     */\n    function _refundPercentage() internal view returns (uint256) {\n        return weiOnFinalize.mul(percentage).div(weiRaised);\n    }\n}\n\ncontract AerumCrowdsale is KYCRefundableCrowdsale {\n    using SafeMath for uint256;\n\n    /**\n     * @dev minInvestmentInUsd Minimal investment allowed in cents\n     */\n    uint256 public minInvestmentInUsd;\n\n    /**\n     * @dev tokensSold Amount of tokens sold by this time\n     */\n    uint256 public tokensSold;\n\n    /**\n     * @dev pledgeTotal Total pledge collected from all investors\n     * @dev pledgeClosingTime Time when pledge is closed & it's not possible to pledge more or use pledge more\n     * @dev pledges Mapping of all pledges done by investors\n     */\n    uint256 public pledgeTotal;\n    uint256 public pledgeClosingTime;\n    mapping (address => uint256) public pledges;\n\n    /**\n     * @dev whitelistedRate Rate which is used while whitelisted sale (XRM to ETH)\n     * @dev publicRate Rate which is used white public crowdsale (XRM to ETH)\n     */\n    uint256 public whitelistedRate;\n    uint256 public publicRate;\n\n\n    event AirDrop(address indexed _account, uint256 _amount);\n    event MinInvestmentUpdated(uint256 _cents);\n    event RateUpdated(uint256 _whitelistedRate, uint256 _publicRate);\n    event Withdraw(address indexed _account, uint256 _amount);\n\n    /**\n     * @param _token ERC20 compatible token on which crowdsale is done\n     * @param _wallet Address where all ETH funded will be sent after ICO finishes\n     * @param _whitelistedRate Rate which is used while whitelisted sale\n     * @param _publicRate Rate which is used white public crowdsale\n     * @param _openingTime Crowdsale open time\n     * @param _closingTime Crowdsale close time\n     * @param _pledgeClosingTime Time when pledge is closed & no more active\n\\\\\n     * @param _kycAmountInUsd Amount on which KYC will be required in cents\n     * @param _etherPriceInUsd ETH price in cents\n     */\n    constructor(\n        ERC20 _token, address _wallet,\n        uint256 _whitelistedRate, uint256 _publicRate,\n        uint256 _openingTime, uint256 _closingTime,\n        uint256 _pledgeClosingTime,\n        uint256 _kycAmountInUsd, uint256 _etherPriceInUsd)\n    Oraclized(msg.sender)\n    Crowdsale(_whitelistedRate, _wallet, _token)\n    TimedCrowdsale(_openingTime, _closingTime)\n    KYCCrowdsale(_kycAmountInUsd, _etherPriceInUsd)\n    KYCRefundableCrowdsale()\n    public {\n        require(_openingTime < _pledgeClosingTime && _pledgeClosingTime < _closingTime);\n        pledgeClosingTime = _pledgeClosingTime;\n\n        whitelistedRate = _whitelistedRate;\n        publicRate = _publicRate;\n\n        minInvestmentInUsd = 25 * 100;\n    }\n\n    /**\n     * @dev Update minimal allowed investment\n     */\n    function setMinInvestment(uint256 _cents) external onlyOwnerOrOracle {\n        minInvestmentInUsd = _cents;\n\n        emit MinInvestmentUpdated(_cents);\n    }\n\n    /**\n     * @dev Update closing time\n     * @param _closingTime Closing time\n     */\n    function setClosingTime(uint256 _closingTime) external onlyOwner {\n        require(_closingTime >= openingTime);\n\n        closingTime = _closingTime;\n    }\n\n    /**\n     * @dev Update pledge closing time\n     * @param _pledgeClosingTime Pledge closing time\n     */\n    function setPledgeClosingTime(uint256 _pledgeClosingTime) external onlyOwner {\n        require(_pledgeClosingTime >= openingTime && _pledgeClosingTime <= closingTime);\n\n        pledgeClosingTime = _pledgeClosingTime;\n    }\n\n    /**\n     * @dev Update rates\n     * @param _whitelistedRate Rate which is used while whitelisted sale (XRM to ETH)\n     * @param _publicRate Rate which is used white public crowdsale (XRM to ETH)\n     */\n    function setRate(uint256 _whitelistedRate, uint256 _publicRate) public onlyOwnerOrOracle {\n        require(_whitelistedRate > 0);\n        require(_publicRate > 0);\n\n        whitelistedRate = _whitelistedRate;\n        publicRate = _publicRate;\n\n        emit RateUpdated(_whitelistedRate, _publicRate);\n    }\n\n    /**\n     * @dev Update rates & ether price. Done to not make 2 requests from oracle.\n     * @param _whitelistedRate Rate which is used while whitelisted sale\n     * @param _publicRate Rate which is used white public crowdsale\n     * @param _cents Price of 1 ETH in cents\n     */\n    function setRateAndEtherPrice(uint256 _whitelistedRate, uint256 _publicRate, uint256 _cents) external onlyOwnerOrOracle {\n        setRate(_whitelistedRate, _publicRate);\n        setEtherPrice(_cents);\n    }\n\n    /**\n     * @dev Send remaining tokens back\n     * @param _to Address to send\n     * @param _amount Amount to send\n     */\n    function sendTokens(address _to, uint256 _amount) external onlyOwner {\n        if (!isFinalized || goalReached) {\n            // NOTE: if crowdsale not finished or successful we should keep at least tokens sold\n            _ensureTokensAvailable(_amount);\n        }\n\n        token.transfer(_to, _amount);\n    }\n\n    /**\n     * @dev Get balance fo tokens bought\n     * @param _address Address of investor\n     */\n    function balanceOf(address _address) external view returns (uint256) {\n        return balances[_address];\n    }\n\n    /**\n     * @dev Check if all tokens were sold\n     */\n    function capReached() public view returns (bool) {\n        return tokensSold >= token.balanceOf(this);\n    }\n\n    /**\n     * @dev Returns percentage of tokens sold\n     */\n    function completionPercentage() external view returns (uint256) {\n        uint256 balance = token.balanceOf(this);\n        if (balance == 0) {\n            return 0;\n        }\n\n        return tokensSold.mul(100).div(balance);\n    }\n\n    /**\n     * @dev Returns remaining tokens based on stage\n     */\n    function tokensRemaining() external view returns(uint256) {\n        return token.balanceOf(this).sub(_tokensLocked());\n    }\n\n    /**\n     * @dev Override. Withdraw tokens only after crowdsale ends.\n     * Adding withdraw event\n     */\n    function withdrawTokens() public {\n        uint256 amount = balances[msg.sender];\n        super.withdrawTokens();\n\n        emit Withdraw(msg.sender, amount);\n    }\n\n    /**\n     * @dev Override crowdsale pre validate. Check:\n     *      - is amount invested larger than minimal\n     *      - there is enough tokens on balance of contract to proceed\n     *      - check if pledges amount are not more than total coins (in case of pledge period)\n     */\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n        super._preValidatePurchase(_beneficiary, _weiAmount);\n\n        require(_totalInvestmentInUsd(_beneficiary, _weiAmount) >= minInvestmentInUsd);\n        _ensureTokensAvailableExcludingPledge(_beneficiary, _getTokenAmount(_weiAmount));\n    }\n\n    /**\n     * @dev Returns total investment of beneficiary including current one in cents\n     * @param _beneficiary Address to check\n     * @param _weiAmount Current amount being invested in wei\n     */\n    function _totalInvestmentInUsd(address _beneficiary, uint256 _weiAmount) internal view returns(uint256) {\n        return usdInvested[_beneficiary].add(_weiToUsd(_weiAmount));\n    }\n\n    /**\n     * @dev Override process purchase\n     *      - additionally sum tokens sold\n     */\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n        super._processPurchase(_beneficiary, _tokenAmount);\n\n        tokensSold = tokensSold.add(_tokenAmount);\n\n        if (pledgeOpen()) {\n            // NOTE: In case of buying tokens inside pledge it doesn't matter how we decrease pledge as we change it anyway\n            _decreasePledge(_beneficiary, _tokenAmount);\n        }\n    }\n\n    /**\n     * @dev Decrease pledge of account by specific token amount\n     * @param _beneficiary Account to increase pledge\n     * @param _tokenAmount Amount of tokens to decrease pledge\n     */\n    function _decreasePledge(address _beneficiary, uint256 _tokenAmount) internal {\n        if (pledgeOf(_beneficiary) <= _tokenAmount) {\n            pledgeTotal = pledgeTotal.sub(pledgeOf(_beneficiary));\n            pledges[_beneficiary] = 0;\n        } else {\n            pledgeTotal = pledgeTotal.sub(_tokenAmount);\n            pledges[_beneficiary] = pledges[_beneficiary].sub(_tokenAmount);\n        }\n    }\n\n    /**\n     * @dev Override to use whitelisted or public crowdsale rates\n     */\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n        uint256 currentRate = getCurrentRate();\n        return _weiAmount.mul(currentRate);\n    }\n\n    /**\n     * @dev Returns current XRM to ETH rate based on stage\n     */\n    function getCurrentRate() public view returns (uint256) {\n        if (pledgeOpen()) {\n            return whitelistedRate;\n        }\n        return publicRate;\n    }\n\n    /**\n     * @dev Check if pledge period is still open\n     */\n    function pledgeOpen() public view returns (bool) {\n        return (openingTime <= block.timestamp) && (block.timestamp <= pledgeClosingTime);\n    }\n\n    /**\n     * @dev Returns amount of pledge for account\n     */\n    function pledgeOf(address _address) public view returns (uint256) {\n        return pledges[_address];\n    }\n\n    /**\n     * @dev Check if all tokens were pledged\n     */\n    function pledgeCapReached() public view returns (bool) {\n        return pledgeTotal.add(tokensSold) >= token.balanceOf(this);\n    }\n\n    /**\n     * @dev Returns percentage of tokens pledged\n     */\n    function pledgeCompletionPercentage() external view returns (uint256) {\n        uint256 balance = token.balanceOf(this);\n        if (balance == 0) {\n            return 0;\n        }\n\n        return pledgeTotal.add(tokensSold).mul(100).div(balance);\n    }\n\n    /**\n     * @dev Pledges\n     * @param _addresses list of addresses\n     * @param _tokens List of tokens to drop\n     */\n    function pledge(address[] _addresses, uint256[] _tokens) external onlyOwnerOrOracle {\n        require(_addresses.length == _tokens.length);\n        _ensureTokensListAvailable(_tokens);\n\n        for (uint16 index = 0; index < _addresses.length; index++) {\n            pledgeTotal = pledgeTotal.sub(pledges[_addresses[index]]).add(_tokens[index]);\n            pledges[_addresses[index]] = _tokens[index];\n        }\n    }\n\n    /**\n     * @dev Air drops tokens to users\n     * @param _addresses list of addresses\n     * @param _tokens List of tokens to drop\n     */\n    function airDropTokens(address[] _addresses, uint256[] _tokens) external onlyOwnerOrOracle {\n        require(_addresses.length == _tokens.length);\n        _ensureTokensListAvailable(_tokens);\n\n        for (uint16 index = 0; index < _addresses.length; index++) {\n            tokensSold = tokensSold.add(_tokens[index]);\n            balances[_addresses[index]] = balances[_addresses[index]].add(_tokens[index]);\n\n            emit AirDrop(_addresses[index], _tokens[index]);\n        }\n    }\n\n    /**\n     * @dev Ensure token list total is available\n     * @param _tokens list of tokens amount\n     */\n    function _ensureTokensListAvailable(uint256[] _tokens) internal {\n        uint256 total;\n        for (uint16 index = 0; index < _tokens.length; index++) {\n            total = total.add(_tokens[index]);\n        }\n\n        _ensureTokensAvailable(total);\n    }\n\n    /**\n     * @dev Ensure amount of tokens you would like to buy or pledge is available\n     * @param _tokens Amount of tokens to buy or pledge\n     */\n    function _ensureTokensAvailable(uint256 _tokens) internal view {\n        require(_tokens.add(_tokensLocked()) <= token.balanceOf(this));\n    }\n\n    /**\n     * @dev Ensure amount of tokens you would like to buy or pledge is available excluding pledged for account\n     * @param _account Account which is checked for pledge\n     * @param _tokens Amount of tokens to buy or pledge\n     */\n    function _ensureTokensAvailableExcludingPledge(address _account, uint256 _tokens) internal view {\n        require(_tokens.add(_tokensLockedExcludingPledge(_account)) <= token.balanceOf(this));\n    }\n\n    /**\n     * @dev Returns locked or sold tokens based on stage\n     */\n    function _tokensLocked() internal view returns(uint256) {\n        uint256 locked = tokensSold.sub(tokensWithdrawn);\n\n        if (pledgeOpen()) {\n            locked = locked.add(pledgeTotal);\n        }\n\n        return locked;\n    }\n\n    /**\n     * @dev Returns locked or sold tokens based on stage excluding pledged for account\n     * @param _account Account which is checked for pledge\n     */\n    function _tokensLockedExcludingPledge(address _account) internal view returns(uint256) {\n        uint256 locked = _tokensLocked();\n\n        if (pledgeOpen()) {\n            locked = locked.sub(pledgeOf(_account));\n        }\n\n        return locked;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000a249f0e9a464b9685f66992f41e1012388e39e81000000000000000000000000ba9d007aa3da723303381c6e7870f95a85795bdf00000000000000000000000000000000000000000000000000000000000017700000000000000000000000000000000000000000000000000000000000000d05000000000000000000000000000000000000000000000000000000005bd99940000000000000000000000000000000000000000000000000000000005c537def000000000000000000000000000000000000000000000000000000005c2a9f6f0000000000000000000000000000000000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000000007530"
}