{
  "address": "0x4cb77c9fc336d3a7e847d96dc91fa28394080393",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RivetToken_Selfdrop",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-12\n*/\n\npragma solidity ^0.5.2;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n\n  function balanceOf(address _who) public view returns (uint256);\n\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transfer(address _to, uint256 _value) public returns (bool);\n\n  function approve(address _spender, uint256 _value)\n    public returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract RivetToken_Selfdrop {\n\n    using SafeMath for uint256;\n    address owner;\n    address selfdroptoken;\n    address[] public hugeetherinvest;\n\n    mapping (address => bool) public blacklist;\n\n    uint256 public rate = 0;\n    uint256 public totalRemaining;\n    uint256 public selfdropvalue;\n\n    event Distr(address indexed to, uint256 amount);\n    event DistrFinished();\n    event crowdsaleFinishedd();\n\n    bool public distributionFinished;\n    bool public crowdsaleFinished;\n    \n    modifier canDistr() {\n        require(!distributionFinished);\n        _;\n    }\n    modifier canDistrCS() {\n        require(!crowdsaleFinished);\n        _;\n    }\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlynotblacklist() {\n        require(blacklist[msg.sender] == false);\n        _;\n    }\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    function setselfdroptoken(address _selfdroptoken) public onlyOwner {\n        require (_selfdroptoken != address(0));\n        selfdroptoken = _selfdroptoken;\n        totalRemaining = ERC20(selfdroptoken).balanceOf(address(this));\n    } \n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n    function startsale() onlyOwner public returns (bool) {\n        distributionFinished = false;\n        return true;\n    }\n    function startcrowdsale() onlyOwner public returns (bool) {\n        crowdsaleFinished = false;\n        return true;\n    }\n    function finishselfdrop() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        emit DistrFinished();\n        return true;\n    }\n    function finishcrowdsale() onlyOwner canDistrCS public returns (bool) {\n        crowdsaleFinished = true;\n        emit crowdsaleFinishedd();\n        return true;\n    }\n    \n    function distr(address _to, uint256 _amount) private returns (bool) {\n\n        totalRemaining = totalRemaining.sub(_amount);\n        ERC20(selfdroptoken).transfer(_to,_amount);\n        emit Distr(_to, _amount);\n        return true;\n        \n        if (totalRemaining == 0) {\n            distributionFinished = true;\n            crowdsaleFinished = true;\n        }\n    }\n    function setselfdropvalue(uint256 _value) public onlyOwner {\n        selfdropvalue = _value.mul(1e8);\n    }\n    function () external payable{\n        if(msg.value == 0){getTokenss();}else{getTokens();}         \n    }\n    function getTokenss() canDistr onlynotblacklist internal {\n        \n        require (selfdropvalue != 0);\n        \n        if (selfdropvalue > totalRemaining) {\n            selfdropvalue = totalRemaining;\n        }\n        \n        require(selfdropvalue <= totalRemaining);\n        \n        address investor = msg.sender;\n        uint256 toGive = selfdropvalue;\n        \n        distr(investor, toGive);\n        \n        if (toGive > 0) {\n            blacklist[investor] = true;\n        }\n    }\n    \n    function setethrate(uint _rate) onlyOwner public {\n        rate = _rate;\n    }\n    function getTokens() canDistrCS public payable {\n        \n        require(msg.value >= 0.001 ether);\n        require(rate > 0);\n        \n        uint256 value = msg.value.mul(rate);\n        \n        require(totalRemaining >= value);\n        \n        address investor = msg.sender;\n        uint256 toGive = value;\n        \n        distr(investor, toGive);\n        \n        if(msg.value >= 0.1 ether){\n            hugeetherinvest.push(msg.sender);\n        }\n    }\n    function withdrawfromcontract() public onlyOwner {\n        ERC20(selfdroptoken).transfer(owner,ERC20(selfdroptoken).balanceOf(address(this)));\n    }\n    function withdraw() public onlyOwner {\n        msg.sender.transfer(address(this).balance);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"startsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setselfdropvalue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setethrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startcrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishselfdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_selfdroptoken\",\"type\":\"address\"}],\"name\":\"setselfdroptoken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishcrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfdropvalue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hugeetherinvest\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawfromcontract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"crowdsaleFinishedd\",\"type\":\"event\"}]",
  "bytecode": "6080604052600060045534801561001557600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611313806100656000396000f3fe608060405260043610610126576000357c010000000000000000000000000000000000000000000000000000000090048063ae8f2328116100b2578063d8a5436011610081578063d8a54360146103eb578063e6a7b3ec14610416578063ece84fd51461042d578063f2fde38b1461045c578063f9f92be4146104ad57610126565b8063ae8f2328146102e7578063c108d54214610316578063c880ee9d14610345578063caebf8721461037057610126565b806365b0e5b3116100f957806365b0e5b3146101f35780637b3303b11461022e578063a27966dd1461025d578063a47769551461028c578063aa6ca808146102dd57610126565b80631a0582fc146101475780632c4e722e146101765780633ccfd60b146101a15780635fffad5a146101b8575b600034141561013c57610137610516565b610145565b610144610649565b5b005b34801561015357600080fd5b5061015c610748565b604051808215151515815260200191505060405180910390f35b34801561018257600080fd5b5061018b6107c7565b6040518082815260200191505060405180910390f35b3480156101ad57600080fd5b506101b66107cd565b005b3480156101c457600080fd5b506101f1600480360360208110156101db57600080fd5b8101908080359060200190929190505050610888565b005b3480156101ff57600080fd5b5061022c6004803603602081101561021657600080fd5b8101908080359060200190929190505050610903565b005b34801561023a57600080fd5b50610243610968565b604051808215151515815260200191505060405180910390f35b34801561026957600080fd5b506102726109e7565b604051808215151515815260200191505060405180910390f35b34801561029857600080fd5b506102db600480360360208110156102af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aae565b005b6102e5610649565b005b3480156102f357600080fd5b506102fc610c85565b604051808215151515815260200191505060405180910390f35b34801561032257600080fd5b5061032b610d4c565b604051808215151515815260200191505060405180910390f35b34801561035157600080fd5b5061035a610d5f565b6040518082815260200191505060405180910390f35b34801561037c57600080fd5b506103a96004803603602081101561039357600080fd5b8101908080359060200190929190505050610d65565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103f757600080fd5b50610400610da3565b6040518082815260200191505060405180910390f35b34801561042257600080fd5b5061042b610da9565b005b34801561043957600080fd5b5061044261101d565b604051808215151515815260200191505060405180910390f35b34801561046857600080fd5b506104ab6004803603602081101561047f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611030565b005b3480156104b957600080fd5b506104fc600480360360208110156104d057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611105565b604051808215151515815260200191505060405180910390f35b600760009054906101000a900460ff1615151561053257600080fd5b60001515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561059157600080fd5b6000600654141515156105a357600080fd5b60055460065411156105b9576005546006819055505b600554600654111515156105cc57600080fd5b6000339050600060065490506105e28282611125565b506000811115610645576001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050565b600760019054906101000a900460ff1615151561066557600080fd5b66038d7ea4c68000341015151561067b57600080fd5b600060045411151561068c57600080fd5b60006106a36004543461129b90919063ffffffff16565b905080600554101515156106b657600080fd5b600033905060008290506106ca8282611125565b5067016345785d8a0000341015156107435760023390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107a557600080fd5b6000600760006101000a81548160ff0219169083151502179055506001905090565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561082857600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610885573d6000803e3d6000fd5b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108e357600080fd5b6108fa6305f5e1008261129b90919063ffffffff16565b60068190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561095e57600080fd5b8060048190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109c557600080fd5b6000600760016101000a81548160ff0219169083151502179055506001905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a4457600080fd5b600760009054906101000a900460ff16151515610a6057600080fd5b6001600760006101000a81548160ff0219169083151502179055507f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc60405160405180910390a16001905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b0957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b4557600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d6020811015610c6b57600080fd5b810190808051906020019092919050505060058190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ce257600080fd5b600760019054906101000a900460ff16151515610cfe57600080fd5b6001600760016101000a81548160ff0219169083151502179055507fd1c8bbfa76e9f070045ef4a7018db364903bb8506d198e39ccc82c712fd5542760405160405180910390a16001905090565b600760009054906101000a900460ff1681565b60065481565b600281815481101515610d7457fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e0457600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610f1f57600080fd5b505afa158015610f33573d6000803e3d6000fd5b505050506040513d6020811015610f4957600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610fdf57600080fd5b505af1158015610ff3573d6000803e3d6000fd5b505050506040513d602081101561100957600080fd5b810190808051906020019092919050505050565b600760019054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561108b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561110257806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60036020528060005260406000206000915054906101000a900460ff1681565b600061113c826005546112ce90919063ffffffff16565b600581905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561120757600080fd5b505af115801561121b573d6000803e3d6000fd5b505050506040513d602081101561123157600080fd5b8101908080519060200190929190505050508273ffffffffffffffffffffffffffffffffffffffff167f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a77836040518082815260200191505060405180910390a26001905092915050565b600080828402905060008414806112bc57508284828115156112b957fe5b04145b15156112c457fe5b8091505092915050565b60008282111515156112dc57fe5b81830390509291505056fea165627a7a72305820532a1ba42cfeb55ece8864c2ffaaa25848f86e939c64a87a51ef9ad5265baa8f0029"
}