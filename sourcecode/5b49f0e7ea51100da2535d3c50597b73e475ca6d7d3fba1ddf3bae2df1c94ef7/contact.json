{
  "address": "0xd7b06571942f1c76ceda0e26db8dd4c1acb59cbf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WalesaToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-28\n*/\n\npragma solidity ^0.4.19;\n\n/**\n    Wałęsa, dawaj moje sto milionów!\n    https://www.youtube.com/watch?v=ZBK_nZ1aGlA\n    \n    100 million of this token can be claimed by first 12197466 users,\n    who make a transfer or call walesaDawajMojeStoMilionow() function.\n */\ncontract WalesaToken {\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n    uint256 constant private MAX_UINT256 = 2**256 - 1;\n    uint256 constant private STO_MILIONOW = 10000000000;\n    \n    string constant public symbol = \"WLST\";\n    string constant public name = \"Wałęsa Token\";\n    uint8 constant public decimals = 2;\n    \n    uint256 public totalSupply;\n    uint256 private claimedSupply;\n    \n    mapping (address => bool) private claimed;\n    mapping (address => uint256) private balances;\n    mapping (address => mapping (address => uint256)) private allowed;\n    \n    function WalesaToken() public {\n        totalSupply = 0xBA1E5A * STO_MILIONOW;\n    }\n    \n    function balanceOf(address owner) public view returns (uint256) {\n        if (!claimed[owner] && claimedSupply < totalSupply) {\n            return STO_MILIONOW;\n        }\n        return balances[owner];\n    }\n    \n    function transfer(address to, uint256 value) public returns (bool) {\n        walesaDawajNaszeStoMilionow(msg.sender);\n        walesaDawajNaszeStoMilionow(to);\n        require(balances[msg.sender] >= value);\n        balances[msg.sender] -= value;\n        balances[to] += value;\n        Transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowed[from][msg.sender] >= value);\n        if (allowed[from][msg.sender] < MAX_UINT256) {\n            allowed[from][msg.sender] -= value;\n        }\n        walesaDawajNaszeStoMilionow(from);\n        walesaDawajNaszeStoMilionow(to);\n        require(balances[from] >= value);\n        balances[from] -= value;\n        balances[to] += value;\n        Transfer(from, to, value);\n        return true;\n    }\n    \n    function approve(address spender, uint256 value) public returns (bool) {\n        require(allowed[msg.sender][spender] == 0 || value == 0);\n        allowed[msg.sender][spender] = value;\n        Approval(msg.sender, spender, value);\n        return true;\n    }\n    \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return allowed[owner][spender];\n    }\n    \n    function walesaDawajMojeStoMilionow() public {\n        walesaDawajNaszeStoMilionow(msg.sender);\n    }\n    \n    function walesaDawajNaszeStoMilionow(address owner) private {\n        if (!claimed[owner] && claimedSupply < totalSupply) {\n            claimed[owner] = true;\n            balances[owner] = STO_MILIONOW;\n            claimedSupply += STO_MILIONOW;\n        }\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6701b1574e98e628006000556106a38061002a6000396000f3006060604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806310f91e391461016857806318160ddd1461017d57806323b872dd146101a2578063313ce567146101ca57806370a08231146101f357806395d89b4114610212578063a9059cbb14610225578063dd62ed3e14610247575b600080fd5b34156100b357600080fd5b6100bb61026c565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100f75780820151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013d57600080fd5b610154600160a060020a03600435166024356102a3565b604051901515815260200160405180910390f35b341561017357600080fd5b61017b610349565b005b341561018857600080fd5b610190610354565b60405190815260200160405180910390f35b34156101ad57600080fd5b610154600160a060020a036004358116906024351660443561035a565b34156101d557600080fd5b6101dd610496565b60405160ff909116815260200160405180910390f35b34156101fe57600080fd5b610190600160a060020a036004351661049b565b341561021d57600080fd5b6100bb6104f8565b341561023057600080fd5b610154600160a060020a036004351660243561052f565b341561025257600080fd5b610190600160a060020a03600435811690602435166105d7565b60408051908101604052600e81527f5761c582c499736120546f6b656e000000000000000000000000000000000000602082015281565b600160a060020a03338116600090815260046020908152604080832093861683529290529081205415806102d5575081155b15156102e057600080fd5b600160a060020a03338116600081815260046020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b61035233610602565b565b60005481565b600160a060020a038084166000908152600460209081526040808320339094168352929052908120548290101561039057600080fd5b600160a060020a03808516600090815260046020908152604080832033909416835292905220546000199010156103ef57600160a060020a03808516600090815260046020908152604080832033909416835292905220805483900390555b6103f884610602565b61040183610602565b600160a060020a0384166000908152600360205260409020548290101561042757600080fd5b600160a060020a038085166000818152600360205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600281565b600160a060020a03811660009081526002602052604081205460ff161580156104c75750600054600154105b156104d857506402540be4006104f3565b50600160a060020a0381166000908152600360205260409020545b919050565b60408051908101604052600481527f574c535400000000000000000000000000000000000000000000000000000000602082015281565b600061053a33610602565b61054383610602565b600160a060020a0333166000908152600360205260409020548290101561056957600080fd5b600160a060020a033381166000818152600360205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b600160a060020a03811660009081526002602052604090205460ff1615801561062e5750600054600154105b1561067457600160a060020a0381166000908152600260209081526040808320805460ff1916600190811790915560039092529091206402540be4009081905581540190555b505600a165627a7a7230582050e594f0a5c09e366d295ad3a6b8eb9c65729b8b71d53d6c88695aba5018a47c0029"
}