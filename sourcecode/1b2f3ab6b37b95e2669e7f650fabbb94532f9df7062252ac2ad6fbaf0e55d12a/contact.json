{
  "address": "0xa3baa9cd4f5c0f75541e7c78462a6f36ed62049a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Referrers",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-30\n*/\n\npragma solidity 0.5.0;\n\n// File: contracts/lib/openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: contracts/lib/openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/access/roles/OperatorRole.sol\n\ncontract OperatorRole is Ownable {\n    using Roles for Roles.Role;\n\n    event OperatorAdded(address indexed account);\n    event OperatorRemoved(address indexed account);\n\n    Roles.Role private operators;\n\n    constructor() public {\n        operators.add(msg.sender);\n    }\n\n    modifier onlyOperator() {\n        require(isOperator(msg.sender));\n        _;\n    }\n    \n    function isOperator(address account) public view returns (bool) {\n        return operators.has(account);\n    }\n\n    function addOperator(address account) public onlyOwner() {\n        operators.add(account);\n        emit OperatorAdded(account);\n    }\n\n    function removeOperator(address account) public onlyOwner() {\n        operators.remove(account);\n        emit OperatorRemoved(account);\n    }\n\n}\n\n// File: contracts/Referrers.sol\n\ncontract Referrers is OperatorRole {\n    using Roles for Roles.Role;\n\n    event ReferrerAdded(address indexed account);\n    event ReferrerRemoved(address indexed account);\n\n    Roles.Role private referrers;\n\n    uint32 internal index;\n    uint16 public constant limit = 10;\n    mapping(uint32 => address) internal indexToAddress;\n    mapping(address => uint32) internal addressToIndex;\n\n    modifier onlyReferrer() {\n        require(isReferrer(msg.sender));\n        _;\n    }\n\n    function getNumberOfAddresses() public view onlyOperator() returns (uint32) {\n        return index;\n    }\n\n    function addressOfIndex(uint32 _index) onlyOperator() public view returns (address) {\n        return indexToAddress[_index];\n    }\n    \n    function isReferrer(address _account) public view returns (bool) {\n        return referrers.has(_account);\n    }\n\n    function addReferrer(address _account) public onlyOperator() {\n        referrers.add(_account);\n        indexToAddress[index] = _account;\n        addressToIndex[_account] = index;\n        index++;\n        emit ReferrerAdded(_account);\n    }\n\n    function addReferrers(address[limit] memory accounts) public onlyOperator() {\n        for (uint16 i=0; i<limit; i++) {\n            if (accounts[i] != address(0x0)) {\n                addReferrer(accounts[i]);\n            }\n        }\n    }\n\n    function removeReferrer(address _account) public onlyOperator() {\n        referrers.remove(_account);\n        indexToAddress[addressToIndex[_account]] = address(0x0);\n        emit ReferrerRemoved(_account);\n    }\n\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36100e13360016100e664010000000002610cdd179091906401000000009004565b610239565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561012257600080fd5b61013b82826101a5640100000000026401000000009004565b15151561014757600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156101e257600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610eb3806102486000396000f3fe6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632e61319d146100d55780636d70f7ae1461010c578063715018a6146101755780637a00e2e31461018c5780638da5cb5b146101dd5780638f32d59b146102345780639870d7fe14610263578063a1c13ca8146102b4578063a4d66daf14610328578063ac8a584a1461035b578063d64d6968146103ac578063e52d040414610415578063f2fde38b14610496578063fefa9bb1146104e7575b600080fd5b3480156100e157600080fd5b506100ea610538565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561011857600080fd5b5061015b6004803603602081101561012f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610566565b604051808215151515815260200191505060405180910390f35b34801561018157600080fd5b5061018a610583565b005b34801561019857600080fd5b506101db600480360360208110156101af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610655565b005b3480156101e957600080fd5b506101f2610771565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024057600080fd5b5061024961079a565b604051808215151515815260200191505060405180910390f35b34801561026f57600080fd5b506102b26004803603602081101561028657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107f1565b005b3480156102c057600080fd5b5061032660048036036101408110156102d857600080fd5b81019080806101400190600a806020026040519081016040528092919082600a60200280828437600081840152601f19601f820116905080830192505050505050919291929050505061085e565b005b34801561033457600080fd5b5061033d610906565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561036757600080fd5b506103aa6004803603602081101561037e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061090b565b005b3480156103b857600080fd5b506103fb600480360360208110156103cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610978565b604051808215151515815260200191505060405180910390f35b34801561042157600080fd5b506104546004803603602081101561043857600080fd5b81019080803563ffffffff169060200190929190505050610995565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104a257600080fd5b506104e5600480360360208110156104b957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109f2565b005b3480156104f357600080fd5b506105366004803603602081101561050a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a11565b005b600061054333610566565b151561054e57600080fd5b600360009054906101000a900463ffffffff16905090565b600061057c826001610b9a90919063ffffffff16565b9050919050565b61058b61079a565b151561059657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61065e33610566565b151561066957600080fd5b61067d816002610c2e90919063ffffffff16565b600060046000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f68e673b5cfb652e620fba208d02d6b172a0dc242d4497d94a1f92bb5fa92bc3160405160405180910390a250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6107f961079a565b151561080457600080fd5b610818816001610cdd90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d60405160405180910390a250565b61086733610566565b151561087257600080fd5b60008090505b600a61ffff168161ffff16101561090257600073ffffffffffffffffffffffffffffffffffffffff16828261ffff16600a811015156108b357fe5b602002015173ffffffffffffffffffffffffffffffffffffffff161415156108f5576108f4828261ffff16600a811015156108ea57fe5b6020020151610a11565b5b8080600101915050610878565b5050565b600a81565b61091361079a565b151561091e57600080fd5b610932816001610c2e90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d60405160405180910390a250565b600061098e826002610b9a90919063ffffffff16565b9050919050565b60006109a033610566565b15156109ab57600080fd5b600460008363ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6109fa61079a565b1515610a0557600080fd5b610a0e81610d8d565b50565b610a1a33610566565b1515610a2557600080fd5b610a39816002610cdd90919063ffffffff16565b8060046000600360009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900463ffffffff16600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055506003600081819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff160217905550508073ffffffffffffffffffffffffffffffffffffffff167f51e6bb66cce1aac9478cbafcad3421bf2a600ce8ec3874296c671ab32c68ce9260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610bd757600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610c6a57600080fd5b610c748282610b9a565b1515610c7f57600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610d1957600080fd5b610d238282610b9a565b151515610d2f57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610dc957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea165627a7a72305820fa7aa9fb38ec891d73fecd122bdc86ee2de748faef23f376da4985b6b5655a360029"
}