{
  "address": "0xf8f87030c14285c675453c1d32bd4ae8ce24aef8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ExperienceToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-20\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n        \n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n\ncontract DividendToken is StandardToken, Ownable {\n    event PayDividend(address indexed to, uint256 amount);\n    event HangingDividend(address indexed to, uint256 amount) ;\n    event PayHangingDividend(uint256 amount) ;\n    event Deposit(address indexed sender, uint256 value);\n\n    /// @dev parameters of an extra token emission\n    struct EmissionInfo {\n        // new totalSupply after emission happened\n        uint256 totalSupply;\n\n        // total balance of Ether stored at the contract when emission happened\n        uint256 totalBalanceWas;\n    }\n\n    constructor () public\n    {\n        m_emissions.push(EmissionInfo({\n            totalSupply: totalSupply(),\n            totalBalanceWas: 0\n        }));\n    }\n\n    function() external payable {\n        if (msg.value > 0) {\n            emit Deposit(msg.sender, msg.value);\n            m_totalDividends = m_totalDividends.add(msg.value);\n        }\n    }\n\n    /// @notice Request dividends for current account.\n    function requestDividends() public {\n        payDividendsTo(msg.sender);\n    }\n\n    /// @notice Request hanging dividends to pwner.\n    function requestHangingDividends() onlyOwner public {\n        owner.transfer(m_totalHangingDividends);\n        emit PayHangingDividend(m_totalHangingDividends);\n        m_totalHangingDividends = 0;\n    }\n\n    /// @notice hook on standard ERC20#transfer to pay dividends\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        payDividendsTo(msg.sender);\n        payDividendsTo(_to);\n        return super.transfer(_to, _value);\n    }\n\n    /// @notice hook on standard ERC20#transferFrom to pay dividends\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        payDividendsTo(_from);\n        payDividendsTo(_to);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /// @dev adds dividends to the account _to\n    function payDividendsTo(address _to) internal {\n        (bool hasNewDividends, uint256 dividends, uint256 lastProcessedEmissionNum) = calculateDividendsFor(_to);\n        if (!hasNewDividends)\n            return;\n\n        if (0 != dividends) {\n            bool res = _to.send(dividends);\n            if (res) {\n                emit PayDividend(_to, dividends);\n            }\n            else{\n                // _to probably is a contract not able to receive ether\n                emit HangingDividend(_to, dividends);\n                m_totalHangingDividends = m_totalHangingDividends.add(dividends);\n            }\n        }\n\n        m_lastAccountEmission[_to] = lastProcessedEmissionNum;\n        if (lastProcessedEmissionNum == getLastEmissionNum()) {\n            m_lastDividends[_to] = m_totalDividends;\n        }\n        else {\n            m_lastDividends[_to] = m_emissions[lastProcessedEmissionNum.add(1)].totalBalanceWas;\n        }\n    }\n\n    /// @dev calculates dividends for the account _for\n    /// @return (true if state has to be updated, dividend amount (could be 0!), lastProcessedEmissionNum)\n    function calculateDividendsFor(address _for) view internal returns (\n        bool hasNewDividends,\n        uint256 dividends,\n        uint256 lastProcessedEmissionNum\n    ) {\n        uint256 lastEmissionNum = getLastEmissionNum();\n        uint256 lastAccountEmissionNum = m_lastAccountEmission[_for];\n        assert(lastAccountEmissionNum <= lastEmissionNum);\n\n        uint256 totalBalanceWasWhenLastPay = m_lastDividends[_for];\n\n        assert(m_totalDividends >= totalBalanceWasWhenLastPay);\n\n        // If no new ether was collected since last dividends claim\n        if (m_totalDividends == totalBalanceWasWhenLastPay)\n            return (false, 0, lastAccountEmissionNum);\n\n        uint256 initialBalance = balances[_for];    // beware of recursion!\n\n        // if no tokens owned by account\n        if (0 == initialBalance)\n            return (true, 0, lastEmissionNum);\n\n        // We start with last processed emission because some ether could be collected before next emission\n        // we pay all remaining ether collected and continue with all the next emissions\n        uint256 iter = 0;\n        uint256 iterMax = getMaxIterationsForRequestDividends();\n\n        for (uint256 emissionToProcess = lastAccountEmissionNum; emissionToProcess <= lastEmissionNum; emissionToProcess++) {\n            if (iter++ > iterMax)\n                break;\n\n            lastAccountEmissionNum = emissionToProcess;\n            EmissionInfo storage emission = m_emissions[emissionToProcess];\n\n            if (0 == emission.totalSupply)\n                continue;\n\n            uint256 totalEtherDuringEmission;\n            // last emission we stopped on\n            if (emissionToProcess == lastEmissionNum) {\n                totalEtherDuringEmission = m_totalDividends.sub(totalBalanceWasWhenLastPay);\n            }\n            else {\n                totalEtherDuringEmission = m_emissions[emissionToProcess.add(1)].totalBalanceWas.sub(totalBalanceWasWhenLastPay);\n                totalBalanceWasWhenLastPay = m_emissions[emissionToProcess.add(1)].totalBalanceWas;\n            }\n\n            uint256 dividend = totalEtherDuringEmission.mul(initialBalance).div(emission.totalSupply);\n            dividends = dividends.add(dividend);\n        }\n\n        return (true, dividends, lastAccountEmissionNum);\n    }\n\n    function getLastEmissionNum() private view returns (uint256) {\n        return m_emissions.length - 1;\n    }\n\n    /// @dev to prevent gasLimit problems with many mintings\n    function getMaxIterationsForRequestDividends() internal pure returns (uint256) {\n        return 200;\n    }\n\n    /// @notice record of issued dividend emissions\n    EmissionInfo[] public m_emissions;\n\n    /// @dev for each token holder: last emission (index in m_emissions) which was processed for this holder\n    mapping(address => uint256) public m_lastAccountEmission;\n\n    /// @dev for each token holder: last ether balance was when requested dividends\n    mapping(address => uint256) public m_lastDividends;\n\n\n    uint256 public m_totalHangingDividends;\n    uint256 public m_totalDividends;\n}\n\n\ncontract MintableDividendToken is DividendToken, MintableToken {\n    event EmissionHappened(uint256 totalSupply, uint256 totalBalanceWas);\n\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        payDividendsTo(_to);\n        \n        bool res = super.mint(_to, _amount);\n\n        m_emissions.push(EmissionInfo({\n            totalSupply: totalSupply_,\n            totalBalanceWas: m_totalDividends\n        }));\n\n        emit EmissionHappened(totalSupply(), m_totalDividends);        \n        return res;\n    }\n}\n\ncontract CappedDividendToken is MintableDividendToken {\n    uint256 public cap;\n\n    function CappedDividendToken(uint256 _cap) public {\n        require(_cap > 0);\n        cap = _cap;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        require(totalSupply_.add(_amount) <= cap);\n        \n        return super.mint(_to, _amount);\n    }\n}\n\n\ncontract PausableDividendToken is DividendToken, Pausable {\n    /// @notice Request dividends for current account.\n    function requestDividends() whenNotPaused public {\n        super.requestDividends();\n    }\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n    \n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }    \n}\n\n\ncontract PausableMintableDividendToken is PausableDividendToken, MintableDividendToken {\n    function mint(address _to, uint256 _amount) whenNotPaused public returns (bool) {\n        return super.mint(_to, _amount);\n    }\n}\n\n\ncontract PausableCappedDividendToken is PausableDividendToken, CappedDividendToken {\n    function PausableCappedDividendToken(uint256 _cap) \n        public \n        CappedDividendToken(_cap)\n    {\n    }\n    \n    function mint(address _to, uint256 _amount) whenNotPaused public returns (bool) {\n        return super.mint(_to, _amount);\n    }\n}\n\n\ncontract ExperienceToken is DividendToken , CappedDividendToken {\n    string public constant name = 'ExpToken';\n    string public constant symbol = 'ExpToken';\n    uint8 public constant decimals = 18;\n\n    function ExperienceToken()\n        public\n        payable\n         CappedDividendToken(10000000*10**uint(decimals))\n    {\n        \n                uint premintAmount = 1000000*10**uint(decimals);\n                totalSupply_ = totalSupply_.add(premintAmount);\n                balances[msg.sender] = balances[msg.sender].add(premintAmount);\n                Transfer(address(0), msg.sender, premintAmount);\n\n                m_emissions.push(EmissionInfo({\n                    totalSupply: totalSupply_,\n                    totalBalanceWas: 0\n                }));\n\n            \n        \n            \n    }\n\n}",
  "bytecode": "60806040526000600960006101000a81548160ff0219169083151502179055506000601260ff16600a0a629896800233600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060046040805190810160405280620000956200029f640100000000026401000000009004565b81526020016000815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050600081111515620000f157600080fd5b80600a8190555050601260ff16600a0a620f42400290506200012d81600154620002a96401000000000262000918179091906401000000009004565b60018190555062000194816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620002a96401000000000262000918179091906401000000009004565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600460408051908101604052806001548152602001600081525090806001815401808255809150509060018203906000526020600020906002020160009091929091909150600082015181600001556020820151816001015550505050620002c8565b6000600154905090565b6000808284019050838110151515620002be57fe5b8091505092915050565b61238180620002d86000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b146101b357806306fdde03146101e2578063095ea7b31461027257806314c8e5f4146102d757806318160ddd146102ee57806323b872dd14610319578063313ce5671461039e578063355274ea146103cf57806340c10f19146103fa57806353d467781461045f5780636467d443146104b6578063661884631461050d57806370a08231146105725780637d64bcb4146105c95780638da5cb5b146105f857806395d89b411461064f578063a9059cbb146106df578063af10774914610744578063d4a9991f1461078c578063d73dd623146107a3578063dd62ed3e14610808578063e04ed2ff1461087f578063f1c653de146108aa578063f2fde38b146108d5575b60003411156101b1573373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040518082815260200191505060405180910390a26101aa3460085461091890919063ffffffff16565b6008819055505b005b3480156101bf57600080fd5b506101c8610936565b604051808215151515815260200191505060405180910390f35b3480156101ee57600080fd5b506101f7610949565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561023757808201518184015260208101905061021c565b50505050905090810190601f1680156102645780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027e57600080fd5b506102bd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610982565b604051808215151515815260200191505060405180910390f35b3480156102e357600080fd5b506102ec610a74565b005b3480156102fa57600080fd5b50610303610b7e565b6040518082815260200191505060405180910390f35b34801561032557600080fd5b50610384600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b88565b604051808215151515815260200191505060405180910390f35b3480156103aa57600080fd5b506103b3610bb0565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103db57600080fd5b506103e4610bb5565b6040518082815260200191505060405180910390f35b34801561040657600080fd5b50610445600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bbb565b604051808215151515815260200191505060405180910390f35b34801561046b57600080fd5b506104a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c6c565b6040518082815260200191505060405180910390f35b3480156104c257600080fd5b506104f7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c84565b6040518082815260200191505060405180910390f35b34801561051957600080fd5b50610558600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c9c565b604051808215151515815260200191505060405180910390f35b34801561057e57600080fd5b506105b3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f2d565b6040518082815260200191505060405180910390f35b3480156105d557600080fd5b506105de610f75565b604051808215151515815260200191505060405180910390f35b34801561060457600080fd5b5061060d61103d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561065b57600080fd5b50610664611063565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106a4578082015181840152602081019050610689565b50505050905090810190601f1680156106d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106eb57600080fd5b5061072a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061109c565b604051808215151515815260200191505060405180910390f35b34801561075057600080fd5b5061076f600480360381019080803590602001909291905050506110c2565b604051808381526020018281526020019250505060405180910390f35b34801561079857600080fd5b506107a16110f5565b005b3480156107af57600080fd5b506107ee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611100565b604051808215151515815260200191505060405180910390f35b34801561081457600080fd5b50610869600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112fc565b6040518082815260200191505060405180910390f35b34801561088b57600080fd5b50610894611383565b6040518082815260200191505060405180910390f35b3480156108b657600080fd5b506108bf611389565b6040518082815260200191505060405180910390f35b3480156108e157600080fd5b50610916600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061138f565b005b600080828401905083811015151561092c57fe5b8091505092915050565b600960009054906101000a900460ff1681565b6040805190810160405280600881526020017f457870546f6b656e00000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ad057600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6007549081150290604051600060405180830381858888f19350505050158015610b3a573d6000803e3d6000fd5b507faad07d22ebcaba769512847d0d30b1c8acccdbb404df29da293fd21f2adc9e676007546040518082815260200191505060405180910390a16000600781905550565b6000600154905090565b6000610b93846114e7565b610b9c836114e7565b610ba784848461172b565b90509392505050565b601281565b600a5481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c1957600080fd5b600960009054906101000a900460ff16151515610c3557600080fd5b600a54610c4d8360015461091890919063ffffffff16565b11151515610c5a57600080fd5b610c648383611ae5565b905092915050565b60066020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610dad576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e41565b610dc08382611c2490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fd357600080fd5b600960009054906101000a900460ff16151515610fef57600080fd5b6001600960006101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600881526020017f457870546f6b656e00000000000000000000000000000000000000000000000081525081565b60006110a7336114e7565b6110b0836114e7565b6110ba8383611c3d565b905092915050565b6004818154811015156110d157fe5b90600052602060002090600202016000915090508060000154908060010154905082565b6110fe336114e7565b565b600061119182600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091890919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60085481565b60075481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113eb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561142757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000806114f685611e5c565b93509350935083151561150857611724565b82600014151561160d578473ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050905080156115a2578473ffffffffffffffffffffffffffffffffffffffff167f55f99cf5888d21cc6aa594ea424a83ee8a1cb46af85645f4818c8948cb6b1091846040518082815260200191505060405180910390a261160c565b8473ffffffffffffffffffffffffffffffffffffffff167f1ac3034227278be4ec52473d6da993476d1eb2da7ed053c096ef992fb910ceb4846040518082815260200191505060405180910390a26116058360075461091890919063ffffffff16565b6007819055505b5b81600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611659612100565b8214156116ab57600854600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611723565b60046116c160018461091890919063ffffffff16565b8154811015156116cd57fe5b906000526020600020906002020160010154600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b5050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561176857600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156117b557600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561184057600080fd5b611891826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c2490919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611924826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091890919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119f582600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c2490919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b4457600080fd5b600960009054906101000a900460ff16151515611b6057600080fd5b611b69846114e7565b611b738484612110565b90506004604080519081016040528060015481526020016008548152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000155602082015181600101555050507f3d896744603f73cf2a71599411a31225750fde80c81bd20712440bcc27b319ba611bfb610b7e565b600854604051808381526020018281526020019250505060405180910390a18091505092915050565b6000828211151515611c3257fe5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611c7a57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611cc757600080fd5b611d18826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c2490919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611dab826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091890919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000806000806000806000806000806000806000611e78612100565b9950600560008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549850898911151515611ec857fe5b600660008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205497508760085410151515611f1857fe5b876008541415611f34576000808a8191509c509c509c506120ef565b6000808f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205496508660001415611f9157600160008b8191509c509c509c506120ef565b60009550611f9d6122f6565b94508893505b89841115156120e45784868060010197501115611fbf576120e4565b839850600484815481101515611fd157fe5b90600052602060002090600202019250826000015460001415611ff3576120d7565b898414156120175761201088600854611c2490919063ffffffff16565b9150612096565b61205d88600461203160018861091890919063ffffffff16565b81548110151561203d57fe5b906000526020600020906002020160010154611c2490919063ffffffff16565b9150600461207560018661091890919063ffffffff16565b81548110151561208157fe5b90600052602060002090600202016001015497505b6120bf83600001546120b189856122ff90919063ffffffff16565b61233a90919063ffffffff16565b90506120d4818d61091890919063ffffffff16565b9b505b8380600101945050611fa3565b60018c8a9c509c509c505b505050505050505050509193909250565b6000600160048054905003905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561216e57600080fd5b600960009054906101000a900460ff1615151561218a57600080fd5b61219f8260015461091890919063ffffffff16565b6001819055506121f6826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461091890919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600060c8905090565b60008060008414156123145760009150612333565b828402905082848281151561232557fe5b0414151561232f57fe5b8091505b5092915050565b600080828481151561234857fe5b04905080915050929150505600a165627a7a723058203ff6eff7004260a707fe42c513cd6cea84a08eea9c017eecd89ba8b8707d65e60029"
}