{
  "address": "0x814e0908b12a99fecf5bc101bb5d0b8b5cdf7d26",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "MeasurableDataToken",
  "contractName": "MDToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-29\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n      return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n      return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n      return a < b ? a : b;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    owner = newOwner;\n    OwnershipTransferred(owner, newOwner);\n  }\n\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    /**\n    * @dev Transfer token for a specified address.\n    * @param _to address The address to transfer to.\n    * @param _value uint256 The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner address The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract ERC677 is ERC20 {\n    function transferAndCall(address _to, uint256 _value, bytes _data) public returns (bool success);\n    \n    event ERC677Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n}\n\ncontract ERC677Receiver {\n    function onTokenTransfer(address _sender, uint _value, bytes _data) public returns (bool success);\n}\n\ncontract ERC677Token is ERC677 {\n\n    /**\n    * @dev Transfer token to a contract address with additional data if the recipient is a contact.\n    * @param _to address The address to transfer to.\n    * @param _value uint256 The amount to be transferred.\n    * @param _data bytes The extra data to be passed to the receiving contract.\n    */\n    function transferAndCall(address _to, uint256 _value, bytes _data) public returns (bool success) {\n        require(super.transfer(_to, _value));\n        ERC677Transfer(msg.sender, _to, _value, _data);\n        if (isContract(_to)) {\n            contractFallback(_to, _value, _data);\n        }\n        return true;\n    }\n\n    // PRIVATE\n\n    function contractFallback(address _to, uint256 _value, bytes _data) private {\n        ERC677Receiver receiver = ERC677Receiver(_to);\n        require(receiver.onTokenTransfer(msg.sender, _value, _data));\n    }\n\n    // assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool hasCode) {\n        uint length;\n        assembly { length := extcodesize(_addr) }\n        return length > 0;\n    }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n    /**\n    * @dev Transfer tokens from one address to another.\n    * @param _from address The address which you want to send tokens from.\n    * @param _to address The address which you want to transfer to.\n    * @param _value uint256 the amout of tokens to be transfered.\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n\n        var _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // require (_value <= _allowance);\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * @param _spender address The address which will spend the funds.\n    * @param _value uint256 The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifing the amount of tokens still avaible for the spender.\n    */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\ncontract MDToken is StandardToken, ERC677Token, Ownable {\n    using SafeMath for uint256;\n\n    // Token metadata\n    string public constant name = \"Measurable Data Token\";\n    string public constant symbol = \"MDT\";\n    uint256 public constant decimals = 18;\n    uint256 public constant maxSupply = 10 * (10**8) * (10**decimals); // 1 billion MDT\n\n    // 240 million MDT reserved for MDT team (24%)\n    uint256 public constant TEAM_TOKENS_RESERVED = 240 * (10**6) * (10**decimals);\n\n    // 150 million MDT reserved for user growth (15%)\n    uint256 public constant USER_GROWTH_TOKENS_RESERVED = 150 * (10**6) * (10**decimals);\n\n    // 110 million MDT reserved for early investors (11%)\n    uint256 public constant INVESTORS_TOKENS_RESERVED = 110 * (10**6) * (10**decimals);\n\n    // 200 million MDT reserved for bonus giveaway (20%)\n    uint256 public constant BONUS_TOKENS_RESERVED = 200 * (10**6) * (10**decimals);\n\n    // Token sale wallet address, contains tokens for private sale, early bird and bonus giveaway\n    address public tokenSaleAddress;\n\n    // MDT team wallet address\n    address public mdtTeamAddress;\n\n    // User Growth Pool wallet address\n    address public userGrowthAddress;\n\n    // Early Investors wallet address\n    address public investorsAddress;\n\n    // MDT team foundation wallet address, contains tokens which were not sold during token sale and unraised bonus\n    address public mdtFoundationAddress;\n\n    event Burn(address indexed _burner, uint256 _value);\n\n    /// @dev Reverts if address is 0x0 or this token address\n    modifier validRecipient(address _recipient) {\n        require(_recipient != address(0) && _recipient != address(this));\n        _;\n    }\n\n    /**\n    * @dev MDToken contract constructor.\n    * @param _tokenSaleAddress address The token sale address.\n    * @param _mdtTeamAddress address The MDT team address.\n    * @param _userGrowthAddress address The user growth address.\n    * @param _investorsAddress address The investors address.\n    * @param _mdtFoundationAddress address The MDT Foundation address.\n    * @param _presaleAmount uint256 Amount of MDT tokens sold during presale.\n    * @param _earlybirdAmount uint256 Amount of MDT tokens to sold during early bird.\n    */\n    function MDToken(\n        address _tokenSaleAddress,\n        address _mdtTeamAddress,\n        address _userGrowthAddress,\n        address _investorsAddress,\n        address _mdtFoundationAddress,\n        uint256 _presaleAmount,\n        uint256 _earlybirdAmount)\n        public\n    {\n\n        require(_tokenSaleAddress != address(0));\n        require(_mdtTeamAddress != address(0));\n        require(_userGrowthAddress != address(0));\n        require(_investorsAddress != address(0));\n        require(_mdtFoundationAddress != address(0));\n\n        tokenSaleAddress = _tokenSaleAddress;\n        mdtTeamAddress = _mdtTeamAddress;\n        userGrowthAddress = _userGrowthAddress;\n        investorsAddress = _investorsAddress;\n        mdtFoundationAddress = _mdtFoundationAddress;\n\n        // issue tokens to token sale, MDT team, etc\n        uint256 saleAmount = _presaleAmount.add(_earlybirdAmount).add(BONUS_TOKENS_RESERVED);\n        mint(tokenSaleAddress, saleAmount);\n        mint(mdtTeamAddress, TEAM_TOKENS_RESERVED);\n        mint(userGrowthAddress, USER_GROWTH_TOKENS_RESERVED);\n        mint(investorsAddress, INVESTORS_TOKENS_RESERVED);\n\n        // issue remaining tokens to MDT Foundation\n        uint256 remainingTokens = maxSupply.sub(totalSupply);\n        if (remainingTokens > 0) {\n            mint(mdtFoundationAddress, remainingTokens);\n        }\n    }\n\n    /**\n    * @dev Mint MDT tokens. (internal use only)\n    * @param _to address Address to send minted MDT to.\n    * @param _amount uint256 Amount of MDT tokens to mint.\n    */\n    function mint(address _to, uint256 _amount)\n        private\n        validRecipient(_to)\n        returns (bool)\n    {\n        require(totalSupply.add(_amount) <= maxSupply);\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n\n        Transfer(0x0, _to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * @param _spender address The address which will spend the funds.\n    * @param _value uint256 The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value)\n        public\n        validRecipient(_spender)\n        returns (bool)\n    {\n        return super.approve(_spender, _value);\n    }\n\n    /**\n    * @dev Transfer token for a specified address.\n    * @param _to address The address to transfer to.\n    * @param _value uint256 The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value)\n        public\n        validRecipient(_to)\n        returns (bool)\n    {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n    * @dev Transfer token to a contract address with additional data if the recipient is a contact.\n    * @param _to address The address to transfer to.\n    * @param _value uint256 The amount to be transferred.\n    * @param _data bytes The extra data to be passed to the receiving contract.\n    */\n    function transferAndCall(address _to, uint256 _value, bytes _data)\n        public\n        validRecipient(_to)\n        returns (bool success)\n    {\n        return super.transferAndCall(_to, _value, _data);\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another.\n    * @param _from address The address which you want to send tokens from.\n    * @param _to address The address which you want to transfer to.\n    * @param _value uint256 the amout of tokens to be transfered.\n    */\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        validRecipient(_to)\n        returns (bool)\n    {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * @dev Burn tokens. (token owner only)\n     * @param _value uint256 The amount to be burned.\n     * @return always true.\n     */\n    function burn(uint256 _value)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Burn tokens on behalf of someone. (token owner only)\n     * @param _from address The address of the owner of the token.\n     * @param _value uint256 The amount to be burned.\n     * @return always true.\n     */\n    function burnFrom(address _from, uint256 _value)\n        public\n        onlyOwner\n        returns(bool)\n    {\n        var _allowance = allowed[_from][msg.sender];\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(_from, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer to owner any tokens send by mistake to this contract. (token owner only)\n     * @param token ERC20 The address of the token to transfer.\n     * @param amount uint256 The amount to be transfered.\n     */\n    function emergencyERC20Drain(ERC20 token, uint256 amount)\n        public\n        onlyOwner\n    {\n        token.transfer(owner, amount);\n    }\n\n    /**\n     * @dev Change to a new token sale address. (token owner only)\n     * @param _tokenSaleAddress address The new token sale address.\n     */\n    function changeTokenSaleAddress(address _tokenSaleAddress)\n        public\n        onlyOwner\n        validRecipient(_tokenSaleAddress)\n    {\n        tokenSaleAddress = _tokenSaleAddress;\n    }\n\n    /**\n     * @dev Change to a new MDT team address. (token owner only)\n     * @param _mdtTeamAddress address The new MDT team address.\n     */\n    function changeMdtTeamAddress(address _mdtTeamAddress)\n        public\n        onlyOwner\n        validRecipient(_mdtTeamAddress)\n    {\n        mdtTeamAddress = _mdtTeamAddress;\n    }\n\n    /**\n     * @dev Change to a new user growth address. (token owner only)\n     * @param _userGrowthAddress address The new user growth address.\n     */\n    function changeUserGrowthAddress(address _userGrowthAddress)\n        public\n        onlyOwner\n        validRecipient(_userGrowthAddress)\n    {\n        userGrowthAddress = _userGrowthAddress;\n    }\n\n    /**\n     * @dev Change to a new investors address. (token owner only)\n     * @param _investorsAddress address The new investors address.\n     */\n    function changeInvestorsAddress(address _investorsAddress)\n        public\n        onlyOwner\n        validRecipient(_investorsAddress)\n    {\n        investorsAddress = _investorsAddress;\n    }\n\n    /**\n     * @dev Change to a new MDT Foundation address. (token owner only)\n     * @param _mdtFoundationAddress address The new MDT Foundation address.\n     */\n    function changeMdtFoundationAddress(address _mdtFoundationAddress)\n        public\n        onlyOwner\n        validRecipient(_mdtFoundationAddress)\n    {\n        mdtFoundationAddress = _mdtFoundationAddress;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mdtFoundationAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_TOKENS_RESERVED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userGrowthAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mdtTeamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mdtFoundationAddress\",\"type\":\"address\"}],\"name\":\"changeMdtFoundationAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USER_GROWTH_TOKENS_RESERVED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVESTORS_TOKENS_RESERVED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investorsAddress\",\"type\":\"address\"}],\"name\":\"changeInvestorsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenSaleAddress\",\"type\":\"address\"}],\"name\":\"changeTokenSaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userGrowthAddress\",\"type\":\"address\"}],\"name\":\"changeUserGrowthAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mdtTeamAddress\",\"type\":\"address\"}],\"name\":\"changeMdtTeamAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_TOKENS_RESERVED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenSaleAddress\",\"type\":\"address\"},{\"name\":\"_mdtTeamAddress\",\"type\":\"address\"},{\"name\":\"_userGrowthAddress\",\"type\":\"address\"},{\"name\":\"_investorsAddress\",\"type\":\"address\"},{\"name\":\"_mdtFoundationAddress\",\"type\":\"address\"},{\"name\":\"_presaleAmount\",\"type\":\"uint256\"},{\"name\":\"_earlybirdAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC677Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200001057600080fd5b60405160e080620017098339810160405280805191906020018051919060200180519190602001805191906020018051919060200180519190602001805160038054600160a060020a03191633600160a060020a0390811691909117909155909250600091508190891615156200008657600080fd5b600160a060020a03881615156200009c57600080fd5b600160a060020a0387161515620000b257600080fd5b600160a060020a0386161515620000c857600080fd5b600160a060020a0385161515620000de57600080fd5b60048054600160a060020a0319908116600160a060020a038c8116919091179092556005805482168b84161790556006805482168a841617905560078054821689841617905560088054909116918716919091179055620001736aa56fa5b99019a5c80000006200015e8686640100000000620002a08102620010c61704565b90640100000000620010c6620002a082021704565b6004549092506200019c90600160a060020a031683640100000000620011e6620002b782021704565b50600554620001ce90600160a060020a03166ac685fa11e01ec6f0000000640100000000620011e6620002b782021704565b506006546200020090600160a060020a03166a7c13bc4b2c133c56000000640100000000620011e6620002b782021704565b506007546200023290600160a060020a03166a5afd67f2dc0e1b2e000000640100000000620011e6620002b782021704565b506000546200025d906b033b2e3c9fd0803ce80000009064010000000062000fde620003d682021704565b9050600081111562000291576008546200028f90600160a060020a031682640100000000620011e6620002b782021704565b505b505050505050505050620003e9565b600082820183811015620002b057fe5b9392505050565b600082600160a060020a03811615801590620002e5575030600160a060020a031681600160a060020a031614155b1515620002f157600080fd5b6000546b033b2e3c9fd0803ce8000000906200031c9085640100000000620010c6620002a082021704565b11156200032857600080fd5b600054620003459084640100000000620010c6620002a082021704565b6000908155600160a060020a0385168152600160205260409020546200037a9084640100000000620010c6620002a082021704565b600160a060020a0385166000818152600160205260408082209390935590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35060019392505050565b600082821115620003e357fe5b50900390565b61131080620003f96000396000f3006060604052600436106101665763ffffffff60e060020a600035041663039b267d811461016b57806306fdde031461019a578063095ea7b3146102245780631448b3ca1461025a57806318160ddd1461026d57806323b872dd146102925780632970c9c6146102ba57806330b823f7146102cd578063313ce567146102e05780633b6d05c7146102f35780634000aea01461030657806342966c681461036b5780634693667a146103815780634c25deb5146103a25780634fe2f085146103b557806368c4eb74146103c857806370a08231146103e757806379cc6790146104065780637af8c4f2146104285780638da5cb5b14610447578063945796801461045a57806395d89b4114610479578063a9059cbb1461048c578063b7629dcb146104ae578063cbcabc13146104c1578063d5abeb01146104e0578063db0e16f1146104f3578063dd62ed3e14610515578063f1f732cb1461053a578063f2fde38b1461054d575b600080fd5b341561017657600080fd5b61017e61056c565b604051600160a060020a03909116815260200160405180910390f35b34156101a557600080fd5b6101ad61057b565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101e95780820151838201526020016101d1565b50505050905090810190601f1680156102165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561022f57600080fd5b610246600160a060020a03600435166024356105b2565b604051901515815260200160405180910390f35b341561026557600080fd5b61017e6105fc565b341561027857600080fd5b61028061060b565b60405190815260200160405180910390f35b341561029d57600080fd5b610246600160a060020a0360043581169060243516604435610611565b34156102c557600080fd5b61028061065d565b34156102d857600080fd5b61017e61066c565b34156102eb57600080fd5b61028061067b565b34156102fe57600080fd5b61017e610680565b341561031157600080fd5b61024660048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061068f95505050505050565b341561037657600080fd5b6102466004356106d2565b341561038c57600080fd5b6103a0600160a060020a036004351661078e565b005b34156103ad57600080fd5b610280610802565b34156103c057600080fd5b610280610811565b34156103d357600080fd5b6103a0600160a060020a0360043516610820565b34156103f257600080fd5b610280600160a060020a0360043516610894565b341561041157600080fd5b610246600160a060020a03600435166024356108af565b341561043357600080fd5b6103a0600160a060020a03600435166109c5565b341561045257600080fd5b61017e610a39565b341561046557600080fd5b6103a0600160a060020a0360043516610a48565b341561048457600080fd5b6101ad610abc565b341561049757600080fd5b610246600160a060020a0360043516602435610af3565b34156104b957600080fd5b61017e610b35565b34156104cc57600080fd5b6103a0600160a060020a0360043516610b44565b34156104eb57600080fd5b610280610bb8565b34156104fe57600080fd5b6103a0600160a060020a0360043516602435610bc8565b341561052057600080fd5b610280600160a060020a0360043581169060243516610c65565b341561054557600080fd5b610280610c90565b341561055857600080fd5b6103a0600160a060020a0360043516610c9f565b600854600160a060020a031681565b60408051908101604052601581527f4d656173757261626c65204461746120546f6b656e0000000000000000000000602082015281565b600082600160a060020a038116158015906105df575030600160a060020a031681600160a060020a031614155b15156105ea57600080fd5b6105f48484610d21565b949350505050565b600454600160a060020a031681565b60005481565b600082600160a060020a0381161580159061063e575030600160a060020a031681600160a060020a031614155b151561064957600080fd5b610654858585610dc7565b95945050505050565b6ac685fa11e01ec6f000000081565b600654600160a060020a031681565b601281565b600554600160a060020a031681565b600083600160a060020a038116158015906106bc575030600160a060020a031681600160a060020a031614155b15156106c757600080fd5b610654858585610ef0565b60035460009033600160a060020a039081169116146106f057600080fd5b600160a060020a033316600090815260016020526040902054610719908363ffffffff610fde16565b600160a060020a03331660009081526001602052604081209190915554610746908363ffffffff610fde16565b600055600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2506001919050565b60035433600160a060020a039081169116146107a957600080fd5b80600160a060020a038116158015906107d4575030600160a060020a031681600160a060020a031614155b15156107df57600080fd5b5060088054600160a060020a031916600160a060020a0392909216919091179055565b6a7c13bc4b2c133c5600000081565b6a5afd67f2dc0e1b2e00000081565b60035433600160a060020a0390811691161461083b57600080fd5b80600160a060020a03811615801590610866575030600160a060020a031681600160a060020a031614155b151561087157600080fd5b5060078054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a031660009081526001602052604090205490565b600354600090819033600160a060020a039081169116146108cf57600080fd5b50600160a060020a03808416600081815260026020908152604080832033909516835293815283822054928252600190529190912054610915908463ffffffff610fde16565b600160a060020a03851660009081526001602052604090205561093e818463ffffffff610fde16565b600160a060020a038086166000908152600260209081526040808320339094168352929052908120919091555461097b908463ffffffff610fde16565b600055600160a060020a0384167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58460405190815260200160405180910390a25060019392505050565b60035433600160a060020a039081169116146109e057600080fd5b80600160a060020a03811615801590610a0b575030600160a060020a031681600160a060020a031614155b1515610a1657600080fd5b5060048054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a031681565b60035433600160a060020a03908116911614610a6357600080fd5b80600160a060020a03811615801590610a8e575030600160a060020a031681600160a060020a031614155b1515610a9957600080fd5b5060068054600160a060020a031916600160a060020a0392909216919091179055565b60408051908101604052600381527f4d44540000000000000000000000000000000000000000000000000000000000602082015281565b600082600160a060020a03811615801590610b20575030600160a060020a031681600160a060020a031614155b1515610b2b57600080fd5b6105f48484610ff0565b600754600160a060020a031681565b60035433600160a060020a03908116911614610b5f57600080fd5b80600160a060020a03811615801590610b8a575030600160a060020a031681600160a060020a031614155b1515610b9557600080fd5b5060058054600160a060020a031916600160a060020a0392909216919091179055565b6b033b2e3c9fd0803ce800000081565b60035433600160a060020a03908116911614610be357600080fd5b600354600160a060020a038084169163a9059cbb91168360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610c4657600080fd5b6102c65a03f11515610c5757600080fd5b505050604051805150505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6aa56fa5b99019a5c800000081565b60035433600160a060020a03908116911614610cba57600080fd5b600160a060020a0381161515610ccf57600080fd5b60038054600160a060020a031916600160a060020a03838116918217928390559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000811580610d535750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b1515610d5e57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b600080600160a060020a0384161515610ddf57600080fd5b50600160a060020a038085166000908152600260209081526040808320338516845282528083205493871683526001909152902054610e24908463ffffffff6110c616565b600160a060020a038086166000908152600160205260408082209390935590871681522054610e59908463ffffffff610fde16565b600160a060020a038616600090815260016020526040902055610e82818463ffffffff610fde16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b6000610efc8484610ff0565b1515610f0757600080fd5b83600160a060020a031633600160a060020a03167f72db2339068fd324bbc28f2944e01064da539ac76064b6ce4a97a5f81de43dd6858560405182815260406020820181815290820183818151815260200191508051906020019080838360005b83811015610f80578082015183820152602001610f68565b50505050905090810190601f168015610fad5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3610fc4846110dc565b15610fd457610fd48484846110e4565b5060019392505050565b600082821115610fea57fe5b50900390565b6000600160a060020a038316151561100757600080fd5b600160a060020a033316600090815260016020526040902054611030908363ffffffff610fde16565b600160a060020a033381166000908152600160205260408082209390935590851681522054611065908363ffffffff6110c616565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b6000828201838110156110d557fe5b9392505050565b6000903b1190565b82600160a060020a03811663a4c0ed363385856000604051602001526040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561116d578082015183820152602001611155565b50505050905090810190601f16801561119a5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15156111ba57600080fd5b6102c65a03f115156111cb57600080fd5b5050506040518051905015156111e057600080fd5b50505050565b600082600160a060020a03811615801590611213575030600160a060020a031681600160a060020a031614155b151561121e57600080fd5b6000546b033b2e3c9fd0803ce80000009061123f908563ffffffff6110c616565b111561124a57600080fd5b60005461125d908463ffffffff6110c616565b6000908155600160a060020a038516815260016020526040902054611288908463ffffffff6110c616565b600160a060020a0385166000818152600160205260408082209390935590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a350600193925050505600a165627a7a72305820314f0b913803be60883cd8c88b7907f69d8ffae07d6dcb0591246a7301eb6aa700290000000000000000000000004b9b85bfec31f8bd5b183339cb155f3d8de114f1000000000000000000000000135338c6033cba64ddff14a06e74c9a15e9f93f5000000000000000000000000446c3c34baf72d1f016e52263d16a45f13b9b128000000000000000000000000eb9821605641389c4c29da5a6b9d94d108c47941000000000000000000000000818cf9a5a26c5164800016c77c90a70c3d6ac71a0000000000000000000000000000000000000000007c13bc4b2c133c560000000000000000000000000000000000000000000000007c13bc4b2c133c56000000",
  "constructorArguments": "0000000000000000000000004b9b85bfec31f8bd5b183339cb155f3d8de114f1000000000000000000000000135338c6033cba64ddff14a06e74c9a15e9f93f5000000000000000000000000446c3c34baf72d1f016e52263d16a45f13b9b128000000000000000000000000eb9821605641389c4c29da5a6b9d94d108c47941000000000000000000000000818cf9a5a26c5164800016c77c90a70c3d6ac71a0000000000000000000000000000000000000000007c13bc4b2c133c560000000000000000000000000000000000000000000000007c13bc4b2c133c56000000"
}