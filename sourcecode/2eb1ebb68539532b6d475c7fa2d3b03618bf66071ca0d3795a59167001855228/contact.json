{
  "address": "0x160b2007118fea66c23a13dab3a21acc09341b5e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CloseSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-26\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ninterface ERC20 {\n  function transfer (address _beneficiary, uint256 _tokenAmount) external returns (bool);\n  function mintFromICO(address _to, uint256 _amount) external  returns(bool);\n}\n\ncontract Ownable {\n  \n  address public owner;\n  \n  constructor() public {\n    owner = msg.sender;\n  }\n  \n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n}\n\ncontract CloseSale is Ownable {\n  \n  ERC20 public token;\n  \n  using SafeMath for uint;\n  \n  address public backEndOperator = msg.sender;\n  \n  address team = 0x7DDA135cDAa44Ad3D7D79AAbE562c4cEA9DEB41d; // 25% all\n  \n  address reserve = 0x34bef601666D7b2E719Ff919A04266dD07706a79; // 15% all\n  \n  mapping(address=>bool) public whitelist;\n  \n  uint256 public startCloseSale = 1527638401; // Wednesday, 30-May-18 00:00:01 UTC\n  \n  uint256 public endCloseSale = 1537228799; // Monday, 17-Sep-18 23:59:59 UTC\n  \n  uint256 public investors;\n  \n  uint256 public weisRaised;\n  \n  uint256 public dollarRaised;\n  \n  uint256 public buyPrice; //0.01 USD\n  \n  uint256 public dollarPrice;\n  \n  uint256 public soldTokens;\n  \n  event Authorized(address wlCandidate, uint timestamp);\n  \n  event Revoked(address wlCandidate, uint timestamp);\n  \n  \n  modifier backEnd() {\n    require(msg.sender == backEndOperator || msg.sender == owner);\n    _;\n  }\n  \n  \n  constructor(uint256 _dollareth) public {\n    dollarPrice = _dollareth;\n    buyPrice = 1e16/dollarPrice; // 16 decimals because 1 cent\n  }\n  \n  \n  function setToken (ERC20 _token) public onlyOwner {\n    token = _token;\n  }\n  \n  function setDollarRate(uint256 _usdether) public onlyOwner {\n    dollarPrice = _usdether;\n    buyPrice = 1e16/dollarPrice; // 16 decimals because 1 cent\n  }\n  \n  function setPrice(uint256 newBuyPrice) public onlyOwner {\n    buyPrice = newBuyPrice;\n  }\n  \n  function setStartSale(uint256 newStartCloseSale) public onlyOwner {\n    startCloseSale = newStartCloseSale;\n  }\n  \n  function setEndSale(uint256 newEndCloseSaled) public onlyOwner {\n    endCloseSale = newEndCloseSaled;\n  }\n  \n  function setBackEndAddress(address newBackEndOperator) public onlyOwner {\n    backEndOperator = newBackEndOperator;\n  }\n  \n  /*******************************************************************************\n   * Whitelist's section */\n  \n  \n  function authorize(address wlCandidate) public backEnd  {\n    require(wlCandidate != address(0x0));\n    require(!isWhitelisted(wlCandidate));\n    whitelist[wlCandidate] = true;\n    investors++;\n    emit Authorized(wlCandidate, now);\n  }\n  \n  \n  function revoke(address wlCandidate) public  onlyOwner {\n    whitelist[wlCandidate] = false;\n    investors--;\n    emit Revoked(wlCandidate, now);\n  }\n  \n  \n  function isWhitelisted(address wlCandidate) public view returns(bool) {\n    return whitelist[wlCandidate];\n  }\n  \n  /*******************************************************************************\n   * Payable's section */\n  \n  \n  function isCloseSale() public constant returns(bool) {\n    return now >= startCloseSale && now <= endCloseSale;\n  }\n  \n  \n  function () public payable {\n    require(isCloseSale());\n    require(isWhitelisted(msg.sender));\n    closeSale(msg.sender, msg.value);\n  }\n  \n  \n  function closeSale(address _investor, uint256 _value) internal {\n    uint256 tokens = _value.mul(1e18).div(buyPrice);\n    token.mintFromICO(_investor, tokens);\n    \n    uint256 tokensFounders = tokens.mul(5).div(12);\n    token.mintFromICO(team, tokensFounders);\n    \n    uint256 tokensDevelopers = tokens.div(4);\n    token.mintFromICO(reserve, tokensDevelopers);\n    \n    weisRaised = weisRaised.add(msg.value);\n    uint256 valueInUSD = msg.value.mul(dollarPrice);\n    dollarRaised = dollarRaised.add(valueInUSD);\n    soldTokens = soldTokens.add(tokens);\n  }\n  \n  \n  function mintManual(address _investor, uint256 _value) public onlyOwner {\n    token.mintFromICO(_investor, _value);\n    uint256 tokensFounders = _value.mul(5).div(12);\n    token.mintFromICO(team, tokensFounders);\n    uint256 tokensDevelopers = _value.div(4);\n    token.mintFromICO(reserve, tokensDevelopers);\n  }\n  \n  \n  function transferEthFromContract(address _to, uint256 amount) public onlyOwner {\n    require(amount != 0);\n    require(_to != 0x0);\n    _to.transfer(amount);\n  }\n}",
  "bytecode": "608060405233600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550737dda135cdaa44ad3d7d79aabe562c4cea9deb41d600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507334bef601666d7b2e719ff919a04266dd07706a79600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550635b0de981600655635ba03fff60075534801561010b57600080fd5b5060405160208061196f83398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600c81905550600c54662386f26fc1000081151561018957fe5b04600b81905550506117cf806101a06000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063050895ff14610171578063144fa6d7146101c857806331198d191461020b5780633af32abf1461025857806340d7b7b8146102b35780635ed9ebfc146102de57806373980d691461030957806374a8f103146103345780638620410b146103775780638ac27f5f146103a25780638ca5da35146103cd5780638da5cb5b1461041a57806391b7f5ed146104715780639b19251a1461049e578063a8670711146104f9578063b6a5d7de14610528578063b701dc141461056b578063ba8029bb146105ae578063d2c877f8146105db578063da5f838d14610608578063e1fa70ef14610633578063f27c24ed1461065e578063fb3ab12b14610689578063fc0c546a146106b6575b61014661070d565b151561015157600080fd5b61015a33610728565b151561016557600080fd5b61016f333461077e565b005b34801561017d57600080fd5b50610186610bab565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101d457600080fd5b50610209600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bd1565b005b34801561021757600080fd5b50610256600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c70565b005b34801561026457600080fd5b50610299600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610728565b604051808215151515815260200191505060405180910390f35b3480156102bf57600080fd5b506102c8610d4c565b6040518082815260200191505060405180910390f35b3480156102ea57600080fd5b506102f3610d52565b6040518082815260200191505060405180910390f35b34801561031557600080fd5b5061031e610d58565b6040518082815260200191505060405180910390f35b34801561034057600080fd5b50610375600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d5e565b005b34801561038357600080fd5b5061038c610e92565b6040518082815260200191505060405180910390f35b3480156103ae57600080fd5b506103b7610e98565b6040518082815260200191505060405180910390f35b3480156103d957600080fd5b50610418600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e9e565b005b34801561042657600080fd5b5061042f611288565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561047d57600080fd5b5061049c600480360381019080803590602001909291905050506112ad565b005b3480156104aa57600080fd5b506104df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611312565b604051808215151515815260200191505060405180910390f35b34801561050557600080fd5b5061050e61070d565b604051808215151515815260200191505060405180910390f35b34801561053457600080fd5b50610569600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611332565b005b34801561057757600080fd5b506105ac600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061150e565b005b3480156105ba57600080fd5b506105d9600480360381019080803590602001909291905050506115ad565b005b3480156105e757600080fd5b5061060660048036038101908080359060200190929190505050611612565b005b34801561061457600080fd5b5061061d611692565b6040518082815260200191505060405180910390f35b34801561063f57600080fd5b50610648611698565b6040518082815260200191505060405180910390f35b34801561066a57600080fd5b5061067361169e565b6040518082815260200191505060405180910390f35b34801561069557600080fd5b506106b4600480360381019080803590602001909291905050506116a4565b005b3480156106c257600080fd5b506106cb611709565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600654421015801561072357506007544211155b905090565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000806000806107b3600b546107a5670de0b6b3a76400008861172f90919063ffffffff16565b61176a90919063ffffffff16565b9350600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633aa0396a87866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561087a57600080fd5b505af115801561088e573d6000803e3d6000fd5b505050506040513d60208110156108a457600080fd5b8101908080519060200190929190505050506108dd600c6108cf60058761172f90919063ffffffff16565b61176a90919063ffffffff16565b9250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633aa0396a600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156109c657600080fd5b505af11580156109da573d6000803e3d6000fd5b505050506040513d60208110156109f057600080fd5b810190808051906020019092919050505050610a1660048561176a90919063ffffffff16565b9150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633aa0396a600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610aff57600080fd5b505af1158015610b13573d6000803e3d6000fd5b505050506040513d6020811015610b2957600080fd5b810190808051906020019092919050505050610b503460095461178590919063ffffffff16565b600981905550610b6b600c543461172f90919063ffffffff16565b9050610b8281600a5461178590919063ffffffff16565b600a81905550610b9d84600d5461178590919063ffffffff16565b600d81905550505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c2c57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ccb57600080fd5b60008114151515610cdb57600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff1614151515610d0157600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d47573d6000803e3d6000fd5b505050565b600c5481565b600d5481565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610db957600080fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600860008154809291906001900391905055507f713b90881ad62c4fa8ab6bd9197fa86481fc0c11b2edba60026514281b2dbac48142604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b600b5481565b60085481565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610efc57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633aa0396a85856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610fc157600080fd5b505af1158015610fd5573d6000803e3d6000fd5b505050506040513d6020811015610feb57600080fd5b810190808051906020019092919050505050611024600c61101660058661172f90919063ffffffff16565b61176a90919063ffffffff16565b9150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633aa0396a600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561110d57600080fd5b505af1158015611121573d6000803e3d6000fd5b505050506040513d602081101561113757600080fd5b81019080805190602001909291905050505061115d60048461176a90919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633aa0396a600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561124657600080fd5b505af115801561125a573d6000803e3d6000fd5b505050506040513d602081101561127057600080fd5b81019080805190602001909291905050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561130857600080fd5b80600b8190555050565b60056020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806113da57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156113e557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561142157600080fd5b61142a81610728565b15151561143657600080fd5b6001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506008600081548092919060010191905055507fb39b5f240c7440b58c1c6cfd328b09ff9aa18b3c8ef4b829774e4f5bad0394168142604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561156957600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561160857600080fd5b8060068190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561166d57600080fd5b80600c81905550600c54662386f26fc1000081151561168857fe5b04600b8190555050565b60095481565b60075481565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116ff57600080fd5b8060078190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008414156117445760009150611763565b828402905082848281151561175557fe5b0414151561175f57fe5b8091505b5092915050565b600080828481151561177857fe5b0490508091505092915050565b600080828401905083811015151561179957fe5b80915050929150505600a165627a7a723058206607bdab8a4f31aee710caf357bee2108f10f27cfd68b1d8669314ce1a7834d0002900000000000000000000000000000000000000000000000000000000000001bd",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000001bd"
}