{
  "address": "0xccbdc4bb76fbbd9b2e138cebb7f820390b6e521d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DataExchange",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-06\n*/\n\npragma solidity 0.5.7;\n\n\n/**\n * @title Data Exchange Marketplace\n * @notice This contract allows Notaries to register themselves and buyers to\n *         publish data orders, acording to the Wibson Protocol.\n *         For more information: https://wibson.org\n */\ncontract DataExchange {\n  event NotaryRegistered(address indexed notary, string notaryUrl);\n  event NotaryUpdated(address indexed notary, string oldNotaryUrl, string newNotaryUrl);\n  event NotaryUnregistered(address indexed notary, string oldNotaryUrl);\n  event DataOrderCreated(uint256 indexed orderId, address indexed buyer);\n  event DataOrderClosed(uint256 indexed orderId, address indexed buyer);\n\n  struct DataOrder {\n    address buyer;\n    string audience;\n    uint256 price;\n    string requestedData;\n    bytes32 termsAndConditionsHash;\n    string buyerUrl;\n    uint32 createdAt;\n    uint32 closedAt;\n  }\n\n  DataOrder[] internal dataOrders;\n  mapping(address => string) internal notaryUrls;\n\n  /**\n   * @notice Registers sender as a notary.\n   * @param notaryUrl Public URL of the notary where the notary info can be obtained.\n   *                  This URL should serve a JSON signed by the sender to prove\n   *                  authenticity. It is highly recommended to check the signature\n   *                  with the sender's address before using the notary's services.\n   * @return true if the notary was successfully registered, reverts otherwise.\n   */\n  function registerNotary(string calldata notaryUrl) external returns (bool) {\n    require(_isNotEmpty(notaryUrl), \"notaryUrl must not be empty\");\n    require(!_isSenderNotary(), \"Notary already registered (use updateNotaryUrl to update)\");\n    notaryUrls[msg.sender] = notaryUrl;\n    emit NotaryRegistered(msg.sender, notaryUrl);\n    return true;\n  }\n\n  /**\n   * @notice Updates notary public URL of sender.\n   * @param newNotaryUrl Public URL of the notary where the notary info can be obtained.\n   *                     This URL should serve a JSON signed by the sender to prove\n   *                     authenticity. It is highly recommended to check the signature\n   *                     with the sender's address before using the notary's services.\n   * @return true if the notary public URL was successfully updated, reverts otherwise.\n   */\n  function updateNotaryUrl(string calldata newNotaryUrl) external returns (bool) {\n    require(_isNotEmpty(newNotaryUrl), \"notaryUrl must not be empty\");\n    require(_isSenderNotary(), \"Notary not registered\");\n    string memory oldNotaryUrl = notaryUrls[msg.sender];\n    notaryUrls[msg.sender] = newNotaryUrl;\n    emit NotaryUpdated(msg.sender, oldNotaryUrl, newNotaryUrl);\n    return true;\n  }\n\n  /**\n   * @notice Unregisters sender as notary. Once unregistered, the notary does not\n   *         have any obligation to maintain the old public URL.\n   * @return true if the notary was successfully unregistered, reverts otherwise.\n   */\n  function unregisterNotary() external returns (bool) {\n    require(_isSenderNotary(), \"sender must be registered\");\n    string memory oldNotaryUrl = notaryUrls[msg.sender];\n    delete notaryUrls[msg.sender];\n    emit NotaryUnregistered(msg.sender, oldNotaryUrl);\n    return true;\n  }\n\n  /**\n   * @notice Creates a DataOrder.\n   * @dev The `msg.sender` will become the buyer of the order.\n   * @param audience Target audience of the order.\n   * @param price Price that sellers will receive in exchange of their data.\n   * @param requestedData Requested data type (Geolocation, Facebook, etc).\n   * @param termsAndConditionsHash Hash of the Buyer's terms and conditions for the order.\n   * @param buyerUrl Public URL of the buyer where more information about the DataOrder\n   *        can be obtained.\n   * @return The index of the newly created DataOrder. If the DataOrder could\n   *         not be created, reverts.\n   */\n  function createDataOrder(\n    string calldata audience,\n    uint256 price,\n    string calldata requestedData,\n    bytes32 termsAndConditionsHash,\n    string calldata buyerUrl\n  ) external returns (uint256) {\n    require(_isNotEmpty(audience), \"audience must not be empty\");\n    require(price > 0, \"price must be greater than zero\");\n    require(_isNotEmpty(requestedData), \"requestedData must not be empty\");\n    require(termsAndConditionsHash != 0, \"termsAndConditionsHash must not be empty\");\n    require(_isNotEmpty(buyerUrl), \"buyerUrl must not be empty\");\n\n    uint256 orderId = dataOrders.length;\n    dataOrders.push(DataOrder(\n      msg.sender,\n      audience,\n      price,\n      requestedData,\n      termsAndConditionsHash,\n      buyerUrl,\n      uint32(now),\n      uint32(0)\n    ));\n\n    emit DataOrderCreated(orderId, msg.sender);\n    return orderId;\n  }\n\n  /**\n   * @notice Closes the DataOrder.\n   * @dev The `msg.sender` must be the buyer of the order.\n   * @param orderId Index of the order to close.\n   * @return true if the DataOrder was successfully closed, reverts otherwise.\n   */\n  function closeDataOrder(uint256 orderId) external returns (bool) {\n    require(orderId < dataOrders.length, \"invalid order index\");\n    DataOrder storage dataOrder = dataOrders[orderId];\n    require(dataOrder.buyer == msg.sender, \"sender can't close the order\");\n    require(dataOrder.closedAt == 0, \"order already closed\");\n    dataOrder.closedAt = uint32(now);\n\n    emit DataOrderClosed(orderId, msg.sender);\n    return true;\n  }\n\n  function getNotaryUrl(address notaryAddress) external view returns (string memory) {\n    return notaryUrls[notaryAddress];\n  }\n\n  function getDataOrder(uint256 orderId) external view returns (\n    address,\n    string memory,\n    uint256,\n    string memory,\n    bytes32,\n    string memory,\n    uint32,\n    uint32\n  ) {\n    DataOrder storage dataOrder = dataOrders[orderId];\n    return (\n      dataOrder.buyer,\n      dataOrder.audience,\n      dataOrder.price,\n      dataOrder.requestedData,\n      dataOrder.termsAndConditionsHash,\n      dataOrder.buyerUrl,\n      dataOrder.createdAt,\n      dataOrder.closedAt\n    );\n  }\n\n  function getDataOrdersLength() external view returns (uint) {\n    return dataOrders.length;\n  }\n\n  function _isSenderNotary() private view returns (bool) {\n    return _isNotEmpty(notaryUrls[msg.sender]);\n  }\n\n  function _isNotEmpty(string memory s) private pure returns (bool) {\n    return bytes(s).length > 0;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"closeDataOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getDataOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNotaryUrl\",\"type\":\"string\"}],\"name\":\"updateNotaryUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unregisterNotary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"audience\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"requestedData\",\"type\":\"string\"},{\"name\":\"termsAndConditionsHash\",\"type\":\"bytes32\"},{\"name\":\"buyerUrl\",\"type\":\"string\"}],\"name\":\"createDataOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDataOrdersLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"notaryAddress\",\"type\":\"address\"}],\"name\":\"getNotaryUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"notaryUrl\",\"type\":\"string\"}],\"name\":\"registerNotary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"notary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"notaryUrl\",\"type\":\"string\"}],\"name\":\"NotaryRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"notary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldNotaryUrl\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newNotaryUrl\",\"type\":\"string\"}],\"name\":\"NotaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"notary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldNotaryUrl\",\"type\":\"string\"}],\"name\":\"NotaryUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"DataOrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"DataOrderClosed\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50611c4e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635ca849ef1161005b5780635ca849ef1461036c57806377d599d4146104b7578063815ca209146104d5578063ff0d34cf1461059257610088565b80630b59ebd51461008d57806331168113146100d35780633e90280d146102b957806354a959801461034a575b600080fd5b6100b9600480360360208110156100a357600080fd5b8101908080359060200190929190505050610623565b604051808215151515815260200191505060405180910390f35b6100ff600480360360208110156100e957600080fd5b8101908080359060200190929190505050610882565b604051808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200188815260200180602001878152602001806020018663ffffffff1663ffffffff1681526020018563ffffffff1663ffffffff16815260200184810384528b818151815260200191508051906020019080838360005b838110156101a957808201518184015260208101905061018e565b50505050905090810190601f1680156101d65780820380516001836020036101000a031916815260200191505b50848103835289818151815260200191508051906020019080838360005b8381101561020f5780820151818401526020810190506101f4565b50505050905090810190601f16801561023c5780820380516001836020036101000a031916815260200191505b50848103825287818151815260200191508051906020019080838360005b8381101561027557808201518184015260208101905061025a565b50505050905090810190601f1680156102a25780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b610330600480360360208110156102cf57600080fd5b81019080803590602001906401000000008111156102ec57600080fd5b8201836020820111156102fe57600080fd5b8035906020019184600183028401116401000000008311171561032057600080fd5b9091929391929390505050610b04565b604051808215151515815260200191505060405180910390f35b610352610e5c565b604051808215151515815260200191505060405180910390f35b6104a1600480360360a081101561038257600080fd5b810190808035906020019064010000000081111561039f57600080fd5b8201836020820111156103b157600080fd5b803590602001918460018302840111640100000000831117156103d357600080fd5b909192939192939080359060200190929190803590602001906401000000008111156103fe57600080fd5b82018360208201111561041057600080fd5b8035906020019184600183028401116401000000008311171561043257600080fd5b9091929391929390803590602001909291908035906020019064010000000081111561045d57600080fd5b82018360208201111561046f57600080fd5b8035906020019184600183028401116401000000008311171561049157600080fd5b90919293919293905050506110ba565b6040518082815260200191505060405180910390f35b6104bf611681565b6040518082815260200191505060405180910390f35b610517600480360360208110156104eb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061168d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561055757808201518184015260208101905061053c565b50505050905090810190601f1680156105845780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610609600480360360208110156105a857600080fd5b81019080803590602001906401000000008111156105c557600080fd5b8201836020820111156105d757600080fd5b803590602001918460018302840111640100000000831117156105f957600080fd5b909192939192939050505061176e565b604051808215151515815260200191505060405180910390f35b60008080549050821061069e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f696e76616c6964206f7264657220696e6465780000000000000000000000000081525060200191505060405180910390fd5b60008083815481106106ac57fe5b906000526020600020906007020190503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f73656e6465722063616e277420636c6f736520746865206f726465720000000081525060200191505060405180910390fd5b60008160060160049054906101000a900463ffffffff1663ffffffff1614610811576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6f7264657220616c726561647920636c6f73656400000000000000000000000081525060200191505060405180910390fd5b428160060160046101000a81548163ffffffff021916908363ffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff16837f2a0373e2121813fd2621a2f2f56a80ebe2b7640382489cc0e3dbe8f6d5191ec660405160405180910390a36001915050919050565b6000606060006060600060606000806000808a8154811061089f57fe5b906000526020600020906007020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001018260020154836003018460040154856005018660060160009054906101000a900463ffffffff168760060160049054906101000a900463ffffffff16868054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109a95780601f1061097e576101008083540402835291602001916109a9565b820191906000526020600020905b81548152906001019060200180831161098c57829003601f168201915b50505050509650848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a455780601f10610a1a57610100808354040283529160200191610a45565b820191906000526020600020905b815481529060010190602001808311610a2857829003601f168201915b50505050509450828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ae15780601f10610ab657610100808354040283529160200191610ae1565b820191906000526020600020905b815481529060010190602001808311610ac457829003601f168201915b505050505092509850985098509850985098509850985050919395975091939597565b6000610b5383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611960565b610bc5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6e6f7461727955726c206d757374206e6f7420626520656d707479000000000081525060200191505060405180910390fd5b610bcd61196d565b610c3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4e6f74617279206e6f742072656769737465726564000000000000000000000081525060200191505060405180910390fd5b6060600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d145780601f10610ce957610100808354040283529160200191610d14565b820191906000526020600020905b815481529060010190602001808311610cf757829003601f168201915b505050505090508383600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209190610d69929190611a54565b503373ffffffffffffffffffffffffffffffffffffffff167fb70d3d37cb3ca66ae3b9b82cfde193d73dae787d22b77f7c714a573b5e767de6828686604051808060200180602001838103835286818151815260200191508051906020019080838360005b83811015610de9578082015181840152602081019050610dce565b50505050905090810190601f168015610e165780820380516001836020036101000a031916815260200191505b508381038252858582818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060405180910390a2600191505092915050565b6000610e6661196d565b610ed8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f73656e646572206d75737420626520726567697374657265640000000000000081525060200191505060405180910390fd5b6060600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fad5780601f10610f8257610100808354040283529160200191610fad565b820191906000526020600020905b815481529060010190602001808311610f9057829003601f168201915b50505050509050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610fff9190611ad4565b3373ffffffffffffffffffffffffffffffffffffffff167fc765bc669d1eb91e88bd36aad9553c82972428e1a8ebd89a711deab18a953d36826040518080602001828103825283818151815260200191508051906020019080838360005b8381101561107857808201518184015260208101905061105d565b50505050905090810190601f1680156110a55780820380516001836020036101000a031916815260200191505b509250505060405180910390a2600191505090565b600061110989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611960565b61117b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f61756469656e6365206d757374206e6f7420626520656d70747900000000000081525060200191505060405180910390fd5b600087116111f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f7072696365206d7573742062652067726561746572207468616e207a65726f0081525060200191505060405180910390fd5b61123e86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611960565b6112b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f72657175657374656444617461206d757374206e6f7420626520656d7074790081525060200191505060405180910390fd5b6000801b84141561130c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180611bc26028913960400191505060405180910390fd5b61135983838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611960565b6113cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f627579657255726c206d757374206e6f7420626520656d70747900000000000081525060200191505060405180910390fd5b60008080549050905060006040518061010001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018a815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200187815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020014263ffffffff168152602001600063ffffffff168152509080600181540180825580915050906001820390600052602060002090600702016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908051906020019061158d929190611b1c565b506040820151816002015560608201518160030190805190602001906115b4929190611b1c565b506080820151816004015560a08201518160050190805190602001906115db929190611b1c565b5060c08201518160060160006101000a81548163ffffffff021916908363ffffffff16021790555060e08201518160060160046101000a81548163ffffffff021916908363ffffffff1602179055505050503373ffffffffffffffffffffffffffffffffffffffff16817f4da70a6c86467b0d5d574c4b27418883408d1b0f13cc7d81aed73206b8339b3b60405160405180910390a38091505098975050505050505050565b60008080549050905090565b6060600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117625780601f1061173757610100808354040283529160200191611762565b820191906000526020600020905b81548152906001019060200180831161174557829003601f168201915b50505050509050919050565b60006117bd83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611960565b61182f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6e6f7461727955726c206d757374206e6f7420626520656d707479000000000081525060200191505060405180910390fd5b61183761196d565b1561188d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526039815260200180611bea6039913960400191505060405180910390fd5b8282600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091906118db929190611a54565b503373ffffffffffffffffffffffffffffffffffffffff167fe89d0a5c1c3ef98dff90085eabb0e4b4a96244277ee3c5f81679a024c2ce9cf0848460405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a26001905092915050565b6000808251119050919050565b6000611a4f600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a455780601f10611a1a57610100808354040283529160200191611a45565b820191906000526020600020905b815481529060010190602001808311611a2857829003601f168201915b5050505050611960565b905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a9557803560ff1916838001178555611ac3565b82800160010185558215611ac3579182015b82811115611ac2578235825591602001919060010190611aa7565b5b509050611ad09190611b9c565b5090565b50805460018160011615610100020316600290046000825580601f10611afa5750611b19565b601f016020900490600052602060002090810190611b189190611b9c565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b5d57805160ff1916838001178555611b8b565b82800160010185558215611b8b579182015b82811115611b8a578251825591602001919060010190611b6f565b5b509050611b989190611b9c565b5090565b611bbe91905b80821115611bba576000816000905550600101611ba2565b5090565b9056fe7465726d73416e64436f6e646974696f6e7348617368206d757374206e6f7420626520656d7074794e6f7461727920616c726561647920726567697374657265642028757365207570646174654e6f7461727955726c20746f2075706461746529a165627a7a7230582083e58694635a87dbc9d0d35a59a1aafa48eaa7c28fad54fe91c0ad58b2c3b6560029"
}