{
  "address": "0xb56b156107a8be558baaab2b66dd4c7423338bea",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SmartWallet",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-08\n*/\n\npragma solidity ^0.4.24;\n\ncontract IERC20Token {\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n    function name() public constant returns (string) {}\n    function symbol() public constant returns (string) {}\n    function decimals() public constant returns (uint8) {}\n    function totalSupply() public constant returns (uint256) {}\n    function balanceOf(address _owner) public constant returns (uint256) { _owner; }\n    function allowance(address _owner, address _spender) public constant returns (uint256) { _owner; _spender; }\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n}\n\ncontract Ownable {\n    address public owner;\n    address public newOwner;\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n\n    /*\n        @dev constructor\n    */\n    constructor (address _owner) public {\n        owner = _owner;\n    }\n\n    /*\n        @dev allows execution by the owner only\n    */\n    modifier ownerOnly {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /*\n        @dev allows transferring the contract ownership\n        the new owner still needs to accept the transfer\n        can only be called by the contract owner\n\n        @param _newOwner    new contract owner\n    */\n    function transferOwnership(address _newOwner) public ownerOnly {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    /*\n        @dev used by a new owner to accept an ownership transfer\n    */\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\ncontract Utils {\n    /*\n        @dev constructor\n    */\n    constructor() public {\n    }\n\n    /*\n        @dev verifies that an amount is greater than zero\n    */\n    modifier greaterThanZero(uint256 _amount) {\n        require(_amount > 0);\n        _;\n    }\n\n    /*\n        @dev validates an address - currently only checks that it isn't null\n    */\n    modifier validAddress(address _address) {\n        require(_address != 0x0);\n        _;\n    }\n\n    /*\n        @dev verifies that the address is different than this contract address\n    */\n    modifier notThis(address _address) {\n        require(_address != address(this));\n        _;\n    }\n\n    /*\n        @dev verifies that the string is not empty\n    */\n    modifier notEmpty(string _str) {\n        require(bytes(_str).length > 0);\n        _;\n    }\n\n    // Overflow protected math functions\n\n    /*\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\n\n        @param _x   value 1\n        @param _y   value 2\n\n        @return sum\n    */\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x + _y;\n        assert(z >= _x);\n        return z;\n    }\n\n    /*\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n\n        @param _x   minuend\n        @param _y   subtrahend\n\n        @return difference\n    */\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        require(_x >= _y);\n        return _x - _y;\n    }\n\n    /*\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n\n        @param _x   factor 1\n        @param _y   factor 2\n\n        @return product\n    */\n    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x * _y;\n        assert(_x == 0 || z / _x == _y);\n        return z;\n    }\n}\n\ncontract WithdrawalConfigurations is Ownable, Utils {\n    \n    /*\n     *  Members\n     */\n\n    uint public      minWithdrawalCoolingPeriod;\n    uint constant    maxWithdrawalCoolingPeriod = 12 * 1 weeks; // = 14515200 seconds\n    uint public      withdrawalCoolingPeriod;\n   \n    /*\n     *  Events\n     */\n    event WithdrawalRequested(address _sender, address _smartWallet);\n    event SetWithdrawalCoolingPeriod(uint _withdrawalCoolingPeriod);\n\n    /*\n        @dev constructor\n\n        @param _withdrawalCoolingPeriod       The cooling period \n        @param _minWithdrawalCoolingPeriod    The minimum time from withdraw request to allow performing it\n\n    */\n    constructor (uint _withdrawalCoolingPeriod, uint _minWithdrawalCoolingPeriod) \n        Ownable(msg.sender)\n        public\n        {\n            require(_withdrawalCoolingPeriod <= maxWithdrawalCoolingPeriod &&\n                    _withdrawalCoolingPeriod >= _minWithdrawalCoolingPeriod);\n            require(_minWithdrawalCoolingPeriod >= 0);\n\n            minWithdrawalCoolingPeriod = _minWithdrawalCoolingPeriod;\n            withdrawalCoolingPeriod = _withdrawalCoolingPeriod;\n       }\n\n    /*\n        @dev Get the withdrawalCoolingPeriod parameter value. \n   \n     */\n    function getWithdrawalCoolingPeriod() external view returns(uint) {\n        return withdrawalCoolingPeriod;\n    }\n\n    /*\n        @dev Set the withdrawalCoolingPeriod parameter value. \n\n        @param _withdrawalCoolingPeriod   Cooling period in seconds\n     */\n    function setWithdrawalCoolingPeriod(uint _withdrawalCoolingPeriod)\n        ownerOnly()\n        public\n        {\n            require (_withdrawalCoolingPeriod <= maxWithdrawalCoolingPeriod &&\n                     _withdrawalCoolingPeriod >= minWithdrawalCoolingPeriod);\n            withdrawalCoolingPeriod = _withdrawalCoolingPeriod;\n            emit SetWithdrawalCoolingPeriod(_withdrawalCoolingPeriod);\n    }\n\n    /*\n        @dev Fire the WithdrawalRequested event. \n\n        @param _sender          The user account, activating this request\n        @param _smartWallet     The smart wallet that the request was called upon   \n     */\n    function emitWithrawalRequestEvent(address _sender, address _smartWallet) \n        public\n        {\n            emit WithdrawalRequested(_sender, _smartWallet);\n    }\n}\n\nlibrary SmartWalletLib {\n\n    /*\n     *  Structs\n     */ \n    struct Wallet {\n        address operatorAccount;\n        address userWithdrawalAccount;\n        address feesAccount;\n        uint    withdrawAllowedAt; // In seconds\n    }\n\n    /*\n     *  Members\n     */\n    string constant VERSION = \"1.1\";\n    address constant withdrawalConfigurationsContract = 0xDdD336eAad17F1D40cc81997Fb956608f00639FF; \n    \n    /*\n     *  Modifiers\n     */\n    modifier validAddress(address _address) {\n        require(_address != 0x0);\n        _;\n    }\n\n    modifier addressNotSet(address _address) {\n        require(_address == 0);\n        _;\n    }\n\n    modifier operatorOnly(address _operatorAccount) {\n        require(msg.sender == _operatorAccount);\n        _;\n    }\n\n    modifier userWithdrawalAccountOnly(Wallet storage _self) {\n        require(msg.sender == _self.userWithdrawalAccount);\n        _;\n    }\n\n    /*\n     *  Events\n     */\n    event TransferToUserWithdrawalAccount(address _token, address _userWithdrawalAccount, uint _amount, address _feesToken, address _feesAccount, uint _fee);\n    event SetUserWithdrawalAccount(address _userWithdrawalAccount);\n    event PerformUserWithdraw(address _token, address _userWithdrawalAccount, uint _amount);\n    \n    /*\n        @dev Initialize the wallet with the operator and backupAccount address\n        \n        @param _self                        Wallet storage\n        @param _operator                    The operator account\n        @param _feesAccount                 The account to transfer fees to\n    */\n    function initWallet(Wallet storage _self, address _operator, address _feesAccount) \n            public\n            validAddress(_operator)\n            validAddress(_feesAccount)\n            {\n        \n                _self.operatorAccount = _operator;\n                _self.feesAccount = _feesAccount;\n    }\n\n    /*\n        @dev Setting the account of the user to send funds to. \n        \n        @param _self                        Wallet storage\n        @param _userWithdrawalAccount       The user account to withdraw funds to\n    */\n    function setUserWithdrawalAccount(Wallet storage _self, address _userWithdrawalAccount) \n            public\n            operatorOnly(_self.operatorAccount)\n            validAddress(_userWithdrawalAccount)\n            addressNotSet(_self.userWithdrawalAccount)\n            {\n        \n                _self.userWithdrawalAccount = _userWithdrawalAccount;\n                emit SetUserWithdrawalAccount(_userWithdrawalAccount);\n    }\n    \n    /*\n        @dev Withdraw funds to the user account. \n\n        @param _self                Wallet storage\n        @param _token               The ERC20 token the owner withdraws from \n        @param _amount              Amount to transfer  \n        @param _fee                 Fee to transfer   \n    */\n    function transferToUserWithdrawalAccount(Wallet storage _self, IERC20Token _token, uint _amount, IERC20Token _feesToken, uint _fee) \n            public \n            operatorOnly(_self.operatorAccount)\n            validAddress(_self.userWithdrawalAccount)\n            {\n\n                if (_fee > 0) {        \n                    _feesToken.transfer(_self.feesAccount, _fee); \n                }       \n                \n                _token.transfer(_self.userWithdrawalAccount, _amount);\n                emit TransferToUserWithdrawalAccount(_token, _self.userWithdrawalAccount, _amount,  _feesToken, _self.feesAccount, _fee);   \n        \n    }\n\n    /*\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\n\n        @param _x   value 1\n        @param _y   value 2\n\n        @return sum\n    */\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x + _y;\n        assert(z >= _x);\n        return z;\n    }\n    \n    /*\n        @dev user request withdraw. \n\n        @param _self                Wallet storage\n        @param _token               The ERC20 token the owner withdraws from \n        \n    */\n    function requestWithdraw(Wallet storage _self) \n        public \n        userWithdrawalAccountOnly(_self)\n        {\n            \n            WithdrawalConfigurations withdrawalConfigurations = WithdrawalConfigurations(withdrawalConfigurationsContract);\n            \n            _self.withdrawAllowedAt = safeAdd(now, withdrawalConfigurations.getWithdrawalCoolingPeriod());\n\n            withdrawalConfigurations.emitWithrawalRequestEvent(msg.sender, address(this));\n    }\n\n    /*\n        @dev user perform withdraw. \n\n        @param _self                Wallet storage\n        @param _token               The ERC20 token the owner withdraws from \n        \n    */\n    function performUserWithdraw(Wallet storage _self, IERC20Token _token)\n        public\n        userWithdrawalAccountOnly(_self)\n        {\n            require(_self.withdrawAllowedAt != 0 &&\n                    _self.withdrawAllowedAt <= now );\n\n            uint userBalance = _token.balanceOf(this);\n            _token.transfer(_self.userWithdrawalAccount, userBalance);\n            emit PerformUserWithdraw(_token, _self.userWithdrawalAccount, userBalance);   \n        }\n\n}\n\ncontract SmartWallet {\n\n    /*\n     *  Members\n     */\n    using SmartWalletLib for SmartWalletLib.Wallet;\n    SmartWalletLib.Wallet public wallet;\n       \n   // Wallet public wallet;\n    /*\n     *  Events\n     */\n    event TransferToUserWithdrawalAccount(address _token, address _userWithdrawalAccount, uint _amount, address _feesToken, address _feesAccount, uint _fee);\n    event SetUserWithdrawalAccount(address _userWithdrawalAccount);\n    event PerformUserWithdraw(address _token, address _userWithdrawalAccount, uint _amount);\n     \n    /*\n        @dev constructor\n\n        @param _backupAccount       A default operator's account to send funds to, in cases where the user account is\n                                    unavailable or lost\n        @param _operator            The contract operator address\n        @param _feesAccount         The account to transfer fees to \n\n    */\n    constructor (address _operator, address _feesAccount) public {\n        wallet.initWallet(_operator, _feesAccount);\n    }\n\n    /*\n        @dev Setting the account of the user to send funds to. \n        \n        @param _userWithdrawalAccount       The user account to withdraw funds to\n        \n    */\n    function setUserWithdrawalAccount(address _userWithdrawalAccount) public {\n        wallet.setUserWithdrawalAccount(_userWithdrawalAccount);\n    }\n\n    /*\n        @dev Withdraw funds to the user account. \n\n\n        @param _token               The ERC20 token the owner withdraws from \n        @param _amount              Amount to transfer    \n    */\n    function transferToUserWithdrawalAccount(IERC20Token _token, uint _amount, IERC20Token _feesToken, uint _fee) public {\n        wallet.transferToUserWithdrawalAccount(_token, _amount, _feesToken, _fee);\n    }\n\n    /*\n        @dev Allows the user to request a withdraw of his/her placements\n        \n        @param _token               The ERC20 token the user wishes to withdraw from \n    */\n    function requestWithdraw() public {\n        wallet.requestWithdraw();\n    }\n\n    /*\n        @dev Allows the user to perform the requestWithdraw operation\n        \n        @param _token               The ERC20 token the user withdraws from \n    */\n    function performUserWithdraw(IERC20Token _token) public {\n        wallet.performUserWithdraw(_token);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_feesToken\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"transferToUserWithdrawalAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"operatorAccount\",\"type\":\"address\"},{\"name\":\"userWithdrawalAccount\",\"type\":\"address\"},{\"name\":\"feesAccount\",\"type\":\"address\"},{\"name\":\"withdrawAllowedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"performUserWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userWithdrawalAccount\",\"type\":\"address\"}],\"name\":\"setUserWithdrawalAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_feesAccount\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_userWithdrawalAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_feesToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_feesAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"TransferToUserWithdrawalAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_userWithdrawalAccount\",\"type\":\"address\"}],\"name\":\"SetUserWithdrawalAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_userWithdrawalAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PerformUserWithdraw\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060405160408061049c83398101604081815282516020909301517f5b73e840000000000000000000000000000000000000000000000000000000008352600060048401819052600160a060020a03808616602486015282166044850152915190927374ba8c8f53809bd3baa0c243350cb989f6c9dc3c92635b73e84092606480840193829003018186803b1580156100a857600080fd5b505af41580156100bc573d6000803e3d6000fd5b5050505050506103cb806100d16000396000f30060806040526004361061006c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631d9082c48114610071578063521eb273146100a15780639219baa4146100eb578063b3423eec1461010c578063fe35530c14610121575b600080fd5b34801561007d57600080fd5b5061009f600160a060020a036004358116906024359060443516606435610142565b005b3480156100ad57600080fd5b506100b66101ee565b60408051600160a060020a03958616815293851660208501529190931682820152606082019290925290519081900360800190f35b3480156100f757600080fd5b5061009f600160a060020a0360043516610211565b34801561011857600080fd5b5061009f6102a4565b34801561012d57600080fd5b5061009f600160a060020a0360043516610327565b604080517f1557a52f000000000000000000000000000000000000000000000000000000008152600060048201819052600160a060020a03808816602484015260448301879052851660648301526084820184905291517374ba8c8f53809bd3baa0c243350cb989f6c9dc3c92631557a52f9260a48082019391829003018186803b1580156101d057600080fd5b505af41580156101e4573d6000803e3d6000fd5b5050505050505050565b600054600154600254600354600160a060020a0393841693928316929091169084565b604080517fb2d07945000000000000000000000000000000000000000000000000000000008152600060048201819052600160a060020a038416602483015291517374ba8c8f53809bd3baa0c243350cb989f6c9dc3c9263b2d079459260448082019391829003018186803b15801561028957600080fd5b505af415801561029d573d6000803e3d6000fd5b5050505050565b604080517f3be5e49f00000000000000000000000000000000000000000000000000000000815260006004820181905291517374ba8c8f53809bd3baa0c243350cb989f6c9dc3c92633be5e49f9260248082019391829003018186803b15801561030d57600080fd5b505af4158015610321573d6000803e3d6000fd5b50505050565b604080517f2eb9e5d7000000000000000000000000000000000000000000000000000000008152600060048201819052600160a060020a038416602483015291517374ba8c8f53809bd3baa0c243350cb989f6c9dc3c92632eb9e5d79260448082019391829003018186803b15801561028957600080fd00a165627a7a723058205073597116b7b71c0560d912d3593a9c23c16b370d182ba2ea2d28defe0ce4b30029000000000000000000000000a28ee03590c8ff8a65bd7d9180b8ed869a147dc2000000000000000000000000ca40d7fa65ca277991075bb63fa6a812f12c010f",
  "constructorArguments": "000000000000000000000000a28ee03590c8ff8a65bd7d9180b8ed869a147dc2000000000000000000000000ca40d7fa65ca277991075bb63fa6a812f12c010f"
}