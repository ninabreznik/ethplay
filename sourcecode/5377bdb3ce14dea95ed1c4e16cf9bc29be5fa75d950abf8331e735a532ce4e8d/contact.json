{
  "address": "0x4bb98d82fd0058e1ce97b71dc5c54b6d98c8c531",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "XENIACOIN",
  "compilerVersion": "v0.4.20-nightly.2018.1.4+commit.a0771691",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-19\n*/\n\npragma solidity ^0.4.13;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\ncontract InvestorsFeature is Ownable, StandardToken {\n    using SafeMath for uint;\n    \n    address[] public investors;\n    mapping(address => bool) isInvestor;\n    function deposit(address investor, uint) internal {\n        if(isInvestor[investor] == false) {\n            investors.push(investor);\n            isInvestor[investor] = true;\n        }\n    }\n    \n    function sendp(address addr, uint amount) internal {\n        require(addr != address(0));\n        require(amount > 0);\n        deposit(addr, amount);\n        \n        // SafeMath.sub will throw if there is not enough balance.\n        balances[this] = balances[this].sub(amount);\n        balances[addr] = balances[addr].add(amount);\n        Transfer(this, addr, amount);\n    }\n    \n\n\n}\n\ncontract XENIACOIN is Ownable, StandardToken, InvestorsFeature  {\n    \n\n  string public constant name = \"XENIACOIN\";\n  string public constant symbol = \"XEN\";\n  uint8 public constant decimals = 13;\n  \n  uint256 public constant INITIAL_SUPPLY = (200 * (10**6)) * (10 ** uint256(decimals));\n  \n  \n  \n  function XENIACOIN() public {\n    totalSupply = INITIAL_SUPPLY;\n    balances[this] = INITIAL_SUPPLY;\n    Transfer(address(0), this, INITIAL_SUPPLY);\n  }\n  \n\n  \n  function send(address addr, uint amount) public onlyOwner {\n      sendp(addr, amount);\n  }\n  \n\n \n}",
  "bytecode": "6060604052341561000f57600080fd5b60008054600160a060020a03191633600160a060020a03908116919091178255686c6b935b8bbd400000600181905530909116808352600260205260408084208390559092917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a3610bd0806100956000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101aa57806323b872dd146101cf5780632ff2e9dc146101f7578063313ce5671461020a5780633feb5f2b14610233578063661884631461026557806370a08231146102875780638da5cb5b146102a657806395d89b41146102b9578063a9059cbb146102cc578063d0679d34146102ee578063d73dd62314610312578063dd62ed3e14610334578063f2fde38b14610359575b600080fd5b34156100f557600080fd5b6100fd610378565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610139578082015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017f57600080fd5b610196600160a060020a03600435166024356103af565b604051901515815260200160405180910390f35b34156101b557600080fd5b6101bd61041b565b60405190815260200160405180910390f35b34156101da57600080fd5b610196600160a060020a0360043581169060243516604435610421565b341561020257600080fd5b6101bd6105a3565b341561021557600080fd5b61021d6105b0565b60405160ff909116815260200160405180910390f35b341561023e57600080fd5b6102496004356105b5565b604051600160a060020a03909116815260200160405180910390f35b341561027057600080fd5b610196600160a060020a03600435166024356105dd565b341561029257600080fd5b6101bd600160a060020a03600435166106d7565b34156102b157600080fd5b6102496106f2565b34156102c457600080fd5b6100fd610701565b34156102d757600080fd5b610196600160a060020a0360043516602435610738565b34156102f957600080fd5b610310600160a060020a0360043516602435610833565b005b341561031d57600080fd5b610196600160a060020a036004351660243561085c565b341561033f57600080fd5b6101bd600160a060020a0360043581169060243516610900565b341561036457600080fd5b610310600160a060020a036004351661092b565b60408051908101604052600981527f58454e4941434f494e0000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015481565b6000600160a060020a038316151561043857600080fd5b600160a060020a03841660009081526002602052604090205482111561045d57600080fd5b600160a060020a038085166000908152600360209081526040808320339094168352929052205482111561049057600080fd5b600160a060020a0384166000908152600260205260409020546104b9908363ffffffff6109c616565b600160a060020a0380861660009081526002602052604080822093909355908516815220546104ee908363ffffffff6109d816565b600160a060020a03808516600090815260026020908152604080832094909455878316825260038152838220339093168252919091522054610536908363ffffffff6109c616565b600160a060020a03808616600081815260036020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b686c6b935b8bbd40000081565b600d81565b60048054829081106105c357fe5b600091825260209091200154600160a060020a0316905081565b600160a060020a0333811660009081526003602090815260408083209386168352929052908120548083111561063a57600160a060020a033381166000908152600360209081526040808320938816835292905290812055610671565b61064a818463ffffffff6109c616565b600160a060020a033381166000908152600360209081526040808320938916835292905220555b600160a060020a0333811660008181526003602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526002602052604090205490565b600054600160a060020a031681565b60408051908101604052600381527f58454e0000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561074f57600080fd5b600160a060020a03331660009081526002602052604090205482111561077457600080fd5b600160a060020a03331660009081526002602052604090205461079d908363ffffffff6109c616565b600160a060020a0333811660009081526002602052604080822093909355908516815220546107d2908363ffffffff6109d816565b600160a060020a0380851660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60005433600160a060020a0390811691161461084e57600080fd5b61085882826109ee565b5050565b600160a060020a033381166000908152600360209081526040808320938616835292905290812054610894908363ffffffff6109d816565b600160a060020a0333811660008181526003602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60005433600160a060020a0390811691161461094657600080fd5b600160a060020a038116151561095b57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828211156109d257fe5b50900390565b6000828201838110156109e757fe5b9392505050565b600160a060020a0382161515610a0357600080fd5b60008111610a1057600080fd5b610a1a8282610ad4565b600160a060020a033016600090815260026020526040902054610a43908263ffffffff6109c616565b600160a060020a033081166000908152600260205260408082209390935590841681522054610a78908263ffffffff6109d816565b600160a060020a0380841660008181526002602052604090819020939093559130909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050565b600160a060020a03821660009081526005602052604090205460ff161515610858576004805460018101610b088382610b5a565b5060009182526020808320919091018054600160a060020a03861673ffffffffffffffffffffffffffffffffffffffff19909116811790915582526005905260409020805460ff191660011790555050565b815481835581811511610b7e57600083815260209020610b7e918101908301610b83565b505050565b610ba191905b80821115610b9d5760008155600101610b89565b5090565b905600a165627a7a72305820b060709598ff8e1b77162b60b7b2fe5750b817e8975ed234b4542b909bb1307f0029"
}