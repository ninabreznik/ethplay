{
  "address": "0x6f3e5cf1084e5cacc86f8b3d8be0c9d06ce34530",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RedTokenCore",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-08\n*/\n\n// File: contracts\\math\\SafeMath.sol\n\npragma solidity 0.5.7;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts\\RedTokenAccessControl.sol\n\npragma solidity 0.5.7;\n\n/*\n * @title RedTokenAccessControl\n * @notice This contract defines organizational roles and permissions.\n */\ncontract RedTokenAccessControl {\n\n  event Paused();\n  event Unpaused();\n  event PausedUser(address indexed account);\n  event UnpausedUser(address indexed account);\n\n  /*\n   * @notice CEO's address\n   */\n  address public ceoAddress;\n\n  /*\n   * @notice CFO's address\n   */\n  address public cfoAddress;\n\n  /*\n   * @notice COO's address\n   */\n  address public cooAddress;\n\n  bool public paused = false;\n\n  /*\n   * @notice paused users status\n   */\n  mapping (address => bool) private pausedUsers;\n\n  /*\n   * @notice init constructor\n   */\n  constructor () internal {\n      ceoAddress = msg.sender;\n      cfoAddress = msg.sender;\n      cooAddress = msg.sender;\n  }\n\n  /*\n   * @dev Modifier to make a function only callable by the CEO\n   */\n  modifier onlyCEO() {\n    require(msg.sender == ceoAddress);\n    _;\n  }\n\n  /*\n   * @dev Modifier to make a function only callable by the CFO\n   */\n  modifier onlyCFO() {\n    require(msg.sender == cfoAddress);\n    _;\n  }\n\n  /*\n   * @dev Modifier to make a function only callable by the COO\n   */\n  modifier onlyCOO() {\n    require(msg.sender == cooAddress);\n    _;\n  }\n\n  /*\n   * @dev Modifier to make a function only callable by C-level execs\n   */\n  modifier onlyCLevel() {\n    require(\n      msg.sender == cooAddress ||\n      msg.sender == ceoAddress ||\n      msg.sender == cfoAddress\n    );\n    _;\n  }\n\n  /*\n   * @dev Modifier to make a function only callable by CEO or CFO\n   */\n  modifier onlyCEOOrCFO() {\n    require(\n      msg.sender == cfoAddress ||\n      msg.sender == ceoAddress\n    );\n    _;\n  }\n\n  /*\n   * @dev Modifier to make a function only callable by CEO or COO\n   */\n  modifier onlyCEOOrCOO() {\n    require(\n      msg.sender == cooAddress ||\n      msg.sender == ceoAddress\n    );\n    _;\n  }\n\n  /*\n   * @notice Sets a new CEO\n   * @param _newCEO - the address of the new CEO\n   */\n  function setCEO(address _newCEO) external onlyCEO {\n    require(_newCEO != address(0));\n    ceoAddress = _newCEO;\n  }\n\n  /*\n   * @notice Sets a new CFO\n   * @param _newCFO - the address of the new CFO\n   */\n  function setCFO(address _newCFO) external onlyCEO {\n    require(_newCFO != address(0));\n    cfoAddress = _newCFO;\n  }\n\n  /*\n   * @notice Sets a new COO\n   * @param _newCOO - the address of the new COO\n   */\n  function setCOO(address _newCOO) external onlyCEO {\n    require(_newCOO != address(0));\n    cooAddress = _newCOO;\n  }\n\n  /* Pausable functionality adapted from OpenZeppelin **/\n  /*\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /*\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /*\n   * @notice called by any C-LEVEL to pause, triggers stopped state\n   */\n  function pause() external onlyCLevel whenNotPaused {\n    paused = true;\n    emit Paused();\n  }\n\n  /*\n   * @notice called by any C-LEVEL to unpause, returns to normal state\n   */\n  function unpause() external onlyCLevel whenPaused {\n    paused = false;\n    emit Unpaused();\n  }\n\n  /* user Pausable functionality ref someting : openzeppelin/access/Roles.sol **/\n  /*\n   * @dev Modifier to make a function callable only when the user is not paused.\n   */\n  modifier whenNotPausedUser(address account) {\n    require(account != address(0));\n    require(!pausedUsers[account]);\n    _;\n  }\n\n  /*\n   * @dev Modifier to make a function callable only when the user is paused.\n   */\n  modifier whenPausedUser(address account) {\n    require(account != address(0));\n    require(pausedUsers[account]);\n    _;\n  }\n\n  /*\n    * @dev check if an account has this pausedUsers\n    * @return bool\n    */\n  function has(address account) internal view returns (bool) {\n      require(account != address(0));\n      return pausedUsers[account];\n  }\n  \n  /*\n   * @notice _addPauseUser\n   */\n  function _addPauseUser(address account) internal {\n      require(account != address(0));\n      require(!has(account));\n\n      pausedUsers[account] = true;\n\n      emit PausedUser(account);\n  }\n\n  /*\n   * @notice _unpausedUser\n   */\n  function _unpausedUser(address account) internal {\n      require(account != address(0));\n      require(has(account));\n\n      pausedUsers[account] = false;\n      emit UnpausedUser(account);\n  }\n\n  /*\n   * @notice isPausedUser\n   */\n  function isPausedUser(address account) external view returns (bool) {\n      return has(account);\n  }\n\n  /*\n   * @notice called by the COO to pauseUser, triggers stopped user state\n   */\n  function pauseUser(address account) external onlyCOO whenNotPausedUser(account) {\n    _addPauseUser(account);\n  }\n\n  /*\n   * @notice called by any C-LEVEL to unpauseUser, returns to user state\n   */\n  function unpauseUser(address account) external onlyCLevel whenPausedUser(account) {\n    _unpausedUser(account);\n  }\n}\n\n// File: contracts\\RedTokenBase.sol\n\npragma solidity 0.5.7;\n\n\n\n/*\n * @title RedTokenBase\n * @notice This contract defines the RedToken data structure and how to read from it / functions\n */\ncontract RedTokenBase is RedTokenAccessControl {\n  using SafeMath for uint256;\n\n  /*\n   * @notice Product defines a RedToken\n   */ \n  struct RedToken {\n    uint256 tokenId;\n    string rmsBondNo;\n    uint256 bondAmount;\n    uint256 listingAmount;\n    uint256 collectedAmount;\n    uint createdTime;\n    bool isValid;\n  }\n\n  /*\n   * @notice tokenId for share users by listingAmount\n   */\n  mapping (uint256 => mapping(address => uint256)) shareUsers;\n\n  /*\n   * @notice tokenid by share accounts in shareUsers list iterator.\n   */\n  mapping (uint256 => address []) shareUsersKeys;\n  \n  /*\n   * @notice All redTokens in existence.\n   * @dev The ID of each redToken is an index in this array.\n   */\n  RedToken[] redTokens;\n  \n  /*\n   * @notice Get a redToken RmsBondNo\n   * @param _tokenId the token id\n   */\n  function redTokenRmsBondNo(uint256 _tokenId) external view returns (string memory) {\n    return redTokens[_tokenId].rmsBondNo;\n  }\n\n  /*\n   * @notice Get a redToken BondAmount\n   * @param _tokenId the token id\n   */\n  function redTokenBondAmount(uint256 _tokenId) external view returns (uint256) {\n    return redTokens[_tokenId].bondAmount;\n  }\n\n  /*\n   * @notice Get a redToken ListingAmount\n   * @param _tokenId the token id\n   */\n  function redTokenListingAmount(uint256 _tokenId) external view returns (uint256) {\n    return redTokens[_tokenId].listingAmount;\n  }\n  \n  /*\n   * @notice Get a redToken CollectedAmount\n   * @param _tokenId the token id\n   */\n  function redTokenCollectedAmount(uint256 _tokenId) external view returns (uint256) {\n    return redTokens[_tokenId].collectedAmount;\n  }\n\n  /*\n   * @notice Get a redToken CreatedTime\n   * @param _tokenId the token id\n   */\n  function redTokenCreatedTime(uint256 _tokenId) external view returns (uint) {\n    return redTokens[_tokenId].createdTime;\n  }\n\n  /*\n   * @notice isValid a redToken\n   * @param _tokenId the token id\n   */\n  function isValidRedToken(uint256 _tokenId) public view returns (bool) {\n    return redTokens[_tokenId].isValid;\n  }\n\n  /*\n   * @notice info a redToken\n   * @param _tokenId the token id\n   */\n  function redTokenInfo(uint256 _tokenId)\n    external view returns (uint256, string memory, uint256, uint256, uint256, uint)\n  {\n    require(isValidRedToken(_tokenId));\n    RedToken memory _redToken = redTokens[_tokenId];\n\n    return (\n        _redToken.tokenId,\n        _redToken.rmsBondNo,\n        _redToken.bondAmount,\n        _redToken.listingAmount,\n        _redToken.collectedAmount,\n        _redToken.createdTime\n    );\n  }\n  \n  /*\n   * @notice info a token of share users\n   * @param _tokenId the token id\n   */\n  function redTokenInfoOfshareUsers(uint256 _tokenId) external view returns (address[] memory, uint256[] memory) {\n    require(isValidRedToken(_tokenId));\n\n    uint256 keySize = shareUsersKeys[_tokenId].length;\n\n    address[] memory addrs   = new address[](keySize);\n    uint256[] memory amounts = new uint256[](keySize);\n\n    for (uint index = 0; index < keySize; index++) {\n      addrs[index]   = shareUsersKeys[_tokenId][index];\n      amounts[index] = shareUsers[_tokenId][addrs[index]];\n    }\n    \n    return (addrs, amounts);\n  }\n}\n\n// File: contracts\\interfaces\\ERC721.sol\n\npragma solidity 0.5.7;\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\ninterface ERC721 {\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\n    ///  may be created and assigned without emitting Transfer. At the time of\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    /// @dev This emits when the approved address for an NFT is changed or\n    ///  reaffirmed. The zero address indicates there is no approved address.\n    ///  When a Transfer event emits, this also indicates that the approved\n    ///  address for that NFT (if any) is reset to none.\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    ///  The operator can manage all NFTs of the owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    ///  function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    ///  about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n    ///  `onERC721Received` on `_to` and throws if the return value is not\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    ///  except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\n    ///  operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId) external payable;\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    ///  all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    ///  multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n// File: contracts\\interfaces\\ERC721Metadata.sol\n\npragma solidity 0.5.7;\n\n/*\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n *  Note: the ERC-165 identifier for this interface is 0x5b5e139f\n */\ninterface ERC721Metadata /* is ERC721 */ {\n    \n    /*\n     * @notice A descriptive name for a collection of NFTs in this contract\n     */\n    function name() external pure returns (string memory _name);\n\n    /*\n     * @notice An abbreviated name for NFTs in this contract\n     */ \n    function symbol() external pure returns (string memory _symbol);\n\n    /*\n     * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n     * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n     *  3986. The URI may point to a JSON file that conforms to the \"ERC721\n     *  Metadata JSON Schema\".\n     */\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n}\n\n// File: contracts\\interfaces\\ERC721Enumerable.sol\n\npragma solidity 0.5.7;\n\n/*\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n *  Note: the ERC-165 identifier for this interface is 0x780e9d63\n */\ninterface ERC721Enumerable /* is ERC721 */ {\n    /*\n     * @notice Count NFTs tracked by this contract\n     * @return A count of valid NFTs tracked by this contract, where each one of\n     *  them has an assigned and queryable owner not equal to the zero address\n     */\n    function totalSupply() external view returns (uint256);\n\n    /*\n     * @notice Enumerate valid NFTs\n     * @dev Throws if `_index` >= `totalSupply()`.\n     * @param _index A counter less than `totalSupply()`\n     * @return The token identifier for the `_index`th NFT,\n     *  (sort order not specified)\n     */\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n\n    /*\n     * @notice Enumerate NFTs assigned to an owner\n     * @dev Throws if `_index` >= `balanceOf(_owner)` or if\n     *  `_owner` is the zero address, representing invalid NFTs.\n     * @param _owner An address where we are interested in NFTs owned by them\n     * @param _index A counter less than `balanceOf(_owner)`\n     * @return The token identifier for the `_index`th NFT assigned to `_owner`,\n     *   (sort order not specified)\n     */\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 _tokenId);\n}\n\n// File: contracts\\interfaces\\ERC165.sol\n\npragma solidity 0.5.7;\n\ninterface ERC165 {\n    /*\n     * @notice Query if a contract implements an interface\n     * @param interfaceID The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     *  uses less than 30,000 gas.\n     * @return `true` if the contract implements `interfaceID` and\n     *  `interfaceID` is not 0xffffffff, `false` otherwise\n     */\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\n// File: contracts\\strings\\Strings.sol\n\npragma solidity 0.5.7;\n\nlibrary Strings {\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\n    bytes memory _ba = bytes(_a);\n    bytes memory _bb = bytes(_b);\n    bytes memory _bc = bytes(_c);\n    bytes memory _bd = bytes(_d);\n    bytes memory _be = bytes(_e);\n    string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n    bytes memory babcde = bytes(abcde);\n    uint k = 0;\n    for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n    for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n    for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n    for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n    for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n    return string(babcde);\n  }\n\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\n    return strConcat(_a, _b, _c, _d, \"\");\n  }\n\n  function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\n    return strConcat(_a, _b, _c, \"\", \"\");\n  }\n\n  function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\n    return strConcat(_a, _b, \"\", \"\", \"\");\n  }\n\n  function uint2str(uint i) internal pure returns (string memory) {\n    if (i == 0) return \"0\";\n    uint j = i;\n    uint len;\n    while (j != 0){\n        len++;\n        j /= 10;\n    }\n    bytes memory bstr = new bytes(len);\n    uint k = len - 1;\n    while (i != 0){\n        bstr[k--] = byte(uint8(48 + i % 10));\n        i /= 10;\n    }\n    return string(bstr);\n  }\n}\n\n// File: contracts\\interfaces\\ERC721TokenReceiver.sol\n\npragma solidity 0.5.7;\n\n/*\n * @dev Note: the ERC-165 identifier for this interface is 0xf0b9e5ba\n */\ninterface ERC721TokenReceiver {\n    /*\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     *  after a `transfer`. This function MAY throw to revert and reject the\n     *  transfer. This function MUST use 50,000 gas or less. Return of other\n     *  than the magic value MUST result in the transaction being reverted.\n     *  Note: the contract address is always the message sender.\n     * @param _from The sending address\n     * @param _tokenId The NFT identifier which is being transfered\n     * @param _data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n     *  unless throwing\n     */\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\n}\n\n// File: contracts\\RedTokenOwnership.sol\n\npragma solidity 0.5.7;\n\n\n\n\n\n\n\n\n/*\n * @title RedTokenOwnership\n * @notice control by TokenBase.\n */\ncontract RedTokenOwnership is RedTokenBase, ERC721, ERC165, ERC721Metadata, ERC721Enumerable {\n  using SafeMath for uint256;\n\n  // Total amount of tokens\n  uint256 private totalTokens;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) private tokenOwner;\n\n  // Mapping from owner to list of owned token IDs\n  mapping (address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping (uint256 => uint256) internal ownedTokensIndex;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner address to operator address to approval\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  /** events **/\n  event calculateShareUsers(uint256 tokenId, address owner, address from, address to, uint256 amount);\n  event CollectedAmountUpdate(uint256 tokenId, address owner, uint256 amount);\n\n  /** Constants **/\n  // Configure these for your own deployment\n  string internal constant NAME = \"RedToken\";\n  string internal constant SYMBOL = \"REDT\";\n  string internal tokenMetadataBaseURI = \"https://doc.reditus.co.kr/?docid=\";\n\n  /** structs **/\n  function supportsInterface(\n    bytes4 interfaceID) // solium-disable-line dotta/underscore-function-arguments\n    external view returns (bool)\n  {\n    return\n      interfaceID == this.supportsInterface.selector || // ERC165\n      interfaceID == 0x5b5e139f || // ERC721Metadata\n      interfaceID == 0x80ac58cd || // ERC-721\n      interfaceID == 0x780e9d63; // ERC721Enumerable\n  }\n\n  /*\n   * @notice Guarantees msg.sender is owner of the given token\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n   */\n  modifier onlyOwnerOf(uint256 _tokenId) {\n    require(ownerOf(_tokenId) == msg.sender);\n    _;\n  }\n\n  /** external functions **/  \n  /*\n   * @notice token's name\n   */\n  function name() external pure returns (string memory) {\n    return NAME;\n  }\n\n  /*\n   * @notice symbols's name\n   */\n  function symbol() external pure returns (string memory) {\n    return SYMBOL;\n  }\n\n  /*\n   * @notice tokenURI\n   * @dev do not checked in array and used function isValidRedToken value is not important, only check in redTokens array\n   */\n  function tokenURI(uint256 _tokenId)\n    external\n    view\n    returns (string memory infoUrl)\n  {\n    if ( isValidRedToken(_tokenId) ){\n      return Strings.strConcat( tokenMetadataBaseURI, Strings.uint2str(_tokenId));\n    }else{\n      return Strings.strConcat( tokenMetadataBaseURI, Strings.uint2str(_tokenId));\n    }\n  }\n\n  /*\n   * @notice setTokenMetadataBaseURI\n   */\n  function setTokenMetadataBaseURI(string calldata _newBaseURI) external onlyCOO {\n    tokenMetadataBaseURI = _newBaseURI;\n  }\n\n  /*\n   * @notice Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() external view returns (uint256) {\n    return totalTokens;\n  }\n\n  /*\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /*\n   * @notice Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokens[_owner].length;\n  }\n\n  /*\n   * @notice Gets the list of tokens owned by a given address\n   * @param _owner address to query the tokens of\n   * @return uint256[] representing the list of tokens owned by the passed address\n   */\n  function tokensOf(address _owner) external view returns (uint256[] memory) {\n    require(_owner != address(0));\n    return ownedTokens[_owner];\n  }\n\n  /*\n  * @notice Enumerate valid NFTs\n  * @dev Our Licenses are kept in an array and each new License-token is just\n  * the next element in the array. This method is required for ERC721Enumerable\n  * which may support more complicated storage schemes. However, in our case the\n  * _index is the tokenId\n  * @param _index A counter less than `totalSupply()`\n  * @return The token identifier for the `_index`th NFT\n  */\n  function tokenByIndex(uint256 _index) external view returns (uint256) {\n    require(_index < totalTokens);\n    return _index;\n  }\n\n  /*\n   * @notice Enumerate NFTs assigned to an owner\n   * @dev Throws if `_index` >= `balanceOf(_owner)` or if\n   *  `_owner` is the zero address, representing invalid NFTs.\n   * @param _owner An address where we are interested in NFTs owned by them\n   * @param _index A counter less than `balanceOf(_owner)`\n   * @return The token identifier for the `_index`th NFT assigned to `_owner`,\n   */\n  function tokenOfOwnerByIndex(address _owner, uint256 _index)\n    external\n    view\n    returns (uint256 _tokenId)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /*\n   * @notice Gets the approved address to take ownership of a given token ID\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved to take ownership of the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /*\n   * @notice Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /*\n   * @notice Approves another address to claim for the ownership of the given token ID\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId)\n    external\n    payable\n    whenNotPaused\n    whenNotPausedUser(msg.sender)\n    onlyOwnerOf(_tokenId)\n  {\n    require(_to != ownerOf(_tokenId));\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n      tokenApprovals[_tokenId] = _to;\n\n      emit Approval(ownerOf(_tokenId), _to, _tokenId);\n    }\n  }\n\n  /*\n   * @notice Enable or disable approval for a third party (\"operator\") to manage all your assets\n   * @dev Emits the ApprovalForAll event\n   * @param _to Address to add to the set of authorized operators.\n   * @param _approved True if the operators is approved, false to revoke approval\n   */\n  function setApprovalForAll(address _to, bool _approved)\n    external\n    whenNotPaused\n    whenNotPausedUser(msg.sender)\n  {\n    if(_approved) {\n      approveAll(_to);\n    } else {\n      disapproveAll(_to);\n    }\n  }\n\n  /*\n   * @notice Approves another address to claim for the ownership of any tokens owned by this account\n   * @param _to address to be approved for the given token ID\n   */\n  function approveAll(address _to)\n    internal\n    whenNotPaused\n    whenNotPausedUser(msg.sender)\n  {\n    require(_to != msg.sender);\n    require(_to != address(0));\n    operatorApprovals[msg.sender][_to] = true;\n\n    emit ApprovalForAll(msg.sender, _to, true);\n  }\n\n  /*\n   * @notice Removes approval for another address to claim for the ownership of any\n   *  tokens owned by this account.\n   * @dev Note that this only removes the operator approval and\n   *  does not clear any independent, specific approvals of token transfers to this address\n   * @param _to address to be disapproved for the given token ID\n   */\n  function disapproveAll(address _to)\n    internal\n    whenNotPaused\n    whenNotPausedUser(msg.sender)\n  {\n    require(_to != msg.sender);\n    delete operatorApprovals[msg.sender][_to];\n    \n    emit ApprovalForAll(msg.sender, _to, false);\n  }\n\n  /*\n   * @notice Tells whether the msg.sender is approved to transfer the given token ID or not\n   * Checks both for specific approval and operator approval\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return bool whether transfer by msg.sender is approved for the given token ID or not\n   */\n  function isSenderApprovedFor(uint256 _tokenId) public view returns (bool) {\n    return\n      ownerOf(_tokenId) == msg.sender ||\n      getApproved(_tokenId) == msg.sender ||\n      isApprovedForAll(ownerOf(_tokenId), msg.sender);\n  }\n  \n  /*\n   * @notice Transfers the ownership of a given token ID to another address\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function transfer(address _to, uint256 _tokenId)\n    external\n    payable\n    whenNotPaused\n    whenNotPausedUser(msg.sender)\n    onlyOwnerOf(_tokenId)\n  {\n    _clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n  }\n\n  /*\n   * @notice Transfer a token owned by another address, for which the calling address has\n   *  previously been granted transfer approval by the owner.\n   * @param _from The address that owns the token\n   * @param _to The address that will take ownership of the token. Can be any address, including the caller\n   * @param _tokenId The ID of the token to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    external\n    payable\n    whenNotPaused\n    whenNotPausedUser(msg.sender)\n  {\n    require(isSenderApprovedFor(_tokenId));\n    _clearApprovalAndTransfer(_from, _to, _tokenId);\n  }\n  \n  /*\n   * @notice Transfers the ownership of an NFT from one address to another address\n   * @dev This works identically to the other function with an extra data parameter,\n   *  except this function just sets data to \"\"\n   * @param _from The current owner of the NFT\n   * @param _to The new owner\n   * @param _tokenId The NFT to transfer\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    external\n    payable\n    whenNotPaused\n    whenNotPausedUser(msg.sender)\n  {\n    require(isSenderApprovedFor(_tokenId));\n    _safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /*\n   * @notice Transfers the ownership of an NFT from one address to another address\n   * @dev Throws unless `msg.sender` is the current owner, an authorized\n   * operator, or the approved address for this NFT. Throws if `_from` is\n   * not the current owner. Throws if `_to` is the zero address. Throws if\n   * `_tokenId` is not a valid NFT. When transfer is complete, this function\n   * checks if `_to` is a smart contract (code size > 0). If so, it calls\n   * `onERC721Received` on `_to` and throws if the return value is not\n   * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\n   * @param _from The current owner of the NFT\n   * @param _to The new owner\n   * @param _tokenId The NFT to transfer\n   * @param _data Additional data with no specified format, sent in call to `_to`\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes calldata _data\n  )\n    external\n    payable\n    whenNotPaused\n    whenNotPausedUser(msg.sender)\n  {\n    require(isSenderApprovedFor(_tokenId));\n    _safeTransferFrom(_from, _to, _tokenId, _data);\n  }\n\n  /*\n   * @notice send amount shareUsers\n   */\n  function sendAmountShareUsers(\n    uint256 _tokenId, \n    address _to, \n    uint256 _amount\n  ) \n    external \n    onlyCOO\n    returns (bool) \n  {\n    require(_to != address(0));\n    return _calculateShareUsers(_tokenId, ownerOf(_tokenId), _to, _amount);\n  }\n\n  /*\n   * @notice send amount shareUsers\n   */\n  function sendAmountShareUsersFrom(\n    uint256 _tokenId, \n    address _from, \n    address _to, \n    uint256 _amount\n  ) \n    external \n    onlyCOO\n    returns (bool) \n  {\n    require(_to != address(0));\n    return _calculateShareUsers(_tokenId, _from, _to, _amount);\n  }\n\n  /*\n   * @notice update collectedAmount \n   */\n  function updateCollectedAmount(\n    uint256 _tokenId, \n    uint256 _amount\n  ) \n    external \n    onlyCOO \n    returns (bool) \n  {\n    require(isValidRedToken(_tokenId));\n    require(_amount > 0);\n        \n    redTokens[_tokenId].collectedAmount = redTokens[_tokenId].collectedAmount.add(_amount);\n    \n    emit CollectedAmountUpdate(_tokenId, ownerOf(_tokenId), _amount);\n    return true;\n  }\n\n  /*\n   * @notice createRedToken\n   */\n  function createRedToken(\n    address _user, \n    string calldata _rmsBondNo, \n    uint256 _bondAmount, \n    uint256 _listingAmount\n  ) \n    external \n    onlyCOO \n    returns (uint256) \n  {\n    return _createRedToken(_user,_rmsBondNo,_bondAmount,_listingAmount);\n  }\n\n  /*\n   * @notice burn amount a token by share users\n   */\n  function burnAmountByShareUser(\n    uint256 _tokenId, \n    address _from, \n    uint256 _amount\n  ) \n    external \n    onlyCOO \n    returns (bool) \n  {\n    return _calculateShareUsers(_tokenId, _from, address(0), _amount);\n  }\n  \n  /*\n   * @notice burn RedToken\n   */\n  function burn(\n    address _owner, \n    uint256 _tokenId\n  ) \n    external \n    onlyCOO \n    returns(bool) \n  {\n    require(_owner != address(0));\n    return _burn(_owner, _tokenId);\n  }\n\n  /** internal function **/\n  function isContract(address _addr) internal view returns (bool) {\n    uint size;\n    assembly { size := extcodesize(_addr) }\n    return size > 0;\n  }\n\n  /*\n   * @notice checked shareUser by shareUsersKeys\n   */\n  function isShareUser(\n    uint256 _tokenId, \n    address _from\n  ) \n    internal  \n    view \n    returns (bool) \n  {\n    bool chechedUser = false;\n    for (uint index = 0; index < shareUsersKeys[_tokenId].length; index++) {\n      if (  shareUsersKeys[_tokenId][index] == _from ){\n        chechedUser = true;\n        break;\n      }\n    }\n    return chechedUser;\n  }\n\n  /*\n   * @notice Transfers the ownership of an NFT from one address to another address\n   * @param _from The current owner of the NFT\n   * @param _to The new owner\n   * @param _tokenId The NFT to transfer\n   * @param _data Additional data with no specified format, sent in call to `_to`\n   */\n  function _safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data\n  )\n    internal\n  {\n    _clearApprovalAndTransfer(_from, _to, _tokenId);\n\n    if (isContract(_to)) {\n      bytes4 tokenReceiverResponse = ERC721TokenReceiver(_to).onERC721Received.gas(50000)(\n        _from, _tokenId, _data\n      );\n      require(tokenReceiverResponse == bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")));\n    }\n  }\n\n  /*\n  * @notice Internal function to clear current approval and transfer the ownership of a given token ID\n  * @param _from address which you want to send tokens from\n  * @param _to address which you want to transfer the token to\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function _clearApprovalAndTransfer(\n    address _from, \n    address _to, \n    uint256 _tokenId\n  )\n    internal \n  {\n    require(_to != address(0));\n    require(_to != ownerOf(_tokenId));\n    require(ownerOf(_tokenId) == _from);\n    require(isValidRedToken(_tokenId));\n    \n    address owner = ownerOf(_tokenId);\n\n    _clearApproval(owner, _tokenId);\n    _removeToken(owner, _tokenId);\n    _addToken(_to, _tokenId);\n    _changeTokenShareUserByOwner(owner, _to, _tokenId);\n\n    emit Transfer(owner, _to, _tokenId);\n  }\n\n  /*\n   * @notice change token owner rate sending\n   * @param _from address which you want to change rate from\n   * @param _to address which you want to change rate the token to\n   * @param _tokenId uint256 ID of the token to be change rate\n   */\n  function _changeTokenShareUserByOwner(\n    address _from, \n    address _to, \n    uint256 _tokenId\n  ) \n    internal  \n  {\n    uint256 amount = shareUsers[_tokenId][_from];\n    delete shareUsers[_tokenId][_from];\n\n    shareUsers[_tokenId][_to] = shareUsers[_tokenId][_to].add(amount);\n\n    if ( !isShareUser(_tokenId, _to) ) {\n      shareUsersKeys[_tokenId].push(_to);\n    }\n  }\n\n  /*\n   * @notice remove shareUsers\n   */\n  function _calculateShareUsers(\n    uint256 _tokenId, \n    address _from, \n    address _to, \n    uint256 _amount\n  ) \n    internal\n    returns (bool) \n  {\n    require(_from != address(0));\n    require(_from != _to);\n    require(_amount > 0);\n    require(shareUsers[_tokenId][_from] >= _amount);\n    require(isValidRedToken(_tokenId));\n    \n    shareUsers[_tokenId][_from] = shareUsers[_tokenId][_from].sub(_amount);\n    shareUsers[_tokenId][_to] = shareUsers[_tokenId][_to].add(_amount);\n\n    if ( !isShareUser(_tokenId, _to) ) {\n      shareUsersKeys[_tokenId].push(_to);\n    }\n\n    emit calculateShareUsers(_tokenId, ownerOf(_tokenId), _from, _to, _amount);\n    return true;\n  }\n\n  /*\n  * @notice Internal function to clear current approval of a given token ID\n  * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function _clearApproval(\n    address _owner,\n    uint256 _tokenId\n  ) \n    internal \n  {\n    require(ownerOf(_tokenId) == _owner);\n    \n    tokenApprovals[_tokenId] = address(0);\n\n    emit Approval(_owner, address(0), _tokenId);\n  }\n\n  function _createRedToken(\n    address _user, \n    string memory _rmsBondNo, \n    uint256 _bondAmount, \n    uint256 _listingAmount\n  ) \n    internal \n    returns (uint256)\n  {\n    require(_user != address(0));\n    require(bytes(_rmsBondNo).length > 0);\n    require(_bondAmount > 0);\n    require(_listingAmount > 0);\n\n    uint256 _newTokenId = redTokens.length;\n\n    RedToken memory _redToken = RedToken({\n      tokenId: _newTokenId,\n      rmsBondNo: _rmsBondNo,\n      bondAmount: _bondAmount,\n      listingAmount: _listingAmount,\n      collectedAmount: 0,\n      createdTime: now,\n      isValid:true\n    });\n\n    redTokens.push(_redToken) - 1;\n\n    shareUsers[_newTokenId][_user] = shareUsers[_newTokenId][_user].add(_listingAmount);\n    shareUsersKeys[_newTokenId].push(_user);\n\n    _addToken(_user, _newTokenId);\n\n    emit Transfer(address(0), _user, _newTokenId);\n\n    return _newTokenId;\n  }\n  \n  /*\n  * @notice Internal function to add a token ID to the list of a given address\n  * @param _to address representing the new owner of the given token ID\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n  */\n  function _addToken(\n    address _to, \n    uint256 _tokenId\n  ) \n    internal \n  {\n    require(tokenOwner[_tokenId] == address(0));\n\n    tokenOwner[_tokenId] = _to;\n    uint256 length = balanceOf(_to);\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n    totalTokens = totalTokens.add(1);\n  }\n\n  /*\n  * @notice Internal function to remove a token ID from the list of a given address\n  * @param _from address representing the previous owner of the given token ID\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n  */\n  function _removeToken(\n    address _from, \n    uint256 _tokenId\n  ) \n    internal \n  {\n    require(ownerOf(_tokenId) == _from);\n\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    tokenOwner[_tokenId] = address(0);\n    ownedTokens[_from][tokenIndex] = lastToken;\n    ownedTokens[_from][lastTokenIndex] = 0;\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokens[_from].length--;\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n    totalTokens = totalTokens.sub(1);\n  }\n\n  /*\n   * @dev Internal function to burn a specific token\n   * @dev Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(\n    address _owner, \n    uint256 _tokenId\n  ) \n    internal \n    returns(bool) \n  {\n    require(ownerOf(_tokenId) == _owner);\n    _clearApproval(_owner, _tokenId);\n    _removeToken(_owner, _tokenId);\n\n    redTokens[_tokenId].isValid = false;\n\n    emit Transfer(_owner, address(0), _tokenId);\n    return true;\n  }\n}\n\n// File: contracts\\RedTokenCore.sol\n\npragma solidity 0.5.7;\n\n\n/*\n * @title RedTokenCore is the entry point of the contract\n * @notice RedTokenCore is the entry point and it controls the ability to set a new\n * contract address, in the case where an upgrade is required\n */\ncontract RedTokenCore is RedTokenOwnership{\n\n  constructor() public {\n    ceoAddress = msg.sender;\n    cooAddress = msg.sender;\n    cfoAddress = msg.sender;\n  }\n\n  function() external {\n    assert(false);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setTokenMetadataBaseURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendAmountShareUsersFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPausedUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"redTokenCreatedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendAmountShareUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isSenderApprovedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_rmsBondNo\",\"type\":\"string\"},{\"name\":\"_bondAmount\",\"type\":\"uint256\"},{\"name\":\"_listingAmount\",\"type\":\"uint256\"}],\"name\":\"createRedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unpauseUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isValidRedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"redTokenBondAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"redTokenRmsBondNo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"redTokenListingAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pauseUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"redTokenCollectedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnAmountByShareUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"redTokenInfoOfshareUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateCollectedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"redTokenInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateShareUsers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectedAmountUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PausedUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnpausedUser\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "68747470733a2f2f646f632e726564697475732e636f2e6b722f3f646f6369643d"
}