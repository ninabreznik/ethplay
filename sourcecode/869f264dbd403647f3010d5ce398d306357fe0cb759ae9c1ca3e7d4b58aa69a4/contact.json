{
  "address": "0x4e4f4bbf55229ac8ba46ed4c1608498b210e8539",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoDuel",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-16\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\ncontract SafeMath {\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow.\n    */\n    function safeSub(uint256 x, uint256 y) internal pure returns (uint256) {\n        assert(y <= x);\n        uint256 z = x - y;\n        return z;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function safeAdd(uint256 x, uint256 y) internal pure returns (uint256) {\n        uint256 z = x + y;\n        assert(z >= x);\n        return z;\n    }\n\n    /**\n    * @dev Integer division of two numbers, reverts on division by zero.\n    */\n    function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\n        uint256 z = x / y;\n        return z;\n    }\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function safeMul(uint256 x, uint256 y) internal pure returns (uint256) {\n        if (x == 0) {\n            return 0;\n        }\n\n        uint256 z = x * y;\n        assert(z / x == y);\n        return z;\n    }\n\n    /**\n    * @dev Returns the integer percentage of the number.\n    */\n    function safePerc(uint256 x, uint256 y) internal pure returns (uint256) {\n        if (x == 0) {\n            return 0;\n        }\n\n        uint256 z = x * y;\n        assert(z / x == y);\n        z = z / 10000; // percent to hundredths\n        return z;\n    }\n\n    /**\n    * @dev Returns the minimum value of two numbers.\n    */\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\n        uint256 z = x <= y ? x : y;\n        return z;\n    }\n\n    /**\n    * @dev Returns the maximum value of two numbers.\n    */\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n        uint256 z = x >= y ? x : y;\n        return z;\n    }\n}\n\n\n/**\n * @title Ownable contract - base contract with an owner\n */\ncontract Ownable {\n\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        assert(_newOwner != address(0));\n        newOwner = _newOwner;\n    }\n\n    /**\n     * @dev Accept transferOwnership.\n     */\n    function acceptOwnership() public {\n        if (msg.sender == newOwner) {\n            emit OwnershipTransferred(owner, newOwner);\n            owner = newOwner;\n        }\n    }\n}\n\n\n/**\n * @title Agent contract - base contract with an agent\n */\ncontract Agent is Ownable {\n\n    address public defAgent;\n\n    mapping(address => bool) public Agents;\n\n    event UpdatedAgent(address _agent, bool _status);\n\n    constructor() public {\n        defAgent = msg.sender;\n        Agents[msg.sender] = true;\n    }\n\n    modifier onlyAgent() {\n        assert(Agents[msg.sender]);\n        _;\n    }\n\n    function updateAgent(address _agent, bool _status) public onlyOwner {\n        assert(_agent != address(0));\n        Agents[_agent] = _status;\n\n        emit UpdatedAgent(_agent, _status);\n    }\n}\n\n\n/**\n * @title CryptoDuel game\n */\ncontract CryptoDuel is Agent, SafeMath {\n\n    uint public fee = 100;            //  1% from bet\n    uint public refGroupFee = 5000;   // 50% from profit\n    uint public refUserFee = 1000;  // 10% from profit\n    uint public min = 1000000000000000;       // 0.001 ETH\n    uint public max = 1000000000000000000000;  // 1000 ETH\n\n    uint256 public start = 0;         // Must be equal to the date of issue tokens\n    uint256 public period = 30 days;  // By default, the dividend accrual period is 30 days\n\n    /** State\n     *\n     * - New: 0\n     * - Deleted: 1\n     * - OnGoing: 2\n     * - Closed: 3\n     */\n    enum State{New, Deleted, OnGoing, Closed}\n\n    struct _duel {\n        address creator;\n        address responder;\n        uint bet;\n        uint blocknumber;\n        int refID;\n        State state;\n    }\n\n    _duel[] public Duels;\n    mapping(int => address) public RefGroup;                 // RefGroup[id group] = address referrer\n    mapping(address => address) public RefAddr;              // RefAddr[address referal] = address referrer\n    mapping(uint => address) public duelWinner;              // for check who win\n\n    mapping(uint => uint) public reward;                     // reward[period] = amount\n    mapping(address => uint) public rewardGroup;             // rewardGroup[address] = amount\n    mapping(address => uint) public rewardAddr;              // rewardAddr[address] = amount\n\n    mapping(uint => bool) public AlreadyReward;              // AlreadyReward[period] = true/false\n\n    event newDuel(uint duel, address indexed creator, address indexed responder, uint bet, int refID);\n    event deleteDuel(uint duel);\n    event respondDuel(uint duel, address indexed responder);\n\n    event refundDuel(uint duel);\n    event resultDuel(uint duel, address indexed winner, uint sum);\n\n    event changeMin(uint min);\n    event changeMax(uint max);\n\n    event changeRefGroup(int ID, address referrer);\n    event changeRefAddr(address referal, address referrer);\n\n    event changeFee(uint fee);\n    event changeRefGroupFee(uint refGroupFee);\n    event changeRefFee(uint refFee);\n\n    event withdrawProfit(uint fee, address RefGroup);\n\n    event UpdatedPeriod(uint _period);\n\n    constructor() public {\n        RefGroup[0] = msg.sender;\n        emit changeRefGroup(0, msg.sender);\n    }\n\n    function CreateDuel(address _responder) payable external {\n\n        require(msg.value >= min && msg.value <= max);\n\n        Duels.push(_duel({\n            creator : msg.sender,\n            responder : _responder,\n            bet : msg.value,\n            blocknumber : 0,\n            state : State.New,\n            refID : 0\n            }));\n\n        emit newDuel(Duels.length - 1, msg.sender, _responder, msg.value, 0);\n    }\n\n    function CreateDuel(address _responder, int _refID) payable external {\n\n        require(msg.value >= min && msg.value <= max);\n        require(RefGroup[_refID] != address(0));\n\n        Duels.push(_duel({\n            creator : msg.sender,\n            responder : _responder,\n            bet : msg.value,\n            blocknumber : 0,\n            state : State.New,\n            refID : _refID\n            }));\n\n        emit newDuel(Duels.length - 1, msg.sender, _responder, msg.value, _refID);\n    }\n\n    function RespondDuel(uint _duelID) payable external {\n\n        _duel storage duel = Duels[_duelID];\n\n        require(duel.state == State.New);\n        require(duel.bet == msg.value);\n        require(duel.responder == msg.sender || duel.responder == address(0));\n\n        duel.state = State.OnGoing;\n        duel.responder = msg.sender;\n        duel.blocknumber = block.number;\n\n        emit respondDuel(_duelID, msg.sender);\n    }\n\n\n    function DeleteDuel(uint _duelID) external {\n\n        _duel storage duel = Duels[_duelID];\n\n        require(duel.creator == msg.sender);\n        require(duel.state == State.New);\n\n        duel.state = State.Deleted;\n\n        uint duel_fee = safePerc(duel.bet, fee);\n\n        uint256 N = 1;\n        if (block.timestamp > start) {\n            N = (block.timestamp - start) / period + 1;\n        }\n\n        reward[N] = safeAdd(reward[N], duel_fee);\n\n        duel.creator.transfer(safeSub(duel.bet, duel_fee));\n\n        emit deleteDuel(_duelID);\n    }\n\n\n    function GetWin(uint _duelID) external {\n\n        _duel storage duel = Duels[_duelID];\n\n        require(duel.state == State.OnGoing);\n        require(duel.creator == msg.sender || duel.responder == msg.sender);\n        require(block.number > duel.blocknumber + 1);\n\n        duel.state = State.Closed;\n        uint duel_fee = 0;\n\n        uint256 N = 1;\n        if (block.timestamp > start) {\n            N = (block.timestamp - start) / period + 1;\n        }\n\n        if (blockhash(duel.blocknumber) == 0 || (block.number - duel.blocknumber) > 256) {\n\n            duel_fee = safePerc(duel.bet, fee);\n\n            duel.creator.transfer(safeSub(duel.bet, duel_fee));\n            duel.responder.transfer(safeSub(duel.bet, duel_fee));\n\n            reward[N] = safeAdd(reward[N], safeMul(2, duel_fee));\n\n            emit refundDuel(_duelID);\n            duelWinner[_duelID] = address(0);\n\n        } else {\n\n            uint hash = uint(keccak256(abi.encodePacked(blockhash(duel.blocknumber + 1), duel.creator, duel.responder, duel.bet)));\n\n            uint duel_bet_common = safeMul(2, duel.bet);\n            duel_fee = safePerc(duel_bet_common, fee);\n\n            uint _refFee = 0;\n            uint sum = safeSub(duel_bet_common, duel_fee);\n\n            address winner;\n\n            if (hash % 2 == 0) {\n                duel.creator.transfer(sum);\n                winner = duel.creator;\n                emit resultDuel(_duelID, duel.creator, sum);\n\n\n            } else {\n                duel.responder.transfer(sum);\n                winner = duel.responder;\n                emit resultDuel(_duelID, duel.responder, sum);\n            }\n\n            duelWinner[_duelID] = winner;\n            // ref level 1\n            if (RefAddr[winner] != address(0)) {\n                _refFee = refUserFee;\n                rewardAddr[RefAddr[winner]] = safeAdd(rewardAddr[RefAddr[winner]], safePerc(duel_fee, _refFee));\n            }\n\n            // ref group\n            if (duel.refID != 0) {\n                _refFee = safeSub(refGroupFee, _refFee);\n                rewardGroup[RefGroup[duel.refID]] = safeAdd(rewardGroup[RefGroup[duel.refID]], safePerc(duel_fee, _refFee));\n                reward[N] = safeAdd(reward[N], safeSub(duel_fee, safePerc(duel_fee, refGroupFee)));\n            } else {\n                reward[N] = safeAdd(reward[N], safeSub(duel_fee, safePerc(duel_fee, _refFee)));\n            }\n        }\n    }\n\n    function setMin(uint _min) external onlyOwner {\n        min = _min;\n        emit changeMin(_min);\n    }\n\n    function setMax(uint _max) external onlyOwner {\n        max = _max;\n        emit changeMax(_max);\n    }\n\n    function setFee(uint _fee) external onlyOwner {\n        fee = _fee;\n        emit changeFee(_fee);\n    }\n\n    function setRefGroupFee(uint _refGroupFee) external onlyOwner {\n        refGroupFee = _refGroupFee;\n        emit changeRefGroupFee(_refGroupFee);\n    }\n\n    function setRefUserFee(uint _refFee) external onlyOwner {\n        refUserFee = _refFee;\n        emit changeRefFee(_refFee);\n    }\n\n\n    function setRefGroup(int _ID, address _referrer) external onlyAgent {\n        RefGroup[_ID] = _referrer;\n        emit changeRefGroup(_ID, _referrer);\n    }\n\n    function setRefAddr(address _referral, address _referrer) external onlyAgent {\n        RefAddr[_referral] = _referrer;\n        emit changeRefAddr(_referral, _referrer);\n    }\n\n    function withdraw() external onlyOwner returns (bool success) {\n        uint256 N = 1;\n        if (block.timestamp > start) {\n            N = (block.timestamp - start) / period;\n        }\n\n        if (!AlreadyReward[N]) {\n            uint amount = reward[N];\n            AlreadyReward[N] = true;\n            msg.sender.transfer(amount);\n            emit withdrawProfit(amount, msg.sender);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function withdrawRefGroup() external returns (bool success) {\n        require(rewardGroup[msg.sender] > 0);\n        uint amount = rewardGroup[msg.sender];\n        rewardGroup[msg.sender] = 0;\n        msg.sender.transfer(amount);\n        emit withdrawProfit(amount, msg.sender);\n        return true;\n    }\n\n    function withdrawRefAddr() external returns (bool success) {\n        require(rewardAddr[msg.sender] > 0);\n        uint amount = rewardAddr[msg.sender];\n        rewardAddr[msg.sender] = 0;\n        msg.sender.transfer(amount);\n        emit withdrawProfit(amount, msg.sender);\n        return true;\n    }\n\n    function withdrawRefBoth() external returns (bool success) {\n        require(rewardAddr[msg.sender] > 0 || rewardGroup[msg.sender] > 0);\n        uint amount = safeAdd(rewardAddr[msg.sender], rewardGroup[msg.sender]);\n        rewardAddr[msg.sender] = 0;\n        rewardGroup[msg.sender] = 0;\n        msg.sender.transfer(amount);\n        emit withdrawProfit(amount, msg.sender);\n        return true;\n    }\n\n    /**\n    * Owner can change period\n    */\n    function setPeriod(uint _period) external onlyOwner {\n        period = _period;\n        emit UpdatedPeriod(_period);\n    }\n\n    /**\n    * Owner can change start\n    */\n    function setStart(uint _start) external onlyOwner {\n        start = _start;\n    }\n}",
  "bytecode": "608060405260646004556113886005556103e860065566038d7ea4c68000600755683635c9adc5dea00000600855600060095562278d00600a5534801561004557600080fd5b506000805433600160a060020a03199182168117835560028054831682179055808352600360209081526040808520805460ff19166001179055848052600c82527f13649b2456f1b42fef0f0040b3aaeabcd21a76a0f3f5defd4f583839455116e880549094168317909355825193845283015280517f2eeb1402719c87048b9fd0ad0e3645e9b91070f3547fd54fb330fa84c76335369281900390910190a1611a4e806100f46000396000f3006080604052600436106101ed5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630f3a9f6581146101f25780631fe9eabc1461020c578063210e2c5d14610224578063269316df1461025857806329cc2584146102705780632bbb6f0c146102995780632c40ef8b146102ae5780632ff11f26146102c657806330893e47146102de57806338520451146103025780633ccfd60b1461031a57806345dc3dd81461032f57806350cdea091461034757806366d1d8f81461037a57806369fe0e2d1461039b5780636ac5db19146103b35780636e84f870146103c857806379ba5097146103e95780637a1b4fe5146103fe5780637e218fa11461048157806383687ef3146104955780638da5cb5b146104ad5780639c3a0262146104c25780639e5fd0bb146104d7578063a5d54a9d146104ec578063a6844c1414610504578063a9fb763c14610519578063b5668b4214610531578063bcbc825014610552578063be9a655514610579578063d4ee1d901461058e578063d5a50165146105a3578063d903aa97146105ae578063ddca3f43146105c3578063e2dd3e0c146105d8578063ef78d4fd146105ef578063f2fde38b14610604578063f6a03ebf14610625578063f88979451461063d578063faad6eb514610652575b600080fd5b3480156101fe57600080fd5b5061020a600435610678565b005b34801561021857600080fd5b5061020a6004356106c7565b34801561023057600080fd5b5061023c600435610716565b60408051600160a060020a039092168252519081900360200190f35b34801561026457600080fd5b5061023c600435610731565b34801561027c57600080fd5b5061028561074c565b604080519115158252519081900360200190f35b3480156102a557600080fd5b50610285610839565b3480156102ba57600080fd5b50610285600435610898565b3480156102d257600080fd5b5061020a6004356108ad565b3480156102ea57600080fd5b5061020a600435600160a060020a03602435166108fc565b34801561030e57600080fd5b5061020a60043561097f565b34801561032657600080fd5b50610285610acf565b34801561033b57600080fd5b5061020a600435610bc3565b34801561035357600080fd5b50610368600160a060020a0360043516610c12565b60408051918252519081900360200190f35b34801561038657600080fd5b50610368600160a060020a0360043516610c24565b3480156103a757600080fd5b5061020a600435610c36565b3480156103bf57600080fd5b50610368610c85565b3480156103d457600080fd5b50610285600160a060020a0360043516610c8b565b3480156103f557600080fd5b5061020a610ca0565b34801561040a57600080fd5b50610416600435610d15565b6040518087600160a060020a0316600160a060020a0316815260200186600160a060020a0316600160a060020a0316815260200185815260200184815260200183815260200182600381111561046857fe5b60ff168152602001965050505050505060405180910390f35b61020a600160a060020a0360043516610d69565b3480156104a157600080fd5b5061020a600435610ec6565b3480156104b957600080fd5b5061023c610f15565b3480156104ce57600080fd5b50610368610f24565b3480156104e357600080fd5b5061023c610f2a565b3480156104f857600080fd5b5061020a600435610f39565b34801561051057600080fd5b50610368611501565b34801561052557600080fd5b50610368600435611507565b34801561053d57600080fd5b5061023c600160a060020a0360043516611519565b34801561055e57600080fd5b5061020a600160a060020a0360043581169060243516611534565b34801561058557600080fd5b506103686115bc565b34801561059a57600080fd5b5061023c6115c2565b61020a6004356115d1565b3480156105ba57600080fd5b506102856116b6565b3480156105cf57600080fd5b50610368611715565b61020a600160a060020a036004351660243561171b565b3480156105fb57600080fd5b5061036861189b565b34801561061057600080fd5b5061020a600160a060020a03600435166118a1565b34801561063157600080fd5b5061020a6004356118e9565b34801561064957600080fd5b50610368611902565b34801561065e57600080fd5b5061020a600160a060020a03600435166024351515611908565b600054600160a060020a0316331461068c57fe5b600a8190556040805182815290517fe92c9d8e3252d3e4cd9d77ffca1d70a1eef8e8b477120ba7f6034ea494624a939181900360200190a150565b600054600160a060020a031633146106db57fe5b60088190556040805182815290517f121dbc318539bdd1bf0ac7f18df9d6d0e63cb66a3b62e49881983273020132879181900360200190a150565b600c60205260009081526040902054600160a060020a031681565b600e60205260009081526040902054600160a060020a031681565b336000908152601160205260408120548190811080610778575033600090815260106020526040812054115b151561078357600080fd5b336000908152601160209081526040808320546010909252909120546107a99190611992565b336000818152601160209081526040808320839055601090915280822082905551929350909183156108fc0291849190818181858888f193505050501580156107f6573d6000803e3d6000fd5b506040805182815233602082015281517f18e6938570e9975e166831d20a32b2779527bbc170b3693623cbac17384a8db4929181900390910190a1600191505090565b336000908152601060205260408120548190811061085657600080fd5b5033600081815260106020526040808220805490839055905190929183156108fc02918491818181858888f193505050501580156107f6573d6000803e3d6000fd5b60126020526000908152604090205460ff1681565b600054600160a060020a031633146108c157fe5b60058190556040805182815290517f8e9039d753ba2f5311b055bf708f6d49941e0681fb76a62440d3012d4da715079181900360200190a150565b3360009081526003602052604090205460ff16151561091757fe5b6000828152600c60209081526040918290208054600160a060020a031916600160a060020a03851690811790915582518581529182015281517f2eeb1402719c87048b9fd0ad0e3645e9b91070f3547fd54fb330fa84c7633536929181900390910190a15050565b6000806000600b8481548110151561099357fe5b600091825260209091206006909102018054909350600160a060020a031633146109bc57600080fd5b6000600584015460ff1660038111156109d157fe5b146109db57600080fd5b60058301805460ff1916600117905560028301546004546109fc91906119ac565b915060019050600954421115610a2457600a546009544203811515610a1d57fe5b0460010190505b6000818152600f6020526040902054610a3d9083611992565b6000828152600f602052604090205582546002840154600160a060020a03909116906108fc90610a6d90856119e3565b6040518115909202916000818181858888f19350505050158015610a95573d6000803e3d6000fd5b506040805185815290517f4b42dabac0acdba3ba531c35c031022c30bfb50bfd6512edb058bb1ecd93943a9181900360200190a150505050565b6000805481908190600160a060020a03163314610ae857fe5b60019150600954421115610b0b57600a546009544203811515610b0757fe5b0491505b60008281526012602052604090205460ff161515610bb957506000818152600f60209081526040808320546012909252808320805460ff19166001179055519091339183156108fc0291849190818181858888f19350505050158015610b75573d6000803e3d6000fd5b506040805182815233602082015281517f18e6938570e9975e166831d20a32b2779527bbc170b3693623cbac17384a8db4929181900390910190a160019250610bbe565b600092505b505090565b600054600160a060020a03163314610bd757fe5b60078190556040805182815290517f3bd0f412c0eef70e0eb982b0f391fa30c51d4e18d44a14c95bcf48384243af9f9181900360200190a150565b60106020526000908152604090205481565b60116020526000908152604090205481565b600054600160a060020a03163314610c4a57fe5b60048190556040805182815290517f6a1db1bf884def8a99e3a9f0c8261f251fed9d085124f9c370396637512742159181900360200190a150565b60085481565b60036020526000908152604090205460ff1681565b600154600160a060020a0316331415610d135760015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360015460008054600160a060020a031916600160a060020a039092169190911790555b565b600b805482908110610d2357fe5b6000918252602090912060069091020180546001820154600283015460038401546004850154600590950154600160a060020a0394851696509390921693909260ff1686565b6007543410158015610d7d57506008543411155b1515610d8857600080fd5b600b60c06040519081016040528033600160a060020a0316815260200183600160a060020a03168152602001348152602001600081526020016000815260200160006003811115610dd557fe5b905281546001808201808555600094855260209485902084516006909402018054600160a060020a0319908116600160a060020a039586161782559585015181840180549097169416939093179094556040830151600283015560608301516003808401919091556080840151600484015560a08401516005840180549193909260ff19909216918490811115610e6857fe5b021790555050600b5460408051600019909201825234602083015260008282015251600160a060020a03851693503392507f46a689ee52909ed7653c99df1bd17d87c723e0774623c64d69fb2cc15f48e2ac9181900360600190a350565b600054600160a060020a03163314610eda57fe5b60068190556040805182815290517fdecc1a86c2896ef4bed29e6cd894a506545aa597c5b5abb61ab6d614e87b9cb39181900360200190a150565b600054600160a060020a031681565b60065481565b600254600160a060020a031681565b600080600080600080600080600b89815481101515610f5457fe5b6000918252602090912060069091020197506002600589015460ff166003811115610f7b57fe5b14610f8557600080fd5b8754600160a060020a0316331480610fa957506001880154600160a060020a031633145b1515610fb457600080fd5b60038801546001014311610fc757600080fd5b60058801805460ff19166003179055600954600097506001965042111561100057600a546009544203811515610ff957fe5b0460010195505b6003880154401580611019575061010088600301544303115b156111525761102e88600201546004546119ac565b885460028a0154919850600160a060020a0316906108fc90611050908a6119e3565b6040518115909202916000818181858888f19350505050158015611078573d6000803e3d6000fd5b5060018801546002890154600160a060020a03909116906108fc9061109d908a6119e3565b6040518115909202916000818181858888f193505050501580156110c5573d6000803e3d6000fd5b506000868152600f60205260409020546110e9906110e460028a6119f7565b611992565b6000878152600f60209081526040918290209290925580518b815290517f1a354409b05f20e34b47462176326f0c68156e9c5dcdc9e9d01f74855a00c86b929181900390910190a16000898152600e602052604090208054600160a060020a03191690556114f6565b600388015488546001808b015460028c01546040805193909501406020808501919091526c01000000000000000000000000600160a060020a0395861681028588015294909216909302605483015260688083019390935283518083039093018352608890910192839052815191929182918401908083835b602083106111ea5780518252601f1990920191602091820191016111cb565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004945061122c600289600201546119f7565b935061123a846004546119ac565b96506000925061124a84886119e3565b91506002850615156112de578754604051600160a060020a039091169083156108fc029084906000818181858888f1935050505015801561128f573d6000803e3d6000fd5b50508654604080518a8152602081018490528151600160a060020a039093169283927fd5d7a0b8fab07917df716174aaf5340f123e0000a7d112f8eb289229f0de7486928290030190a2611368565b6001880154604051600160a060020a039091169083156108fc029084906000818181858888f1935050505015801561131a573d6000803e3d6000fd5b50506001870154604080518a8152602081018490528151600160a060020a039093169283927fd5d7a0b8fab07917df716174aaf5340f123e0000a7d112f8eb289229f0de7486928290030190a25b6000898152600e602090815260408083208054600160a060020a031916600160a060020a038681169182179092558452600d90925290912054161561140c57600654600160a060020a038083166000908152600d602090815260408083205490931682526011905220549093506113e3906110e489866119ac565b600160a060020a038083166000908152600d602090815260408083205490931682526011905220555b6004880154156114c557611422600554846119e3565b60048901546000908152600c6020908152604080832054600160a060020a03168352601090915290205490935061145d906110e489866119ac565b60048901546000908152600c6020908152604080832054600160a060020a031683526010825280832093909355888252600f905220546005546114b191906110e4908a906114ac9082906119ac565b6119e3565b6000878152600f60205260409020556114f6565b6000868152600f60205260409020546114e6906110e4896114ac81886119ac565b6000878152600f60205260409020555b505050505050505050565b60055481565b600f6020526000908152604090205481565b600d60205260009081526040902054600160a060020a031681565b3360009081526003602052604090205460ff16151561154f57fe5b600160a060020a038281166000818152600d60209081526040918290208054600160a060020a0319169486169485179055815192835282019290925281517f7a831e6caa7442c8e5136a0922dd137af3523aafca96cbd62e6ec8924e017b98929181900390910190a15050565b60095481565b600154600160a060020a031681565b6000600b828154811015156115e257fe5b6000918252602082206006909102019150600582015460ff16600381111561160657fe5b1461161057600080fd5b6002810154341461162057600080fd5b6001810154600160a060020a031633148061164657506001810154600160a060020a0316155b151561165157600080fd5b60058101805460ff1916600217905560018101805433600160a060020a031990911681179091554360038301556040805184815290517f8c0e4b140efc5c0284e63b4ea6428fd6b3fcd087e6bc50b31cba70c5dae8c6d8916020908290030190a25050565b33600090815260116020526040812054819081106116d357600080fd5b5033600081815260116020526040808220805490839055905190929183156108fc02918491818181858888f193505050501580156107f6573d6000803e3d6000fd5b60045481565b600754341015801561172f57506008543411155b151561173a57600080fd5b6000818152600c6020526040902054600160a060020a0316151561175d57600080fd5b600b60c06040519081016040528033600160a060020a0316815260200184600160a060020a0316815260200134815260200160008152602001838152602001600060038111156117a957fe5b905281546001808201808555600094855260209485902084516006909402018054600160a060020a0319908116600160a060020a039586161782559585015181840180549097169416939093179094556040830151600283015560608301516003808401919091556080840151600484015560a08401516005840180549193909260ff1990921691849081111561183c57fe5b021790555050600b5460408051600019909201825234602083015281810185905251600160a060020a03861693503392507f46a689ee52909ed7653c99df1bd17d87c723e0774623c64d69fb2cc15f48e2ac9181900360600190a35050565b600a5481565b600054600160a060020a031633146118b557fe5b600160a060020a03811615156118c757fe5b60018054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a031633146118fd57fe5b600955565b60075481565b600054600160a060020a0316331461191c57fe5b600160a060020a038216151561192e57fe5b600160a060020a038216600081815260036020908152604091829020805460ff191685151590811790915582519384529083015280517fefdea550a3bf9a494aa4c9dc6131b82ddac18bde46375308e367bcd2dda4d5c99281900390910190a15050565b6000828201838110156119a157fe5b8091505b5092915050565b6000808315156119bf57600091506119a5565b508282028284828115156119cf57fe5b04146119d757fe5b61271090049392505050565b600080838311156119f057fe5b5050900390565b600080831515611a0a57600091506119a5565b50828202828482811515611a1a57fe5b04146119a157fe00a165627a7a723058204e94391a68bb6080e1558415f32947b6c5940d056f115d5ae4a90e51efce75f80029"
}