{
  "address": "0x41269e5dd8f33537d62baac9e0746a1b6fa90597",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KyberReserve",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-01\n*/\n\npragma solidity 0.4.18;\n\ncontract Utils {\n\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n    uint  constant internal PRECISION = (10**18);\n    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n    uint  constant internal MAX_DECIMALS = 18;\n    uint  constant internal ETH_DECIMALS = 18;\n    mapping(address=>uint) internal decimals;\n\n    function setDecimals(ERC20 token) internal {\n        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n        else decimals[token] = token.decimals();\n    }\n\n    function getDecimals(ERC20 token) internal view returns(uint) {\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n        uint tokenDecimals = decimals[token];\n        // technically, there might be token with decimals 0\n        // moreover, very possible that old tokens have decimals 0\n        // these tokens will just have higher gas fees.\n        if(tokenDecimals == 0) return token.decimals();\n\n        return tokenDecimals;\n    }\n\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(srcQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n        }\n    }\n\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(dstQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n\n        //source quantity is rounded up. to avoid dest quantity being too low.\n        uint numerator;\n        uint denominator;\n        if (srcDecimals >= dstDecimals) {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n            denominator = rate;\n        } else {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty);\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n        }\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n    }\n}\n\ncontract PermissionGroups {\n\n    address public admin;\n    address public pendingAdmin;\n    mapping(address=>bool) internal operators;\n    mapping(address=>bool) internal alerters;\n    address[] internal operatorsGroup;\n    address[] internal alertersGroup;\n    uint constant internal MAX_GROUP_SIZE = 50;\n\n    function PermissionGroups() public {\n        admin = msg.sender;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin);\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(operators[msg.sender]);\n        _;\n    }\n\n    modifier onlyAlerter() {\n        require(alerters[msg.sender]);\n        _;\n    }\n\n    function getOperators () external view returns(address[]) {\n        return operatorsGroup;\n    }\n\n    function getAlerters () external view returns(address[]) {\n        return alertersGroup;\n    }\n\n    event TransferAdminPending(address pendingAdmin);\n\n    /**\n     * @dev Allows the current admin to set the pendingAdmin address.\n     * @param newAdmin The address to transfer ownership to.\n     */\n    function transferAdmin(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        TransferAdminPending(pendingAdmin);\n        pendingAdmin = newAdmin;\n    }\n\n    /**\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n     * @param newAdmin The address to transfer ownership to.\n     */\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        TransferAdminPending(newAdmin);\n        AdminClaimed(newAdmin, admin);\n        admin = newAdmin;\n    }\n\n    event AdminClaimed( address newAdmin, address previousAdmin);\n\n    /**\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\n     */\n    function claimAdmin() public {\n        require(pendingAdmin == msg.sender);\n        AdminClaimed(pendingAdmin, admin);\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n    }\n\n    event AlerterAdded (address newAlerter, bool isAdd);\n\n    function addAlerter(address newAlerter) public onlyAdmin {\n        require(!alerters[newAlerter]); // prevent duplicates.\n        require(alertersGroup.length < MAX_GROUP_SIZE);\n\n        AlerterAdded(newAlerter, true);\n        alerters[newAlerter] = true;\n        alertersGroup.push(newAlerter);\n    }\n\n    function removeAlerter (address alerter) public onlyAdmin {\n        require(alerters[alerter]);\n        alerters[alerter] = false;\n\n        for (uint i = 0; i < alertersGroup.length; ++i) {\n            if (alertersGroup[i] == alerter) {\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n                alertersGroup.length--;\n                AlerterAdded(alerter, false);\n                break;\n            }\n        }\n    }\n\n    event OperatorAdded(address newOperator, bool isAdd);\n\n    function addOperator(address newOperator) public onlyAdmin {\n        require(!operators[newOperator]); // prevent duplicates.\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\n\n        OperatorAdded(newOperator, true);\n        operators[newOperator] = true;\n        operatorsGroup.push(newOperator);\n    }\n\n    function removeOperator (address operator) public onlyAdmin {\n        require(operators[operator]);\n        operators[operator] = false;\n\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\n            if (operatorsGroup[i] == operator) {\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n                operatorsGroup.length -= 1;\n                OperatorAdded(operator, false);\n                break;\n            }\n        }\n    }\n}\n\ninterface ConversionRatesInterface {\n\n    function recordImbalance(\n        ERC20 token,\n        int buyAmount,\n        uint rateUpdateBlock,\n        uint currentBlock\n    )\n        public;\n\n    function getRate(ERC20 token, uint currentBlockNumber, bool buy, uint qty) public view returns(uint);\n}\n\ninterface ERC20 {\n    function totalSupply() public view returns (uint supply);\n    function balanceOf(address _owner) public view returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\n    function decimals() public view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ninterface KyberReserveInterface {\n\n    function trade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        public\n        payable\n        returns(bool);\n\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\n}\n\ninterface SanityRatesInterface {\n    function getSanityRate(ERC20 src, ERC20 dest) public view returns(uint);\n}\n\ncontract Withdrawable is PermissionGroups {\n\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n\n    /**\n     * @dev Withdraw all ERC20 compatible tokens\n     * @param token ERC20 The address of the token contract\n     */\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n        require(token.transfer(sendTo, amount));\n        TokenWithdraw(token, amount, sendTo);\n    }\n\n    event EtherWithdraw(uint amount, address sendTo);\n\n    /**\n     * @dev Withdraw Ethers\n     */\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n        sendTo.transfer(amount);\n        EtherWithdraw(amount, sendTo);\n    }\n}\n\ncontract KyberReserve is KyberReserveInterface, Withdrawable, Utils {\n\n    address public kyberNetwork;\n    bool public tradeEnabled;\n    ConversionRatesInterface public conversionRatesContract;\n    SanityRatesInterface public sanityRatesContract;\n    mapping(bytes32=>bool) public approvedWithdrawAddresses; // sha3(token,address)=>bool\n\n    function KyberReserve(address _kyberNetwork, ConversionRatesInterface _ratesContract, address _admin) public {\n        require(_admin != address(0));\n        require(_ratesContract != address(0));\n        require(_kyberNetwork != address(0));\n        kyberNetwork = _kyberNetwork;\n        conversionRatesContract = _ratesContract;\n        admin = _admin;\n        tradeEnabled = true;\n    }\n\n    event DepositToken(ERC20 token, uint amount);\n\n    function() public payable {\n        DepositToken(ETH_TOKEN_ADDRESS, msg.value);\n    }\n\n    event TradeExecute(\n        address indexed origin,\n        address src,\n        uint srcAmount,\n        address destToken,\n        uint destAmount,\n        address destAddress\n    );\n\n    function trade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        public\n        payable\n        returns(bool)\n    {\n        require(tradeEnabled);\n        require(msg.sender == kyberNetwork);\n\n        require(doTrade(srcToken, srcAmount, destToken, destAddress, conversionRate, validate));\n\n        return true;\n    }\n\n    event TradeEnabled(bool enable);\n\n    function enableTrade() public onlyAdmin returns(bool) {\n        tradeEnabled = true;\n        TradeEnabled(true);\n\n        return true;\n    }\n\n    function disableTrade() public onlyAlerter returns(bool) {\n        tradeEnabled = false;\n        TradeEnabled(false);\n\n        return true;\n    }\n\n    event WithdrawAddressApproved(ERC20 token, address addr, bool approve);\n\n    function approveWithdrawAddress(ERC20 token, address addr, bool approve) public onlyAdmin {\n        approvedWithdrawAddresses[keccak256(token, addr)] = approve;\n        WithdrawAddressApproved(token, addr, approve);\n\n        setDecimals(token);\n    }\n\n    event WithdrawFunds(ERC20 token, uint amount, address destination);\n\n    function withdraw(ERC20 token, uint amount, address destination) public onlyOperator returns(bool) {\n        require(approvedWithdrawAddresses[keccak256(token, destination)]);\n\n        if (token == ETH_TOKEN_ADDRESS) {\n            destination.transfer(amount);\n        } else {\n            require(token.transfer(destination, amount));\n        }\n\n        WithdrawFunds(token, amount, destination);\n\n        return true;\n    }\n\n    event SetContractAddresses(address network, address rate, address sanity);\n\n    function setContracts(address _kyberNetwork, ConversionRatesInterface _conversionRates, SanityRatesInterface _sanityRates)\n        public\n        onlyAdmin\n    {\n        require(_kyberNetwork != address(0));\n        require(_conversionRates != address(0));\n\n        kyberNetwork = _kyberNetwork;\n        conversionRatesContract = _conversionRates;\n        sanityRatesContract = _sanityRates;\n\n        SetContractAddresses(kyberNetwork, conversionRatesContract, sanityRatesContract);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    /// status functions ///////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////\n    function getBalance(ERC20 token) public view returns(uint) {\n        if (token == ETH_TOKEN_ADDRESS)\n            return this.balance;\n        else\n            return token.balanceOf(this);\n    }\n\n    function getDestQty(ERC20 src, ERC20 dest, uint srcQty, uint rate) public view returns(uint) {\n        uint dstDecimals = getDecimals(dest);\n        uint srcDecimals = getDecimals(src);\n\n        return calcDstQty(srcQty, srcDecimals, dstDecimals, rate);\n    }\n\n    function getSrcQty(ERC20 src, ERC20 dest, uint dstQty, uint rate) public view returns(uint) {\n        uint dstDecimals = getDecimals(dest);\n        uint srcDecimals = getDecimals(src);\n\n        return calcSrcQty(dstQty, srcDecimals, dstDecimals, rate);\n    }\n\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint) {\n        ERC20 token;\n        bool  buy;\n\n        if (!tradeEnabled) return 0;\n\n        if (ETH_TOKEN_ADDRESS == src) {\n            buy = true;\n            token = dest;\n        } else if (ETH_TOKEN_ADDRESS == dest) {\n            buy = false;\n            token = src;\n        } else {\n            return 0; // pair is not listed\n        }\n\n        uint rate = conversionRatesContract.getRate(token, blockNumber, buy, srcQty);\n        uint destQty = getDestQty(src, dest, srcQty, rate);\n\n        if (getBalance(dest) < destQty) return 0;\n\n        if (sanityRatesContract != address(0)) {\n            uint sanityRate = sanityRatesContract.getSanityRate(src, dest);\n            if (rate > sanityRate) return 0;\n        }\n\n        return rate;\n    }\n\n    /// @dev do a trade\n    /// @param srcToken Src token\n    /// @param srcAmount Amount of src token\n    /// @param destToken Destination token\n    /// @param destAddress Destination address to send tokens to\n    /// @param validate If true, additional validations are applicable\n    /// @return true iff trade is successful\n    function doTrade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        internal\n        returns(bool)\n    {\n        // can skip validation if done at kyber network level\n        if (validate) {\n            require(conversionRate > 0);\n            if (srcToken == ETH_TOKEN_ADDRESS)\n                require(msg.value == srcAmount);\n            else\n                require(msg.value == 0);\n        }\n\n        uint destAmount = getDestQty(srcToken, destToken, srcAmount, conversionRate);\n        // sanity check\n        require(destAmount > 0);\n\n        // add to imbalance\n        ERC20 token;\n        int buy;\n        if (srcToken == ETH_TOKEN_ADDRESS) {\n            buy = int(destAmount);\n            token = destToken;\n        } else {\n            buy = -1 * int(srcAmount);\n            token = srcToken;\n        }\n\n        conversionRatesContract.recordImbalance(\n            token,\n            buy,\n            0,\n            block.number\n        );\n\n        // collect src tokens\n        if (srcToken != ETH_TOKEN_ADDRESS) {\n            require(srcToken.transferFrom(msg.sender, this, srcAmount));\n        }\n\n        // send dest tokens\n        if (destToken == ETH_TOKEN_ADDRESS) {\n            destAddress.transfer(destAmount);\n        } else {\n            require(destToken.transfer(destAddress, destAmount));\n        }\n\n        TradeExecute(msg.sender, srcToken, srcAmount, destToken, destAmount, destAddress);\n\n        return true;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051606080611e6483398101604052808051919060200180519190602001805160008054600160a060020a03191633600160a060020a039081169190911790915590925082161515905061006357600080fd5b600160a060020a038216151561007857600080fd5b600160a060020a038316151561008d57600080fd5b6007805460088054600160a060020a03958616600160a060020a031991821617909155600080549486169482169490941790935560a060020a60ff02199390941691909316171674010000000000000000000000000000000000000000179055611d68806100fc6000396000f30060606040526004361061014f5763ffffffff60e060020a60003504166299d38681146101a357806301a12fd3146101ca57806326782247146101eb57806327a099d81461021a5780633ccdbb2814610280578063408ee7fe146102a957806347e6924f146102c8578063546dc71c146102db57806369328dec146103055780636940030f1461032e5780636cf698111461034157806375829def1461036d57806377f50f971461038c5780637acc86781461039f5780637c423f54146103be5780637cd44272146103d15780639870d7fe1461040e578063a7fca9531461042d578063ac8a584a14610458578063b3066d4914610477578063b78b842d146104a2578063ce56c454146104b5578063d5847d33146104d7578063d621e813146104ea578063d7b7024d146104fd578063f851a44014610513578063f8b2cb4f14610526578063fa64dffa14610545575b7f2d0c0a8842b9944ece1495eb61121621b5e36bd6af3bba0318c695f525aef79f600080516020611d1d83398151915234604051600160a060020a03909216825260208201526040908101905180910390a1005b34156101ae57600080fd5b6101b6610570565b604051901515815260200160405180910390f35b34156101d557600080fd5b6101e9600160a060020a03600435166105fe565b005b34156101f657600080fd5b6101fe61076e565b604051600160a060020a03909116815260200160405180910390f35b341561022557600080fd5b61022d61077d565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561026c578082015183820152602001610254565b505050509050019250505060405180910390f35b341561028b57600080fd5b6101e9600160a060020a0360043581169060243590604435166107e5565b34156102b457600080fd5b6101e9600160a060020a03600435166108dc565b34156102d357600080fd5b6101fe6109d8565b34156102e657600080fd5b6101e9600160a060020a036004358116906024351660443515156109e7565b341561031057600080fd5b6101b6600160a060020a036004358116906024359060443516610ac6565b341561033957600080fd5b6101b6610c7e565b6101b6600160a060020a03600435811690602435906044358116906064351660843560a4351515610cff565b341561037857600080fd5b6101e9600160a060020a0360043516610d6c565b341561039757600080fd5b6101e9610e07565b34156103aa57600080fd5b6101e9600160a060020a0360043516610ea1565b34156103c957600080fd5b61022d610f83565b34156103dc57600080fd5b6103fc600160a060020a0360043581169060243516604435606435610fe9565b60405190815260200160405180910390f35b341561041957600080fd5b6101e9600160a060020a03600435166111d4565b341561043857600080fd5b6103fc600160a060020a03600435811690602435166044356064356112a4565b341561046357600080fd5b6101e9600160a060020a03600435166112d6565b341561048257600080fd5b6101e9600160a060020a0360043581169060243581169060443516611442565b34156104ad57600080fd5b6101fe611526565b34156104c057600080fd5b6101e9600435600160a060020a0360243516611535565b34156104e257600080fd5b6101fe6115c8565b34156104f557600080fd5b6101b66115d7565b341561050857600080fd5b6101b66004356115f8565b341561051e57600080fd5b6101fe61160d565b341561053157600080fd5b6103fc600160a060020a036004351661161c565b341561055057600080fd5b6103fc600160a060020a03600435811690602435166044356064356116c7565b6000805433600160a060020a0390811691161461058c57600080fd5b6007805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557f7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e7356001604051901515815260200160405180910390a15060015b90565b6000805433600160a060020a0390811691161461061a57600080fd5b600160a060020a03821660009081526003602052604090205460ff16151561064157600080fd5b50600160a060020a0381166000908152600360205260408120805460ff191690555b60055481101561076a5781600160a060020a031660058281548110151561068657fe5b600091825260209091200154600160a060020a03161415610762576005805460001981019081106106b357fe5b60009182526020909120015460058054600160a060020a0390921691839081106106d957fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556005805490610715906000198301611cc8565b507f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762826000604051600160a060020a039092168252151560208201526040908101905180910390a161076a565b600101610663565b5050565b600154600160a060020a031681565b610785611cec565b60048054806020026020016040519081016040528092919081815260200182805480156107db57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116107bd575b5050505050905090565b60005433600160a060020a0390811691161461080057600080fd5b82600160a060020a031663a9059cbb828460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561085d57600080fd5b6102c65a03f1151561086e57600080fd5b50505060405180519050151561088357600080fd5b7f72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6838383604051600160a060020a03938416815260208101929092529091166040808301919091526060909101905180910390a1505050565b60005433600160a060020a039081169116146108f757600080fd5b600160a060020a03811660009081526003602052604090205460ff161561091d57600080fd5b6005546032901061092d57600080fd5b7f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762816001604051600160a060020a039092168252151560208201526040908101905180910390a1600160a060020a0381166000908152600360205260409020805460ff1916600190811790915560058054909181016109ac8382611cc8565b5060009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055565b600954600160a060020a031681565b60005433600160a060020a03908116911614610a0257600080fd5b80600a600085856040516c01000000000000000000000000600160a060020a039384168102825291909216026014820152602801604051908190039020815260208101919091526040908101600020805460ff1916921515929092179091557fd5fd5351efae1f4bb760079da9f0ff9589e2c3e216337ca9d39cdff573b245c49084908490849051600160a060020a0393841681529190921660208201529015156040808301919091526060909101905180910390a1610ac1836116ee565b505050565b600160a060020a03331660009081526002602052604081205460ff161515610aed57600080fd5b600a600085846040516c01000000000000000000000000600160a060020a039384168102825291909216026014820152602801604051908190039020815260208101919091526040016000205460ff161515610b4857600080fd5b600160a060020a038416600080516020611d1d8339815191521415610b9d57600160a060020a03821683156108fc0284604051600060405180830381858888f193505050501515610b9857600080fd5b610c20565b83600160a060020a031663a9059cbb838560006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610bfa57600080fd5b6102c65a03f11515610c0b57600080fd5b505050604051805190501515610c2057600080fd5b7fb67719fc33c1f17d31bf3a698690d62066b1e0bae28fcd3c56cf2c015c2863d6848484604051600160a060020a03938416815260208101929092529091166040808301919091526060909101905180910390a15060019392505050565b600160a060020a03331660009081526003602052604081205460ff161515610ca557600080fd5b6007805474ff0000000000000000000000000000000000000000191690557f7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e7356000604051901515815260200160405180910390a150600190565b60075460009074010000000000000000000000000000000000000000900460ff161515610d2b57600080fd5b60075433600160a060020a03908116911614610d4657600080fd5b610d548787878787876117ab565b1515610d5f57600080fd5b5060019695505050505050565b60005433600160a060020a03908116911614610d8757600080fd5b600160a060020a0381161515610d9c57600080fd5b6001547f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4090600160a060020a0316604051600160a060020a03909116815260200160405180910390a160018054600160a060020a031916600160a060020a0392909216919091179055565b60015433600160a060020a03908116911614610e2257600080fd5b6001546000547f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed91600160a060020a039081169116604051600160a060020a039283168152911660208201526040908101905180910390a16001805460008054600160a060020a0319908116600160a060020a03841617909155169055565b60005433600160a060020a03908116911614610ebc57600080fd5b600160a060020a0381161515610ed157600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4081604051600160a060020a03909116815260200160405180910390a16000547f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed908290600160a060020a0316604051600160a060020a039283168152911660208201526040908101905180910390a160008054600160a060020a031916600160a060020a0392909216919091179055565b610f8b611cec565b60058054806020026020016040519081016040528092919081815260200182805480156107db57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107bd575050505050905090565b600080600080600080600760149054906101000a900460ff16151561101157600095506111c7565b600080516020611d1d833981519152600160a060020a038b16141561103c5760019350889450611070565b600080516020611d1d833981519152600160a060020a038a1614156110675760009350899450611070565b600095506111c7565b600854600160a060020a031663b8e9c22e8689878c60006040516020015260405160e060020a63ffffffff8716028152600160a060020a0390941660048501526024840192909252151560448301526064820152608401602060405180830381600087803b15156110e057600080fd5b6102c65a03f115156110f157600080fd5b5050506040518051905092506111098a8a8a866116c7565b9150816111158a61161c565b101561112457600095506111c7565b600954600160a060020a0316156111c357600954600160a060020a031663a58092b78b8b60006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b151561119657600080fd5b6102c65a03f115156111a757600080fd5b5050506040518051915050808311156111c357600095506111c7565b8295505b5050505050949350505050565b60005433600160a060020a039081169116146111ef57600080fd5b600160a060020a03811660009081526002602052604090205460ff161561121557600080fd5b6004546032901061122557600080fd5b7f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b816001604051600160a060020a039092168252151560208201526040908101905180910390a1600160a060020a0381166000908152600260205260409020805460ff1916600190811790915560048054909181016109ac8382611cc8565b60008060006112b286611aca565b91506112bd87611aca565b90506112cb85828487611b88565b979650505050505050565b6000805433600160a060020a039081169116146112f257600080fd5b600160a060020a03821660009081526002602052604090205460ff16151561131957600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b60045481101561076a5781600160a060020a031660048281548110151561135e57fe5b600091825260209091200154600160a060020a0316141561143a5760048054600019810190811061138b57fe5b60009182526020909120015460048054600160a060020a0390921691839081106113b157fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556004805460001901906113ed9082611cc8565b507f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b826000604051600160a060020a039092168252151560208201526040908101905180910390a161076a565b60010161133b565b60005433600160a060020a0390811691161461145d57600080fd5b600160a060020a038316151561147257600080fd5b600160a060020a038216151561148757600080fd5b60078054600160a060020a03808616600160a060020a0319928316179283905560088054868316908416179081905560098054868416941693909317928390557f7a85322644a4462d8ff5482d2a841a4d231f8cfb3c9f4a50f66f8b2bd568c31c938216929082169116604051600160a060020a03938416815291831660208301529091166040808301919091526060909101905180910390a1505050565b600754600160a060020a031681565b60005433600160a060020a0390811691161461155057600080fd5b600160a060020a03811682156108fc0283604051600060405180830381858888f19350505050151561158157600080fd5b7fec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de8282604051918252600160a060020a031660208201526040908101905180910390a15050565b600854600160a060020a031681565b60075474010000000000000000000000000000000000000000900460ff1681565b600a6020526000908152604090205460ff1681565b600054600160a060020a031681565b6000600160a060020a038216600080516020611d1d833981519152141561164e5750600160a060020a033016316116c2565b81600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156116a557600080fd5b6102c65a03f115156116b657600080fd5b50505060405180519150505b919050565b60008060006116d586611aca565b91506116e087611aca565b90506112cb85828487611c2f565b600160a060020a038116600080516020611d1d833981519152141561172e57600160a060020a0381166000908152600660205260409020601290556117a8565b80600160a060020a031663313ce5676000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561177457600080fd5b6102c65a03f1151561178557600080fd5b5050506040518051600160a060020a038316600090815260066020526040902055505b50565b60008060008084156117ff57600086116117c457600080fd5b600160a060020a038a16600080516020611d1d83398151915214156117f4573489146117ef57600080fd5b6117ff565b34156117ff57600080fd5b61180b8a898b896116c7565b92506000831161181a57600080fd5b600160a060020a038a16600080516020611d1d833981519152141561184357508690508161184d565b5088905060001988025b600854600160a060020a031663c6fd2103838360004360405160e060020a63ffffffff8716028152600160a060020a039094166004850152602484019290925260448301526064820152608401600060405180830381600087803b15156118b357600080fd5b6102c65a03f115156118c457600080fd5b505050600160a060020a038a16600080516020611d1d833981519152146119755789600160a060020a03166323b872dd33308c60006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561194f57600080fd5b6102c65a03f1151561196057600080fd5b50505060405180519050151561197557600080fd5b600160a060020a038816600080516020611d1d83398151915214156119ca57600160a060020a03871683156108fc0284604051600060405180830381858888f1935050505015156119c557600080fd5b611a4d565b87600160a060020a031663a9059cbb888560006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611a2757600080fd5b6102c65a03f11515611a3857600080fd5b505050604051805190501515611a4d57600080fd5b33600160a060020a03167fea9415385bae08fe9f6dc457b02577166790cde83bb18cc340aac6cb81b824de8b8b8b878c604051600160a060020a039586168152602081019490945291841660408085019190915260608401919091529216608082015260a001905180910390a25060019998505050505050505050565b600080600160a060020a038316600080516020611d1d8339815191521415611af55760129150611b82565b50600160a060020a038216600090815260066020526040902054801515611b7e5782600160a060020a031663313ce5676000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611b5c57600080fd5b6102c65a03f11515611b6d57600080fd5b505050604051805190509150611b82565b8091505b50919050565b600080806b204fce5e3e25026110000000871115611ba557600080fd5b69d3c21bcecceda1000000841115611bbc57600080fd5b848610611bed5760128587031115611bd357600080fd5b5050828403600a0a8502670de0b6b3a76400000282611c13565b60128686031115611bfd57600080fd5b5050670de0b6b3a76400008502848403600a0a83025b80600182840103811515611c2357fe5b04979650505050505050565b60006b204fce5e3e25026110000000851115611c4a57600080fd5b69d3c21bcecceda1000000821115611c6157600080fd5b838310611c945760128484031115611c7857600080fd5b670de0b6b3a7640000858302858503600a0a025b049050611cc0565b60128385031115611ca457600080fd5b828403600a0a670de0b6b3a764000002828602811515611c8c57fe5b949350505050565b815481835581811511610ac157600083815260209020610ac1918101908301611cfe565b60206040519081016040526000815290565b6105fb91905b80821115611d185760008155600101611d04565b50905600000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeea165627a7a72305820c9f074a30a74cdceb871800d34af605be5fad9b07e5acfbb21974d38d303d33d00290000000000000000000000009ae49c0d7f8f9ef4b864e004fe86ac8294e20950000000000000000000000000bc983fe80812db0651a6d48e90c4e6043f6385410000000000000000000000004bd5fd09286e87dd365377e5681f12ccbb8a99b3",
  "constructorArguments": "0000000000000000000000009ae49c0d7f8f9ef4b864e004fe86ac8294e20950000000000000000000000000bc983fe80812db0651a6d48e90c4e6043f6385410000000000000000000000004bd5fd09286e87dd365377e5681f12ccbb8a99b3"
}