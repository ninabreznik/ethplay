{
  "address": "0x37268a039f845354e293922e0ca7fdd4ef0332f8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ITO",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-18\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/InvestedProvider.sol\n\ncontract InvestedProvider is Ownable {\n\n  uint public invested;\n\n}\n\n// File: contracts/AddressesFilterFeature.sol\n\ncontract AddressesFilterFeature is Ownable {\n\n  mapping(address => bool) public allowedAddresses;\n\n  function addAllowedAddress(address allowedAddress) public onlyOwner {\n    allowedAddresses[allowedAddress] = true;\n  }\n\n  function removeAllowedAddress(address allowedAddress) public onlyOwner {\n    allowedAddresses[allowedAddress] = false;\n  }\n\n}\n\n// File: contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/token/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: contracts/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/token/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/MintableToken.sol\n\ncontract MintableToken is AddressesFilterFeature, StandardToken {\n\n  event Mint(address indexed to, uint256 amount);\n\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  address public saleAgent;\n\n  mapping (address => uint) public initialBalances;\n\n  modifier notLocked(address _from) {\n    require(_from == owner || _from == saleAgent || allowedAddresses[_from] || mintingFinished);\n    _;\n  }\n\n  function setSaleAgent(address newSaleAgnet) public {\n    require(msg.sender == saleAgent || msg.sender == owner);\n    saleAgent = newSaleAgnet;\n  }\n\n  function mint(address _to, uint256 _amount) public returns (bool) {\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\n    \n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n\n    initialBalances[_to] = balances[_to];\n\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public returns (bool) {\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n\n  function transfer(address _to, uint256 _value) public notLocked(msg.sender)  returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address from, address to, uint256 value) public notLocked(from) returns (bool) {\n    return super.transferFrom(from, to, value);\n  }\n\n}\n\n// File: contracts/TokenProvider.sol\n\ncontract TokenProvider is Ownable {\n\n  MintableToken public token;\n\n  function setToken(address newToken) public onlyOwner {\n    token = MintableToken(newToken);\n  }\n\n}\n\n// File: contracts/MintTokensInterface.sol\n\ncontract MintTokensInterface is TokenProvider {\n\n  function mintTokens(address to, uint tokens) internal;\n\n}\n\n// File: contracts/MintTokensFeature.sol\n\ncontract MintTokensFeature is MintTokensInterface {\n\n  function mintTokens(address to, uint tokens) internal {\n    token.mint(to, tokens);\n  }\n\n}\n\n// File: contracts/PercentRateProvider.sol\n\ncontract PercentRateProvider {\n\n  uint public percentRate = 100;\n\n}\n\n// File: contracts/PercentRateFeature.sol\n\ncontract PercentRateFeature is Ownable, PercentRateProvider {\n\n  function setPercentRate(uint newPercentRate) public onlyOwner {\n    percentRate = newPercentRate;\n  }\n\n}\n\n// File: contracts/RetrieveTokensFeature.sol\n\ncontract RetrieveTokensFeature is Ownable {\n\n  function retrieveTokens(address to, address anotherToken) public onlyOwner {\n    ERC20 alienToken = ERC20(anotherToken);\n    alienToken.transfer(to, alienToken.balanceOf(this));\n  }\n\n}\n\n// File: contracts/WalletProvider.sol\n\ncontract WalletProvider is Ownable {\n\n  address public wallet;\n\n  function setWallet(address newWallet) public onlyOwner {\n    wallet = newWallet;\n  }\n\n}\n\n// File: contracts/CommonSale.sol\n\ncontract CommonSale is InvestedProvider, WalletProvider, PercentRateFeature, RetrieveTokensFeature, MintTokensFeature {\n\n  using SafeMath for uint;\n\n  address public directMintAgent;\n\n  uint public price;\n\n  uint public start;\n\n  uint public minInvestedLimit;\n\n  //MintableToken public token;\n\n  uint public hardcap;\n\n  modifier isUnderHardcap() {\n    require(invested < hardcap);\n    _;\n  }\n\n  function setHardcap(uint newHardcap) public onlyOwner {\n    hardcap = newHardcap;\n  }\n\n  modifier onlyDirectMintAgentOrOwner() {\n    require(directMintAgent == msg.sender || owner == msg.sender);\n    _;\n  }\n\n  modifier minInvestLimited(uint value) {\n    require(value >= minInvestedLimit);\n    _;\n  }\n\n  function setStart(uint newStart) public onlyOwner {\n    start = newStart;\n  }\n\n  function setMinInvestedLimit(uint newMinInvestedLimit) public onlyOwner {\n    minInvestedLimit = newMinInvestedLimit;\n  }\n\n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\n    directMintAgent = newDirectMintAgent;\n  }\n\n  function setPrice(uint newPrice) public onlyOwner {\n    price = newPrice;\n  }\n\n  /*\n  function setToken(address newToken) public onlyOwner {\n    token = MintableToken(newToken);\n  }\n  */\n\n  function calculateTokens(uint _invested) internal returns(uint);\n\n  function mintTokensExternal(address to, uint tokens) public onlyDirectMintAgentOrOwner {\n    mintTokens(to, tokens);\n  }\n/*\n  function mintTokens(address to, uint tokens) internal {\n    token.mint(this, tokens);\n    token.transfer(to, tokens);\n  }\n*/\n  function endSaleDate() public view returns(uint);\n\n  function mintTokensByETHExternal(address to, uint _invested) public onlyDirectMintAgentOrOwner returns(uint) {\n    return mintTokensByETH(to, _invested);\n  }\n\n  function mintTokensByETH(address to, uint _invested) internal isUnderHardcap returns(uint) {\n    invested = invested.add(_invested);\n    uint tokens = calculateTokens(_invested);\n    mintTokens(to, tokens);\n    return tokens;\n  }\n\n  function fallback() internal minInvestLimited(msg.value) returns(uint) {\n    require(now >= start && now < endSaleDate());\n    wallet.transfer(msg.value);\n    return mintTokensByETH(msg.sender, msg.value);\n  }\n\n  function () public payable {\n    fallback();\n  }\n\n}\n\n// File: contracts/TimeCountBonusFeature.sol\n\ncontract TimeCountBonusFeature is CommonSale {\n\n  struct Milestone {\n    uint hardcap;\n    uint price;\n    uint period;\n    uint invested;\n    uint closed;\n  }\n\n  uint public period;\n\n  Milestone[] public milestones;\n\n  function milestonesCount() public constant returns(uint) {\n    return milestones.length;\n  }\n\n  function addMilestone(uint _hardcap, uint _price, uint _period) public onlyOwner {\n    require(_hardcap > 0 && _price > 0 && _period > 0);\n    Milestone memory milestone = Milestone(_hardcap.mul(1 ether), _price, _period, 0, 0);\n    milestones.push(milestone);\n    hardcap = hardcap.add(milestone.hardcap);\n    period = period.add(milestone.period);\n  }\n\n  function removeMilestone(uint8 number) public onlyOwner {\n    require(number >=0 && number < milestones.length);\n    Milestone storage milestone = milestones[number];\n    hardcap = hardcap.sub(milestone.hardcap);    \n    period = period.sub(milestone.period);    \n    delete milestones[number];\n    for (uint i = number; i < milestones.length - 1; i++) {\n      milestones[i] = milestones[i+1];\n    }\n    milestones.length--;\n  }\n\n  function changeMilestone(uint8 number, uint _hardcap, uint _price, uint _period) public onlyOwner {\n    require(number >= 0 &&number < milestones.length);\n    Milestone storage milestone = milestones[number];\n    hardcap = hardcap.sub(milestone.hardcap);    \n    period = period.sub(milestone.period);    \n    milestone.hardcap = _hardcap.mul(1 ether);\n    milestone.price = _price;\n    milestone.period = _period;\n    hardcap = hardcap.add(milestone.hardcap);    \n    period = period.add(milestone.period);    \n  }\n\n  function insertMilestone(uint8 numberAfter, uint _hardcap, uint _price, uint _period) public onlyOwner {\n    require(numberAfter < milestones.length);\n    Milestone memory milestone = Milestone(_hardcap.mul(1 ether), _price, _period, 0, 0);\n    hardcap = hardcap.add(milestone.hardcap);\n    period = period.add(milestone.period);\n    milestones.length++;\n    for (uint i = milestones.length - 2; i > numberAfter; i--) {\n      milestones[i + 1] = milestones[i];\n    }\n    milestones[numberAfter + 1] = milestone;\n  }\n\n  function clearMilestones() public onlyOwner {\n    for (uint i = 0; i < milestones.length; i++) {\n      delete milestones[i];\n    }\n    milestones.length = 0;\n    hardcap = 0;\n    period = 0;\n  }\n\n  function endSaleDate() public view returns(uint) {\n    return start.add(period * 1 days);\n  }\n\n  function currentMilestone() public constant returns(uint) {\n    uint closeTime = start;\n    for(uint i=0; i < milestones.length; i++) {\n      closeTime += milestones[i].period.mul(1 days);\n      if(milestones[i].closed == 0 && now < closeTime) {\n        return i;\n      }\n    }\n    revert();\n  }\n\n  function calculateTokens(uint _invested) internal returns(uint) {\n    uint milestoneIndex = currentMilestone();\n    Milestone storage milestone = milestones[milestoneIndex];\n    uint tokens = milestone.price.mul(_invested).div(1 ether);\n\n    // update milestone\n    milestone.invested = milestone.invested.add(_invested);\n    if(milestone.invested >= milestone.hardcap) {\n      milestone.closed = now;\n    }\n\n    return tokens;\n  }\n\n\n}\n\n// File: contracts/AssembledCommonSale.sol\n\ncontract AssembledCommonSale is TimeCountBonusFeature {\n\n}\n\n// File: contracts/WalletsPercents.sol\n\ncontract WalletsPercents is Ownable {\n\n  address[] public wallets;\n\n  mapping (address => uint) percents;\n\n  function addWallet(address wallet, uint percent) public onlyOwner {\n    wallets.push(wallet);\n    percents[wallet] = percent;\n  }\n \n  function cleanWallets() public onlyOwner {\n    wallets.length = 0;\n  }\n\n\n}\n\n// File: contracts/ExtendedWalletsMintTokensFeature.sol\n\n//import './PercentRateProvider.sol';\n\ncontract ExtendedWalletsMintTokensFeature is /*PercentRateProvider,*/ MintTokensInterface, WalletsPercents {\n\n  using SafeMath for uint;\n\n  uint public percentRate = 100;\n\n  function mintExtendedTokens() public onlyOwner {\n    uint summaryTokensPercent = 0;\n    for(uint i = 0; i < wallets.length; i++) {\n      summaryTokensPercent = summaryTokensPercent.add(percents[wallets[i]]);\n    }\n    uint mintedTokens = token.totalSupply();\n    uint allTokens = mintedTokens.mul(percentRate).div(percentRate.sub(summaryTokensPercent));\n    for(uint k = 0; k < wallets.length; k++) {\n      mintTokens(wallets[k], allTokens.mul(percents[wallets[k]]).div(percentRate));\n    }\n\n  }\n\n}\n\n// File: contracts/SoftcapFeature.sol\n\ncontract SoftcapFeature is InvestedProvider, WalletProvider {\n\n  using SafeMath for uint;\n\n  mapping(address => uint) public balances;\n\n  bool public softcapAchieved;\n\n  bool public refundOn;\n\n  bool public feePayed;\n\n  uint public softcap;\n\n  uint public constant devLimit = 7500000000000000000;\n\n  address public constant devWallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770;\n\n  function setSoftcap(uint newSoftcap) public onlyOwner {\n    softcap = newSoftcap;\n  }\n\n  function withdraw() public {\n    require(msg.sender == owner || msg.sender == devWallet);\n    require(softcapAchieved);\n    if(!feePayed) {\n      devWallet.transfer(devLimit);\n      feePayed = true;\n    }\n    wallet.transfer(this.balance);\n  }\n\n  function updateBalance(address to, uint amount) internal {\n    balances[to] = balances[to].add(amount);\n    if (!softcapAchieved && invested >= softcap) {\n      softcapAchieved = true;\n    }\n  }\n\n  function refund() public {\n    require(refundOn && balances[msg.sender] > 0);\n    uint value = balances[msg.sender];\n    balances[msg.sender] = 0;\n    msg.sender.transfer(value);\n  }\n\n  function updateRefundState() internal returns(bool) {\n    if (!softcapAchieved) {\n      refundOn = true;\n    }\n    return refundOn;\n  }\n\n}\n\n// File: contracts/TeamWallet.sol\n\ncontract TeamWallet is Ownable{\n\t\n  address public token;\n\n  address public crowdsale;\n\n  uint public lockPeriod;\n\n  uint public endLock;\n\n  bool public started;\n\n  modifier onlyCrowdsale() {\n    require(crowdsale == msg.sender);\n    _;\n  }\n\n  function setToken (address _token) public onlyOwner{\n  \ttoken = _token;\n  }\n\n  function setCrowdsale (address _crowdsale) public onlyOwner{\n    crowdsale = _crowdsale;\n  }\n\n  function setLockPeriod (uint _lockDays) public onlyOwner{\n  \trequire(!started);\n  \tlockPeriod = 1 days * _lockDays;\n  }\n\n  function start () public onlyCrowdsale{\n  \tstarted = true;\n  \tendLock = now + lockPeriod;\n  }\n\n  function withdrawTokens (address _to) public onlyOwner{\n  \trequire(now > endLock);\n  \tERC20 ERC20token = ERC20(token);\n    ERC20token.transfer(_to, ERC20token.balanceOf(this));  \n  }\n  \n}\n\n// File: contracts/ITO.sol\n\ncontract ITO is ExtendedWalletsMintTokensFeature, SoftcapFeature, AssembledCommonSale {\n\n  address public teamWallet;\n\n  bool public paused;\n\n  function setTeamWallet (address _teamWallet) public onlyOwner{\n    teamWallet = _teamWallet;\n  }\n\n  function mintTokensByETH(address to, uint _invested) internal returns(uint) {\n    uint _tokens = super.mintTokensByETH(to, _invested);\n    updateBalance(to, _invested);\n    return _tokens;\n  }\n\n  function finish() public onlyOwner {\n    if (updateRefundState()) {\n      token.finishMinting();\n    } else {\n      withdraw();\n      mintExtendedTokens();\n      token.finishMinting();\n      TeamWallet tWallet = TeamWallet(teamWallet);\n      tWallet.start();\n    }\n  }\n\n  function fallback() internal minInvestLimited(msg.value) returns(uint) {\n    require(now >= start && now < endSaleDate());\n    require(!paused);\n    return mintTokensByETH(msg.sender, msg.value);\n  }\n\n  function pauseITO() public onlyOwner {\n    paused = true;\n  }\n\n  function continueITO() public onlyOwner {\n    paused = false;\n  }\n\n}\n\n// File: contracts/ReceivingContractCallback.sol\n\ncontract ReceivingContractCallback {\n\n  function tokenFallback(address _from, uint _value) public;\n\n}\n\n// File: contracts/Token.sol\n\ncontract Token is MintableToken {\n\n  string public constant name = \"HelixHill\";\n\n  string public constant symbol = \"HILL\";\n\n  uint32 public constant decimals = 18;\n\n  mapping(address => bool)  public registeredCallbacks;\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    return processCallback(super.transfer(_to, _value), msg.sender, _to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    return processCallback(super.transferFrom(_from, _to, _value), _from, _to, _value);\n  }\n\n  function registerCallback(address callback) public onlyOwner {\n    registeredCallbacks[callback] = true;\n  }\n\n  function deregisterCallback(address callback) public onlyOwner {\n    registeredCallbacks[callback] = false;\n  }\n\n  function processCallback(bool result, address from, address to, uint value) internal returns(bool) {\n    if (result && registeredCallbacks[to]) {\n      ReceivingContractCallback targetCallback = ReceivingContractCallback(to);\n      targetCallback.tokenFallback(from, value);\n    }\n    return result;\n  }\n\n}\n\n// File: contracts/Configurator.sol\n\ncontract Configurator is Ownable {\n\n  Token public token;\n  ITO public ito;\n  TeamWallet public teamWallet;\n\n  function deploy() public onlyOwner {\n\n    address manager = 0xd6561BF111dAfe86A896D6c844F82AE4a5bbc707;\n\n    token = new Token();\n    ito = new ITO();\n    teamWallet = new TeamWallet();\n\n    token.setSaleAgent(ito);\n\n    ito.setStart(1530622800);\n    ito.addMilestone(2000, 5000000000000000000000, 146);\n    ito.addMilestone(1000, 2000000000000000000000, 30);\n    ito.addMilestone(1000, 1950000000000000000000, 30);\n    ito.addMilestone(2000, 1800000000000000000000, 30);\n    ito.addMilestone(3000, 1750000000000000000000, 30);\n    ito.addMilestone(3500, 1600000000000000000000, 30);\n    ito.addMilestone(4000, 1550000000000000000000, 30);\n    ito.addMilestone(4500, 1500000000000000000000, 30);\n    ito.addMilestone(5000, 1450000000000000000000, 30);\n    ito.addMilestone(6000, 1400000000000000000000, 30);\n    ito.addMilestone(8000, 1000000000000000000000, 30);\n    ito.setSoftcap(2000000000000000000000);\n    ito.setMinInvestedLimit(100000000000000000);\n    ito.setWallet(0x3047e47EfC33cF8f6F9C3bdD1ACcaEda75B66f2A);\n    ito.addWallet(0xe129b76dF45bFE35FE4a3fA52986CC8004538C98, 6);\n    ito.addWallet(0x26Db091BF1Bcc2c439A2cA7140D76B4e909C7b4e, 2);\n    ito.addWallet(teamWallet, 15);\n    ito.addWallet(0x2A3b94CB5b9E10E12f97c72d6B5E09BD5A0E6bF1, 12);\n    ito.setPercentRate(100);\n    ito.setToken(token);\n    ito.setTeamWallet(teamWallet);\n\n    teamWallet.setToken(token);\n    teamWallet.setCrowdsale(ito);\n    teamWallet.setLockPeriod(180);\n\n    token.transferOwnership(manager);\n    ito.transferOwnership(manager);\n    teamWallet.transferOwnership(manager);\n  }\n\n}",
  "bytecode": "60606040526064600381905560075560008054600160a060020a033316600160a060020a0319909116179055611cb78061003a6000396000f3006060604052600436106102585763ffffffff60e060020a6000350416630a2a9a018114610263578063101e5a3214610287578063144fa6d71461029d5780631525ff7d146102bc57806327e235e3146102db5780632b455ac61461030c5780633ccfd60b1461032e5780634432635414610341578063480b890d146103545780634c94ac6a1461036a578063521eb2731461037d578063562605f1146103ac578063590e1ae3146103d357806359927044146103e65780635c975abb146103f95780636341ca0b1461040c5780636abc3fe414610431578063769ffb7d146104445780637ad71f72146104635780637e00d77a146104795780638090114f1461048c578063836880d31461049f5780638ab8064f146104b25780638da5cb5b146104c55780638ea5220f146104d857806390525c05146104eb57806391b7f5ed146104fe5780639bf6eb6014610514578063a035b1fe14610536578063a314dc2d14610549578063a34d92701461055c578063aa525c5514610572578063ab36e4a61461058b578063b03048131461059e578063b071cbe6146105b1578063be9a6555146105c4578063c59255dc146105d7578063ca1e5bb7146105f9578063cafb22021461061b578063d279830c1461062e578063d56b28891461064a578063d64196f81461065d578063d7d8804314610670578063deaa59df14610683578063e28fa27d146106a2578063e89e4ed6146106b8578063ef78d4fd14610700578063f2fde38b14610713578063f6a03ebf14610732578063f89be59314610748578063fc0c546a1461075b578063fcf401701461076e575b610260610781565b50005b341561026e57600080fd5b610285600160a060020a03600435166024356107f1565b005b341561029257600080fd5b61028560043561085a565b34156102a857600080fd5b610285600160a060020a036004351661087a565b34156102c757600080fd5b610285600160a060020a03600435166108b7565b34156102e657600080fd5b6102fa600160a060020a03600435166108f4565b60405190815260200160405180910390f35b341561031757600080fd5b61028560ff60043516602435604435606435610906565b341561033957600080fd5b610285610aa9565b341561034c57600080fd5b610285610b9d565b341561035f57600080fd5b610285600435610bef565b341561037557600080fd5b610285610c0f565b341561038857600080fd5b610390610c99565b604051600160a060020a03909116815260200160405180910390f35b34156103b757600080fd5b6103bf610ca8565b604051901515815260200160405180910390f35b34156103de57600080fd5b610285610cb6565b34156103f157600080fd5b610390610d3d565b341561040457600080fd5b6103bf610d4c565b341561041757600080fd5b610285600160a060020a0360043581169060243516610d6d565b341561043c57600080fd5b610390610e70565b341561044f57600080fd5b610285600160a060020a0360043516610e7f565b341561046e57600080fd5b610390600435610ebc565b341561048457600080fd5b610285610ee4565b341561049757600080fd5b6102fa6110a9565b34156104aa57600080fd5b6103bf6110af565b34156104bd57600080fd5b6102856110b8565b34156104d057600080fd5b6103906110f3565b34156104e357600080fd5b610390611102565b34156104f657600080fd5b6102fa61111a565b341561050957600080fd5b610285600435611126565b341561051f57600080fd5b610285600160a060020a0360043516602435611146565b341561054157600080fd5b6102fa61118a565b341561055457600080fd5b6103bf611190565b341561056757600080fd5b61028560043561119f565b341561057d57600080fd5b61028560ff600435166111bf565b341561059657600080fd5b6102fa611335565b34156105a957600080fd5b6102fa61133c565b34156105bc57600080fd5b6102fa6113d6565b34156105cf57600080fd5b6102fa6113dc565b34156105e257600080fd5b61028560ff600435166024356044356064356113e2565b341561060457600080fd5b6102fa600160a060020a03600435166024356114d7565b341561062657600080fd5b6102fa611521565b341561063957600080fd5b610285600435602435604435611527565b341561065557600080fd5b61028561163f565b341561066857600080fd5b6102fa611797565b341561067b57600080fd5b6102fa61179d565b341561068e57600080fd5b610285600160a060020a03600435166117c0565b34156106ad57600080fd5b6102856004356117fd565b34156106c357600080fd5b6106ce60043561181d565b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b341561070b57600080fd5b6102fa61185c565b341561071e57600080fd5b610285600160a060020a0360043516611862565b341561073d57600080fd5b6102856004356118f0565b341561075357600080fd5b6102fa611910565b341561076657600080fd5b610390611916565b341561077957600080fd5b610285611925565b600034600e54811015151561079557600080fd5b600d5442101580156107ad57506107aa61179d565b42105b15156107b857600080fd5b60125474010000000000000000000000000000000000000000900460ff16156107e057600080fd5b6107ea333461194d565b91505b5090565b60005433600160a060020a0390811691161461080c57600080fd5b600580546001810161081e8382611bb7565b5060009182526020808320919091018054600160a060020a03909516600160a060020a0319909516851790559281526006909252604090912055565b60005433600160a060020a0390811691161461087557600080fd5b600a55565b60005433600160a060020a0390811691161461089557600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a039081169116146108d257600080fd5b60128054600160a060020a031916600160a060020a0392909216919091179055565b60086020526000908152604090205481565b61090e611be0565b6000805433600160a060020a0390811691161461092a57600080fd5b60115460ff87161061093b57600080fd5b60a06040519081016040528061095f87670de0b6b3a764000063ffffffff61197116565b815260200185815260200184815260200160008152602001600081525091506109958260000151600f549063ffffffff61199c16565b600f556109af60408301516010549063ffffffff61199c16565b60105560118054906109c49060018301611c10565b5050601154600119015b8560ff16811115610a4c5760118054829081106109e757fe5b9060005260206000209060050201601182600101815481101515610a0757fe5b600091825260209091208254600590920201908155600180830154908201556002808301549082015560038083015490820155600491820154910155600019016109ce565b8160118760010160ff16815481101515610a6257fe5b906000526020600020906005020160008201518155602082015181600101556040820151816002015560608201518160030155608082015160049091015550505050505050565b60005433600160a060020a0390811691161480610ae2575033600160a060020a031673ea15adb66dc92a4bbccc8bf32fd25e2e86a2a770145b1515610aed57600080fd5b60095460ff161515610afe57600080fd5b60095462010000900460ff161515610b625773ea15adb66dc92a4bbccc8bf32fd25e2e86a2a77060006768155a43676e0000604051600060405180830381858888f193505050501515610b5057600080fd5b6009805462ff00001916620100001790555b600254600160a060020a039081169030163180156108fc0290604051600060405180830381858888f193505050501515610b9b57600080fd5b565b60005433600160a060020a03908116911614610bb857600080fd5b6012805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b60005433600160a060020a03908116911614610c0a57600080fd5b600355565b6000805433600160a060020a03908116911614610c2b57600080fd5b5060005b601154811015610c7e576011805482908110610c4757fe5b6000918252602082206005909102018181556001808201839055600282018390556003820183905560049091019190915501610c2f565b6000610c8b601182611c10565b50506000600f819055601055565b600254600160a060020a031681565b600954610100900460ff1681565b600954600090610100900460ff168015610ce65750600160a060020a033316600090815260086020526040812054115b1515610cf157600080fd5b50600160a060020a033316600081815260086020526040808220805492905590919082156108fc0290839051600060405180830381858888f193505050501515610d3a57600080fd5b50565b601254600160a060020a031681565b60125474010000000000000000000000000000000000000000900460ff1681565b6000805433600160a060020a03908116911614610d8957600080fd5b5080600160a060020a03811663a9059cbb84826370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610de957600080fd5b6102c65a03f11515610dfa57600080fd5b5050506040518051905060006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610e5057600080fd5b6102c65a03f11515610e6157600080fd5b50505060405180515050505050565b600b54600160a060020a031681565b60005433600160a060020a03908116911614610e9a57600080fd5b600b8054600160a060020a031916600160a060020a0392909216919091179055565b6005805482908110610eca57fe5b600091825260209091200154600160a060020a0316905081565b60008054819081908190819033600160a060020a03908116911614610f0857600080fd5b60009450600093505b600554841015610f7057610f6360066000600587815481101515610f3157fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902054869063ffffffff61199c16565b9450600190930192610f11565b600454600160a060020a03166318160ddd6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610fb857600080fd5b6102c65a03f11515610fc957600080fd5b505050604051805160075490945061100c9150610fec908763ffffffff6119ab16565b60075461100090869063ffffffff61197116565b9063ffffffff6119bd16565b9150600090505b6005548110156110a25761109a60058281548110151561102f57fe5b600091825260208220015460075460058054600160a060020a03909316936110959361100092600692918990811061106357fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902054879063ffffffff61197116565b6119d4565b600101611013565b5050505050565b60075481565b60095460ff1681565b60005433600160a060020a039081169116146110d357600080fd5b6012805474ff000000000000000000000000000000000000000019169055565b600054600160a060020a031681565b73ea15adb66dc92a4bbccc8bf32fd25e2e86a2a77081565b6768155a43676e000081565b60005433600160a060020a0390811691161461114157600080fd5b600c55565b600b5433600160a060020a0390811691161480611171575060005433600160a060020a039081169116145b151561117c57600080fd5b61118682826119d4565b5050565b600c5481565b60095462010000900460ff1681565b60005433600160a060020a039081169116146111ba57600080fd5b600e55565b60008054819033600160a060020a039081169116146111dd57600080fd5b60008360ff16101580156111f5575060115460ff8416105b151561120057600080fd5b6011805460ff851690811061121157fe5b9060005260206000209060050201915061123a8260000154600f546119ab90919063ffffffff16565b600f5560028201546010546112549163ffffffff6119ab16565b6010556011805460ff851690811061126857fe5b600091825260208220600590910201818155600181018290556002810182905560038101829055600401555060ff82165b6011546000190181101561131c5760118054600183019081106112b857fe5b90600052602060002090600502016011828154811015156112d557fe5b600091825260209091208254600590920201908155600180830154818301556002808401549083015560038084015490830155600492830154929091019190915501611299565b601180549061132f906000198301611c10565b50505050565b6011545b90565b600d54600090815b6011548110156113cc576113846201518060118381548110151561136457fe5b90600052602060002090600502016002015461197190919063ffffffff16565b8201915060118181548110151561139757fe5b90600052602060002090600502016004015460001480156113b757508142105b156113c4578092506113d1565b600101611344565b600080fd5b505090565b600f5481565b600d5481565b6000805433600160a060020a039081169116146113fe57600080fd5b60008560ff1610158015611416575060115460ff8616105b151561142157600080fd5b6011805460ff871690811061143257fe5b9060005260206000209060050201905061145b8160000154600f546119ab90919063ffffffff16565b600f5560028101546010546114759163ffffffff6119ab16565b60105561149084670de0b6b3a764000063ffffffff61197116565b8082556001820184905560028201839055600f546114b39163ffffffff61199c16565b600f5560028101546010546114cd9163ffffffff61199c16565b6010555050505050565b600b5460009033600160a060020a0390811691161480611505575060005433600160a060020a039081169116145b151561151057600080fd5b61151a838361194d565b9392505050565b60015481565b61152f611be0565b60005433600160a060020a0390811691161461154a57600080fd5b60008411801561155a5750600083115b80156115665750600082115b151561157157600080fd5b60a06040519081016040528061159586670de0b6b3a764000063ffffffff61197116565b81526020018481526020018381526020016000815260200160008152509050601180548060010182816115c89190611c10565b600092835260209092208391600502018151815560208201518160010155604082015181600201556060820151816003015560808201516004909101555061161c90508151600f549063ffffffff61199c16565b600f5561163660408201516010549063ffffffff61199c16565b60105550505050565b6000805433600160a060020a0390811691161461165b57600080fd5b611663611a52565b156116d157600454600160a060020a0316637d64bcb46000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156116b057600080fd5b6102c65a03f115156116c157600080fd5b5050506040518051905050610d3a565b6116d9610aa9565b6116e1610ee4565b600454600160a060020a0316637d64bcb46000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561172957600080fd5b6102c65a03f1151561173a57600080fd5b50505060405180515050601254600160a060020a031690508063be9a65556040518163ffffffff1660e060020a028152600401600060405180830381600087803b151561178657600080fd5b6102c65a03f1151561132f57600080fd5b600e5481565b60006117bb6010546201518002600d5461199c90919063ffffffff16565b905090565b60005433600160a060020a039081169116146117db57600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a0390811691161461181857600080fd5b600f55565b601180548290811061182b57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909185565b60105481565b60005433600160a060020a0390811691161461187d57600080fd5b600160a060020a038116151561189257600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a0390811691161461190b57600080fd5b600d55565b600a5481565b600454600160a060020a031681565b60005433600160a060020a0390811691161461194057600080fd5b6000610d3a600582611bb7565b60008061195a8484611a80565b90506119668484611ac0565b8091505b5092915050565b600080831515611984576000915061196a565b5082820282848281151561199457fe5b041461196657fe5b60008282018381101561196657fe5b6000828211156119b757fe5b50900390565b60008082848115156119cb57fe5b04949350505050565b600454600160a060020a03166340c10f19838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611a3357600080fd5b6102c65a03f11515611a4457600080fd5b505050604051805150505050565b60095460009060ff161515611a71576009805461ff0019166101001790555b50600954610100900460ff1690565b600080600f54600154101515611a9557600080fd5b600154611aa8908463ffffffff61199c16565b600155611ab483611b2f565b905061196684826119d4565b600160a060020a038216600090815260086020526040902054611ae9908263ffffffff61199c16565b600160a060020a03831660009081526008602052604090205560095460ff16158015611b195750600a5460015410155b15611186576009805460ff191660011790555050565b600080600080611b3d61133c565b9250601183815481101515611b4e57fe5b90600052602060002090600502019150611b81670de0b6b3a764000061100087856001015461197190919063ffffffff16565b6003830154909150611b99908663ffffffff61199c16565b6003830181905582549010611baf574260048301555b949350505050565b815481835581811511611bdb57600083815260209020611bdb918101908301611c3c565b505050565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b815481835581811511611bdb57600502816005028360005260206000209182019101611bdb9190611c56565b61133991905b808211156107ed5760008155600101611c42565b61133991905b808211156107ed5760008082556001820181905560028201819055600382018190556004820155600501611c5c5600a165627a7a72305820b8b507d679a714b1262377391076241d8b34457216ba808d4b8f415e2e466b140029"
}