{
  "address": "0xfcec1e8569613bcd5b0837d07999e5aeb6ffa33f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "StockPortfolio",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-26\n*/\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    /**\n    * @dev Allows the current owner to relinquish control of the contract.\n    */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n}\n\n\n\n\n\n/**\n  * @title StockPortfolio\n  * @author aflesher\n  * @dev StockPortfolio is smart contract for keeping a record\n  * @dev stock purchases. Trades can more or less be validated\n  * @dev using the trade timestamp and comparing the data to\n  * @dev historical values.\n  */\ncontract StockPortfolio is Ownable {\n\n    struct Position {\n        uint32 quantity;\n        uint32 avgPrice;\n    }\n\n    mapping (bytes12 => Position) positions;\n    bytes12[] private holdings;\n    bytes6[] private markets;\n\n    event Bought(bytes6 market, bytes6 symbol, uint32 quantity, uint32 price, uint256 timestamp);\n    event Sold(bytes6 market, bytes6 symbol, uint32 quantity, uint32 price, int64 profits, uint256 timestamp);\n    event ForwardSplit(bytes6 market, bytes6 symbol, uint8 multiple, uint256 timestamp);\n    event ReverseSplit(bytes6 market, bytes6 symbol, uint8 divisor, uint256 timestamp);\n\n    // Profits have to be separated because of different curriences so\n    // separate them by market. Market profit to currency can be worked\n    // out by client\n    mapping (bytes6 => int) public profits;\n\n    constructor () public {\n        markets.push(0x6e7973650000); //nyse 0\n        markets.push(0x6e6173646171); //nasdaq 1\n        markets.push(0x747378000000); //tsx 2\n        markets.push(0x747378760000); //tsxv 3\n        markets.push(0x6f7463000000); //otc 4\n        markets.push(0x637365000000); //cse 5\n    }\n\n    function () public payable {}\n\n    /**\n     * @dev Adds to or creates new position\n     * @param _marketIndex The index of the market\n     * @param _symbol A stock symbol\n     * @param _quantity Quantity of shares to buy\n     * @param _price Price per share * 100 ($10.24 = 1024)\n     */\n    function buy\n    (\n        uint8 _marketIndex,\n        bytes6 _symbol,\n        uint32 _quantity,\n        uint32 _price\n    )\n        external\n        onlyOwner\n    {\n        _buy(_marketIndex, _symbol, _quantity, _price);\n    }\n\n    /**\n     * @dev Adds to or creates a series of positions\n     * @param _marketIndexes The indexes of the markets\n     * @param _symbols Stock symbols\n     * @param _quantities Quantities of shares to buy\n     * @param _prices Prices per share * 100 ($10.24 = 1024)\n     */\n    function bulkBuy\n    (\n        uint8[] _marketIndexes,\n        bytes6[] _symbols,\n        uint32[] _quantities,\n        uint32[] _prices\n    )\n        external\n        onlyOwner\n    {\n        for (uint i = 0; i < _symbols.length; i++) {\n            _buy(_marketIndexes[i], _symbols[i], _quantities[i], _prices[i]);\n        }\n    }\n\n    /**\n     * @dev Tracks a stock split\n     * @param _marketIndex The index of the market\n     * @param _symbol A stock symbol\n     * @param _multiple Number of new shares per share created\n     */\n    function split\n    (\n        uint8 _marketIndex,\n        bytes6 _symbol,\n        uint8 _multiple\n    )\n        external\n        onlyOwner\n    {\n        bytes6 market = markets[_marketIndex];\n        bytes12 stockKey = getStockKey(market, _symbol);\n        Position storage position = positions[stockKey];\n        require(position.quantity > 0);\n        uint32 quantity = (_multiple * position.quantity) - position.quantity;\n        position.avgPrice = (position.quantity * position.avgPrice) / (position.quantity + quantity);\n        position.quantity += quantity;\n\n        emit ForwardSplit(market, _symbol, _multiple, now);\n    }\n\n    /**\n     * @dev Tracks a reverse stock split\n     * @param _marketIndex The index of the market\n     * @param _symbol A stock symbol\n     * @param _divisor Number of existing shares that will equal 1 new share\n     * @param _price The current stock price. Remainder shares will sold at this price\n     */\n    function reverseSplit\n    (\n        uint8 _marketIndex,\n        bytes6 _symbol,\n        uint8 _divisor,\n        uint32 _price\n    )\n        external\n        onlyOwner\n    {\n        bytes6 market = markets[_marketIndex];\n        bytes12 stockKey = getStockKey(market, _symbol);\n        Position storage position = positions[stockKey];\n        require(position.quantity > 0);\n        uint32 quantity = position.quantity / _divisor;\n        uint32 extraQuantity = position.quantity - (quantity * _divisor);\n        if (extraQuantity > 0) {\n            _sell(_marketIndex, _symbol, extraQuantity, _price);\n        }\n        position.avgPrice = position.avgPrice * _divisor;\n        position.quantity = quantity;\n\n        emit ReverseSplit(market, _symbol, _divisor, now);\n    }\n\n    /**\n     * @dev Sells a position, adds a new trade and adds profits/lossses\n     * @param _symbol Stock symbol\n     * @param _quantity Quantity of shares to sale\n     * @param _price Price per share * 100 ($10.24 = 1024)\n     */\n    function sell\n    (\n        uint8 _marketIndex,\n        bytes6 _symbol,\n        uint32 _quantity,\n        uint32 _price\n    )\n        external\n        onlyOwner\n    {\n        _sell(_marketIndex, _symbol, _quantity, _price);\n    }\n\n    /**\n     * @dev Sells positions, adds a new trades and adds profits/lossses\n     * @param _symbols Stock symbols\n     * @param _quantities Quantities of shares to sale\n     * @param _prices Prices per share * 100 ($10.24 = 1024)\n     */\n    function bulkSell\n    (\n        uint8[] _marketIndexes,\n        bytes6[] _symbols,\n        uint32[] _quantities,\n        uint32[] _prices\n    )\n        external\n        onlyOwner\n    {\n        for (uint i = 0; i < _symbols.length; i++) {\n            _sell(_marketIndexes[i], _symbols[i], _quantities[i], _prices[i]);\n        }\n    }\n\n    /**\n     * @dev Get the number of markets\n     * @return uint\n     */\n    function getMarketsCount() public view returns(uint) {\n        return markets.length;\n    }\n\n    /**\n     * @dev Get a market at a given index\n     * @param _index The market index\n     * @return bytes6 market name\n     */\n    function getMarket(uint _index) public view returns(bytes6) {\n        return markets[_index];\n    }\n\n    /**\n     * @dev Get profits\n     * @param _market The market name\n     * @return int\n     */\n    function getProfits(bytes6 _market) public view returns(int) {\n        return profits[_market];\n    }\n\n    /**\n     * @dev Gets a position\n     * @param _stockKey The stock key\n     * @return quantity Quantity of shares held\n     * @return avgPrice Average price paid for shares\n     */\n    function getPosition\n    (\n        bytes12 _stockKey\n    )\n        public\n        view\n        returns\n        (\n            uint32 quantity,\n            uint32 avgPrice\n        )\n    {\n        Position storage position = positions[_stockKey];\n        quantity = position.quantity;\n        avgPrice = position.avgPrice;\n    }\n\n    /**\n     * @dev Gets a postion at the given index\n     * @param _index The index of the holding\n     * @return market Market name\n     * @return stock Stock name\n     * @return quantity Quantity of shares held\n     * @return avgPrice Average price paid for shares\n     */  \n    function getPositionFromHolding\n    (\n        uint _index\n    )\n        public\n        view\n        returns\n        (\n            bytes6 market, \n            bytes6 symbol,\n            uint32 quantity,\n            uint32 avgPrice\n        )\n    {\n        bytes12 stockKey = holdings[_index];\n        (market, symbol) = recoverStockKey(stockKey);\n        Position storage position = positions[stockKey];\n        quantity = position.quantity;\n        avgPrice = position.avgPrice;\n    }\n\n    /**\n     * @dev Get the number of stocks being held\n     * @return uint\n     */\n    function getHoldingsCount() public view returns(uint) {\n        return holdings.length;\n    }\n\n    /**\n     * @dev Gets the stock key at the given index\n     * @return bytes32 The unique stock key\n     */\n    function getHolding(uint _index) public view returns(bytes12) {\n        return holdings[_index];\n    }\n\n    /**\n     * @dev Generates a unique key for a stock by combining the market and symbol\n     * @param _market Stock market\n     * @param _symbol Stock symbol\n     * @return key The key\n     */\n    function getStockKey(bytes6 _market, bytes6 _symbol) public pure returns(bytes12 key) {\n        bytes memory combined = new bytes(12);\n        for (uint i = 0; i < 6; i++) {\n            combined[i] = _market[i];\n        }\n        for (uint j = 0; j < 6; j++) {\n            combined[j + 6] = _symbol[j];\n        }\n        assembly {\n            key := mload(add(combined, 32))\n        }\n    }\n    \n    /**\n     * @dev Splits a unique key for a stock and returns the market and symbol\n     * @param _key Unique stock key\n     * @return market Stock market\n     * @return symbol Stock symbol\n     */\n    function recoverStockKey(bytes12 _key) public pure returns(bytes6 market, bytes6 symbol) {\n        bytes memory _market = new bytes(6);\n        bytes memory _symbol = new bytes(6);\n        for (uint i = 0; i < 6; i++) {\n            _market[i] = _key[i];\n        }\n        for (uint j = 0; j < 6; j++) {\n            _symbol[j] = _key[j + 6];\n        }\n        assembly {\n            market := mload(add(_market, 32))\n            symbol := mload(add(_symbol, 32))\n        }\n    }\n\n    function addMarket(bytes6 _market) public onlyOwner {\n        markets.push(_market);\n    }\n\n    function _addHolding(bytes12 _stockKey) private {\n        holdings.push(_stockKey);\n    }\n\n    function _removeHolding(bytes12 _stockKey) private {\n        if (holdings.length == 0) {\n            return;\n        }\n        bool found = false;\n        for (uint i = 0; i < holdings.length; i++) {\n            if (found) {\n                holdings[i - 1] = holdings[i];\n            }\n\n            if (holdings[i] == _stockKey) {\n                found = true;\n            }\n        }\n        if (found) {\n            delete holdings[holdings.length - 1];\n            holdings.length--;\n        }\n    }\n\n    function _sell\n    (\n        uint8 _marketIndex,\n        bytes6 _symbol,\n        uint32 _quantity,\n        uint32 _price\n    )\n        private\n    {\n        bytes6 market = markets[_marketIndex];\n        bytes12 stockKey = getStockKey(market, _symbol);\n        Position storage position = positions[stockKey];\n        require(position.quantity >= _quantity);\n        int64 profit = int64(_quantity * _price) - int64(_quantity * position.avgPrice);\n        position.quantity -= _quantity;\n        if (position.quantity <= 0) {\n            _removeHolding(stockKey);\n            delete positions[stockKey];\n        }\n        profits[market] += profit;\n        emit Sold(market, _symbol, _quantity, _price, profit, now);\n    }\n\n    function _buy\n    (\n        uint8 _marketIndex,\n        bytes6 _symbol,\n        uint32 _quantity,\n        uint32 _price\n    )\n        private\n    {\n        bytes6 market = markets[_marketIndex];\n        bytes12 stockKey = getStockKey(market, _symbol);\n        Position storage position = positions[stockKey];\n        if (position.quantity == 0) {\n            _addHolding(stockKey);\n        }\n        position.avgPrice = ((position.quantity * position.avgPrice) + (_quantity * _price)) /\n            (position.quantity + _quantity);\n        position.quantity += _quantity;\n\n        emit Bought(market, _symbol, _quantity, _price, now);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003656e79736500009080600181540180825580915050906001820390600052602060002090600591828204019190066006029091927a01000000000000000000000000000000000000000000000000000002909190916101000a81548165ffffffffffff02191690837a01000000000000000000000000000000000000000000000000000090040217905550506003656e61736461719080600181540180825580915050906001820390600052602060002090600591828204019190066006029091927a01000000000000000000000000000000000000000000000000000002909190916101000a81548165ffffffffffff02191690837a01000000000000000000000000000000000000000000000000000090040217905550506003657473780000009080600181540180825580915050906001820390600052602060002090600591828204019190066006029091927a01000000000000000000000000000000000000000000000000000002909190916101000a81548165ffffffffffff02191690837a01000000000000000000000000000000000000000000000000000090040217905550506003657473787600009080600181540180825580915050906001820390600052602060002090600591828204019190066006029091927a01000000000000000000000000000000000000000000000000000002909190916101000a81548165ffffffffffff02191690837a01000000000000000000000000000000000000000000000000000090040217905550506003656f74630000009080600181540180825580915050906001820390600052602060002090600591828204019190066006029091927a01000000000000000000000000000000000000000000000000000002909190916101000a81548165ffffffffffff02191690837a01000000000000000000000000000000000000000000000000000090040217905550506003656373650000009080600181540180825580915050906001820390600052602060002090600591828204019190066006029091927a01000000000000000000000000000000000000000000000000000002909190916101000a81548165ffffffffffff02191690837a010000000000000000000000000000000000000000000000000000900402179055505061238c806103b46000396000f300608060405260043610610111576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680628a3ca114610113578063172ab60c1461018757806327fa35c3146102695780632826185014610294578063388f58cd146102f25780633c6dfba11461033c57806345aeff61146103b3578063603e3a401461046657806364e749ff146104e957806366d48e0a14610560578063715018a6146105be578063786d02d0146105d55780638da5cb5b1461060057806395bb9fcf14610657578063b65f90e3146106c6578063c76b838c1461072a578063ca2392f8146107ad578063d2df922214610824578063eb44fdd3146108f7578063f2fde38b14610972575b005b34801561011f57600080fd5b50610185600480360381019080803560ff169060200190929190803579ffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190803560ff169060200190929190803563ffffffff1690602001909291905050506109b5565b005b34801561019357600080fd5b506101b260048036038101908080359060200190929190505050610c79565b604051808579ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018479ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff16815260200194505050505060405180910390f35b34801561027557600080fd5b5061027e610d55565b6040518082815260200191505060405180910390f35b3480156102a057600080fd5b506102dc600480360381019080803579ffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610d62565b6040518082815260200191505060405180910390f35b3480156102fe57600080fd5b5061033a600480360381019080803579ffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610db9565b005b34801561034857600080fd5b506103b1600480360381019080803560ff169060200190929190803579ffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190803563ffffffff169060200190929190803563ffffffff169060200190929190505050610e82565b005b3480156103bf57600080fd5b50610422600480360381019080803579ffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190803579ffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610eef565b604051808273ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561047257600080fd5b506104e7600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050611054565b005b3480156104f557600080fd5b5061052b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff19169060200190929190505050611161565b604051808363ffffffff1663ffffffff1681526020018263ffffffff1663ffffffff1681526020019250505060405180910390f35b34801561056c57600080fd5b506105a8600480360381019080803579ffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506111dd565b6040518082815260200191505060405180910390f35b3480156105ca57600080fd5b506105d36111f5565b005b3480156105e157600080fd5b506105ea6112f7565b6040518082815260200191505060405180910390f35b34801561060c57600080fd5b50610615611304565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561066357600080fd5b5061068260048036038101908080359060200190929190505050611329565b604051808273ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3480156106d257600080fd5b50610728600480360381019080803560ff169060200190929190803579ffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190803560ff169060200190929190505050611378565b005b34801561073657600080fd5b506107ab600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050611658565b005b3480156107b957600080fd5b50610822600480360381019080803560ff169060200190929190803579ffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190803563ffffffff169060200190929190803563ffffffff169060200190929190505050611765565b005b34801561083057600080fd5b50610866600480360381019080803573ffffffffffffffffffffffffffffffffffffffff191690602001909291905050506117d2565b604051808379ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018279ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019250505060405180910390f35b34801561090357600080fd5b5061092260048036038101908080359060200190929190505050611977565b604051808279ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561097e57600080fd5b506109b3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119cc565b005b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a1857600080fd5b60038960ff16815481101515610a2a57fe5b90600052602060002090600591828204019190066006029054906101000a90047a010000000000000000000000000000000000000000000000000000029450610a738589610eef565b9350600160008573ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020925060008360000160009054906101000a900463ffffffff1663ffffffff16111515610ae157600080fd5b8660ff168360000160009054906101000a900463ffffffff1663ffffffff16811515610b0957fe5b0491508660ff1682028360000160009054906101000a900463ffffffff1603905060008163ffffffff161115610b4657610b4589898389611b21565b5b8660ff168360000160049054906101000a900463ffffffff16028360000160046101000a81548163ffffffff021916908363ffffffff160217905550818360000160006101000a81548163ffffffff021916908363ffffffff1602179055507f75fa2bbe2dc2a5634827c9752d9a076b343d560804993197913169059ea3dc5785898942604051808579ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018479ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018360ff1660ff16815260200182815260200194505050505060405180910390a1505050505050505050565b600080600080600080600287815481101515610c9157fe5b9060005260206000209060029182820401919006600c029054906101000a900474010000000000000000000000000000000000000000029150610cd3826117d2565b8096508197505050600160008373ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002090508060000160009054906101000a900463ffffffff1693508060000160049054906101000a900463ffffffff16925050509193509193565b6000600380549050905090565b6000600460008379ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e1457600080fd5b600381908060018154018082558091505090600182039060005260206000209060059182820401919006600602909192909190916101000a81548165ffffffffffff02191690837a010000000000000000000000000000000000000000000000000000900402179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610edd57600080fd5b610ee984848484611e50565b50505050565b60006060600080600c6040519080825280601f01601f191660200182016040528015610f2a5781602001602082028038833980820191505090505b509250600091505b6006821015610fb7578582600681101515610f4957fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000028383815181101515610f7a57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050610f32565b600090505b6006811015611044578481600681101515610fd357fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002836006830181518110151561100757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610fbc565b6020830151935050505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b157600080fd5b600090505b868690508110156111565761114989898381811015156110d257fe5b9050602002013560ff1688888481811015156110ea57fe5b9050602002013579ffffffffffffffffffffffffffffffffffffffffffffffffffff1916878785818110151561111c57fe5b9050602002013563ffffffff16868686818110151561113757fe5b9050602002013563ffffffff16611e50565b80806001019150506110b6565b505050505050505050565b6000806000600160008573ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002090508060000160009054906101000a900463ffffffff1692508060000160049054906101000a900463ffffffff16915050915091565b60046020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561125057600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600280549050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060028281548110151561133a57fe5b9060005260206000209060029182820401919006600c029054906101000a900474010000000000000000000000000000000000000000029050919050565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113d957600080fd5b60038760ff168154811015156113eb57fe5b90600052602060002090600591828204019190066006029054906101000a90047a0100000000000000000000000000000000000000000000000000000293506114348487610eef565b9250600160008473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020915060008260000160009054906101000a900463ffffffff1663ffffffff161115156114a257600080fd5b8160000160009054906101000a900463ffffffff168260000160009054906101000a900463ffffffff168660ff1602039050808260000160009054906101000a900463ffffffff160163ffffffff168260000160049054906101000a900463ffffffff168360000160009054906101000a900463ffffffff160263ffffffff1681151561152b57fe5b048260000160046101000a81548163ffffffff021916908363ffffffff160217905550808260000160008282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff1602179055507f1f4f6e85946afbb81ad6a94e99ec8c51624f4a002cb8ce25ebe90df1040c809e84878742604051808579ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018479ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018360ff1660ff16815260200182815260200194505050505060405180910390a150505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116b557600080fd5b600090505b8686905081101561175a5761174d89898381811015156116d657fe5b9050602002013560ff1688888481811015156116ee57fe5b9050602002013579ffffffffffffffffffffffffffffffffffffffffffffffffffff1916878785818110151561172057fe5b9050602002013563ffffffff16868686818110151561173b57fe5b9050602002013563ffffffff16611b21565b80806001019150506116ba565b505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117c057600080fd5b6117cc84848484611b21565b50505050565b60008060608060008060066040519080825280601f01601f19166020018201604052801561180f5781602001602082028038833980820191505090505b50935060066040519080825280601f01601f1916602001820160405280156118465781602001602082028038833980820191505090505b509250600091505b60068210156118d3578682600c8110151561186557fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002848381518110151561189657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818060010192505061184e565b600090505b6006811015611960578660068201600c811015156118f257fe5b1a7f010000000000000000000000000000000000000000000000000000000000000002838281518110151561192357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506118d8565b602084015195506020830151945050505050915091565b600060038281548110151561198857fe5b90600052602060002090600591828204019190066006029054906101000a90047a010000000000000000000000000000000000000000000000000000029050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a2757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a6357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008060038860ff16815481101515611b3957fe5b90600052602060002090600591828204019190066006029054906101000a90047a010000000000000000000000000000000000000000000000000000029350611b828488610eef565b9250600160008473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002091508563ffffffff168260000160009054906101000a900463ffffffff1663ffffffff1610151515611bf657600080fd5b8160000160049054906101000a900463ffffffff16860263ffffffff1685870263ffffffff16039050858260000160008282829054906101000a900463ffffffff160392506101000a81548163ffffffff021916908363ffffffff16021790555060008260000160009054906101000a900463ffffffff1663ffffffff16111515611cf757611c84836120c4565b600160008473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549063ffffffff02191690556000820160046101000a81549063ffffffff021916905550505b8060070b600460008679ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600082825401925050819055507fe0859aa323899ecbf2d29c831e6a066f3b0438863731d45316c2efbf6a419ae4848888888542604051808779ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018679ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018563ffffffff1663ffffffff1681526020018463ffffffff1663ffffffff1681526020018360070b60070b8152602001828152602001965050505050505060405180910390a15050505050505050565b600080600060038760ff16815481101515611e6757fe5b90600052602060002090600591828204019190066006029054906101000a90047a010000000000000000000000000000000000000000000000000000029250611eb08387610eef565b9150600160008373ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020905060008160000160009054906101000a900463ffffffff1663ffffffff161415611f2257611f2182612293565b5b848160000160009054906101000a900463ffffffff160163ffffffff168486028260000160049054906101000a900463ffffffff168360000160009054906101000a900463ffffffff16020163ffffffff16811515611f7d57fe5b048160000160046101000a81548163ffffffff021916908363ffffffff160217905550848160000160008282829054906101000a900463ffffffff160192506101000a81548163ffffffff021916908363ffffffff1602179055507f127e1e6a1d709d12de1f7da7271f969bfc80b2f6739c58b6e971cd12baa89a138387878742604051808679ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018579ffffffffffffffffffffffffffffffffffffffffffffffffffff191679ffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018463ffffffff1663ffffffff1681526020018363ffffffff1663ffffffff1681526020018281526020019550505050505060405180910390a150505050505050565b600080600060028054905014156120da5761228e565b60009150600090505b60028054905081101561222957811561219c5760028181548110151561210557fe5b9060005260206000209060029182820401919006600c029054906101000a9004740100000000000000000000000000000000000000000260026001830381548110151561214e57fe5b9060005260206000209060029182820401919006600c026101000a8154816bffffffffffffffffffffffff021916908374010000000000000000000000000000000000000000900402179055505b8273ffffffffffffffffffffffffffffffffffffffff19166002828154811015156121c357fe5b9060005260206000209060029182820401919006600c029054906101000a9004740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff1916141561221c57600191505b80806001019150506120e3565b811561228d57600260016002805490500381548110151561224657fe5b9060005260206000209060029182820401919006600c026101000a8154906bffffffffffffffffffffffff0219169055600280548091906001900361228b9190612301565b505b5b505050565b600281908060018154018082558091505090600182039060005260206000209060029182820401919006600c02909192909190916101000a8154816bffffffffffffffffffffffff021916908374010000000000000000000000000000000000000000900402179055505050565b815481835581811115612336576001016002900481600101600290048360005260206000209182019101612335919061233b565b5b505050565b61235d91905b80821115612359576000816000905550600101612341565b5090565b905600a165627a7a723058205294638a4712d3813a55e41bd1229b9043525250ecaf3d66c86c495be523b0130029"
}