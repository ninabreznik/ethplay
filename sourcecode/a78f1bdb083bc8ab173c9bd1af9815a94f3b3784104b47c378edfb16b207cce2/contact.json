{
  "address": "0x063b98a414eaa1d4a5d4fc235a22db1427199024",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20Token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-06\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\ncontract BasicERC20\n{\n    /* Public variables of the token */\n    string public standard = 'ERC20';\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    bool public isTokenTransferable = true;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) public {\n        assert(isTokenTransferable);\n        assert(balanceOf[msg.sender] >= _value);             // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value) public\n    returns (bool success)  {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        assert(isTokenTransferable || _from == address(0x0)); // allow to transfer for crowdsale\n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n        balanceOf[_from] -= _value;                          // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract BasicCrowdsale is Ownable\n{\n    using SafeMath for uint256;\n    BasicERC20 token;\n\n    address public ownerWallet;\n    uint256 public startTime;\n    uint256 public endTime;\n    uint256 public totalEtherRaised = 0;\n    uint256 public minDepositAmount;\n    uint256 public maxDepositAmount;\n\n    uint256 public softCapEther;\n    uint256 public hardCapEther;\n\n    mapping(address => uint256) private deposits;\n\n    constructor () public {\n\n    }\n\n    function () external payable {\n        buy(msg.sender);\n    }\n\n    function getSettings () view public returns(uint256 _startTime,\n        uint256 _endTime,\n        uint256 _rate,\n        uint256 _totalEtherRaised,\n        uint256 _minDepositAmount,\n        uint256 _maxDepositAmount,\n        uint256 _tokensLeft ) {\n\n        _startTime = startTime;\n        _endTime = endTime;\n        _rate = getRate();\n        _totalEtherRaised = totalEtherRaised;\n        _minDepositAmount = minDepositAmount;\n        _maxDepositAmount = maxDepositAmount;\n        _tokensLeft = tokensLeft();\n    }\n\n    function tokensLeft() view public returns (uint256)\n    {\n        return token.balanceOf(address(0x0));\n    }\n\n    function changeMinDepositAmount (uint256 _minDepositAmount) onlyOwner public {\n        minDepositAmount = _minDepositAmount;\n    }\n\n    function changeMaxDepositAmount (uint256 _maxDepositAmount) onlyOwner public {\n        maxDepositAmount = _maxDepositAmount;\n    }\n\n    function getRate() view public returns (uint256) {\n        assert(false);\n    }\n\n    function getTokenAmount(uint256 weiAmount) public view returns(uint256) {\n        return weiAmount.mul(getRate());\n    }\n\n    function checkCorrectPurchase() view internal {\n        require(startTime < now && now < endTime);\n        require(msg.value >= minDepositAmount);\n        require(msg.value < maxDepositAmount);\n        require(totalEtherRaised + msg.value < hardCapEther);\n    }\n\n    function isCrowdsaleFinished() view public returns(bool)\n    {\n        return totalEtherRaised >= hardCapEther || now > endTime;\n    }\n\n    function buy(address userAddress) public payable {\n        require(userAddress != address(0));\n        checkCorrectPurchase();\n\n        // calculate token amount to be created\n        uint256 tokens = getTokenAmount(msg.value);\n\n        // update state\n        totalEtherRaised = totalEtherRaised.add(msg.value);\n\n        token.transferFrom(address(0x0), userAddress, tokens);\n\n        if (totalEtherRaised >= softCapEther)\n        {\n            ownerWallet.transfer(this.balance);\n        }\n        else\n        {\n            deposits[userAddress] = deposits[userAddress].add(msg.value);\n        }\n    }\n\n    function getRefundAmount(address userAddress) view public returns (uint256)\n    {\n        if (totalEtherRaised >= softCapEther) return 0;\n        return deposits[userAddress];\n    }\n\n    function refund(address userAddress) public\n    {\n        assert(totalEtherRaised < softCapEther && now > endTime);\n        uint256 amount = deposits[userAddress];\n        deposits[userAddress] = 0;\n        userAddress.transfer(amount);\n    }\n}\n\n\ncontract CrowdsaleCompatible is BasicERC20, Ownable\n{\n    BasicCrowdsale public crowdsale = BasicCrowdsale(0x0);\n\n    // anyone can unfreeze tokens when crowdsale is finished\n    function unfreezeTokens() public\n    {\n        assert(now > crowdsale.endTime());\n        isTokenTransferable = true;\n    }\n\n    // change owner to 0x0 to lock this function\n    function initializeCrowdsale(address crowdsaleContractAddress, uint256 tokensAmount) onlyOwner public  {\n        transfer((address)(0x0), tokensAmount);\n        allowance[(address)(0x0)][crowdsaleContractAddress] = tokensAmount;\n        crowdsale = BasicCrowdsale(crowdsaleContractAddress);\n        isTokenTransferable = false;\n        transferOwnership(0x0); // remove an owner\n    }\n}\n\n\n\n\n\n\n\ncontract EditableToken is BasicERC20, Ownable {\n    using SafeMath for uint256;\n\n    // change owner to 0x0 to lock this function\n    function editTokenProperties(string _name, string _symbol, int256 extraSupplay) onlyOwner public {\n        name = _name;\n        symbol = _symbol;\n        if (extraSupplay > 0)\n        {\n            balanceOf[owner] = balanceOf[owner].add(uint256(extraSupplay));\n            totalSupply = totalSupply.add(uint256(extraSupplay));\n            emit Transfer(address(0x0), owner, uint256(extraSupplay));\n        }\n        else if (extraSupplay < 0)\n        {\n            balanceOf[owner] = balanceOf[owner].sub(uint256(extraSupplay * -1));\n            totalSupply = totalSupply.sub(uint256(extraSupplay * -1));\n            emit Transfer(owner, address(0x0), uint256(extraSupplay * -1));\n        }\n    }\n}\n\n\n\n\n\n\n\ncontract ThirdPartyTransferableToken is BasicERC20{\n    using SafeMath for uint256;\n\n    struct confidenceInfo {\n        uint256 nonce;\n        mapping (uint256 => bool) operation;\n    }\n    mapping (address => confidenceInfo) _confidence_transfers;\n\n    function nonceOf(address src) view public returns (uint256) {\n        return _confidence_transfers[src].nonce;\n    }\n\n    function transferByThirdParty(uint256 nonce, address where, uint256 amount, uint8 v, bytes32 r, bytes32 s) public returns (bool){\n        assert(where != address(this));\n        assert(where != address(0x0));\n\n        bytes32 hash = sha256(this, nonce, where, amount);\n        address src = ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash),v,r,s);\n        assert(balanceOf[src] >= amount);\n        assert(nonce == _confidence_transfers[src].nonce+1);\n\n        assert(_confidence_transfers[src].operation[uint256(hash)]==false);\n\n        balanceOf[src] = balanceOf[src].sub(amount);\n        balanceOf[where] = balanceOf[where].add(amount);\n        _confidence_transfers[src].nonce += 1;\n        _confidence_transfers[src].operation[uint256(hash)] = true;\n\n        emit Transfer(src, where, amount);\n\n        return true;\n    }\n}\n\n\n\ncontract ERC20Token is CrowdsaleCompatible, EditableToken, ThirdPartyTransferableToken {\n    using SafeMath for uint256;\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor() public\n    {\n        balanceOf[0xb7722517f410914fff62df357a0c14b88efb9369] = uint256(50000000) * 10**18;\n        emit Transfer(address(0x0), 0xb7722517f410914fff62df357a0c14b88efb9369, balanceOf[0xb7722517f410914fff62df357a0c14b88efb9369]);\n\n        transferOwnership(0xb7722517f410914fff62df357a0c14b88efb9369);\n\n        totalSupply = 50000000 * 10**18;                  // Update total supply\n        name = 'VOMER';                                   // Set the name for display purposes\n        symbol = 'VMR';                               // Set the symbol for display purposes\n        decimals = 18;                                           // Amount of decimals for display purposes\n    }\n\n    /* This unnamed function is called whenever someone tries to send ether to it */\n    function () public {\n        assert(false);     // Prevents accidental sending of ether\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"extraSupplay\",\"type\":\"int256\"}],\"name\":\"editTokenProperties\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTokenTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"crowdsaleContractAddress\",\"type\":\"address\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"initializeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"}],\"name\":\"nonceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"where\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferByThirdParty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60c0604052600560808190527f455243323000000000000000000000000000000000000000000000000000000060a09081526200004091600091906200024e565b506005805460ff1916600117905560098054600160a060020a03191690553480156200006b57600080fd5b5060088054600160a060020a0319163317905573b7722517f410914fff62df357a0c14b88efb93696000818152600660209081526a295be96e640669720000007f2c8aa5bd8bd2bec99b59ef1e5ede180b13b000c39dc6d7e264e4952740c3408481905560408051918252517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a36200012a73b7722517f410914fff62df357a0c14b88efb9369640100000000620001da810204565b6a295be96e640669720000006004556040805180820190915260058082527f564f4d455200000000000000000000000000000000000000000000000000000060209092019182526200017f916001916200024e565b506040805180820190915260038082527f564d5200000000000000000000000000000000000000000000000000000000006020909201918252620001c6916002916200024e565b506003805460ff19166012179055620002f3565b600854600160a060020a03163314620001f257600080fd5b600854604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360088054600160a060020a031916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200029157805160ff1916838001178555620002c1565b82800160010185558215620002c1579182015b82811115620002c1578251825591602001919060010190620002a4565b50620002cf929150620002d3565b5090565b620002f091905b80821115620002cf5760008155600101620002da565b90565b610f2380620003036000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610117578063095ea7b3146101a157806318160ddd146101d957806323b872dd14610200578063313ce5671461022a5780635a3b7e421461025557806370a082311461026a5780638b969c331461028b5780638da5cb5b14610324578063958222aa1461035557806395d89b411461036a5780639c1e03a01461037f578063a9059cbb14610394578063c1bd8ecb146103b8578063dd62ed3e146103dc578063ed2a2d6414610403578063ee6891af14610424578063f2fde38b14610457578063ffba376c14610478575b34801561011257600080fd5b50fe5b005b34801561012357600080fd5b5061012c61048d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016657818101518382015260200161014e565b50505050905090810190601f1680156101935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ad57600080fd5b506101c5600160a060020a036004351660243561051a565b604080519115158252519081900360200190f35b3480156101e557600080fd5b506101ee610547565b60408051918252519081900360200190f35b34801561020c57600080fd5b506101c5600160a060020a036004358116906024351660443561054d565b34801561023657600080fd5b5061023f610664565b6040805160ff9092168252519081900360200190f35b34801561026157600080fd5b5061012c61066d565b34801561027657600080fd5b506101ee600160a060020a03600435166106c8565b34801561029757600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261011594369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975050933594506106da9350505050565b34801561033057600080fd5b5061033961085d565b60408051600160a060020a039092168252519081900360200190f35b34801561036157600080fd5b506101c561086c565b34801561037657600080fd5b5061012c610875565b34801561038b57600080fd5b506103396108cd565b3480156103a057600080fd5b50610115600160a060020a03600435166024356108dc565b3480156103c457600080fd5b50610115600160a060020a0360043516602435610981565b3480156103e857600080fd5b506101ee600160a060020a0360043581169060243516610a15565b34801561040f57600080fd5b506101ee600160a060020a0360043516610a32565b34801561043057600080fd5b506101c5600435600160a060020a036024351660443560ff6064351660843560a435610a4d565b34801561046357600080fd5b50610115600160a060020a0360043516610ce5565b34801561048457600080fd5b50610115610d65565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105125780601f106104e757610100808354040283529160200191610512565b820191906000526020600020905b8154815290600101906020018083116104f557829003601f168201915b505050505081565b336000908152600760209081526040808320600160a060020a039590951683529390529190912055600190565b60045481565b60055460009060ff16806105685750600160a060020a038416155b151561057057fe5b600160a060020a03841660009081526006602052604090205482111561059557600080fd5b600160a060020a03831660009081526006602052604090205482810110156105bc57600080fd5b600160a060020a03841660009081526007602090815260408083203384529091529020548211156105ec57600080fd5b600160a060020a038085166000818152600660209081526040808320805488900390559387168083528483208054880190558383526007825284832033845282529184902080548790039055835186815293519193600080516020610ed8833981519152929081900390910190a35060019392505050565b60035460ff1681565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105125780601f106104e757610100808354040283529160200191610512565b60066020526000908152604090205481565b600854600160a060020a031633146106f157600080fd5b8251610704906001906020860190610e3c565b508151610718906002906020850190610e3c565b5060008113156107b757600854600160a060020a031660009081526006602052604090205461074d908263ffffffff610e1416565b600854600160a060020a031660009081526006602052604090205560045461077b908263ffffffff610e1416565b600455600854604080518381529051600160a060020a0390921691600091600080516020610ed8833981519152919081900360200190a3610858565b600081121561085857600854600160a060020a03166000908152600660205260408120546107ed9183900363ffffffff610e2a16565b600854600160a060020a03166000908152600660205260408120919091556004546108209183900363ffffffff610e2a16565b600455600854604080516000848103825291519192600160a060020a031691600080516020610ed88339815191529181900360200190a35b505050565b600854600160a060020a031681565b60055460ff1681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156105125780601f106104e757610100808354040283529160200191610512565b600954600160a060020a031681565b60055460ff1615156108ea57fe5b3360009081526006602052604090205481111561090357fe5b600160a060020a038216600090815260066020526040902054818101101561092a57600080fd5b33600081815260066020908152604080832080548690039055600160a060020a0386168084529281902080548601905580518581529051929392600080516020610ed8833981519152929181900390910190a35050565b600854600160a060020a0316331461099857600080fd5b6109a36000826108dc565b600160a060020a03821660008181527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df602052604081208390556009805473ffffffffffffffffffffffffffffffffffffffff19169092179091556005805460ff19169055610a1190610ce5565b5050565b600760209081526000928352604080842090915290825290205481565b600160a060020a03166000908152600a602052604090205490565b60008080600160a060020a038816301415610a6457fe5b600160a060020a0388161515610a7657fe5b604080516c010000000000000000000000003081028252601482018c9052600160a060020a038b1602603482015260488101899052905160029160688082019260209290919082900301816000865af1158015610ad7573d6000803e3d6000fd5b5050506040513d6020811015610aec57600080fd5b5051604080517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c8101839052815190819003603c018120600080835260208381018086529290925260ff8b1683850152606083018a905260808301899052925193955060019360a0808401949293601f19830193908390039091019190865af1158015610b81573d6000803e3d6000fd5b505060408051601f190151600160a060020a0381166000908152600660205291909120549092508811159050610bb357fe5b600160a060020a0381166000908152600a60205260409020546001018914610bd757fe5b600160a060020a0381166000908152600a6020908152604080832085845260010190915290205460ff1615610c0857fe5b600160a060020a038116600090815260066020526040902054610c31908863ffffffff610e2a16565b600160a060020a0380831660009081526006602052604080822093909355908a1681522054610c66908863ffffffff610e1416565b600160a060020a03808a16600081815260066020908152604080832095909555928516808252600a8452848220805460019081018255888452908101855291859020805460ff191690921790915583518b8152935191939092600080516020610ed883398151915292918290030190a350600198975050505050505050565b600854600160a060020a03163314610cfc57600080fd5b600854604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600960009054906101000a9004600160a060020a0316600160a060020a0316633197cbb66040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610dd157600080fd5b505af1158015610de5573d6000803e3d6000fd5b505050506040513d6020811015610dfb57600080fd5b50514211610e0557fe5b6005805460ff19166001179055565b600082820183811015610e2357fe5b9392505050565b600082821115610e3657fe5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610e7d57805160ff1916838001178555610eaa565b82800160010185558215610eaa579182015b82811115610eaa578251825591602001919060010190610e8f565b50610eb6929150610eba565b5090565b610ed491905b80821115610eb65760008155600101610ec0565b905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820b65cce30a38b708f3efd296cda7d803023b3448cdd659fc933f81dcbe1b2dd900029"
}