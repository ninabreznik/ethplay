{
  "address": "0xcf8f5be10f10226a9f6f97aec150a79f0fdf2b97",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-03\n*/\n\npragma solidity 0.4.24;\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\n// input  /root/code/solidity/xixoio-contracts/flat/TokenSale.sol\n// flattened :  Monday, 03-Dec-18 10:34:17 UTC\ninterface ITokenPool {\n    function balanceOf(uint128 id) public view returns (uint256);\n    function allocate(uint128 id, uint256 value) public;\n    function withdraw(uint128 id, address to, uint256 value) public;\n    function complete() public;\n}\n\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract Pausable is Ownable {\n\n    bool public paused = false;\n\n    event Pause();\n    event Unpause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused, \"Has to be unpaused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused, \"Has to be paused\");\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract OperatorRole {\n    using Roles for Roles.Role;\n\n    event OperatorAdded(address indexed account);\n    event OperatorRemoved(address indexed account);\n\n    Roles.Role private operators;\n\n    modifier onlyOperator() {\n        require(isOperator(msg.sender), \"Can be called only by contract operator\");\n        _;\n    }\n\n    function isOperator(address account) public view returns (bool) {\n        return operators.has(account);\n    }\n\n    function _addOperator(address account) internal {\n        operators.add(account);\n        emit OperatorAdded(account);\n    }\n\n    function _removeOperator(address account) internal {\n        operators.remove(account);\n        emit OperatorRemoved(account);\n    }\n}\n\ncontract ERC20Detailed is IERC20 {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n\n  constructor(string name, string symbol, uint8 decimals) public {\n    _name = name;\n    _symbol = symbol;\n    _decimals = decimals;\n  }\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns(string) {\n    return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns(string) {\n    return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n}\n\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\ncontract PausableToken is ERC20, Pausable {\n\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\ncontract IPCOToken is PausableToken, ERC20Detailed {\n    string public termsUrl = \"http://xixoio.com/terms\";\n    uint256 public hardCap;\n\n    /**\n     * Token constructor, newly created token is paused\n     * @dev decimals are hardcoded to 18\n     */\n    constructor(string _name, string _symbol, uint256 _hardCap) ERC20Detailed(_name, _symbol, 18) public {\n        require(_hardCap > 0, \"Hard cap can't be zero.\");\n        require(bytes(_name).length > 0, \"Name must be defined.\");\n        require(bytes(_symbol).length > 0, \"Symbol must be defined.\");\n        hardCap = _hardCap;\n        pause();\n    }\n\n    /**\n     * Minting function\n     * @dev doesn't allow minting of more tokens than hard cap\n     */\n    function mint(address to, uint256 value) public onlyOwner returns (bool) {\n        require(totalSupply().add(value) <= hardCap, \"Mint of this amount would exceed the hard cap.\");\n        _mint(to, value);\n        return true;\n    }\n}\n\n\ncontract TokenSale is Ownable, OperatorRole {\n    using SafeMath for uint256;\n\n    bool public finished = false;\n    uint256 public dailyLimit = 100000 ether;\n    mapping(uint256 => uint256) public dailyThroughput;\n\n    IPCOToken public token;\n    ITokenPool public pool;\n\n    event TransactionId(uint128 indexed id);\n\n    /**\n     * Constructor\n     * @dev contract depends on IPCO Token and Token Pool\n     */\n    constructor(address tokenAddress, address poolAddress) public {\n        addOperator(msg.sender);\n        token = IPCOToken(tokenAddress);\n        pool = ITokenPool(poolAddress);\n    }\n\n    /**\n     * @return Today's throughput of token, tracking both minted tokens and withdraws\n     */\n    function throughputToday() public view returns (uint256) {\n        return dailyThroughput[currentDay()];\n    }\n\n    //\n    // Limited functions for operators\n    //\n\n    function mint(address to, uint256 value, uint128 txId) public onlyOperator amountInLimit(value) {\n        _mint(to, value, txId);\n    }\n\n    function mintToPool(uint128 account, uint256 value, uint128 txId) public onlyOperator amountInLimit(value) {\n        _mintToPool(account, value, txId);\n    }\n\n    function withdraw(uint128 account, address to, uint256 value, uint128 txId) public onlyOperator amountInLimit(value) {\n        _withdraw(account, to, value, txId);\n    }\n\n    function batchMint(address[] receivers, uint256[] values, uint128[] txIds) public onlyOperator amountsInLimit(values) {\n        require(receivers.length > 0, \"Batch can't be empty\");\n        require(receivers.length == values.length && receivers.length == txIds.length, \"Invalid batch\");\n        for (uint i; i < receivers.length; i++) {\n            _mint(receivers[i], values[i], txIds[i]);\n        }\n    }\n\n    function batchMintToPool(uint128[] accounts, uint256[] values, uint128[] txIds) public onlyOperator amountsInLimit(values) {\n        require(accounts.length > 0, \"Batch can't be empty\");\n        require(accounts.length == values.length && accounts.length == txIds.length, \"Invalid batch\");\n        for (uint i; i < accounts.length; i++) {\n            _mintToPool(accounts[i], values[i], txIds[i]);\n        }\n    }\n\n    function batchWithdraw(uint128[] accounts, address[] receivers, uint256[] values, uint128[] txIds) public onlyOperator amountsInLimit(values) {\n        require(accounts.length > 0, \"Batch can't be empty.\");\n        require(accounts.length == values.length && accounts.length == receivers.length && accounts.length == txIds.length, \"Invalid batch\");\n        for (uint i; i < accounts.length; i++) {\n            _withdraw(accounts[i], receivers[i], values[i], txIds[i]);\n        }\n    }\n\n    //\n    // Unrestricted functions for the owner\n    //\n\n    function unrestrictedMint(address to, uint256 value, uint128 txId) public onlyOwner {\n        _mint(to, value, txId);\n    }\n\n    function unrestrictedMintToPool(uint128 account, uint256 value, uint128 txId) public onlyOwner {\n        _mintToPool(account, value, txId);\n    }\n\n    function unrestrictedWithdraw(uint128 account, address to, uint256 value, uint128 txId) public onlyOwner {\n        _withdraw(account, to, value, txId);\n    }\n\n    function addOperator(address operator) public onlyOwner {\n        _addOperator(operator);\n    }\n\n    function removeOperator(address operator) public onlyOwner {\n        _removeOperator(operator);\n    }\n\n    function replaceOperator(address operator, address newOperator) public onlyOwner {\n        _removeOperator(operator);\n        _addOperator(newOperator);\n    }\n\n    function setDailyLimit(uint256 newDailyLimit) public onlyOwner {\n        dailyLimit = newDailyLimit;\n    }\n\n    /**\n     * Concludes the sale - unpauses the token and renounces its ownership, effectively stopping minting indefinitely.\n     * @dev theoretically sale can be run with an unpaused token\n     */\n    function finish() public onlyOwner {\n        finished = true;\n        if (token.paused()) token.unpause();\n        pool.complete();\n        token.renounceOwnership();\n    }\n\n    //\n    // Internal functions\n    //\n\n    function _mint(address to, uint256 value, uint128 txId) internal {\n        token.mint(to, value);\n        emit TransactionId(txId);\n    }\n\n    function _mintToPool(uint128 account, uint256 value, uint128 txId) internal {\n        token.mint(address(pool), value);\n        pool.allocate(account, value);\n        emit TransactionId(txId);\n    }\n\n    function _withdraw(uint128 account, address to, uint256 value, uint128 txId) internal {\n        pool.withdraw(account, to, value);\n        emit TransactionId(txId);\n    }\n\n    function _checkLimit(uint256 value) internal {\n        uint256 newValue = throughputToday().add(value);\n        require(newValue <= dailyLimit, \"Amount to be minted exceeds day limit.\");\n        dailyThroughput[currentDay()] = newValue;\n    }\n\n    //\n    // Modifiers\n    //\n\n    modifier amountInLimit(uint256 value) {\n        _checkLimit(value);\n        _;\n    }\n\n    modifier amountsInLimit(uint256[] values) {\n        uint256 sum = 0;\n        for (uint i; i < values.length; i++) {\n            sum = sum.add(values[i]);\n        }\n        _checkLimit(sum);\n        _;\n    }\n\n    //\n    // Private helpers\n    //\n\n    function currentDay() private view returns (uint256) {\n        // solium-disable-next-line security/no-block-members, zeppelin/no-arithmetic-operations\n        return now / 1 days;\n    }\n}",
  "bytecode": "60806040526002805460ff1916905569152d02c7e14af68000006003553480156200002957600080fd5b50604051604080620019dc833981016040819052815160209092015160008054600160a060020a03191633178082559192600160a060020a0392909216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620000a033640100000000620000d2810204565b60058054600160a060020a03938416600160a060020a03199182161790915560068054929093169116179055620001fe565b620000e564010000000062000108810204565b1515620000f157600080fd5b620001058164010000000062000119810204565b50565b600054600160a060020a0316331490565b62000134600182640100000000620016c86200016b82021704565b604051600160a060020a038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b600160a060020a03811615156200018157600080fd5b620001968282640100000000620001c6810204565b15620001a157600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a0382161515620001de57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6117ce806200020e6000396000f30060806040526004361061012f5763ffffffff60e060020a60003504166316f0115b81146101345780631a0f0bf114610165578063443d896714610192578063499d1081146102925780634acf4a27146102c25780634cccb7ba146102fa57806357c857871461033257806367eeba0c146103f95780636d70f7ae14610420578063715018a6146104555780637c7ce7df1461046a5780638499a0c3146104955780638da5cb5b146104ad5780638f32d59b146104c25780639870d7fe146104d75780639baa504e146104f8578063ac8a584a14610528578063b20d30a914610549578063b37a5de714610561578063b7a5543814610576578063bef4876b1461059d578063c1eb3534146105b2578063d56b288914610679578063f2fde38b1461068e578063fc0c546a146106af575b600080fd5b34801561014057600080fd5b506101496106c4565b60408051600160a060020a039092168252519081900360200190f35b34801561017157600080fd5b506101906001608060020a0360043581169060243590604435166106d3565b005b34801561019e57600080fd5b506040805160206004803580820135838102808601850190965280855261019095369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506106f69650505050505050565b34801561029e57600080fd5b50610190600160a060020a03600435166024356001608060020a03604435166108f6565b3480156102ce57600080fd5b506101906001608060020a03600435811690600160a060020a0360243516906044359060643516610972565b34801561030657600080fd5b506101906001608060020a03600435811690600160a060020a03602435169060443590606435166109f0565b34801561033e57600080fd5b506040805160206004803580820135838102808601850190965280855261019095369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610a0f9650505050505050565b34801561040557600080fd5b5061040e610bd2565b60408051918252519081900360200190f35b34801561042c57600080fd5b50610441600160a060020a0360043516610bd8565b604080519115158252519081900360200190f35b34801561046157600080fd5b50610190610bf1565b34801561047657600080fd5b506101906001608060020a036004358116906024359060443516610c5b565b3480156104a157600080fd5b5061040e600435610cd1565b3480156104b957600080fd5b50610149610ce3565b3480156104ce57600080fd5b50610441610cf2565b3480156104e357600080fd5b50610190600160a060020a0360043516610d03565b34801561050457600080fd5b50610190600160a060020a03600435166024356001608060020a0360443516610d22565b34801561053457600080fd5b50610190600160a060020a0360043516610d40565b34801561055557600080fd5b50610190600435610d5c565b34801561056d57600080fd5b5061040e610d74565b34801561058257600080fd5b50610190600160a060020a0360043581169060243516610d96565b3480156105a957600080fd5b50610441610dbf565b3480156105be57600080fd5b506040805160206004803580820135838102808601850190965280855261019095369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610dc89650505050505050565b34801561068557600080fd5b50610190610f82565b34801561069a57600080fd5b50610190600160a060020a0360043516611171565b3480156106bb57600080fd5b5061014961118d565b600654600160a060020a031681565b6106db610cf2565b15156106e657600080fd5b6106f183838361119c565b505050565b600061070133610bd8565b1515610759576040805160e560020a62461bcd02815260206004820152602760248201526000805160206117838339815191526044820152600080516020611763833981519152606482015290519081900360840190fd5b826000805b82518110156107995761078f838281518110151561077857fe5b60209081029091010151839063ffffffff61130016565b915060010161075e565b6107a282611319565b87516000106107fb576040805160e560020a62461bcd02815260206004820152601560248201527f42617463682063616e277420626520656d7074792e0000000000000000000000604482015290519081900360640190fd5b8551885114801561080d575086518851145b801561081a575084518851145b1515610870576040805160e560020a62461bcd02815260206004820152600d60248201527f496e76616c696420626174636800000000000000000000000000000000000000604482015290519081900360640190fd5b87518410156108ec576108e1888581518110151561088a57fe5b9060200190602002015188868151811015156108a257fe5b9060200190602002015188878151811015156108ba57fe5b9060200190602002015188888151811015156108d257fe5b906020019060200201516113d8565b600190930192610870565b5050505050505050565b6108ff33610bd8565b1515610957576040805160e560020a62461bcd02815260206004820152602760248201526000805160206117838339815191526044820152600080516020611763833981519152606482015290519081900360840190fd5b8161096181611319565b61096c8484846114a7565b50505050565b61097b33610bd8565b15156109d3576040805160e560020a62461bcd02815260206004820152602760248201526000805160206117838339815191526044820152600080516020611763833981519152606482015290519081900360840190fd5b816109dd81611319565b6109e9858585856113d8565b5050505050565b6109f8610cf2565b1515610a0357600080fd5b61096c848484846113d8565b6000610a1a33610bd8565b1515610a72576040805160e560020a62461bcd02815260206004820152602760248201526000805160206117838339815191526044820152600080516020611763833981519152606482015290519081900360840190fd5b826000805b8251811015610a9b57610a91838281518110151561077857fe5b9150600101610a77565b610aa482611319565b8651600010610afd576040805160e560020a62461bcd02815260206004820152601460248201527f42617463682063616e277420626520656d707479000000000000000000000000604482015290519081900360640190fd5b85518751148015610b0f575084518751145b1515610b65576040805160e560020a62461bcd02815260206004820152600d60248201527f496e76616c696420626174636800000000000000000000000000000000000000604482015290519081900360640190fd5b8651841015610bc957610bbe8785815181101515610b7f57fe5b906020019060200201518786815181101515610b9757fe5b906020019060200201518787815181101515610baf57fe5b906020019060200201516114a7565b600190930192610b65565b50505050505050565b60035481565b6000610beb60018363ffffffff61157b16565b92915050565b610bf9610cf2565b1515610c0457600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b610c6433610bd8565b1515610cbc576040805160e560020a62461bcd02815260206004820152602760248201526000805160206117838339815191526044820152600080516020611763833981519152606482015290519081900360840190fd5b81610cc681611319565b61096c84848461119c565b60046020526000908152604090205481565b600054600160a060020a031690565b600054600160a060020a0316331490565b610d0b610cf2565b1515610d1657600080fd5b610d1f816115b2565b50565b610d2a610cf2565b1515610d3557600080fd5b6106f18383836114a7565b610d48610cf2565b1515610d5357600080fd5b610d1f816115fa565b610d64610cf2565b1515610d6f57600080fd5b600355565b600060046000610d82611642565b815260200190815260200160002054905090565b610d9e610cf2565b1515610da957600080fd5b610db2826115fa565b610dbb816115b2565b5050565b60025460ff1681565b6000610dd333610bd8565b1515610e2b576040805160e560020a62461bcd02815260206004820152602760248201526000805160206117838339815191526044820152600080516020611763833981519152606482015290519081900360840190fd5b826000805b8251811015610e5457610e4a838281518110151561077857fe5b9150600101610e30565b610e5d82611319565b8651600010610eb6576040805160e560020a62461bcd02815260206004820152601460248201527f42617463682063616e277420626520656d707479000000000000000000000000604482015290519081900360640190fd5b85518751148015610ec8575084518751145b1515610f1e576040805160e560020a62461bcd02815260206004820152600d60248201527f496e76616c696420626174636800000000000000000000000000000000000000604482015290519081900360640190fd5b8651841015610bc957610f778785815181101515610f3857fe5b906020019060200201518786815181101515610f5057fe5b906020019060200201518787815181101515610f6857fe5b9060200190602002015161119c565b600190930192610f1e565b610f8a610cf2565b1515610f9557600080fd5b6002805460ff19166001179055600554604080517f5c975abb0000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691635c975abb916004808201926020929091908290030181600087803b15801561100257600080fd5b505af1158015611016573d6000803e3d6000fd5b505050506040513d602081101561102c57600080fd5b50511561109f57600560009054906101000a9004600160a060020a0316600160a060020a0316633f4ba83a6040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561108657600080fd5b505af115801561109a573d6000803e3d6000fd5b505050505b600660009054906101000a9004600160a060020a0316600160a060020a031663522e11776040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156110f257600080fd5b505af1158015611106573d6000803e3d6000fd5b50505050600560009054906101000a9004600160a060020a0316600160a060020a031663715018a66040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561115d57600080fd5b505af115801561096c573d6000803e3d6000fd5b611179610cf2565b151561118457600080fd5b610d1f8161164b565b600554600160a060020a031681565b600554600654604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015260248101869052905191909216916340c10f199160448083019260209291908290030181600087803b15801561120e57600080fd5b505af1158015611222573d6000803e3d6000fd5b505050506040513d602081101561123857600080fd5b5050600654604080517f1226cd980000000000000000000000000000000000000000000000000000000081526001608060020a0386166004820152602481018590529051600160a060020a0390921691631226cd989160448082019260009290919082900301818387803b1580156112af57600080fd5b505af11580156112c3573d6000803e3d6000fd5b50506040516001608060020a03841692507f89392ee8653e038821cbd96861e31624cf5e4610848411c5c131601222252e949150600090a2505050565b60008282018381101561131257600080fd5b9392505050565b600061133382611327610d74565b9063ffffffff61130016565b6003549091508111156113b6576040805160e560020a62461bcd02815260206004820152602660248201527f416d6f756e7420746f206265206d696e7465642065786365656473206461792060448201527f6c696d69742e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b80600460006113c3611642565b81526020810191909152604001600020555050565b600654604080517f95997c510000000000000000000000000000000000000000000000000000000081526001608060020a0387166004820152600160a060020a03868116602483015260448201869052915191909216916395997c5191606480830192600092919082900301818387803b15801561145557600080fd5b505af1158015611469573d6000803e3d6000fd5b50506040516001608060020a03841692507f89392ee8653e038821cbd96861e31624cf5e4610848411c5c131601222252e949150600090a250505050565b600554604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201869052915191909216916340c10f199160448083019260209291908290030181600087803b15801561151657600080fd5b505af115801561152a573d6000803e3d6000fd5b505050506040513d602081101561154057600080fd5b50506040516001608060020a038216907f89392ee8653e038821cbd96861e31624cf5e4610848411c5c131601222252e9490600090a2505050565b6000600160a060020a038216151561159257600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6115c360018263ffffffff6116c816565b604051600160a060020a038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b61160b60018263ffffffff61171616565b604051600160a060020a038216907f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d90600090a250565b62015180420490565b600160a060020a038116151561166057600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03811615156116dd57600080fd5b6116e7828261157b565b156116f157600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a038116151561172b57600080fd5b611735828261157b565b151561174057600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055560070657261746f720000000000000000000000000000000000000000000000000043616e2062652063616c6c6564206f6e6c7920627920636f6e7472616374206fa165627a7a723058203994cacf99900aef7841fe6254b1c71b408faf74fa73a8a062f175468afaf2d30029000000000000000000000000fb9393345710c5a9fe7c3a856a5d9a5c725f669f000000000000000000000000cc9028ff5fafcd8de09f4b96b82fce98cf3a590e",
  "constructorArguments": "000000000000000000000000fb9393345710c5a9fe7c3a856a5d9a5c725f669f000000000000000000000000cc9028ff5fafcd8de09f4b96b82fce98cf3a590e"
}