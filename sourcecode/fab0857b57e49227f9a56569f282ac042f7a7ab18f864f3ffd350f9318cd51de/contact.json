{
  "address": "0x190646e10b85fbcd631c23c8cd175e25df92c338",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthBattle",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-05\n*/\n\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract EthBattle is Ownable {\n    using SafeMath for uint256;\n\n    uint256 constant TOKEN_USE_BONUS = 15; //%, adds weight of win on top of the market price\n    uint256 constant REFERRAL_REWARD = 2 ether; // GTA, 10*19\n    uint256 constant MIN_PLAY_AMOUNT = 50 finney; //wei, equal 0.05 ETH\n\n    uint256 public roundIndex = 0;\n    mapping(uint256 => address) public rounds;\n\n    address[] private currentRewardingAddresses;\n\n    PlaySeedInterface private playSeedGenerator;\n    GTAInterface public token;\n    AMUStoreInterface public store;\n\n    mapping(address => address) public referralBacklog; //backlog of players and their referrals\n\n    mapping(address => uint256) public tokens; //map of deposited tokens\n\n    event RoundCreated(address createdAddress, uint256 index);\n    event Deposit(address user, uint amount, uint balance);\n    event Withdraw(address user, uint amount, uint balance);\n\n    /**\n    * @dev Default fallback function, just deposits funds to the pot\n    */\n    function () public payable {\n        getLastRound().getDevWallet().transfer(msg.value);\n    }\n\n    /**\n    * @dev The EthBattle constructor\n    * @param _playSeedAddress address of the play seed generator\n    * @param _tokenAddress GTA address\n    * @param _storeAddress store contract address\n    */\n    constructor (address _playSeedAddress, address _tokenAddress, address _storeAddress) public {\n        playSeedGenerator = PlaySeedInterface(_playSeedAddress);\n        token = GTAInterface(_tokenAddress);\n        store = AMUStoreInterface(_storeAddress);\n    }\n\n    /**\n    * @dev Try (must be allowed by the seed generator itself) to claim ownership of the seed generator\n    */\n    function claimSeedOwnership() onlyOwner public {\n        playSeedGenerator.claimOwnership();\n    }\n\n    /**\n    * @dev Inject the new round contract, and sets the round with a new index\n    * NOTE! Injected round must have had transferred ownership to this EthBattle already\n    * @param _roundAddress address of the new round to use\n    */\n    function startRound(address _roundAddress) onlyOwner public {\n        RoundInterface round = RoundInterface(_roundAddress);\n\n        round.claimOwnership();\n\n        roundIndex++;\n        rounds[roundIndex] = round;\n        emit RoundCreated(round, roundIndex);\n    }\n\n\n    /**\n    * @dev Interrupts the round to enable participants to claim funds back\n    */\n    function interruptLastRound() onlyOwner public {\n        getLastRound().enableRefunds();\n    }\n\n    /**\n    * @dev End last round so no new plays is possible, but ongoing plays are fine to win\n    */\n    function finishLastRound() onlyOwner public {\n        getLastRound().coolDown();\n    }\n\n    function getLastRound() public view returns (RoundInterface){\n        return RoundInterface(rounds[roundIndex]);\n    }\n\n    function getLastRoundAddress() external view returns (address){\n        return rounds[roundIndex];\n    }\n\n    /**\n    * @dev Player starts a new play providing\n    * @param _referral (Optional) referral address is any\n    * @param _gtaBet (Optional) additional bet in GTA\n    */\n    function play(address _referral, uint256 _gtaBet) public payable {\n        address player = msg.sender;\n        uint256 weiAmount = msg.value;\n\n        require(player != address(0), \"Player's address is missing\");\n        require(weiAmount >= MIN_PLAY_AMOUNT, \"The bet is too low\");\n        require(_gtaBet <= balanceOf(player), \"Player's got not enough GTA\");\n\n        if (_referral != address(0) && referralBacklog[player] == address(0)) {\n            //new referral for this player\n            referralBacklog[player] = _referral;\n            //reward the referral. Tokens remains in this contract\n            //but become available for withdrawal by _referral\n            transferInternally(owner, _referral, REFERRAL_REWARD);\n        }\n\n        playSeedGenerator.newPlaySeed(player);\n\n        uint256 _bet = aggregateBet(weiAmount, _gtaBet);\n\n        if (_gtaBet > 0) {\n            //player's using GTA\n            transferInternally(player, owner, _gtaBet);\n        }\n\n        if (referralBacklog[player] != address(0)) {\n            //ongoing round might not know about the _referral\n            //delegate the knowledge of the referral to the ongoing round\n            getLastRound().setReferral(player, referralBacklog[player]);\n        }\n        getLastRound().playRound.value(msg.value)(player, _bet);\n    }\n\n    /**\n    * @dev Player claims a win\n    * @param _seed secret seed\n    */\n    function win(bytes32 _seed) public {\n        address player = msg.sender;\n\n        require(player != address(0), \"Winner's address is missing\");\n        require(playSeedGenerator.findSeed(player) == _seed, \"Wrong seed!\");\n        playSeedGenerator.cleanSeedUp(player);\n\n        getLastRound().win(player);\n    }\n\n    function findSeedAuthorized(address player) onlyOwner public view returns (bytes32){\n        return playSeedGenerator.findSeed(player);\n    }\n\n    function aggregateBet(uint256 _bet, uint256 _gtaBet) internal view returns (uint256) {\n        //get market price of the GTA, multiply by bet, and apply a bonus on it.\n        //since both 'price' and 'bet' are in 'wei', we need to drop 10*18 decimals at the end\n        uint256 _gtaValueWei = store.getTokenBuyPrice().mul(_gtaBet).div(1 ether).mul(100 + TOKEN_USE_BONUS).div(100);\n\n        //sum up with ETH bet\n        uint256 _resultBet = _bet.add(_gtaValueWei);\n\n        return _resultBet;\n    }\n\n    /**\n    * @dev Calculates the prize amount for this player by now\n    * Note: the result is not the final one and a subject to change once more plays/wins occur\n    * @return The prize in wei\n    */\n    function prizeByNow() public view returns (uint256) {\n        return getLastRound().currentPrize(msg.sender);\n    }\n\n    /**\n    * @dev Calculates the prediction on the prize amount for this player and this bet\n    * Note: the result is not the final one and a subject to change once more plays/wins occur\n    * @param _bet hypothetical bet in wei\n    * @param _gtaBet hypothetical bet in GTA\n    * @return The prediction in wei\n    */\n    function prizeProjection(uint256 _bet, uint256 _gtaBet) public view returns (uint256) {\n        return getLastRound().projectedPrizeForPlayer(msg.sender, aggregateBet(_bet, _gtaBet));\n    }\n\n\n    /**\n    * @dev Deposit GTA to the EthBattle contract so it can be spent (used) immediately\n    * Note: this call must follow the approve() call on the token itself\n    * @param _amount amount to deposit\n    */\n    function depositGTA(uint256 _amount) public {\n        require(token.transferFrom(msg.sender, this, _amount), \"Insufficient funds\");\n        tokens[msg.sender] = tokens[msg.sender].add(_amount);\n        emit Deposit(msg.sender, _amount, tokens[msg.sender]);\n    }\n\n    /**\n    * @dev Withdraw GTA from this contract to the own (caller) address\n    * @param _amount amount to withdraw\n    */\n    function withdrawGTA(uint256 _amount) public {\n        require(tokens[msg.sender] >= _amount, \"Amount exceeds the available balance\");\n        tokens[msg.sender] = tokens[msg.sender].sub(_amount);\n        require(token.transfer(msg.sender, _amount), \"Amount exceeds the available balance\");\n        emit Withdraw(msg.sender, _amount, tokens[msg.sender]);\n    }\n\n    /**\n    * @dev Internal transfer of the token.\n    * Funds remain in this contract but become available for withdrawal\n    */\n    function transferInternally(address _from, address _to, uint256 _amount) internal {\n        require(tokens[_from] >= _amount, \"Too much to transfer\");\n        tokens[_from] = tokens[_from].sub(_amount);\n        tokens[_to] = tokens[_to].add(_amount);\n    }\n\n    function balanceOf(address _user) public view returns (uint256) {\n        return tokens[_user];\n    }\n\n    function setPlaySeed(address _playSeedAddress) onlyOwner public {\n        playSeedGenerator = PlaySeedInterface(_playSeedAddress);\n    }\n\n    function setStore(address _storeAddress) onlyOwner public {\n        store = AMUStoreInterface(_storeAddress);\n    }\n\n    function getTokenBuyPrice() public view returns (uint256) {\n        return store.getTokenBuyPrice();\n    }\n\n    function getTokenSellPrice() public view returns (uint256) {\n        return store.getTokenSellPrice();\n    }\n\n    /**\n    * @dev Recover the history of referrals in case of the contract migration.\n    */\n    function setReferralsMap(address[] _players, address[] _referrals) onlyOwner public {\n        require(_players.length == _referrals.length, \"Size of players must be equal to the size of referrals\");\n        for (uint i = 0; i < _players.length; ++i) {\n            referralBacklog[_players[i]] = _referrals[i];\n        }\n    }\n\n}\n\n/**\n * @title PlaySeed contract interface\n */\ninterface PlaySeedInterface {\n\n    function newPlaySeed(address _player) external;\n\n    function findSeed(address _player) external view returns (bytes32);\n\n    function cleanSeedUp(address _player) external;\n\n    function claimOwnership() external;\n\n}\n\n/**\n * @title GTA contract interface\n */\ninterface GTAInterface {\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n}\n\n/**\n * @title EthBattleRound contract interface\n */\ninterface RoundInterface {\n\n    function claimOwnership() external;\n\n    function setReferral(address _player, address _referral) external;\n\n    function playRound(address _player, uint256 _bet) external payable;\n\n    function enableRefunds() external;\n\n    function coolDown() external;\n\n    function currentPrize(address _player) external view returns (uint256);\n\n    function projectedPrizeForPlayer(address _player, uint256 _bet) external view returns (uint256);\n\n    function win(address _player) external;\n\n    function getDevWallet() external view returns (address);\n\n}\n\n/**\n * @title Ammu-Nation contract interface\n */\ninterface AMUStoreInterface {\n\n    function getTokenBuyPrice() external view returns (uint256);\n\n    function getTokenSellPrice() external view returns (uint256);\n\n}",
  "bytecode": "6080604052600060015534801561001557600080fd5b506040516060806119938339810160409081528151602083015191909201516000805433600160a060020a0319918216178255600480548216600160a060020a0396871617905560058054821694861694909417909355600680549093169390911692909217905561190690819061008d90396000f3006080604052600436106101505763ffffffff60e060020a600035041663037051eb81146101fa578063067ade9f1461021d578063087cbd40146102325780630cdbf3dd146102535780631aa19567146102e15780634231a2c3146102f6578063648036ae146103275780636b8c261e1461034e5780636ed5f8801461036357806370a082311461037b578063715018a61461039c5780637c8c8e17146103b157806388550b6a146103d25780638c65c81f146103e75780638da5cb5b146103ff57806393b155af14610414578063975057e71461042c5780639781085014610441578063a445333614610462578063abcafdf81461047a578063af58eda814610495578063c9b3e736146104b6578063d9ba8ea4146104cb578063e4860339146104e0578063ee86eccc146102f6578063f0e10c0d14610501578063f2fde38b14610518578063fc0c546a14610539575b61015861054e565b600160a060020a031663453dd97f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561019557600080fd5b505af11580156101a9573d6000803e3d6000fd5b505050506040513d60208110156101bf57600080fd5b5051604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156101f7573d6000803e3d6000fd5b50005b34801561020657600080fd5b5061021b600160a060020a036004351661056c565b005b34801561022957600080fd5b5061021b61064e565b34801561023e57600080fd5b5061021b600160a060020a03600435166106db565b34801561025f57600080fd5b506040805160206004803580820135838102808601850190965280855261021b95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506107149650505050505050565b3480156102ed57600080fd5b5061021b61082b565b34801561030257600080fd5b5061030b61054e565b60408051600160a060020a039092168252519081900360200190f35b34801561033357600080fd5b5061033c610887565b60408051918252519081900360200190f35b34801561035a57600080fd5b5061033c61088d565b34801561036f57600080fd5b5061021b600435610922565b34801561038757600080fd5b5061033c600160a060020a0360043516610b44565b3480156103a857600080fd5b5061021b610b5f565b3480156103bd57600080fd5b5061030b600160a060020a0360043516610bbe565b3480156103de57600080fd5b5061033c610bd9565b3480156103f357600080fd5b5061030b600435610c38565b34801561040b57600080fd5b5061030b610c53565b34801561042057600080fd5b5061021b600435610c62565b34801561043857600080fd5b5061030b610ea9565b34801561044d57600080fd5b5061021b600160a060020a0360043516610eb8565b34801561046e57600080fd5b5061021b600435610ef1565b34801561048657600080fd5b5061033c60043560243561105c565b3480156104a157600080fd5b5061033c600160a060020a0360043516611106565b3480156104c257600080fd5b5061033c6111bc565b3480156104d757600080fd5b5061021b61121b565b3480156104ec57600080fd5b5061033c600160a060020a0360043516611277565b61021b600160a060020a0360043516602435611289565b34801561052457600080fd5b5061021b600160a060020a036004351661160c565b34801561054557600080fd5b5061030b61162f565b600154600090815260026020526040902054600160a060020a031690565b60008054600160a060020a0316331461058457600080fd5b81905080600160a060020a0316634e71e0c86040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156105c557600080fd5b505af11580156105d9573d6000803e3d6000fd5b50506001805481018082556000908152600260209081526040918290208054600160a060020a031916600160a060020a038816908117909155925482519384529083015280517feab460c3c93e539eae1f40ce5dda73260499a0d82b7bd14c01dabb8147a756df945091829003019150a15050565b600054600160a060020a0316331461066557600080fd5b60048054604080517f4e71e0c80000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692634e71e0c892828201926000929082900301818387803b1580156106c157600080fd5b505af11580156106d5573d6000803e3d6000fd5b50505050565b600054600160a060020a031633146106f257600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055565b60008054600160a060020a0316331461072c57600080fd5b81518351146107ab576040805160e560020a62461bcd02815260206004820152603660248201527f53697a65206f6620706c6179657273206d75737420626520657175616c20746f60448201527f207468652073697a65206f6620726566657272616c7300000000000000000000606482015290519081900360840190fd5b5060005b82518110156108265781818151811015156107c657fe5b906020019060200201516007600085848151811015156107e257fe5b602090810291909101810151600160a060020a039081168352908201929092526040016000208054600160a060020a031916929091169190911790556001016107af565b505050565b600054600160a060020a0316331461084257600080fd5b61084a61054e565b600160a060020a0316638c52dc416040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156106c157600080fd5b60015481565b600061089761054e565b600160a060020a031663e75bd44a336040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156108f157600080fd5b505af1158015610905573d6000803e3d6000fd5b505050506040513d602081101561091b57600080fd5b5051905090565b336000908152600860205260409020548111156109ae576040805160e560020a62461bcd028152602060048201526024808201527f416d6f756e7420657863656564732074686520617661696c61626c652062616c60448201527f616e636500000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600860205260409020546109ce908263ffffffff61163e16565b3360008181526008602090815260408083209490945560055484517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810194909452602484018690529351600160a060020a039094169363a9059cbb93604480820194918390030190829087803b158015610a4c57600080fd5b505af1158015610a60573d6000803e3d6000fd5b505050506040513d6020811015610a7657600080fd5b50511515610af3576040805160e560020a62461bcd028152602060048201526024808201527f416d6f756e7420657863656564732074686520617661696c61626c652062616c60448201527f616e636500000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b3360008181526008602090815260409182902054825193845290830184905282820152517ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360600190a150565b600160a060020a031660009081526008602052604090205490565b600054600160a060020a03163314610b7657600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a260008054600160a060020a0319169055565b600760205260009081526040902054600160a060020a031681565b600654604080517f88550b6a0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916388550b6a91600480830192602092919082900301818787803b1580156108f157600080fd5b600260205260009081526040902054600160a060020a031681565b600054600160a060020a031681565b33801515610cba576040805160e560020a62461bcd02815260206004820152601b60248201527f57696e6e657227732061646472657373206973206d697373696e670000000000604482015290519081900360640190fd5b60048054604080517f04ef161b000000000000000000000000000000000000000000000000000000008152600160a060020a038581169482019490945290518593909216916304ef161b916024808201926020929091908290030181600087803b158015610d2757600080fd5b505af1158015610d3b573d6000803e3d6000fd5b505050506040513d6020811015610d5157600080fd5b505114610da8576040805160e560020a62461bcd02815260206004820152600b60248201527f57726f6e67207365656421000000000000000000000000000000000000000000604482015290519081900360640190fd5b60048054604080517fb5eeee6e000000000000000000000000000000000000000000000000000000008152600160a060020a03858116948201949094529051929091169163b5eeee6e9160248082019260009290919082900301818387803b158015610e1357600080fd5b505af1158015610e27573d6000803e3d6000fd5b50505050610e3361054e565b600160a060020a031663a34cc845826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b158015610e8d57600080fd5b505af1158015610ea1573d6000803e3d6000fd5b505050505050565b600654600160a060020a031681565b600054600160a060020a03163314610ecf57600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b600554604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b158015610f6457600080fd5b505af1158015610f78573d6000803e3d6000fd5b505050506040513d6020811015610f8e57600080fd5b50511515610fe6576040805160e560020a62461bcd02815260206004820152601260248201527f496e73756666696369656e742066756e64730000000000000000000000000000604482015290519081900360640190fd5b33600090815260086020526040902054611006908263ffffffff61165016565b33600081815260086020908152604091829020849055815192835282018490528181019290925290517f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360600190a150565b600061106661054e565b600160a060020a031663a4f154983361107f868661165d565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156110d157600080fd5b505af11580156110e5573d6000803e3d6000fd5b505050506040513d60208110156110fb57600080fd5b505190505b92915050565b60008054600160a060020a0316331461111e57600080fd5b60048054604080517f04ef161b000000000000000000000000000000000000000000000000000000008152600160a060020a0386811694820194909452905192909116916304ef161b916024808201926020929091908290030181600087803b15801561118a57600080fd5b505af115801561119e573d6000803e3d6000fd5b505050506040513d60208110156111b457600080fd5b505192915050565b600654604080517fc9b3e7360000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163c9b3e73691600480830192602092919082900301818787803b1580156108f157600080fd5b600054600160a060020a0316331461123257600080fd5b61123a61054e565b600160a060020a0316634d056f6d6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156106c157600080fd5b60086020526000908152604090205481565b333460008215156112e4576040805160e560020a62461bcd02815260206004820152601b60248201527f506c6179657227732061646472657373206973206d697373696e670000000000604482015290519081900360640190fd5b66b1a2bc2ec50000821015611343576040805160e560020a62461bcd02815260206004820152601260248201527f5468652062657420697320746f6f206c6f770000000000000000000000000000604482015290519081900360640190fd5b61134c83610b44565b8411156113a3576040805160e560020a62461bcd02815260206004820152601b60248201527f506c61796572277320676f74206e6f7420656e6f756768204754410000000000604482015290519081900360640190fd5b600160a060020a038516158015906113d35750600160a060020a0383811660009081526007602052604090205416155b1561141857600160a060020a0383811660009081526007602052604081208054600160a060020a03191688841617905554611418911686671bc16d674ec8000061173d565b60048054604080517ffa006d87000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169163fa006d879160248082019260009290919082900301818387803b15801561148357600080fd5b505af1158015611497573d6000803e3d6000fd5b505050506114a5828561165d565b905060008411156114c8576000546114c8908490600160a060020a03168661173d565b600160a060020a038381166000908152600760205260409020541615611582576114f061054e565b600160a060020a038481166000818152600760205260408082205481517f7543e3f0000000000000000000000000000000000000000000000000000000008152600481019490945284166024840152519390921692637543e3f09260448084019391929182900301818387803b15801561156957600080fd5b505af115801561157d573d6000803e3d6000fd5b505050505b61158a61054e565b600160a060020a0316632e09c32f3485846040518463ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a03168152602001828152602001925050506000604051808303818588803b1580156115ec57600080fd5b505af1158015611600573d6000803e3d6000fd5b50505050505050505050565b600054600160a060020a0316331461162357600080fd5b61162c8161182c565b50565b600554600160a060020a031681565b60008282111561164a57fe5b50900390565b8181018281101561110057fe5b6000806000611722606461170a600f606401611716670de0b6b3a764000061170a8a600660009054906101000a9004600160a060020a0316600160a060020a03166388550b6a6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156116d257600080fd5b505af11580156116e6573d6000803e3d6000fd5b505050506040513d60208110156116fc57600080fd5b50519063ffffffff61189c16565b9063ffffffff6118c516565b9063ffffffff61189c16565b9150611734858363ffffffff61165016565b95945050505050565b600160a060020a0383166000908152600860205260409020548111156117ad576040805160e560020a62461bcd02815260206004820152601460248201527f546f6f206d75636820746f207472616e73666572000000000000000000000000604482015290519081900360640190fd5b600160a060020a0383166000908152600860205260409020546117d6908263ffffffff61163e16565b600160a060020a03808516600090815260086020526040808220939093559084168152205461180b908263ffffffff61165016565b600160a060020a039092166000908152600860205260409020919091555050565b600160a060020a038116151561184157600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b60008215156118ad57506000611100565b508181028183828115156118bd57fe5b041461110057fe5b600081838115156118d257fe5b0493925050505600a165627a7a7230582098e6251c88452fbc987df86d747fe4de966e598c4864b94e0854e61e1582d66600290000000000000000000000005ddf6fc0bb34ef7785e162a52300bcf7ec67e6c9000000000000000000000000ef26c2766972cbac10575aa85c0ab0691b967d20000000000000000000000000b06590e0b9fe47ff9abad84919a3e40bd59b16d4",
  "constructorArguments": "0000000000000000000000005ddf6fc0bb34ef7785e162a52300bcf7ec67e6c9000000000000000000000000ef26c2766972cbac10575aa85c0ab0691b967d20000000000000000000000000b06590e0b9fe47ff9abad84919a3e40bd59b16d4"
}