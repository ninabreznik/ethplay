{
  "address": "0xa86ba6b6ef29e7fbe926486e98e441375bd13320",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SignableCompoundInterestERC20",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-22\n*/\n\npragma solidity ^0.5.0;\n\n/**\n  * @title DSMath\n  * @author MakerDAO\n  * @notice Safe math contracts from Maker.\n  */\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n/**\n  * @title Owned\n  * @author Gavin Wood?\n  * @notice Primitive owner properties, modifiers and methods for a single\n  *     to own a particular contract.\n  */\ncontract Owned {\n    address public owner = msg.sender;\n\n    modifier isOwner {\n        assert(msg.sender == owner); _;\n    }\n\n    function changeOwner(address account) external isOwner {\n        owner = account;\n    }\n}\n\n/**\n  * @title Pausable\n  * @author MakerDAO?\n  * @notice Primitive events, methods, properties for a contract which can be\n        paused by a single owner.\n  */\ncontract Pausable is Owned {\n    event Pause();\n    event Unpause();\n\n    bool public paused;\n\n    modifier pausable {\n        assert(!paused); _;\n    }\n\n    function pause() external isOwner {\n        paused = true;\n\n        emit Pause();\n    }\n\n    function unpause() external isOwner {\n        paused = false;\n\n        emit Unpause();\n    }\n}\n\n/**\n  * @title BurnerAccount\n  * @author UnityCoin Team\n  * @notice Primitive events, methods, properties for a contract which has a\n          special burner account that is Owned by a single account.\n  */\ncontract BurnerAccount is Owned {\n    address public burner;\n\n    modifier isOwnerOrBurner {\n        assert(msg.sender == burner || msg.sender == owner); _;\n    }\n\n    function changeBurner(address account) external isOwner {\n        burner = account;\n    }\n}\n\n/**\n  * @title IntervalBased\n  * @author UnityCoin Team\n  * @notice Primitive events, methods, properties for a contract which has a\n  *        interval system, that can be changed in-flight.\n  *\n  *        Here we create a system in which any valid unixtimestamp can reduce\n  *        down to a specific interval number, based on a start time, duration\n  *        and offset.\n  *\n  *        Interval Derivation\n  *        number = offset + ((timestamp - start time) / intervalDuration)\n  *\n  *        Note, when your changing the interval params in flight, we must\n  *        set the offset to the most current interval number, as to not\n  *        disrupt previously used interval numbers / mechanics\n  */\ncontract IntervalBased is DSMath {\n    // the start interval\n    uint256 public intervalStartTimestamp;\n\n    // interval duration (e.g. 1 days)\n    uint256 public intervalDuration;\n\n    // the max amount of intervals that can be processed for interest claim\n    uint256 public intervalMaximum;\n\n    // interval offset\n    uint256 public intervalOffset;\n\n    function changeDuration(uint256 duration) internal {\n      // protect againt unecessary change of offset and starttimestamp\n      if (duration == intervalDuration) { return; }\n\n      // offset all previous intervals\n      intervalOffset = intervalNumber(block.timestamp);\n\n      // set new duration\n      intervalDuration = duration;\n\n      // restart timestamp to current\n      intervalStartTimestamp = block.timestamp;\n    }\n\n    // get the interval number from start position\n    // every timestamp should have an interval past the start timestamp..\n    function intervalNumber(uint256 timestamp) public view returns(uint256 number) {\n        return add(intervalOffset, sub(timestamp, intervalStartTimestamp) / intervalDuration);\n    }\n}\n\n/**\n  * @title ERC20Events\n  * @author EIP20 Authors\n  * @notice Primitive events for the ERC20 event specification.\n  */\ncontract ERC20Events {\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n}\n\n/**\n  * @title ERC20\n  * @author EIP/ERC20 Authors\n  * @author BokkyPooBah / Bok Consulting Pty Ltd 2018.\n  * @notice The ERC20 standard contract interface.\n  */\ncontract ERC20 is ERC20Events {\n    function totalSupply() external view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint);\n    function allowance(address tokenOwner, address spender) external view returns (uint);\n\n    function approve(address spender, uint amount) public returns (bool);\n    function transfer(address to, uint amount) external returns (bool);\n    function transferFrom(\n        address from, address to, uint amount\n    ) public returns (bool);\n}\n\n/**\n  * @title ERC20Token\n  * @author BokkyPooBah / Bok Consulting Pty Ltd 2018.\n  * @author UnityCoin Team\n  * @author MakerDAO\n  * @notice An ERC20 Token implimentation based roughly off of MakerDAO's\n  *       version DSToken.\n  */\ncontract ERC20Token is DSMath, ERC20 {\n    // Standard EIP20 Name, Symbol, Decimals\n    string public symbol = \"USDC\";\n    string public name = \"UnityCoinTest\";\n    string public version = \"1.0.0\";\n    uint8 public decimals = 18;\n\n    // Balances for each account\n    mapping(address => uint256) balances;\n\n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) approvals;\n\n    // Standard EIP20: BalanceOf, Transfer, TransferFrom, Allow, Allowance methods..\n    // Get the token balance for account `tokenOwner`\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    // Transfer the balance from owner's account to another account\n    function transfer(address to, uint256 tokens) external returns (bool success) {\n        return transferFrom(msg.sender, to, tokens);\n    }\n\n    // Send `tokens` amount of tokens from address `from` to address `to`\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\n        if (from != msg.sender) {\n            approvals[from][msg.sender] = sub(approvals[from][msg.sender], tokens);\n        }\n\n        balances[from] = sub(balances[from], tokens);\n        balances[to] = add(balances[to], tokens);\n\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    // Allow `spender` to withdraw from your account, multiple times, up to the `tokens` amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address spender, uint256 tokens) public returns (bool success) {\n        approvals[msg.sender][spender] = tokens;\n\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining) {\n        return approvals[tokenOwner][spender];\n    }\n}\n\n/**\n  * @title InterestRateBased\n  * @author UnityCoin Team\n  * @notice A compount interest module which allows for the recording of balance\n  *       events and interest rate changes.\n  *\n  *       Compound Interest Aglo:\n  *       compound interest owed = (principle * ( 1 + Rate / 100 ) * N) – principle;\n  *\n  *       This module uses the interval system IntervalBased.\n  *       The module is time based and thus we accept that miners can manipulate\n  *       time.\n  *\n  *       Rate's are specified (as per DSMath imp.) in 10 pow 27 always.\n  *       Rates are recorded in an array `interestRates` and thus are indexed.\n  *\n  *       Everytime a balance is recorded, we also make sure to set an updatable\n  *       pointer to the most recent InterestRate index `intervalToInterestIndex`.\n  *\n  *       This module provides a way to calculate compound interest owed,\n  *       given the interest rates and balance records are recoded properly.\n  */\ncontract InterestRateBased is IntervalBased {\n    // Interest Rate Record\n    struct InterestRate {\n        uint256 interval;\n        uint256 rate; // >= 10 ** 27\n    }\n\n    // Interval to interest rate\n    InterestRate[] public interestRates;\n\n    // uint256(interval) => uint256(interest index)\n    mapping(uint256 => uint256) public intervalToInterestIndex;\n\n    // Balance Records\n    struct BalanceRecord {\n        uint256 interval;\n        uint256 intervalOffset;\n        uint256 balance;\n    }\n\n    // address(token holder) => uint256(interval) => BalanceChange\n    mapping(address => BalanceRecord[]) public balanceRecords;\n\n    // address(tokenOwner) => uint256(balance index)\n    mapping(address => uint256) public lastClaimedBalanceIndex;\n\n    // include balance of method, is ERC20 compliant for tokens\n    function balanceOf(address tokenOwner) public view returns (uint);\n\n    // VIEW: get current interest rate\n    function latestInterestRate() external view returns (uint256 rateAsRay, uint256 asOfInterval) {\n        uint256 latestRateIndex = interestRates.length > 0 ? sub(interestRates.length, 1) : 0;\n\n        return (interestRates[latestRateIndex].rate, interestRates[latestRateIndex].interval);\n    }\n\n    // getters\n    function numInterestRates() public view returns (uint256) {\n      return interestRates.length;\n    }\n\n    // getters\n    function numBalanceRecords(address tokenOwner) public view returns (uint256) {\n      return balanceRecords[tokenOwner].length;\n    }\n\n    // interest owed\n    function interestOwed(address tokenOwner)\n        public\n        view\n        returns (uint256 amountOwed, uint256 balanceIndex, uint256 interval) {\n\n        // check for no balance records..\n        if (balanceRecords[tokenOwner].length == 0) {\n          return (0, 0, 0);\n        }\n\n        // balance index\n        amountOwed = 0;\n        balanceIndex = lastClaimedBalanceIndex[tokenOwner];\n        interval = balanceRecords[tokenOwner][balanceIndex].intervalOffset;\n\n        // current principle and interest rate\n        uint256 principle = 0; // current principle value\n        uint256 interestRate = 0; // current interest rate\n\n        // interval markers and interval offset\n        uint256 nextBalanceInterval = interval; // set to starting interval for setup\n        uint256 nextInterestInterval = interval; // set to starting interval for setup\n\n        // enforce interval maximum, last claim offset difference with max\n        assert(sub(intervalNumber(block.timestamp), intervalOffset) < intervalMaximum);\n\n        // this for loop should only hit either interest or balance change records, and in theory process only\n        // what is required to calculate compound interest with general computaitonal efficiency\n        // yes, maybe in the future adding a MIN here would be good..\n        while (interval < intervalNumber(block.timestamp)) {\n\n            // set interest rates for given interval\n            if (interval == nextInterestInterval) {\n                uint256 interestIndex = intervalToInterestIndex[interval];\n\n                // set rate with current interval\n                interestRate = interestRates[interestIndex].rate;\n\n                // check if look ahead next index is greater than rates length, if so, go to max interval, otherwise next up\n                nextInterestInterval = add(interestIndex, 1) >= interestRates.length\n                    ? intervalNumber(block.timestamp)\n                    : interestRates[add(interestIndex, 1)].interval;\n            }\n\n            // setup principle with whats on record at given interval\n            if (interval == nextBalanceInterval) {\n                // get current principle at current balance index, add with amount previously owed in interest\n                principle = add(balanceRecords[tokenOwner][balanceIndex].balance, amountOwed);\n\n                // increase balance index ahead now that we have the balance\n                balanceIndex = add(balanceIndex, 1);\n\n                // check if the new blance index exceeds, set next interval to limit or next interval on record\n                nextBalanceInterval = balanceIndex >= balanceRecords[tokenOwner].length\n                    ? intervalNumber(block.timestamp)\n                    : balanceRecords[tokenOwner][balanceIndex].interval;\n            }\n\n            // apply compound interest to principle, subtract original principle, add to amount owed\n            amountOwed = add(amountOwed, sub(wmul(principle,\n                rpow(interestRate,\n                    sub(min(nextBalanceInterval, nextInterestInterval), interval)) / 10 ** 9),\n                        principle));\n\n            // set interval to next nearest major balance or interest (or both) change\n            interval = min(nextBalanceInterval, nextInterestInterval);\n        }\n\n        // return amount owed, adjusted balance index, and the last interval set / used\n        return (amountOwed, (balanceIndex > 0 ? sub(balanceIndex, 1) : 0), interval);\n    }\n\n    // record users balance (max 2 writes additional per person per transfer)\n    function recordBalance(address tokenOwner) internal {\n        // todays current interval id\n        uint256 todaysInterval = intervalNumber(block.timestamp);\n\n        // last balance index\n        uint256 latestBalanceIndex = balanceRecords[tokenOwner].length > 0\n            ? sub(balanceRecords[tokenOwner].length, 1) : 0;\n\n        // always update the current record (i.e. todays interval)\n        // record balance record (if latest record is for today, add to it, otherwise add a record)\n        if (balanceRecords[tokenOwner].length > 0\n            && balanceRecords[tokenOwner][latestBalanceIndex].interval == todaysInterval) {\n            balanceRecords[tokenOwner][latestBalanceIndex].balance = balanceOf(tokenOwner);\n        } else {\n            balanceRecords[tokenOwner].push(BalanceRecord({\n                interval: todaysInterval,\n                intervalOffset: todaysInterval,\n                balance: balanceOf(tokenOwner)\n            }));\n        }\n\n        // if no interval to interest mapping exists, map it (should always be at least a length of one)\n        if (intervalToInterestIndex[todaysInterval] <= 0) {\n            intervalToInterestIndex[todaysInterval] = sub(interestRates.length, 1); }\n    }\n\n    // record a new intrest rate change\n    function recordInterestRate(uint256 rate) internal {\n        // min number precision for rate.. might need to add a max here.\n        assert(rate >= RAY);\n\n        // todays current interval id\n        uint256 todaysInterval = intervalNumber(block.timestamp);\n\n        // last balance index\n        uint256 latestRateIndex = interestRates.length > 0\n            ? sub(interestRates.length, 1) : 0;\n\n        // always update todays interval\n        // record balance record (if latest record is for today, add to it, otherwise add a record)\n        if (interestRates.length > 0\n            && interestRates[latestRateIndex].interval == todaysInterval) {\n            interestRates[latestRateIndex].rate = rate;\n        } else {\n            interestRates.push(InterestRate({\n                interval: todaysInterval,\n                rate: rate\n            }));\n        }\n\n        // map the interval to interest index always\n        intervalToInterestIndex[todaysInterval] = sub(interestRates.length, 1);\n    }\n}\n\n/**\n  * @title PausableCompoundInterestERC20\n  * @author UnityCoin Team\n  * @notice An implimentation of a mintable, pausable, burnable, compound interest based\n  *       ERC20 token.\n  *\n  *       The token has a few *special* properties.\n  *         - a special burner account (which can burn tokens in its account)\n  *         - a special supply tracking pool account / mechanism\n  *         - a special interest pool account which interest payments are drawn from\n  *         - you cannot transfer from / to any pool (supply or interest)\n  *         - you cannot claim interest on the interest pool account\n  *         - by all accounts the interest and supply accounts dont really exist\n  *           and are used for internal accounting purposes.\n  *\n  *       Minting / burning / pausing style is based roughly on DSToken from maker.\n  *\n  *       Whenever we burn, mint, change rates we update the supply pool,\n  *       which intern updates the totalSupply return.\n  *\n  *       The TotalSupply of this token should be as follows:\n  *       total supply = supply issued + total interest accued up to current interval\n  *\n  *       The special `burner` account can only burn tokens sent to it's account.\n  *       You can think of it as a HOT burn account.\n  *       The provider can ultimatly burn any account.\n  */\ncontract PausableCompoundInterestERC20 is Pausable, BurnerAccount, InterestRateBased, ERC20Token {\n    // Non EIP20 Standard Constants, Variables and Events\n    event Mint(address indexed to, uint256 tokens);\n    event Burn(uint256 tokens);\n    event InterestRateChange(uint256 intervalDuration, uint256 intervalExpiry, uint256 indexed interestRateIndex);\n    event InterestClaimed(address indexed tokenOwner, uint256 amountOwed);\n\n    // the interest pool account address, that wont be included in total supply\n    // hex generated with linux system entropy + dice + keys (private key thrown out)\n    address public constant interestPool = address(0xd365131390302b58A61E265744288097Bd53532e);\n\n    // this is the based supply pool address, which is used to calculate total supply with interest accured\n    // hex generated with linux system entropy + dice + keys (private key thrown out)\n    address public constant supplyPool = address(0x85c05851ef3175aeFBC74EcA16F174E22b5acF28);\n\n    // is not a pool account\n    modifier isNotPool(address tokenOwner) {\n        assert(tokenOwner != supplyPool && tokenOwner != interestPool); _;\n    }\n\n    // total supply with amount owed\n    function totalSupply() external view returns (uint256 supplyWithAccruedInterest) {\n        (uint256 amountOwed,,) = interestOwed(supplyPool);\n\n        return add(balanceOf(supplyPool), amountOwed);\n    }\n\n    // Dai/Maker style minting\n    function mint(address to, uint256 amount) public isOwner pausable isNotPool(to) {\n        // any time the supply pool changes, we need to update it's interest owed\n        claimInterestOwed(supplyPool);\n\n        balances[supplyPool] = add(balances[supplyPool], amount);\n        balances[to] = add(balances[to], amount);\n\n        recordBalance(supplyPool);\n        recordBalance(to);\n\n        emit Mint(to, amount);\n    }\n\n    // the burner can only burn tokens in the burn account\n    function burn(address account) external isOwnerOrBurner pausable isNotPool(account) {\n        // target burn address\n        address target = msg.sender == burner ? burner : account;\n\n        // any time the supply pool changes, we need to update it's interest owed\n        claimInterestOwed(supplyPool);\n\n        emit Burn(balances[target]);\n\n        balances[supplyPool] = sub(balances[supplyPool], balances[target]);\n        balances[target] = 0;\n\n        // technially the burner account can claim interest, not that it should matter\n        recordBalance(supplyPool);\n        recordBalance(target);\n    }\n\n    // change interest rates\n    function changeInterestRate(\n        uint256 duration,\n        uint256 maximum,\n        uint256 interestRate,\n        uint256 increasePool,\n        uint256 decreasePool) public isOwner pausable {\n        // claim up supply pool amount\n        if (interestRates.length > 0) {\n          claimInterestOwed(supplyPool); }\n\n        // set duration and maximum\n        changeDuration(duration);\n\n        // set interval maximum\n        intervalMaximum = maximum;\n\n        // record interest rate..\n        recordInterestRate(interestRate);\n\n        // set interest pool, no balance needs to be recorded here as this is the interest pool\n        balances[interestPool] = sub(add(balances[interestPool], increasePool),\n          decreasePool);\n    }\n\n    // hard token set for interest pool\n    function setInterestPool(uint256 tokens) external isOwner pausable {\n        balances[interestPool] = tokens;\n        // no need to record balance as this is the interest pool account..\n    }\n\n    // claim interest owed\n    function claimInterestOwed(address tokenOwner) public pausable {\n        // cant claim interest on the interest pool\n        assert(tokenOwner != interestPool);\n\n        // calculate interest balances and new record indexes\n        (uint256 amountOwed, uint256 balanceIndex, uint256 interval) = interestOwed(tokenOwner);\n\n        // set last balance index used (it's always one ahead so subtract one)\n        lastClaimedBalanceIndex[tokenOwner] = balanceIndex;\n\n        // set interval offset\n        if (balanceRecords[tokenOwner].length > 0) {\n          balanceRecords[tokenOwner][balanceIndex].intervalOffset = interval;\n        }\n\n        // increase the balance of the account, reduce interest pool\n        if (tokenOwner != supplyPool) {\n          balances[interestPool] = sub(balances[interestPool], amountOwed);\n        }\n\n        // set new token owner balance, record balance event\n        balances[tokenOwner] = add(balances[tokenOwner], amountOwed);\n        recordBalance(tokenOwner);\n\n        // fire the interest claimed event\n        emit InterestClaimed(tokenOwner, amountOwed);\n    }\n\n    function transferFrom(address from, address to, uint256 tokens) public pausable isNotPool(from) isNotPool(to) returns (bool success) {\n        super.transferFrom(from, to, tokens);\n\n        recordBalance(from);\n        recordBalance(to);\n\n        return true;\n    }\n\n    // Allow `spender` to withdraw from your account, multiple times, up to the `tokens` amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address spender, uint256 tokens) public pausable isNotPool(spender) returns (bool success) {\n        return super.approve(spender, tokens);\n    }\n}\n\n/**\n  * @title SignableCompoundInterestERC20\n  * @author UnityCoin Team\n  * @notice A meta-transaction enabled version of the PausableCompoundInterestERC20\n  *       this allows you to do a signed transfer or claim using EIP712 signature format.\n  *\n  *       We also impliment a constructor here.\n  *\n  *       A sender can essentially build EIP712 Claim to specific funds, whereby\n  *       someone else (the `feeRecipient`) can recieve a pre-specified fee for\n  *       sending the transaction on-behalf of the sender.\n  *\n  *       At anytime the sender can invalide the transfer / claim release hash of\n  *       a claim / transfer they have signed.\n  *\n  *       Written claims also have nonce's to make them unique, and expiries\n  *       to remove the change of holding attacks.\n  */\ncontract SignableCompoundInterestERC20 is PausableCompoundInterestERC20 {\n    // EIP712 Hashes and Seporators\n    bytes32 constant public EIP712_DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\");\n    bytes32 constant public SIGNEDTRANSFER_TYPEHASH = keccak256(\"SignedTransfer(address to,uint256 tokens,address feeRecipient,uint256 fee,uint256 expiry,bytes32 nonce)\");\n    bytes32 constant public SIGNEDINTERESTCLAIM_TYPEHASH = keccak256(\"SignedInterestClaim(address feeRecipient,uint256 fee,uint256 expiry,bytes32 nonce)\");\n    bytes32 public DOMAIN_SEPARATOR = keccak256(abi.encode(\n        EIP712_DOMAIN_TYPEHASH, // EIP712\n        keccak256(\"UnityCoin\"), // app name\n        keccak256(\"1\"), // app version\n        uint256(1), // chain id\n        address(this), // verifying contract\n        bytes32(0x111857f4a3edcb7462eabc03bfe733db1e3f6cdc2b7971ee739626c98268ae12) // salt\n    ));\n\n    // address(tokenOwner signer) => bytes32(releaseHash) => bool(was release hash used)\n    mapping(address => mapping(bytes32 => bool)) public releaseHashes;\n\n    event SignedTransfer(address indexed from, address indexed to, uint256 tokens, bytes32 releaseHash);\n    event SignedInterestClaim(address indexed from, bytes32 releaseHash);\n\n    // constructor for the entire token\n    constructor(\n        address tokenOwner, // main token controller\n        address tokenBurner, // burner account\n\n        uint256 initialSupply, // total supply amount\n\n        uint256 interestIntervalStartTimestamp, // start time\n        uint256 interestIntervalDurationSeconds, // interval duration\n        uint256 interestIntervalMaximum, // interest expiry\n        uint256 interestPoolSize, // total interest pool size\n        uint256 interestRate) public {\n        // setup the burner account\n        burner = tokenBurner;\n\n        // setup the interest mechnics\n        intervalStartTimestamp = interestIntervalStartTimestamp;\n\n        // set duration\n        intervalDuration = interestIntervalDurationSeconds;\n\n        // set interest rates\n        changeInterestRate(interestIntervalDurationSeconds,\n            interestIntervalMaximum,\n            interestRate, interestPoolSize, 0);\n\n        // mint to the token owner the initial supply\n        mint(tokenOwner, initialSupply);\n\n        // set the provider\n        owner = tokenOwner;\n    }\n\n    // allow someone else to pay the gas fee for this token, by taking a fee within the token itself.\n    function signedTransfer(address to,\n        uint256 tokens,\n        address feeRecipient,\n        uint256 fee,\n        uint256 expiry,\n        bytes32 nonce,\n        uint8 v, bytes32 r, bytes32 s) external returns (bool success) {\n        bytes32 releaseHash = keccak256(abi.encodePacked(\n           \"\\x19\\x01\",\n           DOMAIN_SEPARATOR,\n           keccak256(abi.encode(SIGNEDTRANSFER_TYPEHASH, to, tokens, feeRecipient, fee, expiry, nonce))\n        ));\n        address from = ecrecover(releaseHash, v, r, s);\n\n        // check expiry, release hash and balances\n        assert(block.timestamp < expiry);\n        assert(releaseHashes[from][releaseHash] == false);\n\n        // waste out release hash\n        releaseHashes[from][releaseHash] = true;\n\n        // allow funds to be transfered.\n        approvals[from][msg.sender] = add(tokens, fee);\n\n        // transfer funds\n        transferFrom(from, to, tokens);\n        transferFrom(from, feeRecipient, fee);\n\n        emit SignedTransfer(from, to, tokens, releaseHash);\n\n        return true;\n    }\n\n    // allow someone else to fire the claim interest owed method, and get paid a fee in the token to do so\n    function signedInterestClaim(\n        address feeRecipient,\n        uint256 fee,\n        uint256 expiry,\n        bytes32 nonce,\n        uint8 v, bytes32 r, bytes32 s) external returns (bool success) {\n        bytes32 releaseHash = keccak256(abi.encodePacked(\n           \"\\x19\\x01\",\n           DOMAIN_SEPARATOR,\n           keccak256(abi.encode(SIGNEDINTERESTCLAIM_TYPEHASH, feeRecipient, fee, expiry, nonce))\n        ));\n        address from = ecrecover(releaseHash, v, r, s);\n\n        // check expiry, release hash and balances\n        assert(block.timestamp < expiry);\n        assert(releaseHashes[from][releaseHash] == false);\n\n        // waste out release hash\n        releaseHashes[from][releaseHash] = true;\n\n        // claim interest owed\n        claimInterestOwed(from);\n\n        // allow funds to be transfered.\n        approvals[from][msg.sender] = fee;\n\n        // transfer funds\n        transferFrom(from, feeRecipient, fee);\n\n        emit SignedInterestClaim(from, releaseHash);\n\n        return true;\n    }\n\n    // this allows a token user to invalidate approved release hashes at anytime..\n    function invalidateHash(bytes32 releaseHash) external pausable {\n      releaseHashes[msg.sender][releaseHash] = true;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000ccd0241db33694fc6007226c43021be4b22dc7790000000000000000000000009dce8d0d56a73c39f53edfedfd8301e9a1eddd6a0000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000000000000000000000000000000000005ce482f000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000000447000000000000000000000000000000000000000000108b2a2c280290940000000000000000000000000000000000000000000000033b39b9ce982fe6f5121c00"
}