{
  "address": "0xfb1e5f5e984c28ad7e228cdaa1f8a0919bb6a09b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GESToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-27\n*/\n\npragma solidity ^0.4.15;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20Basic {\n\n  using SafeMath for uint256;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is BurnableToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n}\n\n/*\n * @title GESToken\n */\ncontract GESToken is MintableToken, PausableToken {\n  string public constant name = \"Galaxy eSolutions\";\n  string public constant symbol = \"GES\";\n  uint8 public constant decimals = 18;\n}\n\n/**\n * @title Crowdsale\n * @dev Modified contract for managing a token crowdsale.\n */\n\ncontract GESTokenCrowdSale is Ownable {\n  using SafeMath for uint256;\n\n  /* true for finalised crowdsale */\n  bool public isFinalised;\n\n  /* The token object */\n  MintableToken public token;\n\n  /* Start and end timestamps where investments are allowed (both inclusive) */\n  uint256 public mainSaleStartTime;\n  uint256 public mainSaleEndTime;\n\n  /* Address where funds are transferref after collection */\n  address public wallet;\n\n  /* Address where company funds will be collected */\n  address public tokenWallet;\n\n  /* How many token units a buyer gets per ether */\n  uint256 public rate = 10000;\n\n  /* Amount of raised money in wei */\n  /* PreSale + Whitelist =  1273.779099 ETH*/\n  uint256 public weiRaised = 1273779099000000000000 ;\n\n  /* 20,000 - 1,273.779099 = 18,726 is what will be raised*/\n\n  /* Minimum amount of Wei allowed per transaction = 0.1 Ethers */\n  uint256 public saleMinimumWei = 100000000000000000; \n  \n  /* Hard Cap amount of Wei allowed 20,000 ETH */\n  uint256 public hardCap = 20000000000000000000000; \n  \n  /* Hard Cap amount oftokens to be sold 300000000 */\n  /* Amount raise in preSale removing the extra company 11% as we are allocating here */\n  /* 300000000 - 12235717 - 33000000 - 6178952 = 248585331 */\n  /* Tokens to be sold in the ICO 248585330 */\n  uint256 public tokensToSell = 248585331 * 10 ** 18; \n\n  /* Always default to 20 can go upto 50 base don amount being sent */\n   struct AmountBonus {\n    uint256 amount;\n    uint percent;\n  }\n  AmountBonus[] public amountBonuses;\n  /**\n   * event for token purchase logging\n   * event for finalizing the crowdsale\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n  event FinalisedCrowdsale(uint256 totalSupply);\n\n  function GESTokenCrowdSale(uint256 _mainSaleStartTime, uint256 _mainSaleEndTime, address _wallet, address _tokenWallet) public {\n\n    /* Can't start main sale in the past */\n    require(_mainSaleStartTime >= now);\n    /* Can't close main sale earlier than start time */\n    require(_mainSaleEndTime >= _mainSaleStartTime);\n\n    /* Confirming wallet addresses as valid */\n    require(_wallet != 0x0);\n    require(_tokenWallet != 0x0);\n\n    /* Create GES token */\n    token = createTokenContract();\n    \n    amountBonuses.push(AmountBonus(    50000000000000000000, 20));\n    amountBonuses.push(AmountBonus(   100000000000000000000, 25));\n    amountBonuses.push(AmountBonus(   250000000000000000000, 30));\n    amountBonuses.push(AmountBonus(   500000000000000000000, 35));\n    amountBonuses.push(AmountBonus(  1000000000000000000000, 40));\n    amountBonuses.push(AmountBonus(  2500000000000000000000, 45));\n    amountBonuses.push(AmountBonus(200000000000000000000000, 50));\n\n\n    mainSaleStartTime = _mainSaleStartTime;\n    mainSaleEndTime = _mainSaleEndTime;\n\n    wallet = _wallet ;\n    tokenWallet = _tokenWallet;\n\n    isFinalised = false;\n\n    /* Mint tokens for previous backers [Removed the previous 11% the company raised in presale]*/\n    /* 101964.308375680000000000 * 120 = 12235717 -> rounding to highest integer */\n    /* Fixed tokens for the whitelist money raised = 6178952 */\n    /* Fixed tokens for the management and bounty = 33000000 */\n    /* Total to allot: 6178952 + 12235717 + 33000000 = 51414669 */\n    token.mint(tokenWallet, 51414669 * 10 ** 18);\n  }\n\n  /* Creates the token to be sold */\n  function createTokenContract() internal returns (MintableToken) {\n    return new GESToken();\n  }\n\n  /* Fallback function can be used to buy tokens */\n  function () public payable {\n    buyTokens(msg.sender);\n  }\n\n  /* Low level token purchase function */\n  function buyTokens(address beneficiary) public payable {\n    require(!isFinalised);\n    require(beneficiary != 0x0);\n    require(msg.value != 0);\n    require(now >= mainSaleStartTime && now <= mainSaleEndTime);\n    uint256 newRaise = weiRaised.add(msg.value);\n    require(msg.value >= saleMinimumWei && newRaise <= hardCap);\n\n    /* Add bonus to tokens depends on the value */\n    uint256 bonusedTokens = applyBonus(msg.value);\n    \n    /* Check if we have available tokens to sell */\n    require(bonusedTokens < tokensToSell);\n\n    /* Update state on the blockchain */\n    weiRaised = newRaise;\n    tokensToSell = tokensToSell.sub(bonusedTokens);\n    token.mint(beneficiary, bonusedTokens);\n    TokenPurchase(msg.sender, beneficiary, msg.value, bonusedTokens);\n  }\n\n  /* Finish Crowdsale,\n   */\n  function finaliseCrowdsale() external onlyOwner returns (bool) {\n    require(!isFinalised);\n    token.finishMinting();\n    forwardFunds();\n    FinalisedCrowdsale(token.totalSupply());\n    isFinalised = true;\n    return true;\n  }\n\n  /* Pause the token contract */\n  function pauseToken() external onlyOwner {\n    require(!isFinalised);\n    GESToken(token).pause();\n  }\n\n  /* Unpause the token contract */\n  function unpauseToken() external onlyOwner {\n    GESToken(token).unpause();\n  }\n\n  /* Transfer token's contract ownership to a new owner */\n  function transferTokenOwnership(address newOwner) external onlyOwner {\n    GESToken(token).transferOwnership(newOwner);\n  }\n\n  /* @return true if main sale event has ended */\n  function mainSaleHasEnded() external constant returns (bool) {\n    return now > mainSaleEndTime;\n  }\n\n  /* Send ether to the fund collection wallet */\n  function forwardFunds() internal {\n    wallet.transfer(this.balance);\n  }\n\n  /* Set new dates for main-sale (emergency case) */\n  function setMainSaleDates(uint256 _mainSaleStartTime, uint256 _mainSaleEndTime) public onlyOwner returns (bool) {\n    require(!isFinalised);\n    require(_mainSaleStartTime < _mainSaleEndTime);\n    mainSaleStartTime = _mainSaleStartTime;\n    mainSaleEndTime = _mainSaleEndTime;\n    return true;\n  }\n\n  /* Function to calculate bonus tokens based on the amount sent by the contributor */\n  function applyBonus(uint256 weiAmount) internal constant returns (uint256 bonusedTokens) {\n    /* Bonus tokens to be added */\n    uint256 tokensToAdd = 0;\n\n    /* Calculting the amont of tokens to be allocated based on rate and the money transferred */\n    uint256 tokens = weiAmount.mul(rate);\n    \n    for(uint8 i = 0; i < amountBonuses.length; i++){\n        if(weiAmount < amountBonuses[i].amount){\n           tokensToAdd = tokens.mul(amountBonuses[i].percent).div(100);\n            return tokens.add(tokensToAdd);\n        }\n    }\n    /* Default callback at 20%, just as a precaution */\n    return tokens.mul(120).div(100);\n  }\n\n  /*  \n  * Function to extract funds as required before finalizing\n  */\n  function fetchFunds() onlyOwner public {\n    wallet.transfer(this.balance);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526003805460a060020a61ffff02191690555b60038054600160a060020a03191633600160a060020a03161790555b5b610d9f806100426000396000f300606060405236156100f95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100fe57806306fdde0314610125578063095ea7b3146101b057806318160ddd146101e657806323b872dd1461020b578063313ce567146102475780633f4ba83a1461027057806340c10f191461028557806342966c68146102bb5780635c975abb146102d357806370a08231146102fa5780637d64bcb41461032b5780638456cb59146103525780638da5cb5b1461036757806395d89b4114610396578063a9059cbb14610421578063dd62ed3e14610457578063f2fde38b1461048e575b600080fd5b341561010957600080fd5b6101116104af565b604051901515815260200160405180910390f35b341561013057600080fd5b6101386104d0565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101755780820151818401525b60200161015c565b50505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101bb57600080fd5b610111600160a060020a0360043516602435610507565b604051901515815260200160405180910390f35b34156101f157600080fd5b6101f9610535565b60405190815260200160405180910390f35b341561021657600080fd5b610111600160a060020a036004358116906024351660443561053b565b604051901515815260200160405180910390f35b341561025257600080fd5b61025a61056b565b60405160ff909116815260200160405180910390f35b341561027b57600080fd5b610283610570565b005b341561029057600080fd5b610111600160a060020a03600435166024356105f3565b604051901515815260200160405180910390f35b34156102c657600080fd5b610283600435610714565b005b34156102de57600080fd5b6101116107de565b604051901515815260200160405180910390f35b341561030557600080fd5b6101f9600160a060020a03600435166107ee565b60405190815260200160405180910390f35b341561033657600080fd5b61011161080d565b604051901515815260200160405180910390f35b341561035d57600080fd5b610283610894565b005b341561037257600080fd5b61037a61091c565b604051600160a060020a03909116815260200160405180910390f35b34156103a157600080fd5b61013861092b565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101755780820151818401525b60200161015c565b50505050905090810190601f1680156101a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561042c57600080fd5b610111600160a060020a0360043516602435610962565b604051901515815260200160405180910390f35b341561046257600080fd5b6101f9600160a060020a0360043581169060243516610990565b60405190815260200160405180910390f35b341561049957600080fd5b610283600160a060020a03600435166109bd565b005b60035474010000000000000000000000000000000000000000900460ff1681565b60408051908101604052601181527f47616c6178792065536f6c7574696f6e73000000000000000000000000000000602082015281565b60035460009060a860020a900460ff161561052157600080fd5b61052b8383610a56565b90505b5b92915050565b60005481565b60035460009060a860020a900460ff161561055557600080fd5b610560848484610ac3565b90505b5b9392505050565b601281565b60035433600160a060020a0390811691161461058b57600080fd5b60035460a860020a900460ff1615156105a357600080fd5b6003805475ff000000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a15b5b5b565b60035460009033600160a060020a0390811691161461061157600080fd5b60035474010000000000000000000000000000000000000000900460ff161561063957600080fd5b60005461064c908363ffffffff610c4616565b6000908155600160a060020a038416815260026020526040902054610677908363ffffffff610c4616565b600160a060020a0384166000818152600260205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a282600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060015b5b5b92915050565b600080821161072257600080fd5b600160a060020a03331660009081526002602052604090205482111561074757600080fd5b5033600160a060020a03811660009081526002602052604090205461076c9083610c60565b600160a060020a03821660009081526002602052604081209190915554610799908363ffffffff610c6016565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25b5050565b60035460a860020a900460ff1681565b600160a060020a0381166000908152600260205260409020545b919050565b60035460009033600160a060020a0390811691161461082b57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b60035433600160a060020a039081169116146108af57600080fd5b60035460a860020a900460ff16156108c657600080fd5b6003805475ff000000000000000000000000000000000000000000191660a860020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a15b5b5b565b600354600160a060020a031681565b60408051908101604052600381527f4745530000000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a860020a900460ff161561097c57600080fd5b61052b8383610c77565b90505b5b92915050565b600160a060020a038083166000908152600160209081526040808320938516835292905220545b92915050565b60035433600160a060020a039081169116146109d857600080fd5b600160a060020a03811615156109ed57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600160a060020a03338116600081815260016020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b6000600160a060020a0383161515610ada57600080fd5b600160a060020a038416600090815260026020526040902054821115610aff57600080fd5b600160a060020a0380851660009081526001602090815260408083203390941683529290522054821115610b3257600080fd5b600160a060020a038416600090815260026020526040902054610b5b908363ffffffff610c6016565b600160a060020a038086166000908152600260205260408082209390935590851681522054610b90908363ffffffff610c4616565b600160a060020a03808516600090815260026020908152604080832094909455878316825260018152838220339093168252919091522054610bd8908363ffffffff610c6016565b600160a060020a03808616600081815260016020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b9392505050565b600082820183811015610c5557fe5b8091505b5092915050565b600082821115610c6c57fe5b508082035b92915050565b6000600160a060020a0383161515610c8e57600080fd5b600160a060020a033316600090815260026020526040902054821115610cb357600080fd5b600160a060020a033316600090815260026020526040902054610cdc908363ffffffff610c6016565b600160a060020a033381166000908152600260205260408082209390935590851681522054610d11908363ffffffff610c4616565b600160a060020a0380851660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b929150505600a165627a7a72305820a313368a31c274df817ce4e509b4e19149e0cb1f646ceb24b6dceca1e73080e00029"
}