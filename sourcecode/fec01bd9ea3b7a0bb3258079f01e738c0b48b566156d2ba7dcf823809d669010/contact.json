{
  "address": "0x85cf3efceca9ec3f313a5ab58398a8ab35a3a938",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AppCoinsCreditsBalance",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-28\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC20Interface {\n    function name() public view returns(bytes32);\n    function symbol() public view returns(bytes32);\n    function balanceOf (address _owner) public view returns(uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (uint);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n\n\ncontract AppCoins is ERC20Interface{\n    // Public variables of the token\n    address public owner;\n    bytes32 private token_name;\n    bytes32 private token_symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n\n    function AppCoins() public {\n        owner = msg.sender;\n        token_name = \"AppCoins\";\n        token_symbol = \"APPC\";\n        uint256 _totalSupply = 1000000;\n        totalSupply = _totalSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balances[owner] = totalSupply;                // Give the creator all initial tokens\n    }\n\n    function name() public view returns(bytes32) {\n        return token_name;\n    }\n\n    function symbol() public view returns(bytes32) {\n        return token_symbol;\n    }\n\n    function balanceOf (address _owner) public view returns(uint256 balance) {\n        return balances[_owner];\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal returns (bool) {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balances[_from] >= _value);\n        // Check for overflows\n        require(balances[_to] + _value > balances[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balances[_from] + balances[_to];\n        // Subtract from the sender\n        balances[_from] -= _value;\n        // Add the same to the recipient\n        balances[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balances[_from] + balances[_to] == previousBalances);\n    }\n\n\n    function transfer (address _to, uint256 _amount) public returns (bool success) {\n        if( balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) {\n\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            emit Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (uint) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return allowance[_from][msg.sender];\n    }\n\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n        balances[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balances[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\n\ninterface ErrorThrower {\n    event Error(string func, string message);\n}\n\n\ncontract Ownable is ErrorThrower {\n    address public owner;\n    \n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n\n    modifier onlyOwner(string _funcName) {\n        if(msg.sender != owner){\n            emit Error(_funcName,\"Operation can only be performed by contract owner\");\n            return;\n        }\n        _;\n    }\n\n\n    function renounceOwnership() public onlyOwner(\"renounceOwnership\") {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n\n    function transferOwnership(address _newOwner) public onlyOwner(\"transferOwnership\") {\n        _transferOwnership(_newOwner);\n    }\n\n\n    function _transferOwnership(address _newOwner) internal {\n        if(_newOwner == address(0)){\n            emit Error(\"transferOwnership\",\"New owner's address needs to be different than 0x0\");\n            return;\n        }\n\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n\n  function add(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = true;\n  }\n\n  function remove(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = false;\n  }\n\n\n  function check(Role storage _role, address _addr)\n    internal\n    view\n  {\n    require(has(_role, _addr));\n  }\n\n  function has(Role storage _role, address _addr)\n    internal\n    view\n    returns (bool)\n  {\n    return _role.bearer[_addr];\n  }\n}\n\n\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  function checkRole(address _operator, string _role)\n    public\n    view\n  {\n    roles[_role].check(_operator);\n  }\n\n  function hasRole(address _operator, string _role)\n    public\n    view\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n}\n\n\ncontract Whitelist is Ownable, RBAC {\n    string public constant ROLE_WHITELISTED = \"whitelist\";\n\n\n    modifier onlyIfWhitelisted(string _funcname, address _operator) {\n        if(!hasRole(_operator, ROLE_WHITELISTED)){\n            emit Error(_funcname, \"Operation can only be performed by Whitelisted Addresses\");\n            return;\n        }\n        _;\n    }\n\n\n    function addAddressToWhitelist(address _operator)\n        public\n        onlyOwner(\"addAddressToWhitelist\")\n    {\n        addRole(_operator, ROLE_WHITELISTED);\n    }\n\n\n    function whitelist(address _operator)\n        public\n        view\n        returns (bool)\n    {\n        return hasRole(_operator, ROLE_WHITELISTED);\n    }\n\n\n    function addAddressesToWhitelist(address[] _operators)\n        public\n        onlyOwner(\"addAddressesToWhitelist\")\n    {\n        for (uint256 i = 0; i < _operators.length; i++) {\n            addAddressToWhitelist(_operators[i]);\n        }\n    }\n\n\n    function removeAddressFromWhitelist(address _operator)\n        public\n        onlyOwner(\"removeAddressFromWhitelist\")\n    {\n        removeRole(_operator, ROLE_WHITELISTED);\n    }\n\n    function removeAddressesFromWhitelist(address[] _operators)\n        public\n        onlyOwner(\"removeAddressesFromWhitelist\")\n    {\n        for (uint256 i = 0; i < _operators.length; i++) {\n            removeAddressFromWhitelist(_operators[i]);\n        }\n    }\n\n}\n\ncontract AppCoinsCreditsBalance is Whitelist {\n\n    // AppCoins token\n    AppCoins private appc;\n\n    // balance proof\n    bytes private balanceProof;\n\n    // balance\n    uint private balance;\n\n    event BalanceProof(bytes _merkleTreeHash);\n    event Deposit(uint _amount);\n    event Withdraw(uint _amount);\n\n    constructor(\n        address _addrAppc\n    )\n    public\n    {\n        appc = AppCoins(_addrAppc);\n    }\n\n\n    function getBalance() public view returns(uint256) {\n        return balance;\n    }\n\n    function getBalanceProof() public view returns(bytes) {\n        return balanceProof;\n    }\n\n \n    function registerBalanceProof(bytes _merkleTreeHash)\n        internal{\n\n        balanceProof = _merkleTreeHash;\n\n        emit BalanceProof(_merkleTreeHash);\n    }\n\n    function depositFunds(uint _amount, bytes _merkleTreeHash)\n        public\n        onlyIfWhitelisted(\"depositFunds\", msg.sender){\n        require(appc.allowance(msg.sender, address(this)) >= _amount);\n        registerBalanceProof(_merkleTreeHash);\n        appc.transferFrom(msg.sender, address(this), _amount);\n        balance = balance + _amount;\n        emit Deposit(_amount);\n    }\n\n    function withdrawFunds(uint _amount, bytes _merkleTreeHash)\n        public\n        onlyIfWhitelisted(\"withdrawFunds\",msg.sender){\n        require(balance >= _amount);\n        registerBalanceProof(_merkleTreeHash);\n        appc.transfer(msg.sender, _amount);\n        balance = balance - _amount;\n        emit Withdraw(_amount);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806122be83398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506121fa806100c46000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630988ca8c146100e057806312065fe01461016957806318b919e914610194578063217fe6c61461022457806324953eaa146102c5578063286dd3f51461032b5780633a63689b1461036e578063715018a6146103e15780637b9417c8146103f85780638da5cb5b1461043b5780639214f5b2146104925780639b19251a14610522578063b8c4fd831461057d578063e2ec6ec3146105f0578063f2fde38b14610656575b600080fd5b3480156100ec57600080fd5b50610167600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610699565b005b34801561017557600080fd5b5061017e61071a565b6040518082815260200191505060405180910390f35b3480156101a057600080fd5b506101a9610724565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e95780820151818401526020810190506101ce565b50505050905090810190601f1680156102165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023057600080fd5b506102ab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061075d565b604051808215151515815260200191505060405180910390f35b3480156102d157600080fd5b50610329600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506107e4565b005b34801561033757600080fd5b5061036c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109b3565b005b34801561037a57600080fd5b506103df60048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610b83565b005b3480156103ed57600080fd5b506103f6610fc0565b005b34801561040457600080fd5b50610439600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111f5565b005b34801561044757600080fd5b506104506113c5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049e57600080fd5b506104a76113ea565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104e75780820151818401526020810190506104cc565b50505050905090810190601f1680156105145780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561052e57600080fd5b50610563600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061148c565b604051808215151515815260200191505060405180910390f35b34801561058957600080fd5b506105ee60048036038101908080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506114d4565b005b3480156105fc57600080fd5b50610654600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506117b4565b005b34801561066257600080fd5b50610697600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611983565b005b610716826001836040518082805190602001908083835b6020831015156106d557805182526020820191506020810190506020830392506106b0565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020611b1d90919063ffffffff16565b5050565b6000600454905090565b6040805190810160405280600981526020017f77686974656c697374000000000000000000000000000000000000000000000081525081565b60006107dc836001846040518082805190602001908083835b60208310151561079b5780518252602082019150602081019050602083039250610776565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020611b3690919063ffffffff16565b905092915050565b60006040805190810160405280601c81526020017f72656d6f766541646472657373657346726f6d57686974656c697374000000008152506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610972577fac283f5b35fa78f7f5e8923cb5db86b4c10c166580c43bb59f1d1d9ae108b70081604051808060200180602001838103835284818151815260200191508051906020019080838360005b838110156108d85780820151818401526020810190506108bd565b50505050905090810190601f1680156109055780820380516001836020036101000a031916815260200191505b50838103825260318152602001807f4f7065726174696f6e2063616e206f6e6c7920626520706572666f726d65642081526020017f627920636f6e7472616374206f776e6572000000000000000000000000000000815250604001935050505060405180910390a16109ae565b600091505b82518210156109ad576109a0838381518110151561099157fe5b906020019060200201516109b3565b8180600101925050610977565b5b505050565b6040805190810160405280601a81526020017f72656d6f76654164647265737346726f6d57686974656c6973740000000000008152506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b3f577fac283f5b35fa78f7f5e8923cb5db86b4c10c166580c43bb59f1d1d9ae108b70081604051808060200180602001838103835284818151815260200191508051906020019080838360005b83811015610aa5578082015181840152602081019050610a8a565b50505050905090810190601f168015610ad25780820380516001836020036101000a031916815260200191505b50838103825260318152602001807f4f7065726174696f6e2063616e206f6e6c7920626520706572666f726d65642081526020017f627920636f6e7472616374206f776e6572000000000000000000000000000000815250604001935050505060405180910390a1610b7f565b610b7e826040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250611b8f565b5b5050565b6040805190810160405280600c81526020017f6465706f73697446756e6473000000000000000000000000000000000000000081525033610bf9816040805190810160405280600981526020017f77686974656c697374000000000000000000000000000000000000000000000081525061075d565b1515610cff577fac283f5b35fa78f7f5e8923cb5db86b4c10c166580c43bb59f1d1d9ae108b70082604051808060200180602001838103835284818151815260200191508051906020019080838360005b83811015610c65578082015181840152602081019050610c4a565b50505050905090810190601f168015610c925780820380516001836020036101000a031916815260200191505b50838103825260388152602001807f4f7065726174696f6e2063616e206f6e6c7920626520706572666f726d65642081526020017f62792057686974656c6973746564204164647265737365730000000000000000815250604001935050505060405180910390a1610fba565b83600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015610df157600080fd5b505af1158015610e05573d6000803e3d6000fd5b505050506040513d6020811015610e1b57600080fd5b810190808051906020019092919050505010151515610e3957600080fd5b610e4283611cc3565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610f3b57600080fd5b505af1158015610f4f573d6000803e3d6000fd5b505050506040513d6020811015610f6557600080fd5b81019080805190602001909291905050505083600454016004819055507f4d6ce1e535dbade1c23defba91e23b8f791ce5edc0cc320257a2b364e4e38426846040518082815260200191505060405180910390a15b50505050565b6040805190810160405280601181526020017f72656e6f756e63654f776e6572736869700000000000000000000000000000008152506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561114c577fac283f5b35fa78f7f5e8923cb5db86b4c10c166580c43bb59f1d1d9ae108b70081604051808060200180602001838103835284818151815260200191508051906020019080838360005b838110156110b2578082015181840152602081019050611097565b50505050905090810190601f1680156110df5780820380516001836020036101000a031916815260200191505b50838103825260318152602001807f4f7065726174696f6e2063616e206f6e6c7920626520706572666f726d65642081526020017f627920636f6e7472616374206f776e6572000000000000000000000000000000815250604001935050505060405180910390a16111f2565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6040805190810160405280601581526020017f61646441646472657373546f57686974656c69737400000000000000000000008152506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611381577fac283f5b35fa78f7f5e8923cb5db86b4c10c166580c43bb59f1d1d9ae108b70081604051808060200180602001838103835284818151815260200191508051906020019080838360005b838110156112e75780820151818401526020810190506112cc565b50505050905090810190601f1680156113145780820380516001836020036101000a031916815260200191505b50838103825260318152602001807f4f7065726174696f6e2063616e206f6e6c7920626520706572666f726d65642081526020017f627920636f6e7472616374206f776e6572000000000000000000000000000000815250604001935050505060405180910390a16113c1565b6113c0826040805190810160405280600981526020017f77686974656c6973740000000000000000000000000000000000000000000000815250611d79565b5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114825780601f1061145757610100808354040283529160200191611482565b820191906000526020600020905b81548152906001019060200180831161146557829003601f168201915b5050505050905090565b60006114cd826040805190810160405280600981526020017f77686974656c697374000000000000000000000000000000000000000000000081525061075d565b9050919050565b6040805190810160405280600d81526020017f776974686472617746756e6473000000000000000000000000000000000000008152503361154a816040805190810160405280600981526020017f77686974656c697374000000000000000000000000000000000000000000000081525061075d565b1515611650577fac283f5b35fa78f7f5e8923cb5db86b4c10c166580c43bb59f1d1d9ae108b70082604051808060200180602001838103835284818151815260200191508051906020019080838360005b838110156115b657808201518184015260208101905061159b565b50505050905090810190601f1680156115e35780820380516001836020036101000a031916815260200191505b50838103825260388152602001807f4f7065726174696f6e2063616e206f6e6c7920626520706572666f726d65642081526020017f62792057686974656c6973746564204164647265737365730000000000000000815250604001935050505060405180910390a16117ae565b836004541015151561166157600080fd5b61166a83611cc3565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561172f57600080fd5b505af1158015611743573d6000803e3d6000fd5b505050506040513d602081101561175957600080fd5b81019080805190602001909291905050505083600454036004819055507f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d846040518082815260200191505060405180910390a15b50505050565b60006040805190810160405280601781526020017f616464416464726573736573546f57686974656c6973740000000000000000008152506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611942577fac283f5b35fa78f7f5e8923cb5db86b4c10c166580c43bb59f1d1d9ae108b70081604051808060200180602001838103835284818151815260200191508051906020019080838360005b838110156118a857808201518184015260208101905061188d565b50505050905090810190601f1680156118d55780820380516001836020036101000a031916815260200191505b50838103825260318152602001807f4f7065726174696f6e2063616e206f6e6c7920626520706572666f726d65642081526020017f627920636f6e7472616374206f776e6572000000000000000000000000000000815250604001935050505060405180910390a161197e565b600091505b825182101561197d57611970838381518110151561196157fe5b906020019060200201516111f5565b8180600101925050611947565b5b505050565b6040805190810160405280601181526020017f7472616e736665724f776e6572736869700000000000000000000000000000008152506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b0f577fac283f5b35fa78f7f5e8923cb5db86b4c10c166580c43bb59f1d1d9ae108b70081604051808060200180602001838103835284818151815260200191508051906020019080838360005b83811015611a75578082015181840152602081019050611a5a565b50505050905090810190601f168015611aa25780820380516001836020036101000a031916815260200191505b50838103825260318152602001807f4f7065726174696f6e2063616e206f6e6c7920626520706572666f726d65642081526020017f627920636f6e7472616374206f776e6572000000000000000000000000000000815250604001935050505060405180910390a1611b19565b611b1882611ead565b5b5050565b611b278282611b36565b1515611b3257600080fd5b5050565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611c0c826001836040518082805190602001908083835b602083101515611bcb5780518252602082019150602081019050602083039250611ba6565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902061206d90919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b83811015611c85578082015181840152602081019050611c6a565b50505050905090810190601f168015611cb25780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b8060039080519060200190611cd9929190612129565b507fd47ea327ddf98cf66918796e18fa023231241e3c7cfbdc5550e352644ef6e972816040518080602001828103825283818151815260200191508051906020019080838360005b83811015611d3c578082015181840152602081019050611d21565b50505050905090810190601f168015611d695780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b611df6826001836040518082805190602001908083835b602083101515611db55780518252602082019150602081019050602083039250611d90565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206120cb90919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b700489826040518080602001828103825283818151815260200191508051906020019080838360005b83811015611e6f578082015181840152602081019050611e54565b50505050905090810190601f168015611e9c5780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611fae577fac283f5b35fa78f7f5e8923cb5db86b4c10c166580c43bb59f1d1d9ae108b700604051808060200180602001838103835260118152602001807f7472616e736665724f776e657273686970000000000000000000000000000000815250602001838103825260328152602001807f4e6577206f776e657227732061646472657373206e6565647320746f2062652081526020017f646966666572656e74207468616e2030783000000000000000000000000000008152506040019250505060405180910390a161206a565b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061216a57805160ff1916838001178555612198565b82800160010185558215612198579182015b8281111561219757825182559160200191906001019061217c565b5b5090506121a591906121a9565b5090565b6121cb91905b808211156121c75760008160009055506001016121af565b5090565b905600a165627a7a72305820ae943a54e56dfae602ba17ab11ef088ee62fa003a2209356bc3711d031393aa000290000000000000000000000001a7a8bd9106f2b8d977e08582dc7d24c723ab0db",
  "constructorArguments": "0000000000000000000000001a7a8bd9106f2b8d977e08582dc7d24c723ab0db"
}