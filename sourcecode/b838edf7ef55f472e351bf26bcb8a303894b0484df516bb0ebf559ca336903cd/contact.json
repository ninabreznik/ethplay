{
  "address": "0x7703c35cffdc5cda8d27aa3df2f9ba6964544b6e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "PylonToken",
  "contractName": "PylonToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-28\n*/\n\npragma solidity ^0.4.11;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n\ncontract owned {\n    address public owner;\n\n    function owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n}\n\ncontract PylonToken is owned {\n    // Public variables of the token\n    string public standard = \"Pylon Token - The first decentralized energy exchange platform powered by renewable energy\";\n    string public name = 'Pylon Token';\n    string public symbol = 'PYLNT';\n    uint8 public decimals = 18;\n    uint256 public totalSupply = 3750000000000000000000000;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => bool) public frozenAccount;\n\n    // This notifies about accounts locked\n    event FrozenFunds(address target, bool frozen);\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    using SafeMath for uint256;\n\n    address public beneficiary = 0xAE0151Ca8C9b6A1A7B50Ce80Bf7436400E22b535;  //Chip-chap Klenergy Address of ether beneficiary account\n    uint256 public fundingGoal = 21230434782608700000000;     // Foundig goal in weis = 21230,434782608700000000 Ethers\n    uint256 public amountRaised;    // Quantity of weis investeds\n    uint256 public deadline; // durationInMinutes * 60 / 17 + 5000;        // Last moment to invest\n    uint256 public price = 6608695652173910;           // Ether cost of each token in weis 0,006608695652173910 ethers\n\n    uint256 public totalTokensToSend = 3250000000000000000000000; // Total tokens offered in the total ICO\n\n    uint256 public maxEtherInvestment = 826086956521739000000; //Ethers. To mofify the day when starts crowdsale, equivalent to 190.000€ = 826,086956521739000000 ether\n    uint256 public maxTokens = 297619047619048000000000; // 297,619.047619048000000000 PYLNT = 190.000 € + 56% bonus\n\n    uint256 public bonusCap = 750000000000000000000000; // 750,000.000000000000000000 PYLNT last day before Crowdsale as 1,52€/token\n    uint256 public pylonSelled = 0;\n\n    uint256 public startBlockBonus;\n\n    uint256 public endBlockBonus1;\n\n    uint256 public endBlockBonus2;\n\n    uint256 public endBlockBonus3;\n\n    uint256 public qnt10k = 6578947368421050000000; // 6,578.947368421050000000 PYLNT = 10.000 €\n\n    bool fundingGoalReached = false; // If founding goal is reached or not\n    bool crowdsaleClosed = false;    // If crowdsale is closed or open\n\n    event GoalReached(address deposit, uint256 amountDeposited);\n    event FundTransfer(address backer, uint256 amount, bool isContribution);\n    event LogQuantity(uint256 _amount, string _message);\n\n    // Chequear\n    uint256 public startBlock = getBlockNumber();\n\n    bool public paused = false;\n\n    //uint256 public balanceInvestor;\n    //uint256 public ultimosTokensEntregados;\n\n    modifier contributionOpen() {\n        require(getBlockNumber() >= startBlock && getBlockNumber() <= deadline);\n        _;\n    }\n\n    modifier notPaused() {\n        require(!paused);\n        _;\n    }\n\n    function crowdsale() onlyOwner{\n        paused = false;\n    }\n\n    /**\n     * event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param investor who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokenPurchase(address indexed purchaser, address indexed investor, uint256 value, uint256 amount);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function PylonToken(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol,\n        address centralMinter,\n        address ifSuccessfulSendTo,\n        uint256 fundingGoalInWeis,\n        uint256 durationInMinutes,\n        uint256 weisCostOfEachToken\n    ) {\n        if (centralMinter != 0) owner = centralMinter;\n\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n        totalSupply = initialSupply;                        // Update total supply\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\n\n        beneficiary = ifSuccessfulSendTo;\n        fundingGoal = fundingGoalInWeis;\n        startBlock = getBlockNumber();\n        startBlockBonus = getBlockNumber();\n        endBlockBonus1 = getBlockNumber() + 15246 + 12600 + 500;    // 3 days + 35,5h + margen error = 15246 + 12600 + 500\n        endBlockBonus2 = getBlockNumber() + 30492 + 12600 + 800;    // 6 days + 35,5h + margen error = 30492 + 12600 + 800\n        endBlockBonus3 = getBlockNumber() + 45738 + 12600 + 1100;   // 9 days + 35,5h + margen error = 45738 + 12600 + 1100\n        deadline = getBlockNumber() + (durationInMinutes * 60 / 17) + 5000; // durationInMinutes * 60 / 17 + 12600 + 5000 = Calculo bloques + margen error\n        price = weisCostOfEachToken;\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);                                // Prevent transfer to 0x0 address. Use burn() instead\n        require(balanceOf[_from] >= _value);                // Check if the sender has enough\n        require(balanceOf[_to] + _value > balanceOf[_to]);  // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        Transfer(_from, _to, _value);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) onlyOwner returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other ccount\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) onlyOwner returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n\n    /**\n     * Mine new tokens\n     *\n     * Mine `mintedAmount` tokens from the system to send to the `target`.\n     * This function will only be used from a future contract to invest in new renewable installations\n     *\n     * @param target the address of the recipient\n     * @param mintedAmount the amount of money to send\n     */\n    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        Transfer(0, owner, mintedAmount);\n        Transfer(owner, target, mintedAmount);\n    }\n\n    /**\n     * Lock or unlock accounts\n     *\n     * Lock or unlock `target` accounts which don't use the token correctly.\n     *\n     * @param target the address of the locked or unlicked account\n     * @param freeze if this account has to be freeze or not\n     */\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    /**\n     * Fallback function\n     *\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\n     */\n    function () payable notPaused{\n        buyTokens(msg.sender);\n    }\n\n    // low level token purchase function\n    function buyTokens(address investor) payable notPaused {\n        require (!crowdsaleClosed); // Check if crowdsale is open or not\n        require(investor != 0x0);  // Check the address\n        require(validPurchase()); //Validate the transfer\n        require(maxEtherInvestment >= msg.value); //Check if It's more than maximum to invest\n        require(balanceOf[investor] <= maxTokens); // Check if the investor has more tokens than 5% of total supply\n        require(amountRaised <= fundingGoal); // Check if fundingGoal is rised\n        require(pylonSelled <= totalTokensToSend); //Check if pylons we have sell is more or equal than total tokens ew have\n\n\n        //Check if It's time for pre ICO or ICO\n        if(startBlockBonus <= getBlockNumber() && startBlock <= getBlockNumber() && endBlockBonus3 >= getBlockNumber() && pylonSelled <= bonusCap){\n          buyPreIco(investor);\n        } else if(deadline >= getBlockNumber()){\n          buyIco(investor);\n        }\n\n    }\n\n    function buyIco(address investor) internal{\n      uint256 weiAmount = msg.value;\n\n      // calculate token amount to be sent\n      uint256 tokens = weiAmount.mul(10**18).div(price);\n\n      require((balanceOf[investor] + tokens) <= maxTokens);         // Check if the investor has more tokens than 5% of total supply\n      require(balanceOf[this] >= tokens);             // checks if it has enough to sell\n      require(pylonSelled + tokens <= totalTokensToSend); //Overflow - Check if pylons we have sell is more or equal than total tokens ew have\n\n      balanceOf[this] -= tokens;\n      balanceOf[investor] += tokens;\n      amountRaised += weiAmount; // update state amount raised\n      pylonSelled += tokens; // Total tokens selled\n\n      beneficiary.transfer(weiAmount); //Transfer ethers to beneficiary\n\n      frozenAccount[investor] = true;\n      FrozenFunds(investor, true);\n\n      TokenPurchase(msg.sender, investor, weiAmount, tokens);\n    }\n\n    function buyPreIco(address investor) internal{\n      uint256 weiAmount = msg.value;\n\n      uint256 bonusPrice = 0;\n      uint256 tokens = weiAmount.mul(10**18).div(price);\n\n      if(endBlockBonus1 >= getBlockNumber()){\n        if(tokens == qnt10k.mul(19) ){\n          bonusPrice = 2775652173913040;\n        }else if(tokens >= qnt10k.mul(18) && tokens < qnt10k.mul(19)){\n          bonusPrice = 2907826086956520;\n        }else if(tokens >= qnt10k.mul(17) && tokens < qnt10k.mul(18)){\n          bonusPrice = 3040000000000000;\n        }else if(tokens >= qnt10k.mul(16) && tokens < qnt10k.mul(17)){\n          bonusPrice = 3172173913043480;\n        }else if(tokens >= qnt10k.mul(15) && tokens < qnt10k.mul(16)){\n          bonusPrice = 3304347826086960;\n        }else if(tokens >= qnt10k.mul(14) && tokens < qnt10k.mul(15)){\n          bonusPrice = 3436521739130430;\n        }else if(tokens >= qnt10k.mul(13) && tokens < qnt10k.mul(14)){\n          bonusPrice = 3568695652173910;\n        }else if(tokens >= qnt10k.mul(12) && tokens < qnt10k.mul(13)){\n          bonusPrice = 3700869565217390;\n        }else if(tokens >= qnt10k.mul(11) && tokens < qnt10k.mul(12)){\n          bonusPrice = 3833043478260870;\n        }else if(tokens >= qnt10k.mul(10) && tokens < qnt10k.mul(11)){\n          bonusPrice = 3965217391304350;\n        }else if(tokens >= qnt10k.mul(9) && tokens < qnt10k.mul(10)){\n          bonusPrice = 4097391304347830;\n        }else if(tokens >= qnt10k.mul(8) && tokens < qnt10k.mul(9)){\n          bonusPrice = 4229565217391300;\n        }else if(tokens >= qnt10k.mul(7) && tokens < qnt10k.mul(8)){\n          bonusPrice = 4361739130434780;\n        }else if(tokens >= qnt10k.mul(6) && tokens < qnt10k.mul(7)){\n          bonusPrice = 4493913043478260;\n        }else if(tokens >= qnt10k.mul(5) && tokens < qnt10k.mul(6)){\n          bonusPrice = 4626086956521740;\n        }else{\n          bonusPrice = 5286956521739130;\n        }\n      }else if(endBlockBonus2 >= getBlockNumber()){\n        if(tokens == qnt10k.mul(19) ){\n          bonusPrice = 3436521739130430;\n        }else if(tokens >= qnt10k.mul(18) && tokens < qnt10k.mul(19)){\n          bonusPrice = 3568695652173910;\n        }else if(tokens >= qnt10k.mul(17) && tokens < qnt10k.mul(18)){\n          bonusPrice = 3700869565217390;\n        }else if(tokens >= qnt10k.mul(16) && tokens < qnt10k.mul(17)){\n          bonusPrice = 3833043478260870;\n        }else if(tokens >= qnt10k.mul(15) && tokens < qnt10k.mul(16)){\n          bonusPrice = 3965217391304350;\n        }else if(tokens >= qnt10k.mul(14) && tokens < qnt10k.mul(15)){\n          bonusPrice = 4097391304347830;\n        }else if(tokens >= qnt10k.mul(13) && tokens < qnt10k.mul(14)){\n          bonusPrice = 4229565217391300;\n        }else if(tokens >= qnt10k.mul(12) && tokens < qnt10k.mul(13)){\n          bonusPrice = 4361739130434780;\n        }else if(tokens >= qnt10k.mul(11) && tokens < qnt10k.mul(12)){\n          bonusPrice = 4493913043478260;\n        }else if(tokens >= qnt10k.mul(10) && tokens < qnt10k.mul(11)){\n          bonusPrice = 4626086956521740;\n        }else if(tokens >= qnt10k.mul(9) && tokens < qnt10k.mul(10)){\n          bonusPrice = 4758260869565220;\n        }else if(tokens >= qnt10k.mul(8) && tokens < qnt10k.mul(9)){\n          bonusPrice = 4890434782608700;\n        }else if(tokens >= qnt10k.mul(7) && tokens < qnt10k.mul(8)){\n          bonusPrice = 5022608695652170;\n        }else if(tokens >= qnt10k.mul(6) && tokens < qnt10k.mul(7)){\n          bonusPrice = 5154782608695650;\n        }else if(tokens >= qnt10k.mul(5) && tokens < qnt10k.mul(6)){\n          bonusPrice = 5286956521739130;\n        }else{\n          bonusPrice = 5947826086956520;\n        }\n      }else{\n        if(tokens == qnt10k.mul(19) ){\n          bonusPrice = 3766956521739130;\n        }else if(tokens >= qnt10k.mul(18) && tokens < qnt10k.mul(19)){\n          bonusPrice = 3899130434782610;\n        }else if(tokens >= qnt10k.mul(17) && tokens < qnt10k.mul(18)){\n          bonusPrice = 4031304347826090;\n        }else if(tokens >= qnt10k.mul(16) && tokens < qnt10k.mul(17)){\n          bonusPrice = 4163478260869570;\n        }else if(tokens >= qnt10k.mul(15) && tokens < qnt10k.mul(16)){\n          bonusPrice = 4295652173913040;\n        }else if(tokens >= qnt10k.mul(14) && tokens < qnt10k.mul(15)){\n          bonusPrice = 4427826086956520;\n        }else if(tokens >= qnt10k.mul(13) && tokens < qnt10k.mul(14)){\n          bonusPrice = 4560000000000000;\n        }else if(tokens >= qnt10k.mul(12) && tokens < qnt10k.mul(13)){\n          bonusPrice = 4692173913043480;\n        }else if(tokens >= qnt10k.mul(11) && tokens < qnt10k.mul(12)){\n          bonusPrice = 4824347826086960;\n        }else if(tokens >= qnt10k.mul(10) && tokens < qnt10k.mul(11)){\n          bonusPrice = 4956521739130430;\n        }else if(tokens >= qnt10k.mul(9) && tokens < qnt10k.mul(10)){\n          bonusPrice = 5088695652173910;\n        }else if(tokens >= qnt10k.mul(8) && tokens < qnt10k.mul(9)){\n          bonusPrice = 5220869565217390;\n        }else if(tokens >= qnt10k.mul(7) && tokens < qnt10k.mul(8)){\n          bonusPrice = 5353043478260870;\n        }else if(tokens >= qnt10k.mul(6) && tokens < qnt10k.mul(7)){\n          bonusPrice = 5485217391304350;\n        }else if(tokens >= qnt10k.mul(5) && tokens < qnt10k.mul(6)){\n          bonusPrice = 5617391304347830;\n        }else{\n          bonusPrice = 6278260869565220;\n        }\n      }\n\n      tokens = weiAmount.mul(10**18).div(bonusPrice);\n\n      require(pylonSelled + tokens <= bonusCap); // Check if want to sell more than total tokens for pre-ico\n      require(balanceOf[investor] + tokens <= maxTokens); // Check if the investor has more tokens than 5% of total supply\n      require(balanceOf[this] >= tokens);             // checks if it has enough to sell\n\n      balanceOf[this] -= tokens;\n      balanceOf[investor] += tokens;\n      amountRaised += weiAmount; // update state amount raised\n      pylonSelled += tokens; // Total tokens selled\n\n      beneficiary.transfer(weiAmount); //Transfer ethers to beneficiary\n\n      frozenAccount[investor] = true;\n      FrozenFunds(investor, true);\n\n      TokenPurchase(msg.sender, investor, weiAmount, tokens);\n\n    }\n\n    modifier afterDeadline() { if (now >= deadline) _; }\n\n    /**\n     * Check if goal was reached\n     *\n     * Checks if the goal or time limit has been reached and ends the campaign\n     */\n    function checkGoalReached() afterDeadline onlyOwner {\n        if (amountRaised >= fundingGoal){\n            fundingGoalReached = true;\n            GoalReached(beneficiary, amountRaised);\n        }\n        crowdsaleClosed = true;\n    }\n\n\n    // @return true if the transaction can buy tokens\n    function validPurchase() internal constant returns (bool) {\n        uint256 current = getBlockNumber();\n        bool withinPeriod = current >= startBlock && current <= deadline;\n        bool nonZeroPurchase = msg.value != 0;\n        return withinPeriod && nonZeroPurchase;\n    }\n\n    //////////\n    // Testing specific methods\n    //////////\n\n    /// @notice This function is overridden by the test Mocks.\n    function getBlockNumber() internal constant returns (uint256) {\n        return block.number;\n    }\n\n    /// @notice Pauses the contribution if there is any issue\n    function pauseContribution() onlyOwner {\n        paused = true;\n    }\n\n    /// @notice Resumes the contribution\n    function resumeContribution() onlyOwner {\n        paused = false;\n    }\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlockBonus2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensToSend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"qnt10k\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlockBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseContribution\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEtherInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pylonSelled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlockBonus1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeContribution\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlockBonus3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"centralMinter\",\"type\":\"address\"},{\"name\":\"ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"fundingGoalInWeis\",\"type\":\"uint256\"},{\"name\":\"durationInMinutes\",\"type\":\"uint256\"},{\"name\":\"weisCostOfEachToken\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deposit\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountDeposited\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"LogQuantity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]",
  "bytecode": "60e0604052605a60608190527f50796c6f6e20546f6b656e202d2054686520666972737420646563656e74726160809081527f6c697a656420656e657267792065786368616e676520706c6174666f726d207060a0527f6f77657265642062792072656e657761626c6520656e6572677900000000000060c052620000889160019190620003e6565b5060408051808201909152600b8082527f50796c6f6e20546f6b656e0000000000000000000000000000000000000000006020909201918252620000cf91600291620003e6565b506040805180820190915260058082527f50594c4e5400000000000000000000000000000000000000000000000000000060209092019182526200011691600391620003e6565b506004805460ff191660121790556a031a17e847807b1bc0000060055560088054600160a060020a03191673ae0151ca8c9b6a1a7b50ce80bf7436400e22b53517905569047ee7780f1e490cc70060095566177a92dcc6c856600c556a02b036da601a044b400000600d55682cc8426e2905d018c0600e55693f05f5fd8c3a9f011000600f55699ed194db19b238c000006010556000601155690164a53c4ed267a3a2806016556017805461ffff19169055620001e064010000000062000fcb620003e182021704565b6018556019805460ff191690553415620001f657fe5b6040516200268f3803806200268f83398101604090815281516020830151918301516060840151608085015160a086015160c087015160e0880151610100890151969897880197959694909501949293919290915b5b60008054600160a060020a03191633600160a060020a03161790555b600160a060020a03851615620002945760008054600160a060020a031916600160a060020a0387161790555b600160a060020a03331660009081526006602090815260409091208a905560058a90558851620002cb91600291908b0190620003e6565b508551620002e1906003906020890190620003e6565b506004805460ff191660ff891617905560088054600160a060020a031916600160a060020a038616179055600983905562000329640100000000620003e1810262000fcb1704565b6018556200034464010000000062000fcb620003e182021704565b6012556200035f64010000000062000fcb620003e182021704565b616eba016013556200037e64010000000062000fcb620003e182021704565b61ab74016014556200039d64010000000062000fcb620003e182021704565b61e82e016015556011603c83025b04620003c464010000000062000fcb620003e182021704565b0161138801600b55600c8190555b50505050505050505062000490565b435b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200042957805160ff191683800117855562000459565b8280016001018555821562000459579182015b82811115620004595782518255916020019190600101906200043c565b5b50620004689291506200046c565b5090565b620003e391905b8082111562000468576000815560010162000473565b5090565b90565b6121ef80620004a06000396000f300606060405236156101bf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301cb3b2081146101e357806306fdde03146101f557806318160ddd146102855780631fc86532146102a75780632902320a146102c957806329dcb0cf146102eb578063313ce5671461030d57806338af3eed1461033357806342966c681461035f578063477bda3114610386578063487260bb146103a857806348cd4cb1146103ca5780634b8adcf7146103ec5780634df17cdc146103fe5780635a3b7e42146104205780635c975abb146104b05780636f9125a5146104d457806370a08231146104f657806379c650681461052457806379cc6790146105455780637a3a0e84146105785780637b3e5e7b1461059a5780638da5cb5b146105bc57806395d89b41146105e85780639c1e03a014610678578063a035b1fe1461068a578063a5ce0693146106ac578063a9059cbb146106ce578063b414d4b6146106ef578063b681f9f614610678578063d245aa9214610731578063e325fb4b14610753578063e724529c14610775578063e831574214610798578063ec8ac4d8146107ba578063f2fde38b146107d0575b6101e15b60195460ff16156101d45760006000fd5b6101dd336107ee565b5b5b565b005b34156101eb57fe5b6101e1610916565b005b34156101fd57fe5b6102056109b4565b60408051602080825283518183015283519192839290830191850190808383821561024b575b80518252602083111561024b57601f19909201916020918201910161022b565b505050905090810190601f1680156102775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028d57fe5b610295610a3f565b60408051918252519081900360200190f35b34156102af57fe5b610295610a45565b60408051918252519081900360200190f35b34156102d157fe5b610295610a4b565b60408051918252519081900360200190f35b34156102f357fe5b610295610a51565b60408051918252519081900360200190f35b341561031557fe5b61031d610a57565b6040805160ff9092168252519081900360200190f35b341561033b57fe5b610343610a60565b60408051600160a060020a039092168252519081900360200190f35b341561036757fe5b610372600435610a6f565b604080519115158252519081900360200190f35b341561038e57fe5b610295610b1a565b60408051918252519081900360200190f35b34156103b057fe5b610295610b20565b60408051918252519081900360200190f35b34156103d257fe5b610295610b26565b60408051918252519081900360200190f35b34156103f457fe5b6101e1610b2c565b005b341561040657fe5b610295610b59565b60408051918252519081900360200190f35b341561042857fe5b610205610b5f565b60408051602080825283518183015283519192839290830191850190808383821561024b575b80518252602083111561024b57601f19909201916020918201910161022b565b505050905090810190601f1680156102775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104b857fe5b610372610bec565b604080519115158252519081900360200190f35b34156104dc57fe5b610295610bf5565b60408051918252519081900360200190f35b34156104fe57fe5b610295600160a060020a0360043516610bfb565b60408051918252519081900360200190f35b341561052c57fe5b6101e1600160a060020a0360043516602435610c0d565b005b341561054d57fe5b610372600160a060020a0360043516602435610cd5565b604080519115158252519081900360200190f35b341561058057fe5b610295610d81565b60408051918252519081900360200190f35b34156105a257fe5b610295610d87565b60408051918252519081900360200190f35b34156105c457fe5b610343610d8d565b60408051600160a060020a039092168252519081900360200190f35b34156105f057fe5b610205610d9c565b60408051602080825283518183015283519192839290830191850190808383821561024b575b80518252602083111561024b57601f19909201916020918201910161022b565b505050905090810190601f1680156102775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561068057fe5b6101e1610e2a565b005b341561069257fe5b610295610e54565b60408051918252519081900360200190f35b34156106b457fe5b610295610e5a565b60408051918252519081900360200190f35b34156106d657fe5b6101e1600160a060020a0360043516602435610e60565b005b34156106f757fe5b610372600160a060020a0360043516610e70565b604080519115158252519081900360200190f35b341561068057fe5b6101e1610e2a565b005b341561073957fe5b610295610eaf565b60408051918252519081900360200190f35b341561075b57fe5b610295610eb5565b60408051918252519081900360200190f35b341561077d57fe5b6101e1600160a060020a03600435166024351515610ebb565b005b34156107a057fe5b610295610f3d565b60408051918252519081900360200190f35b6101e1600160a060020a03600435166107ee565b005b34156107d857fe5b6101e1600160a060020a0360043516610f43565b005b60195460ff16156107ff5760006000fd5b601754610100900460ff16156108155760006000fd5b600160a060020a038116151561082b5760006000fd5b610833610f8c565b151561083f5760006000fd5b600e54349010156108505760006000fd5b600f54600160a060020a03821660009081526006602052604090205411156108785760006000fd5b600954600a54111561088a5760006000fd5b600d54601154111561089c5760006000fd5b6108a4610fcb565b601254111580156108be57506108b8610fcb565b60185411155b80156108d357506108cd610fcb565b60155410155b80156108e3575060105460115411155b156108f6576108f181610fd0565b61090f565b6108fe610fcb565b600b541061090f5761090f81611ea2565b5b5b5b5b50565b600b5442106101dd5760005433600160a060020a0390811691161461093b5760006000fd5b600954600a541061099f576017805460ff19166001179055600854600a5460408051600160a060020a039093168352602083019190915280517fec3f991caf7857d61663fd1bba1739e04abd4781238508cde554bb849d790c859281900390910190a15b6017805461ff0019166101001790555b5b5b5b565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610a375780601f10610a0c57610100808354040283529160200191610a37565b820191906000526020600020905b815481529060010190602001808311610a1a57829003601f168201915b505050505081565b60055481565b60145481565b600d5481565b600b5481565b60045460ff1681565b600854600160a060020a031681565b6000805433600160a060020a03908116911614610a8c5760006000fd5b600160a060020a03331660009081526006602052604090205482901015610ab35760006000fd5b600160a060020a03331660008181526006602090815260409182902080548690039055600580548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a25060015b5b919050565b60165481565b60125481565b60185481565b60005433600160a060020a03908116911614610b485760006000fd5b6019805460ff191660011790555b5b565b600e5481565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a375780601f10610a0c57610100808354040283529160200191610a37565b820191906000526020600020905b815481529060010190602001808311610a1a57829003601f168201915b505050505081565b60195460ff1681565b60115481565b60066020526000908152604090205481565b60005433600160a060020a03908116911614610c295760006000fd5b600160a060020a03808316600090815260066020908152604080832080548601905560058054860190558254815186815291519416937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600054604080518381529051600160a060020a038086169316917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35b5b5050565b6000805433600160a060020a03908116911614610cf25760006000fd5b600160a060020a03831660009081526006602052604090205482901015610d195760006000fd5b600160a060020a03831660008181526006602090815260409182902080548690039055600580548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a25060015b5b92915050565b60095481565b600a5481565b600054600160a060020a031681565b6003805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a375780601f10610a0c57610100808354040283529160200191610a37565b820191906000526020600020905b815481529060010190602001808311610a1a57829003601f168201915b505050505081565b60005433600160a060020a03908116911614610e465760006000fd5b6019805460ff191690555b5b565b600c5481565b60135481565b610cd0338383612058565b5b5050565b60076020526000908152604090205460ff1681565b60005433600160a060020a03908116911614610e465760006000fd5b6019805460ff191690555b5b565b60155481565b60105481565b60005433600160a060020a03908116911614610ed75760006000fd5b600160a060020a038216600081815260076020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15b5b5050565b600f5481565b60005433600160a060020a03908116911614610f5f5760006000fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b6000600060006000610f9c610fcb565b92506018548310158015610fb25750600b548311155b915050341515818015610fc25750805b93505b50505090565b435b90565b600c543490600090819061100290610ff685670de0b6b3a764000063ffffffff61217716565b9063ffffffff6121a616565b905061100c610fcb565b6013541061145a5760165461102890601363ffffffff61217716565b81141561103e576609dc70e1d89bd09150611447565b60165461105290601263ffffffff61217716565b8110158015611073575060165461107090601363ffffffff61217716565b81105b1561108757660a54a704fb4de89150611447565b60165461109b90601163ffffffff61217716565b81101580156110bc57506016546110b990601263ffffffff61217716565b81105b156110d057660accdd281e00009150611447565b6016546110e490601063ffffffff61217716565b8110158015611105575060165461110290601163ffffffff61217716565b81105b1561111957660b45134b40b2189150611447565b60165461112d90600f63ffffffff61217716565b811015801561114e575060165461114b90601063ffffffff61217716565b81105b1561116257660bbd496e6364309150611447565b60165461117690600e63ffffffff61217716565b8110158015611197575060165461119490600f63ffffffff61217716565b81105b156111ab57660c357f9186163e9150611447565b6016546111bf90600d63ffffffff61217716565b81101580156111e057506016546111dd90600e63ffffffff61217716565b81105b156111f457660cadb5b4a8c8569150611447565b60165461120890600c63ffffffff61217716565b8110158015611229575060165461122690600d63ffffffff61217716565b81105b1561123d57660d25ebd7cb7a6e9150611447565b60165461125190600b63ffffffff61217716565b8110158015611272575060165461126f90600c63ffffffff61217716565b81105b1561128657660d9e21faee2c869150611447565b60165461129a90600a63ffffffff61217716565b81101580156112bb57506016546112b890600b63ffffffff61217716565b81105b156112cf57660e16581e10de9e9150611447565b6016546112e390600963ffffffff61217716565b8110158015611304575060165461130190600a63ffffffff61217716565b81105b1561131857660e8e8e413390b69150611447565b60165461132c90600863ffffffff61217716565b811015801561134d575060165461134a90600963ffffffff61217716565b81105b1561136157660f06c4645642c49150611447565b60165461137590600763ffffffff61217716565b8110158015611396575060165461139390600863ffffffff61217716565b81105b156113aa57660f7efa8778f4dc9150611447565b6016546113be90600663ffffffff61217716565b81101580156113df57506016546113dc90600763ffffffff61217716565b81105b156113f357660ff730aa9ba6f49150611447565b60165461140790600563ffffffff61217716565b8110158015611428575060165461142590600663ffffffff61217716565b81105b1561143c5766106f66cdbe590c9150611447565b6612c8757d6bd37a91505b5b5b5b5b5b5b5b5b5b5b5b5b5b5b611ce3565b611462610fcb565b601454106118b05760165461147e90601363ffffffff61217716565b81141561149457660c357f9186163e9150611447565b6016546114a890601263ffffffff61217716565b81101580156114c957506016546114c690601363ffffffff61217716565b81105b156114dd57660cadb5b4a8c8569150611447565b6016546114f190601163ffffffff61217716565b8110158015611512575060165461150f90601263ffffffff61217716565b81105b1561152657660d25ebd7cb7a6e9150611447565b60165461153a90601063ffffffff61217716565b811015801561155b575060165461155890601163ffffffff61217716565b81105b1561156f57660d9e21faee2c869150611447565b60165461158390600f63ffffffff61217716565b81101580156115a457506016546115a190601063ffffffff61217716565b81105b156115b857660e16581e10de9e9150611447565b6016546115cc90600e63ffffffff61217716565b81101580156115ed57506016546115ea90600f63ffffffff61217716565b81105b1561160157660e8e8e413390b69150611447565b60165461161590600d63ffffffff61217716565b8110158015611636575060165461163390600e63ffffffff61217716565b81105b1561164a57660f06c4645642c49150611447565b60165461165e90600c63ffffffff61217716565b811015801561167f575060165461167c90600d63ffffffff61217716565b81105b1561169357660f7efa8778f4dc9150611447565b6016546116a790600b63ffffffff61217716565b81101580156116c857506016546116c590600c63ffffffff61217716565b81105b156116dc57660ff730aa9ba6f49150611447565b6016546116f090600a63ffffffff61217716565b8110158015611711575060165461170e90600b63ffffffff61217716565b81105b156117255766106f66cdbe590c9150611447565b60165461173990600963ffffffff61217716565b811015801561175a575060165461175790600a63ffffffff61217716565b81105b1561176e576610e79cf0e10b249150611447565b60165461178290600863ffffffff61217716565b81101580156117a357506016546117a090600963ffffffff61217716565b81105b156117b75766115fd31403bd3c9150611447565b6016546117cb90600763ffffffff61217716565b81101580156117ec57506016546117e990600863ffffffff61217716565b81105b15611800576611d80937266f4a9150611447565b60165461181490600663ffffffff61217716565b8110158015611835575060165461183290600763ffffffff61217716565b81105b15611849576612503f5a4921629150611447565b60165461185d90600563ffffffff61217716565b811015801561187e575060165461187b90600663ffffffff61217716565b81105b15611892576612c8757d6bd37a9150611447565b661521842d194de891505b5b5b5b5b5b5b5b5b5b5b5b5b5b5b611ce3565b6016546118c490601363ffffffff61217716565b8114156118da57660d6206e95cd37a9150611ce3565b6016546118ee90601263ffffffff61217716565b811015801561190f575060165461190c90601363ffffffff61217716565b81105b1561192357660dda3d0c7f85929150611ce3565b60165461193790601163ffffffff61217716565b8110158015611958575060165461195590601263ffffffff61217716565b81105b1561196c57660e52732fa237aa9150611ce3565b60165461198090601063ffffffff61217716565b81101580156119a1575060165461199e90601163ffffffff61217716565b81105b156119b557660ecaa952c4e9c29150611ce3565b6016546119c990600f63ffffffff61217716565b81101580156119ea57506016546119e790601063ffffffff61217716565b81105b156119fe57660f42df75e79bd09150611ce3565b601654611a1290600e63ffffffff61217716565b8110158015611a335750601654611a3090600f63ffffffff61217716565b81105b15611a4757660fbb15990a4de89150611ce3565b601654611a5b90600d63ffffffff61217716565b8110158015611a7c5750601654611a7990600e63ffffffff61217716565b81105b15611a90576610334bbc2d00009150611ce3565b601654611aa490600c63ffffffff61217716565b8110158015611ac55750601654611ac290600d63ffffffff61217716565b81105b15611ad9576610ab81df4fb2189150611ce3565b601654611aed90600b63ffffffff61217716565b8110158015611b0e5750601654611b0b90600c63ffffffff61217716565b81105b15611b2257661123b8027264309150611ce3565b601654611b3690600a63ffffffff61217716565b8110158015611b575750601654611b5490600b63ffffffff61217716565b81105b15611b6b5766119bee2595163e9150611ce3565b601654611b7f90600963ffffffff61217716565b8110158015611ba05750601654611b9d90600a63ffffffff61217716565b81105b15611bb4576612142448b7c8569150611ce3565b601654611bc890600863ffffffff61217716565b8110158015611be95750601654611be690600963ffffffff61217716565b81105b15611bfd5766128c5a6bda7a6e9150611ce3565b601654611c1190600763ffffffff61217716565b8110158015611c325750601654611c2f90600863ffffffff61217716565b81105b15611c4657661304908efd2c869150611ce3565b601654611c5a90600663ffffffff61217716565b8110158015611c7b5750601654611c7890600763ffffffff61217716565b81105b15611c8f5766137cc6b21fde9e9150611ce3565b601654611ca390600563ffffffff61217716565b8110158015611cc45750601654611cc190600663ffffffff61217716565b81105b15611cd8576613f4fcd54290b69150611ce3565b66164e0b84f00b2491505b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b611d1b82610ff685670de0b6b3a764000063ffffffff61217716565b9063ffffffff6121a616565b9050601054816011540111151515611d335760006000fd5b600f54600160a060020a03851660009081526006602052604090205482011115611d5d5760006000fd5b600160a060020a03301660009081526006602052604090205481901015611d845760006000fd5b600160a060020a03308116600090815260066020526040808220805485900390558683168252808220805485019055600a8054870190556011805485019055600854905192169185156108fc0291869190818181858888f193505050501515611de957fe5b600160a060020a038416600081815260076020908152604091829020805460ff1916600190811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a183600160a060020a031633600160a060020a03167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188584604051808381526020018281526020019250505060405180910390a35b50505050565b600c543490600090611ed290610ff684670de0b6b3a764000063ffffffff61217716565b9063ffffffff6121a616565b600f54600160a060020a0385166000908152600660205260409020549192509082011115611f005760006000fd5b600160a060020a03301660009081526006602052604090205481901015611f275760006000fd5b600d5460115482011115611f3b5760006000fd5b600160a060020a03308116600090815260066020526040808220805485900390558583168252808220805485019055600a8054860190556011805485019055600854905192169184156108fc0291859190818181858888f193505050501515611fa057fe5b600160a060020a038316600081815260076020908152604091829020805460ff1916600190811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a182600160a060020a031633600160a060020a03167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad188484604051808381526020018281526020019250505060405180910390a35b505050565b600160a060020a038216151561206e5760006000fd5b600160a060020a038316600090815260066020526040902054819010156120955760006000fd5b600160a060020a038216600090815260066020526040902054818101116120bc5760006000fd5b600160a060020a03831660009081526007602052604090205460ff16156120e35760006000fd5b600160a060020a03821660009081526007602052604090205460ff161561210a5760006000fd5b600160a060020a03808416600081815260066020908152604080832080548790039055938616808352918490208054860190558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35b505050565b6000828202831580612193575082848281151561219057fe5b04145b151561219b57fe5b8091505b5092915050565b6000600082848115156121b557fe5b0490508091505b50929150505600a165627a7a7230582071569dc0d85e380ec703e8af094a3cc551e21702df831d6bd5fa7b3866606f4a0029000000000000000000000000000000000000000000031a17e847807b1bc000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ae0151ca8c9b6a1a7b50ce80bf7436400e22b53500000000000000000000000000000000000000000000047ee7780f1e490cc700000000000000000000000000000000000000000000000000000000000000b6b200000000000000000000000000000000000000000000000000177a92dcc6c856000000000000000000000000000000000000000000000000000000000000000b50796c6f6e20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000550594c4e54000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000031a17e847807b1bc000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ae0151ca8c9b6a1a7b50ce80bf7436400e22b53500000000000000000000000000000000000000000000047ee7780f1e490cc700000000000000000000000000000000000000000000000000000000000000b6b200000000000000000000000000000000000000000000000000177a92dcc6c856000000000000000000000000000000000000000000000000000000000000000b50796c6f6e20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000550594c4e54000000000000000000000000000000000000000000000000000000"
}