{
  "address": "0x0bc95951bb59d6fd063ce7ad5c3b3dcaace98132",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ViVICO",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-23\n*/\n\npragma solidity 0.4.24;\n/**\n* @title Vivalid ICO Contract\n* @dev ViV is an ERC-20 Standar Compliant Token\n* For more info https://vivalid.io\n*/\n\n/**\n * @title SafeMath by OpenZeppelin (partially)\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n          return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {    \n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title admined\n * @notice This contract is administered\n */\ncontract admined {\n    mapping(address => uint8) level; \n    //0 normal user\n    //1 basic admin\n    //2 master admin\n\n    /**\n    * @dev This contructor takes the msg.sender as the first master admin\n    */\n    constructor() internal {\n        level[msg.sender] = 2; //Set initial admin to contract creator\n        emit AdminshipUpdated(msg.sender,2);\n    }\n\n    /**\n    * @dev This modifier limits function execution to the admin\n    */\n    modifier onlyAdmin(uint8 _level) { //A modifier to define admin-only functions\n        require(level[msg.sender] >= _level );\n        _;\n    }\n\n    /**\n    * @notice This function transfer the adminship of the contract to _newAdmin\n    * @param _newAdmin The new admin of the contract\n    */\n    function adminshipLevel(address _newAdmin, uint8 _level) onlyAdmin(2) public { //Admin can be set\n        require(_newAdmin != address(0));\n        level[_newAdmin] = _level;\n        emit AdminshipUpdated(_newAdmin,_level);\n    }\n\n    /**\n    * @dev Log Events\n    */\n    event AdminshipUpdated(address _newAdmin, uint8 _level);\n\n}\n\ncontract ViVICO is admined {\n\n    using SafeMath for uint256;\n    //This ico have 5 possible states\n    enum State {\n        PreSale, //PreSale - best value\n        MainSale,\n        OnHold,\n        Failed,\n        Successful\n    }\n    //Public variables\n\n    //Time-state Related\n    State public state = State.PreSale; //Set initial stage\n    uint256 public PreSaleStart = now; //Once deployed\n    uint256 constant public PreSaleDeadline = 1529452799; //(GMT): Tuesday, 19 de June de 2018 23:59:59\n    uint256 public MainSaleStart; //TBA\n    uint256 public MainSaleDeadline; // TBA\n    uint256 public completedAt; //Set when ico finish\n    //Token-eth related\n    uint256 public totalRaised; //eth collected in wei\n    uint256 public PreSaleDistributed; //presale tokens distributed\n    uint256 public totalDistributed; //Whole sale tokens distributed\n    ERC20Basic public tokenReward; //Token contract address\n    uint256 public softCap = 11000000 * (10 ** 18); //11M Tokens\n    uint256 public hardCap = 140000000 * (10 ** 18); // 140M tokens\n    //User balances handlers\n    mapping (address => uint256) public ethOnContract; //Balance of sent eth per user\n    mapping (address => uint256) public tokensSent; //Tokens sent per user\n    mapping (address => uint256) public balance; //Tokens pending to send per user\n    //Contract details\n    address public creator;\n    string public version = '1';\n\n    //Tokens per eth rates\n    uint256[5] rates = [2520,2070,1980,1890,1800];\n\n    //User rights handlers\n    mapping (address => bool) public whiteList; //List of allowed to send eth\n    mapping (address => bool) public KYCValid; //KYC validation to claim tokens\n\n    //events for log\n    event LogFundrisingInitialized(address _creator);\n    event LogMainSaleDateSet(uint256 _time);\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\n    event LogContributorsPayout(address _addr, uint _amount);\n    event LogRefund(address _addr, uint _amount);\n    event LogFundingSuccessful(uint _totalRaised);\n    event LogFundingFailed(uint _totalRaised);\n\n    //Modofoer to prevent execution if ico has ended or is holded\n    modifier notFinishedOrHold() {\n        require(state != State.Successful && state != State.OnHold && state != State.Failed);\n        _;\n    }\n\n    /**\n    * @notice ICO constructor\n    * @param _addressOfTokenUsedAsReward is the token to distribute\n    */\n    constructor(ERC20Basic _addressOfTokenUsedAsReward ) public {\n\n        creator = msg.sender; //Creator is set from deployer address\n        tokenReward = _addressOfTokenUsedAsReward; //Token address is set during deployment\n\n        emit LogFundrisingInitialized(creator);\n    }\n\n    /**\n    * @notice Whitelist function\n    */\n    function whitelistAddress(address _user, bool _flag) public onlyAdmin(1) {\n        whiteList[_user] = _flag;\n    }\n    \n    /**\n    * @notice KYC validation function\n    */\n    function validateKYC(address _user, bool _flag) public onlyAdmin(1) {\n        KYCValid[_user] = _flag;\n    }\n\n    /**\n    * @notice Main Sale Start function\n    */\n    function setMainSaleStart(uint256 _startTime) public onlyAdmin(2) {\n        require(state == State.OnHold);\n        require(_startTime > now);\n        MainSaleStart = _startTime;\n        MainSaleDeadline = MainSaleStart.add(12 weeks);\n        state = State.MainSale;\n\n        emit LogMainSaleDateSet(MainSaleStart);\n    }\n\n    /**\n    * @notice contribution handler\n    */\n    function contribute() public notFinishedOrHold payable {\n        require(whiteList[msg.sender] == true); //User must be whitelisted\n        require(msg.value >= 0.1 ether); //Minimal contribution\n        \n        uint256 tokenBought = 0; //tokens bought variable\n\n        totalRaised = totalRaised.add(msg.value); //ether received updated\n        ethOnContract[msg.sender] = ethOnContract[msg.sender].add(msg.value); //ether sent by user updated\n\n        //Rate of exchange depends on stage\n        if (state == State.PreSale){\n            \n            require(now >= PreSaleStart);\n\n            tokenBought = msg.value.mul(rates[0]);\n            PreSaleDistributed = PreSaleDistributed.add(tokenBought); //Tokens sold on presale updated\n        \n        } else if (state == State.MainSale){\n\n            require(now >= MainSaleStart);\n\n            if (now <= MainSaleStart.add(1 weeks)){\n                tokenBought = msg.value.mul(rates[1]);\n            } else if (now <= MainSaleStart.add(2 weeks)){\n                tokenBought = msg.value.mul(rates[2]);\n            } else if (now <= MainSaleStart.add(3 weeks)){\n                tokenBought = msg.value.mul(rates[3]);\n            } else tokenBought = msg.value.mul(rates[4]);\n                \n        }\n\n        require(totalDistributed.add(tokenBought) <= hardCap);\n\n        if(KYCValid[msg.sender] == true){\n            //if there are any unclaimed tokens\n            uint256 tempBalance = balance[msg.sender];\n            //clear pending balance\n            balance[msg.sender] = 0;\n            //If KYC is valid tokens are send immediately\n            require(tokenReward.transfer(msg.sender, tokenBought.add(tempBalance)));\n            //Tokens sent to user updated\n            tokensSent[msg.sender] = tokensSent[msg.sender].add(tokenBought.add(tempBalance));\n\n            emit LogContributorsPayout(msg.sender, tokenBought.add(tempBalance));\n\n        } else{\n            //If KYC is not valid tokens becomes pending\n            balance[msg.sender] = balance[msg.sender].add(tokenBought);\n\n        }\n\n        totalDistributed = totalDistributed.add(tokenBought); //whole tokens sold updated\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\n        \n        checkIfFundingCompleteOrExpired();\n    }\n\n    /**\n    * @notice check status\n    */\n    function checkIfFundingCompleteOrExpired() public {\n\n        //If hardCap is reached ICO ends\n        if (totalDistributed == hardCap && state != State.Successful){\n\n            state = State.Successful; //ICO becomes Successful\n            completedAt = now; //ICO is complete\n\n            emit LogFundingSuccessful(totalRaised); //we log the finish\n            successful(); //and execute closure\n\n        } else if(state == State.PreSale && now > PreSaleDeadline){\n\n            state = State.OnHold; //Once presale ends the ICO holds\n\n        } else if(state == State.MainSale && now > MainSaleDeadline){\n            //Once main sale deadline is reached, softCap has to be compared\n            if(totalDistributed >= softCap){\n                //If softCap is reached\n                state = State.Successful; //ICO becomes Successful\n                completedAt = now; //ICO is finished\n\n                emit LogFundingSuccessful(totalRaised); //we log the finish\n                successful(); //and execute closure\n\n            } else{\n                //If softCap is not reached\n                state = State.Failed; //ICO becomes Failed\n                completedAt = now; //ICO is finished\n\n                emit LogFundingFailed(totalRaised); //we log the finish       \n\n            }\n\n        }\n    }\n\n    /**\n    * @notice successful closure handler\n    */\n    function successful() public { \n        //When successful\n        require(state == State.Successful);\n        //Users have 14 days period to claim tokens\n        if (now > completedAt.add(14 days)){\n            //If there is any token left after\n            uint256 remanent = tokenReward.balanceOf(this);\n            //It's send to creator\n            tokenReward.transfer(creator,remanent);\n            emit LogContributorsPayout(creator, remanent);\n        }\n        //After successful eth is send to creator\n        creator.transfer(address(this).balance);\n\n        emit LogBeneficiaryPaid(creator);\n\n    }\n\n    function claimEth() onlyAdmin(2) public {\n        //Only if softcap is reached\n        require(totalDistributed >= softCap);\n        //eth is send to creator\n        creator.transfer(address(this).balance);\n        emit LogBeneficiaryPaid(creator);\n    }\n\n    /**\n    * @notice function to let users claim their tokens\n    */\n    function claimTokensByUser() public {\n        //User must have a valid KYC\n        require(KYCValid[msg.sender] == true);\n        //Tokens pending are taken\n        uint256 tokens = balance[msg.sender];\n        //For safety, pending balance is cleared\n        balance[msg.sender] = 0;\n        //Tokens are send to user\n        require(tokenReward.transfer(msg.sender, tokens));\n        //Tokens sent to user updated\n        tokensSent[msg.sender] = tokensSent[msg.sender].add(tokens);\n\n        emit LogContributorsPayout(msg.sender, tokens);\n    }\n\n    /**\n    * @notice function to let admin claim tokens on behalf users\n    */\n    function claimTokensByAdmin(address _target) onlyAdmin(1) public {\n        //User must have a valid KYC\n        require(KYCValid[_target] == true);\n        //Tokens pending are taken\n        uint256 tokens = balance[_target];\n        //For safety, pending balance is cleared\n        balance[_target] = 0;\n        //Tokens are send to user\n        require(tokenReward.transfer(_target, tokens));\n        //Tokens sent to user updated\n        tokensSent[_target] = tokensSent[_target].add(tokens);\n\n        emit LogContributorsPayout(_target, tokens);       \n    }\n\n    /**\n    * @notice Failure handler\n    */\n    function refund() public { //On failure users can get back their eth\n        //If funding fail\n        require(state == State.Failed);\n        //Users have 90 days to claim a refund\n        if (now < completedAt.add(90 days)){\n            //We take the amount of tokens already sent to user\n            uint256 holderTokens = tokensSent[msg.sender];\n            //For security it's cleared            \n            tokensSent[msg.sender] = 0;\n            //Also pending tokens are cleared\n            balance[msg.sender] = 0;\n            //Amount of ether sent by user is checked\n            uint256 holderETH = ethOnContract[msg.sender];\n            //For security it's cleared            \n            ethOnContract[msg.sender] = 0;\n            //Contract try to retrieve tokens from user balance using allowance\n            require(tokenReward.transferFrom(msg.sender,address(this),holderTokens));\n            //If successful, send ether back\n            msg.sender.transfer(holderETH);\n\n            emit LogRefund(msg.sender,holderETH);\n        } else{\n            //After 90 days period only a master admin can use the function\n            require(level[msg.sender] >= 2);\n            //To claim remanent tokens on contract\n            uint256 remanent = tokenReward.balanceOf(this);\n            //And ether\n            creator.transfer(address(this).balance);\n            tokenReward.transfer(creator,remanent);\n\n            emit LogBeneficiaryPaid(creator);\n            emit LogContributorsPayout(creator, remanent);\n        }\n        \n    \n\n    }\n\n    /**\n    * @notice Function to claim any token stuck on contract\n    */\n    function externalTokensRecovery(ERC20Basic _address) onlyAdmin(2) public{\n        require(_address != tokenReward); //Only any other token\n\n        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\n        \n    }\n\n    /*\n    * @dev Direct payments handler\n    */\n\n    function () public payable {\n        \n        contribute();\n\n    }\n}",
  "bytecode": "6001805460ff19168155426002556a09195731e2ce35eb000000600a556a73ce27351811f40c000000600b5560c060405260808190527f310000000000000000000000000000000000000000000000000000000000000060a09081526200006a916010919062000187565b506040805160a0810182526109d8815261081660208201526107bc9181019190915261076260608201526107086080820152620000ac9060119060056200020c565b50348015620000ba57600080fd5b5060405160208062001aa28339810160408181529151336000818152602081815290859020805460ff19166002908117909155918452830152825190927f9b810ace296ded7f98c91fe8d22aa69c4ef152d64f1fbf1cfa9d6bb10627b300928290030190a1600f8054600160a060020a031990811633179182905560098054600160a060020a038581169190931617905560408051929091168252517f95c038c2946330b2b89591c4a80cbfc5de81a9376bd31b7521ad5b5d369c70959181900360200190a15062000263565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ca57805160ff1916838001178555620001fa565b82800160010185558215620001fa579182015b82811115620001fa578251825591602001919060010190620001dd565b506200020892915062000243565b5090565b8260058101928215620001fa579160200282015b82811115620001fa578251829061ffff1690559160200191906001019062000220565b6200026091905b808211156200020857600081556001016200024a565b90565b61182f80620002736000396000f30060806040526004361061018a5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146101945780632b878c7c146101c55780632e6b921c146101fa5780633332baa31461021b578063372c12b11461024257806338771242146102635780634c801cee1461027857806354fd4d501461029957806355afee4314610323578063590e1ae314610349578063643d1be51461035e578063694244f8146103765780636e66f6e91461038b5780637953ae77146103a057806386f32586146103b55780638c5e2b0e146103ca5780638ea80de3146103df578063906a26e0146104005780639a9e3fd814610415578063b7cdddcb1461042a578063b9a45aac1461043f578063c19d93fb14610465578063c56fc9c11461049e578063c5c4744c146104b3578063c9c80a56146104c8578063cd13592a146104ef578063d7bb99ba1461018a578063db39e3e914610504578063e3d670d714610525578063efca2eed14610546578063fb86a4041461055b575b610192610570565b005b3480156101a057600080fd5b506101a9610994565b60408051600160a060020a039092168252519081900360200190f35b3480156101d157600080fd5b506101e6600160a060020a03600435166109a3565b604080519115158252519081900360200190f35b34801561020657600080fd5b50610192600160a060020a03600435166109b8565b34801561022757600080fd5b50610230610b1d565b60408051918252519081900360200190f35b34801561024e57600080fd5b506101e6600160a060020a0360043516610b25565b34801561026f57600080fd5b50610230610b3a565b34801561028457600080fd5b50610192600160a060020a0360043516610b40565b3480156102a557600080fd5b506102ae610c91565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102e85781810151838201526020016102d0565b50505050905090810190601f1680156103155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032f57600080fd5b50610192600160a060020a03600435166024351515610d1f565b34801561035557600080fd5b50610192610d6d565b34801561036a57600080fd5b506101926004356110e5565b34801561038257600080fd5b50610230611190565b34801561039757600080fd5b506101a9611196565b3480156103ac57600080fd5b506102306111a5565b3480156103c157600080fd5b506101926111ab565b3480156103d657600080fd5b506102306112f5565b3480156103eb57600080fd5b50610230600160a060020a03600435166112fb565b34801561040c57600080fd5b5061023061130d565b34801561042157600080fd5b50610192611313565b34801561043657600080fd5b5061019261151e565b34801561044b57600080fd5b50610192600160a060020a03600435166024351515611551565b34801561047157600080fd5b5061047a61159f565b6040518082600481111561048a57fe5b60ff16815260200191505060405180910390f35b3480156104aa57600080fd5b506102306115a8565b3480156104bf57600080fd5b506102306115ae565b3480156104d457600080fd5b50610192600160a060020a036004351660ff602435166115b4565b3480156104fb57600080fd5b5061019261164f565b34801561051057600080fd5b50610230600160a060020a0360043516611777565b34801561053157600080fd5b50610230600160a060020a0360043516611789565b34801561055257600080fd5b5061023061179b565b34801561056757600080fd5b506102306117a1565b600080600460015460ff16600481111561058657fe5b141580156105a55750600260015460ff1660048111156105a257fe5b14155b80156105c25750600360015460ff1660048111156105bf57fe5b14155b15156105cd57600080fd5b3360009081526016602052604090205460ff1615156001146105ee57600080fd5b67016345785d8a000034101561060357600080fd5b6006546000925061061a903463ffffffff6117a716565b600655336000908152600c602052604090205461063d903463ffffffff6117a716565b336000908152600c602052604081209190915560015460ff16600481111561066157fe5b14156106ab5760025442101561067657600080fd5b61068d601160005b0154349063ffffffff6117ba16565b6007549092506106a3908363ffffffff6117a716565b600755610760565b6001805460ff1660048111156106bd57fe5b1415610760576003544210156106d257600080fd5b6003546106e89062093a8063ffffffff6117a716565b4211610701576106fa6011600161067e565b9150610760565b600354610717906212750063ffffffff6117a716565b4211610729576106fa6011600261067e565b60035461073f90621baf8063ffffffff6117a716565b4211610751576106fa6011600361067e565b61075d6011600461067e565b91505b600b54600854610776908463ffffffff6117a716565b111561078157600080fd5b3360009081526017602052604090205460ff161515600114156108ff5750336000818152600e6020526040812080549190556009549091600160a060020a039091169063a9059cbb906107d485856117a7565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561083f57600080fd5b505af1158015610853573d6000803e3d6000fd5b505050506040513d602081101561086957600080fd5b5051151561087657600080fd5b6108a5610889838363ffffffff6117a716565b336000908152600d60205260409020549063ffffffff6117a716565b336000818152600d60205260409020919091556000805160206117e4833981519152906108d8848463ffffffff6117a716565b60408051600160a060020a03909316835260208301919091528051918290030190a1610930565b336000908152600e602052604090205461091f908363ffffffff6117a716565b336000908152600e60205260409020555b600854610943908363ffffffff6117a716565b6008556006546040805133815234602082015280820192909252517f304e48bb03eae5e9bf3575d270648664895983e116a51773a65e9f3341b3b40e9181900360600190a16109906111ab565b5050565b600f54600160a060020a031681565b60176020526000908152604090205460ff1681565b3360009081526020819052604081205460019060ff168111156109da57600080fd5b600160a060020a03831660009081526017602052604090205460ff161515600114610a0457600080fd5b600160a060020a038084166000818152600e60209081526040808320805490849055600954825160e060020a63a9059cbb028152600481019690965260248601829052915190975094169363a9059cbb93604480820194918390030190829087803b158015610a7257600080fd5b505af1158015610a86573d6000803e3d6000fd5b505050506040513d6020811015610a9c57600080fd5b50511515610aa957600080fd5b600160a060020a0383166000908152600d6020526040902054610ad2908363ffffffff6117a716565b600160a060020a0384166000818152600d602090815260409182902093909355805191825291810184905281516000805160206117e4833981519152929181900390910190a1505050565b635b2998ff81565b60166020526000908152604090205460ff1681565b60055481565b3360009081526020819052604081205460029060ff16811115610b6257600080fd5b600954600160a060020a0384811691161415610b7d57600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038516916370a082319160248083019260209291908290030181600087803b158015610bde57600080fd5b505af1158015610bf2573d6000803e3d6000fd5b505050506040513d6020811015610c0857600080fd5b50516040805160e060020a63a9059cbb028152336004820152602481018390529051919350600160a060020a0385169163a9059cbb916044808201926020929091908290030181600087803b158015610c6057600080fd5b505af1158015610c74573d6000803e3d6000fd5b505050506040513d6020811015610c8a57600080fd5b5050505050565b6010805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610d175780601f10610cec57610100808354040283529160200191610d17565b820191906000526020600020905b815481529060010190602001808311610cfa57829003601f168201915b505050505081565b3360009081526020819052604090205460019060ff16811115610d4157600080fd5b50600160a060020a03919091166000908152601760205260409020805460ff1916911515919091179055565b60008080600360015460ff166004811115610d8457fe5b14610d8e57600080fd5b600554610da4906276a70063ffffffff6117a716565b421015610ef357336000818152600d60209081526040808320805490849055600e8352818420849055600c835281842080549085905560095483517f23b872dd00000000000000000000000000000000000000000000000000000000815260048101979097523060248801526044870183905292519198509650600160a060020a03909116936323b872dd9360648083019493928390030190829087803b158015610e4e57600080fd5b505af1158015610e62573d6000803e3d6000fd5b505050506040513d6020811015610e7857600080fd5b50511515610e8557600080fd5b604051339083156108fc029084906000818181858888f19350505050158015610eb2573d6000803e3d6000fd5b50604080513381526020810184905281517fb6c0eca8138e097d71e2dd31e19a1266487f0553f170b7260ffe68bcbe9ff8a7929181900390910190a16110e0565b33600090815260208190526040902054600260ff9091161015610f1557600080fd5b600954604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015610f7b57600080fd5b505af1158015610f8f573d6000803e3d6000fd5b505050506040513d6020811015610fa557600080fd5b5051600f54604051919250600160a060020a031690303180156108fc02916000818181858888f19350505050158015610fe2573d6000803e3d6000fd5b50600954600f546040805160e060020a63a9059cbb028152600160a060020a039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561103f57600080fd5b505af1158015611053573d6000803e3d6000fd5b505050506040513d602081101561106957600080fd5b5050600f5460408051600160a060020a039092168252517f101a889b1c7c3bf4e0c37353cfe1554e47e39c747e25a6d330d0553dd93bd1eb9181900360200190a1600f5460408051600160a060020a0390921682526020820183905280516000805160206117e48339815191529281900390910190a15b505050565b3360009081526020819052604090205460029060ff1681111561110757600080fd5b600260015460ff16600481111561111a57fe5b1461112457600080fd5b42821161113057600080fd5b600382905561114882626ebe0063ffffffff6117a716565b6004556001805460ff19168117905560035460408051918252517feaeb57ce3171d6863aeac828a738385f98b5e64834231a5f29967dfe4a35000a9181900360200190a15050565b60025481565b600954600160a060020a031681565b60045481565b600b546008541480156111cf5750600460015460ff1660048111156111cc57fe5b14155b1561122e57600180546004919060ff191681835b02179055504260055560065460408051918252517fee94ee98208684c00eeba940c34a6060b93671b249abd182b4771b74bf94e2dd9181900360200190a1611229611313565b6112f3565b600060015460ff16600481111561124157fe5b1480156112515750635b2998ff42115b15611268576001805460ff191660021790556112f3565b6001805460ff16600481111561127a57fe5b148015611288575060045442115b156112f357600a54600854106112ab57600180546004919060ff191681836111e3565b6001805460ff191660031790554260055560065460408051918252517f4c0d9c8be17eca59968547ef3103a0b410b1e05413681177b0796848f980513e916020908290030190a15b565b60035481565b600d6020526000908152604090205481565b600a5481565b6000600460015460ff16600481111561132857fe5b1461133257600080fd5b600554611348906212750063ffffffff6117a716565b4211156114a157600954604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b1580156113b557600080fd5b505af11580156113c9573d6000803e3d6000fd5b505050506040513d60208110156113df57600080fd5b5051600954600f546040805160e060020a63a9059cbb028152600160a060020a03928316600482015260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b15801561143f57600080fd5b505af1158015611453573d6000803e3d6000fd5b505050506040513d602081101561146957600080fd5b5050600f5460408051600160a060020a0390921682526020820183905280516000805160206117e48339815191529281900390910190a15b600f54604051600160a060020a0390911690303180156108fc02916000818181858888f193505050501580156114db573d6000803e3d6000fd5b50600f5460408051600160a060020a039092168252517f101a889b1c7c3bf4e0c37353cfe1554e47e39c747e25a6d330d0553dd93bd1eb9181900360200190a150565b3360009081526020819052604090205460029060ff1681111561154057600080fd5b600a5460085410156114a157600080fd5b3360009081526020819052604090205460019060ff1681111561157357600080fd5b50600160a060020a03919091166000908152601660205260409020805460ff1916911515919091179055565b60015460ff1681565b60075481565b60065481565b3360009081526020819052604090205460029060ff168111156115d657600080fd5b600160a060020a03831615156115eb57600080fd5b600160a060020a03831660008181526020818152604091829020805460ff191660ff871690811790915582519384529083015280517f9b810ace296ded7f98c91fe8d22aa69c4ef152d64f1fbf1cfa9d6bb10627b3009281900390910190a1505050565b3360009081526017602052604081205460ff16151560011461167057600080fd5b50336000818152600e60209081526040808320805490849055600954825160e060020a63a9059cbb02815260048101969096526024860182905291519094600160a060020a039092169363a9059cbb93604480850194919392918390030190829087803b1580156116e057600080fd5b505af11580156116f4573d6000803e3d6000fd5b505050506040513d602081101561170a57600080fd5b5051151561171757600080fd5b336000908152600d6020526040902054611737908263ffffffff6117a716565b336000818152600d602090815260409182902093909355805191825291810183905281516000805160206117e4833981519152929181900390910190a150565b600c6020526000908152604090205481565b600e6020526000908152604090205481565b60085481565b600b5481565b818101828110156117b457fe5b92915050565b60008215156117cb575060006117b4565b508181028183828115156117db57fe5b04146117b457fe00aeb3ebd09ef847781ae7d846d2c9afbbb08cfbcad76e92d3206303aa30d24226a165627a7a72305820093b1e99f14e454fb034d094b9c511d9e305d8fd3865f923c0c4e240bed4a8cf00290000000000000000000000007c5be04b71a9cdd4243372e23d5fcb278428465c",
  "constructorArguments": "0000000000000000000000007c5be04b71a9cdd4243372e23d5fcb278428465c"
}