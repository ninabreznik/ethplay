{
  "address": "0x5bbc74110a757689572b90bf8d45e487391567c3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthKassa",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-01\n*/\n\npragma solidity 0.4.25;\n\n /*\n *check ethgasstation.info\n *to set good gas price and gas limit\n *we recommend to set your gas limit to 150000\n *and your gas price to 15 gwei\n *visit Ethkassa.io for more details\n */ \n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b);\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n}\n\n\n\ncontract EthKassa{\n\n   using SafeMath for uint;\n    mapping (address => uint) public balances;\n    mapping (address => uint) public time;\n    \n    uint steep1 = 5000;\n    uint steep2 = 10000;\n    uint steep3 = 15000;\n    uint steep4 = 20000;\n    uint steep5 = 25000;\n    \n    uint dividendsTime = 1 days;\n    \n    event NewInvestor(address indexed investor, uint deposit);\n    event PayOffDividends(address indexed investor, uint value);\n    event NewDeposit(address indexed investor, uint value);\n    \n    uint public allDeposits;\n    uint public allPercents;\n    uint public allBeneficiaries;\n    uint public lastPayment;\n    \n    modifier isIssetRecepient(){\n        require(balances[msg.sender] > 0,  \"Please send something\");\n        _;\n    }\n    \n    \n    modifier timeCheck(){\n        \n         require(now >= time[msg.sender].add(dividendsTime), \"Too fast, bro, please wait a little\");\n         _;\n        \n    }\n    function getDepositMultiplier()public view  returns(uint){\n        uint percent = getPercent();\n        uint rate = balances[msg.sender].mul(percent).div(10000);\n        uint depositMultiplier = now.sub(time[msg.sender]).div(dividendsTime);\n        return(rate.mul(depositMultiplier));\n        \n    }\n    \n    function receivePayment()isIssetRecepient timeCheck private {\n        \n        uint depositMultiplier = getDepositMultiplier();\n        time[msg.sender] = now;\n        msg.sender.transfer(depositMultiplier);\n        \n        allPercents+=depositMultiplier;\n        lastPayment =now;\n        emit PayOffDividends(msg.sender, depositMultiplier);\n        \n        \n    }\n    \n    function authorizationPayment()public view returns(bool){\n        \n        if (balances[msg.sender] > 0 && now >= (time[msg.sender].add(dividendsTime))){\n            return (true);\n        }else{\n            return(false);\n        }\n        \n    }\n   \n     \n    function getPercent() public view returns(uint){\n        \n        uint contractBalance = address(this).balance;\n        \n        uint balanceSteep1 = steep1.mul(1 ether);\n        uint balanceSteep2 = steep2.mul(1 ether);\n        uint balanceSteep3 = steep3.mul(1 ether);\n        uint balanceSteep4 = steep4.mul(1 ether);\n        uint balanceSteep5 = steep5.mul(1 ether);\n        \n        \n        if(contractBalance < balanceSteep1){\n            return(300);\n        }\n        if(contractBalance >= balanceSteep1 && contractBalance < balanceSteep2){\n            return(350);\n        }\n        if(contractBalance >= balanceSteep2 && contractBalance < balanceSteep3){\n            return(400);\n        }\n        if(contractBalance >= balanceSteep3 && contractBalance < balanceSteep4){\n            return(450);\n        }\n        if(contractBalance >= balanceSteep4 && contractBalance < balanceSteep5){\n            return(500);\n        }\n        if(contractBalance >= balanceSteep5){\n            return(550);\n        }\n        \n        \n    }\n    \n    function createDeposit() private{\n        \n        if(msg.value > 0){\n            \n            if (balances[msg.sender] == 0){\n                emit NewInvestor(msg.sender, msg.value);\n                allBeneficiaries+=1;\n            }\n            \n            \n            if(getDepositMultiplier() > 0 && now >= time[msg.sender].add(dividendsTime) ){\n                receivePayment();\n            }\n            \n            balances[msg.sender] = balances[msg.sender].add(msg.value);\n            time[msg.sender] = now;\n            \n            allDeposits+=msg.value;\n            emit NewDeposit(msg.sender, msg.value);\n            \n        }else{\n            receivePayment();\n        }\n        \n    }\n    //BOF protection\n    function() external payable{\n        require((balances[msg.sender] + msg.value) >= balances[msg.sender]);\n        createDeposit();\n       \n    }\n    \n    \n}",
  "bytecode": "6080604052611388600255612710600355613a98600455614e206005556161a86006556201518060075534801561003557600080fd5b506107cb806100456000396000f3006080604052600436106100985763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631d5e970d81146100c057806327e235e3146100e75780632a6dd8c9146101155780633a2d87841461012a578063576570811461013f5780637c67a3e21461015457806381e170de14610182578063b5d29f2114610197578063b9c797f6146101c0575b3360009081526020819052604090205434810110156100b657600080fd5b6100be6101d5565b005b3480156100cc57600080fd5b506100d5610306565b60408051918252519081900360200190f35b3480156100f357600080fd5b506100d573ffffffffffffffffffffffffffffffffffffffff6004351661030c565b34801561012157600080fd5b506100d561031e565b34801561013657600080fd5b506100d561047a565b34801561014b57600080fd5b506100d5610504565b34801561016057600080fd5b506100d573ffffffffffffffffffffffffffffffffffffffff6004351661050a565b34801561018e57600080fd5b506100d561051c565b3480156101a357600080fd5b506101ac610522565b604080519115158252519081900360200190f35b3480156101cc57600080fd5b506100d5610575565b60003411156102fc573360009081526020819052604090205415156102345760408051348152905133917f3ea43d7cccef4082f1b722579c174bffc4fed08469258b70da775c6909aa7b28919081900360200190a2600a805460010190555b600061023e61047a565b11801561026c5750600754336000908152600160205260409020546102689163ffffffff61057b16565b4210155b1561027957610279610591565b33600090815260208190526040902054610299903463ffffffff61057b16565b3360008181526020818152604080832094909455600181529083902042905560088054349081019091558351908152925191927f2cb77763bc1e8490c1a904905c4d74b4269919aca114464f4bb4d911e60de364929081900390910190a2610304565b610304610591565b565b60095481565b60006020819052908152604090205481565b60008060008060008060003073ffffffffffffffffffffffffffffffffffffffff16319550610360670de0b6b3a764000060025461075290919063ffffffff16565b60035490955061037e90670de0b6b3a764000063ffffffff61075216565b60045490945061039c90670de0b6b3a764000063ffffffff61075216565b6005549093506103ba90670de0b6b3a764000063ffffffff61075216565b6006549092506103d890670de0b6b3a764000063ffffffff61075216565b9050848610156103ec5761012c9650610471565b8486101580156103fb57508386105b1561040a5761015e9650610471565b83861015801561041957508286105b15610428576101909650610471565b82861015801561043757508186105b15610446576101c29650610471565b81861015801561045557508086105b15610464576101f49650610471565b8086106104715761022696505b50505050505090565b60008060008061048861031e565b336000908152602081905260409020549093506104bf90612710906104b3908663ffffffff61075216565b9063ffffffff61077616565b600754336000908152600160205260409020549193506104ea916104b390429063ffffffff61078d16565b90506104fc828263ffffffff61075216565b935050505090565b60085481565b60016020526000908152604090205481565b600b5481565b336000908152602081905260408120548110801561056157506007543360009081526001602052604090205461055d9163ffffffff61057b16565b4210155b1561056e57506001610572565b5060005b90565b600a5481565b60008282018381101561058a57fe5b9392505050565b33600090815260208190526040812054811061060e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f506c656173652073656e6420736f6d657468696e670000000000000000000000604482015290519081900360640190fd5b600754336000908152600160205260409020546106309163ffffffff61057b16565b4210156106c457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f546f6f20666173742c2062726f2c20706c6561736520776169742061206c697460448201527f746c650000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6106cc61047a565b3360008181526001602052604080822042905551929350909183156108fc0291849190818181858888f1935050505015801561070c573d6000803e3d6000fd5b50600980548201905542600b5560408051828152905133917f38b3cd63b7181dfb8515c2b900548258df82fee21db5246ce3818c0efdf51685919081900360200190a250565b600082820283158061076e575082848281151561076b57fe5b04145b151561058a57fe5b600080828481151561078457fe5b04949350505050565b60008282111561079957fe5b509003905600a165627a7a72305820d132d8ef123c4ee536688b84fe5a48ee7880274b1b04fc8e25dcefd193d45a9d0029"
}