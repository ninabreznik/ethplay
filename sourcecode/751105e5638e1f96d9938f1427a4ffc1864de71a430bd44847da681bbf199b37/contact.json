{
  "address": "0x6ef5b9ae723fe059cac71ad620495575d19dac42",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UniContract",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-08\n*/\n\npragma solidity ^0.4.7;\n\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    //assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\n    //assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    //assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply=100000000; \n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value);\n  function approve(address spender, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract owned {\n     function owned() { owner = msg.sender; }\n     address owner;\n\n     // This contract only defines a modifier but does not use\n     // it - it will be used in derived contracts.\n     // The function body is inserted where the special symbol\n     // \"_;\" in the definition of a modifier appears.\n     // This means that if the owner calls this function, the\n     // function is executed and otherwise, an exception is\n     // thrown.\n     modifier onlyOwner {\n         if(msg.sender != owner)\n         {\n         throw;\n         }\n         _;\n     }\n }\n\n\ncontract UniContract is StandardToken, owned {\n\n\n   string public constant name = \"SaveUNICOINs\";\n   string public constant symbol = \"UCN\";\n   uint256 public constant decimals = 0;\n   \n   //founder & fund collector\n   address public multisig;\n   address public founder; \n   \n   \n   //Timings\n   uint public start;  \n   uint public end;\n   uint public launch;\n   \n   //Dynamic Pricing PRICE IN UCN\n   uint256 public PRICE = 300000;  \n   \n   //Dynamic Status of sold UCN Tokens\n   uint256 public OVERALLSOLD = 0;  \n   \n   //Maximum of Tokens to be sold 85.000.000\n   uint256 public MAXTOKENSOLD = 85000000;  \n   \n   \n   \n   \n  \n   function UniContract() onlyOwner { \n       founder = 0x204244062B04089b6Ef55981Ad82119cEBf54F88; \n       multisig= 0x9FA2d2231FE8ac207831B376aa4aE35671619960; \n       start = 1507543200;\n       end = 1509098400; \n \t   launch = 1509534000;\n       balances[founder] = balances[founder].add(15000000); // Founder (15% = 15.000.000 UCN)\n   }\n   \n   \n   \n   //Stage Pre-Sale Variables\n   \n   uint256 public constant PRICE_PRESALE = 300000;  \n   uint256 public constant FACTOR_PRESALE = 38;\n   uint256 public constant RANGESTART_PRESALE = 0; \n   uint256 public constant RANGEEND_PRESALE = 10000000; \n   \n   \n   //Stage 1\n   uint256 public constant PRICE_1 = 30000;  \n   uint256 public constant FACTOR_1 = 460;\n   uint256 public constant RANGESTART_1 = 10000001; \n   uint256 public constant RANGEEND_1 = 10100000;\n   \n   //Stage 2\n   uint256 public constant PRICE_2 = 29783;  \n   uint256 public constant FACTOR_2 = 495;\n   uint256 public constant RANGESTART_2 = 10100001; \n   uint256 public constant RANGEEND_2 = 11000000;\n   \n   //Stage 3\n   uint256 public constant PRICE_3 = 27964;  \n   uint256 public constant FACTOR_3 = 580;\n   uint256 public constant RANGESTART_3 = 11000001; \n   uint256 public constant RANGEEND_3 = 15000000;\n   \n   //Stage 4\n   uint256 public constant PRICE_4 = 21068;  \n   uint256 public constant FACTOR_4 = 800;\n   uint256 public constant RANGESTART_4 = 15000001; \n   uint256 public constant RANGEEND_4 = 20000000;\n   \n   //Stage 5\n   uint256 public constant PRICE_5 = 14818;  \n   uint256 public constant FACTOR_5 = 1332;\n   uint256 public constant RANGESTART_5 = 20000001; \n   uint256 public constant RANGEEND_5 = 30000000;\n   \n   //Stage 6\n   uint256 public constant PRICE_6 = 7310;  \n   uint256 public constant FACTOR_6 = 2700;\n   uint256 public constant RANGESTART_6 = 30000001; \n   uint256 public constant RANGEEND_6 = 40000000;\n   \n   //Stage 7\n   uint256 public constant PRICE_7 = 3607;  \n   uint256 public constant FACTOR_7 = 5450;\n   uint256 public constant RANGESTART_7 = 40000001; \n   uint256 public constant RANGEEND_7 = 50000000;\n   \n   //Stage 8\n   uint256 public constant PRICE_8 = 1772;  \n   uint256 public constant FACTOR_8 = 11000;\n   uint256 public constant RANGESTART_8 = 50000001; \n   uint256 public constant RANGEEND_8 = 60000000;\n   \n   //Stage 9\n   uint256 public constant PRICE_9 = 863;  \n   uint256 public constant FACTOR_9 = 23200;\n   uint256 public constant RANGESTART_9 = 60000001; \n   uint256 public constant RANGEEND_9 = 70000000;\n   \n   //Stage 10\n   uint256 public constant PRICE_10 = 432;  \n   uint256 public constant FACTOR_10 = 46000;\n   uint256 public constant RANGESTART_10 = 70000001; \n   uint256 public constant RANGEEND_10 = 80000000;\n   \n   //Stage 11\n   uint256 public constant PRICE_11 = 214;  \n   uint256 public constant FACTOR_11 = 78000;\n   uint256 public constant RANGESTART_11 = 80000001; \n   uint256 public constant RANGEEND_11 = 85000000;\n   \n\n   uint256 public UniCoinSize=0;\n\n \n   function () payable {\n     submitTokens(msg.sender);\n   }\n\n   /**\n    * @dev Creates tokens and send to the specified address.\n    * @param recipient The address which will recieve the new tokens.\n    */\n   function submitTokens(address recipient) payable {\n     \tif (msg.value == 0) {\n       \t\tthrow;\n     \t}\n\t\t\n   \t \t//Permit buying only between 10/09/17 - 10/27/2017 and after 11/01/2017\n   \t \tif((now > start && now < end) || now > launch)\n   \t \t\t{\t\t\t\t\n        \t\tuint256 tokens = msg.value.mul(PRICE).div( 1 ether);\n        \t\tif(tokens.add(OVERALLSOLD) > MAXTOKENSOLD)\n   \t \t\t\t\t{\n   \t\t\t\t\tthrow;\n   \t\t\t\t\t}\n\t\t\n   \t\t\t\t//Pre-Sale CAP 10,000,000 check\n   \t\t\t\tif(((tokens.add(OVERALLSOLD)) > RANGEEND_PRESALE) && (now > start && now < end))\n   \t\t\t\t\t{\n   \t\t\t\t\tthrow;\n   \t\t\t\t\t}\n\t\t\n \t\t\t\t   \n        \t\tOVERALLSOLD = OVERALLSOLD.add(tokens);\t\n\t\n   \t\t \t    // Send UCN to Recipient\t\n        \t\tbalances[recipient] = balances[recipient].add(tokens);\n\t \n   \t \t\t\t// Send Funds to MultiSig\n        \t\tif (!multisig.send(msg.value)) {\n          \t\t\tthrow;\n        \t\t\t}\n       \t\t}\n   \t  \t  else\n   \t  \t\t\t{\n   \t  \t  \t\tthrow;\n   \t \t\t   \t}\n\t\t\n\t\t\n\t\t//TIMING 10/09/17 - 10/27/17 OR CAP 10,000,000 reached\n\t\t\n\t\tif(now>start && now <end)\n\t\t{\n\t\t\t//Stage Pre-Sale Range 0 - 10,000,000 \n\t\t\tif(OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE) \n\t\t\t\t{\n\t\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\n\t\t\t\t}\n\t\t}\n\t\t\n\t\t//TIMING 11/01/17 Start Token Sale\n\t\tif(now>launch)\n\t\t{\n\t\t//Stage Post-Pre-Sale Range 0 - 10,000,000 \n\t\tif(OVERALLSOLD >= RANGESTART_PRESALE && OVERALLSOLD <= RANGEEND_PRESALE) \n\t\t\t{\n\t\t\tPRICE = PRICE_PRESALE - (1 + OVERALLSOLD - RANGESTART_PRESALE).div(FACTOR_PRESALE);\n\t\t\t}\n\t\t\n\t\t//Stage One 10,000,001 - 10,100,000 \n\t\tif(OVERALLSOLD >= RANGESTART_1 && OVERALLSOLD <= RANGEEND_1)\n\t\t\t{\n\t\t\tPRICE = PRICE_1 - (1 + OVERALLSOLD - RANGESTART_1).div(FACTOR_1);\n\t\t\t}\n\n\t\t//Stage Two 10,100,001 - 11,000,000\n\t\tif(OVERALLSOLD >= RANGESTART_2 && OVERALLSOLD <= RANGEEND_2)\n\t\t\t{\n\t\t\tPRICE = PRICE_2 - (1 + OVERALLSOLD - RANGESTART_2).div(FACTOR_2);\n\t\t\t}\n\n\t\t//Stage Three 11,000,001 - 15,000,000\n\t\tif(OVERALLSOLD >= RANGESTART_3 && OVERALLSOLD <= RANGEEND_3)\n\t\t\t{\n\t\t\tPRICE = PRICE_3 - (1 + OVERALLSOLD - RANGESTART_3).div(FACTOR_3);\n\t\t\t}\n\t\t\t\n\t\t//Stage Four 15,000,001 - 20,000,000\n\t\tif(OVERALLSOLD >= RANGESTART_4 && OVERALLSOLD <= RANGEEND_4)\n\t\t\t{\n\t\t\tPRICE = PRICE_4 - (1 + OVERALLSOLD - RANGESTART_4).div(FACTOR_4);\n\t\t\t}\n\t\t\t\n\t\t//Stage Five 20,000,001 - 30,000,000\n\t\tif(OVERALLSOLD >= RANGESTART_5 && OVERALLSOLD <= RANGEEND_5)\n\t\t\t{\n\t\t\tPRICE = PRICE_5 - (1 + OVERALLSOLD - RANGESTART_5).div(FACTOR_5);\n\t\t\t}\n\t\t\n\t\t//Stage Six 30,000,001 - 40,000,000\n\t\tif(OVERALLSOLD >= RANGESTART_6 && OVERALLSOLD <= RANGEEND_6)\n\t\t\t{\n\t\t\tPRICE = PRICE_6 - (1 + OVERALLSOLD - RANGESTART_6).div(FACTOR_6);\n\t\t\t}\t\n\t\t\n\t\t//Stage Seven 40,000,001 - 50,000,000\n\t\tif(OVERALLSOLD >= RANGESTART_7 && OVERALLSOLD <= RANGEEND_7)\n\t\t\t{\n\t\t\tPRICE = PRICE_7 - (1 + OVERALLSOLD - RANGESTART_7).div(FACTOR_7);\n\t\t\t}\n\t\t\t\n\t\t//Stage Eight 50,000,001 - 60,000,000\n\t\tif(OVERALLSOLD >= RANGESTART_8 && OVERALLSOLD <= RANGEEND_8)\n\t\t\t{\n\t\t\tPRICE = PRICE_8 - (1 + OVERALLSOLD - RANGESTART_8).div(FACTOR_8);\n\t\t\t}\n\t\t\n\t\t//Stage Nine 60,000,001 - 70,000,000\n\t\tif(OVERALLSOLD >= RANGESTART_9 && OVERALLSOLD <= RANGEEND_9)\n\t\t\t{\n\t\t\tPRICE = PRICE_9 - (1 + OVERALLSOLD - RANGESTART_9).div(FACTOR_9);\n\t\t\t}\n\t\t\n\t\t//Stage Ten 70,000,001 - 80,000,000\n\t\tif(OVERALLSOLD >= RANGESTART_10 && OVERALLSOLD <= RANGEEND_10)\n\t\t\t{\n\t\t\tPRICE = PRICE_10 - (1 + OVERALLSOLD - RANGESTART_10).div(FACTOR_10);\n\t\t\t}\t\n\t\t\n\t\t//Stage Eleven 80,000,001 - 85,000,000\n\t\tif(OVERALLSOLD >= RANGESTART_11 && OVERALLSOLD <= RANGEEND_11)\n\t\t\t{\n\t\t\tPRICE = PRICE_11 - (1 + OVERALLSOLD - RANGESTART_11).div(FACTOR_11);\n\t\t\t}\n\t\t}\n\t\t\n\t\n   }\n\n\t \n   function submitEther(address recipient) payable {\n     if (msg.value == 0) {\n       throw;\n     }\n\n     if (!recipient.send(msg.value)) {\n       throw;\n     }\n    \n   }\n\n\n  //Unicorn Shoutbox\n\n  struct MessageQueue {\n           string message; \n  \t\t   string from;\n           uint expireTimestamp;  \n           uint startTimestamp;\n           address sender; \n       }\n\n\t \n     uint256 public constant maxSpendToken = 3600; //Message should last approx. 1 hour max\n\n     MessageQueue[] public mQueue;\n \n\t\n \n      function addMessageToQueue(string msg_from, string name_from, uint spendToken) {\n        if(balances[msg.sender]>spendToken && spendToken>=10)\n        {\n           if(spendToken>maxSpendToken) \n               {\n                   spendToken=maxSpendToken;\n               }\n           \n\t\t   UniCoinSize=UniCoinSize+spendToken;\n           \n           balances[msg.sender] = balances[msg.sender].sub(spendToken);\n          \n\t\t  //If first message or last message already expired set newest timestamp\n  \t\t  uint expireTimestamp=now;\n\t\t  if(mQueue.length>0)\n\t\t\t{\n\t\t\t if(mQueue[mQueue.length-1].expireTimestamp>now)\n\t\t\t \t{\n\t\t\t \texpireTimestamp = mQueue[mQueue.length-1].expireTimestamp;\n\t\t\t\t}\n\t\t\t} \n\t\t\n\t\t \n\t\t \n           mQueue.push(MessageQueue({\n                   message: msg_from, \n  \t\t\t\t   from: name_from,\n                   expireTimestamp: expireTimestamp.add(spendToken)+60,  //give at least approx 60 seconds per msg\n                   startTimestamp: expireTimestamp,\n                   sender: msg.sender\n               }));\n    \n        \n\t\t \n        }\n\t\telse {\n\t\t      throw;\n\t\t      }\n      }\n\t  \n\t\n    function feedUnicorn(uint spendToken) {\n\t\n   \t \tif(balances[msg.sender]>spendToken)\n        \t{\n       \t \tUniCoinSize=UniCoinSize.add(spendToken);\n        \tbalances[msg.sender] = balances[msg.sender].sub(spendToken);\n\t\t\t}\n\t\t\n\t } \n\t\n\t\n   function getQueueLength() public constant returns (uint256 result) {\n\t return mQueue.length;\n   }\n   function getMessage(uint256 i) public constant returns (string, string, uint, uint, address){\n     return (mQueue[i].message,mQueue[i].from,mQueue[i].expireTimestamp,mQueue[i].startTimestamp,mQueue[i].sender );\n   }\n   function getPrice() constant returns (uint256 result) {\n     return PRICE;\n   }\n   function getSupply() constant returns (uint256 result) {\n     return totalSupply;\n   }\n   function getSold() constant returns (uint256 result) {\n     return OVERALLSOLD;\n   }\n   function getUniCoinSize() constant returns (uint256 result) {    \n     return UniCoinSize; \n   } \n    function getAddress() constant returns (address) {\n     return this;\n   }\n    \n\n\n  \n   // ADMIN Functions\n\n   \n   //In emergency cases to stop or change timings \n   function aSetStart(uint256 nstart) onlyOwner {\n     start=nstart;\n   }\n   function aSetEnd(uint256 nend) onlyOwner {\n     end=nend;\n   }\n   function aSetLaunch(uint256 nlaunch) onlyOwner {\n     launch=nlaunch;\n   }\n    \n\n   //We don't want the Unicorn to spread hateful messages \n   function aDeleteMessage(uint256 i,string f,string m) onlyOwner{\n     mQueue[i].message=m;\n\t mQueue[i].from=f; \n\t\t }\n   \n   //Clean house from time to time\n   function aPurgeMessages() onlyOwner{\n   delete mQueue; \n   }\n\n }",
  "bytecode": "60606040526305f5e100600055620493e06009556000600a55630510ff40600b556000600c5534156200002e57fe5b5b5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620000d05760006000fd5b73204244062b04089b6ef55981ad82119cebf54f88600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550739fa2d2231fe8ac207831b376aa4ae35671619960600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506359db48a06006819055506359f303a06007819055506359f9a9306008819055506200022262e4e1c060016000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200028f6401000000000262002e3e179091906401000000009004565b60016000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b620002a3565b6000600082840190508091505b5092915050565b6130db80620002b36000396000f300606060405236156103d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301339c21146103e257806306fdde0314610408578063095ea7b3146104a15780630b1b92dd146104e05780630e923d3b146105065780631114811a1461053457806312267abc1461055a578063132e63ba14610580578063145000ab146105a657806315519af1146105cc578063168fb79d146105f2578063169ff3751461061857806318160ddd1461063e5780631cc78eb6146106645780632202dcad1461068a57806323b872dd146106b05780632a55cab61461070e5780632ab7961e146107345780632d31908f146107da5780632e0c6c3614610800578063313ce5671461082657806332ba4b8b1461084c57806332bf1def1461087257806333455dd014610898578063361819e8146108be57806338cc4831146108e457806339fdf2fd146109365780633a2647cf1461095c5780633ed28f3914610a02578063402caccd14610a285780634783c35b14610a4e5780634891f40114610aa05780634a5dcdc914610ac65780634d853ee514610aec5780634e7ec7e314610b3e57806350ca73c814610b6457806351ca0eb814610b8457806353acae4a14610baa57806356d4469414610bd05780635abacc8914610bf657806362676d7814610c1c5780636660ead114610c425780636c9c2faf14610c685780636dc55f7e14610c8e57806370a0823114610cb457806371b1d2d314610cfe5780637ab7e49214610d2457806386f79edb14610d4a57806387d5418f14610eac5780638ba9a7bb14610ecc5780638d859f3e14610ef25780638f282b8714610f185780638fb67f6014610f3e57806395d89b4114610f50578063961f1d9614610fe9578063969846311461100f57806397eede111461103557806398d5fdca1461105b578063a9059cbb14611081578063a9d48032146110c0578063ac3cdf78146110e6578063ad2ec7401461110c578063adb506a614611132578063afa6c73514611158578063b2bc6c191461117e578063b725d84f146111a4578063b8f77005146111ca578063be9a6555146111f0578063c72e8baf14611216578063d03bf1191461123c578063d652823114611262578063d7cc43bf14611288578063dc1d672d146112a8578063dd62ed3e14611428578063df13569d14611491578063e346f79e146114b7578063e4c60492146114e5578063e90859571461150b578063ea6b137714611531578063edd9e18314611557578063efbe1c1c14611577578063efe7c7911461159d578063f2c8b676146115c3578063fca9bb5f146115e9575b6103e05b6103dd3361160f565b5b565b005b34156103ea57fe5b6103f2611be3565b6040518082815260200191505060405180910390f35b341561041057fe5b610418611be9565b6040518080602001828103825283818151815260200191508051906020019080838360008314610467575b80518252602083111561046757602082019150602081019050602083039250610443565b505050905090810190601f1680156104935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104a957fe5b6104de600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611c23565b005b34156104e857fe5b6104f0611da7565b6040518082815260200191505060405180910390f35b610532600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611dae565b005b341561053c57fe5b610544611e05565b6040518082815260200191505060405180910390f35b341561056257fe5b61056a611e0b565b6040518082815260200191505060405180910390f35b341561058857fe5b610590611e11565b6040518082815260200191505060405180910390f35b34156105ae57fe5b6105b6611e17565b6040518082815260200191505060405180910390f35b34156105d457fe5b6105dc611e1d565b6040518082815260200191505060405180910390f35b34156105fa57fe5b610602611e22565b6040518082815260200191505060405180910390f35b341561062057fe5b610628611e2a565b6040518082815260200191505060405180910390f35b341561064657fe5b61064e611e31565b6040518082815260200191505060405180910390f35b341561066c57fe5b610674611e37565b6040518082815260200191505060405180910390f35b341561069257fe5b61069a611e3e565b6040518082815260200191505060405180910390f35b34156106b857fe5b61070c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611e44565b005b341561071657fe5b61071e6120ee565b6040518082815260200191505060405180910390f35b341561073c57fe5b6107d8600480803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506120f4565b005b34156107e257fe5b6107ea6121ca565b6040518082815260200191505060405180910390f35b341561080857fe5b6108106121d0565b6040518082815260200191505060405180910390f35b341561082e57fe5b6108366121d7565b6040518082815260200191505060405180910390f35b341561085457fe5b61085c6121dc565b6040518082815260200191505060405180910390f35b341561087a57fe5b6108826121e4565b6040518082815260200191505060405180910390f35b34156108a057fe5b6108a86121ea565b6040518082815260200191505060405180910390f35b34156108c657fe5b6108ce6121f0565b6040518082815260200191505060405180910390f35b34156108ec57fe5b6108f46121f8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561093e57fe5b610946612201565b6040518082815260200191505060405180910390f35b341561096457fe5b610a00600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050612207565b005b3415610a0a57fe5b610a126124aa565b6040518082815260200191505060405180910390f35b3415610a3057fe5b610a386124b5565b6040518082815260200191505060405180910390f35b3415610a5657fe5b610a5e6124bd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610aa857fe5b610ab06124e3565b6040518082815260200191505060405180910390f35b3415610ace57fe5b610ad66124e9565b6040518082815260200191505060405180910390f35b3415610af457fe5b610afc6124f1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610b4657fe5b610b4e612517565b6040518082815260200191505060405180910390f35b3415610b6c57fe5b610b82600480803590602001909190505061251f565b005b3415610b8c57fe5b610b94612588565b6040518082815260200191505060405180910390f35b3415610bb257fe5b610bba61258d565b6040518082815260200191505060405180910390f35b3415610bd857fe5b610be0612594565b6040518082815260200191505060405180910390f35b3415610bfe57fe5b610c0661259a565b6040518082815260200191505060405180910390f35b3415610c2457fe5b610c2c6125a2565b6040518082815260200191505060405180910390f35b3415610c4a57fe5b610c526125aa565b6040518082815260200191505060405180910390f35b3415610c7057fe5b610c786125b2565b6040518082815260200191505060405180910390f35b3415610c9657fe5b610c9e6125bd565b6040518082815260200191505060405180910390f35b3415610cbc57fe5b610ce8600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506125c5565b6040518082815260200191505060405180910390f35b3415610d0657fe5b610d0e61260f565b6040518082815260200191505060405180910390f35b3415610d2c57fe5b610d34612616565b6040518082815260200191505060405180910390f35b3415610d5257fe5b610d68600480803590602001909190505061261d565b6040518080602001806020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835288818151815260200191508051906020019080838360008314610df9575b805182526020831115610df957602082019150602081019050602083039250610dd5565b505050905090810190601f168015610e255780820380516001836020036101000a031916815260200191505b50838103825287818151815260200191508051906020019080838360008314610e6d575b805182526020831115610e6d57602082019150602081019050602083039250610e49565b505050905090810190601f168015610e995780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b3415610eb457fe5b610eca6004808035906020019091905050612856565b005b3415610ed457fe5b610edc6128bf565b6040518082815260200191505060405180910390f35b3415610efa57fe5b610f026128c5565b6040518082815260200191505060405180910390f35b3415610f2057fe5b610f286128cb565b6040518082815260200191505060405180910390f35b3415610f4657fe5b610f4e6128d6565b005b3415610f5857fe5b610f60612945565b6040518080602001828103825283818151815260200191508051906020019080838360008314610faf575b805182526020831115610faf57602082019150602081019050602083039250610f8b565b505050905090810190601f168015610fdb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610ff157fe5b610ff961297f565b6040518082815260200191505060405180910390f35b341561101757fe5b61101f612986565b6040518082815260200191505060405180910390f35b341561103d57fe5b61104561298e565b6040518082815260200191505060405180910390f35b341561106357fe5b61106b612994565b6040518082815260200191505060405180910390f35b341561108957fe5b6110be600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061299f565b005b34156110c857fe5b6110d0612b33565b6040518082815260200191505060405180910390f35b34156110ee57fe5b6110f6612b39565b6040518082815260200191505060405180910390f35b341561111457fe5b61111c612b41565b6040518082815260200191505060405180910390f35b341561113a57fe5b611142612b47565b6040518082815260200191505060405180910390f35b341561116057fe5b611168612b4d565b6040518082815260200191505060405180910390f35b341561118657fe5b61118e612b54565b6040518082815260200191505060405180910390f35b34156111ac57fe5b6111b4612b59565b6040518082815260200191505060405180910390f35b34156111d257fe5b6111da612b5f565b6040518082815260200191505060405180910390f35b34156111f857fe5b611200612b6d565b6040518082815260200191505060405180910390f35b341561121e57fe5b611226612b73565b6040518082815260200191505060405180910390f35b341561124457fe5b61124c612b79565b6040518082815260200191505060405180910390f35b341561126a57fe5b611272612b81565b6040518082815260200191505060405180910390f35b341561129057fe5b6112a66004808035906020019091905050612b87565b005b34156112b057fe5b6112c66004808035906020019091905050612bf0565b6040518080602001806020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381038352888181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156113915780601f1061136657610100808354040283529160200191611391565b820191906000526020600020905b81548152906001019060200180831161137457829003601f168201915b50508381038252878181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156114145780601f106113e957610100808354040283529160200191611414565b820191906000526020600020905b8154815290600101906020018083116113f757829003601f168201915b505097505050505050505060405180910390f35b341561143057fe5b61147b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612c54565b6040518082815260200191505060405180910390f35b341561149957fe5b6114a1612cdc565b6040518082815260200191505060405180910390f35b6114e3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061160f565b005b34156114ed57fe5b6114f5612ce2565b6040518082815260200191505060405180910390f35b341561151357fe5b61151b612cea565b6040518082815260200191505060405180910390f35b341561153957fe5b611541612cf1565b6040518082815260200191505060405180910390f35b341561155f57fe5b6115756004808035906020019091905050612cf7565b005b341561157f57fe5b611587612df3565b6040518082815260200191505060405180910390f35b34156115a557fe5b6115ad612df9565b6040518082815260200191505060405180910390f35b34156115cb57fe5b6115d3612e01565b6040518082815260200191505060405180910390f35b34156115f157fe5b6115f9612e07565b6040518082815260200191505060405180910390f35b600060003414156116205760006000fd5b60065442118015611632575060075442105b8061163e575060085442115b156117f257611672670de0b6b3a764000061166460095434612e0d90919063ffffffff16565b612e2190919063ffffffff16565b9050600b5461168c600a5483612e3e90919063ffffffff16565b11156116985760006000fd5b629896806116b1600a5483612e3e90919063ffffffff16565b1180156116cc5750600654421180156116cb575060075442105b5b156116d75760006000fd5b6116ec81600a54612e3e90919063ffffffff16565b600a8190555061174481600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e3e90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156117ed5760006000fd5b6117f8565b60006000fd5b6006544211801561180a575060075442105b15611855576000600a5410158015611827575062989680600a5411155b156118545761184860266000600a5460010103612e2190919063ffffffff16565b620493e0036009819055505b5b600854421115611bde576000600a5410158015611877575062989680600a5411155b156118a45761189860266000600a5460010103612e2190919063ffffffff16565b620493e0036009819055505b62989681600a54101580156118be5750629a1d20600a5411155b156118ed576118e26101cc62989681600a5460010103612e2190919063ffffffff16565b617530036009819055505b629a1d21600a5410158015611907575062a7d8c0600a5411155b156119365761192b6101ef629a1d21600a5460010103612e2190919063ffffffff16565b617457036009819055505b62a7d8c1600a5410158015611950575062e4e1c0600a5411155b1561197f5761197461024462a7d8c1600a5460010103612e2190919063ffffffff16565b616d3c036009819055505b62e4e1c1600a541015801561199a57506301312d00600a5411155b156119c9576119be61032062e4e1c1600a5460010103612e2190919063ffffffff16565b61524c036009819055505b6301312d01600a54101580156119e557506301c9c380600a5411155b15611a1557611a0a6105346301312d01600a5460010103612e2190919063ffffffff16565b6139e2036009819055505b6301c9c381600a5410158015611a3157506302625a00600a5411155b15611a6157611a56610a8c6301c9c381600a5460010103612e2190919063ffffffff16565b611c8e036009819055505b6302625a01600a5410158015611a7d57506302faf080600a5411155b15611aad57611aa261154a6302625a01600a5460010103612e2190919063ffffffff16565b610e17036009819055505b6302faf081600a5410158015611ac957506303938700600a5411155b15611af957611aee612af86302faf081600a5460010103612e2190919063ffffffff16565b6106ec036009819055505b6303938701600a5410158015611b15575063042c1d80600a5411155b15611b4557611b3a615aa06303938701600a5460010103612e2190919063ffffffff16565b61035f036009819055505b63042c1d81600a5410158015611b6157506304c4b400600a5411155b15611b9157611b8661b3b063042c1d81600a5460010103612e2190919063ffffffff16565b6101b0036009819055505b6304c4b401600a5410158015611bad5750630510ff40600a5411155b15611bdd57611bd3620130b06304c4b401600a5460010103612e2190919063ffffffff16565b60d6036009819055505b5b5b5050565b60085481565b604060405190810160405280600c81526020017f53617665554e49434f494e73000000000000000000000000000000000000000081525081565b60008114158015611cb157506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15611cbc5760006000fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b620130b081565b6000341415611dbd5760006000fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f193505050501515611e015760006000fd5b5b50565b615aa081565b611c8e81565b6106ec81565b61745781565b600081565b6302625a0181565b62a7d8c081565b60005481565b629a1d2081565b61154a81565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611f1782600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e3e90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611fac82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e5290919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120028282612e5290919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b50505050565b600c5481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121515760006000fd5b80600d8481548110151561216157fe5b906000526020600020906005020160005b506000019080519060200190612189929190612e60565b5081600d8481548110151561219a57fe5b906000526020600020906005020160005b5060010190805190602001906121c2929190612e60565b505b5b505050565b610e1781565b62e4e1c081565b600081565b6301c9c38081565b6101ef81565b6139e281565b6301312d0081565b60003090505b90565b600a5481565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541180156122585750600a8210155b1561249d57610e1082111561226d57610e1091505b81600c5401600c819055506122ca82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e5290919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055504290506000600d8054905011156123835742600d6001600d805490500381548110151561233657fe5b906000526020600020906005020160005b5060020154111561238257600d6001600d805490500381548110151561236957fe5b906000526020600020906005020160005b506002015490505b5b600d80548060010182816123979190612ee0565b916000526020600020906005020160005b60a060405190810160405280888152602001878152602001603c6123d58888612e3e90919063ffffffff16565b0181526020018581526020013373ffffffffffffffffffffffffffffffffffffffff168152509091909150600082015181600001908051906020019061241c929190612f12565b506020820151816001019080519060200190612439929190612f12565b50604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506124a3565b60006000fd5b5b50505050565b6000600c5490505b90565b6301c9c38181565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61753081565b63042c1d8081565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6302625a0081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561257c5760006000fd5b806008819055505b5b50565b602681565b62e4e1c181565b61524c81565b630393870181565b630393870081565b630510ff4081565b600060005490505b90565b6302faf08081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6298968081565b629a1d2181565b612625612f92565b61262d612f92565b600060006000600d8681548110151561264257fe5b906000526020600020906005020160005b50600001600d8781548110151561266657fe5b906000526020600020906005020160005b50600101600d8881548110151561268a57fe5b906000526020600020906005020160005b5060020154600d898154811015156126af57fe5b906000526020600020906005020160005b5060030154600d8a8154811015156126d457fe5b906000526020600020906005020160005b5060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561279f5780601f106127745761010080835404028352916020019161279f565b820191906000526020600020905b81548152906001019060200180831161278257829003601f168201915b50505050509450838054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561283b5780601f106128105761010080835404028352916020019161283b565b820191906000526020600020905b81548152906001019060200180831161281e57829003601f168201915b50505050509350945094509450945094505b91939590929450565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128b35760006000fd5b806007819055505b5b50565b61032081565b60095481565b6000600a5490505b90565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156129335760006000fd5b600d60006129419190612fa6565b5b5b565b604060405190810160405280600381526020017f55434e000000000000000000000000000000000000000000000000000000000081525081565b62a7d8c181565b63042c1d8181565b61b3b081565b600060095490505b90565b6129f181600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e5290919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a8681600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e3e90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5050565b610e1081565b6304c4b40081565b61035f81565b61053481565b620493e081565b60d681565b6101b081565b6000600d8054905090505b90565b60065481565b616d3c81565b6304c4b40181565b61024481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612be45760006000fd5b806006819055505b5b50565b600d81815481101515612bff57fe5b906000526020600020906005020160005b91509050806000019080600101908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905085565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b610a8c81565b6302faf08181565b6298968181565b600b5481565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115612def57612d5381600c54612e3e90919063ffffffff16565b600c81905550612dab81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e5290919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b50565b60075481565b6301312d0181565b612af881565b6101cc81565b6000600082840290508091505b5092915050565b600060008284811515612e3057fe5b0490508091505b5092915050565b6000600082840190508091505b5092915050565b600081830390505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ea157805160ff1916838001178555612ecf565b82800160010185558215612ecf579182015b82811115612ece578251825591602001919060010190612eb3565b5b509050612edc9190612fcb565b5090565b815481835581811511612f0d57600502816005028360005260206000209182019101612f0c9190612ff0565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612f5357805160ff1916838001178555612f81565b82800160010185558215612f81579182015b82811115612f80578251825591602001919060010190612f65565b5b509050612f8e9190612fcb565b5090565b602060405190810160405280600081525090565b5080546000825560050290600052602060002090810190612fc79190612ff0565b5b50565b612fed91905b80821115612fe9576000816000905550600101612fd1565b5090565b90565b61306491905b808211156130605760006000820160006130109190613067565b6001820160006130209190613067565b600282016000905560038201600090556004820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600501612ff6565b5090565b90565b50805460018160011615610100020316600290046000825580601f1061308d57506130ac565b601f0160209004906000526020600020908101906130ab9190612fcb565b5b505600a165627a7a72305820c94bbce399a067cc15af5ae8567efe9e15f843420032d21ac779a8f16cf49a7b0029"
}