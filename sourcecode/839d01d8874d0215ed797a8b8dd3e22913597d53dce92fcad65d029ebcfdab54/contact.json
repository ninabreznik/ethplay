{
  "address": "0x14f381be791ca9b13bcdc214c514a09864176d52",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TwoYearDreamTokensVesting",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-29\n*/\n\npragma solidity 0.5.8;\n\ncontract ERC20TokenInterface {\n\n    function totalSupply () external view returns (uint);\n    function balanceOf (address tokenOwner) external view returns (uint balance);\n    function transfer (address to, uint tokens) external returns (bool success);\n    function transferFrom (address from, address to, uint tokens) external returns (bool success);\n\n}\n\n/**\n * Math operations with safety checks that throw on overflows.\n */\nlibrary SafeMath {\n\n    function mul (uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div (uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    function sub (uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add (uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n}\n\n/**\n * DreamTeam tokens vesting smart contract. \n * This vesting smart contracts releases 25% of tokens 6 months after the smart contract was initialized,\n * 50% of tokens after 1 year, 75% of tokens after 1 year 6 months and 100% tokens are available after 2 years.\n * 0.1% of tokens are available right after vesting contract initialization.\n * The withdrawal address is set during the initialization (initializeVestingFor function).\n * To withdraw tokens, send an empty transaction to this smart contract address (send 0 ETH).\n * Once vesting period (2 year) ends and after all tokens are withdrawn, this smart contract self-destructs.\n */\ncontract TwoYearDreamTokensVesting {\n\n    /**\n     * Sets up an array with vesting stages dates and percentages.\n     */\n    function vestingRules () internal {\n\n        uint256 year = halfOfYear * 2;\n                                                                        // Token availability stages:\n        stages[0].date = vestingStartUnixTimestamp;                     // Right after initialization\n        stages[1].date = vestingStartUnixTimestamp + halfOfYear;        // 1/2 years after initialization\n        stages[2].date = vestingStartUnixTimestamp + year;              // 1 year after initialization\n        stages[3].date = vestingStartUnixTimestamp + year + halfOfYear; // 1 + 1/2 years after initialization\n        stages[4].date = vestingStartUnixTimestamp + (year * 2);        // 2 years after initialization\n                                                    // Token availability values:\n        stages[0].tokensUnlockedPercentage = 10;    // 0.1%\n        stages[1].tokensUnlockedPercentage = 2500;  // 25%\n        stages[2].tokensUnlockedPercentage = 5000;  // 50%\n        stages[3].tokensUnlockedPercentage = 7500;  // 75%\n        stages[4].tokensUnlockedPercentage = 10000; // 100%\n\n    }\n\n    using SafeMath for uint256;\n\n    /**\n     * Address of DREAM token.\n     */\n    ERC20TokenInterface public dreamToken;\n\n    /**\n     * Address which will receive tokens. This address is set during initialization.\n     */\n    address payable public withdrawalAddress = address(0x0);\n    \n    uint256 public constant halfOfYear = 182 days + 15 hours; // x2 = ~365.25 days in a year\n\n    /**\n     * Tokens vesting stage structure with vesting date and tokens allowed to unlock.\n     */\n    struct VestingStage {\n        uint256 date;\n        uint256 tokensUnlockedPercentage;\n    }\n\n    /**\n     * Array for storing all vesting stages with structure defined above.\n     */\n    VestingStage[5] public stages;\n\n    /**\n     * Total amount of tokens to send.\n     */\n    uint256 public initialTokensBalance;\n\n    /**\n     * Amount of tokens already sent.\n     */\n    uint256 public tokensSent;\n\n    /**\n     * Unix timestamp at when the vesting has begun.\n     */\n    uint256 public vestingStartUnixTimestamp;\n\n    /**\n     * Account that deployed this smart contract, which is authorized to initialize vesting.\n     */\n    address public deployer;\n\n    modifier deployerOnly { require(msg.sender == deployer); _; }\n    modifier whenInitialized { require(withdrawalAddress != address(0x0)); _; }\n    modifier whenNotInitialized { require(withdrawalAddress == address(0x0)); _; }\n\n    /**\n     * Event raised on each successful withdraw.\n     */\n    event Withdraw(uint256 amount, uint256 timestamp);\n\n    /**\n     * Dedicate vesting smart contract for a particular token during deployment.\n     */\n    constructor (ERC20TokenInterface addr) public {\n        dreamToken = addr;\n        deployer = msg.sender;\n    }\n\n    /**\n     * Fallback: function that releases locked tokens within schedule. Send an empty transaction to this\n     * smart contract for withdrawalAddress to receive tokens.\n     */\n    function () external {\n        withdrawTokens();\n    }\n\n    /**\n     * Vesting initialization function. Contract deployer has to trigger this function after vesting amount\n     * was sent to this smart contract.\n     * @param account Account to initialize vesting for.\n     */\n    function initializeVestingFor (address payable account) external deployerOnly whenNotInitialized {\n        initialTokensBalance = dreamToken.balanceOf(address(this));\n        require(initialTokensBalance != 0);\n        withdrawalAddress = account;\n        vestingStartUnixTimestamp = block.timestamp;\n        vestingRules();\n    }\n\n    /**\n     * Calculate tokens amount that is sent to withdrawalAddress.\n     * @return Amount of tokens that can be sent.\n     */\n    function getAvailableTokensToWithdraw () public view returns (uint256) {\n        uint256 tokensUnlockedPercentage = getTokensUnlockedPercentage();\n        // withdrawalAddress will only be able to get all additional tokens sent to this smart contract\n        // at the end of the vesting period\n        if (tokensUnlockedPercentage >= 10000) {\n            return dreamToken.balanceOf(address(this));\n        } else {\n            return getTokensAmountAllowedToWithdraw(tokensUnlockedPercentage);\n        }\n    }\n\n    /**\n     * Function for tokens withdrawal from the vesting smart contract. Triggered from the fallback function.\n     */\n    function withdrawTokens () private whenInitialized {\n        uint256 tokensToSend = getAvailableTokensToWithdraw();\n        sendTokens(tokensToSend);\n        if (dreamToken.balanceOf(address(this)) == 0) { // When all tokens were sent, destroy this smart contract\n            selfdestruct(withdrawalAddress);\n        }\n    }\n\n    /**\n     * Send tokens to withdrawalAddress.\n     * @param tokensToSend Amount of tokens will be sent.\n     */\n    function sendTokens (uint256 tokensToSend) private {\n        if (tokensToSend == 0) {\n            return;\n        }\n        tokensSent = tokensSent.add(tokensToSend); // Update tokensSent variable to send correct amount later\n        dreamToken.transfer(withdrawalAddress, tokensToSend); // Send allowed number of tokens\n        emit Withdraw(tokensToSend, now); // Emitting a notification that tokens were withdrawn\n    }\n\n    /**\n     * Calculate tokens available for withdrawal.\n     * @param tokensUnlockedPercentage Percent of tokens that are allowed to be sent.\n     * @return Amount of tokens that can be sent according to provided percentage.\n     */\n    function getTokensAmountAllowedToWithdraw (uint256 tokensUnlockedPercentage) private view returns (uint256) {\n        uint256 totalTokensAllowedToWithdraw = initialTokensBalance.mul(tokensUnlockedPercentage).div(10000);\n        uint256 unsentTokensAmount = totalTokensAllowedToWithdraw.sub(tokensSent);\n        return unsentTokensAmount;\n    }\n\n    /**\n     * Get tokens unlocked percentage on current stage.\n     * @return Percent of tokens allowed to be sent.\n     */\n    function getTokensUnlockedPercentage () private view returns (uint256) {\n\n        uint256 allowedPercent;\n\n        for (uint8 i = 0; i < stages.length; i++) {\n            if (now >= stages[i].date) {\n                allowedPercent = stages[i].tokensUnlockedPercentage;\n            }\n        }\n\n        return allowedPercent;\n\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableTokensToWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTokensBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dreamToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"initializeVestingFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"tokensUnlockedPercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halfOfYear\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingStartUnixTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]",
  "bytecode": "6080604052600180546001600160a01b031916905534801561002057600080fd5b506040516020806106f68339810180604052602081101561004057600080fd5b5051600080546001600160a01b039092166001600160a01b0319928316179055600f80549091163317905561067c8061007a6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063845ddcb211610066578063845ddcb21461011c578063a625d2f414610152578063d5f394881461015a578063f2bcd02214610162578063f60b94061461016a5761009e565b8063045e240f146100a85780631f130761146100c25780633c72f070146100ca57806341c1f5b4146100d2578063420b5fe0146100f6575b6100a6610172565b005b6100b061022b565b60408051918252519081900360200190f35b6100b06102d4565b6100b06102da565b6100da6102e0565b604080516001600160a01b039092168252519081900360200190f35b6100a66004803603602081101561010c57600080fd5b50356001600160a01b03166102ef565b6101396004803603602081101561013257600080fd5b50356103cb565b6040805192835260208301919091528051918290030190f35b6100b06103ea565b6100da6103f1565b6100da610400565b6100b061040f565b6001546001600160a01b031661018757600080fd5b600061019161022b565b905061019c81610415565b60005460408051600160e01b6370a0823102815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156101ea57600080fd5b505afa1580156101fe573d6000803e3d6000fd5b505050506040513d602081101561021457600080fd5b5051610228576001546001600160a01b0316ff5b50565b6000806102366104fd565b905061271081106102c45760005460408051600160e01b6370a0823102815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561028f57600080fd5b505afa1580156102a3573d6000803e3d6000fd5b505050506040513d60208110156102b957600080fd5b505191506102d19050565b6102cd81610552565b9150505b90565b600d5481565b600c5481565b6000546001600160a01b031681565b600f546001600160a01b0316331461030657600080fd5b6001546001600160a01b03161561031c57600080fd5b60005460408051600160e01b6370a0823102815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561036a57600080fd5b505afa15801561037e573d6000803e3d6000fd5b505050506040513d602081101561039457600080fd5b5051600c8190556103a457600080fd5b600180546001600160a01b0319166001600160a01b03831617905542600e5561022861059d565b600281600581106103d857fe5b60020201805460019091015490915082565b62f0c3f081565b600f546001600160a01b031681565b6001546001600160a01b031681565b600e5481565b8061041f57610228565b600d54610432908263ffffffff6105ea16565b600d556000805460015460408051600160e01b63a9059cbb0281526001600160a01b039283166004820152602481018690529051919092169263a9059cbb92604480820193602093909283900390910190829087803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b505050506040513d60208110156104be57600080fd5b50506040805182815242602082015281517f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8929181900390910190a150565b600080805b60058160ff16101561054c5760028160ff166005811061051e57fe5b600202015442106105445760028160ff166005811061053957fe5b600202016001015491505b600101610502565b50905090565b60008061057c61271061057085600c5461060090919063ffffffff16565b9063ffffffff61062816565b90506000610595600d548361063b90919063ffffffff16565b949350505050565b600e54600281905562f0c3f081016004556301e187e081016006556302d24bd081016008556303c30fc001600a9081556003556109c4600555611388600755611d4c600955612710600b55565b818101828110156105fa57600080fd5b92915050565b60008261060f575060006105fa565b508181028183828161061d57fe5b04146105fa57600080fd5b600081838161063357fe5b049392505050565b60008282111561064a57600080fd5b5090039056fea165627a7a723058208942ec91157ab5422928dc20da451bdaa0c5e8b4f7da11d8d80d3dc9c5b67a1f002900000000000000000000000082f4ded9cec9b5750fbff5c2185aee35afc16587",
  "constructorArguments": "00000000000000000000000082f4ded9cec9b5750fbff5c2185aee35afc16587"
}