{
  "address": "0x85a9dfc968b1551b731bae7fd193a64a6211a846",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenERC20",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-12\n*/\n\npragma solidity ^0.4.16;\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 is owned, SafeMath {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n\tmapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\t\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    // This generates a public event on the blockchain that will notify clients\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n\t\trequire(_value > 0);\n        // Check if the sender has enough\n        require(balanceOf[msg.sender] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Check if sender is frozen\n\t\trequire(!frozenAccount[msg.sender]);\n\t\t// Check if recipient is frozen\n        require(!frozenAccount[_to]);\n        // Subtract from the sender\n\t\tbalanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\n        // Add the same to the recipient\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n\t\trequire(_value > 0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Check if sender is frozen\n\t\trequire(!frozenAccount[_from]);\n\t\t// Check if recipient is frozen\n        require(!frozenAccount[_to]);\n\t\t// Check allowance\n\t\trequire(_value <= allowance[_from][msg.sender]);\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);\n        // Add the same to the recipient\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n\t\t\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender],_value);\n\t\temit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n\t\trequire(_value > 0);\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        // Check if the sender has enough\n\t\trequire(balanceOf[msg.sender] >= _value);   \n\t\trequire(_value > 0);\n\t\t// Subtract from the sender\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\n        // Updates totalSupply\n\t\ttotalSupply = SafeMath.safeSub(totalSupply, _value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value > 0);\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\t// Subtract from the targeted balance\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);\n\t\t// Subtract from the sender's allowance\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n        // Update totalSupply\n\t\ttotalSupply = SafeMath.safeSub(totalSupply, _value);\n        emit Burn(_from, _value);\n        return true;\n    }\n\t\n\t/// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] = SafeMath.safeAdd(balanceOf[target], mintedAmount);\n        totalSupply = SafeMath.safeAdd(totalSupply, mintedAmount);\n        emit Transfer(0, this, mintedAmount);\n        emit Transfer(this, target, mintedAmount);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n}",
  "bytecode": "60806040526003805460ff1916601217905534801561001d57600080fd5b50604051610f36380380610f3683398101604090815281516020808401518385015160008054600160a060020a03191633908117825560035460ff16600a0a8602600481905590825260058552959020949094558401805192949093019161008b91600191908501906100a8565b50805161009f9060029060208401906100a8565b50505050610143565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e957805160ff1916838001178555610116565b82800160010185558215610116579182015b828111156101165782518255916020019190600101906100fb565b50610122929150610126565b5090565b61014091905b80821115610122576000815560010161012c565b90565b610de4806101526000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b757806323b872dd146101de578063313ce5671461020857806342966c681461023357806370a082311461024b57806379c650681461026c57806379cc6790146102925780638da5cb5b146102b657806395d89b41146102e7578063a9059cbb146102fc578063b414d4b614610320578063cae9ca5114610341578063dd62ed3e146103aa578063e724529c146103d1578063f2fde38b146103f7575b600080fd5b34801561010157600080fd5b5061010a610418565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a03600435166024356104a5565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc61051a565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101a3600160a060020a0360043581169060243516604435610520565b34801561021457600080fd5b5061021d6106f4565b6040805160ff9092168252519081900360200190f35b34801561023f57600080fd5b506101a36004356106fd565b34801561025757600080fd5b506101cc600160a060020a036004351661079e565b34801561027857600080fd5b50610290600160a060020a03600435166024356107b0565b005b34801561029e57600080fd5b506101a3600160a060020a036004351660243561086b565b3480156102c257600080fd5b506102cb6109a3565b60408051600160a060020a039092168252519081900360200190f35b3480156102f357600080fd5b5061010a6109b2565b34801561030857600080fd5b506101a3600160a060020a0360043516602435610a0a565b34801561032c57600080fd5b506101a3600160a060020a0360043516610b45565b34801561034d57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101a3948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610b5a9650505050505050565b3480156103b657600080fd5b506101cc600160a060020a0360043581169060243516610c73565b3480156103dd57600080fd5b50610290600160a060020a03600435166024351515610c90565b34801561040357600080fd5b50610290600160a060020a0360043516610d0b565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561049d5780601f106104725761010080835404028352916020019161049d565b820191906000526020600020905b81548152906001019060200180831161048057829003601f168201915b505050505081565b60008082116104b357600080fd5b336000818152600660209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60045481565b6000600160a060020a038316151561053757600080fd5b6000821161054457600080fd5b600160a060020a03841660009081526005602052604090205482111561056957600080fd5b600160a060020a0383166000908152600560205260409020548281011161058f57600080fd5b600160a060020a03841660009081526007602052604090205460ff16156105b557600080fd5b600160a060020a03831660009081526007602052604090205460ff16156105db57600080fd5b600160a060020a038416600090815260066020908152604080832033845290915290205482111561060b57600080fd5b600160a060020a03841660009081526005602052604090205461062e9083610d51565b600160a060020a03808616600090815260056020526040808220939093559085168152205461065d9083610d65565b600160a060020a03808516600090815260056020908152604080832094909455918716815260068252828120338252909152205461069b9083610d51565b600160a060020a0380861660008181526006602090815260408083203384528252918290209490945580518681529051928716939192600080516020610d99833981519152929181900390910190a35060019392505050565b60035460ff1681565b3360009081526005602052604081205482111561071957600080fd5b6000821161072657600080fd5b336000908152600560205260409020546107409083610d51565b3360009081526005602052604090205560045461075d9083610d51565b60045560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b60056020526000908152604090205481565b600054600160a060020a031633146107c757600080fd5b600160a060020a0382166000908152600560205260409020546107ea9082610d65565b600160a060020a0383166000908152600560205260409020556004546108109082610d65565b6004556040805182815290513091600091600080516020610d998339815191529181900360200190a3604080518281529051600160a060020a038416913091600080516020610d998339815191529181900360200190a35050565b600160a060020a03821660009081526005602052604081205482111561089057600080fd5b6000821161089d57600080fd5b600160a060020a03831660009081526006602090815260408083203384529091529020548211156108cd57600080fd5b600160a060020a0383166000908152600560205260409020546108f09083610d51565b600160a060020a03841660009081526005602090815260408083209390935560068152828220338352905220546109279083610d51565b600160a060020a03841660009081526006602090815260408083203384529091529020556004546109589083610d51565b600455604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561049d5780601f106104725761010080835404028352916020019161049d565b6000600160a060020a0383161515610a2157600080fd5b60008211610a2e57600080fd5b33600090815260056020526040902054821115610a4a57600080fd5b600160a060020a03831660009081526005602052604090205482810111610a7057600080fd5b3360009081526007602052604090205460ff1615610a8d57600080fd5b600160a060020a03831660009081526007602052604090205460ff1615610ab357600080fd5b33600090815260056020526040902054610acd9083610d51565b3360009081526005602052604080822092909255600160a060020a03851681522054610af99083610d65565b600160a060020a038416600081815260056020908152604091829020939093558051858152905191923392600080516020610d998339815191529281900390910190a350600192915050565b60076020526000908152604090205460ff1681565b600083610b6781856104a5565b15610c6b576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b83811015610bff578181015183820152602001610be7565b50505050905090810190601f168015610c2c5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610c4e57600080fd5b505af1158015610c62573d6000803e3d6000fd5b50505050600191505b509392505050565b600660209081526000928352604080842090915290825290205481565b600054600160a060020a03163314610ca757600080fd5b600160a060020a038216600081815260076020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a03163314610d2257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000610d5f83831115610d89565b50900390565b6000828201610d82848210801590610d7d5750838210155b610d89565b9392505050565b801515610d9557600080fd5b505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820e207298848d5eb9ee60cc90d9afe7fec41d731e185f87ad25aee9ab3f6c2aa630029000000000000000000000000000000000000000000000000000000012a05f200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000017536d617274205365637572697a6174696f6e20436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000035365430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000012a05f200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000017536d617274205365637572697a6174696f6e20436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000035365430000000000000000000000000000000000000000000000000000000000"
}