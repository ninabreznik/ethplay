{
  "address": "0x7868fc162988289062dbcdb670a3cf6c8da66f84",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CDMarketplace",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-06\n*/\n\npragma solidity ^0.4.24;\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n *  from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\n   *  than the magic value MUST result in the transaction being reverted.\n   *  Note: the contract address is always the message sender.\n   * @param _from The sending address\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _from,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public\n    returns(bytes4);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic {\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n// File: contracts/CDMarketplace.sol\n\ncontract TVCrowdsale {\n    uint256 public currentRate;\n    function buyTokens(address _beneficiary) public payable;\n}\n\ncontract TVToken {\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function safeTransfer(address _to, uint256 _value, bytes _data) public;\n}\n\ncontract CDMarketplace is Ownable {\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n    address public wallet;\n    uint256 public fee_percentage;\n    ERC721Basic public token;\n    address public manager;\n    address internal checkAndBuySender;\n    address public TVTokenAddress;\n    address public TVCrowdsaleAddress;\n    bytes4 constant TOKEN_RECEIVED = bytes4(keccak256(\"onTokenReceived(address,uint256,bytes)\"));\n\n    modifier onlyOwnerOrManager() {\n        require(msg.sender == owner || manager == msg.sender);\n        _;\n    }\n\n    mapping(uint256 => uint256) public priceList;\n    mapping(uint256 => address) public holderList;\n\n    event Stored(uint256 indexed id, uint256 price, address seller);\n    event Cancelled(uint256 indexed id, address seller);\n    event Sold(uint256 indexed id, uint256 price, address seller, address buyer);\n\n    event TokenChanged(address old_token, address new_token);\n    event WalletChanged(address old_wallet, address new_wallet);\n    event FeeChanged(uint256 old_fee, uint256 new_fee);\n\n    constructor(\n        address _TVTokenAddress,\n        address _TVCrowdsaleAddress,\n        address _token,\n        address _wallet,\n        address _manager,\n        uint _fee_percentage\n    ) public {\n        TVTokenAddress = _TVTokenAddress;\n        TVCrowdsaleAddress = _TVCrowdsaleAddress;\n        token = ERC721Basic(_token);\n        wallet = _wallet;\n        fee_percentage = _fee_percentage;\n        manager = _manager;\n    }\n\n    function setToken(address _token) public onlyOwnerOrManager {\n        address old = token;\n        token = ERC721Basic(_token);\n        emit TokenChanged(old, token);\n    }\n\n    function setWallet(address _wallet) public onlyOwnerOrManager {\n        address old = wallet;\n        wallet = _wallet;\n        emit WalletChanged(old, wallet);\n    }\n\n    function changeFeePercentage(uint256 _percentage) public onlyOwnerOrManager {\n        uint256 old = fee_percentage;\n        fee_percentage = _percentage;\n        emit FeeChanged(old, fee_percentage);\n    }\n\n    function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4) {\n        require(msg.sender == address(token));\n\n        uint256 _price = uint256(convertBytesToBytes32(_data));\n\n        require(_price > 0);\n\n        priceList[_tokenId] = _price;\n        holderList[_tokenId] = _from;\n\n        emit Stored(_tokenId, _price, _from);\n\n        return ERC721_RECEIVED;\n    }\n\n    function onTokenReceived(address _from, uint256 _value, bytes _data) public returns (bytes4) {\n        require(msg.sender == TVTokenAddress);\n        uint _id = uint256(convertBytesToBytes32(_data));\n        require(priceList[_id] == _value);\n\n        address oldHolder = holderList[_id];\n        uint256 price = priceList[_id];\n\n        uint256 toWallet = price / 100 * fee_percentage;\n        uint256 toHolder = price - toWallet;\n\n        holderList[_id] = 0x0;\n        priceList[_id] = 0;\n\n        _from = this == _from ? checkAndBuySender : _from;\n        checkAndBuySender = address(0);\n        token.safeTransferFrom(this, _from, _id);\n\n        TVToken(TVTokenAddress).transfer(wallet, toWallet);\n        TVToken(TVTokenAddress).transfer(oldHolder, toHolder);\n\n        emit Sold(_id, price, oldHolder, msg.sender);\n        return TOKEN_RECEIVED;\n    }\n\n    function cancel(uint256 _id) public returns (bool) {\n        require(holderList[_id] == msg.sender);\n\n        holderList[_id] = 0x0;\n        priceList[_id] = 0;\n\n        token.safeTransferFrom(this, msg.sender, _id);\n\n        emit Cancelled(_id, msg.sender);\n\n        return true;\n    }\n\n    function changeAndBuy(uint256 _id) public payable returns (bool) {\n        uint rate = TVCrowdsale(TVCrowdsaleAddress).currentRate();\n        uint priceWei = priceList[_id] / rate;\n        require(priceWei == msg.value);\n\n        TVCrowdsale(TVCrowdsaleAddress).buyTokens.value(msg.value)(this);\n        bytes memory data = toBytes(_id);\n        checkAndBuySender = msg.sender;\n        TVToken(TVTokenAddress).safeTransfer(this, priceList[_id], data);\n        return true;\n    }\n\n    function changeTVTokenAddress(address newAddress) public onlyOwnerOrManager {\n        TVTokenAddress = newAddress;\n    }\n\n    function changeTVCrowdsaleAddress(address newAddress) public onlyOwnerOrManager {\n        TVCrowdsaleAddress = newAddress;\n    }\n\n    function setManager(address _manager) public onlyOwner {\n        manager = _manager;\n    }\n\n    function convertBytesToBytes32(bytes inBytes) internal pure returns (bytes32 out) {\n        if (inBytes.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            out := mload(add(inBytes, 32))\n        }\n    }\n\n    function toBytes(uint256 x) internal pure returns (bytes b) {\n        b = new bytes(32);\n        assembly {mstore(add(b, 32), x)}\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160c080612339833981018060405281019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060028190555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050612133806102066000396000f30060806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063045585a414610122578063144fa6d71461016357806316ad42ad146101a657806340e58ee5146102135780634110865914610258578063481c6a75146102af578063521eb27314610306578063715018a61461035d5780638da5cb5b14610374578063aecfd9db146103cb578063bed2554214610403578063c46ed45a146104e8578063d0ebdbe714610513578063db7576fc14610556578063dc68c52c14610599578063deaa59df146105dc578063f0b9e5ba1461061f578063f0bb252d14610704578063f2fde38b1461075b578063fae141921461079e578063fc0c546a146107cb575b600080fd5b34801561012e57600080fd5b5061014d60048036038101908080359060200190929190505050610822565b6040518082815260200191505060405180910390f35b34801561016f57600080fd5b506101a4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061083a565b005b3480156101b257600080fd5b506101d160048036038101908080359060200190929190505050610a12565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021f57600080fd5b5061023e60048036038101908080359060200190929190505050610a45565b604051808215151515815260200191505060405180910390f35b34801561026457600080fd5b5061026d610c9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102bb57600080fd5b506102c4610cc4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031257600080fd5b5061031b610cea565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036957600080fd5b50610372610d10565b005b34801561038057600080fd5b50610389610e12565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103e960048036038101908080359060200190929190505050610e37565b604051808215151515815260200191505060405180910390f35b34801561040f57600080fd5b50610494600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506111bb565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3480156104f457600080fd5b506104fd611800565b6040518082815260200191505060405180910390f35b34801561051f57600080fd5b50610554600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611806565b005b34801561056257600080fd5b50610597600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118a5565b005b3480156105a557600080fd5b506105da600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061199c565b005b3480156105e857600080fd5b5061061d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a93565b005b34801561062b57600080fd5b506106b0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611c6b565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561071057600080fd5b50610719611dec565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076757600080fd5b5061079c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e12565b005b3480156107aa57600080fd5b506107c960048036038101908080359060200190929190505050611e79565b005b3480156107d757600080fd5b506107e0611f7f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60086020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108e457503373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15156108ef57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fec507b76e4056f09193394a4361b44129ec561809ddee312c7f97121f93bb58b81600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003373ffffffffffffffffffffffffffffffffffffffff166009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610ab457600080fd5b60006009600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006008600084815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3033856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b50505050817f26deca31ff8139a06c52453ce8985d34f7648a6d9af1d283c4063d052c355a0f33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a260019050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d6b57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060006060600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f9f8bdb76040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ec457600080fd5b505af1158015610ed8573d6000803e3d6000fd5b505050506040513d6020811015610eee57600080fd5b81019080805190602001909291905050509250826008600087815260200190815260200160002054811515610f1f57fe5b0491503482141515610f3057600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ec8ac4d834306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b158015610fed57600080fd5b505af1158015611001573d6000803e3d6000fd5b505050505061100f85611fa5565b905033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eb795549306008600089815260200190815260200160002054846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561114957808201518184015260208101905061112e565b50505050905090810190601f1680156111765780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561119757600080fd5b505af11580156111ab573d6000803e3d6000fd5b5050505060019350505050919050565b600080600080600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561122057600080fd5b61122987611fe9565b60019004945087600860008781526020019081526020016000205414151561125057600080fd5b6009600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169350600860008681526020019081526020016000205492506002546064848115156112ab57fe5b04029150818303905060006009600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060086000878152602001908152602001600020819055508873ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611359578861137d565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b98506000600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e308b886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156114ba57600080fd5b505af11580156114ce573d6000803e3d6000fd5b50505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156115b957600080fd5b505af11580156115cd573d6000803e3d6000fd5b505050506040513d60208110156115e357600080fd5b810190808051906020019092919050505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156116ba57600080fd5b505af11580156116ce573d6000803e3d6000fd5b505050506040513d60208110156116e457600080fd5b810190808051906020019092919050505050847f55390ad3bffeff90968b8c54d2ed0099a7dbd2d71bc56263a1abf5643f833fec848633604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a260405180807f6f6e546f6b656e526563656976656428616464726573732c75696e743235362c81526020017f627974657329000000000000000000000000000000000000000000000000000081525060260190506040518091039020955050505050509392505050565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561186157600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061194d57503373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b151561195857600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611a4457503373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515611a4f57600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611b3d57503373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515611b4857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f64cbbd34f3faebfd04eff088ae5832f6d254dbb81820b0055e9d85c534aa700d81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cca57600080fd5b611cd383611fe9565b600190049050600081111515611ce857600080fd5b806008600086815260200190815260200160002081905550846009600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550837f34e35684e1da212d374ad99d50ac7bb9777d62061ab4ebce188466182cab88658287604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a263f0b9e5ba7c0100000000000000000000000000000000000000000000000000000000029150509392505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e6d57600080fd5b611e768161200d565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611f2357503373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515611f2e57600080fd5b6002549050816002819055507f5fc463da23c1b063e66f9e352006a7fbe8db7223c455dc429e881a2dfe2f94f181600254604051808381526020018281526020019250505060405180910390a15050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060206040519080825280601f01601f191660200182016040528015611fdb5781602001602082028038833980820191505090505b509050816020820152919050565b600080825114156120005760006001029050612008565b602082015190505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561204957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a7230582080f7ec5619e59cebccd4a6867fa399abb947c982265e9d7b590f7d82889f4b250029000000000000000000000000f3e693175db47264c99eca0f1c1c4a2c1aed3bd7000000000000000000000000aae1be740222fb3f1125a7326fce947bbdb62b7e000000000000000000000000726c90dde64ce2a61f743f3e39f9e14fb6ab87e1000000000000000000000000eda8256f424eacbb9b2a6513de98d819e7496fb10000000000000000000000001fed8ba9a9fdd72ef9038046ad148beb413491b8000000000000000000000000000000000000000000000000000000000000000a",
  "constructorArguments": "000000000000000000000000f3e693175db47264c99eca0f1c1c4a2c1aed3bd7000000000000000000000000aae1be740222fb3f1125a7326fce947bbdb62b7e000000000000000000000000726c90dde64ce2a61f743f3e39f9e14fb6ab87e1000000000000000000000000eda8256f424eacbb9b2a6513de98d819e7496fb10000000000000000000000001fed8ba9a9fdd72ef9038046ad148beb413491b8000000000000000000000000000000000000000000000000000000000000000a"
}