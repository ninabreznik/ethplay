{
  "address": "0xdc32ff5aada11b5ce3caf2d00459cfda05293f96",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Angel Battle Token",
  "contractName": "ABToken",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-14\n*/\n\npragma solidity ^0.5.3;\n\nlibrary Strings {\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      uint i =0;\n      for (i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function uint2str(uint i) internal pure returns (string memory) {\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(uint8(48 + i % 10));\n            i /= 10;\n        }\n        return string(bstr);\n    }\n}\ncontract AccessControl {\n    address payable public creatorAddress;\n    uint16 public totalSeraphims = 0;\n    mapping (address => bool) public seraphims;\n\n    bool public isMaintenanceMode = true;\n \n    modifier onlyCREATOR() {\n        require(msg.sender == creatorAddress);\n        _;\n    }\n\n    modifier onlySERAPHIM() {\n      \n      require(seraphims[msg.sender] == true);\n        _;\n    }\n    modifier isContractActive {\n        require(!isMaintenanceMode);\n        _;\n    }\n    \n    // Constructor\n    constructor() public {\n        creatorAddress = msg.sender;\n    }\n    \n//Seraphims are contracts or addresses that have write access\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\n        if (seraphims[_newSeraphim] == false) {\n            seraphims[_newSeraphim] = true;\n            totalSeraphims += 1;\n        }\n    }\n    \n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\n        if (seraphims[_oldSeraphim] == true) {\n            seraphims[_oldSeraphim] = false;\n            totalSeraphims -= 1;\n        }\n    }\n\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\n        isMaintenanceMode = _isMaintaining;\n    }\n\n  \n} \n\n\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n     function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) view public returns(uint8) {\n        uint256 genNum = uint256(blockhash(block.number-1)) + uint256(privateAddress);\n        return uint8(genNum % (maxRandom - min + 1)+min);\n    }\n}\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n\n/**\n * @title IERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n    /**\n     * @notice Query if a contract implements an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @title ERC165\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract ERC165 is IERC165 {\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n    /**\n     * 0x01ffc9a7 ===\n     *     bytes4(keccak256('supportsInterface(bytes4)'))\n     */\n\n    /**\n     * @dev a mapping of interface id to whether or not it's supported\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev A contract implementing SupportsInterfaceWithLookup\n     * implement ERC165 itself\n     */\n    constructor () internal {\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev implement supportsInterface(bytes4) using a lookup table\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev internal method for registering an interface\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff);\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a `safeTransfer`. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the\n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transferred\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes4 _data\n  )\n    public\n    returns(bytes4);\n}\n\ncontract OwnableDelegateProxy { }\n\ncontract ProxyRegistry {\n    mapping(address => OwnableDelegateProxy) public proxies;\n}\ncontract iABToken is AccessControl{\n \n \n    function balanceOf(address owner) public view returns (uint256);\n    function totalSupply() external view returns (uint256) ;\n    function ownerOf(uint256 tokenId) public view returns (address) ;\n    function setMaxAngels() external;\n    function setMaxAccessories() external;\n    function setMaxMedals()  external ;\n    function initAngelPrices() external;\n    function initAccessoryPrices() external ;\n    function setCardSeriesPrice(uint8 _cardSeriesId, uint _newPrice) external;\n    function approve(address to, uint256 tokenId) public;\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) view public returns(uint8) ;\n    function tokenURI(uint256 _tokenId) public pure returns (string memory) ;\n    function baseTokenURI() public pure returns (string memory) ;\n    function name() external pure returns (string memory _name) ;\n    function symbol() external pure returns (string memory _symbol) ;\n    function getApproved(uint256 tokenId) public view returns (address) ;\n    function setApprovalForAll(address to, bool approved) public ;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n    function transferFrom(address from, address to, uint256 tokenId) public ;\n    function safeTransferFrom(address from, address to, uint256 tokenId) public ;\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public ;\n    function _exists(uint256 tokenId) internal view returns (bool) ;\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) ;\n    function _mint(address to, uint256 tokenId) internal ;\n    function mintABToken(address owner, uint8 _cardSeriesId, uint16 _power, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue, string memory _name, uint16 _experience, uint16 _oldId) public;\n    function addABTokenIdMapping(address _owner, uint256 _tokenId) private ;\n    function getPrice(uint8 _cardSeriesId) public view returns (uint);\n    function buyAngel(uint8 _angelSeriesId) public payable ;\n    function buyAccessory(uint8 _accessorySeriesId) public payable ;\n    function getAura(uint8 _angelSeriesId) pure public returns (uint8 auraRed, uint8 auraYellow, uint8 auraBlue) ;\n    function getAngelPower(uint8 _angelSeriesId) private view returns (uint16) ;\n    function getABToken(uint256 tokenId) view public returns(uint8 cardSeriesId, uint16 power, uint16 auraRed, uint16 auraYellow, uint16 auraBlue, string memory name, uint16 experience, uint64 lastBattleTime, uint16 lastBattleResult, address owner, uint16 oldId);\n    function setAuras(uint256 tokenId, uint16 _red, uint16 _blue, uint16 _yellow) external;\n    function setName(uint256 tokenId,string memory namechange) public ;\n    function setExperience(uint256 tokenId, uint16 _experience) external;\n    function setLastBattleResult(uint256 tokenId, uint16 _result) external ;\n    function setLastBattleTime(uint256 tokenId) external;\n    function setLastBreedingTime(uint256 tokenId) external ;\n    function setoldId(uint256 tokenId, uint16 _oldId) external;\n    function getABTokenByIndex(address _owner, uint64 _index) view external returns(uint256) ;\n    function _burn(address owner, uint256 tokenId) internal ;\n    function _burn(uint256 tokenId) internal ;\n    function _transferFrom(address from, address to, uint256 tokenId) internal ;\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool);\n    function _clearApproval(uint256 tokenId) private ;\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ABToken is IERC721, iABToken, ERC165 {\n    using SafeMath for uint256;\n    using SafeMath for uint8;\n    using Address for address;\n    uint256 public totalTokens;\n    \n    //Mapping or which IDs each address owns\n    mapping(address => uint256[]) public ownerABTokenCollection;\n    \n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) private _tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address => uint256) private _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n    /*\n     * 0x80ac58cd ===\n     *     bytes4(keccak256('balanceOf(address)')) ^\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\n     *     bytes4(keccak256('approve(address,uint256)')) ^\n     *     bytes4(keccak256('getApproved(uint256)')) ^\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n     */\n     \n     \n       //current and max numbers of issued tokens for each series \n    uint32[100] public currentTokenNumbers;\n    uint32[100] public maxTokenNumbers;\n    \n    //current price of each angel and accessory series\n    uint[24] public angelPrice;\n    uint[18] public accessoryPrice;\n \n     address proxyRegistryAddress; \n     \n   //  Main data structure for each token \nstruct ABCard {\n    uint256 tokenId;       \n        uint8 cardSeriesId;\n        //This is 0 to 23 for angels, 24 to 42 for pets, 43 to 60 for accessories, 61 to 72 for medals\n        //address owner; \n        //already accounted in mapping. \n        uint16 power;\n        //This number is luck for pets and battlepower for angels\n        uint16 auraRed;\n        uint16 auraYellow;\n        uint16 auraBlue;\n        string name;\n        uint16 experience;\n        uint64 lastBattleTime;\n        uint64 lastBreedingTime;\n        uint16 lastBattleResult;\n        uint16 oldId; //for cards transfered from the first version of the game. \n    }\n     //Main mapping storing an ABCard for each token ID\n      mapping(uint256 => ABCard) public ABTokenCollection;\n  \n    constructor() public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0));\n        return _ownedTokensCount[owner];\n    }\n\n function totalSupply() external view returns (uint256) {\n     return totalTokens;\n }\n    /**\n     * @dev Gets the owner of the specified token ID\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return owner address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0));\n        return owner;\n    }\n    \n    //Initial function to set the maximum numbers of each angel card\n\nfunction setMaxAngels() external onlyCREATOR {\n    uint i =0;\n   \n     //Angels 0 and 1 have no max\n     //Lucifer and Michael have max numbers 250\n     maxTokenNumbers[2] = 250;\n     maxTokenNumbers[3] = 250;\n     maxTokenNumbers[4] = 45;\n     maxTokenNumbers[5] = 50;\n     \n    for (i=6; i<15; i++) {\n        maxTokenNumbers[i]= 45;\n    }\n     for (i=15; i<24; i++) {\n        maxTokenNumbers[i]= 65;\n    }\n   \n    \n}\n\n//Initial function to set the maximum number of accessories\nfunction setMaxAccessories() external onlyCREATOR {\n     uint i = 0;\n     for (i=43; i<60; i++) {\n        maxTokenNumbers[i]= 200;\n    }\n}\n\n//Initial function to set the max number of medals\n  function setMaxMedals() onlyCREATOR external  {\n      maxTokenNumbers[61] = 5000;\n      maxTokenNumbers[62] = 5000;\n      maxTokenNumbers[63] = 5000;\n      maxTokenNumbers[64] = 5000;\n      maxTokenNumbers[65] = 500;\n      maxTokenNumbers[66] = 500;\n      maxTokenNumbers[67] = 200;\n      maxTokenNumbers[68] = 200;\n      maxTokenNumbers[69] = 200;\n      maxTokenNumbers[70] = 100;\n      maxTokenNumbers[71] = 100;\n      maxTokenNumbers[72] = 50;\n  }\n    //Function called once at the beginning to set the prices of all the angel cards. \n    function initAngelPrices() external onlyCREATOR {\n       angelPrice[0] = 0;\n       angelPrice[1] = 30000000000000000;\n       angelPrice[2] = 666000000000000000;\n       angelPrice[3] = 800000000000000000;\n       angelPrice[4] = 10000000000000000;\n       angelPrice[5] = 10000000000000000;\n       angelPrice[6] = 20000000000000000;\n       angelPrice[7] = 25000000000000000;\n       angelPrice[8] = 16000000000000000;\n       angelPrice[9] = 18000000000000000;\n       angelPrice[10] = 14000000000000000;\n       angelPrice[11] = 20000000000000000;\n       angelPrice[12] = 24000000000000000;\n       angelPrice[13] = 28000000000000000;\n       angelPrice[14] = 40000000000000000;\n       angelPrice[15] = 50000000000000000;\n       angelPrice[16] = 53000000000000000;\n       angelPrice[17] = 60000000000000000;\n       angelPrice[18] = 65000000000000000;\n       angelPrice[19] = 70000000000000000;\n       angelPrice[20] = 75000000000000000;\n       angelPrice[21] = 80000000000000000;\n       angelPrice[22] = 85000000000000000;\n       angelPrice[23] = 90000000000000000;\n      \n    }\n    \n        //Function called once at the beginning to set the prices of all the accessory cards. \n    function initAccessoryPrices() external onlyCREATOR {\n       accessoryPrice[0] = 20000000000000000;\n       accessoryPrice[1] = 60000000000000000;\n       accessoryPrice[2] = 40000000000000000;\n       accessoryPrice[3] = 90000000000000000;\n       accessoryPrice[4] = 80000000000000000;\n       accessoryPrice[5] = 160000000000000000;\n       accessoryPrice[6] = 60000000000000000;\n       accessoryPrice[7] = 120000000000000000;\n       accessoryPrice[8] = 60000000000000000;\n       accessoryPrice[9] = 120000000000000000;\n       accessoryPrice[10] = 60000000000000000;\n       accessoryPrice[11] = 120000000000000000;\n       accessoryPrice[12] = 200000000000000000;\n       accessoryPrice[13] = 200000000000000000;\n       accessoryPrice[14] = 200000000000000000;\n       accessoryPrice[15] = 200000000000000000;\n       accessoryPrice[16] = 500000000000000000;\n       accessoryPrice[17] = 600000000000000000;\n    }\n   \n    \n    // Developer function to change the price (in wei) for a card series. \n    function setCardSeriesPrice(uint8 _cardSeriesId, uint _newPrice) external onlyCREATOR {\n        if (_cardSeriesId <24) {angelPrice[_cardSeriesId] = _newPrice;} else {\n        if ((_cardSeriesId >42) && (_cardSeriesId < 61)) {accessoryPrice[(_cardSeriesId-43)] = _newPrice;}\n        }\n        \n        \n    }\n\n   function withdrawEther() external onlyCREATOR {\n    creatorAddress.transfer(address(this).balance);\n}\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner);\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n    \n        function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) view public returns(uint8) {\n        uint256 genNum = uint256(blockhash(block.number-1)) + uint256(privateAddress);\n        return uint8(genNum % (maxRandom - min + 1)+min);\n    }\n\n   /**\n   * @dev Returns an URI for a given token ID\n   */\n  function tokenURI(uint256 _tokenId) public pure returns (string memory) {\n    return Strings.strConcat(\n        baseTokenURI(),\n        Strings.uint2str(_tokenId)\n    );\n  }\n  \n  function baseTokenURI() public pure returns (string memory) {\n    return \"https://www.angelbattles.com/URI/\";\n  }\n  \n   /// @notice A descriptive name for a collection of NFTs in this contract\n    function name() external pure returns (string memory _name) {\n        return \"Angel Battle Token\";\n    }\n\n    /// @notice An abbreviated name for NFTs in this contract\n    function symbol() external pure returns (string memory _symbol) {\n        return \"ABT\";\n    }\n  \n  \n    \n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId));\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != msg.sender);\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n    \n    /**\n   * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\n   */\n \n\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n\n        _transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     *\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n    }\n\n    /**\n     * @dev Returns whether the specified token exists\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     *    is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to mint a new token\n     * Reverts if the given token ID already exists\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0));\n        require(!_exists(tokenId));\n\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n        addABTokenIdMapping(to, tokenId);\n        emit Transfer(address(0), to, tokenId);\n    }\n    function mintABToken(address owner, uint8 _cardSeriesId, uint16 _power, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue, string memory _name, uint16 _experience, uint16 _oldId) public onlySERAPHIM {\n        require((currentTokenNumbers[_cardSeriesId] < maxTokenNumbers[_cardSeriesId] || maxTokenNumbers[_cardSeriesId] == 0));\n        require(_cardSeriesId <100);\n           ABCard storage abcard = ABTokenCollection[totalTokens];\n           abcard.power = _power;\n           abcard.cardSeriesId= _cardSeriesId;\n           abcard.auraRed = _auraRed;\n           abcard.auraYellow= _auraYellow;\n           abcard.auraBlue= _auraBlue;\n           abcard.name = _name;\n           abcard.experience = _experience;\n           abcard.tokenId = totalTokens;\n           abcard.lastBattleTime = uint64(now);\n           abcard.lastBreedingTime = uint64(now);\n           abcard.lastBattleResult = 0;\n           abcard.oldId = _oldId;\n           _mint(owner, totalTokens);\n           totalTokens = totalTokens +1;\n           currentTokenNumbers[_cardSeriesId] ++;\n    }\n    \n    function _mintABToken(address owner, uint8 _cardSeriesId, uint16 _power, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue, string memory _name, uint16 _experience, uint16 _oldId) internal {\n        require((currentTokenNumbers[_cardSeriesId] < maxTokenNumbers[_cardSeriesId] || maxTokenNumbers[_cardSeriesId] == 0));\n        require(_cardSeriesId <100);\n           ABCard storage abcard = ABTokenCollection[totalTokens];\n           abcard.power = _power;\n           abcard.cardSeriesId= _cardSeriesId;\n           abcard.auraRed = _auraRed;\n           abcard.auraYellow= _auraYellow;\n           abcard.auraBlue= _auraBlue;\n           abcard.name = _name;\n           abcard.experience = _experience;\n           abcard.tokenId = totalTokens;\n           abcard.lastBattleTime = uint64(now);\n           abcard.lastBreedingTime = uint64(now);\n           abcard.lastBattleResult = 0;\n           abcard.oldId = _oldId;\n           _mint(owner, totalTokens);\n           totalTokens = totalTokens +1;\n           currentTokenNumbers[_cardSeriesId] ++;\n    }\n    \n    function addABTokenIdMapping(address _owner, uint256 _tokenId) private {\n            uint256[] storage owners = ownerABTokenCollection[_owner];\n            owners.push(_tokenId);\n    }\n    \n\n    \n    function getPrice(uint8 _cardSeriesId) public view returns (uint) {\n        if (_cardSeriesId <24) {return angelPrice[_cardSeriesId];}\n        if ((_cardSeriesId >42) && (_cardSeriesId < 61)) {return accessoryPrice[(_cardSeriesId-43)];}\n        return 0;\n    }\n    \n    function buyAngel(uint8 _angelSeriesId) public payable {\n        //don't create another card if we are already at the max\n        if ((maxTokenNumbers[_angelSeriesId] <= currentTokenNumbers[_angelSeriesId]) && (_angelSeriesId >1 )) {revert();}\n        //don't create another card if they haven't sent enough money. \n        if (msg.value < angelPrice[_angelSeriesId]) {revert();} \n        //don't create an angel card if they are trying to create a different type of card. \n         if ((_angelSeriesId<0) || (_angelSeriesId > 23)) {revert();}\n        uint8 auraRed;\n        uint8 auraYellow;\n        uint8 auraBlue;\n        uint16 power;\n        (auraRed, auraYellow, auraBlue) = getAura(_angelSeriesId);\n        (power) = getAngelPower(_angelSeriesId);\n    \n       _mintABToken(msg.sender, _angelSeriesId, power, auraRed, auraYellow, auraBlue,\"\", 0, 0);\n       \n    }\n    \n    \n    function buyAccessory(uint8 _accessorySeriesId) public payable {\n        //don't create another card if we are already at the max\n        if (maxTokenNumbers[_accessorySeriesId] <= currentTokenNumbers[_accessorySeriesId]) {revert();}\n        //don't create another card if they haven't sent enough money. \n        if (msg.value < accessoryPrice[_accessorySeriesId-43]) {revert();} \n        //don't create a card if they are trying to create a different type of card. \n        if ((_accessorySeriesId<43) || (_accessorySeriesId > 60)) {revert();}\n        _mintABToken(msg.sender,_accessorySeriesId, 0, 0, 0, 0, \"\",0, 0);\n       \n     \n       \n    }\n    \n    //Returns the Aura color of each angel\n    function getAura(uint8 _angelSeriesId) pure public returns (uint8 auraRed, uint8 auraYellow, uint8 auraBlue) {\n        if (_angelSeriesId == 0) {return(0,0,1);}\n        if (_angelSeriesId == 1) {return(0,1,0);}\n        if (_angelSeriesId == 2) {return(1,0,1);}\n        if (_angelSeriesId == 3) {return(1,1,0);}\n        if (_angelSeriesId == 4) {return(1,0,0);}\n        if (_angelSeriesId == 5) {return(0,1,0);}\n        if (_angelSeriesId == 6) {return(1,0,1);}\n        if (_angelSeriesId == 7) {return(0,1,1);}\n        if (_angelSeriesId == 8) {return(1,1,0);}\n        if (_angelSeriesId == 9) {return(0,0,1);}\n        if (_angelSeriesId == 10)  {return(1,0,0);}\n        if (_angelSeriesId == 11) {return(0,1,0);}\n        if (_angelSeriesId == 12) {return(1,0,1);}\n        if (_angelSeriesId == 13) {return(0,1,1);}\n        if (_angelSeriesId == 14) {return(1,1,0);}\n        if (_angelSeriesId == 15) {return(0,0,1);}\n        if (_angelSeriesId == 16)  {return(1,0,0);}\n        if (_angelSeriesId == 17) {return(0,1,0);}\n        if (_angelSeriesId == 18) {return(1,0,1);}\n        if (_angelSeriesId == 19) {return(0,1,1);}\n        if (_angelSeriesId == 20) {return(1,1,0);}\n        if (_angelSeriesId == 21) {return(0,0,1);}\n        if (_angelSeriesId == 22)  {return(1,0,0);}\n        if (_angelSeriesId == 23) {return(0,1,1);}\n    }\n   \n    function getAngelPower(uint8 _angelSeriesId) private view returns (uint16) {\n        uint8 randomPower = getRandomNumber(10,0,msg.sender);\n        if (_angelSeriesId >=4) {\n        return (100 + 10 * ((_angelSeriesId - 4) + randomPower));\n        }\n        if (_angelSeriesId == 0 ) {\n        return (50 + randomPower);\n        }\n         if (_angelSeriesId == 1) {\n        return (120 + randomPower);\n        }\n         if (_angelSeriesId == 2) {\n        return (250 + randomPower);\n        }\n        if (_angelSeriesId == 3) {\n        return (300 + randomPower);\n        }\n        \n    }\n    \n    function getCurrentTokenNumbers(uint8 _cardSeriesId) view public returns (uint32) {\n        return currentTokenNumbers[_cardSeriesId];\n}\n       function getMaxTokenNumbers(uint8 _cardSeriesId) view public returns (uint32) {\n        return maxTokenNumbers[_cardSeriesId];\n}\n\n\n    function getABToken(uint256 tokenId) view public returns(uint8 cardSeriesId, uint16 power, uint16 auraRed, uint16 auraYellow, uint16 auraBlue, string memory name, uint16 experience, uint64 lastBattleTime, uint16 lastBattleResult, address owner, uint16 oldId) {\n        ABCard memory abcard = ABTokenCollection[tokenId];\n        cardSeriesId = abcard.cardSeriesId;\n        power = abcard.power;\n        experience = abcard.experience;\n        auraRed = abcard.auraRed;\n        auraBlue = abcard.auraBlue;\n        auraYellow = abcard.auraYellow;\n        name = abcard.name;\n        lastBattleTime = abcard.lastBattleTime;\n        lastBattleResult = abcard.lastBattleResult;\n        oldId = abcard.oldId;\n        owner = ownerOf(tokenId);\n    }\n    \n    \n     function setAuras(uint256 tokenId, uint16 _red, uint16 _blue, uint16 _yellow) external onlySERAPHIM {\n        ABCard storage abcard = ABTokenCollection[tokenId];\n        if (abcard.tokenId == tokenId) {\n            abcard.auraRed = _red;\n            abcard.auraYellow = _yellow;\n            abcard.auraBlue = _blue;\n    }\n    }\n    \n     function setName(uint256 tokenId,string memory namechange) public {\n        ABCard storage abcard = ABTokenCollection[tokenId];\n        if (msg.sender != ownerOf(tokenId)) {revert();}\n        if (abcard.tokenId == tokenId) {\n            abcard.name = namechange;\n    }\n    }\n    \n    function setExperience(uint256 tokenId, uint16 _experience) external onlySERAPHIM {\n        ABCard storage abcard = ABTokenCollection[tokenId];\n        if (abcard.tokenId == tokenId) {\n            abcard.experience = _experience;\n    }\n    }\n    \n    function setLastBattleResult(uint256 tokenId, uint16 _result) external onlySERAPHIM {\n        ABCard storage abcard = ABTokenCollection[tokenId];\n        if (abcard.tokenId == tokenId) {\n            abcard.lastBattleResult = _result;\n    }\n    }\n    \n     function setLastBattleTime(uint256 tokenId) external onlySERAPHIM {\n        ABCard storage abcard = ABTokenCollection[tokenId];\n        if (abcard.tokenId == tokenId) {\n            abcard.lastBattleTime = uint64(now);\n    }\n    }\n    \n       function setLastBreedingTime(uint256 tokenId) external onlySERAPHIM {\n        ABCard storage abcard = ABTokenCollection[tokenId];\n        if (abcard.tokenId == tokenId) {\n            abcard.lastBreedingTime = uint64(now);\n    }\n    }\n    \n      function setoldId(uint256 tokenId, uint16 _oldId) external onlySERAPHIM {\n        ABCard storage abcard = ABTokenCollection[tokenId];\n        if (abcard.tokenId == tokenId) {\n            abcard.oldId = _oldId;\n    }\n    }\n    \n    \n    function getABTokenByIndex(address _owner, uint64 _index) view external returns(uint256) {\n        if (_index >= ownerABTokenCollection[_owner].length) {\n            return 0; }\n        return ownerABTokenCollection[_owner][_index];\n    }\n\n   /**\n     * @dev external function to burn a specific token\n     * Reverts if the token does not exist\n     * @param tokenId uint256 ID of the token being burned\n     * Only the owner can burn their token. \n     */\n    function burn(uint256 tokenId) external {\n        require(ownerOf(tokenId) == msg.sender);\n        _clearApproval(tokenId);\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].sub(1);\n        _tokenOwner[tokenId] = address(0);\n        emit Transfer(msg.sender, address(0), tokenId);\n    }\n    \n     /**\n     * @dev external function to burn a specific token\n     * Reverts if the token does not exist\n     * @param tokenId uint256 ID of the token being burned\n     * Only the owner can burn their token. \n     * This function allows a new token type to be reissued. This preserves rarity, while the burn functio increases rarity\n     */\n    function burnAndRecycle(uint256 tokenId) external {\n        require(ownerOf(tokenId) == msg.sender);\n        uint8 cardSeriesId;\n        _clearApproval(tokenId);\n        _ownedTokensCount[msg.sender] = _ownedTokensCount[msg.sender].sub(1);\n        _tokenOwner[tokenId] = address(0);\n        (cardSeriesId,,,,,,,,,,) = getABToken (tokenId);\n        if (currentTokenNumbers[cardSeriesId] >= 1) {\n            currentTokenNumbers[cardSeriesId] = currentTokenNumbers[cardSeriesId] - 1;\n        }\n        emit Transfer(msg.sender, address(0), tokenId);\n    }\n\n\n    /**\n     * @dev Internal function to burn a specific token\n     * Reverts if the token does not exist\n     * Deprecated, use _burn(uint256) instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == owner);\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[owner] = _ownedTokensCount[owner].sub(1);\n        _tokenOwner[tokenId] = address(0);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token\n     * Reverts if the token does not exist\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(uint256 tokenId) internal {\n        _burn(ownerOf(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n    */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from);\n        require(to != address(0));\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n        _tokenOwner[tokenId] = to;\n        addABTokenIdMapping(to, tokenId);\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke `onERC721Received` on a target address\n     * The call is not executed if the target address is not a contract\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Private function to clear current approval of a given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n}",
  "bytecode": ""
}