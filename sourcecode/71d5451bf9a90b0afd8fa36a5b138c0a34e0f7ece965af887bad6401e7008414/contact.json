{
  "address": "0x480d08a87e9d23704dfbdc296afc3436fe6b27d5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Commercializ3d",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-19\n*/\n\npragma solidity ^0.4.25;\n\ncontract GameBoard {\n\n  uint8 constant public minSquareId = 1;\n  uint8 constant public maxSquareId = 24;\n  uint8 constant public numSquares = 24;\n}\n\ncontract JackpotRules {\n  using SafeMath for uint256;\n\n  constructor() public {}\n\n  // NOTE: The next methods *must* add up to 100%\n\n  // 50%\n  function _winnerJackpot(uint256 jackpot) public pure returns (uint256) {\n    return jackpot.div(2);\n  }\n\n  // 40%\n  function _landholderJackpot(uint256 jackpot) public pure returns (uint256) {\n    return (jackpot.mul(2)).div(5);\n  }\n\n  // 5%\n  function _nextPotJackpot(uint256 jackpot) public pure returns (uint256) {\n    return jackpot.div(20);\n  }\n\n  // 5%\n  function _teamJackpot(uint256 jackpot) public pure returns (uint256) {\n    return jackpot.div(20);\n  }\n}\n\nlibrary Math {\n  /**\n  * @dev Returns the largest of two numbers.\n  */\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  /**\n  * @dev Returns the smallest of two numbers.\n  */\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  /**\n  * @dev Calculates the average of two numbers. Since these are integers,\n  * averages of an even and odd number cannot be represented, and will be\n  * rounded down.\n  */\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\n    // (a + b) / 2 can overflow, so we distribute\n    return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n  }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract PullPayment {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) public payments;\n    uint256 public totalPayments;\n\n    /**\n     * @dev Withdraw accumulated balance, called by payee.\n     */\n    function withdrawPayments() public {\n        address payee = msg.sender;\n        uint256 payment = payments[payee];\n\n        require(payment != 0);\n        require(address(this).balance >= payment);\n\n        totalPayments = totalPayments.sub(payment);\n        payments[payee] = 0;\n\n        payee.transfer(payment);\n    }\n\n    /**\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\n     * @param dest The destination address of the funds.\n     * @param amount The amount to transfer.\n     */\n    function asyncSend(address dest, uint256 amount) internal {\n        payments[dest] = payments[dest].add(amount);\n        totalPayments = totalPayments.add(amount);\n    }\n}\n\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two numbers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract TaxRules {\n    using SafeMath for uint256;\n\n    constructor() public {}\n\n    // 10%\n    function _priceToTax(uint256 price) public pure returns (uint256) {\n        return price.div(10);\n    }\n\n    // NOTE: The next methods *must* add up to 100%\n\n    // 40%\n    function _jackpotTax(uint256 tax) public pure returns (uint256) {\n        return (tax.mul(2)).div(5);\n    }\n\n    // 38%\n    function _totalLandholderTax(uint256 tax) public pure returns (uint256) {\n        return (tax.mul(19)).div(50);\n    }\n\n    // 17%/12%\n    function _teamTax(uint256 tax, bool hasReferrer) public pure returns (uint256) {\n        if (hasReferrer) {\n            return (tax.mul(3)).div(25);\n        } else {\n            return (tax.mul(17)).div(100);\n        }\n    }\n    \n    // sell 25% of tokens\n    function _p3dSellPercentage(uint256 tokens) public pure returns (uint256) {\n        return tokens.div(4);\n    }\n\n    // 5% although only invoked if _teamTax is lower value\n    function _referrerTax(uint256 tax, bool hasReferrer)  public pure returns (uint256) {\n        if (hasReferrer) {\n            return tax.div(20);\n        } else {\n            return 0;\n        }\n    }\n\n    // 5%\n    function _nextPotTax(uint256 tax) public pure returns (uint256) {\n        return tax.div(20);\n    }\n}\n\ncontract Commercializ3d is\n    GameBoard,\n    PullPayment,\n    Ownable,\n    TaxRules,\n    JackpotRules {\n    using SafeMath for uint256;\n    using Math for uint256;\n\n    enum Stage {\n        DutchAuction,\n        GameRounds\n    }\n    Stage public stage = Stage.DutchAuction;\n\n    modifier atStage(Stage _stage) {\n        require(\n            stage == _stage,\n            \"Function cannot be called at this stage.\"\n        );\n        _;\n    }\n\n    constructor(uint startingStage) public {\n        if (startingStage == uint(Stage.GameRounds)) {\n            stage = Stage.GameRounds;\n            _startGameRound();\n        } else {\n            _startAuction();\n        }\n    }\n\n    mapping(uint8 => address) public squareToOwner;\n    mapping(uint8 => uint256) public squareToPrice;\n    uint256 public totalSquareValue;\n\n    function _changeSquarePrice(uint8 squareId, uint256 newPrice) private {\n        uint256 oldPrice = squareToPrice[squareId];\n        squareToPrice[squareId] = newPrice;\n        totalSquareValue = (totalSquareValue.sub(oldPrice)).add(newPrice);\n    }\n\n    event SquareOwnerChanged(\n        uint8 indexed squareId,\n        address indexed oldOwner,\n        address indexed newOwner,\n        uint256 oldPrice,\n        uint256 newPrice\n    );\n\n    HourglassInterface constant P3DContract = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n    \n    function _buyP3D(uint256 amount) private {\n        P3DContract.buy.value(amount)(0xB111DaBb8EdD8260B5c1E471945A62bE2eE24470);\n    }\n    \n    function _sendP3D(address to, uint256 amount) private {\n        P3DContract.transfer(to, amount);\n    }\n    \n    function getP3DBalance() view public returns(uint256) {\n        return (P3DContract.balanceOf(address(this)));\n    }\n    \n    function getDivsBalance() view public returns(uint256) {\n        return (P3DContract.dividendsOf(address(this)));\n    }\n    \n    function withdrawContractBalance() external onlyOwner {\n        uint256 contractBalance = address(this).balance;\n        uint256 withdrawableBalance = contractBalance.sub(totalPayments);\n\n        // No withdrawal necessary if <= 0 balance\n        require(withdrawableBalance > 0);\n\n        asyncSend(msg.sender, withdrawableBalance);\n    }\n\n    event AuctionStarted(\n        uint256 startingAuctionPrice,\n        uint256 endingAuctionPrice,\n        uint256 auctionDuration,\n        uint256 startTime\n    );\n\n    event AuctionEnded(\n        uint256 endTime\n    );\n\n    uint256 constant public startingAuctionPrice = 0.1 ether;\n    uint256 constant public endingAuctionPrice = 0.05 ether;\n    uint256 constant public auctionDuration = 5 days; // period over which land price decreases linearly\n\n    uint256 public numBoughtSquares;\n    uint256 public auctionStartTime;\n\n    function buySquareAtAuction(uint8 squareId, uint256 newPrice, address referrer) public payable atStage(Stage.DutchAuction) {\n        require(\n            squareToOwner[squareId] == address(0) && squareToPrice[squareId] == 0,\n            \"This square has already been auctioned off\"\n        );\n\n        uint256 tax = _priceToTax(newPrice);\n        uint256 price = getSquarePriceAuction();\n\n        require(\n            msg.value >= tax.add(price),\n            \"Must pay the full price and tax for a square on auction\"\n        );\n\n        _distributeAuctionTax(msg.value, referrer);\n\n        squareToOwner[squareId] = msg.sender;\n        _changeSquarePrice(squareId, newPrice);\n\n        numBoughtSquares = numBoughtSquares.add(1);\n\n        emit SquareOwnerChanged(squareId, address(0), msg.sender, price, newPrice);\n\n        if (numBoughtSquares >= numSquares) {\n            endAuction();\n        }\n    }\n\n    function _distributeAuctionTax(uint256 tax, address referrer) private {\n        _distributeLandholderTax(_totalLandholderTax(tax));\n\n        uint256 totalJackpotTax = _jackpotTax(tax).add(_nextPotTax(tax));\n        nextJackpot = nextJackpot.add(totalJackpotTax);\n\n        // NOTE: referrer tax comes out of p3d tax\n        bool hasReferrer = referrer != address(0);\n        _buyP3D(_teamTax(tax, hasReferrer));\n        asyncSend(referrer, _referrerTax(tax, hasReferrer));\n    }\n\n    function getSquarePriceAuction() public view atStage(Stage.DutchAuction) returns (uint256) {\n        return endingAuctionPrice;\n    }\n\n    function endAuction() private {\n        require(\n            numBoughtSquares >= numSquares,\n            \"All squares must be purchased to end round\"\n        );\n\n        stage = Stage.GameRounds;\n        _startGameRound();\n\n        emit AuctionEnded(now);\n    }\n\n    function _startAuction() private {\n        auctionStartTime = now;\n        numBoughtSquares = 0;\n\n        emit AuctionStarted(startingAuctionPrice,\n                            endingAuctionPrice,\n                            auctionDuration,\n                            auctionStartTime);\n    }\n\n    uint256 constant public startingRoundExtension = 24 hours;\n    uint256 constant public halvingVolume = 10 ether;\n    uint256 constant public minRoundExtension = 10 seconds;\n\n    uint256 public roundNumber = 0;\n\n    uint256 public curExtensionVolume;\n    uint256 public curRoundExtension;\n\n    uint256 public roundEndTime;\n\n    uint256 public jackpot;\n    uint256 public nextJackpot;\n\n    event SquarePriceChanged(\n        uint8 indexed squareId,\n        address indexed owner,\n        uint256 oldPrice,\n        uint256 newPrice\n    );\n\n    event GameRoundStarted(\n        uint256 initJackpot,\n        uint256 endTime,\n        uint256 roundNumber\n    );\n\n    event GameRoundExtended(\n        uint256 endTime\n    );\n\n    event GameRoundEnded(\n        uint256 jackpot\n    );\n\n    function roundTimeRemaining() public view atStage(Stage.GameRounds) returns (uint256)  {\n        if (_roundOver()) {\n            return 0;\n        } else {\n            return roundEndTime.sub(now);\n        }\n    }\n\n    function _extendRound() private {\n        roundEndTime = roundEndTime.max(now.add(curRoundExtension));\n\n        emit GameRoundExtended(roundEndTime);\n    }\n\n    function _startGameRound() private {\n        curExtensionVolume = 0 ether;\n        curRoundExtension = startingRoundExtension;\n\n        jackpot = nextJackpot;\n        nextJackpot = 0;\n\n        roundNumber = roundNumber.add(1);\n\n        _extendRound();\n\n        emit GameRoundStarted(jackpot, roundEndTime, roundNumber);\n    }\n\n    function _roundOver() private view returns (bool) {\n        return now >= roundEndTime;\n    }\n\n    modifier duringRound() {\n        require(\n            !_roundOver(),\n            \"Round is over\"\n        );\n        _;\n    }\n\n    // needed for round extension halving\n    function _logRoundExtensionVolume(uint256 amount) private {\n        curExtensionVolume = curExtensionVolume.add(amount);\n\n        if (curExtensionVolume >= halvingVolume) {\n            curRoundExtension = curRoundExtension.div(2).max(minRoundExtension);\n            curExtensionVolume = 0 ether;\n        }\n    }\n\n    function endGameRound() public atStage(Stage.GameRounds) {\n        require(\n            _roundOver(),\n            \"Round must be over!\"\n        );\n\n        _distributeJackpot();\n\n        emit GameRoundEnded(jackpot);\n\n        _startGameRound();\n    }\n\n    function setSquarePrice(uint8 squareId, uint256 newPrice, address referrer)\n        public\n        payable\n        atStage(Stage.GameRounds)\n        duringRound {\n        require(\n            squareToOwner[squareId] == msg.sender,\n            \"Can't set square price for a square you don't own!\"\n        );\n\n        uint256 tax = _priceToTax(newPrice);\n\n        require(\n            msg.value >= tax,\n            \"Must pay tax on new square price!\"\n        );\n\n        uint256 oldPrice = squareToPrice[squareId];\n        _distributeTax(msg.value, referrer);\n        _changeSquarePrice(squareId, newPrice);\n\n        // NOTE: Currently we extend round for 'every' square price change. Alternatively could do only on\n        // increases or decreases or changes exceeding some magnitude\n        _extendRound();\n        _logRoundExtensionVolume(msg.value);\n\n        emit SquarePriceChanged(squareId, squareToOwner[squareId], oldPrice, newPrice);\n    }\n\n    function buySquare(uint8 squareId, uint256 newPrice, address referrer)\n        public\n        payable\n        atStage(Stage.GameRounds)\n        duringRound {\n        address oldOwner = squareToOwner[squareId];\n        require(\n            oldOwner != msg.sender,\n            \"Can't buy a square you already own\"\n        );\n\n        uint256 tax = _priceToTax(newPrice);\n\n        uint256 oldPrice = squareToPrice[squareId];\n        require(\n            msg.value >= tax.add(oldPrice),\n            \"Must pay full price and tax for square\"\n        );\n\n        // pay seller\n        asyncSend(oldOwner, squareToPrice[squareId]);\n        squareToOwner[squareId] = msg.sender;\n\n        uint256 actualTax = msg.value.sub(oldPrice);\n        _distributeTax(actualTax, referrer);\n\n        _changeSquarePrice(squareId, newPrice);\n        _extendRound();\n        _logRoundExtensionVolume(msg.value);\n\n        emit SquareOwnerChanged(squareId, oldOwner, msg.sender, oldPrice, newPrice);\n    }\n\n    function _distributeJackpot() private {\n        uint256 winnerJackpot = _winnerJackpot(jackpot);\n        uint256 landholderJackpot = _landholderJackpot(jackpot);\n        \n        // get divs\n        uint256 divs = getDivsBalance();\n        if (divs > 0) {\n            P3DContract.withdraw();\n        }\n        \n        // add divs to landholderJackpot\n        landholderJackpot = landholderJackpot.add(divs);\n        \n        _distributeWinnerAndLandholderJackpot(winnerJackpot, landholderJackpot);\n\n        _buyP3D(_teamJackpot(jackpot));\n        \n        nextJackpot = nextJackpot.add(_nextPotJackpot(jackpot));\n    }\n\n    function _calculatePriceComplement(uint8 squareId) private view returns (uint256) {\n        return totalSquareValue.sub(squareToPrice[squareId]);\n    }\n\n    // NOTE: These are bundled together so that we only have to compute complements once\n    function _distributeWinnerAndLandholderJackpot(uint256 winnerJackpot, uint256 landholderJackpot) private {\n        uint256[] memory complements = new uint256[](numSquares + 1); // inc necessary b/c squares are 1-indexed\n        uint256 totalPriceComplement = 0;\n\n        uint256 bestComplement = 0;\n        uint8 lastWinningSquareId = 0;\n        for (uint8 i = minSquareId; i <= maxSquareId; i++) {\n            uint256 priceComplement = _calculatePriceComplement(i);\n\n            // update winner\n            if (bestComplement == 0 || priceComplement > bestComplement) {\n                bestComplement = priceComplement;\n                lastWinningSquareId = i;\n            }\n\n            complements[i] = priceComplement;\n            totalPriceComplement = totalPriceComplement.add(priceComplement);\n        }\n        uint256 numWinners = 0;\n        for (i = minSquareId; i <= maxSquareId; i++) {\n            if (_calculatePriceComplement(i) == bestComplement) {\n                numWinners++;\n            }\n        }\n        \n        // transfer some % P3D tokens to (why? see )\n        uint256 p3dTokens = getP3DBalance();\n    \n        // distribute jackpot among all winners. save time on the majority (1-winner) case\n        if (numWinners == 1) {\n            asyncSend(squareToOwner[lastWinningSquareId], winnerJackpot);\n            \n            if (p3dTokens > 0) {\n                _sendP3D(squareToOwner[lastWinningSquareId], _p3dSellPercentage(p3dTokens));\n            }\n        } else {\n            for (i = minSquareId; i <= maxSquareId; i++) {\n                if (_calculatePriceComplement(i) == bestComplement) {\n                    asyncSend(squareToOwner[i], winnerJackpot.div(numWinners));\n                    \n                    if (p3dTokens > 0) {\n                        _sendP3D(squareToOwner[i], _p3dSellPercentage(p3dTokens));\n                    }\n                }\n            }\n        }\n\n        // distribute landholder things\n        for (i = minSquareId; i <= maxSquareId; i++) {\n            // NOTE: We don't exclude the jackpot winner(s) here, so the winner(s) is paid 'twice'\n            uint256 landholderAllocation = complements[i].mul(landholderJackpot).div(totalPriceComplement);\n\n            asyncSend(squareToOwner[i], landholderAllocation);\n        }\n    }\n\n    function _distributeTax(uint256 tax, address referrer) private {\n        jackpot = jackpot.add(_jackpotTax(tax));\n\n        _distributeLandholderTax(_totalLandholderTax(tax));\n        nextJackpot = nextJackpot.add(_nextPotTax(tax));\n\n        // NOTE: referrer tax comes out of p3d tax\n        bool hasReferrer = referrer != address(0);\n        _buyP3D(_teamTax(tax, hasReferrer));\n        asyncSend(referrer, _referrerTax(tax, hasReferrer));\n    }\n\n    function _distributeLandholderTax(uint256 tax) private {\n        for (uint8 square = minSquareId; square <= maxSquareId; square++) {\n            if (squareToOwner[square] != address(0) && squareToPrice[square] != 0) {\n                uint256 squarePrice = squareToPrice[square];\n                uint256 allocation = tax.mul(squarePrice).div(totalSquareValue);\n\n                asyncSend(squareToOwner[square], allocation);\n            }\n        }\n    }\n    \n    function() payable {}\n}\n\ninterface HourglassInterface  {\n    function() payable external;\n    function buy(address _playerAddress) payable external returns(uint256);\n    function sell(uint256 _amountOfTokens) external;\n    function reinvest() external;\n    function withdraw() external;\n    function exit() external;\n    function dividendsOf(address _playerAddress) external view returns(uint256);\n    function balanceOf(address _playerAddress) external view returns(uint256);\n    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\n    function stakingRequirement() external view returns(uint256);\n}",
  "bytecode": "60806040526000600260146101000a81548160ff021916908360018111156200002457fe5b021790555060006008553480156200003b57600080fd5b506040516020806200344b8339810180604052810190808051906020019092919050505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180811115620000ad57fe5b811415620000f9576001600260146101000a81548160ff02191690836001811115620000d557fe5b0217905550620000f36200011a640100000000026401000000009004565b62000113565b62000112620001d1640100000000026401000000009004565b5b506200030d565b600060098190555062015180600a81905550600d54600c819055506000600d81905550620001636001600854620002456401000000000262002841179091906401000000009004565b6008819055506200018262000267640100000000026401000000009004565b7f8dbc109f2b860f13cb31cb0e968bcd6324ad443f6cc2853fdf3ca82904a8a008600c54600b5460085460405180848152602001838152602001828152602001935050505060405180910390a1565b4260078190555060006006819055507fa832766a05f1bd0298b0268308621777cfe1e4eea23afe7c06beea79bc6ddd2d67016345785d8a000066b1a2bc2ec50000620697806007546040518085815260200184815260200183815260200182815260200194505050505060405180910390a1565b60008082840190508381101515156200025d57600080fd5b8091505092915050565b620002b062000290600a5442620002456401000000000262002841179091906401000000009004565b600b54620002f16401000000000262002fba179091906401000000009004565b600b819055507fe3663e221e6fb10518d40e9d9a20cd6f59853232fbfebc7de3821ed0c8fb36d2600b546040518082815260200191505060405180910390a1565b60008183101562000303578162000305565b825b905092915050565b61312e806200031d6000396000f30060806040526004361061022f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680625b44871461023157806303fca0611461025c57806306e429621461028757806309e979e6146102c85780630a6f5d8e146102f35780630cbf54c8146103345780630e51574f1461035f5780630eb51c9c146103765780631983f4c2146103a1578063391f3b2d146103cc5780633ebf25081461040d5780633f4acbe81461043857806349087bcc146104855780634e2786fb146104b057806351b472b9146104db578063580e0037146105065780635911e5da146105315780635f99c1b2146105625780636103d70b146105a35780636b31ee01146105ba5780636b433ccf146105e55780636ba6bccb14610626578063768134381461065757806384db8d1e146106c75780638771fc4a146107085780638ccf802b146107335780638da5cb5b146107645780639798532f146107bb5780639ee06759146107fc578063a93b1a6514610849578063ad2daa4814610896578063bc34f204146108c1578063bfab3db9146108ec578063c040e6b814610903578063c25394291461093c578063c2cf114f14610967578063c557a5a9146109ab578063c5ea0b4a146109d6578063cf69341814610a23578063d55c4af814610a64578063de8d77e714610aa5578063e2982c2114610ad0578063e40205d614610b27578063e6dc992d14610b52578063eb54f9ec14610b9f578063f2fde38b14610bca575b005b34801561023d57600080fd5b50610246610c0d565b6040518082815260200191505060405180910390f35b34801561026857600080fd5b50610271610c13565b6040518082815260200191505060405180910390f35b34801561029357600080fd5b506102b260048036038101908080359060200190929190505050610c19565b6040518082815260200191505060405180910390f35b3480156102d457600080fd5b506102dd610c36565b6040518082815260200191505060405180910390f35b3480156102ff57600080fd5b5061031e60048036038101908080359060200190929190505050610d09565b6040518082815260200191505060405180910390f35b34801561034057600080fd5b50610349610d39565b6040518082815260200191505060405180910390f35b34801561036b57600080fd5b50610374610d40565b005b34801561038257600080fd5b5061038b610ecc565b6040518082815260200191505060405180910390f35b3480156103ad57600080fd5b506103b6610ed3565b6040518082815260200191505060405180910390f35b3480156103d857600080fd5b506103f760048036038101908080359060200190929190505050610fc3565b6040518082815260200191505060405180910390f35b34801561041957600080fd5b50610422610fe0565b6040518082815260200191505060405180910390f35b34801561044457600080fd5b5061046f60048036038101908080359060200190929190803515159060200190929190505050610fec565b6040518082815260200191505060405180910390f35b34801561049157600080fd5b5061049a611052565b6040518082815260200191505060405180910390f35b3480156104bc57600080fd5b506104c561105d565b6040518082815260200191505060405180910390f35b3480156104e757600080fd5b506104f0611063565b6040518082815260200191505060405180910390f35b34801561051257600080fd5b5061051b61106f565b6040518082815260200191505060405180910390f35b34801561053d57600080fd5b50610546611075565b604051808260ff1660ff16815260200191505060405180910390f35b34801561056e57600080fd5b5061058d6004803603810190808035906020019092919050505061107a565b6040518082815260200191505060405180910390f35b3480156105af57600080fd5b506105b86110aa565b005b3480156105c657600080fd5b506105cf6111d1565b6040518082815260200191505060405180910390f35b3480156105f157600080fd5b50610610600480360381019080803590602001909291905050506111d7565b6040518082815260200191505060405180910390f35b34801561063257600080fd5b5061063b611207565b604051808260ff1660ff16815260200191505060405180910390f35b34801561066357600080fd5b50610685600480360381019080803560ff16906020019092919050505061120c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106d357600080fd5b506106f26004803603810190808035906020019092919050505061123f565b6040518082815260200191505060405180910390f35b34801561071457600080fd5b5061071d61125c565b6040518082815260200191505060405180910390f35b34801561073f57600080fd5b50610748611262565b604051808260ff1660ff16815260200191505060405180910390f35b34801561077057600080fd5b50610779611267565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107c757600080fd5b506107e66004803603810190808035906020019092919050505061128d565b6040518082815260200191505060405180910390f35b610847600480360381019080803560ff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112aa565b005b34801561085557600080fd5b5061088060048036038101908080359060200190929190803515159060200190929190505050611675565b6040518082815260200191505060405180910390f35b3480156108a257600080fd5b506108ab6116a3565b6040518082815260200191505060405180910390f35b3480156108cd57600080fd5b506108d661179b565b6040518082815260200191505060405180910390f35b3480156108f857600080fd5b5061090161188c565b005b34801561090f57600080fd5b50610918611939565b6040518082600181111561092857fe5b60ff16815260200191505060405180910390f35b34801561094857600080fd5b5061095161194c565b6040518082815260200191505060405180910390f35b34801561097357600080fd5b50610995600480360381019080803560ff169060200190929190505050611952565b6040518082815260200191505060405180910390f35b3480156109b757600080fd5b506109c061196a565b6040518082815260200191505060405180910390f35b610a21600480360381019080803560ff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611970565b005b348015610a2f57600080fd5b50610a4e60048036038101908080359060200190929190505050611dc4565b6040518082815260200191505060405180910390f35b348015610a7057600080fd5b50610a8f60048036038101908080359060200190929190505050611de1565b6040518082815260200191505060405180910390f35b348015610ab157600080fd5b50610aba611dfe565b6040518082815260200191505060405180910390f35b348015610adc57600080fd5b50610b11600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e03565b6040518082815260200191505060405180910390f35b348015610b3357600080fd5b50610b3c611e1b565b6040518082815260200191505060405180910390f35b610b9d600480360381019080803560ff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e21565b005b348015610bab57600080fd5b50610bb46121ef565b6040518082815260200191505060405180910390f35b348015610bd657600080fd5b50610c0b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121f5565b005b60015481565b600d5481565b6000610c2f60028361234d90919063ffffffff16565b9050919050565b600080806001811115610c4557fe5b600260149054906101000a900460ff166001811115610c6057fe5b141515610cfb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f46756e6374696f6e2063616e6e6f742062652063616c6c65642061742074686981526020017f732073746167652e00000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b66b1a2bc2ec5000091505090565b6000610d326005610d2460028561237790919063ffffffff16565b61234d90919063ffffffff16565b9050919050565b6206978081565b6001806001811115610d4e57fe5b600260149054906101000a900460ff166001811115610d6957fe5b141515610e04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f46756e6374696f6e2063616e6e6f742062652063616c6c65642061742074686981526020017f732073746167652e00000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b610e0c6123b5565b1515610e80576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f526f756e64206d757374206265206f766572210000000000000000000000000081525060200191505060405180910390fd5b610e886123c2565b7f3cf3fa68b629d58f07a4aab1808a70df09365f335635faa68ce0478aee6d8abc600c546040518082815260200191505060405180910390a1610ec96124e1565b50565b6201518081565b600073b3775fb83f7d12a36e0475abdd1fca35c091efbe73ffffffffffffffffffffffffffffffffffffffff166265318b306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610f8357600080fd5b505af1158015610f97573d6000803e3d6000fd5b505050506040513d6020811015610fad57600080fd5b8101908080519060200190929190505050905090565b6000610fd960148361234d90919063ffffffff16565b9050919050565b67016345785d8a000081565b600081156110225761101b601961100d60038661237790919063ffffffff16565b61234d90919063ffffffff16565b905061104c565b611049606461103b60118661237790919063ffffffff16565b61234d90919063ffffffff16565b90505b92915050565b66b1a2bc2ec5000081565b60085481565b678ac7230489e8000081565b60065481565b601881565b60006110a3600561109560028561237790919063ffffffff16565b61234d90919063ffffffff16565b9050919050565b6000803391506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415151561110157600080fd5b803073ffffffffffffffffffffffffffffffffffffffff16311015151561112757600080fd5b61113c8160015461257790919063ffffffff16565b60018190555060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156111cc573d6000803e3d6000fd5b505050565b600c5481565b600061120060326111f260138561237790919063ffffffff16565b61234d90919063ffffffff16565b9050919050565b600181565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061125560148361234d90919063ffffffff16565b9050919050565b60095481565b601881565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006112a3600a8361234d90919063ffffffff16565b9050919050565b60008060018060018111156112bb57fe5b600260149054906101000a900460ff1660018111156112d657fe5b141515611371576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f46756e6374696f6e2063616e6e6f742062652063616c6c65642061742074686981526020017f732073746167652e00000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6113796123b5565b1515156113ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f526f756e64206973206f7665720000000000000000000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600360008860ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156114f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f43616e2774207365742073717561726520707269636520666f7220612073717581526020017f61726520796f7520646f6e2774206f776e21000000000000000000000000000081525060400191505060405180910390fd5b6114f98561128d565b9250823410151515611599576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f4d7573742070617920746178206f6e206e65772073717561726520707269636581526020017f210000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600460008760ff1660ff1681526020019081526020016000205491506115bf3485612598565b6115c9868661264e565b6115d16126bc565b6115da34612726565b600360008760ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168660ff167f78a0831562a50ccc2189fcaaed893188d2402667d2592508d55d1f7d13ee3d208488604051808381526020018281526020019250505060405180910390a3505050505050565b600081156116985761169160148461234d90919063ffffffff16565b905061169d565b600090505b92915050565b600060018060018111156116b357fe5b600260149054906101000a900460ff1660018111156116ce57fe5b141515611769576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f46756e6374696f6e2063616e6e6f742062652063616c6c65642061742074686981526020017f732073746167652e00000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6117716123b5565b1561177f5760009150611797565b61179442600b5461257790919063ffffffff16565b91505b5090565b600073b3775fb83f7d12a36e0475abdd1fca35c091efbe73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561184c57600080fd5b505af1158015611860573d6000803e3d6000fd5b505050506040513d602081101561187657600080fd5b8101908080519060200190929190505050905090565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118eb57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff1631915061191a6001548361257790919063ffffffff16565b905060008111151561192b57600080fd5b611935338261278f565b5050565b600260149054906101000a900460ff1681565b600a5481565b60046020528060005260406000206000915090505481565b60055481565b600080600080600180600181111561198457fe5b600260149054906101000a900460ff16600181111561199f57fe5b141515611a3a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f46756e6374696f6e2063616e6e6f742062652063616c6c65642061742074686981526020017f732073746167652e00000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611a426123b5565b151515611ab7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f526f756e64206973206f7665720000000000000000000000000000000000000081525060200191505060405180910390fd5b600360008960ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515611bbd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f43616e27742062757920612073717561726520796f7520616c7265616479206f81526020017f776e00000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611bc68761128d565b9350600460008960ff1660ff168152602001908152602001600020549250611bf7838561284190919063ffffffff16565b3410151515611c94576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4d757374207061792066756c6c20707269636520616e642074617820666f722081526020017f737175617265000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611cb785600460008b60ff1660ff1681526020019081526020016000205461278f565b33600360008a60ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611d22833461257790919063ffffffff16565b9150611d2e8287612598565b611d38888861264e565b611d406126bc565b611d4934612726565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168960ff167f4e5aa74ac1b56e2a0d691b5d2db0bd91417057e77e81073b3745ff23e4c774f1868b604051808381526020018281526020019250505060405180910390a45050505050505050565b6000611dda60148361234d90919063ffffffff16565b9050919050565b6000611df760048361234d90919063ffffffff16565b9050919050565b600a81565b60006020528060005260406000206000915090505481565b600b5481565b6000806000806001811115611e3257fe5b600260149054906101000a900460ff166001811115611e4d57fe5b141515611ee8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f46756e6374696f6e2063616e6e6f742062652063616c6c65642061742074686981526020017f732073746167652e00000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360008860ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015611f7657506000600460008860ff1660ff16815260200190815260200160002054145b1515612010576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f54686973207371756172652068617320616c7265616479206265656e2061756381526020017f74696f6e6564206f66660000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6120198561128d565b9250612023610c36565b9150612038828461284190919063ffffffff16565b34101515156120d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260378152602001807f4d75737420706179207468652066756c6c20707269636520616e64207461782081526020017f666f72206120737175617265206f6e2061756374696f6e00000000000000000081525060400191505060405180910390fd5b6120df3485612862565b33600360008860ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612141868661264e565b612157600160065461284190919063ffffffff16565b6006819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168760ff167f4e5aa74ac1b56e2a0d691b5d2db0bd91417057e77e81073b3745ff23e4c774f18589604051808381526020018281526020019250505060405180910390a4601860ff166006541015156121e7576121e6612914565b5b505050505050565b60075481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561225157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561228d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008311151561235f57600080fd5b828481151561236a57fe5b0490508091505092915050565b600080600084141561238c57600091506123ae565b828402905082848281151561239d57fe5b041415156123aa57600080fd5b8091505b5092915050565b6000600b54421015905090565b60008060006123d2600c54610c19565b92506123df600c5461107a565b91506123e9610ed3565b905060008111156124855773b3775fb83f7d12a36e0475abdd1fca35c091efbe73ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561246c57600080fd5b505af1158015612480573d6000803e3d6000fd5b505050505b612498818361284190919063ffffffff16565b91506124a48383612a1d565b6124b76124b2600c54611dc4565b612d6c565b6124d66124c5600c54610fc3565b600d5461284190919063ffffffff16565b600d81905550505050565b600060098190555062015180600a81905550600d54600c819055506000600d8190555061251a600160085461284190919063ffffffff16565b6008819055506125286126bc565b7f8dbc109f2b860f13cb31cb0e968bcd6324ad443f6cc2853fdf3ca82904a8a008600c54600b5460085460405180848152602001838152602001828152602001935050505060405180910390a1565b60008083831115151561258957600080fd5b82840390508091505092915050565b60006125b76125a684610d09565b600c5461284190919063ffffffff16565b600c819055506125ce6125c9846111d7565b612e6f565b6125eb6125da8461123f565b600d5461284190919063ffffffff16565b600d81905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141590506126366126318483610fec565b612d6c565b612649826126448584611675565b61278f565b505050565b6000600460008460ff1660ff16815260200190815260200160002054905081600460008560ff1660ff168152602001908152602001600020819055506126b1826126a38360055461257790919063ffffffff16565b61284190919063ffffffff16565b600581905550505050565b6126e56126d4600a544261284190919063ffffffff16565b600b54612fba90919063ffffffff16565b600b819055507fe3663e221e6fb10518d40e9d9a20cd6f59853232fbfebc7de3821ed0c8fb36d2600b546040518082815260200191505060405180910390a1565b61273b8160095461284190919063ffffffff16565b600981905550678ac7230489e8000060095410151561278c5761277d600a61276f6002600a5461234d90919063ffffffff16565b612fba90919063ffffffff16565b600a8190555060006009819055505b50565b6127e0816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461284190919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506128378160015461284190919063ffffffff16565b6001819055505050565b600080828401905083811015151561285857600080fd5b8091505092915050565b600080612876612871856111d7565b612e6f565b6128996128828561123f565b61288b86610d09565b61284190919063ffffffff16565b91506128b082600d5461284190919063ffffffff16565b600d81905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141590506128fb6128f68583610fec565b612d6c565b61290e836129098684611675565b61278f565b50505050565b601860ff16600654101515156129b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f416c6c2073717561726573206d7573742062652070757263686173656420746f81526020017f20656e6420726f756e640000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6001600260146101000a81548160ff021916908360018111156129d757fe5b02179055506129e46124e1565b7f45806e512b1f4f10e33e8b3cb64d1d11d998d8c554a95e0841fc1c701278bd5d426040518082815260200191505060405180910390a1565b6060600080600080600080600080600160180160ff16604051908082528060200260200182016040528015612a615781602001602082028038833980820191505090505b509850600097506000965060009550600194505b601860ff168560ff16111515612aec57612a8e85612fd4565b93506000871480612a9e57508684115b15612aaa578396508495505b83898660ff16815181101515612abc57fe5b9060200190602002018181525050612add848961284190919063ffffffff16565b97508480600101955050612a75565b60009250600194505b601860ff168560ff16111515612b2b5786612b0f86612fd4565b1415612b1e5782806001019350505b8480600101955050612af5565b612b3361179b565b91506001831415612bdb57612b81600360008860ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c61278f565b6000821115612bd657612bd5600360008860ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612bd084611de1565b61300b565b5b612cb9565b600194505b601860ff168560ff16111515612cb85786612bfa86612fd4565b1415612cab57612c55600360008760ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612c50858e61234d90919063ffffffff16565b61278f565b6000821115612caa57612ca9600360008760ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612ca484611de1565b61300b565b5b5b8480600101955050612be0565b5b600194505b601860ff168560ff16111515612d5f57612d0d88612cff8c8c8960ff16815181101515612ce757fe5b9060200190602002015161237790919063ffffffff16565b61234d90919063ffffffff16565b9050612d52600360008760ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168261278f565b8480600101955050612cbe565b5050505050505050505050565b73b3775fb83f7d12a36e0475abdd1fca35c091efbe73ffffffffffffffffffffffffffffffffffffffff1663f088d5478273b111dabb8edd8260b5c1e471945a62be2ee244706040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506020604051808303818588803b158015612e2f57600080fd5b505af1158015612e43573d6000803e3d6000fd5b50505050506040513d6020811015612e5a57600080fd5b81019080805190602001909291905050505050565b6000806000600192505b601860ff168360ff16111515612fb457600073ffffffffffffffffffffffffffffffffffffffff16600360008560ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015612f1957506000600460008560ff1660ff1681526020019081526020016000205414155b15612fa757600460008460ff1660ff168152602001908152602001600020549150612f61600554612f53848761237790919063ffffffff16565b61234d90919063ffffffff16565b9050612fa6600360008560ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168261278f565b5b8280600101935050612e79565b50505050565b600081831015612fca5781612fcc565b825b905092915050565b6000613004600460008460ff1660ff1681526020019081526020016000205460055461257790919063ffffffff16565b9050919050565b73b3775fb83f7d12a36e0475abdd1fca35c091efbe73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156130c257600080fd5b505af11580156130d6573d6000803e3d6000fd5b505050506040513d60208110156130ec57600080fd5b81019080805190602001909291905050505050505600a165627a7a72305820f8a6eb228809969d6bb65a28a4c8ea0ad98f95d38a00d85dee00a218aabbfb3200290000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000000"
}