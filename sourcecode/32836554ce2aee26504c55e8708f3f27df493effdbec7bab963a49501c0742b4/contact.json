{
  "address": "0x91e64f39c1fe14492e8fdf5a8b0f305bd218c8a1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Vodi X Token",
  "contractName": "VodiX",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-14\n*/\n\npragma solidity 0.5.0;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title ControlCentreInterface\n * @dev ControlCentreInterface is an interface for providing commonly used function\n * signatures to the ControlCentre\n */\ninterface IController {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n\n    function approve(address owner, address spender, uint256 value) external returns (bool);\n    function transfer(address owner, address to, uint value) external returns (bool);\n    function transferFrom(address owner, address from, address to, uint256 amount) external returns (uint256);\n    function mint(address _to, uint256 _amount)  external returns (bool);\n\n    function increaseAllowance(address owner, address spender, uint256 addedValue) external returns (uint256);\n    function decreaseAllowance(address owner, address spender, uint256 subtractedValue) external returns (uint256);\n\n    function burn(address owner, uint value) external returns (bool);\n    function burnFrom(address spender, address from, uint value) external returns (uint256);\n}\n\n\ncontract ERC20 is Ownable, IERC20 {\n\n    event Mint(address indexed to, uint256 amount);\n    event Log(address to);\n    event MintToggle(bool status);\n    \n    // Constant Functions\n    function balanceOf(address _owner) public view returns (uint256) {\n        return IController(owner()).balanceOf(_owner);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return IController(owner()).totalSupply();\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return IController(owner()).allowance(_owner, _spender);\n    }\n\n    function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    function mintToggle(bool status) public onlyOwner returns (bool) {\n        emit MintToggle(status);\n        return true;\n    }\n\n    // public functions\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        IController(owner()).approve(msg.sender, _spender, _value);\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        uint256 allowed = IController(owner()).increaseAllowance(msg.sender, spender, addedValue);\n        emit Approval(msg.sender, spender, allowed);\n        return true;\n    }\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        uint256 allowed = IController(owner()).decreaseAllowance(msg.sender, spender, subtractedValue);\n        emit Approval(msg.sender, spender, allowed);\n        return true;\n    }\n\n    function transfer(address to, uint value) public returns (bool) {\n        IController(owner()).transfer(msg.sender, to, value);\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\n        uint256 allowed = IController(owner()).transferFrom(msg.sender, _from, _to, _amount);\n        emit Approval(_from, msg.sender, allowed);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function burn(uint256 value) public returns (bool) {\n        IController(owner()).burn(msg.sender, value);\n        emit Transfer(msg.sender, address(0), value);\n        return true;\n    }\n\n    function burnFrom(address from, uint256 value) public returns (bool) {\n        uint256 allowed = IController(owner()).burnFrom(msg.sender, from, value);\n        emit Approval(from, msg.sender, allowed);\n        emit Transfer(from, address(0), value);\n        return true;\n    }\n}\n\n\ncontract VodiX is ERC20 {\n\n    string internal _name = \"Vodi X\";\n    string internal _symbol = \"VDX\";\n    uint8 internal _decimals = 18;\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}",
  "bytecode": "60c0604052600660808190527f566f64692058000000000000000000000000000000000000000000000000000060a090815261003e91600191906100df565b506040805180820190915260038082527f56445800000000000000000000000000000000000000000000000000000000006020909201918252610083916002916100df565b506003805460ff1916601217905560008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a361017a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012057805160ff191683800117855561014d565b8280016001018555821561014d579182015b8281111561014d578251825591602001919060010190610132565b5061015992915061015d565b5090565b61017791905b808211156101595760008155600101610163565b90565b61102a806200018a6000396000f3fe6080604052600436106100ed5763ffffffff60e060020a60003504166306fdde0381146100f2578063095ea7b31461017c57806318160ddd146101c957806323b872dd146101f0578063313ce56714610233578063395093511461025e57806340c10f191461029757806342966c68146102d057806370a08231146102fa578063715018a61461032d57806379cc6790146103445780638da5cb5b1461037d5780638f32d59b146103ae57806395d89b41146103c3578063a457c2d7146103d8578063a66fd42b14610411578063a9059cbb1461043d578063dd62ed3e14610476578063f2fde38b146104b1575b600080fd5b3480156100fe57600080fd5b506101076104e4565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610141578181015183820152602001610129565b50505050905090810190601f16801561016e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018857600080fd5b506101b56004803603604081101561019f57600080fd5b50600160a060020a038135169060200135610579565b604080519115158252519081900360200190f35b3480156101d557600080fd5b506101de610659565b60408051918252519081900360200190f35b3480156101fc57600080fd5b506101b56004803603606081101561021357600080fd5b50600160a060020a038135811691602081013590911690604001356106cf565b34801561023f57600080fd5b506102486107f7565b6040805160ff9092168252519081900360200190f35b34801561026a57600080fd5b506101b56004803603604081101561028157600080fd5b50600160a060020a038135169060200135610800565b3480156102a357600080fd5b506101b5600480360360408110156102ba57600080fd5b50600160a060020a0381351690602001356108e6565b3480156102dc57600080fd5b506101b5600480360360208110156102f357600080fd5b5035610972565b34801561030657600080fd5b506101de6004803603602081101561031d57600080fd5b5035600160a060020a0316610a38565b34801561033957600080fd5b50610342610acc565b005b34801561035057600080fd5b506101b56004803603604081101561036757600080fd5b50600160a060020a038135169060200135610b36565b34801561038957600080fd5b50610392610c4b565b60408051600160a060020a039092168252519081900360200190f35b3480156103ba57600080fd5b506101b5610c5a565b3480156103cf57600080fd5b50610107610c6b565b3480156103e457600080fd5b506101b5600480360360408110156103fb57600080fd5b50600160a060020a038135169060200135610cc9565b34801561041d57600080fd5b506101b56004803603602081101561043457600080fd5b50351515610d47565b34801561044957600080fd5b506101b56004803603604081101561046057600080fd5b50600160a060020a038135169060200135610d99565b34801561048257600080fd5b506101de6004803603604081101561049957600080fd5b50600160a060020a0381358116916020013516610e79565b3480156104bd57600080fd5b50610342600480360360208110156104d457600080fd5b5035600160a060020a0316610f22565b60018054604080516020601f6002600019610100878916150201909516949094049384018190048102820181019092528281526060939092909183018282801561056f5780601f106105445761010080835404028352916020019161056f565b820191906000526020600020905b81548152906001019060200180831161055257829003601f168201915b5050505050905090565b6000610583610c4b565b604080517fe1f21c67000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a038681166024830152604482018690529151929091169163e1f21c67916064808201926020929091908290030181600087803b1580156105f657600080fd5b505af115801561060a573d6000803e3d6000fd5b505050506040513d602081101561062057600080fd5b5050604080518381529051600160a060020a038516913391600080516020610fdf8339815191529181900360200190a350600192915050565b6000610663610c4b565b600160a060020a03166318160ddd6040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561069e57600080fd5b505afa1580156106b2573d6000803e3d6000fd5b505050506040513d60208110156106c857600080fd5b5051905090565b6000806106da610c4b565b604080517f15dacbea000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a038881166024830152878116604483015260648201879052915192909116916315dacbea916084808201926020929091908290030181600087803b15801561075557600080fd5b505af1158015610769573d6000803e3d6000fd5b505050506040513d602081101561077f57600080fd5b50516040805182815290519192503391600160a060020a03881691600080516020610fdf833981519152919081900360200190a383600160a060020a031685600160a060020a0316600080516020610fbf833981519152856040518082815260200191505060405180910390a3506001949350505050565b60035460ff1690565b60008061080b610c4b565b604080517f6c43a2ca000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0387811660248301526044820187905291519290911691636c43a2ca916064808201926020929091908290030181600087803b15801561087e57600080fd5b505af1158015610892573d6000803e3d6000fd5b505050506040513d60208110156108a857600080fd5b5051604080518281529051919250600160a060020a038616913391600080516020610fdf833981519152919081900360200190a35060019392505050565b60006108f0610c5a565b15156108fb57600080fd5b604080518381529051600160a060020a038516917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a2604080518381529051600160a060020a03851691600091600080516020610fbf8339815191529181900360200190a350600192915050565b600061097c610c4b565b600160a060020a0316639dc29fac33846040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156109de57600080fd5b505af11580156109f2573d6000803e3d6000fd5b505050506040513d6020811015610a0857600080fd5b50506040805183815290516000913391600080516020610fbf8339815191529181900360200190a3506001919050565b6000610a42610c4b565b600160a060020a03166370a08231836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015610a9a57600080fd5b505afa158015610aae573d6000803e3d6000fd5b505050506040513d6020811015610ac457600080fd5b505192915050565b610ad4610c5a565b1515610adf57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600080610b41610c4b565b604080517fec60bcf3000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a038781166024830152604482018790529151929091169163ec60bcf3916064808201926020929091908290030181600087803b158015610bb457600080fd5b505af1158015610bc8573d6000803e3d6000fd5b505050506040513d6020811015610bde57600080fd5b50516040805182815290519192503391600160a060020a03871691600080516020610fdf833981519152919081900360200190a3604080518481529051600091600160a060020a03871691600080516020610fbf8339815191529181900360200190a35060019392505050565b600054600160a060020a031690565b600054600160a060020a0316331490565b60028054604080516020601f600019610100600187161502019094168590049384018190048102820181019092528281526060939092909183018282801561056f5780601f106105445761010080835404028352916020019161056f565b600080610cd4610c4b565b604080517fd73b1dc9000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a038781166024830152604482018790529151929091169163d73b1dc9916064808201926020929091908290030181600087803b15801561087e57600080fd5b6000610d51610c5a565b1515610d5c57600080fd5b60408051831515815290517f942ab1779a4e535aa5064870a6a13f4145675a833490c1b9b3ec5c8ce56505eb9181900360200190a1506001919050565b6000610da3610c4b565b604080517fbeabacc8000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a038681166024830152604482018690529151929091169163beabacc8916064808201926020929091908290030181600087803b158015610e1657600080fd5b505af1158015610e2a573d6000803e3d6000fd5b505050506040513d6020811015610e4057600080fd5b5050604080518381529051600160a060020a038516913391600080516020610fbf8339815191529181900360200190a350600192915050565b6000610e83610c4b565b604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015285811660248301529151929091169163dd62ed3e91604480820192602092909190829003018186803b158015610eef57600080fd5b505afa158015610f03573d6000803e3d6000fd5b505050506040513d6020811015610f1957600080fd5b50519392505050565b610f2a610c5a565b1515610f3557600080fd5b610f3e81610f41565b50565b600160a060020a0381161515610f5657600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a723058200bb05d60a486571671edf838abaec6399212b511a84b1f7f94ff32abb3f307d30029"
}