{
  "address": "0x48a9fdc27f8fc3b102bb4c7748b6c4b3af6fa2d4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CRYPTCOIN",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-22\n*/\n\npragma solidity ^0.5.1;\n\n// ----------------------------------------------------------------------------\n// 'CRYPTCOIN' token contract\n//\n// Deployed to : 0x6ba16345DFddB01fe01fF7BADA4458243C1c0F53\n// Symbol      : CRYPT\n// Name        : CRYPTCOIN\n// Total supply: 4000000\n// Decimals    : 8\n//\n// Enjoy.\n//\n// (c) by Ahiwe Onyebuchi Valentine.\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) public pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) public pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\n// token transfers\n// ----------------------------------------------------------------------------\ncontract CRYPTCOIN is ERC20Interface, Owned, SafeMath {\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public {\n        symbol = \"CRYPT\";\n        name = \"CRYPTCOIN\";\n        decimals = 8;\n        _totalSupply = 400000000000000;\n        balances[0x6ba16345DFddB01fe01fF7BADA4458243C1c0F53] = _totalSupply;\n        emit Transfer(address(0), 0x6ba16345DFddB01fe01fF7BADA4458243C1c0F53, _totalSupply);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public view returns (uint) {\n        return _totalSupply - balances[address(0)];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account tokenOwner\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to to account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for spender to transferFrom(...) tokens\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces \n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer tokens from the from account to the to account\n    // \n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the from account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = safeSub(balances[from], tokens);\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for spender to transferFrom(...) tokens\n    // from the token owner's account. The spender contract function\n    // receiveApproval(...) is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Don't accept ETH\n    // ------------------------------------------------------------------------\n    function () external payable {\n        revert();\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a031916331790556040805180820190915260058082527f4352595054000000000000000000000000000000000000000000000000000000602090920191825261006791600291610147565b506040805180820190915260098082527f4352595054434f494e000000000000000000000000000000000000000000000060209092019182526100ac91600391610147565b506004805460ff1916600817905566016bcc41e900006005819055736ba16345dfddb01fe01ff7bada4458243c1c0f536000818152600660209081527fa8d752cac553d60fdf6c6478b64ff617053b5be99c166c7d4cb5cc4b8f6221ee8490556040805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36101e2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018857805160ff19168380011785556101b5565b828001600101855582156101b5579182015b828111156101b557825182559160200191906001019061019a565b506101c19291506101c5565b5090565b6101df91905b808211156101c157600081556001016101cb565b90565b610cae806101f16000396000f3fe60806040526004361061010b577c0100000000000000000000000000000000000000000000000000000000600035046306fdde038114610110578063095ea7b31461019a57806318160ddd146101e757806323b872dd1461020e578063313ce567146102515780633eaaf86b1461027c57806370a082311461029157806379ba5097146102c45780638da5cb5b146102db57806395d89b411461030c578063a293d1e814610321578063a9059cbb14610351578063b5931f7c1461038a578063cae9ca51146103ba578063d05c78da14610482578063d4ee1d90146104b2578063dc39d06d146104c7578063dd62ed3e14610500578063e6cb90131461053b578063f2fde38b1461056b575b600080fd5b34801561011c57600080fd5b5061012561059e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015f578181015183820152602001610147565b50505050905090810190601f16801561018c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a657600080fd5b506101d3600480360360408110156101bd57600080fd5b50600160a060020a03813516906020013561062c565b604080519115158252519081900360200190f35b3480156101f357600080fd5b506101fc610693565b60408051918252519081900360200190f35b34801561021a57600080fd5b506101d36004803603606081101561023157600080fd5b50600160a060020a038135811691602081013590911690604001356106c5565b34801561025d57600080fd5b506102666107be565b6040805160ff9092168252519081900360200190f35b34801561028857600080fd5b506101fc6107c7565b34801561029d57600080fd5b506101fc600480360360208110156102b457600080fd5b5035600160a060020a03166107cd565b3480156102d057600080fd5b506102d96107e8565b005b3480156102e757600080fd5b506102f0610870565b60408051600160a060020a039092168252519081900360200190f35b34801561031857600080fd5b5061012561087f565b34801561032d57600080fd5b506101fc6004803603604081101561034457600080fd5b50803590602001356108d7565b34801561035d57600080fd5b506101d36004803603604081101561037457600080fd5b50600160a060020a0381351690602001356108ec565b34801561039657600080fd5b506101fc600480360360408110156103ad57600080fd5b5080359060200135610990565b3480156103c657600080fd5b506101d3600480360360608110156103dd57600080fd5b600160a060020a038235169160208101359181019060608101604082013564010000000081111561040d57600080fd5b82018360208201111561041f57600080fd5b8035906020019184600183028401116401000000008311171561044157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506109b1945050505050565b34801561048e57600080fd5b506101fc600480360360408110156104a557600080fd5b5080359060200135610b12565b3480156104be57600080fd5b506102f0610b37565b3480156104d357600080fd5b506101d3600480360360408110156104ea57600080fd5b50600160a060020a038135169060200135610b46565b34801561050c57600080fd5b506101fc6004803603604081101561052357600080fd5b50600160a060020a0381358116916020013516610c01565b34801561054757600080fd5b506101fc6004803603604081101561055e57600080fd5b5080359060200135610c2c565b34801561057757600080fd5b506102d96004803603602081101561058e57600080fd5b5035600160a060020a0316610c3c565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106245780601f106105f957610100808354040283529160200191610624565b820191906000526020600020905b81548152906001019060200180831161060757829003601f168201915b505050505081565b336000818152600760209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b6000805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8546005540390565b600160a060020a0383166000908152600660205260408120546106e890836108d7565b600160a060020a038516600090815260066020908152604080832093909355600781528282203383529052205461071f90836108d7565b600160a060020a03808616600090815260076020908152604080832033845282528083209490945591861681526006909152205461075d9083610c2c565b600160a060020a0380851660008181526006602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60045460ff1681565b60055481565b600160a060020a031660009081526006602052604090205490565b600154600160a060020a031633146107ff57600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156106245780601f106105f957610100808354040283529160200191610624565b6000828211156108e657600080fd5b50900390565b3360009081526006602052604081205461090690836108d7565b3360009081526006602052604080822092909255600160a060020a038516815220546109329083610c2c565b600160a060020a0384166000818152600660209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600080821161099e57600080fd5b81838115156109a957fe5b049392505050565b336000818152600760209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a36040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018690523060448401819052608060648501908152865160848601528651600160a060020a038a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b83811015610aa1578181015183820152602001610a89565b50505050905090810190601f168015610ace5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610af057600080fd5b505af1158015610b04573d6000803e3d6000fd5b506001979650505050505050565b818102821580610b2c5750818382811515610b2957fe5b04145b151561068d57600080fd5b600154600160a060020a031681565b60008054600160a060020a03163314610b5e57600080fd5b60008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810186905290519186169263a9059cbb926044808401936020939083900390910190829087803b158015610bce57600080fd5b505af1158015610be2573d6000803e3d6000fd5b505050506040513d6020811015610bf857600080fd5b50519392505050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b8181018281101561068d57600080fd5b600054600160a060020a03163314610c5357600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a723058208f350a2c4fdaba98e87b96af89fdebc296b327a03306e45cd323d42b0c740c270029"
}