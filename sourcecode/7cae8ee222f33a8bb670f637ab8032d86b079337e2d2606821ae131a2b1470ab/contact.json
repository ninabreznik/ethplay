{
  "address": "0xca2660f10ec310df91f3597574634a7e51d717fc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Rockets",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-24\n*/\n\npragma solidity ^0.4.11;\n\ninterface ERC20Interface {\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface ERC223Interface {\n    function transfer(address to, uint value, bytes data) public  returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\ncontract ERC223ReceivingContract { \n/**\n * @dev Standard ERC223 function that will handle incoming token transfers.\n *\n * @param _from  Token sender address.\n * @param _value Amount of tokens.\n * @param _data  Transaction metadata.\n */\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\n\nlibrary SafeMath {\n    function mul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) internal pure returns (uint) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\n\ncontract Rockets is ERC20Interface, owned, ERC223Interface {\n    using SafeMath for uint;\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n    event Burn(address indexed from, uint256 value);\n     \n    string internal _name;\n    string internal _symbol;\n    uint8 internal _decimals;\n    uint256 internal _totalSupply;\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    constructor() public {\n        _symbol = \"ROK\";\n        _name = \"Rockets\";\n        _decimals = 18;\n        _totalSupply = 10000000000 * (10 ** uint256(_decimals));\n        balances[msg.sender] = _totalSupply;\n    }\n\n    function updateSymbol(string newSymbol) onlyOwner public {\n        _symbol = newSymbol;\n    }\n    \n    function updateName(string newName) onlyOwner public {\n        _name = newName;\n    }\n\n\n    \n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallback` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _data  Transaction metadata.\n     */\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n        // Standard function transfer similar to ERC20 transfer with no _data .\n        //require(_to != address(0));\n        // Added due to backwards compatibility reasons .\n        require(_value > 0 );\n        require(_value <= balances[msg.sender]);\n        require(!frozenAccount[msg.sender]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        uint codeLength;\n\n        assembly {\n            // Retrieve the size of the code on target address, this needs assembly .\n            codeLength := extcodesize(_to)\n        }\n        if(codeLength>0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n    \n    /**\n     * @dev Transfer the specified amount of tokens to the specified address.\n     *      This function works the same with the previous one\n     *      but doesn't contain `_data` param.\n     *      Added due to backwards compatibility reasons.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value > 0 );\n        require(!frozenAccount[msg.sender]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    \n    /**\n     * @dev Returns balance of the `_owner`.\n     *\n     * @param _owner   The address whose balance will be returned.\n     * @return balance Balance of the `_owner`.\n     */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function name()\n        public\n        view\n        returns (string) {\n        return _name;\n    }\n    \n    function symbol()\n        public\n        view\n        returns (string) {\n        return _symbol;\n    }\n\n    function decimals()\n        public\n        view\n        returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply()\n        public\n        view\n        returns (uint256) {\n        return _totalSupply;\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        \n        balances[_from] = SafeMath.sub(balances[_from], _value);\n        balances[_to] = SafeMath.add(balances[_to], _value);\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    \n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balances[target] = balances[target].add(mintedAmount);\n        _totalSupply = _totalSupply.add(mintedAmount);\n        emit Transfer(0, this, mintedAmount);\n        emit Transfer(this, target, mintedAmount);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n        balances[msg.sender] = balances[msg.sender].sub(_value);// Subtract from the sender\n        _totalSupply = _totalSupply.sub(_value);// Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowed[_from][msg.sender]);    // Check allowance\n        balances[_from] = balances[_from].sub(_value);// Subtract from the targeted balance\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);// Subtract from the sender's allowance\n        _totalSupply = _totalSupply.sub(_value);// Updates totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n\t// transfer balance to owner\n    function withdrawEther(uint256 amount) onlyOwner public {\n        owner.transfer(amount);\n    }\n    // can accept ether\n    function() payable {\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"updateSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"updateName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060008054600160a060020a031916331790556040805180820190915260038082527f524f4b00000000000000000000000000000000000000000000000000000000006020909201918252620000689181620000e9565b506040805180820190915260078082527f526f636b657473000000000000000000000000000000000000000000000000006020909201918252620000af91600291620000e9565b5060048054601260ff19909116179081905560ff16600a0a6402540be400026005819055336000908152600660205260409020556200018e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200012c57805160ff19168380011785556200015c565b828001600101855582156200015c579182015b828111156200015c5782518255916020019190600101906200013f565b506200016a9291506200016e565b5090565b6200018b91905b808211156200016a576000815560010162000175565b90565b611306806200019e6000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610129578063095ea7b3146101b357806318160ddd146101eb57806323b872dd14610212578063313ce5671461023c5780633bed33ce1461026757806342966c681461027f578063537f53121461029757806366188463146102f057806370a082311461031457806379c650681461033557806379cc67901461035957806384da92a71461037d5780638da5cb5b146103d657806395d89b4114610407578063a9059cbb1461041c578063b414d4b614610440578063be45fd6214610461578063d73dd623146104ca578063dd62ed3e146104ee578063e724529c14610515578063f2fde38b1461053b575b005b34801561013557600080fd5b5061013e61055c565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610178578181015183820152602001610160565b50505050905090810190601f1680156101a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101bf57600080fd5b506101d7600160a060020a03600435166024356105f0565b604080519115158252519081900360200190f35b3480156101f757600080fd5b50610200610656565b60408051918252519081900360200190f35b34801561021e57600080fd5b506101d7600160a060020a036004358116906024351660443561065c565b34801561024857600080fd5b506102516107fd565b6040805160ff9092168252519081900360200190f35b34801561027357600080fd5b50610127600435610806565b34801561028b57600080fd5b506101d760043561085a565b3480156102a357600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101279436949293602493928401919081908401838280828437509497506108fa9650505050505050565b3480156102fc57600080fd5b506101d7600160a060020a0360043516602435610924565b34801561032057600080fd5b50610200600160a060020a0360043516610a0e565b34801561034157600080fd5b50610127600160a060020a0360043516602435610a29565b34801561036557600080fd5b506101d7600160a060020a0360043516602435610af0565b34801561038957600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610127943694929360249392840191908190840183828082843750949750610c2d9650505050505050565b3480156103e257600080fd5b506103eb610c57565b60408051600160a060020a039092168252519081900360200190f35b34801561041357600080fd5b5061013e610c66565b34801561042857600080fd5b506101d7600160a060020a0360043516602435610cc7565b34801561044c57600080fd5b506101d7600160a060020a0360043516610de8565b34801561046d57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101d7948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610dfd9650505050505050565b3480156104d657600080fd5b506101d7600160a060020a036004351660243561107b565b3480156104fa57600080fd5b50610200600160a060020a036004358116906024351661110e565b34801561052157600080fd5b50610127600160a060020a03600435166024351515611139565b34801561054757600080fd5b50610127600160a060020a03600435166111b4565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156105e55780601f106105ba576101008083540402835291602001916105e5565b820191906000526020600020905b8154815290600101906020018083116105c857829003601f168201915b505050505090505b90565b336000818152600760209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60055490565b6000600160a060020a038316151561067357600080fd5b600160a060020a03841660009081526006602052604090205482111561069857600080fd5b600160a060020a03841660009081526007602090815260408083203384529091529020548211156106c857600080fd5b600160a060020a03841660009081526001602052604090205460ff16156106ee57600080fd5b600160a060020a03831660009081526001602052604090205460ff161561071457600080fd5b600160a060020a03841660009081526006602052604090205461073790836111fa565b600160a060020a038086166000908152600660205260408082209390935590851681522054610766908361120c565b600160a060020a0380851660009081526006602090815260408083209490945591871681526007825282812033825290915220546107a490836111fa565b600160a060020a03808616600081815260076020908152604080832033845282529182902094909455805186815290519287169391926000805160206112bb833981519152929181900390910190a35060019392505050565b60045460ff1690565b600054600160a060020a0316331461081d57600080fd5b60008054604051600160a060020a039091169183156108fc02918491818181858888f19350505050158015610856573d6000803e3d6000fd5b5050565b3360009081526006602052604081205482111561087657600080fd5b33600090815260066020526040902054610896908363ffffffff6111fa16565b336000908152600660205260409020556005546108b9908363ffffffff6111fa16565b60055560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b600054600160a060020a0316331461091157600080fd5b8051610856906003906020840190611222565b336000908152600760209081526040808320600160a060020a03861684529091528120548083111561097957336000908152600760209081526040808320600160a060020a03881684529091528120556109a8565b61098381846111fa565b336000908152600760209081526040808320600160a060020a03891684529091529020555b336000818152600760209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526006602052604090205490565b600054600160a060020a03163314610a4057600080fd5b600160a060020a038216600090815260066020526040902054610a69908263ffffffff61120c16565b600160a060020a038316600090815260066020526040902055600554610a95908263ffffffff61120c16565b60055560408051828152905130916000916000805160206112bb8339815191529181900360200190a3604080518281529051600160a060020a0384169130916000805160206112bb8339815191529181900360200190a35050565b600160a060020a038216600090815260066020526040812054821115610b1557600080fd5b600160a060020a0383166000908152600760209081526040808320338452909152902054821115610b4557600080fd5b600160a060020a038316600090815260066020526040902054610b6e908363ffffffff6111fa16565b600160a060020a0384166000908152600660209081526040808320939093556007815282822033835290522054610bab908363ffffffff6111fa16565b600160a060020a0384166000908152600760209081526040808320338452909152902055600554610be2908363ffffffff6111fa16565b600555604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b600054600160a060020a03163314610c4457600080fd5b8051610856906002906020840190611222565b600054600160a060020a031681565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105e55780601f106105ba576101008083540402835291602001916105e5565b6000600160a060020a0383161515610cde57600080fd5b60008211610ceb57600080fd5b3360009081526001602052604090205460ff1615610d0857600080fd5b600160a060020a03831660009081526001602052604090205460ff1615610d2e57600080fd5b33600090815260066020526040902054821115610d4a57600080fd5b33600090815260066020526040902054610d6a908363ffffffff6111fa16565b3360009081526006602052604080822092909255600160a060020a03851681522054610d9c908363ffffffff61120c16565b600160a060020a0384166000818152600660209081526040918290209390935580518581529051919233926000805160206112bb8339815191529281900390910190a350600192915050565b60016020526000908152604090205460ff1681565b60008080808511610e0d57600080fd5b33600090815260066020526040902054851115610e2957600080fd5b3360009081526001602052604090205460ff1615610e4657600080fd5b600160a060020a03861660009081526001602052604090205460ff1615610e6c57600080fd5b853b91506000821115610f6857506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018790526060604484019081528651606485015286518994600160a060020a0386169463c0ee0b8a9490938b938b9360840190602085019080838360005b83811015610f01578181015183820152602001610ee9565b50505050905090810190601f168015610f2e5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610f4f57600080fd5b505af1158015610f63573d6000803e3d6000fd5b505050505b33600090815260066020526040902054610f88908663ffffffff6111fa16565b3360009081526006602052604080822092909255600160a060020a03881681522054610fba908663ffffffff61120c16565b600160a060020a0387166000908152600660209081526040918290209290925551855186928291908401908083835b602083106110085780518252601f199092019160209182019101610fe9565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208b83529351939550600160a060020a038c16945033937fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c169350918290030190a450600195945050505050565b336000908152600760209081526040808320600160a060020a03861684529091528120546110a9908361120c565b336000818152600760209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b600054600160a060020a0316331461115057600080fd5b600160a060020a038216600081815260016020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a031633146111cb57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561120657fe5b50900390565b60008282018381101561121b57fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061126357805160ff1916838001178555611290565b82800160010185558215611290579182015b82811115611290578251825591602001919060010190611275565b5061129c9291506112a0565b5090565b6105ed91905b8082111561129c57600081556001016112a65600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820c0f2da875faf87c3261671c48cd75d6db659473510433a8b7c859f24592576330029"
}