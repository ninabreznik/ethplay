{
  "address": "0xe1329ebf8b719881549909d689987f746a8931d1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RefineMediumToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-23\n*/\n\npragma solidity ^0.4.25;\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\ncontract DateTimeEnabled {\n        /*\n         *  Date and Time utilities for ethereum contracts\n         *\n         */\n        struct DateTime {\n                uint16 year;\n                uint8 month;\n                uint8 day;\n                uint8 hour;\n                uint8 minute;\n                uint8 second;\n                uint8 weekday;\n        }\n\n        uint constant DAY_IN_SECONDS = 86400;\n        uint constant YEAR_IN_SECONDS = 31536000;\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n\n        uint constant HOUR_IN_SECONDS = 3600;\n        uint constant MINUTE_IN_SECONDS = 60;\n\n        uint16 constant ORIGIN_YEAR = 1970;\n\n        function isLeapYear(uint16 year) internal constant returns (bool) {\n                if (year % 4 != 0) {\n                        return false;\n                }\n                if (year % 100 != 0) {\n                        return true;\n                }\n                if (year % 400 != 0) {\n                        return false;\n                }\n                return true;\n        }\n\n        function leapYearsBefore(uint year) internal constant returns (uint) {\n                year -= 1;\n                return year / 4 - year / 100 + year / 400;\n        }\n\n        function getDaysInMonth(uint8 month, uint16 year) internal constant returns (uint8) {\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                        return 31;\n                }\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                        return 30;\n                }\n                else if (isLeapYear(year)) {\n                        return 29;\n                }\n                else {\n                        return 28;\n                }\n        }\n\n        function parseTimestamp(uint timestamp) internal returns (DateTime dt) {\n                uint secondsAccountedFor = 0;\n                uint buf;\n                uint8 i;\n\n                // Year\n                dt.year = getYear(timestamp);\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n\n                // Month\n                uint secondsInMonth;\n                for (i = 1; i <= 12; i++) {\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n                                dt.month = i;\n                                break;\n                        }\n                        secondsAccountedFor += secondsInMonth;\n                }\n\n                // Day\n                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n                                dt.day = i;\n                                break;\n                        }\n                        secondsAccountedFor += DAY_IN_SECONDS;\n                }\n\n                // Hour\n                dt.hour = getHour(timestamp);\n\n                // Minute\n                dt.minute = getMinute(timestamp);\n\n                // Second\n                dt.second = getSecond(timestamp);\n\n                // Day of week.\n                dt.weekday = getWeekday(timestamp);\n        }\n\n        function getYear(uint timestamp) internal constant returns (uint16) {\n                uint secondsAccountedFor = 0;\n                uint16 year;\n                uint numLeapYears;\n\n                // Year\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n\n                while (secondsAccountedFor > timestamp) {\n                        if (isLeapYear(uint16(year - 1))) {\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\n                        }\n                        year -= 1;\n                }\n                return year;\n        }\n\n        function getMonth(uint timestamp) internal constant returns (uint8) {\n                return parseTimestamp(timestamp).month;\n        }\n\n        function getDay(uint timestamp) internal constant returns (uint8) {\n                return parseTimestamp(timestamp).day;\n        }\n\n        function getHour(uint timestamp) internal constant returns (uint8) {\n                return uint8((timestamp / 60 / 60) % 24);\n        }\n\n        function getMinute(uint timestamp) internal constant returns (uint8) {\n                return uint8((timestamp / 60) % 60);\n        }\n\n        function getSecond(uint timestamp) internal constant returns (uint8) {\n                return uint8(timestamp % 60);\n        }\n\n        function getWeekday(uint timestamp) internal constant returns (uint8) {\n                return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day) internal constant returns (uint timestamp) {\n                return toTimestamp(year, month, day, 0, 0, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) internal constant returns (uint timestamp) {\n                return toTimestamp(year, month, day, hour, 0, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) internal constant returns (uint timestamp) {\n                return toTimestamp(year, month, day, hour, minute, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) internal constant returns (uint timestamp) {\n                uint16 i;\n\n                // Year\n                for (i = ORIGIN_YEAR; i < year; i++) {\n                        if (isLeapYear(i)) {\n                                timestamp += LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                timestamp += YEAR_IN_SECONDS;\n                        }\n                }\n\n                // Month\n                uint8[12] memory monthDayCounts;\n                monthDayCounts[0] = 31;\n                if (isLeapYear(year)) {\n                        monthDayCounts[1] = 29;\n                }\n                else {\n                        monthDayCounts[1] = 28;\n                }\n                monthDayCounts[2] = 31;\n                monthDayCounts[3] = 30;\n                monthDayCounts[4] = 31;\n                monthDayCounts[5] = 30;\n                monthDayCounts[6] = 31;\n                monthDayCounts[7] = 31;\n                monthDayCounts[8] = 30;\n                monthDayCounts[9] = 31;\n                monthDayCounts[10] = 30;\n                monthDayCounts[11] = 31;\n\n                for (i = 1; i < month; i++) {\n                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n                }\n\n                // Day\n                timestamp += DAY_IN_SECONDS * (day - 1);\n\n                // Hour\n                timestamp += HOUR_IN_SECONDS * (hour);\n\n                // Minute\n                timestamp += MINUTE_IN_SECONDS * (minute);\n\n                // Second\n                timestamp += second;\n\n                return timestamp;\n        }\n        \n        function addDaystoTimeStamp(uint16 _daysToBeAdded) internal  returns(uint){\n            return now + DAY_IN_SECONDS*_daysToBeAdded;\n        }\n\n        function addMinutestoTimeStamp(uint8 _minutesToBeAdded) internal  returns(uint){\n            return now + MINUTE_IN_SECONDS*_minutesToBeAdded;\n        }\n\n\n        function printDatestamp(uint timestamp) internal returns (uint16,uint8,uint8,uint8,uint8,uint8) {\n            DateTime memory dt;\n            dt = parseTimestamp(timestamp);\n            return (dt.year,dt.month,dt.day,dt.hour,dt.minute,dt.second);\n        }\n        \n        function currentTimeStamp() internal returns (uint) {\n            return now;\n        }\n}\n\n\ncontract ERC20 {\n    function totalSupply() view public returns (uint _totalSupply);\n    function balanceOf(address _owner) view public returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) view public returns (uint remaining);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\ncontract BaseToken is ERC20 {\n    \n    address public owner;\n    using SafeMath for uint256;\n    \n    bool public tokenStatus = false;\n    \n    modifier ownerOnly(){\n        require(msg.sender == owner);\n        _;\n    }\n\n    \n    modifier onlyWhenTokenIsOn(){\n        require(tokenStatus == true);\n        _;\n    }\n\n\n    function onOff () ownerOnly external{\n        tokenStatus = !tokenStatus;    \n    }\n\n\n    /**\n       * @dev Fix for the ERC20 short address attack.\n    */\n    modifier onlyPayloadSize(uint size) {\n        require(msg.data.length >= size + 4);\n        _;\n    }    \n    mapping (address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    //Token Details\n    string public symbol = \"BASE\";\n    string public name = \"Base Token\";\n    uint8 public decimals = 18;\n\n    uint256 public totalSupply; //will be instantiated in the derived Contracts\n    \n    function totalSupply() view public returns (uint256 ){\n        return totalSupply;\n    }\n\n\n    function balanceOf(address _owner) view public returns (uint balance){\n        return balances[_owner];\n    }\n    \n    function transfer(address _to, uint _value) onlyWhenTokenIsOn onlyPayloadSize(2 * 32) public returns (bool success){\n        //_value = _value.mul(1e18);\n        require(\n            balances[msg.sender]>=_value \n            && _value > 0);\n            balances[msg.sender] = balances[msg.sender].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            emit Transfer(msg.sender,_to,_value);\n            return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint _value) onlyWhenTokenIsOn onlyPayloadSize(3 * 32) public returns (bool success){\n        //_value = _value.mul(10**decimals);\n        require(\n            allowed[_from][msg.sender]>= _value\n            && balances[_from] >= _value\n            && _value >0 \n            );\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n            \n    }\n    \n    function approve(address _spender, uint _value) onlyWhenTokenIsOn public returns (bool success){\n        //_value = _value.mul(10**decimals);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) view public returns (uint remaining){\n        return allowed[_owner][_spender];\n    }\n\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n\n}\n\n\n\n\ncontract ICO is BaseToken,DateTimeEnabled{\n\n    uint256 base = 10;\n    uint256 multiplier;\n\n    address ownerMultisig;\n\n    struct ICOPhase {\n        string phaseName;\n        uint256 tokensStaged;\n        uint256 tokensAllocated;\n        uint256 iRate;\n        uint256 fRate;\n        uint256 intialTime;\n        uint256 closingTime;\n       // uint256 RATE;\n        bool saleOn;\n        uint deadline;\n    }\n\n    uint8 public currentICOPhase;\n    \n    mapping(address=>uint256) public ethContributedBy;\n    uint256 public totalEthRaised;\n    uint256 public totalTokensSoldTillNow;\n\n    mapping(uint8=>ICOPhase) public icoPhases;\n    uint8 icoPhasesIndex=1;\n    \n    function getEthContributedBy(address _address) view public returns(uint256){\n        return ethContributedBy[_address];\n    }\n\n    function getTotalEthRaised() view public returns(uint256){\n        return totalEthRaised;\n    }\n\n    function getTotalTokensSoldTillNow() view public returns(uint256){\n        return totalTokensSoldTillNow;\n    }\n\n    \n    function addICOPhase(string _phaseName,uint256 _tokensStaged,uint256 _iRate, uint256 _fRate,uint256 _intialTime,uint256 _closingTime) ownerOnly public{\n        icoPhases[icoPhasesIndex].phaseName = _phaseName;\n        icoPhases[icoPhasesIndex].tokensStaged = _tokensStaged;\n        icoPhases[icoPhasesIndex].iRate = _iRate;\n        icoPhases[icoPhasesIndex].fRate = _fRate;\n        icoPhases[icoPhasesIndex].intialTime = _intialTime;\n        icoPhases[icoPhasesIndex].closingTime = _closingTime;\n        icoPhases[icoPhasesIndex].tokensAllocated = 0;\n        icoPhases[icoPhasesIndex].saleOn = false;\n        //icoPhases[icoPhasesIndex].deadline = _deadline;\n        icoPhasesIndex++;\n    }\n\n    function toggleSaleStatus() ownerOnly external{\n        icoPhases[currentICOPhase].saleOn = !icoPhases[currentICOPhase].saleOn;\n    }\n    function changefRate(uint256 _fRate) ownerOnly external{\n        icoPhases[currentICOPhase].fRate = _fRate;\n    }\n    function changeCurrentICOPhase(uint8 _newPhase) ownerOnly external{ //Only provided for exception handling in case some faulty phase has been added by the owner using addICOPhase\n        currentICOPhase = _newPhase;\n    }\n\n    function changeCurrentPhaseDeadline(uint8 _numdays) ownerOnly external{\n        icoPhases[currentICOPhase].closingTime= addDaystoTimeStamp(_numdays); //adds number of days to now and that becomes the new deadline\n    }\n    \n    function transferOwnership(address newOwner) ownerOnly external{\n        if (newOwner != address(0)) {\n          owner = newOwner;\n        }\n    }\n    \n}\ncontract MultiRound is ICO{\n    function newICORound(uint256 _newSupply) ownerOnly public{//This is different from Stages which means multiple parts of one round\n        _newSupply = _newSupply.mul(multiplier);\n        balances[owner] = balances[owner].add(_newSupply);\n        totalSupply = totalSupply.add(_newSupply);\n    }\n\n    function destroyUnsoldTokens(uint256 _tokens) ownerOnly public{\n        _tokens = _tokens.mul(multiplier);\n        totalSupply = totalSupply.sub(_tokens);\n        balances[owner] = balances[owner].sub(_tokens);\n    }\n\n    \n}\n\ncontract ReferralEnabledToken is BaseToken{\n\n    \n    struct referral {\n        address referrer;\n        uint8 referrerPerc;// this is the percentage referrer will get in ETH. \n        uint8 refereePerc; // this is the discount Refereee will get \n    }\n\n    struct redeemedReferral {\n        address referee;\n        uint timestamp;\n        uint ethContributed;\n        uint rewardGained;\n    }\n    mapping(address=>referral) public referrals;\n    \n    uint8 public currentReferralRewardPercentage=10;\n    uint8 public currentReferralDiscountPercentage=10;\n    \n    mapping(address=>uint256) public totalEthRewards;\n    mapping(address=>mapping(uint16=>redeemedReferral)) referrerRewards;\n    mapping(address=>uint16) referrerRewardIndex;\n    \n    function totalEthRewards(address _address) view public returns(uint256){\n        totalEthRewards[_address];\n    }\n    \n    function createReferral(address _referrer, address _referree) public returns (bool) {\n        require(_referrer != _referree);\n        require (referrals[_referree].referrer == address(0) || referrals[_referree].referrer==msg.sender);\n        referrals[_referree].referrer = _referrer;\n        referrals[_referree].referrerPerc = currentReferralRewardPercentage;\n        referrals[_referree].refereePerc = currentReferralDiscountPercentage;\n        return true;\n    }\n    \n    function getReferrerRewards(address _referrer, uint16 _index) view public returns(address,uint,uint,uint){\n        redeemedReferral r = referrerRewards[_referrer][_index];\n        return(r.referee,r.timestamp,r.ethContributed,r.rewardGained);\n    }\n    \n    function getReferrerIndex(address _referrer) view public returns(uint16) {\n        return(referrerRewardIndex[_referrer]);\n    }\n    \n    \n    function getReferrerTotalRewards(address _referrer) view public returns(uint){\n        return (totalEthRewards[_referrer]);\n    }\n    \n    function getReferral(address _refereeId) constant public returns(address,uint8,uint8) {\n        referral memory r = referrals[_refereeId];\n        return(r.referrer,r.referrerPerc,r.refereePerc);\n    } \n\n    function changeReferralPerc(uint8 _newPerc) ownerOnly external{\n        currentReferralRewardPercentage = _newPerc;\n    }\n\n    function changeRefereePerc(uint8 _newPerc) ownerOnly external{\n        currentReferralDiscountPercentage = _newPerc;\n    }\n}\ncontract killable is ICO {\n    \n    function killContract() ownerOnly external{\n        selfdestruct(ownerMultisig);\n    }\n}\n//TODO - ADD Total ETH raised and Record token wise contribution    \ncontract RefineMediumToken is ICO,killable,MultiRound,ReferralEnabledToken  {\n //   uint256 intialTime = 1542043381;\n //   uint256 closingTime = 1557681781;\n    uint256 constant alloc1perc=50; //TEAM ALLOCATION\n    address constant alloc1Acc = 0xF0B50870e5d01FbfE783F6e76994A0BA94d34fe9; //CORETEAM Address (test-TestRPC4)\n\n    uint256 constant alloc2perc=50;//in percent -- ADVISORS ALLOCATION\n    address constant alloc2Acc = 0x3c3daEd0733cDBB26c298443Cec93c48426CC4Bd; //TestRPC5\n\n    uint256 constant alloc3perc=50;//in percent -- Bounty Allocation\n    address constant alloc3Acc = 0xAc5c102B4063615053C29f9B4DC8001D529037Cd; //TestRPC6\n\n    uint256 constant alloc4perc=50;//in percent -- Reserved LEAVE IT TO ZERO IF NO MORE ALLOCATIONS ARE THERE\n    address constant alloc4Acc = 0xf080966E970AC351A9D576846915bBE049Fe98dB; //TestRPC7\n\n    address constant ownerMultisig = 0xc4010efafaf53be13498efcffa04df931dc1592a; //Test4\n    mapping(address=>uint) blockedTill;    \n\n    constructor() public{\n        symbol = \"XRM\";\n        name = \"Refine Medium Token\";\n        decimals = 18;\n        multiplier=base**decimals;\n\n        totalSupply = 300000000*multiplier;//300 mn-- extra 18 zeroes are for the wallets which use decimal variable to show the balance \n        owner = msg.sender;\n\n        balances[owner]=totalSupply;\n        currentICOPhase = 1;\n        addICOPhase(\"Private Sale\",15000000*multiplier,1550,1550,1558742400,1560556800);\n        runAllocations();\n    }\n\n    function runAllocations() ownerOnly public{\n        balances[owner]=((1000-(alloc1perc+alloc2perc+alloc3perc+alloc4perc))*totalSupply)/1000;\n        \n        balances[alloc1Acc]=(alloc1perc*totalSupply)/1000;\n        blockedTill[alloc1Acc] = addDaystoTimeStamp(2);\n        \n        balances[alloc2Acc]=(alloc2perc*totalSupply)/1000;\n        blockedTill[alloc2Acc] = addDaystoTimeStamp(2);\n        \n        balances[alloc3Acc]=(alloc3perc*totalSupply)/1000;\n        blockedTill[alloc3Acc] = addDaystoTimeStamp(2);\n        \n        balances[alloc4Acc]=(alloc4perc*totalSupply)/1000;\n        blockedTill[alloc4Acc] = addDaystoTimeStamp(2);\n        \n    }\n\n    function showRate(uint256 _epoch) public view returns (uint256){\n         ICOPhase storage i = icoPhases[currentICOPhase];\n         uint256 epoch = _epoch.sub(i.intialTime);\n         uint256 timeRange = i.closingTime.sub(i.intialTime);\n         uint256 rateRange = i.iRate.sub(i.fRate);\n         return (i.iRate*100000000000).sub((epoch.mul(rateRange)*100000000000).div(timeRange));\n    }\n    function currentRate() public view returns (uint256){\n         ICOPhase storage i = icoPhases[currentICOPhase];\n         uint256 epoch = now.sub(i.intialTime);\n         uint256 timeRange = i.closingTime.sub(i.intialTime);\n         uint256 rateRange = i.iRate.sub(i.fRate);\n         return ((i.iRate*100000000000).sub((epoch.mul(rateRange)*100000000000).div(timeRange)))/100000000000;\n    }\n    function () payable public{\n        createTokens();\n    }   \n\n    \n    function createTokens() payable public{\n        ICOPhase storage i = icoPhases[currentICOPhase]; \n        require(msg.value > 0\n            && i.saleOn == true);\n        \n        uint256 totalreferrerPerc = 0;\n        \n       // uint256 tokens = msg.value.mul((i.RATE*(100+r.refereePerc))/100);\n       uint256 tokens =   msg.value.mul((currentRate()*(100+r.refereePerc))/100);\n        balances[owner] = balances[owner].sub(tokens);\n        balances[msg.sender] = balances[msg.sender].add(tokens);\n        i.tokensAllocated = i.tokensAllocated.add(tokens);\n        totalTokensSoldTillNow = totalTokensSoldTillNow.add(tokens); \n        \n        ethContributedBy[msg.sender] = ethContributedBy[msg.sender].add(msg.value);\n        totalEthRaised = totalEthRaised.add(msg.value);\n        referral storage r = referrals[msg.sender];\n        uint8 counter = 1;\n        while(r.referrer != 0 && counter <= 2){\n                       \n            counter = counter + 1;            \n            \n            uint16 currIndex = referrerRewardIndex[r.referrer] + 1;\n            uint rewardGained = (r.referrerPerc*msg.value)/100;\n            referrerRewardIndex[r.referrer] = currIndex;\n            referrerRewards[r.referrer][currIndex].referee = msg.sender;\n            referrerRewards[r.referrer][currIndex].timestamp = now;\n            referrerRewards[r.referrer][currIndex].ethContributed = msg.value;\n            referrerRewards[r.referrer][currIndex].rewardGained = rewardGained ;\n            totalEthRewards[r.referrer] = totalEthRewards[r.referrer].add(rewardGained);\n            r.referrer.transfer(rewardGained);\n                \n            totalreferrerPerc = totalreferrerPerc + r.referrerPerc;\n            r = referrals[r.referrer];\n            \n        }\n        ownerMultisig.transfer(((100-totalreferrerPerc)*msg.value)/100);\n\n        //Token Disbursement\n\n        \n        if(i.tokensAllocated>=i.tokensStaged){\n            i.saleOn = !i.saleOn; \n            currentICOPhase++;\n        }\n        \n    }\n    \n    \n    \n    function transfer(address _to, uint _value) onlyWhenTokenIsOn onlyPayloadSize(2 * 32) public returns (bool success){\n        //_value = _value.mul(1e18);\n        require(\n            balances[msg.sender]>=_value \n            && _value > 0\n            && now > blockedTill[msg.sender]\n        );\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender,_to,_value);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint _value) onlyWhenTokenIsOn onlyPayloadSize(3 * 32) public returns (bool success){\n        //_value = _value.mul(10**decimals);\n        require(\n            allowed[_from][msg.sender]>= _value\n            && balances[_from] >= _value\n            && _value >0 \n            && now > blockedTill[_from]            \n        );\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n            \n    }\n    event Burn(address indexed _burner, uint _value);\n    function burn(uint _value) ownerOnly returns (bool)\n    {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(msg.sender, _value);\n        emit Transfer(msg.sender, address(0x0), _value);\n        return true;\n    }\n     event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n     bool public mintingFinished = false;\n\n\n     modifier canMint() {\n     require(!mintingFinished);\n     _;\n   }\n    function mint(address _to, uint256 _amount) ownerOnly canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() ownerOnly canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n    \n}",
  "bytecode": "608060405260008060146101000a81548160ff0219169083151502179055506040805190810160405280600481526020017f4241534500000000000000000000000000000000000000000000000000000000815250600390805190602001906200006b92919062000a2a565b506040805190810160405280600a81526020017f4261736520546f6b656e0000000000000000000000000000000000000000000081525060049080519060200190620000b992919062000a2a565b506012600560006101000a81548160ff021916908360ff160217905550600a6007556001600e60006101000a81548160ff021916908360ff160217905550600a601060006101000a81548160ff021916908360ff160217905550600a601060016101000a81548160ff021916908360ff1602179055506000601560006101000a81548160ff0219169083151502179055503480156200015757600080fd5b506040805190810160405280600381526020017f58524d000000000000000000000000000000000000000000000000000000000081525060039080519060200190620001a592919062000a2a565b506040805190810160405280601381526020017f526566696e65204d656469756d20546f6b656e0000000000000000000000000081525060049080519060200190620001f392919062000a2a565b506012600560006101000a81548160ff021916908360ff160217905550600560009054906101000a900460ff1660ff166007540a6008819055506008546311e1a30002600681905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600654600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600960146101000a81548160ff021916908360ff160217905550620003646040805190810160405280600c81526020017f507269766174652053616c65000000000000000000000000000000000000000081525060085462e4e1c00261060e80635ce88580635d04350062000383640100000000026401000000009004565b6200037d620005c0640100000000026401000000009004565b62000ad9565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620003df57600080fd5b85600d6000600e60009054906101000a900460ff1660ff1660ff16815260200190815260200160002060000190805190602001906200042092919062000a2a565b5084600d6000600e60009054906101000a900460ff1660ff1660ff1681526020019081526020016000206001018190555083600d6000600e60009054906101000a900460ff1660ff1660ff1681526020019081526020016000206003018190555082600d6000600e60009054906101000a900460ff1660ff1660ff1681526020019081526020016000206004018190555081600d6000600e60009054906101000a900460ff1660ff1660ff1681526020019081526020016000206005018190555080600d6000600e60009054906101000a900460ff1660ff1660ff168152602001908152602001600020600601819055506000600d6000600e60009054906101000a900460ff1660ff1660ff168152602001908152602001600020600201819055506000600d6000600e60009054906101000a900460ff1660ff1660ff16815260200190815260200160002060070160006101000a81548160ff021916908315150217905550600e600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff16021790555050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200061c57600080fd5b6103e86006546032806032800101016103e803028115156200063a57fe5b04600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506103e8600654603202811515620006b257fe5b046001600073f0b50870e5d01fbfe783f6e76994a0ba94d34fe973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000725600262000a15640100000000026401000000009004565b6014600073f0b50870e5d01fbfe783f6e76994a0ba94d34fe973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506103e86006546032028115156200078f57fe5b0460016000733c3daed0733cdbb26c298443cec93c48426cc4bd73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000802600262000a15640100000000026401000000009004565b60146000733c3daed0733cdbb26c298443cec93c48426cc4bd73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506103e86006546032028115156200086c57fe5b046001600073ac5c102b4063615053c29f9b4dc8001d529037cd73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620008df600262000a15640100000000026401000000009004565b6014600073ac5c102b4063615053c29f9b4dc8001d529037cd73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506103e86006546032028115156200094957fe5b046001600073f080966e970ac351a9d576846915bbe049fe98db73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620009bc600262000a15640100000000026401000000009004565b6014600073f080966e970ac351a9d576846915bbe049fe98db73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008161ffff16620151800242019050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000a6d57805160ff191683800117855562000a9e565b8280016001018555821562000a9e579182015b8281111562000a9d57825182559160200191906001019062000a80565b5b50905062000aad919062000ab1565b5090565b62000ad691905b8082111562000ad257600081600090555060010162000ab8565b5090565b90565b6142bd8062000ae96000396000f300608060405260043610610251576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303f7648f1461025b578063049c5c49146102f657806305d2035b1461030d57806306fdde031461033c578063095ea7b3146103cc5780631410b50d1461043157806318160ddd146104485780631c02708d1461047357806323b872dd1461048a57806327e235e31461050f5780632a81b95a146105665780632fa1578a14610596578063313ce567146105c157806339106b48146105f25780633b0f0f2f146106225780633f5b5877146106bf57806340c10f1914610700578063416592ea1461076557806342966c68146107955780635bdb4d2f146107da5780635d430e3d1461080b5780636587d66c1461086a57806370a08231146109105780637d64bcb4146109675780638b158a20146109965780638da5cb5b146109ed578063948fd5dc14610a4457806395d89b4114610a755780639ca423b314610b055780639ddc4e6714610ba2578063a692195614610bb9578063a9059cbb14610be8578063b0c1e78714610c4d578063b312c13514610c7a578063b393558d14610ca7578063b442726314610cfe578063ba84503314610d08578063c3faea5814610d38578063c9e904be14610d69578063dd62ed3e14610d94578063e4218b0b14610e0b578063e8af8f5f14610ef0578063f12e1b2c14610f1b578063f2fde38b14610f72578063f311ea5214610fb5578063f388d8ce14610fe0578063f7d7cdd41461100d578063f9ead88214611064578063f9f8bdb7146110df575b61025961110a565b005b34801561026757600080fd5b506102f4600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050611ac0565b005b34801561030257600080fd5b5061030b611cfa565b005b34801561031957600080fd5b50610322611dd3565b604051808215151515815260200191505060405180910390f35b34801561034857600080fd5b50610351611de6565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610391578082015181840152602081019050610376565b50505050905090810190601f1680156103be5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103d857600080fd5b50610417600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e84565b604051808215151515815260200191505060405180910390f35b34801561043d57600080fd5b50610446611f98565b005b34801561045457600080fd5b5061045d6123a3565b6040518082815260200191505060405180910390f35b34801561047f57600080fd5b506104886123ad565b005b34801561049657600080fd5b506104f5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612443565b604051808215151515815260200191505060405180910390f35b34801561051b57600080fd5b50610550600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612855565b6040518082815260200191505060405180910390f35b34801561057257600080fd5b50610594600480360381019080803560ff16906020019092919050505061286d565b005b3480156105a257600080fd5b506105ab6128e6565b6040518082815260200191505060405180910390f35b3480156105cd57600080fd5b506105d66128f0565b604051808260ff1660ff16815260200191505060405180910390f35b3480156105fe57600080fd5b50610620600480360381019080803560ff169060200190929190505050612903565b005b34801561062e57600080fd5b50610663600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061299c565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018360ff1660ff1681526020018260ff1660ff168152602001935050505060405180910390f35b3480156106cb57600080fd5b506106ea60048036038101908080359060200190929190505050612aa3565b6040518082815260200191505060405180910390f35b34801561070c57600080fd5b5061074b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612b7c565b604051808215151515815260200191505060405180910390f35b34801561077157600080fd5b50610793600480360381019080803560ff169060200190929190505050612d63565b005b3480156107a157600080fd5b506107c060048036038101908080359060200190929190505050612ddc565b604051808215151515815260200191505060405180910390f35b3480156107e657600080fd5b506107ef612fa6565b604051808260ff1660ff16815260200191505060405180910390f35b34801561081757600080fd5b5061084c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612fb9565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561087657600080fd5b506108b9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803561ffff169060200190929190505050613010565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390f35b34801561091c57600080fd5b50610951600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506130b8565b6040518082815260200191505060405180910390f35b34801561097357600080fd5b5061097c613101565b604051808215151515815260200191505060405180910390f35b3480156109a257600080fd5b506109d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131c8565b6040518082815260200191505060405180910390f35b3480156109f957600080fd5b50610a0261320f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a5057600080fd5b50610a59613234565b604051808260ff1660ff16815260200191505060405180910390f35b348015610a8157600080fd5b50610a8a613247565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610aca578082015181840152602081019050610aaf565b50505050905090810190601f168015610af75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b1157600080fd5b50610b46600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132e5565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018360ff1660ff1681526020018260ff1660ff168152602001935050505060405180910390f35b348015610bae57600080fd5b50610bb7613349565b005b348015610bc557600080fd5b50610bce6133d0565b604051808215151515815260200191505060405180910390f35b348015610bf457600080fd5b50610c33600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506133e3565b604051808215151515815260200191505060405180910390f35b348015610c5957600080fd5b50610c786004803603810190808035906020019092919050505061365d565b005b348015610c8657600080fd5b50610ca5600480360381019080803590602001909291905050506137c4565b005b348015610cb357600080fd5b50610ce8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613852565b6040518082815260200191505060405180910390f35b610d0661110a565b005b348015610d1457600080fd5b50610d36600480360381019080803560ff16906020019092919050505061389b565b005b348015610d4457600080fd5b50610d4d613914565b604051808260ff1660ff16815260200191505060405180910390f35b348015610d7557600080fd5b50610d7e613927565b6040518082815260200191505060405180910390f35b348015610da057600080fd5b50610df5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061392d565b6040518082815260200191505060405180910390f35b348015610e1757600080fd5b50610e39600480360381019080803560ff1690602001909291905050506139b4565b60405180806020018a81526020018981526020018881526020018781526020018681526020018581526020018415151515815260200183815260200182810382528b818151815260200191508051906020019080838360005b83811015610ead578082015181840152602081019050610e92565b50505050905090810190601f168015610eda5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b348015610efc57600080fd5b50610f05613aa7565b6040518082815260200191505060405180910390f35b348015610f2757600080fd5b50610f5c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613aad565b6040518082815260200191505060405180910390f35b348015610f7e57600080fd5b50610fb3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613ac5565b005b348015610fc157600080fd5b50610fca613b9a565b6040518082815260200191505060405180910390f35b348015610fec57600080fd5b5061100b60048036038101908080359060200190929190505050613ba4565b005b34801561101957600080fd5b5061104e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d0b565b6040518082815260200191505060405180910390f35b34801561107057600080fd5b506110c5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d54565b604051808215151515815260200191505060405180910390f35b3480156110eb57600080fd5b506110f4614025565b6040518082815260200191505060405180910390f35b6000806000806000806000600d6000600960149054906101000a900460ff1660ff1660ff16815260200190815260200160002096506000341180156111645750600115158760070160009054906101000a900460ff161515145b151561116f57600080fd5b600095506111b260648560000160159054906101000a900460ff1660640160ff16611198614025565b028115156111a257fe5b043461410c90919063ffffffff16565b945061122785600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461414790919063ffffffff16565b600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112dd85600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461416090919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061133785886002015461416090919063ffffffff16565b876002018190555061135485600c5461416090919063ffffffff16565b600c819055506113ac34600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461416090919063ffffffff16565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061140434600b5461416090919063ffffffff16565b600b81905550600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350600192505b60008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561149f575060028360ff1611155b156119d9576001830192506001601360008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff160191506064348560000160149054906101000a900460ff1660ff160281151561154357fe5b04905081601360008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff16021790555033601260008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042601260008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff1681526020019081526020016000206001018190555034601260008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff1681526020019081526020016000206002018190555080601260008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff1681526020019081526020016000206003018190555061188481601160008760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461416090919063ffffffff16565b601160008660000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611955573d6000803e3d6000fd5b508360000160149054906101000a900460ff1660ff1686019550600f60008560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350611450565b73c4010efafaf53be13498efcffa04df931dc1592a73ffffffffffffffffffffffffffffffffffffffff166108fc6064348960640302811515611a1857fe5b049081150290604051600060405180830381858888f19350505050158015611a44573d6000803e3d6000fd5b5086600101548760020154101515611ab7578660070160009054906101000a900460ff16158760070160006101000a81548160ff0219169083151502179055506009601481819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550505b50505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b1b57600080fd5b85600d6000600e60009054906101000a900460ff1660ff1660ff1681526020019081526020016000206000019080519060200190611b5a9291906141ae565b5084600d6000600e60009054906101000a900460ff1660ff1660ff1681526020019081526020016000206001018190555083600d6000600e60009054906101000a900460ff1660ff1660ff1681526020019081526020016000206003018190555082600d6000600e60009054906101000a900460ff1660ff1660ff1681526020019081526020016000206004018190555081600d6000600e60009054906101000a900460ff1660ff1660ff1681526020019081526020016000206005018190555080600d6000600e60009054906101000a900460ff1660ff1660ff168152602001908152602001600020600601819055506000600d6000600e60009054906101000a900460ff1660ff1660ff168152602001908152602001600020600201819055506000600d6000600e60009054906101000a900460ff1660ff1660ff16815260200190815260200160002060070160006101000a81548160ff021916908315150217905550600e600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff16021790555050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d5557600080fd5b600d6000600960149054906101000a900460ff1660ff1660ff16815260200190815260200160002060070160009054906101000a900460ff1615600d6000600960149054906101000a900460ff1660ff1660ff16815260200190815260200160002060070160006101000a81548160ff021916908315150217905550565b601560009054906101000a900460ff1681565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e7c5780601f10611e5157610100808354040283529160200191611e7c565b820191906000526020600020905b815481529060010190602001808311611e5f57829003601f168201915b505050505081565b600060011515600060149054906101000a900460ff161515141515611ea857600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ff357600080fd5b6103e86006546032806032800101016103e8030281151561201057fe5b04600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506103e860065460320281151561208757fe5b046001600073f0b50870e5d01fbfe783f6e76994a0ba94d34fe973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120e9600261417e565b6014600073f0b50870e5d01fbfe783f6e76994a0ba94d34fe973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506103e860065460320281151561215257fe5b0460016000733c3daed0733cdbb26c298443cec93c48426cc4bd73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121b4600261417e565b60146000733c3daed0733cdbb26c298443cec93c48426cc4bd73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506103e860065460320281151561221d57fe5b046001600073ac5c102b4063615053c29f9b4dc8001d529037cd73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061227f600261417e565b6014600073ac5c102b4063615053c29f9b4dc8001d529037cd73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506103e86006546032028115156122e857fe5b046001600073f080966e970ac351a9d576846915bbe049fe98db73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061234a600261417e565b6014600073f080966e970ac351a9d576846915bbe049fe98db73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600654905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561240857600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600060011515600060149054906101000a900460ff16151514151561246757600080fd5b60606004810160003690501015151561247f57600080fd5b82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561254a575082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156125565750600083115b80156125a05750601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b15156125ab57600080fd5b6125fd83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461414790919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061269283600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461416090919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061276483600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461414790919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60016020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128c857600080fd5b80601060006101000a81548160ff021916908360ff16021790555050565b6000600c54905090565b600560009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561295e57600080fd5b61296a8160ff1661417e565b600d6000600960149054906101000a900460ff1660ff1660ff1681526020019081526020016000206006018190555050565b60008060006129a961422e565b600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660ff1660ff1681526020016000820160159054906101000a900460ff1660ff1660ff16815250509050806000015181602001518260400151935093509350509193909250565b6000806000806000600d6000600960149054906101000a900460ff1660ff1660ff1681526020019081526020016000209350612aec84600501548761414790919063ffffffff16565b9250612b098460050154856006015461414790919063ffffffff16565b9150612b268460040154856003015461414790919063ffffffff16565b9050612b71612b578364174876e800612b48858861410c90919063ffffffff16565b0261419390919063ffffffff16565b64174876e80086600301540261414790919063ffffffff16565b945050505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bd957600080fd5b601560009054906101000a900460ff16151515612bf557600080fd5b612c0a8260065461416090919063ffffffff16565b600681905550612c6282600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461416090919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612dbe57600080fd5b80600960146101000a81548160ff021916908360ff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e3957600080fd5b612e8b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461414790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612ee38260065461414790919063ffffffff16565b6006819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050919050565b601060019054906101000a900460ff1681565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff169050919050565b6000806000806000601260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008761ffff1661ffff16815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600101548260020154836003015494509450945094505092959194509250565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561315e57600080fd5b601560009054906101000a900460ff1615151561317a57600080fd5b6001601560006101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960149054906101000a900460ff1681565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156132dd5780601f106132b2576101008083540402835291602001916132dd565b820191906000526020600020905b8154815290600101906020018083116132c057829003601f168201915b505050505081565b600f6020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060000160159054906101000a900460ff16905083565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156133a457600080fd5b600060149054906101000a900460ff1615600060146101000a81548160ff021916908315150217905550565b600060149054906101000a900460ff1681565b600060011515600060149054906101000a900460ff16151514151561340757600080fd5b60406004810160003690501015151561341f57600080fd5b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561346e5750600083115b80156134b85750601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442115b15156134c357600080fd5b61351583600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461414790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506135aa83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461416090919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156136b857600080fd5b6136cd6008548261410c90919063ffffffff16565b90506136e48160065461414790919063ffffffff16565b60068190555061375d81600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461414790919063ffffffff16565b600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561381f57600080fd5b80600d6000600960149054906101000a900460ff1660ff1660ff1681526020019081526020016000206004018190555050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156138f657600080fd5b80601060016101000a81548160ff021916908360ff16021790555050565b601060009054906101000a900460ff1681565b600b5481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600d602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613a605780601f10613a3557610100808354040283529160200191613a60565b820191906000526020600020905b815481529060010190602001808311613a4357829003601f168201915b5050505050908060010154908060020154908060030154908060040154908060050154908060060154908060070160009054906101000a900460ff16908060080154905089565b600c5481565b600a6020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613b2057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515613b9757806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600b54905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613bff57600080fd5b613c146008548261410c90919063ffffffff16565b9050613c8981600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461416090919063ffffffff16565b600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613d028160065461416090919063ffffffff16565b60068190555050565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515613d9157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480613ebb57503373ffffffffffffffffffffffffffffffffffffffff16600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515613ec657600080fd5b82600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601060009054906101000a900460ff16600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160146101000a81548160ff021916908360ff160217905550601060019054906101000a900460ff16600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160156101000a81548160ff021916908360ff1602179055506001905092915050565b6000806000806000600d6000600960149054906101000a900460ff1660ff1660ff168152602001908152602001600020935061406e84600501544261414790919063ffffffff16565b925061408b8460050154856006015461414790919063ffffffff16565b91506140a88460040154856003015461414790919063ffffffff16565b905064174876e8006140f96140df8464174876e8006140d0868961410c90919063ffffffff16565b0261419390919063ffffffff16565b64174876e80087600301540261414790919063ffffffff16565b81151561410257fe5b0494505050505090565b60008060008414156141215760009150614140565b828402905082848281151561413257fe5b0414151561413c57fe5b8091505b5092915050565b600082821115151561415557fe5b818303905092915050565b600080828401905083811015151561417457fe5b8091505092915050565b60008161ffff16620151800242019050919050565b60008082848115156141a157fe5b0490508091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106141ef57805160ff191683800117855561421d565b8280016001018555821561421d579182015b8281111561421c578251825591602001919060010190614201565b5b50905061422a919061426c565b5090565b606060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff168152602001600060ff1681525090565b61428e91905b8082111561428a576000816000905550600101614272565b5090565b905600a165627a7a723058205a451b79a95d7c1ed9d1b6aacaf7bdd5673583ff39924cd98c626fb68148f5410029"
}