{
  "address": "0x52161ab56f3efcaad778c186dcd3ae56598d1f40",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ESH",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-29\n*/\n\ncontract ESH {\n    string public symbol = \"ESH\";\n    string public name = \"Ethershares\";\n    uint8 public constant decimals = 18;\n    uint256 _totalSupply = 5000000000000000000000000;\n\tuint256 _maxTotalSupply = 7000000000000000000000000;\n\tuint256 _miningReward = 1000000000000000000000; //One time 1000 ETS\n\tuint256 _maxMiningReward = 1500000000000000000000; //One time 1500 ETS\n\tuint256 _rewardHalvingTimePeriod = 63113852; //2 years\n\tuint256 _nextRewardHalving = now + _rewardHalvingTimePeriod;\n\tuint256 _rewardTimePeriod = 600; //10 minutes\n\tuint256 _rewardStart = now;\n\tuint256 _rewardEnd = now + _rewardTimePeriod;\n\tuint256 _currentMined = 0;\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n \n    mapping(address => uint256) balances;\n \n    mapping(address => mapping (address => uint256)) allowed;\n \n    function totalSupply() constant returns (uint256) {        \n\t\treturn _totalSupply;\n    }\n \n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n \n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        if (balances[msg.sender] >= _amount \n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) returns (bool success) {\n        if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\t\n\tfunction ESH(\n        ) {\n        balances[msg.sender] = 2000000000000000000000000;   \n    }\n\n\tfunction Mine() returns (bool success)\n\t{\n\t\tif (now < _rewardEnd && _currentMined >= _maxMiningReward)\n\t\t\trevert();\n\t\telse if (now >= _rewardEnd)\n\t\t{\n\t\t\t_rewardStart = now;\n\t\t\t_rewardEnd = now + _rewardTimePeriod;\n\t\t\t_currentMined = 0;\n\t\t}\n\t\n\t\tif (now >= _nextRewardHalving)\n\t\t{\n\t\t\t_nextRewardHalving = now + _rewardHalvingTimePeriod;\n\t\t\t_miningReward = _miningReward / 2;\n\t\t\t_maxMiningReward = _maxMiningReward / 2;\n\t\t\t_currentMined = 0;\n\t\t\t_rewardStart = now;\n\t\t\t_rewardEnd = now + _rewardTimePeriod;\n\t\t}\t\n\t\t\n\t\tif ((_currentMined < _maxMiningReward) && (_totalSupply < _maxTotalSupply) && (balances[msg.sender] <=1))\n\t\t{\n\t\t\tbalances[msg.sender] += _miningReward;\n\t\t\t_currentMined += _miningReward;\n\t\t\t_totalSupply += _miningReward;\n\t\t\tTransfer(this, msg.sender, _miningReward);\n\t\t\treturn true;\n\t\t}\t\t\t\t\n\t\treturn false;\n\t}\n\t\n\tfunction MaxTotalSupply() constant returns(uint256)\n\t{\n\t\treturn _maxTotalSupply;\n\t}\n\t\n\tfunction MiningReward() constant returns(uint256)\n\t{\n\t\treturn _miningReward;\n\t}\n\t\n\tfunction MaxMiningReward() constant returns(uint256)\n\t{\n\t\treturn _maxMiningReward;\n\t}\n\t\n\tfunction RewardHalvingTimePeriod() constant returns(uint256)\n\t{\n\t\treturn _rewardHalvingTimePeriod;\n\t}\n\t\n\tfunction NextRewardHalving() constant returns(uint256)\n\t{\n\t\treturn _nextRewardHalving;\n\t}\n\t\n\tfunction RewardTimePeriod() constant returns(uint256)\n\t{\n\t\treturn _rewardTimePeriod;\n\t}\n\t\n\tfunction RewardStart() constant returns(uint256)\n\t{\n\t\treturn _rewardStart;\n\t}\n\t\n\tfunction RewardEnd() constant returns(uint256)\n\t{\n\t\treturn _rewardEnd;\n\t}\n\t\n\tfunction CurrentMined() constant returns(uint256)\n\t{\n\t\treturn _currentMined;\n\t}\n\t\n\tfunction TimeNow() constant returns(uint256)\n\t{\n\t\treturn now;\n\t}\n    }",
  "bytecode": "60606040526040805190810160405280600381526020017f4553480000000000000000000000000000000000000000000000000000000000815250600090805190602001906200005192919062000160565b506040805190810160405280600b81526020017f4574686572736861726573000000000000000000000000000000000000000000815250600190805190602001906200009f92919062000160565b506a0422ca8b0a00a4250000006002556a05ca4ec2a79a7f67000000600355683635c9adc5dea00000600455685150ae84a8cdf000006005556303c30a7c6006556006544201600755610258600855426009556008544201600a556000600b5534156200010b57600080fd5b6a01a784379d99db42000000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200020f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001a357805160ff1916838001178555620001d4565b82800160010185558215620001d4579182015b82811115620001d3578251825591602001919060010190620001b6565b5b509050620001e39190620001e7565b5090565b6200020c91905b8082111562000208576000816000905550600101620001ee565b5090565b90565b6110c2806200021f6000396000f300606060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610117578063095ea7b3146101a55780630c3980ef146101ff57806318160ddd1461022857806323b872dd14610251578063313ce567146102ca57806342c8705b146102f95780634668f372146103265780635d7e994a1461034f578063662a719b1461037857806370a08231146103a15780638a5910a5146103ee5780638a61dcb71461041757806395d89b4114610440578063a9059cbb146104ce578063b579d7de14610528578063b597842a14610551578063cc0a26d11461057a578063da0f039d146105a3578063dd62ed3e146105cc575b600080fd5b341561012257600080fd5b61012a610638565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016a57808201518184015260208101905061014f565b50505050905090810190601f1680156101975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b057600080fd5b6101e5600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106d6565b604051808215151515815260200191505060405180910390f35b341561020a57600080fd5b6102126107c8565b6040518082815260200191505060405180910390f35b341561023357600080fd5b61023b6107d2565b6040518082815260200191505060405180910390f35b341561025c57600080fd5b6102b0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107dc565b604051808215151515815260200191505060405180910390f35b34156102d557600080fd5b6102dd610ae3565b604051808260ff1660ff16815260200191505060405180910390f35b341561030457600080fd5b61030c610ae8565b604051808215151515815260200191505060405180910390f35b341561033157600080fd5b610339610cdc565b6040518082815260200191505060405180910390f35b341561035a57600080fd5b610362610ce6565b6040518082815260200191505060405180910390f35b341561038357600080fd5b61038b610cf0565b6040518082815260200191505060405180910390f35b34156103ac57600080fd5b6103d8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cfa565b6040518082815260200191505060405180910390f35b34156103f957600080fd5b610401610d43565b6040518082815260200191505060405180910390f35b341561042257600080fd5b61042a610d4d565b6040518082815260200191505060405180910390f35b341561044b57600080fd5b610453610d57565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610493578082015181840152602081019050610478565b50505050905090810190601f1680156104c05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104d957600080fd5b61050e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610df5565b604051808215151515815260200191505060405180910390f35b341561053357600080fd5b61053b610fe9565b6040518082815260200191505060405180910390f35b341561055c57600080fd5b610564610ff3565b6040518082815260200191505060405180910390f35b341561058557600080fd5b61058d610ffb565b6040518082815260200191505060405180910390f35b34156105ae57600080fd5b6105b6611005565b6040518082815260200191505060405180910390f35b34156105d757600080fd5b610622600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061100f565b6040518082815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106ce5780601f106106a3576101008083540402835291602001916106ce565b820191906000526020600020905b8154815290600101906020018083116106b157829003601f168201915b505050505081565b600081600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600754905090565b6000600254905090565b600081600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156108a9575081600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156108b55750600082115b80156109405750600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610ad75781600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610adc565b600090505b9392505050565b601281565b6000600a5442108015610aff5750600554600b5410155b15610b0957600080fd5b600a5442101515610b2f57426009819055506008544201600a819055506000600b819055505b60075442101515610b8a5760065442016007819055506002600454811515610b5357fe5b046004819055506002600554811515610b6857fe5b046005819055506000600b81905550426009819055506008544201600a819055505b600554600b54108015610ba05750600354600254105b8015610bec57506001600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411155b15610cd457600454600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600454600b600082825401925050819055506004546002600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6004546040518082815260200191505060405180910390a360019050610cd9565b600090505b90565b6000600554905090565b6000600954905090565b6000600654905090565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600854905090565b6000600454905090565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ded5780601f10610dc257610100808354040283529160200191610ded565b820191906000526020600020905b815481529060010190602001808311610dd057829003601f168201915b505050505081565b600081600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610e465750600082115b8015610ed15750600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610fde5781600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610fe3565b600090505b92915050565b6000600a54905090565b600042905090565b6000600b54905090565b6000600354905090565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505600a165627a7a72305820e5b3a01c156b3b2078b724b2967272fdcfa8b1476d9ea1acca795758688e73230029"
}