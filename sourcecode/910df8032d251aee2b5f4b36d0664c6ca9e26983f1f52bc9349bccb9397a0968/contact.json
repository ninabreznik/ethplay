{
  "address": "0xff7ed06a93a96ff122eeaf333b9cac321fdd5ed9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ST20Token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-04\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract Owned {\n    address public owner;\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n/* import \"./oraclizeAPI_0.5.sol\"; */\n\n\n\n\n\n\n\n\ncontract ERC20 is ERC20Basic {\n  // Optional token name\n  string  public  name = \"zeosX\";\n  string  public  symbol;\n  uint256  public  decimals = 18; // standard token precision. override to customize\n    \n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n \nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  \n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  function multiTransfer(address[] _to,uint[] _value) public returns (bool);\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract BurnableToken is StandardToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(burner, _value);\n    emit Transfer(burner, address(0), _value);\n  }\n}\n\n\n\n\ncontract KYCVerification is Owned{\n    \n    mapping(address => bool) public kycAddress;\n    \n    event LogKYCVerification(address _kycAddress,bool _status);\n    \n    constructor () public {\n        owner = msg.sender;\n    }\n\n    function updateVerifcationBatch(address[] _kycAddress,bool _status) onlyOwner public returns(bool)\n    {\n        for(uint tmpIndex = 0; tmpIndex < _kycAddress.length; tmpIndex++)\n        {\n            kycAddress[_kycAddress[tmpIndex]] = _status;\n            emit LogKYCVerification(_kycAddress[tmpIndex],_status);\n        }\n        \n        return true;\n    }\n    \n    function updateVerifcation(address _kycAddress,bool _status) onlyOwner public returns(bool)\n    {\n        kycAddress[_kycAddress] = _status;\n        \n        emit LogKYCVerification(_kycAddress,_status);\n        \n        return true;\n    }\n    \n    function isVerified(address _user) view public returns(bool)\n    {\n        return kycAddress[_user] == true; \n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract ST20Token is Owned, BurnableToken {\n\n    string public name = \"SUREBANQA PERSONAL e-SHARE\";\n    string public symbol = \"ST20\";\n    uint8 public decimals = 2;\n    \n    uint256 public initialSupply = 1000000 * (10 ** uint256(decimals));\n    uint256 public totalSupply = 1000000 * (10 ** uint256(decimals));\n    uint256 public externalAuthorizePurchase = 0;\n\n    \n    /* in timestamp  */\n    mapping (address => uint) public userLockinPeriod;\n\n    /* type 1 => 2 years , 2 => 10 years   */\n    mapping (address => uint) public userLockinPeriodType;\n\n    mapping (address => bool) public frozenAccount;\n    mapping(address => uint8) authorizedCaller;\n    \n    bool public kycEnabled = true;\n    bool public authorizedTransferOnly = true; /* to Enable authorized user for transfer*/\n    \n    \n    mapping(address => mapping(bytes32 => bool)) private transferRequestStatus;\n    \n    struct fundReceiver{\n        address _to;\n        uint _value;\n    }\n    \n    mapping(address => mapping(bytes32 => fundReceiver)) private transferRequestReceiver;\n\n    KYCVerification public kycVerification;\n\n    event KYCMandateUpdate(bool _kycEnabled);\n    event KYCContractAddressUpdate(KYCVerification _kycAddress);\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n    \n    /* Events */\n    event AuthorizedCaller(address caller);\n    event DeAuthorizedCaller(address caller);\n\n    event LockinPeriodUpdated(address _guy,uint _userLockinPeriodType, uint _userLockinPeriod);\n    \n    event TransferAuthorizationOverride(bool _authorize);\n    event TransferRequested(address _from, address _to, uint _value,bytes32 _signature);\n    event TransferRequestFulfilled(address _from, address _to, uint _value,bytes32 _signature);\n    \n    \n    modifier onlyAuthCaller(){\n        require(authorizedCaller[msg.sender] == 1 || msg.sender == owner);\n        _;\n    }\n    \n    modifier kycVerified(address _guy) {\n      if(kycEnabled == true){\n          if(kycVerification.isVerified(_guy) == false)\n          {\n              revert(\"KYC Not Verified\");\n          }\n      }\n      _;\n    }\n    \n    modifier frozenVerified(address _guy) {\n        if(frozenAccount[_guy] == true)\n        {\n            revert(\"Account is freeze\");\n        }\n        _;\n    }\n    \n    modifier transferAuthorized(address _guy) {\n        \n        if(authorizedTransferOnly == true)\n        {\n            if(authorizedCaller[msg.sender] == 0 || msg.sender != owner)\n            {\n                revert();\n            }\n        }\n        _;\n    }\n\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor() public {\n        owner = msg.sender;\n        balances[0xBcd5B67aaeBb9765beE438e4Ce137B9aE2181898] = totalSupply;\n        \n        authorizedCaller[msg.sender] = 1;\n        emit AuthorizedCaller(msg.sender);\n    }\n     \n    function updateKycContractAddress(KYCVerification _kycAddress) public onlyOwner returns(bool)\n    {\n      kycVerification = _kycAddress;\n\n      emit KYCContractAddressUpdate(_kycAddress);\n\n      return true;\n    }\n\n    function updateKycMandate(bool _kycEnabled) public onlyAuthCaller returns(bool)\n    {\n        kycEnabled = _kycEnabled;\n        emit KYCMandateUpdate(_kycEnabled);\n\n        return true;\n    }\n\n    function overrideUserLockinPeriod(address _guy,uint _userLockinPeriodType, uint _userLockinPeriod) public onlyAuthCaller\n    {\n        userLockinPeriodType[_guy] = _userLockinPeriodType;\n        userLockinPeriod[_guy] = _userLockinPeriod;\n\n        emit LockinPeriodUpdated(_guy,_userLockinPeriodType, _userLockinPeriod);\n    }\n    \n    function overrideTransferAuthorization(bool _authorize) public onlyAuthCaller\n    {\n        authorizedTransferOnly = _authorize;\n        emit TransferAuthorizationOverride(_authorize);\n    }\n        \n    /* authorize caller */\n    function authorizeCaller(address _caller) public onlyOwner returns(bool) \n    {\n        authorizedCaller[_caller] = 1;\n        emit AuthorizedCaller(_caller);\n        return true;\n    }\n    \n    /* deauthorize caller */\n    function deAuthorizeCaller(address _caller) public onlyOwner returns(bool) \n    {\n        authorizedCaller[_caller] = 0;\n        emit DeAuthorizedCaller(_caller);\n        return true;\n    }\n    \n    function () payable public {\n        revert();\n    }\n    \n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal transferAuthorized(msg.sender) {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balances[_from] > _value);                // Check if the sender has enough\n        require (balances[_to].add(_value) > balances[_to]); // Check for overflow\n        balances[_from] = balances[_from].sub(_value);                         // Subtract from the sender\n        balances[_to] = balances[_to].add(_value);                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balances[target] = balances[target].add(mintedAmount);\n        totalSupply = totalSupply.add(mintedAmount);\n        emit Transfer(0, this, mintedAmount);\n        emit Transfer(this, target, mintedAmount);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n\n    function purchaseToken(address _receiver, uint _tokens, uint _userLockinPeriod, uint _userLockinPeriodType) onlyAuthCaller public  {\n        require(_tokens > 0);\n        require(initialSupply > _tokens);\n        \n        initialSupply = initialSupply.sub(_tokens);\n        _transfer(owner, _receiver, _tokens);              // makes the transfers\n        externalAuthorizePurchase = externalAuthorizePurchase.add(_tokens);\n\n        /*  Check if lockin period and lockin period type is to be set  */\n        if(_userLockinPeriod != 0 && _userLockinPeriodType != 0)\n        {\n            userLockinPeriod[_receiver] = _userLockinPeriod;\n            userLockinPeriodType[_receiver] = _userLockinPeriodType;\n\n            emit LockinPeriodUpdated(_receiver,_userLockinPeriodType, _userLockinPeriod);\n        }\n    }\n\n    /**\n      * @dev transfer token for a specified address sender and receiver must be KYC verified \n      * @param _to The address to transfer to.\n      * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public kycVerified(msg.sender) frozenVerified(msg.sender) returns (bool) {\n\n        /*  KYC Update Check  */\n        if(kycEnabled == true){\n            /*  KYC For Receiver   */\n            if(kycVerification.isVerified(_to) == false)\n            {\n                revert(\"KYC Not Verified for Receiver\");\n            }\n        }\n\n        _transfer(msg.sender,_to,_value);\n        return true;\n    }\n    \n    /*\n        Please make sure before calling this function from UI, Sender has sufficient balance for \n        All transfers and receiver qty max 25 and KYC verified\n    */\n    function multiTransfer(address[] _to,uint[] _value) public kycVerified(msg.sender) frozenVerified(msg.sender) returns (bool) {\n        require(_to.length == _value.length, \"Length of Destination should be equal to value\");\n        require(_to.length <= 25, \"Max 25 Senders allowed\" );        \n\n        for(uint _interator = 0;_interator < _to.length; _interator++ )\n        {\n            /*  KYC Update Check  */\n            if(kycEnabled == true){\n                /*  KYC For Receiver   */\n                if(kycVerification.isVerified(_to[_interator]) == false)\n                {\n                    revert(\"KYC Not Verified for Receiver\");\n                }\n            }\n        }\n\n\n        for(_interator = 0;_interator < _to.length; _interator++ )\n        {\n            _transfer(msg.sender,_to[_interator],_value[_interator]);\n        }\n        \n        return true;    \n    }\n    \n    function requestTransfer(address _to, uint _value, bytes32 _signature) public returns(bool)\n    {\n        require(transferRequestStatus[msg.sender][_signature] == false,\"Signature already processed\");\n        require (balances[msg.sender] > _value,\"Insufficient Sender Balance\");\n        \n        transferRequestReceiver[msg.sender][_signature] = fundReceiver(_to,_value);\n        \n        emit TransferRequested(msg.sender, _to, _value,_signature);\n        \n        return true;\n    }\n\n    function batchRequestTransfer(address[] _to, uint[] _value, bytes32[] _signature) public returns(bool)\n    {\n        require(_to.length == _value.length ,\"Length for to, value should be equal\");\n        require(_to.length == _signature.length ,\"Length for to, signature should be equal\");\n        \n\n        for(uint _interator = 0; _interator < _to.length ; _interator++)\n        {\n            require(transferRequestStatus[msg.sender][_signature[_interator]] == false,\"Signature already processed\");\n            \n            transferRequestReceiver[msg.sender][_signature[_interator]] = fundReceiver(_to[_interator],_value[_interator]);\n            \n            emit TransferRequested(msg.sender, _to[_interator], _value[_interator],_signature[_interator]);\n        }\n\n        \n        \n        return true;\n    }\n    \n    function fullTransferRequest(address _from, bytes32 _signature) public onlyAuthCaller returns(bool) \n    {\n        require(transferRequestStatus[_from][_signature] == false);\n        \n        fundReceiver memory _tmpHolder = transferRequestReceiver[_from][_signature];\n\n        _transfer(_from,_tmpHolder._to,_tmpHolder._value);\n        \n        transferRequestStatus[_from][_signature] == true;\n        \n        emit TransferRequestFulfilled(_from, _tmpHolder._to, _tmpHolder._value,_signature);\n        \n        return true;\n    }\n\n    function batchFullTransferRequest(address[] _from, bytes32[] _signature) public onlyAuthCaller returns(bool) \n    {\n\n        /* Check if Any Signature is previously used */\n        for(uint _interator = 0; _interator < _from.length ; _interator++)\n        {\n            require(transferRequestStatus[_from[_interator]][_signature[_interator]] == false);\n            \n            fundReceiver memory _tmpHolder = transferRequestReceiver[_from[_interator]][_signature[_interator]];\n        \n            /* Check Balance */\n            require (_tmpHolder._value < balances[_from[_interator]],\"Insufficient Sender Balance\");\n            \n            _transfer(_from[_interator],_tmpHolder._to,_tmpHolder._value);\n            \n            transferRequestStatus[_from[_interator]][_signature[_interator]] == true;\n            \n            emit TransferRequestFulfilled(_from[_interator], _tmpHolder._to, _tmpHolder._value,_signature[_interator]);\n        }\n        \n        \n        return true;\n    }\n    \n    function getTransferRequestStatus(address _from, bytes32 _signature) public view returns(bool _status)\n    {\n        return  transferRequestStatus[_from][_signature];\n        \n    }\n    \n    function getTransferRequestReceiver(address _from, bytes32 _signature) public view returns(address _to, uint _value)\n    {\n        fundReceiver memory _tmpHolder = transferRequestReceiver[_from][_signature];\n        \n        return (_tmpHolder._to, _tmpHolder._value);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes32\"}],\"name\":\"getTransferRequestReceiver\",\"outputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLockinPeriodType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address[]\"},{\"name\":\"_signature\",\"type\":\"bytes32[]\"}],\"name\":\"batchFullTransferRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"deAuthorizeCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"authorizeCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLockinPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes32\"}],\"name\":\"fullTransferRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycVerification\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kycAddress\",\"type\":\"address\"}],\"name\":\"updateKycContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalAuthorizePurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_userLockinPeriod\",\"type\":\"uint256\"},{\"name\":\"_userLockinPeriodType\",\"type\":\"uint256\"}],\"name\":\"purchaseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"},{\"name\":\"_signature\",\"type\":\"bytes32[]\"}],\"name\":\"batchRequestTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes32\"}],\"name\":\"getTransferRequestStatus\",\"outputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kycEnabled\",\"type\":\"bool\"}],\"name\":\"updateKycMandate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authorize\",\"type\":\"bool\"}],\"name\":\"overrideTransferAuthorization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guy\",\"type\":\"address\"},{\"name\":\"_userLockinPeriodType\",\"type\":\"uint256\"},{\"name\":\"_userLockinPeriod\",\"type\":\"uint256\"}],\"name\":\"overrideUserLockinPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes32\"}],\"name\":\"requestTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizedTransferOnly\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_kycEnabled\",\"type\":\"bool\"}],\"name\":\"KYCMandateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_kycAddress\",\"type\":\"address\"}],\"name\":\"KYCContractAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DeAuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_userLockinPeriodType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_userLockinPeriod\",\"type\":\"uint256\"}],\"name\":\"LockinPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_authorize\",\"type\":\"bool\"}],\"name\":\"TransferAuthorizationOverride\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_signature\",\"type\":\"bytes32\"}],\"name\":\"TransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_signature\",\"type\":\"bytes32\"}],\"name\":\"TransferRequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526040805190810160405280600581526020017f7a656f73580000000000000000000000000000000000000000000000000000008152506001908051906020019062000051929190620002f0565b5060126003556040805190810160405280601a81526020017f5355524542414e514120504552534f4e414c20652d534841524500000000000081525060079080519060200190620000a4929190620002f0565b506040805190810160405280600481526020017f535432300000000000000000000000000000000000000000000000000000000081525060089080519060200190620000f2929190620002f0565b506002600960006101000a81548160ff021916908360ff160217905550600960009054906101000a900460ff1660ff16600a0a620f424002600a55600960009054906101000a900460ff1660ff16600a0a620f424002600b556000600c556001601160006101000a81548160ff0219169083151502179055506001601160016101000a81548160ff0219169083151502179055503480156200019357600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b546004600073bcd5b67aaebb9765bee438e4ce137b9ae218189873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f8afeca650897be3183b7c0d24eba96a1b990f75c4bd74a0cfb2c0a71aec48e6133604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a16200039f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200033357805160ff191683800117855562000364565b8280016001018555821562000364579182015b828111156200036357825182559160200191906001019062000346565b5b50905062000373919062000377565b5090565b6200039c91905b80821115620003985760008160009055506001016200037e565b5090565b90565b614a0180620003af6000396000f3006080604052600436106101d8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101dd5780630710e99e1461026d578063095ea7b3146103055780630a5eaad41461036a578063148600b5146103c157806318160ddd146104825780631bcd250a146104ad5780631e89d5451461050857806323b872dd146105c95780632c388d5d1461064e578063313ce567146106a9578063365ba71e146106da578063378dc3dc146107315780633f21fb981461075c57806342966c68146107c557806366188463146107f257806366911db01461085757806370a08231146108ae57806379c6506814610905578063847191ca146109525780638da5cb5b146109ad5780638e05863814610a045780638f14803314610a2f57806395d89b4114610a905780639a49a1b414610b20578063a6fcb05314610c24578063a9059cbb14610c53578063b291990614610cb8578063b414d4b614610d21578063ba99b87d14610d7c578063cd068e6814610dc3578063cd2a9dd014610df2578063d73dd62314610e49578063dd62ed3e14610eae578063e2d738d514610f25578063e724529c14610f98578063f16f0cf314610fe7578063f2fde38b14611016575b600080fd5b3480156101e957600080fd5b506101f2611059565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610232578082015181840152602081019050610217565b50505050905090810190601f16801561025f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027957600080fd5b506102bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356000191690602001909291905050506110f7565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561031157600080fd5b50610350600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111dd565b604051808215151515815260200191505060405180910390f35b34801561037657600080fd5b506103ab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112cf565b6040518082815260200191505060405180910390f35b3480156103cd57600080fd5b5061046860048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506112e7565b604051808215151515815260200191505060405180910390f35b34801561048e57600080fd5b506104976117de565b6040518082815260200191505060405180910390f35b3480156104b957600080fd5b506104ee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117e4565b604051808215151515815260200191505060405180910390f35b34801561051457600080fd5b506105af6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611906565b604051808215151515815260200191505060405180910390f35b3480156105d557600080fd5b50610634600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e9c565b604051808215151515815260200191505060405180910390f35b34801561065a57600080fd5b5061068f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061225b565b604051808215151515815260200191505060405180910390f35b3480156106b557600080fd5b506106be61237d565b604051808260ff1660ff16815260200191505060405180910390f35b3480156106e657600080fd5b5061071b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612390565b6040518082815260200191505060405180910390f35b34801561073d57600080fd5b506107466123a8565b6040518082815260200191505060405180910390f35b34801561076857600080fd5b506107ab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356000191690602001909291905050506123ae565b604051808215151515815260200191505060405180910390f35b3480156107d157600080fd5b506107f0600480360381019080803590602001909291905050506126e8565b005b3480156107fe57600080fd5b5061083d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506128a3565b604051808215151515815260200191505060405180910390f35b34801561086357600080fd5b5061086c612b34565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108ba57600080fd5b506108ef600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b5a565b6040518082815260200191505060405180910390f35b34801561091157600080fd5b50610950600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612ba3565b005b34801561095e57600080fd5b50610993600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d67565b604051808215151515815260200191505060405180910390f35b3480156109b957600080fd5b506109c2612e71565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a1057600080fd5b50610a19612e96565b6040518082815260200191505060405180910390f35b348015610a3b57600080fd5b50610a8e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050612e9c565b005b348015610a9c57600080fd5b50610aa56130eb565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ae5578082015181840152602081019050610aca565b50505050905090810190601f168015610b125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b2c57600080fd5b50610c0a600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050613189565b604051808215151515815260200191505060405180910390f35b348015610c3057600080fd5b50610c396135f9565b604051808215151515815260200191505060405180910390f35b348015610c5f57600080fd5b50610c9e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061360c565b604051808215151515815260200191505060405180910390f35b348015610cc457600080fd5b50610d07600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190505050613a0c565b604051808215151515815260200191505060405180910390f35b348015610d2d57600080fd5b50610d62600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613a7c565b604051808215151515815260200191505060405180910390f35b348015610d8857600080fd5b50610da9600480360381019080803515159060200190929190505050613a9c565b604051808215151515815260200191505060405180910390f35b348015610dcf57600080fd5b50610df0600480360381019080803515159060200190929190505050613bb1565b005b348015610dfe57600080fd5b50610e47600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050613cbe565b005b348015610e5557600080fd5b50610e94600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613e73565b604051808215151515815260200191505060405180910390f35b348015610eba57600080fd5b50610f0f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061406f565b6040518082815260200191505060405180910390f35b348015610f3157600080fd5b50610f7e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080356000191690602001909291905050506140f6565b604051808215151515815260200191505060405180910390f35b348015610fa457600080fd5b50610fe5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061441f565b005b348015610ff357600080fd5b50610ffc614544565b604051808215151515815260200191505060405180910390f35b34801561102257600080fd5b50611057600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614557565b005b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110ef5780601f106110c4576101008083540402835291602001916110ef565b820191906000526020600020905b8154815290600101906020018083116110d257829003601f168201915b505050505081565b6000806111026149a5565b601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085600019166000191681526020019081526020016000206040805190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505090508060000151816020015192509250509250929050565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600e6020528060005260406000206000915090505481565b6000806112f26149a5565b6001601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16148061139c57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156113a757600080fd5b600091505b84518210156117d257600015156012600087858151811015156113cb57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868581518110151561141f57fe5b906020019060200201516000191660001916815260200190815260200160002060009054906101000a900460ff16151514151561145b57600080fd5b60136000868481518110151561146d57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085848151811015156114c157fe5b90602001906020020151600019166000191681526020019081526020016000206040805190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050905060046000868481518110151561156057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054816020015110151561161f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e73756666696369656e742053656e6465722042616c616e6365000000000081525060200191505060405180910390fd5b611649858381518110151561163057fe5b90602001906020020151826000015183602001516145f5565b6001151560126000878581518110151561165f57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086858151811015156116b357fe5b906020019060200201516000191660001916815260200190815260200160002060009054906101000a905050507f83bb9f539b18c59a446dad726b50188675fa616520b17f86dd53a08678e87783858381518110151561170f57fe5b9060200190602002015182600001518360200151878681518110151561173157fe5b90602001906020020151604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001826000191660001916815260200194505050505060405180910390a181806001019250506113ac565b60019250505092915050565b600b5481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561184157600080fd5b6000601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f9e8ca6ff03906e81e8a6a03d4f96b7edb0b97f0ed9d07ef1b699fff63438549682604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b6000803360011515601160009054906101000a900460ff1615151415611a995760001515601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9209e33836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156119e757600080fd5b505af11580156119fb573d6000803e3d6000fd5b505050506040513d6020811015611a1157600080fd5b810190808051906020019092919050505015151415611a98576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4b5943204e6f742056657269666965640000000000000000000000000000000081525060200191505060405180910390fd5b5b3360011515600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415611b61576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4163636f756e7420697320667265657a6500000000000000000000000000000081525060200191505060405180910390fd5b84518651141515611c00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f4c656e677468206f662044657374696e6174696f6e2073686f756c642062652081526020017f657175616c20746f2076616c756500000000000000000000000000000000000081525060400191505060405180910390fd5b6019865111151515611c7a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4d61782032352053656e6465727320616c6c6f7765640000000000000000000081525060200191505060405180910390fd5b600092505b8551831015611e3b5760011515601160009054906101000a900460ff1615151415611e2e5760001515601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9209e338886815181101515611cf457fe5b906020019060200201516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611d7c57600080fd5b505af1158015611d90573d6000803e3d6000fd5b505050506040513d6020811015611da657600080fd5b810190808051906020019092919050505015151415611e2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4b5943204e6f7420566572696669656420666f7220526563656976657200000081525060200191505060405180910390fd5b5b8280600101935050611c7f565b600092505b8551831015611e8f57611e82338785815181101515611e5b57fe5b906020019060200201518786815181101515611e7357fe5b906020019060200201516145f5565b8280600101935050611e40565b6001935050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611ed957600080fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611f2757600080fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611fb257600080fd5b61200482600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461496e90919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061209982600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461498790919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061216b82600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461496e90919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122b857600080fd5b6001601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f8afeca650897be3183b7c0d24eba96a1b990f75c4bd74a0cfb2c0a71aec48e6182604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b600960009054906101000a900460ff1681565b600d6020528060005260406000206000915090505481565b600a5481565b60006123b86149a5565b6001601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16148061246257506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561246d57600080fd5b60001515601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000856000191660001916815260200190815260200160002060009054906101000a900460ff1615151415156124e557600080fd5b601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084600019166000191681526020019081526020016000206040805190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505090506125bd84826000015183602001516145f5565b60011515601260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000856000191660001916815260200190815260200160002060009054906101000a905050507f83bb9f539b18c59a446dad726b50188675fa616520b17f86dd53a08678e87783848260000151836020015186604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001826000191660001916815260200194505050505060405180910390a1600191505092915050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561273857600080fd5b33905061278d82600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461496e90919063ffffffff16565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506127e58260055461496e90919063ffffffff16565b6005819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050565b600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156129b4576000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a48565b6129c7838261496e90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bfe57600080fd5b612c5081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461498790919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612ca881600b5461498790919063ffffffff16565b600b819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612dc457600080fd5b81601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6db48a5f31a589c40a63205de78d2929b4c296f2ca791091ec96c337c57a76aa82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b6001601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161480612f4657506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515612f5157600080fd5b600083111515612f6057600080fd5b82600a54111515612f7057600080fd5b612f8583600a5461496e90919063ffffffff16565b600a81905550612fb76000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685856145f5565b612fcc83600c5461498790919063ffffffff16565b600c8190555060008214158015612fe4575060008114155b156130e55781600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f548b46c0ea47ecbfe2e64cc8048c063b792817fba76e585dd55f5f7777836e60848284604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b50505050565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131815780601f1061315657610100808354040283529160200191613181565b820191906000526020600020905b81548152906001019060200180831161316457829003601f168201915b505050505081565b6000808351855114151561322b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f4c656e67746820666f7220746f2c2076616c75652073686f756c64206265206581526020017f7175616c0000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b825185511415156132ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f4c656e67746820666f7220746f2c207369676e61747572652073686f756c642081526020017f626520657175616c00000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600090505b84518110156135ed5760001515601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858481518110151561332b57fe5b906020019060200201516000191660001916815260200190815260200160002060009054906101000a900460ff1615151415156133d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5369676e617475726520616c72656164792070726f636573736564000000000081525060200191505060405180910390fd5b604080519081016040528086838151811015156133e957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff168152602001858381518110151561341c57fe5b90602001906020020151815250601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858481518110151561347857fe5b906020019060200201516000191660001916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050507f209c426ff3ca3855903bb88e05bbf4331aa31a0b93fbd6a3ab8765259a09e27833868381518110151561351c57fe5b90602001906020020151868481518110151561353457fe5b90602001906020020151868581518110151561354c57fe5b90602001906020020151604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001826000191660001916815260200194505050505060405180910390a180806001019150506132cf565b60019150509392505050565b601160009054906101000a900460ff1681565b60003360011515601160009054906101000a900460ff161515141561379e5760001515601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9209e33836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156136ec57600080fd5b505af1158015613700573d6000803e3d6000fd5b505050506040513d602081101561371657600080fd5b81019080805190602001909291905050501515141561379d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4b5943204e6f742056657269666965640000000000000000000000000000000081525060200191505060405180910390fd5b5b3360011515600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415613866576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4163636f756e7420697320667265657a6500000000000000000000000000000081525060200191505060405180910390fd5b60011515601160009054906101000a900460ff16151514156139f55760001515601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9209e33876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561394357600080fd5b505af1158015613957573d6000803e3d6000fd5b505050506040513d602081101561396d57600080fd5b8101908080519060200190929190505050151514156139f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4b5943204e6f7420566572696669656420666f7220526563656976657200000081525060200191505060405180910390fd5b5b613a003386866145f5565b60019250505092915050565b6000601260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836000191660001916815260200190815260200160002060009054906101000a900460ff16905092915050565b600f6020528060005260406000206000915054906101000a900460ff1681565b60006001601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161480613b4857506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515613b5357600080fd5b81601160006101000a81548160ff0219169083151502179055507f62f573f515ef5989c8f83d4701c96be7ceddfa7954525fce545787a582cf3a0082604051808215151515815260200191505060405180910390a160019050919050565b6001601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161480613c5b57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515613c6657600080fd5b80601160016101000a81548160ff0219169083151502179055507f62f8e2183ed291a7b5d3bce11a8da112804016259973a3ad0350b7fc8c03d29681604051808215151515815260200191505060405180910390a150565b6001601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161480613d6857506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515613d7357600080fd5b81600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f548b46c0ea47ecbfe2e64cc8048c063b792817fba76e585dd55f5f7777836e60838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1505050565b6000613f0482600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461498790919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000801515601260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846000191660001916815260200190815260200160002060009054906101000a900460ff1615151415156141d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5369676e617475726520616c72656164792070726f636573736564000000000081525060200191505060405180910390fd5b82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561428e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e73756666696369656e742053656e6465722042616c616e6365000000000081525060200191505060405180910390fd5b60408051908101604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184815250601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846000191660001916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050507f209c426ff3ca3855903bb88e05bbf4331aa31a0b93fbd6a3ab8765259a09e27833858585604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001826000191660001916815260200194505050505060405180910390a1600190509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561447a57600080fd5b80600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b601160019054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156145b257600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3360011515601160019054906101000a900460ff16151514156146c8576000601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614806146bd57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156146c757600080fd5b5b60008373ffffffffffffffffffffffffffffffffffffffff16141515156146ee57600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561473b57600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546147cd83600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461498790919063ffffffff16565b1115156147d957600080fd5b61482b82600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461496e90919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506148c082600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461498790919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b600082821115151561497c57fe5b818303905092915050565b600080828401905083811015151561499b57fe5b8091505092915050565b6040805190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815250905600a165627a7a7230582048a142614d97b80f3a1db1c317fc0ccf572b7897601eb667fdfefead1861ab010029"
}