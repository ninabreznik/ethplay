{
  "address": "0x19080df0360ce52b1068d54e1769182d9cc2b218",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "_0xBabylon",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-10\n*/\n\n//In dedication to my wife and family\npragma solidity ^0.4.23;\ncontract _0xBabylon{\n\t// scaleFactor is used to convert Ether into tokens and vice-versa: they're of different\n\t// orders of magnitude, hence the need to bridge between the two.\n\tuint256 constant scaleFactor = 0x10000000000000000;// 2^64\n\n\tint constant crr_n = 3;//CRR numerator\n\tint constant crr_d = 5;//CRR denominator\n\n\tuint256 constant fee_premine = 30;//Fee Premine. So that the first buyer isn't a black hole\n\n\tint constant price_coeff = 0x44fa9cf152cd34a98;\n\n\t// Array between each address and their number of tokens.\n\tmapping(address => uint256) public holdings;\n\t//cut down by a percentage when you sell out.\n\tmapping(address => uint256) public avgFactor_ethSpent;\n\n\tmapping(address => uint256) public color_R;\n\tmapping(address => uint256) public color_G;\n\tmapping(address => uint256) public color_B;\n\n\t// Array between each address and how much Ether has been paid out to it.\n\t// Note that this is scaled by the scaleFactor variable.\n\tmapping(address => address) public reff;\n\tmapping(address => uint256) public tricklingPass;\n\tmapping(address => uint256) public pocket;\n\tmapping(address => int256) public payouts;\n\n\t// Variable tracking how many tokens are in existence overall.\n\tuint256 public totalBondSupply;\n\n\t// Aggregate sum of all payouts.\n\t// Note that this is scaled by the scaleFactor variable.\n\tint256 totalPayouts;\n\tuint256 public trickleSum;\n\tuint256 public stakingRequirement = 1e18;\n\t\n\taddress public lastGateway;\n\tuint256 constant trickTax = 3; //divides flux'd fee and for every pass up\n\n\t//flux fee ratio and contract score keepers\n\tuint256 public withdrawSum;\n\tuint256 public investSum;\n\n\t// Variable tracking how much Ether each token is currently worth.\n\t// Note that this is scaled by the scaleFactor variable.\n\tuint256 earningsPerBond;\n\n\tevent onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed gateway\n    );\n\tevent onBoughtFor(\n        address indexed buyerAddress,\n        address indexed forWho,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed gateway\n    );\n\tevent onReinvestFor(\n        address indexed buyerAddress,\n        address indexed forWho,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed gateway\n    );\n    \n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 totalTokensAtTheTime,//maybe it'd be cool to see what % people are selling from their total bank\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint256 resolved,\n        address indexed gateway\n    );\n    \n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted,\n        address indexed gateway\n    );\n    \n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n    event onCashDividends(\n        address indexed ownerAddress,\n        address indexed receiverAddress,\n        uint256 ethereumWithdrawn\n    );\n    event onColor(\n        address indexed customerAddress,\n        uint256 oldR,\n        uint256 oldG,\n        uint256 oldB,\n        uint256 newR,\n        uint256 newG,\n        uint256 newB\n    );\n\n    event onTrickle(\n        address indexed fromWho,\n        address indexed finalReff,\n        uint256 reward,\n        uint256 passUp\n    );\n\n\t// The following functions are used by the front-end for display purposes.\n\n\n\t// Returns the number of tokens currently held by _owner.\n\tfunction holdingsOf(address _owner) public constant returns (uint256 balance) {\n\t\treturn holdings[_owner];\n\t}\n\n\t// Withdraws all dividends held by the caller sending the transaction, updates\n\t// the requisite global variables, and transfers Ether back to the caller.\n\tfunction withdraw(address to) public {\n\t\tif(to == 0x0000000000000000000000000000000000000000 ){\n\t\t\tto = msg.sender;\n\t\t}\n\t\ttrickleUp(msg.sender);\n\t\t// Retrieve the dividends associated with the address the request came from.\n\t\tuint256 balance = dividends(msg.sender);\n\t\t//uint256 pocketBalance = tricklePocket[msg.sender];\n\t\t//tricklePocket[msg.sender] = 0;\n\t\t// Update the payouts array, incrementing the request address by `balance`.\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\n\t\t\n\t\t// Increase the total amount that's been paid out to maintain invariance.\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\n\n\t\tuint256 pocketETH = pocket[msg.sender];\n\t\tpocket[msg.sender] = 0;\n\t\ttrickleSum -= pocketETH;\n\n\t\tbalance += pocketETH;\n\t\t// Send the dividends to the address that requested the withdraw.\n\t\twithdrawSum += balance;\n\t\tto.transfer(balance);\n\t\temit onCashDividends(msg.sender,to,balance);\n\t}\n\tfunction fullCycleSellBonds(uint256 balance) internal {\n\t\t// Send the cashed out stake to the address that requested the withdraw.\n\t\twithdrawSum += balance;\n\t\tmsg.sender.transfer(balance);\n\t\temit onWithdraw(msg.sender, balance);\n\t}\n\n\n\t// Sells your tokens for Ether. This Ether is assigned to the callers entry\n\t// in the tokenBalance array, and therefore is shown as a dividend. A second\n\t// call to withdraw() must be made to invoke the transfer of Ether back to your address.\n\tfunction sellBonds(uint256 _amount) public {\n\t\tuint256 bondBalance = holdings[msg.sender];\n\t\tif(_amount <= bondBalance && _amount > 0){\n\t\t\tsell(_amount);\n\t\t}else{\n\t\t\tsell(bondBalance);\n\t\t}\n\t}\n\n\t// The slam-the-button escape hatch. Sells the callers tokens for Ether, then immediately\n\t// invokes the withdraw() function, sending the resulting Ether to the callers address.\n    function getMeOutOfHere() public {\n\t\tsellBonds( holdings[msg.sender] );\n        withdraw(msg.sender);\n\t}\n\n\tfunction reffUp(address _reff) internal{\n\t\taddress sender = msg.sender;\n\t\tif (_reff == 0x0000000000000000000000000000000000000000 || _reff == msg.sender){\n\t\t\t_reff = reff[sender];\n\t\t}\n\t\t\t\n\t\tif(  holdings[_reff] < stakingRequirement ){//if req not met\n\t\t\tif(lastGateway == 0x0000000000000000000000000000000000000000){\n\t\t\t\tlastGateway = sender;//first buyer ever\n\t\t\t\t_reff = sender;//first buyer is their own gateway/masternode\n\t\t\t\t\n\t\t\t\t//initialize fee pre-mine\n\t\t\t\tinvestSum = msg.value * fee_premine;\n\t\t\t\twithdrawSum = msg.value * fee_premine;\n\t\t\t}\n\t\t\telse\n\t\t\t\t_reff = lastGateway;//the lucky last player gets to be the gate way.\n\t\t}\n\t\treff[sender] = _reff;\n\t}\n\tfunction rgbLimit(uint256 _rgb)internal pure returns(uint256){\n\t\tif(_rgb > 255)\n\t\t\treturn 255;\n\t\telse\n\t\t\treturn _rgb;\n\t}\n\t//BONUS\n\t//when you don't pick a color, the contract will need a default. which will be your current color\n\tfunction edgePigment(uint8 C)internal view returns (uint256 x)\n\t{\t\n\t\tuint256 holding = holdings[msg.sender];\n\t\tif(holding==0)\n\t\t\treturn 0;\n\t\telse{\n\t\t\tif(C==0){\n\t\t\t\treturn 255 * color_R[msg.sender]/holding;\n\t\t\t}else if(C==1){\n\t\t\t\treturn 255 * color_G[msg.sender]/holding;\n\t\t\t}else if(C==2){\n\t\t\t\treturn 255 * color_B[msg.sender]/holding;\n\t\t\t}\n\t\t} \n\t}\n\tfunction fund(address reffo, address forWho) payable public {\n\t\tfund_color( reffo, forWho, edgePigment(0),edgePigment(1),edgePigment(2) );\n\t}\n\tfunction fund_color( address _reff, address forWho,uint256 cR,uint256 cG,uint256 cB) payable public {\n\t\t// Don't allow for funding if the amount of Ether sent is less than 1 szabo.\n\t\treffUp(_reff);\n\t\tif (msg.value > 0.000001 ether){\n\t\t\tinvestSum += msg.value;\n\t\t\tcR=rgbLimit(cR);\n\t\t\tcG=rgbLimit(cG);\n\t\t\tcB=rgbLimit(cB);\n\t\t    buy( forWho ,cR,cG,cB);\n\t\t\tlastGateway = msg.sender;\n\t\t} else {\n\t\t\trevert();\n\t\t}\n    }\n\n    function reinvest_color(address forWho,uint256 cR,uint256 cG,uint256 cB) public {\n    \tcR=rgbLimit(cR);\n\t\tcG=rgbLimit(cG);\n\t\tcB=rgbLimit(cB);\n\t\tprocessReinvest( forWho, cR,cG,cB);\n\t}\n    function reinvest(address forWho) public {\n\t\tprocessReinvest( forWho, edgePigment(0),edgePigment(1),edgePigment(2) );\n\t}\n\n\t// Function that returns the (dynamic) price of a single token.\n\tfunction price(bool buyOrSell) public constant returns (uint) {\n        if(buyOrSell){\n        \treturn getTokensForEther(1 finney);\n        }else{\n        \tuint256 eth = getEtherForTokens(1 finney);\n        \tuint256 fee = fluxFeed(eth, false, false);\n\t        return eth - fee;\n        }\n    }\n\n\tfunction fluxFeed(uint256 _eth, bool slim_reinvest,bool newETH) public constant returns (uint256 amount) {\n\t\tuint256 finalInvestSum;\n\t\tif(newETH)\n\t\t\tfinalInvestSum = investSum-_eth;//bigger buy bonus\n\t\telse\n\t\t\tfinalInvestSum = investSum;\n\n\t\tuint256 contract_ETH = finalInvestSum - withdrawSum;\n\t\tif(slim_reinvest){//trickleSum can never be 0, trust me\n\t\t\treturn  _eth/(contract_ETH/trickleSum) *  contract_ETH /investSum;\n\t\t}else{\n\t\t\treturn  _eth *  contract_ETH / investSum;\n\t\t}\n\n\t\t/*\n\t\tFee\n\t\t\t100eth IN & 100eth OUT = 0% tax fee (returning 1)\n\t\t\t100eth IN & 50eth OUT = 50% tax fee (returning 2)\n\t\t\t100eth IN & 33eth OUT = 66% tax fee (returning 3)\n\t\t\t100eth IN & 25eth OUT = 75% tax fee (returning 4)\n\t\t\t100eth IN & 10eth OUT = 90% tax fee (returning 10)\n\t\t*/\n\t}\n\n\t// Calculate the current dividends associated with the caller address. This is the net result\n\t// of multiplying the number of tokens held by their current value in Ether and subtracting the\n\t// Ether that has already been paid out.\n\tfunction dividends(address _owner) public constant returns (uint256 amount) {\n\t\treturn (uint256) ((int256)( earningsPerBond * holdings[_owner] ) - payouts[_owner] ) / scaleFactor;\n\t}\n\n\t// Internal balance function, used to calculate the dynamic reserve value.\n\tfunction contractBalance() internal constant returns (uint256 amount){\n\t\t// msg.value is the amount of Ether sent by the transaction.\n\t\treturn investSum - withdrawSum - msg.value - trickleSum;\n\t}\n\t\t\t\tfunction trickleUp(address fromWho) internal{//you can trickle up other people by giving them some.\n\t\t\t\t\tuint256 tricks = tricklingPass[ fromWho ];//this is the amount moving in the trickle flo\n\t\t\t\t\tif(tricks > 0){\n\t\t\t\t\t\ttricklingPass[ fromWho ] = 0;//we've already captured the amount so set your tricklingPass flo to 0\n\t\t\t\t\t\tuint256 passUp = tricks * (investSum - withdrawSum)/investSum;//to get the amount we're gonna pass up. divide by trickTax\n\t\t\t\t\t\tuint256 reward = tricks-passUp;//and our remaining reward for ourselves is the amount we just slice off subtracted from the flo\n\t\t\t\t\t\taddress finalReff;//we're not exactly sure who we're gonna pass this up to yet\n\t\t\t\t\t\taddress reffo =  reff[ fromWho ];//this is who it should go up to. if everything is legit\n\t\t\t\t\t\tif( holdings[reffo] >= stakingRequirement){\n\t\t\t\t\t\t\tfinalReff = reffo;//if that address is holding enough to stake, it's a legit node to flo up to.\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tfinalReff = lastGateway;//if not, then we use the last buyer\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttricklingPass[ finalReff ] += passUp;//so now we add that flo you've passed up to the tricklingPass of the final Reff\n\t\t\t\t\t\tpocket[ finalReff ] += reward;// Reward\n\t\t\t\t\t\temit onTrickle(fromWho, finalReff, reward, passUp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\t\t\t\tfunction buy(address forWho,uint256 cR,uint256 cG,uint256 cB) internal {\n\t\t\t\t\t\t\t\t\t// Any transaction of less than 1 szabo is likely to be worth less than the gas used to send it.\n\t\t\t\t\t\t\t\t\tif (msg.value < 0.000001 ether || msg.value > 1000000 ether)\n\t\t\t\t\t\t\t\t\t\trevert();\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//Fee to pay existing holders, and the referral commission\n\t\t\t\t\t\t\t\t\tuint256 fee = 0; \n\t\t\t\t\t\t\t\t\tuint256 trickle = 0; \n\t\t\t\t\t\t\t\t\tif(holdings[forWho] != totalBondSupply){\n\t\t\t\t\t\t\t\t\t\tfee = fluxFeed(msg.value,false,true);\n\t\t\t\t\t\t\t\t\t\ttrickle = fee/trickTax;\n\t\t\t\t\t\t\t\t\t\tfee = fee - trickle;\n\t\t\t\t\t\t\t\t\t\ttricklingPass[forWho] += trickle;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tuint256 numEther = msg.value - (fee+trickle);// The amount of Ether used to purchase new tokens for the caller.\n\t\t\t\t\t\t\t\t\tuint256 numTokens = 0;\n\t\t\t\t\t\t\t\t\tif(numEther > 0){\n\t\t\t\t\t\t\t\t\t\tnumTokens = getTokensForEther(numEther);// The number of tokens which can be purchased for numEther.\n\n\t\t\t\t\t\t\t\t\t\tbuyCalcAndPayout( forWho, fee, numTokens, numEther, reserve() );\n\n\t\t\t\t\t\t\t\t\t\taddPigment(forWho, numTokens,cR,cG,cB);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(forWho != msg.sender){//make sure you're not yourself\n\t\t\t\t\t\t\t\t\t\t//if forWho doesn't have a reff or if that masternode is weak, then reset it\n\t\t\t\t\t\t\t\t\t\tif(reff[forWho] == 0x0000000000000000000000000000000000000000 || (holdings[reff[forWho]] < stakingRequirement) )\n\t\t\t\t\t\t\t\t\t\t\treff[forWho] = msg.sender;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\temit onBoughtFor(msg.sender, forWho, numEther, numTokens, reff[forWho] );\n\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\temit onTokenPurchase(forWho, numEther ,numTokens , reff[forWho] );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\ttrickleSum += trickle;//add to trickle's Sum after reserve calculations\n\t\t\t\t\t\t\t\t\ttrickleUp(forWho);\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tfunction buyCalcAndPayout(address forWho,uint256 fee,uint256 numTokens,uint256 numEther,uint256 res)internal{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The buyer fee, scaled by the scaleFactor variable.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint256 buyerFee = fee * scaleFactor;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (totalBondSupply > 0){// because ...\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Compute the bonus co-efficient for all existing holders and the buyer.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The buyer receives part of the distribution for each token bought in the\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// same way they would have if they bought each token individually.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint256 bonusCoEff = (scaleFactor - (res + numEther) * numTokens * scaleFactor / ( totalBondSupply  + numTokens) / numEther)\n\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t*(uint)(crr_d) / (uint)(crr_d-crr_n);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The total reward to be distributed amongst the masses is the fee (in Ether)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// multiplied by the bonus co-efficient.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint256 holderReward = fee * bonusCoEff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuyerFee -= holderReward;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The Ether value per token is increased proportionally.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tearningsPerBond +=  holderReward / totalBondSupply;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//resolve reward tracking stuff\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tavgFactor_ethSpent[forWho] += numEther;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Add the numTokens which were just created to the total supply. We're a crypto central bank!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotalBondSupply += numTokens;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Assign the tokens to the balance of the buyer.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tholdings[forWho] += numTokens;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Update the payout array so that the buyer cannot claim dividends on previous purchases.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Also include the fee paid for entering the scheme.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// First we compute how much was just paid out to the buyer...\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tint256 payoutDiff = (int256) ((earningsPerBond * numTokens) - buyerFee);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Then we update the payouts array for the buyer with this amount...\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpayouts[forWho] += payoutDiff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// And then we finally add it to the variable tracking the total amount spent to maintain invariance.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotalPayouts += payoutDiff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Sell function that takes tokens and converts them into Ether. Also comes with a 10% fee\n\t\t\t\t\t\t\t\t// to discouraging dumping, and means that if someone near the top sells, the fee distributed\n\t\t\t\t\t\t\t\t// will be *significant*.\n\t\t\t\t\t\t\t\tfunction TOKEN_scaleDown(uint256 value,uint256 reduce) internal view returns(uint256 x){\n\t\t\t\t\t\t\t\t\tuint256 holdingsOfSender = holdings[msg.sender];\n\t\t\t\t\t\t\t\t\treturn value * ( holdingsOfSender - reduce) / holdingsOfSender;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfunction sell(uint256 amount) internal {\n\t\t\t\t\t\t\t\t    uint256 numEthersBeforeFee = getEtherForTokens(amount);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// x% of the resulting Ether is used to pay remaining holders.\n\t\t\t\t\t\t\t\t\tuint256 fee = 0;\n\t\t\t\t\t\t\t\t\tuint256 trickle = 0;\n\t\t\t\t\t\t\t\t\tif(totalBondSupply != holdings[msg.sender]){\n\t\t\t\t\t\t\t\t\t\tfee = fluxFeed(numEthersBeforeFee, false,false);\n\t\t\t\t\t\t\t        \ttrickle = fee/ trickTax;\n\t\t\t\t\t\t\t\t\t\tfee -= trickle;\n\t\t\t\t\t\t\t\t\t\ttricklingPass[msg.sender] +=trickle;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Net Ether for the seller after the fee has been subtracted.\n\t\t\t\t\t\t\t        uint256 numEthers = numEthersBeforeFee - (fee+trickle);\n\n\t\t\t\t\t\t\t\t\t//How much you bought it for divided by how much you're getting back.\n\t\t\t\t\t\t\t\t\t//This means that if you get dumped on, you can get more resolve tokens if you sell out.\n\t\t\t\t\t\t\t\t\tuint256 resolved = mint(\n\t\t\t\t\t\t\t\t\t\tcalcResolve(msg.sender,amount,numEthersBeforeFee),\n\t\t\t\t\t\t\t\t\t\tmsg.sender\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t// *Remove* the numTokens which were just sold from the total supply.\n\t\t\t\t\t\t\t\t\tavgFactor_ethSpent[msg.sender] = TOKEN_scaleDown(avgFactor_ethSpent[msg.sender] , amount);\n\n\t\t\t\t\t\t\t\t\tcolor_R[msg.sender] = TOKEN_scaleDown(color_R[msg.sender] , amount);\n\t\t\t\t\t\t\t\t\tcolor_G[msg.sender] = TOKEN_scaleDown(color_G[msg.sender] , amount);\n\t\t\t\t\t\t\t\t\tcolor_B[msg.sender] = TOKEN_scaleDown(color_B[msg.sender] , amount);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\ttotalBondSupply -= amount;\n\t\t\t\t\t\t\t\t\t// Remove the tokens from the balance of the buyer.\n\t\t\t\t\t\t\t\t\tholdings[msg.sender] -= amount;\n\n\t\t\t\t\t\t\t\t\tint256 payoutDiff = (int256) (earningsPerBond * amount);//we don't add in numETH because it is immedietly paid out.\n\t\t\n\t\t\t\t\t\t\t        // We reduce the amount paid out to the seller (this effectively resets their payouts value to zero,\n\t\t\t\t\t\t\t\t\t// since they're selling all of their tokens). This makes sure the seller isn't disadvantaged if\n\t\t\t\t\t\t\t\t\t// they decide to buy back in.\n\t\t\t\t\t\t\t\t\tpayouts[msg.sender] -= payoutDiff;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Decrease the total amount that's been paid out to maintain invariance.\n\t\t\t\t\t\t\t        totalPayouts -= payoutDiff;\n\t\t\t\t\t\t\t        \n\n\t\t\t\t\t\t\t\t\t// Check that we have tokens in existence (this is a bit of an irrelevant check since we're\n\t\t\t\t\t\t\t\t\t// selling tokens, but it guards against division by zero).\n\t\t\t\t\t\t\t\t\tif (totalBondSupply > 0) {\n\t\t\t\t\t\t\t\t\t\t// Scale the Ether taken as the selling fee by the scaleFactor variable.\n\t\t\t\t\t\t\t\t\t\tuint256 etherFee = fee * scaleFactor;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Fee is distributed to all remaining token holders.\n\t\t\t\t\t\t\t\t\t\t// rewardPerShare is the amount gained per token thanks to this sell.\n\t\t\t\t\t\t\t\t\t\tuint256 rewardPerShare = etherFee / totalBondSupply;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// The Ether value per token is increased proportionally.\n\t\t\t\t\t\t\t\t\t\tearningsPerBond +=  rewardPerShare;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfullCycleSellBonds(numEthers);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\ttrickleSum += trickle;\n\t\t\t\t\t\t\t\t\ttrickleUp(msg.sender);\n\t\t\t\t\t\t\t\t\temit onTokenSell(msg.sender,holdings[msg.sender]+amount,amount,numEthers,resolved,reff[msg.sender]);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t// Converts the Ether accrued as dividends back into Staking tokens without having to\n\t\t\t\t// withdraw it first. Saves on gas and potential price spike loss.\n\t\t\t\tfunction processReinvest(address forWho,uint256 cR,uint256 cG,uint256 cB) internal{\n\t\t\t\t\t// Retrieve the dividends associated with the address the request came from.\n\t\t\t\t\tuint256 balance = dividends(msg.sender);\n\n\t\t\t\t\t// Update the payouts array, incrementing the request address by `balance`.\n\t\t\t\t\t// Since this is essentially a shortcut to withdrawing and reinvesting, this step still holds.\n\t\t\t\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\n\t\t\t\t\t\n\t\t\t\t\t// Increase the total amount that's been paid out to maintain invariance.\n\t\t\t\t\ttotalPayouts += (int256) (balance * scaleFactor);\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t// Assign balance to a new variable.\n\t\t\t\t\tuint256 pocketETH = pocket[msg.sender];\n\t\t\t\t\tuint value_ = (uint) (balance + pocketETH);\n\t\t\t\t\tpocket[msg.sender] = 0;\n\t\t\t\t\t\n\t\t\t\t\t// If your dividends are worth less than 1 szabo, or more than a million Ether\n\t\t\t\t\t// (in which case, why are you even here), abort.\n\t\t\t\t\tif (value_ < 0.000001 ether || value_ > 1000000 ether)\n\t\t\t\t\t\trevert();\n\n\t\t\t\t\tuint256 fee = 0; \n\t\t\t\t\tuint256 trickle = 0;\n\t\t\t\t\tif(holdings[forWho] != totalBondSupply){\n\t\t\t\t\t\tfee = fluxFeed(value_, true,false );// reinvestment fees are lower than regular ones.\n\t\t\t\t\t\ttrickle = fee/ trickTax;\n\t\t\t\t\t\tfee = fee - trickle;\n\t\t\t\t\t\ttricklingPass[forWho] += trickle;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// A temporary reserve variable used for calculating the reward the holder gets for buying tokens.\n\t\t\t\t\t// (Yes, the buyer receives a part of the distribution as well!)\n\t\t\t\t\tuint256 res = reserve() - balance;\n\n\t\t\t\t\t// The amount of Ether used to purchase new tokens for the caller.\n\t\t\t\t\tuint256 numEther = value_ - (fee+trickle);\n\t\t\t\t\t\n\t\t\t\t\t// The number of tokens which can be purchased for numEther.\n\t\t\t\t\tuint256 numTokens = calculateDividendTokens(numEther, balance);\n\t\t\t\t\t\n\t\t\t\t\tbuyCalcAndPayout( forWho, fee, numTokens, numEther, res );\n\n\t\t\t\t\taddPigment(forWho, numTokens,cR,cG,cB);\n\t\t\t\t\t\n\n\t\t\t\t\tif(forWho != msg.sender){//make sure you're not yourself\n\t\t\t\t\t\t//if forWho doesn't have a reff, then reset it\n\t\t\t\t\t\taddress reffOfWho = reff[forWho];\n\t\t\t\t\t\tif(reffOfWho == 0x0000000000000000000000000000000000000000 || (holdings[reffOfWho] < stakingRequirement) )\n\t\t\t\t\t\t\treff[forWho] = msg.sender;\n\n\t\t\t\t\t\temit onReinvestFor(msg.sender,forWho,numEther,numTokens,reff[forWho]);\n\t\t\t\t\t}else{\n\t\t\t\t\t\temit onReinvestment(forWho,numEther,numTokens,reff[forWho]);\t\n\t\t\t\t\t}\n\n\t\t\t\t\ttrickleUp(forWho);\n\t\t\t\t\ttrickleSum += trickle - pocketETH;\n\t\t\t\t}\n\t\n\tfunction addPigment(address forWho, uint256 tokens,uint256 r,uint256 g,uint256 b) internal{\n\t\tcolor_R[forWho] += tokens * r / 255;\n\t\tcolor_G[forWho] += tokens * g / 255;\n\t\tcolor_B[forWho] += tokens * b / 255;\n\t\temit onColor(forWho,r,g,b,color_R[forWho] ,color_G[forWho] ,color_B[forWho] );\n\t}\n\t// Dynamic value of Ether in reserve, according to the CRR requirement.\n\tfunction reserve() internal constant returns (uint256 amount){\n\t\treturn contractBalance()-((uint256) ((int256) (earningsPerBond * totalBondSupply) - totalPayouts ) / scaleFactor);\n\t}\n\n\t// Calculates the number of tokens that can be bought for a given amount of Ether, according to the\n\t// dynamic reserve and totalSupply values (derived from the buy and sell prices).\n\tfunction getTokensForEther(uint256 ethervalue) public constant returns (uint256 tokens) {\n\t\treturn fixedExp(fixedLog(reserve() + ethervalue)*crr_n/crr_d + price_coeff) - totalBondSupply ;\n\t}\n\n\t// Semantically similar to getTokensForEther, but subtracts the callers balance from the amount of Ether returned for conversion.\n\tfunction calculateDividendTokens(uint256 ethervalue, uint256 subvalue) public constant returns (uint256 tokens) {\n\t\treturn fixedExp(fixedLog(reserve() - subvalue + ethervalue)*crr_n/crr_d + price_coeff) -  totalBondSupply;\n\t}\n\n\t// Converts a number tokens into an Ether value.\n\tfunction getEtherForTokens(uint256 tokens) public constant returns (uint256 ethervalue) {\n\t\t// How much reserve Ether do we have left in the contract?\n\t\tuint256 reserveAmount = reserve();\n\n\t\t// If you're the Highlander (or bagholder), you get The Prize. Everything left in the vault.\n\t\tif (tokens == totalBondSupply )\n\t\t\treturn reserveAmount;\n\n\t\t// If there would be excess Ether left after the transaction this is called within, return the Ether\n\t\t// corresponding to the equation in Dr Jochen Hoenicke's original Ponzi paper, which can be found\n\t\t// at https://test.jochen-hoenicke.de/eth/ponzitoken/ in the third equation, with the CRR numerator \n\t\t// and denominator altered to 1 and 2 respectively.\n\t\treturn reserveAmount - fixedExp((fixedLog(totalBondSupply  - tokens) - price_coeff) * crr_d/crr_n);\n\t}\n\n\tfunction () payable public {\n\t\tif (msg.value > 0) {\n\t\t\tfund(lastGateway,msg.sender);\n\t\t} else {\n\t\t\twithdraw(msg.sender);\n\t\t}\n\t}\n\n\t\t\t\t\t\t\t\t\t\taddress public resolver = this;\n\t\t\t\t\t\t\t\t\t    uint256 public totalSupply;\n\t\t\t\t\t\t\t\t\t    uint256 constant private MAX_UINT256 = 2**256 - 1;\n\t\t\t\t\t\t\t\t\t    mapping (address => uint256) public balances;\n\t\t\t\t\t\t\t\t\t    mapping (address => mapping (address => uint256)) public allowed;\n\t\t\t\t\t\t\t\t\t    \n\t\t\t\t\t\t\t\t\t    string public name = \"0xBabylon\";\n\t\t\t\t\t\t\t\t\t    uint8 public decimals = 18;\n\t\t\t\t\t\t\t\t\t    string public symbol = \"PoWHr\";\n\t\t\t\t\t\t\t\t\t    \n\t\t\t\t\t\t\t\t\t    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n\t\t\t\t\t\t\t\t\t    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\t\t\t\t\t\t\t\t\t    event Resolved(address indexed _owner, uint256 amount);\n\n\t\t\t\t\t\t\t\t\t    function mint(uint256 amount,address _account) internal returns (uint minted){\n\t\t\t\t\t\t\t\t\t    \ttotalSupply += amount;\n\t\t\t\t\t\t\t\t\t    \tbalances[_account] += amount;\n\t\t\t\t\t\t\t\t\t    \temit Resolved(_account,amount);\n\t\t\t\t\t\t\t\t\t    \treturn amount;\n\t\t\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t\t\t\t    function balanceOf(address _owner) public view returns (uint256 balance) {\n\t\t\t\t\t\t\t\t\t        return balances[_owner];\n\t\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t\t\t    \n\n\t\t\t\t\t\t\t\t\t\tfunction calcResolve(address _owner,uint256 amount,uint256 _eth) public constant returns (uint256 calculatedResolveTokens) {\n\t\t\t\t\t\t\t\t\t\t\treturn amount*amount*avgFactor_ethSpent[_owner]/holdings[_owner]/_eth/1000000;\n\t\t\t\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\t\t\t    function transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t\t\t\t\t\t\t\t        require( balanceOf(msg.sender) >= _value);\n\t\t\t\t\t\t\t\t\t        balances[msg.sender] -= _value;\n\t\t\t\t\t\t\t\t\t        balances[_to] += _value;\n\t\t\t\t\t\t\t\t\t        emit Transfer(msg.sender, _to, _value);\n\t\t\t\t\t\t\t\t\t        return true;\n\t\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\n\t\t\t\t\t\t\t\t\t        uint256 allowance = allowed[_from][msg.sender];\n\t\t\t\t\t\t\t\t\t        require(    balanceOf(_from)  >= _value && allowance >= _value );\n\t\t\t\t\t\t\t\t\t        balances[_to] += _value;\n\t\t\t\t\t\t\t\t\t        balances[_from] -= _value;\n\t\t\t\t\t\t\t\t\t        if (allowance < MAX_UINT256) {\n\t\t\t\t\t\t\t\t\t            allowed[_from][msg.sender] -= _value;\n\t\t\t\t\t\t\t\t\t        }\n\t\t\t\t\t\t\t\t\t        emit Transfer(_from, _to, _value);\n\t\t\t\t\t\t\t\t\t        return true;\n\t\t\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t\t\t\t    function approve(address _spender, uint256 _value) public returns (bool success) {\n\t\t\t\t\t\t\t\t\t        allowed[msg.sender][_spender] = _value;\n\t\t\t\t\t\t\t\t\t        emit Approval(msg.sender, _spender, _value);\n\t\t\t\t\t\t\t\t\t        return true;\n\t\t\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t\t\t\t    function resolveSupply() public view returns (uint256 balance) {\n\t\t\t\t\t\t\t\t\t        return totalSupply;\n\t\t\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t\t\t\t    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n\t\t\t\t\t\t\t\t\t        return allowed[_owner][_spender];\n\t\t\t\t\t\t\t\t\t    }\n\n    // You don't care about these, but if you really do they're hex values for \n\t// co-efficients used to simulate approximations of the log and exp functions.\n\tint256  constant one        = 0x10000000000000000;\n\tuint256 constant sqrt2      = 0x16a09e667f3bcc908;\n\tuint256 constant sqrtdot5   = 0x0b504f333f9de6484;\n\tint256  constant ln2        = 0x0b17217f7d1cf79ac;\n\tint256  constant ln2_64dot5 = 0x2cb53f09f05cc627c8;\n\tint256  constant c1         = 0x1ffffffffff9dac9b;\n\tint256  constant c3         = 0x0aaaaaaac16877908;\n\tint256  constant c5         = 0x0666664e5e9fa0c99;\n\tint256  constant c7         = 0x049254026a7630acf;\n\tint256  constant c9         = 0x038bd75ed37753d68;\n\tint256  constant c11        = 0x03284a0c14610924f;\n\n\t// The polynomial R = c1*x + c3*x^3 + ... + c11 * x^11\n\t// approximates the function log(1+x)-log(1-x)\n\t// Hence R(s) = log((1+s)/(1-s)) = log(a)\n\tfunction fixedLog(uint256 a) internal pure returns (int256 log) {\n\t\tint32 scale = 0;\n\t\twhile (a > sqrt2) {\n\t\t\ta /= 2;\n\t\t\tscale++;\n\t\t}\n\t\twhile (a <= sqrtdot5) {\n\t\t\ta *= 2;\n\t\t\tscale--;\n\t\t}\n\t\tint256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);\n\t\tint256 z = (s*s) / one;\n\t\treturn scale * ln2 +\n\t\t\t(s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))\n\t\t\t\t/one))/one))/one))/one))/one);\n\t}\n\n\tint256 constant c2 =  0x02aaaaaaaaa015db0;\n\tint256 constant c4 = -0x000b60b60808399d1;\n\tint256 constant c6 =  0x0000455956bccdd06;\n\tint256 constant c8 = -0x000001b893ad04b3a;\n\n\t// The polynomial R = 2 + c2*x^2 + c4*x^4 + ...\n\t// approximates the function x*(exp(x)+1)/(exp(x)-1)\n\t// Hence exp(x) = (R(x)+x)/(R(x)-x)\n\tfunction fixedExp(int256 a) internal pure returns (uint256 exp) {\n\t\tint256 scale = (a + (ln2_64dot5)) / ln2 - 64;\n\t\ta -= scale*ln2;\n\t\tint256 z = (a*a) / one;\n\t\tint256 R = ((int256)(2) * one) +\n\t\t\t(z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\n\t\texp = (uint256) (((R + a) * one) / (R - a));\n\t\tif (scale >= 0)\n\t\t\texp <<= scale;\n\t\telse\n\t\t\texp >>= -scale;\n\t\treturn exp;\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"holdingsOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"slim_reinvest\",\"type\":\"bool\"},{\"name\":\"newETH\",\"type\":\"bool\"}],\"name\":\"fluxFeed\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBondSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"avgFactor_ethSpent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"calcResolve\",\"outputs\":[{\"name\":\"calculatedResolveTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolveSupply\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"forWho\",\"type\":\"address\"},{\"name\":\"cR\",\"type\":\"uint256\"},{\"name\":\"cG\",\"type\":\"uint256\"},{\"name\":\"cB\",\"type\":\"uint256\"}],\"name\":\"reinvest_color\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trickleSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"}],\"name\":\"getTokensForEther\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payouts\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyOrSell\",\"type\":\"bool\"}],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reff\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"color_B\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastGateway\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reffo\",\"type\":\"address\"},{\"name\":\"forWho\",\"type\":\"address\"}],\"name\":\"fund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMeOutOfHere\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"forWho\",\"type\":\"address\"}],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"getEtherForTokens\",\"outputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"},{\"name\":\"subvalue\",\"type\":\"uint256\"}],\"name\":\"calculateDividendTokens\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tricklingPass\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holdings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pocket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"color_R\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellBonds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reff\",\"type\":\"address\"},{\"name\":\"forWho\",\"type\":\"address\"},{\"name\":\"cR\",\"type\":\"uint256\"},{\"name\":\"cG\",\"type\":\"uint256\"},{\"name\":\"cB\",\"type\":\"uint256\"}],\"name\":\"fund_color\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"color_G\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"forWho\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"onBoughtFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"forWho\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"onReinvestFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalTokensAtTheTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resolved\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiverAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onCashDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldR\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldG\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldB\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newR\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newG\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newB\",\"type\":\"uint256\"}],\"name\":\"onColor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromWho\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"finalReff\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"passUp\",\"type\":\"uint256\"}],\"name\":\"onTrickle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Resolved\",\"type\":\"event\"}]",
  "bytecode": "6080604052670de0b6b3a7640000600c5530601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600981526020017f3078426162796c6f6e0000000000000000000000000000000000000000000000815250601590805190602001906200009e9291906200011d565b506012601660006101000a81548160ff021916908360ff1602179055506040805190810160405280600581526020017f506f57487200000000000000000000000000000000000000000000000000000081525060179080519060200190620001089291906200011d565b503480156200011657600080fd5b50620001cc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016057805160ff191683800117855562000191565b8280016001018555821562000191579182015b828111156200019057825182559160200191906001019062000173565b5b509050620001a09190620001a4565b5090565b620001c991905b80821115620001c5576000816000905550600101620001ab565b5090565b90565b613f4a80620001dc6000396000f30060806040526004361061020f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303995b2d1461025557806304f3bcec146102ac57806306fdde0314610303578063095ea7b3146103935780631423113a146103f857806315ed6d061461045157806318160ddd1461047c5780631a81ea2a146104a757806323b872dd146104fe57806327e235e3146105835780632fa30d33146105da578063313ce5671461064557806334b3b0141461067657806351cff8d9146106a1578063556bcece146106e4578063564952d51461074557806356d399e8146107705780635c6581651461079b57806362dbf2611461081257806365bcfbe71461085357806368306e43146108aa5780636ab154361461090157806370a08231146109445780637c4793431461099b5780637cb808d5146109c65780638e09c27914610a4957806393ac390514610aa057806395d89b4114610af7578063a4a85b2214610b87578063a9059cbb14610bdd578063b1e3524214610c42578063b8872fb714610c59578063b9f308f214610c9c578063bda5c45014610cdd578063c45c03f614610d28578063dd3ced6314610d7f578063dd62ed3e14610dd6578063dffb2d4e14610e4d578063e0acac7f14610ea4578063e7dc706f14610ecf578063ee4350ed14610f26578063f7a7ec1214610f53578063fa3c504614610fc7575b600034111561024957610244600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163361101e565b610253565b6102523361104a565b5b005b34801561026157600080fd5b50610296600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061126a565b6040518082815260200191505060405180910390f35b3480156102b857600080fd5b506102c16112b2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030f57600080fd5b506103186112d8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035857808201518184015260208101905061033d565b50505050905090810190601f1680156103855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039f57600080fd5b506103de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611376565b604051808215151515815260200191505060405180910390f35b34801561040457600080fd5b5061043b60048036038101908080359060200190929190803515159060200190929190803515159060200190929190505050611468565b6040518082815260200191505060405180910390f35b34801561045d57600080fd5b506104666114dd565b6040518082815260200191505060405180910390f35b34801561048857600080fd5b506104916114e3565b6040518082815260200191505060405180910390f35b3480156104b357600080fd5b506104e8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114e9565b6040518082815260200191505060405180910390f35b34801561050a57600080fd5b50610569600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611501565b604051808215151515815260200191505060405180910390f35b34801561058f57600080fd5b506105c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611764565b6040518082815260200191505060405180910390f35b3480156105e657600080fd5b5061062f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061177c565b6040518082815260200191505060405180910390f35b34801561065157600080fd5b5061065a61182d565b604051808260ff1660ff16815260200191505060405180910390f35b34801561068257600080fd5b5061068b611840565b6040518082815260200191505060405180910390f35b3480156106ad57600080fd5b506106e2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061104a565b005b3480156106f057600080fd5b50610743600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919050505061184a565b005b34801561075157600080fd5b5061075a61187d565b6040518082815260200191505060405180910390f35b34801561077c57600080fd5b50610785611883565b6040518082815260200191505060405180910390f35b3480156107a757600080fd5b506107fc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611889565b6040518082815260200191505060405180910390f35b34801561081e57600080fd5b5061083d600480360381019080803590602001909291905050506118ae565b6040518082815260200191505060405180910390f35b34801561085f57600080fd5b50610894600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118ef565b6040518082815260200191505060405180910390f35b3480156108b657600080fd5b506108eb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611907565b6040518082815260200191505060405180910390f35b34801561090d57600080fd5b5061092e6004803603810190808035151590602001909291905050506119a8565b6040518082815260200191505060405180910390f35b34801561095057600080fd5b50610985600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119f7565b6040518082815260200191505060405180910390f35b3480156109a757600080fd5b506109b0611a40565b6040518082815260200191505060405180910390f35b3480156109d257600080fd5b50610a07600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a46565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a5557600080fd5b50610a8a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a79565b6040518082815260200191505060405180910390f35b348015610aac57600080fd5b50610ab5611a91565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b0357600080fd5b50610b0c611ab7565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b4c578082015181840152602081019050610b31565b50505050905090810190601f168015610b795780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610bdb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061101e565b005b348015610be957600080fd5b50610c28600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b55565b604051808215151515815260200191505060405180910390f35b348015610c4e57600080fd5b50610c57611c77565b005b348015610c6557600080fd5b50610c9a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cc9565b005b348015610ca857600080fd5b50610cc760048036038101908080359060200190929190505050611cf3565b6040518082815260200191505060405180910390f35b348015610ce957600080fd5b50610d126004803603810190808035906020019092919080359060200190929190505050611d4c565b6040518082815260200191505060405180910390f35b348015610d3457600080fd5b50610d69600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d90565b6040518082815260200191505060405180910390f35b348015610d8b57600080fd5b50610dc0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611da8565b6040518082815260200191505060405180910390f35b348015610de257600080fd5b50610e37600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dc0565b6040518082815260200191505060405180910390f35b348015610e5957600080fd5b50610e8e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e47565b6040518082815260200191505060405180910390f35b348015610eb057600080fd5b50610eb9611e5f565b6040518082815260200191505060405180910390f35b348015610edb57600080fd5b50610f10600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e65565b6040518082815260200191505060405180910390f35b348015610f3257600080fd5b50610f5160048036038101908080359060200190929190505050611e7d565b005b610fc5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050611ef1565b005b348015610fd357600080fd5b50611008600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f96565b6040518082815260200191505060405180910390f35b611046828261102d6000611fae565b6110376001611fae565b6110416002611fae565b611ef1565b5050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611086573392505b61108f3361212e565b61109833611907565b9150680100000000000000008202600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550680100000000000000008202600a60008282540192505081905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600b60008282540392505081905550808201915081600e600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156111ff573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1aaa685cb652ee17be3efefed8cca6d5e5431f79fd654095c60783d1b30a17d8846040518082815260200191505060405180910390a3505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60158054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561136e5780601f106113435761010080835404028352916020019161136e565b820191906000526020600020905b81548152906001019060200180831161135157829003601f168201915b505050505081565b600081601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000806000831561147f5785600f54039150611485565b600f5491505b600e548203905084156114c157600f5481600b54838115156114a357fe5b04888115156114ae57fe5b04028115156114b957fe5b0492506114d4565b600f548187028115156114d057fe5b0492505b50509392505050565b60095481565b60125481565b60016020528060005260406000206000915090505481565b600080601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508261158d866119f7565b1015801561159b5750828110155b15156115a657600080fd5b82601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082601360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156116f35782601460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60136020528060005260406000206000915090505481565b6000620f4240826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548687020281151561180f57fe5b0481151561181957fe5b0481151561182357fe5b0490509392505050565b601660009054906101000a900460ff1681565b6000601254905090565b611853836123cc565b925061185e826123cc565b9150611869816123cc565b9050611877848484846123e9565b50505050565b600b5481565b600c5481565b6014602052816000526040600020602052806000526040600020600091509150505481565b60006009546118e768044fa9cf152cd34a98600560036118d6876118d0612996565b016129c5565b028115156118e057fe5b0501612b20565b039050919050565b60086020528060005260406000206000915090505481565b600068010000000000000000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460105402038115156119a057fe5b049050919050565b600080600083156119ca576119c366038d7ea4c680006118ae565b92506119f0565b6119da66038d7ea4c68000611cf3565b91506119e882600080611468565b905080820392505b5050919050565b6000601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600f5481565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60178054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b4d5780601f10611b2257610100808354040283529160200191611b4d565b820191906000526020600020905b815481529060010190602001808311611b3057829003601f168201915b505050505081565b600081611b61336119f7565b10151515611b6e57600080fd5b81601360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b611cbe6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e7d565b611cc73361104a565b565b611cf081611cd76000611fae565b611ce16001611fae565b611ceb6002611fae565b6123e9565b50565b600080611cfe612996565b9050600954831415611d1257809150611d46565b611d416003600568044fa9cf152cd34a98611d3087600954036129c5565b0302811515611d3b57fe5b05612b20565b810391505b50919050565b6000600954611d8768044fa9cf152cd34a9860056003611d768888611d6f612996565b03016129c5565b02811515611d8057fe5b0501612b20565b03905092915050565b60066020528060005260406000206000915090505481565b60006020528060005260406000206000915090505481565b6000601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60076020528060005260406000206000915090505481565b600e5481565b60026020528060005260406000206000915090505481565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808211158015611ed05750600082115b15611ee357611ede82612c82565b611eed565b611eec81612c82565b5b5050565b611efa856131ea565b64e8d4a51000341115611f8a5734600f60008282540192505081905550611f20836123cc565b9250611f2b826123cc565b9150611f36816123cc565b9050611f4484848484613462565b33600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611f8f565b600080fd5b5050505050565b60036020528060005260406000206000915090505481565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156120045760009150612128565b60008360ff1614156120655780600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460ff0281151561205d57fe5b049150612128565b60018360ff1614156120c65780600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460ff028115156120be57fe5b049150612128565b60028360ff1614156121275780600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460ff0281151561211f57fe5b049150612128565b5b50919050565b6000806000806000600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054945060008511156123c4576000600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600f54600e54600f540386028115156121db57fe5b0493508385039250600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600c546000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515612296578091506122bc565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b83600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f32a1f5eda9fd756f161945269eb54ffd3b8d3bf3fdd98cf5a84659b0a256d4668587604051808381526020018281526020019250505060405180910390a35b505050505050565b600060ff8211156123e05760ff90506123e4565b8190505b919050565b600080600080600080600080600061240033611907565b9850680100000000000000008902600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550680100000000000000008902600a60008282540192505081905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054975087890196506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555064e8d4a5100087108061251d575069d3c21bcecceda100000087115b1561252757600080fd5b60009550600094506009546000808f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156125e9576125858760016000611468565b955060038681151561259357fe5b049450848603955084600660008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b886125f2612996565b03935084860187039250612606838a611d4c565b91506126158d8784868861395a565b6126228d838e8e8e613b04565b3373ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff1614151561289f57600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806127335750600c546000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b156127b75733600560008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcae35823a5b7c99ccea5a1c482f2d5d82d7769df02172e72acf4ac7ff1b59b938686604051808381526020018281526020019250505060405180910390a461296c565b600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff167fd31db7f52f093418604265590eca90d794c9d2765d04a9993a04169efd8e89dd8585604051808381526020018281526020019250505060405180910390a35b6129758d61212e565b878503600b6000828254019250508190555050505050505050505050505050565b600068010000000000000000600a5460095460105402038115156129b657fe5b046129bf613d4f565b03905090565b600080600080600092505b68016a09e667f3bcc9088511156129fd576002858115156129ed57fe5b04945082806001019350506129d0565b5b67b504f333f9de648485111515612a23576002850294508280600190039350506129fe565b6801000000000000000085016801000000000000000080870302811515612a4657fe5b05915068010000000000000000828302811515612a5f57fe5b059050680100000000000000008068010000000000000000806801000000000000000080673284a0c14610924f8702811515612a9757fe5b056738bd75ed37753d68018602811515612aad57fe5b056749254026a7630acf018502811515612ac357fe5b0567666664e5e9fa0c99018402811515612ad957fe5b0567aaaaaaac16877908018302811515612aef57fe5b056801ffffffffff9dac9b018302811515612b0657fe5b0567b17217f7d1cf79ac8460030b02019350505050919050565b600080600080604067b17217f7d1cf79ac682cb53f09f05cc627c88701811515612b4657fe5b0503925067b17217f7d1cf79ac83028503945068010000000000000000858602811515612b6f57fe5b059150680100000000000000008068010000000000000000807fffffffffffffffffffffffffffffffffffffffffffffffffffffe476c52fb4c68602811515612bb457fe5b05660455956bccdd06018502811515612bc957fe5b057fffffffffffffffffffffffffffffffffffffffffffffffffff49f49f7f7c662f018402811515612bf757fe5b05672aaaaaaaaa015db0018302811515612c0d57fe5b05680100000000000000006002020190508481036801000000000000000086830102811515612c3857fe5b059350600083121515612c5e5782846000821215612c5257fe5b9060020a029350612c77565b82600003846000821215612c6e57fe5b9060020a900493505b839350505050919050565b600080600080600080600080612c9789611cf3565b975060009650600095506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600954141515612d5a57612cf688600080611468565b9650600387811515612d0457fe5b049550858703965085600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b85870188039450612d75612d6f338b8b61177c565b33613d63565b9350612dc0600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548a613e19565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612e4c600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548a613e19565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612ed8600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548a613e19565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612f64600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548a613e19565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555088600960008282540392505081905550886000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508860105402925082600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600a60008282540392505081905550600060095411156130a15768010000000000000000870291506009548281151561308d57fe5b049050806010600082825401925050819055505b6130aa85613e76565b85600b600082825401925050819055506130c33361212e565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fbf9904cc993ef0a60b081a086d2c24ccfd6bab4fb98e0980b9c0113dda80a0218b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054018c89896040518085815260200184815260200183815260200182815260200194505050505060405180910390a3505050505050505050565b6000339050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061325557503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156132bd57600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b600c546000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156133e057600073ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156133b95780600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550809150601e3402600f81905550601e3402600e819055506133df565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505b5b81600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060008064e8d4a51000341080613484575069d3c21bcecceda100000034115b1561348e57600080fd5b60009350600092506009546000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515613550576134ec3460006001611468565b93506003848115156134fa57fe5b049250828403935082600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b828401340391506000905060008211156135915761356d826118ae565b90506135838885838561357e612996565b61395a565b6135908882898989613b04565b5b3373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614151561386a57600073ffffffffffffffffffffffffffffffffffffffff16600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806136fe5750600c54600080600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b156137825733600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f67d9552d64f84da282a3d0abfaaf8d3bbc0d5c3f7e36d28d1c84bfc5c92ee7f08585604051808381526020018281526020019250505060405180910390a4613937565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58484604051808381526020018281526020019250505060405180910390a35b82600b600082825401925050819055506139508861212e565b5050505050505050565b6000806000806801000000000000000088029350600060095411156139ea5760036005036005878960095401680100000000000000008b8b8b01020281151561399f57fe5b048115156139a957fe5b046801000000000000000003028115156139bf57fe5b04925082880291508184039350600954828115156139d957fe5b046010600082825401925050819055505b85600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555086600960008282540192505081905550866000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555083876010540203905080600860008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600a60008282540192505081905550505050505050505050565b60ff838502811515613b1257fe5b04600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060ff828502811515613b6d57fe5b04600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060ff818502811515613bc857fe5b04600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508473ffffffffffffffffffffffffffffffffffffffff167f2565206db038a5b2584a6ee3e615643314f8f3959b41b02f655121e4f2459c79848484600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a25050505050565b6000600b5434600e54600f54030303905090565b60008260126000828254019250508190555082601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff167f2e52bea68b967d05289fe0d069a066198bcd450dbac0bd00f371539cd308a6f0846040518082815260200191505060405180910390a282905092915050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808382038502811515613e6c57fe5b0491505092915050565b80600e600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613ecc573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc826040518082815260200191505060405180910390a2505600a165627a7a723058207198588a41e5647c95e24bfcadd4c4b44b6158c86b361679b761c040298da2770029"
}