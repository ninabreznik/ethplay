{
  "address": "0x888888888888036cdccc66c852bcfe0cedbeb20d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AdminUpgradeabilityProxy",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\n// File: contracts/upgradeability/Proxy.sol\n\npragma solidity 0.5.0;\n\n/**\n * @title Proxy\n * @dev Implements delegation of calls to other contracts, with proper\n * forwarding of return values and bubbling of failures.\n * It defines a fallback function that delegates all calls to the address\n * returned by the abstract _implementation() internal function.\n */\ncontract Proxy {\n    /**\n     * @dev Fallback function.\n     * Implemented entirely in `_fallback`.\n     */\n    function () external payable {\n        _fallback();\n    }\n\n    /**\n     * @return The Address of the implementation.\n     */\n    function _implementation() internal view returns (address);\n\n    /**\n     * @dev Delegates execution to an implementation contract.\n     * This is a low level function that doesn't return to its internal call site.\n     * It will return to the external caller whatever the implementation returns.\n     * @param implementation Address to delegate.\n     */\n    function _delegate(address implementation) internal {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize)\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize)\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize) }\n            default { return(0, returndatasize) }\n        }\n    }\n\n    /**\n     * @dev Function that is run as the first thing in the fallback function.\n     * Can be redefined in derived contracts to add functionality.\n     * Redefinitions must call super._willFallback().\n     */\n    function _willFallback() internal {\n    }\n\n    /**\n     * @dev fallback implementation.\n     * Extracted to enable manual triggering.\n     */\n    function _fallback() internal {\n        _willFallback();\n        _delegate(_implementation());\n    }\n}\n\n// File: contracts/utils/AddressUtils.sol\n\npragma solidity 0.5.0;\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param addr address to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(addr) }\n        return size > 0;\n    }\n\n}\n\n// File: contracts/upgradeability/UpgradeabilityProxy.sol\n\npragma solidity 0.5.0;\n\n\n\n/**\n * @title UpgradeabilityProxy\n * @dev This contract implements a proxy that allows to change the\n * implementation address to which it will delegate.\n * Such a change is called an implementation upgrade.\n */\ncontract UpgradeabilityProxy is Proxy {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     * @param implementation Address of the new implementation.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"com.yqb.proxy.implementation\", and is\n     * validated in the constructor.\n     */\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x69bff8d33f8a81d44ad045cae8c2563876eaefa1bf1355c3840f96d03ef9dc26;\n\n    /**\n     * @dev Contract constructor.\n     * @param _implementation Address of the initial implementation.\n     * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n     * It should include the signature and the parameters of the function to be called, as described in\n     * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n     * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n     */\n    constructor(address _implementation, bytes memory _data) public payable {\n        assert(IMPLEMENTATION_SLOT == keccak256(\"com.yqb.proxy.implementation\"));\n        _setImplementation(_implementation);\n        if(_data.length > 0) {\n            (bool success, ) = _implementation.delegatecall(_data); \n            require(success);\n        }\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     * @return Address of the current implementation\n     */\n    function _implementation() internal view returns (address impl) {\n        bytes32 slot = IMPLEMENTATION_SLOT;\n        assembly {\n            impl := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Upgrades the proxy to a new implementation.\n     * @param newImplementation Address of the new implementation.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation address of the proxy.\n     * @param newImplementation Address of the new implementation.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n        assembly {\n            sstore(slot, newImplementation)\n        }\n    }\n}\n\n// File: contracts/upgradeability/AdminUpgradeabilityProxy.sol\n\npragma solidity 0.5.0;\n\n\n/**\n * @title AdminUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with an authorization\n * mechanism for administrative tasks.\n * All external functions in this contract must be guarded by the\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\n * feature proposal that would enable this to be done automatically.\n */\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\n   \n    /**\n     * @dev Emitted when the administration has been transferred.\n     * @param previousAdmin Address of the previous admin.\n     * @param newAdmin Address of the new admin.\n     */\n    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"com.yqb.proxy.admin\" \n     * and \"com.yqb.proxy.pendingAdmin\", and validated in the constructor.\n     */\n    bytes32 private constant ADMIN_SLOT = 0x6f6d8d7f580c12385c0ffee3db0c8dd22f5ced916dd281b7afe571b5ea7bf38d;\n    bytes32 private constant PENDINGADMIN_SLOT = 0xfe6b8cc6ffc46560d1f51755d0370c701a703e339b6c269e0d18ab46fab2c530;\n\n    /**\n     * @dev Modifier to check whether the `msg.sender` is the admin.\n     * If it is, it will run the function. Otherwise, it will delegate the call\n     * to the implementation.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _admin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Modifier to check whether the `msg.sender` is the pendingAdmin.\n     * If it is, it will run the function. Otherwise, it will delegate the call\n     * to the implementation.\n     */\n    modifier ifPendingAdmin() {\n        if (msg.sender == _pendingAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * Contract constructor.\n     * @param _implementation address of the initial implementation.\n     * @param _admin Address of the proxy administrator.\n     * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n     * It should include the signature and the parameters of the function to be called, as described in\n     * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n     * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n     */\n    constructor(\n        address _implementation, \n        address _admin, \n        bytes memory _data\n    ) UpgradeabilityProxy(_implementation, _data) public payable {\n        require(_admin != address(0), \"admin shouldn't be zero address\");\n        assert(ADMIN_SLOT == keccak256(\"com.yqb.proxy.admin\"));\n        assert(PENDINGADMIN_SLOT == keccak256(\"com.yqb.proxy.pendingAdmin\"));\n        _setAdmin(_admin);\n    }\n\n    /**\n     * @return The address of the proxy admin.\n     */\n    function admin() external ifAdmin returns (address) {\n        return _admin();\n    }\n\n    /**\n     * @return The address of the proxy pendingAdmin\n     */\n    function pendingAdmin() external returns (address) {\n        if (msg.sender == _admin() || msg.sender == _pendingAdmin()) {\n            return _pendingAdmin();\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @return The address of the implementation.\n     */\n    function implementation() external ifAdmin returns (address) {\n        return _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     * Only the current admin can call this function.\n     * @param _newAdmin Address to transfer proxy administration to.\n     */\n    function changeAdmin(address _newAdmin) external ifAdmin {\n        _setPendingAdmin(_newAdmin);\n    }\n\n    /**\n     * @dev Allows the pendingAdmin address to finalize the transfer. \n     */\n    function claimAdmin() external ifPendingAdmin {\n        emit AdminChanged(_admin(), _pendingAdmin());\n        _setAdmin(_pendingAdmin());\n        _setPendingAdmin(address(0));\n        \n    }  \n\n    /**\n     * @dev Upgrade the backing implementation of the proxy.\n     * Only the admin can call this function.\n     * @param newImplementation Address of the new implementation.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeTo(newImplementation);\n    }\n    \n    /**\n     * @dev Upgrade the backing implementation of the proxy and call a function\n     * on the new implementation.\n     * This is useful to initialize the proxied contract.\n     * @param _newImplementation Address of the new implementation.\n     * @param _data Data to send as msg.data in the low level call.\n     * It should include the signature and the parameters of the function to be called, as described in\n     * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n     */\n    function upgradeToAndCall(address _newImplementation, bytes calldata _data) external payable ifAdmin {\n        _upgradeTo(_newImplementation);\n        (bool success, ) = _newImplementation.delegatecall(_data); \n        require(success);\n    }\n\n    /**\n     * @return The admin slot.\n     */\n    function _admin() internal view returns (address adm) {\n        bytes32 slot = ADMIN_SLOT;\n        assembly {\n            adm := sload(slot)\n        }\n    }\n\n    /**\n     * @return The pendingAdmin slot\n     */\n    function _pendingAdmin() internal view returns (address pendingAdm) {\n        bytes32 slot = PENDINGADMIN_SLOT;\n        assembly {\n            pendingAdm := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Sets the address of the proxy admin.\n     * @param _newAdmin Address of the new proxy admin.\n     */\n    function _setAdmin(address _newAdmin) internal { \n        bytes32 slot = ADMIN_SLOT;\n        assembly {\n            sstore(slot, _newAdmin)\n        }\n    }\n\n    /**\n     * @dev Sets the address of the proxy pendingAdmin.\n     * @param _newAdmin Address of the new proxy pendingAdmin.\n     */\n    function _setPendingAdmin(address _newAdmin) internal { \n        bytes32 slot = PENDINGADMIN_SLOT;\n        assembly {\n            sstore(slot, _newAdmin)\n        }\n    }\n\n    /**\n     * @dev Only fall back when the sender is not the admin.\n     */\n    function _willFallback() internal {\n        require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n        super._willFallback();\n    }\n\n}",
  "bytecode": "6080604052604051610e83380380610e838339810180604052606081101561002657600080fd5b810190808051906020019092919080519060200190929190805164010000000081111561005257600080fd5b8281019050602081018481111561006857600080fd5b815185600182028301116401000000008211171561008557600080fd5b5050929190505050828160405180807f636f6d2e7971622e70726f78792e696d706c656d656e746174696f6e00000000815250601c01905060405180910390207f69bff8d33f8a81d44ad045cae8c2563876eaefa1bf1355c3840f96d03ef9dc266001021415156100f257fe5b61010a82610367640100000000026401000000009004565b6000815111156101da5760008273ffffffffffffffffffffffffffffffffffffffff16826040518082805190602001908083835b602083101515610163578051825260208201915060208101905060208303925061013e565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101c3576040519150601f19603f3d011682016040523d82523d6000602084013e6101c8565b606091505b505090508015156101d857600080fd5b505b5050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f61646d696e2073686f756c646e2774206265207a65726f20616464726573730081525060200191505060405180910390fd5b60405180807f636f6d2e7971622e70726f78792e61646d696e00000000000000000000000000815250601301905060405180910390207f6f6d8d7f580c12385c0ffee3db0c8dd22f5ced916dd281b7afe571b5ea7bf38d6001021415156102e457fe5b60405180807f636f6d2e7971622e70726f78792e70656e64696e6741646d696e000000000000815250601a01905060405180910390207ffe6b8cc6ffc46560d1f51755d0370c701a703e339b6c269e0d18ab46fab2c53060010214151561034757fe5b61035f8261044c640100000000026401000000009004565b50505061048e565b6103838161047b640100000000026109a7176401000000009004565b151561041d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b8152602001807f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f81526020017f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000081525060400191505060405180910390fd5b60007f69bff8d33f8a81d44ad045cae8c2563876eaefa1bf1355c3840f96d03ef9dc2660010290508181555050565b60007f6f6d8d7f580c12385c0ffee3db0c8dd22f5ced916dd281b7afe571b5ea7bf38d60010290508181555050565b600080823b905060008111915050919050565b6109e68061049d6000396000f3fe608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063267822471461008d5780633659cfe6146100e45780634f1ef286146101355780635c60da1b146101ce57806377f50f97146102255780638f2839701461023c578063f851a4401461028d575b61008b6102e4565b005b34801561009957600080fd5b506100a26102fe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100f057600080fd5b506101336004803603602081101561010757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610393565b005b6101cc6004803603604081101561014b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561018857600080fd5b82018360208201111561019a57600080fd5b803590602001918460018302840111640100000000831117156101bc57600080fd5b90919293919293905050506103e8565b005b3480156101da57600080fd5b506101e36104c0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561023157600080fd5b5061023a610518565b005b34801561024857600080fd5b5061028b6004803603602081101561025f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105e5565b005b34801561029957600080fd5b506102a261063a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102ec610692565b6102fc6102f761076d565b61079e565b565b60006103086107c4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061037357506103446107f5565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15610387576103806107f5565b9050610390565b61038f6102e4565b5b90565b61039b6107c4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156103dc576103d781610826565b6103e5565b6103e46102e4565b5b50565b6103f06107c4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156104b25761042c83610826565b60008373ffffffffffffffffffffffffffffffffffffffff168383604051808383808284378083019250505092505050600060405180830381855af49150503d8060008114610497576040519150601f19603f3d011682016040523d82523d6000602084013e61049c565b606091505b505090508015156104ac57600080fd5b506104bb565b6104ba6102e4565b5b505050565b60006104ca6107c4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561050c5761050561076d565b9050610515565b6105146102e4565b5b90565b6105206107f5565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156105da5761055b6107f5565b73ffffffffffffffffffffffffffffffffffffffff166105796107c4565b73ffffffffffffffffffffffffffffffffffffffff167f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f60405160405180910390a36105cb6105c66107f5565b610875565b6105d560006108a4565b6105e3565b6105e26102e4565b5b565b6105ed6107c4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561062e57610629816108a4565b610637565b6106366102e4565b5b50565b60006106446107c4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156106865761067f6107c4565b905061068f565b61068e6102e4565b5b90565b61069a6107c4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610763576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e20667281526020017f6f6d207468652070726f78792061646d696e000000000000000000000000000081525060400191505060405180910390fd5b61076b6108d3565b565b6000807f69bff8d33f8a81d44ad045cae8c2563876eaefa1bf1355c3840f96d03ef9dc266001029050805491505090565b3660008037600080366000845af43d6000803e80600081146107bf573d6000f35b3d6000fd5b6000807f6f6d8d7f580c12385c0ffee3db0c8dd22f5ced916dd281b7afe571b5ea7bf38d6001029050805491505090565b6000807ffe6b8cc6ffc46560d1f51755d0370c701a703e339b6c269e0d18ab46fab2c5306001029050805491505090565b61082f816108d5565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60007f6f6d8d7f580c12385c0ffee3db0c8dd22f5ced916dd281b7afe571b5ea7bf38d60010290508181555050565b60007ffe6b8cc6ffc46560d1f51755d0370c701a703e339b6c269e0d18ab46fab2c53060010290508181555050565b565b6108de816109a7565b1515610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b8152602001807f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f81526020017f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000081525060400191505060405180910390fd5b60007f69bff8d33f8a81d44ad045cae8c2563876eaefa1bf1355c3840f96d03ef9dc2660010290508181555050565b600080823b90506000811191505091905056fea165627a7a72305820e33e4c4a97e6f8a6defbb928480b6ab3b47bb495a5d3baa49472f7964228d6b2002900000000000000000000000000000000000fe8503db73c68f1a1874eb9d86883000000000000000000000000fb7b7b40ac8a61f3783f14bb53b6f03c7b0ac5c400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000024c4d66de80000000000000000000000009001090a34cc3ffb5210ea0dda6c8b7dc73a8cdc00000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000fe8503db73c68f1a1874eb9d86883000000000000000000000000fb7b7b40ac8a61f3783f14bb53b6f03c7b0ac5c400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000024c4d66de80000000000000000000000009001090a34cc3ffb5210ea0dda6c8b7dc73a8cdc00000000000000000000000000000000000000000000000000000000"
}