{
  "address": "0x5d154c145db2ca90b8ab5e8fe3e716afa4ab7ff0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KyberUniswapReserve",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-14\n*/\n\npragma solidity 0.4.18;\n\n// File: contracts/ERC20Interface.sol\n\n// https://github.com/ethereum/EIPs/issues/20\ninterface ERC20 {\n    function totalSupply() public view returns (uint supply);\n    function balanceOf(address _owner) public view returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\n    function decimals() public view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n// File: contracts/KyberReserveInterface.sol\n\n/// @title Kyber Reserve contract\ninterface KyberReserveInterface {\n\n    function trade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        public\n        payable\n        returns(bool);\n\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\n}\n\n// File: contracts/Utils.sol\n\n/// @title Kyber constants contract\ncontract Utils {\n\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n    uint  constant internal PRECISION = (10**18);\n    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n    uint  constant internal MAX_DECIMALS = 18;\n    uint  constant internal ETH_DECIMALS = 18;\n    mapping(address=>uint) internal decimals;\n\n    function setDecimals(ERC20 token) internal {\n        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n        else decimals[token] = token.decimals();\n    }\n\n    function getDecimals(ERC20 token) internal view returns(uint) {\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n        uint tokenDecimals = decimals[token];\n        // technically, there might be token with decimals 0\n        // moreover, very possible that old tokens have decimals 0\n        // these tokens will just have higher gas fees.\n        if(tokenDecimals == 0) return token.decimals();\n\n        return tokenDecimals;\n    }\n\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(srcQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n        }\n    }\n\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(dstQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n        \n        //source quantity is rounded up. to avoid dest quantity being too low.\n        uint numerator;\n        uint denominator;\n        if (srcDecimals >= dstDecimals) {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n            denominator = rate;\n        } else {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty);\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n        }\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n    }\n}\n\n// File: contracts/Utils2.sol\n\ncontract Utils2 is Utils {\n\n    /// @dev get the balance of a user.\n    /// @param token The token type\n    /// @return The balance\n    function getBalance(ERC20 token, address user) public view returns(uint) {\n        if (token == ETH_TOKEN_ADDRESS)\n            return user.balance;\n        else\n            return token.balanceOf(user);\n    }\n\n    function getDecimalsSafe(ERC20 token) internal returns(uint) {\n\n        if (decimals[token] == 0) {\n            setDecimals(token);\n        }\n\n        return decimals[token];\n    }\n\n    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\n        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\n    }\n\n    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\n        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\n    }\n\n    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\n        internal pure returns(uint)\n    {\n        require(srcAmount <= MAX_QTY);\n        require(destAmount <= MAX_QTY);\n\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\n        }\n    }\n}\n\n// File: contracts/PermissionGroups.sol\n\ncontract PermissionGroups {\n\n    address public admin;\n    address public pendingAdmin;\n    mapping(address=>bool) internal operators;\n    mapping(address=>bool) internal alerters;\n    address[] internal operatorsGroup;\n    address[] internal alertersGroup;\n    uint constant internal MAX_GROUP_SIZE = 50;\n\n    function PermissionGroups() public {\n        admin = msg.sender;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin);\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(operators[msg.sender]);\n        _;\n    }\n\n    modifier onlyAlerter() {\n        require(alerters[msg.sender]);\n        _;\n    }\n\n    function getOperators () external view returns(address[]) {\n        return operatorsGroup;\n    }\n\n    function getAlerters () external view returns(address[]) {\n        return alertersGroup;\n    }\n\n    event TransferAdminPending(address pendingAdmin);\n\n    /**\n     * @dev Allows the current admin to set the pendingAdmin address.\n     * @param newAdmin The address to transfer ownership to.\n     */\n    function transferAdmin(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        TransferAdminPending(pendingAdmin);\n        pendingAdmin = newAdmin;\n    }\n\n    /**\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n     * @param newAdmin The address to transfer ownership to.\n     */\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        TransferAdminPending(newAdmin);\n        AdminClaimed(newAdmin, admin);\n        admin = newAdmin;\n    }\n\n    event AdminClaimed( address newAdmin, address previousAdmin);\n\n    /**\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\n     */\n    function claimAdmin() public {\n        require(pendingAdmin == msg.sender);\n        AdminClaimed(pendingAdmin, admin);\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n    }\n\n    event AlerterAdded (address newAlerter, bool isAdd);\n\n    function addAlerter(address newAlerter) public onlyAdmin {\n        require(!alerters[newAlerter]); // prevent duplicates.\n        require(alertersGroup.length < MAX_GROUP_SIZE);\n\n        AlerterAdded(newAlerter, true);\n        alerters[newAlerter] = true;\n        alertersGroup.push(newAlerter);\n    }\n\n    function removeAlerter (address alerter) public onlyAdmin {\n        require(alerters[alerter]);\n        alerters[alerter] = false;\n\n        for (uint i = 0; i < alertersGroup.length; ++i) {\n            if (alertersGroup[i] == alerter) {\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n                alertersGroup.length--;\n                AlerterAdded(alerter, false);\n                break;\n            }\n        }\n    }\n\n    event OperatorAdded(address newOperator, bool isAdd);\n\n    function addOperator(address newOperator) public onlyAdmin {\n        require(!operators[newOperator]); // prevent duplicates.\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\n\n        OperatorAdded(newOperator, true);\n        operators[newOperator] = true;\n        operatorsGroup.push(newOperator);\n    }\n\n    function removeOperator (address operator) public onlyAdmin {\n        require(operators[operator]);\n        operators[operator] = false;\n\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\n            if (operatorsGroup[i] == operator) {\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n                operatorsGroup.length -= 1;\n                OperatorAdded(operator, false);\n                break;\n            }\n        }\n    }\n}\n\n// File: contracts/Withdrawable.sol\n\n/**\n * @title Contracts that should be able to recover tokens or ethers\n * @author Ilan Doron\n * @dev This allows to recover any tokens or Ethers received in a contract.\n * This will prevent any accidental loss of tokens.\n */\ncontract Withdrawable is PermissionGroups {\n\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n\n    /**\n     * @dev Withdraw all ERC20 compatible tokens\n     * @param token ERC20 The address of the token contract\n     */\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n        require(token.transfer(sendTo, amount));\n        TokenWithdraw(token, amount, sendTo);\n    }\n\n    event EtherWithdraw(uint amount, address sendTo);\n\n    /**\n     * @dev Withdraw Ethers\n     */\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n        sendTo.transfer(amount);\n        EtherWithdraw(amount, sendTo);\n    }\n}\n\n// File: contracts/uniswap/KyberUniswapReserve.sol\n\ninterface UniswapExchange {\n    function ethToTokenSwapInput(\n        uint256 min_tokens,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256  tokens_bought);\n\n    function tokenToEthSwapInput(\n        uint256 tokens_sold,\n        uint256 min_eth,\n        uint256 deadline\n    )\n        external\n        returns (uint256  eth_bought);\n\n    function getEthToTokenInputPrice(\n        uint256 eth_sold\n    )\n        external\n        view\n        returns (uint256 tokens_bought);\n\n    function getTokenToEthInputPrice(\n        uint256 tokens_sold\n    )\n        external\n        view\n        returns (uint256 eth_bought);\n}\n\n\ninterface UniswapFactory {\n    function getExchange(address token) external view returns (address exchange);\n}\n\n\n/*\n * A reserve that connects to Uniswap.\n *\n * This reserve makes use of an internal inventory for locally filling orders\n * using the reserve's inventory when certain conditions are met.\n * Conditions are:\n * - After trading the inventory will remain within defined limits.\n * - Uniswap prices do not display internal arbitrage.\n * - Uniswap ask and bid prices meet minimum spread requirements.\n *\n * An additional premium may be added to the converted price for optional\n * promotions.\n */\ncontract KyberUniswapReserve is KyberReserveInterface, Withdrawable, Utils2 {\n    // Parts per 10000\n    uint public constant DEFAULT_FEE_BPS = 25;\n\n    UniswapFactory public uniswapFactory;\n    address public kyberNetwork;\n\n    uint public feeBps = DEFAULT_FEE_BPS;\n\n    // Uniswap exchange contract for every listed token\n    // token -> exchange\n    mapping (address => address) public tokenExchange;\n\n    // Internal inventory balance limits\n    // token -> limit\n    mapping (address => uint) public internalInventoryMin;\n    mapping (address => uint) public internalInventoryMax;\n\n    // Minimum spread in BPS required for using internal inventory\n    // token -> limit\n    mapping (address => uint) public internalActivationMinSpreadBps;\n\n    // Premium BPS added to internal price (making it better).\n    // token -> limit\n    mapping (address => uint) public internalPricePremiumBps;\n\n    bool public tradeEnabled = true;\n\n    /**\n        Constructor\n    */\n    function KyberUniswapReserve(\n        UniswapFactory _uniswapFactory,\n        address _admin,\n        address _kyberNetwork\n    )\n        public\n    {\n        require(address(_uniswapFactory) != 0);\n        require(_admin != 0);\n        require(_kyberNetwork != 0);\n\n        uniswapFactory = _uniswapFactory;\n        admin = _admin;\n        kyberNetwork = _kyberNetwork;\n    }\n\n    function() public payable {\n        // anyone can deposit ether\n    }\n\n    /**\n        Returns dest quantity / source quantity.\n        Last bit of the rate indicates whether to use internal inventory:\n          0 - use uniswap\n          1 - use internal inventory\n    */\n    function getConversionRate(\n        ERC20 src,\n        ERC20 dest,\n        uint srcQty,\n        uint blockNumber\n    )\n        public\n        view\n        returns(uint)\n    {\n        // This makes the UNUSED warning go away.\n        blockNumber;\n        if (!isValidTokens(src, dest)) return 0;\n        if (!tradeEnabled) return 0;\n        if (srcQty == 0) return 0;\n\n        ERC20 token;\n        if (src == ETH_TOKEN_ADDRESS) {\n            token = dest;\n        } else if (dest == ETH_TOKEN_ADDRESS) {\n            token = src;\n        } else {\n            // Should never arrive here - isValidTokens requires one side to be ETH\n            revert();\n        }\n\n        uint convertedQuantity;\n        uint rateSrcDest;\n        uint rateDestSrc;\n        (convertedQuantity, rateSrcDest) = calcUniswapConversion(src, dest, srcQty);\n        (, rateDestSrc) = calcUniswapConversion(dest, src, convertedQuantity);\n\n        uint quantityWithPremium = addPremium(token, convertedQuantity);\n\n        bool useInternalInventory = shouldUseInternalInventory(\n            src, /* srcToken */\n            srcQty, /* srcAmount */\n            dest, /* destToken */\n            quantityWithPremium, /* destAmount */\n            rateSrcDest, /* rateSrcDest */\n            rateDestSrc /* rateDestSrc */\n        );\n\n        uint rate;\n        if (useInternalInventory) {\n            // If using internal inventory add premium to converted quantity\n            rate = calcRateFromQty(\n                srcQty, /* srcAmount */\n                quantityWithPremium, /* destAmount */\n                getDecimals(src), /* srcDecimals */\n                getDecimals(dest) /* dstDecimals */\n            );\n        } else {\n            // Use rate calculated from uniswap quantities after fees\n            rate = rateSrcDest;\n        }\n        return applyInternalInventoryHintToRate(rate, useInternalInventory);\n    }\n\n    function applyInternalInventoryHintToRate(\n        uint rate,\n        bool useInternalInventory\n    )\n        internal\n        pure\n        returns(uint)\n    {\n        return rate % 2 == (useInternalInventory ? 1 : 0)\n            ? rate\n            : rate - 1;\n    }\n\n\n    event TradeExecute(\n        address indexed sender,\n        address src,\n        uint srcAmount,\n        address destToken,\n        uint destAmount,\n        address destAddress,\n        bool useInternalInventory\n    );\n\n    /**\n      conversionRate: expected conversion rate should be >= this value.\n     */\n    function trade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        public\n        payable\n        returns(bool)\n    {\n        require(tradeEnabled);\n        require(msg.sender == kyberNetwork);\n        require(isValidTokens(srcToken, destToken));\n\n        if (validate) {\n            require(conversionRate > 0);\n            if (srcToken == ETH_TOKEN_ADDRESS)\n                require(msg.value == srcAmount);\n            else\n                require(msg.value == 0);\n        }\n\n        // Making sure srcAmount has been transfered to the reserve.\n        // If srcToken is ETH the value has already been transfered by calling\n        // the function.\n        if (srcToken != ETH_TOKEN_ADDRESS)\n            require(srcToken.transferFrom(msg.sender, address(this), srcAmount));\n\n        uint expectedDestAmount = calcDestAmount(\n            srcToken, /* src */\n            destToken, /* dest */\n            srcAmount, /* srcAmount */\n            conversionRate /* rate */\n        );\n\n        bool useInternalInventory = conversionRate % 2 == 1;\n\n        uint destAmount;\n        UniswapExchange exchange;\n        if (srcToken == ETH_TOKEN_ADDRESS) {\n            if (!useInternalInventory) {\n                // Deduct fees (in ETH) before converting\n                uint quantity = deductFee(srcAmount);\n                exchange = UniswapExchange(tokenExchange[address(destToken)]);\n                destAmount = exchange.ethToTokenSwapInput.value(quantity)(\n                    1, /* min_tokens: uniswap requires it to be > 0 */\n                    2 ** 255 /* deadline */\n                );\n                require(destAmount >= expectedDestAmount);\n            }\n\n            // Transfer user-expected dest amount\n            require(destToken.transfer(destAddress, expectedDestAmount));\n        } else {\n            if (!useInternalInventory) {\n                exchange = UniswapExchange(tokenExchange[address(srcToken)]);\n                destAmount = exchange.tokenToEthSwapInput(\n                    srcAmount,\n                    1, /* min_eth: uniswap requires it to be > 0 */\n                    2 ** 255 /* deadline */\n                );\n                // Deduct fees (in ETH) after converting\n                destAmount = deductFee(destAmount);\n                require(destAmount >= expectedDestAmount);\n            }\n\n            // Transfer user-expected dest amount\n            destAddress.transfer(expectedDestAmount);\n        }\n\n        TradeExecute(\n            msg.sender, /* sender */\n            srcToken, /* src */\n            srcAmount, /* srcAmount */\n            destToken, /* destToken */\n            expectedDestAmount, /* destAmount */\n            destAddress, /* destAddress */\n            useInternalInventory /* useInternalInventory */\n        );\n        return true;\n    }\n\n    event FeeUpdated(\n        uint bps\n    );\n\n    function setFee(\n        uint bps\n    )\n        public\n        onlyAdmin\n    {\n        require(bps <= 10000);\n\n        feeBps = bps;\n\n        FeeUpdated(bps);\n    }\n\n    event InternalActivationConfigUpdated(\n        ERC20 token,\n        uint minSpreadBps,\n        uint premiumBps\n    );\n\n    function setInternalActivationConfig(\n        ERC20 token,\n        uint minSpreadBps,\n        uint premiumBps\n    )\n        public\n        onlyAdmin\n    {\n        require(tokenExchange[address(token)] != address(0));\n        require(minSpreadBps <= 1000); // min spread <= 10%\n        require(premiumBps <= 500); // premium <= 5%\n\n        internalActivationMinSpreadBps[address(token)] = minSpreadBps;\n        internalPricePremiumBps[address(token)] = premiumBps;\n\n        InternalActivationConfigUpdated(token, minSpreadBps, premiumBps);\n    }\n\n    event InternalInventoryLimitsUpdated(\n        ERC20 token,\n        uint minBalance,\n        uint maxBalance\n    );\n\n    function setInternalInventoryLimits(\n        ERC20 token,\n        uint minBalance,\n        uint maxBalance\n    )\n        public\n        onlyOperator\n    {\n        require(tokenExchange[address(token)] != address(0));\n\n        internalInventoryMin[address(token)] = minBalance;\n        internalInventoryMax[address(token)] = maxBalance;\n\n        InternalInventoryLimitsUpdated(token, minBalance, maxBalance);\n    }\n\n    event TokenListed(\n        ERC20 token,\n        UniswapExchange exchange\n    );\n\n    function listToken(ERC20 token)\n        public\n        onlyAdmin\n    {\n        require(address(token) != 0);\n\n        UniswapExchange uniswapExchange = UniswapExchange(\n            uniswapFactory.getExchange(token)\n        );\n        tokenExchange[address(token)] = address(uniswapExchange);\n        setDecimals(token);\n\n        require(token.approve(uniswapExchange, 2 ** 255));\n\n        // internal inventory disabled by default\n        internalInventoryMin[address(token)] = 2 ** 255;\n        internalInventoryMax[address(token)] = 0;\n        internalActivationMinSpreadBps[address(token)] = 0;\n        internalPricePremiumBps[address(token)] = 0;\n\n        TokenListed(token, uniswapExchange);\n    }\n\n    event TokenDelisted(ERC20 token);\n\n    function delistToken(ERC20 token)\n        public\n        onlyAdmin\n    {\n        require(tokenExchange[address(token)] != address(0));\n\n        delete tokenExchange[address(token)];\n        delete internalInventoryMin[address(token)];\n        delete internalInventoryMax[address(token)];\n        delete internalActivationMinSpreadBps[address(token)];\n        delete internalPricePremiumBps[address(token)];\n\n        TokenDelisted(token);\n    }\n\n    function isValidTokens(\n        ERC20 src,\n        ERC20 dest\n    )\n        public\n        view\n        returns(bool)\n    {\n        return (\n            (\n                src == ETH_TOKEN_ADDRESS &&\n                tokenExchange[address(dest)] != address(0)\n            ) ||\n            (\n                tokenExchange[address(src)] != address(0) &&\n                dest == ETH_TOKEN_ADDRESS\n            )\n        );\n    }\n\n    event TradeEnabled(\n        bool enable\n    );\n\n    function enableTrade()\n        public\n        onlyAdmin\n        returns(bool)\n    {\n        tradeEnabled = true;\n        TradeEnabled(true);\n        return true;\n    }\n\n    function disableTrade()\n        public\n        onlyAlerter\n        returns(bool)\n    {\n        tradeEnabled = false;\n        TradeEnabled(false);\n        return true;\n    }\n\n    event KyberNetworkSet(\n        address kyberNetwork\n    );\n\n    function setKyberNetwork(\n        address _kyberNetwork\n    )\n        public\n        onlyAdmin\n    {\n        require(_kyberNetwork != 0);\n        kyberNetwork = _kyberNetwork;\n        KyberNetworkSet(kyberNetwork);\n    }\n\n    /*\n     * Uses amounts and rates to check if the reserve's internal inventory can\n     * be used directly.\n     *\n     * rateEthToToken and rateTokenToEth are in kyber rate format meaning\n     * rate as numerator and 1e18 as denominator.\n     */\n    function shouldUseInternalInventory(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        uint destAmount,\n        uint rateSrcDest,\n        uint rateDestSrc\n    )\n        public\n        view\n        returns(bool)\n    {\n        require(srcAmount < MAX_QTY);\n        require(destAmount < MAX_QTY);\n\n        // Check for internal inventory balance limitations\n        ERC20 token;\n        if (srcToken == ETH_TOKEN_ADDRESS) {\n            token = destToken;\n            uint tokenBalance = token.balanceOf(this);\n            if (\n                tokenBalance < destAmount ||\n                tokenBalance - destAmount < internalInventoryMin[token]\n            ) {\n                return false;\n            }\n        } else {\n            token = srcToken;\n            if (this.balance < destAmount) return false;\n            if (token.balanceOf(this) + srcAmount > internalInventoryMax[token]) {\n                return false;\n            }\n        }\n\n        uint normalizedDestSrc = 10 ** 36 / rateDestSrc;\n\n        // Check for arbitrage\n        if (rateSrcDest > normalizedDestSrc) return false;\n\n        uint activationSpread = internalActivationMinSpreadBps[token];\n        uint spread = uint(calculateSpreadBps(normalizedDestSrc, rateSrcDest));\n        return spread >= activationSpread;\n    }\n\n    /*\n     * Spread calculation is (ask - bid) / ((ask + bid) / 2).\n     * We multiply by 10000 to get result in BPS.\n     *\n     * Note: if askRate > bidRate result will be negative indicating\n     * internal arbitrage.\n     */\n    function calculateSpreadBps(\n        uint _askRate,\n        uint _bidRate\n    )\n        public\n        pure\n        returns(int)\n    {\n        int askRate = int(_askRate);\n        int bidRate = int(_bidRate);\n        return 10000 * 2 * (askRate - bidRate) / (askRate + bidRate);\n    }\n\n    function deductFee(\n        uint amount\n    )\n        public\n        view\n        returns(uint)\n    {\n        return amount * (10000 - feeBps) / 10000;\n    }\n\n    function addPremium(\n        ERC20 token,\n        uint amount\n    )\n        public\n        view\n        returns(uint)\n    {\n        require(amount <= MAX_QTY);\n        return amount * (10000 + internalPricePremiumBps[token]) / 10000;\n    }\n\n    function calcUniswapConversion(\n        ERC20 src,\n        ERC20 dest,\n        uint srcQty\n    )\n        internal\n        view\n        returns(uint destQty, uint rate)\n    {\n        UniswapExchange exchange;\n        if (src == ETH_TOKEN_ADDRESS) {\n            exchange = UniswapExchange(tokenExchange[address(dest)]);\n            destQty = exchange.getEthToTokenInputPrice(\n                deductFee(srcQty)\n            );\n        } else {\n            exchange = UniswapExchange(tokenExchange[address(src)]);\n            destQty = deductFee(\n                exchange.getTokenToEthInputPrice(srcQty)\n            );\n        }\n\n        rate = calcRateFromQty(\n            srcQty, /* srcAmount */\n            destQty, /* destAmount */\n            getDecimals(src), /* srcDecimals */\n            getDecimals(dest) /* dstDecimals */\n        );\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d950000000000000000000000002259099897afaf3813fef3284b91d2b227b66ad400000000000000000000000065897adcba42dcca5dd162c647b1cc3e31238490"
}