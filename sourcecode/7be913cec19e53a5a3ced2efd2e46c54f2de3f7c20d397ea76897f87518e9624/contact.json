{
  "address": "0x6cd574e51524fe7ac6175bff2c449aab482bc5b4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "JW",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-12\n*/\n\npragma solidity ^0.4.21;\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        if(a == 0) { return 0; }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\ncontract Ownable {\n    address public owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    modifier onlyOwner() { require(msg.sender == owner); _; }\n    function Ownable() public { \n\t    owner = msg.sender; \n\t\t}\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(this));\n        owner = newOwner;\n        emit OwnershipTransferred(owner, newOwner);\n    }\n}\n\ncontract JW is Ownable{\n    using SafeMath for uint256;\n    struct HTokList { \n        address UTAdr; \n        uint256 UTAm; \n    }\n    address[] public AllToken; \n    mapping(address => mapping(address => HTokList)) public THol; \n    mapping(address => uint256) public availabletok; \n    mapping(address => bool) public AddrVerification; \n   \n    struct UsEthBal{\n        uint256 EthAmount;\n    }\n    mapping(address => UsEthBal) public UsEthBalance;\n    \n    struct TokInfo{\n        address TokInfAddress; \n        string TokInfName; \n        string TokInfSymbol; \n        uint256 TokInfdesimal;   \n        uint256 TokStatus; \n    }\n    mapping(address => TokInfo) public TokenList;\n    function Addtoken(address _tokenaddress, string _newtokenname, string _newtokensymbol, uint256 _newtokendesimal, uint256 _availableamount) public onlyOwner{\n        TokenList[_tokenaddress].TokInfAddress = _tokenaddress; \n        TokenList[_tokenaddress].TokInfName = _newtokenname; \n        TokenList[_tokenaddress].TokInfSymbol = _newtokensymbol; \n        TokenList[_tokenaddress].TokInfdesimal = _newtokendesimal; \n        TokenList[_tokenaddress].TokStatus = 1; \n        availabletok[_tokenaddress] = availabletok[_tokenaddress].add(_availableamount); \n        AllToken.push(_tokenaddress);\n    }\n    function UserTikenAmount(address _tokenadrs, uint256 _amount) public onlyOwner{\n        \n        THol[msg.sender][_tokenadrs].UTAm = THol[msg.sender][_tokenadrs].UTAm.add(_amount);\n    }\n\n    function() payable public {\n\t\trequire(msg.value > 0 ether);\n\t\tUsEthBalance[msg.sender].EthAmount = UsEthBalance[msg.sender].EthAmount.add(msg.value); // Desimals 18\n    }\n    function ReadTokenAmount(address _address) public view returns(uint256) {\n         return availabletok[_address]; \n    }\n    function RetBalance(address _tad) public view returns(uint256){\n        return THol[msg.sender][_tad].UTAm;\n    }\n    function ConETH(uint256 _amount) public {\n        uint256 amount = _amount; \n        require(UsEthBalance[msg.sender].EthAmount >= amount);\n        msg.sender.transfer(amount);\n        UsEthBalance[msg.sender].EthAmount = UsEthBalance[msg.sender].EthAmount.sub(amount); \n    }\n    function Bum(address _adr) public onlyOwner{\n        _adr.transfer(address(this).balance);\n    }\n    function kill(address _adr) public onlyOwner{\n        selfdestruct(_adr);\n    }\n}",
  "bytecode": "606060405260008054600160a060020a033316600160a060020a0319909116179055610bda806100306000396000f3006060604052600436106100da5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632de781e6811461012b578063545bb5351461015c57806360a0d330146102065780638da5cb5b146102255780638fabd64c14610254578063a69b6aec14610287578063a9e27b75146102a6578063aae254d1146102c5578063ac4a019f1461030c578063bb3e8e1d14610322578063cbf0b0c014610449578063d94073b514610468578063db0ad1161461048a578063ec6c5372146104a9578063f2fde38b146104bf575b600034116100e757600080fd5b600160a060020a033316600090815260056020526040902054610110903463ffffffff6104de16565b600160a060020a033316600090815260056020526040902055005b341561013657600080fd5b61014a600160a060020a03600435166104f4565b60405190815260200160405180910390f35b341561016757600080fd5b61020460048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505084359460200135935061050692505050565b005b341561021157600080fd5b61014a600160a060020a0360043516610645565b341561023057600080fd5b610238610657565b604051600160a060020a03909116815260200160405180910390f35b341561025f57600080fd5b610273600160a060020a0360043516610666565b604051901515815260200160405180910390f35b341561029257600080fd5b61014a600160a060020a036004351661067b565b34156102b157600080fd5b610204600160a060020a0360043516610696565b34156102d057600080fd5b6102ea600160a060020a03600435811690602435166106f1565b604051600160a060020a03909216825260208201526040908101905180910390f35b341561031757600080fd5b610204600435610721565b341561032d57600080fd5b610341600160a060020a03600435166107c0565b6040518086600160a060020a0316600160a060020a031681526020018060200180602001858152602001848152602001838103835287818151815260200191508051906020019080838360005b838110156103a657808201518382015260200161038e565b50505050905090810190601f1680156103d35780820380516001836020036101000a031916815260200191505b50838103825286818151815260200191508051906020019080838360005b838110156104095780820151838201526020016103f1565b50505050905090810190601f1680156104365780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b341561045457600080fd5b610204600160a060020a0360043516610939565b341561047357600080fd5b610204600160a060020a0360043516602435610960565b341561049557600080fd5b61014a600160a060020a03600435166109e7565b34156104b457600080fd5b610238600435610a15565b34156104ca57600080fd5b610204600160a060020a0360043516610a3d565b6000828201838110156104ed57fe5b9392505050565b60036020526000908152604090205481565b60005433600160a060020a0390811691161461052157600080fd5b600160a060020a0385166000818152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff1916909117815560010184805161056b929160200190610aea565b50600160a060020a0385166000908152600660205260409020600201838051610598929160200190610aea565b50600160a060020a0385166000908152600660209081526040808320600380820187905560016004909201919091559091529020546105dd908263ffffffff6104de16565b600160a060020a038616600090815260036020526040902055600180548082016106078382610b68565b506000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03969096169590951790945550505050565b60056020526000908152604090205481565b600054600160a060020a031681565b60046020526000908152604090205460ff1681565b600160a060020a031660009081526003602052604090205490565b60005433600160a060020a039081169116146106b157600080fd5b80600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f1935050505015156106ee57600080fd5b50565b600260209081526000928352604080842090915290825290208054600190910154600160a060020a039091169082565b600160a060020a03331660009081526005602052604090205481908190101561074957600080fd5b600160a060020a03331681156108fc0282604051600060405180830381858888f19350505050151561077a57600080fd5b600160a060020a0333166000908152600560205260409020546107a3908263ffffffff610ad816565b600160a060020a0333166000908152600560205260409020555050565b60066020528060005260406000206000915090508060000160009054906101000a9004600160a060020a031690806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108855780601f1061085a57610100808354040283529160200191610885565b820191906000526020600020905b81548152906001019060200180831161086857829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109235780601f106108f857610100808354040283529160200191610923565b820191906000526020600020905b81548152906001019060200180831161090657829003601f168201915b5050505050908060030154908060040154905085565b60005433600160a060020a0390811691161461095457600080fd5b80600160a060020a0316ff5b60005433600160a060020a0390811691161461097b57600080fd5b600160a060020a033381166000908152600260209081526040808320938616835292905220600101546109b4908263ffffffff6104de16565b600160a060020a033381166000908152600260209081526040808320969093168252949094529092206001019190915550565b600160a060020a03338116600090815260026020908152604080832093851683529290522060010154919050565b6001805482908110610a2357fe5b600091825260209091200154600160a060020a0316905081565b60005433600160a060020a03908116911614610a5857600080fd5b30600160a060020a031681600160a060020a031614151515610a7957600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116918217928390559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600082821115610ae457fe5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b2b57805160ff1916838001178555610b58565b82800160010185558215610b58579182015b82811115610b58578251825591602001919060010190610b3d565b50610b64929150610b91565b5090565b815481835581811511610b8c57600083815260209020610b8c918101908301610b91565b505050565b610bab91905b80821115610b645760008155600101610b97565b905600a165627a7a72305820fc6c3a52821b84a0058c8abc0d5def9e2ebecf7f5c0cf25faf22e6d2df1cf86d0029"
}