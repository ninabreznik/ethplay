{
  "address": "0xe74d3bfbd4cb4bcfdeaea79f6c47b13feb6a073f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "COTCrowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-01\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n\n\n\n\n\n\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n * behavior.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  // The token being sold\n  ERC20 public token;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n  // 1 wei will give you 1 unit, or 0.001 TOK.\n  uint256 public rate;\n\n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param _rate Number of token units a buyer gets per wei\n   * @param _wallet Address where collected funds will be forwarded to\n   * @param _token Address of the token being sold\n   */\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n    require(_rate > 0);\n    require(_wallet != address(0));\n    require(_token != address(0));\n\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method: \n   *   super._preValidatePurchase(_beneficiary, _weiAmount);\n   *   require(weiRaised.add(_weiAmount) <= cap);\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    token.safeTransfer(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount)\n    internal view returns (uint256)\n  {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n\n\n/**\n * @title MintedCrowdsale\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n * Token ownership should be transferred to MintedCrowdsale for minting.\n */\ncontract MintedCrowdsale is Crowdsale {\n\n  /**\n   * @dev Overrides delivery by minting tokens upon purchase.\n   * @param _beneficiary Token purchaser\n   * @param _tokenAmount Number of tokens to be minted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    // Potentially dangerous assumption about the type of the token.\n    require(MintableToken(address(token)).mint(_beneficiary, _tokenAmount));\n  }\n}\n\n\n\n\n\n\n\n\n/**\n * @title CappedCrowdsale\n * @dev Crowdsale with a limit for total contributions.\n */\ncontract CappedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public cap;\n\n  /**\n   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n   * @param _cap Max amount of wei to be contributed\n   */\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Checks whether the cap has been reached.\n   * @return Whether the cap was reached\n   */\n  function capReached() public view returns (bool) {\n    return weiRaised >= cap;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n    require(weiRaised.add(_weiAmount) <= cap);\n  }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n\ncontract COTCrowdsale is Crowdsale, MintedCrowdsale, CappedCrowdsale, Ownable{\n\n using SafeMath for uint256;\n\n uint256 private limit;\n uint256 private maxLimit;\n uint256 private minLimit;\n uint256 private limitAmount;\n uint256 private percent;\n uint256 private ICOrate;\n uint256 private limitTime;\n bool    private isSetTime = false;\n bool    private isCallPauseTokens = false;\n bool    private isSetLimitAmount = false;\n uint256 private timeForISL;\n bool    private isSetISLTime = false;\n\n constructor(\n    uint256 _rate,\n    address _wallet,\n    ERC20 _token,\n    uint256 _limit,\n    uint256 _cap,\n    uint256 _percent,\n    uint256 _ICOrate,\n    uint256 _limitTime,\n    uint256 _timeForISL\n  )\n  Crowdsale(_rate, _wallet, _token)\n  CappedCrowdsale(_cap)\n  public\n  {\n    maxLimit = _limit;\n    limit = _limit.div(5);\n    minLimit = _limit.div(5);\n    limitAmount = _limit.div(10).div(5);\n    percent = _percent;\n    ICOrate = _ICOrate;\n    limitTime = _limitTime;\n    timeForISL = _timeForISL;\n  }\n\n  /*\n    @dev Owner can reduce bonus percent 25% by default\n    each call reduces of 1%\n  */\n\n  function ReduceRate()\n    public\n    onlyOwner()\n  {\n    require(rate > ICOrate);\n    uint256 totalPercent = ICOrate.div(100).mul(percent);\n    rate = ICOrate.add(totalPercent);\n    if (percent != 0) {\n    percent = percent.sub(1);\n    }\n  }\n\n  /*\n   @dev Owner can reduce limit\n   After call this function owner can not set new limit more than\n   value of parametr previous call\n */\n\n function ReduceMaxLimit(uint256 newlLimit)\n   public\n   onlyOwner()\n {\n   uint256 totalLimit = maxLimit;\n   require(newlLimit >= minLimit);\n   require(newlLimit <= totalLimit);\n   maxLimit = newlLimit;\n }\n\n  /*\n    @dev Owner can change time limit for call ISL()\n    @param Unix Date\n  */\n\n  function SetMintTimeLimit(uint256 newTime)\n    public\n    onlyOwner()\n  {\n    require(!isSetTime);\n    limitTime = newTime;\n  }\n\n  /*\n    @dev Owner can block SetMintTimeLimit() FOREVER\n  */\n\n  function blockSetMintTimeLimit()\n    public\n    onlyOwner()\n  {\n    isSetTime = true;\n  }\n\n  /*\n    @dev View status about the possibility of calling of SetMintTimeLimit function\n  */\n\n  function isblockSetMintTimeLimit()\n    public\n    view\n    returns (bool)\n  {\n    return isSetTime;\n  }\n\n\n  /*\n    @dev Owner can add 2B (by Default) to limit per 3 month,\n    100B maximum tokens limit (can be reduce via ReduceMaxLimit)\n  */\n\n  function ISL()\n    public\n    onlyOwner()\n  {\n    require(now >= limitTime);\n    require(limit < maxLimit);\n    limit = limit.add(limitAmount);\n    limitTime = now + timeForISL;\n  }\n\n  /*\n    @dev Owner can change time ISL for next call\n    @param time in seconds\n  */\n\n  function SetISLTime(uint256 newTime)\n    public\n    onlyOwner()\n  {\n    require(!isSetISLTime);\n    timeForISL = newTime;\n  }\n\n  /*\n    @dev Owner can block SetISLTime\n  */\n\n  function blockSetISLTime()\n    public\n    onlyOwner()\n  {\n    isSetISLTime = true;\n    limitAmount = minLimit.div(10);\n  }\n\n  /*\n    @dev View status about the possibility of calling of SetISLTime function\n  */\n\n  function isblockSetISLTime()\n    public\n    view\n    returns (bool)\n  {\n    return isSetISLTime;\n  }\n\n  /*\n    @dev View value of timeForISL return time in secods\n  */\n\n  function ReturnISLDays()\n    public\n    view\n    returns (uint256)\n  {\n    return timeForISL;\n  }\n\n  /*\n    @dev Owner can change Limit amount for ISL\n    can NOT set more that 100B anyway\n  */\n\n  function SetLimitAmount(uint256 amount)\n    public\n    onlyOwner()\n  {\n   require(!isSetLimitAmount);\n   uint256 max = maxLimit;\n   uint256 total = limit;\n   require(max > amount);\n\n   if(total.add(amount) > max){\n    amount = 0;\n   }\n   require(amount > 0);\n   limitAmount = amount;\n  }\n\n  /*\n    @dev Owner can block SetLimitAmount\n    set 2B by default after block\n  */\n\n  function blockSetLimitAmount()\n    public\n    onlyOwner()\n  {\n    isSetLimitAmount = true;\n    limitAmount = minLimit.div(10);\n  }\n\n  /*\n    @dev View status about the possibility of calling of SetLimitAmount function\n  */\n\n  function isblockSetLimitAmount()\n    public\n    view\n    returns (bool)\n  {\n    return isSetLimitAmount;\n  }\n\n  /*\n    @dev Owner can mint new Tokens up to a certain limit\n    @param _beneficiary - receiver\n    @param _tokenAmount - amount\n  */\n\n  function MintLimit(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    public\n    onlyOwner()\n  {\n\n  uint256 _limit = ReturnLimit();\n\n  uint256 total = token.totalSupply();\n  require(total < _limit);\n\n  if(_tokenAmount.add(total) > _limit ){\n    _tokenAmount = 0;\n  }\n  require(_tokenAmount > 0);\n  require(MintableToken(address(token)).mint(_beneficiary, _tokenAmount));\n  }\n\n  /*\n    @dev Get amount of total limit for MintLimit function\n  */\n\n  function ReturnLimit()\n    public\n    view\n    returns (uint256)\n  {\n    return limit;\n  }\n\n  /*\n    @dev View amount of minLimit\n  */\n\n  function ReturnMinLimit()\n    public\n    view\n    returns (uint256)\n  {\n    return minLimit;\n  }\n\n  /*\n    @dev View amount of maxLimit\n  */\n\n  function ReturnMaxLimit()\n    public\n    view\n    returns (uint256)\n  {\n    return maxLimit;\n  }\n\n  /*\n    @dev return unix Date time when ISL can be call\n  */\n\n  function iSLDate()\n    public\n    view\n    returns (uint256)\n  {\n    return limitTime;\n  }\n\n  /*\n    @dev owner sale can pause Token\n    only through contract sale\n  */\n\n  function pauseTokens()\n    public\n    onlyOwner()\n  {\n    require(!isCallPauseTokens);\n    PausableToken(address(token)).pause();\n  }\n\n  /*\n    @dev owner sale can unpause Token\n    only through contract sale\n  */\n\n  function unpauseTokens()\n    public\n    onlyOwner()\n  {\n    PausableToken(address(token)).unpause();\n  }\n\n  /*\n    @dev Owner can block call pauseTokens FOREVER\n  */\n\n  function blockCallPauseTokens()\n    public\n    onlyOwner()\n  {\n    isCallPauseTokens = true;\n  }\n\n  /*\n    @dev view status about the possibility of calling pauseTokens()\n  */\n\n  function isblockCallPauseTokens()\n    public\n    view\n    returns (bool)\n  {\n    return isCallPauseTokens;\n  }\n\n  /*\n    @dev owner sale can finish mint FOREVER\n  */\n\n  function finishMint()\n    public\n    onlyOwner()\n  {\n    MintableToken(address(token)).finishMinting();\n  }\n\n}",
  "bytecode": "6080604052600d805462ffffff19169055600f805460ff191690553480156200002757600080fd5b50604051610120806200107b83398101604090815281516020830151918301516060840151608085015160a086015160c087015160e08801516101009098015195979495939492939192909184898989600083116200008557600080fd5b600160a060020a03821615156200009b57600080fd5b600160a060020a0381161515620000b157600080fd5b60029290925560018054600160a060020a03928316600160a060020a031991821617909155600080549290931691161781558111620000ef57600080fd5b60045560058054600160a060020a0319163317815560078790556200012490879064010000000062000cf56200019c82021704565b6006556200014286600564010000000062000cf56200019c82021704565b6008556200017b60056200016688600a64010000000062000cf56200019c82021704565b9064010000000062000cf56200019c82021704565b600955600a93909355600b91909155600c55600e5550620001b29350505050565b60008183811515620001aa57fe5b049392505050565b610eb980620001c26000396000f3006080604052600436106101875763ffffffff60e060020a6000350416630f7da56a81146101925780631f7ea074146101b957806322fa7cdb146101d157806323466e06146101e95780632c4e722e14610201578063355274ea146102165780634042b66f1461022b57806345a3b588146102405780634ead4395146102695780634f93594514610281578063521eb2731461029657806361aab82a146102c75780636bd9290a146102dc57806370d1fbc1146102f1578063715018a614610306578063788d25561461031b5780637a34abfe1461033f5780638cb8a866146103545780638da5cb5b14610369578063991524461461037e5780639c49eefd14610393578063a1d8ab33146103a8578063a417357c146103bd578063abe7691e146103d2578063b646eeef146103e7578063dfb81a9c146103fc578063e4cc18be14610411578063e5e231dd14610426578063ec8ac4d81461043b578063ed0722801461044f578063f279c9e014610464578063f2fde38b14610479578063fc0c546a1461049a575b610190336104af565b005b34801561019e57600080fd5b506101a7610551565b60408051918252519081900360200190f35b3480156101c557600080fd5b50610190600435610557565b3480156101dd57600080fd5b506101906004356105cd565b3480156101f557600080fd5b5061019060043561060d565b34801561020d57600080fd5b506101a7610639565b34801561022257600080fd5b506101a761063f565b34801561023757600080fd5b506101a7610645565b34801561024c57600080fd5b5061025561064b565b604080519115158252519081900360200190f35b34801561027557600080fd5b50610190600435610654565b34801561028d57600080fd5b50610255610680565b3480156102a257600080fd5b506102ab61068b565b60408051600160a060020a039092168252519081900360200190f35b3480156102d357600080fd5b506101a761069a565b3480156102e857600080fd5b506101906106a0565b3480156102fd57600080fd5b506102556106dd565b34801561031257600080fd5b506101906106e6565b34801561032757600080fd5b50610190600160a060020a0360043516602435610754565b34801561034b57600080fd5b506101906108de565b34801561036057600080fd5b5061025561091a565b34801561037557600080fd5b506102ab610929565b34801561038a57600080fd5b506101a7610938565b34801561039f57600080fd5b506101a761093e565b3480156103b457600080fd5b50610190610944565b3480156103c957600080fd5b5061019061096a565b3480156103de57600080fd5b506101a76109ef565b3480156103f357600080fd5b506102556109f5565b34801561040857600080fd5b50610190610a03565b34801561041d57600080fd5b50610190610a91565b34801561043257600080fd5b50610190610b28565b610190600160a060020a03600435166104af565b34801561045b57600080fd5b50610190610bae565b34801561047057600080fd5b50610190610bd6565b34801561048557600080fd5b50610190600160a060020a0360043516610c2e565b3480156104a657600080fd5b506102ab610c4e565b3460006104bc8383610c5d565b6104c582610c88565b6003549091506104db908363ffffffff610ca516565b6003556104e88382610cb2565b60408051838152602081018390528151600160a060020a0386169233927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18929081900390910190a361053a8383610b24565b610542610cbc565b61054c8383610b24565b505050565b60085490565b6005546000908190600160a060020a0316331461057357600080fd5b600d5462010000900460ff161561058957600080fd5b505060075460065482821161059d57600080fd5b816105ae828563ffffffff610ca516565b11156105b957600092505b600083116105c657600080fd5b5050600955565b600554600090600160a060020a031633146105e757600080fd5b506007546008548210156105fa57600080fd5b8082111561060757600080fd5b50600755565b600554600160a060020a0316331461062457600080fd5b600d5460ff161561063457600080fd5b600c55565b60025481565b60045481565b60035481565b600f5460ff1690565b600554600160a060020a0316331461066b57600080fd5b600f5460ff161561067b57600080fd5b600e55565b600454600354101590565b600154600160a060020a031681565b600c5490565b600554600160a060020a031633146106b757600080fd5b600f805460ff191660011790556008546106d890600a63ffffffff610cf516565b600955565b600d5460ff1690565b600554600160a060020a031633146106fd57600080fd5b600554604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26005805473ffffffffffffffffffffffffffffffffffffffff19169055565b6005546000908190600160a060020a0316331461077057600080fd5b61077861093e565b91506000809054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156107cc57600080fd5b505af11580156107e0573d6000803e3d6000fd5b505050506040513d60208110156107f657600080fd5b5051905081811061080657600080fd5b81610817848363ffffffff610ca516565b111561082257600092505b6000831161082f57600080fd5b60008054604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03888116600483015260248201889052915191909216926340c10f1992604480820193602093909283900390910190829087803b1580156108a157600080fd5b505af11580156108b5573d6000803e3d6000fd5b505050506040513d60208110156108cb57600080fd5b505115156108d857600080fd5b50505050565b600554600160a060020a031633146108f557600080fd5b600d805462ff00001916620100001790556008546106d890600a63ffffffff610cf516565b600d5462010000900460ff1690565b600554600160a060020a031681565b60075490565b60065490565b600554600160a060020a0316331461095b57600080fd5b600d805460ff19166001179055565b600554600160a060020a0316331461098157600080fd5b60008054604080517f3f4ba83a0000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692633f4ba83a9260048084019382900301818387803b1580156109db57600080fd5b505af11580156108d8573d6000803e3d6000fd5b600e5490565b600d54610100900460ff1690565b600554600090600160a060020a03163314610a1d57600080fd5b600b5460025411610a2d57600080fd5b610a55600a54610a496064600b54610cf590919063ffffffff16565b9063ffffffff610d0a16565b600b54909150610a6b908263ffffffff610ca516565b600255600a5415610a8e57600a54610a8a90600163ffffffff610d3316565b600a555b50565b600554600160a060020a03163314610aa857600080fd5b6000809054906101000a9004600160a060020a0316600160a060020a0316637d64bcb46040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610afa57600080fd5b505af1158015610b0e573d6000803e3d6000fd5b505050506040513d6020811015610b2457600080fd5b5050565b600554600160a060020a03163314610b3f57600080fd5b600d54610100900460ff1615610b5457600080fd5b60008054604080517f8456cb590000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692638456cb599260048084019382900301818387803b1580156109db57600080fd5b600554600160a060020a03163314610bc557600080fd5b600d805461ff001916610100179055565b600554600160a060020a03163314610bed57600080fd5b600c54421015610bfc57600080fd5b60075460065410610c0c57600080fd5b600954600654610c219163ffffffff610ca516565b600655600e544201600c55565b600554600160a060020a03163314610c4557600080fd5b610a8e81610d45565b600054600160a060020a031681565b610c678282610dc3565b600454600354610c7d908363ffffffff610ca516565b1115610b2457600080fd5b6000610c9f60025483610d0a90919063ffffffff16565b92915050565b81810182811015610c9f57fe5b610b248282610de4565b600154604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610a8e573d6000803e3d6000fd5b60008183811515610d0257fe5b049392505050565b6000821515610d1b57506000610c9f565b50818102818382811515610d2b57fe5b0414610c9f57fe5b600082821115610d3f57fe5b50900390565b600160a060020a0381161515610d5a57600080fd5b600554604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382161515610dd857600080fd5b801515610b2457600080fd5b60008054604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015260248201869052915191909216926340c10f1992604480820193602093909283900390910190829087803b158015610e5657600080fd5b505af1158015610e6a573d6000803e3d6000fd5b505050506040513d6020811015610e8057600080fd5b50511515610b2457600080fd00a165627a7a72305820859c8fb7ebb098320fa873aaa0ab72fdd5901278ff7de9b12c7268947e6dba0b002900000000000000000000000000000000000000000000000000000000001ab3f00000000000000000000000001081afed63e1e3b6251c9961feb83d82bc32a1cb0000000000000000000000005c872500c00565505f3624ab435c222e558e9ff80000000000000000000000000000000000000001431e0fae6d7217caa00000000000000000000000000000000000000000000000000000a2a15d09519be0000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000155cc0000000000000000000000000000000000000000000000000000000005c51edc2000000000000000000000000000000000000000000000000000000000076a700",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000001ab3f00000000000000000000000001081afed63e1e3b6251c9961feb83d82bc32a1cb0000000000000000000000005c872500c00565505f3624ab435c222e558e9ff80000000000000000000000000000000000000001431e0fae6d7217caa00000000000000000000000000000000000000000000000000000a2a15d09519be0000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000155cc0000000000000000000000000000000000000000000000000000000005c51edc2000000000000000000000000000000000000000000000000000000000076a700"
}