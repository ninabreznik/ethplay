{
  "address": "0xb62e20cf2305d1e2000970539a758d86eb7a7178",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PostboyToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-13\n*/\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    function allowance(address owner, address spender) public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(\n      address indexed owner,\n      address indexed spender,\n      uint256 value\n    );\n}/**\n * @title SimpleToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `StandardToken` functions.\n */\ncontract PostboyToken is ERC20 {\n    using SafeMath for uint256;\n\n    struct Account {\n        uint256 balance;\n        uint256 lastDividends;\n    }\n\n    string public constant name = \"PostboyToken\"; // solium-disable-line uppercase\n    string public constant symbol = \"PBY\"; // solium-disable-line uppercase\n    uint8 public constant decimals = 0; // solium-disable-line uppercase\n\n    uint256 public constant INITIAL_SUPPLY = 100000;\n\n    uint256 public totalDividends;\n    uint256 totalSupply_;\n    \n    mapping (address => Account) accounts;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    address public admin;\n    address public payer;\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        totalDividends = 0;\n        accounts[msg.sender].balance = INITIAL_SUPPLY;\n        admin = msg.sender;\n        payer = address(0);\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n    }\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n      public\n      returns (bool)\n    {\n        require(_value <= allowed[_from][msg.sender]);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return accounts[_owner].balance;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(\n        address _owner,\n        address _spender\n    )\n      public\n      view\n      returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n      public\n      returns (bool)\n    {\n        allowed[msg.sender][_spender] = (\n            allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n      public\n      returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Get dividents sum by address\n    */\n    function dividendBalanceOf(address account) public view returns (uint256) {\n        uint256 newDividends = totalDividends.sub(accounts[account].lastDividends);\n        uint256 product = accounts[account].balance.mul(newDividends);\n        return product.div(totalSupply_);\n    }\n\n    /**\n    * @dev Withdraw dividends\n    */\n    function claimDividend() public {\n        uint256 owing = dividendBalanceOf(msg.sender);\n        if (owing > 0) {\n            accounts[msg.sender].lastDividends = totalDividends;\n            msg.sender.transfer(owing);\n        }\n    }\n\n\n    /**\n    * @dev Tokens transfer will not work if sender or recipient has dividends\n    */\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0));\n        require(_value <= accounts[_from].balance);\n        require(accounts[_to].balance + _value >= accounts[_to].balance);\n    \n        uint256 fromOwing = dividendBalanceOf(_from);\n        uint256 toOwing = dividendBalanceOf(_to);\n        require(fromOwing <= 0 && toOwing <= 0);\n    \n        accounts[_from].balance = accounts[_from].balance.sub(_value);\n        accounts[_to].balance = accounts[_to].balance.add(_value);\n    \n        accounts[_to].lastDividends = accounts[_from].lastDividends;\n    \n        emit Transfer(_from, _to, _value);\n    }\n\n    function changePayer(address _payer) public returns (bool) {\n        require(msg.sender == admin);\n        payer = _payer;\n    }\n\n    function sendDividends() public payable {\n        require(msg.sender == payer);\n        \n        totalDividends = totalDividends.add(msg.value);\n    }\n\n    function () external payable {\n        require(false);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50620186a0600181905560008080553380825260026020908152604080842085905560048054600160a060020a0319908116851790915560058054909116905580519485525191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3610ab7806100926000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010d578063095ea7b314610197578063123119cd146101cf57806318160ddd1461020057806323b872dd146102275780632ff2e9dc14610251578063313ce56714610266578063661884631461029157806370a08231146102b557806395d89b41146102d6578063997664d7146102eb578063a8fc32de14610300578063a9059cbb14610308578063d6ea53b11461032c578063d73dd6231461034d578063dd62ed3e14610371578063e083d4c814610398578063f0fc6bca146103b9578063f851a440146103ce575b600080fd5b005b34801561011957600080fd5b506101226103e3565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015c578181015183820152602001610144565b50505050905090810190601f1680156101895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a357600080fd5b506101bb600160a060020a036004351660243561041a565b604080519115158252519081900360200190f35b3480156101db57600080fd5b506101e4610481565b60408051600160a060020a039092168252519081900360200190f35b34801561020c57600080fd5b50610215610490565b60408051918252519081900360200190f35b34801561023357600080fd5b506101bb600160a060020a0360043581169060243516604435610496565b34801561025d57600080fd5b50610215610533565b34801561027257600080fd5b5061027b61053a565b6040805160ff9092168252519081900360200190f35b34801561029d57600080fd5b506101bb600160a060020a036004351660243561053f565b3480156102c157600080fd5b50610215600160a060020a036004351661062f565b3480156102e257600080fd5b5061012261064a565b3480156102f757600080fd5b50610215610681565b61010b610687565b34801561031457600080fd5b506101bb600160a060020a03600435166024356106b6565b34801561033857600080fd5b506101bb600160a060020a03600435166106cc565b34801561035957600080fd5b506101bb600160a060020a0360043516602435610717565b34801561037d57600080fd5b50610215600160a060020a03600435811690602435166107b0565b3480156103a457600080fd5b50610215600160a060020a03600435166107db565b3480156103c557600080fd5b5061010b610857565b3480156103da57600080fd5b506101e46108b5565b60408051808201909152600c81527f506f7374626f79546f6b656e0000000000000000000000000000000000000000602082015281565b336000818152600360209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b600554600160a060020a031681565b60015490565b600160a060020a03831660009081526003602090815260408083203384529091528120548211156104c657600080fd5b600160a060020a03841660009081526003602090815260408083203384529091529020546104fa908363ffffffff6108c416565b600160a060020a03851660009081526003602090815260408083203384529091529020556105298484846108d6565b5060019392505050565b620186a081565b600081565b336000908152600360209081526040808320600160a060020a03861684529091528120548083111561059457336000908152600360209081526040808320600160a060020a03881684529091528120556105c9565b6105a4818463ffffffff6108c416565b336000908152600360209081526040808320600160a060020a03891684529091529020555b336000818152600360209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526002602052604090205490565b60408051808201909152600381527f5042590000000000000000000000000000000000000000000000000000000000602082015281565b60005481565b600554600160a060020a0316331461069e57600080fd5b6000546106b1903463ffffffff610a4016565b600055565b60006106c33384846108d6565b50600192915050565b600454600090600160a060020a031633146106e657600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03939093169290921790915590565b336000908152600360209081526040808320600160a060020a038616845290915281205461074b908363ffffffff610a4016565b336000818152600360209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600160a060020a03811660009081526002602052604081206001015481548291829161080c9163ffffffff6108c416565b600160a060020a038516600090815260026020526040902054909250610838908363ffffffff610a4d16565b905061084f60015482610a7690919063ffffffff16565b949350505050565b6000610862336107db565b905060008111156108b257600080543380835260026020526040808420600101929092559051909183156108fc02918491818181858888f193505050501580156108b0573d6000803e3d6000fd5b505b50565b600454600160a060020a031681565b6000828211156108d057fe5b50900390565b600080600160a060020a03841615156108ee57600080fd5b600160a060020a03851660009081526002602052604090205483111561091357600080fd5b600160a060020a038416600090815260026020526040902054838101101561093a57600080fd5b610943856107db565b915061094e846107db565b905060008211158015610962575060008111155b151561096d57600080fd5b600160a060020a038516600090815260026020526040902054610996908463ffffffff6108c416565b600160a060020a0380871660009081526002602052604080822093909355908616815220546109cb908463ffffffff610a4016565b600160a060020a038086166000818152600260209081526040808320958655938a168083528483206001908101549385905290950191909155825187815292519193927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050505050565b8181018281101561047b57fe5b6000821515610a5e5750600061047b565b50818102818382811515610a6e57fe5b041461047b57fe5b60008183811515610a8357fe5b0493925050505600a165627a7a7230582043f1df9cfe79c88af0cd01d5df4ccdb0743cfb5c58233150ae532d33ba4fe87a0029"
}