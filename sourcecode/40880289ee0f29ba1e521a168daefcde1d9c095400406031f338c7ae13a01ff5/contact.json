{
  "address": "0x5fba6dc859a305f890ec3911b9be2d7777c635ef",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InvestProxy",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-11\n*/\n\npragma solidity ^0.4.13;\n\ncontract Proxy {\n  /**\n   * @dev Fallback function.\n   * Implemented entirely in `_fallback`.\n   */\n  function () payable external {\n    _fallback();\n  }\n\n  /**\n   * @return The Address of the implementation.\n   */\n  function _implementation() internal view returns (address);\n\n  /**\n   * @dev Delegates execution to an implementation contract.\n   * This is a low level function that doesn't return to its internal call site.\n   * It will return to the external caller whatever the implementation returns.\n   * @param implementation Address to delegate.\n   */\n  function _delegate(address implementation) internal {\n    assembly {\n      // Copy msg.data. We take full control of memory in this inline assembly\n      // block because it will not return to Solidity code. We overwrite the\n      // Solidity scratch pad at memory position 0.\n      calldatacopy(0, 0, calldatasize)\n\n      // Call the implementation.\n      // out and outsize are 0 because we don't know the size yet.\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n      // Copy the returned data.\n      returndatacopy(0, 0, returndatasize)\n\n      switch result\n      // delegatecall returns 0 on error.\n      case 0 { revert(0, returndatasize) }\n      default { return(0, returndatasize) }\n    }\n  }\n\n  /**\n   * @dev Function that is run as the first thing in the fallback function.\n   * Can be redefined in derived contracts to add functionality.\n   * Redefinitions must call super._willFallback().\n   */\n  function _willFallback() internal {\n  }\n\n  /**\n   * @dev fallback implementation.\n   * Extracted to enable manual triggering.\n   */\n  function _fallback() internal {\n    _willFallback();\n    _delegate(_implementation());\n  }\n}\n\ncontract UpgradeabilityProxy is Proxy {\n  /**\n   * @dev Emitted when the implementation is upgraded.\n   * @param implementation Address of the new implementation.\n   */\n  event Upgraded(address indexed implementation);\n\n  /**\n   * @dev Storage slot with the address of the current implementation.\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\n   * validated in the constructor.\n   */\n  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\n\n  /**\n   * @dev Contract constructor.\n   * @param _implementation Address of the initial implementation.\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   */\n  constructor(address _implementation, bytes _data) public payable {\n    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\n    _setImplementation(_implementation);\n    if(_data.length > 0) {\n      require(_implementation.delegatecall(_data));\n    }\n  }\n\n  /**\n   * @dev Returns the current implementation.\n   * @return Address of the current implementation\n   */\n  function _implementation() internal view returns (address impl) {\n    bytes32 slot = IMPLEMENTATION_SLOT;\n    assembly {\n      impl := sload(slot)\n    }\n  }\n\n  /**\n   * @dev Upgrades the proxy to a new implementation.\n   * @param newImplementation Address of the new implementation.\n   */\n  function _upgradeTo(address newImplementation) internal {\n    _setImplementation(newImplementation);\n    emit Upgraded(newImplementation);\n  }\n\n  /**\n   * @dev Sets the implementation address of the proxy.\n   * @param newImplementation Address of the new implementation.\n   */\n  function _setImplementation(address newImplementation) private {\n    require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n      sstore(slot, newImplementation)\n    }\n  }\n}\n\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\n  /**\n   * @dev Emitted when the administration has been transferred.\n   * @param previousAdmin Address of the previous admin.\n   * @param newAdmin Address of the new admin.\n   */\n  event AdminChanged(address previousAdmin, address newAdmin);\n\n  /**\n   * @dev Storage slot with the admin of the contract.\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.admin\", and is\n   * validated in the constructor.\n   */\n  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\n\n  /**\n   * @dev Modifier to check whether the `msg.sender` is the admin.\n   * If it is, it will run the function. Otherwise, it will delegate the call\n   * to the implementation.\n   */\n  modifier ifAdmin() {\n    if (msg.sender == _admin()) {\n      _;\n    } else {\n      _fallback();\n    }\n  }\n\n  /**\n   * Contract constructor.\n   * It sets the `msg.sender` as the proxy administrator.\n   * @param _implementation address of the initial implementation.\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   */\n  constructor(address _implementation, bytes _data) UpgradeabilityProxy(_implementation, _data) public payable {\n    assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\n\n    _setAdmin(msg.sender);\n  }\n\n  /**\n   * @return The address of the proxy admin.\n   */\n  function admin() external view ifAdmin returns (address) {\n    return _admin();\n  }\n\n  /**\n   * @return The address of the implementation.\n   */\n  function implementation() external view ifAdmin returns (address) {\n    return _implementation();\n  }\n\n  /**\n   * @dev Changes the admin of the proxy.\n   * Only the current admin can call this function.\n   * @param newAdmin Address to transfer proxy administration to.\n   */\n  function changeAdmin(address newAdmin) external ifAdmin {\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n    emit AdminChanged(_admin(), newAdmin);\n    _setAdmin(newAdmin);\n  }\n\n  /**\n   * @dev Upgrade the backing implementation of the proxy.\n   * Only the admin can call this function.\n   * @param newImplementation Address of the new implementation.\n   */\n  function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeTo(newImplementation);\n  }\n\n  /**\n   * @dev Upgrade the backing implementation of the proxy and call a function\n   * on the new implementation.\n   * This is useful to initialize the proxied contract.\n   * @param newImplementation Address of the new implementation.\n   * @param data Data to send as msg.data in the low level call.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   */\n  function upgradeToAndCall(address newImplementation, bytes data) payable external ifAdmin {\n    _upgradeTo(newImplementation);\n    require(newImplementation.delegatecall(data));\n  }\n\n  /**\n   * @return The admin slot.\n   */\n  function _admin() internal view returns (address adm) {\n    bytes32 slot = ADMIN_SLOT;\n    assembly {\n      adm := sload(slot)\n    }\n  }\n\n  /**\n   * @dev Sets the address of the proxy admin.\n   * @param newAdmin Address of the new proxy admin.\n   */\n  function _setAdmin(address newAdmin) internal {\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n      sstore(slot, newAdmin)\n    }\n  }\n\n  /**\n   * @dev Only fall back when the sender is not the admin.\n   */\n  function _willFallback() internal {\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n    super._willFallback();\n  }\n}\n\ncontract InvestProxy is AdminUpgradeabilityProxy {\n    event InvestURLChanged(string newURL);\n    event TradeProfileURLChanged(string newURL);\n    \n    /**\n    * @return The address of the implementation.\n    */\n    function implementation() external view returns (address) {\n        return _implementation();\n    }\n\n    /**\n    * @dev Storage slot with the address of the URL.\n    * This is the keccak-256 hash of \"bincentive.url.invest\", and is\n    * validated in the constructor.\n    */\n    bytes32 private constant INVEST_URL_SLOT = 0x0a0b238efce32441e32278a575c1da4e28f812259fba404833c15c29a6e13d46;\n\n    /**\n    * @dev Storage slot with the address of the URL.\n    * This is the keccak-256 hash of \"bincentive.url.tradeprofile\", and is\n    * validated in the constructor.\n    */\n    bytes32 private constant TRADEPROFILE_URL_SLOT = 0x49c26932bb52cddb57467acf01e76b5c55163bbd941e1e3b8cbe216ad40359ae;\n    \n    /**\n    * @return The url of the Bincentive Invest contract explorer.\n    */\n    function bincentive_invest_contract_url() external view returns (string) {\n        bytes32 slot = INVEST_URL_SLOT;\n        assembly {\n            let slot_count := sload(slot)\n            \n            for { let i := 0} lt(i, slot_count) { i := add(i, 1) } { mstore(add(0xf0, mul(i, 32)), sload(add(add(slot, 1), i))) }\n            \n            return(0xf0, mul(slot_count, 32))\n        }\n    }\n\n    function setInvestURL(string _newURL) external ifAdmin {\n        bytes32 slot = INVEST_URL_SLOT;\n        assembly {\n            let slot_count := div(sub(calldatasize, 4), 32)\n            sstore(slot, slot_count)\n            \n            calldatacopy(0xf0, 4, sub(calldatasize, 4))\n            for { let i := 0 } lt(i, slot_count) { i := add(i, 1) } { sstore(add(add(slot, 1), i), mload(add(0xf0, mul(i, 32)))) }\n        }\n        emit InvestURLChanged(_newURL);\n    }\n\n    /**\n    * @return The url of the Bincentive Trade Profile contract explorer.\n    */\n    function trade_profile_contract_url() external returns (string) {\n        bytes32 slot = TRADEPROFILE_URL_SLOT;\n        assembly {\n            let slot_count := sload(slot)\n            \n            for { let i := 0} lt(i, slot_count) { i := add(i, 1) } { mstore(add(0xf0, mul(i, 32)), sload(add(add(slot, 1), i))) }\n            \n            return(0xf0, mul(slot_count, 32))\n        }\n    }\n\n    function setTradeProfileURL(string _newURL) external ifAdmin {\n        bytes32 slot = TRADEPROFILE_URL_SLOT;\n        assembly {\n            let slot_count := div(sub(calldatasize, 4), 32)\n            sstore(slot, slot_count)\n            \n            calldatacopy(0xf0, 4, sub(calldatasize, 4))\n            for { let i := 0 } lt(i, slot_count) { i := add(i, 1) } { sstore(add(add(slot, 1), i), mload(add(0xf0, mul(i, 32)))) }\n        }\n        emit TradeProfileURLChanged(_newURL);\n    }\n\n\n    constructor(address _implementation, bytes _data) AdminUpgradeabilityProxy(_implementation, _data) public payable {\n        assert(INVEST_URL_SLOT == keccak256(\"bincentive.url.invest\"));\n        assert(TRADEPROFILE_URL_SLOT == keccak256(\"bincentive.url.tradeprofile\"));\n    }\n}\n\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}",
  "bytecode": "60806040526040516110a83803806110a883398101806040528101908080519060200190929190805182019291905050508181818160405180807f6f72672e7a657070656c696e6f732e70726f78792e696d706c656d656e74617481526020017f696f6e000000000000000000000000000000000000000000000000000000000081525060230190506040518091039020600019167f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3600102600019161415156100c557fe5b6100dd826102dc640100000000026401000000009004565b600081511115610178578173ffffffffffffffffffffffffffffffffffffffff168160405180828051906020019080838360005b8381101561012c578082015181840152602081019050610111565b50505050905090810190601f1680156101595780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af4915050151561017757600080fd5b5b505060405180807f6f72672e7a657070656c696e6f732e70726f78792e61646d696e000000000000815250601a0190506040518091039020600019167f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b600102600019161415156101e557fe5b6101fd336103c1640100000000026401000000009004565b505060405180807f62696e63656e746976652e75726c2e696e76657374000000000000000000000081525060150190506040518091039020600019167f0a0b238efce32441e32278a575c1da4e28f812259fba404833c15c29a6e13d466001026000191614151561026a57fe5b60405180807f62696e63656e746976652e75726c2e747261646570726f66696c650000000000815250601b0190506040518091039020600019167f49c26932bb52cddb57467acf01e76b5c55163bbd941e1e3b8cbe216ad40359ae600102600019161415156102d557fe5b5050610403565b60006102fa826103f064010000000002610c57176401000000009004565b1515610394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b8152602001807f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f81526020017f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000081525060400191505060405180910390fd5b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c360010290508181555050565b60007f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b60010290508181555050565b600080823b905060008111915050919050565b610c96806104126000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312b9ceb2146100a35780633659cfe6146101335780634f1ef2861461017657806352ea12c3146101c45780635c60da1b146101ff5780637cad6a2d146102565780638f283970146102e6578063ba26152e14610329578063f851a44014610364575b6100a16103bb565b005b3480156100af57600080fd5b506100b86103d5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f85780820151818401526020810190506100dd565b50505050905090810190601f1680156101255780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013f57600080fd5b50610174600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061042f565b005b6101c2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001919091929391929390505050610484565b005b3480156101d057600080fd5b506101fd600480360381019080803590602001908201803590602001919091929391929390505050610521565b005b34801561020b57600080fd5b50610214610622565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561026257600080fd5b5061026b610631565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102ab578082015181840152602081019050610290565b50505050905090810190601f1680156102d85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102f257600080fd5b50610327600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061068b565b005b34801561033557600080fd5b50610362600480360381019080803590602001908201803590602001919091929391929390505050610849565b005b34801561037057600080fd5b5061037961094a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103c36109a2565b6103d36103ce610a7d565b610aae565b565b606060007f49c26932bb52cddb57467acf01e76b5c55163bbd941e1e3b8cbe216ad40359ae6001029050805460005b8181101561042657806001840101546020820260f00152600181019050610404565b506020810260f0f35b610437610ad4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156104785761047381610b05565b610481565b6104806103bb565b5b50565b61048c610ad4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610513576104c883610b05565b8273ffffffffffffffffffffffffffffffffffffffff16828260405180838380828437820191505092505050600060405180830381855af4915050151561050e57600080fd5b61051c565b61051b6103bb565b5b505050565b600061052b610ad4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610614577f49c26932bb52cddb57467acf01e76b5c55163bbd941e1e3b8cbe216ad40359ae60010290506020600436030480825560043603600460f03760005b818110156105bc576020810260f001518160018501015560018101905061059a565b50507fcbbd80d44b406c83cfc236050f52fca08b7c429b4b4391a4114265703604f42f8383604051808060200182810382528484828181526020019250808284378201915050935050505060405180910390a161061d565b61061c6103bb565b5b505050565b600061062c610a7d565b905090565b606060007f0a0b238efce32441e32278a575c1da4e28f812259fba404833c15c29a6e13d466001029050805460005b8181101561068257806001840101546020820260f00152600181019050610660565b506020810260f0f35b610693610ad4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561083d57600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610791576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001807f43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f81526020017f787920746f20746865207a65726f20616464726573730000000000000000000081525060400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6107ba610ad4565b82604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a161083881610b54565b610846565b6108456103bb565b5b50565b6000610853610ad4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561093c577f0a0b238efce32441e32278a575c1da4e28f812259fba404833c15c29a6e13d4660010290506020600436030480825560043603600460f03760005b818110156108e4576020810260f00151816001850101556001810190506108c2565b50507f7e9b0dd130a9b2ee1d1bf836b0f5fb2050782394d9a0d54317ec23924ab8872b8383604051808060200182810382528484828181526020019250808284378201915050935050505060405180910390a1610945565b6109446103bb565b5b505050565b6000610954610ad4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156109965761098f610ad4565b905061099f565b61099e6103bb565b5b90565b6109aa610ad4565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610a73576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e20667281526020017f6f6d207468652070726f78792061646d696e000000000000000000000000000081525060400191505060405180910390fd5b610a7b610b83565b565b6000807f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c36001029050805491505090565b3660008037600080366000845af43d6000803e8060008114610acf573d6000f35b3d6000fd5b6000807f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b6001029050805491505090565b610b0e81610b85565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60007f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b60010290508181555050565b565b6000610b9082610c57565b1515610c2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b8152602001807f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f81526020017f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000081525060400191505060405180910390fd5b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c360010290508181555050565b600080823b9050600081119150509190505600a165627a7a72305820547810a746463e457b32e7c872619ea2455924a6b663fc51fe38840536938d8000290000000000000000000000002562a3cbc4c61f3934f0b890eda11f6ce6bcc0c60000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008406552ff3000000000000000000000000bf7ddeb00de22d24795c48367e89af1d2b5a70ff0000000000000000000000009669890e48f330acd88b78d63e1a6b3482652cd9000000000000000000000000803f267276f708e4166b403a0808a4e84dcec21700000000000000000000000085bfd9cace373d0305049928b0bd695cf19e0cfc00000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000002562a3cbc4c61f3934f0b890eda11f6ce6bcc0c60000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008406552ff3000000000000000000000000bf7ddeb00de22d24795c48367e89af1d2b5a70ff0000000000000000000000009669890e48f330acd88b78d63e1a6b3482652cd9000000000000000000000000803f267276f708e4166b403a0808a4e84dcec21700000000000000000000000085bfd9cace373d0305049928b0bd695cf19e0cfc00000000000000000000000000000000000000000000000000000000"
}