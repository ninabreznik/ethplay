{
  "address": "0xa9010da5f326833afe173589a9ae94cc79e2d3dc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BCVTokenVault",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-07\n*/\n\npragma solidity ^0.4.18;\n\n// ----------------------------------------------------------------------------------------------\n//Bit Capital Vendor by BitCV Foundation.\n// An ERC20 standard\n//\n// author: BitCV Foundation Team\n\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint256 _totalSupply);\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract BCV is ERC20Interface {\n    uint256 public constant decimals = 8;\n\n    string public constant symbol = \"BCV\";\n    string public constant name = \"BitCapitalVendorToken\";\n\n    uint256 public _totalSupply = 120000000000000000; // total supply is 1.2 billion\n\n    // Owner of this contract\n    address public owner;\n\n    // Balances BCV for each account\n    mapping(address => uint256) private balances;\n\n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) private allowed;\n\n    // List of approved investors\n    mapping(address => bool) private approvedInvestorList;\n\n    // deposit\n    mapping(address => uint256) private deposit;\n\n\n    // totalTokenSold\n    uint256 public totalTokenSold = 0;\n\n\n    /**\n     * @dev Fix for the ERC20 short address attack.\n     */\n    modifier onlyPayloadSize(uint size) {\n      if(msg.data.length < size + 4) {\n        revert();\n      }\n      _;\n    }\n\n\n\n    /// @dev Constructor\n    function BCV()\n        public {\n        owner = msg.sender;\n        balances[owner] = _totalSupply;\n    }\n\n    /// @dev Gets totalSupply\n    /// @return Total supply\n    function totalSupply()\n        public\n        constant\n        returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @dev Gets account's balance\n    /// @param _addr Address of the account\n    /// @return Account balance\n    function balanceOf(address _addr)\n        public\n        constant\n        returns (uint256) {\n        return balances[_addr];\n    }\n\n    /// @dev check address is approved investor\n    /// @param _addr address\n    function isApprovedInvestor(address _addr)\n        public\n        constant\n        returns (bool) {\n        return approvedInvestorList[_addr];\n    }\n\n    /// @dev get ETH deposit\n    /// @param _addr address get deposit\n    /// @return amount deposit of an buyer\n    function getDeposit(address _addr)\n        public\n        constant\n        returns(uint256){\n        return deposit[_addr];\n    }\n\n\n    /// @dev Transfers the balance from msg.sender to an account\n    /// @param _to Recipient address\n    /// @param _amount Transfered amount in unit\n    /// @return Transfer status\n    function transfer(address _to, uint256 _amount)\n        public\n\n        returns (bool) {\n        // if sender's balance has enough unit and amount >= 0,\n        //      and the sum is not overflow,\n        // then do transfer\n        if ( (balances[msg.sender] >= _amount) &&\n             (_amount >= 0) &&\n             (balances[_to] + _amount > balances[_to]) ) {\n\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Send _value amount of tokens from address _from to address _to\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    )\n    public\n\n    returns (bool success) {\n        if (balances[_from] >= _amount && _amount > 0 && allowed[_from][msg.sender] >= _amount) {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _amount)\n        public\n\n        returns (bool success) {\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    // get allowance\n    function allowance(address _owner, address _spender)\n        public\n        constant\n        returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function () public payable{\n        revert();\n    }\n\n}\n\n/**\n * SafeMath\n * Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract BCVTokenVault is Ownable {\n    using SafeMath for uint256;\n\n    // team 2.4 * 10 ** 8, 3% every month after 2019-3-9\n    address public teamReserveWallet = 0x7e5C65b899Fb7Cd0c959e5534489B454B7c6c3dF;\n    // life 1.2 * 10 ** 8, 20% every month after 2018-6-1\n    address public lifeReserveWallet = 0xaed0363f76e4b906ef818b0f3199c580b5b01a43;\n    // finance 1.2 * 10 ** 8, 20% every month after 2018-6-1\n    address public finanReserveWallet = 0xd60A1D84835006499d5E6376Eb7CB9725643E25F;\n    // economic system 1.2 * 10 ** 8, 1200000 every month in first 6 years, left for last 14 years, release after 2018-6-1\n    address public econReserveWallet = 0x0C6e75e481cC6Ba8e32d6eF742768fc2273b1Bf0;\n    // chain development 1.2 * 10 ** 8, release all after 2018-9-30\n    address public developReserveWallet = 0x11aC32f89e874488890E5444723A644248609C0b;\n\n    // Token Allocations\n    uint256 public teamReserveAllocation = 2.4 * (10 ** 8) * (10 ** 8);\n    uint256 public lifeReserveAllocation = 1.2 * (10 ** 8) * (10 ** 8);\n    uint256 public finanReserveAllocation = 1.2 * (10 ** 8) * (10 ** 8);\n    uint256 public econReserveAllocation = 1.2 * (10 ** 8) * (10 ** 8);\n    uint256 public developReserveAllocation = 1.2 * (10 ** 8) * (10 ** 8);\n\n    // Total Token Allocations\n    uint256 public totalAllocation = 7.2 * (10 ** 8) * (10 ** 8);\n\n    uint256 public teamReserveTimeLock = 1552060800; // 2019-3-9\n    uint256 public lifeReserveTimeLock = 1527782400;  // 2018-6-1\n    uint256 public finanReserveTimeLock = 1527782400;  // 2018-6-1\n    uint256 public econReserveTimeLock = 1527782400;  // 2018-6-1\n    uint256 public developReserveTimeLock = 1538236800;  // 2018-9-30\n\n    uint256 public teamVestingStages = 34;   // 3% each month; total 34 stages.\n    uint256 public lifeVestingStages = 5;  // 20% each month; total 5 stages.\n    uint256 public finanVestingStages = 5;  // 20% each month; total 5 stages.\n    uint256 public econVestingStages = 240;  // 1200000 each month for first six years and 200000 each month for next forteen years; total 240 stages.\n\n    mapping(address => uint256) public allocations;\n    mapping(address => uint256) public timeLocks;\n    mapping(address => uint256) public claimed;\n    uint256 public lockedAt = 0;\n\n    BCV public token;\n\n    event Allocated(address wallet, uint256 value);\n    event Distributed(address wallet, uint256 value);\n    event Locked(uint256 lockTime);\n\n    // Any of the five reserve wallets\n    modifier onlyReserveWallets {\n        require(allocations[msg.sender] > 0);\n        _;\n    }\n\n    // Team reserve wallet\n    modifier onlyTeamReserve {\n        require(msg.sender == teamReserveWallet);\n        require(allocations[msg.sender] > 0);\n        require(allocations[msg.sender] > claimed[msg.sender]);\n        _;\n    }\n\n    // Life token reserve wallet\n    modifier onlyTokenReserveLife {\n        require(msg.sender == lifeReserveWallet);\n        require(allocations[msg.sender] > 0);\n        require(allocations[msg.sender] > claimed[msg.sender]);\n        _;\n    }\n\n    // Finance token reserve wallet\n    modifier onlyTokenReserveFinance {\n        require(msg.sender == finanReserveWallet);\n        require(allocations[msg.sender] > 0);\n        require(allocations[msg.sender] > claimed[msg.sender]);\n        _;\n    }\n\n    // Economic token reserve wallet\n    modifier onlyTokenReserveEcon {\n        require(msg.sender == econReserveWallet);\n        require(allocations[msg.sender] > 0);\n        require(allocations[msg.sender] > claimed[msg.sender]);\n        _;\n    }\n\n    // Develop token reserve wallet\n    modifier onlyTokenReserveDevelop {\n        require(msg.sender == developReserveWallet);\n        require(allocations[msg.sender] > 0);\n        require(allocations[msg.sender] > claimed[msg.sender]);\n        _;\n    }\n\n    // Has not been locked yet\n    modifier notLocked {\n        require(lockedAt == 0);\n        _;\n    }\n\n    // Already locked\n    modifier locked {\n        require(lockedAt > 0);\n        _;\n    }\n\n    // Token allocations have not been set\n    modifier notAllocated {\n        require(allocations[teamReserveWallet] == 0);\n        require(allocations[lifeReserveWallet] == 0);\n        require(allocations[finanReserveWallet] == 0);\n        require(allocations[econReserveWallet] == 0);\n        require(allocations[developReserveWallet] == 0);\n        _;\n    }\n\n    function BCVTokenVault(ERC20Interface _token) public {\n        owner = msg.sender;\n        token = BCV(_token);\n    }\n\n    function allocate() public notLocked notAllocated onlyOwner {\n\n        // Makes sure Token Contract has the exact number of tokens\n        require(token.balanceOf(address(this)) == totalAllocation);\n\n        allocations[teamReserveWallet] = teamReserveAllocation;\n        allocations[lifeReserveWallet] = lifeReserveAllocation;\n        allocations[finanReserveWallet] = finanReserveAllocation;\n        allocations[econReserveWallet] = econReserveAllocation;\n        allocations[developReserveWallet] = developReserveAllocation;\n\n        Allocated(teamReserveWallet, teamReserveAllocation);\n        Allocated(lifeReserveWallet, lifeReserveAllocation);\n        Allocated(finanReserveWallet, finanReserveAllocation);\n        Allocated(econReserveWallet, econReserveAllocation);\n        Allocated(developReserveWallet, developReserveAllocation);\n\n        lock();\n    }\n\n    // Lock the vault for the wallets\n    function lock() internal notLocked onlyOwner {\n\n        lockedAt = block.timestamp;\n\n        timeLocks[teamReserveWallet] = teamReserveTimeLock;\n        timeLocks[lifeReserveWallet] = lifeReserveTimeLock;\n        timeLocks[finanReserveWallet] = finanReserveTimeLock;\n        timeLocks[econReserveWallet] = econReserveTimeLock;\n        timeLocks[developReserveWallet] = developReserveTimeLock;\n\n        Locked(lockedAt);\n    }\n\n    // Recover Tokens in case incorrect amount was sent to contract.\n    function recoverFailedLock() external notLocked notAllocated onlyOwner {\n\n        // Transfer all tokens on this contract back to the owner\n        require(token.transfer(owner, token.balanceOf(address(this))));\n    }\n\n    // Total number of tokens currently in the vault\n    function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\n        return token.balanceOf(address(this));\n    }\n\n    // Number of tokens that are still locked\n    function getLockedBalance() public view onlyReserveWallets returns (uint256 tokensLocked) {\n        return allocations[msg.sender].sub(claimed[msg.sender]);\n    }\n\n\n    // Claim tokens for team reserve wallet\n    function claimTeamReserve() onlyTeamReserve locked public {\n\n        address reserveWallet = msg.sender;\n        // Can't claim before Lock ends\n        require(block.timestamp > timeLocks[reserveWallet]);\n\n        uint256 vestingStage = teamVestingStage();\n\n        // Amount of tokens the team should have at this vesting stage\n        uint256 totalUnlocked = vestingStage.mul(7.2 * (10 ** 6) * (10 ** 8));\n\n        // For the last vesting stage, we will release all tokens\n        if (vestingStage == 34) {\n          totalUnlocked = allocations[teamReserveWallet];\n        }\n\n        // Total unlocked token must be smaller or equal to total locked token\n        require(totalUnlocked <= allocations[teamReserveWallet]);\n\n        // Previously claimed tokens must be less than what is unlocked\n        require(claimed[teamReserveWallet] < totalUnlocked);\n\n        // Number of tokens we can get\n        uint256 payment = totalUnlocked.sub(claimed[teamReserveWallet]);\n\n        // Update the claimed tokens in team wallet\n        claimed[teamReserveWallet] = totalUnlocked;\n\n        // Transfer to team wallet address\n        require(token.transfer(teamReserveWallet, payment));\n\n        Distributed(teamReserveWallet, payment);\n    }\n\n    //Current Vesting stage for team\n    function teamVestingStage() public view onlyTeamReserve returns(uint256) {\n\n        uint256 nowTime = block.timestamp;\n        // Number of months past our unlock time, which is the stage\n        uint256 stage = (nowTime.sub(teamReserveTimeLock)).div(2592000);\n\n        // Ensures team vesting stage doesn't go past teamVestingStages\n        if(stage > teamVestingStages) {\n            stage = teamVestingStages;\n        }\n        return stage;\n\n    }\n\n    // Claim tokens for life reserve wallet\n    function claimTokenReserveLife() onlyTokenReserveLife locked public {\n\n        address reserveWallet = msg.sender;\n\n        // Can't claim before Lock ends\n        require(block.timestamp > timeLocks[reserveWallet]);\n\n        // The vesting stage of life wallet\n        uint256 vestingStage = lifeVestingStage();\n\n        // Amount of tokens the life wallet should have at this vesting stage\n        uint256 totalUnlocked = vestingStage.mul(2.4 * (10 ** 7) * (10 ** 8));\n\n        // Total unlocked token must be smaller or equal to total locked token\n        require(totalUnlocked <= allocations[lifeReserveWallet]);\n\n        // Previously claimed tokens must be less than what is unlocked\n        require(claimed[lifeReserveWallet] < totalUnlocked);\n\n        // Number of tokens we can get\n        uint256 payment = totalUnlocked.sub(claimed[lifeReserveWallet]);\n\n        // Update the claimed tokens in finance wallet\n        claimed[lifeReserveWallet] = totalUnlocked;\n\n        // Transfer to life wallet address\n        require(token.transfer(reserveWallet, payment));\n\n        Distributed(reserveWallet, payment);\n    }\n\n    // Current Vesting stage for life wallet\n    function lifeVestingStage() public view onlyTokenReserveLife returns(uint256) {\n\n        uint256 nowTime = block.timestamp;\n        // Number of months past our unlock time, which is the stage\n        uint256 stage = (nowTime.sub(lifeReserveTimeLock)).div(2592000);\n\n        // Ensures life wallet vesting stage doesn't go past lifeVestingStages\n        if(stage > lifeVestingStages) {\n            stage = lifeVestingStages;\n        }\n\n        return stage;\n    }\n\n    // Claim tokens for finance reserve wallet\n    function claimTokenReserveFinan() onlyTokenReserveFinance locked public {\n\n        address reserveWallet = msg.sender;\n\n        // Can't claim before Lock ends\n        require(block.timestamp > timeLocks[reserveWallet]);\n\n        // The vesting stage of finance wallet\n        uint256 vestingStage = finanVestingStage();\n\n        // Amount of tokens the finance wallet should have at this vesting stage\n        uint256 totalUnlocked = vestingStage.mul(2.4 * (10 ** 7) * (10 ** 8));\n\n        // Total unlocked token must be smaller or equal to total locked token\n        require(totalUnlocked <= allocations[finanReserveWallet]);\n\n        // Previously claimed tokens must be less than what is unlocked\n        require(claimed[finanReserveWallet] < totalUnlocked);\n\n        // Number of tokens we can get\n        uint256 payment = totalUnlocked.sub(claimed[finanReserveWallet]);\n\n        // Update the claimed tokens in finance wallet\n        claimed[finanReserveWallet] = totalUnlocked;\n\n        // Transfer to finance wallet address\n        require(token.transfer(reserveWallet, payment));\n\n        Distributed(reserveWallet, payment);\n    }\n\n    // Current Vesting stage for finance wallet\n    function finanVestingStage() public view onlyTokenReserveFinance returns(uint256) {\n\n        uint256 nowTime = block.timestamp;\n\n        // Number of months past our unlock time, which is the stage\n        uint256 stage = (nowTime.sub(finanReserveTimeLock)).div(2592000);\n\n        // Ensures finance wallet vesting stage doesn't go past finanVestingStages\n        if(stage > finanVestingStages) {\n            stage = finanVestingStages;\n        }\n\n        return stage;\n\n    }\n\n    // Claim tokens for economic reserve wallet\n    function claimTokenReserveEcon() onlyTokenReserveEcon locked public {\n\n        address reserveWallet = msg.sender;\n\n        // Can't claim before Lock ends\n        require(block.timestamp > timeLocks[reserveWallet]);\n\n        uint256 vestingStage = econVestingStage();\n\n        // Amount of tokens the economic wallet should have at this vesting stage\n        uint256 totalUnlocked;\n\n        // For first 6 years stages\n        if (vestingStage <= 72) {\n          totalUnlocked = vestingStage.mul(1200000 * (10 ** 8));\n        } else {        // For the next 14 years stages\n          totalUnlocked = ((vestingStage.sub(72)).mul(200000 * (10 ** 8))).add(86400000 * (10 ** 8));\n        }\n\n        // Total unlocked token must be smaller or equal to total locked token\n        require(totalUnlocked <= allocations[econReserveWallet]);\n\n        // Previously claimed tokens must be less than what is unlocked\n        require(claimed[econReserveWallet] < totalUnlocked);\n\n        // Number of tokens we can get\n        uint256 payment = totalUnlocked.sub(claimed[econReserveWallet]);\n\n        // Update the claimed tokens in economic wallet\n        claimed[econReserveWallet] = totalUnlocked;\n\n        // Transfer to economic wallet address\n        require(token.transfer(reserveWallet, payment));\n\n        Distributed(reserveWallet, payment);\n    }\n\n    // Current Vesting stage for economic wallet\n    function econVestingStage() public view onlyTokenReserveEcon returns(uint256) {\n\n        uint256 nowTime = block.timestamp;\n\n        // Number of months past our unlock time, which is the stage\n        uint256 stage = (nowTime.sub(timeLocks[econReserveWallet])).div(2592000);\n\n        // Ensures economic wallet vesting stage doesn't go past econVestingStages\n        if(stage > econVestingStages) {\n            stage = econVestingStages;\n        }\n\n        return stage;\n\n    }\n\n    // Claim tokens for development reserve wallet\n    function claimTokenReserveDevelop() onlyTokenReserveDevelop locked public {\n\n      address reserveWallet = msg.sender;\n\n      // Can't claim before Lock ends\n      require(block.timestamp > timeLocks[reserveWallet]);\n\n      // Must Only claim once\n      require(claimed[reserveWallet] == 0);\n\n      // Number of tokens we can get, which is all tokens in developReserveWallet\n      uint256 payment = allocations[reserveWallet];\n\n      // Update the claimed tokens in development wallet\n      claimed[reserveWallet] = payment;\n\n      // Transfer to development wallet address\n      require(token.transfer(reserveWallet, payment));\n\n      Distributed(reserveWallet, payment);\n    }\n\n\n    // Checks if msg.sender can collect tokens\n    function canCollect() public view onlyReserveWallets returns(bool) {\n\n        return block.timestamp > timeLocks[msg.sender] && claimed[msg.sender] == 0;\n\n    }\n\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000001014613e2b3cbc4d575054d4982e580d9b99d7b1"
}