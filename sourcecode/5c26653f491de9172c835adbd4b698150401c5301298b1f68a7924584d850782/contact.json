{
  "address": "0x54b0de285c15d27b0daa687bcbf40cea68b2807f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Vault",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-14\n*/\n\npragma solidity ^0.4.21;\n\ninterface VaultInterface {\n\n    event Deposited(address indexed user, address token, uint amount);\n    event Withdrawn(address indexed user, address token, uint amount);\n\n    event Approved(address indexed user, address indexed spender);\n    event Unapproved(address indexed user, address indexed spender);\n\n    event AddedSpender(address indexed spender);\n    event RemovedSpender(address indexed spender);\n\n    function deposit(address token, uint amount) external payable;\n    function withdraw(address token, uint amount) external;\n    function transfer(address token, address from, address to, uint amount) external;\n    function approve(address spender) external;\n    function unapprove(address spender) external;\n    function isApproved(address user, address spender) external view returns (bool);\n    function addSpender(address spender) external;\n    function removeSpender(address spender) external;\n    function latestSpender() external view returns (address);\n    function isSpender(address spender) external view returns (bool);\n    function tokenFallback(address from, uint value, bytes data) public;\n    function balanceOf(address token, address user) public view returns (uint);\n\n}\n\ninterface ERC820 {\n\n    function setInterfaceImplementer(address addr, bytes32 iHash, address implementer) public;\n\n}\n\nlibrary SafeMath {\n\n    function mul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) internal pure returns (uint) {\n        assert(b > 0);\n        uint c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint a, uint b) internal pure returns (uint) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint a, uint b) internal pure returns (uint) {\n        return a < b ? a : b;\n    }\n}\n\n\ncontract Ownable {\n\n    address public owner;\n\n    modifier onlyOwner {\n        require(isOwner(msg.sender));\n        _;\n    }\n\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        owner = _newOwner;\n    }\n\n    function isOwner(address _address) public view returns (bool) {\n        return owner == _address;\n    }\n}\n\ninterface ERC20 {\n\n    function totalSupply() public view returns (uint);\n    function balanceOf(address owner) public view returns (uint);\n    function allowance(address owner, address spender) public view returns (uint);\n    function transfer(address to, uint value) public returns (bool);\n    function transferFrom(address from, address to, uint value) public returns (bool);\n    function approve(address spender, uint value) public returns (bool);\n\n}\n\ninterface ERC777 {\n    function name() public constant returns (string);\n    function symbol() public constant returns (string);\n    function totalSupply() public constant returns (uint256);\n    function granularity() public constant returns (uint256);\n    function balanceOf(address owner) public constant returns (uint256);\n\n    function send(address to, uint256 amount) public;\n    function send(address to, uint256 amount, bytes userData) public;\n\n    function authorizeOperator(address operator) public;\n    function revokeOperator(address operator) public;\n    function isOperatorFor(address operator, address tokenHolder) public constant returns (bool);\n    function operatorSend(address from, address to, uint256 amount, bytes userData, bytes operatorData) public;\n\n}\n\ncontract Vault is Ownable, VaultInterface {\n\n    using SafeMath for *;\n\n    address constant public ETH = 0x0;\n\n    mapping (address => bool) public isERC777;\n\n    // user => spender => approved\n    mapping (address => mapping (address => bool)) private approved;\n    mapping (address => mapping (address => uint)) private balances;\n    mapping (address => uint) private accounted;\n    mapping (address => bool) private spenders;\n\n    address private latest;\n\n    modifier onlySpender {\n        require(spenders[msg.sender]);\n        _;\n    }\n\n    modifier onlyApproved(address user) {\n        require(approved[user][msg.sender]);\n        _;\n    }\n\n    function Vault(ERC820 registry) public {\n        // required by ERC777 standard.\n        registry.setInterfaceImplementer(address(this), keccak256(\"ERC777TokensRecipient\"), address(this));\n    }\n\n    /// @dev Deposits a specific token.\n    /// @param token Address of the token to deposit.\n    /// @param amount Amount of tokens to deposit.\n    function deposit(address token, uint amount) external payable {\n        require(token == ETH || msg.value == 0);\n\n        uint value = amount;\n        if (token == ETH) {\n            value = msg.value;\n        } else {\n            require(ERC20(token).transferFrom(msg.sender, address(this), value));\n        }\n\n        depositFor(msg.sender, token, value);\n    }\n\n    /// @dev Withdraws a specific token.\n    /// @param token Address of the token to withdraw.\n    /// @param amount Amount of tokens to withdraw.\n    function withdraw(address token, uint amount) external {\n        require(balanceOf(token, msg.sender) >= amount);\n\n        balances[token][msg.sender] = balances[token][msg.sender].sub(amount);\n        accounted[token] = accounted[token].sub(amount);\n\n        withdrawTo(msg.sender, token, amount);\n\n        emit Withdrawn(msg.sender, token, amount);\n    }\n\n    /// @dev Approves an spender to trade balances of the sender.\n    /// @param spender Address of the spender to approve.\n    function approve(address spender) external {\n        require(spenders[spender]);\n        approved[msg.sender][spender] = true;\n        emit Approved(msg.sender, spender);\n    }\n\n    /// @dev Unapproves an spender to trade balances of the sender.\n    /// @param spender Address of the spender to unapprove.\n    function unapprove(address spender) external {\n        approved[msg.sender][spender] = false;\n        emit Unapproved(msg.sender, spender);\n    }\n\n    /// @dev Adds a spender.\n    /// @param spender Address of the spender.\n    function addSpender(address spender) external onlyOwner {\n        require(spender != 0x0);\n        spenders[spender] = true;\n        latest = spender;\n        emit AddedSpender(spender);\n    }\n\n    /// @dev Removes a spender.\n    /// @param spender Address of the spender.\n    function removeSpender(address spender) external onlyOwner {\n        spenders[spender] = false;\n        emit RemovedSpender(spender);\n    }\n\n    /// @dev Transfers balances of a token between users.\n    /// @param token Address of the token to transfer.\n    /// @param from Address of the user to transfer tokens from.\n    /// @param to Address of the user to transfer tokens to.\n    /// @param amount Amount of tokens to transfer.\n    function transfer(address token, address from, address to, uint amount) external onlySpender onlyApproved(from) {\n        // We do not check the balance here, as SafeMath will revert if sub / add fail. Due to over/underflows.\n        require(amount > 0);\n        balances[token][from] = balances[token][from].sub(amount);\n        balances[token][to] = balances[token][to].add(amount);\n    }\n\n    /// @dev Returns if an spender has been approved by a user.\n    /// @param user Address of the user.\n    /// @param spender Address of the spender.\n    /// @return Boolean whether spender has been approved.\n    function isApproved(address user, address spender) external view returns (bool) {\n        return approved[user][spender];\n    }\n\n    /// @dev Returns if an address has been approved as a spender.\n    /// @param spender Address of the spender.\n    /// @return Boolean whether spender has been approved.\n    function isSpender(address spender) external view returns (bool) {\n        return spenders[spender];\n    }\n\n    function latestSpender() external view returns (address) {\n        return latest;\n    }\n\n    function tokenFallback(address from, uint value, bytes) public {\n        depositFor(from, msg.sender, value);\n    }\n\n    function tokensReceived(address, address from, address, uint amount, bytes, bytes) public {\n        if (!isERC777[msg.sender]) {\n            isERC777[msg.sender] = true;\n        }\n\n        depositFor(from, msg.sender, amount);\n    }\n\n    /// @dev Marks a token as an ERC777 token.\n    /// @param token Address of the token.\n    function setERC777(address token) public onlyOwner {\n        isERC777[token] = true;\n    }\n\n    /// @dev Unmarks a token as an ERC777 token.\n    /// @param token Address of the token.\n    function unsetERC777(address token) public onlyOwner {\n        isERC777[token] = false;\n    }\n\n    /// @dev Allows owner to withdraw tokens accidentally sent to the contract.\n    /// @param token Address of the token to withdraw.\n    function withdrawOverflow(address token) public onlyOwner {\n        withdrawTo(msg.sender, token, overflow(token));\n    }\n\n    /// @dev Returns the balance of a user for a specified token.\n    /// @param token Address of the token.\n    /// @param user Address of the user.\n    /// @return Balance for the user.\n    function balanceOf(address token, address user) public view returns (uint) {\n        return balances[token][user];\n    }\n\n    /// @dev Calculates how many tokens were accidentally sent to the contract.\n    /// @param token Address of the token to calculate for.\n    /// @return Amount of tokens not accounted for.\n    function overflow(address token) internal view returns (uint) {\n        if (token == ETH) {\n            return address(this).balance.sub(accounted[token]);\n        }\n\n        return ERC20(token).balanceOf(this).sub(accounted[token]);\n    }\n\n    /// @dev Accounts for token deposits.\n    /// @param user Address of the user who deposited.\n    /// @param token Address of the token deposited.\n    /// @param amount Amount of tokens deposited.\n    function depositFor(address user, address token, uint amount) private {\n        balances[token][user] = balances[token][user].add(amount);\n        accounted[token] = accounted[token].add(amount);\n        emit Deposited(user, token, amount);\n    }\n\n    /// @dev Withdraws tokens to user.\n    /// @param user Address of the target user.\n    /// @param token Address of the token.\n    /// @param amount Amount of tokens.\n    function withdrawTo(address user, address token, uint amount) private {\n        if (token == ETH) {\n            user.transfer(amount);\n            return;\n        }\n\n        if (isERC777[token]) {\n            ERC777(token).send(user, amount);\n            return;\n        }\n\n        require(ERC20(token).transfer(user, amount));\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setERC777\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawOverflow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestSpender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"removeSpender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unsetERC777\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"isSpender\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isERC777\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"addSpender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"unapprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Unapproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"AddedSpender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"RemovedSpender\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b604051602080611fd483398101604052808051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff166329965a1d3060405180807f455243373737546f6b656e73526563697069656e74000000000000000000000081525060150190506040518091039020306040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b151561017e57600080fd5b5af1151561018b57600080fd5b50505050611e368061019e6000396000f30060606040526004361061011c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806223de29146101215780632670bdf0146102275780632f54bf6e146102605780633a30452a146102b157806347e7ef24146102ea5780636f362c2b146103215780638322fff2146103765780638ce5877c146103cb5780638da5cb5b14610404578063900888a3146104595780639a206ece14610492578063a389783e146104e3578063ab7b70d314610553578063c0ee0b8a146105a4578063daea85c514610629578063e7e31e7a14610662578063f18d03cc1461069b578063f2fde38b1461071b578063f3fef3a314610754578063f7888aec14610796578063fbf1f78a14610802575b600080fd5b341561012c57600080fd5b610225600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061083b565b005b341561023257600080fd5b61025e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108f9565b005b341561026b57600080fd5b610297600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610967565b604051808215151515815260200191505060405180910390f35b34156102bc57600080fd5b6102e8600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109c0565b005b61031f600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109ea565b005b341561032c57600080fd5b610334610b7a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561038157600080fd5b610389610ba4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103d657600080fd5b610402600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ba9565b005b341561040f57600080fd5b610417610c5b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561046457600080fd5b610490600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c80565b005b341561049d57600080fd5b6104c9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cef565b604051808215151515815260200191505060405180910390f35b34156104ee57600080fd5b610539600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d45565b604051808215151515815260200191505060405180910390f35b341561055e57600080fd5b61058a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dd9565b604051808215151515815260200191505060405180910390f35b34156105af57600080fd5b610627600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610df9565b005b341561063457600080fd5b610660600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e09565b005b341561066d57600080fd5b610699600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f53565b005b34156106a657600080fd5b610719600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061106c565b005b341561072657600080fd5b610752600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061138e565b005b341561075f57600080fd5b610794600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506113e5565b005b34156107a157600080fd5b6107ec600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611632565b6040518082815260200191505060405180910390f35b341561080d57600080fd5b610839600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116b9565b005b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156108e65760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b6108f18533856117ab565b505050505050565b61090233610967565b151561090d57600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008173ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b6109c933610967565b15156109d457600080fd5b6109e733826109e2846119d6565b611b86565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610a265750600034145b1515610a3157600080fd5b819050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a7157349050610b6a565b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1515610b4757600080fd5b5af11515610b5457600080fd5b505050604051805190501515610b6957600080fd5b5b610b753384836117ab565b505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081565b610bb233610967565b1515610bbd57600080fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f0e2fc808ab0ead56889f8ff2a8ea0841ba4c0b8311607a902eb24b834857e1b560405160405180910390a250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c8933610967565b1515610c9457600080fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60016020528060005260406000206000915054906101000a900460ff1681565b610e048333846117ab565b505050565b600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610e6157600080fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167faad2833c9fd7a3de33f301e5186ee84d1a5753ce32de6b97baedaac4b92b55fc60405160405180910390a350565b610f5c33610967565b1515610f6757600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1614151515610f8d57600080fd5b6001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f8fd571ab479506dd07023e78f221245916b6cb54285d954030be2cfb1674657a60405160405180910390a250565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156110c457600080fd5b82600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561115a57600080fd5b60008211151561116957600080fd5b6111f882600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dd390919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061130782600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dec90919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b61139733610967565b15156113a257600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b806113f08333611632565b101515156113fd57600080fd5b61148c81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dd390919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061155e81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dd390919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115ac338383611b86565b3373ffffffffffffffffffffffffffffffffffffffff167fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb8383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a25050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1ab270601cc6b54dd5e8ce5c70dbac96a01ff12939e4e76488df62adc8e6837360405160405180910390a350565b61183a81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dec90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061190c81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dec90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a78383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a2505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a7c57611a75600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020543073ffffffffffffffffffffffffffffffffffffffff1631611dd390919063ffffffff16565b9050611b81565b611b7e600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515611b5957600080fd5b5af11515611b6657600080fd5b50505060405180519050611dd390919063ffffffff16565b90505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c00578273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515611bfb57600080fd5b611dce565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611d09578173ffffffffffffffffffffffffffffffffffffffff1663d0679d3484836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1515611cf457600080fd5b5af11515611d0157600080fd5b505050611dce565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611dab57600080fd5b5af11515611db857600080fd5b505050604051805190501515611dcd57600080fd5b5b505050565b6000828211151515611de157fe5b818303905092915050565b6000808284019050838110151515611e0057fe5b80915050929150505600a165627a7a72305820583e1412bcaa8257094a232112e08423880683cfd0f2895c01e8d2af7afabe630029000000000000000000000000991a1bcb077599290d7305493c9a630c20f8b798",
  "constructorArguments": "000000000000000000000000991a1bcb077599290d7305493c9a630c20f8b798"
}