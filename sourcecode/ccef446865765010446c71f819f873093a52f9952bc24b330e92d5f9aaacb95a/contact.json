{
  "address": "0xa6330f3429c75747e735dc8590cf9cb75c31e013",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RemeCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-31\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardBurnableToken.sol\n\n/**\n * @title Standard Burnable Token\n * @dev Adds burnFrom method to ERC20 implementations\n */\ncontract StandardBurnableToken is BurnableToken, StandardToken {\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _burn(_from, _value);\n  }\n}\n\n// File: contracts/RemeCoin.sol\n\n/**\n * @title RemeCoin\n * @author https://bit-sentinel.com\n */\ncontract RemeCoin is MintableToken, PausableToken, StandardBurnableToken, DetailedERC20 {\n    event EnabledFees();\n    event DisabledFees();\n    event FeeChanged(uint256 fee);\n    event FeeThresholdChanged(uint256 feeThreshold);\n    event FeeBeneficiaryChanged(address indexed feeBeneficiary);\n    event EnabledWhitelist();\n    event DisabledWhitelist();\n    event ChangedWhitelistManager(address indexed whitelistManager);\n    event AddedRecipientToWhitelist(address indexed recipient);\n    event AddedSenderToWhitelist(address indexed sender);\n    event RemovedRecipientFromWhitelist(address indexed recipient);\n    event RemovedSenderFromWhitelist(address indexed sender);\n\n    // If the token whitelist feature is enabled or not.\n    bool public whitelist = true;\n\n    // Address of the whitelist manager.\n    address public whitelistManager;\n\n    // Addresses that can receive tokens.\n    mapping(address => bool) public whitelistedRecipients;\n\n    // Addresses that can send tokens.\n    mapping(address => bool) public whitelistedSenders;\n\n    // Fee taken from transfers.\n    uint256 public fee;\n\n    // If the fee mechanism is enabled.\n    bool public feesEnabled;\n\n    // Address of the fee beneficiary.\n    address public feeBeneficiary;\n\n    // Value from which the fee mechanism applies.\n    uint256 public feeThreshold;\n\n    /**\n     * @dev Initialize the RemeCoin and transfer the initialBalance to the\n     *      initialAccount.\n     * @param _initialAccount The account that will receive the initial balance.\n     * @param _initialBalance The initial balance of tokens.\n     * @param _fee uint256 The fee percentage to be applied. Has 4 decimals.\n     * @param _feeBeneficiary address The beneficiary of the fees.\n     * @param _feeThreshold uint256 The amount of when the transfers fees will be applied.\n     */\n    constructor(\n        address _initialAccount,\n        uint256 _initialBalance,\n        uint256 _fee,\n        address _feeBeneficiary,\n        uint256 _feeThreshold\n    )\n        DetailedERC20(\"REME Coin\", \"REME\", 18)\n        public\n    {\n        require(_fee != uint256(0) && _fee <= uint256(100 * (10 ** 4)));\n        require(_feeBeneficiary != address(0));\n        require(_feeThreshold != uint256(0));\n\n        fee = _fee;\n        feeBeneficiary = _feeBeneficiary;\n        feeThreshold = _feeThreshold;\n\n        totalSupply_ = _initialBalance;\n        balances[_initialAccount] = _initialBalance;\n        emit Transfer(address(0), _initialAccount, _initialBalance);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the whitelistManager.\n     */\n    modifier onlyWhitelistManager() {\n        require(msg.sender == whitelistManager);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract has transfer fees enabled.\n     */\n    modifier whenFeesEnabled() {\n        require(feesEnabled);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract has transfer fees disabled.\n     */\n    modifier whenFeesDisabled() {\n        require(!feesEnabled);\n        _;\n    }\n\n    /**\n     * @dev Enable the whitelist feature.\n     */\n    function enableWhitelist() external onlyOwner {\n        require(\n            !whitelist,\n            'Whitelist is already enabled'\n        );\n\n        whitelist = true;\n        emit EnabledWhitelist();\n    }\n    \n    /**\n     * @dev Enable the whitelist feature.\n     */\n    function disableWhitelist() external onlyOwner {\n        require(\n            whitelist,\n            'Whitelist is already disabled'\n        );\n\n        whitelist = false;\n        emit DisabledWhitelist();\n    }\n\n    /**\n     * @dev Change the whitelist manager address.\n     * @param _whitelistManager address\n     */\n    function changeWhitelistManager(address _whitelistManager) external onlyOwner\n    {\n        require(_whitelistManager != address(0));\n\n        whitelistManager = _whitelistManager;\n\n        emit ChangedWhitelistManager(whitelistManager);\n    }\n\n    /**\n     * @dev Add recipient to the whitelist.\n     * @param _recipient address of the recipient\n     */\n    function addRecipientToWhitelist(address _recipient) external onlyWhitelistManager\n    {\n        require(\n            !whitelistedRecipients[_recipient],\n            'Recipient already whitelisted'\n        );\n\n        whitelistedRecipients[_recipient] = true;\n\n        emit AddedRecipientToWhitelist(_recipient);\n    }\n\n    /**\n     * @dev Add sender to the whitelist.\n     * @param _sender address of the sender\n     */\n    function addSenderToWhitelist(address _sender) external onlyWhitelistManager\n    {\n        require(\n            !whitelistedSenders[_sender],\n            'Sender already whitelisted'\n        );\n\n        whitelistedSenders[_sender] = true;\n\n        emit AddedSenderToWhitelist(_sender);\n    }\n\n    /**\n     * @dev Remove recipient from the whitelist.\n     * @param _recipient address of the recipient\n     */\n    function removeRecipientFromWhitelist(address _recipient) external onlyWhitelistManager\n    {\n        require(\n            whitelistedRecipients[_recipient],\n            'Recipient not whitelisted'\n        );\n\n        whitelistedRecipients[_recipient] = false;\n\n        emit RemovedRecipientFromWhitelist(_recipient);\n    }\n\n    /**\n     * @dev Remove sender from the whitelist.\n     * @param _sender address of the sender\n     */\n    function removeSenderFromWhitelist(address _sender) external onlyWhitelistManager\n    {\n        require(\n            whitelistedSenders[_sender],\n            'Sender not whitelisted'\n        );\n\n        whitelistedSenders[_sender] = false;\n\n        emit RemovedSenderFromWhitelist(_sender);\n    }\n\n    /**\n     * @dev Called by owner to enable fee take\n     */\n    function enableFees()\n        external\n        onlyOwner\n        whenFeesDisabled\n    {\n        feesEnabled = true;\n        emit EnabledFees();\n    }\n\n    /**\n     * @dev Called by owner to disable fee take\n     */\n    function disableFees()\n        external\n        onlyOwner\n        whenFeesEnabled\n    {\n        feesEnabled = false;\n        emit DisabledFees();\n    }\n\n    /**\n     * @dev Called by owner to set fee percentage.\n     * @param _fee uint256 The new fee percentage.\n     */\n    function setFee(uint256 _fee)\n        external\n        onlyOwner\n    {\n        require(_fee != uint256(0) && _fee <= 100 * (10 ** 4));\n        fee = _fee;\n        emit FeeChanged(fee);\n    }\n\n    /**\n     * @dev Called by owner to set fee beeneficiary.\n     * @param _feeBeneficiary address The new fee beneficiary.\n     */\n    function setFeeBeneficiary(address _feeBeneficiary)\n        external\n        onlyOwner\n    {\n        require(_feeBeneficiary != address(0));\n        feeBeneficiary = _feeBeneficiary;\n        emit FeeBeneficiaryChanged(feeBeneficiary);\n    }\n\n    /**\n     * @dev Called by owner to set fee threshold.\n     * @param _feeThreshold uint256 The new fee threshold.\n     */\n    function setFeeThreshold(uint256 _feeThreshold)\n        external\n        onlyOwner\n    {\n        require(_feeThreshold != uint256(0));\n        feeThreshold = _feeThreshold;\n        emit FeeThresholdChanged(feeThreshold);\n    }\n\n    /**\n     * @dev transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool)\n    {\n        if (whitelist) {\n            require (\n                whitelistedSenders[msg.sender]\n                || whitelistedRecipients[_to]\n                || msg.sender == owner\n                || _to == owner,\n                'Sender or recipient not whitelisted'\n            );\n        }\n\n        uint256 _feeTaken;\n\n        if (msg.sender != owner && msg.sender != feeBeneficiary) {\n            (_feeTaken, _value) = applyFees(_value);\n        }\n\n        if (_feeTaken > 0) {\n            require (super.transfer(feeBeneficiary, _feeTaken) && super.transfer(_to, _value));\n\n            return true;\n        }\n\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool)\n    {\n        if (whitelist) {\n            require (\n                whitelistedSenders[_from]\n                || whitelistedRecipients[_to]\n                || _from == owner\n                || _to == owner,\n                'Sender or recipient not whitelisted'\n            );\n        }\n\n        uint256 _feeTaken;\n        (_feeTaken, _value) = applyFees(_value);\n        \n        if (_feeTaken > 0) {\n            require (super.transferFrom(_from, feeBeneficiary, _feeTaken) && super.transferFrom(_from, _to, _value));\n            \n            return true;\n        }\n\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * @dev Called internally for applying fees to the transfer value.\n     * @param _value uint256\n     */\n    function applyFees(uint256 _value)\n        internal\n        view\n        returns (uint256 _feeTaken, uint256 _revisedValue)\n    {\n        _revisedValue = _value;\n\n        if (feesEnabled && _revisedValue >= feeThreshold) {\n            _feeTaken = _revisedValue.mul(fee).div(uint256(100 * (10 ** 4)));\n            _revisedValue = _revisedValue.sub(_feeTaken);\n        }\n    }\n}",
  "bytecode": "60806040526000600360146101000a81548160ff0219169083151502179055506000600360156101000a81548160ff0219169083151502179055506001600660016101000a81548160ff0219169083151502179055503480156200006257600080fd5b5060405160a0806200400983398101806040528101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050506040805190810160405280600981526020017f52454d4520436f696e00000000000000000000000000000000000000000000008152506040805190810160405280600481526020017f52454d4500000000000000000000000000000000000000000000000000000000815250601233600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600490805190602001906200017592919062000326565b5081600590805190602001906200018e92919062000326565b5080600660006101000a81548160ff021916908360ff16021790555050505060008314158015620001c25750620f42408311155b1515620001ce57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200020b57600080fd5b600081141515156200021c57600080fd5b8260098190555081600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600b8190555083600181905550836000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a35050505050620003d5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200036957805160ff19168380011785556200039a565b828001600101855582156200039a579182015b82811115620003995782518255916020019190600101906200037c565b5b509050620003a99190620003ad565b5090565b620003d291905b80821115620003ce576000816000905550600101620003b4565b5090565b90565b613c2480620003e56000396000f300608060405260043610610204576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301a9a3521461020957806305d2035b1461024c57806306fdde031461027b578063095ea7b31461030b5780630aa7c21e1461037057806313c5d252146103b357806318160ddd1461040e57806323b872dd1461043957806326563b40146104be578063272efc6914610515578063313ce56714610570578063368f5bd5146105a15780633f113a61146105b85780633f4ba83a146105fb57806340c10f191461061257806342966c6814610677578063492fb343146106a45780635a0a3d82146106fb5780635c975abb1461073e578063661884631461076d57806369cee758146107d257806369fe0e2d1461081557806370a0823114610842578063715018a61461089957806379cc6790146108b05780637d64bcb4146108fd5780638456cb591461092c5780638da5cb5b1461094357806393e59dc11461099a57806395d89b41146109c9578063a64e4f8a14610a59578063a9059cbb14610a88578063c49fc0d114610aed578063cb4e162b14610b30578063cdfb2b4e14610b5b578063ce404b2314610b72578063d6b0f48414610b89578063d73dd62314610ba0578063dd62ed3e14610c05578063ddca3f4314610c7c578063ec1636b814610ca7578063f2fde38b14610cd4575b600080fd5b34801561021557600080fd5b5061024a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d17565b005b34801561025857600080fd5b50610261610ed2565b604051808215151515815260200191505060405180910390f35b34801561028757600080fd5b50610290610ee5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102d05780820151818401526020810190506102b5565b50505050905090810190601f1680156102fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561031757600080fd5b50610356600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f83565b604051808215151515815260200191505060405180910390f35b34801561037c57600080fd5b506103b1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fb3565b005b3480156103bf57600080fd5b506103f4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061116f565b604051808215151515815260200191505060405180910390f35b34801561041a57600080fd5b5061042361118f565b6040518082815260200191505060405180910390f35b34801561044557600080fd5b506104a4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611199565b604051808215151515815260200191505060405180910390f35b3480156104ca57600080fd5b506104d3611421565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052157600080fd5b50610556600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611447565b604051808215151515815260200191505060405180910390f35b34801561057c57600080fd5b50610585611467565b604051808260ff1660ff16815260200191505060405180910390f35b3480156105ad57600080fd5b506105b661147a565b005b3480156105c457600080fd5b506105f9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061153b565b005b34801561060757600080fd5b506106106116f7565b005b34801561061e57600080fd5b5061065d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117b7565b604051808215151515815260200191505060405180910390f35b34801561068357600080fd5b506106a26004803603810190808035906020019092919050505061199d565b005b3480156106b057600080fd5b506106b96119aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561070757600080fd5b5061073c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119d0565b005b34801561074a57600080fd5b50610753611b11565b604051808215151515815260200191505060405180910390f35b34801561077957600080fd5b506107b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b24565b604051808215151515815260200191505060405180910390f35b3480156107de57600080fd5b50610813600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b54565b005b34801561082157600080fd5b5061084060048036038101908080359060200190929190505050611d0f565b005b34801561084e57600080fd5b50610883600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dcd565b6040518082815260200191505060405180910390f35b3480156108a557600080fd5b506108ae611e15565b005b3480156108bc57600080fd5b506108fb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611f1a565b005b34801561090957600080fd5b506109126120c2565b604051808215151515815260200191505060405180910390f35b34801561093857600080fd5b5061094161218a565b005b34801561094f57600080fd5b5061095861224b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109a657600080fd5b506109af612271565b604051808215151515815260200191505060405180910390f35b3480156109d557600080fd5b506109de612284565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a1e578082015181840152602081019050610a03565b50505050905090810190601f168015610a4b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a6557600080fd5b50610a6e612322565b604051808215151515815260200191505060405180910390f35b348015610a9457600080fd5b50610ad3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612335565b604051808215151515815260200191505060405180910390f35b348015610af957600080fd5b50610b2e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061266b565b005b348015610b3c57600080fd5b50610b456127ac565b6040518082815260200191505060405180910390f35b348015610b6757600080fd5b50610b706127b2565b005b348015610b7e57600080fd5b50610b876128dc565b005b348015610b9557600080fd5b50610b9e61299c565b005b348015610bac57600080fd5b50610beb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612ac5565b604051808215151515815260200191505060405180910390f35b348015610c1157600080fd5b50610c66600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612af5565b6040518082815260200191505060405180910390f35b348015610c8857600080fd5b50610c91612b7c565b6040518082815260200191505060405180910390f35b348015610cb357600080fd5b50610cd260048036038101908080359060200190929190505050612b82565b005b348015610ce057600080fd5b50610d15600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c31565b005b600660029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d7357600080fd5b600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610e34576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53656e646572206e6f742077686974656c69737465640000000000000000000081525060200191505060405180910390fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f0fa06fe8f6d29af0e42334b9bed3b91b79c035cfb45e3fd41e93be251641e52d60405160405180910390a250565b600360149054906101000a900460ff1681565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f7b5780601f10610f5057610100808354040283529160200191610f7b565b820191906000526020600020905b815481529060010190602001808311610f5e57829003601f168201915b505050505081565b6000600360159054906101000a900460ff16151515610fa157600080fd5b610fab8383612c99565b905092915050565b600660029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561100f57600080fd5b600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156110d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f526563697069656e7420616c72656164792077686974656c697374656400000081525060200191505060405180910390fd5b6001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167fca10c1e971c07fc856e7c0427024a4173bc436979da1139888f82fecff3cb91460405160405180910390a250565b60076020528060005260406000206000915054906101000a900460ff1681565b6000600154905090565b600080600660019054906101000a900460ff161561139d57600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806112525750600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b806112aa5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b806113025750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b151561139c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f53656e646572206f7220726563697069656e74206e6f742077686974656c697381526020017f746564000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b6113a683612d8b565b8094508192505050600081111561140b576113e485600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683612dfb565b80156113f757506113f6858585612dfb565b5b151561140257600080fd5b60019150611419565b611416858585612dfb565b91505b509392505050565b600660029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915054906101000a900460ff1681565b600660009054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114d657600080fd5b600a60009054906101000a900460ff161515156114f257600080fd5b6001600a60006101000a81548160ff0219169083151502179055507f7417291631b0d3d4fdfd8b042e6c418df12cb2edfa5fa621e6ab15e016e1de3b60405160405180910390a1565b600660029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561159757600080fd5b600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f53656e64657220616c72656164792077686974656c697374656400000000000081525060200191505060405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f239f0f568c17b81db263ec37afde109b60a6bccde8604ad8d754f8bfb07e7c4360405160405180910390a250565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561175357600080fd5b600360159054906101000a900460ff16151561176e57600080fd5b6000600360156101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561181557600080fd5b600360149054906101000a900460ff1615151561183157600080fd5b61184682600154612e2d90919063ffffffff16565b60018190555061189d826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6119a73382612e49565b50565b600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a2c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a6857600080fd5b80600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f72732cc84c14dd769753fde7f319ec4f7ab312526b806237328442ff40219f5960405160405180910390a250565b600360159054906101000a900460ff1681565b6000600360159054906101000a900460ff16151515611b4257600080fd5b611b4c8383612ffc565b905092915050565b600660029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bb057600080fd5b600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611c71576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f526563697069656e74206e6f742077686974656c69737465640000000000000081525060200191505060405180910390fd5b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f7be31183dddf7d785ee28fef865471a88779f95165759f7c6696d7a77378e5ad60405160405180910390a250565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d6b57600080fd5b60008114158015611d7f5750620f42408111155b1515611d8a57600080fd5b806009819055507f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c36009546040518082815260200191505060405180910390a150565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e7157600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515611fa557600080fd5b61203481600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461328e90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120be8282612e49565b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561212057600080fd5b600360149054906101000a900460ff1615151561213c57600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121e657600080fd5b600360159054906101000a900460ff1615151561220257600080fd5b6001600360156101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660019054906101000a900460ff1681565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561231a5780601f106122ef5761010080835404028352916020019161231a565b820191906000526020600020905b8154815290600101906020018083116122fd57829003601f168201915b505050505081565b600a60009054906101000a900460ff1681565b600080600660019054906101000a900460ff161561253957600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806123ee5750600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b806124465750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b8061249e5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1515612538576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f53656e646572206f7220726563697069656e74206e6f742077686974656c697381526020017f746564000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156125e55750600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156125fc576125f383612d8b565b80945081925050505b600081111561265757612631600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826132a7565b8015612643575061264284846132a7565b5b151561264e57600080fd5b60019150612664565b61266184846132a7565b91505b5092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156126c757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561270357600080fd5b80600660026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff6a829c3472c8a9bf9e55455eb8ad5659e9a1eafaa759ccd34cc7a2559e3eae160405160405180910390a250565b600b5481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561280e57600080fd5b600660019054906101000a900460ff16151515612893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f57686974656c69737420697320616c726561647920656e61626c65640000000081525060200191505060405180910390fd5b6001600660016101000a81548160ff0219169083151502179055507fb7095e67ffa33b6bb16d54d96e04b5a5fc85e15e390297fcd232215a65f61eef60405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561293857600080fd5b600a60009054906101000a900460ff16151561295357600080fd5b6000600a60006101000a81548160ff0219169083151502179055507f547bc3a54519d3f6c1e04cc5171e3e17d5e6229cd97bdab480406b082c718b9960405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156129f857600080fd5b600660019054906101000a900460ff161515612a7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f57686974656c69737420697320616c72656164792064697361626c656400000081525060200191505060405180910390fd5b6000600660016101000a81548160ff0219169083151502179055507f444d749f50748902c0619b43347eae6dc13e5be86420419b6c606e6e3fc9822260405160405180910390a1565b6000600360159054906101000a900460ff16151515612ae357600080fd5b612aed83836132d7565b905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60095481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bde57600080fd5b60008114151515612bee57600080fd5b80600b819055507f1177e65c300bac50a39484c92738eb524029130356021f0b10786a91e6ec4f2d600b546040518082815260200191505060405180910390a150565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c8d57600080fd5b612c96816134d3565b50565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600080829050600a60009054906101000a900460ff168015612daf5750600b548110155b15612df657612dde620f4240612dd0600954846135cf90919063ffffffff16565b61360790919063ffffffff16565b9150612df3828261328e90919063ffffffff16565b90505b915091565b6000600360159054906101000a900460ff16151515612e1957600080fd5b612e2484848461361d565b90509392505050565b60008183019050828110151515612e4057fe5b80905092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515612e9657600080fd5b612ee7816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461328e90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612f3e8160015461328e90919063ffffffff16565b6001819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808310151561310e576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506131a2565b613121838261328e90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600082821115151561329c57fe5b818303905092915050565b6000600360159054906101000a900460ff161515156132c557600080fd5b6132cf83836139d8565b905092915050565b600061336882600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2d90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561350f57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808314156135e25760009050613601565b81830290508183828115156135f357fe5b041415156135fd57fe5b8090505b92915050565b6000818381151561361457fe5b04905092915050565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561366c57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156136f757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561373357600080fd5b613784826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461328e90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613817826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506138e882600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461328e90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515613a2757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515613a6357600080fd5b613ab4826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461328e90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613b47826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e2d90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050929150505600a165627a7a723058201269c77a78b4790c3e9e334a60a344e62af4f7dfe3bc7e244fdcbb4bc37cdce00029000000000000000000000000074dde9eabe58a3d01f631f7008ecdf1d9359481000000000000000000000000000000000000000001363156bbee3016d70000000000000000000000000000000000000000000000000000000000000000002710000000000000000000000000cb5246028707dd2b348d2dbf03f3292cc283f1ec0000000000000000000000000000000000000000000000000de0b6b3a7640000",
  "constructorArguments": "000000000000000000000000074dde9eabe58a3d01f631f7008ecdf1d9359481000000000000000000000000000000000000000001363156bbee3016d70000000000000000000000000000000000000000000000000000000000000000002710000000000000000000000000cb5246028707dd2b348d2dbf03f3292cc283f1ec0000000000000000000000000000000000000000000000000de0b6b3a7640000"
}