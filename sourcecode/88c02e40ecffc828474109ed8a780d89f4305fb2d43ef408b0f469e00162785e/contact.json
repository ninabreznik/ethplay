{
  "address": "0x739d2fccf04889965b6f4eb7830f5b7270fab2c1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Orocrypt Gold Token",
  "contractName": "OCG",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-30\n*/\n\npragma solidity 0.4.19;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    //Variables\n    address public owner;\n\n    address public newOwner;\n\n    //    Modifiers\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0));\n        newOwner = _newOwner;\n\n    }\n\n    function acceptOwnership() public {\n        if (msg.sender == newOwner) {\n            owner = newOwner;\n        }\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n\n    using SafeMath for uint256;\n\n    mapping (address => uint256) public balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood:\n        https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract OCGERC20 is StandardToken, Ownable {\n\n    using SafeMath for uint256;\n\n    /* Public variables of the token */\n    uint256 public creationBlock;\n\n    uint8 public decimals;\n\n    string public name;\n\n    string public symbol;\n\n    string public standard;\n\n    bool public locked;\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function OCGERC20(\n        uint256 _totalSupply,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transferAllSupplyToOwner,\n        bool _locked\n    ) public {\n        standard = \"ERC20 0.1\";\n        locked = _locked;\n        totalSupply = _totalSupply;\n\n        if (_transferAllSupplyToOwner) {\n            balances[msg.sender] = totalSupply;\n        } else {\n            balances[this] = totalSupply;\n        }\n        name = _tokenName;\n        // Set the name for display purposes\n        symbol = _tokenSymbol;\n        // Set the symbol for display purposes\n        decimals = _decimalUnits;\n        // Amount of decimals for display purposes\n        creationBlock = block.number;\n    }\n\n    /* public methods */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(locked == false);\n        return super.transfer(_to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (locked) {\n            return false;\n        }\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        if (locked) {\n            return false;\n        }\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n        if (locked) {\n            return false;\n        }\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        if (locked) {\n            return false;\n        }\n\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function transferFee(address _from, address _to, uint256 _value) internal returns (bool success) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        return true;\n    }\n\n    function burnInternal(address _address, uint256 _value) internal returns (bool) {\n        balances[_address] = balances[_address].sub(_value);\n        Transfer(_address, address(0), _value);\n        return true;\n    }\n\n}\n\n/*\nThis contract manages the minters and the modifier to allow mint to happen only if called by minters\nThis contract contains basic minting functionality though\n*/\ncontract MintingERC20 is OCGERC20 {\n\n    // Variables\n    mapping (address => bool) public minters;\n\n    // Modifiers\n    modifier onlyMinters() {\n        require(true == minters[msg.sender]);\n        _;\n    }\n\n    function MintingERC20(\n        uint256 _initialSupply,\n        string _tokenName,\n        uint8 _decimals,\n        string _symbol,\n        bool _transferAllSupplyToOwner,\n        bool _locked\n    )\n    public OCGERC20(\n        _initialSupply,\n        _tokenName,\n        _decimals,\n        _symbol,\n        _transferAllSupplyToOwner,\n        _locked\n    )\n    {\n        standard = \"MintingERC20 0.1\";\n        minters[msg.sender] = true;\n    }\n\n    function addMinter(address _newMinter) public onlyOwner {\n        minters[_newMinter] = true;\n    }\n\n    function removeMinter(address _minter) public onlyOwner {\n        minters[_minter] = false;\n    }\n\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\n        if (_amount == uint256(0)) {\n            return uint256(0);\n        }\n\n        totalSupply = totalSupply.add(_amount);\n        balances[_addr] = balances[_addr].add(_amount);\n        Transfer(address(0), _addr, _amount);\n\n        return _amount;\n    }\n}\n\ncontract OCG is MintingERC20 {\n\n    OCGFee public fees;\n\n    SellableToken public sellableToken;\n\n    uint256 public deployedAt;\n\n    address public burnAddress;\n\n    bool public isInitialValuesFetched;\n\n    mapping (address => uint256) public burnAmount;\n\n    mapping (address => uint256) public lastCharge;\n\n    event TransferFee(address indexed from, uint256 value);\n\n    event StorageFee(address indexed from, uint256 value);\n\n    modifier onlySellableContract() {\n        require(msg.sender == address(sellableToken));\n        _;\n    }\n\n    function OCG(\n        string _tokenName,\n        string _tokenSymbol,\n        uint8 _decimalUnits,\n        address _burnAddress,\n        bool _locked\n    ) public MintingERC20(\n        0,\n        _tokenName,\n        _decimalUnits,\n        _tokenSymbol,\n        false,\n        _locked\n    ) {\n        standard = \"OCG 0.1\";\n        deployedAt = now;\n        require(_burnAddress != address(0));\n        burnAddress = _burnAddress;\n    }\n\n    function fetchInitialValues(OCG _sourceAddress, address[7] _holders) public onlyOwner {\n        require(isInitialValuesFetched == false);\n        isInitialValuesFetched = true;\n\n        for (uint256 i = 0; i < _holders.length; i++) {\n            mint(_holders[i], _sourceAddress.balanceOf(_holders[i]));\n        }\n    }\n\n    function setLocked(bool _locked) public onlyOwner {\n        locked = _locked;\n    }\n\n    function setOCGFee(address _fees) public onlyOwner {\n        require(_fees != address(0));\n        fees = OCGFee(_fees);\n    }\n\n    function setSellableToken(address _sellable) public onlyOwner {\n        require(_sellable != address(0));\n        sellableToken = SellableToken(_sellable);\n    }\n\n    function setBurnAddress(address _burnAddress) public onlyOwner {\n        require(_burnAddress != address(0));\n        burnAddress = _burnAddress;\n    }\n\n    function burn(address _address) public onlyOwner {\n        if (burnAmount[_address] > 0) {\n            super.burnInternal(burnAddress, burnAmount[_address]);\n            burnAmount[_address] = 0;\n        }\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool status) {\n        require(locked == false && msg.sender != burnAddress);\n\n        uint256 valueToTransfer = _value;\n\n        if (_to == burnAddress) {\n            burnAmount[msg.sender] = burnAmount[msg.sender].add(valueToTransfer);\n        } else {\n            uint256 feeValue = transferFees(msg.sender, _to, _value);\n\n            valueToTransfer = _value.sub(feeValue);\n            if (valueToTransfer > balanceOf(msg.sender)) {\n                valueToTransfer = balanceOf(msg.sender);\n            }\n        }\n\n        status = super.transfer(_to, valueToTransfer);\n\n        sellableToken.updateFreeStorage(msg.sender, balanceOf(msg.sender));\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool status) {\n        require(locked == false && _from != burnAddress);\n\n        uint256 valueToTransfer = _value;\n\n        if (_to == burnAddress) {\n            burnAmount[_from] = burnAmount[_from].add(valueToTransfer);\n        } else {\n            uint256 feeValue = transferFees(_from, _to, _value);\n\n            valueToTransfer = _value.sub(feeValue);\n            if (valueToTransfer > balanceOf(_from)) {\n                valueToTransfer = balanceOf(_from);\n            }\n        }\n\n        status = super.transferFrom(_from, _to, valueToTransfer);\n        require(status == true);\n\n        sellableToken.updateFreeStorage(_from, balanceOf(_from));\n    }\n\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\n        uint256 mintedAmount = super.mint(_addr, _amount);\n\n        if (mintedAmount == _amount && lastCharge[_addr] == 0 && _amount > 0) {\n            lastCharge[_addr] = now;\n        }\n\n        return mintedAmount;\n    }\n\n    function payStorageFee(address _from) internal returns (bool) {\n        require(_from != address(0) && address(fees) != address(0) && address(sellableToken) != address(0));\n        uint256 _value = balanceOf(_from);\n        require(sellableToken.freeStorage(_from) <= _value);\n\n        bool status = true;\n        uint256 additionalAmount = 0;\n\n        if (sellableToken.freeStorage(_from) != 0) {\n            if (deployedAt.add(fees.offPeriod()) >= now) {\n                _value = _value.sub(sellableToken.freeStorage(_from));\n            } else if (lastCharge[_from] < deployedAt.add(fees.offPeriod())) {\n                additionalAmount = calculateStorageFee(\n                    _value.sub(sellableToken.freeStorage(_from)),\n                    deployedAt.add(fees.offPeriod()).sub(lastCharge[_from])\n                );\n                lastCharge[_from] = deployedAt.add(fees.offPeriod());\n            }\n        }\n\n        uint256 amount = calculateStorageFee(_value, now.sub(lastCharge[_from])).add(additionalAmount);\n        if (amount != 0 && balanceOf(_from) >= amount) {\n            status = super.transferFee(_from, fees.feeAddress(), amount);\n            StorageFee(_from, amount);\n        }\n\n        require(status == true);\n        lastCharge[_from] = now;\n\n        return status;\n    }\n\n    function calculateStorageFee(uint256 _value, uint256 _period) internal view returns (uint256) {\n        uint256 amount = 0;\n        if (_period.div(1 days) > 0 && _value > 0) {\n            amount = _value.mul(fees.feeAmount()).mul(_period).div(1 years).div(1000);\n        }\n\n        return amount;\n    }\n\n    function transferFees(address _from, address _to, uint256 _value) internal returns (uint256) {\n        require(address(fees) != address(0) && address(sellableToken) != address(0));\n\n        bool status = false;\n\n        if (fees.feeAmount() > 0) {\n            status = payStorageFee(_from);\n            if (status) {\n                status = payStorageFee(_to);\n            }\n        }\n\n        uint256 feeValue = 0;\n        if (fees.transferFee() > 0) {\n            feeValue = _value.mul(fees.transferFee()).div(uint(10) ** decimals);\n        }\n        if (status && feeValue > 0) {\n            status = super.transferFee(_from, fees.transferFeeAddress(), feeValue);\n            TransferFee(_from, feeValue);\n        }\n\n        require(status == true);\n\n        return feeValue;\n    }\n\n}\n\ncontract OCGFee is Ownable {\n\n    SellableToken public sellableToken;\n\n    using SafeMath for uint256;\n\n    uint256 public offPeriod = 3 years;\n\n    uint256 public offThreshold;\n\n    uint256 public feeAmount;\n\n    address public feeAddress;\n\n    address public transferFeeAddress;\n\n    uint256 public transferFee;\n\n    modifier onlySellableContract() {\n        require(msg.sender == address(sellableToken));\n        _;\n    }\n\n    function OCGFee(\n        uint256 _offThreshold,\n        address _feeAddress,\n        uint256 _feeAmount,//0.5% -> 5\n        address _transferFeeAddress,\n        uint256 _transferFee //0.04% -> 0.04 * 10 ^ decimals\n    )\n        public\n    {\n        require(_feeAddress != address(0) && _feeAmount >= 0 && _offThreshold > 0);\n        offThreshold = _offThreshold;\n        feeAddress = _feeAddress;\n        feeAmount = _feeAmount;\n\n        require(_transferFeeAddress != address(0) && _transferFee >= 0);\n        transferFeeAddress = _transferFeeAddress;\n        transferFee = _transferFee;\n    }\n\n    function setSellableToken(address _sellable) public onlyOwner {\n        require(_sellable != address(0));\n        sellableToken = SellableToken(_sellable);\n    }\n\n    function setStorageFee(\n        uint256 _offThreshold,\n        address _feeAddress,\n        uint256 _feeAmount //0.5% -> 5\n    ) public onlyOwner {\n        require(_feeAddress != address(0));\n\n        offThreshold = _offThreshold;\n        feeAddress = _feeAddress;\n        feeAmount = _feeAmount;\n    }\n\n    function decreaseThreshold(uint256 _value) public onlySellableContract {\n        if (offThreshold < _value) {\n            offThreshold = 0;\n        } else {\n            offThreshold = offThreshold.sub(_value);\n        }\n    }\n\n    function setTransferFee(address _transferFeeAddress, uint256 _transferFee) public onlyOwner returns (bool) {\n        if (_transferFeeAddress != address(0) && _transferFee >= 0) {\n            transferFeeAddress = _transferFeeAddress;\n            transferFee = _transferFee;\n\n            return true;\n        }\n\n        return false;\n    }\n\n}\n\ncontract Multivest is Ownable {\n    /* public variables */\n    mapping (address => bool) public allowedMultivests;\n\n    /* events */\n    event MultivestSet(address multivest);\n\n    event MultivestUnset(address multivest);\n\n    event Contribution(address _holder, uint256 tokens);\n\n    modifier onlyAllowedMultivests(address _address) {\n        require(true == allowedMultivests[_address]);\n        _;\n    }\n\n    /* constructor */\n    function Multivest(address _multivest) public {\n        allowedMultivests[_multivest] = true;\n    }\n\n    /* public methods */\n    function setAllowedMultivest(address _address) public onlyOwner {\n        allowedMultivests[_address] = true;\n    }\n\n    function unsetAllowedMultivest(address _address) public onlyOwner {\n        allowedMultivests[_address] = false;\n    }\n\n    function multivestBuy(\n        address _address,\n        uint256 _amount,\n        uint256 _value\n    ) public onlyAllowedMultivests(msg.sender) {\n        bool status = buy(_address, _amount, _value);\n\n        require(status == true);\n    }\n\n    function buy(address _address, uint256 _amount, uint256 _value) internal returns (bool);\n\n}\n\ncontract SellableToken is Multivest {\n\n    using SafeMath for uint256;\n\n    // The token being sold\n    OCG public ocg;\n\n    OCGFee public fees;\n\n    // amount of sold tokens\n    uint256 public soldTokens;\n\n    uint256 public minInvest;\n\n    mapping (address => uint256) public freeStorage;\n\n    modifier onlyOCGContract() {\n        require(msg.sender == address(ocg));\n        _;\n    }\n\n    function SellableToken(\n        address _ocg,\n        uint256 _minInvest //0.1 tokens -> 0.1 * 10 ^ decimals\n    )\n        public Multivest(msg.sender)\n    {\n        require(_minInvest > 0);\n        ocg = OCG(_ocg);\n\n        minInvest = _minInvest;\n    }\n\n    function setOCG(address _ocg) public onlyOwner {\n        require(_ocg != address(0));\n        ocg = OCG(_ocg);\n    }\n\n    function setOCGFee(address _fees) public onlyOwner {\n        require(_fees != address(0));\n        fees = OCGFee(_fees);\n    }\n\n    function updateFreeStorage(address _address, uint256 _value) public onlyOCGContract {\n        if (freeStorage[_address] > _value) {\n            freeStorage[_address] = _value;\n        }\n    }\n\n    function buy(address _address, uint256 _amount, uint256 _value) internal returns (bool) {\n        require(_address != address(0) && address(ocg) != address(0));\n\n        if (_amount == 0 || _amount < minInvest || _value == 0) {\n            return false;\n        }\n\n        uint256 mintedAmount = ocg.mint(_address, _amount);\n\n        require(mintedAmount == _amount);\n\n        onSuccessfulBuy(_address, _value, _amount);\n\n        return true;\n    }\n\n    function onSuccessfulBuy(address _address, uint256 _value, uint256 _amount) internal {\n        soldTokens = soldTokens.add(_amount);\n        if (fees.offThreshold() > 0) {\n            uint256 freeAmount = _amount;\n            if (fees.offThreshold() < _value) {\n                freeAmount = _amount.sub(_value.sub(fees.offThreshold()).mul(_amount).div(_value));\n            }\n\n            freeStorage[_address] = freeStorage[_address].add(freeAmount);\n        }\n\n        fees.decreaseThreshold(_value);\n    }\n\n}\n\ncontract Deposit is Multivest {\n\n    address public etherHolder;\n\n    function Deposit(\n        address _etherHolder\n    )\n        public Multivest(msg.sender)\n    {\n        require(_etherHolder != address(0));\n        etherHolder = _etherHolder;\n    }\n\n    function setEtherHolder(address _etherHolder) public onlyOwner {\n        require(_etherHolder != address(0));\n        etherHolder = _etherHolder;\n    }\n\n    function deposit(\n        address _address,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) public payable onlyAllowedMultivests(verify(keccak256(msg.sender), _v, _r, _s)) {\n        require(_address == msg.sender);\n        Contribution(msg.sender, msg.value);\n        etherHolder.transfer(msg.value);\n    }\n\n    function verify(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns (address) {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n\n        return ecrecover(keccak256(prefix, _hash), _v, _r, _s);\n    }\n\n    function buy(address _address, uint256 _amount, uint256 _value) internal returns (bool) {\n        _address = _address;\n        _amount = _amount;\n        _value = _value;\n        return true;\n    }\n\n}",
  "bytecode": "606060405234156200001057600080fd5b604051620023d5380380620023d583398101604052808051820191906020018051820191906020018051919060200180519190602001805160038054600160a060020a03191633600160a060020a031617905591506000905085848683858185858583856040805190810160405260098082527f455243323020302e3100000000000000000000000000000000000000000000006020830152908051620000bc92916020019062000263565b50600a805460ff191682151517905560008690558115620000f85760008054600160a060020a0333168252600160205260409091205562000114565b60008054600160a060020a033016825260016020526040909120555b60078580516200012992916020019062000263565b5060088380516200013f92916020019062000263565b50506006805460ff191660ff949094169390931790925550504360055550604090508051908101604052601081527f4d696e74696e67455243323020302e310000000000000000000000000000000060208201526009908051620001a892916020019062000263565b505050600160a060020a0333166000908152600b602052604090819020805460ff191660011790559350839250505051908101604052600781527f4f434720302e3100000000000000000000000000000000000000000000000000602082015260099080516200021d92916020019062000263565b5042600e55600160a060020a03821615156200023857600080fd5b50600f8054600160a060020a031916600160a060020a03929092169190911790555062000308915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002a657805160ff1916838001178555620002d6565b82800160010185558215620002d6579182015b82811115620002d6578251825591602001919060010190620002b9565b50620002e4929150620002e8565b5090565b6200030591905b80821115620002e45760008155600101620002ef565b90565b6120bd80620003186000396000f3006060604052600436106101a85763ffffffff60e060020a60003504166306fdde0381146101ad578063095ea7b314610237578063176345141461026d57806318160ddd14610292578063211e28b6146102a5578063238e5b14146102bf57806323b872dd146102de57806327e235e3146103065780633092afd514610325578063313ce5671461034457806340c10f191461036d5780634b0e72161461038f578063520c37b7146103ae57806357e2f8e8146103cd5780635a3b7e4214610414578063661884631461042757806366fc69371461044957806367aba225146104685780636cae8f671461049757806370a08231146104b657806370d5ae05146104d557806379ba5097146104e857806389afcb44146104fb5780638da5cb5b1461051a57806395d89b411461052d578063983b2d56146105405780639af1d35a1461055f578063a9059cbb14610572578063c7e568aa14610594578063cf309012146105a7578063d4ee1d90146105ba578063d73dd623146105cd578063dd62ed3e146105ef578063eae4c19f14610614578063f2fde38b14610627578063f46eccc414610646575b600080fd5b34156101b857600080fd5b6101c0610665565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101fc5780820151838201526020016101e4565b50505050905090810190601f1680156102295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024257600080fd5b610259600160a060020a0360043516602435610703565b604051901515815260200160405180910390f35b341561027857600080fd5b61028061072c565b60405190815260200160405180910390f35b341561029d57600080fd5b610280610732565b34156102b057600080fd5b6102bd6004351515610738565b005b34156102ca57600080fd5b610280600160a060020a0360043516610766565b34156102e957600080fd5b610259600160a060020a0360043581169060243516604435610778565b341561031157600080fd5b610280600160a060020a03600435166108dd565b341561033057600080fd5b6102bd600160a060020a03600435166108ef565b341561034f57600080fd5b61035761092b565b60405160ff909116815260200160405180910390f35b341561037857600080fd5b610280600160a060020a0360043516602435610934565b341561039a57600080fd5b6102bd600160a060020a03600435166109c5565b34156103b957600080fd5b6102bd600160a060020a0360043516610a24565b34156103d857600080fd5b6102bd60048035600160a060020a0316906101046024600760e06040519081016040529190828260e08082843750939550610a83945050505050565b341561041f57600080fd5b6101c0610bb4565b341561043257600080fd5b610259600160a060020a0360043516602435610c1f565b341561045457600080fd5b610280600160a060020a0360043516610c3f565b341561047357600080fd5b61047b610c51565b604051600160a060020a03909116815260200160405180910390f35b34156104a257600080fd5b6102bd600160a060020a0360043516610c60565b34156104c157600080fd5b610280600160a060020a0360043516610cbf565b34156104e057600080fd5b61047b610cda565b34156104f357600080fd5b6102bd610ce9565b341561050657600080fd5b6102bd600160a060020a0360043516610d32565b341561052557600080fd5b61047b610db5565b341561053857600080fd5b6101c0610dc4565b341561054b57600080fd5b6102bd600160a060020a0360043516610e2f565b341561056a57600080fd5b61047b610e6e565b341561057d57600080fd5b610259600160a060020a0360043516602435610e7d565b341561059f57600080fd5b610259610fd3565b34156105b257600080fd5b610259610ff4565b34156105c557600080fd5b61047b610ffd565b34156105d857600080fd5b610259600160a060020a036004351660243561100c565b34156105fa57600080fd5b610280600160a060020a036004358116906024351661102c565b341561061f57600080fd5b610280611057565b341561063257600080fd5b6102bd600160a060020a036004351661105d565b341561065157600080fd5b610259600160a060020a03600435166110bc565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106fb5780601f106106d0576101008083540402835291602001916106fb565b820191906000526020600020905b8154815290600101906020018083116106de57829003601f168201915b505050505081565b600a5460009060ff161561071957506000610726565b61072383836110d1565b90505b92915050565b60055481565b60005481565b60035433600160a060020a0390811691161461075357600080fd5b600a805460ff1916911515919091179055565b60106020526000908152604090205481565b600a546000908190819060ff161580156107a05750600f54600160a060020a03878116911614155b15156107ab57600080fd5b600f54849250600160a060020a038681169116141561080b57600160a060020a0386166000908152601060205260409020546107ed908363ffffffff61113d16565b600160a060020a038716600090815260106020526040902055610846565b61081686868661114c565b9050610828848263ffffffff6113e416565b915061083386610cbf565b8211156108465761084386610cbf565b91505b6108518686846113f6565b925060018315151461086257600080fd5b600d54600160a060020a031663362bd6798761087d81610cbf565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156108c057600080fd5b6102c65a03f115156108d157600080fd5b50505050509392505050565b60016020526000908152604090205481565b60035433600160a060020a0390811691161461090a57600080fd5b600160a060020a03166000908152600b60205260409020805460ff19169055565b60065460ff1681565b600160a060020a0333166000908152600b6020526040812054819060ff16151560011461096057600080fd5b61096a848461141f565b905082811480156109915750600160a060020a038416600090815260116020526040902054155b801561099d5750600083115b156109be57600160a060020a03841660009081526011602052604090204290555b9392505050565b60035433600160a060020a039081169116146109e057600080fd5b600160a060020a03811615156109f557600080fd5b600f805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035433600160a060020a03908116911614610a3f57600080fd5b600160a060020a0381161515610a5457600080fd5b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035460009033600160a060020a03908116911614610aa157600080fd5b600f5474010000000000000000000000000000000000000000900460ff1615610ac957600080fd5b50600f805474ff000000000000000000000000000000000000000019167401000000000000000000000000000000000000000017905560005b6007811015610baf57610ba6828260078110610b1a57fe5b6020020151600160a060020a0385166370a08231858560078110610b3a57fe5b602002015160006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610b8657600080fd5b6102c65a03f11515610b9757600080fd5b50505060405180519050610934565b50600101610b02565b505050565b60098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106fb5780601f106106d0576101008083540402835291602001916106fb565b600a5460009060ff1615610c3557506000610726565b61072383836114dc565b60116020526000908152604090205481565b600d54600160a060020a031681565b60035433600160a060020a03908116911614610c7b57600080fd5b600160a060020a0381161515610c9057600080fd5b600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a031660009081526001602052604090205490565b600f54600160a060020a031681565b60045433600160a060020a0390811691161415610d30576004546003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039092169190911790555b565b60035433600160a060020a03908116911614610d4d57600080fd5b600160a060020a0381166000908152601060205260408120541115610db257600f54600160a060020a03828116600090815260106020526040902054610d979291909116906115d6565b50600160a060020a0381166000908152601060205260408120555b50565b600354600160a060020a031681565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106fb5780601f106106d0576101008083540402835291602001916106fb565b60035433600160a060020a03908116911614610e4a57600080fd5b600160a060020a03166000908152600b60205260409020805460ff19166001179055565b600c54600160a060020a031681565b600a546000908190819060ff16158015610ea65750600f5433600160a060020a03908116911614155b1515610eb157600080fd5b600f54849250600160a060020a0386811691161415610f1157600160a060020a033316600090815260106020526040902054610ef3908363ffffffff61113d16565b600160a060020a033316600090815260106020526040902055610f4c565b610f1c33868661114c565b9050610f2e848263ffffffff6113e416565b9150610f3933610cbf565b821115610f4c57610f4933610cbf565b91505b610f568583611647565b600d54909350600160a060020a031663362bd67933610f7481610cbf565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610fb757600080fd5b6102c65a03f11515610fc857600080fd5b505050505092915050565b600f5474010000000000000000000000000000000000000000900460ff1681565b600a5460ff1681565b600454600160a060020a031681565b600a5460009060ff161561102257506000610726565b6107238383611664565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600e5481565b60035433600160a060020a0390811691161461107857600080fd5b600160a060020a038116151561108d57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600b6020526000908152604090205460ff1681565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000828201838110156109be57fe5b600c5460009081908190600160a060020a0316158015906111775750600d54600160a060020a031615155b151561118257600080fd5b600c54600092508290600160a060020a03166369e1540482604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156111cf57600080fd5b6102c65a03f115156111e057600080fd5b50505060405180519050111561120d576111f986611708565b9150811561120d5761120a85611708565b91505b50600c546000908190600160a060020a031663acb2ad6f82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561125a57600080fd5b6102c65a03f1151561126b57600080fd5b50505060405180519050111561130b57600654600c546113089160ff16600a0a906112fc90600160a060020a031663acb2ad6f6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156112d557600080fd5b6102c65a03f115156112e657600080fd5b505050604051805188915063ffffffff611c5d16565b9063ffffffff611c8116565b90505b8180156113185750600081115b156113cc57600c5461138c908790600160a060020a0316638d1d15726000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561136b57600080fd5b6102c65a03f1151561137c57600080fd5b5050506040518051905083611c98565b915085600160a060020a03167f88b171bb78d3ac5e1caa8e729dddce4e1322e84c80c093ebbe52507b62c77d988260405190815260200160405180910390a25b6001821515146113db57600080fd5b95945050505050565b6000828211156113f057fe5b50900390565b600a5460009060ff161561140c575060006109be565b611417848484611d5a565b949350505050565b600160a060020a0333166000908152600b602052604081205460ff16151560011461144957600080fd5b81151561145857506000610726565b60005461146b908363ffffffff61113d16565b6000908155600160a060020a038416815260016020526040902054611496908363ffffffff61113d16565b600160a060020a0384166000818152600160205260408082209390935590916000805160206120728339815191529085905190815260200160405180910390a350919050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561153957600160a060020a033381166000908152600260209081526040808320938816835292905290812055611570565b611549818463ffffffff6113e416565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a0382166000908152600160205260408120546115ff908363ffffffff6113e416565b600160a060020a03841660008181526001602052604080822093909355916000805160206120728339815191529085905190815260200160405180910390a350600192915050565b600a5460009060ff161561165a57600080fd5b6107238383611eca565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205461169c908363ffffffff61113d16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600080808080600160a060020a038616158015906117305750600c54600160a060020a031615155b80156117465750600d54600160a060020a031615155b151561175157600080fd5b61175a86610cbf565b600d549094508490600160a060020a0316639bafd01a8860006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156117b857600080fd5b6102c65a03f115156117c957600080fd5b50505060405180519050111515156117e057600080fd5b600d546001935060009250600160a060020a0316639bafd01a87846040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561184057600080fd5b6102c65a03f1151561185157600080fd5b5050506040518051159050611b3a57600c5442906118d790600160a060020a0316633626ab666000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156118ae57600080fd5b6102c65a03f115156118bf57600080fd5b5050506040518051600e54915063ffffffff61113d16565b1061196757600d5461196090600160a060020a0316639bafd01a8860006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561193957600080fd5b6102c65a03f1151561194a57600080fd5b505050604051805186915063ffffffff6113e416565b9350611b3a565b600c546119b390600160a060020a0316633626ab666000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156118ae57600080fd5b600160a060020a0387166000908152601160205260409020541015611b3a57600d54611ad190611a5a90600160a060020a0316639bafd01a8960006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611a3357600080fd5b6102c65a03f11515611a4457600080fd5b505050604051805187915063ffffffff6113e416565b600160a060020a0380891660009081526011602052604080822054600c54611acc949193611ac0939190921691633626ab669151602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156118ae57600080fd5b9063ffffffff6113e416565b611fb3565b600c54909250611b2090600160a060020a0316633626ab666000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156118ae57600080fd5b600160a060020a0387166000908152601160205260409020555b600160a060020a038616600090815260116020526040902054611b7c908390611b70908790611acc90429063ffffffff6113e416565b9063ffffffff61113d16565b90508015801590611b95575080611b9287610cbf565b10155b15611c2857600c54611be8908790600160a060020a031663412753586000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561136b57600080fd5b925085600160a060020a03167f7fe0ff5274bc85fa9231af5b619514dd00f02cb5c9195316c96a4a54c0c52cd38260405190815260200160405180910390a25b600183151514611c3757600080fd5b5050600160a060020a039390931660009081526011602052604090204290555090919050565b6000828202831580611c795750828482811515611c7657fe5b04145b15156109be57fe5b6000808284811515611c8f57fe5b04949350505050565b6000600160a060020a0383161515611caf57600080fd5b600160a060020a038416600090815260016020526040902054821115611cd457600080fd5b600160a060020a038416600090815260016020526040902054611cfd908363ffffffff6113e416565b600160a060020a038086166000908152600160205260408082209390935590851681522054611d32908363ffffffff61113d16565b600160a060020a03841660009081526001602081905260409091209190915590509392505050565b6000600160a060020a0383161515611d7157600080fd5b600160a060020a038416600090815260016020526040902054821115611d9657600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115611dc957600080fd5b600160a060020a038416600090815260016020526040902054611df2908363ffffffff6113e416565b600160a060020a038086166000908152600160205260408082209390935590851681522054611e27908363ffffffff61113d16565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054611e6f908363ffffffff6113e416565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516916000805160206120728339815191529085905190815260200160405180910390a35060019392505050565b6000600160a060020a0383161515611ee157600080fd5b600160a060020a033316600090815260016020526040902054821115611f0657600080fd5b600160a060020a033316600090815260016020526040902054611f2f908363ffffffff6113e416565b600160a060020a033381166000908152600160205260408082209390935590851681522054611f64908363ffffffff61113d16565b600160a060020a0380851660008181526001602052604090819020939093559133909116906000805160206120728339815191529085905190815260200160405180910390a350600192915050565b60008080611fca846201518063ffffffff611c8116565b118015611fd75750600084115b156109be57600c54611417906103e8906112fc906301e13380908290889061206590600160a060020a03166369e154046000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561203e57600080fd5b6102c65a03f1151561204f57600080fd5b50505060405180518c915063ffffffff611c5d16565b9063ffffffff611c5d165600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820f44367f0c0cb2fe2e5493651df9547cae42851319cd95c5746d1f67dfa07e932002900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000090000000000000000000000007b595d6c2b268b3f00c0fc4d440b538537736802000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000134f726f637279707420476f6c6420546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034f43470000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000090000000000000000000000007b595d6c2b268b3f00c0fc4d440b538537736802000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000134f726f637279707420476f6c6420546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034f43470000000000000000000000000000000000000000000000000000000000"
}