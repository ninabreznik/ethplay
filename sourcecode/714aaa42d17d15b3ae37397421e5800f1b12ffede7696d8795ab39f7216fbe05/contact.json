{
  "address": "0xc8bb6085d22de404fe9c6cd85c4536654b9f37b1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GreenEthereus1",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-25\n*/\n\npragma solidity 0.4.25;\n\n\nlibrary SafeMath {\n\n\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0);\n        uint256 c = _a / _b;\n\n        return c;\n    }\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract GreenEthereus1 {\n    using SafeMath for uint;\n\n    address public owner;\n    address marketing;\n    address admin;\n\n    mapping (address => uint) index;\n    mapping (address => mapping (uint => uint)) deposit;\n    mapping (address => mapping (uint => uint)) finish;\n    mapping (address => uint) checkpoint;\n\n    mapping (address => address) referrers;\n    mapping (address => uint) refBonus;\n\n    event LogInvestment(address indexed _addr, uint _value);\n    event LogPayment(address indexed _addr, uint _value);\n    event LogReferralInvestment(address indexed _referrer, address indexed _referral, uint _value);\n\n    constructor(address _marketing, address _admin) public {\n        owner = msg.sender;\n        marketing = _marketing;\n        admin = _admin;\n    }\n\n    function renounceOwnership() external {\n        require(msg.sender == owner);\n        owner = 0x0;\n    }\n\n    function bytesToAddress(bytes _source) internal pure returns(address parsedreferrer) {\n        assembly {\n            parsedreferrer := mload(add(_source,0x14))\n        }\n        return parsedreferrer;\n    }\n\n    function setRef(uint _value) internal {\n        address _referrer = bytesToAddress(bytes(msg.data));\n        if (_referrer != msg.sender && getInfo3(_referrer) > 0) {\n            referrers[msg.sender] = _referrer;\n            marketing.transfer(msg.value * 7 / 50);\n            refBonus[msg.sender] += _value * 3 / 100;\n            refBonus[_referrer] += _value / 10;\n\n            emit LogReferralInvestment(_referrer, msg.sender, msg.value);\n        } else {\n            marketing.transfer(msg.value * 6 / 25);\n        }\n    }\n\n    function() external payable {\n        if (msg.value < 50000000000000000) {\n            msg.sender.transfer(msg.value);\n            withdraw();\n        } else {\n            invest();\n        }\n    }\n\n    function invest() public payable {\n\n        require(msg.value >= 50000000000000000);\n        admin.transfer(msg.value * 3 / 100);\n\n        if (deposit[msg.sender][0] > 0 || refBonus[msg.sender] > 0) {\n            withdraw();\n            if (deposit[msg.sender][0] > 0) {\n                index[msg.sender] += 1;\n            }\n        }\n\n        checkpoint[msg.sender] = block.timestamp;\n        finish[msg.sender][index[msg.sender]] = block.timestamp + (20 * 1 days);\n        deposit[msg.sender][index[msg.sender]] = msg.value;\n\n        if (referrers[msg.sender] != 0x0) {\n            marketing.transfer(msg.value * 7 / 50);\n            refBonus[referrers[msg.sender]] += msg.value / 10;\n            emit LogReferralInvestment(referrers[msg.sender], msg.sender, msg.value);\n        } else if (msg.data.length == 20) {\n            setRef(msg.value);\n        } else {\n            marketing.transfer(msg.value * 6 / 25);\n        }\n\n        emit LogInvestment(msg.sender, msg.value);\n    }\n\n    function withdraw() public {\n\n        uint _payout = refBonus[msg.sender];\n        refBonus[msg.sender] = 0;\n\n        _payout = _payout.add(getInfo3(msg.sender));\n\n        if (_payout > 0) {\n            checkpoint[msg.sender] = block.timestamp;\n            msg.sender.transfer(_payout);\n\n            emit LogPayment(msg.sender, _payout);\n        }\n    }\n\n    function getInfo1(address _address) public view returns(uint Invested) {\n        uint _sum;\n        for (uint i = 0; i <= index[_address]; i++) {\n            if (block.timestamp < finish[_address][i]) {\n                _sum += deposit[_address][i];\n            }\n        }\n        Invested = _sum;\n    }\n\n    function getInfo2(address _address, uint _number) public view returns(uint Deposit_N) {\n        if (block.timestamp < finish[_address][_number - 1]) {\n            Deposit_N = deposit[_address][_number - 1];\n        } else {\n            Deposit_N = 0;\n        }\n    }\n\n    function getInfo3(address _address) public view returns(uint Dividends) {\n\n        uint _payout;\n        uint _multiplier;\n\n        if (block.timestamp > checkpoint[_address] + 2 days) {\n            _multiplier = 1;\n        }\n\n        for (uint i = 0; i <= index[_address]; i++) {\n\n            if (checkpoint[_address] < finish[_address][i]) {\n\n                if (block.timestamp > finish[_address][i]) {\n\n                    if (finish[_address][i] > checkpoint[_address] + 2 days) {\n\n                        _payout = _payout.add((deposit[_address][i].mul(_multiplier.mul(12).add(70)).div(1000)).mul(finish[_address][i].sub(checkpoint[_address].add(_multiplier.mul(2 days)))).div(1 days));\n                        _payout = _payout.add(deposit[_address][i].mul(14).div(100).mul(_multiplier));\n\n                    } else {\n\n                        _payout = _payout.add((deposit[_address][i].mul(7).div(100)).mul(finish[_address][i].sub(checkpoint[_address])).div(1 days));\n\n                    }\n                    \n                } else {\n\n                    _payout = _payout.add((deposit[_address][i].mul(_multiplier.mul(12).add(70)).div(1000)).mul(block.timestamp.sub(checkpoint[_address].add(_multiplier.mul(2 days)))).div(1 days));\n                    _payout = _payout.add(deposit[_address][i].mul(14).div(100).mul(_multiplier));\n\n                }\n            }\n        }\n        Dividends = _payout;\n    }\n\n    function getInfo4(address _address) public view returns(uint Bonuses) {\n        Bonuses = refBonus[_address];\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051604080610c5d83398101604052805160209091015160008054600160a060020a0319908116331790915560018054600160a060020a0394851690831617905560028054939092169216919091179055610beb806100726000396000f30060806040526004361061008d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663144f9cc681146100e057806317f85470146101165780633ccfd60b14610137578063715018a61461014c5780638da5cb5b14610161578063abc8cddb14610192578063cf70e27b146101b3578063e8b5e51f146100d6575b66b1a2bc2ec500003410156100d65760405133903480156108fc02916000818181858888f193505050501580156100c8573d6000803e3d6000fd5b506100d16101d4565b6100de565b6100de610284565b005b3480156100ec57600080fd5b50610104600160a060020a03600435166024356104ff565b60408051918252519081900360200190f35b34801561012257600080fd5b50610104600160a060020a0360043516610566565b34801561014357600080fd5b506100de6101d4565b34801561015857600080fd5b506100de610581565b34801561016d57600080fd5b506101766105b7565b60408051600160a060020a039092168252519081900360200190f35b34801561019e57600080fd5b50610104600160a060020a03600435166105c6565b3480156101bf57600080fd5b50610104600160a060020a036004351661064e565b336000818152600860205260408120805491905590610203906101f69061064e565b829063ffffffff6109a716565b9050600081111561028157336000818152600660205260408082204290555183156108fc0291849190818181858888f19350505050158015610249573d6000803e3d6000fd5b5060408051828152905133917f27a391d95d67e3626574fb5fbe3532bb7366e9254957b1f0e840953c248b2aa8919081900360200190a25b50565b66b1a2bc2ec5000034101561029857600080fd5b600254604051600160a060020a03909116906064346003020480156108fc02916000818181858888f193505050501580156102d7573d6000803e3d6000fd5b50336000908152600460209081526040808320838052909152812054118061030c575033600090815260086020526040812054115b15610351576103196101d4565b336000908152600460209081526040808320838052909152812054111561035157336000908152600360205260409020805460010190555b3360008181526006602090815260408083204290819055600583528184206003845282852080548652908452828520621a5e0090920190915584845260048352818420905484528252808320349055928252600790522054600160a060020a03161561046f57600154604051600160a060020a03909116906032346007020480156108fc02916000818181858888f193505050501580156103f6573d6000803e3d6000fd5b503360008181526007602081815260408084208054600160a060020a039081168652600884528286208054600a349081049091019091559587905293835254815194855290519216927fa249146257bee059355926b54611f49f096a7b1ed415e8011b89838f96e5fc51929081900390910190a36104c7565b601436141561048657610481346109c0565b6104c7565b600154604051600160a060020a03909116906019346006020480156108fc02916000818181858888f193505050501580156104c5573d6000803e3d6000fd5b505b60408051348152905133917fc74590e3281392e897f5c0f45530951cfe0db0e86c76d65af861e80b925871a4919081900360200190a2565b600160a060020a03821660009081526005602090815260408083206000198501845290915281205442101561055c5750600160a060020a038216600090815260046020908152604080832060001985018452909152902054610560565b5060005b92915050565b600160a060020a031660009081526008602052604090205490565b600054600160a060020a0316331461059857600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b600080805b600160a060020a038416600090815260036020526040902054811161064757600160a060020a038416600090815260056020908152604080832084845290915290205442101561063f57600160a060020a038416600090815260046020908152604080832084845290915290205491909101905b6001016105cb565b5092915050565b600160a060020a0381166000908152600660205260408120548190819081906202a3000142111561067e57600191505b5060005b600160a060020a038516600090815260036020526040902054811161099e57600160a060020a03851660008181526005602090815260408083208584528252808320549383526006909152902054101561099657600160a060020a038516600090815260056020908152604080832084845290915290205442111561091757600160a060020a03851660009081526006602090815260408083205460058352818420858552909252909120546202a300909101101561088657610836610829620151806108116107b6610786610761886202a30063ffffffff610b5016565b600160a060020a038c166000908152600660205260409020549063ffffffff6109a716565b600160a060020a038b1660009081526005602090815260408083208a84529091529020549063ffffffff610b7e16565b61081d6103e86108116107e160466107d58c600c63ffffffff610b5016565b9063ffffffff6109a716565b600160a060020a038e1660009081526004602090815260408083208d84529091529020549063ffffffff610b5016565b9063ffffffff610b9516565b9063ffffffff610b5016565b849063ffffffff6109a716565b600160a060020a038616600090815260046020908152604080832085845290915290205490935061087f9061082990849061081d9060649061081190600e63ffffffff610b5016565b9250610912565b600160a060020a038516600090815260066020908152604080832054600583528184208585529092529091205461090f91610829916201518091610811916108d39163ffffffff610b7e16565b600160a060020a038a16600090815260046020908152604080832089845290915290205461081d9060649061081190600763ffffffff610b5016565b92505b610996565b61094a610829620151806108116107b661093d610761886202a30063ffffffff610b5016565b429063ffffffff610b7e16565b600160a060020a03861660009081526004602090815260408083208584529091529020549093506109939061082990849061081d9060649061081190600e63ffffffff610b5016565b92505b600101610682565b50909392505050565b6000828201838110156109b957600080fd5b9392505050565b60006109fc6000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610bb8945050505050565b9050600160a060020a0381163314801590610a1f57506000610a1d8261064e565b115b15610b0b57336000908152600760208190526040909120805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038481169190911790915560015416906108fc906032903402049081150290604051600060405180830381858888f19350505050158015610a9b573d6000803e3d6000fd5b50336000818152600860209081526040808320805460646003890204019055600160a060020a038516808452928190208054600a8804019055805134815290517fa249146257bee059355926b54611f49f096a7b1ed415e8011b89838f96e5fc51929181900390910190a3610b4c565b600154604051600160a060020a03909116906019346006020480156108fc02916000818181858888f19350505050158015610b4a573d6000803e3d6000fd5b505b5050565b600080831515610b635760009150610647565b50828202828482811515610b7357fe5b04146109b957600080fd5b60008083831115610b8e57600080fd5b5050900390565b600080808311610ba457600080fd5b8284811515610baf57fe5b04949350505050565b60140151905600a165627a7a72305820a852ac2c3b0903f6956f185c3406ad4cf0898bac613a974840117f7908181b00002900000000000000000000000053e10ad589f223d88aa178d7c8fd2ee3716df863000000000000000000000000a3592653e52125c905041ed85a787540313df8d9",
  "constructorArguments": "00000000000000000000000053e10ad589f223d88aa178d7c8fd2ee3716df863000000000000000000000000a3592653e52125c905041ed85a787540313df8d9"
}