{
  "address": "0xdf733b5e9eb99356da3700033b653169deea34ce",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-29\n*/\n\npragma solidity ^0.4.16;\n\ncontract ERC20Interface {\n    function totalSupply() \n        public \n        constant \n        returns (uint256);\n\n    function balanceOf(\n        address _address) \n        public \n        constant \n        returns (uint256 balance);\n\n    function allowance(\n        address _address, \n        address _to)\n        public \n        constant \n        returns (uint256 remaining);\n\n    function transfer(\n        address _to, \n        uint256 _value) \n        public \n        returns (bool success);\n\n    function approve(\n        address _to, \n        uint256 _value) \n        public \n        returns (bool success);\n\n    function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value) \n        public \n        returns (bool success);\n\n    event Transfer(\n        address indexed _from, \n        address indexed _to, \n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _from, \n        address indexed _to, \n        uint256 _value\n    );\n}\n\n\ncontract Owned {\n    address owner;\n    address newOwner;\n    uint32 transferCount;    \n\n    event TransferOwnership(\n        address indexed _from, \n        address indexed _to\n    );\n\n    constructor() public {\n        owner = msg.sender;\n        transferCount = 0;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(\n        address _newOwner) \n        public \n        onlyOwner \n    {\n        newOwner = _newOwner;\n    }\n\n    function viewOwner()\n        public\n        view\n        returns (address)\n    {\n        return owner;\n    }\n\n    function viewTransferCount()\n        public\n        view\n        onlyOwner\n        returns (uint32)\n    {\n        return transferCount;\n    }\n\n    function isTransferPending() \n        public\n        view\n        returns (bool) {\n        require(\n            msg.sender == owner || \n            msg.sender == newOwner);\n        return newOwner != address(0);\n    }\n\n    function acceptOwnership()\n         public \n    {\n        require(msg.sender == newOwner);\n\n        owner = newOwner;\n        newOwner = address(0);\n        transferCount++;\n\n        emit TransferOwnership(\n            owner, \n            newOwner\n        );\n    }\n}\n\nlibrary SafeMath {\n    function add(\n        uint256 a, \n        uint256 b)\n        internal \n        pure \n        returns(uint256 c) \n    {\n        c = a + b;\n        require(c >= a);\n    }\n\n    function sub(\n        uint256 a, \n        uint256 b)\n        internal \n        pure \n        returns(uint256 c) \n    {\n        require(b <= a);\n        c = a - b;\n    }\n\n    function mul(\n        uint256 a, \n        uint256 b) \n        internal \n        pure \n        returns(uint256 c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n\n    function div(\n        uint256 a, \n        uint256 b) \n        internal \n        pure \n        returns(uint256 c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(\n        address _from, \n        uint256 _value, \n        address token, \n        bytes data) \n        public\n        returns (bool success);\n}\n\ncontract Token is ERC20Interface, Owned {\n    using SafeMath for uint256;\n\n    string public symbol;\n    string public name;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    mapping(address => uint256) incomes;\n    mapping(address => uint256) expenses; \n\n    constructor(\n        uint256 _totalSupply,\n        string _name,\n        string _symbol,\n        uint8 _decimals) \n        public \n    {\n        symbol = _symbol;\n        name = _name;\n        decimals = _decimals;\n        totalSupply = _totalSupply * 10**uint256(_decimals);\n        balances[owner] = totalSupply;\n\n        emit Transfer(address(0), owner, totalSupply);\n    }\n\n    function totalSupply()\n        public\n        constant\n        returns (uint256)\n    {\n        return totalSupply;\n    }\n\n    function _transfer(\n        address _from, \n        address _to, \n        uint256 _value) \n        internal \n        returns (bool success)\n    {\n        require (_to != 0x0);\n        require (balances[_from] >= _value);\n\n        balances[_from] = balances[_from].sub(_value);  \n        balances[_to] = balances[_to].add(_value);   \n\n        incomes[_to] = incomes[_to].add(_value);\n        expenses[_from] = expenses[_from].add(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function transfer(\n        address _to, \n        uint256 _value) \n        public \n        returns (bool success) \n    {\n        return _transfer(msg.sender, _to, _value);\n    }\n\n    function approve(\n        address _spender, \n        uint256 _value) \n        public \n        returns (bool success) \n    {\n        require (_spender != 0x0);\n\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value) \n        public \n        returns (bool success) \n    {\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        return _transfer(_from, _to, _value);\n    }\n\n    function balanceOf(\n        address _address) \n        public \n        constant \n        returns (uint256 remaining) \n    {\n        require(_address != 0x0);\n\n        return balances[_address];\n    }\n\n    function incomeOf(\n        address _address) \n        public \n        constant \n        returns (uint256 income) \n    {\n        require(_address != 0x0);\n\n        return incomes[_address];\n    }\n\n    function expenseOf(\n        address _address) \n        public \n        constant \n        returns (uint256 expense) \n    {\n        require(_address != 0x0);\n\n        return expenses[_address];\n    }\n\n    function allowance(\n        address _from, \n        address _to) \n        public \n        constant \n        returns (uint256 remaining) \n    {\n        require(_from != 0x0);\n        require(_to != 0x0);\n        require(_from == msg.sender || _to == msg.sender);\n\n        return allowed[_from][_to];\n    }\n\n\n    function approveAndCall(\n        address _spender, \n        uint256 _value, \n        bytes _data) \n        public \n        returns (bool success) \n    {\n        if (approve(_spender, _value)) {\n            require(ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _value, this, _data) == true);\n            return true;\n        }\n        return false;\n    }\n\n    function () public payable {\n        revert();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransferPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewTransferCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"incomeOf\",\"outputs\":[{\"name\":\"income\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"expenseOf\",\"outputs\":[{\"name\":\"expense\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b506040516200197b3803806200197b83398101806040528101908080519060200190929190805182019291906020018051820192919060200180519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548163ffffffff021916908363ffffffff1602179055508160029080519060200190620000d19291906200020f565b508260039080519060200190620000ea9291906200020f565b5080600460006101000a81548160ff021916908360ff1602179055508060ff16600a0a8402600581905550600554600660008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6005546040518082815260200191505060405180910390a350505050620002be565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025257805160ff191683800117855562000283565b8280016001018555821562000283579182015b828111156200028257825182559160200191906001019062000265565b5b50905062000292919062000296565b5090565b620002bb91905b80821115620002b75760008160009055506001016200029d565b5090565b90565b6116ad80620002ce6000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f6578063095ea7b3146101865780631801c408146101eb57806318160ddd1461021a57806323b872dd14610245578063313ce567146102ca57806370a08231146102fb57806379ba50971461035257806384aa26021461036957806395d89b41146103a05780639b03bea614610430578063a9059cbb14610487578063bc677b46146104ec578063cae9ca5114610543578063dd62ed3e146105ee578063dff96f8a14610665578063f2fde38b146106bc575b600080fd5b34801561010257600080fd5b5061010b6106ff565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014b578082015181840152602081019050610130565b50505050905090810190601f1680156101785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019257600080fd5b506101d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061079d565b604051808215151515815260200191505060405180910390f35b3480156101f757600080fd5b506102006108b4565b604051808215151515815260200191505060405180910390f35b34801561022657600080fd5b5061022f6109c1565b6040518082815260200191505060405180910390f35b34801561025157600080fd5b506102b0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109cb565b604051808215151515815260200191505060405180910390f35b3480156102d657600080fd5b506102df610af0565b604051808260ff1660ff16815260200191505060405180910390f35b34801561030757600080fd5b5061033c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b03565b6040518082815260200191505060405180910390f35b34801561035e57600080fd5b50610367610b71565b005b34801561037557600080fd5b5061037e610d4b565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156103ac57600080fd5b506103b5610dc0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f55780820151818401526020810190506103da565b50505050905090810190601f1680156104225780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561043c57600080fd5b50610471600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e5e565b6040518082815260200191505060405180910390f35b34801561049357600080fd5b506104d2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ecc565b604051808215151515815260200191505060405180910390f35b3480156104f857600080fd5b50610501610ee1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561054f57600080fd5b506105d4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610f0a565b604051808215151515815260200191505060405180910390f35b3480156105fa57600080fd5b5061064f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110c1565b6040518082815260200191505060405180910390f35b34801561067157600080fd5b506106a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611203565b6040518082815260200191505060405180910390f35b3480156106c857600080fd5b506106fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611271565b005b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107955780601f1061076a57610100808354040283529160200191610795565b820191906000526020600020905b81548152906001019060200180831161077857829003601f168201915b505050505081565b6000808373ffffffffffffffffffffffffffffffffffffffff16141515156107c457600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061095e5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561096957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905090565b6000600554905090565b6000610a5c82600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461131090919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ae784848461132c565b90509392505050565b600460009054906101000a900460ff1681565b6000808273ffffffffffffffffffffffffffffffffffffffff1614151515610b2a57600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bcd57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601481819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff16021790555050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c60405160405180910390a3565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610da857600080fd5b600160149054906101000a900463ffffffff16905090565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e565780601f10610e2b57610100808354040283529160200191610e56565b820191906000526020600020905b815481529060010190602001808311610e3957829003601f168201915b505050505081565b6000808273ffffffffffffffffffffffffffffffffffffffff1614151515610e8557600080fd5b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610ed933848461132c565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610f16848461079d565b156110b557600115158473ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611014578082015181840152602081019050610ff9565b50505050905090810190601f1680156110415780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561106357600080fd5b505af1158015611077573d6000803e3d6000fd5b505050506040513d602081101561108d57600080fd5b810190808051906020019092919050505015151415156110ac57600080fd5b600190506110ba565b600090505b9392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16141515156110e857600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff161415151561110e57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061117357503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b151561117e57600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff161415151561122a57600080fd5b600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112cc57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561132157600080fd5b818303905092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff161415151561135357600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156113a157600080fd5b6113f382600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461131090919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061148882600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461166590919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061151d82600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461166590919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115b282600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461166590919063ffffffff16565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000818301905082811015151561167b57600080fd5b929150505600a165627a7a72305820fdbccbd785b1bcbf7d1e104ed3d35fb04a7fcf60b93c617097d22f178ff6a5d7002900000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000006446565706572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034450520000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000006446565706572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034450520000000000000000000000000000000000000000000000000000000000"
}