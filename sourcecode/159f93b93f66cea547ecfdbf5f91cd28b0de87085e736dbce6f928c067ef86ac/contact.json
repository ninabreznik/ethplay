{
  "address": "0xd077c09a7e65c4cca490a776d5e395fb4fe7179a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DataExchange",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-11\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Eliptic curve signature operations\n *\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n *\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\n * See https://github.com/ethereum/solidity/issues/864\n *\n */\n\nlibrary ECRecovery {\n\n  /**\n   * @dev Recover signer address from a message by using their signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes sig)\n    internal\n    pure\n    returns (address)\n  {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    // Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n\n    // Divide the signature in r, s and v variables\n    // ecrecover takes the signature parameters, and the only way to get them\n    // currently is to use assembly.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      // solium-disable-next-line arg-overflow\n      return ecrecover(hash, v, r, s);\n    }\n  }\n\n  /**\n   * toEthSignedMessageHash\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n   * @dev and hash the result\n   */\n  function toEthSignedMessageHash(bytes32 hash)\n    internal\n    pure\n    returns (bytes32)\n  {\n    // 32 is the length in bytes of hash,\n    // enforced by the type signature above\n    return keccak256(\n      \"\\x19Ethereum Signed Message:\\n32\",\n      hash\n    );\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n/**\n * @title TokenDestructible:\n * @author Remco Bloemen <[email protected]π.com>\n * @dev Base contract that can be destroyed by owner. All funds in contract including\n * listed tokens will be sent to the owner.\n */\ncontract TokenDestructible is Ownable {\n\n  constructor() public payable { }\n\n  /**\n   * @notice Terminate contract and refund to owner\n   * @param tokens List of addresses of ERC20 or ERC20Basic token contracts to\n   refund.\n   * @notice The called token contracts could try to re-enter this contract. Only\n   supply token contracts you trust.\n   */\n  function destroy(address[] tokens) onlyOwner public {\n\n    // Transfer tokens to owner\n    for (uint256 i = 0; i < tokens.length; i++) {\n      ERC20Basic token = ERC20Basic(tokens[i]);\n      uint256 balance = token.balanceOf(this);\n      token.transfer(owner, balance);\n    }\n\n    // Transfer Eth to owner and terminate contract\n    selfdestruct(owner);\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title WIBToken\n * @author Wibson Development Team <[email protected]>\n * @notice Wibson Oficial Token, this is an ERC20 standard compliant token.\n * @dev WIBToken token has an initial supply of 9 billion tokens with 9 decimals.\n */\ncontract WIBToken is StandardToken {\n  string public constant name = \"WIBSON\"; // solium-disable-line uppercase\n  string public constant symbol = \"WIB\"; // solium-disable-line uppercase\n  uint8 public constant decimals = 9; // solium-disable-line uppercase\n\n  // solium-disable-next-line zeppelin/no-arithmetic-operations\n  uint256 public constant INITIAL_SUPPLY = 9000000000 * (10 ** uint256(decimals));\n\n  constructor() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n  }\n}\n\n\n/**\n * @title DataOrder\n * @author Wibson Development Team <[email protected]>\n * @notice `DataOrder` is the contract between a given buyer and a set of sellers.\n *         This holds the information about the \"deal\" between them and how the\n *         transaction has evolved.\n */\ncontract DataOrder is Ownable {\n  modifier validAddress(address addr) {\n    require(addr != address(0));\n    require(addr != address(this));\n    _;\n  }\n\n  enum OrderStatus {\n    OrderCreated,\n    NotaryAdded,\n    TransactionCompleted\n  }\n\n  enum DataResponseStatus {\n    DataResponseAdded,\n    RefundedToBuyer,\n    TransactionCompleted\n  }\n\n  // --- Notary Information ---\n  struct NotaryInfo {\n    uint256 responsesPercentage;\n    uint256 notarizationFee;\n    string notarizationTermsOfService;\n    uint32 addedAt;\n  }\n\n  // --- Seller Information ---\n  struct SellerInfo {\n    address notary;\n    string dataHash;\n    uint32 createdAt;\n    uint32 closedAt;\n    DataResponseStatus status;\n  }\n\n  address public buyer;\n  string public filters;\n  string public dataRequest;\n  uint256 public price;\n  string public termsAndConditions;\n  string public buyerURL;\n  string public buyerPublicKey;\n  uint32 public createdAt;\n  uint32 public transactionCompletedAt;\n  OrderStatus public orderStatus;\n\n  mapping(address => SellerInfo) public sellerInfo;\n  mapping(address => NotaryInfo) internal notaryInfo;\n\n  address[] public sellers;\n  address[] public notaries;\n\n  /**\n   * @notice Contract's constructor.\n   * @param _buyer Buyer address\n   * @param _filters Target audience of the order.\n   * @param _dataRequest Requested data type (Geolocation, Facebook, etc).\n   * @param _price Price per added Data Response.\n   * @param _termsAndConditions Copy of the terms and conditions for the order.\n   * @param _buyerURL Public URL of the buyer where the data must be sent.\n   * @param _buyerPublicKey Public Key of the buyer, which will be used to encrypt the\n   *        data to be sent.\n   */\n  constructor(\n    address _buyer,\n    string _filters,\n    string _dataRequest,\n    uint256 _price,\n    string _termsAndConditions,\n    string _buyerURL,\n    string _buyerPublicKey\n  ) public validAddress(_buyer) {\n    require(bytes(_buyerURL).length > 0);\n    require(bytes(_buyerPublicKey).length > 0);\n\n    buyer = _buyer;\n    filters = _filters;\n    dataRequest = _dataRequest;\n    price = _price;\n    termsAndConditions = _termsAndConditions;\n    buyerURL = _buyerURL;\n    buyerPublicKey = _buyerPublicKey;\n    orderStatus = OrderStatus.OrderCreated;\n    createdAt = uint32(block.timestamp);\n    transactionCompletedAt = 0;\n  }\n\n  /**\n   * @notice Adds a notary to the Data Order.\n   * @param notary Notary's address.\n   * @param responsesPercentage Percentage of DataResponses to audit per DataOrder.\n            Value must be between 0 and 100.\n   * @param notarizationFee Fee to be charged per validation done.\n   * @param notarizationTermsOfService Notary's terms and conditions for the order.\n   * @return true if the Notary was added successfully, reverts otherwise.\n   */\n  function addNotary(\n    address notary,\n    uint256 responsesPercentage,\n    uint256 notarizationFee,\n    string notarizationTermsOfService\n  ) public onlyOwner validAddress(notary) returns (bool) {\n    require(transactionCompletedAt == 0);\n    require(responsesPercentage <= 100);\n    require(!hasNotaryBeenAdded(notary));\n\n    notaryInfo[notary] = NotaryInfo(\n      responsesPercentage,\n      notarizationFee,\n      notarizationTermsOfService,\n      uint32(block.timestamp)\n    );\n    notaries.push(notary);\n    orderStatus = OrderStatus.NotaryAdded;\n    return true;\n  }\n\n   /**\n    * @notice Adds a new DataResponse.\n    * @param seller Address of the Seller.\n    * @param notary Notary address that the Seller chooses to use as notary,\n    *        this must be one within the allowed notaries and within the\n    *         DataOrder's notaries.\n    * @param dataHash Hash of the data that must be sent, this is a SHA256.\n    * @return true if the DataResponse was added successfully, reverts otherwise.\n    */\n  function addDataResponse(\n    address seller,\n    address notary,\n    string dataHash\n  ) public onlyOwner validAddress(seller) validAddress(notary) returns (bool) {\n    require(orderStatus == OrderStatus.NotaryAdded);\n    require(transactionCompletedAt == 0);\n    require(!hasSellerBeenAccepted(seller));\n    require(hasNotaryBeenAdded(notary));\n\n    sellerInfo[seller] = SellerInfo(\n      notary,\n      dataHash,\n      uint32(block.timestamp),\n      0,\n      DataResponseStatus.DataResponseAdded\n    );\n\n    sellers.push(seller);\n\n    return true;\n  }\n\n  /**\n   * @notice Closes a DataResponse.\n   * @dev Once the buyer receives the seller's data and checks that it is valid\n   *      or not, he must signal  DataResponse as completed.\n   * @param seller Seller address.\n   * @param transactionCompleted True, if the seller got paid for his/her data.\n   * @return true if DataResponse was successfully closed, reverts otherwise.\n   */\n  function closeDataResponse(\n    address seller,\n    bool transactionCompleted\n  ) public onlyOwner validAddress(seller) returns (bool) {\n    require(orderStatus != OrderStatus.TransactionCompleted);\n    require(transactionCompletedAt == 0);\n    require(hasSellerBeenAccepted(seller));\n    require(sellerInfo[seller].status == DataResponseStatus.DataResponseAdded);\n\n    sellerInfo[seller].status = transactionCompleted\n      ? DataResponseStatus.TransactionCompleted\n      : DataResponseStatus.RefundedToBuyer;\n    sellerInfo[seller].closedAt = uint32(block.timestamp);\n    return true;\n  }\n\n  /**\n   * @notice Closes the Data order.\n   * @dev Once the DataOrder is closed it will no longer accept new DataResponses.\n   * @return true if the DataOrder was successfully closed, reverts otherwise.\n   */\n  function close() public onlyOwner returns (bool) {\n    require(orderStatus != OrderStatus.TransactionCompleted);\n    require(transactionCompletedAt == 0);\n    orderStatus = OrderStatus.TransactionCompleted;\n    transactionCompletedAt = uint32(block.timestamp);\n    return true;\n  }\n\n  /**\n   * @notice Checks if a DataResponse for a given seller has been accepted.\n   * @param seller Seller address.\n   * @return true if the DataResponse was accepted, false otherwise.\n   */\n  function hasSellerBeenAccepted(\n    address seller\n  ) public view validAddress(seller) returns (bool) {\n    return sellerInfo[seller].createdAt != 0;\n  }\n\n  /**\n   * @notice Checks if the given notary was added to notarize this DataOrder.\n   * @param notary Notary address to check.\n   * @return true if the Notary was added, false otherwise.\n   */\n  function hasNotaryBeenAdded(\n    address notary\n  ) public view validAddress(notary) returns (bool) {\n    return notaryInfo[notary].addedAt != 0;\n  }\n\n  /**\n   * @notice Gets the notary information.\n   * @param notary Notary address to get info for.\n   * @return Notary information (address, responsesPercentage, notarizationFee,\n   *         notarizationTermsOfService, addedAt)\n   */\n  function getNotaryInfo(\n    address notary\n  ) public view validAddress(notary) returns (\n    address,\n    uint256,\n    uint256,\n    string,\n    uint32\n  ) {\n    require(hasNotaryBeenAdded(notary));\n    NotaryInfo memory info = notaryInfo[notary];\n    return (\n      notary,\n      info.responsesPercentage,\n      info.notarizationFee,\n      info.notarizationTermsOfService,\n      uint32(info.addedAt)\n    );\n  }\n\n  /**\n   * @notice Gets the seller information.\n   * @param seller Seller address to get info for.\n   * @return Seller information (address, notary, dataHash, createdAt, closedAt,\n   *         status)\n   */\n  function getSellerInfo(\n    address seller\n  ) public view validAddress(seller) returns (\n    address,\n    address,\n    string,\n    uint32,\n    uint32,\n    bytes32\n  ) {\n    require(hasSellerBeenAccepted(seller));\n    SellerInfo memory info = sellerInfo[seller];\n    return (\n      seller,\n      info.notary,\n      info.dataHash,\n      uint32(info.createdAt),\n      uint32(info.closedAt),\n      getDataResponseStatusAsString(info.status)\n    );\n  }\n\n  /**\n   * @notice Gets the selected notary for the given seller.\n   * @param seller Seller address.\n   * @return Address of the notary assigned to the given seller.\n   */\n  function getNotaryForSeller(\n    address seller\n  ) public view validAddress(seller) returns (address) {\n    require(hasSellerBeenAccepted(seller));\n    SellerInfo memory info = sellerInfo[seller];\n    return info.notary;\n  }\n\n  function getDataResponseStatusAsString(\n    DataResponseStatus drs\n  ) internal pure returns (bytes32) {\n    if (drs == DataResponseStatus.DataResponseAdded) {\n      return bytes32(\"DataResponseAdded\");\n    }\n\n    if (drs == DataResponseStatus.RefundedToBuyer) {\n      return bytes32(\"RefundedToBuyer\");\n    }\n\n    if (drs == DataResponseStatus.TransactionCompleted) {\n      return bytes32(\"TransactionCompleted\");\n    }\n\n    throw; // solium-disable-line security/no-throw\n  }\n\n}\n\n\n/**\n * @title MultiMap\n * @author Wibson Development Team <[email protected]>\n * @notice An address `MultiMap`.\n * @dev `MultiMap` is useful when you need to keep track of a set of addresses.\n */\nlibrary MultiMap {\n\n  struct MapStorage {\n    mapping(address => uint) addressToIndex;\n    address[] addresses;\n  }\n\n  /**\n   * @notice Retrieves a address from the given `MapStorage` using a index Key.\n   * @param self `MapStorage` where the index must be searched.\n   * @param index Index to find.\n   * @return Address of the given Index.\n   */\n  function get(\n    MapStorage storage self,\n    uint index\n  ) public view returns (address) {\n    require(index < self.addresses.length);\n    return self.addresses[index];\n  }\n\n  /**\n   * @notice Checks if the given address exists in the storage.\n   * @param self `MapStorage` where the key must be searched.\n   * @param _key Address to find.\n   * @return true if `_key` exists in the storage, false otherwise.\n   */\n  function exist(\n    MapStorage storage self,\n    address _key\n  ) public view returns (bool) {\n    if (_key != address(0)) {\n      uint targetIndex = self.addressToIndex[_key];\n      return targetIndex < self.addresses.length && self.addresses[targetIndex] == _key;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @notice Inserts a new address within the given storage.\n   * @param self `MapStorage` where the key must be inserted.\n   * @param _key Address to insert.\n   * @return true if `_key` was added, reverts otherwise.\n   */\n  function insert(\n    MapStorage storage self,\n    address _key\n  ) public returns (bool) {\n    require(_key != address(0));\n    if (exist(self, _key)) {\n      return true;\n    }\n\n    self.addressToIndex[_key] = self.addresses.length;\n    self.addresses.push(_key);\n\n    return true;\n  }\n\n  /**\n   * @notice Removes the given index from the storage.\n   * @param self MapStorage` where the index lives.\n   * @param index Index to remove.\n   * @return true if address at `index` was removed, false otherwise.\n   */\n  function removeAt(MapStorage storage self, uint index) public returns (bool) {\n    return remove(self, self.addresses[index]);\n  }\n\n  /**\n   * @notice Removes the given address from the storage.\n   * @param self `MapStorage` where the address lives.\n   * @param _key Address to remove.\n   * @return true if `_key` was removed, false otherwise.\n   */\n  function remove(MapStorage storage self, address _key) public returns (bool) {\n    require(_key != address(0));\n    if (!exist(self, _key)) {\n      return false;\n    }\n\n    uint currentIndex = self.addressToIndex[_key];\n\n    uint lastIndex = SafeMath.sub(self.addresses.length, 1);\n    address lastAddress = self.addresses[lastIndex];\n    self.addressToIndex[lastAddress] = currentIndex;\n    self.addresses[currentIndex] = lastAddress;\n\n    delete self.addresses[lastIndex];\n    delete self.addressToIndex[_key];\n\n    self.addresses.length--;\n    return true;\n  }\n\n  /**\n   * @notice Gets the current length of the Map.\n   * @param self `MapStorage` to get the length from.\n   * @return The length of the MultiMap.\n   */\n  function length(MapStorage storage self) public view returns (uint) {\n    return self.addresses.length;\n  }\n}\n\n\n/**\n * @title CryptoUtils\n * @author Wibson Development Team <[email protected]>\n * @notice Cryptographic utilities used by the Wibson protocol.\n * @dev In order to get the same hashes using `Web3` upon which the signatures\n *      are checked, you must use `web3.utils.soliditySha3` in v1.0 (or the\n *      homonymous function in the `web3-utils` package)\n *      http://web3js.readthedocs.io/en/1.0/web3-utils.html#utils-soliditysha3\n */\nlibrary CryptoUtils {\n\n  /**\n   * @notice Checks if the signature was created by the signer.\n   * @param hash Hash of the data using the `keccak256` algorithm.\n   * @param signer Signer address.\n   * @param signature Signature over the hash.\n   * @return true if `signer` is the one who signed the `hash`, false otherwise.\n   */\n  function isSignedBy(\n    bytes32 hash,\n    address signer,\n    bytes signature\n  ) private pure returns (bool) {\n    require(signer != address(0));\n    bytes32 prefixedHash = ECRecovery.toEthSignedMessageHash(hash);\n    address recovered = ECRecovery.recover(prefixedHash, signature);\n    return recovered == signer;\n  }\n\n  /**\n   * @notice Checks if the notary's signature to be added to the DataOrder is valid.\n   * @param order Order address.\n   * @param notary Notary address.\n   * @param responsesPercentage Percentage of DataResponses to audit per DataOrder.\n   * @param notarizationFee Fee to be charged per validation done.\n   * @param notarizationTermsOfService Notary terms and conditions for the order.\n   * @param notarySignature Off-chain Notary signature.\n   * @return true if `notarySignature` is valid, false otherwise.\n   */\n  function isNotaryAdditionValid(\n    address order,\n    address notary,\n    uint256 responsesPercentage,\n    uint256 notarizationFee,\n    string notarizationTermsOfService,\n    bytes notarySignature\n  ) public pure returns (bool) {\n    require(order != address(0));\n    require(notary != address(0));\n    bytes32 hash = keccak256(\n      abi.encodePacked(\n        order,\n        responsesPercentage,\n        notarizationFee,\n        notarizationTermsOfService\n      )\n    );\n\n    return isSignedBy(hash, notary, notarySignature);\n  }\n\n  /**\n   * @notice Checks if the parameters passed correspond to the seller's signature used.\n   * @param order Order address.\n   * @param seller Seller address.\n   * @param notary Notary address.\n   * @param dataHash Hash of the data that must be sent, this is a SHA256.\n   * @param signature Signature of DataResponse.\n   * @return true if arguments are signed by the `seller`, false otherwise.\n   */\n  function isDataResponseValid(\n    address order,\n    address seller,\n    address notary,\n    string dataHash,\n    bytes signature\n  ) public pure returns (bool) {\n    require(order != address(0));\n    require(seller != address(0));\n    require(notary != address(0));\n\n    bytes memory packed = bytes(dataHash).length > 0\n      ? abi.encodePacked(order, notary, dataHash)\n      : abi.encodePacked(order, notary);\n\n    bytes32 hash = keccak256(packed);\n    return isSignedBy(hash, seller, signature);\n  }\n\n  /**\n   * @notice Checks if the notary's signature to close the `DataResponse` is valid.\n   * @param order Order address.\n   * @param seller Seller address.\n   * @param notary Notary address.\n   * @param wasAudited Indicates whether the data was audited or not.\n   * @param isDataValid Indicates the result of the audit, if happened.\n   * @param notarySignature Off-chain Notary signature.\n   * @return true if `notarySignature` is valid, false otherwise.\n   */\n  function isNotaryVeredictValid(\n    address order,\n    address seller,\n    address notary,\n    bool wasAudited,\n    bool isDataValid,\n    bytes notarySignature\n  ) public pure returns (bool) {\n    require(order != address(0));\n    require(seller != address(0));\n    require(notary != address(0));\n    bytes32 hash = keccak256(\n      abi.encodePacked(\n        order,\n        seller,\n        wasAudited,\n        isDataValid\n      )\n    );\n\n    return isSignedBy(hash, notary, notarySignature);\n  }\n}\n\n\n\n/**\n * @title DataExchange\n * @author Wibson Development Team <[email protected]>\n * @notice `DataExchange` is the core contract of the Wibson Protocol.\n *         This allows the creation, management, and tracking of DataOrders.\n * @dev This contract also contains some helper methods to access the data\n *      needed by the different parties involved in the Protocol.\n */\ncontract DataExchange is TokenDestructible, Pausable {\n  using SafeMath for uint256;\n  using MultiMap for MultiMap.MapStorage;\n\n  event NotaryRegistered(address indexed notary);\n  event NotaryUpdated(address indexed notary);\n  event NotaryUnregistered(address indexed notary);\n\n  event NewOrder(address indexed orderAddr);\n  event NotaryAddedToOrder(address indexed orderAddr, address indexed notary);\n  event DataAdded(address indexed orderAddr, address indexed seller);\n  event TransactionCompleted(address indexed orderAddr, address indexed seller);\n  event RefundedToBuyer(address indexed orderAddr, address indexed buyer);\n  event OrderClosed(address indexed orderAddr);\n\n  struct NotaryInfo {\n    address addr;\n    string name;\n    string notaryUrl;\n    string publicKey;\n  }\n\n  MultiMap.MapStorage openOrders;\n  MultiMap.MapStorage allowedNotaries;\n\n  mapping(address => address[]) public ordersBySeller;\n  mapping(address => address[]) public ordersByNotary;\n  mapping(address => address[]) public ordersByBuyer;\n  mapping(address => NotaryInfo) internal notaryInfo;\n  // Tracks the orders created by this contract.\n  mapping(address => bool) private orders;\n\n  // @dev buyerBalance Keeps track of the buyer's balance per order-seller.\n  // TODO: Is there a better way to do this?\n  mapping(\n    address => mapping(address => mapping(address => uint256))\n  ) public buyerBalance;\n\n  // @dev buyerRemainingBudgetForAudits Keeps track of the buyer's remaining\n  // budget from the initial one set on the `DataOrder`\n  mapping(address => mapping(address => uint256)) public buyerRemainingBudgetForAudits;\n\n  modifier validAddress(address addr) {\n    require(addr != address(0));\n    require(addr != address(this));\n    _;\n  }\n\n  modifier isOrderLegit(address order) {\n    require(orders[order]);\n    _;\n  }\n\n  // @dev token A WIBToken implementation of an ERC20 standard token.\n  WIBToken token;\n\n  // @dev The minimum for initial budget for audits per `DataOrder`.\n  uint256 public minimumInitialBudgetForAudits;\n\n  /**\n   * @notice Contract constructor.\n   * @param tokenAddress Address of the WIBToken token address.\n   * @param ownerAddress Address of the DataExchange owner.\n   */\n  constructor(\n    address tokenAddress,\n    address ownerAddress\n  ) public validAddress(tokenAddress) validAddress(ownerAddress) {\n    require(tokenAddress != ownerAddress);\n\n    token = WIBToken(tokenAddress);\n    minimumInitialBudgetForAudits = 0;\n    transferOwnership(ownerAddress);\n  }\n\n  /**\n   * @notice Registers a new notary or replaces an already existing one.\n   * @dev At least one notary is needed to enable `DataExchange` operation.\n   * @param notary Address of a Notary to add.\n   * @param name Name Of the Notary.\n   * @param notaryUrl Public URL of the notary where the data must be sent.\n   * @param publicKey PublicKey used by the Notary.\n   * @return true if the notary was successfully registered, reverts otherwise.\n   */\n  function registerNotary(\n    address notary,\n    string name,\n    string notaryUrl,\n    string publicKey\n  ) public onlyOwner whenNotPaused validAddress(notary) returns (bool) {\n    bool isNew = notaryInfo[notary].addr == address(0);\n\n    require(allowedNotaries.insert(notary));\n    notaryInfo[notary] = NotaryInfo(\n      notary,\n      name,\n      notaryUrl,\n      publicKey\n    );\n\n    if (isNew) {\n      emit NotaryRegistered(notary);\n    } else {\n      emit NotaryUpdated(notary);\n    }\n    return true;\n  }\n\n  /**\n   * @notice Unregisters an existing notary.\n   * @param notary Address of a Notary to unregister.\n   * @return true if the notary was successfully unregistered, reverts otherwise.\n   */\n  function unregisterNotary(\n    address notary\n  ) public onlyOwner whenNotPaused validAddress(notary) returns (bool) {\n    require(allowedNotaries.remove(notary));\n\n    emit NotaryUnregistered(notary);\n    return true;\n  }\n\n  /**\n   * @notice Sets the minimum initial budget for audits to be placed by a buyer\n   * on DataOrder creation.\n   * @dev The initial budget for audit is used as a preventive method to reduce\n   *      spam DataOrders in the network.\n   * @param _minimumInitialBudgetForAudits The new minimum for initial budget for\n   * audits per DataOrder.\n   * @return true if the value was successfully set, reverts otherwise.\n   */\n  function setMinimumInitialBudgetForAudits(\n    uint256 _minimumInitialBudgetForAudits\n  ) public onlyOwner whenNotPaused returns (bool) {\n    minimumInitialBudgetForAudits = _minimumInitialBudgetForAudits;\n    return true;\n  }\n\n  /**\n   * @notice Creates a new DataOrder.\n   * @dev The `msg.sender` will become the buyer of the order.\n   * @param filters Target audience of the order.\n   * @param dataRequest Requested data type (Geolocation, Facebook, etc).\n   * @param price Price per added Data Response.\n   * @param initialBudgetForAudits The initial budget set for future audits.\n   * @param termsAndConditions Buyer's terms and conditions for the order.\n   * @param buyerURL Public URL of the buyer where the data must be sent.\n   * @param publicKey Public Key of the buyer, which will be used to encrypt the\n   *        data to be sent.\n   * @return The address of the newly created DataOrder. If the DataOrder could\n   *         not be created, reverts.\n   */\n  function newOrder(\n    string filters,\n    string dataRequest,\n    uint256 price,\n    uint256 initialBudgetForAudits,\n    string termsAndConditions,\n    string buyerURL,\n    string publicKey\n  ) public whenNotPaused returns (address) {\n    require(initialBudgetForAudits >= minimumInitialBudgetForAudits);\n    require(token.allowance(msg.sender, this) >= initialBudgetForAudits);\n\n    address newOrderAddr = new DataOrder(\n      msg.sender,\n      filters,\n      dataRequest,\n      price,\n      termsAndConditions,\n      buyerURL,\n      publicKey\n    );\n\n    token.transferFrom(msg.sender, this, initialBudgetForAudits);\n    buyerRemainingBudgetForAudits[msg.sender][newOrderAddr] = initialBudgetForAudits;\n\n    ordersByBuyer[msg.sender].push(newOrderAddr);\n    orders[newOrderAddr] = true;\n\n    emit NewOrder(newOrderAddr);\n    return newOrderAddr;\n  }\n\n  /**\n   * @notice Adds a notary to the Data Order.\n   * @dev The `msg.sender` must be the buyer.\n   * @param orderAddr Order Address to accept notarize.\n   * @param notary Notary address.\n   * @param responsesPercentage Percentage of `DataResponses` to audit per DataOrder.\n   *        Value must be between 0 and 100.\n   * @param notarizationFee Fee to be charged per validation done.\n   * @param notarizationTermsOfService Notary's terms and conditions for the order.\n   * @param notarySignature Notary's signature over the other arguments.\n   * @return true if the Notary was added successfully, reverts otherwise.\n   */\n  function addNotaryToOrder(\n    address orderAddr,\n    address notary,\n    uint256 responsesPercentage,\n    uint256 notarizationFee,\n    string notarizationTermsOfService,\n    bytes notarySignature\n  ) public whenNotPaused isOrderLegit(orderAddr) validAddress(notary) returns (bool) {\n    DataOrder order = DataOrder(orderAddr);\n    address buyer = order.buyer();\n    require(msg.sender == buyer);\n\n    require(!order.hasNotaryBeenAdded(notary));\n    require(allowedNotaries.exist(notary));\n\n    require(\n      CryptoUtils.isNotaryAdditionValid(\n        orderAddr,\n        notary,\n        responsesPercentage,\n        notarizationFee,\n        notarizationTermsOfService,\n        notarySignature\n      )\n    );\n\n    bool okay = order.addNotary(\n      notary,\n      responsesPercentage,\n      notarizationFee,\n      notarizationTermsOfService\n    );\n\n    if (okay) {\n      openOrders.insert(orderAddr);\n      ordersByNotary[notary].push(orderAddr);\n      emit NotaryAddedToOrder(order, notary);\n    }\n    return okay;\n  }\n\n  /**\n   * @notice Adds a new DataResponse to the given order.\n   * @dev 1. The `msg.sender` must be the buyer of the order.\n   *      2. The buyer must allow the DataExchange to withdraw the price of the\n   *         order.\n   * @param orderAddr Order address where the DataResponse must be added.\n   * @param seller Address of the Seller.\n   * @param notary Notary address that the Seller chose to use as notarizer,\n   *        this must be one within the allowed notaries and within the\n   *        DataOrder's notaries.\n   * @param dataHash Hash of the data that must be sent, this is a SHA256.\n   * @param signature Signature of DataResponse.\n   * @return true if the DataResponse was set successfully, reverts otherwise.\n   */\n  function addDataResponseToOrder(\n    address orderAddr,\n    address seller,\n    address notary,\n    string dataHash,\n    bytes signature\n  ) public whenNotPaused isOrderLegit(orderAddr) returns (bool) {\n    DataOrder order = DataOrder(orderAddr);\n    address buyer = order.buyer();\n    require(msg.sender == buyer);\n    allDistinct(\n      [\n        orderAddr,\n        buyer,\n        seller,\n        notary,\n        address(this)\n      ]\n    );\n    require(order.hasNotaryBeenAdded(notary));\n\n    require(\n      CryptoUtils.isDataResponseValid(\n        orderAddr,\n        seller,\n        notary,\n        dataHash,\n        signature\n      )\n    );\n\n    bool okay = order.addDataResponse(\n      seller,\n      notary,\n      dataHash\n    );\n    require(okay);\n\n    chargeBuyer(order, seller);\n\n    ordersBySeller[seller].push(orderAddr);\n    emit DataAdded(order, seller);\n    return true;\n  }\n\n  /**\n   * @notice Closes a DataResponse.\n   * @dev Once the buyer receives the seller's data and checks that it is valid\n   *      or not, he must close the DataResponse signaling the result.\n   *        1. This method requires an offline signature from the notary set in\n   *           the DataResponse, which will indicate the audit result or if\n   *           the data was not audited at all.\n   *             - If the notary did not audit the data or it verifies that it was\n   *               valid, funds will be sent to the Seller.\n   *             - If the notary signals the data as invalid, funds will be\n   *               handed back to the Buyer.\n   *             - Otherwise, funds will be locked at the `DataExchange` contract\n   *               until the issue is solved.\n   *        2. This also works as a pause mechanism in case the system is\n   *           working under abnormal scenarios while allowing the parties to keep\n   *           exchanging information without losing their funds until the system\n   *           is back up.\n   *        3. The `msg.sender` must be the buyer or the notary in case the\n   *           former does not show up. Only through the notary's signature it is\n   *           decided who must receive the funds.\n   * @param orderAddr Order address where the DataResponse belongs to.\n   * @param seller Seller address.\n   * @param wasAudited Indicates whether the data was audited or not.\n   * @param isDataValid Indicates the result of the audit, if happened.\n   * @param notarySignature Off-chain Notary signature\n   * @return true if the DataResponse was successfully closed, reverts otherwise.\n   */\n  function closeDataResponse(\n    address orderAddr,\n    address seller,\n    bool wasAudited,\n    bool isDataValid,\n    bytes notarySignature\n  ) public whenNotPaused isOrderLegit(orderAddr) returns (bool) {\n    DataOrder order = DataOrder(orderAddr);\n    address buyer = order.buyer();\n    require(order.hasSellerBeenAccepted(seller));\n\n    address notary = order.getNotaryForSeller(seller);\n    require(msg.sender == buyer || msg.sender == notary);\n    require(\n      CryptoUtils.isNotaryVeredictValid(\n        orderAddr,\n        seller,\n        notary,\n        wasAudited,\n        isDataValid,\n        notarySignature\n      )\n    );\n    bool transactionCompleted = !wasAudited || isDataValid;\n    require(order.closeDataResponse(seller, transactionCompleted));\n    payPlayers(\n      order,\n      buyer,\n      seller,\n      notary,\n      wasAudited,\n      isDataValid\n    );\n\n    if (transactionCompleted) {\n      emit TransactionCompleted(order, seller);\n    } else {\n      emit RefundedToBuyer(order, buyer);\n    }\n    return true;\n  }\n\n  /**\n   * @notice Closes the DataOrder.\n   * @dev Onces the data is closed it will no longer accept new DataResponses.\n   *      The `msg.sender` must be the buyer of the order or the owner of the\n   *      contract in a emergency case.\n   * @param orderAddr Order address to close.\n   * @return true if the DataOrder was successfully closed, reverts otherwise.\n   */\n  function closeOrder(\n    address orderAddr\n  ) public whenNotPaused isOrderLegit(orderAddr) returns (bool) {\n    require(openOrders.exist(orderAddr));\n    DataOrder order = DataOrder(orderAddr);\n    address buyer = order.buyer();\n    require(msg.sender == buyer || msg.sender == owner);\n\n    bool okay = order.close();\n    if (okay) {\n      // remaining budget for audits go back to buyer.\n      uint256 remainingBudget = buyerRemainingBudgetForAudits[buyer][order];\n      buyerRemainingBudgetForAudits[buyer][order] = 0;\n      require(token.transfer(buyer, remainingBudget));\n\n      openOrders.remove(orderAddr);\n      emit OrderClosed(orderAddr);\n    }\n\n    return okay;\n  }\n\n  /**\n   * @notice Gets all the data orders associated with a notary.\n   * @param notary Notary address to get orders for.\n   * @return A list of DataOrder addresses.\n   */\n  function getOrdersForNotary(\n    address notary\n  ) public view validAddress(notary) returns (address[]) {\n    return ordersByNotary[notary];\n  }\n\n  /**\n   * @notice Gets all the data orders associated with a seller.\n   * @param seller Seller address to get orders for.\n   * @return List of DataOrder addresses.\n   */\n  function getOrdersForSeller(\n    address seller\n  ) public view validAddress(seller) returns (address[]) {\n    return ordersBySeller[seller];\n  }\n\n  /**\n   * @notice Gets all the data orders associated with a buyer.\n   * @param buyer Buyer address to get orders for.\n   * @return List of DataOrder addresses.\n   */\n  function getOrdersForBuyer(\n    address buyer\n  ) public view validAddress(buyer) returns (address[]) {\n    return ordersByBuyer[buyer];\n  }\n\n  /**\n   * @notice Gets all the open data orders, that is all the DataOrders that are\n   *         still receiving new DataResponses.\n   * @return List of DataOrder addresses.\n   */\n  function getOpenOrders() public view returns (address[]) {\n    return openOrders.addresses;\n  }\n\n  /**\n   * @dev Gets the list of allowed notaries.\n   * @return List of notary addresses.\n   */\n  function getAllowedNotaries() public view returns (address[]) {\n    return allowedNotaries.addresses;\n  }\n\n  /**\n   * @dev Gets information about a give notary.\n   * @param notary Notary address to get info for.\n   * @return Notary information (address, name, notaryUrl, publicKey, isActive).\n   */\n  function getNotaryInfo(\n    address notary\n  ) public view validAddress(notary) returns (address, string, string, string, bool) {\n    NotaryInfo memory info = notaryInfo[notary];\n\n    return (\n      info.addr,\n      info.name,\n      info.notaryUrl,\n      info.publicKey,\n      allowedNotaries.exist(notary)\n    );\n  }\n\n  /**\n   * @dev Requires that five addresses are distinct between themselves and zero.\n   * @param addresses array of five addresses to explore.\n   */\n  function allDistinct(address[5] addresses) private pure {\n    for (uint i = 0; i < addresses.length; i++) {\n      require(addresses[i] != address(0));\n      for (uint j = i + 1; j < addresses.length; j++) { // solium-disable-line zeppelin/no-arithmetic-operations\n        require(addresses[i] != addresses[j]);\n      }\n    }\n  }\n\n  /**\n   * @dev Charges a buyer the final charges for a given `DataResponse`.\n   * @notice 1. Tokens are held in the DataExchange contract until players are paid.\n   *         2. This function follows a basic invoice flow:\n   *\n   *               DataOrder price\n   *            + Notarization fee\n   *            ------------------\n   *                 Total charges\n   *            -  Prepaid charges (Minimum between Notarization fee and Buyer remaining budget)\n   *            ------------------\n   *                 Final charges\n   *\n   * @param order DataOrder to which the DataResponse applies.\n   * @param seller Address of the Seller.\n   */\n  function chargeBuyer(DataOrder order, address seller) private whenNotPaused {\n    address buyer = order.buyer();\n    address notary = order.getNotaryForSeller(seller);\n    uint256 remainingBudget = buyerRemainingBudgetForAudits[buyer][order];\n\n    uint256 orderPrice = order.price();\n    (,, uint256 notarizationFee,,) = order.getNotaryInfo(notary);\n    uint256 totalCharges = orderPrice.add(notarizationFee);\n\n    uint256 prePaid = Math.min256(notarizationFee, remainingBudget);\n    uint256 finalCharges = totalCharges.sub(prePaid);\n\n    buyerRemainingBudgetForAudits[buyer][order] = remainingBudget.sub(prePaid);\n    require(token.transferFrom(buyer, this, finalCharges));\n\n    // Bookkeeping of the available tokens paid by the Buyer and now in control\n    // of the DataExchange takes into account the total charges (final + pre-paid)\n    buyerBalance[buyer][order][seller] = buyerBalance[buyer][order][seller].add(totalCharges);\n  }\n\n  /**\n   * @dev Pays the seller, notary and/or buyer according to the notary's veredict.\n   * @param order DataOrder to which the payments apply.\n   * @param buyer Address of the Buyer.\n   * @param seller Address of the Seller.\n   * @param notary Address of the Notary.\n   * @param wasAudited Indicates whether the data was audited or not.\n   * @param isDataValid Indicates the result of the audit, if happened.\n   */\n  function payPlayers(\n    DataOrder order,\n    address buyer,\n    address seller,\n    address notary,\n    bool wasAudited,\n    bool isDataValid\n  ) private whenNotPaused {\n    uint256 orderPrice = order.price();\n    (,, uint256 notarizationFee,,) = order.getNotaryInfo(notary);\n    uint256 totalCharges = orderPrice.add(notarizationFee);\n\n    require(buyerBalance[buyer][order][seller] >= totalCharges);\n    buyerBalance[buyer][order][seller] = buyerBalance[buyer][order][seller].sub(totalCharges);\n\n    // if no notarization was done, notarization fee tokens go back to buyer.\n    address notarizationFeeReceiver = wasAudited ? notary : buyer;\n\n    // if no notarization was done or data is valid, tokens go to the seller\n    address orderPriceReceiver = (!wasAudited || isDataValid) ? seller : buyer;\n\n    require(token.transfer(notarizationFeeReceiver, notarizationFee));\n    require(token.transfer(orderPriceReceiver, orderPrice));\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getOrdersForSeller\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ordersByBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyerRemainingBudgetForAudits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimumInitialBudgetForAudits\",\"type\":\"uint256\"}],\"name\":\"setMinimumInitialBudgetForAudits\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"notary\",\"type\":\"address\"}],\"name\":\"getNotaryInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddr\",\"type\":\"address\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"notary\",\"type\":\"address\"},{\"name\":\"dataHash\",\"type\":\"string\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"addDataResponseToOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"notary\",\"type\":\"address\"}],\"name\":\"getOrdersForNotary\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddr\",\"type\":\"address\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"wasAudited\",\"type\":\"bool\"},{\"name\":\"isDataValid\",\"type\":\"bool\"},{\"name\":\"notarySignature\",\"type\":\"bytes\"}],\"name\":\"closeDataResponse\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddr\",\"type\":\"address\"}],\"name\":\"closeOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddr\",\"type\":\"address\"},{\"name\":\"notary\",\"type\":\"address\"},{\"name\":\"responsesPercentage\",\"type\":\"uint256\"},{\"name\":\"notarizationFee\",\"type\":\"uint256\"},{\"name\":\"notarizationTermsOfService\",\"type\":\"string\"},{\"name\":\"notarySignature\",\"type\":\"bytes\"}],\"name\":\"addNotaryToOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"getOrdersForBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllowedNotaries\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ordersByNotary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"notary\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"notaryUrl\",\"type\":\"string\"},{\"name\":\"publicKey\",\"type\":\"string\"}],\"name\":\"registerNotary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ordersBySeller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOpenOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"filters\",\"type\":\"string\"},{\"name\":\"dataRequest\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"initialBudgetForAudits\",\"type\":\"uint256\"},{\"name\":\"termsAndConditions\",\"type\":\"string\"},{\"name\":\"buyerURL\",\"type\":\"string\"},{\"name\":\"publicKey\",\"type\":\"string\"}],\"name\":\"newOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumInitialBudgetForAudits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"notary\",\"type\":\"address\"}],\"name\":\"unregisterNotary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"notary\",\"type\":\"address\"}],\"name\":\"NotaryRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"notary\",\"type\":\"address\"}],\"name\":\"NotaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"notary\",\"type\":\"address\"}],\"name\":\"NotaryUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderAddr\",\"type\":\"address\"}],\"name\":\"NewOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"notary\",\"type\":\"address\"}],\"name\":\"NotaryAddedToOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"DataAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"TransactionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"RefundedToBuyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderAddr\",\"type\":\"address\"}],\"name\":\"OrderClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000003f17dd476faf0a4855572f0b6ed5115d9bba22ad0000000000000000000000000183b6ffc017ac4f767e460886291d09229a848b",
  "libraries": [
    {
      "name": "CryptoUtils",
      "address": "0x48819464877341cb7e0bbd91e0c268016ae5e6ad"
    },
    {
      "name": "MultiMap",
      "address": "0x72ae13d70f65c56e59eb63993605abef1ecb9c41"
    }
  ]
}