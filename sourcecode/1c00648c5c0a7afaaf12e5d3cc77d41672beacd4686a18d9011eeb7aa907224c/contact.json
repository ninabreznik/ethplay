{
  "address": "0xc8e072145f8aa3507a291141beae1109070a6fb8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KingOfEthRoads",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-13\n*/\n\n// File: contracts/GodMode.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title God Mode\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a basic interface for God\n///  in a contract as well as the ability for God to pause\n///  the contract\ncontract GodMode {\n    /// @dev Is the contract paused?\n    bool public isPaused;\n\n    /// @dev God's address\n    address public god;\n\n    /// @dev Only God can run this function\n    modifier onlyGod()\n    {\n        require(god == msg.sender);\n        _;\n    }\n\n    /// @dev This function can only be run while the contract\n    ///  is not paused\n    modifier notPaused()\n    {\n        require(!isPaused);\n        _;\n    }\n\n    /// @dev This event is fired when the contract is paused\n    event GodPaused();\n\n    /// @dev This event is fired when the contract is unpaused\n    event GodUnpaused();\n\n    constructor() public\n    {\n        // Make the creator of the contract God\n        god = msg.sender;\n    }\n\n    /// @dev God can change the address of God\n    /// @param _newGod The new address for God\n    function godChangeGod(address _newGod) public onlyGod\n    {\n        god = _newGod;\n    }\n\n    /// @dev God can pause the game\n    function godPause() public onlyGod\n    {\n        isPaused = true;\n\n        emit GodPaused();\n    }\n\n    /// @dev God can unpause the game\n    function godUnpause() public onlyGod\n    {\n        isPaused = false;\n\n        emit GodUnpaused();\n    }\n}\n\n// File: contracts/KingOfEthAbstractInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth Abstract Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Abstract interface contract for titles and taxes\ncontract KingOfEthAbstractInterface {\n    /// @dev The address of the current King\n    address public king;\n\n    /// @dev The address of the current Wayfarer\n    address public wayfarer;\n\n    /// @dev Anyone can pay taxes\n    function payTaxes() public payable;\n}\n\n// File: contracts/KingOfEthBlindAuctionsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Blind Auctions Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a reference to the blind auctions contract\ncontract KingOfEthBlindAuctionsReferencer is GodMode {\n    /// @dev The address of the blind auctions contract\n    address public blindAuctionsContract;\n\n    /// @dev Only the blind auctions contract can run this\n    modifier onlyBlindAuctionsContract()\n    {\n        require(blindAuctionsContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set a new blind auctions contract\n    /// @param _blindAuctionsContract the address of the blind auctions\n    ///  contract\n    function godSetBlindAuctionsContract(address _blindAuctionsContract)\n        public\n        onlyGod\n    {\n        blindAuctionsContract = _blindAuctionsContract;\n    }\n}\n\n// File: contracts/KingOfEthOpenAuctionsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Open Auctions Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a reference to the open auctions contract\ncontract KingOfEthOpenAuctionsReferencer is GodMode {\n    /// @dev The address of the auctions contract\n    address public openAuctionsContract;\n\n    /// @dev Only the open auctions contract can run this\n    modifier onlyOpenAuctionsContract()\n    {\n        require(openAuctionsContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set a new auctions contract\n    function godSetOpenAuctionsContract(address _openAuctionsContract)\n        public\n        onlyGod\n    {\n        openAuctionsContract = _openAuctionsContract;\n    }\n}\n\n// File: contracts/KingOfEthAuctionsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n/// @title King of Eth: Auctions Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev This contract provides a reference to the auctions contracts\ncontract KingOfEthAuctionsReferencer is\n      KingOfEthBlindAuctionsReferencer\n    , KingOfEthOpenAuctionsReferencer\n{\n    /// @dev Only an auctions contract can run this\n    modifier onlyAuctionsContract()\n    {\n        require(blindAuctionsContract == msg.sender\n             || openAuctionsContract == msg.sender);\n        _;\n    }\n}\n\n// File: contracts/KingOfEthReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Functionality to allow contracts to reference the king contract\ncontract KingOfEthReferencer is GodMode {\n    /// @dev The address of the king contract\n    address public kingOfEthContract;\n\n    /// @dev Only the king contract can run this\n    modifier onlyKingOfEthContract()\n    {\n        require(kingOfEthContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can change the king contract\n    /// @param _kingOfEthContract The new address\n    function godSetKingOfEthContract(address _kingOfEthContract)\n        public\n        onlyGod\n    {\n        kingOfEthContract = _kingOfEthContract;\n    }\n}\n\n// File: contracts/KingOfEthBoard.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n/// @title King of Eth: Board\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for board\ncontract KingOfEthBoard is\n      GodMode\n    , KingOfEthAuctionsReferencer\n    , KingOfEthReferencer\n{\n    /// @dev x coordinate of the top left corner of the boundary\n    uint public boundX1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;\n\n    /// @dev y coordinate of the top left corner of the boundary\n    uint public boundY1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;\n\n    /// @dev x coordinate of the bottom right corner of the boundary\n    uint public boundX2 = 0x800000000000000000000000000000000000000000000000000000000000000f;\n\n    /// @dev y coordinate of the bottom right corner of the boundary\n    uint public boundY2 = 0x800000000000000000000000000000000000000000000000000000000000000f;\n\n    /// @dev Number used to divide the total number of house locations\n    /// after any expansion to yield the number of auctions that  will be\n    /// available to start for the expansion's duration\n    uint public constant auctionsAvailableDivisor = 10;\n\n    /// @dev Amount of time the King must wait between increasing the board\n    uint public constant kingTimeBetweenIncrease = 2 weeks;\n\n    /// @dev Amount of time the Wayfarer must wait between increasing the board\n    uint public constant wayfarerTimeBetweenIncrease = 3 weeks;\n\n    /// @dev Amount of time that anyone but the King or Wayfarer must wait\n    ///  before increasing the board\n    uint public constant plebTimeBetweenIncrease = 4 weeks;\n\n    /// @dev The last time the board was increased in size\n    uint public lastIncreaseTime;\n\n    /// @dev The direction of the next increase\n    uint8 public nextIncreaseDirection;\n\n    /// @dev The number of auctions that players may choose to start\n    ///  for this expansion\n    uint public auctionsRemaining;\n\n    constructor() public\n    {\n        // Game is paused as God must start it\n        isPaused = true;\n\n        // Set the auctions remaining\n        setAuctionsAvailableForBounds();\n    }\n\n    /// @dev Fired when the board is increased in size\n    event BoardSizeIncreased(\n          address initiator\n        , uint newBoundX1\n        , uint newBoundY1\n        , uint newBoundX2\n        , uint newBoundY2\n        , uint lastIncreaseTime\n        , uint nextIncreaseDirection\n        , uint auctionsRemaining\n    );\n\n    /// @dev Only the King can run this\n    modifier onlyKing()\n    {\n        require(KingOfEthAbstractInterface(kingOfEthContract).king() == msg.sender);\n        _;\n    }\n\n    /// @dev Only the Wayfarer can run this\n    modifier onlyWayfarer()\n    {\n        require(KingOfEthAbstractInterface(kingOfEthContract).wayfarer() == msg.sender);\n        _;\n    }\n\n    /// @dev Set the total auctions available\n    function setAuctionsAvailableForBounds() private\n    {\n        uint boundDiffX = boundX2 - boundX1;\n        uint boundDiffY = boundY2 - boundY1;\n\n        auctionsRemaining = boundDiffX * boundDiffY / 2 / auctionsAvailableDivisor;\n    }\n\n    /// @dev Increase the board's size making sure to keep steady at\n    ///  the maximum outer bounds\n    function increaseBoard() private\n    {\n        // The length of increase\n        uint _increaseLength;\n\n        // If this increase direction is right\n        if(0 == nextIncreaseDirection)\n        {\n            _increaseLength = boundX2 - boundX1;\n            uint _updatedX2 = boundX2 + _increaseLength;\n\n            // Stay within bounds\n            if(_updatedX2 <= boundX2 || _updatedX2 <= _increaseLength)\n            {\n                boundX2 = ~uint(0);\n            }\n            else\n            {\n                boundX2 = _updatedX2;\n            }\n        }\n        // If this increase direction is down\n        else if(1 == nextIncreaseDirection)\n        {\n            _increaseLength = boundY2 - boundY1;\n            uint _updatedY2 = boundY2 + _increaseLength;\n\n            // Stay within bounds\n            if(_updatedY2 <= boundY2 || _updatedY2 <= _increaseLength)\n            {\n                boundY2 = ~uint(0);\n            }\n            else\n            {\n                boundY2 = _updatedY2;\n            }\n        }\n        // If this increase direction is left\n        else if(2 == nextIncreaseDirection)\n        {\n            _increaseLength = boundX2 - boundX1;\n\n            // Stay within bounds\n            if(boundX1 <= _increaseLength)\n            {\n                boundX1 = 0;\n            }\n            else\n            {\n                boundX1 -= _increaseLength;\n            }\n        }\n        // If this increase direction is up\n        else if(3 == nextIncreaseDirection)\n        {\n            _increaseLength = boundY2 - boundY1;\n\n            // Stay within bounds\n            if(boundY1 <= _increaseLength)\n            {\n                boundY1 = 0;\n            }\n            else\n            {\n                boundY1 -= _increaseLength;\n            }\n        }\n\n        // The last increase time is now\n        lastIncreaseTime = now;\n\n        // Set the next increase direction\n        nextIncreaseDirection = (nextIncreaseDirection + 1) % 4;\n\n        // Reset the auctions available\n        setAuctionsAvailableForBounds();\n\n        emit BoardSizeIncreased(\n              msg.sender\n            , boundX1\n            , boundY1\n            , boundX2\n            , boundY2\n            , now\n            , nextIncreaseDirection\n            , auctionsRemaining\n        );\n    }\n\n    /// @dev God can start the game\n    function godStartGame() public onlyGod\n    {\n        // Reset increase times\n        lastIncreaseTime = now;\n\n        // Unpause the game\n        godUnpause();\n    }\n\n    /// @dev The auctions contracts can decrement the number\n    ///  of auctions that are available to be started\n    function auctionsDecrementAuctionsRemaining()\n        public\n        onlyAuctionsContract\n    {\n        auctionsRemaining -= 1;\n    }\n\n    /// @dev The auctions contracts can increment the number\n    ///  of auctions that are available to be started when\n    ///  an auction ends wihout a winner\n    function auctionsIncrementAuctionsRemaining()\n        public\n        onlyAuctionsContract\n    {\n        auctionsRemaining += 1;\n    }\n\n    /// @dev The King can increase the board much faster than the plebs\n    function kingIncreaseBoard()\n        public\n        onlyKing\n    {\n        // Require enough time has passed since the last increase\n        require(lastIncreaseTime + kingTimeBetweenIncrease < now);\n\n        increaseBoard();\n    }\n\n    /// @dev The Wayfarer can increase the board faster than the plebs\n    function wayfarerIncreaseBoard()\n        public\n        onlyWayfarer\n    {\n        // Require enough time has passed since the last increase\n        require(lastIncreaseTime + wayfarerTimeBetweenIncrease < now);\n\n        increaseBoard();\n    }\n\n    /// @dev Any old pleb can increase the board\n    function plebIncreaseBoard() public\n    {\n        // Require enough time has passed since the last increase\n        require(lastIncreaseTime + plebTimeBetweenIncrease < now);\n\n        increaseBoard();\n    }\n}\n\n// File: contracts/KingOfEthBoardReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Board Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Functionality to allow contracts to reference the board contract\ncontract KingOfEthBoardReferencer is GodMode {\n    /// @dev The address of the board contract\n    address public boardContract;\n\n    /// @dev Only the board contract can run this\n    modifier onlyBoardContract()\n    {\n        require(boardContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can change the board contract\n    /// @param _boardContract The new address\n    function godSetBoardContract(address _boardContract)\n        public\n        onlyGod\n    {\n        boardContract = _boardContract;\n    }\n}\n\n// File: contracts/KingOfEthHousesAbstractInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth: Houses Abstract Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Abstract interface contract for houses\ncontract KingOfEthHousesAbstractInterface {\n    /// @dev Get the owner of the house at some location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @return The address of the owner\n    function ownerOf(uint _x, uint _y) public view returns(address);\n\n    /// @dev Get the level of the house at some location\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @return The level of the house\n    function level(uint _x, uint _y) public view returns(uint8);\n\n    /// @dev The auctions contracts can set the owner of a house after an auction\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _owner The new owner of the house\n    function auctionsSetOwner(uint _x, uint _y, address _owner) public;\n\n    /// @dev The house realty contract can transfer house ownership\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _from The previous owner of house\n    /// @param _to The new owner of house\n    function houseRealtyTransferOwnership(\n          uint _x\n        , uint _y\n        , address _from\n        , address _to\n    ) public;\n}\n\n// File: contracts/KingOfEthHousesReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Houses Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to reference the houses contract\ncontract KingOfEthHousesReferencer is GodMode {\n    /// @dev The houses contract's address\n    address public housesContract;\n\n    /// @dev Only the houses contract can run this function\n    modifier onlyHousesContract()\n    {\n        require(housesContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set the realty contract\n    /// @param _housesContract The new address\n    function godSetHousesContract(address _housesContract)\n        public\n        onlyGod\n    {\n        housesContract = _housesContract;\n    }\n}\n\n// File: contracts/KingOfEthEthExchangeReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Resource-to-ETH Exchange Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to interface with the\n///  ETH exchange contract\ncontract KingOfEthEthExchangeReferencer is GodMode {\n    /// @dev Address of the ETH exchange contract\n    address public ethExchangeContract;\n\n    /// @dev Only the ETH exchange contract may run this function\n    modifier onlyEthExchangeContract()\n    {\n        require(ethExchangeContract == msg.sender);\n        _;\n    }\n\n    /// @dev God may set the ETH exchange contract's address\n    /// @dev _ethExchangeContract The new address\n    function godSetEthExchangeContract(address _ethExchangeContract)\n        public\n        onlyGod\n    {\n        ethExchangeContract = _ethExchangeContract;\n    }\n}\n\n// File: contracts/KingOfEthResourceExchangeReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Resource-to-Resource Exchange Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to interface with the\n///  resource-to-resource contract\ncontract KingOfEthResourceExchangeReferencer is GodMode {\n    /// @dev Address of the resource-to-resource contract\n    address public resourceExchangeContract;\n\n    /// @dev Only the resource-to-resource contract may run this function\n    modifier onlyResourceExchangeContract()\n    {\n        require(resourceExchangeContract == msg.sender);\n        _;\n    }\n\n    /// @dev God may set the resource-to-resource contract's address\n    /// @dev _resourceExchangeContract The new address\n    function godSetResourceExchangeContract(address _resourceExchangeContract)\n        public\n        onlyGod\n    {\n        resourceExchangeContract = _resourceExchangeContract;\n    }\n}\n\n// File: contracts/KingOfEthExchangeReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n/// @title King of Eth: Exchange Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to interface with the exchange contract\ncontract KingOfEthExchangeReferencer is\n      GodMode\n    , KingOfEthEthExchangeReferencer\n    , KingOfEthResourceExchangeReferencer\n{\n    /// @dev Only one of the exchange contracts may\n    ///  run this function\n    modifier onlyExchangeContract()\n    {\n        require(\n               ethExchangeContract == msg.sender\n            || resourceExchangeContract == msg.sender\n        );\n        _;\n    }\n}\n\n// File: contracts/KingOfEthResourcesInterfaceReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Resources Interface Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to reference the resource interface contract\ncontract KingOfEthResourcesInterfaceReferencer is GodMode {\n    /// @dev The interface contract's address\n    address public interfaceContract;\n\n    /// @dev Only the interface contract can run this function\n    modifier onlyInterfaceContract()\n    {\n        require(interfaceContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set the realty contract\n    /// @param _interfaceContract The new address\n    function godSetInterfaceContract(address _interfaceContract)\n        public\n        onlyGod\n    {\n        interfaceContract = _interfaceContract;\n    }\n}\n\n// File: contracts/KingOfEthResource.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n/// @title ERC20Interface\n/// @dev ERC20 token interface contract\ncontract ERC20Interface {\n    function totalSupply() public constant returns(uint);\n    function balanceOf(address _tokenOwner) public constant returns(uint balance);\n    function allowance(address _tokenOwner, address _spender) public constant returns(uint remaining);\n    function transfer(address _to, uint _tokens) public returns(bool success);\n    function approve(address _spender, uint _tokens) public returns(bool success);\n    function transferFrom(address _from, address _to, uint _tokens) public returns(bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n/// @title King of Eth: Resource\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Common contract implementation for resources\ncontract KingOfEthResource is\n      ERC20Interface\n    , GodMode\n    , KingOfEthResourcesInterfaceReferencer\n{\n    /// @dev Current resource supply\n    uint public resourceSupply;\n\n    /// @dev ERC20 token's decimals\n    uint8 public constant decimals = 0;\n\n    /// @dev mapping of addresses to holdings\n    mapping (address => uint) holdings;\n\n    /// @dev mapping of addresses to amount of tokens frozen\n    mapping (address => uint) frozenHoldings;\n\n    /// @dev mapping of addresses to mapping of allowances for an address\n    mapping (address => mapping (address => uint)) allowances;\n\n    /// @dev ERC20 total supply\n    /// @return The current total supply of the resource\n    function totalSupply()\n        public\n        constant\n        returns(uint)\n    {\n        return resourceSupply;\n    }\n\n    /// @dev ERC20 balance of address\n    /// @param _tokenOwner The address to look up\n    /// @return The balance of the address\n    function balanceOf(address _tokenOwner)\n        public\n        constant\n        returns(uint balance)\n    {\n        return holdings[_tokenOwner];\n    }\n\n    /// @dev Total resources frozen for an address\n    /// @param _tokenOwner The address to look up\n    /// @return The frozen balance of the address\n    function frozenTokens(address _tokenOwner)\n        public\n        constant\n        returns(uint balance)\n    {\n        return frozenHoldings[_tokenOwner];\n    }\n\n    /// @dev The allowance for a spender on an account\n    /// @param _tokenOwner The account that allows withdrawels\n    /// @param _spender The account that is allowed to withdraw\n    /// @return The amount remaining in the allowance\n    function allowance(address _tokenOwner, address _spender)\n        public\n        constant\n        returns(uint remaining)\n    {\n        return allowances[_tokenOwner][_spender];\n    }\n\n    /// @dev Only run if player has at least some amount of tokens\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens required\n    modifier hasAvailableTokens(address _owner, uint _tokens)\n    {\n        require(holdings[_owner] - frozenHoldings[_owner] >= _tokens);\n        _;\n    }\n\n    /// @dev Only run if player has at least some amount of tokens frozen\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of frozen tokens required\n    modifier hasFrozenTokens(address _owner, uint _tokens)\n    {\n        require(frozenHoldings[_owner] >= _tokens);\n        _;\n    }\n\n    /// @dev Set up the exact same state in each resource\n    constructor() public\n    {\n        // God gets 200 to put on exchange\n        holdings[msg.sender] = 200;\n\n        resourceSupply = 200;\n    }\n\n    /// @dev The resources interface can burn tokens for building\n    ///  roads or houses\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to burn\n    function interfaceBurnTokens(address _owner, uint _tokens)\n        public\n        onlyInterfaceContract\n        hasAvailableTokens(_owner, _tokens)\n    {\n        holdings[_owner] -= _tokens;\n\n        resourceSupply -= _tokens;\n\n        // Pretend the tokens were sent to 0x0\n        emit Transfer(_owner, 0x0, _tokens);\n    }\n\n    /// @dev The resources interface contract can mint tokens for houses\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to burn\n    function interfaceMintTokens(address _owner, uint _tokens)\n        public\n        onlyInterfaceContract\n    {\n        holdings[_owner] += _tokens;\n\n        resourceSupply += _tokens;\n\n        // Pretend the tokens were sent from the interface contract\n        emit Transfer(interfaceContract, _owner, _tokens);\n    }\n\n    /// @dev The interface can freeze tokens\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to freeze\n    function interfaceFreezeTokens(address _owner, uint _tokens)\n        public\n        onlyInterfaceContract\n        hasAvailableTokens(_owner, _tokens)\n    {\n        frozenHoldings[_owner] += _tokens;\n    }\n\n    /// @dev The interface can thaw tokens\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to thaw\n    function interfaceThawTokens(address _owner, uint _tokens)\n        public\n        onlyInterfaceContract\n        hasFrozenTokens(_owner, _tokens)\n    {\n        frozenHoldings[_owner] -= _tokens;\n    }\n\n    /// @dev The interface can transfer tokens\n    /// @param _from The owner of the tokens\n    /// @param _to The new owner of the tokens\n    /// @param _tokens The amount of tokens to transfer\n    function interfaceTransfer(address _from, address _to, uint _tokens)\n        public\n        onlyInterfaceContract\n    {\n        assert(holdings[_from] >= _tokens);\n\n        holdings[_from] -= _tokens;\n        holdings[_to]   += _tokens;\n\n        emit Transfer(_from, _to, _tokens);\n    }\n\n    /// @dev The interface can transfer frozend tokens\n    /// @param _from The owner of the tokens\n    /// @param _to The new owner of the tokens\n    /// @param _tokens The amount of frozen tokens to transfer\n    function interfaceFrozenTransfer(address _from, address _to, uint _tokens)\n        public\n        onlyInterfaceContract\n        hasFrozenTokens(_from, _tokens)\n    {\n        // Make sure to deduct the tokens from both the total and frozen amounts\n        holdings[_from]       -= _tokens;\n        frozenHoldings[_from] -= _tokens;\n        holdings[_to]         += _tokens;\n\n        emit Transfer(_from, _to, _tokens);\n    }\n\n    /// @dev ERC20 transfer\n    /// @param _to The address to transfer to\n    /// @param _tokens The amount of tokens to transfer\n    function transfer(address _to, uint _tokens)\n        public\n        hasAvailableTokens(msg.sender, _tokens)\n        returns(bool success)\n    {\n        holdings[_to]        += _tokens;\n        holdings[msg.sender] -= _tokens;\n\n        emit Transfer(msg.sender, _to, _tokens);\n\n        return true;\n    }\n\n    /// @dev ERC20 approve\n    /// @param _spender The address to approve\n    /// @param _tokens The amount of tokens to approve\n    function approve(address _spender, uint _tokens)\n        public\n        returns(bool success)\n    {\n        allowances[msg.sender][_spender] = _tokens;\n\n        emit Approval(msg.sender, _spender, _tokens);\n\n        return true;\n    }\n\n    /// @dev ERC20 transfer from\n    /// @param _from The address providing the allowance\n    /// @param _to The address using the allowance\n    /// @param _tokens The amount of tokens to transfer\n    function transferFrom(address _from, address _to, uint _tokens)\n        public\n        hasAvailableTokens(_from, _tokens)\n        returns(bool success)\n    {\n        require(allowances[_from][_to] >= _tokens);\n\n        holdings[_to]          += _tokens;\n        holdings[_from]        -= _tokens;\n        allowances[_from][_to] -= _tokens;\n\n        emit Transfer(_from, _to, _tokens);\n\n        return true;\n    }\n}\n\n// File: contracts/KingOfEthResourceType.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth: Resource Type\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides enum to choose resource types\ncontract KingOfEthResourceType {\n    /// @dev Enum describing a choice of a resource\n    enum ResourceType {\n          ETH\n        , BRONZE\n        , CORN\n        , GOLD\n        , OIL\n        , ORE\n        , STEEL\n        , URANIUM\n        , WOOD\n    }\n}\n\n// File: contracts/KingOfEthRoadsReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Roads Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to reference the roads contract\ncontract KingOfEthRoadsReferencer is GodMode {\n    /// @dev The roads contract's address\n    address public roadsContract;\n\n    /// @dev Only the roads contract can run this function\n    modifier onlyRoadsContract()\n    {\n        require(roadsContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set the realty contract\n    /// @param _roadsContract The new address\n    function godSetRoadsContract(address _roadsContract)\n        public\n        onlyGod\n    {\n        roadsContract = _roadsContract;\n    }\n}\n\n// File: contracts/KingOfEthResourcesInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\n/// @title King of Eth: Resources Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for interacting with resources\ncontract KingOfEthResourcesInterface is\n      GodMode\n    , KingOfEthExchangeReferencer\n    , KingOfEthHousesReferencer\n    , KingOfEthResourceType\n    , KingOfEthRoadsReferencer\n{\n    /// @dev Amount of resources a user gets for building a house\n    uint public constant resourcesPerHouse = 3;\n\n    /// @dev Address for the bronze contract\n    address public bronzeContract;\n\n    /// @dev Address for the corn contract\n    address public cornContract;\n\n    /// @dev Address for the gold contract\n    address public goldContract;\n\n    /// @dev Address for the oil contract\n    address public oilContract;\n\n    /// @dev Address for the ore contract\n    address public oreContract;\n\n    /// @dev Address for the steel contract\n    address public steelContract;\n\n    /// @dev Address for the uranium contract\n    address public uraniumContract;\n\n    /// @dev Address for the wood contract\n    address public woodContract;\n\n    /// @param _bronzeContract The address of the bronze contract\n    /// @param _cornContract The address of the corn contract\n    /// @param _goldContract The address of the gold contract\n    /// @param _oilContract The address of the oil contract\n    /// @param _oreContract The address of the ore contract\n    /// @param _steelContract The address of the steel contract\n    /// @param _uraniumContract The address of the uranium contract\n    /// @param _woodContract The address of the wood contract\n    constructor(\n          address _bronzeContract\n        , address _cornContract\n        , address _goldContract\n        , address _oilContract\n        , address _oreContract\n        , address _steelContract\n        , address _uraniumContract\n        , address _woodContract\n    )\n        public\n    {\n        bronzeContract  = _bronzeContract;\n        cornContract    = _cornContract;\n        goldContract    = _goldContract;\n        oilContract     = _oilContract;\n        oreContract     = _oreContract;\n        steelContract   = _steelContract;\n        uraniumContract = _uraniumContract;\n        woodContract    = _woodContract;\n    }\n\n    /// @dev Return the particular address for a certain resource type\n    /// @param _type The resource type\n    /// @return The address for that resource\n    function contractFor(ResourceType _type)\n        public\n        view\n        returns(address)\n    {\n        // ETH does not have a contract\n        require(ResourceType.ETH != _type);\n\n        if(ResourceType.BRONZE == _type)\n        {\n            return bronzeContract;\n        }\n        else if(ResourceType.CORN == _type)\n        {\n            return cornContract;\n        }\n        else if(ResourceType.GOLD == _type)\n        {\n            return goldContract;\n        }\n        else if(ResourceType.OIL == _type)\n        {\n            return oilContract;\n        }\n        else if(ResourceType.ORE == _type)\n        {\n            return oreContract;\n        }\n        else if(ResourceType.STEEL == _type)\n        {\n            return steelContract;\n        }\n        else if(ResourceType.URANIUM == _type)\n        {\n            return uraniumContract;\n        }\n        else if(ResourceType.WOOD == _type)\n        {\n            return woodContract;\n        }\n    }\n\n    /// @dev Determine the resource type of a tile\n    /// @param _x The x coordinate of the top left corner of the tile\n    /// @param _y The y coordinate of the top left corner of the tile\n    function resourceType(uint _x, uint _y)\n        public\n        pure\n        returns(ResourceType resource)\n    {\n        uint _seed = (_x + 7777777) ^  _y;\n\n        if(0 == _seed % 97)\n        {\n          return ResourceType.URANIUM;\n        }\n        else if(0 == _seed % 29)\n        {\n          return ResourceType.OIL;\n        }\n        else if(0 == _seed % 23)\n        {\n          return ResourceType.STEEL;\n        }\n        else if(0 == _seed % 17)\n        {\n          return ResourceType.GOLD;\n        }\n        else if(0 == _seed % 11)\n        {\n          return ResourceType.BRONZE;\n        }\n        else if(0 == _seed % 5)\n        {\n          return ResourceType.WOOD;\n        }\n        else if(0 == _seed % 2)\n        {\n          return ResourceType.CORN;\n        }\n        else\n        {\n          return ResourceType.ORE;\n        }\n    }\n\n    /// @dev Lookup the number of resource points for a certain\n    ///  player\n    /// @param _player The player in question\n    function lookupResourcePoints(address _player)\n        public\n        view\n        returns(uint)\n    {\n        uint result = 0;\n\n        result += KingOfEthResource(bronzeContract).balanceOf(_player);\n        result += KingOfEthResource(goldContract).balanceOf(_player)    * 3;\n        result += KingOfEthResource(steelContract).balanceOf(_player)   * 6;\n        result += KingOfEthResource(oilContract).balanceOf(_player)     * 10;\n        result += KingOfEthResource(uraniumContract).balanceOf(_player) * 44;\n\n        return result;\n    }\n\n    /// @dev Burn the resources necessary to build a house\n    /// @param _count the number of houses being built\n    /// @param _player The player who is building the house\n    function burnHouseCosts(uint _count, address _player)\n        public\n        onlyHousesContract\n    {\n        // Costs 2 corn per house\n        KingOfEthResource(contractFor(ResourceType.CORN)).interfaceBurnTokens(\n              _player\n            , 2 * _count\n        );\n\n        // Costs 2 ore per house\n        KingOfEthResource(contractFor(ResourceType.ORE)).interfaceBurnTokens(\n              _player\n            , 2 * _count\n        );\n\n        // Costs 1 wood per house\n        KingOfEthResource(contractFor(ResourceType.WOOD)).interfaceBurnTokens(\n              _player\n            , _count\n        );\n    }\n\n    /// @dev Burn the costs of upgrading a house\n    /// @param _currentLevel The level of the house before the upgrade\n    /// @param _player The player who is upgrading the house\n    function burnUpgradeCosts(uint8 _currentLevel, address _player)\n        public\n        onlyHousesContract\n    {\n        // Do not allow upgrades after level 4\n        require(5 > _currentLevel);\n\n        // Burn the base house cost\n        burnHouseCosts(1, _player);\n\n        if(0 == _currentLevel)\n        {\n            // Level 1 costs bronze\n            KingOfEthResource(contractFor(ResourceType.BRONZE)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n        else if(1 == _currentLevel)\n        {\n            // Level 2 costs gold\n            KingOfEthResource(contractFor(ResourceType.GOLD)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n        else if(2 == _currentLevel)\n        {\n            // Level 3 costs steel\n            KingOfEthResource(contractFor(ResourceType.STEEL)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n        else if(3 == _currentLevel)\n        {\n            // Level 4 costs oil\n            KingOfEthResource(contractFor(ResourceType.OIL)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n        else if(4 == _currentLevel)\n        {\n            // Level 5 costs uranium\n            KingOfEthResource(contractFor(ResourceType.URANIUM)).interfaceBurnTokens(\n                  _player\n                , 1\n            );\n        }\n    }\n\n    /// @dev Mint resources for a house and distribute all to its owner\n    /// @param _owner The owner of the house\n    /// @param _x The x coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _y The y coordinate of the house\n    /// @param _level The new level of the house\n    function distributeResources(address _owner, uint _x, uint _y, uint8 _level)\n        public\n        onlyHousesContract\n    {\n        // Calculate the count of resources for this level\n        uint _count = resourcesPerHouse * uint(_level + 1);\n\n        // Distribute the top left resource\n        KingOfEthResource(contractFor(resourceType(_x - 1, _y - 1))).interfaceMintTokens(\n            _owner\n          , _count\n        );\n\n        // Distribute the top right resource\n        KingOfEthResource(contractFor(resourceType(_x, _y - 1))).interfaceMintTokens(\n            _owner\n          , _count\n        );\n\n        // Distribute the bottom right resource\n        KingOfEthResource(contractFor(resourceType(_x, _y))).interfaceMintTokens(\n            _owner\n          , _count\n        );\n\n        // Distribute the bottom left resource\n        KingOfEthResource(contractFor(resourceType(_x - 1, _y))).interfaceMintTokens(\n            _owner\n          , _count\n        );\n    }\n\n    /// @dev Burn the costs necessary to build a road\n    /// @param _length The length of the road\n    /// @param _player The player who is building the house\n    function burnRoadCosts(uint _length, address _player)\n        public\n        onlyRoadsContract\n    {\n        // Burn corn\n        KingOfEthResource(cornContract).interfaceBurnTokens(\n              _player\n            , _length\n        );\n\n        // Burn ore\n        KingOfEthResource(oreContract).interfaceBurnTokens(\n              _player\n            , _length\n        );\n    }\n\n    /// @dev The exchange can freeze tokens\n    /// @param _type The type of resource\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to freeze\n    function exchangeFreezeTokens(ResourceType _type, address _owner, uint _tokens)\n        public\n        onlyExchangeContract\n    {\n        KingOfEthResource(contractFor(_type)).interfaceFreezeTokens(_owner, _tokens);\n    }\n\n    /// @dev The exchange can thaw tokens\n    /// @param _type The type of resource\n    /// @param _owner The owner of the tokens\n    /// @param _tokens The amount of tokens to thaw\n    function exchangeThawTokens(ResourceType _type, address _owner, uint _tokens)\n        public\n        onlyExchangeContract\n    {\n        KingOfEthResource(contractFor(_type)).interfaceThawTokens(_owner, _tokens);\n    }\n\n    /// @dev The exchange can transfer tokens\n    /// @param _type The type of resource\n    /// @param _from The owner of the tokens\n    /// @param _to The new owner of the tokens\n    /// @param _tokens The amount of tokens to transfer\n    function exchangeTransfer(ResourceType _type, address _from, address _to, uint _tokens)\n        public\n        onlyExchangeContract\n    {\n        KingOfEthResource(contractFor(_type)).interfaceTransfer(_from, _to, _tokens);\n    }\n\n    /// @dev The exchange can transfer frozend tokens\n    /// @param _type The type of resource\n    /// @param _from The owner of the tokens\n    /// @param _to The new owner of the tokens\n    /// @param _tokens The amount of frozen tokens to transfer\n    function exchangeFrozenTransfer(ResourceType _type, address _from, address _to, uint _tokens)\n        public\n        onlyExchangeContract\n    {\n        KingOfEthResource(contractFor(_type)).interfaceFrozenTransfer(_from, _to, _tokens);\n    }\n}\n\n// File: contracts/KingOfEthRoadsAbstractInterface.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n/// @title King of Eth: Roads Abstract Interface\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Abstract interface contract for roads\ncontract KingOfEthRoadsAbstractInterface {\n    /// @dev Get the owner of the road at some location\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road (either\n    ///  0 for right or 1 for down)\n    /// @return The address of the owner\n    function ownerOf(uint _x, uint _y, uint8 _direction) public view returns(address);\n\n    /// @dev The road realty contract can transfer road ownership\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    /// @param _from The previous owner of road\n    /// @param _to The new owner of road\n    function roadRealtyTransferOwnership(\n          uint _x\n        , uint _y\n        , uint8 _direction\n        , address _from\n        , address _to\n    ) public;\n}\n\n// File: contracts/KingOfEthRoadRealty.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n/// @title King of Eth: Road Realty\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for controlling sales of roads\ncontract KingOfEthRoadRealty is\n      GodMode\n    , KingOfEthReferencer\n    , KingOfEthRoadsReferencer\n{\n    /// @dev The number that divides the amount payed for any sale to produce\n    ///  the amount payed in taxes\n    uint public constant taxDivisor = 25;\n\n    /// @dev Mapping from the x, y coordinates and the direction (0 for right and\n    ///  1 for down) of a road to the  current sale price (0 if there is no sale)\n    mapping (uint => mapping (uint => uint[2])) roadPrices;\n\n    /// @dev Fired when there is a new road for sale\n    event RoadForSale(\n          uint x\n        , uint y\n        , uint8 direction\n        , address owner\n        , uint amount\n    );\n\n    /// @dev Fired when the owner changes the price of a road\n    event RoadPriceChanged(\n          uint x\n        , uint y\n        , uint8 direction\n        , uint amount\n    );\n\n    /// @dev Fired when a road is sold\n    event RoadSold(\n          uint x\n        , uint y\n        , uint8 direction\n        , address from\n        , address to\n        , uint amount\n    );\n\n    /// @dev Fired when the sale for a road is cancelled by the owner\n    event RoadSaleCancelled(\n          uint x\n        , uint y\n        , uint8 direction\n        , address owner\n    );\n\n    /// @dev Only the owner of the road at a location can run this\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    modifier onlyRoadOwner(uint _x, uint _y, uint8 _direction)\n    {\n        require(KingOfEthRoadsAbstractInterface(roadsContract).ownerOf(_x, _y, _direction) == msg.sender);\n        _;\n    }\n\n    /// @dev This can only be run if there is *not* an existing sale for a road\n    ///  at a location\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    modifier noExistingRoadSale(uint _x, uint _y, uint8 _direction)\n    {\n        require(0 == roadPrices[_x][_y][_direction]);\n        _;\n    }\n\n    /// @dev This can only be run if there is an existing sale for a house\n    ///  at a location\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    modifier existingRoadSale(uint _x, uint _y, uint8 _direction)\n    {\n        require(0 != roadPrices[_x][_y][_direction]);\n        _;\n    }\n\n    /// @param _kingOfEthContract The address of the king contract\n    constructor(address _kingOfEthContract) public\n    {\n        kingOfEthContract = _kingOfEthContract;\n    }\n\n    /// @dev The roads contract can cancel a sale when a road is transfered\n    ///  to another player\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    function roadsCancelRoadSale(uint _x, uint _y, uint8 _direction)\n        public\n        onlyRoadsContract\n    {\n        // If there is indeed a sale\n        if(0 != roadPrices[_x][_y][_direction])\n        {\n            // Cancel the sale\n            roadPrices[_x][_y][_direction] = 0;\n\n            emit RoadSaleCancelled(_x, _y, _direction, msg.sender);\n        }\n    }\n\n    /// @dev The owner of a road can start a sale\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    /// @param _askingPrice The price that must be payed by another player\n    ///  to purchase the road\n    function startRoadSale(\n          uint _x\n        , uint _y\n        , uint8 _direction\n        , uint _askingPrice\n    )\n        public\n        notPaused\n        onlyRoadOwner(_x, _y, _direction)\n        noExistingRoadSale(_x, _y, _direction)\n    {\n        // Require that the price is at least 0\n        require(0 != _askingPrice);\n\n        // Record the price\n        roadPrices[_x][_y][_direction] = _askingPrice;\n\n        emit RoadForSale(_x, _y, _direction, msg.sender, _askingPrice);\n    }\n\n    /// @dev The owner of a road can change the price of a sale\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    /// @param _askingPrice The new price that must be payed by another\n    ///  player to purchase the road\n    function changeRoadPrice(\n          uint _x\n        , uint _y\n        , uint8 _direction\n        , uint _askingPrice\n    )\n        public\n        notPaused\n        onlyRoadOwner(_x, _y, _direction)\n        existingRoadSale(_x, _y, _direction)\n    {\n        // Require that the price is at least 0\n        require(0 != _askingPrice);\n\n        // Record the price\n        roadPrices[_x][_y][_direction] = _askingPrice;\n\n        emit RoadPriceChanged(_x, _y, _direction, _askingPrice);\n    }\n\n    /// @dev Anyone can purchase a road as long as the sale exists\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    function purchaseRoad(uint _x, uint _y, uint8 _direction)\n        public\n        payable\n        notPaused\n        existingRoadSale(_x, _y, _direction)\n    {\n        // Require that the exact price was paid\n        require(roadPrices[_x][_y][_direction] == msg.value);\n\n        // End the sale\n        roadPrices[_x][_y][_direction] = 0;\n\n        // Calculate the taxes to be paid\n        uint taxCut = msg.value / taxDivisor;\n\n        // Pay the taxes\n        KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(taxCut)();\n\n        KingOfEthRoadsAbstractInterface _roadsContract = KingOfEthRoadsAbstractInterface(roadsContract);\n\n        // Determine the previous owner\n        address _oldOwner = _roadsContract.ownerOf(_x, _y, _direction);\n\n        // Send the buyer the house\n        _roadsContract.roadRealtyTransferOwnership(\n              _x\n            , _y\n            , _direction\n            , _oldOwner\n            , msg.sender\n        );\n\n        // Send the previous owner his share\n        _oldOwner.transfer(msg.value - taxCut);\n\n        emit RoadSold(\n              _x\n            , _y\n            , _direction\n            , _oldOwner\n            , msg.sender\n            , msg.value\n        );\n    }\n\n    /// @dev The owner of a road can cancel a sale\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    function cancelRoadSale(uint _x, uint _y, uint8 _direction)\n        public\n        notPaused\n        onlyRoadOwner(_x, _y, _direction)\n        existingRoadSale(_x, _y, _direction)\n    {\n        // Cancel the sale\n        roadPrices[_x][_y][_direction] = 0;\n\n        emit RoadSaleCancelled(_x, _y, _direction, msg.sender);\n    }\n}\n\n// File: contracts/KingOfEthRoadRealtyReferencer.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n/// @title King of Eth: Road Realty Referencer\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Provides functionality to reference the road realty contract\ncontract KingOfEthRoadRealtyReferencer is GodMode {\n    /// @dev The realty contract's address\n    address public roadRealtyContract;\n\n    /// @dev Only the road realty contract can run this function\n    modifier onlyRoadRealtyContract()\n    {\n        require(roadRealtyContract == msg.sender);\n        _;\n    }\n\n    /// @dev God can set the road realty contract\n    /// @param _roadRealtyContract The new address\n    function godSetRoadRealtyContract(address _roadRealtyContract)\n        public\n        onlyGod\n    {\n        roadRealtyContract = _roadRealtyContract;\n    }\n}\n\n// File: contracts/KingOfEthRoads.sol\n\n/****************************************************\n *\n * Copyright 2018 BurzNest LLC. All rights reserved.\n *\n * The contents of this file are provided for review\n * and educational purposes ONLY. You MAY NOT use,\n * copy, distribute, or modify this software without\n * explicit written permission from BurzNest LLC.\n *\n ****************************************************/\n\npragma solidity ^0.4.24;\n\n\n\n\n\n\n\n\n\n\n\n\n\n/// @title King of Eth: Roads\n/// @author Anthony Burzillo <[email protected]>\n/// @dev Contract for roads\ncontract KingOfEthRoads is\n      GodMode\n    , KingOfEthBoardReferencer\n    , KingOfEthHousesReferencer\n    , KingOfEthReferencer\n    , KingOfEthResourcesInterfaceReferencer\n    , KingOfEthRoadRealtyReferencer\n    , KingOfEthRoadsAbstractInterface\n{\n    /// @dev ETH cost to build a road\n    uint public roadCost = 0.0002 ether;\n\n    /// @dev Mapping from the x, y, direction coordinate of the location to its owner\n    mapping (uint => mapping (uint => address[2])) owners;\n\n    /// @dev Mapping from a players address to his road counts\n    mapping (address => uint) roadCounts;\n\n    /// @param _boardContract The address of the board contract\n    /// @param _roadRealtyContract The address of the road realty contract\n    /// @param _kingOfEthContract The address of the king contract\n    /// @param _interfaceContract The address of the resources\n    ///  interface contract\n    constructor(\n          address _boardContract\n        , address _roadRealtyContract\n        , address _kingOfEthContract\n        , address _interfaceContract\n    )\n        public\n    {\n        boardContract      = _boardContract;\n        roadRealtyContract = _roadRealtyContract;\n        kingOfEthContract  = _kingOfEthContract;\n        interfaceContract  = _interfaceContract;\n    }\n\n    /// @dev Fired when new roads are built\n    event NewRoads(\n          address owner\n        , uint x\n        , uint y\n        , uint8 direction\n        , uint length\n    );\n\n    /// @dev Fired when a road is sent from one player to another\n    event SentRoad(\n          uint x\n        , uint y\n        , uint direction\n        , address from\n        , address to\n    );\n\n    /// @dev Get the owner of the road at some location\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road (either\n    ///  0 for right or 1 for down)\n    /// @return The address of the owner\n    function ownerOf(uint _x, uint _y, uint8 _direction)\n        public\n        view\n        returns(address)\n    {\n        // Only 0 or 1 is a valid direction\n        require(2 > _direction);\n\n        return owners[_x][_y][_direction];\n    }\n\n    /// @dev Get the number of roads owned by a player\n    /// @param _player The player's address\n    /// @return The number of roads\n    function numberOfRoads(address _player) public view returns(uint)\n    {\n        return roadCounts[_player];\n    }\n\n    /// @dev Only the owner of a road can run this\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    modifier onlyRoadOwner(uint _x, uint _y, uint8 _direction)\n    {\n        require(owners[_x][_y][_direction] == msg.sender);\n        _;\n    }\n\n    /// @dev Build houses to the right\n    /// @param _x The x coordinate of the starting point of the first road\n    /// @param _y The y coordinate of the starting point of the first road\n    /// @param _length The length to build\n    function buildRight(uint _x, uint _y, uint _length) private\n    {\n        // Require that nobody currently owns the road\n        require(0x0 == owners[_x][_y][0]);\n\n        KingOfEthHousesAbstractInterface _housesContract = KingOfEthHousesAbstractInterface(housesContract);\n\n        // Require that either the player owns the house at the\n        // starting location, the road below it, the road to the\n        // left of it, or the road above it\n        address _houseOwner = _housesContract.ownerOf(_x, _y);\n        require(_houseOwner == msg.sender || (0x0 == _houseOwner && (\n               owners[_x][_y][1] == msg.sender\n            || owners[_x - 1][_y][0] == msg.sender\n            || owners[_x][_y - 1][1] == msg.sender\n        )));\n\n        // Set the new owner\n        owners[_x][_y][0] = msg.sender;\n\n        for(uint _i = 1; _i < _length; ++_i)\n        {\n            // Require that nobody currently owns the road\n            require(0x0 == owners[_x + _i][_y][0]);\n\n            // Require that either the house location is empty or\n            // that it is owned by the player\n            require(\n                   _housesContract.ownerOf(_x + _i, _y) == 0x0\n                || _housesContract.ownerOf(_x + _i, _y) == msg.sender\n            );\n\n            // Set the new owner\n            owners[_x + _i][_y][0] = msg.sender;\n        }\n    }\n\n    /// @dev Build houses downwards\n    /// @param _x The x coordinate of the starting point of the first road\n    /// @param _y The y coordinate of the starting point of the first road\n    /// @param _length The length to build\n    function buildDown(uint _x, uint _y, uint _length) private\n    {\n        // Require that nobody currently owns the road\n        require(0x0 == owners[_x][_y][1]);\n\n        KingOfEthHousesAbstractInterface _housesContract = KingOfEthHousesAbstractInterface(housesContract);\n\n        // Require that either the player owns the house at the\n        // starting location, the road to the right of it, the road to\n        // the left of it, or the road above it\n        address _houseOwner = _housesContract.ownerOf(_x, _y);\n        require(_houseOwner == msg.sender || (0x0 == _houseOwner && (\n               owners[_x][_y][0] == msg.sender\n            || owners[_x - 1][_y][0] == msg.sender\n            || owners[_x][_y - 1][1] == msg.sender\n        )));\n\n        // Set the new owner\n        owners[_x][_y][1] = msg.sender;\n\n        for(uint _i = 1; _i < _length; ++_i)\n        {\n            // Require that nobody currently owns the road\n            require(0x0 == owners[_x][_y + _i][1]);\n\n            // Require that either the house location is empty or\n            // that it is owned by the player\n            require(\n                   _housesContract.ownerOf(_x, _y + _i) == 0x0\n                || _housesContract.ownerOf(_x, _y + _i) == msg.sender\n            );\n\n            // Set the new owner\n            owners[_x][_y + _i][1] = msg.sender;\n        }\n    }\n\n    /// @dev Build houses to the left\n    /// @param _x The x coordinate of the starting point of the first road\n    /// @param _y The y coordinate of the starting point of the first road\n    /// @param _length The length to build\n    function buildLeft(uint _x, uint _y, uint _length) private\n    {\n        // Require that nobody currently owns the road\n        require(0x0 == owners[_x - 1][_y][0]);\n\n        KingOfEthHousesAbstractInterface _housesContract = KingOfEthHousesAbstractInterface(housesContract);\n\n        // Require that either the player owns the house at the\n        // starting location, the road to the right of it, the road\n        // below it, or the road above it\n        address _houseOwner = _housesContract.ownerOf(_x, _y);\n        require(_houseOwner == msg.sender || (0x0 == _houseOwner && (\n               owners[_x][_y][0] == msg.sender\n            || owners[_x][_y][1] == msg.sender\n            || owners[_x][_y - 1][1] == msg.sender\n        )));\n\n        // Set the new owner\n        owners[_x - 1][_y][0] = msg.sender;\n\n        for(uint _i = 1; _i < _length; ++_i)\n        {\n            // Require that nobody currently owns the road\n            require(0x0 == owners[_x - _i - 1][_y][0]);\n\n            // Require that either the house location is empty or\n            // that it is owned by the player\n            require(\n                   _housesContract.ownerOf(_x - _i, _y) == 0x0\n                || _housesContract.ownerOf(_x - _i, _y) == msg.sender\n            );\n\n            // Set the new owner\n            owners[_x - _i - 1][_y][0] = msg.sender;\n        }\n    }\n\n    /// @dev Build houses upwards\n    /// @param _x The x coordinate of the starting point of the first road\n    /// @param _y The y coordinate of the starting point of the first road\n    /// @param _length The length to build\n    function buildUp(uint _x, uint _y, uint _length) private\n    {\n        // Require that nobody currently owns the road\n        require(0x0 == owners[_x][_y - 1][1]);\n\n        KingOfEthHousesAbstractInterface _housesContract = KingOfEthHousesAbstractInterface(housesContract);\n\n        // Require that either the player owns the house at the\n        // starting location, the road to the right of it, the road\n        // below it, or the road to the left of it\n        address _houseOwner = _housesContract.ownerOf(_x, _y);\n        require(_houseOwner == msg.sender || (0x0 == _houseOwner && (\n               owners[_x][_y][0] == msg.sender\n            || owners[_x][_y][1] == msg.sender\n            || owners[_x - 1][_y][0] == msg.sender\n        )));\n\n        // Set the new owner\n        owners[_x][_y - 1][1] = msg.sender;\n\n        for(uint _i = 1; _i < _length; ++_i)\n        {\n            // Require that nobody currently owns the road\n            require(0x0 == owners[_x][_y - _i - 1][1]);\n\n            // Require that either the house location is empty or\n            // that it is owned by the player\n            require(\n                   _housesContract.ownerOf(_x, _y - _i) == 0x0\n                || _housesContract.ownerOf(_x, _y - _i) == msg.sender\n            );\n\n            // Set the new owner\n            owners[_x][_y - _i - 1][1] = msg.sender;\n        }\n    }\n\n    /// @dev God can change the road cost\n    /// @param _newRoadCost The new cost of a road\n    function godChangeRoadCost(uint _newRoadCost)\n        public\n        onlyGod\n    {\n        roadCost = _newRoadCost;\n    }\n\n    /// @dev The road realty contract can transfer road ownership\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    /// @param _from The previous owner of road\n    /// @param _to The new owner of road\n    function roadRealtyTransferOwnership(\n          uint _x\n        , uint _y\n        , uint8 _direction\n        , address _from\n        , address _to\n    )\n        public\n        onlyRoadRealtyContract\n    {\n        // Assert that the previous owner still has the road\n        assert(owners[_x][_y][_direction] == _from);\n\n        // Set the new owner\n        owners[_x][_y][_direction] = _to;\n\n        // Update the road counts\n        --roadCounts[_from];\n        ++roadCounts[_to];\n    }\n\n    /// @dev Build a road in a direction from a location\n    /// @param _x The x coordinate of the starting location\n    /// @param _y The y coordinate of the starting location\n    /// @param _direction The direction to build (right is 0, down is 1,\n    ///  2 is left, and 3 is up)\n    /// @param _length The number of roads to build\n    function buildRoads(\n          uint _x\n        , uint _y\n        , uint8 _direction\n        , uint _length\n    )\n        public\n        payable\n    {\n        // Require at least one road to be built\n        require(0 < _length);\n\n        // Require that the cost for each road was payed\n        require(roadCost * _length == msg.value);\n\n        KingOfEthBoard _boardContract = KingOfEthBoard(boardContract);\n\n        // Require that the start is within bounds\n        require(_boardContract.boundX1() <= _x);\n        require(_boardContract.boundY1() <= _y);\n        require(_boardContract.boundX2() > _x);\n        require(_boardContract.boundY2() > _y);\n\n        // Burn the resource costs for each road\n        KingOfEthResourcesInterface(interfaceContract).burnRoadCosts(\n              _length\n            , msg.sender\n        );\n\n        // If the direction is right\n        if(0 == _direction)\n        {\n            // Require that the roads will be in bounds\n            require(_boardContract.boundX2() > _x + _length);\n\n            buildRight(_x, _y, _length);\n        }\n        // If the direction is down\n        else if(1 == _direction)\n        {\n            // Require that the roads will be in bounds\n            require(_boardContract.boundY2() > _y + _length);\n\n            buildDown(_x, _y, _length);\n        }\n        // If the direction is left\n        else if(2 == _direction)\n        {\n            // Require that the roads will be in bounds\n            require(_boardContract.boundX1() < _x - _length - 1);\n\n            buildLeft(_x, _y, _length);\n        }\n        // If the direction is up\n        else if(3 == _direction)\n        {\n            // Require that the roads will be in bounds\n            require(_boardContract.boundY1() < _y - _length - 1);\n\n            buildUp(_x, _y, _length);\n        }\n        else\n        {\n            // Revert if the direction is invalid\n            revert();\n        }\n\n        // Update the number of roads of the player\n        roadCounts[msg.sender] += _length;\n\n        // Pay taxes\n        KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(msg.value)();\n\n        emit NewRoads(msg.sender, _x, _y, _direction, _length);\n    }\n\n    /// @dev Send a road to another player\n    /// @param _x The x coordinate of the road\n    /// @param _y The y coordinate of the road\n    /// @param _direction The direction of the road\n    /// @param _to The recipient of the road\n    function sendRoad(uint _x, uint _y, uint8 _direction, address _to)\n        public\n        onlyRoadOwner(_x, _y, _direction)\n    {\n        // Set the new owner\n        owners[_x][_y][_direction] = _to;\n\n        // Update road counts\n        --roadCounts[msg.sender];\n        ++roadCounts[_to];\n\n        // Cancel any sales that exist\n        KingOfEthRoadRealty(roadRealtyContract).roadsCancelRoadSale(\n              _x\n            , _y\n            , _direction\n        );\n\n        emit SentRoad(_x, _y, _direction, msg.sender, _to);\n    }\n}",
  "bytecode": "608060405265b5e620f4800060065534801561001a57600080fd5b50604051608080611ce783398101604090815281516020830151918301516060909301516000805461010060a860020a031916336101000217815560018054600160a060020a0319908116600160a060020a03958616179091556005805482169585169590951790945560038054851695841695909517909455600480549093169116179055611c379081906100b090396000f30060806040526004361061010e5763ffffffff60e060020a60003504166308dd4a3381146101135780630aa39daa146101425780630de7357714610163578063121e0d4e146101945780631ed44e46146101a95780632c7288d7146101ca57806362af2ae4146101fd57806375fb4b621461023057806387e8a98014610245578063954969f61461026657806398a0d46514610287578063a71a13e1146102a8578063a7304287146102bd578063ac361b58146102d2578063b187bd26146102ea578063ba56f6ee14610313578063ba96560214610328578063d289e7ae1461033f578063d9b92ef414610354578063deb63d4f14610375578063e53dceff1461038a578063f7ace48d146103ab575b600080fd5b34801561011f57600080fd5b5061014060043560243560ff60443516600160a060020a03606435166103c0565b005b34801561014e57600080fd5b50610140600160a060020a0360043516610550565b34801561016f57600080fd5b5061017861058e565b60408051600160a060020a039092168252519081900360200190f35b3480156101a057600080fd5b5061014061059d565b3480156101b557600080fd5b50610140600160a060020a03600435166105ef565b3480156101d657600080fd5b506101eb600160a060020a036004351661062d565b60408051918252519081900360200190f35b34801561020957600080fd5b5061014060043560243560ff60443516600160a060020a0360643581169060843516610648565b34801561023c57600080fd5b50610178610715565b34801561025157600080fd5b50610140600160a060020a0360043516610724565b34801561027257600080fd5b50610140600160a060020a0360043516610775565b34801561029357600080fd5b50610140600160a060020a03600435166107b3565b3480156102b457600080fd5b506101786107f1565b3480156102c957600080fd5b50610140610800565b3480156102de57600080fd5b5061014060043561084f565b3480156102f657600080fd5b506102ff610870565b604080519115158252519081900360200190f35b34801561031f57600080fd5b50610178610879565b61014060043560243560ff6044351660643561088d565b34801561034b57600080fd5b506101eb610e3e565b34801561036057600080fd5b50610140600160a060020a0360043516610e44565b34801561038157600080fd5b50610178610e82565b34801561039657600080fd5b5061017860043560243560ff60443516610e91565b3480156103b757600080fd5b50610178610edd565b60008481526007602090815260408083208684529091529020849084908490339060ff8316600281106103ef57fe5b0154600160a060020a03161461040457600080fd5b60008781526007602090815260408083208984529091529020849060ff87166002811061042d57fe5b018054600160a060020a031916600160a060020a0392831617905533600090815260086020526040808220805460001901905586831682528082208054600101905560055481517f0cc1d5da000000000000000000000000000000000000000000000000000000008152600481018c9052602481018b905260ff8a1660448201529151931692630cc1d5da9260648084019391929182900301818387803b1580156104d757600080fd5b505af11580156104eb573d6000803e3d6000fd5b5050604080518a8152602081018a905260ff891681830152336060820152600160a060020a038816608082015290517f14c36c21c7849038537b49ec0977ea5bcaa280e39517e15cbdc64a5c7ceaef0793509081900360a0019150a150505050505050565b6000546101009004600160a060020a0316331461056c57600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b600554600160a060020a031681565b6000546101009004600160a060020a031633146105b957600080fd5b6000805460ff191660011781556040517f02b2464d82b27b9e05464c651333aa75ab50f9ab9bc79a218dd84c200c6fc7999190a1565b6000546101009004600160a060020a0316331461060b57600080fd5b60058054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a031660009081526008602052604090205490565b600554600160a060020a0316331461065f57600080fd5b60008581526007602090815260408083208784529091529020600160a060020a0383169060ff85166002811061069157fe5b0154600160a060020a0316146106a357fe5b60008581526007602090815260408083208784529091529020819060ff8516600281106106cc57fe5b018054600160a060020a031916600160a060020a039283161790559182166000908152600860205260408082208054600019019055919092168252902080546001019055505050565b600154600160a060020a031681565b6000546101009004600160a060020a0316331461074057600080fd5b60008054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6000546101009004600160a060020a0316331461079157600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b6000546101009004600160a060020a031633146107cf57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600454600160a060020a031681565b6000546101009004600160a060020a0316331461081c57600080fd5b6000805460ff191681556040517f0f0519ab053b7af599830cff5b49ec5284889db5b2dfcfdad2838d25e281e83c9190a1565b6000546101009004600160a060020a0316331461086b57600080fd5b600655565b60005460ff1681565b6000546101009004600160a060020a031681565b600081811061089b57600080fd5b600654820234146108ab57600080fd5b600160009054906101000a9004600160a060020a031690508481600160a060020a031663fed84f216040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561090257600080fd5b505af1158015610916573d6000803e3d6000fd5b505050506040513d602081101561092c57600080fd5b5051111561093957600080fd5b8381600160a060020a031663fd4fbf916040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561097857600080fd5b505af115801561098c573d6000803e3d6000fd5b505050506040513d60208110156109a257600080fd5b505111156109af57600080fd5b8481600160a060020a031663fc419a2c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156109ee57600080fd5b505af1158015610a02573d6000803e3d6000fd5b505050506040513d6020811015610a1857600080fd5b505111610a2457600080fd5b8381600160a060020a031663af9913d06040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610a6357600080fd5b505af1158015610a77573d6000803e3d6000fd5b505050506040513d6020811015610a8d57600080fd5b505111610a9957600080fd5b60048054604080517f339b4c1d00000000000000000000000000000000000000000000000000000000815292830185905233602484015251600160a060020a039091169163339b4c1d91604480830192600092919082900301818387803b158015610b0357600080fd5b505af1158015610b17573d6000803e3d6000fd5b5050505060ff83161515610bac5781850181600160a060020a031663fc419a2c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610b6657600080fd5b505af1158015610b7a573d6000803e3d6000fd5b505050506040513d6020811015610b9057600080fd5b505111610b9c57600080fd5b610ba7858584610eec565b610d5c565b8260ff1660011415610c3a5781840181600160a060020a031663af9913d06040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610bf957600080fd5b505af1158015610c0d573d6000803e3d6000fd5b505050506040513d6020811015610c2357600080fd5b505111610c2f57600080fd5b610ba7858584611230565b8260ff1660021415610ccb5760018286030381600160a060020a031663fed84f216040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610c8a57600080fd5b505af1158015610c9e573d6000803e3d6000fd5b505050506040513d6020811015610cb457600080fd5b505110610cc057600080fd5b610ba7858584611573565b8260ff166003141561010e5760018285030381600160a060020a031663fd4fbf916040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610d1b57600080fd5b505af1158015610d2f573d6000803e3d6000fd5b505050506040513d6020811015610d4557600080fd5b505110610d5157600080fd5b610ba78585846118bc565b3360009081526008602052604080822080548501905560035481517fe10e384a0000000000000000000000000000000000000000000000000000000081529151600160a060020a039091169263e10e384a9234926004808301939282900301818588803b158015610dcc57600080fd5b505af1158015610de0573d6000803e3d6000fd5b505060408051338152602081018a905280820189905260ff881660608201526080810187905290517faa9d2d8ddbd82cc7adc37df15e1fcf43b8955ab003aecf5bfa5b64bc7a346f8d94509081900360a00192509050a15050505050565b60065481565b6000546101009004600160a060020a03163314610e6057600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600060ff8216600211610ea357600080fd5b6000848152600760209081526040808320868452909152902060ff831660028110610eca57fe5b0154600160a060020a0316949350505050565b600354600160a060020a031681565b600083815260076020908152604080832085845290915281205481908190600160a060020a031615610f1d57600080fd5b6002546040805160e060020a63d9dad80d02815260048101899052602481018890529051600160a060020a039092169450849163d9dad80d916044808201926020929091908290030181600087803b158015610f7857600080fd5b505af1158015610f8c573d6000803e3d6000fd5b505050506040513d6020811015610fa257600080fd5b50519150600160a060020a0382163314806110565750600160a060020a03821615801561105657506000868152600760209081526040808320888452909152902060010154600160a060020a0316331480611023575060001986016000908152600760209081526040808320888452909152902054600160a060020a031633145b806110565750600086815260076020908152604080832060001989018452909152902060010154600160a060020a031633145b151561106157600080fd5b50600085815260076020908152604080832087845290915290208054600160a060020a0319163317905560015b83811015611228578086016000908152600760209081526040808320888452909152902054600160a060020a0316156110c657600080fd5b82600160a060020a031663d9dad80d828801876040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050602060405180830381600087803b15801561111957600080fd5b505af115801561112d573d6000803e3d6000fd5b505050506040513d602081101561114357600080fd5b5051600160a060020a031615806111e9575033600160a060020a031683600160a060020a031663d9dad80d838901886040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050602060405180830381600087803b1580156111b257600080fd5b505af11580156111c6573d6000803e3d6000fd5b505050506040513d60208110156111dc57600080fd5b5051600160a060020a0316145b15156111f457600080fd5b808601600090815260076020908152604080832088845290915290208054600160a060020a0319163317905560010161108e565b505050505050565b600083815260076020908152604080832085845290915281208190819060010154600160a060020a03161561126457600080fd5b6002546040805160e060020a63d9dad80d02815260048101899052602481018890529051600160a060020a039092169450849163d9dad80d916044808201926020929091908290030181600087803b1580156112bf57600080fd5b505af11580156112d3573d6000803e3d6000fd5b505050506040513d60208110156112e957600080fd5b50519150600160a060020a03821633148061139a5750600160a060020a03821615801561139a57506000868152600760209081526040808320888452909152902054600160a060020a0316331480611367575060001986016000908152600760209081526040808320888452909152902054600160a060020a031633145b8061139a5750600086815260076020908152604080832060001989018452909152902060010154600160a060020a031633145b15156113a557600080fd5b506000858152600760209081526040808320878452909152902060019081018054600160a060020a031916331790555b838110156112285760008681526007602090815260408083208885018452909152902060010154600160a060020a03161561140f57600080fd5b82600160a060020a031663d9dad80d878388016040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050602060405180830381600087803b15801561146257600080fd5b505af1158015611476573d6000803e3d6000fd5b505050506040513d602081101561148c57600080fd5b5051600160a060020a03161580611532575033600160a060020a031683600160a060020a031663d9dad80d888489016040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050602060405180830381600087803b1580156114fb57600080fd5b505af115801561150f573d6000803e3d6000fd5b505050506040513d602081101561152557600080fd5b5051600160a060020a0316145b151561153d57600080fd5b60008681526007602090815260408083208489018452909152902060019081018054600160a060020a03191633179055016113d5565b6000198301600090815260076020908152604080832085845290915281205481908190600160a060020a0316156115a957600080fd5b6002546040805160e060020a63d9dad80d02815260048101899052602481018890529051600160a060020a039092169450849163d9dad80d916044808201926020929091908290030181600087803b15801561160457600080fd5b505af1158015611618573d6000803e3d6000fd5b505050506040513d602081101561162e57600080fd5b50519150600160a060020a0382163314806116dd5750600160a060020a0382161580156116dd57506000868152600760209081526040808320888452909152902054600160a060020a03163314806116aa57506000868152600760209081526040808320888452909152902060010154600160a060020a031633145b806116dd5750600086815260076020908152604080832060001989018452909152902060010154600160a060020a031633145b15156116e857600080fd5b506000198501600090815260076020908152604080832087845290915290208054600160a060020a0319163317905560015b8381101561122857808603600019016000908152600760209081526040808320888452909152902054600160a060020a03161561175657600080fd5b82600160a060020a031663d9dad80d828803876040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050602060405180830381600087803b1580156117a957600080fd5b505af11580156117bd573d6000803e3d6000fd5b505050506040513d60208110156117d357600080fd5b5051600160a060020a03161580611879575033600160a060020a031683600160a060020a031663d9dad80d838903886040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050602060405180830381600087803b15801561184257600080fd5b505af1158015611856573d6000803e3d6000fd5b505050506040513d602081101561186c57600080fd5b5051600160a060020a0316145b151561188457600080fd5b80860360001901600090815260076020908152604080832088845290915290208054600160a060020a0319163317905560010161171a565b60008381526007602090815260408083206000198601845290915281208190819060010154600160a060020a0316156118f457600080fd5b6002546040805160e060020a63d9dad80d02815260048101899052602481018890529051600160a060020a039092169450849163d9dad80d916044808201926020929091908290030181600087803b15801561194f57600080fd5b505af1158015611963573d6000803e3d6000fd5b505050506040513d602081101561197957600080fd5b50519150600160a060020a038216331480611a265750600160a060020a038216158015611a2657506000868152600760209081526040808320888452909152902054600160a060020a03163314806119f557506000868152600760209081526040808320888452909152902060010154600160a060020a031633145b80611a26575060001986016000908152600760209081526040808320888452909152902054600160a060020a031633145b1515611a3157600080fd5b50600085815260076020908152604080832060001988018452909152902060019081018054600160a060020a031916331790555b83811015611228576000868152600760209081526040808320600019858a03018452909152902060010154600160a060020a031615611aa357600080fd5b82600160a060020a031663d9dad80d878388036040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050602060405180830381600087803b158015611af657600080fd5b505af1158015611b0a573d6000803e3d6000fd5b505050506040513d6020811015611b2057600080fd5b5051600160a060020a03161580611bc6575033600160a060020a031683600160a060020a031663d9dad80d888489036040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050602060405180830381600087803b158015611b8f57600080fd5b505af1158015611ba3573d6000803e3d6000fd5b505050506040513d6020811015611bb957600080fd5b5051600160a060020a0316145b1515611bd157600080fd5b6000868152600760209081526040808320848903600019018452909152902060019081018054600160a060020a0319163317905501611a655600a165627a7a72305820edffae1b1c2f2c0d3170ccea3e269e14293729dec8d9ba073ab92b1970432c6200290000000000000000000000005ff1e4c124b6b0c9a41cf41d261b3cb9fd84c80d000000000000000000000000107464baae9d59725623b3252528f420b5bdb70500000000000000000000000004bba664ea822924ff435ce1b3fad3e8dcc694810000000000000000000000008183703e9df90ed76bec0b0b8fad33f2c024be59",
  "constructorArguments": "0000000000000000000000005ff1e4c124b6b0c9a41cf41d261b3cb9fd84c80d000000000000000000000000107464baae9d59725623b3252528f420b5bdb70500000000000000000000000004bba664ea822924ff435ce1b3fad3e8dcc694810000000000000000000000008183703e9df90ed76bec0b0b8fad33f2c024be59"
}