{
  "address": "0x54164fae41dc85b63d4129eac3b502ec208124de",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DecentralandVesting",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-29\n*/\n\npragma solidity ^0.4.13;\n\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\ncontract ReturnVestingRegistry is Ownable {\n\n  mapping (address => address) public returnAddress;\n\n  function record(address from, address to) onlyOwner public {\n    require(from != 0);\n\n    returnAddress[from] = to;\n  }\n}\n\ncontract TerraformReserve is Ownable {\n\n  /* Storing a balance for each user */\n  mapping (address => uint256) public lockedBalance;\n\n  /* Store the total sum locked */\n  uint public totalLocked;\n\n  /* Reference to the token */\n  ERC20 public manaToken;\n\n  /* Contract that will assign the LAND and burn/return tokens */\n  address public landClaim;\n\n  /* Prevent the token from accepting deposits */\n  bool public acceptingDeposits;\n\n  event LockedBalance(address user, uint mana);\n  event LandClaimContractSet(address target);\n  event LandClaimExecuted(address user, uint value, bytes data);\n  event AcceptingDepositsChanged(bool _acceptingDeposits);\n\n  function TerraformReserve(address _token) {\n    require(_token != 0);\n    manaToken = ERC20(_token);\n    acceptingDeposits = true;\n  }\n\n  /**\n   * Lock MANA into the contract.\n   * This contract does not have another way to take the tokens out other than\n   * through the target contract.\n   */\n  function lockMana(address _from, uint256 mana) public {\n    require(acceptingDeposits);\n    require(mana >= 1000 * 1e18);\n    require(manaToken.transferFrom(_from, this, mana));\n\n    lockedBalance[_from] += mana;\n    totalLocked += mana;\n    LockedBalance(_from, mana);\n  }\n\n  /**\n   * Allows the owner of the contract to pause acceptingDeposits\n   */\n  function changeContractState(bool _acceptingDeposits) public onlyOwner {\n    acceptingDeposits = _acceptingDeposits;\n    AcceptingDepositsChanged(acceptingDeposits);\n  }\n\n  /**\n   * Set the contract that can move the staked MANA.\n   * Calls the `approve` function of the ERC20 token with the total amount.\n   */\n  function setTargetContract(address target) public onlyOwner {\n    landClaim = target;\n    manaToken.approve(landClaim, totalLocked);\n    LandClaimContractSet(target);\n  }\n\n  /**\n   * Prevent payments to the contract\n   */\n  function () public payable {\n    revert();\n  }\n}\n\ncontract TokenVesting is Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  event Released(uint256 amount);\n  event Revoked();\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  uint256 public cliff;\n  uint256 public start;\n  uint256 public duration;\n\n  bool public revocable;\n  bool public revoked;\n\n  uint256 public released;\n\n  ERC20 public token;\n\n  /**\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n   * of the balance will have vested.\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n   * @param _duration duration in seconds of the period in which the tokens will vest\n   * @param _revocable whether the vesting is revocable or not\n   * @param _token address of the ERC20 token contract\n   */\n  function TokenVesting(\n    address _beneficiary,\n    uint256 _start,\n    uint256 _cliff,\n    uint256 _duration,\n    bool    _revocable,\n    address _token\n  ) {\n    require(_beneficiary != 0x0);\n    require(_cliff <= _duration);\n\n    beneficiary = _beneficiary;\n    start       = _start;\n    cliff       = _start.add(_cliff);\n    duration    = _duration;\n    revocable   = _revocable;\n    token       = ERC20(_token);\n  }\n\n  /**\n   * @notice Only allow calls from the beneficiary of the vesting contract\n   */\n  modifier onlyBeneficiary() {\n    require(msg.sender == beneficiary);\n    _;\n  }\n\n  /**\n   * @notice Allow the beneficiary to change its address\n   * @param target the address to transfer the right to\n   */\n  function changeBeneficiary(address target) onlyBeneficiary public {\n    require(target != 0);\n    beneficiary = target;\n  }\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   */\n  function release() onlyBeneficiary public {\n    require(now >= cliff);\n    _releaseTo(beneficiary);\n  }\n\n  /**\n   * @notice Transfers vested tokens to a target address.\n   * @param target the address to send the tokens to\n   */\n  function releaseTo(address target) onlyBeneficiary public {\n    require(now >= cliff);\n    _releaseTo(target);\n  }\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   */\n  function _releaseTo(address target) internal {\n    uint256 unreleased = releasableAmount();\n\n    released = released.add(unreleased);\n\n    token.safeTransfer(target, unreleased);\n\n    Released(released);\n  }\n\n  /**\n   * @notice Allows the owner to revoke the vesting. Tokens already vested are sent to the beneficiary.\n   */\n  function revoke() onlyOwner public {\n    require(revocable);\n    require(!revoked);\n\n    // Release all vested tokens\n    _releaseTo(beneficiary);\n\n    // Send the remainder to the owner\n    token.safeTransfer(owner, token.balanceOf(this));\n\n    revoked = true;\n\n    Revoked();\n  }\n\n\n  /**\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\n   */\n  function releasableAmount() public constant returns (uint256) {\n    return vestedAmount().sub(released);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested.\n   */\n  function vestedAmount() public constant returns (uint256) {\n    uint256 currentBalance = token.balanceOf(this);\n    uint256 totalBalance = currentBalance.add(released);\n\n    if (now < cliff) {\n      return 0;\n    } else if (now >= start.add(duration) || revoked) {\n      return totalBalance;\n    } else {\n      return totalBalance.mul(now.sub(start)).div(duration);\n    }\n  }\n\n  /**\n   * @notice Allow withdrawing any token other than the relevant one\n   */\n  function releaseForeignToken(ERC20 _token, uint256 amount) onlyOwner {\n    require(_token != token);\n    _token.transfer(owner, amount);\n  }\n}\n\ncontract DecentralandVesting is TokenVesting {\n  using SafeERC20 for ERC20;\n\n  event LockedMANA(uint256 amount);\n\n  ReturnVestingRegistry public returnVesting;\n  TerraformReserve public terraformReserve;\n\n  function DecentralandVesting(\n    address               _beneficiary,\n    uint256               _start,\n    uint256               _cliff,\n    uint256               _duration,\n    bool                  _revocable,\n    ERC20                 _token,\n    ReturnVestingRegistry _returnVesting,\n    TerraformReserve      _terraformReserve\n  )\n    TokenVesting(_beneficiary, _start, _cliff, _duration, _revocable, _token)\n  {\n    returnVesting    = ReturnVestingRegistry(_returnVesting);\n    terraformReserve = TerraformReserve(_terraformReserve);\n  }\n\n  function lockMana(uint256 amount) onlyBeneficiary public {\n    // Require allowance to be enough\n    require(token.allowance(beneficiary, terraformReserve) >= amount);\n\n    // Check the balance of the vesting contract\n    require(amount <= token.balanceOf(this));\n\n    // Check the registry of the beneficiary is fixed to return to this contract\n    require(returnVesting.returnAddress(beneficiary) == address(this));\n\n    // Transfer and lock\n    token.safeTransfer(beneficiary, amount);\n    terraformReserve.lockMana(beneficiary, amount);\n\n    LockedMANA(amount);\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60405161010080610ea083398101604052808051919060200180519190602001805191906020018051919060200180519190602001805191906020018051919060200180519150505b8787878787875b5b60008054600160a060020a03191633600160a060020a03161790555b600160a060020a038616151561009157600080fd5b8284111561009e57600080fd5b60018054600160a060020a031916600160a060020a03881617905560038590556100d5858564010000000061014b8102610b841704565b60025560048390556005805460ff191683151517905560078054600160a060020a031916600160a060020a0383161790555b505060088054600160a060020a03808916600160a060020a0319928316179092556009805492881692909116919091179055505050505b5050505050505050610165565b60008282018381101561015a57fe5b8091505b5092915050565b610d2c806101746000396000f300606060405236156100f65763ffffffff60e060020a6000350416630fb5a6b481146100fb57806313d033c01461012057806338af3eed146101455780633cc3c3b51461017457806341470877146101a357806344b1231f146101d25780635b940081146101f757806363d256ce1461021c57806386d1a69f14610243578063872a7810146102585780638da5cb5b1461027f57806396132521146102ae578063980c2f21146102d3578063b6549f75146102f7578063be9a65551461030c578063c5e36b7e14610331578063d1fb564614610349578063dc0706571461036a578063f2fde38b1461038b578063fc0c546a146103ac575b600080fd5b341561010657600080fd5b61010e6103db565b60405190815260200160405180910390f35b341561012b57600080fd5b61010e6103e1565b60405190815260200160405180910390f35b341561015057600080fd5b6101586103e7565b604051600160a060020a03909116815260200160405180910390f35b341561017f57600080fd5b6101586103f6565b604051600160a060020a03909116815260200160405180910390f35b34156101ae57600080fd5b610158610405565b604051600160a060020a03909116815260200160405180910390f35b34156101dd57600080fd5b61010e610414565b60405190815260200160405180910390f35b341561020257600080fd5b61010e610531565b60405190815260200160405180910390f35b341561022757600080fd5b61022f610553565b604051901515815260200160405180910390f35b341561024e57600080fd5b610256610561565b005b341561026357600080fd5b61022f6105a4565b604051901515815260200160405180910390f35b341561028a57600080fd5b6101586105ad565b604051600160a060020a03909116815260200160405180910390f35b34156102b957600080fd5b61010e6105bc565b60405190815260200160405180910390f35b34156102de57600080fd5b610256600160a060020a03600435166024356105c2565b005b341561030257600080fd5b61025661067f565b005b341561031757600080fd5b61010e6107af565b60405190815260200160405180910390f35b341561033c57600080fd5b6102566004356107b5565b005b341561035457600080fd5b610256600160a060020a0360043516610a47565b005b341561037557600080fd5b610256600160a060020a0360043516610a7f565b005b341561039657600080fd5b610256600160a060020a0360043516610adc565b005b34156103b757600080fd5b610158610b75565b604051600160a060020a03909116815260200160405180910390f35b60045481565b60025481565b600154600160a060020a031681565b600954600160a060020a031681565b600854600160a060020a031681565b60075460009081908190600160a060020a03166370a0823130836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561047357600080fd5b6102c65a03f1151561048457600080fd5b50505060405180516006549093506104a49150839063ffffffff610b8416565b90506002544210156104b9576000925061052a565b6004546003546104ce9163ffffffff610b8416565b421015806104e35750600554610100900460ff165b156104f05780925061052a565b61052760045461051b61050e60035442610b9e90919063ffffffff16565b849063ffffffff610bb516565b9063ffffffff610be416565b92505b5b5b505090565b600061054d600654610541610414565b9063ffffffff610b9e16565b90505b90565b600554610100900460ff1681565b60015433600160a060020a0390811691161461057c57600080fd5b60025442101561058b57600080fd5b6001546105a090600160a060020a0316610c00565b5b5b565b60055460ff1681565b600054600160a060020a031681565b60065481565b60005433600160a060020a039081169116146105dd57600080fd5b600754600160a060020a03838116911614156105f857600080fd5b60008054600160a060020a038085169263a9059cbb929091169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561065e57600080fd5b6102c65a03f1151561066f57600080fd5b505050604051805150505b5b5050565b60005433600160a060020a0390811691161461069a57600080fd5b60055460ff1615156106ab57600080fd5b600554610100900460ff16156106c057600080fd5b6001546106d590600160a060020a0316610c00565b6000805460075461077092600160a060020a0392831692909116906370a082319030906040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561073d57600080fd5b6102c65a03f1151561074e57600080fd5b5050506040518051600754600160a060020a031692915063ffffffff610c7a16565b6005805461ff0019166101001790557f44825a4b2df8acb19ce4e1afba9aa850c8b65cdb7942e2078f27d0b0960efee660405160405180910390a15b5b565b60035481565b60015433600160a060020a039081169116146107d057600080fd5b6007546001546009548392600160a060020a039081169263dd62ed3e92908216911660006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b151561084057600080fd5b6102c65a03f1151561085157600080fd5b505050604051805190501015151561086857600080fd5b600754600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156108c157600080fd5b6102c65a03f115156108d257600080fd5b505050604051805182111590506108e857600080fd5b600854600154600160a060020a0330811692811691632421101f911660006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561094b57600080fd5b6102c65a03f1151561095c57600080fd5b50505060405180519050600160a060020a031614151561097b57600080fd5b60015460075461099e91600160a060020a0391821691168363ffffffff610c7a16565b600954600154600160a060020a0391821691636b7006d791168360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156109fb57600080fd5b6102c65a03f11515610a0c57600080fd5b5050507f6421fc04fd8e81a5c32406a5a5d2fde1ba83625f6383331c425a93c9a0ca45438160405190815260200160405180910390a15b5b50565b60015433600160a060020a03908116911614610a6257600080fd5b600254421015610a7157600080fd5b610a4381610c00565b5b5b50565b60015433600160a060020a03908116911614610a9a57600080fd5b600160a060020a0381161515610aaf57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60005433600160a060020a03908116911614610af757600080fd5b600160a060020a0381161515610b0c57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600754600160a060020a031681565b600082820183811015610b9357fe5b8091505b5092915050565b600082821115610baa57fe5b508082035b92915050565b6000828202831580610bd15750828482811515610bce57fe5b04145b1515610b9357fe5b8091505b5092915050565b6000808284811515610bf257fe5b0490508091505b5092915050565b6000610c0a610531565b600654909150610c20908263ffffffff610b8416565b600655600754610c4090600160a060020a0316838363ffffffff610c7a16565b7ffb81f9b30d73d830c3544b34d827c08142579ee75710b490bab0b3995468c56560065460405190815260200160405180910390a15b5050565b82600160a060020a031663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610cd757600080fd5b6102c65a03f11515610ce857600080fd5b505050604051805190501515610cfa57fe5b5b5050505600a165627a7a72305820af5ee92b5b2ec376ded34f2c5780832b4712759c7082779f29668dcfed4d313c0029000000000000000000000000d3e6937b63d7832ffb0ebf9640da01a5ffe5f83600000000000000000000000000000000000000000000000000000000599560320000000000000000000000000000000000000000000000000000000000f099c00000000000000000000000000000000000000000000000000000000001e1338000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942000000000000000000000000cca95e580bbbd04851ebfb85f77fd46c9b91f11c00000000000000000000000079c1fdaba012b9a094c495a86ce5c6199cf86368",
  "constructorArguments": "8f468908cc942000000000000000000000000cca95e580bbbd04851ebfb85f77fd46c9b91f11c00000000000000000000000079c1fdaba012b9a094c495a86ce5c6199cf86368"
}