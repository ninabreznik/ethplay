{
  "address": "0xba680d7436bbbf5655f7eed4641bec306d555cff",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SmartLotteryGame",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-23\n*/\n\npragma solidity ^0.5.7;\n/**\n    INSTRUCTION:\n    Send more then or equal to [minPayment] or 0.01 ETH to one of Wallet Contract address\n    [wallet_0, wallet_1, wallet_2], after round end send to This contract 0 ETH\n    transaction and if you choise won, take your winnings.\n\n    DAPP:     https://smartlottery.clab\n    BOT:      http://t.me/SmartLotteryGame_bot\n    LICENSE:  Under proprietary rights. All rights reserved.\n              Except <lib.SafeMath, cont.Ownable, lib.Address> under The MIT License (MIT)\n    AUTHOR:   http://t.me/pironmind\n\n*/\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) external pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) external pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) external pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) external pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * Interface of Secure contract\n */\ninterface ISecure {\n    function getRandomNumber(uint8 _limit, uint8 _totalPlayers, uint _games, uint _countTxs)\n    external\n    view\n    returns(uint);\n\n    function checkTrasted() external payable returns(bool);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title Wallet\n * @dev The Wallet contract is the payable contract with a term of life in a single round.\n */\ncontract Wallet {\n    using Address for address;\n    using SafeMath for uint256;\n    using SafeMath for uint8;\n\n    SmartLotteryGame public slg;\n\n    uint256 private _totalRised;\n    uint8 private _players;\n    bool closedOut = false;\n    uint public gameId;\n    uint256 public minPaymnent;\n\n    struct bet {\n        address wallet;\n        uint256 balance;\n    }\n\n    mapping(uint8 => bet) public bets;\n\n    modifier canAcceptPayment {\n        require(msg.value >= minPaymnent);\n        _;\n    }\n\n    modifier canDoTrx() {\n        require(Address.isContract(msg.sender) != true);\n        _;\n    }\n\n    modifier isClosedOut {\n        require(!closedOut);\n        _;\n    }\n\n    modifier onlyCreator() {\n        require(msg.sender == address(slg));\n        _;\n    }\n\n    constructor(uint _gameId, uint256 _minPayment) public {\n        slg = SmartLotteryGame(msg.sender);\n        gameId = _gameId;\n        minPaymnent = _minPayment;\n    }\n\n    function totalPlayers() public view returns(uint8) {\n        return _players;\n    }\n\n    function totalBets() public view returns(uint256) {\n        return _totalRised;\n    }\n\n    function finishDay() external onlyCreator returns(uint256) {\n        uint256 balance = address(this).balance;\n        if (balance >= minPaymnent) {\n            slg.getFunds.value(balance)();\n            return balance;\n        } else {\n            return 0;\n        }\n    }\n\n    function closeContract() external onlyCreator returns(bool) {\n        return closedOut = true;\n    }\n\n    function addPlayer(uint8 _id, address _player, uint256 _amount)\n    internal\n    returns(bool) {\n        bets[_id].wallet = _player;\n        bets[_id].balance = _amount;\n        return true;\n    }\n\n    function()\n    payable\n    canAcceptPayment\n    canDoTrx\n    isClosedOut\n    external {\n        _totalRised = _totalRised.add(msg.value);\n        _players = uint8((_players).add(1));\n        addPlayer(_players, msg.sender, msg.value);\n        slg.participate();\n    }\n}\n\ncontract SmartLotteryGame is Ownable {\n    using SafeMath for *;\n\n    event Withdrawn(address indexed requestor, uint256 weiAmount);\n    event Deposited(address indexed payee, uint256 weiAmount);\n    event WinnerWallet(address indexed wallet, uint256 bank);\n\n    address public secure;\n\n    uint public games = 1;\n    uint256 public minPayment = 10**16;\n\n    Wallet public wallet_0 = new Wallet(games, minPayment);\n    Wallet public wallet_1 = new Wallet(games, minPayment);\n    Wallet public wallet_2 = new Wallet(games, minPayment);\n\n    uint256 public finishTime;\n    uint256 constant roundDuration = 86400;\n\n    uint internal _nonceId = 0;\n    uint internal _maxPlayers = 100;\n    uint internal _tp = 0;\n    uint internal _winner;\n    uint8[] internal _particWallets = new uint8[](0);\n    uint256 internal _fund;\n    uint256 internal _commission;\n    uint256 internal _totalBetsWithoutCommission;\n\n    mapping(uint => Wallet) public wallets;\n    mapping(address => uint256) private _deposits;\n\n    struct wins{\n        address winner;\n        uint256 time;\n        address w0;\n        address w1;\n        address w2;\n    }\n\n    struct bet {\n        address wallet;\n        uint256 balance;\n    }\n\n    mapping(uint => wins) public gamesLog;\n\n    modifier isReady() {\n        require(secure != address(0));\n        _;\n    }\n\n    modifier onlyWallets() {\n        require(\n            msg.sender == address(wallet_0) ||\n            msg.sender == address(wallet_1) ||\n            msg.sender == address(wallet_2)\n        );\n        _;\n    }\n\n    constructor() public {\n        wallets[0] = wallet_0;\n        wallets[1] = wallet_1;\n        wallets[2] = wallet_2;\n        finishTime = now.add(roundDuration);\n    }\n\n    function _deposit(address payee, uint256 amount) internal {\n        _deposits[payee] = _deposits[payee].add(amount);\n        emit Deposited(payee, amount);\n    }\n\n    function _raiseFunds() internal returns (uint256) {\n        _fund = _fund.add(wallet_0.finishDay());\n        _fund = _fund.add(wallet_1.finishDay());\n        return _fund.add(wallet_2.finishDay());\n    }\n\n    function _winnerSelection() internal {\n        uint8 winner;\n        for(uint8 i=0; i<3; i++) {\n            if(wallets[i].totalPlayers() > 0) {\n                _particWallets.push(i);\n            }\n        }\n        // random choose one of three wallets\n        winner = uint8(ISecure(secure)\n            .getRandomNumber(\n                uint8(_particWallets.length),\n                uint8(_tp),\n                uint(games),\n                _nonceId\n            ));\n\n        _winner = _particWallets[winner];\n    }\n\n    function _distribute() internal {\n        bet memory p;\n\n        _tp = wallets[_winner].totalPlayers();\n        uint256 accommulDeposit = 0;\n        uint256 percents = 0;\n        uint256 onDeposit = 0;\n\n        _commission = _fund.mul(15).div(100);\n        _totalBetsWithoutCommission = _fund.sub(_commission);\n\n        for (uint8 i = 1; i <= _tp; i++) {\n            (p.wallet, p.balance) = wallets[_winner].bets(i);\n            percents = (p.balance)\n            .mul(10000)\n            .div(wallets[_winner].totalBets());\n            onDeposit = _totalBetsWithoutCommission\n            .mul(percents)\n            .div(10000);\n            accommulDeposit = accommulDeposit.add(onDeposit);\n            _deposit(p.wallet, onDeposit);\n        }\n        _deposit(owner(), _fund.sub(accommulDeposit));\n    }\n\n    function _cleanState() internal {\n        _fund = 0;\n        _particWallets = new uint8[](0);\n    }\n\n    function _log(address winner, uint256 fund) internal {\n        gamesLog[games].winner = winner;\n        gamesLog[games].time = now;\n        gamesLog[games].w0 = address(wallet_0);\n        gamesLog[games].w1 = address(wallet_1);\n        gamesLog[games].w2 = address(wallet_2);\n        emit WinnerWallet(winner, fund);\n    }\n\n    function _paymentValidator(address _payee, uint256 _amount) internal {\n        if(_payee != address(wallet_0) &&\n        _payee != address(wallet_1) &&\n        _payee != address(wallet_2))\n        {\n            if(_amount == uint(0)) {\n                if(depositOf(_payee) != uint(0)) {\n                    withdraw();\n                } else {\n                    revert(\"You have zero balance\");\n                }\n            } else {\n                revert(\"You can't do nonzero transaction\");\n            }\n        }\n    }\n\n    function _closeWallets() internal returns (bool) {\n        wallets[0].closeContract();\n        wallets[1].closeContract();\n        return wallets[2].closeContract();\n    }\n\n    function _issueWallets() internal returns (bool) {\n        wallets[0] = wallet_0 = new Wallet(games, minPayment);\n        wallets[1] = wallet_1 = new Wallet(games, minPayment);\n        wallets[2] = wallet_2 = new Wallet(games, minPayment);\n        return true;\n    }\n\n    function _switchWallets() internal {\n        if(_closeWallets()) {\n            _issueWallets();\n        } else { revert(\"break on switch\");}\n    }\n\n    function _totalPlayers() internal view returns(uint) {\n        return wallets[0].totalPlayers()\n        .add(wallets[1].totalPlayers())\n        .add(wallets[2].totalPlayers());\n    }\n\n    function depositOf(address payee) public view returns (uint256) {\n        return _deposits[payee];\n    }\n\n    function lastWinner() public view returns(address) {\n        return gamesLog[games].winner;\n    }\n\n    function participate()\n    external\n    onlyWallets\n    isReady\n    {\n        _nonceId = _nonceId.add(1);\n        _tp = _totalPlayers();\n\n        if (now >= finishTime && 1 == _tp) {\n            finishTime = now.add(roundDuration);\n            return;\n        }\n\n        if (now >= finishTime || _tp >= _maxPlayers) {\n            // send all funds to this wallet\n            _fund = _raiseFunds();\n            // if it has participators\n            if(_fund > 0) {\n                // get winner\n                _winnerSelection();\n                // do distribute\n                _distribute();\n                // log data\n                _log(address(wallets[_winner]), _fund);\n                // clear state\n                _cleanState();\n                // update round\n                finishTime = now.add(roundDuration);\n                // set next game\n                games = games.add(1);\n                // issue new wallets\n                return _switchWallets();\n            }\n        }\n    }\n\n    function setMinPayment(uint256 _value) public onlyOwner {\n        minPayment = _value;\n    }\n\n    function setSecure(address _address) public onlyOwner returns (bool) {\n        secure = _address;\n        return true;\n    }\n\n    function withdraw() public {\n        uint256 payment = _deposits[msg.sender];\n        _deposits[msg.sender] = 0;\n        msg.sender.transfer(payment);\n        emit Withdrawn(msg.sender, payment);\n    }\n\n    function getFunds() public payable onlyWallets {}\n\n    function() external payable {\n        _paymentValidator(msg.sender, msg.value);\n    }\n}",
  "bytecode": "60806040526001600255662386f26fc1000060035560025460035460405162000028906200030c565b9182526020820152604080519182900301906000f08015801562000050573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b039290921691909117905560025460035460405162000085906200030c565b9182526020820152604080519182900301906000f080158015620000ad573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055600254600354604051620000e2906200030c565b9182526020820152604080519182900301906000f0801580156200010a573d6000803e3d6000fd5b50600680546001600160a01b0319166001600160a01b0392909216919091179055600060088190556064600955600a81905560408051918252602082019081905290516200015b91600c916200031a565b503480156200016957600080fd5b50600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360048054601060209081527f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb0180546001600160a01b039384166001600160a01b0319918216179091556005547f8c6065603763fec3f5742441d3833f3f43b982453612d76adb39a885e3006b5f805491851691831691909117905560065460026000527f853b2fefe141400fef543280f93d98bd49996069f632d0d20236afeeed8e46a2805491909416911617909155604080517f771602f700000000000000000000000000000000000000000000000000000000815242938101939093526201518060248401525173231773551c008d9df068e8742691c52d1d86b2fe9263771602f7926044808301939192829003018186803b158015620002d557600080fd5b505af4158015620002ea573d6000803e3d6000fd5b505050506040513d60208110156200030157600080fd5b5051600755620003eb565b61057e80620029d483390190565b82805482825590600052602060002090601f01602090048101928215620003b55791602002820160005b838211156200038457835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000344565b8015620003b35782816101000a81549060ff021916905560010160208160000104928301926001030262000384565b505b50620003c3929150620003c7565b5090565b620003e891905b80821115620003c357805460ff19168155600101620003ce565b90565b6125d980620003fb6000396000f3fe60806040526004361061011f5760003560e01c80637ad71f72116100a0578063b82b245e11610064578063b82b245e14610352578063d11711a214610367578063f2fde38b1461037c578063fb90f9e9146103af578063fe188184146103c45761011f565b80637ad71f72146102d45780638da5cb5b146102fe5780638f32d59b14610313578063955a015b14610328578063b69fcd5d1461033d5761011f565b80635958611e116100e75780635958611e1461020857806363b4b1121461021d5780636d427fa3146102645780637024dc2e1461028e578063715018a6146102bf5761011f565b806323e3fbd51461012b5780632e276499146101705780633ccfd60b146101855780634d9b37351461019a57806356084664146101a2575b61012933346103d9565b005b34801561013757600080fd5b5061015e6004803603602081101561014e57600080fd5b50356001600160a01b03166104ef565b60408051918252519081900360200190f35b34801561017c57600080fd5b5061015e61050a565b34801561019157600080fd5b50610129610510565b61012961058b565b3480156101ae57600080fd5b506101cc600480360360208110156101c557600080fd5b50356105ce565b604080516001600160a01b0396871681526020810195909552928516848401529084166060840152909216608082015290519081900360a00190f35b34801561021457600080fd5b5061015e61060c565b34801561022957600080fd5b506102506004803603602081101561024057600080fd5b50356001600160a01b0316610612565b604080519115158252519081900360200190f35b34801561027057600080fd5b506101296004803603602081101561028757600080fd5b5035610648565b34801561029a57600080fd5b506102a361065e565b604080516001600160a01b039092168252519081900360200190f35b3480156102cb57600080fd5b5061012961066d565b3480156102e057600080fd5b506102a3600480360360208110156102f757600080fd5b50356106c8565b34801561030a57600080fd5b506102a36106e3565b34801561031f57600080fd5b506102506106f3565b34801561033457600080fd5b5061015e610704565b34801561034957600080fd5b506102a361070a565b34801561035e57600080fd5b506102a3610719565b34801561037357600080fd5b50610129610728565b34801561038857600080fd5b506101296004803603602081101561039f57600080fd5b50356001600160a01b0316610a54565b3480156103bb57600080fd5b506102a3610a71565b3480156103d057600080fd5b506102a3610a80565b6004546001600160a01b0383811691161480159061040557506005546001600160a01b03838116911614155b801561041f57506006546001600160a01b03838116911614155b156104eb578061049b576000610434836104ef565b1461044657610441610510565b610496565b60408051600160e51b62461bcd02815260206004820152601560248201527f596f752068617665207a65726f2062616c616e63650000000000000000000000604482015290519081900360640190fd5b6104eb565b60408051600160e51b62461bcd02815260206004820181905260248201527f596f752063616e277420646f206e6f6e7a65726f207472616e73616374696f6e604482015290519081900360640190fd5b5050565b6001600160a01b031660009081526011602052604090205490565b60035481565b33600081815260116020526040808220805490839055905190929183156108fc02918491818181858888f19350505050158015610551573d6000803e3d6000fd5b5060408051828152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a250565b6004546001600160a01b03163314806105ae57506005546001600160a01b031633145b806105c357506006546001600160a01b031633145b6105cc57600080fd5b565b601260205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03938416949293918216928216911685565b60075481565b600061061c6106f3565b61062557600080fd5b50600180546001600160a01b0383166001600160a01b0319909116178155919050565b6106506106f3565b61065957600080fd5b600355565b6006546001600160a01b031681565b6106756106f3565b61067e57600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6010602052600090815260409020546001600160a01b031681565b6000546001600160a01b03165b90565b6000546001600160a01b0316331490565b60025481565b6001546001600160a01b031681565b6005546001600160a01b031681565b6004546001600160a01b031633148061074b57506005546001600160a01b031633145b8061076057506006546001600160a01b031633145b61076957600080fd5b6001546001600160a01b031661077e57600080fd5b60085460408051600160e01b63771602f70281526004810192909252600160248301525173231773551c008d9df068e8742691c52d1d86b2fe9163771602f7916044808301926020929190829003018186803b1580156107dd57600080fd5b505af41580156107f1573d6000803e3d6000fd5b505050506040513d602081101561080757600080fd5b5051600855610814610a9e565b600a55600754421080159061082b5750600a546001145b156108c15760408051600160e01b63771602f7028152426004820152620151806024820152905173231773551c008d9df068e8742691c52d1d86b2fe9163771602f7916044808301926020929190829003018186803b15801561088d57600080fd5b505af41580156108a1573d6000803e3d6000fd5b505050506040513d60208110156108b757600080fd5b50516007556105cc565b600754421015806108d65750600954600a5410155b156105cc576108e3610d88565b600d819055156105cc576108f561106f565b6108fd61123f565b600b54600090815260106020526040902054600d54610925916001600160a01b031690611913565b61092d6119dc565b60408051600160e01b63771602f7028152426004820152620151806024820152905173231773551c008d9df068e8742691c52d1d86b2fe9163771602f7916044808301926020929190829003018186803b15801561098a57600080fd5b505af415801561099e573d6000803e3d6000fd5b505050506040513d60208110156109b457600080fd5b505160075560025460408051600160e01b63771602f70281526004810192909252600160248301525173231773551c008d9df068e8742691c52d1d86b2fe9163771602f7916044808301926020929190829003018186803b158015610a1857600080fd5b505af4158015610a2c573d6000803e3d6000fd5b505050506040513d6020811015610a4257600080fd5b5051600255610a4f611a00565b6105cc565b610a5c6106f3565b610a6557600080fd5b610a6e81611a6b565b50565b6004546001600160a01b031681565b6002546000908152601260205260409020546001600160a01b031690565b6000808052601060209081527f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb015460408051600160e11b637b066e7b02815290516001600160a01b039092169263f60cdcf692600480840193829003018186803b158015610b0b57600080fd5b505afa158015610b1f573d6000803e3d6000fd5b505050506040513d6020811015610b3557600080fd5b50516001600052601060209081527f8c6065603763fec3f5742441d3833f3f43b982453612d76adb39a885e3006b5f5460408051600160e11b637b066e7b028152905173231773551c008d9df068e8742691c52d1d86b2fe9463771602f79460ff909116936001600160a01b03169263f60cdcf69260048083019392829003018186803b158015610bc557600080fd5b505afa158015610bd9573d6000803e3d6000fd5b505050506040513d6020811015610bef57600080fd5b50516040805163ffffffff851660e01b8152600481019390935260ff9091166024830152516044808301926020929190829003018186803b158015610c3357600080fd5b505af4158015610c47573d6000803e3d6000fd5b505050506040513d6020811015610c5d57600080fd5b50516002600052601060209081527f853b2fefe141400fef543280f93d98bd49996069f632d0d20236afeeed8e46a25460408051600160e11b637b066e7b028152905173231773551c008d9df068e8742691c52d1d86b2fe9463771602f79490936001600160a01b03169263f60cdcf69260048083019392829003018186803b158015610ce957600080fd5b505afa158015610cfd573d6000803e3d6000fd5b505050506040513d6020811015610d1357600080fd5b50516040805163ffffffff851660e01b8152600481019390935260ff9091166024830152516044808301926020929190829003018186803b158015610d5757600080fd5b505af4158015610d6b573d6000803e3d6000fd5b505050506040513d6020811015610d8157600080fd5b5051905090565b6000600d5473231773551c008d9df068e8742691c52d1d86b2fe63771602f79091600460009054906101000a90046001600160a01b03166001600160a01b031663ead3a0fe6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610df957600080fd5b505af1158015610e0d573d6000803e3d6000fd5b505050506040513d6020811015610e2357600080fd5b50516040805163ffffffff851660e01b815260048101939093526024830191909152516044808301926020929190829003018186803b158015610e6557600080fd5b505af4158015610e79573d6000803e3d6000fd5b505050506040513d6020811015610e8f57600080fd5b5051600d81905560055460408051600160e11b637569d07f028152905173231773551c008d9df068e8742691c52d1d86b2fe9363771602f79390926001600160a01b039091169163ead3a0fe916004808201926020929091908290030181600087803b158015610efe57600080fd5b505af1158015610f12573d6000803e3d6000fd5b505050506040513d6020811015610f2857600080fd5b50516040805163ffffffff851660e01b815260048101939093526024830191909152516044808301926020929190829003018186803b158015610f6a57600080fd5b505af4158015610f7e573d6000803e3d6000fd5b505050506040513d6020811015610f9457600080fd5b5051600d81905560065460408051600160e11b637569d07f028152905173231773551c008d9df068e8742691c52d1d86b2fe9363771602f79390926001600160a01b039091169163ead3a0fe916004808201926020929091908290030181600087803b15801561100357600080fd5b505af1158015611017573d6000803e3d6000fd5b505050506040513d602081101561102d57600080fd5b50516040805163ffffffff851660e01b815260048101939093526024830191909152516044808301926020929190829003018186803b158015610d5757600080fd5b6000805b60038160ff1610156111645760ff81166000908152601060209081526040808320548151600160e11b637b066e7b02815291516001600160a01b039091169263f60cdcf69260048082019391829003018186803b1580156110d357600080fd5b505afa1580156110e7573d6000803e3d6000fd5b505050506040513d60208110156110fd57600080fd5b505160ff16111561115c57600c8054600181018255600091909152602081047fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701805460ff808516601f9094166101000a938402930219169190911790555b600101611073565b50600154600c54600a5460025460085460408051600160e01b637455083102815260ff958616600482015294909316602485015260448401919091526064830152516001600160a01b0390921691637455083191608480820192602092909190829003018186803b1580156111d857600080fd5b505afa1580156111ec573d6000803e3d6000fd5b505050506040513d602081101561120257600080fd5b5051600c80549192509060ff831690811061121957fe5b60009182526020918290209181049091015460ff601f9092166101000a900416600b5550565b611247611f47565b600b54600090815260106020908152604091829020548251600160e11b637b066e7b02815292516001600160a01b039091169263f60cdcf6926004808301939192829003018186803b15801561129c57600080fd5b505afa1580156112b0573d6000803e3d6000fd5b505050506040513d60208110156112c657600080fd5b505160ff16600a55600d5460408051600160e21b6332292b270281526004810192909252600f6024830152516000918291829173231773551c008d9df068e8742691c52d1d86b2fe9163c8a4ac9c91604480820192602092909190829003018186803b15801561133557600080fd5b505af4158015611349573d6000803e3d6000fd5b505050506040513d602081101561135f57600080fd5b505160408051600160e01b63a391c15b0281526004810192909252606460248301525173231773551c008d9df068e8742691c52d1d86b2fe9163a391c15b916044808301926020929190829003018186803b1580156113bd57600080fd5b505af41580156113d1573d6000803e3d6000fd5b505050506040513d60208110156113e757600080fd5b5051600e819055600d5460408051600160e01b63b67d77c502815260048101929092526024820192909252905173231773551c008d9df068e8742691c52d1d86b2fe9163b67d77c5916044808301926020929190829003018186803b15801561144f57600080fd5b505af4158015611463573d6000803e3d6000fd5b505050506040513d602081101561147957600080fd5b5051600f5560015b600a548160ff161161187557600b5460009081526010602052604090819020548151600160ea1b621f83b302815260ff8416600482015282516001600160a01b0390921692637e0ecc0092602480840193829003018186803b1580156114e657600080fd5b505afa1580156114fa573d6000803e3d6000fd5b505050506040513d604081101561151057600080fd5b5080516020918201518783018190526001600160a01b03909116875260408051600160e21b6332292b27028152600481019290925261271060248301525173231773551c008d9df068e8742691c52d1d86b2fe9263c8a4ac9c9260448082019391829003018186803b15801561158557600080fd5b505af4158015611599573d6000803e3d6000fd5b505050506040513d60208110156115af57600080fd5b5051600b54600090815260106020908152604091829020548251600160e01b63befa1e2f028152925173231773551c008d9df068e8742691c52d1d86b2fe9463a391c15b9490936001600160a01b039093169263befa1e2f92600480840193829003018186803b15801561162257600080fd5b505afa158015611636573d6000803e3d6000fd5b505050506040513d602081101561164c57600080fd5b50516040805163ffffffff851660e01b815260048101939093526024830191909152516044808301926020929190829003018186803b15801561168e57600080fd5b505af41580156116a2573d6000803e3d6000fd5b505050506040513d60208110156116b857600080fd5b5051600f5460408051600160e21b6332292b270281526004810192909252602482018390525191945073231773551c008d9df068e8742691c52d1d86b2fe9163c8a4ac9c91604480820192602092909190829003018186803b15801561171d57600080fd5b505af4158015611731573d6000803e3d6000fd5b505050506040513d602081101561174757600080fd5b505160408051600160e01b63a391c15b028152600481019290925261271060248301525173231773551c008d9df068e8742691c52d1d86b2fe9163a391c15b916044808301926020929190829003018186803b1580156117a657600080fd5b505af41580156117ba573d6000803e3d6000fd5b505050506040513d60208110156117d057600080fd5b505160408051600160e01b63771602f70281526004810187905260248101839052905191935073231773551c008d9df068e8742691c52d1d86b2fe9163771602f791604480820192602092909190829003018186803b15801561183257600080fd5b505af4158015611846573d6000803e3d6000fd5b505050506040513d602081101561185c57600080fd5b5051855190945061186d9083611ad9565b600101611481565b5061190d6118816106e3565b600d5473231773551c008d9df068e8742691c52d1d86b2fe63b67d77c59091876040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b1580156118dc57600080fd5b505af41580156118f0573d6000803e3d6000fd5b505050506040513d602081101561190657600080fd5b5051611ad9565b50505050565b60028054600090815260126020908152604080832080546001600160a01b038089166001600160a01b0319928316811790935586548652838620426001919091015560048054885488528588208901805485169184169190911790556005548854885285882060030180548516918416919091179055600654975487529584902090950180549091169590941694909417909255815184815291517f666f956eb7b61d075828f2d33c61250bc0a4fe212f9576d9fc5242bca6abc87e9281900390910190a25050565b6000600d8190556040805191825260208201908190529051610a6e91600c91611f5e565b611a08611bd0565b15611a1b57611a15611d96565b506105cc565b60408051600160e51b62461bcd02815260206004820152600f60248201527f627265616b206f6e207377697463680000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116611a7e57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038216600090815260116020908152604091829020548251600160e01b63771602f7028152600481019190915260248101849052915173231773551c008d9df068e8742691c52d1d86b2fe9263771602f7926044808301939192829003018186803b158015611b4e57600080fd5b505af4158015611b62573d6000803e3d6000fd5b505050506040513d6020811015611b7857600080fd5b50516001600160a01b038316600081815260116020908152604091829020939093558051848152905191927f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c492918290030190a25050565b6000808052601060209081527f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb015460408051600160e21b631842f99502815290516001600160a01b039092169263610be6549260048084019382900301818787803b158015611c3e57600080fd5b505af1158015611c52573d6000803e3d6000fd5b505050506040513d6020811015611c6857600080fd5b505060016000908152601060209081527f8c6065603763fec3f5742441d3833f3f43b982453612d76adb39a885e3006b5f5460408051600160e21b631842f99502815290516001600160a01b039092169363610be6549360048084019491939192918390030190829087803b158015611ce057600080fd5b505af1158015611cf4573d6000803e3d6000fd5b505050506040513d6020811015611d0a57600080fd5b505060026000908152601060209081527f853b2fefe141400fef543280f93d98bd49996069f632d0d20236afeeed8e46a25460408051600160e21b631842f99502815290516001600160a01b039092169363610be6549360048084019491939192918390030190829087803b158015611d8257600080fd5b505af1158015610d6b573d6000803e3d6000fd5b6000600254600354604051611daa90612004565b9182526020820152604080519182900301906000f080158015611dd1573d6000803e3d6000fd5b50600480546001600160a01b03929092166001600160a01b031992831681179091556000805260106020527f6e0956cda88cad152e89927e53611735b61a5c762d1428573c6931b0a5efcb018054909216179055600254600354604051611e3790612004565b9182526020820152604080519182900301906000f080158015611e5e573d6000803e3d6000fd5b50600580546001600160a01b03929092166001600160a01b03199283168117909155600160005260106020527f8c6065603763fec3f5742441d3833f3f43b982453612d76adb39a885e3006b5f8054909216179055600254600354604051611ec590612004565b9182526020820152604080519182900301906000f080158015611eec573d6000803e3d6000fd5b50600680546001600160a01b03929092166001600160a01b03199283168117909155600260005260106020527f853b2fefe141400fef543280f93d98bd49996069f632d0d20236afeeed8e46a2805490921617905550600190565b604080518082019091526000808252602082015290565b82805482825590600052602060002090601f01602090048101928215611ff45791602002820160005b83821115611fc557835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302611f87565b8015611ff25782816101000a81549060ff0219169055600101602081600001049283019260010302611fc5565b505b50612000929150612011565b5090565b61057e8061203083390190565b6106f091905b8082111561200057805460ff1916815560010161201756fe60806040526002805461ff001916905534801561001b57600080fd5b5060405160408061057e8339810180604052604081101561003b57600080fd5b508051602090910151600080546001600160a01b031916331790556003919091556004556105108061006e6000396000f3fe60806040526004361061007b5760003560e01c8063c5aa6e771161004e578063c5aa6e7714610323578063d7c81b5514610338578063ead3a0fe1461034d578063f60cdcf6146103625761007b565b80634f747cb814610252578063610be654146102835780637e0ecc00146102ac578063befa1e2f146102fc575b60045434101561008a57600080fd5b6100933361038d565b1515600114156100a257600080fd5b600254610100900460ff16156100b757600080fd5b60015460408051600160e01b63771602f702815260048101929092523460248301525173231773551c008d9df068e8742691c52d1d86b2fe9163771602f7916044808301926020929190829003018186803b15801561011557600080fd5b505af4158015610129573d6000803e3d6000fd5b505050506040513d602081101561013f57600080fd5b5051600190815560025460408051600160e01b63771602f702815260ff90921660048301526024820192909252905173231773551c008d9df068e8742691c52d1d86b2fe9163771602f7916044808301926020929190829003018186803b1580156101a957600080fd5b505af41580156101bd573d6000803e3d6000fd5b505050506040513d60208110156101d357600080fd5b50516002805460ff191660ff92831617908190556101f391163334610393565b506000805460408051600160e11b63688b88d102815290516001600160a01b039092169263d11711a29260048084019382900301818387803b15801561023857600080fd5b505af115801561024c573d6000803e3d6000fd5b50505050005b34801561025e57600080fd5b506102676103cf565b604080516001600160a01b039092168252519081900360200190f35b34801561028f57600080fd5b506102986103de565b604080519115158252519081900360200190f35b3480156102b857600080fd5b506102d9600480360360208110156102cf57600080fd5b503560ff1661040c565b604080516001600160a01b03909316835260208301919091528051918290030190f35b34801561030857600080fd5b50610311610431565b60408051918252519081900360200190f35b34801561032f57600080fd5b50610311610437565b34801561034457600080fd5b5061031161043d565b34801561035957600080fd5b50610311610443565b34801561036e57600080fd5b506103776104db565b6040805160ff9092168252519081900360200190f35b3b151590565b60ff8316600090815260056020526040902080546001600160a01b0384166001600160a01b031990911617815560019081018290559392505050565b6000546001600160a01b031681565b600080546001600160a01b031633146103f657600080fd5b506002805461ff00191661010017905560015b90565b600560205260009081526040902080546001909101546001600160a01b039091169082565b60015490565b60045481565b60035481565b600080546001600160a01b0316331461045b57600080fd5b60045430319081106104d1576000805460408051600160e01b634d9b373502815290516001600160a01b0390921692634d9b3735928592600480820193929182900301818588803b1580156104af57600080fd5b505af11580156104c3573d6000803e3d6000fd5b505050505080915050610409565b6000915050610409565b60025460ff169056fea165627a7a72305820d922317975b5a24ae61ef4e188616a60a43a5f1f8363b9520dd1e80672185f0b0029a165627a7a72305820a4cb52669cb9444b0936bfec65f67907a8b4c1dd7746617f92d2426aa8b04079002960806040526002805461ff001916905534801561001b57600080fd5b5060405160408061057e8339810180604052604081101561003b57600080fd5b508051602090910151600080546001600160a01b031916331790556003919091556004556105108061006e6000396000f3fe60806040526004361061007b5760003560e01c8063c5aa6e771161004e578063c5aa6e7714610323578063d7c81b5514610338578063ead3a0fe1461034d578063f60cdcf6146103625761007b565b80634f747cb814610252578063610be654146102835780637e0ecc00146102ac578063befa1e2f146102fc575b60045434101561008a57600080fd5b6100933361038d565b1515600114156100a257600080fd5b600254610100900460ff16156100b757600080fd5b60015460408051600160e01b63771602f702815260048101929092523460248301525173231773551c008d9df068e8742691c52d1d86b2fe9163771602f7916044808301926020929190829003018186803b15801561011557600080fd5b505af4158015610129573d6000803e3d6000fd5b505050506040513d602081101561013f57600080fd5b5051600190815560025460408051600160e01b63771602f702815260ff90921660048301526024820192909252905173231773551c008d9df068e8742691c52d1d86b2fe9163771602f7916044808301926020929190829003018186803b1580156101a957600080fd5b505af41580156101bd573d6000803e3d6000fd5b505050506040513d60208110156101d357600080fd5b50516002805460ff191660ff92831617908190556101f391163334610393565b506000805460408051600160e11b63688b88d102815290516001600160a01b039092169263d11711a29260048084019382900301818387803b15801561023857600080fd5b505af115801561024c573d6000803e3d6000fd5b50505050005b34801561025e57600080fd5b506102676103cf565b604080516001600160a01b039092168252519081900360200190f35b34801561028f57600080fd5b506102986103de565b604080519115158252519081900360200190f35b3480156102b857600080fd5b506102d9600480360360208110156102cf57600080fd5b503560ff1661040c565b604080516001600160a01b03909316835260208301919091528051918290030190f35b34801561030857600080fd5b50610311610431565b60408051918252519081900360200190f35b34801561032f57600080fd5b50610311610437565b34801561034457600080fd5b5061031161043d565b34801561035957600080fd5b50610311610443565b34801561036e57600080fd5b506103776104db565b6040805160ff9092168252519081900360200190f35b3b151590565b60ff8316600090815260056020526040902080546001600160a01b0384166001600160a01b031990911617815560019081018290559392505050565b6000546001600160a01b031681565b600080546001600160a01b031633146103f657600080fd5b506002805461ff00191661010017905560015b90565b600560205260009081526040902080546001909101546001600160a01b039091169082565b60015490565b60045481565b60035481565b600080546001600160a01b0316331461045b57600080fd5b60045430319081106104d1576000805460408051600160e01b634d9b373502815290516001600160a01b0390921692634d9b3735928592600480820193929182900301818588803b1580156104af57600080fd5b505af11580156104c3573d6000803e3d6000fd5b505050505080915050610409565b6000915050610409565b60025460ff169056fea165627a7a72305820d922317975b5a24ae61ef4e188616a60a43a5f1f8363b9520dd1e80672185f0b0029"
}