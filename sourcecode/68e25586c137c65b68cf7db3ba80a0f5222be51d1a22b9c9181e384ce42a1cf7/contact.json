{
  "address": "0x9c49b65ddef30ad4a32c0ff6bf103144cd7733fc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Sports3D",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-07\n*/\n\npragma solidity ^0.4.20;\n\ncontract Sports3D {\n\n\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n\n    /// @dev Only people with tokens\n    modifier onlyBagholders {\n        require(myTokens() > 0);\n        _;\n    }\n\n    /// @dev Only people with profits\n    modifier onlyStronghands {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n\n    string public name = \"Sports3D\";\n    string public symbol = \"TICKETS\";\n    uint8 constant public decimals = 18;\n\n    /// @dev 15% dividends for TICKETS purchase\n    uint8 constant internal entryFee_ = 15;\n\n    /// @dev 4% dividends for TICKETS transfer\n    uint8 constant internal transferFee_ = 4;\n\n    /// @dev 10% dividends for TICKETS selling\n    uint8 constant internal exitFee_ = 10;\n\n    /// @dev 35% masternode\n    uint8 constant internal refferalFee_ = 35;\n\n    uint256 constant internal tokenPriceInitial_ = 0.0000000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.000000000005 ether;\n    uint256 constant internal magnitude = 2 ** 64;\n\n    /// @dev Collect 100 TICKETS to activate your link\n    uint256 public stakingRequirement = 100e18;\n    \n    address internal devFeeAddress = 0x5B2FA02281491E51a97c0b087215c8b2597C8a2f;\n    address internal marketingFeeAddress = 0x4c326AB6Ee2b1D6BB001231Ea76b8C7093474eD0;\n    address internal ownerFeeAddress = 0x2959114502Fca4d506Ae7cf88f602e7038a29AC1;\n    address internal employeeFeeAddress1 = 0xB1dB0FB75Df1cfb37FD7fF0D7189Ddd0A68C9AAF; \n    address internal employeeFeeAddress2 = 0xC6D4a4A0bf0507749D4a23C9550A826207b5D94b;\n    address internal neatFeeAddress = 0x8b8158c9D815E7720e16CEc3e1166A2D4F96b8A6;\n\n    \n    address internal admin;\n    mapping(address => bool) internal ambassadors_;\n\n\n   /*=================================\n    =            DATASETS            =\n    ================================*/\n\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n    uint256 constant internal ambassadorMaxPurchase_ = 1.02 ether;\n    uint256 constant internal ambassadorQuota_ = 5000 ether;\n    bool public onlyAmbassadors = true;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    \n    uint ACTIVATION_TIME = 1544389200;\n    \n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n        if (now >= ACTIVATION_TIME) {\n            onlyAmbassadors = false;\n        }\n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol \n        if(onlyAmbassadors){\n            require(\n                // is the customer in the ambassador list?\n                (ambassadors_[msg.sender] == true &&\n                \n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[msg.sender] + _amountOfEthereum) <= ambassadorMaxPurchase_)\n                \n            );\n            \n            // updated the accumulated quota    \n            ambassadorAccumulatedQuota_[msg.sender] = SafeMath.add(ambassadorAccumulatedQuota_[msg.sender], _amountOfEthereum);\n        \n            // execute\n            _;\n        }else{\n            onlyAmbassadors=false;\n            _;\n        }\n        \n    }\n    \n    \n    function Sports3D() public{\n        admin=msg.sender;\n        ambassadors_[0x267fa9F2F846da2c7A07eCeCc52dF7F493589098] = true; //\n        ambassadors_[0x4f574642be8C00BD916803c4BC1EC1FC05efa5cF] = true; // \n        ambassadors_[0xB1dB0FB75Df1cfb37FD7fF0D7189Ddd0A68C9AAF] = true; // \n        ambassadors_[0xC6D4a4A0bf0507749D4a23C9550A826207b5D94b] = true; //\n        ambassadors_[0x77dD6596171174C8A21Ad859847ddAdDb8D11460] = true; //\n        ambassadors_[0xEc31176d4df0509115abC8065A8a3F8275aafF2b] = true; //\n        ambassadors_[0x2277715856C6d9E0181BA01d21e059f76C79f2bD] = true; //\n        ambassadors_[0x7A5C4cAF90e9211D7D474918F764eBdC2f9Ec1a3] = true; //\n        \n        \n        \n        \n\n    }\n    \n  function disableAmbassadorPhase() public{\n        require(admin==msg.sender);\n        onlyAmbassadors=false;\n    }\n    \n  function changeEmployee1(address _employeeAddress1) public{\n        require(admin==msg.sender);\n        employeeFeeAddress1=_employeeAddress1;\n    }\n    \n  function changeEmployee2(address _employeeAddress2) public{\n        require(admin==msg.sender);\n        employeeFeeAddress2=_employeeAddress2;\n    }\n    \n  function changeMarketing(address _marketingAddress) public{\n        require(admin==msg.sender);\n        marketingFeeAddress=_marketingAddress;\n    }\n    \n  function changeNeat(address _neatAddress) public{\n        require(admin==msg.sender);\n        neatFeeAddress=_neatAddress;\n    }\n    \n    /*=======================================\n    =            PUBLIC FUNCTIONS           =\n    =======================================*/\n\n    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n    function buy(address _referredBy) public payable returns (uint256) {\n        purchaseTokens(msg.value, _referredBy);\n    }\n\n    /**\n     * @dev Fallback function to handle ethereum that was send straight to the contract\n     *  Unfortunately we cannot use a referral address this way.\n     */\n    function() payable public {\n        purchaseTokens(msg.value, 0x0);\n    }\n\n    /// @dev Converts all of caller's dividends to tokens.\n    function reinvest() onlyStronghands public {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n\n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n\n        // fire event\n         onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    /// @dev Alias of sell() and withdraw().\n    function exit() public {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n\n        // lambo delivery service\n        withdraw();\n    }\n\n    /// @dev Withdraws all of the callers earnings.\n    function withdraw() onlyStronghands public {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n\n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n\n        // fire event\n         onWithdraw(_customerAddress, _dividends);\n    }\n\n    /// @dev Liquifies tokens to ethereum.\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _devFee = SafeMath.div(SafeMath.mul(_ethereum, 1), 200);\n        uint256 _marketingFee = SafeMath.div(SafeMath.mul(_ethereum, 5), 200);\n        uint256 _ownerFee = SafeMath.div(SafeMath.mul(_ethereum, 1), 200);\n        uint256 _neatFee = SafeMath.div(SafeMath.mul(_ethereum, 1), 200);\n        \n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(SafeMath.sub(SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _devFee), _marketingFee), _ownerFee), _neatFee);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        devFeeAddress.transfer(_devFee);\n        marketingFeeAddress.transfer(_marketingFee);\n        ownerFeeAddress.transfer(_ownerFee);\n        neatFeeAddress.transfer(_neatFee);\n        // fire event\n         onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n       \n    }\n\n\n    /**\n     * @dev Transfer tokens from the caller to a new holder.\n     *  Remember, there's a 4% fee here as well.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\n        // setup\n        address _customerAddress = msg.sender;\n\n        // make sure we have the requested tokens\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        // withdraw all outstanding dividends first\n        if (myDividends(true) > 0) {\n            withdraw();\n        }\n\n        // liquify 5% of the tokens that are transfered\n        // these are dispersed to shareholders\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n\n        // burn the fee tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n\n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n\n        // disperse dividends among holders\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n\n        // fire event\n         Transfer(_customerAddress, _toAddress, _taxedTokens);\n\n        // ERC20\n        return true;\n    }\n\n\n    /*=====================================\n    =      HELPERS AND CALCULATORS        =\n    =====================================*/\n\n    /**\n     * @dev Method to view the current Ethereum stored in the contract\n     *  Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance() public view returns (uint256) {\n        return this.balance;\n    }\n\n    /// @dev Retrieve the total token supply.\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n    /// @dev Retrieve the tokens owned by the caller.\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    /**\n     * @dev Retrieve the dividends owned by the caller.\n     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     *  But in the internal calculations, we want them separate.\n     */\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    /// @dev Retrieve the token balance of any single address.\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    /// @dev Retrieve the dividend balance of any single address.\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    /// @dev Return the sell price of 1 individual token.\n    function sellPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    /// @dev Return the buy price of 1 individual token.\n    function buyPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\n        return _amountOfTokens;\n    }\n\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n\n    /// @dev Internal function to actually purchase the tokens.\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) antiEarlyWhale(_incomingEthereum)\n       internal returns (uint256) {\n        // data setup\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 5), 200));\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        _taxedEthereum = SafeMath.sub(_taxedEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 200));\n        \n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n\n        // is the user referred by a masternode?\n        if (\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ) {\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        // we can't give people infinite ethereum\n        if (tokenSupply_ > 0) {\n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n\n            // calculate the amount of tokens the customer receives over his purchase\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        // really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n\n        // fire event\n         onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n        devFeeAddress.transfer(SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        marketingFeeAddress.transfer(SafeMath.div(SafeMath.mul(_incomingEthereum, 5), 200));\n        ownerFeeAddress.transfer(SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        employeeFeeAddress1.transfer(SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        employeeFeeAddress2.transfer(SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 100));\n        neatFeeAddress.transfer(SafeMath.div(SafeMath.mul(_incomingEthereum, 1), 200));\n        return _amountOfTokens;\n    }\n\n    /**\n     * @dev Calculate Token price based on an amount of incoming ethereum\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial ** 2)\n                            +\n                            (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\n                            +\n                            ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\n                            +\n                            (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            ) / (tokenPriceIncremental_)\n        ) - (tokenSupply_);\n\n        return _tokensReceived;\n    }\n\n    /**\n     * @dev Calculate token sell value.\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\n                        ) - tokenPriceIncremental_\n                    ) * (tokens_ - 1e18)\n                ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\n            )\n        / 1e18);\n\n        return _etherReceived;\n    }\n\n    /// @dev This is where all your gas goes.\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}",
  "bytecode": "606060405260408051908101604052600881527f53706f7274733344000000000000000000000000000000000000000000000000602082015260009080516200004d92916020019062000316565b5060408051908101604052600781527f5449434b45545300000000000000000000000000000000000000000000000000602082015260019080516200009792916020019062000316565b5068056bc75e2d6310000060025560038054600160a060020a0319908116735b2fa02281491e51a97c0b087215c8b2597c8a2f17909155600480548216734c326ab6ee2b1d6bb001231ea76b8c7093474ed0179055600580548216732959114502fca4d506ae7cf88f602e7038a29ac117905560068054821673b1db0fb75df1cfb37fd7ff0d7189ddd0a68c9aaf17905560078054821673c6d4a4a0bf0507749d4a23c9550a826207b5d94b17905560088054909116738b8158c9d815e7720e16cec3e1166a2d4f96b8a61790556010805460ff19166001179055635c0d825060125534156200018657600080fd5b60098054600160a060020a03191633600160a060020a0316179055600a6020527fc88c0b95193ceac074f487cbce52ae19218a3b620574c249c554531f96fe16f9805460ff1990811660019081179092557fd9f5d61e1e4cb69a38e2ea029f6cac47d1274f5496bed03d109101593805793680548216831790557f684ee09286a6717184c52e88579ffd24f8f7c814b54cecf2b4dec87270adef9b80548216831790557f18f1478cd7f71839313509d324465db6bbbb3009bfb62d8538a88dd0d3c09f7d80548216831790557f479140f11eaa2edd2ab6b175dc07a846af918300d80591c0bab26180a124798380548216831790557f26e87e13491326ad34cc4739c36dd70fed713dfe21bc677675d66934658eeb8480548216831790557fa56f36a7d202da45bd8edf8f459950bff8fb1e4c65df02528f10d2a82f839b6c8054821683179055737a5c4caf90e9211d7d474918f764ebdc2f9ec1a36000527f203a30c9c5d0d84d8f05a162edb5d81a839c59e9c18a14cda593e996dddaf58a80549091169091179055620003bb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200035957805160ff191683800117855562000389565b8280016001018555821562000389579182015b82811115620003895782518255916020019190600101906200036c565b50620003979291506200039b565b5090565b620003b891905b80821115620003975760008155600101620003a2565b90565b6119e780620003cb6000396000f3006060604052600436106101525763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461016057806306fdde031461019157806310d0ffdd1461021b57806318160ddd14610231578063226093731461024457806327defa1f1461025a578063313ce56714610281578063330ae38f146102aa5780633ccfd60b146102bf5780634b750334146102d257806356d399e8146102e5578063688abbf7146102f85780636b2f46321461031057806370a082311461032357806371d1995e146103425780638620410b146103615780638d7dd83714610374578063949e8acd1461039357806395d89b41146103a6578063a9059cbb146103b9578063e4849b32146103db578063e995064e146103f1578063e9fad8ee14610410578063ea061e7714610423578063f088d54714610442578063fdb5a03e14610456575b61015d346000610469565b50005b341561016b57600080fd5b61017f600160a060020a0360043516610de1565b60405190815260200160405180910390f35b341561019c57600080fd5b6101a4610e17565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101e05780820151838201526020016101c8565b50505050905090810190601f16801561020d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561022657600080fd5b61017f600435610eb5565b341561023c57600080fd5b61017f610ee8565b341561024f57600080fd5b61017f600435610eee565b341561026557600080fd5b61026d610f2a565b604051901515815260200160405180910390f35b341561028c57600080fd5b610294610f33565b60405160ff909116815260200160405180910390f35b34156102b557600080fd5b6102bd610f38565b005b34156102ca57600080fd5b6102bd610f5f565b34156102dd57600080fd5b61017f611026565b34156102f057600080fd5b61017f61107c565b341561030357600080fd5b61017f6004351515611082565b341561031b57600080fd5b61017f6110c5565b341561032e57600080fd5b61017f600160a060020a03600435166110d3565b341561034d57600080fd5b6102bd600160a060020a03600435166110ee565b341561036c57600080fd5b61017f611138565b341561037f57600080fd5b6102bd600160a060020a0360043516611182565b341561039e57600080fd5b61017f6111cc565b34156103b157600080fd5b6101a46111de565b34156103c457600080fd5b61026d600160a060020a0360043516602435611249565b34156103e657600080fd5b6102bd6004356113ef565b34156103fc57600080fd5b6102bd600160a060020a036004351661169b565b341561041b57600080fd5b6102bd6116e5565b341561042e57600080fd5b6102bd600160a060020a036004351661171c565b61017f600160a060020a0360043516611766565b341561046157600080fd5b6102bd611772565b60008060008060008060008060008a6012544210151561048e576010805460ff191690555b60105460ff161561098957600160a060020a0333166000908152600a602052604090205460ff16151560011480156104e95750600160a060020a033316600090815260116020526040902054670e27c49886e6000090820111155b15156104f457600080fd5b600160a060020a0333166000908152601160205260409020546105179082611828565b33600160a060020a038116600090815260116020526040902091909155985061054b6105448d600f611842565b606461186d565b975061055b610544896023611842565b96506105678888611884565b95506105738c89611884565b945061058c856105876105448f6001611842565b611884565b94506105a7856105876105a08f6005611842565b60c861186d565b94506105bb856105876105448f6001611842565b94506105cf856105876105448f6001611842565b94506105e3856105876105448f6001611842565b94506105f7856105876105a08f6001611842565b945061060285611896565b9350604060020a860292506000841180156106275750600e546106258582611828565b115b151561063257600080fd5b600160a060020a038b161580159061065c575088600160a060020a03168b600160a060020a031614155b80156106825750600254600160a060020a038c166000908152600b602052604090205410155b156106c857600160a060020a038b166000908152600c60205260409020546106aa9088611828565b600160a060020a038c166000908152600c60205260409020556106de565b6106d28688611828565b9550604060020a860292505b6000600e541115610738576106f5600e5485611828565b600e819055604060020a870281151561070a57fe5b600f8054929091049091019055600e54604060020a870281151561072a57fe5b04840283038303925061073e565b600e8490555b600160a060020a0389166000908152600b60205260409020546107619085611828565b600160a060020a03808b166000818152600b6020908152604080832095909555600f54600d909152939020805493880287900393840190559193508c16907f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8e87426107cb611138565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390a3600354600160a060020a03166108fc6108126105448f6001611842565b9081150290604051600060405180830381858888f19350505050151561083757600080fd5b600454600160a060020a03166108fc6108546105a08f6005611842565b9081150290604051600060405180830381858888f19350505050151561087957600080fd5b600554600160a060020a03166108fc6108966105448f6001611842565b9081150290604051600060405180830381858888f1935050505015156108bb57600080fd5b600654600160a060020a03166108fc6108d86105448f6001611842565b9081150290604051600060405180830381858888f1935050505015156108fd57600080fd5b600754600160a060020a03166108fc61091a6105448f6001611842565b9081150290604051600060405180830381858888f19350505050151561093f57600080fd5b600854600160a060020a03166108fc61095c6105a08f6001611842565b9081150290604051600060405180830381858888f19350505050151561098157600080fd5b839950610dd2565b6010805460ff191690553398506109a46105448d600f611842565b97506109b4610544896023611842565b96506109c08888611884565b95506109cc8c89611884565b94506109e0856105876105448f6001611842565b94506109f4856105876105a08f6005611842565b9450610a08856105876105448f6001611842565b9450610a1c856105876105448f6001611842565b9450610a30856105876105448f6001611842565b9450610a44856105876105a08f6001611842565b9450610a4f85611896565b9350604060020a86029250600084118015610a745750600e54610a728582611828565b115b1515610a7f57600080fd5b600160a060020a038b1615801590610aa9575088600160a060020a03168b600160a060020a031614155b8015610acf5750600254600160a060020a038c166000908152600b602052604090205410155b15610b1557600160a060020a038b166000908152600c6020526040902054610af79088611828565b600160a060020a038c166000908152600c6020526040902055610b2b565b610b1f8688611828565b9550604060020a860292505b6000600e541115610b8557610b42600e5485611828565b600e819055604060020a8702811515610b5757fe5b600f8054929091049091019055600e54604060020a8702811515610b7757fe5b048402830383039250610b8b565b600e8490555b600160a060020a0389166000908152600b6020526040902054610bae9085611828565b600160a060020a03808b166000818152600b6020908152604080832095909555600f54600d909152939020805493880287900393840190559193508c16907f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8e8742610c18611138565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390a3600354600160a060020a03166108fc610c5f6105448f6001611842565b9081150290604051600060405180830381858888f193505050501515610c8457600080fd5b600454600160a060020a03166108fc610ca16105a08f6005611842565b9081150290604051600060405180830381858888f193505050501515610cc657600080fd5b600554600160a060020a03166108fc610ce36105448f6001611842565b9081150290604051600060405180830381858888f193505050501515610d0857600080fd5b600654600160a060020a03166108fc610d256105448f6001611842565b9081150290604051600060405180830381858888f193505050501515610d4a57600080fd5b600754600160a060020a03166108fc610d676105448f6001611842565b9081150290604051600060405180830381858888f193505050501515610d8c57600080fd5b600854600160a060020a03166108fc610da96105a08f6001611842565b9081150290604051600060405180830381858888f193505050501515610dce57600080fd5b8399505b50505050505050505092915050565b600160a060020a03166000908152600d6020908152604080832054600b90925290912054600f54604060020a9102919091030490565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ead5780601f10610e8257610100808354040283529160200191610ead565b820191906000526020600020905b815481529060010190602001808311610e9057829003601f168201915b505050505081565b6000808080610ec861054486600f611842565b9250610ed48584611884565b9150610edf82611896565b95945050505050565b600e5490565b600080600080600e548511151515610f0557600080fd5b610f0e8561191f565b9250610f1e61054484600a611842565b9150610edf8383611884565b60105460ff1681565b601281565b60095433600160a060020a03908116911614610f5357600080fd5b6010805460ff19169055565b6000806000610f6e6001611082565b11610f7857600080fd5b339150610f856000611082565b600160a060020a0383166000818152600d602090815260408083208054604060020a8702019055600c9091528082208054929055920192509082156108fc0290839051600060405180830381858888f193505050501515610fe557600080fd5b81600160a060020a03167fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc8260405190815260200160405180910390a25050565b600080600080600e5460001415611043576305a995c09350611076565b611054670de0b6b3a764000061191f565b925061106461054484600a611842565b91506110708383611884565b90508093505b50505090565b60025481565b600033826110985761109381610de1565b6110bc565b600160a060020a0381166000908152600c60205260409020546110ba82610de1565b015b91505b50919050565b600160a060020a0330163190565b600160a060020a03166000908152600b602052604090205490565b60095433600160a060020a0390811691161461110957600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080600080600e5460001415611155576306422c409350611076565b611166670de0b6b3a764000061191f565b925061117661054484600f611842565b91506110708383611828565b60095433600160a060020a0390811691161461119d57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000336111d8816110d3565b91505090565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ead5780601f10610e8257610100808354040283529160200191610ead565b60008060008060008061125a6111cc565b1161126457600080fd5b33600160a060020a0381166000908152600b602052604090205490945086111561128d57600080fd5b60006112996001611082565b11156112a7576112a7610f5f565b6112b5610544876004611842565b92506112c18684611884565b91506112cc8361191f565b90506112da600e5484611884565b600e55600160a060020a0384166000908152600b60205260409020546113009087611884565b600160a060020a038086166000908152600b6020526040808220939093559089168152205461132f9083611828565b600160a060020a038881166000818152600b6020908152604080832095909555600f8054948a168352600d9091528482208054948c02909403909355825491815292909220805492850290920190915554600e5461139e9190604060020a840281151561139857fe5b04611828565b600f55600160a060020a038088169085167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a35060019695505050505050565b60008060008060008060008060008060006114086111cc565b1161141257600080fd5b33600160a060020a0381166000908152600b6020526040902054909a508b111561143b57600080fd5b8a98506114478961191f565b975061145761054489600a611842565b96506114676105a0896001611842565b95506114776105a0896005611842565b94506114876105a0896001611842565b93506114976105a0896001611842565b92506114c76114c16114bb6114b56114af8c8c611884565b8a611884565b88611884565b86611884565b84611884565b91506114d5600e548a611884565b600e55600160a060020a038a166000908152600b60205260409020546114fb908a611884565b600160a060020a038b166000908152600b6020908152604080832093909355600f54600d9091529181208054928c02604060020a860201928390039055600e549192509011156115625761155e600f54600e54604060020a8a0281151561139857fe5b600f555b600354600160a060020a031686156108fc0287604051600060405180830381858888f19350505050151561159557600080fd5b600454600160a060020a031685156108fc0286604051600060405180830381858888f1935050505015156115c857600080fd5b600554600160a060020a031684156108fc0285604051600060405180830381858888f1935050505015156115fb57600080fd5b600854600160a060020a031683156108fc0284604051600060405180830381858888f19350505050151561162e57600080fd5b89600160a060020a03167f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e8a8442611664611138565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390a25050505050505050505050565b60095433600160a060020a039081169116146116b657600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b33600160a060020a0381166000908152600b60205260408120549081111561171057611710816113ef565b611718610f5f565b5050565b60095433600160a060020a0390811691161461173757600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60006110bf3483610469565b6000806000806117826001611082565b1161178c57600080fd5b6117966000611082565b33600160a060020a0381166000908152600d602090815260408083208054604060020a8702019055600c9091528120805490829055909201945092506117dd908490610469565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458848360405191825260208201526040908101905180910390a2505050565b60008282018381101561183757fe5b8091505b5092915050565b600080831515611855576000915061183b565b5082820282848281151561186557fe5b041461183757fe5b600080828481151561187b57fe5b04949350505050565b60008282111561189057fe5b50900390565b600e546000906a52b7d2dcc80cd2e4000000908290624c4b4061190c6119067172cb5bd86321e38cb6ce6682e8000000000088026516bcc41e90006002860a02016d314dc6448d9338c15b0a00000000850201751aba4714957d300d0e549208b31adb1000000000000001611986565b85611884565b81151561191557fe5b0403949350505050565b600e54600090670de0b6b3a76400008381019181019083906119736305a995c0828504624c4b4002018702600283670de0b6b3a763ffff1982890a8b90030104624c4b400281151561196d57fe5b04611884565b81151561197c57fe5b0495945050505050565b80600260018201045b818110156110bf5780915060028182858115156119a857fe5b04018115156119b357fe5b04905061198f5600a165627a7a72305820e98c0d256c3e512e9295b3c53814e426eeb5a0e81a2e8e399b2f69fa781db7990029"
}