{
  "address": "0x1d4105534da120da243281cfc3f26aaf038e2d6f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "YOOBAToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-29\n*/\n\npragma solidity ^0.4.15;\n\ncontract Utils {\n    /**\n        constructor\n    */\n    function Utils() internal {\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        require(_address != 0x0);\n        _;\n    }\n\n    // verifies that the address is different than this contract address\n    modifier notThis(address _address) {\n        require(_address != address(this));\n        _;\n    }\n\n    // Overflow protected math functions\n\n    /**\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\n\n        @param _x   value 1\n        @param _y   value 2\n\n        @return sum\n    */\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x + _y;\n        assert(z >= _x);\n        return z;\n    }\n\n    /**\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n\n        @param _x   minuend\n        @param _y   subtrahend\n\n        @return difference\n    */\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        assert(_x >= _y);\n        return _x - _y;\n    }\n\n    /**\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n\n        @param _x   factor 1\n        @param _y   factor 2\n\n        @return product\n    */\n    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x * _y;\n        assert(_x == 0 || z / _x == _y);\n        return z;\n    }\n}\n\n/*\n    ERC20 Standard Token interface\n*/\ncontract IERC20Token {\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n    function name() public constant returns (string) { name; }\n    function symbol() public constant returns (string) { symbol; }\n    function decimals() public constant returns (uint8) { decimals; }\n    function totalSupply() public constant returns (uint256) { totalSupply; }\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n}\n\n\n/**\n    ERC20 Standard Token implementation\n*/\ncontract StandardERC20Token is IERC20Token, Utils {\n    string public name = \"\";\n    string public symbol = \"\";\n    uint8 public decimals = 0;\n    uint256 public totalSupply = 0;\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n\n\n    /**\n        @dev constructor\n\n        @param _name        token name\n        @param _symbol      token symbol\n        @param _decimals    decimal points, for display purposes\n    */\n    function StandardERC20Token(string _name, string _symbol, uint8 _decimals) public{\n        require(bytes(_name).length > 0 && bytes(_symbol).length > 0); // validate input\n\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n     function balanceOf(address _owner) constant returns (uint256) {\n        return balanceOf[_owner];\n    }\n    function allowance(address _owner, address _spender) constant returns (uint256) {\n        return allowance[_owner][_spender];\n    }\n    /**\n        @dev send coins\n        throws on any error rather then return a false flag to minimize user errors\n\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transfer(address _to, uint256 _value)\n        public\n        validAddress(_to)\n        returns (bool success)\n    {\n        require(balanceOf[msg.sender] >= _value && _value > 0);\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n        @dev an account/contract attempts to get the coins\n        throws on any error rather then return a false flag to minimize user errors\n\n        @param _from    source address\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        validAddress(_from)\n        validAddress(_to)\n        returns (bool success)\n    {\n        require(balanceOf[_from] >= _value && _value > 0);\n        require(allowance[_from][msg.sender] >= _value);\n        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n        @dev allow another account/contract to spend some tokens on your behalf\n        throws on any error rather then return a false flag to minimize user errors\n\n        also, to minimize the risk of the approve/transferFrom attack vector\n        (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice\n        in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value\n\n        @param _spender approved address\n        @param _value   allowance amount\n\n        @return true if the approval was successful, false if it wasn't\n    */\n    function approve(address _spender, uint256 _value)\n        public\n        validAddress(_spender)\n        returns (bool success)\n    {\n        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n}\n\n/*\n    Owned contract interface\n*/\ncontract IOwned {\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n    function owner() public constant returns (address) { owner; }\n\n    function transferOwnership(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\n/*\n    Provides support and utilities for contract ownership\n*/\ncontract Owned is IOwned {\n    address public owner;\n    address public newOwner;\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n\n    /**\n        @dev constructor\n    */\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    /**\n        @dev allows transferring the contract ownership\n        the new owner still needs to accept the transfer\n        can only be called by the contract owner\n\n        @param _newOwner    new contract owner\n    */\n    function transferOwnership(address _newOwner) public ownerOnly {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    /**\n        @dev used by a new owner to accept an ownership transfer\n    */\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n}\n\ncontract YooStop is Owned{\n\n    bool public stopped = false;\n\n    modifier stoppable {\n        assert (!stopped);\n        _;\n    }\n    function stop() public ownerOnly{\n        stopped = true;\n    }\n    function start() public ownerOnly{\n        stopped = false;\n    }\n\n}\n\n\ncontract YOOBAToken is StandardERC20Token, Owned,YooStop {\n\n\n\n    uint256 constant public YOO_UNIT = 10 ** 18;\n    uint256 public totalSupply = 100 * (10**8) * YOO_UNIT;\n\n    //  Constants \n    uint256 constant public airdropSupply = 20 * 10**8 * YOO_UNIT;           \n    uint256 constant public earlyInvestorSupply = 5 * 10**8 * YOO_UNIT;    \n    uint256 constant public earlyCommunitySupply = 5 * 10**8 * YOO_UNIT;  \n    uint256 constant public icoReservedSupply = 40 * 10**8 * YOO_UNIT;          // ico Reserved,not for other usages.\n    uint256 constant public teamSupply = 12 * 10**8 * YOO_UNIT;         // Team,Community,Research，etc.\n    uint256 constant public ecosystemSupply = 18 * 10**8 * YOO_UNIT;         // Community,Research，Infrastructure，etc.\n    \n    uint256  public tokensReleasedToIco = 0;  //the tokens has released for ico.\n    uint256  public tokensReleasedToEarlyInvestor = 0;  //the tokens has released for early investor.\n    uint256  public tokensReleasedToTeam = 0;  //the tokens has released to team.\n    uint256  public tokensReleasedToEcosystem = 0;  //the tokens has released to ecosystem.\n    uint256  public currentSupply = 0;  //all tokens released currently.\n\n    \n    \n    address public airdropAddress;                                           \n    address public yoobaTeamAddress;     \n    address public earlyCommunityAddress;\n    address public ecosystemAddress;// use for community,Research，Infrastructure，etc.\n    address public backupAddress;\n\n\n    \n    \n    uint256 internal createTime = 1522261875;                                // will be replace by (UTC) contract create time (in seconds)\n    uint256 internal teamTranchesReleased = 0;                          // Track how many tranches (allocations of 6.25% teamSupply tokens) have been released，about 4 years,teamSupply tokens will be allocate to team.\n    uint256 internal ecosystemTranchesReleased = 0;                          // Track how many tranches (allocations of 6.25% ecosystemSupply tokens) have been released.About 4 years,that will be release all. \n    uint256 internal maxTranches = 16;       \n    bool internal isInitAirdropAndEarlyAlloc = false;\n\n\n    /**\n        @dev constructor\n        \n    */\n    function YOOBAToken(address _airdropAddress, address _ecosystemAddress, address _backupAddress, address _yoobaTeamAddress,address _earlyCommunityAddress)\n    StandardERC20Token(\"Yooba token\", \"YOO\", 18) public\n     {\n        airdropAddress = _airdropAddress;\n        yoobaTeamAddress = _yoobaTeamAddress;\n        ecosystemAddress = _ecosystemAddress;\n        backupAddress = _backupAddress;\n        earlyCommunityAddress = _earlyCommunityAddress;\n        createTime = now;\n    }\n    \n    \n    /**\n        @dev \n        the tokens at the airdropAddress will be airdroped before 2018.12.31\n    */\n     function initAirdropAndEarlyAlloc()   public ownerOnly stoppable returns(bool success){\n         require(!isInitAirdropAndEarlyAlloc);\n         require(airdropAddress != 0x0 && earlyCommunityAddress != 0x0);\n         require((currentSupply + earlyCommunitySupply + airdropSupply) <= totalSupply);\n         balanceOf[earlyCommunityAddress] += earlyCommunitySupply; \n         currentSupply += earlyCommunitySupply;\n         Transfer(0x0, earlyCommunityAddress, earlyCommunitySupply);\n        balanceOf[airdropAddress] += airdropSupply;       \n        currentSupply += airdropSupply;\n        Transfer(0x0, airdropAddress, airdropSupply);\n        isInitAirdropAndEarlyAlloc = true;\n        return true;\n     }\n    \n\n\n    /**\n        @dev send tokens\n        throws on any error rather then return a false flag to minimize user errors\n        in addition to the standard checks, the function throws if transfers are disabled\n\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, throws if it wasn't\n    */\n    function transfer(address _to, uint256 _value) public stoppable returns (bool success) {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n        @dev \n        throws on any error rather then return a false flag to minimize user errors\n        in addition to the standard checks, the function throws if transfers are disabled\n\n        @param _from    source address\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, throws if it wasn't\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public stoppable returns (bool success) {\n            return super.transferFrom(_from, _to, _value);\n    }\n\n\n    /**\n        @dev Release one  tranche of the ecosystemSupply allocation to Yooba team,6.25% every tranche.About 4 years ecosystemSupply release over.\n       \n        @return true if successful, throws if not\n    */\n    function releaseForEcosystem()   public ownerOnly stoppable returns(bool success) {\n        require(now >= createTime + 12 weeks);\n        require(tokensReleasedToEcosystem < ecosystemSupply);\n\n        uint256 temp = ecosystemSupply / 10000;\n        uint256 allocAmount = safeMul(temp, 625);\n        uint256 currentTranche = uint256(now - createTime) /  12 weeks;\n\n        if(ecosystemTranchesReleased < maxTranches && currentTranche > ecosystemTranchesReleased && (currentSupply + allocAmount) <= totalSupply) {\n            ecosystemTranchesReleased++;\n            balanceOf[ecosystemAddress] = safeAdd(balanceOf[ecosystemAddress], allocAmount);\n            currentSupply += allocAmount;\n            tokensReleasedToEcosystem = safeAdd(tokensReleasedToEcosystem, allocAmount);\n            Transfer(0x0, ecosystemAddress, allocAmount);\n            return true;\n        }\n        revert();\n    }\n    \n       /**\n        @dev Release one  tranche of the teamSupply allocation to Yooba team,6.25% every tranche.About 4 years Yooba team will get teamSupply Tokens.\n       \n        @return true if successful, throws if not\n    */\n    function releaseForYoobaTeam()   public ownerOnly stoppable returns(bool success) {\n        require(now >= createTime + 12 weeks);\n        require(tokensReleasedToTeam < teamSupply);\n\n        uint256 temp = teamSupply / 10000;\n        uint256 allocAmount = safeMul(temp, 625);\n        uint256 currentTranche = uint256(now - createTime) / 12 weeks;\n\n        if(teamTranchesReleased < maxTranches && currentTranche > teamTranchesReleased && (currentSupply + allocAmount) <= totalSupply) {\n            teamTranchesReleased++;\n            balanceOf[yoobaTeamAddress] = safeAdd(balanceOf[yoobaTeamAddress], allocAmount);\n            currentSupply += allocAmount;\n            tokensReleasedToTeam = safeAdd(tokensReleasedToTeam, allocAmount);\n            Transfer(0x0, yoobaTeamAddress, allocAmount);\n            return true;\n        }\n        revert();\n    }\n\n  \n    \n        /**\n        @dev release ico Tokens \n\n        @return true if successful, throws if not\n    */\n    function releaseForIco(address _icoAddress, uint256 _value) public  ownerOnly stoppable returns(bool success) {\n          require(_icoAddress != address(0x0) && _value > 0  && (tokensReleasedToIco + _value) <= icoReservedSupply && (currentSupply + _value) <= totalSupply);\n          balanceOf[_icoAddress] = safeAdd(balanceOf[_icoAddress], _value);\n          currentSupply += _value;\n          tokensReleasedToIco += _value;\n          Transfer(0x0, _icoAddress, _value);\n         return true;\n    }\n\n        /**\n        @dev release  earlyInvestor Tokens \n\n        @return true if successful, throws if not\n    */\n    function releaseForEarlyInvestor(address _investorAddress, uint256 _value) public  ownerOnly  stoppable  returns(bool success) {\n          require(_investorAddress != address(0x0) && _value > 0  && (tokensReleasedToEarlyInvestor + _value) <= earlyInvestorSupply && (currentSupply + _value) <= totalSupply);\n          balanceOf[_investorAddress] = safeAdd(balanceOf[_investorAddress], _value);\n          currentSupply += _value;\n          tokensReleasedToEarlyInvestor += _value;\n          Transfer(0x0, _investorAddress, _value);\n         return true;\n    }\n    /**\n     @dev  This only run for urgent situation.Or Yooba mainnet is run well and all tokens release over. \n\n        @return true if successful, throws if not\n    */\n    function processWhenStop() public  ownerOnly   returns(bool success) {\n        require(currentSupply <=  totalSupply && stopped);\n        balanceOf[backupAddress] += (totalSupply - currentSupply);\n        currentSupply = totalSupply;\n       Transfer(0x0, backupAddress, (totalSupply - currentSupply));\n        return true;\n    }\n    \n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"backupAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecosystemAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensReleasedToIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecosystemSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investorAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"releaseForEarlyInvestor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoReservedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyCommunityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseForEcosystem\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YOO_UNIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseForYoobaTeam\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyCommunitySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensReleasedToEarlyInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensReleasedToTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensReleasedToEcosystem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyInvestorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initAirdropAndEarlyAlloc\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yoobaTeamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"releaseForIco\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"processWhenStop\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_airdropAddress\",\"type\":\"address\"},{\"name\":\"_ecosystemAddress\",\"type\":\"address\"},{\"name\":\"_backupAddress\",\"type\":\"address\"},{\"name\":\"_yoobaTeamAddress\",\"type\":\"address\"},{\"name\":\"_earlyCommunityAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526020604051908101604052806000815250600090805190602001906200002c929190620003b2565b5060206040519081016040528060008152506001908051906020019062000055929190620003b2565b506000600260006101000a81548160ff021916908360ff16021790555060006003556000600760146101000a81548160ff021916908315150217905550670de0b6b3a76400006402540be4000260085560006009556000600a556000600b556000600c556000600d55635abbdf736013556000601455600060155560106016556000601760006101000a81548160ff0219169083151502179055503415620000fc57600080fd5b60405160a08062002e60833981016040528080519060200190919080519060200190919080519060200190919080519060200190919080519060200190919050506040805190810160405280600b81526020017f596f6f626120746f6b656e0000000000000000000000000000000000000000008152506040805190810160405280600381526020017f594f4f0000000000000000000000000000000000000000000000000000000000815250601260008351118015620001be575060008251115b1515620001ca57600080fd5b8260009080519060200190620001e2929190620003b2565b508160019080519060200190620001fb929190620003b2565b5080600260006101000a81548160ff021916908360ff16021790555050505033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042601381905550505050505062000461565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003f557805160ff191683800117855562000426565b8280016001018555821562000426579182015b828111156200042557825182559160200191906001019062000408565b5b50905062000435919062000439565b5090565b6200045e91905b808211156200045a57600081600090555060010162000440565b5090565b90565b6129ef80620004716000396000f3006060604052600436106101e3576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063019b1576146101e857806306a5cb3a1461023d57806306fdde031461029257806307da68f514610320578063095ea7b3146103355780631001c39c1461038f57806313abdd75146103b857806318160ddd146103e15780631fd982a51461040a57806323b872dd146104645780632cfac6ec146104dd578063313ce56714610506578063346b79391461053557806358feb4a31461055e5780636799d737146105b357806367a1d653146105e05780636eca017e1461060957806370a082311461063657806375f12b211461068357806376496e34146106b0578063771282f6146106d957806379ba50971461070257806384413b65146107175780638da5cb5b1461076c57806390bf495d146107c1578063932cd73e146107ea57806395d89b41146108135780639848fef8146108a1578063a9059cbb146108ca578063b104c50914610924578063be9a65551461094d578063cc7b2ee714610962578063d4ee1d901461098f578063dd62ed3e146109e4578063e17a589414610a50578063e32b632514610aa5578063ed99659014610aff578063f2fde38b14610b2c578063fb3ed5c714610b65575b600080fd5b34156101f357600080fd5b6101fb610b8e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561024857600080fd5b610250610bb4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561029d57600080fd5b6102a5610bda565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102e55780820151818401526020810190506102ca565b50505050905090810190601f1680156103125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561032b57600080fd5b610333610c78565b005b341561034057600080fd5b610375600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cee565b604051808215151515815260200191505060405180910390f35b341561039a57600080fd5b6103a2610e9e565b6040518082815260200191505060405180910390f35b34156103c357600080fd5b6103cb610ea4565b6040518082815260200191505060405180910390f35b34156103ec57600080fd5b6103f4610eb6565b6040518082815260200191505060405180910390f35b341561041557600080fd5b61044a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ebc565b604051808215151515815260200191505060405180910390f35b341561046f57600080fd5b6104c3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506110ae565b604051808215151515815260200191505060405180910390f35b34156104e857600080fd5b6104f06110dd565b6040518082815260200191505060405180910390f35b341561051157600080fd5b6105196110ef565b604051808260ff1660ff16815260200191505060405180910390f35b341561054057600080fd5b610548611102565b6040518082815260200191505060405180910390f35b341561056957600080fd5b610571611114565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105be57600080fd5b6105c661113a565b604051808215151515815260200191505060405180910390f35b34156105eb57600080fd5b6105f36113dc565b6040518082815260200191505060405180910390f35b341561061457600080fd5b61061c6113e8565b604051808215151515815260200191505060405180910390f35b341561064157600080fd5b61066d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061168a565b6040518082815260200191505060405180910390f35b341561068e57600080fd5b6106966116d3565b604051808215151515815260200191505060405180910390f35b34156106bb57600080fd5b6106c36116e6565b6040518082815260200191505060405180910390f35b34156106e457600080fd5b6106ec6116f8565b6040518082815260200191505060405180910390f35b341561070d57600080fd5b6107156116fe565b005b341561072257600080fd5b61072a6118dc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561077757600080fd5b61077f611902565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107cc57600080fd5b6107d4611928565b6040518082815260200191505060405180910390f35b34156107f557600080fd5b6107fd61192e565b6040518082815260200191505060405180910390f35b341561081e57600080fd5b610826611934565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561086657808201518184015260208101905061084b565b50505050905090810190601f1680156108935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156108ac57600080fd5b6108b46119d2565b6040518082815260200191505060405180910390f35b34156108d557600080fd5b61090a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506119d8565b604051808215151515815260200191505060405180910390f35b341561092f57600080fd5b610937611a05565b6040518082815260200191505060405180910390f35b341561095857600080fd5b610960611a17565b005b341561096d57600080fd5b610975611a8d565b604051808215151515815260200191505060405180910390f35b341561099a57600080fd5b6109a2611e35565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109ef57600080fd5b610a3a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e5b565b6040518082815260200191505060405180910390f35b3415610a5b57600080fd5b610a63611ee2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610ab057600080fd5b610ae5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611f08565b604051808215151515815260200191505060405180910390f35b3415610b0a57600080fd5b610b126120fa565b604051808215151515815260200191505060405180910390f35b3415610b3757600080fd5b610b63600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061227d565b005b3415610b7057600080fd5b610b78612377565b6040518082815260200191505060405180910390f35b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c705780601f10610c4557610100808354040283529160200191610c70565b820191906000526020600020905b815481529060010190602001808311610c5357829003601f168201915b505050505081565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cd157fe5b6001600760146101000a81548160ff021916908315150217905550565b60008260008173ffffffffffffffffffffffffffffffffffffffff1614151515610d1757600080fd5b6000831480610da257506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610dad57600080fd5b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505092915050565b60095481565b670de0b6b3a7640000636b49d2000281565b60085481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f1757fe5b600760149054906101000a900460ff16151515610f3057fe5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015610f6d5750600082115b8015610f8b5750670de0b6b3a7640000631dcd65000282600a540111155b8015610f9d575060085482600d540111155b1515610fa857600080fd5b610ff1600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612389565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600d6000828254019250508190555081600a600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600760149054906101000a900460ff161515156110c957fe5b6110d48484846123a7565b90509392505050565b670de0b6b3a76400006347868c000281565b600260009054906101000a900460ff1681565b670de0b6b3a764000063ee6b28000281565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561119957fe5b600760149054906101000a900460ff161515156111b257fe5b626ebe006013540142101515156111c857600080fd5b670de0b6b3a7640000636b49d20002600c541015156111e657600080fd5b612710670de0b6b3a7640000636b49d2000281151561120157fe5b0492506112108361027161276c565b9150626ebe00601354420381151561122457fe5b04905060165460155410801561123b575060155481115b801561124d575060085482600d540111155b156113d1576015600081548092919060010191905055506112cf60046000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612389565b60046000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600d60008282540192505081905550611350600c5483612389565b600c81905550601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600193506113d6565b600080fd5b50505090565b670de0b6b3a764000081565b600080600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561144757fe5b600760149054906101000a900460ff1615151561146057fe5b626ebe0060135401421015151561147657600080fd5b670de0b6b3a76400006347868c0002600b5410151561149457600080fd5b612710670de0b6b3a76400006347868c00028115156114af57fe5b0492506114be8361027161276c565b9150626ebe0060135442038115156114d257fe5b0490506016546014541080156114e9575060145481115b80156114fb575060085482600d540111155b1561167f5760146000815480929190600101919050555061157d60046000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612389565b60046000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600d600082825401925050819055506115fe600b5483612389565b600b81905550600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019350611684565b600080fd5b50505090565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600760149054906101000a900460ff1681565b670de0b6b3a7640000631dcd65000281565b600d5481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561175a57600080fd5b7f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b600b5481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119ca5780601f1061199f576101008083540402835291602001916119ca565b820191906000526020600020905b8154815290600101906020018083116119ad57829003601f168201915b505050505081565b600c5481565b6000600760149054906101000a900460ff161515156119f357fe5b6119fd838361279f565b905092915050565b670de0b6b3a7640000631dcd65000281565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a7057fe5b6000600760146101000a81548160ff021916908315150217905550565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ae857fe5b600760149054906101000a900460ff16151515611b0157fe5b601760009054906101000a900460ff16151515611b1d57600080fd5b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015611b9f57506000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1515611baa57600080fd5b600854670de0b6b3a7640000637735940002670de0b6b3a7640000631dcd650002600d54010111151515611bdd57600080fd5b670de0b6b3a7640000631dcd65000260046000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550670de0b6b3a7640000631dcd650002600d60008282540192505081905550601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef670de0b6b3a7640000631dcd6500026040518082815260200191505060405180910390a3670de0b6b3a764000063773594000260046000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550670de0b6b3a7640000637735940002600d60008282540192505081905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef670de0b6b3a76400006377359400026040518082815260200191505060405180910390a36001601760006101000a81548160ff0219169083151502179055506001905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f6357fe5b600760149054906101000a900460ff16151515611f7c57fe5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611fb95750600082115b8015611fd75750670de0b6b3a764000063ee6b280002826009540111155b8015611fe9575060085482600d540111155b1515611ff457600080fd5b61203d600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612389565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600d60008282540192505081905550816009600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561215557fe5b600854600d54111580156121755750600760149054906101000a900460ff165b151561218057600080fd5b600d546008540360046000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600854600d81905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600d54600854036040518082815260200191505060405180910390a36001905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122d657fe5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561233357600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b670de0b6b3a764000063773594000281565b600080828401905083811015151561239d57fe5b8091505092915050565b60008360008173ffffffffffffffffffffffffffffffffffffffff16141515156123d057600080fd5b8360008173ffffffffffffffffffffffffffffffffffffffff16141515156123f757600080fd5b83600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156124465750600084115b151561245157600080fd5b83600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156124dc57600080fd5b612562600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054856129aa565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061262b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054856129aa565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126b7600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485612389565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001925050509392505050565b6000808284029050600084148061278d575082848281151561278a57fe5b04145b151561279557fe5b8091505092915050565b60008260008173ffffffffffffffffffffffffffffffffffffffff16141515156127c857600080fd5b82600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156128175750600083115b151561282257600080fd5b61286b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846129aa565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506128f7600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612389565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b60008183101515156129b857fe5b8183039050929150505600a165627a7a7230582036cacabf707cca6d28db68feb5d2fa867dcb9762f3862cd7472ca6327db4f44600290000000000000000000000008d66f5196fcb64503819d4a80f8c43bb1541ea38000000000000000000000000e3fe2b07fdd23bd530164f33fd8dc104ae5519f5000000000000000000000000e0930424d7503ba53d77e1813c930e251f7e1eb5000000000000000000000000829423e43b9bf417da9e91a437bc0f69d4a9eece000000000000000000000000c0ebea4505019a9a5ff58ecf304d1e037b5546a7",
  "constructorArguments": "0000000000000000000000008d66f5196fcb64503819d4a80f8c43bb1541ea38000000000000000000000000e3fe2b07fdd23bd530164f33fd8dc104ae5519f5000000000000000000000000e0930424d7503ba53d77e1813c930e251f7e1eb5000000000000000000000000829423e43b9bf417da9e91a437bc0f69d4a9eece000000000000000000000000c0ebea4505019a9a5ff58ecf304d1e037b5546a7"
}