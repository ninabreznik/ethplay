{
  "address": "0x2eb067b839bb553e109eeeb215a08fe8cc799080",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FidelityHousePresale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-03\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n * behavior.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n\n  // The token being sold\n  ERC20 public token;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n  // 1 wei will give you 1 unit, or 0.001 TOK.\n  uint256 public rate;\n\n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  /**\n   * Event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param _rate Number of token units a buyer gets per wei\n   * @param _wallet Address where collected funds will be forwarded to\n   * @param _token Address of the token being sold\n   */\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n    require(_rate > 0);\n    require(_wallet != address(0));\n    require(_token != address(0));\n\n    rate = _rate;\n    wallet = _wallet;\n    token = _token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method: \n   *   super._preValidatePurchase(_beneficiary, _weiAmount);\n   *   require(weiRaised.add(_weiAmount) <= cap);\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    token.safeTransfer(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    // optional override\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount)\n    internal view returns (uint256)\n  {\n    return _weiAmount.mul(rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\n\n/**\n * @title CappedCrowdsale\n * @dev Crowdsale with a limit for total contributions.\n */\ncontract CappedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public cap;\n\n  /**\n   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n   * @param _cap Max amount of wei to be contributed\n   */\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Checks whether the cap has been reached.\n   * @return Whether the cap was reached\n   */\n  function capReached() public view returns (bool) {\n    return weiRaised >= cap;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n    require(weiRaised.add(_weiAmount) <= cap);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/rbac/Roles.sol\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage _role, address _addr)\n    internal\n    view\n  {\n    require(has(_role, _addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage _role, address _addr)\n    internal\n    view\n    returns (bool)\n  {\n    return _role.bearer[_addr];\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/rbac/RBAC.sol\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    public\n    view\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    public\n    view\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/RBACMintableToken.sol\n\n/**\n * @title RBACMintableToken\n * @author Vittorio Minacori (@vittominacori)\n * @dev Mintable Token, with RBAC minter permissions\n */\ncontract RBACMintableToken is MintableToken, RBAC {\n  /**\n   * A constant role name for indicating minters.\n   */\n  string public constant ROLE_MINTER = \"minter\";\n\n  /**\n   * @dev override the Mintable token modifier to add role based logic\n   */\n  modifier hasMintPermission() {\n    checkRole(msg.sender, ROLE_MINTER);\n    _;\n  }\n\n  /**\n   * @dev add a minter role to an address\n   * @param _minter address\n   */\n  function addMinter(address _minter) public onlyOwner {\n    addRole(_minter, ROLE_MINTER);\n  }\n\n  /**\n   * @dev remove a minter role from an address\n   * @param _minter address\n   */\n  function removeMinter(address _minter) public onlyOwner {\n    removeRole(_minter, ROLE_MINTER);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param _addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(_addr) }\n    return size > 0;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/ERC1363.sol\n\n/**\n * @title ERC1363 interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for a Payable Token contract as defined in\n *  https://github.com/ethereum/EIPs/issues/1363\n */\ncontract ERC1363 is ERC20, ERC165 {\n  /*\n   * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\n   * 0x4bbee2df ===\n   *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n   *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n   *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n   *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\n   */\n\n  /*\n   * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\n   * 0xfb9ec8ce ===\n   *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n   *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n   */\n\n  /**\n   * @notice Transfer tokens from `msg.sender` to another address\n   *  and then call `onTransferReceived` on receiver\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 The amount of tokens to be transferred\n   * @return true unless throwing\n   */\n  function transferAndCall(address _to, uint256 _value) public returns (bool);\n\n  /**\n   * @notice Transfer tokens from `msg.sender` to another address\n   *  and then call `onTransferReceived` on receiver\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 The amount of tokens to be transferred\n   * @param _data bytes Additional data with no specified format, sent in call to `_to`\n   * @return true unless throwing\n   */\n  function transferAndCall(address _to, uint256 _value, bytes _data) public returns (bool); // solium-disable-line max-len\n\n  /**\n   * @notice Transfer tokens from one address to another\n   *  and then call `onTransferReceived` on receiver\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 The amount of tokens to be transferred\n   * @return true unless throwing\n   */\n  function transferFromAndCall(address _from, address _to, uint256 _value) public returns (bool); // solium-disable-line max-len\n\n\n  /**\n   * @notice Transfer tokens from one address to another\n   *  and then call `onTransferReceived` on receiver\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 The amount of tokens to be transferred\n   * @param _data bytes Additional data with no specified format, sent in call to `_to`\n   * @return true unless throwing\n   */\n  function transferFromAndCall(address _from, address _to, uint256 _value, bytes _data) public returns (bool); // solium-disable-line max-len, arg-overflow\n\n  /**\n   * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n   *  and then call `onApprovalReceived` on spender\n   *  Beware that changing an allowance with this method brings the risk that someone may use both the old\n   *  and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   *  race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   *  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender address The address which will spend the funds\n   * @param _value uint256 The amount of tokens to be spent\n   */\n  function approveAndCall(address _spender, uint256 _value) public returns (bool); // solium-disable-line max-len\n\n  /**\n   * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n   *  and then call `onApprovalReceived` on spender\n   *  Beware that changing an allowance with this method brings the risk that someone may use both the old\n   *  and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   *  race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   *  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender address The address which will spend the funds\n   * @param _value uint256 The amount of tokens to be spent\n   * @param _data bytes Additional data with no specified format, sent in call to `_spender`\n   */\n  function approveAndCall(address _spender, uint256 _value, bytes _data) public returns (bool); // solium-disable-line max-len\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/ERC1363Receiver.sol\n\n/**\n * @title ERC1363Receiver interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\n *  from ERC1363 token contracts as defined in\n *  https://github.com/ethereum/EIPs/issues/1363\n */\ncontract ERC1363Receiver {\n  /*\n   * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\n   * 0x88a7ca5c === bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))\n   */\n\n  /**\n   * @notice Handle the receipt of ERC1363 tokens\n   * @dev Any ERC1363 smart contract calls this function on the recipient\n   *  after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\n   *  transfer. Return of other than the magic value MUST result in the\n   *  transaction being reverted.\n   *  Note: the token contract address is always the message sender.\n   * @param _operator address The address which called `transferAndCall` or `transferFromAndCall` function\n   * @param _from address The address which are token transferred from\n   * @param _value uint256 The amount of tokens transferred\n   * @param _data bytes Additional data with no specified format\n   * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`\n   *  unless throwing\n   */\n  function onTransferReceived(address _operator, address _from, uint256 _value, bytes _data) external returns (bytes4); // solium-disable-line max-len, arg-overflow\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/ERC1363Spender.sol\n\n/**\n * @title ERC1363Spender interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support approveAndCall\n *  from ERC1363 token contracts as defined in\n *  https://github.com/ethereum/EIPs/issues/1363\n */\ncontract ERC1363Spender {\n  /*\n   * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\n   * 0x7b04a2d0 === bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))\n   */\n\n  /**\n   * @notice Handle the approval of ERC1363 tokens\n   * @dev Any ERC1363 smart contract calls this function on the recipient\n   *  after an `approve`. This function MAY throw to revert and reject the\n   *  approval. Return of other than the magic value MUST result in the\n   *  transaction being reverted.\n   *  Note: the token contract address is always the message sender.\n   * @param _owner address The address which called `approveAndCall` function\n   * @param _value uint256 The amount of tokens to be spent\n   * @param _data bytes Additional data with no specified format\n   * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`\n   *  unless throwing\n   */\n  function onApprovalReceived(address _owner, uint256 _value, bytes _data) external returns (bytes4); // solium-disable-line max-len\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/ERC1363BasicToken.sol\n\n// solium-disable-next-line max-len\n\n\n\n\n\n\n\n/**\n * @title ERC1363BasicToken\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Implementation of an ERC1363 interface\n */\ncontract ERC1363BasicToken is SupportsInterfaceWithLookup, StandardToken, ERC1363 { // solium-disable-line max-len\n  using AddressUtils for address;\n\n  /*\n   * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\n   * 0x4bbee2df ===\n   *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n   *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n   *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n   *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\n   */\n  bytes4 internal constant InterfaceId_ERC1363Transfer = 0x4bbee2df;\n\n  /*\n   * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\n   * 0xfb9ec8ce ===\n   *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n   *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n   */\n  bytes4 internal constant InterfaceId_ERC1363Approve = 0xfb9ec8ce;\n\n  // Equals to `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC1363Receiver(0).onTransferReceived.selector`\n  bytes4 private constant ERC1363_RECEIVED = 0x88a7ca5c;\n\n  // Equals to `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC1363Spender(0).onApprovalReceived.selector`\n  bytes4 private constant ERC1363_APPROVED = 0x7b04a2d0;\n\n  constructor() public {\n    // register the supported interfaces to conform to ERC1363 via ERC165\n    _registerInterface(InterfaceId_ERC1363Transfer);\n    _registerInterface(InterfaceId_ERC1363Approve);\n  }\n\n  function transferAndCall(\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    return transferAndCall(_to, _value, \"\");\n  }\n\n  function transferAndCall(\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    returns (bool)\n  {\n    require(transfer(_to, _value));\n    require(\n      checkAndCallTransfer(\n        msg.sender,\n        _to,\n        _value,\n        _data\n      )\n    );\n    return true;\n  }\n\n  function transferFromAndCall(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    // solium-disable-next-line arg-overflow\n    return transferFromAndCall(_from, _to, _value, \"\");\n  }\n\n  function transferFromAndCall(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    returns (bool)\n  {\n    require(transferFrom(_from, _to, _value));\n    require(\n      checkAndCallTransfer(\n        _from,\n        _to,\n        _value,\n        _data\n      )\n    );\n    return true;\n  }\n\n  function approveAndCall(\n    address _spender,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    return approveAndCall(_spender, _value, \"\");\n  }\n\n  function approveAndCall(\n    address _spender,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    returns (bool)\n  {\n    approve(_spender, _value);\n    require(\n      checkAndCallApprove(\n        _spender,\n        _value,\n        _data\n      )\n    );\n    return true;\n  }\n\n  /**\n   * @dev Internal function to invoke `onTransferReceived` on a target address\n   *  The call is not executed if the target address is not a contract\n   * @param _from address Representing the previous owner of the given token value\n   * @param _to address Target address that will receive the tokens\n   * @param _value uint256 The amount mount of tokens to be transferred\n   * @param _data bytes Optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallTransfer(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return false;\n    }\n    bytes4 retval = ERC1363Receiver(_to).onTransferReceived(\n      msg.sender, _from, _value, _data\n    );\n    return (retval == ERC1363_RECEIVED);\n  }\n\n  /**\n   * @dev Internal function to invoke `onApprovalReceived` on a target address\n   *  The call is not executed if the target address is not a contract\n   * @param _spender address The address which will spend the funds\n   * @param _value uint256 The amount of tokens to be spent\n   * @param _data bytes Optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallApprove(\n    address _spender,\n    uint256 _value,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_spender.isContract()) {\n      return false;\n    }\n    bytes4 retval = ERC1363Spender(_spender).onApprovalReceived(\n      msg.sender, _value, _data\n    );\n    return (retval == ERC1363_APPROVED);\n  }\n}\n\n// File: eth-token-recover/contracts/TokenRecover.sol\n\n/**\n * @title TokenRecover\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Allow to recover any ERC20 sent into the contract for error\n */\ncontract TokenRecover is Ownable {\n\n  /**\n   * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\n   * @param _tokenAddress address The token contract address\n   * @param _tokens Number of tokens to be sent\n   * @return bool\n   */\n  function recoverERC20(\n    address _tokenAddress,\n    uint256 _tokens\n  )\n  public\n  onlyOwner\n  returns (bool success)\n  {\n    return ERC20Basic(_tokenAddress).transfer(owner, _tokens);\n  }\n}\n\n// File: contracts/token/FidelityHouseToken.sol\n\n// solium-disable-next-line max-len\ncontract FidelityHouseToken is DetailedERC20, RBACMintableToken, BurnableToken, ERC1363BasicToken, TokenRecover {\n\n  uint256 public lockedUntil;\n  mapping(address => uint256) internal lockedBalances;\n\n  modifier canTransfer(address _from, uint256 _value) {\n    require(\n      mintingFinished,\n      \"Minting should be finished before transfer.\"\n    );\n    require(\n      _value <= balances[_from].sub(lockedBalanceOf(_from)),\n      \"Can't transfer more than unlocked tokens\"\n    );\n    _;\n  }\n\n  constructor(uint256 _lockedUntil)\n    DetailedERC20(\"FidelityHouse Token\", \"FIH\", 18)\n    public\n  {\n    lockedUntil = _lockedUntil;\n  }\n\n  /**\n   * @dev Gets the locked balance of the specified address.\n   * @param _owner The address to query the balance of.\n   * @return An uint256 representing the locked amount owned by the passed address.\n   */\n  function lockedBalanceOf(address _owner) public view returns (uint256) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp <= lockedUntil ? lockedBalances[_owner] : 0;\n  }\n\n  /**\n   * @dev Function to mint and lock tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mintAndLock(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    lockedBalances[_to] = lockedBalances[_to].add(_amount);\n    return super.mint(_to, _amount);\n  }\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    canTransfer(msg.sender, _value)\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    canTransfer(_from, _value)\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n}\n\n// File: contracts/crowdsale/base/MintAndLockCrowdsale.sol\n\n/**\n * @title MintAndLockCrowdsale\n * @dev Extension of Crowdsale contract whose tokens are minted and locked in each purchase.\n */\ncontract MintAndLockCrowdsale is Crowdsale {\n\n  uint256 public totalRate;\n  uint256 public bonusRate;\n\n  constructor(uint256 _bonusRate) public {\n    bonusRate = _bonusRate;\n    totalRate = rate.add(_getBonusAmount(rate));\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n    uint256 bonus = _getBonusAmount(tokens);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens.add(bonus)\n    );\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n\n  /**\n   * @dev Override to extend the way in which bonus is calculated.\n   * @param _tokenAmount Tokens being purchased\n   * @return Number of tokens that should be earned as bonus\n   */\n  function _getBonusAmount(\n    uint256 _tokenAmount\n  )\n    internal\n    view\n    returns (uint256)\n  {\n    return _tokenAmount.mul(bonusRate).div(100);\n  }\n\n  /**\n   * @dev Overrides delivery by minting and locking tokens upon purchase.\n   * @param _beneficiary Token purchaser\n   * @param _tokenAmount Number of tokens to be minted\n   */\n  function _deliverTokens(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    FidelityHouseToken(address(token)).mintAndLock(_beneficiary, _tokenAmount);\n    if (bonusRate > 0) {\n      FidelityHouseToken(address(token)).mint(_beneficiary, _getBonusAmount(_tokenAmount));\n    }\n  }\n}\n\n// File: openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param _openingTime Crowdsale opening time\n   * @param _closingTime Crowdsale closing time\n   */\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(_openingTime >= block.timestamp);\n    require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n    onlyWhileOpen\n  {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\n// File: contracts/crowdsale/utils/Contributions.sol\n\ncontract Contributions is RBAC, Ownable {\n  using SafeMath for uint256;\n\n  uint256 private constant TIER_DELETED = 999;\n  string public constant ROLE_MINTER = \"minter\";\n  string public constant ROLE_OPERATOR = \"operator\";\n\n  uint256 public tierLimit;\n\n  modifier onlyMinter () {\n    checkRole(msg.sender, ROLE_MINTER);\n    _;\n  }\n\n  modifier onlyOperator () {\n    checkRole(msg.sender, ROLE_OPERATOR);\n    _;\n  }\n\n  uint256 public totalSoldTokens;\n  mapping(address => uint256) public tokenBalances;\n  mapping(address => uint256) public ethContributions;\n  mapping(address => uint256) private _whitelistTier;\n  address[] public tokenAddresses;\n  address[] public ethAddresses;\n  address[] private whitelistAddresses;\n\n  constructor(uint256 _tierLimit) public {\n    addRole(owner, ROLE_OPERATOR);\n    tierLimit = _tierLimit;\n  }\n\n  function addMinter(address minter) external onlyOwner {\n    addRole(minter, ROLE_MINTER);\n  }\n\n  function removeMinter(address minter) external onlyOwner {\n    removeRole(minter, ROLE_MINTER);\n  }\n\n  function addOperator(address _operator) external onlyOwner {\n    addRole(_operator, ROLE_OPERATOR);\n  }\n\n  function removeOperator(address _operator) external onlyOwner {\n    removeRole(_operator, ROLE_OPERATOR);\n  }\n\n  function addTokenBalance(\n    address _address,\n    uint256 _tokenAmount\n  )\n    external\n    onlyMinter\n  {\n    if (tokenBalances[_address] == 0) {\n      tokenAddresses.push(_address);\n    }\n    tokenBalances[_address] = tokenBalances[_address].add(_tokenAmount);\n    totalSoldTokens = totalSoldTokens.add(_tokenAmount);\n  }\n\n  function addEthContribution(\n    address _address,\n    uint256 _weiAmount\n  )\n    external\n    onlyMinter\n  {\n    if (ethContributions[_address] == 0) {\n      ethAddresses.push(_address);\n    }\n    ethContributions[_address] = ethContributions[_address].add(_weiAmount);\n  }\n\n  function setTierLimit(uint256 _newTierLimit) external onlyOperator {\n    require(_newTierLimit > 0, \"Tier must be greater than zero\");\n\n    tierLimit = _newTierLimit;\n  }\n\n  function addToWhitelist(\n    address _investor,\n    uint256 _tier\n  )\n    external\n    onlyOperator\n  {\n    require(_tier == 1 || _tier == 2, \"Only two tier level available\");\n    if (_whitelistTier[_investor] == 0) {\n      whitelistAddresses.push(_investor);\n    }\n    _whitelistTier[_investor] = _tier;\n  }\n\n  function removeFromWhitelist(address _investor) external onlyOperator {\n    _whitelistTier[_investor] = TIER_DELETED;\n  }\n\n  function whitelistTier(address _investor) external view returns (uint256) {\n    return _whitelistTier[_investor] <= 2 ? _whitelistTier[_investor] : 0;\n  }\n\n  function getWhitelistedAddresses(\n    uint256 _tier\n  )\n    external\n    view\n    returns (address[])\n  {\n    address[] memory tmp = new address[](whitelistAddresses.length);\n\n    uint y = 0;\n    if (_tier == 1 || _tier == 2) {\n      uint len = whitelistAddresses.length;\n      for (uint i = 0; i < len; i++) {\n        if (_whitelistTier[whitelistAddresses[i]] == _tier) {\n          tmp[y] = whitelistAddresses[i];\n          y++;\n        }\n      }\n    }\n\n    address[] memory toReturn = new address[](y);\n\n    for (uint k = 0; k < y; k++) {\n      toReturn[k] = tmp[k];\n    }\n\n    return toReturn;\n  }\n\n  function isAllowedPurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    external\n    view\n    returns (bool)\n  {\n    if (_whitelistTier[_beneficiary] == 2) {\n      return true;\n    } else if (_whitelistTier[_beneficiary] == 1 && ethContributions[_beneficiary].add(_weiAmount) <= tierLimit) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function getTokenAddressesLength() external view returns (uint) {\n    return tokenAddresses.length;\n  }\n\n  function getEthAddressesLength() external view returns (uint) {\n    return ethAddresses.length;\n  }\n}\n\n// File: contracts/crowdsale/base/DefaultCrowdsale.sol\n\n// solium-disable-next-line max-len\n\n\n\n\ncontract DefaultCrowdsale is TimedCrowdsale, TokenRecover {\n\n  Contributions public contributions;\n\n  uint256 public minimumContribution;\n\n  constructor(\n    uint256 _openingTime,\n    uint256 _closingTime,\n    uint256 _rate,\n    address _wallet,\n    uint256 _minimumContribution,\n    address _token,\n    address _contributions\n  )\n    Crowdsale(_rate, _wallet, ERC20(_token))\n    TimedCrowdsale(_openingTime, _closingTime)\n    public\n  {\n    require(\n      _contributions != address(0),\n      \"Contributions address can't be the zero address.\"\n    );\n    contributions = Contributions(_contributions);\n    minimumContribution = _minimumContribution;\n  }\n\n  // Utility methods\n\n  // false if the ico is not started, true if the ico is started and running, true if the ico is completed\n  function started() public view returns(bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp >= openingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring purchase to respect the minimumContribution.\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    require(\n      _weiAmount >= minimumContribution,\n      \"Can't send less than the minimum contribution\"\n    );\n    require(\n      contributions.isAllowedPurchase(_beneficiary, _weiAmount),\n      \"Beneficiary is not allowed to purchase this amount\"\n    );\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n\n  /**\n   * @dev Extend parent behavior to update user contributions\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _updatePurchasingState(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal\n  {\n    super._updatePurchasingState(_beneficiary, _weiAmount);\n    contributions.addEthContribution(_beneficiary, _weiAmount);\n  }\n\n  /**\n   * @dev Extend parent behavior to add contributions log\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    super._processPurchase(_beneficiary, _tokenAmount);\n    contributions.addTokenBalance(_beneficiary, _tokenAmount);\n  }\n}\n\n// File: contracts/crowdsale/FidelityHousePresale.sol\n\n// solium-disable-next-line max-len\n\n\n\n\n// solium-disable-next-line max-len\ncontract FidelityHousePresale is DefaultCrowdsale, CappedCrowdsale, MintAndLockCrowdsale {\n\n  constructor(\n    uint256 _openingTime,\n    uint256 _closingTime,\n    uint256 _rate,\n    uint256 _bonusRate,\n    address _wallet,\n    uint256 _cap,\n    uint256 _minimumContribution,\n    address _token,\n    address _contributions\n  )\n    DefaultCrowdsale(\n      _openingTime,\n      _closingTime,\n      _rate,\n      _wallet,\n      _minimumContribution,\n      _token,\n      _contributions\n    )\n    CappedCrowdsale(_cap)\n    MintAndLockCrowdsale(_bonusRate)\n    public\n  {}\n\n  // false if the ico is not started, false if the ico is started and running, true if the ico is completed\n  function ended() public view returns(bool) {\n    return hasClosed() || capReached();\n  }\n\n  /**\n * @dev Extend parent behavior to add contributions log\n * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n * @param _beneficiary Address receiving the tokens\n * @param _tokenAmount Number of tokens to be purchased\n */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    super._processPurchase(_beneficiary, _tokenAmount);\n    if (bonusRate > 0) {\n      contributions.addTokenBalance(_beneficiary, _getBonusAmount(_tokenAmount));\n    }\n  }\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040516101208062000f1d83398101604090815281516020830151918301516060840151608085015160a086015160c087015160e08801516101009098015195979495939492939192909185848a8a8a898888888686868685600083116200007957600080fd5b600160a060020a03821615156200008f57600080fd5b600160a060020a0381161515620000a557600080fd5b60029290925560018054600160a060020a03928316600160a060020a0319918216179091556000805492909316911617905542821015620000e557600080fd5b81811015620000f357600080fd5b60049190915560055560068054600160a060020a03191633179055600160a060020a0381161515620001ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f436f6e747269627574696f6e7320616464726573732063616e2774206265207460448201527f6865207a65726f20616464726573732e00000000000000000000000000000000606482015290519081900360840190fd5b60078054600160a060020a031916600160a060020a0392909216919091179055506008555050600083119150620001e4905057600080fd5b600955600b8190556002546200022090620002089064010000000062000234810204565b60025490640100000000620006216200027c82021704565b600a5550620002cd98505050505050505050565b600062000276606462000261600b54856200028a64010000000002620009ca179091906401000000009004565b90640100000000620009f3620002b782021704565b92915050565b818101828110156200027657fe5b60008215156200029d5750600062000276565b50818102818382811515620002ae57fe5b04146200027657fe5b60008183811515620002c557fe5b049392505050565b610c4080620002dd6000396000f3006080604052600436106100f85763ffffffff60e060020a600035041663029eabcb811461010357806312fa6feb146101345780631515bc2b1461015d5780631f2698ab146101725780632c4e722e14610187578063355274ea146101ae5780634042b66f146101c357806342a66f68146101d85780634b6753bc146101ed5780634f93594514610202578063521eb273146102175780635af123f41461022c578063715018a6146102415780638980f11f146102565780638da5cb5b1461027a578063937e09b11461028f578063b7a8807c146102a4578063ec8ac4d8146102b9578063f2fde38b146102cd578063fc0c546a146102ee575b61010133610303565b005b34801561010f57600080fd5b506101186103bf565b60408051600160a060020a039092168252519081900360200190f35b34801561014057600080fd5b506101496103ce565b604080519115158252519081900360200190f35b34801561016957600080fd5b506101496103eb565b34801561017e57600080fd5b506101496103f3565b34801561019357600080fd5b5061019c6103fc565b60408051918252519081900360200190f35b3480156101ba57600080fd5b5061019c610402565b3480156101cf57600080fd5b5061019c610408565b3480156101e457600080fd5b5061019c61040e565b3480156101f957600080fd5b5061019c610414565b34801561020e57600080fd5b5061014961041a565b34801561022357600080fd5b50610118610425565b34801561023857600080fd5b5061019c610434565b34801561024d57600080fd5b5061010161043a565b34801561026257600080fd5b50610149600160a060020a03600435166024356104a8565b34801561028657600080fd5b50610118610566565b34801561029b57600080fd5b5061019c610575565b3480156102b057600080fd5b5061019c61057b565b610101600160a060020a0360043516610303565b3480156102d957600080fd5b50610101600160a060020a0360043516610581565b3480156102fa57600080fd5b506101186105a4565b3460008061031184846105b3565b61031a836105e2565b9150610325826105f9565b60035490915061033b908463ffffffff61062116565b600355610348848361062e565b600160a060020a038416337f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad1885610385868663ffffffff61062116565b6040805192835260208301919091528051918290030190a36103a784846106cc565b6103af610744565b6103b984846105de565b50505050565b600754600160a060020a031681565b60006103d86103eb565b806103e657506103e661041a565b905090565b600554421190565b60045442101590565b60025481565b60095481565b60035481565b600a5481565b60055481565b600954600354101590565b600154600160a060020a031681565b600b5481565b600654600160a060020a0316331461045157600080fd5b600654604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26006805473ffffffffffffffffffffffffffffffffffffffff19169055565b600654600090600160a060020a031633146104c257600080fd5b600654604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519185169163a9059cbb916044808201926020929091908290030181600087803b15801561053157600080fd5b505af1158015610545573d6000803e3d6000fd5b505050506040513d602081101561055b57600080fd5b505190505b92915050565b600654600160a060020a031681565b60085481565b60045481565b600654600160a060020a0316331461059857600080fd5b6105a18161077d565b50565b600054600160a060020a031681565b6105bd82826107fb565b6009546003546105d3908363ffffffff61062116565b11156105de57600080fd5b5050565b6000610560600254836109ca90919063ffffffff16565b60006105606064610615600b54856109ca90919063ffffffff16565b9063ffffffff6109f316565b8181018281101561056057fe5b6106388282610a08565b6000600b5411156105de57600754600160a060020a031663d50b30658361065e846105f9565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b1580156106b057600080fd5b505af11580156106c4573d6000803e3d6000fd5b505050505050565b6106d682826105de565b600754604080517f097a3daf000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163097a3daf91604480830192600092919082900301818387803b1580156106b057600080fd5b600154604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156105a1573d6000803e3d6000fd5b600160a060020a038116151561079257600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60085481101561089257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f43616e27742073656e64206c657373207468616e20746865206d696e696d756d60448201527f20636f6e747269627574696f6e00000000000000000000000000000000000000606482015290519081900360840190fd5b600754604080517fee3c3bad000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163ee3c3bad9160448083019260209291908290030181600087803b15801561090157600080fd5b505af1158015610915573d6000803e3d6000fd5b505050506040513d602081101561092b57600080fd5b505115156109c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f42656e6566696369617279206973206e6f7420616c6c6f77656420746f20707560448201527f726368617365207468697320616d6f756e740000000000000000000000000000606482015290519081900360840190fd5b6105de8282610a80565b60008215156109db57506000610560565b508181028183828115156109eb57fe5b041461056057fe5b60008183811515610a0057fe5b049392505050565b610a128282610aa9565b600754604080517fd50b3065000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163d50b306591604480830192600092919082900301818387803b1580156106b057600080fd5b6004544210158015610a9457506005544211155b1515610a9f57600080fd5b6105de8282610ab3565b6105de8282610ad4565b600160a060020a0382161515610ac857600080fd5b8015156105de57600080fd5b60008054604080517f9f2c9503000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301526024820186905291519190921692639f2c950392604480820193602093909283900390910190829087803b158015610b4657600080fd5b505af1158015610b5a573d6000803e3d6000fd5b505050506040513d6020811015610b7057600080fd5b5050600b54600010156105de57600054600160a060020a03166340c10f1983610b98846105f9565b6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610bea57600080fd5b505af1158015610bfe573d6000803e3d6000fd5b505050506040513d60208110156103b957600080fd00a165627a7a72305820da0f848d839c1d50ebc6e4f3f2f6a23857daac4ea5f2b023a6a1f17c677a76210029000000000000000000000000000000000000000000000000000000005c13b760000000000000000000000000000000000000000000000000000000005c6d5d6000000000000000000000000000000000000000000000000000000000000009c4000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000b319d7cf8eed2dbbaa64682dfc7d4bb304dc711300000000000000000000000000000000000000000000152d02c7e14af68000000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000dfc3e857c8ccea7657e0ed98ab92e048e38dee0f000000000000000000000000e554ee8f6fc36f6fddd40028d061bb8779437620",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005c13b760000000000000000000000000000000000000000000000000000000005c6d5d6000000000000000000000000000000000000000000000000000000000000009c4000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000b319d7cf8eed2dbbaa64682dfc7d4bb304dc711300000000000000000000000000000000000000000000152d02c7e14af68000000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000dfc3e857c8ccea7657e0ed98ab92e048e38dee0f000000000000000000000000e554ee8f6fc36f6fddd40028d061bb8779437620"
}