{
  "address": "0xd72f60b2e7649bbc5835d25e30ef917f04d9131c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "_AtlantisToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-12\n*/\n\n// ----------------------------------------------------------------------------\n\n//            _   _             _   _     \n//       /\\  | | | |           | | (_)    \n//      /  \\ | |_| | __ _ _ __ | |_ _ ___ \n//     / /\\ \\| __| |/ _` | '_ \\| __| / __|\n//    / ____ \\ |_| | (_| | | | | |_| \\__ \\\n//   /_/    \\_\\__|_|\\__,_|_| |_|\\__|_|___/\n//                                    \n//  Official website: http://AtlantisToken.io     \n\n// 'Atlantis' contract\n\n// Mineable ERC20 Token using Proof Of Work\n\n// Symbol      : ATA\n\n// Name        : Atlantis Token\n\n// Total supply: 200,000,000.00\n\n// Decimals    : 8\n\n//\n\n\n// ----------------------------------------------------------------------------\n\n\n\n// ----------------------------------------------------------------------------\n\n// Safe maths\n\n// ----------------------------------------------------------------------------\n\nlibrary SafeMath {\n\n    function add(uint a, uint b) internal pure returns (uint c) {\n\n        c = a + b;\n\n        require(c >= a);\n\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint c) {\n\n        require(b <= a);\n\n        c = a - b;\n\n    }\n\n    function mul(uint a, uint b) internal pure returns (uint c) {\n\n        c = a * b;\n\n        require(a == 0 || c / a == b);\n\n    }\n\n    function div(uint a, uint b) internal pure returns (uint c) {\n\n        require(b > 0);\n\n        c = a / b;\n\n    }\n\n}\n\n\n\nlibrary ExtendedMath {\n\n\n    //return the smaller of the two inputs (a or b)\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n\n        if(a > b) return b;\n\n        return a;\n\n    }\n}\n\n// ----------------------------------------------------------------------------\n\n// ERC Token Standard #20 Interface\n\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n\n// ----------------------------------------------------------------------------\n\ncontract ERC20Interface {\n\n    function totalSupply() public constant returns (uint);\n\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n\n    function transfer(address to, uint tokens) public returns (bool success);\n\n    function approve(address spender, uint tokens) public returns (bool success);\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\n}\n\n\n\n// ----------------------------------------------------------------------------\n\n// Contract function to receive approval and execute function in one call\n\n//\n\n// Borrowed from MiniMeToken\n\n// ----------------------------------------------------------------------------\n\ncontract ApproveAndCallFallBack {\n\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n\n}\n\n\n\n// ----------------------------------------------------------------------------\n\n// Owned contract\n\n// ----------------------------------------------------------------------------\n\ncontract Owned {\n\n    address public owner;\n\n    address public newOwner;\n\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n\n    function Owned() public {\n\n        owner = msg.sender;\n\n    }\n\n\n    modifier onlyOwner {\n\n        require(msg.sender == owner);\n\n        _;\n\n    }\n\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n\n        newOwner = _newOwner;\n\n    }\n\n    function acceptOwnership() public {\n\n        require(msg.sender == newOwner);\n\n        OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0);\n\n    }\n\n}\n\n\n\n// ----------------------------------------------------------------------------\n\n// ERC20 Token, with the addition of symbol, name and decimals and an\n\n// initial fixed supply\n\n// ----------------------------------------------------------------------------\n\ncontract _AtlantisToken is ERC20Interface, Owned {\n\n    using SafeMath for uint;\n    using ExtendedMath for uint;\n\n\n    string public symbol;\n\n    string public  name;\n\n    uint8 public decimals;\n\n    uint public _totalSupply;\n\n\n\n     uint public latestDifficultyPeriodStarted;\n\n\n\n    uint public epochCount;//number of 'blocks' mined\n\n\n    uint public _BLOCKS_PER_READJUSTMENT = 1024;\n\n\n    //a little number\n    uint public  _MINIMUM_TARGET = 2**16;\n\n\n      //a big number is easier ; just find a solution that is smaller\n    //uint public  _MAXIMUM_TARGET = 2**224;  bitcoin uses 224\n    uint public  _MAXIMUM_TARGET = 2**234;\n\n\n    uint public miningTarget;\n\n    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n\n\n\n    uint public rewardEra;\n    uint public maxSupplyForEra;\n\n\n    address public lastRewardTo;\n    uint public lastRewardAmount;\n    uint public lastRewardEthBlockNumber;\n\n    bool locked = false;\n\n    mapping(bytes32 => bytes32) solutionForChallenge;\n\n    uint public tokensMinted;\n\n    mapping(address => uint) balances;\n\n\n    mapping(address => mapping(address => uint)) allowed;\n\n\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n\n    // ------------------------------------------------------------------------\n\n    // Constructor\n\n    // ------------------------------------------------------------------------\n\n    function _AtlantisToken() public onlyOwner{\n\n\n\n        symbol = \"ATA\";\n\n        name = \"Atlantis Token\";\n\n        decimals = 8;\n\n        _totalSupply = 200000000 * 10**uint(decimals);\n\n        if(locked) revert();\n        locked = true;\n\n        tokensMinted = 0;\n\n        rewardEra = 0;\n        maxSupplyForEra = _totalSupply.div(2);\n\n        miningTarget = _MAXIMUM_TARGET;\n\n        latestDifficultyPeriodStarted = block.number;\n\n        _startNewMiningEpoch();\n\n\n        //The owner gets nothing! You must mine this ERC20 token\n        //balances[owner] = _totalSupply;\n        //Transfer(address(0), owner, _totalSupply);\n\n    }\n\n\n\n\n        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n\n\n            //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\n            bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n\n            //the challenge digest must match the expected\n            if (digest != challenge_digest) revert();\n\n            //the digest must be smaller than the target\n            if(uint256(digest) > miningTarget) revert();\n\n\n            //only allow one reward for each challenge\n             bytes32 solution = solutionForChallenge[challengeNumber];\n             solutionForChallenge[challengeNumber] = digest;\n             if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n\n\n            uint reward_amount = getMiningReward();\n\n            balances[msg.sender] = balances[msg.sender].add(reward_amount);\n\n            tokensMinted = tokensMinted.add(reward_amount);\n\n\n            //Cannot mint more tokens than there are\n            assert(tokensMinted <= maxSupplyForEra);\n\n            //set readonly diagnostics data\n            lastRewardTo = msg.sender;\n            lastRewardAmount = reward_amount;\n            lastRewardEthBlockNumber = block.number;\n\n\n             _startNewMiningEpoch();\n\n              Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n\n           return true;\n\n        }\n\n\n    //a new 'block' to be mined\n    function _startNewMiningEpoch() internal {\n\n      //if max supply for the era will be exceeded next reward round then enter the new era before that happens\n\n      //40 is the final reward era, almost all tokens minted\n      //once the final era is reached, more tokens will not be given out because the assert function\n      if( tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 79)\n      {\n        rewardEra = rewardEra + 1;\n      }\n\n      //set the next minted supply at which the era will change\n      // total supply is 20000000000000000  because of 8 decimal places\n      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra + 1));\n\n      epochCount = epochCount.add(1);\n\n      //every so often, readjust difficulty. Dont readjust when deploying\n      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\n      {\n        _reAdjustDifficulty();\n      }\n\n\n      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n      //do this last since this is a protection mechanism in the mint() function\n      challengeNumber = block.blockhash(block.number - 1);\n\n\n\n\n\n\n    }\n\n\n\n\n    //https://en.bitcoin.it/wiki/Difficulty#What_is_the_formula_for_difficulty.3F\n    //as of 2017 the bitcoin difficulty was up to 17 zeroes, it was only 8 in the early days\n\n    //readjust the target by 5 percent\n    function _reAdjustDifficulty() internal {\n\n\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n        //assume 360 ethereum blocks per hour\n\n        //we want miners to spend 10 minutes to mine each 'block', about 60 ethereum blocks = one atlantis epoch\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT; //256\n\n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60; //should be 60 times slower than ethereum\n\n        //if there were less eth blocks passed in time than expected\n        if( ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod )\n        {\n          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\n\n          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n          // If there were 5% more blocks mined than expected then this is 5.  If there were 100% more blocks mined than expected then this is 100.\n\n          //make it harder\n          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));   //by up to 50 %\n        }else{\n          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\n\n          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\n\n          //make it easier\n          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));   //by up to 50 %\n        }\n\n\n\n        latestDifficultyPeriodStarted = block.number;\n\n        if(miningTarget < _MINIMUM_TARGET) //very difficult\n        {\n          miningTarget = _MINIMUM_TARGET;\n        }\n\n        if(miningTarget > _MAXIMUM_TARGET) //very easy\n        {\n          miningTarget = _MAXIMUM_TARGET;\n        }\n    }\n\n\n    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n    function getChallengeNumber() public constant returns (bytes32) {\n        return challengeNumber;\n    }\n\n    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n     function getMiningDifficulty() public constant returns (uint) {\n        return _MAXIMUM_TARGET.div(miningTarget);\n    }\n\n    function getMiningTarget() public constant returns (uint) {\n       return miningTarget;\n   }\n\n\n\n    //200m coins total\n    //reward begins at 500 and is cut in half every reward era (as tokens are mined)\n    function getMiningReward() public constant returns (uint) {\n        //once we get half way thru the coins, only get 250 per block\n\n         //every reward era, the reward amount halves.\n\n         return (500 * 10**uint(decimals) ).div( 2**rewardEra ) ;\n\n    }\n\n    //help debug mining software\n    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n\n        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n\n        return digest;\n\n      }\n\n        //help debug mining software\n      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n\n          bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n\n          if(uint256(digest) > testTarget) revert();\n\n          return (digest == challenge_digest);\n\n        }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Total supply\n\n    // ------------------------------------------------------------------------\n\n    function totalSupply() public constant returns (uint) {\n\n        return _totalSupply  - balances[address(0)];\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Get the token balance for account `tokenOwner`\n\n    // ------------------------------------------------------------------------\n\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n\n        return balances[tokenOwner];\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Transfer the balance from token owner's account to `to` account\n\n    // - Owner's account must have sufficient balance to transfer\n\n    // - 0 value transfers are allowed\n\n    // ------------------------------------------------------------------------\n\n    function transfer(address to, uint tokens) public returns (bool success) {\n\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n\n        balances[to] = balances[to].add(tokens);\n\n        Transfer(msg.sender, to, tokens);\n\n        return true;\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n\n    // from the token owner's account\n\n    //\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n\n    // recommends that there are no checks for the approval double-spend attack\n\n    // as this should be implemented in user interfaces\n\n    // ------------------------------------------------------------------------\n\n    function approve(address spender, uint tokens) public returns (bool success) {\n\n        allowed[msg.sender][spender] = tokens;\n\n        Approval(msg.sender, spender, tokens);\n\n        return true;\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Transfer `tokens` from the `from` account to the `to` account\n\n    //\n\n    // The calling account must already have sufficient tokens approve(...)-d\n\n    // for spending from the `from` account and\n\n    // - From account must have sufficient balance to transfer\n\n    // - Spender must have sufficient allowance to transfer\n\n    // - 0 value transfers are allowed\n\n    // ------------------------------------------------------------------------\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n\n        balances[from] = balances[from].sub(tokens);\n\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n\n        balances[to] = balances[to].add(tokens);\n\n        Transfer(from, to, tokens);\n\n        return true;\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Returns the amount of tokens approved by the owner that can be\n\n    // transferred to the spender's account\n\n    // ------------------------------------------------------------------------\n\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n\n        return allowed[tokenOwner][spender];\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n\n    // from the token owner's account. The `spender` contract function\n\n    // `receiveApproval(...)` is then executed\n\n    // ------------------------------------------------------------------------\n\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n\n        allowed[msg.sender][spender] = tokens;\n\n        Approval(msg.sender, spender, tokens);\n\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n\n        return true;\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Don't accept ETH\n\n    // ------------------------------------------------------------------------\n\n    function () public payable {\n\n        revert();\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Owner can transfer out any accidentally sent ERC20 tokens\n\n    // ------------------------------------------------------------------------\n\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n\n    }\n\n}",
  "bytecode": "6060604052610400600855620100006009557d040000000000000000000000000000000000000000000000000000000000600a556012805460ff1916905534156200004957600080fd5b60008054600160a060020a03338116600160a060020a031990921682179283905591909116146200007957600080fd5b60408051908101604052600381527f415441000000000000000000000000000000000000000000000000000000000060208201526002908051620000c2929160200190620004fe565b5060408051908101604052600e81527f41746c616e74697320546f6b656e000000000000000000000000000000000000602082015260039080516200010c929160200190620004fe565b506004805460ff191660081790819055630bebc20060ff918216600a0a0260055560125416156200013c57600080fd5b6012805460ff1916600117905560006014819055600d556005546200017190600264010000000062000f9f6200019c82021704565b600e55600a54600b55436006556200019664010000000062000fd0620001bf82021704565b620005a0565b6000808211620001ab57600080fd5b8183811515620001b757fe5b049392505050565b600e54620001f6620001de64010000000062000a206200029e82021704565b6014549064010000000062000fc0620002d482021704565b118015620002065750604f600d54105b156200021657600d805460010190555b600d546005546200023b9160010160020a64010000000062000f9f6200019c82021704565b60055403600e556007546200026090600164010000000062000fc0620002d482021704565b6007819055600854908115156200027357fe5b06151562000293576200029364010000000062001082620002eb82021704565b600019430140600c55565b600d54600454600091620002ce9160ff16600a0a6101f4029060020a6401000000006200019c810262000f9f1704565b90505b90565b81810182811015620002e557600080fd5b92915050565b600654600854439190910390603c8102600080808084871015620003df576200033e8762000329876064640100000000620011bc620004a682021704565b9064010000000062000f9f6200019c82021704565b9350620003776103e8620003628660646401000000006200106d620004ce82021704565b90640100000000620011e1620004e482021704565b9250620003d6620003be84620003a96107d0600b546200019c6401000000000262000f9f179091906401000000009004565b90640100000000620011bc620004a682021704565b600b54906401000000006200106d620004ce82021704565b600b5562000471565b620003ff8562000329896064640100000000620011bc620004a682021704565b9150620004236103e8620003628460646401000000006200106d620004ce82021704565b90506200046d6200045582620003a96107d0600b546200019c6401000000000262000f9f179091906401000000009004565b600b549064010000000062000fc0620002d482021704565b600b555b43600655600954600b5410156200048957600954600b555b600a54600b5411156200049d57600a54600b555b50505050505050565b818102821580620004c25750818382811515620004bf57fe5b04145b1515620002e557600080fd5b600082821115620004de57600080fd5b50900390565b600081831115620004f7575080620002e5565b5090919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200054157805160ff191683800117855562000571565b8280016001018555821562000571579182015b828111156200057157825182559160200191906001019062000554565b506200057f92915062000583565b5090565b620002d191905b808211156200057f57600081556001016200058a565b61122580620005b06000396000f3006060604052600436106101a85763ffffffff60e060020a60003504166306fdde0381146101ad578063095ea7b314610237578063163aa00d1461026d57806317da485f146102925780631801fbe5146102a557806318160ddd146102be57806323b872dd146102d15780632d38bf7a146102f9578063313ce5671461030c57806332e99708146103355780633eaaf86b14610348578063490203a71461035b5780634ef376281461036e5780634fa972e1146103815780636de9f32b146103945780636fd396d6146103a757806370a08231146103d657806379ba5097146103f557806381269a561461040a578063829965cc1461042957806387a2a9d61461043c5780638a769d351461044f5780638ae0368b146104625780638da5cb5b1461047557806395d89b411461048857806397566aa01461049b578063a9059cbb146104b7578063b5ade81b146104d9578063bafedcaa146104ec578063cae9ca51146104ff578063cb9ae70714610564578063d4ee1d9014610577578063dc39d06d1461058a578063dc6e9cf9146105ac578063dd62ed3e146105bf578063f2fde38b146105e4575b600080fd5b34156101b857600080fd5b6101c0610603565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101fc5780820151838201526020016101e4565b50505050905090810190601f1680156102295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024257600080fd5b610259600160a060020a03600435166024356106a1565b604051901515815260200160405180910390f35b341561027857600080fd5b61028061070e565b60405190815260200160405180910390f35b341561029d57600080fd5b610280610714565b34156102b057600080fd5b610259600435602435610732565b34156102c957600080fd5b6102806108c0565b34156102dc57600080fd5b610259600160a060020a03600435811690602435166044356108f2565b341561030457600080fd5b610280610a05565b341561031757600080fd5b61031f610a0b565b60405160ff909116815260200160405180910390f35b341561034057600080fd5b610280610a14565b341561035357600080fd5b610280610a1a565b341561036657600080fd5b610280610a20565b341561037957600080fd5b610280610a40565b341561038c57600080fd5b610280610a46565b341561039f57600080fd5b610280610a4c565b34156103b257600080fd5b6103ba610a52565b604051600160a060020a03909116815260200160405180910390f35b34156103e157600080fd5b610280600160a060020a0360043516610a61565b341561040057600080fd5b610408610a7c565b005b341561041557600080fd5b610259600435602435604435606435610b0a565b341561043457600080fd5b610280610b62565b341561044757600080fd5b610280610b68565b341561045a57600080fd5b610280610b6e565b341561046d57600080fd5b610280610b74565b341561048057600080fd5b6103ba610b7a565b341561049357600080fd5b6101c0610b89565b34156104a657600080fd5b610280600435602435604435610bf4565b34156104c257600080fd5b610259600160a060020a0360043516602435610c3a565b34156104e457600080fd5b610280610cf9565b34156104f757600080fd5b610280610cff565b341561050a57600080fd5b61025960048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610d0595505050505050565b341561056f57600080fd5b610280610e6c565b341561058257600080fd5b6103ba610e72565b341561059557600080fd5b610259600160a060020a0360043516602435610e81565b34156105b757600080fd5b610280610f24565b34156105ca57600080fd5b610280600160a060020a0360043581169060243516610f2a565b34156105ef57600080fd5b610408600160a060020a0360043516610f55565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106995780601f1061066e57610100808354040283529160200191610699565b820191906000526020600020905b81548152906001019060200180831161067c57829003601f168201915b505050505081565b600160a060020a03338116600081815260166020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60115481565b600061072d600b54600a54610f9f90919063ffffffff16565b905090565b600080600080600c543387604051928352600160a060020a03919091166c010000000000000000000000000260208301526034820152605401604051908190039020925084831461078257600080fd5b600b5483111561079157600080fd5b600c546000908152601360205260409020805490849055915081156107b557600080fd5b6107bd610a20565b600160a060020a0333166000908152601560205260409020549091506107e9908263ffffffff610fc016565b600160a060020a033316600090815260156020526040902055601454610815908263ffffffff610fc016565b6014819055600e5490111561082657fe5b600f805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a031617905560108190554360115561085f610fd0565b33600160a060020a03167fcf6fbb9dcea7d07263ab4f5c3a92f53af33dffc421d9d121e1c74b307e68189d82600754600c5460405192835260208301919091526040808301919091526060909101905180910390a250600195945050505050565b6000805260156020527fa31547ce6245cdb9ecea19cf8c7eb9f5974025bb4075011409251ae855b30aed546005540390565b600160a060020a03831660009081526015602052604081205461091b908363ffffffff61106d16565b600160a060020a038086166000908152601560209081526040808320949094556016815283822033909316825291909152205461095e908363ffffffff61106d16565b600160a060020a03808616600090815260166020908152604080832033851684528252808320949094559186168152601590915220546109a4908363ffffffff610fc016565b600160a060020a03808516600081815260156020526040908190209390935591908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600d5481565b60045460ff1681565b600b5490565b60055481565b600d5460045460009161072d9160ff16600a0a6101f4029060020a610f9f565b600c5490565b600e5481565b60145481565b600f54600160a060020a031681565b600160a060020a031660009081526015602052604090205490565b60015433600160a060020a03908116911614610a9757600080fd5b600154600054600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600080833387604051928352600160a060020a03919091166c010000000000000000000000000260208301526034820152605401604051908190039020905082811115610b5657600080fd5b93909314949350505050565b60075481565b600a5481565b600b5481565b600c5481565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106995780601f1061066e57610100808354040283529160200191610699565b600080823386604051928352600160a060020a03919091166c01000000000000000000000000026020830152603482015260540160405190819003902095945050505050565b600160a060020a033316600090815260156020526040812054610c63908363ffffffff61106d16565b600160a060020a033381166000908152601560205260408082209390935590851681522054610c98908363ffffffff610fc016565b600160a060020a0380851660008181526015602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60085481565b60105481565b600160a060020a03338116600081815260166020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e00578082015183820152602001610de8565b50505050905090810190601f168015610e2d5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610e4e57600080fd5b6102c65a03f11515610e5f57600080fd5b5060019695505050505050565b60065481565b600154600160a060020a031681565b6000805433600160a060020a03908116911614610e9d57600080fd5b60008054600160a060020a038086169263a9059cbb929091169085906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610f0357600080fd5b6102c65a03f11515610f1457600080fd5b5050506040518051949350505050565b60095481565b600160a060020a03918216600090815260166020908152604080832093909416825291909152205490565b60005433600160a060020a03908116911614610f7057600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000808211610fad57600080fd5b8183811515610fb857fe5b049392505050565b8181018281101561070857600080fd5b600e54610fed610fde610a20565b6014549063ffffffff610fc016565b118015610ffc5750604f600d54105b1561100b57600d805460010190555b600d546005546110269160010160020a63ffffffff610f9f16565b60055403600e5560075461104190600163ffffffff610fc016565b60078190556008549081151561105357fe5b06151561106257611062611082565b600019430140600c55565b60008282111561107c57600080fd5b50900390565b600654600854439190910390603c8102600080808084871015611128576110c0876110b487606463ffffffff6111bc16565b9063ffffffff610f9f16565b93506110e56103e86110d986606463ffffffff61106d16565b9063ffffffff6111e116565b9250611120611111846111056107d0600b54610f9f90919063ffffffff16565b9063ffffffff6111bc16565b600b549063ffffffff61106d16565b600b55611189565b61113d856110b489606463ffffffff6111bc16565b91506111566103e86110d984606463ffffffff61106d16565b9050611185611176826111056107d0600b54610f9f90919063ffffffff16565b600b549063ffffffff610fc016565b600b555b43600655600954600b5410156111a057600954600b555b600a54600b5411156111b357600a54600b555b50505050505050565b8181028215806111d657508183828115156111d357fe5b04145b151561070857600080fd5b6000818311156111f2575080610708565b50909190505600a165627a7a72305820c90ee4471126a07f8df2feea82cc4068ff02f2d406ed0e836475aada8bf3192f0029"
}