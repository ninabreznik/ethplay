{
  "address": "0x9901ed1e649c4a77c7fff3dfd446ffe3464da747",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Hut34TS",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-01\n*/\n\n/*\nfile:   Hut34TS.sol\nver:    0.2.4_deploy\nauthor: Darryl Morris\ndate:   27-Oct-2017\nemail:  o0ragman0o AT gmail.com\n(c) Darryl Morris 2017\n\nA collated contract set for the receipt of funds and production and transfer\nof ERC20 tokens as specified by Hut34.\n\nLicense\n-------\nThis software is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nSee MIT Licence for further details.\n<https://opensource.org/licenses/MIT>.\n\nRelease Notes\n-------------\n* Added `event Aborted()`\n* correct `wholesaleLeft` magnitude bug\n* All tests passed\n\nDedications\n-------------\n* with love to Isabella and pea from your dad\n* xx to edie, robin, william and charlotte x\n*/\n\n\npragma solidity ^0.4.17;\n\n// Audited 27 October 2017 by Darryl Morris, Peter Godbolt\ncontract Hut34Config\n{\n    // ERC20 token name\n    string  public constant name            = \"Hut34 Entropy\";\n\n    // ERC20 trading symbol\n    string  public constant symbol          = \"ENT\";\n\n    // ERC20 decimal places\n    uint8   public constant decimals        = 18;\n\n    // Total supply (* in unit ENT *)\n    uint    public constant TOTAL_TOKENS    = 100000000;\n\n    // Contract owner at time of deployment.\n    address public constant OWNER           = 0xdA3780Cff2aE3a59ae16eC1734DEec77a7fd8db2;\n\n    // + new Date(\"00:00 2 November 2017 utc\")/1000\n    uint    public constant START_DATE      = 1509580800;\n\n    // A Hut34 address to own tokens\n    address public constant HUT34_RETAIN    = 0x3135F4acA3C1Ad4758981500f8dB20EbDc5A1caB;\n\n    // A Hut34 address to accept raised funds\n    address public constant HUT34_WALLET    = 0xA70d04dC4a64960c40CD2ED2CDE36D76CA4EDFaB;\n\n    // Percentage of tokens to be vested over 2 years. 20%\n    uint    public constant VESTED_PERCENT  = 20;\n\n    // Vesting period\n    uint    public constant VESTING_PERIOD  = 26 weeks;\n\n    // Minimum cap over which the funding is considered successful\n    uint    public constant MIN_CAP         = 3000 * 1 ether;\n\n    // An ether threshold over which a funder must KYC before tokens can be\n    // transferred (unit of ether);\n    uint    public constant KYC_THRESHOLD   = 150 * 1 ether;\n\n    // A minimum amount of ether funding before the concierge rate is applied\n    // to tokens\n    uint    public constant WHOLESALE_THRESHOLD  = 150 * 1 ether;\n\n    // Number of tokens up for wholesale purchasers (* in unit ENT *)\n    uint    public constant WHOLESALE_TOKENS = 12500000;\n\n    // Tokens sold to prefunders (* in unit ENT *)\n    uint    public constant PRESOLD_TOKENS  = 2246500;\n\n    // Presale ether is estimateed from fiat raised prior to TS at the ETH/AUD\n    // rate at the time of contract deployment\n    uint    public constant PRESALE_ETH_RAISE = 2807 * 1 ether;\n\n    // Address holding presold tokens to be distributed after TS\n    address public constant PRESOLD_ADDRESS = 0x6BF708eF2C1FDce3603c04CE9547AA6E134093b6;\n\n    // wholesale rate for purchases over WHOLESALE_THRESHOLD ether\n    uint    public constant RATE_WHOLESALE  = 1000;\n\n    // Time dependant retail rates\n    // First Day\n    uint    public constant RATE_DAY_0      = 750;\n\n    // First Week (The six days after first day)\n    uint    public constant RATE_DAY_1      = 652;\n\n    // Second Week\n    uint    public constant RATE_DAY_7      = 588;\n\n    // Third Week\n    uint    public constant RATE_DAY_14     = 545;\n\n    // Fourth Week\n    uint    public constant RATE_DAY_21     = 517;\n\n    // Fifth Week\n    uint    public constant RATE_DAY_28     = 500;\n}\n\n\nlibrary SafeMath\n{\n    // a add to b\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        assert(c >= a);\n    }\n\n    // a subtract b\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        c = a - b;\n        assert(c <= a);\n    }\n\n    // a multiplied by b\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        assert(a == 0 || c / a == b);\n    }\n\n    // a divided by b\n    function div(uint a, uint b) internal pure returns (uint c) {\n        assert(b != 0);\n        c = a / b;\n    }\n}\n\n\ncontract ReentryProtected\n{\n    // The reentry protection state mutex.\n    bool __reMutex;\n\n    // Sets and clears mutex in order to block function reentry\n    modifier preventReentry() {\n        require(!__reMutex);\n        __reMutex = true;\n        _;\n        delete __reMutex;\n    }\n\n    // Blocks function entry if mutex is set\n    modifier noReentry() {\n        require(!__reMutex);\n        _;\n    }\n}\n\n\ncontract ERC20Token\n{\n    using SafeMath for uint;\n\n/* Constants */\n\n    // none\n\n/* State variable */\n\n    /// @return The Total supply of tokens\n    uint public totalSupply;\n\n    /// @return Tokens owned by an address\n    mapping (address => uint) balances;\n\n    /// @return Tokens spendable by a thirdparty\n    mapping (address => mapping (address => uint)) allowed;\n\n/* Events */\n\n    // Triggered when tokens are transferred.\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _amount);\n\n    // Triggered whenever approve(address _spender, uint256 _amount) is called.\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount);\n\n/* Modifiers */\n\n    // none\n\n/* Functions */\n\n    // Using an explicit getter allows for function overloading\n    function balanceOf(address _addr)\n        public\n        view\n        returns (uint)\n    {\n        return balances[_addr];\n    }\n\n    // Using an explicit getter allows for function overloading\n    function allowance(address _owner, address _spender)\n        public\n        constant\n        returns (uint)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    // Send _value amount of tokens to address _to\n    function transfer(address _to, uint256 _amount)\n        public\n        returns (bool)\n    {\n        return xfer(msg.sender, _to, _amount);\n    }\n\n    // Send _value amount of tokens from address _from to address _to\n    function transferFrom(address _from, address _to, uint256 _amount)\n        public\n        returns (bool)\n    {\n        require(_amount <= allowed[_from][msg.sender]);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        return xfer(_from, _to, _amount);\n    }\n\n    // Process a transfer internally.\n    function xfer(address _from, address _to, uint _amount)\n        internal\n        returns (bool)\n    {\n        require(_amount <= balances[_from]);\n\n        Transfer(_from, _to, _amount);\n\n        // avoid wasting gas on 0 token transfers\n        if(_amount == 0) return true;\n\n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to]   = balances[_to].add(_amount);\n\n        return true;\n    }\n\n    // Approves a third-party spender\n    function approve(address _spender, uint256 _amount)\n        public\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n}\n\n\n/*-----------------------------------------------------------------------------\\\n\n## Conditional Entry Table\n\nFunctions must throw on F conditions\n\nRenetry prevention is on all public mutating functions\nReentry mutex set in finalizeTS(), externalXfer(), refund()\n\n|function                |<startDate |<endDate  |fundFailed  |fundRaised|tsSucceeded\n|------------------------|:---------:|:--------:|:----------:|:--------:|:---------:|\n|()                      |F          |T         |F           |T         |F          |\n|abort()                 |T          |T         |T           |T         |F          |\n|proxyPurchase()         |F          |T         |F           |T         |F          |\n|finalizeTS()           |F          |F         |F           |T         |T          |\n|refund()                |F          |F         |T           |F         |F          |\n|refundFor()             |F          |F         |T           |F         |F          |\n|transfer()              |F          |F         |F           |F         |T          |\n|transferFrom()          |F          |F         |F           |F         |T          |\n|transferToMany()        |F          |F         |F           |F         |T          |\n|approve()               |F          |F         |F           |F         |T          |\n|clearKyc()              |T          |T         |T           |T         |T          |\n|releaseVested()         |F          |F         |F           |F         |now>release|\n|changeOwner()           |T          |T         |T           |T         |T          |\n|acceptOwnership()       |T          |T         |T           |T         |T          |\n|transferExternalTokens()|T          |T         |T           |T         |T          |\n|destroy()               |F          |F         |!__abortFuse|F         |F          |\n\n\\*----------------------------------------------------------------------------*/\n\ncontract Hut34TSAbstract\n{\n    /// @dev Logged upon receiving a deposit\n    /// @param _from The address from which value has been recieved\n    /// @param _value The value of ether received\n    event Deposit(address indexed _from, uint _value);\n\n    /// @dev Logged upon a withdrawal\n    /// @param _from the address of the withdrawer\n    /// @param _to Address to which value was sent\n    /// @param _value The value in ether which was withdrawn\n    event Withdrawal(address indexed _from, address indexed _to, uint _value);\n\n    /// @dev Logged when new owner accepts ownership\n    /// @param _from the old owner address\n    /// @param _to the new owner address\n    event ChangedOwner(address indexed _from, address indexed _to);\n\n    /// @dev Logged when owner initiates a change of ownership\n    /// @param _to the new owner address\n    event ChangeOwnerTo(address indexed _to);\n\n    /// @dev Logged when a funder exceeds the KYC limit\n    /// @param _addr Address to set or clear KYC flag\n    /// @param _kyc A boolean flag\n    event Kyc(address indexed _addr, bool _kyc);\n\n    /// @dev Logged when vested tokens are released back to HUT32_WALLET\n    /// @param _releaseDate The official release date (even if released at\n    /// later date)\n    event VestingReleased(uint _releaseDate);\n\n    /// @dev Logged if the contract is aborted\n    event Aborted();\n\n//\n// Constants\n//\n\n    /// @dev The Hut34 vesting 'psudo-address' for transferring and releasing\n    /// vested tokens to the Hut34 Wallet. The address is UTF8 encoding of the\n    /// string and can only be accessed by the 'releaseVested()' function.\n    /// @return `0x48757433342056657374696e6700000000000000`\n    address public constant HUT34_VEST_ADDR = address(bytes20(\"Hut34 Vesting\"));\n\n//\n// State Variables\n//\n\n    /// @dev This fuse blows upon calling abort() which forces a fail state\n    /// @return the abort state. true == not aborted\n    bool public __abortFuse = true;\n\n    /// @dev Sets to true after the fund is swept to the fund wallet, allows\n    /// token transfers and prevents abort()\n    /// @return final success state of TS\n    bool public tsSucceeded;\n\n    /// @dev An address permissioned to enact owner restricted functions\n    /// @return owner\n    address public owner;\n\n    /// @dev An address permissioned to take ownership of the contract\n    /// @return new owner address\n    address public newOwner;\n\n    /// @dev A tally of total ether raised during the funding period\n    /// @return Total ether raised during funding\n    uint public etherRaised;\n\n    /// @return Wholesale tokens available for sale\n    uint public wholesaleLeft;\n\n    /// @return Total ether refunded. Used to permision call to `destroy()`\n    uint public refunded;\n\n    /// @returns Date of next vesting release\n    uint public nextReleaseDate;\n\n    /// @return Ether paid by an address\n    mapping (address => uint) public etherContributed;\n\n    /// @returns KYC flag for an address\n    mapping (address => bool) public mustKyc;\n\n//\n// Modifiers\n//\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n//\n// Function Abstracts\n//\n\n    /// @return `true` if MIN_FUNDS were raised\n    function fundRaised() public view returns (bool);\n\n    /// @return `true` if MIN_FUNDS were not raised before END_DATE or contract\n    /// has been aborted\n    function fundFailed() public view returns (bool);\n\n    /// @return The current retail rate for token purchase\n    function currentRate() public view returns (uint);\n\n    /// @param _wei A value of ether in units of wei\n    /// @return allTokens_ returnable tokens for the funding amount\n    /// @return wholesaleToken_ Number of tokens purchased at wholesale rate\n    function ethToTokens(uint _wei)\n        public view returns (uint allTokens_, uint wholesaleTokens_);\n\n    /// @notice Processes a token purchase for `_addr`\n    /// @param _addr An address to purchase tokens\n    /// @return Boolean success value\n    /// @dev Requires <150,000 gas\n    function proxyPurchase(address _addr) public payable returns (bool);\n\n    /// @notice Finalize the TS and transfer funds\n    /// @return Boolean success value\n    function finalizeTS() public returns (bool);\n\n    /// @notice Clear the KYC flags for an array of addresses to allow tokens\n    /// transfers\n    function clearKyc(address[] _addrs) public returns (bool);\n\n    /// @notice Make bulk transfer of tokens to many addresses\n    /// @param _addrs An array of recipient addresses\n    /// @param _amounts An array of amounts to transfer to respective addresses\n    /// @return Boolean success value\n    function transferToMany(address[] _addrs, uint[] _amounts)\n        public returns (bool);\n\n    /// @notice Release vested tokens after a maturity date\n    /// @return Boolean success value\n    function releaseVested() public returns (bool);\n\n    /// @notice Claim refund on failed TS\n    /// @return Boolean success value\n    function refund() public returns (bool);\n\n    /// @notice Push refund for `_addr` from failed TS\n    /// @param _addrs An array of address to refund\n    /// @return Boolean success value\n    function refundFor(address[] _addrs) public returns (bool);\n\n    /// @notice Abort the token sale prior to finalizeTS()\n    function abort() public returns (bool);\n\n    /// @notice Salvage `_amount` tokens at `_kaddr` and send them to `_to`\n    /// @param _kAddr An ERC20 contract address\n    /// @param _to and address to send tokens\n    /// @param _amount The number of tokens to transfer\n    /// @return Boolean success value\n    function transferExternalToken(address _kAddr, address _to, uint _amount)\n        public returns (bool);\n}\n\n\n/*-----------------------------------------------------------------------------\\\n\n Hut34TS implimentation\n\n\\*----------------------------------------------------------------------------*/\n\ncontract Hut34TS is\n    ReentryProtected,\n    ERC20Token,\n    Hut34TSAbstract,\n    Hut34Config\n{\n    using SafeMath for uint;\n\n//\n// Constants\n//\n\n    // Token fixed point for decimal places\n    uint constant TOKEN = uint(10)**decimals;\n\n    // Calculate vested tokens\n    uint public constant VESTED_TOKENS =\n            TOTAL_TOKENS * TOKEN * VESTED_PERCENT / 100;\n\n    // Hut34 retains 50% of tokens (70% - 20% vested tokens)\n    uint public constant RETAINED_TOKENS = TOKEN * TOTAL_TOKENS / 2;\n\n    // Calculate end date\n    uint public constant END_DATE = START_DATE + 35 days;\n\n    // Divides `etherRaised` to calculate commision\n    // etherRaised/6.66... == etherRaised * 1.5% / 100\n    uint public constant COMMISSION_DIV = 67;\n\n    // Developer commission wallet\n    address public constant COMMISSION_WALLET =\n        0x0065D506E475B5DBD76480bAFa57fe7C41c783af;\n\n//\n// Functions\n//\n\n    function Hut34TS()\n        public\n    {\n        // Run sanity checks\n        require(TOTAL_TOKENS != 0);\n        require(OWNER != 0x0);\n        require(HUT34_RETAIN != 0x0);\n        require(HUT34_WALLET != 0x0);\n        require(PRESOLD_TOKENS <= WHOLESALE_TOKENS);\n        require(PRESOLD_TOKENS == 0 || PRESOLD_ADDRESS != 0x0);\n        require(MIN_CAP != 0);\n        require(START_DATE >= now);\n        require(bytes(name).length != 0);\n        require(bytes(symbol).length != 0);\n        require(KYC_THRESHOLD != 0);\n        require(RATE_DAY_0 >= RATE_DAY_1);\n        require(RATE_DAY_1 >= RATE_DAY_7);\n        require(RATE_DAY_7 >= RATE_DAY_14);\n        require(RATE_DAY_14 >= RATE_DAY_21);\n        require(RATE_DAY_21 >= RATE_DAY_28);\n\n        owner = OWNER;\n        totalSupply = TOTAL_TOKENS.mul(TOKEN);\n        wholesaleLeft = WHOLESALE_TOKENS.mul(TOKEN);\n        uint presold = PRESOLD_TOKENS.mul(TOKEN);\n        wholesaleLeft = wholesaleLeft.sub(presold);\n\n        // Presale raise is appoximate given it was conducted in Fiat.\n        etherRaised = PRESALE_ETH_RAISE;\n\n        // Mint the total supply into Hut34 token holding address\n        balances[HUT34_RETAIN] = totalSupply;\n        Transfer(0x0, HUT34_RETAIN, totalSupply);\n\n        // Transfer vested tokens from holding wallet to vesting pseudo-address\n        balances[HUT34_RETAIN] = balances[HUT34_RETAIN].sub(VESTED_TOKENS);\n        balances[HUT34_VEST_ADDR] = balances[HUT34_VEST_ADDR].add(VESTED_TOKENS);\n        Transfer(HUT34_RETAIN, HUT34_VEST_ADDR, VESTED_TOKENS);\n\n        // Transfer presold tokens to holding address;\n        balances[HUT34_RETAIN] = balances[HUT34_RETAIN].sub(presold);\n        balances[PRESOLD_ADDRESS] = balances[PRESOLD_ADDRESS].add(presold);\n        Transfer(HUT34_RETAIN, PRESOLD_ADDRESS, presold);\n    }\n\n    // Default function. Accepts payments during funding period\n    function ()\n        public\n        payable\n    {\n        // Pass through to purchasing function. Will throw on failed or\n        // successful TS\n        proxyPurchase(msg.sender);\n    }\n\n//\n// Getters\n//\n\n    // TS fails if aborted or minimum funds are not raised by the end date\n    function fundFailed() public view returns (bool)\n    {\n        return !__abortFuse\n            || (now > END_DATE && etherRaised < MIN_CAP);\n    }\n\n    // Funding succeeds if not aborted, minimum funds are raised before end date\n    function fundRaised() public view returns (bool)\n    {\n        return !fundFailed()\n            && etherRaised >= MIN_CAP\n            && now > START_DATE;\n    }\n\n    // Returns wholesale value in wei\n    function wholeSaleValueLeft() public view returns (uint)\n    {\n        return wholesaleLeft / RATE_WHOLESALE;\n    }\n\n    function currentRate()\n        public\n        view\n        returns (uint)\n    {\n        return\n            fundFailed() ? 0 :\n            tsSucceeded ? 0 :\n            now < START_DATE ? 0 :\n            now < START_DATE + 1 days ? RATE_DAY_0 :\n            now < START_DATE + 7 days ? RATE_DAY_1 :\n            now < START_DATE + 14 days ? RATE_DAY_7 :\n            now < START_DATE + 21 days ? RATE_DAY_14 :\n            now < START_DATE + 28 days ? RATE_DAY_21 :\n            now < END_DATE ? RATE_DAY_28 :\n            0;\n    }\n\n    // Calculates the sale and wholesale portion of tokens for a given value\n    // of wei at the time of calling.\n    function ethToTokens(uint _wei)\n        public\n        view\n        returns (uint allTokens_, uint wholesaleTokens_)\n    {\n        // Get wholesale portion of ether and tokens\n        uint wsValueLeft = wholeSaleValueLeft();\n        uint wholesaleSpend =\n                fundFailed() ? 0 :\n                tsSucceeded ? 0 :\n                now < START_DATE ? 0 :\n                now > END_DATE ? 0 :\n                // No wholesale purchse\n                _wei < WHOLESALE_THRESHOLD ? 0 :\n                // Total wholesale purchase\n                _wei < wsValueLeft ?  _wei :\n                // over funded for remaining wholesale tokens\n                wsValueLeft;\n\n        wholesaleTokens_ = wholesaleSpend\n                .mul(RATE_WHOLESALE)\n                .mul(TOKEN)\n                .div(1 ether);\n\n        // Remaining wei used to purchase retail tokens\n        _wei = _wei.sub(wholesaleSpend);\n\n        // Get retail rate\n        uint saleRate = currentRate();\n\n        allTokens_ = _wei\n                .mul(saleRate)\n                .mul(TOKEN)\n                .div(1 ether)\n                .add(wholesaleTokens_);\n    }\n\n//\n// TS functions\n//\n\n    // The fundraising can be aborted any time before `finaliseTS()` is called.\n    // This will force a fail state and allow refunds to be collected.\n    // The owner can abort or anyone else if a successful fund has not been\n    // finalised before 7 days after the end date.\n    function abort()\n        public\n        noReentry\n        returns (bool)\n    {\n        require(!tsSucceeded);\n        require(msg.sender == owner || now > END_DATE  + 14 days);\n        delete __abortFuse;\n        Aborted();\n        return true;\n    }\n\n    // General addresses can purchase tokens during funding\n    function proxyPurchase(address _addr)\n        public\n        payable\n        noReentry\n        returns (bool)\n    {\n        require(!fundFailed());\n        require(!tsSucceeded);\n        require(now > START_DATE);\n        require(now <= END_DATE);\n        require(msg.value > 0);\n\n        // Log ether deposit\n        Deposit (_addr, msg.value);\n\n        // Get ether to token conversion\n        uint tokens;\n        // Portion of tokens sold at wholesale rate\n        uint wholesaleTokens;\n\n        (tokens, wholesaleTokens) = ethToTokens(msg.value);\n\n        // Block any failed token creation\n        require(tokens > 0);\n\n        // Prevent over subscribing\n        require(balances[HUT34_RETAIN] - tokens >= RETAINED_TOKENS);\n\n        // Adjust wholesale tokens left for sale\n        if (wholesaleTokens != 0) {\n            wholesaleLeft = wholesaleLeft.sub(wholesaleTokens);\n        }\n\n        // transfer tokens from fund wallet\n        balances[HUT34_RETAIN] = balances[HUT34_RETAIN].sub(tokens);\n        balances[_addr] = balances[_addr].add(tokens);\n        Transfer(HUT34_RETAIN, _addr, tokens);\n\n        // Update funds raised\n        etherRaised = etherRaised.add(msg.value);\n\n        // Update holder payments\n        etherContributed[_addr] = etherContributed[_addr].add(msg.value);\n\n        // Check KYC requirement\n        if(etherContributed[_addr] >= KYC_THRESHOLD && !mustKyc[_addr]) {\n            mustKyc[_addr] = true;\n            Kyc(_addr, true);\n        }\n\n        return true;\n    }\n\n    // Owner can sweep a successful funding to the fundWallet.\n    // Can be called repeatedly to recover errant ether which may have been\n    // `selfdestructed` to the contract\n    // Contract can be aborted up until this returns `true`\n    function finalizeTS()\n        public\n        onlyOwner\n        preventReentry()\n        returns (bool)\n    {\n        // Must have reached minimum cap\n        require(fundRaised());\n\n        // Set first vesting date (only once as this function can be called again)\n        if(!tsSucceeded) {\n            nextReleaseDate = now + VESTING_PERIOD;\n        }\n\n        // Set success flag;\n        tsSucceeded = true;\n\n        // Transfer % Developer commission\n        uint devCommission = calcCommission();\n        Withdrawal(this, COMMISSION_WALLET, devCommission);\n        COMMISSION_WALLET.transfer(devCommission);\n\n        // Remaining % to the fund wallet\n        Withdrawal(this, HUT34_WALLET, this.balance);\n        HUT34_WALLET.transfer(this.balance);\n        return true;\n    }\n\n    function clearKyc(address[] _addrs)\n        public\n        noReentry\n        onlyOwner\n        returns (bool)\n    {\n        uint len = _addrs.length;\n        for(uint i; i < len; i++) {\n            delete mustKyc[_addrs[i]];\n            Kyc(_addrs[i], false);\n        }\n        return true;\n    }\n\n    // Releases vested tokens back to Hut34 wallet\n    function releaseVested()\n        public\n        returns (bool)\n    {\n        require(now > nextReleaseDate);\n        VestingReleased(nextReleaseDate);\n        nextReleaseDate = nextReleaseDate.add(VESTING_PERIOD);\n        return xfer(HUT34_VEST_ADDR, HUT34_RETAIN, VESTED_TOKENS / 4);\n    }\n\n    // Direct refund to caller\n    function refund()\n        public\n        returns (bool)\n    {\n        address[] memory addrs = new address[](1);\n        addrs[0] = msg.sender;\n        return refundFor(addrs);\n    }\n\n    // Bulk refunds can be pushed from a failed TS\n    function refundFor(address[] _addrs)\n        public\n        preventReentry()\n        returns (bool)\n    {\n        require(fundFailed());\n        uint i;\n        uint len = _addrs.length;\n        uint value;\n        uint tokens;\n        address addr;\n\n        for (i; i < len; i++) {\n            addr = _addrs[i];\n            value = etherContributed[addr];\n            tokens = balances[addr];\n            if (tokens > 0) {\n                // Return tokens\n                // transfer tokens from fund wallet\n                balances[HUT34_RETAIN] = balances[HUT34_RETAIN].add(tokens);\n                delete balances[addr];\n                Transfer(addr, HUT34_RETAIN, tokens);\n            }\n\n            if (value > 0) {\n                // Refund ether contribution\n                delete etherContributed[addr];\n                delete mustKyc[addr];\n                refunded = refunded.add(value);\n                Withdrawal(this, addr, value);\n                addr.transfer(value);\n            }\n        }\n        return true;\n    }\n\n//\n// ERC20 additional and overloaded functions\n//\n\n    // Allows a sender to transfer tokens to an array of recipients\n    function transferToMany(address[] _addrs, uint[] _amounts)\n        public\n        noReentry\n        returns (bool)\n    {\n        require(_addrs.length == _amounts.length);\n        uint len = _addrs.length;\n        for(uint i = 0; i < len; i++) {\n            xfer(msg.sender, _addrs[i], _amounts[i]);\n        }\n        return true;\n    }\n\n    // Overload to check TS success and KYC flags.\n    function xfer(address _from, address _to, uint _amount)\n        internal\n        noReentry\n        returns (bool)\n    {\n        require(tsSucceeded);\n        require(!mustKyc[_from]);\n        super.xfer(_from, _to, _amount);\n        return true;\n    }\n\n    // Overload to require TS success\n    function approve(address _spender, uint _amount)\n        public\n        noReentry\n        returns (bool)\n    {\n        // TS must be successful\n        require(tsSucceeded);\n        super.approve(_spender, _amount);\n        return true;\n    }\n\n//\n// Contract management functions\n//\n\n    // Initiate a change of owner to `_owner`\n    function changeOwner(address _owner)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        ChangeOwnerTo(_owner);\n        newOwner = _owner;\n        return true;\n    }\n\n    // Finalise change of ownership to newOwner\n    function acceptOwnership()\n        public\n        returns (bool)\n    {\n        require(msg.sender == newOwner);\n        ChangedOwner(owner, msg.sender);\n        owner = newOwner;\n        delete newOwner;\n        return true;\n    }\n\n    // This will selfdestruct the contract on the condittion all have been\n    // processed.\n    function destroy()\n        public\n        noReentry\n        onlyOwner\n    {\n        require(!__abortFuse);\n        require(refunded == (etherRaised - PRESALE_ETH_RAISE));\n        // Log burned tokens for complete ledger accounting on archival nodes\n        Transfer(HUT34_RETAIN, 0x0, balances[HUT34_RETAIN]);\n        Transfer(HUT34_VEST_ADDR, 0x0, VESTED_TOKENS);\n        Transfer(PRESOLD_ADDRESS, 0x0, PRESOLD_TOKENS);\n        // Garbage collect mapped state\n        delete balances[HUT34_RETAIN];\n        delete balances[PRESOLD_ADDRESS];\n        selfdestruct(owner);\n    }\n\n    // Owner can salvage ERC20 tokens that may have been sent to the account\n    function transferExternalToken(address _kAddr, address _to, uint _amount)\n        public\n        onlyOwner\n        preventReentry\n        returns (bool)\n    {\n        require(ERC20Token(_kAddr).transfer(_to, _amount));\n        return true;\n    }\n\n    // Calculate commission on prefunded and raised ether.\n    function calcCommission()\n        internal\n        view\n        returns(uint)\n    {\n        uint commission = (this.balance + PRESALE_ETH_RAISE) / COMMISSION_DIV;\n        // Edge case that prefund causes commission to be greater than balance\n        return commission <= this.balance ? commission : this.balance;\n    }\n}",
  "bytecode": "60606040526001600460006101000a81548160ff02191690831515021790555034156200002b57600080fd5b6000806305f5e100141515156200004157600080fd5b600073da3780cff2ae3a59ae16ec1734deec77a7fd8db273ffffffffffffffffffffffffffffffffffffffff16141515156200007c57600080fd5b6000733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff1614151515620000b757600080fd5b600073a70d04dc4a64960c40cd2ed2cde36d76ca4edfab73ffffffffffffffffffffffffffffffffffffffff1614151515620000f257600080fd5b62bebc2062224764111515156200010857600080fd5b60006222476414806200014657506000736bf708ef2c1fdce3603c04ce9547aa6e134093b673ffffffffffffffffffffffffffffffffffffffff1614155b15156200015257600080fd5b600068a2a15d09519be00000141515156200016c57600080fd5b426359fa6000101515156200018057600080fd5b60006040805190810160405280600d81526020017f487574333420456e74726f7079000000000000000000000000000000000000008152505114151515620001c757600080fd5b60006040805190810160405280600381526020017f454e54000000000000000000000000000000000000000000000000000000000081525051141515156200020e57600080fd5b6000680821ab0d4414980000141515156200022857600080fd5b61028c6102ee101515156200023c57600080fd5b61024c61028c101515156200025057600080fd5b61022161024c101515156200026457600080fd5b610205610221101515156200027857600080fd5b6101f4610205101515156200028c57600080fd5b73da3780cff2ae3a59ae16ec1734deec77a7fd8db2600460026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200030f601260ff16600a0a6305f5e100620009726401000000000262003500179091906401000000009004565b60018190555062000342601260ff16600a0a62bebc20620009726401000000000262003500179091906401000000009004565b60078190555062000375601260ff16600a0a62224764620009726401000000000262003500179091906401000000009004565b90506200039c81600754620009a364010000000002620032bc179091906401000000009004565b60078190555068982af34be0697c000060068190555060015460026000733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6001546040518082815260200191505060405180910390a36200050560646014601260ff16600a0a6305f5e10002028115156200049357fe5b0460026000733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620009a364010000000002620032bc179091906401000000009004565b60026000733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200060b60646014601260ff16600a0a6305f5e10002028115156200057d57fe5b04600260007f48757433342056657374696e67000000000000000000000000000000000000006c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620009bd64010000000002620032d5179091906401000000009004565b600260007f48757433342056657374696e67000000000000000000000000000000000000006c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f48757433342056657374696e67000000000000000000000000000000000000006c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff16733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60646014601260ff16600a0a6305f5e10002028115156200072e57fe5b046040518082815260200191505060405180910390a3620007ba8160026000733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620009a364010000000002620032bc179091906401000000009004565b60026000733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620008878160026000736bf708ef2c1fdce3603c04ce9547aa6e134093b673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620009bd64010000000002620032d5179091906401000000009004565b60026000736bf708ef2c1fdce3603c04ce9547aa6e134093b673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550736bf708ef2c1fdce3603c04ce9547aa6e134093b673ffffffffffffffffffffffffffffffffffffffff16733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350620009d7565b6000818302905060008314806200099457508183828115156200099157fe5b04145b15156200099d57fe5b92915050565b60008183039050828111151515620009b757fe5b92915050565b60008183019050828110151515620009d157fe5b92915050565b61378d80620009e76000396000f300606060405236156102e9576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630197d972146102f557806306fdde031461031e5780630739cd26146103ac578063095ea7b3146103d95780630a91cad0146104335780630b7abf771461045c5780630d61a4ff146104855780630ddc4a94146104da578063117803e31461050357806312f5395014610558578063168c81201461058157806317c73ff0146105aa57806318160ddd146105ff5780631f800e8e1461062857806323b872dd14610655578063289cf1e2146106ce5780632d133eee146106f75780632fbd243214610720578063313ce5671461079957806334e41bbf146107c857806335a063b4146107f157806336df05bc1461081e578063372c6533146108475780634a5dddd214610870578063545599ff146108b6578063590e1ae3146108df5780636a745ce91461090c5780636e62de19146109355780636eabcd69146109625780636f95dd0b1461098f57806370a08231146109b857806379ba509714610a055780637c33ebfd14610a325780637e36edce14610ae4578063801db9cc14610b0d5780638121ddd714610b3657806383197ef014610b5f578063838f516514610b745780638717866814610be6578063874fe37014610c0f57806388968bc314610c3c5780638da5cb5b14610cae578063913dd84614610d0357806395d89b4114610d58578063979d6dc714610de6578063a4c8932214610e3b578063a5d68bfd14610e79578063a6f9dae114610ea2578063a82776dd14610ef3578063a9059cbb14610f40578063ba99d1a614610f9a578063bf6888c814610fc3578063c164091314610fec578063c71c0b4014611015578063cd72ab6914611042578063d4ee1d901461106b578063d5e9abfd146110c0578063d735fa2514611111578063dd62ed3e1461113a578063df4e79fa146111a6578063e7a95a7f146111cf578063f9f8bdb7146111f8578063ff41f5cc14611221575b6102f233611276565b50005b341561030057600080fd5b6103086117e9565b6040518082815260200191505060405180910390f35b341561032957600080fd5b6103316117f0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610371578082015181840152602081019050610356565b50505050905090810190601f16801561039e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103b757600080fd5b6103bf611829565b604051808215151515815260200191505060405180910390f35b34156103e457600080fd5b610419600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061183c565b604051808215151515815260200191505060405180910390f35b341561043e57600080fd5b610446611889565b6040518082815260200191505060405180910390f35b341561046757600080fd5b61046f61188f565b6040518082815260200191505060405180910390f35b341561049057600080fd5b610498611897565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104e557600080fd5b6104ed6118cb565b6040518082815260200191505060405180910390f35b341561050e57600080fd5b6105166118d2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561056357600080fd5b61056b6118ea565b6040518082815260200191505060405180910390f35b341561058c57600080fd5b6105946118f0565b6040518082815260200191505060405180910390f35b34156105b557600080fd5b6105bd6118f5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561060a57600080fd5b61061261190c565b6040518082815260200191505060405180910390f35b341561063357600080fd5b61063b611912565b604051808215151515815260200191505060405180910390f35b341561066057600080fd5b6106b4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506119f7565b604051808215151515815260200191505060405180910390f35b34156106d957600080fd5b6106e1611ba7565b6040518082815260200191505060405180910390f35b341561070257600080fd5b61070a611bae565b6040518082815260200191505060405180910390f35b341561072b57600080fd5b61077f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611bbb565b604051808215151515815260200191505060405180910390f35b34156107a457600080fd5b6107ac611d3b565b604051808260ff1660ff16815260200191505060405180910390f35b34156107d357600080fd5b6107db611d40565b6040518082815260200191505060405180910390f35b34156107fc57600080fd5b610804611d46565b604051808215151515815260200191505060405180910390f35b341561082957600080fd5b610831611e38565b6040518082815260200191505060405180910390f35b341561085257600080fd5b61085a611e3e565b6040518082815260200191505060405180910390f35b61089c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611276565b604051808215151515815260200191505060405180910390f35b34156108c157600080fd5b6108c9611e46565b6040518082815260200191505060405180910390f35b34156108ea57600080fd5b6108f2611e53565b604051808215151515815260200191505060405180910390f35b341561091757600080fd5b61091f611eda565b6040518082815260200191505060405180910390f35b341561094057600080fd5b610948611ee7565b604051808215151515815260200191505060405180910390f35b341561096d57600080fd5b610975611f28565b604051808215151515815260200191505060405180910390f35b341561099a57600080fd5b6109a2611f3b565b6040518082815260200191505060405180910390f35b34156109c357600080fd5b6109ef600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611f41565b6040518082815260200191505060405180910390f35b3415610a1057600080fd5b610a18611f8a565b604051808215151515815260200191505060405180910390f35b3415610a3d57600080fd5b610aca600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506120f3565b604051808215151515815260200191505060405180910390f35b3415610aef57600080fd5b610af7612187565b6040518082815260200191505060405180910390f35b3415610b1857600080fd5b610b2061218d565b6040518082815260200191505060405180910390f35b3415610b4157600080fd5b610b4961219a565b6040518082815260200191505060405180910390f35b3415610b6a57600080fd5b610b726121a0565b005b3415610b7f57600080fd5b610bcc6004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506124f3565b604051808215151515815260200191505060405180910390f35b3415610bf157600080fd5b610bf96128fa565b6040518082815260200191505060405180910390f35b3415610c1a57600080fd5b610c22612900565b604051808215151515815260200191505060405180910390f35b3415610c4757600080fd5b610c94600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050612bce565b604051808215151515815260200191505060405180910390f35b3415610cb957600080fd5b610cc1612d3f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610d0e57600080fd5b610d16612d65565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610d6357600080fd5b610d6b612d7d565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610dab578082015181840152602081019050610d90565b50505050905090810190601f168015610dd85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610df157600080fd5b610df9612db6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610e4657600080fd5b610e5c6004808035906020019091905050612dce565b604051808381526020018281526020019250505060405180910390f35b3415610e8457600080fd5b610e8c612f2f565b6040518082815260200191505060405180910390f35b3415610ead57600080fd5b610ed9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612f35565b604051808215151515815260200191505060405180910390f35b3415610efe57600080fd5b610f2a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613020565b6040518082815260200191505060405180910390f35b3415610f4b57600080fd5b610f80600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050613038565b604051808215151515815260200191505060405180910390f35b3415610fa557600080fd5b610fad61304d565b6040518082815260200191505060405180910390f35b3415610fce57600080fd5b610fd6613053565b6040518082815260200191505060405180910390f35b3415610ff757600080fd5b610fff613058565b6040518082815260200191505060405180910390f35b341561102057600080fd5b611028613075565b604051808215151515815260200191505060405180910390f35b341561104d57600080fd5b6110556130ab565b6040518082815260200191505060405180910390f35b341561107657600080fd5b61107e6130b1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156110cb57600080fd5b6110f7600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506130d7565b604051808215151515815260200191505060405180910390f35b341561111c57600080fd5b6111246130f7565b6040518082815260200191505060405180910390f35b341561114557600080fd5b611190600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061310e565b6040518082815260200191505060405180910390f35b34156111b157600080fd5b6111b9613195565b6040518082815260200191505060405180910390f35b34156111da57600080fd5b6111e26131b5565b6040518082815260200191505060405180910390f35b341561120357600080fd5b61120b6131c2565b6040518082815260200191505060405180910390f35b341561122c57600080fd5b6112346132a4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008060008060009054906101000a900460ff1615151561129657600080fd5b61129e611ee7565b1515156112aa57600080fd5b600460019054906101000a900460ff161515156112c657600080fd5b6359fa6000421115156112d857600080fd5b622e24806359fa60000142111515156112f057600080fd5b6000341115156112ff57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040518082815260200191505060405180910390a261135634612dce565b809250819350505060008211151561136d57600080fd5b60026305f5e100601260ff16600a0a0281151561138657fe5b048260026000733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403101515156113ea57600080fd5b60008114151561141057611409816007546132bc90919063ffffffff16565b6007819055505b6114768260026000733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132bc90919063ffffffff16565b60026000733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061151f82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132d590919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff16733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36115f0346006546132d590919063ffffffff16565b60068190555061164834600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132d590919063ffffffff16565b600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550680821ab0d4414980000600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561172d5750600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156117de576001600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff167f86df4d319dc8c05e5ca005438b3e8a4521a6ddfa127e5cfd589d8c3ead3935bc6001604051808215151515815260200191505060405180910390a25b600192505050919050565b62eff10081565b6040805190810160405280600d81526020017f487574333420456e74726f70790000000000000000000000000000000000000081525081565b600460019054906101000a900460ff1681565b60008060009054906101000a900460ff1615151561185957600080fd5b600460019054906101000a900460ff16151561187457600080fd5b61187e83836132ee565b506001905092915050565b60095481565b6305f5e10081565b7f48757433342056657374696e67000000000000000000000000000000000000006c01000000000000000000000000900481565b62bebc2081565b73da3780cff2ae3a59ae16ec1734deec77a7fd8db281565b60085481565b604381565b7265d506e475b5dbd76480bafa57fe7c41c783af81565b60015481565b60006009544211151561192457600080fd5b7f87281fabebb3053dede10cd89db97c95421a1fb9385cd5d0bb6cf8db8dd11ae76009546040518082815260200191505060405180910390a161197562eff1006009546132d590919063ffffffff16565b6009819055506119f27f48757433342056657374696e67000000000000000000000000000000000000006c010000000000000000000000009004733135f4aca3c1ad4758981500f8db20ebdc5a1cab600460646014601260ff16600a0a6305f5e10002028115156119e257fe5b048115156119ec57fe5b046133e0565b905090565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611a8457600080fd5b611b1382600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132bc90919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b9e8484846133e0565b90509392505050565b6222476481565b680821ab0d441498000081565b6000600460029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c1957600080fd5b6000809054906101000a900460ff16151515611c3457600080fd5b60016000806101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515611cf957600080fd5b6102c65a03f11515611d0a57600080fd5b505050604051805190501515611d1f57600080fd5b600190506000806101000a81549060ff02191690559392505050565b601281565b61028c81565b60008060009054906101000a900460ff16151515611d6357600080fd5b600460019054906101000a900460ff16151515611d7f57600080fd5b600460029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611de8575062127500622e24806359fa6000010142115b1515611df357600080fd5b600460006101000a81549060ff02191690557f72c874aeff0b183a56e2b79c71b46e1aed4dee5e09862134b8821ba2fddbf8bf60405160405180910390a16001905090565b60075481565b6359fa600081565b622e24806359fa60000181565b6000611e5d61374d565b6001604051805910611e6c5750595b9080825280602002602001820160405250905033816000815181101515611e8f57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611ed4816124f3565b91505090565b68982af34be0697c000081565b6000600460009054906101000a900460ff161580611f235750622e24806359fa60000142118015611f22575068a2a15d09519be00000600654105b5b905090565b600460009054906101000a900460ff1681565b61020581565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fe857600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600460029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e60405160405180910390a3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001905090565b60008060008060009054906101000a900460ff1615151561211357600080fd5b8351855114151561212357600080fd5b84519150600090505b8181101561217b5761216d33868381518110151561214657fe5b90602001906020020151868481518110151561215e57fe5b906020019060200201516133e0565b50808060010191505061212c565b60019250505092915050565b6101f481565b68a2a15d09519be0000081565b61024c81565b6000809054906101000a900460ff161515156121bb57600080fd5b600460029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561221757600080fd5b600460009054906101000a900460ff1615151561223357600080fd5b68982af34be0697c00006006540360085414151561225057600080fd5b6000733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60026000733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a360007f48757433342056657374696e67000000000000000000000000000000000000006c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60646014601260ff16600a0a6305f5e100020281151561238d57fe5b046040518082815260200191505060405180910390a36000736bf708ef2c1fdce3603c04ce9547aa6e134093b673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef622247646040518082815260200191505060405180910390a360026000733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560026000736bf708ef2c1fdce3603c04ce9547aa6e134093b673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600460029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000806000806000806000809054906101000a900460ff1615151561251757600080fd5b60016000806101000a81548160ff021916908315150217905550612539611ee7565b151561254457600080fd5b865193505b838510156128db57868581518110151561255f57fe5b906020019060200201519050600a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915060008211156127725761265e8260026000733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132d590919063ffffffff16565b60026000733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055733135f4aca3c1ad4758981500f8db20ebdc5a1cab73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b60008311156128ce57600a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600b60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055612822836008546132d590919063ffffffff16565b6008819055508073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398856040518082815260200191505060405180910390a38073ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015156128cd57600080fd5b5b8480600101955050612549565b600195506000806101000a81549060ff02191690555050505050919050565b61022181565b600080600460029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561295f57600080fd5b6000809054906101000a900460ff1615151561297a57600080fd5b60016000806101000a81548160ff02191690831515021790555061299c613075565b15156129a757600080fd5b600460019054906101000a900460ff1615156129ca5762eff10042016009819055505b6001600460016101000a81548160ff0219169083151502179055506129ed613488565b90507265d506e475b5dbd76480bafa57fe7c41c783af73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398836040518082815260200191505060405180910390a37265d506e475b5dbd76480bafa57fe7c41c783af73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515612aba57600080fd5b73a70d04dc4a64960c40cd2ed2cde36d76ca4edfab73ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63983073ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a373a70d04dc4a64960c40cd2ed2cde36d76ca4edfab73ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515612bb557600080fd5b600191506000806101000a81549060ff02191690555090565b60008060008060009054906101000a900460ff16151515612bee57600080fd5b600460029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c4a57600080fd5b835191505b81811015612d3457600b60008583815181101515612c6957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558381815181101515612ccb57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f86df4d319dc8c05e5ca005438b3e8a4521a6ddfa127e5cfd589d8c3ead3935bc6000604051808215151515815260200191505060405180910390a28080600101915050612c4f565b600192505050919050565b600460029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b736bf708ef2c1fdce3603c04ce9547aa6e134093b681565b6040805190810160405280600381526020017f454e54000000000000000000000000000000000000000000000000000000000081525081565b73a70d04dc4a64960c40cd2ed2cde36d76ca4edfab81565b6000806000806000612dde6130f7565b9250612de8611ee7565b612e5f57600460019054906101000a900460ff16612e57576359fa60004210612e4f57622e24806359fa6000014211612e4757680821ab0d44149800008610612e3f57828610612e385782612e3a565b855b612e42565b60005b612e4a565b60005b612e52565b60005b612e5a565b60005b612e62565b60005b9150612eac670de0b6b3a7640000612e9e601260ff16600a0a612e906103e88761350090919063ffffffff16565b61350090919063ffffffff16565b61352e90919063ffffffff16565b9350612ec182876132bc90919063ffffffff16565b9550612ecb6131c2565b9050612f2584612f17670de0b6b3a7640000612f09601260ff16600a0a612efb878d61350090919063ffffffff16565b61350090919063ffffffff16565b61352e90919063ffffffff16565b6132d590919063ffffffff16565b9450505050915091565b6103e881565b6000600460029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f9357600080fd5b8173ffffffffffffffffffffffffffffffffffffffff167fbc48fdaddfcfb54d36a0ac4d7e52f46cdf854784b9c0978d385a35e8383262d460405160405180910390a281600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b600a6020528060005260406000206000915090505481565b60006130453384846133e0565b905092915050565b6102ee81565b601481565b60026305f5e100601260ff16600a0a0281151561307157fe5b0481565b600061307f611ee7565b158015613097575068a2a15d09519be0000060065410155b80156130a657506359fa600042115b905090565b60065481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b6020528060005260406000206000915054906101000a900460ff1681565b60006103e860075481151561310857fe5b04905090565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60646014601260ff16600a0a6305f5e10002028115156131b157fe5b0481565b680821ab0d441498000081565b60006131cc611ee7565b61329c57600460019054906101000a900460ff16613294576359fa6000421061328c57620151806359fa60000142106132835762093a806359fa600001421061327a57621275006359fa600001421061327157621baf806359fa6000014210613268576224ea006359fa600001421061325f57622e24806359fa600001421061325657600061325a565b6101f45b613263565b6102055b61326c565b6102215b613275565b61024c5b61327e565b61028c5b613287565b6102ee5b61328f565b60005b613297565b60005b61329f565b60005b905090565b733135f4aca3c1ad4758981500f8db20ebdc5a1cab81565b600081830390508281111515156132cf57fe5b92915050565b600081830190508281101515156132e857fe5b92915050565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008060009054906101000a900460ff161515156133fd57600080fd5b600460019054906101000a900460ff16151561341857600080fd5b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561347157600080fd5b61347c848484613550565b50600190509392505050565b600080604368982af34be0697c00003073ffffffffffffffffffffffffffffffffffffffff1631018115156134b957fe5b0490503073ffffffffffffffffffffffffffffffffffffffff16318111156134f8573073ffffffffffffffffffffffffffffffffffffffff16316134fa565b805b91505090565b600081830290506000831480613520575081838281151561351d57fe5b04145b151561352857fe5b92915050565b600080821415151561353c57fe5b818381151561354757fe5b04905092915050565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156135a057600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360008214156136175760019050613746565b61366982600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132bc90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506136fe82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132d590919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190505b9392505050565b6020604051908101604052806000815250905600a165627a7a7230582007db8adb2c78cab9239e31a5e8c86280e5828125d6954cc7431c1a7399950bfe0029"
}