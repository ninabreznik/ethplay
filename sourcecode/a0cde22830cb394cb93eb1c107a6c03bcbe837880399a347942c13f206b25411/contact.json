{
  "address": "0xbfbe5332f172d77811bc6c272844f3e54a7b23bb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WemarkToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-29\n*/\n\npragma solidity ^0.4.13;\n\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract BurnableToken is StandardToken {\n\n  // @notice An address for the transfer event where the burned tokens are transferred in a faux Transfer event\n  address public constant BURN_ADDRESS = 0;\n\n  /** How many tokens we burned */\n  event Burned(address burner, uint burnedAmount);\n\n  /**\n   * Burn extra tokens from a balance.\n   *\n   */\n  function burn(uint burnAmount) {\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(burnAmount);\n    totalSupply_ = totalSupply_.sub(burnAmount);\n    Burned(burner, burnAmount);\n\n    // Inform the blockchain explores that track the\n    // balances only by a transfer event that the balance in this\n    // address has decreased\n    Transfer(burner, BURN_ADDRESS, burnAmount);\n  }\n}\n\ncontract LimitedTransferToken is ERC20 {\n\n    /**\n     * @dev Checks whether it can transfer or otherwise throws.\n     */\n    modifier canTransferLimitedTransferToken(address _sender, uint256 _value) {\n        require(_value <= transferableTokens(_sender, uint64(now)));\n        _;\n    }\n\n    /**\n     * @dev Default transferable tokens function returns all tokens for a holder (no limit).\n     * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\n     * specific logic for limiting token transferability for a holder over time.\n     */\n    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\n        return balanceOf(holder);\n    }\n}\n\ncontract ReleasableToken is ERC20, Ownable {\n\n  /* The finalizer contract that allows unlift the transfer limits on this token */\n  address public releaseAgent;\n\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n  bool public released = false;\n\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n  mapping (address => bool) public transferAgents;\n\n  /** The function can be called only before or after the tokens have been releasesd */\n  modifier inReleaseState(bool releaseState) {\n    if(releaseState != released) {\n      revert();\n    }\n    _;\n  }\n\n  /** The function can be called only by a whitelisted release agent. */\n  modifier onlyReleaseAgent() {\n    if(msg.sender != releaseAgent) {\n      revert();\n    }\n    _;\n  }\n\n  /**\n   * Limit token transfer until the crowdsale is over.\n   *\n   */\n  modifier canTransferReleasable(address _sender) {\n\n    if(!released) {\n        if(!transferAgents[_sender]) {\n            revert();\n        }\n    }\n\n    _;\n  }\n\n  /**\n   * Set the contract that can call release and make the token transferable.\n   *\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n   */\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\n    releaseAgent = addr;\n  }\n\n  /**\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n   */\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n    transferAgents[addr] = state;\n  }\n\n  /**\n   * One way function to release the tokens to the wild.\n   *\n   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n   */\n  function releaseTokenTransfer() public onlyReleaseAgent {\n    released = true;\n  }\n}\n\ncontract UpgradeAgent {\n\n  uint public originalSupply;\n\n  /** Interface marker */\n  function isUpgradeAgent() public constant returns (bool) {\n    return true;\n  }\n\n  function upgradeFrom(address _from, uint256 _value) public;\n}\n\ncontract UpgradeableToken is StandardToken {\n\n    /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n    address public upgradeMaster;\n\n    /** The next contract where the tokens will be migrated. */\n    UpgradeAgent public upgradeAgent;\n\n    /** How many tokens we have upgraded by now. */\n    uint256 public totalUpgraded;\n\n    /**\n     * Upgrade states.\n     *\n     * - NotAllowed: The child contract has not reached a condition where the upgrade can begin\n     * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n     * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n     * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n     *\n     */\n    enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n\n    /**\n     * Somebody has upgraded some of his tokens.\n     */\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n\n    /**\n     * New upgrade agent available.\n     */\n    event UpgradeAgentSet(address agent);\n\n    /**\n     * Do not allow construction without upgrade master set.\n     */\n    function UpgradeableToken(address _upgradeMaster) public {\n        upgradeMaster = _upgradeMaster;\n    }\n\n    /**\n     * Allow the token holder to upgrade some of their tokens to a new contract.\n     */\n    function upgrade(uint256 value) public {\n\n        UpgradeState state = getUpgradeState();\n        if (!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n            // Called in a bad state\n            revert();\n        }\n\n        // Validate input value.\n        if (value == 0) revert();\n\n        balances[msg.sender] = balances[msg.sender].sub(value);\n\n        // Take tokens out from circulation\n        totalSupply_ = totalSupply_.sub(value);\n        totalUpgraded = totalUpgraded.add(value);\n\n        // Upgrade agent reissues the tokens\n        upgradeAgent.upgradeFrom(msg.sender, value);\n        Upgrade(msg.sender, upgradeAgent, value);\n    }\n\n    /**\n     * Set an upgrade agent that handles\n     */\n    function setUpgradeAgent(address agent) external {\n        if (!canUpgrade()) {\n            // The token is not yet in a state that we could think upgrading\n            revert();\n        }\n\n        if (agent == 0x0) revert();\n        // Only a master can designate the next agent\n        if (msg.sender != upgradeMaster) revert();\n        // Upgrade has already begun for an agent\n        if (getUpgradeState() == UpgradeState.Upgrading) revert();\n\n        upgradeAgent = UpgradeAgent(agent);\n\n        // Bad interface\n        if (!upgradeAgent.isUpgradeAgent()) revert();\n        // Make sure that token supplies match in source and target\n        if (upgradeAgent.originalSupply() != totalSupply_) revert();\n\n        UpgradeAgentSet(upgradeAgent);\n    }\n\n    /**\n     * Get the state of the token upgrade.\n     */\n    function getUpgradeState() public constant returns (UpgradeState) {\n        if (!canUpgrade()) return UpgradeState.NotAllowed;\n        else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n        else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n        else return UpgradeState.Upgrading;\n    }\n\n    /**\n     * Change the upgrade master.\n     *\n     * This allows us to set a new owner for the upgrade mechanism.\n     */\n    function setUpgradeMaster(address master) public {\n        if (master == 0x0) revert();\n        if (msg.sender != upgradeMaster) revert();\n        upgradeMaster = master;\n    }\n\n    /**\n     * Child contract can enable to provide the condition when the upgrade can begun.\n     */\n    function canUpgrade() public constant returns (bool) {\n        return true;\n    }\n}\n\ncontract CrowdsaleToken is ReleasableToken, UpgradeableToken {\n\n  /** Name and symbol were updated. */\n  event UpdatedTokenInformation(string newName, string newSymbol);\n\n  string public name;\n\n  string public symbol;\n\n  uint8 public decimals;\n\n  /**\n   * Construct the token.\n   *\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n   *\n   * @param _name Token name\n   * @param _symbol Token symbol - should be all caps\n   * @param _initialSupply How many tokens we start with\n   * @param _decimals Number of decimal places\n   */\n  function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint8 _decimals)\n    UpgradeableToken(msg.sender) public {\n\n    // Create any address, can be transferred\n    // to team multisig via changeOwner(),\n    // also remember to call setUpgradeMaster()\n    owner = msg.sender;\n\n    name = _name;\n    symbol = _symbol;\n\n    totalSupply_ = _initialSupply;\n\n    decimals = _decimals;\n\n    // Create initially all balance on the team multisig\n    balances[owner] = totalSupply_;\n  }\n\n  /**\n   * When token is released to be transferable, enforce no new tokens can be created.\n   */\n  function releaseTokenTransfer() public onlyReleaseAgent {\n    super.releaseTokenTransfer();\n  }\n\n  /**\n   * Allow upgrade agent functionality kick in only if the crowdsale was success.\n   */\n  function canUpgrade() public constant returns(bool) {\n    return released && super.canUpgrade();\n  }\n\n  /**\n   * Owner can update token information here.\n   *\n   * It is often useful to conceal the actual token association, until\n   * the token operations, like central issuance or reissuance have been completed.\n   *\n   * This function allows the token owner to rename the token after the operations\n   * have been completed and then point the audience to use the token contract.\n   */\n  function setTokenInformation(string _name, string _symbol) onlyOwner {\n    name = _name;\n    symbol = _symbol;\n\n    UpdatedTokenInformation(name, symbol);\n  }\n\n}\n\ncontract VestedToken is StandardToken, LimitedTransferToken {\n\n    uint256 MAX_GRANTS_PER_ADDRESS = 20;\n\n    struct TokenGrant {\n        address granter;     // 20 bytes\n        uint256 value;       // 32 bytes\n        uint64 cliff;\n        uint64 vesting;\n        uint64 start;        // 3 * 8 = 24 bytes\n        bool revokable;\n        bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\n    } // total 78 bytes = 3 sstore per operation (32 per sstore)\n\n    mapping (address => TokenGrant[]) public grants;\n\n    event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\n\n    /**\n     * @dev Grant tokens to a specified address\n     * @param _to address The address which the tokens will be granted to.\n     * @param _value uint256 The amount of tokens to be granted.\n     * @param _start uint64 Time of the beginning of the grant.\n     * @param _cliff uint64 Time of the cliff period.\n     * @param _vesting uint64 The vesting period.\n     */\n    function grantVestedTokens(\n        address _to,\n        uint256 _value,\n        uint64 _start,\n        uint64 _cliff,\n        uint64 _vesting,\n        bool _revokable,\n        bool _burnsOnRevoke\n    ) public {\n\n        // Check for date inconsistencies that may cause unexpected behavior\n        require(_cliff >= _start && _vesting >= _cliff);\n\n        require(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS);   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n\n        uint256 count = grants[_to].push(\n            TokenGrant(\n                _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\n                _value,\n                _cliff,\n                _vesting,\n                _start,\n                _revokable,\n                _burnsOnRevoke\n            )\n        );\n\n        transfer(_to, _value);\n\n        NewTokenGrant(msg.sender, _to, _value, count - 1);\n    }\n\n    /**\n     * @dev Revoke the grant of tokens of a specifed address.\n     * @param _holder The address which will have its tokens revoked.\n     * @param _grantId The id of the token grant.\n     */\n    function revokeTokenGrant(address _holder, uint256 _grantId) public {\n        TokenGrant storage grant = grants[_holder][_grantId];\n\n        require(grant.revokable);\n        require(grant.granter == msg.sender); // Only granter can revoke it\n\n        address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\n\n        uint256 nonVested = nonVestedTokens(grant, uint64(now));\n\n        // remove grant from array\n        delete grants[_holder][_grantId];\n        grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\n        grants[_holder].length -= 1;\n\n        balances[receiver] = balances[receiver].add(nonVested);\n        balances[_holder] = balances[_holder].sub(nonVested);\n\n        Transfer(_holder, receiver, nonVested);\n    }\n\n\n    /**\n     * @dev Calculate the total amount of transferable tokens of a holder at a given time\n     * @param holder address The address of the holder\n     * @param time uint64 The specific time.\n     * @return An uint256 representing a holder's total amount of transferable tokens.\n     */\n    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\n        uint256 grantIndex = tokenGrantsCount(holder);\n\n        if (grantIndex == 0) return super.transferableTokens(holder, time); // shortcut for holder without grants\n\n        // Iterate through all the grants the holder has, and add all non-vested tokens\n        uint256 nonVested = 0;\n        for (uint256 i = 0; i < grantIndex; i++) {\n            nonVested = SafeMath.add(nonVested, nonVestedTokens(grants[holder][i], time));\n        }\n\n        // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\n        uint256 vestedTransferable = SafeMath.sub(balanceOf(holder), nonVested);\n\n        // Return the minimum of how many vested can transfer and other value\n        // in case there are other limiting transferability factors (default is balanceOf)\n        return Math.min256(vestedTransferable, super.transferableTokens(holder, time));\n    }\n\n    /**\n     * @dev Check the amount of grants that an address has.\n     * @param _holder The holder of the grants.\n     * @return A uint256 representing the total amount of grants.\n     */\n    function tokenGrantsCount(address _holder) public constant returns (uint256 index) {\n        return grants[_holder].length;\n    }\n\n    /**\n     * @dev Calculate amount of vested tokens at a specific time\n     * @param tokens uint256 The amount of tokens granted\n     * @param time uint64 The time to be checked\n     * @param start uint64 The time representing the beginning of the grant\n     * @param cliff uint64  The cliff period, the period before nothing can be paid out\n     * @param vesting uint64 The vesting period\n     * @return An uint256 representing the amount of vested tokens of a specific grant\n     *  transferableTokens\n     *   |                         _/--------   vestedTokens rect\n     *   |                       _/\n     *   |                     _/\n     *   |                   _/\n     *   |                 _/\n     *   |                /\n     *   |              .|\n     *   |            .  |\n     *   |          .    |\n     *   |        .      |\n     *   |      .        |\n     *   |    .          |\n     *   +===+===========+---------+----------> time\n     *      Start       Cliff    Vesting\n     */\n    function calculateVestedTokens(\n        uint256 tokens,\n        uint256 time,\n        uint256 start,\n        uint256 cliff,\n        uint256 vesting) public pure returns (uint256)\n    {\n        // Shortcuts for before cliff and after vesting cases.\n        if (time < cliff) return 0;\n        if (time >= vesting) return tokens;\n\n        // Interpolate all vested tokens.\n        // As before cliff the shortcut returns 0, we can use just calculate a value\n        // in the vesting rect (as shown in above's figure)\n\n        // vestedTokens = (tokens * (time - start)) / (vesting - start)\n        uint256 vestedTokens = SafeMath.div(\n            SafeMath.mul(\n                tokens,\n                SafeMath.sub(time, start)\n            ),\n            SafeMath.sub(vesting, start)\n        );\n\n        return vestedTokens;\n    }\n\n    /**\n     * @dev Get all information about a specific grant.\n     * @param _holder The address which will have its tokens revoked.\n     * @param _grantId The id of the token grant.\n     * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\n     * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\n     */\n    function tokenGrant(address _holder, uint256 _grantId) public constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\n        TokenGrant storage grant = grants[_holder][_grantId];\n\n        granter = grant.granter;\n        value = grant.value;\n        start = grant.start;\n        cliff = grant.cliff;\n        vesting = grant.vesting;\n        revokable = grant.revokable;\n        burnsOnRevoke = grant.burnsOnRevoke;\n\n        vested = vestedTokens(grant, uint64(now));\n    }\n\n    /**\n     * @dev Get the amount of vested tokens at a specific time.\n     * @param grant TokenGrant The grant to be checked.\n     * @param time The time to be checked\n     * @return An uint256 representing the amount of vested tokens of a specific grant at a specific time.\n     */\n    function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n        return calculateVestedTokens(\n            grant.value,\n            uint256(time),\n            uint256(grant.start),\n            uint256(grant.cliff),\n            uint256(grant.vesting)\n        );\n    }\n\n    /**\n     * @dev Calculate the amount of non vested tokens at a specific time.\n     * @param grant TokenGrant The grant to be checked.\n     * @param time uint64 The time to be checked\n     * @return An uint256 representing the amount of non vested tokens of a specific grant on the\n     * passed time frame.\n     */\n    function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n        return grant.value.sub(vestedTokens(grant, time));\n    }\n\n    /**\n     * @dev Calculate the date when the holder can transfer all its tokens\n     * @param holder address The address of the holder\n     * @return An uint256 representing the date of the last transferable tokens.\n     */\n    function lastTokenIsTransferableDate(address holder) public constant returns (uint64 date) {\n        date = uint64(now);\n        uint256 grantIndex = grants[holder].length;\n        for (uint256 i = 0; i < grantIndex; i++) {\n            date = Math.max64(grants[holder][i].vesting, date);\n        }\n    }\n}\n\ncontract WemarkToken is CrowdsaleToken, BurnableToken, VestedToken {\n\n    modifier validDestination(address to) {\n        require(to != address(0x0));\n        require(to != address(this));\n        _;\n    }\n\n\n    function WemarkToken() CrowdsaleToken('WemarkToken', 'WMK', 135000000 * (10 ** 18), 18) public {\n        /** Initially allow only token creator to transfer tokens */\n        setTransferAgent(msg.sender, true);\n    }\n\n    /**\n     * @dev Checks modifier and allows transfer if tokens are not locked or not released.\n     * @param _to The address that will receive the tokens.\n     * @param _value The amount of tokens to be transferred.\n     */\n    function transfer(address _to, uint _value)\n        validDestination(_to)\n        canTransferReleasable(msg.sender)\n        canTransferLimitedTransferToken(msg.sender, _value) public returns (bool) {\n        // Call BasicToken.transfer()\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Checks modifier and allows transfer if tokens are not locked or not released.\n     * @param _from The address that will send the tokens.\n     * @param _to The address that will receive the tokens.\n     * @param _value The amount of tokens to be transferred.\n     */\n    function transferFrom(address _from, address _to, uint _value)\n        validDestination(_to)\n        canTransferReleasable(_from)\n        canTransferLimitedTransferToken(_from, _value) public returns (bool) {\n        // Call StandardToken.transferForm()\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * @dev Prevent accounts that are blocked for transferring their tokens, from calling approve()\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        // Call StandardToken.transferForm()\n        return super.approve(_spender, _value);\n    }\n\n    /**\n     * @dev Prevent accounts that are blocked for transferring their tokens, from calling increaseApproval()\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        // Call StandardToken.transferForm()\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    /**\n     * @dev Can upgrade token contract only if token is released and super class allows too.\n     */\n    function canUpgrade() public constant returns(bool) {\n        return released && super.canUpgrade();\n    }\n\n    /**\n     * @dev Calculate the total amount of transferable tokens of a holder for the current moment of calling.\n     * @param holder address The address of the holder\n     * @return An uint256 representing a holder's total amount of transferable tokens.\n     */\n    function transferableTokensNow(address holder) public constant returns (uint) {\n        return transferableTokens(holder, uint64(now));\n    }\n\n    function () payable {\n        // If ether is sent to this address, send it back\n        revert();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"tokenGrantsCount\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grants\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"tokenGrant\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"vested\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"lastTokenIsTransferableDate\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_cliff\",\"type\":\"uint64\"},{\"name\":\"_vesting\",\"type\":\"uint64\"},{\"name\":\"_revokable\",\"type\":\"bool\"},{\"name\":\"_burnsOnRevoke\",\"type\":\"bool\"}],\"name\":\"grantVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"transferableTokensNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"transferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"vesting\",\"type\":\"uint256\"}],\"name\":\"calculateVestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"revokeTokenGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"name\":\"setUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"grantId\",\"type\":\"uint256\"}],\"name\":\"NewTokenGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526001805460a060020a60ff02191690556014600c553480156200002657600080fd5b50604080518082018252600b81527f57656d61726b546f6b656e00000000000000000000000000000000000000000060208083019182528351808501909452600384527f574d4b000000000000000000000000000000000000000000000000000000000090840152600080546006805433600160a060020a03199182168117909255918216811790911617905581519192916a6fab5caa0e114fe700000091601291620000d691600991620001ae565b508251620000ec90600a906020860190620001ae565b506004829055600b805460ff191660ff9290921691909117905560008054600160a060020a0316815260036020526040902055506200013890503360016401000000006200013e810204565b62000253565b600054600160a060020a031633146200015657600080fd5b60015460009074010000000000000000000000000000000000000000900460ff16156200018257600080fd5b50600160a060020a03919091166000908152600260205260409020805460ff1916911515919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001f157805160ff191683800117855562000221565b8280016001018555821562000221579182015b828111156200022157825182559160200191906001019062000204565b506200022f92915062000233565b5090565b6200025091905b808211156200022f57600081556001016200023a565b90565b6125e780620002636000396000f3006080604052600436106101e25763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302a72a4c81146101e757806302f652a31461021a57806306fdde0314610242578063095ea7b3146102cc57806318160ddd1461030457806323b872dd1461031957806329ff4f53146103435780632c71e60a14610364578063313ce567146103da57806342966c681461040557806345977d031461041d5780634eee966f146104355780635de4ccb0146104cc5780635f412d4f146104fd578063600440cb14610512578063600e85b71461052757806366188463146105a65780636c182e99146105ca57806370a08231146106085780638444b39114610629578063867c2857146106625780638da5cb5b1461068357806395d89b411461069857806396132521146106ad5780639738968c146106c25780639754a4d9146106d7578063a9059cbb1461071e578063c752ff6214610742578063cfefe48b14610757578063d1f276d314610778578063d347c2051461078d578063d73dd623146107bb578063d7e7088a146107df578063dd62ed3e14610800578063df3c211b14610827578063eb944e4c1461084b578063f2fde38b1461086f578063fccc281314610890578063ffeb7d75146108a5575b600080fd5b3480156101f357600080fd5b50610208600160a060020a03600435166108c6565b60408051918252519081900360200190f35b34801561022657600080fd5b50610240600160a060020a036004351660243515156108e1565b005b34801561024e57600080fd5b5061025761093e565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610291578181015183820152602001610279565b50505050905090810190601f1680156102be5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102d857600080fd5b506102f0600160a060020a03600435166024356109cc565b604080519115158252519081900360200190f35b34801561031057600080fd5b506102086109df565b34801561032557600080fd5b506102f0600160a060020a03600435811690602435166044356109e6565b34801561034f57600080fd5b50610240600160a060020a0360043516610a7f565b34801561037057600080fd5b50610388600160a060020a0360043516602435610ad3565b60408051600160a060020a039098168852602088019690965267ffffffffffffffff9485168787015292841660608701529216608085015290151560a0840152151560c0830152519081900360e00190f35b3480156103e657600080fd5b506103ef610b64565b6040805160ff9092168252519081900360200190f35b34801561041157600080fd5b50610240600435610b6d565b34801561042957600080fd5b50610240600435610c33565b34801561044157600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261024094369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610da49650505050505050565b3480156104d857600080fd5b506104e1610f11565b60408051600160a060020a039092168252519081900360200190f35b34801561050957600080fd5b50610240610f20565b34801561051e57600080fd5b506104e1610f41565b34801561053357600080fd5b5061054b600160a060020a0360043516602435610f50565b60408051600160a060020a03909916895260208901979097528787019590955267ffffffffffffffff9384166060880152918316608087015290911660a0850152151560c0840152151560e083015251908190036101000190f35b3480156105b257600080fd5b506102f0600160a060020a0360043516602435611165565b3480156105d657600080fd5b506105eb600160a060020a0360043516611257565b6040805167ffffffffffffffff9092168252519081900360200190f35b34801561061457600080fd5b50610208600160a060020a03600435166112e1565b34801561063557600080fd5b5061063e6112fc565b6040518082600481111561064e57fe5b60ff16815260200191505060405180910390f35b34801561066e57600080fd5b506102f0600160a060020a0360043516611347565b34801561068f57600080fd5b506104e161135c565b3480156106a457600080fd5b5061025761136b565b3480156106b957600080fd5b506102f06113c6565b3480156106ce57600080fd5b506102f06113d6565b3480156106e357600080fd5b50610240600160a060020a036004351660243567ffffffffffffffff6044358116906064358116906084351660a435151560c43515156113fa565b34801561072a57600080fd5b506102f0600160a060020a0360043516602435611663565b34801561074e57600080fd5b506102086116fc565b34801561076357600080fd5b50610208600160a060020a0360043516611702565b34801561078457600080fd5b506104e1611714565b34801561079957600080fd5b50610208600160a060020a036004351667ffffffffffffffff60243516611723565b3480156107c757600080fd5b506102f0600160a060020a036004351660243561186f565b3480156107eb57600080fd5b50610240600160a060020a036004351661187b565b34801561080c57600080fd5b50610208600160a060020a0360043581169060243516611a6f565b34801561083357600080fd5b50610208600435602435604435606435608435611a9a565b34801561085757600080fd5b50610240600160a060020a0360043516602435611af2565b34801561087b57600080fd5b50610240600160a060020a0360043516611f01565b34801561089c57600080fd5b506104e1611f88565b3480156108b157600080fd5b50610240600160a060020a0360043516611f8d565b600160a060020a03166000908152600d602052604090205490565b600054600160a060020a031633146108f857600080fd5b60015460009060a060020a900460ff161561091257600080fd5b50600160a060020a03919091166000908152600260205260409020805460ff1916911515919091179055565b6009805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109c45780601f10610999576101008083540402835291602001916109c4565b820191906000526020600020905b8154815290600101906020018083116109a757829003601f168201915b505050505081565b60006109d88383611fdb565b9392505050565b6004545b90565b600082600160a060020a03811615156109fe57600080fd5b600160a060020a038116301415610a1457600080fd5b600154859060a060020a900460ff161515610a5057600160a060020a03811660009081526002602052604090205460ff161515610a5057600080fd5b8584610a5c8242611723565b811115610a6857600080fd5b610a73888888612041565b98975050505050505050565b600054600160a060020a03163314610a9657600080fd5b60015460009060a060020a900460ff1615610ab057600080fd5b5060018054600160a060020a031916600160a060020a0392909216919091179055565b600d60205281600052604060002081815481101515610aee57fe5b6000918252602090912060039091020180546001820154600290920154600160a060020a03909116935090915067ffffffffffffffff808216916801000000000000000081048216917001000000000000000000000000000000008204169060ff60c060020a820481169160c860020a90041687565b600b5460ff1681565b33600081815260036020526040902054610b8d908363ffffffff6121a816565b600160a060020a038216600090815260036020526040902055600454610bb9908363ffffffff6121a816565b60045560408051600160a060020a03831681526020810184905281517f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7929181900390910190a1604080518381529051600091600160a060020a0384169160008051602061259c8339815191529181900360200190a35050565b6000610c3d6112fc565b90506003816004811115610c4d57fe5b1480610c6457506004816004811115610c6257fe5b145b1515610c6f57600080fd5b811515610c7b57600080fd5b33600090815260036020526040902054610c9b908363ffffffff6121a816565b33600090815260036020526040902055600454610cbe908363ffffffff6121a816565b600455600854610cd4908363ffffffff6121ba16565b600855600754604080517f753e88e5000000000000000000000000000000000000000000000000000000008152336004820152602481018590529051600160a060020a039092169163753e88e59160448082019260009290919082900301818387803b158015610d4357600080fd5b505af1158015610d57573d6000803e3d6000fd5b5050600754604080518681529051600160a060020a0390921693503392507f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac919081900360200190a35050565b600054600160a060020a03163314610dbb57600080fd5b8151610dce906009906020850190612482565b508051610de290600a906020840190612482565b506040805181815260098054600260001961010060018416150201909116049282018390527fd131ab1e6f279deea74e13a18477e13e2107deb6dc8ae955648948be5841fb46929091600a9181906020820190606083019086908015610e895780601f10610e5e57610100808354040283529160200191610e89565b820191906000526020600020905b815481529060010190602001808311610e6c57829003601f168201915b5050838103825284546002600019610100600184161502019091160480825260209091019085908015610efd5780601f10610ed257610100808354040283529160200191610efd565b820191906000526020600020905b815481529060010190602001808311610ee057829003601f168201915b505094505050505060405180910390a15050565b600754600160a060020a031681565b600154600160a060020a03163314610f3757600080fd5b610f3f6121c9565b565b600654600160a060020a031681565b6000806000806000806000806000600d60008c600160a060020a0316600160a060020a031681526020019081526020016000208a815481101515610f9057fe5b906000526020600020906003020190508060000160009054906101000a9004600160a060020a03169850806001015497508060020160109054906101000a900467ffffffffffffffff1695508060020160009054906101000a900467ffffffffffffffff1694508060020160089054906101000a900467ffffffffffffffff1693508060020160189054906101000a900460ff1692508060020160199054906101000a900460ff1691506111558160e060405190810160405290816000820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a03168152602001600182015481526020016002820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160189054906101000a900460ff161515151581526020016002820160199054906101000a900460ff16151515158152505042612206565b9650509295985092959890939650565b336000908152600560209081526040808320600160a060020a0386168452909152812054808311156111ba57336000908152600560209081526040808320600160a060020a03881684529091528120556111ef565b6111ca818463ffffffff6121a816565b336000908152600560209081526040808320600160a060020a03891684529091529020555b336000818152600560209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3600191505b5092915050565b600160a060020a0381166000908152600d602052604081205442915b818110156112da57600160a060020a0384166000908152600d6020526040902080546112d09190839081106112a457fe5b906000526020600020906003020160020160089054906101000a900467ffffffffffffffff168461224d565b9250600101611273565b5050919050565b600160a060020a031660009081526003602052604090205490565b60006113066113d6565b1515611314575060016109e3565b600754600160a060020a0316151561132e575060026109e3565b600854151561133f575060036109e3565b5060046109e3565b60026020526000908152604090205460ff1681565b600054600160a060020a031681565b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109c45780601f10610999576101008083540402835291602001916109c4565b60015460a060020a900460ff1681565b60015460009060a060020a900460ff1680156113f557506113f5612278565b905090565b60008567ffffffffffffffff168567ffffffffffffffff161015801561143457508467ffffffffffffffff168467ffffffffffffffff1610155b151561143f57600080fd5b600c5461144b896108c6565b1061145557600080fd5b600160a060020a0388166000908152600d602052604090819020815160e08101909252908085611486576000611488565b335b600160a060020a03908116825260208083018c905267ffffffffffffffff8a81166040808601919091528a82166060808701919091528d83166080808801919091528b151560a0808901919091528b151560c09889015289546001808201808d5560009c8d529b8890208b516003909302018054600160a060020a0319169290991691909117885595890151958701959095559187015160029095018054918801519288015194880151979096015167ffffffffffffffff19909116948316949094176fffffffffffffffff0000000000000000191668010000000000000000918316919091021777ffffffffffffffff00000000000000000000000000000000191670010000000000000000000000000000000092909116919091021778ff000000000000000000000000000000000000000000000000191660c060020a931515939093029290921779ff00000000000000000000000000000000000000000000000000191660c860020a92151592909202919091179055905061160d8888611663565b5060408051888152600019830160208201528151600160a060020a038b169233927ff9565aecd648a0466ffb964a79eeccdf1120ad6276189c687a6e9fe73984d9bb929081900390910190a35050505050505050565b600082600160a060020a038116151561167b57600080fd5b600160a060020a03811630141561169157600080fd5b600154339060a060020a900460ff1615156116cd57600160a060020a03811660009081526002602052604090205460ff1615156116cd57600080fd5b33846116d98242611723565b8111156116e557600080fd5b6116ef8787612297565b94505b5050505092915050565b60085481565b600061170e8242611723565b92915050565b600154600160a060020a031681565b6000806000806000611734876108c6565b935083151561174e576117478787612368565b94506116f2565b60009250600091505b8382101561184857600160a060020a0387166000908152600d60205260409020805461183b91859161183691908690811061178e57fe5b60009182526020918290206040805160e08101825260039093029091018054600160a060020a0316835260018101549383019390935260029092015467ffffffffffffffff80821693830193909352680100000000000000008104831660608301527001000000000000000000000000000000008104909216608082015260ff60c060020a83048116151560a083015260c860020a909204909116151560c082015289612373565b6121ba565b9250600190910190611757565b61185a611854886112e1565b846121a8565b90506116ef8161186a8989612368565b612393565b60006109d883836123a2565b6118836113d6565b151561188e57600080fd5b600160a060020a03811615156118a357600080fd5b600654600160a060020a031633146118ba57600080fd5b60046118c46112fc565b60048111156118cf57fe5b14156118da57600080fd5b60078054600160a060020a031916600160a060020a038381169190911791829055604080517f61d3d7a6000000000000000000000000000000000000000000000000000000008152905192909116916361d3d7a6916004808201926020929091908290030181600087803b15801561195157600080fd5b505af1158015611965573d6000803e3d6000fd5b505050506040513d602081101561197b57600080fd5b5051151561198857600080fd5b600454600760009054906101000a9004600160a060020a0316600160a060020a0316634b2ba0dd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156119f757600080fd5b505af1158015611a0b573d6000803e3d6000fd5b505050506040513d6020811015611a2157600080fd5b505114611a2d57600080fd5b60075460408051600160a060020a039092168252517f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc9181900360200190a150565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60008083861015611aae5760009150611ae8565b828610611abd57869150611ae8565b611ae2611ad388611ace89896121a8565b61243b565b611add85886121a8565b612466565b90508091505b5095945050505050565b600160a060020a0382166000908152600d6020526040812080548291829185908110611b1a57fe5b906000526020600020906003020192508260020160189054906101000a900460ff161515611b4757600080fd5b8254600160a060020a03163314611b5d57600080fd5b600283015460c860020a900460ff16611b765733611b7a565b61dead5b6040805160e0810182528554600160a060020a0316815260018601546020820152600286015467ffffffffffffffff80821693830193909352680100000000000000008104831660608301527001000000000000000000000000000000008104909216608082015260ff60c060020a83048116151560a083015260c860020a909204909116151560c0820152909250611c139042612373565b600160a060020a0386166000908152600d6020526040902080549192509085908110611c3b57fe5b6000918252602080832060039092029091018054600160a060020a031916815560018082018490556002909101805479ffffffffffffffffffffffffffffffffffffffffffffffffffff19169055600160a060020a0388168352600d909152604090912080549091611cb3919063ffffffff6121a816565b81548110611cbd57fe5b9060005260206000209060030201600d600087600160a060020a0316600160a060020a0316815260200190815260200160002085815481101515611cfd57fe5b6000918252602080832084546003909302018054600160a060020a031916600160a060020a03938416178155600180860154908201556002948501805495909101805467ffffffffffffffff191667ffffffffffffffff96871617808255825468010000000000000000908190048816026fffffffffffffffff0000000000000000199091161780825582547001000000000000000000000000000000009081900490971690960277ffffffffffffffff000000000000000000000000000000001990961695909517808655815460ff60c060020a918290048116151590910278ff0000000000000000000000000000000000000000000000001990921691909117808755915460c860020a9081900490911615150279ff00000000000000000000000000000000000000000000000000199091161790935587168152600d9091526040902080546000190190611e549082612500565b50600160a060020a038216600090815260036020526040902054611e7e908263ffffffff6121ba16565b600160a060020a038084166000908152600360205260408082209390935590871681522054611eb3908263ffffffff6121a816565b600160a060020a03808716600081815260036020908152604091829020949094558051858152905192861693919260008051602061259c833981519152929181900390910190a35050505050565b600054600160a060020a03163314611f1857600080fd5b600160a060020a0381161515611f2d57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b600081565b600160a060020a0381161515611fa257600080fd5b600654600160a060020a03163314611fb957600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a038316151561205857600080fd5b600160a060020a03841660009081526003602052604090205482111561207d57600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020548211156120ad57600080fd5b600160a060020a0384166000908152600360205260409020546120d6908363ffffffff6121a816565b600160a060020a03808616600090815260036020526040808220939093559085168152205461210b908363ffffffff6121ba16565b600160a060020a03808516600090815260036020908152604080832094909455918716815260058252828120338252909152205461214f908363ffffffff6121a816565b600160a060020a038086166000818152600560209081526040808320338452825291829020949094558051868152905192871693919260008051602061259c833981519152929181900390910190a35060019392505050565b6000828211156121b457fe5b50900390565b6000828201838110156109d857fe5b600154600160a060020a031633146121e057600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a179055565b60006109d883602001518367ffffffffffffffff16856080015167ffffffffffffffff16866040015167ffffffffffffffff16876060015167ffffffffffffffff16611a9a565b60008167ffffffffffffffff168367ffffffffffffffff16101561227157816109d8565b5090919050565b60015460009060a060020a900460ff1680156113f557506113f561247d565b6000600160a060020a03831615156122ae57600080fd5b336000908152600360205260409020548211156122ca57600080fd5b336000908152600360205260409020546122ea908363ffffffff6121a816565b3360009081526003602052604080822092909255600160a060020a0385168152205461231c908363ffffffff6121ba16565b600160a060020a03841660008181526003602090815260409182902093909355805185815290519192339260008051602061259c8339815191529281900390910190a350600192915050565b60006109d8836112e1565b60006109d86123828484612206565b60208501519063ffffffff6121a816565b600081831061227157816109d8565b336000908152600560209081526040808320600160a060020a03861684529091528120546123d6908363ffffffff6121ba16565b336000818152600560209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60008083151561244e5760009150611250565b5082820282848281151561245e57fe5b04146109d857fe5b600080828481151561247457fe5b04949350505050565b600190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106124c357805160ff19168380011785556124f0565b828001600101855582156124f0579182015b828111156124f05782518255916020019190600101906124d5565b506124fc929150612531565b5090565b81548183558181111561252c5760030281600302836000526020600020918201910161252c919061254b565b505050565b6109e391905b808211156124fc5760008155600101612537565b6109e391905b808211156124fc578054600160a060020a03191681556000600182015560028101805479ffffffffffffffffffffffffffffffffffffffffffffffffffff191690556003016125515600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582051a3e325ad2c01ac625077397002a63699ecc5026315ec9371412dcbce19176b0029"
}