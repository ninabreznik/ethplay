{
  "address": "0xcc97e794daed4625568c93f65f9e0896093f86ef",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BlockToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-07\n*/\n\npragma solidity 0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n/**\n * @title Authorizable\n * @dev The Authorizable contract has authorized addresses, and provides basic authorization control\n * functions, this simplifies the implementation of \"multiple user permissions\".\n */\ncontract Authorizable is Ownable {\n  mapping(address => bool) public authorized;\n  \n  event AuthorizationSet(address indexed addressAuthorized, bool indexed authorization);\n\n  /**\n   * @dev The Authorizable constructor sets the first `authorized` of the contract to the sender\n   * account.\n   */ \n  constructor() public {\n\tauthorized[msg.sender] = true;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the authorized.\n   */\n  modifier onlyAuthorized() {\n    require(authorized[msg.sender]);\n    _;\n  }\n\n /**\n   * @dev Allows the current owner to set an authorization.\n   * @param addressAuthorized The address to change authorization.\n   */\n  function setAuthorized(address addressAuthorized, bool authorization) onlyOwner public {\n    emit AuthorizationSet(addressAuthorized, authorization);\n    authorized[addressAuthorized] = authorization;\n  }\n  \n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable, Authorizable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\n\ncontract Token {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n\n/**\n * @title Reference implementation of the ERC220 standard token.\n */\ncontract StandardToken is Token {\n \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n       require(balances[msg.sender] >= _value);      \n       balances[msg.sender] -= _value;\n       balances[_to] += _value;\n       emit Transfer(msg.sender, _to, _value);\n       return true;\n    }\n \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n     \trequire(balances[msg.sender] >= _value); \n        require(allowed[_from][msg.sender] >= _value); \n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n \n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n \n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n \n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowed;\n}\n\ncontract BurnableToken is StandardToken, Ownable {\n\n    event Burn(address indexed burner, uint256 amount);\n\n    /**\n    * @dev Anybody can burn a specific amount of their tokens.\n    * @param _amount The amount of token to be burned.\n    */\n    function burn(uint256 _amount) public {\n        require(_amount > 0);\n        require(_amount <= balances[msg.sender]);\n        // no need to require _amount <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = SafeMath.sub(balances[burner],_amount);\n        totalSupply = SafeMath.sub(totalSupply,_amount);\n        emit Transfer(burner, address(0), _amount);\n        emit Burn(burner, _amount);\n    }\n\n    /**\n    * @dev Owner can burn a specific amount of tokens of other token holders.\n    * @param _from The address of token holder whose tokens to be burned.\n    * @param _amount The amount of token to be burned.\n    */\n    function burnFrom(address _from, uint256 _amount) onlyOwner public {\n        require(_from != address(0));\n        require(_amount > 0);\n        require(_amount <= balances[_from]);\n        balances[_from] = SafeMath.sub(balances[_from],_amount);\n        totalSupply = SafeMath.sub(totalSupply,_amount);\n        emit Transfer(_from, address(0), _amount);\n        emit Burn(_from, _amount);\n    }\n\n}\n\ncontract BlockPausableToken is StandardToken, Pausable,BurnableToken {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n \n}\n\ncontract BlockToken is BlockPausableToken {\n using SafeMath for uint;\n    // metadata\n    string public constant name = \"Block66\";\n    string public constant symbol = \"B66\";\n    uint256 public constant decimals = 18;\n    \n   \taddress private ethFundDeposit;     \n   \t\n   \taddress private bugFundDeposit;      // deposit address for tokens for bug bounty for TGE \n\tuint256 public constant bugFund = 13.5 * (10**6) * 10**decimals;   // bug reserved\n\t\t\t\n\taddress private b66AdvisorFundDeposit;       \n\tuint256 public constant b66AdvisorFundDepositAmt = 13.5 * (10**6) * 10**decimals;   \n    \t\n\taddress private b66ReserveFundDeposit;  \n\tuint256 public constant b66ReserveTokens = 138 * (10**6) * 10**decimals;  \n    \t\n\tuint256 public icoTokenExchangeRate = 715; // 715 b66 tokens per 1 ETH\n\tuint256 public tokenCreationCap =  300 * (10**6) * 10**decimals;  \n\t\n\t//address public ;\n\t// crowdsale parameters\n   \tbool public tokenSaleActive;              // switched to true in operational state\n\tbool public haltIco;\n\tbool public dead = false;\n\tbool public privateEquityClaimed;\n\t// placeholder to check eth raised amount \n\tuint256 public ethRaised = 0;\n\t// placeholder variable to check address \n\taddress public checkaddress;\n\n \n    // events \n    event CreateToken(address indexed _to, uint256 _value);\n    event Transfer(address from, address to, uint256 value);\n    event TokenSaleFinished\n      (\n        uint256 totalSupply\n  \t);\n    event PrivateEquityReserveBlock(uint256 _value);\n    // constructor\n    constructor (\t\t\n       \taddress _ethFundDeposit,\n       \taddress _bugFundDeposit,\n\t\taddress _b66AdvisorFundDeposit,\t\n\t\taddress _b66ReserveFundDeposit\n\n        \t) public {\n        \t\n\t\ttokenSaleActive = true;                   \n\t\thaltIco = true;\n\t\tprivateEquityClaimed=false;\t\n\t\trequire(_ethFundDeposit != address(0));\n\t\trequire(_bugFundDeposit != address(0));\t\n\t\trequire(_b66AdvisorFundDeposit != address(0));\n\t\trequire(_b66ReserveFundDeposit != address(0));\n\t\t\n\t\tethFundDeposit = _ethFundDeposit;\n\t\tb66ReserveFundDeposit=_b66ReserveFundDeposit;\n\t\tbugFundDeposit = _bugFundDeposit;\n\t\tbalances[bugFundDeposit] = bugFund;    // Deposit bug funds\n\t\temit CreateToken(bugFundDeposit, bugFund);  // logs bug funds\n\t\ttotalSupply = SafeMath.add(totalSupply, bugFund);  \n\t\tb66AdvisorFundDeposit = _b66AdvisorFundDeposit;\t\t\t\t\n\t\tbalances[b66AdvisorFundDeposit] = b66AdvisorFundDepositAmt;     \n\t\temit CreateToken(b66AdvisorFundDeposit, b66AdvisorFundDepositAmt); \n\t\t\n\t\ttotalSupply = SafeMath.add(totalSupply, b66AdvisorFundDepositAmt);  \t\t\t\t\n\t\tpaused = true;\n    }\n\n    \n\t\n    /// @dev Accepts ether and creates new tge tokens.\n    function createTokens() payable external {\n      if (!tokenSaleActive) \n        revert();\n\t  if (haltIco) \n\t    revert();\n\t  \n      if (msg.value == 0) \n        revert();\n      uint256 tokens;\n      tokens = SafeMath.mul(msg.value, icoTokenExchangeRate); // check that we're not over totals\n      uint256 checkedSupply = SafeMath.add(totalSupply, tokens);\n \n      // return money if something goes wrong\n      if (tokenCreationCap < checkedSupply) \n        revert();  // odd fractions won't be found\n \n      totalSupply = checkedSupply;\n      balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\n      emit CreateToken(msg.sender, tokens);  // logs token creation\n    }  \n\t \n\t\n    function mint(address _privSaleAddr,uint _privFundAmt) onlyAuthorized external {\n    \t  require(tokenSaleActive == true);\n\t  uint256 privToken = _privFundAmt*10**decimals;\n          uint256 checkedSupply = SafeMath.add(totalSupply, privToken);     \n          // return money if something goes wrong\n          if (tokenCreationCap < checkedSupply) \n            revert();  // odd fractions won't be found     \n          totalSupply = checkedSupply;\n          balances[_privSaleAddr] += privToken;  // safeAdd not needed; bad semantics to use here\t\t  \n          emit CreateToken (_privSaleAddr, privToken);  // logs token creation\n    }\n    \n  \n    \n    function setIcoTokenExchangeRate (uint _icoTokenExchangeRate) onlyOwner external {\t\t\n    \ticoTokenExchangeRate = _icoTokenExchangeRate;            \n    }\n        \n\n    function setHaltIco(bool _haltIco) onlyOwner external {\n\thaltIco = _haltIco;            \n    }\n\n\t// 5760 blocks in a day : 2102400 blocks in a year:: locked till 9/1/2019\n     function vestPartnerEquityReserve() onlyOwner external {\n        emit  PrivateEquityReserveBlock(block.number);\n        require(!privateEquityClaimed);\n        //TODO need to put the right block number\n     \trequire(block.number > 8357500);\n\tbalances[b66ReserveFundDeposit] = b66ReserveTokens;     \n    \temit CreateToken(b66ReserveFundDeposit, b66ReserveTokens);          \n    \ttotalSupply = SafeMath.add(totalSupply, b66ReserveTokens);  // logs token creation  \n    \tprivateEquityClaimed=true;\n    }\n    \n    function setReserveFundDepositAddress(address _b66ReserveFundDeposit) onlyOwner external {\n    \t  require(_b66ReserveFundDeposit != address(0));\n          b66ReserveFundDeposit=_b66ReserveFundDeposit;\n    } \n    \n     /// @dev Ends the funding period and sends the ETH home\n    function sendFundHome() onlyOwner external {  // move to operational\n      if (!ethFundDeposit.send(address(this).balance)) \n        revert();  // send the eth to tge International\n    } \n\t\n    function sendFundHomeAmt(uint _amt) onlyOwner external {\n      if (!ethFundDeposit.send(_amt*10**decimals)) \n        revert();  // send the eth to tge International\n    }    \n    \n      function toggleDead()\n          external\n          onlyOwner\n          returns (bool)\n        {\n          dead = !dead;\n      }\n     \n        function endIco() onlyOwner external { // end ICO\n          // ensure that sale is active. is set to false at the end. can only be performed once.\n          require(tokenSaleActive == true);\n          tokenSaleActive = false;\n    \t // dispatch event showing sale is finished\n    \t    emit TokenSaleFinished(\n    \t      totalSupply\n        );\n        }  \n    \n     // fallback function - do not allow any eth transfers to this contract\n      function()\n        external\n      {\n        revert();\n  \t}\n  \t\n  \t\n\t/// @dev Ends the funding period and sends the ETH home\n\tfunction checkEthRaised() onlyAuthorized external returns(uint256 balance) {\n\tethRaised = address(this).balance;\n\treturn ethRaised;  \n\t} \n\t \n\n\t/// @dev Ends the funding period and sends the ETH home\n\tfunction checkEthFundDepositAddress() onlyAuthorized external returns(address) {\n\t  checkaddress = ethFundDeposit;\n\t  return checkaddress;  \n\t} \n}",
  "bytecode": "60806040526005805460ff191690556102cb6009556af8277896582678ac000000600a55600b805462ff0000191690556000600c553480156200004157600080fd5b50604051608080620016ff8339810160409081528151602080840151838501516060909501516003805433600160a060020a031990911681179091556000908152600490935293909120805460ff199081166001908117909255600b8054610100921690921761ff0019161763ff0000001916905590929091600160a060020a0384161515620000d057600080fd5b600160a060020a0383161515620000e657600080fd5b600160a060020a0382161515620000fc57600080fd5b600160a060020a03811615156200011257600080fd5b6005805461010060a860020a031916610100600160a060020a03878116919091029190911790915560088054600160a060020a031990811684841617909155600680549091168583161780825582166000908152600160209081526040918290206a0b2abc7767ce87fd800000908190559254825193845291519190931692600080516020620016df833981519152928290030190a2600054620001d0906a0b2abc7767ce87fd8000006401000000006200132f6200028082021704565b600090815560078054600160a060020a031916600160a060020a038581169190911780835581168352600160209081526040938490206a0b2abc7767ce87fd800000908190559254845193845293519390911692600080516020620016df8339815191529281900390910190a260005462000265906a0b2abc7767ce87fd8000006401000000006200132f6200028082021704565b60005550506005805460ff1916600117905550620002949050565b818101828110156200028e57fe5b92915050565b61143b80620002a46000396000f30060806040526004361061020e5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630265190c811461022057806302c95d2d1461024757806306df6cf01461026357806306fdde0314610278578063095ea7b3146103025780630b39aaa91461033a5780630c9dc2b81461034f57806318160ddd146103805780631b5c763e146103955780631f45006c146103b657806323b872dd146103cb57806327e235e3146103f55780632fd5ecda14610416578063313ce5671461042b57806336cf7c8714610440578063370014f2146104555780633f4ba83a1461046a57806340c10f191461047f57806342966c68146104a35780635acb053b146104bb5780635c658165146104d05780635c975abb146104f757806367e0d78f1461050c5780636840c67d146105245780636f7920fd1461053957806370a082311461054e578063711bf9b21461056f57806379cc6790146105955780637c3382ae146105b95780638456cb59146105d15780638da5cb5b146105e657806395d89b41146105fb578063a9059cbb14610610578063b442726314610634578063b91816111461063c578063bac7bb9f1461065d578063d1153f2514610416578063d65a418414610672578063dd62ed3e14610687578063e489c5ff146106ae578063e657807b146106c3578063f2fde38b146106d8578063fddf0fc0146106f9575b34801561021a57600080fd5b50600080fd5b34801561022c57600080fd5b5061023561070e565b60408051918252519081900360200190f35b34801561025357600080fd5b50610261600435151561071d565b005b34801561026f57600080fd5b5061023561074e565b34801561028457600080fd5b5061028d610754565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102c75781810151838201526020016102af565b50505050905090810190601f1680156102f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561030e57600080fd5b50610326600160a060020a036004351660243561078b565b604080519115158252519081900360200190f35b34801561034657600080fd5b506103266107b1565b34801561035b57600080fd5b506103646107c1565b60408051600160a060020a039092168252519081900360200190f35b34801561038c57600080fd5b50610235610817565b3480156103a157600080fd5b50610261600160a060020a036004351661081d565b3480156103c257600080fd5b50610235610878565b3480156103d757600080fd5b50610326600160a060020a03600435811690602435166044356108a1565b34801561040157600080fd5b50610235600160a060020a03600435166108c7565b34801561042257600080fd5b506102356108d9565b34801561043757600080fd5b506102356108e8565b34801561044c57600080fd5b506103266108ed565b34801561046157600080fd5b506102616108fc565b34801561047657600080fd5b50610261610950565b34801561048b57600080fd5b50610261600160a060020a03600435166024356109ad565b3480156104af57600080fd5b50610261600435610a6b565b3480156104c757600080fd5b50610326610b4c565b3480156104dc57600080fd5b50610235600160a060020a0360043581169060243516610b86565b34801561050357600080fd5b50610326610ba3565b34801561051857600080fd5b50610261600435610bac565b34801561053057600080fd5b50610261610c0a565b34801561054557600080fd5b50610235610d12565b34801561055a57600080fd5b50610235600160a060020a0360043516610d18565b34801561057b57600080fd5b50610261600160a060020a03600435166024351515610d33565b3480156105a157600080fd5b50610261600160a060020a0360043516602435610dad565b3480156105c557600080fd5b50610261600435610eca565b3480156105dd57600080fd5b50610261610ee6565b3480156105f257600080fd5b50610364610f45565b34801561060757600080fd5b5061028d610f54565b34801561061c57600080fd5b50610326600160a060020a0360043516602435610f8b565b610261610fa8565b34801561064857600080fd5b50610326600160a060020a036004351661105e565b34801561066957600080fd5b50610364611073565b34801561067e57600080fd5b50610326611082565b34801561069357600080fd5b50610235600160a060020a036004358116906024351661108b565b3480156106ba57600080fd5b506103266110b6565b3480156106cf57600080fd5b506102616110c4565b3480156106e457600080fd5b50610261600160a060020a0360043516611130565b34801561070557600080fd5b506102356111c5565b6a7226a2fd7a7818ca00000081565b600354600160a060020a0316331461073457600080fd5b600b80549115156101000261ff0019909216919091179055565b60095481565b60408051808201909152600781527f426c6f636b363600000000000000000000000000000000000000000000000000602082015281565b60055460009060ff161561079e57600080fd5b6107a883836111cb565b90505b92915050565b600b546301000000900460ff1681565b3360009081526004602052604081205460ff1615156107df57600080fd5b50600554600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03610100909304831617908190551690565b60005481565b600354600160a060020a0316331461083457600080fd5b600160a060020a038116151561084957600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b3360009081526004602052604081205460ff16151561089657600080fd5b503031600c81905590565b60055460009060ff16156108b457600080fd5b6108bf84848461126d565b949350505050565b60016020526000908152604090205481565b6a0b2abc7767ce87fd80000081565b601281565b600b5462010000900460ff1681565b600354600160a060020a0316331461091357600080fd5b600554604051600160a060020a036101009092049190911690303180156108fc02916000818181858888f19350505050151561094e57600080fd5b565b600354600160a060020a0316331461096757600080fd5b60055460ff16151561097857600080fd5b6005805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b33600090815260046020526040812054819060ff1615156109cd57600080fd5b600b5460ff1615156001146109e157600080fd5b600054670de0b6b3a7640000840292506109fb908361132f565b905080600a541015610a0c57600080fd5b6000818155600160a060020a038516808252600160209081526040928390208054860190558251858152925191927fb378e89b40ac5bbe0e2241b596fbe1adc3cf1fb7c982aa1b4560165cf264ee93929081900390910190a250505050565b6000808211610a7957600080fd5b33600090815260016020526040902054821115610a9557600080fd5b5033600081815260016020526040902054610ab0908361133c565b600160a060020a03821660009081526001602052604081209190915554610ad7908361133c565b6000908155604080518481529051600160a060020a038416916000805160206113f0833981519152919081900360200190a3604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b600354600090600160a060020a03163314610b6657600080fd5b600b805462ff0000198116620100009182900460ff161590910217905590565b600260209081526000928352604080842090915290825290205481565b60055460ff1681565b600354600160a060020a03163314610bc357600080fd5b600554604051600160a060020a036101009092049190911690670de0b6b3a7640000830280156108fc02916000818181858888f193505050501515610c0757600080fd5b50565b600354600160a060020a03163314610c2157600080fd5b6040805143815290517f2f1f1d1a75000a95dd6dbb4afc61796ab795d8fa72184415f74a71179fd92b679181900360200190a1600b546301000000900460ff1615610c6b57600080fd5b627f867c4311610c7a57600080fd5b60088054600160a060020a039081166000908152600160209081526040918290206a7226a2fd7a7818ca0000009081905593548251948552915191909216927fb378e89b40ac5bbe0e2241b596fbe1adc3cf1fb7c982aa1b4560165cf264ee9392908290030190a2600054610cfa906a7226a2fd7a7818ca00000061132f565b600055600b805463ff00000019166301000000179055565b600a5481565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a03163314610d4a57600080fd5b60405181151590600160a060020a038416907f5056a36abc1db1625034fdf114a164a0345b3ccf992fc1d51055e017375f473290600090a3600160a060020a03919091166000908152600460205260409020805460ff1916911515919091179055565b600354600160a060020a03163314610dc457600080fd5b600160a060020a0382161515610dd957600080fd5b60008111610de657600080fd5b600160a060020a038216600090815260016020526040902054811115610e0b57600080fd5b600160a060020a038216600090815260016020526040902054610e2e908261133c565b600160a060020a03831660009081526001602052604081209190915554610e55908261133c565b6000908155604080518381529051600160a060020a038516916000805160206113f0833981519152919081900360200190a3604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b600354600160a060020a03163314610ee157600080fd5b600955565b600354600160a060020a03163314610efd57600080fd5b60055460ff1615610f0d57600080fd5b6005805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b60408051808201909152600381527f4236360000000000000000000000000000000000000000000000000000000000602082015281565b60055460009060ff1615610f9e57600080fd5b6107a8838361134e565b600b54600090819060ff161515610fbe57600080fd5b600b54610100900460ff1615610fd357600080fd5b341515610fdf57600080fd5b610feb346009546113c6565b9150610ff96000548361132f565b905080600a54101561100a57600080fd5b600081815533808252600160209081526040928390208054860190558251858152925191927fb378e89b40ac5bbe0e2241b596fbe1adc3cf1fb7c982aa1b4560165cf264ee93929081900390910190a25050565b60046020526000908152604090205460ff1681565b600d54600160a060020a031681565b600b5460ff1681565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600b54610100900460ff1681565b600354600160a060020a031633146110db57600080fd5b600b5460ff1615156001146110ef57600080fd5b600b805460ff1916905560005460408051918252517f74644819b241f24ad4587dcd138db78a4e24efce9ef291a6b41c9b3379c5ce209181900360200190a1565b600354600160a060020a0316331461114757600080fd5b600160a060020a038116151561115c57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600c5481565b60008115806111fb5750336000908152600260209081526040808320600160a060020a0387168452909152902054155b151561120657600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b3360009081526001602052604081205482111561128957600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156112b957600080fd5b600160a060020a03808416600081815260016020908152604080832080548801905593881680835284832080548890039055600282528483203384528252918490208054879003905583518681529351929391926000805160206113f08339815191529281900390910190a35060019392505050565b818101828110156107ab57fe5b60008282111561134857fe5b50900390565b3360009081526001602052604081205482111561136a57600080fd5b33600081815260016020908152604080832080548790039055600160a060020a03871680845292819020805487019055805186815290519293926000805160206113f0833981519152929181900390910190a350600192915050565b60008215156113d7575060006107ab565b508181028183828115156113e757fe5b04146107ab57fe00ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582009f1990dbd4b3feca94fb56a8448dd79d704e454a2c3e8c70b8e0c6689e8e7010029b378e89b40ac5bbe0e2241b596fbe1adc3cf1fb7c982aa1b4560165cf264ee93000000000000000000000000e116f98826ac491169c36b5acbc6c2f25b0141a80000000000000000000000005f8ae70c5144b23b09f7a08b72866a311e0a4374000000000000000000000000800e3f065101e56fdede823f40d4a4f90f8b363a000000000000000000000000a86445284d58bf89636109be4b3441d6ca16555e",
  "constructorArguments": "000000000000000000000000e116f98826ac491169c36b5acbc6c2f25b0141a80000000000000000000000005f8ae70c5144b23b09f7a08b72866a311e0a4374000000000000000000000000800e3f065101e56fdede823f40d4a4f90f8b363a000000000000000000000000a86445284d58bf89636109be4b3441d6ca16555e"
}