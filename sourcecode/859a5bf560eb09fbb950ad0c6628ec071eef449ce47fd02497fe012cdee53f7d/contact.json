{
  "address": "0x20da2ff263e28e8db8ef44f590ff4576bac770e2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MilFold",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-09\n*/\n\npragma solidity ^0.4.24;\n\ninterface MilAuthInterface {\n    function requiredSignatures() external view returns(uint256);\n    function requiredDevSignatures() external view returns(uint256);\n    function adminCount() external view returns(uint256);\n    function devCount() external view returns(uint256);\n    function adminName(address _who) external view returns(bytes32);\n    function isAdmin(address _who) external view returns(bool);\n    function isDev(address _who) external view returns(bool);\n    function checkGameRegiester(address _gameAddr) external view returns(bool);\n    function checkGameClosed(address _gameAddr) external view returns(bool);\n}\ninterface MillionaireInterface {\n    function invest(address _addr, uint256 _affID, uint256 _mfCoin, uint256 _general) external payable;\n    function updateGenVaultAndMask(address _addr, uint256 _affID) external payable;\n    function clearGenVaultAndMask(address _addr, uint256 _affID, uint256 _eth, uint256 _milFee) external;\n    function assign(address _addr) external payable;\n    function splitPot() external payable;   \n}\ninterface MilFoldInterface {\n    function addPot() external payable;\n    function activate() external;    \n}\n\ncontract Milevents {\n\n    // fired whenever a player registers\n    event onNewPlayer\n    (\n        address indexed playerAddress,\n        uint256 playerID,\n        uint256 timeStamp\n    );\n\n    // fired at end of buy or reload\n    event onEndTx\n    (\n        uint256 rid,                    //current round id\n        address indexed buyerAddress,   //buyer address\n        uint256 compressData,           //action << 96 | time << 64 | drawCode << 32 | txAction << 8 | roundState\n        uint256 eth,                    //buy amount\n        uint256 totalPot,               //current total pot\n        uint256 tickets,                //buy tickets\n        uint256 timeStamp               //buy time\n    );\n\n    // fired at end of buy or reload\n    event onGameClose\n    (\n        address indexed gameAddr,       //game address\n        uint256 amount,                 //split eth amount\n        uint256 timeStamp               //close time\n    );\n\n    // fired at time who satisfy the reward condition\n    event onReward\n    (\n        address indexed         rewardAddr,     //reward address\n        Mildatasets.RewardType  rewardType,     //rewardType\n        uint256 amount                          //reward amount\n    );\n\n\t// fired whenever theres a withdraw\n    event onWithdraw\n    (\n        address indexed playerAddress,\n        uint256 ethOut,\n        uint256 timeStamp\n    );\n\n    event onAffiliatePayout\n    (\n        address indexed affiliateAddress,\n        address indexed buyerAddress,\n        uint256 eth,\n        uint256 timeStamp\n    );\n\n    // fired at every ico\n    event onICO\n    (\n        address indexed buyerAddress,   //user address who buy ico\n        uint256 buyAmount,              //buy ico amount\n        uint256 buyMf,                  //eth exchange mfcoin amount\n        uint256 totalIco,               //now total ico amount\n        bool    ended                   //is ico ended\n    );\n\n    // fired whenever an player win the playround\n    event onPlayerWin(\n        address indexed addr,\n        uint256 roundID,\n        uint256 winAmount,\n        uint256 winNums\n    );\n\n    event onClaimWinner(\n        address indexed addr,\n        uint256 winnerNum,\n        uint256 totalNum\n    );\n\n    event onBuyMFCoins(\n        address indexed addr,\n        uint256 ethAmount,\n        uint256 mfAmount,\n        uint256 timeStamp\n    );\n\n    event onSellMFCoins(\n        address indexed addr,\n        uint256 ethAmount,\n        uint256 mfAmount,\n        uint256 timeStamp\n    );\n\n    event onUpdateGenVault(\n        address indexed addr,\n        uint256 mfAmount,\n        uint256 genAmount,\n        uint256 ethAmount\n    );\n}\n\ncontract MilFold is MilFoldInterface,Milevents {\n    using SafeMath for *;\n\n//==============================================================================\n//     _ _  _  |`. _     _ _ |_ | _  _  .\n//    (_(_)| |~|~|(_||_|| (_||_)|(/__\\  .  (game settings)\n//=================_|===========================================================\n    uint256     constant private    rndMax_ = 90000;                                        // max length a round timer can be\n    uint256     constant private    claimMax_ = 43200;                                      // max limitation period to claim winned\n    address     constant private    fundAddr_ = 0xB0c7Dc00E8A74c9dEc8688EFb98CcB2e24584E3B; // foundation address\n    uint256     constant private    MIN_ETH_BUYIN = 0.002 ether;                            // min buy amount\n    uint256     constant private    COMMON_REWARD_AMOUNT = 0.01 ether;                      // reward who end round or draw the game\n    uint256     constant private    CLAIM_WINNER_REWARD_AMOUNT = 1 ether;                   // reward who claim an winner\n    uint256     constant private    MAX_WIN_AMOUNT = 5000 ether;                            // max win amount every round;\n\n    uint256     private             rID_;                                                   // current round;\n    uint256     private             lID_;                                                   // last round;\n    uint256     private             lBlockNumber_;                                          // last round end block number;\n    bool        private             activated_;                                             // mark contract is activated;\n    \n    MillionaireInterface constant private millionaire_ = MillionaireInterface(0x98BDbc858822415C626c13267594fbC205182A1F);\n    MilAuthInterface constant private milAuth_ = MilAuthInterface(0xf856f6a413f7756FfaF423aa2101b37E2B3aFFD9);\n\n    mapping (address => uint256) private playerTickets_;                                    // (addr => tickets) returns player tickets\n    mapping (uint256 => Mildatasets.Round) private round_;                                  // (rID => data) returns round data\n    mapping (uint256 => mapping(address => uint256[])) private playerTicketNumbers_;        // (rID => address => data) returns round data\n    mapping (address => uint256) private playerWinTotal_;                                   // (addr => eth) returns total winning eth\n\n//==============================================================================\n//     _ _  _  _|. |`. _  _ _  .\n//    | | |(_)(_||~|~|(/_| _\\  .  (these are safety checks)\n//==============================================================================\n    /**\n     * @dev used to make sure no one can interact with contract until it has\n     * been activated.\n     */\n    modifier isActivated() {\n        require(activated_ == true, \"it's not ready yet\");\n        _;\n    }\n\n    /**\n     * @dev prevents contracts from interacting with milfold,except constructor\n     */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n\n    /**\n     * @dev sets boundaries for incoming tx\n     */\n    modifier isWithinLimits(uint256 _eth) {\n        require(_eth >= MIN_ETH_BUYIN, \"can't be less anymore\");\n        _;\n    }\n\n    /**\n     * @dev check sender must be devs\n     */\n    modifier onlyDevs()\n    {\n        require(milAuth_.isDev(msg.sender) == true, \"msg sender is not a dev\");\n        _;\n    }\n\n    /**\n     * @dev used to make sure the paid is sufficient to buy tickets.\n     * @param _eth the eth you want pay for\n     * @param _num the numbers you want to buy\n     */\n    modifier inSufficient(uint256 _eth, uint256[] _num) {\n        uint256 totalTickets = _num.length;\n        require(_eth >= totalTickets.mul(500)/1 ether, \"insufficient to buy the very tickets\");\n        _;\n    }\n\n    /**\n     * @dev used to make sure the paid is sufficient to buy tickets.\n     * @param _eth the eth you want pay for\n     * @param _startNums the start numbers you want to buy\n     * @param _endNums the end numbers you want to to buy\n     */\n    modifier inSufficient2(uint256 _eth, uint256[] _startNums, uint256[] _endNums) {\n        uint256 totalTickets = calcSectionTickets(_startNums, _endNums);\n        require(_eth >= totalTickets.mul(500)/1 ether, \"insufficient to buy the very tickets\");\n        _;\n    }\n\n    /**\n     * @dev deposit to contract\n     */\n    function() public isActivated() payable {\n        addPot();\n    }\n\n    /**\n     * @dev buy tickets with pay eth\n     * @param _affID the id of the player who gets the affiliate fee\n     */\n    function buyTickets(uint256 _affID)\n        public\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value)\n        payable\n    {\n        uint256 compressData = checkRoundAndDraw(msg.sender);\n        buyCore(msg.sender, _affID, msg.value);\n\n        emit onEndTx(\n            rID_,\n            msg.sender,\n            compressData,\n            msg.value,\n            round_[rID_].pot,\n            playerTickets_[msg.sender],\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev direct buy nums with pay eth in express way\n     * @param _affID the id of the player who gets the affiliate fee\n     * @param _nums which nums you buy, less than 10\n     */\n    function expressBuyNums(uint256 _affID, uint256[] _nums)\n        public\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value)\n        inSufficient(msg.value, _nums)\n        payable\n    {\n        uint256 compressData = checkRoundAndDraw(msg.sender);\n        buyCore(msg.sender, _affID, msg.value);\n        convertCore(msg.sender, _nums.length, TicketCompressor.encode(_nums));\n\n        emit onEndTx(\n            rID_,\n            msg.sender,\n            compressData,\n            msg.value,\n            round_[rID_].pot,\n            playerTickets_[msg.sender],\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev direct buy section nums with pay eth in express way\n     * @param _affID the id of the player who gets the affiliate fee\n     * @param _startNums  section nums,start\n     * @param _endNums section nums,end\n     */\n    function expressBuyNumSec(uint256 _affID, uint256[] _startNums, uint256[] _endNums)\n        public\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value)\n        inSufficient2(msg.value, _startNums, _endNums)\n        payable\n    {\n        uint256 compressData = checkRoundAndDraw(msg.sender);\n        buyCore(msg.sender, _affID, msg.value);\n        convertCore(\n            msg.sender,\n            calcSectionTickets(_startNums, _endNums),\n            TicketCompressor.encode(_startNums, _endNums)\n        );\n\n        emit onEndTx(\n            rID_,\n            msg.sender,\n            compressData,\n            msg.value,\n            round_[rID_].pot,\n            playerTickets_[msg.sender],\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev buy tickets with use your vaults\n     * @param _affID the id of the player who gets the affiliate fee\n     * @param _eth the vaults you want pay for\n     */\n    function reloadTickets(uint256 _affID, uint256 _eth)\n        public\n        isActivated()\n        isHuman()\n        isWithinLimits(_eth)\n    {\n        uint256 compressData = checkRoundAndDraw(msg.sender);\n        reloadCore(msg.sender, _affID, _eth);\n\n        emit onEndTx(\n            rID_,\n            msg.sender,\n            compressData,\n            _eth,\n            round_[rID_].pot,\n            playerTickets_[msg.sender],\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev direct buy nums with use your vaults in express way\n     * @param _affID the id of the player who gets the affiliate fee\n     * @param _eth the vaults you want pay for\n     * @param _nums which nums you buy, no more than 10\n     */\n    function expressReloadNums(uint256 _affID, uint256 _eth, uint256[] _nums)\n        public\n        isActivated()\n        isHuman()\n        isWithinLimits(_eth)\n        inSufficient(_eth, _nums)\n    {\n        uint256 compressData = checkRoundAndDraw(msg.sender);\n        reloadCore(msg.sender, _affID, _eth);\n        convertCore(msg.sender, _nums.length, TicketCompressor.encode(_nums));\n\n        emit onEndTx(\n            rID_,\n            msg.sender,\n            compressData,\n            _eth,\n            round_[rID_].pot,\n            playerTickets_[msg.sender],\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev direct buy section nums with use your vaults in express way\n     * @param _affID the id of the player who gets the affiliate fee\n     * @param _eth the vaults you want pay for\n     * @param _startNums  section nums, start\n     * @param _endNums section nums, end\n     */\n    function expressReloadNumSec(uint256 _affID, uint256 _eth, uint256[] _startNums, uint256[] _endNums)\n        public\n        isActivated()\n        isHuman()\n        isWithinLimits(_eth)\n        inSufficient2(_eth, _startNums, _endNums)\n    {\n        uint256 compressData = checkRoundAndDraw(msg.sender);\n        reloadCore(msg.sender, _affID, _eth);\n        convertCore(msg.sender, calcSectionTickets(_startNums, _endNums), TicketCompressor.encode(_startNums, _endNums));\n\n        emit onEndTx(\n            rID_,\n            msg.sender,\n            compressData,\n            _eth,\n            round_[rID_].pot,\n            playerTickets_[msg.sender],\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev convert to nums with you consume tickets\n     * @param nums which nums you buy, no more than 10\n     */\n    function convertNums(uint256[] nums) public {\n        uint256 compressData = checkRoundAndDraw(msg.sender);\n        convertCore(msg.sender, nums.length, TicketCompressor.encode(nums));\n\n        emit onEndTx(\n            rID_,\n            msg.sender,\n            compressData,\n            0,\n            round_[rID_].pot,\n            playerTickets_[msg.sender],\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev convert to section nums with you consume tickets\n     * @param startNums  section nums, start\n     * @param endNums section nums, end\n     */\n    function convertNumSec(uint256[] startNums, uint256[] endNums) public {\n        uint256 compressData = checkRoundAndDraw(msg.sender);\n        convertCore(msg.sender, calcSectionTickets(startNums, endNums), TicketCompressor.encode(startNums, endNums));\n\n        emit onEndTx(\n            rID_,\n            msg.sender,\n            compressData,\n            0,\n            round_[rID_].pot,\n            playerTickets_[msg.sender],\n            block.timestamp\n        );\n    }\n\n    function buyCore(address _addr, uint256 _affID, uint256 _eth)\n        private\n    {\n        /**\n         * 2% transfer to foundation\n         * 18% transfer to pot\n         * 80% transfer to millionaire, 50% use to convert MFCoin and 30% use to genAndAff\n         */\n        // 1 ticket = 0.002 eth, i.e., tickets = eth * 500\n        playerTickets_[_addr] = playerTickets_[_addr].add(_eth.mul(500)/1 ether);\n\n        // transfer 2% to foundation\n        uint256 foundFee = _eth.div(50);\n        fundAddr_.transfer(foundFee);\n\n        // transfer 80%(50% use to convert MFCoin and 30% use to genAndAff) amount to millionaire\n        uint256 milFee = _eth.mul(80).div(100);\n\n        millionaire_.updateGenVaultAndMask.value(milFee)(_addr, _affID);\n\n        round_[rID_].pot = round_[rID_].pot.add(_eth.sub(milFee).sub(foundFee));\n    }\n\n    function reloadCore(address _addr, uint256 _affID, uint256 _eth)\n        private\n    {\n        /**\n         * 2% transfer to foundation\n         * 18% transfer to pot\n         * 80% transfer to millionaire, 50% use to convert MFCoin and 30% use to genAndAff\n         */\n        // transfer 80%(50% use to convert MFCoin and 30% use to genAndAff) amount to millionaire\n        uint256 milFee = _eth.mul(80).div(100);\n        \n        millionaire_.clearGenVaultAndMask(_addr, _affID, _eth, milFee);\n\n        // 1 ticket = 0.002 eth, i.e., tickets = eth * 500\n        playerTickets_[_addr] = playerTickets_[_addr].add(_eth.mul(500)/1 ether);\n\n        // transfer 2% to foundation\n        uint256 foundFee = _eth.div(50);\n        fundAddr_.transfer(foundFee);\n        \n        //game pot will add in default function\n        //round_[rID_].pot = round_[rID_].pot.add(_eth.sub(milFee).sub(foundFee));\n    }\n\n    function convertCore(address _addr, uint256 length, uint256 compressNumber)\n        private\n    {\n        playerTickets_[_addr] = playerTickets_[_addr].sub(length);\n        uint256[] storage plyTicNums = playerTicketNumbers_[rID_][_addr];\n        plyTicNums.push(compressNumber);\n    }\n\n    // in order to draw the MilFold, we have to do all as following\n    // 1. end current round\n    // 2. calculate the draw-code\n    // 3. claim winned\n    // 4. assign to foundation, winners, and migrate the rest to the next round\n\n    function checkRoundAndDraw(address _addr)\n        private\n        returns(uint256)\n    {\n        if (lID_ > 0\n            && round_[lID_].state == Mildatasets.RoundState.STOPPED\n            && (block.number.sub(lBlockNumber_) >= 7)) {\n            // calculate the draw-code\n            round_[lID_].drawCode = calcDrawCode();\n            round_[lID_].claimDeadline = now + claimMax_;\n            round_[lID_].state = Mildatasets.RoundState.DRAWN;\n            round_[lID_].blockNumber = block.number;\n            \n            round_[rID_].roundDeadline = now + rndMax_;\n            \n            if (round_[rID_].pot > COMMON_REWARD_AMOUNT) {\n                round_[rID_].pot = round_[rID_].pot.sub(COMMON_REWARD_AMOUNT);\n                //reward who Draw Code 0.01 ether\n                _addr.transfer(COMMON_REWARD_AMOUNT);\n                \n                emit onReward(_addr, Mildatasets.RewardType.DRAW, COMMON_REWARD_AMOUNT);\n            }\n            return lID_ << 96 | round_[lID_].claimDeadline << 64 | round_[lID_].drawCode << 32 | uint256(Mildatasets.TxAction.DRAW) << 8 | uint256(Mildatasets.RoundState.DRAWN);\n        } else if (lID_ > 0\n            && round_[lID_].state == Mildatasets.RoundState.DRAWN\n            && now > round_[lID_].claimDeadline) {\n            // assign to foundation, winners, and migrate the rest to the next round\n            if (round_[lID_].totalNum > 0) {\n                assignCore();\n            }\n            round_[lID_].state = Mildatasets.RoundState.ASSIGNED;\n            \n            if (round_[rID_].pot > COMMON_REWARD_AMOUNT) {\n                round_[rID_].pot = round_[rID_].pot.sub(COMMON_REWARD_AMOUNT);\n                //reward who Draw Code 0.01 ether\n                _addr.transfer(COMMON_REWARD_AMOUNT);\n                \n                emit onReward(_addr, Mildatasets.RewardType.ASSIGN, COMMON_REWARD_AMOUNT);\n            }\n            return lID_ << 96 | uint256(Mildatasets.TxAction.ASSIGN) << 8 | uint256(Mildatasets.RoundState.ASSIGNED);\n        } else if ((rID_ == 1 || round_[lID_].state == Mildatasets.RoundState.ASSIGNED)\n            && now >= round_[rID_].roundDeadline) {\n            // end current round\n            lID_ = rID_;\n            lBlockNumber_ = block.number;\n            round_[lID_].state = Mildatasets.RoundState.STOPPED;\n\n            rID_ = rID_ + 1;\n\n            // migrate last round pot to this round util last round draw\n            round_[rID_].state = Mildatasets.RoundState.STARTED;\n            if (round_[lID_].pot > COMMON_REWARD_AMOUNT) {\n                round_[rID_].pot = round_[lID_].pot.sub(COMMON_REWARD_AMOUNT);\n                \n                //reward who end round 0.01 ether\n                _addr.transfer(COMMON_REWARD_AMOUNT);\n                \n                emit onReward(_addr, Mildatasets.RewardType.END, COMMON_REWARD_AMOUNT);\n            } else {\n                round_[rID_].pot = round_[lID_].pot;\n            }\n            \n\n            return rID_ << 96 | uint256(Mildatasets.TxAction.ENDROUND) << 8 | uint256(Mildatasets.RoundState.STARTED);\n        } \n        return rID_ << 96 | uint256(Mildatasets.TxAction.BUY) << 8 | uint256(round_[rID_].state);\n    }\n\n    /**\n     * @dev claim the winner identified by the given player's address\n     * @param _addr player's address\n     */\n    function claimWinner(address _addr)\n        public\n        isActivated()\n        isHuman()\n    {\n        require(lID_ > 0 && round_[lID_].state == Mildatasets.RoundState.DRAWN && now <= round_[lID_].claimDeadline, \"it's not time for claiming\");\n        require(round_[lID_].winnerNum[_addr] == 0, \"the winner have been claimed already\");\n\n        uint winNum = 0;\n        uint256[] storage ptns = playerTicketNumbers_[lID_][_addr];\n        for (uint256 j = 0; j < ptns.length; j ++) {\n            (uint256 tType, uint256 tLength, uint256[] memory playCvtNums) = TicketCompressor.decode(ptns[j]);\n            for (uint256 k = 0; k < tLength; k ++) {\n                if ((tType == 1 && playCvtNums[k] == round_[lID_].drawCode) ||\n                    (tType == 2 && round_[lID_].drawCode >= playCvtNums[2 * k] && round_[lID_].drawCode <= playCvtNums[2 * k + 1])) {\n                    winNum++;\n                }\n            }\n        }\n        \n        if (winNum > 0) {\n            if (round_[lID_].winnerNum[_addr] == 0) {\n                round_[lID_].winners.push(_addr);\n            }\n            round_[lID_].totalNum = round_[lID_].totalNum.add(winNum);\n            round_[lID_].winnerNum[_addr] = winNum;\n            \n            uint256 rewardAmount = CLAIM_WINNER_REWARD_AMOUNT.min(round_[lID_].pot.div(200)); //reward who claim winner ,min 1 ether,no more than 1% reward\n            \n            round_[rID_].pot = round_[rID_].pot.sub(rewardAmount);\n            // reward who claim an winner\n            msg.sender.transfer(rewardAmount);\n            emit onReward(msg.sender, Mildatasets.RewardType.CLIAM, COMMON_REWARD_AMOUNT);\n            \n            emit onClaimWinner(\n                _addr,\n                winNum,\n                round_[lID_].totalNum\n            );\n        }\n    }\n\n    function assignCore() private {\n        /**\n         * 2% transfer to foundation\n         * 48% transfer to next round\n         * 50% all winner share 50% pot on condition singal share no more than MAX_WIN_AMOUNT\n         */\n        uint256 lPot = round_[lID_].pot;\n        uint256 totalWinNum = round_[lID_].totalNum;\n        uint256 winShareAmount = (MAX_WIN_AMOUNT.mul(totalWinNum)).min(lPot.div(2));\n        uint256 foundFee = lPot.div(50);\n\n        fundAddr_.transfer(foundFee);\n\n        uint256 avgShare = winShareAmount / totalWinNum;\n        for (uint256 idx = 0; idx < round_[lID_].winners.length; idx ++) {\n            address addr = round_[lID_].winners[idx];\n            uint256 num = round_[lID_].winnerNum[round_[lID_].winners[idx]];\n            uint256 amount = round_[lID_].winnerNum[round_[lID_].winners[idx]].mul(avgShare);\n\n            millionaire_.assign.value(amount)(addr);\n            playerWinTotal_[addr] = playerWinTotal_[addr].add(amount);\n\n            emit onPlayerWin(addr, lID_, amount, num);\n        }\n\n        round_[rID_].pot = round_[rID_].pot.sub(winShareAmount).sub(foundFee);\n    }\n\n    function calcSectionTickets(uint256[] startNums, uint256[] endNums)\n        private\n        pure\n        returns(uint256)\n    {\n        require(startNums.length == endNums.length, \"tickets length invalid\");\n        uint256 totalTickets = 0;\n        uint256 tickets = 0;\n        for (uint256 i = 0; i < startNums.length; i ++) {\n            tickets = endNums[i].sub(startNums[i]).add(1);\n            totalTickets = totalTickets.add(tickets);\n        }\n        return totalTickets;\n    }\n\n    function calcDrawCode() private view returns(uint256) {\n        return uint256(keccak256(abi.encodePacked(\n\n            ((uint256(keccak256(abi.encodePacked(blockhash(block.number))))) / (block.timestamp)).add\n            ((uint256(keccak256(abi.encodePacked(blockhash(block.number - 1))))) / (block.timestamp)).add\n            ((uint256(keccak256(abi.encodePacked(blockhash(block.number - 2))))) / (block.timestamp)).add\n            ((uint256(keccak256(abi.encodePacked(blockhash(block.number - 3))))) / (block.timestamp)).add\n            ((uint256(keccak256(abi.encodePacked(blockhash(block.number - 4))))) / (block.timestamp)).add\n            ((uint256(keccak256(abi.encodePacked(blockhash(block.number - 5))))) / (block.timestamp)).add\n            ((uint256(keccak256(abi.encodePacked(blockhash(block.number - 6))))) / (block.timestamp))\n\n        ))) % 10000000;\n\n    }\n\n    function activate() public {\n        // only millionaire can activate\n        require(msg.sender == address(millionaire_), \"only contract millionaire can activate\");\n\n        // can only be ran once\n        require(activated_ == false, \"MilFold already activated\");\n\n        // activate the contract\n        activated_ = true;\n\n        // lets start first round\n        rID_ = 1;\n        round_[1].roundDeadline = now + rndMax_;\n        round_[1].state = Mildatasets.RoundState.STARTED;\n        // round_[0].pot refers to initial pot from ico phase\n        round_[1].pot = round_[0].pot;\n    }\n\n    function addPot()\n        public\n        payable {\n        require(milAuth_.checkGameClosed(address(this)) == false, \"game already closed\");\n        require(msg.value > 0, \"add pot failed\");\n        round_[rID_].pot = round_[rID_].pot.add(msg.value);\n    }\n\n    function close()\n        public\n        isActivated\n        onlyDevs {\n        require(milAuth_.checkGameClosed(address(this)), \"game no closed\");\n        activated_ = false;\n        millionaire_.splitPot.value(address(this).balance)();\n    }\n\n    /**\n     * @dev return players's total winning eth\n     * @param _addr player's address\n     * @return player's total tickets\n     * @return player's total winning eth\n     */\n    function getPlayerAccount(address _addr)\n        public\n        view\n        returns(uint256, uint256)\n    {\n        return (playerTickets_[_addr], playerWinTotal_[_addr]);\n    }\n\n    /**\n     * @dev return numbers in the round\n     * @param _rid round id\n     * @param _addr player's address\n     * @return player's numbers\n     */\n    function getPlayerRoundNums(uint256 _rid, address _addr)\n        public\n        view\n        returns(uint256[])\n    {\n        return playerTicketNumbers_[_rid][_addr];\n    }\n\n    /**\n     * @dev return player's winning information in the round\n     * @return winning numbers\n     * @param _rid round id\n     * @param _addr player's address\n     */\n    function getPlayerRoundWinningInfo(uint256 _rid, address _addr)\n        public\n        view\n        returns(uint256)\n    {\n        Mildatasets.RoundState state = round_[_rid].state;\n        if (state >= Mildatasets.RoundState.UNKNOWN && state < Mildatasets.RoundState.DRAWN) {\n            return 0;\n        } else if (state == Mildatasets.RoundState.ASSIGNED) {\n            return round_[_rid].winnerNum[_addr];\n        } else {\n            // only drawn but not assigned, we need to query the player's winning numbers\n            uint256[] storage ptns = playerTicketNumbers_[_rid][_addr];\n            uint256 nums = 0;\n            for (uint256 j = 0; j < ptns.length; j ++) {\n                (uint256 tType, uint256 tLength, uint256[] memory playCvtNums) = TicketCompressor.decode(ptns[j]);\n                for (uint256 k = 0; k < tLength; k ++) {\n                    if ((tType == 1 && playCvtNums[k] == round_[_rid].drawCode) ||\n                        (tType == 2 && round_[_rid].drawCode >= playCvtNums[2 * k] && round_[lID_].drawCode <= playCvtNums[2 * k + 1])) {\n                        nums ++;\n                    }\n                }\n            }\n\n            return nums;\n        }\n    }\n\n    /**\n     * @dev check player is claim in round\n     * @param _rid round id\n     * @param _addr player address\n     * @return true is claimed else false\n     */\n    function checkPlayerClaimed(uint256 _rid, address _addr)\n        public\n        view\n        returns(bool) {\n        return round_[_rid].winnerNum[_addr] > 0;\n    }\n\n    /**\n     * @dev return current round information\n     * @return round id\n     * @return last round state\n     *      1. current round started\n     *      2. current round stopped(wait for drawing code)\n     *      3. drawn code(wait for claiming winners)\n     *      4. assigned to foundation, winners, and migrate the rest to the next round)\n     * @return round end time\n     * @return last round claiming time\n     * @return round pot\n     */\n    function getCurrentRoundInfo()\n        public\n        view\n        returns(uint256, uint256, uint256, uint256, uint256)\n    {\n        return (\n            rID_,\n            uint256(round_[lID_].state),\n            round_[rID_].roundDeadline,\n            round_[lID_].claimDeadline,\n            round_[rID_].pot\n        );\n    }\n\n    /**\n     * @dev return history round information\n     * @param _rid round id\n     * @return items include as following\n     *  round state\n     *      1. current round started\n     *      2. current round stopped(wait for drawing code)\n     *      3. drawn code(wait for claiming winners)\n     *      4. assigned to foundation, winners, and migrate the rest to the next round)\n     *  round end time\n     *  winner claim end time\n     *  draw code\n     *  round pot\n     *  draw block number(last one)\n     * @return winners' address\n     * @return winning number\n     */\n    function getHistoryRoundInfo(uint256 _rid)\n        public\n        view\n        returns(uint256[], address[], uint256[])\n    {\n        uint256 length = round_[_rid].winners.length;\n        uint256[] memory numbers = new uint256[](length);\n        if (round_[_rid].winners.length > 0) {\n            for (uint256 idx = 0; idx < length; idx ++) {\n                numbers[idx] = round_[_rid].winnerNum[round_[_rid].winners[idx]];\n            }\n        }\n\n        uint256[] memory items = new uint256[](6);\n        items[0] = uint256(round_[_rid].state);\n        items[1] = round_[_rid].roundDeadline;\n        items[2] = round_[_rid].claimDeadline;\n        items[3] = round_[_rid].drawCode;\n        items[4] = round_[_rid].pot;\n        items[5] = round_[_rid].blockNumber;\n\n        return (items, round_[_rid].winners, numbers);\n    }\n\n}\n\n//==============================================================================\n//   __|_ _    __|_ _  .\n//  _\\ | | |_|(_ | _\\  .\n//==============================================================================\nlibrary Mildatasets {\n\n    // between `DRAWN' and `ASSIGNED', someone need to claim winners.\n    enum RoundState {\n        UNKNOWN,        // aim to differ from normal states\n        STARTED,        // start current round\n        STOPPED,        // stop current round\n        DRAWN,          // draw code\n        ASSIGNED        // assign to foundation, winners, and migrate the rest to the next round\n    }\n\n    // MilFold Transaction Action.\n    enum TxAction {\n        UNKNOWN,        // default\n        BUY,            // buy or reload tickets and so on \n        DRAW,           // draw code of game \n        ASSIGN,         // assign to winners\n        ENDROUND        // end game and start new round\n    }\n\n    // RewardType\n    enum RewardType {\n        UNKNOWN,        // default\n        DRAW,           // draw code\n        ASSIGN,         // assign winner\n        END,            // end game\n        CLIAM           // winner cliam\n    }\n\n    struct Player {\n        uint256 playerID;       // Player id(use to affiliate other player)\n        uint256 eth;            // player eth balance\n        uint256 mask;           // player mask\n        uint256 genTotal;       // general total vault\n        uint256 affTotal;       // affiliate total vault\n        uint256 laff;           // last affiliate id used\n    }\n\n    struct Round {\n        uint256                         roundDeadline;      // deadline to end round\n        uint256                         claimDeadline;      // deadline to claim winners\n        uint256                         pot;                // pot\n        uint256                         blockNumber;        // draw block number(last one)\n        RoundState                      state;              // round state\n        uint256                         drawCode;           // draw code\n        uint256                         totalNum;           // total number\n        mapping (address => uint256)    winnerNum;          // winners' number\n        address[]                       winners;            // winners\n    }\n\n}\n\n/**\n * @title SafeMath v0.1.9\n * @dev Math operations with safety checks that throw on error\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n * - added sqrt\n * - added sq\n * - added pwr\n * - changed asserts to requires with error log outputs\n * - removed div, its useless\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n\n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y)\n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y)\n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n\n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n\n    /**\n     * @dev x to the power of y\n     */\n    function pwr(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else\n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n}\n\nlibrary TicketCompressor {\n\n    uint256 constant private mask = 16777215; //2 ** 24 - 1\n\n    function encode(uint256[] tickets)\n        internal\n        pure\n        returns(uint256)\n    {\n        require((tickets.length > 0) && (tickets.length <= 10), \"tickets must > 0 and <= 10\");\n\n        uint256 value = tickets[0];\n        for (uint256 i = 1 ; i < tickets.length ; i++) {\n            require(tickets[i] < 10000000, \"ticket number must < 10000000\");\n            value = value << 24 | tickets[i];\n        }\n        return 1 << 248 | tickets.length << 240 | value;\n    }\n\n    function encode(uint256[] startTickets, uint256[] endTickets)\n        internal\n        pure\n        returns(uint256)\n    {\n        require(startTickets.length > 0 && startTickets.length == endTickets.length && startTickets.length <= 5, \"section tickets must > 0 and <= 5\");\n\n        uint256 value = startTickets[0] << 24 | endTickets[0];\n        for (uint256 i = 1 ; i < startTickets.length ; i++) {\n            require(startTickets[i] <= endTickets[i] && endTickets[i] < 10000000, \"tickets number invalid\");\n            value = value << 48 | startTickets[i] << 24 | endTickets[i];\n        }\n        return 2 << 248 | startTickets.length << 240 | value;\n    }\n\n    function decode(uint256 _input)\n\t    internal\n\t    pure\n\t    returns(uint256,uint256,uint256[])\n    {\n        uint256 _type = _input >> 248;\n        uint256 _length = _input >> 240 & 127;\n        require(_type == 1 || _type == 2, \"decode type is incorrect!\");\n\n\n        if (_type == 1) {\n            uint256[] memory results = new uint256[](_length);\n            uint256 tempVal = _input;\n            for (uint256 i=0 ; i < _length ; i++) {\n                results[i] = tempVal & mask;\n                tempVal = tempVal >> 24;\n            }\n            return (_type,_length,results);\n        } else {\n            uint256[] memory result2 = new uint256[](_length * 2);\n            uint256 tempVal2 = _input;\n            for (uint256 j=0 ; j < _length ; j++) {\n                result2[2 * j + 1] = tempVal2 & mask;\n                tempVal2 = tempVal2 >> 24;\n                result2[2 * j] = tempVal2 & mask;\n                tempVal2 = tempVal2 >> 24;\n            }\n            return (_type,_length,result2);\n        }\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5061573c80620000216000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f15f4c0146101915780632f366637146101a8578063400718ea146101c857806343d726d61461026e5780634db59565146102855780636657b2c014610397578063747dff42146103ce57806374b00a6c1461041557806387c70d211461047b578063936061cd146104f557806393f7cc99146105385780639448bcea14610596578063954a5c19146106385780639cc4d3dd14610642578063b96bf2b5146106eb578063c270d7cb146107a8578063c7b43f0214610809578063ee0f1d6b1461086c575b60011515600360009054906101000a900460ff161515141515610187576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f69742773206e6f7420726561647920796574000000000000000000000000000081525060200191505060405180910390fd5b61018f6108d1565b005b34801561019d57600080fd5b506101a6610af5565b005b6101c660048036038101908080359060200190929190505050610d0e565b005b61026c600480360381019080803590602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610f88565b005b34801561027a57600080fd5b506102836112fb565b005b34801561029157600080fd5b506102b06004803603810190808035906020019092919050505061170e565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156102fb5780820151818401526020810190506102e0565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561033d578082015181840152602081019050610322565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561037f578082015181840152602081019050610364565b50505050905001965050505050505060405180910390f35b3480156103a357600080fd5b506103cc6004803603810190808035906020019092919080359060200190929190505050611a97565b005b3480156103da57600080fd5b506103e3611d12565b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b34801561042157600080fd5b5061047960048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611da7565b005b34801561048757600080fd5b506104f3600480360381019080803590602001909291908035906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611e9b565b005b34801561050157600080fd5b50610536600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121fb565b005b34801561054457600080fd5b50610579600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506129bb565b604051808381526020018281526020019250505060405180910390f35b3480156105a257600080fd5b506105e160048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a47565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610624578082015181840152602081019050610609565b505050509050019250505060405180910390f35b6106406108d1565b005b34801561064e57600080fd5b506106e96004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050612af0565b005b3480156106f757600080fd5b506107a660048036038101908080359060200190929190803590602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050612bee565b005b3480156107b457600080fd5b506107f360048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f62565b6040518082815260200191505060405180910390f35b61086a60048036038101908080359060200190929190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506131f4565b005b34801561087857600080fd5b506108b760048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613553565b604051808215151515815260200191505060405180910390f35b6000151573f856f6a413f7756ffaf423aa2101b37e2b3affd973ffffffffffffffffffffffffffffffffffffffff16638d977d9e306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561098457600080fd5b505af1158015610998573d6000803e3d6000fd5b505050506040513d60208110156109ae57600080fd5b81019080805190602001909291905050501515141515610a36576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f67616d6520616c726561647920636c6f7365640000000000000000000000000081525060200191505060405180910390fd5b600034111515610aae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f61646420706f74206661696c656400000000000000000000000000000000000081525060200191505060405180910390fd5b610ad8346005600080548152602001908152602001600020600201546135b390919063ffffffff16565b600560008054815260200190815260200160002060020181905550565b7398bdbc858822415c626c13267594fbc205182a1f73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bd2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f6f6e6c7920636f6e7472616374206d696c6c696f6e616972652063616e20616381526020017f746976617465000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60001515600360009054906101000a900460ff161515141515610c5d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4d696c466f6c6420616c7265616479206163746976617465640000000000000081525060200191505060405180910390fd5b6001600360006101000a81548160ff021916908315150217905550600160008190555062015f9042016005600060018152602001908152602001600020600001819055506001600560006001815260200190815260200160002060040160006101000a81548160ff02191690836004811115610cd557fe5b02179055506005600080815260200190815260200160002060020154600560006001815260200190815260200160002060020181905550565b600060011515600360009054906101000a900460ff161515141515610d9b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f69742773206e6f7420726561647920796574000000000000000000000000000081525060200191505060405180910390fd5b600080339150813b9050600081141515610e1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f736f7272792068756d616e73206f6e6c7900000000000000000000000000000081525060200191505060405180910390fd5b3466071afd498d00008110151515610e9d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f63616e2774206265206c65737320616e796d6f7265000000000000000000000081525060200191505060405180910390fd5b610ea63361363b565b9350610eb3338634613e3d565b3373ffffffffffffffffffffffffffffffffffffffff167f0aed29428d64ae1bfeb37ec0693cd1990e59c577e023d0330c5f0f08a58737496000548634600560008054815260200190815260200160002060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544260405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a25050505050565b600060011515600360009054906101000a900460ff161515141515611015576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f69742773206e6f7420726561647920796574000000000000000000000000000081525060200191505060405180910390fd5b600080339150813b9050600081141515611097576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f736f7272792068756d616e73206f6e6c7900000000000000000000000000000081525060200191505060405180910390fd5b3466071afd498d00008110151515611117576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f63616e2774206265206c65737320616e796d6f7265000000000000000000000081525060200191505060405180910390fd5b348686600061112683836140d6565b9050670de0b6b3a76400006111466101f4836141ef90919063ffffffff16565b81151561114f57fe5b0484101515156111ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f696e73756666696369656e7420746f206275792074686520766572792074696381526020017f6b6574730000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6111f63361363b565b9750611203338c34613e3d565b611220336112118c8c6140d6565b61121b8d8d614293565b6144ed565b3373ffffffffffffffffffffffffffffffffffffffff167f0aed29428d64ae1bfeb37ec0693cd1990e59c577e023d0330c5f0f08a58737496000548a34600560008054815260200190815260200160002060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544260405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a25050505050505050505050565b60011515600360009054906101000a900460ff161515141515611386576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f69742773206e6f7420726561647920796574000000000000000000000000000081525060200191505060405180910390fd5b6001151573f856f6a413f7756ffaf423aa2101b37e2b3affd973ffffffffffffffffffffffffffffffffffffffff16630c3f64bf336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561143957600080fd5b505af115801561144d573d6000803e3d6000fd5b505050506040513d602081101561146357600080fd5b810190808051906020019092919050505015151415156114eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6d73672073656e646572206973206e6f7420612064657600000000000000000081525060200191505060405180910390fd5b73f856f6a413f7756ffaf423aa2101b37e2b3affd973ffffffffffffffffffffffffffffffffffffffff16638d977d9e306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561159a57600080fd5b505af11580156115ae573d6000803e3d6000fd5b505050506040513d60208110156115c457600080fd5b81019080805190602001909291905050501515611649576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f67616d65206e6f20636c6f73656400000000000000000000000000000000000081525060200191505060405180910390fd5b6000600360006101000a81548160ff0219169083151502179055507398bdbc858822415c626c13267594fbc205182a1f73ffffffffffffffffffffffffffffffffffffffff1663e17278073073ffffffffffffffffffffffffffffffffffffffff16316040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b1580156116f357600080fd5b505af1158015611707573d6000803e3d6000fd5b5050505050565b6060806060600060606000606060056000898152602001908152602001600020600801805490509350836040519080825280602002602001820160405280156117665781602001602082028038833980820191505090505b5092506000600560008a815260200190815260200160002060080180549050111561186357600091505b8382101561186257600560008981526020019081526020016000206007016000600560008b8152602001908152602001600020600801848154811015156117d357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054838381518110151561184757fe5b90602001906020020181815250508180600101925050611790565b5b60066040519080825280602002602001820160405280156118935781602001602082028038833980820191505090505b5090506005600089815260200190815260200160002060040160009054906101000a900460ff1660048111156118c557fe5b8160008151811015156118d457fe5b9060200190602002018181525050600560008981526020019081526020016000206000015481600181518110151561190857fe5b9060200190602002018181525050600560008981526020019081526020016000206001015481600281518110151561193c57fe5b9060200190602002018181525050600560008981526020019081526020016000206005015481600381518110151561197057fe5b906020019060200201818152505060056000898152602001908152602001600020600201548160048151811015156119a457fe5b906020019060200201818152505060056000898152602001908152602001600020600301548160058151811015156119d857fe5b906020019060200201818152505080600560008a81526020019081526020016000206008018481805480602002602001604051908101604052809291908181526020018280548015611a7f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a35575b50505050509150965096509650505050509193909250565b600060011515600360009054906101000a900460ff161515141515611b24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f69742773206e6f7420726561647920796574000000000000000000000000000081525060200191505060405180910390fd5b600080339150813b9050600081141515611ba6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f736f7272792068756d616e73206f6e6c7900000000000000000000000000000081525060200191505060405180910390fd5b8366071afd498d00008110151515611c26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f63616e2774206265206c65737320616e796d6f7265000000000000000000000081525060200191505060405180910390fd5b611c2f3361363b565b9350611c3c338787614608565b3373ffffffffffffffffffffffffffffffffffffffff167f0aed29428d64ae1bfeb37ec0693cd1990e59c577e023d0330c5f0f08a58737496000548688600560008054815260200190815260200160002060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544260405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a2505050505050565b6000806000806000805460056000600154815260200190815260200160002060040160009054906101000a900460ff166004811115611d4d57fe5b60056000805481526020019081526020016000206000015460056000600154815260200190815260200160002060010154600560008054815260200190815260200160002060020154945094509450945094509091929394565b6000611db23361363b565b9050611dc8338351611dc385614847565b6144ed565b3373ffffffffffffffffffffffffffffffffffffffff167f0aed29428d64ae1bfeb37ec0693cd1990e59c577e023d0330c5f0f08a5873749600054836000600560008054815260200190815260200160002060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544260405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a25050565b600060011515600360009054906101000a900460ff161515141515611f28576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f69742773206e6f7420726561647920796574000000000000000000000000000081525060200191505060405180910390fd5b600080339150813b9050600081141515611faa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f736f7272792068756d616e73206f6e6c7900000000000000000000000000000081525060200191505060405180910390fd5b8466071afd498d0000811015151561202a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f63616e2774206265206c65737320616e796d6f7265000000000000000000000081525060200191505060405180910390fd5b8585600081519050670de0b6b3a76400006120506101f4836141ef90919063ffffffff16565b81151561205957fe5b0483101515156120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f696e73756666696369656e7420746f206275792074686520766572792074696381526020017f6b6574730000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6121003361363b565b965061210d338b8b614608565b61212133895161211c8b614847565b6144ed565b3373ffffffffffffffffffffffffffffffffffffffff167f0aed29428d64ae1bfeb37ec0693cd1990e59c577e023d0330c5f0f08a5873749600054898c600560008054815260200190815260200160002060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544260405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a250505050505050505050565b6000806000806000606060008060011515600360009054906101000a900460ff161515141515612293576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f69742773206e6f7420726561647920796574000000000000000000000000000081525060200191505060405180910390fd5b600080339150813b9050600081141515612315576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f736f7272792068756d616e73206f6e6c7900000000000000000000000000000081525060200191505060405180910390fd5b600060015411801561236257506003600481111561232f57fe5b60056000600154815260200190815260200160002060040160009054906101000a900460ff16600481111561236057fe5b145b80156123865750600560006001548152602001908152602001600020600101544211155b15156123fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f69742773206e6f742074696d6520666f7220636c61696d696e6700000000000081525060200191505060405180910390fd5b600060056000600154815260200190815260200160002060070160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156124ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f7468652077696e6e65722068617665206265656e20636c61696d656420616c7281526020017f656164790000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000995060066000600154815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209850600097505b888054905088101561267a57612577898981548110151561256757fe5b90600052602060002001546149f2565b965096509650600093505b8584101561266d576001871480156125c857506005600060015481526020019081526020016000206005015485858151811015156125bc57fe5b90602001906020020151145b806126525750600287148015612610575084846002028151811015156125ea57fe5b906020019060200201516005600060015481526020019081526020016000206005015410155b80156126515750846001856002020181518110151561262b57fe5b906020019060200201516005600060015481526020019081526020016000206005015411155b5b156126605789806001019a50505b8380600101945050612582565b878060010198505061254a565b60008a11156129ae57600060056000600154815260200190815260200160002060070160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561275e576005600060015481526020019081526020016000206008018b90806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b6127898a600560006001548152602001908152602001600020600601546135b390919063ffffffff16565b600560006001548152602001908152602001600020600601819055508960056000600154815260200190815260200160002060070160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061284561282e60c860056000600154815260200190815260200160002060020154614c0190919063ffffffff16565b670de0b6b3a7640000614c1c90919063ffffffff16565b925061287183600560008054815260200190815260200160002060020154614c3690919063ffffffff16565b6005600080548152602001908152602001600020600201819055503373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156128d2573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167ffff8068fc2bcffd40e984f32c13a6386cdad6d209e3d64c2893142e113f21d326004662386f26fc100006040518083600481111561292557fe5b60ff1681526020018281526020019250505060405180910390a28a73ffffffffffffffffffffffffffffffffffffffff167f6082f6e69bbcef38f2fc71e0a792eddaa01fdfc4bbb59697ab38719c537b2e3c8b60056000600154815260200190815260200160002060060154604051808381526020018281526020019250505060405180910390a25b5050505050505050505050565b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491509150915091565b60606006600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612ae357602002820191906000526020600020905b815481526020019060010190808311612acf575b5050505050905092915050565b6000612afb3361363b565b9050612b1a33612b0b85856140d6565b612b158686614293565b6144ed565b3373ffffffffffffffffffffffffffffffffffffffff167f0aed29428d64ae1bfeb37ec0693cd1990e59c577e023d0330c5f0f08a5873749600054836000600560008054815260200190815260200160002060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544260405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a2505050565b600060011515600360009054906101000a900460ff161515141515612c7b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f69742773206e6f7420726561647920796574000000000000000000000000000081525060200191505060405180910390fd5b600080339150813b9050600081141515612cfd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f736f7272792068756d616e73206f6e6c7900000000000000000000000000000081525060200191505060405180910390fd5b8566071afd498d00008110151515612d7d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f63616e2774206265206c65737320616e796d6f7265000000000000000000000081525060200191505060405180910390fd5b8686866000612d8c83836140d6565b9050670de0b6b3a7640000612dac6101f4836141ef90919063ffffffff16565b811515612db557fe5b048410151515612e53576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f696e73756666696369656e7420746f206275792074686520766572792074696381526020017f6b6574730000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b612e5c3361363b565b9750612e69338d8d614608565b612e8633612e778c8c6140d6565b612e818d8d614293565b6144ed565b3373ffffffffffffffffffffffffffffffffffffffff167f0aed29428d64ae1bfeb37ec0693cd1990e59c577e023d0330c5f0f08a58737496000548a8e600560008054815260200190815260200160002060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544260405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a2505050505050505050505050565b600080600080600080600060606000600560008c815260200190815260200160002060040160009054906101000a900460ff16975060006004811115612fa457fe5b886004811115612fb057fe5b10158015612fd4575060036004811115612fc657fe5b886004811115612fd257fe5b105b15612fe257600098506131e6565b600480811115612fee57fe5b886004811115612ffa57fe5b141561305b57600560008c815260200190815260200160002060070160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205498506131e6565b600660008c815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020965060009550600094505b86805490508510156131e2576130e387868154811015156130d357fe5b90600052602060002001546149f2565b935093509350600090505b828110156131d5576001841480156131325750600560008c815260200190815260200160002060050154828281518110151561312657fe5b90602001906020020151145b806131ba57506002841480156131785750818160020281518110151561315457fe5b90602001906020020151600560008d81526020019081526020016000206005015410155b80156131b95750816001826002020181518110151561319357fe5b906020019060200201516005600060015481526020019081526020016000206005015411155b5b156131c85785806001019650505b80806001019150506130ee565b84806001019550506130b6565b8598505b505050505050505092915050565b600060011515600360009054906101000a900460ff161515141515613281576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f69742773206e6f7420726561647920796574000000000000000000000000000081525060200191505060405180910390fd5b600080339150813b9050600081141515613303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f736f7272792068756d616e73206f6e6c7900000000000000000000000000000081525060200191505060405180910390fd5b3466071afd498d00008110151515613383576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f63616e2774206265206c65737320616e796d6f7265000000000000000000000081525060200191505060405180910390fd5b3485600081519050670de0b6b3a76400006133a96101f4836141ef90919063ffffffff16565b8115156133b257fe5b048310151515613450576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f696e73756666696369656e7420746f206275792074686520766572792074696381526020017f6b6574730000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6134593361363b565b9650613466338a34613e3d565b61347a3389516134758b614847565b6144ed565b3373ffffffffffffffffffffffffffffffffffffffff167f0aed29428d64ae1bfeb37ec0693cd1990e59c577e023d0330c5f0f08a58737496000548934600560008054815260200190815260200160002060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544260405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390a2505050505050505050565b6000806005600085815260200190815260200160002060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411905092915050565b60008183019050828110151515613632576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f536166654d61746820616464206661696c65640000000000000000000000000081525060200191505060405180910390fd5b80905092915050565b60008060015411801561368957506002600481111561365657fe5b60056000600154815260200190815260200160002060040160009054906101000a900460ff16600481111561368757fe5b145b80156136aa575060076136a760025443614c3690919063ffffffff16565b10155b1561390f576136b7614cbb565b6005600060015481526020019081526020016000206005018190555061a8c0420160056000600154815260200190815260200160002060010181905550600360056000600154815260200190815260200160002060040160006101000a81548160ff0219169083600481111561372957fe5b0217905550436005600060015481526020019081526020016000206003018190555062015f904201600560008054815260200190815260200160002060000181905550662386f26fc100006005600080548152602001908152602001600020600201541115613899576137c3662386f26fc10000600560008054815260200190815260200160002060020154614c3690919063ffffffff16565b6005600080548152602001908152602001600020600201819055508173ffffffffffffffffffffffffffffffffffffffff166108fc662386f26fc100009081150290604051600060405180830381858888f1935050505015801561382b573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff167ffff8068fc2bcffd40e984f32c13a6386cdad6d209e3d64c2893142e113f21d326001662386f26fc100006040518083600481111561387e57fe5b60ff1681526020018281526020019250505060405180910390a25b600360048111156138a657fe5b6008600260048111156138b557fe5b9060020a026020600560006001548152602001908152602001600020600501549060020a026040600560006001548152602001908152602001600020600101549060020a0260606001549060020a02171717179050613e38565b600060015411801561395c57506003600481111561392957fe5b60056000600154815260200190815260200160002060040160009054906101000a900460ff16600481111561395a57fe5b145b801561397f57506005600060015481526020019081526020016000206001015442115b15613b485760006005600060015481526020019081526020016000206006015411156139ae576139ad615203565b5b600460056000600154815260200190815260200160002060040160006101000a81548160ff021916908360048111156139e357fe5b0217905550662386f26fc100006005600080548152602001908152602001600020600201541115613b1557613a3f662386f26fc10000600560008054815260200190815260200160002060020154614c3690919063ffffffff16565b6005600080548152602001908152602001600020600201819055508173ffffffffffffffffffffffffffffffffffffffff166108fc662386f26fc100009081150290604051600060405180830381858888f19350505050158015613aa7573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff167ffff8068fc2bcffd40e984f32c13a6386cdad6d209e3d64c2893142e113f21d326002662386f26fc1000060405180836004811115613afa57fe5b60ff1681526020018281526020019250505060405180910390a25b600480811115613b2157fe5b600860036004811115613b3057fe5b9060020a0260606001549060020a0217179050613e38565b60016000541480613b935750600480811115613b6057fe5b60056000600154815260200190815260200160002060040160009054906101000a900460ff166004811115613b9157fe5b145b8015613bb657506005600080548152602001908152602001600020600001544210155b15613de55760005460018190555043600281905550600260056000600154815260200190815260200160002060040160006101000a81548160ff02191690836004811115613c0057fe5b02179055506001600054016000819055506001600560008054815260200190815260200160002060040160006101000a81548160ff02191690836004811115613c4557fe5b0217905550662386f26fc10000600560006001548152602001908152602001600020600201541115613d7d57613ca3662386f26fc1000060056000600154815260200190815260200160002060020154614c3690919063ffffffff16565b6005600080548152602001908152602001600020600201819055508173ffffffffffffffffffffffffffffffffffffffff166108fc662386f26fc100009081150290604051600060405180830381858888f19350505050158015613d0b573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff167ffff8068fc2bcffd40e984f32c13a6386cdad6d209e3d64c2893142e113f21d326003662386f26fc1000060405180836004811115613d5e57fe5b60ff1681526020018281526020019250505060405180910390a2613db2565b600560006001548152602001908152602001600020600201546005600080548152602001908152602001600020600201819055505b60016004811115613dbf57fe5b6008600480811115613dcd57fe5b9060020a0260606000549060020a0217179050613e38565b600560008054815260200190815260200160002060040160009054906101000a900460ff166004811115613e1557fe5b600860016004811115613e2457fe5b9060020a0260606000549060020a02171790505b919050565b600080613eb9670de0b6b3a7640000613e616101f4866141ef90919063ffffffff16565b811515613e6a57fe5b04600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546135b390919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613f10603284614c0190919063ffffffff16565b915073b0c7dc00e8a74c9dec8688efb98ccb2e24584e3b73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015613f6c573d6000803e3d6000fd5b50613f946064613f866050866141ef90919063ffffffff16565b614c0190919063ffffffff16565b90507398bdbc858822415c626c13267594fbc205182a1f73ffffffffffffffffffffffffffffffffffffffff1663b7fda8328287876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506000604051808303818588803b15801561404d57600080fd5b505af1158015614061573d6000803e3d6000fd5b50505050506140b461408e836140808487614c3690919063ffffffff16565b614c3690919063ffffffff16565b6005600080548152602001908152602001600020600201546135b390919063ffffffff16565b6005600080548152602001908152602001600020600201819055505050505050565b60008060008084518651141515614155576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f7469636b657473206c656e67746820696e76616c69640000000000000000000081525060200191505060405180910390fd5b6000925060009150600090505b85518110156141e3576141bf60016141b1888481518110151561418157fe5b90602001906020020151888581518110151561419957fe5b90602001906020020151614c3690919063ffffffff16565b6135b390919063ffffffff16565b91506141d482846135b390919063ffffffff16565b92508080600101915050614162565b82935050505092915050565b600080831415614202576000905061428d565b818302905081838281151561421357fe5b04141515614289576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f536166654d617468206d756c206661696c65640000000000000000000000000081525060200191505060405180910390fd5b8090505b92915050565b60008060008085511180156142a9575083518551145b80156142b757506005855111155b1515614351576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f73656374696f6e207469636b657473206d757374203e203020616e64203c3d2081526020017f350000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b83600081518110151561436057fe5b90602001906020020151601886600081518110151561437b57fe5b906020019060200201519060020a02179150600190505b84518110156144b65783818151811015156143a957fe5b9060200190602002015185828151811015156143c157fe5b90602001906020020151111580156143f257506298968084828151811015156143e657fe5b90602001906020020151105b1515614466576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f7469636b657473206e756d62657220696e76616c69640000000000000000000081525060200191505060405180910390fd5b838181518110151561447457fe5b906020019060200201516018868381518110151561448e57fe5b906020019060200201519060020a026030849060020a02171791508080600101915050614392565b8160f086519060020a027f020000000000000000000000000000000000000000000000000000000000000017179250505092915050565b600061454183600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c3690919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600660008054815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508082908060018154018082558091505090600182039060005260206000200160009091929091909150555050505050565b60008061463260646146246050866141ef90919063ffffffff16565b614c0190919063ffffffff16565b91507398bdbc858822415c626c13267594fbc205182a1f73ffffffffffffffffffffffffffffffffffffffff16632485484d868686866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001828152602001945050505050600060405180830381600087803b1580156146fb57600080fd5b505af115801561470f573d6000803e3d6000fd5b5050505061478c670de0b6b3a76400006147346101f4866141ef90919063ffffffff16565b81151561473d57fe5b04600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546135b390919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506147e3603284614c0190919063ffffffff16565b905073b0c7dc00e8a74c9dec8688efb98ccb2e24584e3b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561483f573d6000803e3d6000fd5b505050505050565b600080600080845111801561485e5750600a845111155b15156148d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f7469636b657473206d757374203e203020616e64203c3d20313000000000000081525060200191505060405180910390fd5b8360008151811015156148e157fe5b906020019060200201519150600190505b83518110156149bc5762989680848281518110151561490d57fe5b9060200190602002015110151561498c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f7469636b6574206e756d626572206d757374203c20313030303030303000000081525060200191505060405180910390fd5b838181518110151561499a57fe5b906020019060200201516018839060020a0217915080806001019150506148f2565b8160f085519060020a027f0100000000000000000000000000000000000000000000000000000000000000171792505050919050565b60008060606000806060600080606060008060f88c9060020a90049750607f60f08d9060020a90041696506001881480614a2c5750600288145b1515614aa0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f6465636f6465207479706520697320696e636f7272656374210000000000000081525060200191505060405180910390fd5b6001881415614b335786604051908082528060200260200182016040528015614ad85781602001602082028038833980820191505090505b5095508b9450600093505b86841015614b255762ffffff85168685815181101515614aff57fe5b90602001906020020181815250506018859060020a900494508380600101945050614ae3565b8787879a509a509a50614bf2565b60028702604051908082528060200260200182016040528015614b655781602001602082028038833980820191505090505b5092508b9150600090505b86811015614be85762ffffff82168360018360020201815181101515614b9257fe5b90602001906020020181815250506018829060020a9004915062ffffff82168382600202815181101515614bc257fe5b90602001906020020181815250506018829060020a900491508080600101915050614b70565b8787849a509a509a505b50505050505050509193909250565b6000808284811515614c0f57fe5b0490508091505092915050565b600081831115614c2c5781614c2e565b825b905092915050565b6000828211151515614cb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f536166654d61746820737562206661696c65640000000000000000000000000081525060200191505060405180910390fd5b818303905092915050565b60006298968061516f4260064303406040516020018082600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515614d265780518252602082019150602081019050602083039250614d01565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004811515614d6057fe5b046151614260054303406040516020018082600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515614dc65780518252602082019150602081019050602083039250614da1565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004811515614e0057fe5b046151534260044303406040516020018082600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515614e665780518252602082019150602081019050602083039250614e41565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004811515614ea057fe5b046151454260034303406040516020018082600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515614f065780518252602082019150602081019050602083039250614ee1565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004811515614f4057fe5b046151374260024303406040516020018082600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515614fa65780518252602082019150602081019050602083039250614f81565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004811515614fe057fe5b046151294260014303406040516020018082600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b6020831015156150465780518252602082019150602081019050602083039250615021565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900481151561508057fe5b044243406040516020018082600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b6020831015156150e057805182526020820191506020810190506020830392506150bb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900481151561511a57fe5b046135b390919063ffffffff16565b6135b390919063ffffffff16565b6135b390919063ffffffff16565b6135b390919063ffffffff16565b6135b390919063ffffffff16565b6135b390919063ffffffff16565b604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b6020831015156151c3578051825260208201915060208101905060208303925061519e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600190048115156151fd57fe5b06905090565b600080600080600080600080600060056000600154815260200190815260200160002060020154985060056000600154815260200190815260200160002060060154975061528961525e60028b614c0190919063ffffffff16565b61527b8a69010f0cf064dd592000006141ef90919063ffffffff16565b614c1c90919063ffffffff16565b965061529f60328a614c0190919063ffffffff16565b955073b0c7dc00e8a74c9dec8688efb98ccb2e24584e3b73ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f193505050501580156152fb573d6000803e3d6000fd5b50878781151561530757fe5b049450600093505b600560006001548152602001908152602001600020600801805490508410156156ae576005600060015481526020019081526020016000206008018481548110151561535757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692506005600060015481526020019081526020016000206007016000600560006001548152602001908152602001600020600801868154811015156153c357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506154e28560056000600154815260200190815260200160002060070160006005600060015481526020019081526020016000206008018881548110151561546e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546141ef90919063ffffffff16565b90507398bdbc858822415c626c13267594fbc205182a1f73ffffffffffffffffffffffffffffffffffffffff166385aba27582856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b15801561559357600080fd5b505af11580156155a7573d6000803e3d6000fd5b50505050506155fe81600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546135b390919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167fdc0af7c4338366afa1c1c0f9662d934207ffc0c480bde2158f7ecde6d3a3fabc600154838560405180848152602001838152602001828152602001935050505060405180910390a2838060010194505061530f565b6156ea866156dc89600560008054815260200190815260200160002060020154614c3690919063ffffffff16565b614c3690919063ffffffff16565b6005600080548152602001908152602001600020600201819055505050505050505050505600a165627a7a72305820486c202680e17dbe12d4cb3143d5866921a08091cda3dd348564f8acab770bb80029"
}