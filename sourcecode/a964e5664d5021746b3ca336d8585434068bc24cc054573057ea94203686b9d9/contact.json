{
  "address": "0xd5ae5111eb0e8b9a13260f52521a4b6fa0880fec",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BitcoinPriceBetY",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-25\n*/\n\npragma solidity ^0.4.25;\n\n/*\n    Trust based betting system, affiliated with NeutrinoTokenStandard contract. Yearly version.\n    Rules:\n        Welcome Fee                      -  25%, including:\n            Boss                         -  10%\n            Yearly jackpot               -   2%\n            Referral bonus               -   8%\n            NTS funding                  -   5%\n        Exit Fee                         - FREE\n*/\n\ncontract NeutrinoTokenStandard {\n    function fund() external payable;\n}\n\ncontract ReferralPayStation {\n    event OnGotRef (\n        address indexed ref,\n        uint256 value,\n        uint256 timestamp,\n        address indexed player\n    );\n    \n    event OnWithdraw (\n        address indexed ref,\n        uint256 value,\n        uint256 timestamp\n    );\n    \n    event OnRob (\n        address indexed ref,\n        uint256 value,\n        uint256 timestamp\n    );\n    \n    event OnRobAll (\n        uint256 value,\n        uint256 timestamp  \n    );\n    \n    address owner;\n    mapping(address => uint256) public refBalance;\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function put(address ref, address player) public payable {\n        require(msg.value > 0);\n        refBalance[ref] += msg.value;\n        \n        emit OnGotRef(ref, msg.value, now, player);\n    }\n    \n    function withdraw() public {\n        require(refBalance[msg.sender] > 0);\n        uint256 value = refBalance[msg.sender];\n        refBalance[msg.sender] = 0;\n        msg.sender.transfer(value);\n        emit OnWithdraw(msg.sender, value, now);\n    }\n    \n    /* admin */\n    function rob(address ref) onlyOwner public {\n        require(refBalance[ref] > 0);\n        uint256 value = refBalance[ref];\n        refBalance[ref] = 0;\n        owner.transfer(value);\n        emit OnRob(ref, value, now);\n    }\n    \n    function robAll() onlyOwner public {\n        uint256 balance = address(this).balance;\n        owner.transfer(balance);\n        emit OnRobAll(balance, now);\n    }\n}\n\ncontract BitcoinPriceBetY {\n    event OnBet (\n        address indexed player,\n        address indexed ref,\n        uint256 indexed timestamp,\n        uint256 value,\n        uint256 betPrice,\n        uint256 extra,\n        uint256 refBonus,\n        uint256 amount\n    );\n    \n    event OnWithdraw (\n        address indexed referrer,\n        uint256 value\n    );\n    \n    event OnWithdrawWin (\n        address indexed player,\n        uint256 value\n    );\n    \n    event OnPrizePayed (\n        address indexed player,\n        uint256 value,\n        uint8 place,\n        uint256 betPrice,\n        uint256 amount,\n        uint256 betValue\n    );\n    \n    event OnNTSCharged (\n        uint256 value\n    );\n    \n    event OnYJPCharged (\n        uint256 value  \n    );\n    \n    event OnGotMoney (\n        address indexed source,\n        uint256 value\n    );\n    \n    event OnCorrect (\n        uint256 value\n    );\n    \n    event OnPrizeFunded (\n        uint256 value\n    );\n    \n    event OnSendRef (\n        address indexed ref,\n        uint256 value,\n        uint256 timestamp,\n        address indexed player,\n        address indexed payStation\n    );\n    \n    event OnNewRefPayStation (\n        address newAddress,\n        uint256 timestamp\n    );\n\n    event OnBossPayed (\n        address indexed boss,\n        uint256 value,\n        uint256 timestamp\n    );\n    \n    string constant public name = \"BitcoinPrice.Bet Yearly\";\n    string constant public symbol = \"BPBY\";\n    address public owner;\n    address constant internal boss1 = 0x42cF5e102dECCf8d89E525151c5D5bbEAc54200d;\n    address constant internal boss2 = 0x8D86E611ef0c054FdF04E1c744A8cEFc37F00F81;\n    NeutrinoTokenStandard constant internal neutrino = NeutrinoTokenStandard(0xad0a61589f3559026F00888027beAc31A5Ac4625); \n    ReferralPayStation public refPayStation = ReferralPayStation(0x4100dAdA0D80931008a5f7F5711FFEb60A8071BA);\n    \n    uint8 constant bossFee = 10;\n    uint8 constant refFee = 8;\n    uint8 constant ntsFee = 5;\n    \n    mapping(address => uint256) public winBalance;\n    uint256 public winBalanceTotal = 0;\n    uint256 public bossBalance = 0;\n    uint256 public ntsBalance = 0;\n    uint256 public prizeBalance = 0;\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    constructor() public payable {\n        owner = msg.sender;\n        prizeBalance = msg.value;\n    }\n    \n    function() public payable {\n        emit OnGotMoney(msg.sender, msg.value);\n    }\n    \n    function betStep() public view returns (uint256) {\n        if (now >= 1545581345 && now < 1548979200) return 0.1 ether; /* until Feb 1st */\n        if (now >= 1548979200 && now < 1551398400) return 0.2 ether; /* until Mar 1st */\n        if (now >= 1551398400 && now < 1554076800) return 0.3 ether; /* until Apr 1st */\n        if (now >= 1554076800 && now < 1556668800) return 0.4 ether; /* until May 1st */\n        if (now >= 1556668800 && now < 1559347200) return 0.5 ether; /* until Jun 1st */\n        if (now >= 1559347200 && now < 1561939200) return 0.6 ether; /* until Jul 1st */\n        if (now >= 1561939200 && now < 1564617600) return 0.7 ether; /* until Aug 1st */\n        if (now >= 1564617600 && now < 1567296000) return 0.8 ether; /* until Sep 1st */\n        return 0;\n    }\n    \n    function canMakeBet() public view returns (bool) {\n        return betStep() > 0;\n    }\n    \n    function makeBet(uint256 betPrice, address ref) public payable {\n        uint256 _betStep = betStep();\n        require (_betStep > 0);\n        \n        uint256 value = (msg.value / _betStep) * _betStep;\n        uint256 extra = msg.value - value;\n        \n        require(value > 0);\n        prizeBalance += extra;\n        \n        uint8 welcomeFee = bossFee + ntsFee;\n        uint256 refBonus = 0;\n        if (ref != 0x0) {\n            welcomeFee += refFee;\n            refBonus = value * refFee / 100;\n\n            refPayStation.put.value(refBonus)(ref, msg.sender);\n            emit OnSendRef(ref, refBonus, now, msg.sender, address(refPayStation));\n        }\n        \n        uint256 taxedValue = value - value * welcomeFee / 100;\n        prizeBalance += taxedValue;\n    \n        bossBalance += value * bossFee / 100;\n        ntsBalance += value * ntsFee / 100;\n            \n        emit OnBet(msg.sender, ref, block.timestamp, value, betPrice, extra, refBonus, value / _betStep);\n    }\n    \n    function withdrawWin() public {\n        require(winBalance[msg.sender] > 0);\n        uint256 value = winBalance[msg.sender];\n        winBalance[msg.sender] = 0;\n        winBalanceTotal -= value;\n        msg.sender.transfer(value);\n        emit OnWithdrawWin(msg.sender, value);\n    }\n    \n    /* Admin */\n    function payPrize(address player, uint256 value, uint8 place, uint256 betPrice, uint256 amount, uint256 betValue) onlyOwner public {\n        require(value <= prizeBalance);\n        \n        winBalance[player] += value;\n        winBalanceTotal += value;\n        prizeBalance -= value;\n        emit OnPrizePayed(player, value, place, betPrice, amount, betValue);   \n    }\n    \n    function payPostDrawRef(address ref, address player, uint256 value) onlyOwner public {\n        require(value <= prizeBalance);\n        \n        prizeBalance -= value;\n        \n        refPayStation.put.value(value)(ref, player);\n        emit OnSendRef(ref, value, now, player, address(refPayStation));\n    }\n    \n    function payBoss(uint256 value) onlyOwner public {\n        require(value <= bossBalance);\n        if (value == 0) value = bossBalance;\n        uint256 value1 = value * 90 / 100;\n        uint256 value2 = value * 10 / 100;\n        \n        if (boss1.send(value1)) {\n            bossBalance -= value1;\n            emit OnBossPayed(boss1, value1, now);\n        }\n        \n        if (boss2.send(value2)) {\n            bossBalance -= value2;\n            emit OnBossPayed(boss2, value2, now);\n        }\n    }\n    \n    function payNTS() onlyOwner public {\n        require(ntsBalance > 0);\n        uint256 _ntsBalance = ntsBalance;\n        \n        neutrino.fund.value(ntsBalance)();\n        ntsBalance = 0;\n        emit OnNTSCharged(_ntsBalance);\n    }\n    \n    function correct() onlyOwner public {\n        uint256 counted = winBalanceTotal + bossBalance + ntsBalance + prizeBalance;\n        uint256 uncounted = address(this).balance - counted;\n        \n        require(uncounted > 0);\n        \n        bossBalance += uncounted;\n        emit OnCorrect(uncounted);\n    }\n    \n    function fundPrize() onlyOwner public {\n        uint256 counted = winBalanceTotal + bossBalance + ntsBalance + prizeBalance;\n        uint256 uncounted = address(this).balance - counted;\n        \n        require(uncounted > 0);\n        \n        prizeBalance += uncounted;\n        emit OnPrizeFunded(uncounted);\n    }\n    \n    function newRefPayStation(address newAddress) onlyOwner public {\n        refPayStation = ReferralPayStation(newAddress);\n        \n        emit OnNewRefPayStation(newAddress, now);\n    }\n}",
  "bytecode": "608060405260018054600160a060020a0319908116734100dada0d80931008a5f7f5711ffeb60a8071ba17909155600060038190556004819055600581905580549091163317905534600655610e6a8061005a6000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101495780630aa9a4fb146101d35780630bd5b49314610208578063200ef97e146102325780633a2bc42b146102475780634443fbf41461025c5780636c6bf5511461028f5780638a7eac45146102a45780638ade246a146102b95780638da5cb5b146102d057806395d89b4114610301578063a5d8746e14610316578063a9c8733c1461033f578063ab6840e714610354578063afafb3f014610369578063ddf8224d1461037e578063efbec48714610393578063f4f42358146103ab578063f9146b2f146103c0578063fb815503146103e1575b60408051348152905133917f1c15fecf7e02abab6ddfc04504224ff6a9cfa6c0fbaaae4eed835ac0786fc9fb919081900360200190a2005b34801561015557600080fd5b5061015e6103f6565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610198578181015183820152602001610180565b50505050905090810190601f1680156101c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101df57600080fd5b50610206600160a060020a036004351660243560ff6044351660643560843560a43561042d565b005b34801561021457600080fd5b50610206600160a060020a03600435811690602435166044356104de565b34801561023e57600080fd5b506102066105ee565b34801561025357600080fd5b506102066106dc565b34801561026857600080fd5b5061027d600160a060020a0360043516610758565b60408051918252519081900360200190f35b34801561029b57600080fd5b5061027d61076a565b3480156102b057600080fd5b5061027d610770565b610206600435600160a060020a0360243516610776565b3480156102dc57600080fd5b506102e561096a565b60408051600160a060020a039092168252519081900360200190f35b34801561030d57600080fd5b5061015e610979565b34801561032257600080fd5b5061032b6109b0565b604080519115158252519081900360200190f35b34801561034b57600080fd5b506102066109c2565b34801561036057600080fd5b5061027d610a3e565b34801561037557600080fd5b506102e5610a44565b34801561038a57600080fd5b5061027d610a53565b34801561039f57600080fd5b50610206600435610a59565b3480156103b757600080fd5b5061027d610bc0565b3480156103cc57600080fd5b50610206600160a060020a0360043516610d20565b3480156103ed57600080fd5b50610206610d9e565b60408051808201909152601781527f426974636f696e50726963652e42657420596561726c79000000000000000000602082015281565b600054600160a060020a0316331461044457600080fd5b60065485111561045357600080fd5b600160a060020a0386166000818152600260209081526040918290208054890190556003805489019055600680548990039055815188815260ff881691810191909152808201869052606081018590526080810184905290517f98c64e15580fea9eb71342d9ead751862c92014a8e357ae724f1be5adcf37af19181900360a00190a2505050505050565b600054600160a060020a031633146104f557600080fd5b60065481111561050457600080fd5b600680548290039055600154604080517fdfb03cf7000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015285811660248301529151919092169163dfb03cf791849160448082019260009290919082900301818588803b15801561057f57600080fd5b505af1158015610593573d6000803e3d6000fd5b5050600154604080518681524260208201528151600160a060020a039384169650888416955092891693507ff93679ce590194aca8e3b7bae6b49f6bbcb8e805a9304f1007e76b80ed88ffa4929081900390910190a4505050565b60008054600160a060020a0316331461060657600080fd5b60055460001061061557600080fd5b600554905073ad0a61589f3559026f00888027beac31a5ac4625600160a060020a031663b60d42886005546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561068757600080fd5b505af115801561069b573d6000803e3d6000fd5b5050600060055550506040805183815290517f605e9a3a858d9c423b3d2494ca38bc93b6db88f81905a48c89b6deeee177a68992509081900360200190a150565b600080548190600160a060020a031633146106f657600080fd5b505060065460055460045460035401010130318190036000811161071957600080fd5b60068054820190556040805182815290517f91061ecd2174c2cc1d71dde610d511ba85de327d6d30ed0f257699d6a7a9a7f59181900360200190a15050565b60026020526000908152604090205481565b60065481565b60045481565b600080600080600080610787610bc0565b95506000861161079657600080fd5b8586348115156107a257fe5b04029450348590039350600085116107b957600080fd5b6006805485019055600f925060009150600160a060020a038716156108be576008928301926064908602600154604080517fdfb03cf7000000000000000000000000000000000000000000000000000000008152600160a060020a038c811660048301523360248301529151949093049550169163dfb03cf7918591604480830192600092919082900301818588803b15801561085557600080fd5b505af1158015610869573d6000803e3d6000fd5b5050600154604080518781524260208201528151600160a060020a039384169650339550928d1693507ff93679ce590194aca8e3b7bae6b49f6bbcb8e805a9304f1007e76b80ed88ffa4929081900390910190a45b5060068054606460ff85168702819004870391820190925560048054600a8802849004019055600580548188029390930490920190915542600160a060020a038816337fde28de290d2fd8e8081558373acbb9527799489b8d125f3a33260b4fa7cc9bc2888c89888d8481151561093157fe5b60408051968752602087019590955285850193909352606085019190915290046080830152519081900360a00190a45050505050505050565b600054600160a060020a031681565b60408051808201909152600481527f4250425900000000000000000000000000000000000000000000000000000000602082015281565b6000806109bb610bc0565b1190505b90565b600080548190600160a060020a031633146109dc57600080fd5b50506006546005546004546003540101013031819003600081116109ff57600080fd5b60048054820190556040805182815290517f2af6f770e2c966c5a4d31350690f97496224985197b1342ec3a35ea32620b6179181900360200190a15050565b60055481565b600154600160a060020a031681565b60035481565b600080548190600160a060020a03163314610a7357600080fd5b600454831115610a8257600080fd5b821515610a8f5760045492505b6064605a84020491506064600a840260405191900491507342cf5e102deccf8d89e525151c5d5bbeac54200d9083156108fc029084906000818181858888f1935050505015610b2f576004805483900390556040805183815242602082015281517342cf5e102deccf8d89e525151c5d5bbeac54200d927fbfd80b7518d12673941ad7d48fad1285bd1517a70cf69fc217bab6136d2426c3928290030190a25b604051738d86e611ef0c054fdf04e1c744a8cefc37f00f819082156108fc029083906000818181858888f1935050505015610bbb57600480548290039055604080518281524260208201528151738d86e611ef0c054fdf04e1c744a8cefc37f00f81927fbfd80b7518d12673941ad7d48fad1285bd1517a70cf69fc217bab6136d2426c3928290030190a25b505050565b6000635c1fb3214210158015610bd95750635c538c0042105b15610bed575067016345785d8a00006109bf565b635c538c004210158015610c045750635c78760042105b15610c1857506702c68af0bb1400006109bf565b635c7876004210158015610c2f5750635ca1548042105b15610c435750670429d069189e00006109bf565b635ca154804210158015610c5a5750635cc8e18042105b15610c6e575067058d15e1762800006109bf565b635cc8e1804210158015610c855750635cf1c00042105b15610c9957506706f05b59d3b200006109bf565b635cf1c0004210158015610cb05750635d194d0042105b15610cc45750670853a0d2313c00006109bf565b635d194d004210158015610cdb5750635d422b8042105b15610cef57506709b6e64a8ec600006109bf565b635d422b804210158015610d065750635d6b0a0042105b15610d1a5750670b1a2bc2ec5000006109bf565b50600090565b600054600160a060020a03163314610d3757600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383169081179091556040805191825242602083015280517f56c3bab9774f079d7833aa80ed2eb486f8216bf2a0c156836748ad21e66c3f639281900390910190a150565b336000908152600260205260408120548110610db957600080fd5b5033600081815260026020526040808220805490839055600380548290039055905190929183156108fc02918491818181858888f19350505050158015610e04573d6000803e3d6000fd5b5060408051828152905133917fdd0e51ca9fe6a0a8495a0bf28a5d74796714159e4b9e392618596ba572835e31919081900360200190a2505600a165627a7a72305820978a43e26ac176d5eee83b83c4925c8c38075534ef28a63bb3d9efc0e8b8e9160029"
}