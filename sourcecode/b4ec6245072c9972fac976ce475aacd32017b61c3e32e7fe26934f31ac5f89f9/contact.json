{
  "address": "0x8f768f893816df4e0699b1e7460223b9ba321c7b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LBSCSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-22\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        if (_a == 0) {\n            return 0;\n        }\n\n        c = _a * _b;\n        assert(c / _a == _b);\n        return c;\n    }\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a / _b;\n    }\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        assert(_b <= _a);\n        return _a - _b;\n    }\n\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n}\n\n\n\n\n\n\ncontract BaseLBSCSale {\n    using SafeMath for uint256;\n\n    address public owner;\n    bool public paused = false;\n    // The beneficiary is the future recipient of the funds\n    address public beneficiary;\n\n    // The crowdsale has a funding goal, cap, deadline, and minimum contribution\n    uint public fundingGoal;\n    uint public fundingCap;\n    uint public minContribution;\n    uint public decimals;\n    bool public fundingGoalReached = false;\n    bool public fundingCapReached = false;\n    bool public saleClosed = false;\n\n    // Time period of sale (UNIX timestamps)\n    uint public startTime;\n    uint public endTime;\n\n    // Keeps track of the amount of wei raised\n    uint public amountRaised;\n\n    // Refund amount, should it be required\n    uint public refundAmount;\n\n    // The ratio of CHP to Ether\n    uint public rate = 220;\n\n    // prevent certain functions from being recursively called\n    bool private rentrancy_lock = false;\n\n    // A map that tracks the amount of wei contributed by address\n    mapping(address => uint256) public balanceOf;\n\n    address public manager;\n\n    // Events\n    event GoalReached(address _beneficiary, uint _amountRaised);\n    event CapReached(address _beneficiary, uint _amountRaised);\n    event FundTransfer(address _backer, uint _amount, bool _isContribution);\n    event Pause();\n    event Unpause();\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    // Modifiers\n    modifier onlyOwner() {\n        require(msg.sender == owner,\"Only the owner is allowed to call this.\"); \n        _; \n    }\n\n    modifier onlyOwnerOrManager{\n        require(msg.sender == owner || msg.sender == manager, \"Only owner or manager is allowed to call this\");\n        _;\n    }\n\n    modifier beforeDeadline(){\n        require (currentTime() < endTime, \"Validation: Before endtime\");\n        _;\n    }\n    modifier afterDeadline(){\n        require (currentTime() >= endTime, \"Validation: After endtime\"); \n        _;\n    }\n    modifier afterStartTime(){\n        require (currentTime() >= startTime, \"Validation: After starttime\"); \n        _;\n    }\n\n    modifier saleNotClosed(){\n        require (!saleClosed, \"Sale is not yet ended\"); \n        _;\n    }\n\n    modifier nonReentrant() {\n        require(!rentrancy_lock, \"Validation: Reentrancy\");\n        rentrancy_lock = true;\n        _;\n        rentrancy_lock = false;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused, \"You are not allowed to access this time.\");\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused, \"You are not allowed to access this time.\");\n        _;\n    }\n\n    constructor() public{\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n    * @dev Transfers control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0), \"Owner cannot be 0 address.\");\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() public onlyOwnerOrManager whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() public onlyOwnerOrManager whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n\n    /**\n     * Returns the current time.\n     * Useful to abstract calls to \"now\" for tests.\n    */\n    function currentTime() public view returns (uint _currentTime) {\n        return block.timestamp;\n    }\n\n    /**\n     * The owner can terminate the crowdsale at any time.\n     */\n    function terminate() external onlyOwnerOrManager {\n        saleClosed = true;\n    }\n\n    /**\n     * The owner can update the rate (CHP to ETH).\n     *\n     * @param _rate  the new rate for converting CHP to ETH\n     */\n    function setRate(uint _rate) public onlyOwnerOrManager {\n        //require(_rate >= LOW_RANGE_RATE && _rate <= HIGH_RANGE_RATE);\n        rate = _rate;\n    }\n\n    /**\n     * The owner can unlock the fund with this function. The use-\n     * case for this is when the owner decides after the deadline\n     * to allow contributors to be refunded their contributions.\n     * Note that the fund would be automatically unlocked if the\n     * minimum funding goal were not reached.\n     */\n    function ownerUnlockFund() external afterDeadline onlyOwner {\n        fundingGoalReached = false;\n    }\n\n    /**\n     * Checks if the funding goal has been reached. If it has, then\n     * the GoalReached event is triggered.\n     */\n    function checkFundingGoal() internal {\n        if (!fundingGoalReached) {\n            if (amountRaised >= fundingGoal) {\n                fundingGoalReached = true;\n                emit GoalReached(beneficiary, amountRaised);\n            }\n        }\n    }\n\n    /**\n     * Checks if the funding cap has been reached. If it has, then\n     * the CapReached event is triggered.\n     */\n    function checkFundingCap() internal {\n        if (!fundingCapReached) {\n            if (amountRaised >= fundingCap) {\n                fundingCapReached = true;\n                saleClosed = true;\n                emit CapReached(beneficiary, amountRaised);\n            }\n        }\n    }\n\n    /**\n     * These helper functions are exposed for changing the start and end time dynamically   \n     */\n    function changeStartTime(uint256 _startTime) external onlyOwnerOrManager {startTime = _startTime;}\n    function changeEndTime(uint256 _endTime) external onlyOwnerOrManager {endTime = _endTime;}\n    function changeMinContribution(uint256 _newValue) external onlyOwnerOrManager {minContribution = _newValue * (10 ** decimals);}\n}\n\n\n\n\n\n\ncontract BaseLBSCToken {\n    using SafeMath for uint256;\n\n    // Globals\n    address public owner;\n    mapping(address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    uint256 internal totalSupply_;\n\n    // Events\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Burn(address indexed burner, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Mint(address indexed to, uint256 amount);\n\n    // Modifiers\n    modifier onlyOwner() {\n        require(msg.sender == owner,\"Only the owner is allowed to call this.\"); \n        _; \n    }\n\n    constructor() public{\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_value <= balances[msg.sender], \"You do not have sufficient balance.\");\n        require(_to != address(0), \"You cannot send tokens to 0 address\");\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n        require(_value <= balances[_from], \"You do not have sufficient balance.\");\n        require(_value <= allowed[_from][msg.sender], \"You do not have allowance.\");\n        require(_to != address(0), \"You cannot send tokens to 0 address\");\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address _owner, address _spender) public view returns (uint256){\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool){\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool){\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Burns a specific amount of tokens.\n    * @param _value The amount of token to be burned.\n    */\n    function burn(uint256 _value) public {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who], \"Insufficient balance of tokens\");\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n\n    /**\n    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n    * @param _from address The address which you want to send tokens from\n    * @param _value uint256 The amount of token to be burned\n    */\n    function burnFrom(address _from, uint256 _value) public {\n        require(_value <= allowed[_from][msg.sender], \"Insufficient allowance to burn tokens.\");\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        _burn(_from, _value);\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n    * @dev Transfers control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0), \"Owner cannot be 0 address.\");\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n\n}\n\ncontract LBSCToken is BaseLBSCToken {\n    \n    // Constants\n    string  public constant name = \"LabelsCoin\";\n    string  public constant symbol = \"LBSC\";\n    uint8   public constant decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY      =  30000000 * (10 ** uint256(decimals));\n    //uint256 public constant CROWDSALE_ALLOWANCE =  1000000000 * (10 ** uint256(decimals));\n    uint256 public constant ADMIN_ALLOWANCE     =  30000000 * (10 ** uint256(decimals));\n    \n    // Properties\n    //uint256 public totalSupply;\n    //uint256 public crowdSaleAllowance;      // the number of tokens available for crowdsales\n    uint256 public adminAllowance;          // the number of tokens available for the administrator\n    //address public crowdSaleAddr;           // the address of a crowdsale currently selling this token\n    address public adminAddr;               // the address of a crowdsale currently selling this token\n    //bool    public transferEnabled = false; // indicates if transferring tokens is enabled or not\n    bool    public transferEnabled = true;  // Enables everyone to transfer tokens\n\n    /**\n     * The listed addresses are not valid recipients of tokens.\n     *\n     * 0x0           - the zero address is not valid\n     * this          - the contract itself should not receive tokens\n     * owner         - the owner has all the initial tokens, but cannot receive any back\n     * adminAddr     - the admin has an allowance of tokens to transfer, but does not receive any\n     * crowdSaleAddr - the crowdsale has an allowance of tokens to transfer, but does not receive any\n     */\n    modifier validDestination(address _to) {\n        require(_to != address(0x0), \"Cannot send to 0 address\");\n        require(_to != address(this), \"Cannot send to contract address\");\n        //require(_to != owner, \"Cannot send to the owner\");\n        //require(_to != address(adminAddr), \"Cannot send to admin address\");\n        //require(_to != address(crowdSaleAddr), \"Cannot send to crowdsale address\");\n        _;\n    }\n\n    constructor(address _admin) public {\n        require(msg.sender != _admin, \"Owner and admin cannot be the same\");\n\n        totalSupply_ = INITIAL_SUPPLY;\n        adminAllowance = ADMIN_ALLOWANCE;\n\n        // mint all tokens\n        //balances[msg.sender] = totalSupply_.sub(adminAllowance);\n        //emit Transfer(address(0x0), msg.sender, totalSupply_.sub(adminAllowance));\n\n        balances[_admin] = adminAllowance;\n        emit Transfer(address(0x0), _admin, adminAllowance);\n\n        adminAddr = _admin;\n        approve(adminAddr, adminAllowance);\n    }\n\n    /**\n     * Overrides ERC20 transfer function with modifier that prevents the\n     * ability to transfer tokens until after transfers have been enabled.\n     */\n    function transfer(address _to, uint256 _value) public validDestination(_to) returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * Overrides ERC20 transferFrom function with modifier that prevents the\n     * ability to transfer tokens until after transfers have been enabled.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public validDestination(_to) returns (bool) {\n        bool result = super.transferFrom(_from, _to, _value);\n        if (result) {\n            if (msg.sender == adminAddr)\n                adminAllowance = adminAllowance.sub(_value);\n        }\n        return result;\n    }\n}\n\ncontract LBSCSale is BaseLBSCSale {\n    using SafeMath for uint256;\n\n    // The token being sold\n    LBSCToken public tokenReward;\n\n    mapping(address => bool) public approvedUsers;\n\n    /**\n     * Constructor for a crowdsale of CHPToken tokens.\n     *\n     * @param ifSuccessfulSendTo            the beneficiary of the fund\n     * @param fundingGoalInEthers           the minimum goal to be reached\n     * @param fundingCapInEthers            the cap (maximum) size of the fund\n     * @param minimumContribution           Minimum contribution to participate in the crowdsale\n     * @param start                         the start time (UNIX timestamp)\n     * @param end                           the end time (UNIX timestamp)\n     * @param rateLBSCToEther                 the conversion rate from LBSC to Ether\n     * @param addressOfTokenUsedAsReward    address of the token being sold\n     * @param _manager                      Address that will manage the crowdsale \n     */\n    constructor(\n        address ifSuccessfulSendTo,\n        uint fundingGoalInEthers,\n        uint fundingCapInEthers,\n        uint minimumContribution,\n        uint start,\n        uint end,\n        uint rateLBSCToEther,\n        address addressOfTokenUsedAsReward,\n        address _manager\n    ) public {\n        require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this), \"Beneficiary cannot be 0 address\");\n        require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this), \"Token address cannot be 0 address\");\n        require(fundingGoalInEthers <= fundingCapInEthers, \"Funding goal should be less that funding cap.\");\n        require(end > 0, \"Endtime cannot be 0\");\n        beneficiary = ifSuccessfulSendTo;\n        fundingGoal = fundingGoalInEthers;\n        fundingCap = fundingCapInEthers;\n        minContribution = minimumContribution;\n        startTime = start;\n        endTime = end; // TODO double check\n        rate = rateLBSCToEther;\n        tokenReward = LBSCToken(addressOfTokenUsedAsReward);\n        manager = _manager;\n        decimals = tokenReward.decimals();\n    }\n\n    /**\n     * This fallback function is called whenever Ether is sent to the\n     * smart contract. It can only be executed when the crowdsale is\n     * not paused, not closed, and before the deadline has been reached.\n     *\n     * This function will update state variables for whether or not the\n     * funding goal or cap have been reached. It also ensures that the\n     * tokens are transferred to the sender, and that the correct\n     * number of tokens are sent according to the current rate.\n     */\n    function () public payable whenNotPaused beforeDeadline afterStartTime saleNotClosed nonReentrant {\n        require(msg.value >= minContribution, \"Value should be greater than minimum contribution\");\n        require(isApprovedUser(msg.sender), \"Only the approved users are allowed to participate in ICO\");\n        \n        // Update the sender's balance of wei contributed and the amount raised\n        uint amount = msg.value;\n        uint currentBalance = balanceOf[msg.sender];\n        balanceOf[msg.sender] = currentBalance.add(amount);\n        amountRaised = amountRaised.add(amount);\n\n        // Compute the number of tokens to be rewarded to the sender\n        // Note: it's important for this calculation that both wei\n        // and CHP have the same number of decimal places (18)\n        uint numTokens = amount.mul(rate);\n\n        // Transfer the tokens from the crowdsale supply to the sender\n        if (tokenReward.transferFrom(tokenReward.owner(), msg.sender, numTokens)) {\n            emit FundTransfer(msg.sender, amount, true);\n            //contributions[msg.sender] = contributions[msg.sender].add(amount);\n            // Following code is to automatically transfer ETH to beneficiary\n            //uint balanceToSend = this.balance;\n            //beneficiary.transfer(balanceToSend);\n            //FundTransfer(beneficiary, balanceToSend, false);\n            // Check if the funding goal or cap have been reached\n            // TODO check impact on gas cost\n            checkFundingGoal();\n            checkFundingCap();\n        }\n        else {\n            revert(\"Transaction Failed. Please try again later.\");\n        }\n    }\n\n    /**\n     * The owner can allocate the specified amount of tokens from the\n     * crowdsale allowance to the recipient (_to).\n     *\n     * NOTE: be extremely careful to get the amounts correct, which\n     * are in units of wei and mini-LBSC. Every digit counts.\n     *\n     * @param _to            the recipient of the tokens\n     * @param amountInEth     the amount contributed in wei\n     * @param amountLBSC the amount of tokens transferred in mini-LBSC (18 decimals)\n     */\n    function ownerAllocateTokens(address _to, uint amountInEth, uint amountLBSC) public\n            onlyOwnerOrManager nonReentrant\n    {\n        if (!tokenReward.transferFrom(tokenReward.owner(), _to, convertToMini(amountLBSC))) {\n            revert(\"Transfer failed. Please check allowance\");\n        }\n\n        uint amountWei = convertToMini(amountInEth);\n        balanceOf[_to] = balanceOf[_to].add(amountWei);\n        amountRaised = amountRaised.add(amountWei);\n        emit FundTransfer(_to, amountWei, true);\n        checkFundingGoal();\n        checkFundingCap();\n    }\n\n    /**\n     * The owner can call this function to withdraw the funds that\n     * have been sent to this contract for the crowdsale subject to\n     * the funding goal having been reached. The funds will be sent\n     * to the beneficiary specified when the crowdsale was created.\n     */\n    function ownerSafeWithdrawal() public onlyOwner nonReentrant {\n        require(fundingGoalReached, \"Check funding goal\");\n        uint balanceToSend = address(this).balance;\n        beneficiary.transfer(balanceToSend);\n        emit FundTransfer(beneficiary, balanceToSend, false);\n    }\n\n    /**\n     * This function permits anybody to withdraw the funds they have\n     * contributed if and only if the deadline has passed and the\n     * funding goal was not reached.\n     */\n    function safeWithdrawal() public afterDeadline nonReentrant {\n        if (!fundingGoalReached) {\n            uint amount = balanceOf[msg.sender];\n            balanceOf[msg.sender] = 0;\n            if (amount > 0) {\n                msg.sender.transfer(amount);\n                emit FundTransfer(msg.sender, amount, false);\n                refundAmount = refundAmount.add(amount);\n            }\n        }\n    }\n    \n    function convertToMini(uint amount) internal view returns (uint) {\n        return amount * (10 ** decimals);\n    }\n\n    function approveUser(address _address) external onlyOwnerOrManager {\n        approvedUsers[_address] = true;\n    }\n\n    function disapproveUser(address _address) external onlyOwnerOrManager {\n        approvedUsers[_address] = false;\n    }\n\n    function changeManager(address _manager) external onlyOwnerOrManager {\n        manager = _manager;\n    }\n\n    function isApprovedUser(address _address) internal view returns (bool) {\n        return approvedUsers[_address];\n    }\n\n    function changeTokenAddress(address _address) external onlyOwnerOrManager {\n        tokenReward = LBSCToken(_address);\n    }\n}",
  "bytecode": "60806040526000805460a060020a60ff02191690556006805462ffffff1916905560dc600b55600c805460ff191690553480156200003c57600080fd5b5060405161012080620021b283398101604090815281516020830151918301516060840151608085015160a086015160c087015160e08801516101009098015160008054600160a060020a03191633179055959794959394929391929091600160a060020a03891615801590620000bc5750600160a060020a0389163014155b15156200012a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f42656e65666963696172792063616e6e6f742062652030206164647265737300604482015290519081900360640190fd5b600160a060020a038216158015906200014c5750600160a060020a0382163014155b1515620001e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f546f6b656e20616464726573732063616e6e6f7420626520302061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b868811156200027657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f46756e64696e6720676f616c2073686f756c64206265206c657373207468617460448201527f2066756e64696e67206361702e00000000000000000000000000000000000000606482015290519081900360840190fd5b60008411620002e657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f456e6474696d652063616e6e6f74206265203000000000000000000000000000604482015290519081900360640190fd5b60018054600160a060020a03808c16600160a060020a03199283161790925560028a90556003899055600488815560078890556008879055600b869055600f80548685169084161790819055600e8054868616941693909317909255604080517f313ce5670000000000000000000000000000000000000000000000000000000081529051929093169263313ce56792818301926020928290030181600087803b1580156200039457600080fd5b505af1158015620003a9573d6000803e3d6000fd5b505050506040513d6020811015620003c057600080fd5b505160ff16600555505050505050505050611dd180620003e16000396000f3006080604052600436106101a85763ffffffff60e060020a6000350416630c08bf8881146106f357806323ec8f621461070a57806328e081861461071f5780632c4e722e146107465780633052b75e1461076d578063313ce567146107855780633197cbb61461079a57806334fcf437146107af57806338af3eed146107c75780633f4ba83a146107f8578063481c6a751461080d5780635c975abb146108225780636e66f6e91461084b57806370a0823114610860578063782e34c91461088157806378e979251461089657806378f2c321146108ab5780637a3a0e84146108cc5780637b3e5e7b146108e15780638456cb59146108f6578063848b38211461090b578063893cd3be146109205780638aa5b2c3146109415780638da5cb5b14610959578063a3fbbaae1461096e578063aaffadf31461098f578063ad33513f146109a4578063b3b81d38146109b9578063b8c766b8146109d1578063c9cda91f146109e6578063d18e81b314610a07578063d424f62814610a1c578063d624fdb614610a31578063e3b2594f14610a52578063f2fde38b14610a67578063fd6b7ef814610a88575b600080548190819060a060020a900460ff1615610235576040805160e560020a62461bcd02815260206004820152602860248201527f596f7520617265206e6f7420616c6c6f77656420746f2061636365737320746860448201527f69732074696d652e000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600854610240610a9d565b10610295576040805160e560020a62461bcd02815260206004820152601a60248201527f56616c69646174696f6e3a204265666f726520656e6474696d65000000000000604482015290519081900360640190fd5b6007546102a0610a9d565b10156102f6576040805160e560020a62461bcd02815260206004820152601b60248201527f56616c69646174696f6e3a20416674657220737461727474696d650000000000604482015290519081900360640190fd5b60065462010000900460ff1615610357576040805160e560020a62461bcd02815260206004820152601560248201527f53616c65206973206e6f742079657420656e6465640000000000000000000000604482015290519081900360640190fd5b600c5460ff16156103a0576040805160e560020a62461bcd0281526020600482015260166024820152600080516020611d46833981519152604482015290519081900360640190fd5b600c805460ff1916600117905560045434101561042d576040805160e560020a62461bcd02815260206004820152603160248201527f56616c75652073686f756c642062652067726561746572207468616e206d696e60448201527f696d756d20636f6e747269627574696f6e000000000000000000000000000000606482015290519081900360840190fd5b61043633610aa1565b15156104b2576040805160e560020a62461bcd02815260206004820152603960248201527f4f6e6c792074686520617070726f7665642075736572732061726520616c6c6f60448201527f77656420746f20706172746963697061746520696e2049434f00000000000000606482015290519081900360840190fd5b336000908152600d602052604090205434935091506104d7828463ffffffff610abf16565b336000908152600d60205260409020556009546104fa908463ffffffff610abf16565b600955600b5461051190849063ffffffff610ad216565b600f54604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051929350600160a060020a03909116916323b872dd918391638da5cb5b916004808201926020929091908290030181600087803b15801561057c57600080fd5b505af1158015610590573d6000803e3d6000fd5b505050506040513d60208110156105a657600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152336024830152604482018590525160648083019260209291908290030181600087803b1580156105fa57600080fd5b505af115801561060e573d6000803e3d6000fd5b505050506040513d602081101561062457600080fd5b50511561066e5760408051338152602081018590526001818301529051600080516020611d868339815191529181900360600190a1610661610afb565b610669610b6e565b6106e4565b6040805160e560020a62461bcd02815260206004820152602b60248201527f5472616e73616374696f6e204661696c65642e20506c6561736520747279206160448201527f6761696e206c617465722e000000000000000000000000000000000000000000606482015290519081900360840190fd5b5050600c805460ff1916905550005b3480156106ff57600080fd5b50610708610bf3565b005b34801561071657600080fd5b50610708610c81565b34801561072b57600080fd5b50610708600160a060020a0360043516602435604435610d76565b34801561075257600080fd5b5061075b61109d565b60408051918252519081900360200190f35b34801561077957600080fd5b506107086004356110a3565b34801561079157600080fd5b5061075b611123565b3480156107a657600080fd5b5061075b611129565b3480156107bb57600080fd5b5061070860043561112f565b3480156107d357600080fd5b506107dc6111af565b60408051600160a060020a039092168252519081900360200190f35b34801561080457600080fd5b506107086111be565b34801561081957600080fd5b506107dc611309565b34801561082e57600080fd5b50610837611318565b604080519115158252519081900360200190f35b34801561085757600080fd5b506107dc611328565b34801561086c57600080fd5b5061075b600160a060020a0360043516611337565b34801561088d57600080fd5b50610708611349565b3480156108a257600080fd5b5061075b611508565b3480156108b757600080fd5b50610708600160a060020a036004351661150e565b3480156108d857600080fd5b5061075b6115aa565b3480156108ed57600080fd5b5061075b6115b0565b34801561090257600080fd5b506107086115b6565b34801561091757600080fd5b50610837611706565b34801561092c57600080fd5b50610837600160a060020a0360043516611714565b34801561094d57600080fd5b50610708600435611729565b34801561096557600080fd5b506107dc6117a9565b34801561097a57600080fd5b50610708600160a060020a03600435166117b8565b34801561099b57600080fd5b5061075b611862565b3480156109b057600080fd5b5061075b611868565b3480156109c557600080fd5b5061070860043561186e565b3480156109dd57600080fd5b506108376118f5565b3480156109f257600080fd5b50610708600160a060020a0360043516611904565b348015610a1357600080fd5b5061075b610a9d565b348015610a2857600080fd5b506108376119ae565b348015610a3d57600080fd5b50610708600160a060020a03600435166119b7565b348015610a5e57600080fd5b5061075b611a56565b348015610a7357600080fd5b50610708600160a060020a0360043516611a5c565b348015610a9457600080fd5b50610708611af0565b4290565b600160a060020a031660009081526010602052604090205460ff1690565b81810182811015610acc57fe5b92915050565b6000821515610ae357506000610acc565b50818102818382811515610af357fe5b0414610acc57fe5b60065460ff161515610b6c5760025460095410610b6c576006805460ff191660019081179091555460095460408051600160a060020a039093168352602083019190915280517fec3f991caf7857d61663fd1bba1739e04abd4781238508cde554bb849d790c859281900390910190a15b565b600654610100900460ff161515610b6c5760035460095410610b6c576006805462ff00001961ff001990911661010017166201000017905560015460095460408051600160a060020a039093168352602083019190915280517f195de8a1ebf5a1244af169b7e0bd0f735307a2626a73abce88f9b488628c6c249281900390910190a1565b600054600160a060020a0316331480610c165750600e54600160a060020a031633145b1515610c6e576040805160e560020a62461bcd02815260206004820152602d6024820152600080516020611d268339815191526044820152600080516020611d66833981519152606482015290519081900360840190fd5b6006805462ff0000191662010000179055565b600854610c8c610a9d565b1015610ce2576040805160e560020a62461bcd02815260206004820152601960248201527f56616c69646174696f6e3a20416674657220656e6474696d6500000000000000604482015290519081900360640190fd5b600054600160a060020a03163314610d6a576040805160e560020a62461bcd02815260206004820152602760248201527f4f6e6c7920746865206f776e657220697320616c6c6f77656420746f2063616c60448201527f6c20746869732e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6006805460ff19169055565b60008054600160a060020a0316331480610d9a5750600e54600160a060020a031633145b1515610df2576040805160e560020a62461bcd02815260206004820152602d6024820152600080516020611d268339815191526044820152600080516020611d66833981519152606482015290519081900360840190fd5b600c5460ff1615610e3b576040805160e560020a62461bcd0281526020600482015260166024820152600080516020611d46833981519152604482015290519081900360640190fd5b600c805460ff19166001179055600f54604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216916323b872dd918391638da5cb5b916004808201926020929091908290030181600087803b158015610eb057600080fd5b505af1158015610ec4573d6000803e3d6000fd5b505050506040513d6020811015610eda57600080fd5b505186610ee686611c53565b6040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529290931660248301526044820152905160648083019260209291908290030181600087803b158015610f3a57600080fd5b505af1158015610f4e573d6000803e3d6000fd5b505050506040513d6020811015610f6457600080fd5b50511515610fe2576040805160e560020a62461bcd02815260206004820152602760248201527f5472616e73666572206661696c65642e20506c6561736520636865636b20616c60448201527f6c6f77616e636500000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610feb83611c53565b600160a060020a0385166000908152600d6020526040902054909150611017908263ffffffff610abf16565b600160a060020a0385166000908152600d6020526040902055600954611043908263ffffffff610abf16565b60095560408051600160a060020a0386168152602081018390526001818301529051600080516020611d868339815191529181900360600190a1611085610afb565b61108d610b6e565b5050600c805460ff191690555050565b600b5481565b600054600160a060020a03163314806110c65750600e54600160a060020a031633145b151561111e576040805160e560020a62461bcd02815260206004820152602d6024820152600080516020611d268339815191526044820152600080516020611d66833981519152606482015290519081900360840190fd5b600855565b60055481565b60085481565b600054600160a060020a03163314806111525750600e54600160a060020a031633145b15156111aa576040805160e560020a62461bcd02815260206004820152602d6024820152600080516020611d268339815191526044820152600080516020611d66833981519152606482015290519081900360840190fd5b600b55565b600154600160a060020a031681565b600054600160a060020a03163314806111e15750600e54600160a060020a031633145b1515611239576040805160e560020a62461bcd02815260206004820152602d6024820152600080516020611d268339815191526044820152600080516020611d66833981519152606482015290519081900360840190fd5b60005460a060020a900460ff1615156112c2576040805160e560020a62461bcd02815260206004820152602860248201527f596f7520617265206e6f7420616c6c6f77656420746f2061636365737320746860448201527f69732074696d652e000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b600e54600160a060020a031681565b60005460a060020a900460ff1681565b600f54600160a060020a031681565b600d6020526000908152604090205481565b60008054600160a060020a031633146113d2576040805160e560020a62461bcd02815260206004820152602760248201527f4f6e6c7920746865206f776e657220697320616c6c6f77656420746f2063616c60448201527f6c20746869732e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600c5460ff161561141b576040805160e560020a62461bcd0281526020600482015260166024820152600080516020611d46833981519152604482015290519081900360640190fd5b600c805460ff1916600117905560065460ff161515611484576040805160e560020a62461bcd02815260206004820152601260248201527f436865636b2066756e64696e6720676f616c0000000000000000000000000000604482015290519081900360640190fd5b50600154604051303191600160a060020a03169082156108fc029083906000818181858888f193505050501580156114c0573d6000803e3d6000fd5b5060015460408051600160a060020a0390921682526020820183905260008282015251600080516020611d868339815191529181900360600190a150600c805460ff19169055565b60075481565b600054600160a060020a03163314806115315750600e54600160a060020a031633145b1515611589576040805160e560020a62461bcd02815260206004820152602d6024820152600080516020611d268339815191526044820152600080516020611d66833981519152606482015290519081900360840190fd5b600160a060020a03166000908152601060205260409020805460ff19169055565b60025481565b60095481565b600054600160a060020a03163314806115d95750600e54600160a060020a031633145b1515611631576040805160e560020a62461bcd02815260206004820152602d6024820152600080516020611d268339815191526044820152600080516020611d66833981519152606482015290519081900360840190fd5b60005460a060020a900460ff16156116b9576040805160e560020a62461bcd02815260206004820152602860248201527f596f7520617265206e6f7420616c6c6f77656420746f2061636365737320746860448201527f69732074696d652e000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600654610100900460ff1681565b60106020526000908152604090205460ff1681565b600054600160a060020a031633148061174c5750600e54600160a060020a031633145b15156117a4576040805160e560020a62461bcd02815260206004820152602d6024820152600080516020611d268339815191526044820152600080516020611d66833981519152606482015290519081900360840190fd5b600755565b600054600160a060020a031681565b600054600160a060020a03163314806117db5750600e54600160a060020a031633145b1515611833576040805160e560020a62461bcd02815260206004820152602d6024820152600080516020611d268339815191526044820152600080516020611d66833981519152606482015290519081900360840190fd5b600e805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60045481565b600a5481565b600054600160a060020a03163314806118915750600e54600160a060020a031633145b15156118e9576040805160e560020a62461bcd02815260206004820152602d6024820152600080516020611d268339815191526044820152600080516020611d66833981519152606482015290519081900360840190fd5b600554600a0a02600455565b60065462010000900460ff1681565b600054600160a060020a03163314806119275750600e54600160a060020a031633145b151561197f576040805160e560020a62461bcd02815260206004820152602d6024820152600080516020611d268339815191526044820152600080516020611d66833981519152606482015290519081900360840190fd5b600f805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60065460ff1681565b600054600160a060020a03163314806119da5750600e54600160a060020a031633145b1515611a32576040805160e560020a62461bcd02815260206004820152602d6024820152600080516020611d268339815191526044820152600080516020611d66833981519152606482015290519081900360840190fd5b600160a060020a03166000908152601060205260409020805460ff19166001179055565b60035481565b600054600160a060020a03163314611ae4576040805160e560020a62461bcd02815260206004820152602760248201527f4f6e6c7920746865206f776e657220697320616c6c6f77656420746f2063616c60448201527f6c20746869732e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b611aed81611c5d565b50565b6000600854611afd610a9d565b1015611b53576040805160e560020a62461bcd02815260206004820152601960248201527f56616c69646174696f6e3a20416674657220656e6474696d6500000000000000604482015290519081900360640190fd5b600c5460ff1615611b9c576040805160e560020a62461bcd0281526020600482015260166024820152600080516020611d46833981519152604482015290519081900360640190fd5b600c805460ff1916600117905560065460ff161515611c465750336000908152600d6020526040812080549082905590811115611c4657604051339082156108fc029083906000818181858888f19350505050158015611c00573d6000803e3d6000fd5b5060408051338152602081018390526000818301529051600080516020611d868339815191529181900360600190a1600a54611c42908263ffffffff610abf16565b600a555b50600c805460ff19169055565b600554600a0a0290565b600160a060020a0381161515611cbd576040805160e560020a62461bcd02815260206004820152601a60248201527f4f776e65722063616e6e6f74206265203020616464726573732e000000000000604482015290519081900360640190fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556004f6e6c79206f776e6572206f72206d616e6167657220697320616c6c6f77656456616c69646174696f6e3a205265656e7472616e63790000000000000000000020746f2063616c6c207468697300000000000000000000000000000000000000e842aea7a5f1b01049d752008c53c52890b1a6daf660cf39e8eec506112bbdf6a165627a7a72305820fe36e1d28b74d357ddd5944f25c44207daaca59c0c469f87b6e9eb2410fb84ce0029000000000000000000000000164d4534eb059f2674af408e62ee745381df792900000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000008459508334a94a29c0000000000000000000000000000000000000000000000000000063eb89da4ed0000000000000000000000000000000000000000000000000000000000005bcdc459000000000000000000000000000000000000000000000000000000005dbb757f00000000000000000000000000000000000000000000000000000000000000dc00000000000000000000000044f70b3f2938dee203360f6fa2c11e7b59cf4c71000000000000000000000000221ff4a3daf8f4af2efd71e3da3bcde0ea707f05",
  "constructorArguments": "000000000000000000000000164d4534eb059f2674af408e62ee745381df792900000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000008459508334a94a29c0000000000000000000000000000000000000000000000000000063eb89da4ed0000000000000000000000000000000000000000000000000000000000005bcdc459000000000000000000000000000000000000000000000000000000005dbb757f00000000000000000000000000000000000000000000000000000000000000dc00000000000000000000000044f70b3f2938dee203360f6fa2c11e7b59cf4c71000000000000000000000000221ff4a3daf8f4af2efd71e3da3bcde0ea707f05"
}