{
  "address": "0x479ddb3b80e9813582b481228968a9f354c87408",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenVesting",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-12\n*/\n\npragma solidity ^0.4.21;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/TokenVesting.sol\n\ncontract TokenVesting is Ownable {\n    using SafeMath for uint256;\n\n    // -- Parameters\n\n    // Token to vest.\n    address public token;\n\n    // Total token to vest.\n    uint256 public totalToken;\n\n    // Vest starting time.\n    uint256 public startingTime;\n\n    // Number of stages to vest.\n    uint256 public nStages;\n\n    // Length of the vesting contract.\n    uint256 public period;\n\n    // Vest interval.\n    uint256 public vestInterval;\n\n    // The address of beneficiary.\n    address public beneficiary;\n\n    // Whether or not the contract is revoked.\n    bool revoked;\n\n    // -- Events\n    event Claimed(uint256 amount);\n\n    constructor() public {\n    }\n\n    function initialize(\n        address _token,\n        uint256 _startingTime,\n        uint256 _nStages,\n        uint256 _period,\n        uint256 _vestInterval,\n        address _beneficiary\n    ) onlyOwner {\n        // nStages: number of nStages.\n        // period: the length of the vest (unit in months).\n        // vestInterval: interval between each release.\n        //\n        // For example, given:\n        //  startingTime = xxx\n        //  nStages = 4\n        //  period = 24\n        //  vestInterval = 1\n        //\n        // This results in the vesting rule:\n        // 1. The first vest happens in 24 / 4 = 6 months, vest 1 / 4 of total\n        //    Tokens.\n        // 2. The rest of the tokens are released every month (vestInterval),\n        //    amount = total * (3 / 4) / 18\n\n        require(token == 0x0);\n        require(_nStages > 0 && _period > 0 && _vestInterval > 0);\n        require(_period % _nStages == 0);\n        require(_period % _vestInterval == 0);\n\n        token = _token;\n        startingTime = _startingTime;\n        nStages = _nStages;\n        period = _period;\n        vestInterval = _vestInterval;\n        beneficiary = _beneficiary;\n\n        StandardToken vestToken = StandardToken(token);\n        totalToken = vestToken.allowance(msg.sender, this);\n        vestToken.transferFrom(msg.sender, this, totalToken);\n    }\n\n    function getCurrentTimestamp() internal view returns (uint256) {\n        return now;\n    }\n\n    function balance() public view returns (uint256) {\n        StandardToken vestToken = StandardToken(token);\n        return vestToken.balanceOf(this);\n    }\n\n    function claimable() public view returns (uint256) {\n        uint256 elapsedSecs = getCurrentTimestamp() - startingTime;\n        if (elapsedSecs <= 0) {\n            return 0;\n        }\n\n        uint256 currentPeriod = elapsedSecs.div(30 days);\n        currentPeriod = currentPeriod.div(vestInterval).mul(vestInterval);\n\n        // Can not claim when we have not pass the 1st period.\n        if (currentPeriod < period / nStages) {\n            return 0;\n        }\n\n        if (currentPeriod > period)  {\n            currentPeriod = period;\n        }\n\n        // Calculate Number of token the user can claim at current time.\n        uint256 totalClaimable = totalToken.mul(currentPeriod).div(period);\n        uint256 totalLeftOvers = totalToken.sub(totalClaimable);\n        uint256 claimable_ = balance().sub(totalLeftOvers);\n\n        return claimable_;\n    }\n\n    function claim() public {\n        require(!revoked);\n\n        uint256 claimable_ = claimable();\n        require(claimable_ > 0);\n\n        StandardToken vestToken = StandardToken(token);\n        vestToken.transfer(beneficiary, claimable_);\n\n        emit Claimed(claimable_);\n    }\n\n    function revoke() onlyOwner public {\n        require(!revoked);\n\n        StandardToken vestToken = StandardToken(token);\n        vestToken.transfer(owner, balance());\n        revoked = true;\n    }\n\n    function () payable {\n        revert();\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610fd9806100606000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806307d1ccd2146100d557806338af3eed1461010057806339518b5e146101575780634e71d92d146101825780635df5f96f14610199578063626be567146102245780638da5cb5b1461024f578063af38d757146102a6578063b6549f75146102d1578063b69ef8a8146102e8578063ef78d4fd14610313578063f2f3c7731461033e578063f2fde38b14610369578063fc0c546a146103ac575b600080fd5b3480156100e157600080fd5b506100ea610403565b6040518082815260200191505060405180910390f35b34801561010c57600080fd5b50610115610409565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561016357600080fd5b5061016c61042f565b6040518082815260200191505060405180910390f35b34801561018e57600080fd5b50610197610435565b005b3480156101a557600080fd5b50610222600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105ce565b005b34801561023057600080fd5b506102396109be565b6040518082815260200191505060405180910390f35b34801561025b57600080fd5b506102646109c4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102b257600080fd5b506102bb6109e9565b6040518082815260200191505060405180910390f35b3480156102dd57600080fd5b506102e6610af0565b005b3480156102f457600080fd5b506102fd610cb3565b6040518082815260200191505060405180910390f35b34801561031f57600080fd5b50610328610db7565b6040518082815260200191505060405180910390f35b34801561034a57600080fd5b50610353610dbd565b6040518082815260200191505060405180910390f35b34801561037557600080fd5b506103aa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dc3565b005b3480156103b857600080fd5b506103c1610f18565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60045481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600080600760149054906101000a900460ff1615151561045457600080fd5b61045c6109e9565b915060008211151561046d57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561055757600080fd5b505af115801561056b573d6000803e3d6000fd5b505050506040513d602081101561058157600080fd5b8101908080519060200190929190505050507f7a355715549cfe7c1cba26304350343fbddc4b4f72d3ce3e7c27117dd20b5cb8826040518082815260200191505060405180910390a15050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561062b57600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561067257600080fd5b6000851180156106825750600084115b801561068e5750600083115b151561069957600080fd5b600085858115156106a657fe5b061415156106b357600080fd5b600083858115156106c057fe5b061415156106cd57600080fd5b86600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508560038190555084600481905550836005819055508260068190555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561085f57600080fd5b505af1158015610873573d6000803e3d6000fd5b505050506040513d602081101561088957600080fd5b81019080805190602001909291905050506002819055508073ffffffffffffffffffffffffffffffffffffffff166323b872dd33306002546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561097957600080fd5b505af115801561098d573d6000803e3d6000fd5b505050506040513d60208110156109a357600080fd5b81019080805190602001909291905050505050505050505050565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806000806003546109fd610f3e565b039450600085111515610a135760009550610ae8565b610a2962278d0086610f4690919063ffffffff16565b9350610a54600654610a4660065487610f4690919063ffffffff16565b610f5c90919063ffffffff16565b9350600454600554811515610a6557fe5b04841015610a765760009550610ae8565b600554841115610a865760055493505b610aaf600554610aa186600254610f5c90919063ffffffff16565b610f4690919063ffffffff16565b9250610ac683600254610f9490919063ffffffff16565b9150610ae282610ad4610cb3565b610f9490919063ffffffff16565b90508095505b505050505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b4d57600080fd5b600760149054906101000a900460ff16151515610b6957600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610bd4610cb3565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610c5957600080fd5b505af1158015610c6d573d6000803e3d6000fd5b505050506040513d6020811015610c8357600080fd5b8101908080519060200190929190505050506001600760146101000a81548160ff02191690831515021790555050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610d7657600080fd5b505af1158015610d8a573d6000803e3d6000fd5b505050506040513d6020811015610da057600080fd5b810190808051906020019092919050505091505090565b60055481565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e1e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e5a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600042905090565b60008183811515610f5357fe5b04905092915050565b600080831415610f6f5760009050610f8e565b8183029050818382811515610f8057fe5b04141515610f8a57fe5b8090505b92915050565b6000828211151515610fa257fe5b8183039050929150505600a165627a7a72305820f0e74c6ae10b2654c80251f49b1890604b1871cb99dedeb396efb19ce09f4ad40029"
}