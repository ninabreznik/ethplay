{
  "address": "0x8bdb442803275b21abb2555fea11468bf5d98256",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BMT_Exchange",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-28\n*/\n\npragma solidity >=0.5.0;\n\nlibrary UintSafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract BMToken\n{\n    function allowance(address src, address where) public pure returns (uint256);\n    function transferFrom(address src, address where, uint amount) public returns (bool);\n    function transfer(address where, uint amount) external returns (bool);\n}\n\ncontract BMT_Exchange {\n    using UintSafeMath for uint256;\n\n    BMToken contractTokens;\n    address payable public owner;\n\n    uint256 public tokenPrice;\n    uint256 public totalSupplay;\n    uint256 public ethPart;\n\n    mapping(address => uint256) public Holders;\n    mapping(address => uint256) public lastAccess;\n    uint256 lastUpdate;\n\n    uint256 constant distributionInterval = 5 days;\n\n    constructor() public {\n        contractTokens = BMToken(0xf028ADEe51533b1B47BEaa890fEb54a457f51E89);\n\n        owner = msg.sender;\n\n        tokenPrice = 0.0000765 ether;\n        totalSupplay = 0;\n        ethPart = 0 ether;\n    }\n\n    modifier isOwner()\n    {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    function changeOwner(address payable new_owner) isOwner public {\n        assert(new_owner != owner);\n        assert(new_owner != address(0x0));\n\n        owner = new_owner;\n    }\n\n    // DO NOT SEND TOKENS TO CONTRACT - USE \"APPROVE\" FUNCTION\n    function transferTokens(uint256 _value) isOwner public{\n        contractTokens.transfer(owner, _value);\n    }\n\n    function setTokenPrice(uint256 new_price) isOwner public {\n        assert(new_price > 0);\n\n        tokenPrice = new_price;\n    }\n\n    function updateHolder(address[] calldata _holders, uint256[] calldata _amounts) isOwner external {\n        assert(_holders.length == _amounts.length);\n\n        for(uint256 i = 0; i < _holders.length; i++){\n            Holders[_holders[i]] = Holders[_holders[i]].add(_amounts[i]);\n            totalSupplay = totalSupplay.add(_amounts[i]);\n        }\n\n        updateTokenDistribution();\n    }\n\n    function deposit() isOwner payable public {\n        assert(msg.value > 0);\n        updateTokenDistribution();\n    }\n\n    function withdraw(uint256 amount) isOwner public {\n        assert(address(this).balance >= amount);\n\n        address(owner).transfer(amount);\n        updateTokenDistribution();\n\n    }\n    function updateTokenDistribution() internal {\n        if (totalSupplay > 0) {\n            ethPart = address(this).balance.mul(10**18).div(totalSupplay);\n            lastUpdate = now;\n        }\n    }\n\n    function secondsLeft(address addr) view public returns (uint256) {\n        if (now < lastAccess[addr]) return 0;\n        return now - lastAccess[addr];\n    }\n\n    function calculateAmounts(address addr) view public returns (uint256 tokenAmount, uint256 ethReturn) {\n        assert(Holders[addr] > 0);\n        assert(now - lastAccess[addr] > distributionInterval);\n\n        tokenAmount = ethPart.mul(Holders[addr]).div(tokenPrice).div(10**18).mul(10**18); // +round\n        assert(tokenAmount > 0);\n        assert(contractTokens.allowance(addr, address(this)) >= tokenAmount);\n        ethReturn = tokenAmount.mul(tokenPrice).div(10**18);\n    }\n\n    function () external {\n        if (now - lastUpdate > distributionInterval) updateTokenDistribution();\n        assert(tx.origin == msg.sender);\n\n        assert(Holders[msg.sender] > 0);\n        assert(now - lastAccess[msg.sender] > distributionInterval);\n\n        uint256 tokenAmount;\n        uint256 ethReturn;\n        (tokenAmount, ethReturn) = calculateAmounts(msg.sender);\n\n        contractTokens.transferFrom(msg.sender, owner, tokenAmount);\n        msg.sender.transfer(ethReturn);\n\n        Holders[msg.sender] = Holders[msg.sender].sub(tokenAmount);\n        totalSupplay = totalSupplay.sub(tokenAmount);\n        lastAccess[msg.sender] = now;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"secondsLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"calculateAmounts\",\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"ethReturn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Holders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]",
  "bytecode": "608060405234801561001057600080fd5b50600080546001600160a01b031990811673f028adee51533b1b47beaa890feb54a457f51e8917825560018054909116331790556545938b5348006002556003819055600455610ae8806100656000396000f3fe6080604052600436106100dd5760003560e01c80638da5cb5b1161007f578063d0e30db011610059578063d0e30db014610426578063d1ec6b881461042e578063eec0ddd7146104fd578063fd9a4e6114610530576100dd565b80638da5cb5b1461038f578063a06bbcbf146103c0578063a6f9dae1146103f3576100dd565b80636a10c71c116100bb5780636a10c71c146102d15780636a61e5fc146103045780637ff9b5961461032e5780638c76c2c714610343576100dd565b80632e1a7d4d14610269578063393b0b52146102955780635fea0a50146102bc575b3480156100e957600080fd5b5062069780600754420311156101015761010161055a565b32331461010a57fe5b3360009081526005602052604090205461012057fe5b336000908152600660205260409020546206978042919091031161014057fe5b60008061014c33610598565b6000805460015460408051600160e01b6323b872dd0281523360048201526001600160a01b03928316602482015260448101879052905195975093955016926323b872dd926064808201936020939283900390910190829087803b1580156101b357600080fd5b505af11580156101c7573d6000803e3d6000fd5b505050506040513d60208110156101dd57600080fd5b5050604051339082156108fc029083906000818181858888f1935050505015801561020c573d6000803e3d6000fd5b503360009081526005602052604090205461022d908363ffffffff61070716565b33600090815260056020526040902055600354610250908363ffffffff61070716565b6003555050336000908152600660205260409020429055005b34801561027557600080fd5b506102936004803603602081101561028c57600080fd5b503561071e565b005b3480156102a157600080fd5b506102aa610783565b60408051918252519081900360200190f35b3480156102c857600080fd5b506102aa610789565b3480156102dd57600080fd5b506102aa600480360360208110156102f457600080fd5b50356001600160a01b031661078f565b34801561031057600080fd5b506102936004803603602081101561032757600080fd5b50356107d9565b34801561033a57600080fd5b506102aa6107fc565b34801561034f57600080fd5b506103766004803603602081101561036657600080fd5b50356001600160a01b0316610598565b6040805192835260208301919091528051918290030190f35b34801561039b57600080fd5b506103a4610802565b604080516001600160a01b039092168252519081900360200190f35b3480156103cc57600080fd5b506102aa600480360360208110156103e357600080fd5b50356001600160a01b0316610811565b3480156103ff57600080fd5b506102936004803603602081101561041657600080fd5b50356001600160a01b0316610823565b610293610881565b34801561043a57600080fd5b506102936004803603604081101561045157600080fd5b81019060208101813564010000000081111561046c57600080fd5b82018360208201111561047e57600080fd5b803590602001918460208302840111640100000000831117156104a057600080fd5b9193909290916020810190356401000000008111156104be57600080fd5b8201836020820111156104d057600080fd5b803590602001918460208302840111640100000000831117156104f257600080fd5b5090925090506108a7565b34801561050957600080fd5b506102aa6004803603602081101561052057600080fd5b50356001600160a01b03166109b9565b34801561053c57600080fd5b506102936004803603602081101561055357600080fd5b50356109cb565b600354156105965760035461058e906105823031670de0b6b3a764000063ffffffff610a6d16565b9063ffffffff610a9816565b600455426007555b565b6001600160a01b03811660009081526005602052604081205481906105b957fe5b6001600160a01b038316600090815260066020526040902054620697804291909103116105e257fe5b610646670de0b6b3a764000061063a670de0b6b3a7640000610582600254610582600560008b6001600160a01b03166001600160a01b0316815260200190815260200160002054600454610a6d90919063ffffffff16565b9063ffffffff610a6d16565b91506000821161065257fe5b60005460408051600160e11b636eb1769f0281526001600160a01b03868116600483015230602483015291518593929092169163dd62ed3e91604480820192602092909190829003018186803b1580156106ab57600080fd5b505afa1580156106bf573d6000803e3d6000fd5b505050506040513d60208110156106d557600080fd5b505110156106df57fe5b610700670de0b6b3a764000061058260025485610a6d90919063ffffffff16565b9050915091565b60008282111561071357fe5b508082035b92915050565b6001546001600160a01b0316331461073257fe5b303181111561073d57fe5b6001546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610777573d6000803e3d6000fd5b5061078061055a565b50565b60035481565b60045481565b6001600160a01b0381166000908152600660205260408120544210156107b7575060006107d4565b506001600160a01b03811660009081526006602052604090205442035b919050565b6001546001600160a01b031633146107ed57fe5b600081116107f757fe5b600255565b60025481565b6001546001600160a01b031681565b60066020526000908152604090205481565b6001546001600160a01b0316331461083757fe5b6001546001600160a01b038281169116141561084f57fe5b6001600160a01b03811661085f57fe5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b0316331461089557fe5b6000341161089f57fe5b61059661055a565b6001546001600160a01b031633146108bb57fe5b8281146108c457fe5b60005b838110156109aa576109348383838181106108de57fe5b90506020020135600560008888868181106108f557fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002054610aad90919063ffffffff16565b6005600087878581811061094457fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000208190555061099f83838381811061098757fe5b90506020020135600354610aad90919063ffffffff16565b6003556001016108c7565b506109b361055a565b50505050565b60056020526000908152604090205481565b6001546001600160a01b031633146109df57fe5b6000805460015460408051600160e01b63a9059cbb0281526001600160a01b039283166004820152602481018690529051919092169263a9059cbb92604480820193602093909283900390910190829087803b158015610a3e57600080fd5b505af1158015610a52573d6000803e3d6000fd5b505050506040513d6020811015610a6857600080fd5b505050565b600082610a7c57506000610718565b82820282848281610a8957fe5b0414610a9157fe5b9392505050565b600080828481610aa457fe5b04949350505050565b600082820183811015610a9157fefea165627a7a7230582062a474db23a5e25fa4bb5581be97922c09ee58dfc9043578e0b75acb88aace6d0029"
}