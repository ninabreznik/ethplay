{
  "address": "0x7183a469dd9dcb4a336cdc2e306174d0ffea3602",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EmtCrowdfund",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-15\n*/\n\npragma solidity ^0.4.20;\n\ncontract owned {\n    address public owner;\n    function owned() public {owner = msg.sender;}\n    modifier onlyOwner { require(msg.sender == owner); _;}\n    function transferOwnership(address newOwner) onlyOwner public {owner = newOwner;}\n}\n\ncontract EmtCrowdfund is owned {\n    string public name;\n    string public symbol;\n    uint8 public decimals = 8;\n    uint256 public totalSupply;\n    uint256 public tokenPrice;\n    uint public minBuyAmount = 700000000000000000;       // 0.7 eth\n    uint public maxBuyAmount = 13000000000000000000;     // 13 eth\n    uint public bonusPercent = 20;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => uint[]) public paymentHistory;\n    mapping (address => mapping (uint => uint)) public paymentDetail;\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Burn(address indexed from, uint value);\n    event FrozenFunds(address target, bool frozen);\n\n    function EmtCrowdfund(\n        uint256 initialSupply,\n        uint256 _tokenPrice,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        tokenPrice = _tokenPrice / 10 ** uint256(decimals);\n        totalSupply = initialSupply * 10 ** uint256(decimals);\n        name = tokenName;\n        symbol = tokenSymbol;\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);\n        require (balanceOf[_from] >= _value);\n        require (balanceOf[_to] + _value >= balanceOf[_to]);\n        require(!frozenAccount[_from]);\n        require(!frozenAccount[_to]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    /**\n     * @notice Transfer tokens\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * @notice Destroy tokens from other account\n     * @param _from the address of the owner\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint _value) public onlyOwner returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        balanceOf[_from] -= _value;\n        totalSupply -= _value;\n        emit Burn(_from, _value);\n        return true;\n    }\n\n    /** @notice Allow users to buy tokens for eth\n    *   @param _tokenPrice Price the users can buy\n    */\n    function setPrices(uint256 _tokenPrice) onlyOwner public {\n        tokenPrice = _tokenPrice;\n    }\n\n    function setBuyLimits(uint _min, uint _max) onlyOwner public {\n        minBuyAmount = _min;\n        maxBuyAmount = _max;\n    }\n\n    function setBonus(uint _percent) onlyOwner public {\n        bonusPercent = _percent;\n    }\n\n    function() payable public{\n        buy();\n    }\n\n    /// @notice Buy tokens from contract by sending ether\n    function buy() payable public {\n\n        uint now_ = now;\n\n        if(minBuyAmount > 0){\n            require(msg.value >= minBuyAmount);\n        }\n\n        if(maxBuyAmount > 0){\n            require(msg.value <= maxBuyAmount);\n\n            if(paymentHistory[msg.sender].length > 0){\n                uint lastTotal = 0;\n                uint thisDay = now_ - 86400;\n\n                for (uint i = 0; i < paymentHistory[msg.sender].length; i++) {\n                    if(paymentHistory[msg.sender][i] >= thisDay){\n                        lastTotal += paymentDetail[msg.sender][paymentHistory[msg.sender][i]];\n                    }\n                }\n\n                require(lastTotal <= maxBuyAmount);\n            }\n        }\n\n        uint amount = msg.value / tokenPrice;\n\n        if(bonusPercent > 0){\n            uint bonusAmount = amount / 100 * bonusPercent;\n            amount += bonusAmount;\n        }\n\n        require (totalSupply >= amount);\n        require(!frozenAccount[msg.sender]);\n        totalSupply -= amount;\n        balanceOf[msg.sender] += amount;\n\n        paymentHistory[msg.sender].push(now_);\n        paymentDetail[msg.sender][now_] = amount;\n\n        emit Transfer(address(0), msg.sender, amount);\n    }\n\n    /**\n    * @notice Manual transfer for investors who paid from payment cards\n    * @param _to the address of the receiver\n    * @param _value the amount of tokens\n    */\n    function manualTransfer(address _to, uint _value) public onlyOwner returns (bool success) {\n        require (totalSupply >= _value);\n        require(!frozenAccount[_to]);\n        totalSupply -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(address(0), _to, _value);\n        return true;\n    }\n\n    /// @notice Withdraw ether to owner account\n    function withdrawAll() onlyOwner public {\n        owner.transfer(address(this).balance);\n    }\n}",
  "bytecode": "60606040526003805460ff191660089081179091556709b6e64a8ec6000060065567b469471f8014000060075560149055341561003b57600080fd5b604051610e43380380610e4383398101604052808051919060200180519190602001805182019190602001805160008054600160a060020a03191633600160a060020a031617905560035492019160ff16600a0a90508381151561009b57fe5b0460055560035460ff16600a0a840260045560018280516100c09291602001906100de565b5060028180516100d49291602001906100de565b5050505050610179565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011f57805160ff191683800117855561014c565b8280016001018555821561014c579182015b8281111561014c578251825591602001919060010190610131565b5061015892915061015c565b5090565b61017691905b808211156101585760008155600101610162565b90565b610cbb806101886000396000f3006060604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461013c5780630b98f975146101c65780630da2c5f0146101dc57806318160ddd146101f5578063313ce5671461021a5780636857cb061461024357806370a082311461027957806379cc6790146102985780637ff9b596146102ba578063853828b6146102cd57806388e765ff146102e05780638da5cb5b146102f357806395d89b4114610322578063a3201daa14610335578063a6f2ae3a14610132578063a9059cbb1461034b578063b414d4b61461036d578063becf3add1461038c578063c1e2e5ea1461039f578063cc38b477146103c1578063e724529c146103e3578063f2fde38b14610407578063f66bf22914610426575b61013a610439565b005b341561014757600080fd5b61014f61067d565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018b578082015183820152602001610173565b50505050905090810190601f1680156101b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d157600080fd5b61013a60043561071b565b34156101e757600080fd5b61013a60043560243561073b565b341561020057600080fd5b610208610761565b60405190815260200160405180910390f35b341561022557600080fd5b61022d610767565b60405160ff909116815260200160405180910390f35b341561024e57600080fd5b610265600160a060020a0360043516602435610770565b604051901515815260200160405180910390f35b341561028457600080fd5b610208600160a060020a0360043516610826565b34156102a357600080fd5b610265600160a060020a0360043516602435610838565b34156102c557600080fd5b6102086108e0565b34156102d857600080fd5b61013a6108e6565b34156102eb57600080fd5b61020861093c565b34156102fe57600080fd5b610306610942565b604051600160a060020a03909116815260200160405180910390f35b341561032d57600080fd5b61014f610951565b341561034057600080fd5b61013a6004356109bc565b341561035657600080fd5b61013a600160a060020a03600435166024356109dc565b341561037857600080fd5b610265600160a060020a03600435166109eb565b341561039757600080fd5b610208610a00565b34156103aa57600080fd5b610208600160a060020a0360043516602435610a06565b34156103cc57600080fd5b610208600160a060020a0360043516602435610a23565b34156103ee57600080fd5b61013a600160a060020a03600435166024351515610a51565b341561041257600080fd5b61013a600160a060020a0360043516610add565b341561043157600080fd5b610208610b27565b6000806000806000804295506000600654111561045f5760065434101561045f57600080fd5b6000600754111561056c5760075434111561047957600080fd5b600160a060020a0333166000908152600b6020526040812054111561056c57600094506201518086039350600092505b600160a060020a0333166000908152600b602052604090205483101561055d57600160a060020a0333166000908152600b602052604090208054859190859081106104f057fe5b6000918252602090912001541061055257600160a060020a0333166000908152600c60209081526040808320600b909252822080549192918690811061053257fe5b906000526020600020900154815260200190815260200160002054850194505b6001909201916104a9565b60075485111561056c57600080fd5b6005543481151561057957fe5b0491506000600854111561059557506008546064820402908101905b600454829010156105a557600080fd5b600160a060020a0333166000908152600a602052604090205460ff16156105cb57600080fd5b600480548390039055600160a060020a0333166000908152600960209081526040808320805486019055600b909152902080546001810161060c8382610c45565b506000918252602080832091909101889055600160a060020a033316808352600c825260408084208a855290925281832085905591907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3505050505050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107135780601f106106e857610100808354040283529160200191610713565b820191906000526020600020905b8154815290600101906020018083116106f657829003601f168201915b505050505081565b60005433600160a060020a0390811691161461073657600080fd5b600855565b60005433600160a060020a0390811691161461075657600080fd5b600691909155600755565b60045481565b60035460ff1681565b6000805433600160a060020a0390811691161461078c57600080fd5b6004548290101561079c57600080fd5b600160a060020a0383166000908152600a602052604090205460ff16156107c257600080fd5b600480548390039055600160a060020a0383166000818152600960205260408082208054860190557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60096020526000908152604090205481565b6000805433600160a060020a0390811691161461085457600080fd5b600160a060020a0383166000908152600960205260409020548290101561087a57600080fd5b600160a060020a03831660008181526009602052604090819020805485900390556004805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b60055481565b60005433600160a060020a0390811691161461090157600080fd5b600054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19350505050151561093a57600080fd5b565b60075481565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107135780601f106106e857610100808354040283529160200191610713565b60005433600160a060020a039081169116146109d757600080fd5b600555565b6109e7338383610b2d565b5050565b600a6020526000908152604090205460ff1681565b60085481565b600c60209081526000928352604080842090915290825290205481565b600b60205281600052604060002081815481101515610a3e57fe5b6000918252602090912001549150829050565b60005433600160a060020a03908116911614610a6c57600080fd5b600160a060020a0382166000908152600a602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60005433600160a060020a03908116911614610af857600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60065481565b600160a060020a0382161515610b4257600080fd5b600160a060020a03831660009081526009602052604090205481901015610b6857600080fd5b600160a060020a0382166000908152600960205260409020548181011015610b8f57600080fd5b600160a060020a0383166000908152600a602052604090205460ff1615610bb557600080fd5b600160a060020a0382166000908152600a602052604090205460ff1615610bdb57600080fd5b600160a060020a038084166000818152600960205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a3505050565b815481835581811511610c6957600083815260209020610c69918101908301610c6e565b505050565b610c8c91905b80821115610c885760008155600101610c74565b5090565b905600a165627a7a72305820e597f0325251cc3b973db169cceba5fae1680f889e336a74564ed92109e24f7600290000000000000000000000000000000000000000000000000000000059682f0000000000000000000000000000000000000000000000000000007f544a44c000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000154574686572204d656d6f7269747920546f6b656e2700000000000000000000000000000000000000000000000000000000000000000000000000000000000003454d540000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000059682f0000000000000000000000000000000000000000000000000000007f544a44c000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000154574686572204d656d6f7269747920546f6b656e2700000000000000000000000000000000000000000000000000000000000000000000000000000000000003454d540000000000000000000000000000000000000000000000000000000000"
}