{
  "address": "0x78fceca5bf5ec79c23effece97ae758665ba4f55",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "YouDealToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-09\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n\n}\n\n/**\n * @title YouDeal Token\n * @dev YDChain.\n */\ncontract YouDealToken is PausableToken {\n\n  string public constant name = \"YouDeal Token\";\n  string public constant symbol = \"YD\";\n  uint8 public constant decimals = 18;\n\n  uint256 private constant TOKEN_UNIT = 10 ** uint256(decimals);\n  uint256 private constant INITIAL_SUPPLY = 10500000000 * TOKEN_UNIT;\n\n  uint256 private constant PRIVATE_SALE_SUPPLY = INITIAL_SUPPLY * 25 / 100;  // 25% for private sale\n  uint256 private constant COMMUNITY_REWARDS_SUPPLY = INITIAL_SUPPLY * 40 / 100;  // 40% for community rewards\n  uint256 private constant FOUNDATION_SUPPLY = INITIAL_SUPPLY * 20 / 100;  // 20% for foundation\n  uint256 private constant TEAM_SUPPLY = INITIAL_SUPPLY * 15 / 100;  // 15% for founder team\n\n  struct VestingGrant {\n        address beneficiary;\n        uint256 start;\n        uint256 duration; //duration for each release\n        uint256 amount; //total grant amount\n        uint256 transfered; // transfered amount\n        uint8 releaseCount; // schedule release count\n  }\n\n  address private constant PRIVAYE_SALE_ADDRESS = 0x65158a7270b58fd9499bE7E95feFBF2169360728; //team vesting  beneficiary address\n  address private constant COMMUNITY_REWARDS_ADDRESS = 0xDFE95879606F520CaC6a3546FE2f0d8BBC10A32b; //community rewards wallet address\n  address private constant FOUNDATION_ADDRESS = 0xC138e8A6763e78fA0fFAD6c392D01e37CF3fdf27; //foundation wallet address\n\n  VestingGrant teamVestingGrant;\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n  function YouDealToken() public {\n    totalSupply =  INITIAL_SUPPLY;\n\n    balances[PRIVAYE_SALE_ADDRESS] = PRIVATE_SALE_SUPPLY;\n    balances[COMMUNITY_REWARDS_ADDRESS] = COMMUNITY_REWARDS_SUPPLY;\n    balances[FOUNDATION_ADDRESS] = FOUNDATION_SUPPLY;\n\n    teamVestingGrant = founderGrant(msg.sender, now.add(150 days), (30 days), TEAM_SUPPLY, 30); // The owner address is reserved for the Team Wallet\n  }\n\n  function founderGrant(address _beneficiary, uint256 _start, uint256 _duration, uint256 _amount, uint8 _releaseCount)\n    internal pure returns  (VestingGrant) {\n      return VestingGrant({ beneficiary : _beneficiary, start: _start, duration:_duration, amount:_amount, transfered:0, releaseCount:_releaseCount});\n  }\n\n  function releaseTeamVested() public onlyOwner {\n      relaseVestingGrant(teamVestingGrant);\n  }\n\n  function releasableAmount(uint256 time, VestingGrant grant) internal pure returns (uint256) {\n      if (grant.amount == grant.transfered) {\n          return 0;\n      }\n\t  if (time < grant.start) {\n          return 0;\n      }\n      uint256 amountPerRelease = grant.amount.div(grant.releaseCount);\n      uint256 amount = amountPerRelease.mul((time.sub(grant.start)).div(grant.duration));\n      if (amount > grant.amount) {\n        amount = grant.amount;\n      }\n      amount = amount.sub(grant.transfered);\n      return amount;\n  }\n\n  function relaseVestingGrant(VestingGrant storage grant) internal {\n      uint256 amount = releasableAmount(now, grant);\n      require(amount > 0);\n\n      grant.transfered = grant.transfered.add(amount);\n      balances[grant.beneficiary] = balances[grant.beneficiary].add(amount);\n      emit Transfer(address(0), grant.beneficiary, amount);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTeamVested\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526003805460a060020a60ff0219169055341561001f57600080fd5b60038054600160a060020a03191633600160a060020a038116919091179091556b21ed657c8e0d427f84000000600090815560016020526b087b595f2383509fe10000007f5a1cf6dabef209a0f32980749144f4c14261c53a205e0828e5e187b3c9f362b7556b0d92289838d21a99680000007f1b534009cb931d50236e729fe1e0475d8ea62d7a5899674c90d77d5f8a9a08015573c138e8a6763e78fa0ffad6c392d01e37cf3fdf2790526b06c9144c1c690d4cb40000007f6b289c27140a0018cfa9c2477271c55cbb32ed60e2f8e578f000410450a3e8725561013d906101184262c5c100640100000000610c916101a682021704565b62278d006b0516cf39154ec9f987000000601e6401000000006101bc8102610da51704565b600481518154600160a060020a031916600160a060020a03919091161781556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151600591909101805460ff191660ff9092169190911790555061024a565b6000828201838110156101b557fe5b9392505050565b6101c4610207565b60c06040519081016040908152600160a060020a0390971681526020810195909552509383019190915260608201526000608082015260ff90911660a082015290565b60c0604051908101604052806000600160a060020a0316815260200160008152602001600081526020016000815260200160008152602001600060ff1681525090565b610e5f806102596000396000f3006060604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b557806323b872dd146101da578063313ce567146102025780633f4ba83a1461022b5780635c975abb14610240578063661884631461025357806368ba745c1461027557806370a08231146102885780638456cb59146102a75780638da5cb5b146102ba57806395d89b41146102e9578063a9059cbb146102fc578063d73dd6231461031e578063dd62ed3e14610340578063f2fde38b14610365575b600080fd5b341561010057600080fd5b610108610384565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014457808201518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018a57600080fd5b6101a1600160a060020a03600435166024356103bb565b604051901515815260200160405180910390f35b34156101c057600080fd5b6101c86103e6565b60405190815260200160405180910390f35b34156101e557600080fd5b6101a1600160a060020a03600435811690602435166044356103ec565b341561020d57600080fd5b610215610419565b60405160ff909116815260200160405180910390f35b341561023657600080fd5b61023e61041e565b005b341561024b57600080fd5b6101a161049d565b341561025e57600080fd5b6101a1600160a060020a03600435166024356104ad565b341561028057600080fd5b61023e6104d1565b341561029357600080fd5b6101c8600160a060020a03600435166104f8565b34156102b257600080fd5b61023e610513565b34156102c557600080fd5b6102cd610597565b604051600160a060020a03909116815260200160405180910390f35b34156102f457600080fd5b6101086105a6565b341561030757600080fd5b6101a1600160a060020a03600435166024356105dd565b341561032957600080fd5b6101a1600160a060020a0360043516602435610601565b341561034b57600080fd5b6101c8600160a060020a0360043581169060243516610625565b341561037057600080fd5b61023e600160a060020a0360043516610650565b60408051908101604052600d81527f596f754465616c20546f6b656e00000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff16156103d557600080fd5b6103df83836106eb565b9392505050565b60005481565b60035460009060a060020a900460ff161561040657600080fd5b610411848484610757565b949350505050565b601281565b60035433600160a060020a0390811691161461043957600080fd5b60035460a060020a900460ff16151561045157600080fd5b6003805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff16156104c757600080fd5b6103df83836108d9565b60035433600160a060020a039081169116146104ec57600080fd5b6104f660046109d5565b565b600160a060020a031660009081526001602052604090205490565b60035433600160a060020a0390811691161461052e57600080fd5b60035460a060020a900460ff161561054557600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600354600160a060020a031681565b60408051908101604052600281527f5944000000000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff16156105f757600080fd5b6103df8383610ae0565b60035460009060a060020a900460ff161561061b57600080fd5b6103df8383610bdb565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461066b57600080fd5b600160a060020a038116151561068057600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000600160a060020a038316151561076e57600080fd5b600160a060020a03841660009081526001602052604090205482111561079357600080fd5b600160a060020a03808516600090815260026020908152604080832033909416835292905220548211156107c657600080fd5b600160a060020a0384166000908152600160205260409020546107ef908363ffffffff610c7f16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610824908363ffffffff610c9116565b600160a060020a0380851660009081526001602090815260408083209490945587831682526002815283822033909316825291909152205461086c908363ffffffff610c7f16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561093657600160a060020a03338116600090815260026020908152604080832093881683529290529081205561096d565b610946818463ffffffff610c7f16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b6000610a30428360c060405190810160409081528254600160a060020a0316825260018301546020830152600283015490820152600382015460608201526004820154608082015260059091015460ff1660a0820152610ca0565b905060008111610a3f57600080fd5b6004820154610a54908263ffffffff610c9116565b60048301558154600160a060020a0316600090815260016020526040902054610a83908263ffffffff610c9116565b8254600160a060020a03908116600090815260016020526040808220939093558454909116917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050565b6000600160a060020a0383161515610af757600080fd5b600160a060020a033316600090815260016020526040902054821115610b1c57600080fd5b600160a060020a033316600090815260016020526040902054610b45908363ffffffff610c7f16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610b7a908363ffffffff610c9116565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610c13908363ffffffff610c9116565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600082821115610c8b57fe5b50900390565b6000828201838110156103df57fe5b6000806000836080015184606001511415610cbe5760009250610d5b565b8360200151851015610cd35760009250610d5b565b610cef8460a0015160ff1685606001519063ffffffff610d6316565b9150610d2a610d1d8560400151610d118760200151899063ffffffff610c7f16565b9063ffffffff610d6316565b839063ffffffff610d7a16565b90508360600151811115610d4057836060015190505b610d558460800151829063ffffffff610c7f16565b90508092505b505092915050565b6000808284811515610d7157fe5b04949350505050565b600080831515610d8d57600091506109ce565b50828202828482811515610d9d57fe5b04146103df57fe5b610dad610df0565b60c06040519081016040908152600160a060020a0390971681526020810195909552509383019190915260608201526000608082015260ff90911660a082015290565b60c0604051908101604052806000600160a060020a0316815260200160008152602001600081526020016000815260200160008152602001600060ff16815250905600a165627a7a723058207bbe164c60e52e6e77a265de8ec0cc7b704ba35c0762f38f39e683a957ce7b990029"
}