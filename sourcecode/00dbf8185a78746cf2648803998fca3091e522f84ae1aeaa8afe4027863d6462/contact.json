{
  "address": "0x595832f8fc6bf59c85c527fec3740a1b7a361269",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "PowerLedgerToken",
  "contractName": "PowerLedger",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-11\n*/\n\npragma solidity 0.4.11;\n\ncontract ERC20TokenInterface {\n\n    /// @return The total amount of tokens\n    function totalSupply() constant returns (uint256 supply);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant public returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract PowerLedger is ERC20TokenInterface {\n\n  //// Constants ////\n  string public constant name = 'PowerLedger';\n  uint256 public constant decimals = 6;\n  string public constant symbol = 'POWR';\n  string public constant version = '1.0';\n  string public constant note = 'Democratization of Power';\n\n  // One billion coins, each divided to up to 10^decimals units.\n  uint256 private constant totalTokens = 1000000000 * (10 ** decimals);\n\n  mapping (address => uint256) public balances; // (ERC20)\n  // A mapping from an account owner to a map from approved spender to their allowances.\n  // (see ERC20 for details about allowances).\n  mapping (address => mapping (address => uint256)) public allowed; // (ERC20)\n\n  //// Events ////\n  event MigrationInfoSet(string newMigrationInfo);\n\n  // This is to be used when migration to a new contract starts.\n  // This string can be used for any authorative information re the migration\n  // (e.g. address to use for migration, or URL to explain where to find more info)\n  string public migrationInfo = \"\";\n\n  // The only address that can set migrationContractAddress, a secure multisig.\n  address public migrationInfoSetter;\n\n  //// Modifiers ////\n  modifier onlyFromMigrationInfoSetter {\n    if (msg.sender != migrationInfoSetter) {\n      throw;\n    }\n    _;\n  }\n\n  //// Public functions ////\n  function PowerLedger(address _migrationInfoSetter) {\n    if (_migrationInfoSetter == 0) throw;\n    migrationInfoSetter = _migrationInfoSetter;\n    // Upon creation, all tokens belong to the deployer.\n    balances[msg.sender] = totalTokens;\n  }\n\n  // See ERC20\n  function totalSupply() constant returns (uint256) {\n    return totalTokens;\n  }\n\n  // See ERC20\n  // WARNING: If you call this with the address of a contract, the contract will receive the\n  // funds, but will have no idea where they came from. Furthermore, if the contract is\n  // not aware of POWR, the tokens will remain locked away in the contract forever.\n  // It is always recommended to call instead compareAndApprove() (or approve()) and have the\n  // receiving contract withdraw the money using transferFrom().\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    if (balances[msg.sender] >= _value) {\n      balances[msg.sender] -= _value;\n      balances[_to] += _value;\n      Transfer(msg.sender, _to, _value);\n      return true;\n    }\n    return false;\n  }\n\n  // See ERC20\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {\n      balances[_from] -= _value;\n      allowed[_from][msg.sender] -= _value;\n      balances[_to] += _value;\n      Transfer(_from, _to, _value);\n      return true;\n    }\n    return false;\n  }\n\n  // See ERC20\n  function balanceOf(address _owner) constant public returns (uint256) {\n    return balances[_owner];\n  }\n\n  // See ERC20\n  // NOTE: this method is vulnerable and is placed here only to follow the ERC20 standard.\n  // Before using, please take a look at the better compareAndApprove below.\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  // A vulernability of the approve method in the ERC20 standard was identified by\n  // Mikhail Vladimirov and Dmitry Khovratovich here:\n  // https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM\n  // It's better to use this method which is not susceptible to over-withdrawing by the approvee.\n  /// @param _spender The address to approve\n  /// @param _currentValue The previous value approved, which can be retrieved with allowance(msg.sender, _spender)\n  /// @param _newValue The new value to approve, this will replace the _currentValue\n  /// @return bool Whether the approval was a success (see ERC20's `approve`)\n  function compareAndApprove(address _spender, uint256 _currentValue, uint256 _newValue) public returns(bool) {\n    if (allowed[msg.sender][_spender] != _currentValue) {\n      return false;\n    }\n    return approve(_spender, _newValue);\n  }\n\n  // See ERC20\n  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  // Allows setting a descriptive string, which will aid any users in migrating their token\n  // to a newer version of the contract. This field provides a kind of 'double-layer' of\n  // authentication for any migration announcement, as it can only be set by PowerLedger.\n  /// @param _migrationInfo The information string to be stored on the contract\n  function setMigrationInfo(string _migrationInfo) onlyFromMigrationInfoSetter public {\n    migrationInfo = _migrationInfo;\n    MigrationInfoSet(_migrationInfo);\n  }\n\n  // To be used if the migrationInfoSetter wishes to transfer the migrationInfoSetter\n  // permission to a new account, e.g. because of change in personnel, a concern that account\n  // may have been compromised etc.\n  /// @param _newMigrationInfoSetter The address of the new Migration Info Setter\n  function changeMigrationInfoSetter(address _newMigrationInfoSetter) onlyFromMigrationInfoSetter public {\n    migrationInfoSetter = _newMigrationInfoSetter;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMigrationInfoSetter\",\"type\":\"address\"}],\"name\":\"changeMigrationInfoSetter\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"note\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationInfoSetter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"compareAndApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_migrationInfo\",\"type\":\"string\"}],\"name\":\"setMigrationInfo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_migrationInfoSetter\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newMigrationInfo\",\"type\":\"string\"}],\"name\":\"MigrationInfoSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526020604051908101604052806000815250600290805190602001906200002c92919062000111565b5034156200003657fe5b604051602080620014af833981016040528080519060200190919050505b60008173ffffffffffffffffffffffffffffffffffffffff1614156200007a5760006000fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006600a0a633b9aca0002600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50620001c0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015457805160ff191683800117855562000185565b8280016001018555821562000185579182015b828111156200018457825182559160200191906001019062000167565b5b50905062000194919062000198565b5090565b620001bd91905b80821115620001b95760008160009055506001016200019f565b5090565b90565b6112df80620001d06000396000f300606060405236156100fa576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100fc57806308f978c614610195578063095ea7b31461022e5780630bffa8b41461028557806318160ddd146102bb57806323b872dd146102e157806326d111f51461035757806327e235e3146103f0578063313ce5671461043a5780635271309f1461046057806354fd4d50146104b25780635c6581651461054b57806370a08231146105b4578063751e1079146105fe57806395d89b411461065e578063a9059cbb146106f7578063ab1f79291461074e578063dd62ed3e146107a8575bfe5b341561010457fe5b61010c610811565b604051808060200182810382528381815181526020019150805190602001908083836000831461015b575b80518252602083111561015b57602082019150602081019050602083039250610137565b505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019d57fe5b6101a561084b565b60405180806020018281038252838181518152602001915080519060200190808383600083146101f4575b8051825260208311156101f4576020820191506020810190506020830392506101d0565b505050905090810190601f1680156102205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023657fe5b61026b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108e9565b604051808215151515815260200191505060405180910390f35b341561028d57fe5b6102b9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109dc565b005b34156102c357fe5b6102cb610a7f565b6040518082815260200191505060405180910390f35b34156102e957fe5b61033d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a92565b604051808215151515815260200191505060405180910390f35b341561035f57fe5b610367610d02565b60405180806020018281038252838181518152602001915080519060200190808383600083146103b6575b8051825260208311156103b657602082019150602081019050602083039250610392565b505050905090810190601f1680156103e25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103f857fe5b610424600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d3c565b6040518082815260200191505060405180910390f35b341561044257fe5b61044a610d54565b6040518082815260200191505060405180910390f35b341561046857fe5b610470610d59565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104ba57fe5b6104c2610d7f565b6040518080602001828103825283818151815260200191508051906020019080838360008314610511575b805182526020831115610511576020820191506020810190506020830392506104ed565b505050905090810190601f16801561053d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561055357fe5b61059e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610db9565b6040518082815260200191505060405180910390f35b34156105bc57fe5b6105e8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dde565b6040518082815260200191505060405180910390f35b341561060657fe5b610644600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091905050610e28565b604051808215151515815260200191505060405180910390f35b341561066657fe5b61066e610ecc565b60405180806020018281038252838181518152602001915080519060200190808383600083146106bd575b8051825260208311156106bd57602082019150602081019050602083039250610699565b505050905090810190601f1680156106e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106ff57fe5b610734600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f06565b604051808215151515815260200191505060405180910390f35b341561075657fe5b6107a6600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611063565b005b34156107b057fe5b6107fb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611186565b6040518082815260200191505060405180910390f35b604060405190810160405280600b81526020017f506f7765724c656467657200000000000000000000000000000000000000000081525081565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108e15780601f106108b6576101008083540402835291602001916108e1565b820191906000526020600020905b8154815290600101906020018083116108c457829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a395760006000fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b60006006600a0a633b9aca000290505b90565b600081600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610b5f575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15610cf65781600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610cfb565b600090505b9392505050565b604060405190810160405280601881526020017f44656d6f63726174697a6174696f6e206f6620506f776572000000000000000081525081565b60006020528060005260406000206000915090505481565b600681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b604060405190810160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b6001602052816000526040600020602052806000526040600020600091509150505481565b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515610eb85760009050610ec5565b610ec284836108e9565b90505b9392505050565b604060405190810160405280600481526020017f504f57520000000000000000000000000000000000000000000000000000000081525081565b600081600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015156110585781600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061105d565b600090505b92915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110c05760006000fd5b80600290805190602001906110d692919061120e565b507f14fa274cf60cf17ec351674ca0666a478cd8c0e8dad97858b8d5111b5fa50ea3816040518080602001828103825283818151815260200191508051906020019080838360008314611148575b80518252602083111561114857602082019150602081019050602083039250611124565b505050905090810190601f1680156111745780820380516001836020036101000a031916815260200191505b509250505060405180910390a15b5b50565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061124f57805160ff191683800117855561127d565b8280016001018555821561127d579182015b8281111561127c578251825591602001919060010190611261565b5b50905061128a919061128e565b5090565b6112b091905b808211156112ac576000816000905550600101611294565b5090565b905600a165627a7a72305820437a4f89695f8cec76d48a22802a2973d3f180f2eb416dd2f4911ede8c4f5c060029000000000000000000000000d66873c0d33e27a1fd902eea663c285aecd192c1",
  "constructorArguments": "000000000000000000000000d66873c0d33e27a1fd902eea663c285aecd192c1"
}