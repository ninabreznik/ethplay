{
  "address": "0x66d4f385c12927493cd205ed25bf21f1512f02ea",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FMC",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-10\n*/\n\npragma solidity ^0.4.25;\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [email protected]\n// released under Apache 2.0 licence\n// input  D:\\Project\\java\\FanMei\\src\\main\\solidity\\FMC.sol\n// flattened :  Wednesday, 09-Jan-19 14:12:44 UTC\nlibrary SafeMath {\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n  mapping(address => uint256) balances;\n  uint256 totalSupply_;\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n  mapping (address => mapping (address => uint256)) internal allowed;\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\ncontract FMC is StandardToken, Ownable {\n    using SafeMath for uint256;\n    string public constant name = \"Fan Mei Chain (FMC)\";\n    string public constant symbol = \"FMC\";\n    uint8 public constant decimals = 18;\n    //总配额2亿\n    uint256 constant INITIAL_SUPPLY = 200000000 * (10 ** uint256(decimals));\n    //设置代币官网短URL(32字节以内)，供管理平台自动查询\n    string public website = \"www.fanmeichain.com\";\n    //设置代币icon短URL(32字节以内)，供管理平台自动查询\n    string public icon = \"/icon/fmc.png\";\n    //冻结账户\n    address public frozenAddress;\n    //锁仓信息\n    mapping(address=>Info) internal fellowInfo;\n    // fellow info\n    struct Info{\n        uint256[] defrozenDates;                    //解冻日期\n        mapping(uint256=>uint256) frozenValues;     //冻结金额\n        uint256 totalFrozenValue;                   //全部冻结资产总额\n    }\n    // 事件定义\n    event Frozen(address user, uint256 value, uint256 defrozenDate, uint256 totalFrozenValue);\n    event Defrozen(address user, uint256 value, uint256 defrozenDate, uint256 totalFrozenValue);\n    // Constructor that gives msg.sender all of existing tokens.\n    constructor(address _frozenAddress) public {\n        require(_frozenAddress != address(0) && _frozenAddress != msg.sender);\n        frozenAddress = _frozenAddress;\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    }\n    /**\n   * @dev Transfer token for a specified address\n   * @param _to The address to transfer to.\n   * @param _value The amount to be transferred.\n   */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        //normal transfer\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        if(_to == frozenAddress){\n            //defrozing\n            Info storage _info = fellowInfo[msg.sender];\n            if(_info.totalFrozenValue > 0){\n                for(uint i=0; i< _info.defrozenDates.length; i++){\n                    uint256 _date0 = _info.defrozenDates[i];\n                    if(_info.frozenValues[_date0] > 0 && now >= _date0){\n                        //defrozen...\n                        uint256 _defrozenValue = _info.frozenValues[_date0];\n                        require(balances[frozenAddress] >= _defrozenValue);\n                        balances[frozenAddress] = balances[frozenAddress].sub(_defrozenValue);\n                        balances[msg.sender] = balances[msg.sender].add(_defrozenValue);\n                        _info.totalFrozenValue = _info.totalFrozenValue.sub(_defrozenValue);\n                        _info.frozenValues[_date0] = 0;\n                        emit Transfer(frozenAddress, msg.sender, _defrozenValue);\n                        emit Defrozen(msg.sender, _defrozenValue, _date0, _info.totalFrozenValue);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    // issue in batch with forzen\n    function issue(address[] payees, uint256[] values, uint16[] deferDays) public onlyOwner returns(bool) {\n        require(payees.length > 0 && payees.length == values.length);\n        uint256 _now0 = _getNow0();\n        for (uint i = 0; i<payees.length; i++) {\n            require(balances[owner] >= values[i], \"Issuer balance is insufficient.\");\n            //地址为空或者发行额度为零\n            if (payees[i] == address(0) || values[i] == uint256(0)) {\n                continue;\n            }\n            balances[owner] = balances[owner].sub(values[i]);\n            balances[payees[i]] = balances[payees[i]].add(values[i]);\n            emit Transfer(owner, payees[i], values[i]);\n            uint256 _date0 = _now0.add(deferDays[i]*24*3600);\n            //判断是否需要冻结\n            if(_date0 > _now0){\n                //frozen balance\n                Info storage _info = fellowInfo[payees[i]];\n                uint256 _fValue = _info.frozenValues[_date0];\n                if(_fValue == 0){\n                    //_date0 doesn't exist in defrozenDates\n                    _info.defrozenDates.push(_date0);\n                }\n                //冻结总量增加_value\n                _info.totalFrozenValue = _info.totalFrozenValue.add(values[i]);\n                _info.frozenValues[_date0] = _info.frozenValues[_date0].add(values[i]);\n\n                balances[payees[i]] = balances[payees[i]].sub(values[i]);\n                balances[frozenAddress] = balances[frozenAddress].add(values[i]);\n                emit Transfer(payees[i], frozenAddress, values[i]);\n                emit Frozen(payees[i], values[i], _date0, _info.totalFrozenValue);\n            }\n        }\n        return true;\n    }\n    // airdrop in with same value and deferDays\n    function airdrop(address[] payees, uint256 value, uint16 deferDays) public onlyOwner returns(bool) {\n        require(payees.length > 0 && value > 0);\n        uint256 _amount = value.mul(payees.length);\n        require(balances[owner] > _amount);\n        uint256 _now0 = _getNow0();\n        uint256 _date0 = _now0.add(deferDays*24*3600);\n        for (uint i = 0; i<payees.length; i++) {\n            require(balances[owner] >= value, \"Issuer balance is insufficient.\");\n            //地址为空或者发行额度为零\n            if (payees[i] == address(0)) {\n                _amount = _amount.sub(value);\n                continue;\n            }\n            //circulating\n            balances[payees[i]] = balances[payees[i]].add(value);\n            emit Transfer(owner, payees[i], value);\n            //判断是否需要冻结\n            if(_date0 > _now0){\n                //frozen balance\n                Info storage _info = fellowInfo[payees[i]];\n                uint256 _fValue = _info.frozenValues[_date0];\n                if(_fValue == 0){\n                    //_date0 doesn't exist in defrozenDates\n                    _info.defrozenDates.push(_date0);\n                }\n                //冻结总量增加_value\n                _info.totalFrozenValue = _info.totalFrozenValue.add(value);\n                _info.frozenValues[_date0] = _info.frozenValues[_date0].add(value);\n                balances[payees[i]] = balances[payees[i]].sub(value);\n                balances[frozenAddress] = balances[frozenAddress].add(value);\n                emit Transfer(payees[i], frozenAddress, value);\n                emit Frozen(payees[i], value, _date0, _info.totalFrozenValue);\n            }\n        }\n        balances[owner] = balances[owner].sub(_amount);\n        return true;\n    }\n    // update frozen address\n    function updateFrozenAddress(address newFrozenAddress) public onlyOwner returns(bool){\n        //要求：\n        //1. 新地址不能为空\n        //2. 新地址不能为owner\n        //3. 新地址不能与旧地址相同\n        require(newFrozenAddress != address(0) && newFrozenAddress != owner && newFrozenAddress != frozenAddress);\n        //要求：新地址账本为零\n        require(balances[newFrozenAddress] == 0);\n        //转移冻结账本\n        balances[newFrozenAddress] = balances[frozenAddress];\n        balances[frozenAddress] = 0;\n        emit Transfer(frozenAddress, newFrozenAddress, balances[newFrozenAddress]);\n        frozenAddress = newFrozenAddress;\n        return true;\n    }\n    //平台解冻指定资产\n    function defrozen(address fellow) public onlyOwner returns(bool){\n        require(fellow != address(0));\n        Info storage _info = fellowInfo[fellow];\n        require(_info.totalFrozenValue > 0);\n        for(uint i = 0; i< _info.defrozenDates.length; i++){\n            uint256 _date0 = _info.defrozenDates[i];\n            if(_info.frozenValues[_date0] > 0 && now >= _date0){\n                //defrozen...\n                uint256 _defrozenValue = _info.frozenValues[_date0];\n                require(balances[frozenAddress] >= _defrozenValue);\n                balances[frozenAddress] = balances[frozenAddress].sub(_defrozenValue);\n                balances[fellow] = balances[fellow].add(_defrozenValue);\n                _info.totalFrozenValue = _info.totalFrozenValue.sub(_defrozenValue);\n                _info.frozenValues[_date0] = 0;\n                emit Transfer(frozenAddress, fellow, _defrozenValue);\n                emit Defrozen(fellow, _defrozenValue, _date0, _info.totalFrozenValue);\n            }\n        }\n        return true;\n    }\n    // check own assets include: balance, totalForzenValue, defrozenDates, defrozenValues\n    function getOwnAssets() public view returns(uint256, uint256, uint256[], uint256[]){\n        return getAssets(msg.sender);\n    }\n    // check own assets include: balance, totalForzenValue, defrozenDates, defrozenValues\n    function getAssets(address fellow) public view returns(uint256, uint256, uint256[], uint256[]){\n        uint256 _value = balances[fellow];\n        Info storage _info = fellowInfo[fellow];\n        uint256 _totalFrozenValue = _info.totalFrozenValue;\n        uint256 _size = _info.defrozenDates.length;\n        uint256[] memory _values = new uint256[](_size);\n        for(uint i = 0; i < _size; i++){\n            _values[i] = _info.frozenValues[_info.defrozenDates[i]];\n        }\n        return (_value, _totalFrozenValue, _info.defrozenDates, _values);\n    }\n    // 设置token官网和icon信息\n    function setWebInfo(string _website, string _icon) public onlyOwner returns(bool){\n        website = _website;\n        icon = _icon;\n        return true;\n    }\n    //返回当前区块链时间: 年月日时\n    function getNow() public view returns(uint256){\n        return now;\n    }\n    // @dev An internal pure function to calculate date in XX:00:00\n    function _calcDate0(uint256 _timestamp) internal pure returns(uint256){\n        return _timestamp.sub(_timestamp % (60*24));\n    }\n    // 获取当前日期零点时间戳\n    function _getNow0() internal view returns(uint256){\n        return _calcDate0(now);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000008c186f90cf52a9f2b711ebf1d598e8a8b17bf0cd"
}