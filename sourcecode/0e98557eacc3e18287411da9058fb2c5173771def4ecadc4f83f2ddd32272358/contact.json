{
  "address": "0x42e566e656b88c1fec5b3077bf3b5c93eb9d454f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSend",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-05\n*/\n\npragma solidity ^0.4.24;\n\ncontract MultiSend {\n\n  struct Receiver {\n    address addr;\n    uint amount;\n  }\n\n  event MultiTransfer (\n    address from,\n    uint total,\n    Receiver[] receivers\n  );\n\n  address owner;\n\n  constructor () public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(owner == msg.sender, \"msg sender is not owner!\");\n    _;\n  }\n\n  function close() public onlyOwner {\n    selfdestruct(owner);\n  }\n\n  function _safeTransfer(address _to, uint _amount) internal {\n      require(_to != 0);\n      _to.transfer(_amount);\n  }\n\n  function multiTransfer(address[] _addresses, uint[] _amounts)\n    payable public returns(bool)\n  {\n      require(_addresses.length == _amounts.length);\n      Receiver[] memory receivers = new Receiver[](_addresses.length);\n      uint toReturn = msg.value;\n      for (uint i = 0; i < _addresses.length; i++) {\n          _safeTransfer(_addresses[i], _amounts[i]);\n          toReturn = SafeMath.sub(toReturn, _amounts[i]);\n          receivers[i].addr = _addresses[i];\n          receivers[i].amount = _amounts[i]; \n      }\n      emit MultiTransfer(msg.sender, msg.value, receivers);\n      return true;\n  }\n}\n\nlibrary SafeMath\n{\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"name\":\"receivers\",\"type\":\"tuple[]\"}],\"name\":\"MultiTransfer\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a03191633179055610404806100326000396000f30060806040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631e89d545811461005057806343d726d6146100e5575b600080fd5b604080516020600480358082013583810280860185019096528085526100d195369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506100fc9650505050505050565b604080519115158252519081900360200190f35b3480156100f157600080fd5b506100fa6102d3565b005b600060606000808451865114151561011357600080fd5b855160405190808252806020026020018201604052801561014e57816020015b61013b6103c1565b8152602001906001900390816101335790505b509250349150600090505b85518110156102355761019a868281518110151561017357fe5b90602001906020020151868381518110151561018b57fe5b9060200190602002015161035a565b6101bb8286838151811015156101ac57fe5b906020019060200201516103aa565b915085818151811015156101cb57fe5b9060200190602002015183828151811015156101e357fe5b60209081029091010151600160a060020a039091169052845185908290811061020857fe5b90602001906020020151838281518110151561022057fe5b60209081029091018101510152600101610159565b7ff5cc15050b9c97af4960f6d32339c8e18c85a9bbd338386c6c5fed573f29a2ea3334856040518084600160a060020a0316600160a060020a03168152602001838152602001806020018281038252838181518152602001915080516000925b818410156102b55760208085028401810151825260019094019301610295565b9250505094505050505060405180910390a150600195945050505050565b600054600160a060020a0316331461034c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6d73672073656e646572206973206e6f74206f776e6572210000000000000000604482015290519081900360640190fd5b600054600160a060020a0316ff5b600160a060020a038216151561036f57600080fd5b604051600160a060020a0383169082156108fc029083906000818181858888f193505050501580156103a5573d6000803e3d6000fd5b505050565b600080838311156103ba57600080fd5b5050900390565b6040805180820190915260008082526020820152905600a165627a7a72305820b44cc059c4a356b790d84cf6a3f047fa31a419b425be4614f16f1d93266b32bc0029"
}