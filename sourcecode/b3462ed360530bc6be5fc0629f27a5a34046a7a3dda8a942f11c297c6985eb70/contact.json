{
  "address": "0xf7cabdb9f55cf10e1b1403036005dcbd25e8a6fe",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenTimeLock",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-15\n*/\n\npragma solidity ^0.4.19;\n\n/**\n * EIP-20 standard token interface, as defined at\n * ttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n */\ncontract Token {\n    function name() public constant returns (string);\n    function symbol() public constant returns (string);\n    function decimals() public constant returns (uint8);\n    function totalSupply() public constant returns (uint256);\n    function balanceOf(address _owner) public constant returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value)\n        public returns (bool);\n    function approve(address _spender, uint256 _value) public returns (bool);\n    function allowance(address _owner, address _spender)\n        public constant returns (uint256);\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(\n        address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/**\n * Allows one to lock EIP-20 tokens until certain time arrives.\n * Copyright Â© 2018 by ABDK Consulting https://abdk.consulting/\n * Author: Mikhail Vladimirov <mikhail.vladimirov[at]gmail.com>\n */\ncontract TokenTimeLock {\n    /**\n     * Create new Token Time Lock with given donation address.\n     *\n     * @param _donationAddress donation address\n     */\n    function TokenTimeLock (address _donationAddress) public {\n        donationAddress = _donationAddress;\n    }\n\n    /**\n     * Lock given amount of given EIP-20 tokens until given time arrives, after\n     * this time allow the tokens to be transferred to given beneficiary.  This\n     * contract should be allowed to transfer at least given amount of tokens\n     * from msg.sender.\n     *\n     * @param _token EIP-20 token contract managing tokens to be locked\n     * @param _beneficiary beneficiary to receive tokens after unlock time\n     * @param _amount amount of tokens to be locked\n     * @param _unlockTime unlock time\n     *\n     * @return time lock ID\n     */\n    function lock (\n        Token _token, address _beneficiary, uint256 _amount,\n        uint256 _unlockTime) public returns (uint256) {\n        require (_amount > 0);\n\n        uint256 id = nextLockID++;\n\n        TokenTimeLockInfo storage lockInfo = locks [id];\n\n        lockInfo.token = _token;\n        lockInfo.beneficiary = _beneficiary;\n        lockInfo.amount = _amount;\n        lockInfo.unlockTime = _unlockTime;\n\n        Lock (id, _token, _beneficiary, _amount, _unlockTime);\n\n        require (_token.transferFrom (msg.sender, this, _amount));\n\n        return id;\n    }\n\n    /**\n     * Unlock tokens locked under time lock with given ID and transfer them to\n     * corresponding beneficiary.\n     *\n     * @param _id time lock ID to unlock tokens locked under\n     */\n    function unlock (uint256 _id) public {\n        TokenTimeLockInfo memory lockInfo = locks [_id];\n        delete locks [_id];\n\n        require (lockInfo.amount > 0);\n        require (lockInfo.unlockTime <= block.timestamp);\n\n        Unlock (_id);\n\n        require (\n            lockInfo.token.transfer (\n                lockInfo.beneficiary, lockInfo.amount));\n    }\n\n    /**\n     * If you like this contract, you may send some ether to this address and\n     * it will be used to develop more useful contracts available to everyone.\n     */\n    address public donationAddress;\n\n    /**\n     * Next time lock ID to be used.\n     */\n    uint256 private nextLockID = 0;\n\n    /**\n     * Maps time lock ID to TokenTimeLockInfo structure encapsulating time lock\n     * information.\n     */\n    mapping (uint256 => TokenTimeLockInfo) public locks;\n\n    /**\n     * Encapsulates information abount time lock.\n     */\n    struct TokenTimeLockInfo {\n        /**\n         * EIP-20 token contract managing locked tokens.\n         */\n        Token token;\n\n        /**\n         * Beneficiary to receive tokens once they are unlocked.\n         */\n        address beneficiary;\n\n        /**\n         * Amount of locked tokens.\n         */\n        uint256 amount;\n\n        /**\n         * Unlock time.\n         */\n        uint256 unlockTime;\n    }\n\n    /**\n     * Logged when tokens were time locked.\n     *\n     * @param id time lock ID\n     * @param token EIP-20 token contract managing locked tokens\n     * @param beneficiary beneficiary to receive tokens once they are unlocked\n     * @param amount amount of locked tokens\n     * @param unlockTime unlock time\n     */\n    event Lock (\n        uint256 indexed id, Token indexed token, address indexed beneficiary,\n        uint256 amount, uint256 unlockTime);\n\n    /**\n     * Logged when tokens were unlocked and sent to beneficiary.\n     *\n     * @param id time lock ID\n     */\n    event Unlock (uint256 indexed id);\n}",
  "bytecode": "60606040526000600155341561001457600080fd5b6040516020806104d48339810160405280805160008054600160a060020a03909216600160a060020a0319909216919091179055505061047b806100596000396000f3006060604052600436106100485763ffffffff60e060020a6000350416634b86c225811461004d5780636198e3391461008a578063ec034bed146100a2578063f4dadc61146100d1575b600080fd5b341561005857600080fd5b610078600160a060020a036004358116906024351660443560643561011c565b60405190815260200160405180910390f35b341561009557600080fd5b6100a060043561026c565b005b34156100ad57600080fd5b6100b56103e3565b604051600160a060020a03909116815260200160405180910390f35b34156100dc57600080fd5b6100e76004356103f2565b604051600160a060020a0394851681529290931660208301526040808301919091526060820192909252608001905180910390f35b6000808080851161012c57600080fd5b50506001805480820182556000818152600260208190526040918290208054600160a060020a03808c1673ffffffffffffffffffffffffffffffffffffffff19928316811784559683018054918c16919092168117909155918101889055600381018790559293909184907fbf35d96b29ba4a2628464e8ad987a688a035b265aac3ba73c6bf79ccd8b9863490899089905191825260208201526040908101905180910390a486600160a060020a03166323b872dd33308860006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561023c57600080fd5b6102c65a03f1151561024d57600080fd5b50505060405180519050151561026257600080fd5b5095945050505050565b610274610428565b60008281526002602052604090819020906080905190810160409081528254600160a060020a0390811683526001808501549091166020808501919091526002808601548486019081526003968701546060870152600089815292829052938220805473ffffffffffffffffffffffffffffffffffffffff199081168255938101805490941690935582018190559301839055909250511161031557600080fd5b428160600151111561032657600080fd5b817f832a253ad4e9e88f705006a24d9957b8aa1de307a0f9d0a6ad5fd0b0ac81050560405160405180910390a28051600160a060020a031663a9059cbb8260200151836040015160006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156103b957600080fd5b6102c65a03f115156103ca57600080fd5b5050506040518051905015156103df57600080fd5b5050565b600054600160a060020a031681565b60026020819052600091825260409091208054600182015492820154600390920154600160a060020a0391821693909116919084565b608060405190810160409081526000808352602083018190529082018190526060820152905600a165627a7a72305820921104e4ac6e14e170b92914e15e098053f35444d20d122f6cb51fa4c6729af70029000000000000000000000000f12dd9bf0631d33ec71c40787a928a22c797af12",
  "constructorArguments": "000000000000000000000000f12dd9bf0631d33ec71c40787a928a22c797af12"
}