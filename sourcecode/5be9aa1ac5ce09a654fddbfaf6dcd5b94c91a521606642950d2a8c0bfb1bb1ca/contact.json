{
  "address": "0x78a154d0618401cc07d92e9e0fbb5d093dad9bdb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AndamanCoin",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-29\n*/\n\npragma solidity 0.5.7; /*\n\n___________________________________________________________________\n  _      _                                        ______           \n  |  |  /          /                                /              \n--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\n  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \n__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\n\n\n\n █████╗ ███╗   ██╗██████╗  █████╗ ███╗   ███╗ █████╗ ███╗   ██╗     ██████╗ ██████╗ ██╗███╗   ██╗\n██╔══██╗████╗  ██║██╔══██╗██╔══██╗████╗ ████║██╔══██╗████╗  ██║    ██╔════╝██╔═══██╗██║████╗  ██║\n███████║██╔██╗ ██║██║  ██║███████║██╔████╔██║███████║██╔██╗ ██║    ██║     ██║   ██║██║██╔██╗ ██║\n██╔══██║██║╚██╗██║██║  ██║██╔══██║██║╚██╔╝██║██╔══██║██║╚██╗██║    ██║     ██║   ██║██║██║╚██╗██║\n██║  ██║██║ ╚████║██████╔╝██║  ██║██║ ╚═╝ ██║██║  ██║██║ ╚████║    ╚██████╗╚██████╔╝██║██║ ╚████║\n╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝     ╚═════╝ ╚═════╝ ╚═╝╚═╝  ╚═══╝\n                                                                                                 \n \n  \n// ----------------------------------------------------------------------------\n// 'ANM' Token contract with following features\n//      => ERC20 Compliance\n//      => Higher degree of control by owner - safeguard functionality\n//      => selfdestruct ability by owner\n//      => SafeMath implementation \n//      => Burnable and minting\n//      => air drop\n//\n// Name        : ANDAMAN coin\n// Symbol      : ANM\n// Total supply: 1,000,000,000 (1 Billion)\n// Decimals    : 18\n//\n// Copyright (c) 2019 onwards Andamaner.com. All rights reserved ( http://andamaner.com )\n// Contract designed by EtherAuthority ( https://EtherAuthority.io )\n// ----------------------------------------------------------------------------\n  \n*/ \n\n//*******************************************************************//\n//------------------------ SafeMath Library -------------------------//\n//*******************************************************************//\n    /**\n     * @title SafeMath\n     * @dev Math operations with safety checks that throw on error\n     */\n    library SafeMath {\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n      }\n    \n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n      }\n    \n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n      }\n    \n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n      }\n    }\n\n\n//*******************************************************************//\n//------------------ Contract to Manage Ownership -------------------//\n//*******************************************************************//\n    \n    contract owned {\n        address payable public owner;\n        \n         constructor () public {\n            owner = msg.sender;\n        }\n    \n        modifier onlyOwner {\n            require(msg.sender == owner);\n            _;\n        }\n    \n        function transferOwnership(address payable newOwner) onlyOwner public {\n            owner = newOwner;\n        }\n    }\n    \n \n\n//***************************************************************//\n//------------------ ERC20 Standard Template -------------------//\n//***************************************************************//\n    \n    contract TokenERC20 {\n        // Public variables of the token\n        using SafeMath for uint256;\n        string public name;\n        string public symbol;\n        uint256 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it\n        uint256 public totalSupply;\n        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\n    \n        // This creates an array with all balances\n        mapping (address => uint256) public balanceOf;\n        mapping (address => mapping (address => uint256)) public allowance;\n    \n        // This generates a public event on the blockchain that will notify clients\n        event Transfer(address indexed from, address indexed to, uint256 value);\n    \n        // This notifies clients about the amount burnt\n        event Burn(address indexed from, uint256 value);\n    \n        /**\n         * Constrctor function\n         *\n         * Initializes contract with initial supply tokens to the creator of the contract\n         */\n        constructor (\n            uint256 initialSupply,\n            string memory tokenName,\n            string memory tokenSymbol\n        ) public {\n            \n            totalSupply = initialSupply * (10**decimals);         // Update total supply with the decimal amount\n            balanceOf[msg.sender] = totalSupply;          \n            name = tokenName;                                   // Set the name for display purposes\n            symbol = tokenSymbol;                               // Set the symbol for display purposes\n            emit Transfer(address(0), msg.sender, totalSupply);// Emit event to log this transaction\n            \n        }\n    \n        /**\n         * Internal transfer, only can be called by this contract\n         */\n        function _transfer(address _from, address _to, uint _value) internal {\n            require(!safeguard);\n            // Prevent transfer to 0x0 address. Use burn() instead\n            require(_to != address(0x0));\n            // Check if the sender has enough\n            require(balanceOf[_from] >= _value);\n            // Check for overflows\n            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n            // Save this for an assertion in the future\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n            // Subtract from the sender\n            balanceOf[_from] = balanceOf[_from].sub(_value);\n            // Add the same to the recipient\n            balanceOf[_to] = balanceOf[_to].add(_value);\n            emit Transfer(_from, _to, _value);\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n        }\n    \n        /**\n         * Transfer tokens\n         *\n         * Send `_value` tokens to `_to` from your account\n         *\n         * @param _to The address of the recipient\n         * @param _value the amount to send\n         */\n        function transfer(address _to, uint256 _value) public returns (bool success) {\n            _transfer(msg.sender, _to, _value);\n            return true;\n        }\n    \n        /**\n         * Transfer tokens from other address\n         *\n         * Send `_value` tokens to `_to` in behalf of `_from`\n         *\n         * @param _from The address of the sender\n         * @param _to The address of the recipient\n         * @param _value the amount to send\n         */\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n            _transfer(_from, _to, _value);\n            return true;\n        }\n    \n        /**\n         * Set allowance for other address\n         *\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf\n         *\n         * @param _spender The address authorized to spend\n         * @param _value the max amount they can spend\n         */\n        function approve(address _spender, uint256 _value) public\n            returns (bool success) {\n            require(!safeguard);\n            allowance[msg.sender][_spender] = _value;\n            return true;\n        }\n    \n    \n        /**\n         * Destroy tokens\n         *\n         * Remove `_value` tokens from the system irreversibly\n         *\n         * @param _value the amount of money to burn\n         */\n        function burn(uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n            emit Burn(msg.sender, _value);\n            return true;\n        }\n    \n        /**\n         * Destroy tokens from other account\n         *\n         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n         *\n         * @param _from the address of the sender\n         * @param _value the amount of money to burn\n         */\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n            emit  Burn(_from, _value);\n            return true;\n        }\n        \n    }\n    \n//****************************************************************************//\n//---------------------  ANM MAIN CODE STARTS HERE ---------------------//\n//****************************************************************************//\n    \n    contract AndamanCoin is owned, TokenERC20 {\n        \n\n        /*********************************/\n        /* Code for the ERC20 ANM Token */\n        /*********************************/\n    \n        /* Public variables of the token */\n        string private tokenName = \"Andaman coin\";\n        string private tokenSymbol = \"ANM\";\n        uint256 private initialSupply = 1000000000;  //1 Billion\n        \n        \n        \n        /* Records for the fronzen accounts */\n        mapping (address => bool) public frozenAccount;\n        \n        /* This generates a public event on the blockchain that will notify clients */\n        event FrozenFunds(address target, bool frozen);\n    \n        /* Initializes contract with initial supply tokens to the creator of the contract */\n        constructor () TokenERC20(initialSupply, tokenName, tokenSymbol) public {\n            \n        }\n\n        /* Internal transfer, only can be called by this contract */\n        function _transfer(address _from, address _to, uint _value) internal {\n            require(!safeguard);\n            require (_to != address(0x0));                      // Prevent transfer to 0x0 address. Use burn() instead\n            require (balanceOf[_from] >= _value);               // Check if the sender has enough\n            require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n            require(!frozenAccount[_from]);                     // Check if sender is frozen\n            require(!frozenAccount[_to]);                       // Check if recipient is frozen\n            balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\n            balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\n            emit Transfer(_from, _to, _value);\n        }\n        \n        /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n        /// @param target Address to be frozen\n        /// @param freeze either to freeze it or not\n        function freezeAccount(address target, bool freeze) onlyOwner public {\n                frozenAccount[target] = freeze;\n            emit  FrozenFunds(target, freeze);\n        }\n        \n        /// @notice Create `mintedAmount` tokens and send it to `target`\n        /// @param target Address to receive the tokens\n        /// @param mintedAmount the amount of tokens it will receive\n        function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n            balanceOf[target] = balanceOf[target].add(mintedAmount);\n            totalSupply = totalSupply.add(mintedAmount);\n            emit Transfer(address(0), target, mintedAmount);\n        }\n\n          \n        //Just in rare case, owner wants to transfer Ether from contract to owner address\n        function manualWithdrawEther()onlyOwner public{\n            address(owner).transfer(address(this).balance);\n        }\n        \n        function manualWithdrawTokens(uint256 tokenAmount) public onlyOwner{\n            // no need for overflow checking as that will be done in transfer function\n            _transfer(address(this), owner, tokenAmount);\n        }\n        \n        //selfdestruct function. just in case owner decided to destruct this contract.\n        function destructContract()onlyOwner public{\n            selfdestruct(owner);\n        }\n        \n        /**\n         * Change safeguard status on or off\n         *\n         * When safeguard is true, then all the non-owner functions will stop working.\n         * When safeguard is false, then all the functions will resume working back again!\n         */\n        function changeSafeguardStatus() onlyOwner public{\n            if (safeguard == false){\n                safeguard = true;\n            }\n            else{\n                safeguard = false;    \n            }\n        }\n        \n        /********************************/\n        /*    Code for the Air drop     */\n        /********************************/\n        \n        /**\n         * Run an Air-Drop\n         *\n         * It requires an array of all the addresses and amount of tokens to distribute\n         * It will only process first 150 recipients. That limit is fixed to prevent gas limit\n         */\n        function airdrop(address[] memory recipients,uint tokenAmount) public onlyOwner {\n            uint256 addressCount = recipients.length;\n            require(addressCount <= 150);\n            for(uint i = 0; i < addressCount; i++)\n            {\n                  //This will loop through all the recipients and send them the specified tokens\n                  _transfer(address(this), recipients[i], tokenAmount);\n            }\n        }\n\n}",
  "bytecode": "608060405260126003556000600560006101000a81548160ff0219169083151502179055506040518060400160405280600c81526020017f416e64616d616e20636f696e000000000000000000000000000000000000000081525060089080519060200190620000719291906200034e565b506040518060400160405280600381526020017f414e4d000000000000000000000000000000000000000000000000000000000081525060099080519060200190620000bf9291906200034e565b50633b9aca00600a55348015620000d557600080fd5b50600a5460088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620001735780601f10620001475761010080835404028352916020019162000173565b820191906000526020600020905b8154815290600101906020018083116200015557829003601f168201915b505050505060098054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620002125780601f10620001e65761010080835404028352916020019162000212565b820191906000526020600020905b815481529060010190602001808311620001f457829003601f168201915b5050505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600354600a0a8302600481905550600454600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160019080519060200190620002c39291906200034e565b508060029080519060200190620002dc9291906200034e565b503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6004546040518082815260200191505060405180910390a3505050620003fd565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200039157805160ff1916838001178555620003c2565b82800160010185558215620003c2579182015b82811115620003c1578251825591602001919060010190620003a4565b5b509050620003d19190620003d5565b5090565b620003fa91905b80821115620003f6576000816000905550600101620003dc565b5090565b90565b611b4f806200040d6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063b57dbdc61161007c578063b57dbdc6146105f1578063c204642c14610613578063dd62ed3e146106d5578063e724529c1461074d578063f2fde38b1461079d578063fbde8d75146107e157610142565b80638da5cb5b146104585780639499e018146104a257806395d89b41146104ac578063a9059cbb1461052f578063b414d4b61461059557610142565b806342966c681161010a57806342966c68146102f25780634bec8335146103385780635954c8c51461034257806370a082311461034c57806379c65068146103a457806379cc6790146103f257610142565b806306fdde0314610147578063095ea7b3146101ca57806318160ddd1461023057806323b872dd1461024e578063313ce567146102d4575b600080fd5b61014f61080f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018f578082015181840152602081019050610174565b50505050905090810190601f1680156101bc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610216600480360360408110156101e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108ad565b604051808215151515815260200191505060405180910390f35b610238610954565b6040518082815260200191505060405180910390f35b6102ba6004803603606081101561026457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061095a565b604051808215151515815260200191505060405180910390f35b6102dc610b24565b6040518082815260200191505060405180910390f35b61031e6004803603602081101561030857600080fd5b8101908080359060200190929190505050610b2a565b604051808215151515815260200191505060405180910390f35b610340610c99565b005b61034a610d4c565b005b61038e6004803603602081101561036257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e26565b6040518082815260200191505060405180910390f35b6103f0600480360360408110156103ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e3e565b005b61043e6004803603604081101561040857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fb1565b604051808215151515815260200191505060405180910390f35b6104606112b9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104aa6112de565b005b6104b4611371565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104f45780820151818401526020810190506104d9565b50505050905090810190601f1680156105215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61057b6004803603604081101561054557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061140f565b604051808215151515815260200191505060405180910390f35b6105d7600480360360208110156105ab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611426565b604051808215151515815260200191505060405180910390f35b6105f9611446565b604051808215151515815260200191505060405180910390f35b6106d36004803603604081101561062957600080fd5b810190808035906020019064010000000081111561064657600080fd5b82018360208201111561065857600080fd5b8035906020019184602083028401116401000000008311171561067a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050611459565b005b610737600480360360408110156106eb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611505565b6040518082815260200191505060405180910390f35b61079b6004803603604081101561076357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061152a565b005b6107df600480360360208110156107b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061164d565b005b61080d600480360360208110156107f757600080fd5b81019080803590602001909291905050506116e9565b005b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108a55780601f1061087a576101008083540402835291602001916108a5565b820191906000526020600020905b81548152906001019060200180831161088857829003601f168201915b505050505081565b6000600560009054906101000a900460ff16156108c957600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60045481565b6000600560009054906101000a900460ff161561097657600080fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156109ff57600080fd5b610a8e82600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461177190919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b19848484611788565b600190509392505050565b60035481565b6000600560009054906101000a900460ff1615610b4657600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b9257600080fd5b610be482600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461177190919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c3c8260045461177190919063ffffffff16565b6004819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cf257600080fd5b60001515600560009054906101000a900460ff1615151415610d2e576001600560006101000a81548160ff021916908315150217905550610d4a565b6000600560006101000a81548160ff0219169083151502179055505b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610da557600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610e23573d6000803e3d6000fd5b50565b60066020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e9757600080fd5b610ee981600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b0790919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f4181600454611b0790919063ffffffff16565b6004819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000600560009054906101000a900460ff1615610fcd57600080fd5b81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561101957600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156110a257600080fd5b6110f482600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461177190919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111c682600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461177190919063ffffffff16565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061125b8260045461177190919063ffffffff16565b6004819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461133757600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114075780601f106113dc57610100808354040283529160200191611407565b820191906000526020600020905b8154815290600101906020018083116113ea57829003601f168201915b505050505081565b600061141c338484611788565b6001905092915050565b600b6020528060005260406000206000915054906101000a900460ff1681565b600560009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114b257600080fd5b60008251905060968111156114c657600080fd5b60008090505b818110156114ff576114f2308583815181106114e457fe5b602002602001015185611788565b80806001019150506114cc565b50505050565b6007602052816000526040600020602052806000526040600020600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461158357600080fd5b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116a657600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461174257600080fd5b61176e306000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611788565b50565b60008282111561177d57fe5b818303905092915050565b600560009054906101000a900460ff16156117a257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117dc57600080fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561182857600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118ba82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b0790919063ffffffff16565b10156118c557600080fd5b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561191c57600080fd5b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561197357600080fd5b6119c581600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461177190919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a5a81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b0790919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080828401905083811015611b1957fe5b809150509291505056fea165627a7a72305820cb8db69a226c1c8dab233c832bdc455fc792cb30c06f3d1faac7eaf76e1d11f20029"
}