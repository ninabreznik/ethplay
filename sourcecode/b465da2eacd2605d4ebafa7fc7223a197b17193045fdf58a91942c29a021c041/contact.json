{
  "address": "0xcdd7027447bc557ab926764e096dade96050a86e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GalaxiumCoin",
  "compilerVersion": "v0.4.22+commit.4cb486ee",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-22\n*/\n\npragma solidity ^0.4.22;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n \nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address) public view returns (uint256);\n    function transfer(address, uint256) public returns (bool);\n    function transferFrom(address, address, uint256) public returns (bool);\n    function approve(address, uint256) public returns (bool);\n    function allowance(address, address) public view returns (uint256);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\ncontract Owned {\n    address public owner;\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    // allow transfer of ownership to another address in case shit hits the fan. \n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n}\n\ncontract StandardToken is ERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    \n    function transfer(address _to, uint256 _value) public returns (bool) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\t    require(_to != address(0));\n\t    require(_value <= balances[_from]);\n\t    require(_value <= allowed[_from][msg.sender]);\n\n\t    balances[_from] = balances[_from].sub(_value);\n\t    balances[_to] = balances[_to].add(_value);\n\t    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t    emit Transfer(_from, _to, _value);\n\t    return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        // Added to prevent potential race attack.\n        // forces caller of this function to ensure address allowance is already 0\n        // ref: https://github.com/ethereum/EIPs/issues/738\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n}\n\n//token contract\ncontract GalaxiumCoin is Owned, StandardToken {\n    \n    event Burn(address indexed burner, uint256 value);\n    \n    /* Public variables of the token */\n    string public name;                   \n    uint8 public decimals;                \n    string public symbol;                 \n    uint256 public totalSupply;\n    address public distributionAddress;\n    bool public isTransferable = false;\n    \n\n    function GalaxiumCoin() {\n        name = \"Galaxium Coin\";                          \n        decimals = 18; \n        symbol = \"GXM\";\n        totalSupply = 50000000 * 10 ** uint256(decimals); \n        owner = msg.sender;\n\n        //transfer all to handler address\n        balances[msg.sender] = totalSupply;\n        emit Transfer(0x0, msg.sender, totalSupply);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(isTransferable);\n        return super.transfer(_to, _value);\n    } \n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(isTransferable);\n        return super.transferFrom(_from, _to, _value);\n    } \n\n    /**\n     * Get totalSupply of tokens - Minus any from address 0 if that was used as a burnt method\n     * Suggested way is still to use the burnSent function\n     */    \n    function totalSupply() public view returns (uint256) {\n        return totalSupply;\n    }\n\n    /**\n     * unlocks tokens, only allowed once\n     */\n    function enableTransfers() public onlyOwner {\n        isTransferable = true;\n    }\n    \n    /**\n     * Callable by anyone\n     * Accepts an input of the number of tokens to be burnt held by the sender.\n     */\n    function burnSent(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }\n\n    /**\n     * Allow distribution helper to help with distributeToken function\n     */\n    function setDistributionAddress(address _setAddress) public onlyOwner {\n        distributionAddress = _setAddress;\n    }\n\n    /**\n     * Called by owner to transfer tokens - Managing manual distribution.\n     * Also allow distribution contract to call for this function\n     */\n    function distributeTokens(address _to, uint256 _value) public {\n        require(distributionAddress == msg.sender || owner == msg.sender);\n        super.transfer(_to, _value);\n    }\n}",
  "bytecode": "60806040526007805460a060020a60ff021916905534801561002057600080fd5b5060408051808201909152600d8082527f47616c617869756d20436f696e00000000000000000000000000000000000000602090920191825261006591600391610133565b506004805460ff191660121790556040805180820190915260038082527f47584d000000000000000000000000000000000000000000000000000000000060209092019182526100b791600591610133565b5060045460ff16600a0a6302faf08002600681905560008054600160a060020a03191633600160a060020a0316908117825580825260016020908152604080842085905580519485525191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36101ce565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017457805160ff19168380011785556101a1565b828001600101855582156101a1579182015b828111156101a1578251825591602001919060010190610186565b506101ad9291506101b1565b5090565b6101cb91905b808211156101ad57600081556001016101b7565b90565b610ac3806101dd6000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f578063158a4988146101b757806318160ddd146101dd5780632121dc751461020457806323b872dd14610219578063313ce5671461024357806337fb7e211461026e57806370a082311461029f578063879f30ad146102c05780638da5cb5b146102d857806395d89b41146102ed578063a9059cbb14610302578063af35c6c714610326578063b89fc89e1461033b578063dd62ed3e1461035c578063f2fde38b14610383575b600080fd5b34801561010157600080fd5b5061010a6103a4565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a0360043516602435610432565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101db600160a060020a03600435166024356104d5565b005b3480156101e957600080fd5b506101f261051a565b60408051918252519081900360200190f35b34801561021057600080fd5b506101a3610520565b34801561022557600080fd5b506101a3600160a060020a0360043581169060243516604435610541565b34801561024f57600080fd5b50610258610580565b6040805160ff9092168252519081900360200190f35b34801561027a57600080fd5b50610283610589565b60408051600160a060020a039092168252519081900360200190f35b3480156102ab57600080fd5b506101f2600160a060020a0360043516610598565b3480156102cc57600080fd5b506101db6004356105b3565b3480156102e457600080fd5b5061028361067d565b3480156102f957600080fd5b5061010a61068c565b34801561030e57600080fd5b506101a3600160a060020a03600435166024356106e7565b34801561033257600080fd5b506101db610724565b34801561034757600080fd5b506101db600160a060020a0360043516610776565b34801561036857600080fd5b506101f2600160a060020a03600435811690602435166107c0565b34801561038f57600080fd5b506101db600160a060020a03600435166107eb565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561042a5780601f106103ff5761010080835404028352916020019161042a565b820191906000526020600020905b81548152906001019060200180831161040d57829003601f168201915b505050505081565b60008115806104645750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561046f57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b60075433600160a060020a0390811691161480610500575060005433600160a060020a039081169116145b151561050b57600080fd5b6105158282610835565b505050565b60065490565b60075474010000000000000000000000000000000000000000900460ff1681565b60075460009074010000000000000000000000000000000000000000900460ff16151561056d57600080fd5b6105788484846108f4565b949350505050565b60045460ff1681565b600754600160a060020a031681565b600160a060020a031660009081526001602052604090205490565b60008082116105c157600080fd5b600160a060020a0333166000908152600160205260409020548211156105e657600080fd5b5033600160a060020a03811660009081526001602052604090205461060b9083610a76565b600160a060020a038216600090815260016020526040902055600654610637908363ffffffff610a7616565b600655604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b600054600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561042a5780601f106103ff5761010080835404028352916020019161042a565b60075460009074010000000000000000000000000000000000000000900460ff16151561071357600080fd5b61071d8383610835565b9392505050565b60005433600160a060020a0390811691161461073f57600080fd5b6007805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b60005433600160a060020a0390811691161461079157600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60005433600160a060020a0390811691161461080657600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03331660009081526001602052604081205461085e908363ffffffff610a7616565b600160a060020a033381166000908152600160205260408082209390935590851681522054610893908363ffffffff610a8816565b600160a060020a038085166000818152600160209081526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600192915050565b6000600160a060020a038316151561090b57600080fd5b600160a060020a03841660009081526001602052604090205482111561093057600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561096357600080fd5b600160a060020a03841660009081526001602052604090205461098c908363ffffffff610a7616565b600160a060020a0380861660009081526001602052604080822093909355908516815220546109c1908363ffffffff610a8816565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610a09908363ffffffff610a7616565b600160a060020a038086166000818152600260209081526040808320338616845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600082821115610a8257fe5b50900390565b60008282018381101561071d57fe00a165627a7a723058207c923ace99ae05a06321796c893807dc0631b4d90248895334aa62acdfa45f290029"
}