{
  "address": "0xc19aba5148a8e8e2b813d40be1276312feddb813",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "playFive",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-29\n*/\n\npragma solidity ^0.4.4;\n  //ENG::This code is a part of game on www.fgames.io\n  //ENG::If you found any bug or have an idea, contact us on [email protected]\n  //RUS::Этот код является частью игры на сайте www.fgames.io\n  //RUS::Если вы нашли баги илм есть идеи, пишите нам [email protected]\ncontract playFive {\n  //ENG::Declare variable we use\n  //RUS::Декларируем переменные\n  address private creator;\n  string private message;\n  string private message_details;\n  string private referal;\n  uint private totalBalance; \n  uint public totalwin;\n  \n  //ENG::Сonstructor\n  //Конструктор\n  constructor() public {\n\n    creator = tx.origin;   \n    message = 'initiated';\n  }\n  \n  //ENG::Event which will be visible in transaction logs in etherscan, and will have result data, whats will be parsed and showed on website\n  //RUS::Эвент который будет виден а логах транзакции, и отобразит строку с полезными данными для анализа и после вывода их на сайте\n  event statusGame(string message);\n\n\n  //ENG::Function that show Creator adress\n  //RUS::Функция которая отобразит адресс создателя контракта\n  function getCreator() public constant returns(address) {\n    return creator;\n  }\n\n  //ENG::Function that show SmarrtContract Balance\n  //Функция которая отобразит Баланс СмартКонтракта\n  function getTotalBalance() public constant returns(uint) {\n    return address(this).balance;\n  }  \n  \n\n//ENG::One of the best way to compare two strings converted to bytes\n//ENG::Function will check length and if bytes length is same then calculate hash of strings and compare it, (a1)\n//ENG::if strings the same, return true, otherwise return false (a2)\n//RUS::Один из лучших вариантов сравнения стринг переменных сконвертированные а байты\n//RUS::Сначала функция сравнивает длинну байткода и послк их хэш (a1)\n//RUS::Если хэш одинаковый, то возвращает true, иначе - false (a2)\n\nfunction hashCompareWithLengthCheck(string a, string b) internal pure returns (bool) {\n    if(bytes(a).length != bytes(b).length) { //(a1)\n        return false;\n    } else {\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b)); //(a2)\n    }\n}\n\n//ENG::Function that calculate Wining points\n//ENG::After we get our *play ticket* adress, we take last 5 chars of it and game is on\n//ENG::sendTXTpsTX - main game function, send to this function *play ticket* code and player entered symbols \n//ENG::function starting setted initiated results to nothing (b1)\n//ENG::Then converting strings to bytes, so we can run throung each symbol (b2)\n//ENG::Also we set initial winpoint to 0 (b3)\n//ENG::Then we run throught each symbol in *play ticket* and compare it with player entered symbols\n//ENG::player entered symbols maximum length also is five\n//ENG::if function found a match using *hashCompareWithLengthCheck* function, then\n//ENG::function add to event message details, that shows whats symbols are found whith player entered symbols (b4)\n//ENG::replace used symbols in *player ticket* and entered symbols on X and Y so they no more used in game process (b5)\n//ENG::and increase winpoit by 1 (b6)\n//ENG::after function complete, it return winpoint from 0 - 5 (b7)\n//RUS::Функция которая высчитывает количество очков\n//RUS::После получения адреса *билета*, мы берем его последнии 5 символов и игра началась\n//RUS::sendTXTpsTX - главная функция игры, шлёт этой функции символы билета и символы введеные игроком\n//RUS::Функция сначало обнуляет детали переменной результата (b1)\n//RUS::После конвертирует *билет* и символы игрока в байты, чтобы можно было пройти по символам (b2)\n//RUS::Также ставим начальное количество очков на 0 (b3)\n//RUS::Далее мы проверяем совпадают ли символы *билета* с символами которые ввел игрок\n//RUS::Максимальная длинна символов которые вводит игрок, тоже 5.\n//RUS::Если функция находит совпадение с помощью функции *hashCompareWithLengthCheck*, то\n//RUS::Функция добавляет к эвэнту детальное сообщение о том, какие символы были найдены (b4)\n//RUS::Заменяет найденные символы в *билете* и *ключе* на X и Y и они более не участвуют в игре (b5)\n//RUS::Увеличивает количество баллов winpoint на 1 (b6)\n//RUS::По звыершению, возвращает значение winpoint от 0 до 5 (b7)\nfunction check_result(string ticket, string check) public  returns (uint) {\n  message_details = \"\"; //(b1)\n    bytes memory ticketBytes = bytes(ticket); //(b2)\n    bytes memory checkBytes = bytes(check);   //(b2) \n    uint winpoint = 0; //(b3)\n\n\n    for (uint i=0; i < 5; i++){\n\n      for (uint j=0; j < 5; j++){\n\n        if(hashCompareWithLengthCheck(string(abi.encodePacked(ticketBytes[j])),string(abi.encodePacked(checkBytes[i]))))\n        {\n          message_details = string(abi.encodePacked(message_details,'*',ticketBytes[j],'**',checkBytes[i])); //(b4)\n          ticketBytes[j] =\"X\"; //(b5)\n          checkBytes[i] = \"Y\"; //(b5)\n\n          winpoint = winpoint+1; //(b6)         \n        }\n       \n      }\n\n    }    \n    return uint(winpoint); //(b7)\n  }\n\n//ENG::Function destroy this smartContract\n//ENG::Thats needed in case if we create new game, to take founds from it and add to new game \n//ENG::Or also it need if we see that current game not so actual, and we need to transfer founds to a new game, that more popular\n//ENG::Or in case if we found any critical bug, to take founds in safe place, while fixing bugs.\n//RUS::Функция для уничтожения смарт контракта\n//RUS::Это необходимо, чтобы при создании новых игр, можно было разделить Баланс текущей игры с новой игрой\n//RUS::Или если при создании новых игр, эта потеряет свою актуальность\n//RUS::Либо при обнаружении критических багое, перевести средства в безопастное место на время исправления ошибок\n  function resetGame () public {\n    if (msg.sender == creator) { \n      selfdestruct(0xdC3df52BB1D116471F18B4931895d91eEefdC2B3); \n      return;\n    }\n  }\n\n//ENG::Function to substring provided string from provided start position until end position\n//ENG::It's need to tak last 5 characters from *ticket* adress\n//RUS::Функция для обрезания заданной строки с заданной позиции до заданной конечной позиции\n//RUS::Это надо, чтобы получить последние 5 символов с адресса *билета*\nfunction substring(string str, uint startIndex, uint endIndex) public pure returns (string) {\n    bytes memory strBytes = bytes(str);\n    bytes memory result = new bytes(endIndex-startIndex);\n    for(uint i = startIndex; i < endIndex; i++) {\n        result[i-startIndex] = strBytes[i];\n    }\n    return string(result);\n  }\n\n//ENG::Also very useful function, to make all symbols in string to lowercase\n//ENG::That need in case to lowercase *TICKET* adress and Player provided symbols\n//ENG::Because adress can be 0xasdf...FFDDEE123 and player can provide ACfE4. but we all convert to one format. lowercase\n//RUS::Тоже очень полезная функция, чтобы перевести все символы в нижний регистр\n//RUS::Это надо, чтобы привести в единый формат все такие переменные как *Билет* и *Ключ*\n//RUS::Так как адресс билета может быть 0xasdf...FFDDEE123, а также игрок может ввести ACfE4.\n\tfunction _toLower(string str) internal pure returns (string) {\n\t\tbytes memory bStr = bytes(str);\n\t\tbytes memory bLower = new bytes(bStr.length);\n\t\tfor (uint i = 0; i < bStr.length; i++) {\n\t\t\t// Uppercase character...\n\t\t\tif ((bStr[i] >= 65) && (bStr[i] <= 90)) {\n\t\t\t\t// So we add 32 to make it lowercase\n\t\t\t\tbLower[i] = bytes1(int(bStr[i]) + 32);\n\t\t\t} else {\n\t\t\t\tbLower[i] = bStr[i];\n\t\t\t}\n\t\t}\n\t\treturn string(bLower);\n\t}\n\n\n//ENG::Main function whats called from a website.\n//ENG::To provide best service. performance and support we take DevFee 13.3% of transaction (c1)\n//ENG::Using clone function we create new smartcontract,\n//ENG::to generate TOTALLY random symbols which nobody can know until transaction not mined (c2)\n//ENG::Used check_result function we get winpoint value (c3)\n//ENG::If winpoint value is 0 or 1 point - player wins 0 ETH (c4)\n//ENG::if winpoint value is 2 then player wins 165% from (BET - 13.3%) (c5)\n//ENG::if winpoint value is 3 then player wins 315% from (BET - 13.3%) (c6)\n//ENG::if winpoint value is 4 then player wins 515% from (BET - 13.3%) (c7)\n//ENG::if winpoint value is 5 then player wins 3333% from (BET - 13.3%) (c8)\n//ENG::If win amount is greater the smartcontract have, then player got 90% of smart contract balance (c9)\n//ENG::On Website before place bet, player will see smartcontract current balance (maximum to wim)\n//ENG::when win amount was calculated it automatically sends to player adress (c10)\n//ENG::After all steps completed, SmartContract will generate message for EVENT,\n//ENG::EVENT Message will have description of current game, and will have those fields which will be displayed on website:\n//ENG::Ticket full adress / Player BET / Player Win amount / Player score / Little ticket / Player provided symbols / Explain of founded symbols / Partner id\n//RUS::Главная функция которая вызывается непосредственно с сайта.\n//RUS::Чтобы обеспечивать качественный сервис, развивать и создавать новые игры, мы берем комиссию 13,3% от размера ставки (c1)\n//RUS::Используем функцию *clone* для создания нового смарт контракта,\n//RUS::Для того, чтобы добится 100% УНИКАЛЬНОГО *билета* (c2)\n//RUS::Используем check_result функцию чтобы узнать значение winpoint (c3)\n//RUS::Если значение winpoint 0 или 1 - выйгрыш игрока 0 ETH (c4)\n//RUS::Если значение winpoint 2 - выйгрыш игрока 165% от (СТАВКА - 13.3%) (c5)\n//RUS::Если значение winpoint 3 - выйгрыш игрока 315% от (СТАВКА - 13.3%) (c6)\n//RUS::Если значение winpoint 4 - выйгрыш игрока 515% от (СТАВКА - 13.3%) (c7)\n//RUS::Если значение winpoint 5 - выйгрыш игрока 3333% от (СТАВКА - 13.3%) (c8)\n//RUS::Если сумма выйгрыша больше баланса смарт контракта, то игрок получает 90% от баланса смарт контракта (c9)\n//RUS::На сайте игрок заранее видет баланс смарт контракта на текущий момент (максимальный выйгрыш)\n//RUS::После вычисления суммы выйгрыша, выйгрышь автоматом перечисляется на адресс игрока (c10)\n//RUS::После завершения всех шагов, смарт контракт генерирует сообщение для ЭВЕНТА\n//RUS::Сообщение ЭВЕНТА хранит в себе ключевые показатели сыграной игры, и красиво в понятной форме будут отображены на сайте\n//RUS::Что содержит сообщение ЭВЕНТА:\n//RUS::Полный адресс *билета* / Ставку / Суммы выйгрыша / Очки игрока / Укороченный билет / Символы введенные игроком / Расшифровка найденых символов / Ид партнёра\n\n    function sendTXTpsTX(string UserTicketKey, string setRef) public payable {\n    \n    address(0xdC3df52BB1D116471F18B4931895d91eEefdC2B3).transfer((msg.value/1000)*133); //(c1)\n\n    address check_ticket = clone(address(this)); //(c2)\n   \n    uint winpoint = check_result(substring(addressToString(check_ticket),37,42),_toLower(UserTicketKey));  //(c3)\n    \n    if(winpoint == 0)\n    {\n      totalwin = 0; //(c4)\n    }\n    if(winpoint == 1)\n    {\n      totalwin = 0; //(c4)\n    }\n    if(winpoint == 2)\n    {\n      totalwin = ((msg.value - (msg.value/1000)*133)/100)*165; //(c5)\n    }\n    if(winpoint == 3)\n    {\n      totalwin = ((msg.value - (msg.value/1000)*133)/100)*315; //(c6)\n    }            \n    if(winpoint == 4)\n    {\n      totalwin = ((msg.value - (msg.value/1000)*133)/100)*515; //(c7)\n    }\n    if(winpoint == 5)\n    {\n      totalwin = ((msg.value - (msg.value/1000)*133)/100)*3333; //(c8)\n    } \n\n    if(totalwin > 0)    \n    {\n      if(totalwin > address(this).balance)\n      {\n        totalwin = ((address(this).balance/100)*90); //(c9)\n      }\n      msg.sender.transfer(totalwin); //(c10)         \n    }\n    //(c11)>>\n    emit statusGame(string(abi.encodePacked(\"xxFULL_TICKET_HASHxx\",addressToString(check_ticket),\"xxYOUR_BETxx\",uint2str(msg.value),\"xxYOUR_WINxx\",uint2str(totalwin),\"xxYOUR_SCORExx\",uint2str(winpoint),\"xxYOUR_TICKETxx\",substring(addressToString(check_ticket),37,42),\"xxYOUR_KEYxx\", _toLower(UserTicketKey),\"xxEXPLAINxx\",message_details, \"xxREFxx\",setRef,\"xxWINxx\",totalwin)));\n    //(c11)<<\n    return;\n  }  \n\n\n  //ENG::Standart Function to receive founds\n  //RUS::Стандартная функция для приёма средств\n  function () payable public {\n    //RECEIVED    \n  }\n\n  //ENG::Converts adress type into string\n  //ENG::Used to convert *TICKET* adress into string\n  //RUS::Конвертирует переменную типа adress в строку string\n  //RUS::Используется для конвертации адреса *билета* в строку string\nfunction addressToString(address _addr) public pure returns(string) {\n    bytes32 value = bytes32(uint256(_addr));\n    bytes memory alphabet = \"0123456789abcdef\";\n\n    bytes memory str = new bytes(42);\n    str[0] = '0';\n    str[1] = 'x';\n    for (uint i = 0; i < 20; i++) {\n        str[2+i*2] = alphabet[uint(value[i + 12] >> 4)];\n        str[3+i*2] = alphabet[uint(value[i + 12] & 0x0f)];\n    }\n    return string(str);\n}\n\n  //ENG::Converts uint type into STRING to show data in human readable format\n  //RUS::Конвертирует переменную uint в строку string чтобы отобразить данные в понятном для человека формате\nfunction uint2str(uint i) internal pure returns (string){\n    if (i == 0) return \"0\";\n    uint j = i;\n    uint length;\n    while (j != 0){\n        length++;\n        j /= 10;\n    }\n    bytes memory bstr = new bytes(length);\n    uint k = length - 1;\n    while (i != 0){\n        bstr[k--] = byte(48 + i % 10);\n        i /= 10;\n    }\n    return string(bstr);\n}\n\n\n//ENG::This simple function, clone existing contract into new contract, to gain TOTALLY UNICALLY random string of *TICKET*\n//RUS::Эта простая функция клонирует текущий контракт в новый контракт, чтобы получить 100% уникальную переменную *БИЛЕТА*\nfunction clone(address a) public returns(address){\n\n    address retval;\n    assembly{\n        mstore(0x0, or (0x5880730000000000000000000000000000000000000000803b80938091923cF3 ,mul(a,0x1000000000000000000)))\n        retval := create(0,0, 32)\n    }\n    return retval;\n}\n\n}",
  "bytecode": ""
}