{
  "address": "0xefcafd4a1e76d392d683d4a79cd0e4a751d0be75",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BCSToken",
  "compilerVersion": "v0.4.21-nightly.2018.2.27+commit.415ac2ae",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-15\n*/\n\npragma solidity ^0.4.18;\n\n// SafeMath for addition and substraction\nlibrary SafeMath {\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n    }\n\n/**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n    }\n  \n}\n\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract BCSToken {\n    // Use SafeMath library for addition and substraction\n    using SafeMath for uint;\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint256 public decimals = 8;\n    uint256 public totalSupply;\n    address private owner;\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function BCSToken() public {\n    \tname = \"BlockChainStore Token\";                          // Set the name for display purposes\n        symbol = \"BCST\";                                         // and symbol\n    \tuint256 initialSupply = 100000000;\t\t\t            // 100M\ttokens\n        totalSupply = initialSupply * (10 ** uint256(decimals));// 8 digits for mantissa , no safeMath needed here\n        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens\n        owner = msg.sender;\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(SafeMath.add(balanceOf[_to] ,_value) >= balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = SafeMath.add(balanceOf[_from] , balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from]=SafeMath.sub(balanceOf[_from] , _value);\n        // Add the same to the recipient\n        balanceOf[_to]=SafeMath.add(balanceOf[_to] , _value);\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(SafeMath.add(balanceOf[_from] , balanceOf[_to]) == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender]=SafeMath.sub(allowance[_from][msg.sender] , _value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);                          // Check if the sender has enough\n        require(owner==msg.sender);                                        // Check owner only can destroy\n        balanceOf[msg.sender]=SafeMath.sub(balanceOf[msg.sender],_value);  // Subtract from the sender\n        totalSupply = SafeMath.sub(totalSupply , _value);                  // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "60606040526008600255341561001457600080fd5b600060408051908101604052601581527f426c6f636b436861696e53746f726520546f6b656e00000000000000000000006020820152600090805161005d9291602001906100ec565b5060408051908101604052600481527f4243535400000000000000000000000000000000000000000000000000000000602082015260019080516100a59291602001906100ec565b5050600254600a0a6305f5e100026003819055600160a060020a03331660008181526005602052604090209190915560048054600160a060020a0319169091179055610187565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012d57805160ff191683800117855561015a565b8280016001018555821561015a579182015b8281111561015a57825182559160200191906001019061013f565b5061016692915061016a565b5090565b61018491905b808211156101665760008155600101610170565b90565b610720806101966000396000f3006060604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806318160ddd1461016857806323b872dd1461018d578063313ce567146101b557806342966c68146101c857806370a08231146101de57806395d89b41146101fd578063a9059cbb14610210578063dd62ed3e14610234575b600080fd5b34156100b357600080fd5b6100bb610259565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100f75780820151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013d57600080fd5b610154600160a060020a03600435166024356102f7565b604051901515815260200160405180910390f35b341561017357600080fd5b61017b610327565b60405190815260200160405180910390f35b341561019857600080fd5b610154600160a060020a036004358116906024351660443561032d565b34156101c057600080fd5b61017b6103cf565b34156101d357600080fd5b6101546004356103d5565b34156101e957600080fd5b61017b600160a060020a03600435166104a7565b341561020857600080fd5b6100bb6104b9565b341561021b57600080fd5b610232600160a060020a0360043516602435610524565b005b341561023f57600080fd5b61017b600160a060020a0360043581169060243516610533565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102ef5780601f106102c4576101008083540402835291602001916102ef565b820191906000526020600020905b8154815290600101906020018083116102d257829003601f168201915b505050505081565b600160a060020a033381166000908152600660209081526040808320938616835292905220819055600192915050565b60035481565b600160a060020a0380841660009081526006602090815260408083203390941683529290529081205482111561036257600080fd5b600160a060020a03808516600090815260066020908152604080832033909416835292905220546103939083610550565b600160a060020a03808616600090815260066020908152604080832033909416835292905220556103c5848484610562565b5060019392505050565b60025481565b600160a060020a033316600090815260056020526040812054829010156103fb57600080fd5b60045433600160a060020a0390811691161461041657600080fd5b600160a060020a0333166000908152600560205260409020546104399083610550565b600160a060020a03331660009081526005602052604090205560035461045f9083610550565b600355600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2506001919050565b60056020526000908152604090205481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102ef5780601f106102c4576101008083540402835291602001916102ef565b61052f338383610562565b5050565b600660209081526000928352604080842090915290825290205481565b60008282111561055c57fe5b50900390565b6000600160a060020a038316151561057957600080fd5b600160a060020a0384166000908152600560205260409020548290101561059f57600080fd5b600160a060020a0383166000908152600560205260409020546105c281846106e1565b10156105cd57600080fd5b600160a060020a038085166000908152600560205260408082205492861682529020546105fa91906106e1565b600160a060020a0385166000908152600560205260409020549091506106209083610550565b600160a060020a03808616600090815260056020526040808220939093559085168152205461064f90836106e1565b600160a060020a03808516600081815260056020526040908190209390935591908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3600160a060020a0380851660009081526005602052604080822054928616825290205482916106d4916106e1565b146106db57fe5b50505050565b818101828110156106ee57fe5b929150505600a165627a7a7230582088fc55228a003268b962f763ba0675d4d7df86f8403b72fa381e77940197f5350029"
}