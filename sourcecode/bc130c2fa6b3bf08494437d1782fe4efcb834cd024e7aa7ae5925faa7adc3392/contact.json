{
  "address": "0xa98e0024db4a1720a301f464c4dabf685e34d078",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Dekla Token",
  "contractName": "DeklaToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-13\n*/\n\npragma solidity ^0.4.23;\n\n// File: contracts\\SignatureVerifier.sol\n\n/**\n * @title Signature verifier\n * @dev To verify C level actions\n */\ncontract SignatureVerifier {\n\n    function splitSignature(bytes sig)\n    internal\n    pure\n    returns (uint8, bytes32, bytes32)\n    {\n        require(sig.length == 65);\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        assembly {\n        // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n        // second 32 bytes\n            s := mload(add(sig, 64))\n        // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n        return (v, r, s);\n    }\n\n    // Returns the address that signed a given string message\n    function verifyString(\n        string message,\n        uint8 v,\n        bytes32 r,\n        bytes32 s)\n    internal pure\n    returns (address signer) {\n\n        // The message header; we will fill in the length next\n        string memory header = \"\\x19Ethereum Signed Message:\\n000000\";\n        uint256 lengthOffset;\n        uint256 length;\n\n        assembly {\n        // The first word of a string is its length\n            length := mload(message)\n        // The beginning of the base-10 message length in the prefix\n            lengthOffset := add(header, 57)\n        }\n\n        // Maximum length we support\n        require(length <= 999999);\n        // The length of the message's length in base-10\n        uint256 lengthLength = 0;\n        // The divisor to get the next left-most message length digit\n        uint256 divisor = 100000;\n        // Move one digit of the message length to the right at a time\n\n        while (divisor != 0) {\n            // The place value at the divisor\n            uint256 digit = length / divisor;\n            if (digit == 0) {\n                // Skip leading zeros\n                if (lengthLength == 0) {\n                    divisor /= 10;\n                    continue;\n                }\n            }\n            // Found a non-zero digit or non-leading zero digit\n            lengthLength++;\n            // Remove this digit from the message length's current value\n            length -= digit * divisor;\n            // Shift our base-10 divisor over\n            divisor /= 10;\n\n            // Convert the digit to its ASCII representation (man ascii)\n            digit += 0x30;\n            // Move to the next character and write the digit\n            lengthOffset++;\n            assembly {\n                mstore8(lengthOffset, digit)\n            }\n        }\n        // The null string requires exactly 1 zero (unskip 1 leading 0)\n        if (lengthLength == 0) {\n            lengthLength = 1 + 0x19 + 1;\n        } else {\n            lengthLength += 1 + 0x19;\n        }\n        // Truncate the tailing zeros from the header\n        assembly {\n            mstore(header, lengthLength)\n        }\n        // Perform the elliptic curve recover operation\n        bytes32 check = keccak256(abi.encodePacked(header, message));\n        return ecrecover(check, v, r, s);\n    }\n}\n\n// File: contracts\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// File: contracts\\ERC20Token.sol\n\n/**\n * @title A DEKLA token access control\n * @author DEKLA (https://www.dekla.io)\n * @dev The Dekla token has 3 C level address to manage.\n * They can execute special actions but it need to be approved by another C level address.\n */\ncontract DeklaAccessControl is SignatureVerifier {\n    using SafeMath for uint256;\n\n    // C level address that can execute special actions.\n    address public ceoAddress;\n    address public cfoAddress;\n    address public cooAddress;\n    uint256 public CLevelTxCount_ = 0;\n\n    // @dev store nonces\n    mapping(address => uint256) nonces;\n\n    // @dev C level transaction must be approved with another C level address\n    modifier onlyCLevel() {\n        require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress\n        );\n        _;\n    }\n\n    function recover(bytes32 hash, bytes sig) public pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        //Check the signature length\n        if (sig.length != 65) {\n            return (address(0));\n        }\n        // Divide the signature in r, s and v variables\n        (v, r, s) = splitSignature(sig);\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n            bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\n            return ecrecover(prefixedHash, v, r, s);\n        }\n    }\n\n    // @dev return true if transaction already signed by a C Level address\n    // @param _message The string to be verify\n    function signedCLevel(\n        bytes32 _message,\n        bytes _sig\n    )\n    internal\n    view\n    onlyCLevel\n    returns (bool)\n    {\n        address signer = recover(_message, _sig);\n\n        require(signer != msg.sender);\n        return (\n        signer == cooAddress ||\n        signer == ceoAddress ||\n        signer == cfoAddress\n        );\n    }\n\n    /**\n     * @notice Hash (keccak256) of the payload used by setCEO\n     * @param _newCEO address The address of the new CEO\n     * @param _nonce uint256 setCEO transaction number.\n     */\n    function getCEOHashing(address _newCEO, uint256 _nonce) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(bytes4(0x486A0F3E), _newCEO, _nonce));\n    }\n\n    // @dev Assigns a new address to act as the CEO. The C level transaction, must verify.\n    // @param _newCEO The address of the new CEO\n    function setCEO(\n        address _newCEO,\n        bytes _sig\n    ) external onlyCLevel {\n        require(\n            _newCEO != address(0) &&\n            _newCEO != cfoAddress &&\n            _newCEO != cooAddress\n        );\n\n        bytes32 hashedTx = getCEOHashing(_newCEO, nonces[msg.sender]);\n        require(signedCLevel(hashedTx, _sig));\n        nonces[msg.sender]++;\n\n        ceoAddress = _newCEO;\n        CLevelTxCount_++;\n    }\n\n    /**\n     * @notice Hash (keccak256) of the payload used by setCFO\n     * @param _newCFO address The address of the new CFO\n     * @param _nonce uint256 setCFO transaction number.\n     */\n    function getCFOHashing(address _newCFO, uint256 _nonce) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(bytes4(0x486A0F3F), _newCFO, _nonce));\n    }\n\n    // @dev Assigns a new address to act as the CFO. The C level transaction, must verify.\n    // @param _newCFO The address of the new CFO\n    function setCFO(\n        address _newCFO,\n        bytes _sig\n    ) external onlyCLevel {\n        require(\n            _newCFO != address(0) &&\n            _newCFO != ceoAddress &&\n            _newCFO != cooAddress\n        );\n\n        bytes32 hashedTx = getCFOHashing(_newCFO, nonces[msg.sender]);\n        require(signedCLevel(hashedTx, _sig));\n        nonces[msg.sender]++;\n\n        cfoAddress = _newCFO;\n        CLevelTxCount_++;\n    }\n\n    /**\n     * @notice Hash (keccak256) of the payload used by setCOO\n     * @param _newCOO address The address of the new COO\n     * @param _nonce uint256 setCO transaction number.\n     */\n    function getCOOHashing(address _newCOO, uint256 _nonce) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(bytes4(0x486A0F40), _newCOO, _nonce));\n    }\n\n    // @dev Assigns a new address to act as the COO. The C level transaction, must verify.\n    // @param _newCOO The address of the new COO\n    function setCOO(\n        address _newCOO,\n        bytes _sig\n    ) external onlyCLevel {\n        require(\n            _newCOO != address(0) &&\n            _newCOO != ceoAddress &&\n            _newCOO != cfoAddress\n        );\n\n        bytes32 hashedTx = getCOOHashing(_newCOO, nonces[msg.sender]);\n        require(signedCLevel(hashedTx, _sig));\n        nonces[msg.sender]++;\n\n        cooAddress = _newCOO;\n        CLevelTxCount_++;\n    }\n\n    function getNonce() external view returns (uint256) {\n        return nonces[msg.sender];\n    }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n* @title ERC865Token Token\n*\n* ERC865Token allows users paying transfers in tokens instead of gas\n* https://github.com/ethereum/EIPs/issues/865\n*\n*/\ncontract ERC865 is ERC20Basic {\n    function transferPreSigned(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    returns (bool);\n\n    function approvePreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    returns (bool);\n\n    function increaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    returns (bool);\n\n    function decreaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    returns (bool);\n\n    function transferFromPreSigned(\n        bytes _signature,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    returns (bool);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n *\n */\ncontract BasicToken is ERC20Basic, DeklaAccessControl {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    // Setable mint rate for the first time\n    uint256 mintTxCount_ = 1;\n    uint256 public teamRate = 20;\n    uint256 public saleRate = 80;\n\n    // Team address\n    address public saleAddress;\n    address public teamAddress;\n    /**\n     * @dev total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n     * @dev transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender)\n    public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    public\n    returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(\n        address _owner,\n        address _spender\n    )\n    public\n    view\n    returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(\n        address _spender,\n        uint _addedValue\n    )\n    public\n    returns (bool) {\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(\n        address _spender,\n        uint _subtractedValue\n    )\n    public\n    returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n\n/**\n* @title ERC865Token Token\n*\n* ERC865Token allows users paying transfers in tokens instead of gas\n* https://github.com/ethereum/EIPs/issues/865\n*\n*/\ncontract ERC865Token is ERC865, StandardToken {\n    /* Nonces of transfers performed */\n    // mapping(bytes => bool) signatures;\n\n    event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n    event ApprovalPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n\n    function recover(bytes32 hash, bytes sig) public pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        //Check the signature length\n        if (sig.length != 65) {\n            return (address(0));\n        }\n        // Divide the signature in r, s and v variables\n        (v, r, s) = splitSignature(sig);\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n            bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\n            return ecrecover(prefixedHash, v, r, s);\n        }\n    }\n\n    function recoverSigner(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    view\n    returns (address)\n    {\n        require(_to != address(0));\n        // require(signatures[_signature] == false);\n        bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        return from;\n    }\n\n\n    function transferPreSigned(\n        bytes _signature,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    returns (bool)\n    {\n        require(_to != address(0));\n        // require(signatures[_signature] == false);\n        bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n        balances[from] = balances[from].sub(_value).sub(_fee);\n        balances[_to] = balances[_to].add(_value);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        // signatures[_signature] = true;\n        emit Transfer(from, _to, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n        return true;\n    }\n    /**\n    * @notice Submit a presigned approval\n    * @param _signature bytes The signature, issued by the owner.\n    * @param _spender address The address which will spend the funds.\n    * @param _value uint256 The amount of tokens to allow.\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    * @param _nonce uint256 Presigned transaction number.\n    */\n    function approvePreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    returns (bool)\n    {\n        require(_spender != address(0));\n        // require(signatures[_signature] == false);\n        bytes32 hashedTx = approvePreSignedHashing(address(this), _spender, _value, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n        allowed[from][_spender] = _value;\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        // signatures[_signature] = true;\n        emit Approval(from, _spender, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\n        return true;\n    }\n\n    /**\n    * @notice Increase the amount of tokens that an owner allowed to a spender.\n    * @param _signature bytes The signature, issued by the owner.\n    * @param _spender address The address which will spend the funds.\n    * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    * @param _nonce uint256 Presigned transaction number.\n    */\n    function increaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    returns (bool)\n    {\n        require(_spender != address(0));\n        // require(signatures[_signature] == false);\n        bytes32 hashedTx = increaseApprovalPreSignedHashing(address(this), _spender, _addedValue, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n        allowed[from][_spender] = allowed[from][_spender].add(_addedValue);\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        // signatures[_signature] = true;\n        emit Approval(from, _spender, allowed[from][_spender]);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n    }\n\n    /**\n    * @notice Decrease the amount of tokens that an owner allowed to a spender.\n    * @param _signature bytes The signature, issued by the owner\n    * @param _spender address The address which will spend the funds.\n    * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    * @param _nonce uint256 Presigned transaction number.\n    */\n    function decreaseApprovalPreSigned(\n        bytes _signature,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    returns (bool)\n    {\n        require(_spender != address(0));\n        // require(signatures[_signature] == false);\n        bytes32 hashedTx = decreaseApprovalPreSignedHashing(address(this), _spender, _subtractedValue, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n        uint oldValue = allowed[from][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[from][_spender] = 0;\n        } else {\n            allowed[from][_spender] = oldValue.sub(_subtractedValue);\n        }\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        // signatures[_signature] = true;\n        emit Approval(from, _spender, _subtractedValue);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n    }\n\n    /**\n    * @notice Transfer tokens from one address to another\n    * @param _signature bytes The signature, issued by the spender.\n    * @param _from address The address which you want to send tokens from.\n    * @param _to address The address which you want to transfer to.\n    * @param _value uint256 The amount of tokens to be transferred.\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n    * @param _nonce uint256 Presigned transaction number.\n    */\n    function transferFromPreSigned(\n        bytes _signature,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    returns (bool)\n    {\n        require(_to != address(0));\n        // require(signatures[_signature] == false);\n        bytes32 hashedTx = transferFromPreSignedHashing(address(this), _from, _to, _value, _fee, _nonce);\n        address spender = recover(hashedTx, _signature);\n        require(spender != address(0));\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][spender] = allowed[_from][spender].sub(_value);\n        balances[spender] = balances[spender].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        // signatures[_signature] = true;\n        emit Transfer(_from, _to, _value);\n        emit Transfer(spender, msg.sender, _fee);\n        return true;\n    }\n\n    /**\n    * @notice Hash (keccak256) of the payload used by transferPreSigned\n    * @param _token address The address of the token.\n    * @param _to address The address which you want to transfer to.\n    * @param _value uint256 The amount of tokens to be transferred.\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    * @param _nonce uint256 Presigned transaction number.\n    */\n    function transferPreSignedHashing(\n        address _token,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    pure\n    returns (bytes32)\n    {\n        /* \"48664c16\": transferPreSignedHashing(address,address,address,uint256,uint256,uint256) */\n        return keccak256(abi.encodePacked(bytes4(0x486A0F41), _token, _to, _value, _fee, _nonce));\n    }\n    /**\n    * @notice Hash (keccak256) of the payload used by approvePreSigned\n    * @param _token address The address of the token\n    * @param _spender address The address which will spend the funds.\n    * @param _value uint256 The amount of tokens to allow.\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    * @param _nonce uint256 Presigned transaction number.\n    */\n    function approvePreSignedHashing(\n        address _token,\n        address _spender,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    pure\n    returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_token, _spender, _value, _fee, _nonce));\n    }\n    /**\n    * @notice Hash (keccak256) of the payload used by increaseApprovalPreSigned\n    * @param _token address The address of the token\n    * @param _spender address The address which will spend the funds.\n    * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    * @param _nonce uint256 Presigned transaction number.\n    */\n    function increaseApprovalPreSignedHashing(\n        address _token,\n        address _spender,\n        uint256 _addedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    pure\n    returns (bytes32)\n    {\n        /* \"a45f71ff\": increaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\n        return keccak256(abi.encodePacked(bytes4(0x486A0F42), _token, _spender, _addedValue, _fee, _nonce));\n    }\n    /**\n    * @notice Hash (keccak256) of the payload used by decreaseApprovalPreSigned\n    * @param _token address The address of the token\n    * @param _spender address The address which will spend the funds.\n    * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n    * @param _nonce uint256 Presigned transaction number.\n    */\n    function decreaseApprovalPreSignedHashing(\n        address _token,\n        address _spender,\n        uint256 _subtractedValue,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    pure\n    returns (bytes32)\n    {\n        /* \"59388d78\": decreaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\n        return keccak256(abi.encodePacked(bytes4(0x486A0F43), _token, _spender, _subtractedValue, _fee, _nonce));\n    }\n    /**\n    * @notice Hash (keccak256) of the payload used by transferFromPreSigned\n    * @param _token address The address of the token\n    * @param _from address The address which you want to send tokens from.\n    * @param _to address The address which you want to transfer to.\n    * @param _value uint256 The amount of tokens to be transferred.\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n    * @param _nonce uint256 Presigned transaction number.\n    */\n    function transferFromPreSignedHashing(\n        address _token,\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _nonce\n    )\n    public\n    pure\n    returns (bytes32)\n    {\n        /* \"b7656dc5\": transferFromPreSignedHashing(address,address,address,uint256,uint256,uint256) */\n        return keccak256(abi.encodePacked(bytes4(0x486A0F44), _token, _from, _to, _value, _fee, _nonce));\n    }\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is ERC865Token {\n    using SafeMath for uint256;\n\n    event Mint(address indexed to, uint256 amount);\n\n    // Limit total supply to 10 billion\n    uint256 public constant totalTokenLimit = 10000000000000000000000000000;\n\n    // Max token left percent allow to mint, based on 100%\n    uint256 public maxTokenRateToMint = 20;\n    uint256 public canMintLimit = 0;\n\n\n    /**\n     * @dev Throws if total supply is higher than total token limit\n     */\n    modifier canMint()\n    {\n\n        // Address to mint must defined\n        require(\n            teamAddress != address(0) &&\n            saleAddress != address(0)\n\n        );\n\n        // Total supply after mint must lower or equal total token limit\n        require(totalSupply_ <= totalTokenLimit);\n        require(balances[saleAddress] <= canMintLimit);\n        _;\n    }\n\n\n    /**\n     * @dev Function to mint tokens: mint 1000000000000000000000000000 every times\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint() onlyCLevel external {\n        _mint(1000000000000000000000000000);\n    }\n\n    function _mint(uint256 _amount)\n    canMint\n    internal\n    {\n        uint256 saleAmount_ = _amount.mul(saleRate).div(100);\n        uint256 teamAmount_ = _amount.mul(teamRate).div(100);\n\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[saleAddress] = balances[saleAddress].add(saleAmount_);\n        balances[teamAddress] = balances[teamAddress].add(teamAmount_);\n\n        canMintLimit = balances[saleAddress]\n        .mul(maxTokenRateToMint)\n        .div(100);\n        mintTxCount_++;\n\n        emit Mint(saleAddress, saleAmount_);\n        emit Mint(teamAddress, teamAmount_);\n    }\n\n    function getMaxTokenRateToMintHashing(uint256 _rate, uint256 _nonce) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(bytes4(0x486A0F45), _rate, _nonce));\n    }\n\n    function setMaxTokenRateToMint(\n        uint256 _rate,\n        bytes _sig\n    ) external onlyCLevel {\n        require(_rate <= 100);\n        require(_rate >= 0);\n\n        bytes32 hashedTx = getMaxTokenRateToMintHashing(_rate, nonces[msg.sender]);\n        require(signedCLevel(hashedTx, _sig));\n        nonces[msg.sender]++;\n\n        maxTokenRateToMint = _rate;\n        CLevelTxCount_++;\n    }\n\n    function getMintRatesHashing(uint256 _saleRate, uint256 _nonce) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(bytes4(0x486A0F46), _saleRate, _nonce));\n    }\n\n    function setMintRates(\n        uint256 saleRate_,\n        bytes _sig\n    )\n    external\n    onlyCLevel\n    {\n        require(saleRate.add(teamRate) == 100);\n        require(mintTxCount_ >= 3);\n\n        bytes32 hashedTx = getMintRatesHashing(saleRate_, nonces[msg.sender]);\n        require(signedCLevel(hashedTx, _sig));\n        nonces[msg.sender]++;\n\n        saleRate = saleRate_;\n        CLevelTxCount_++;\n    }\n}\n\n\ncontract DeklaToken is MintableToken {\n    string public name = \"Dekla Token\";\n    string public symbol = \"DKL\";\n    uint256 public decimals = 18;\n    uint256 public INITIAL_SUPPLY = 1000000000 * (10 ** decimals);\n\n    function isDeklaToken() public pure returns (bool){\n        return true;\n    }\n\n    constructor (\n        address _ceoAddress,\n        address _cfoAddress,\n        address _cooAddress,\n        address _teamAddress,\n        address _saleAddress\n    ) public {\n        // initial prize address\n        teamAddress = _teamAddress;\n\n        // initial C level address\n        ceoAddress = _ceoAddress;\n        cfoAddress = _cfoAddress;\n        cooAddress = _cooAddress;\n        saleAddress = _saleAddress;\n\n        // mint tokens first time\n        _mint(INITIAL_SUPPLY);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canMintLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getCFOHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenRateToMint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDeklaToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getMaxTokenRateToMintHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getCEOHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CLevelTxCount_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"decreaseApprovalPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_saleRate\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getMintRatesHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"approvePreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getCOOHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"decreaseApprovalPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"increaseApprovalPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleRate_\",\"type\":\"uint256\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"setMintRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"increaseApprovalPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferFromPreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transferFromPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"setMaxTokenRateToMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"approvePreSignedHashing\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ceoAddress\",\"type\":\"address\"},{\"name\":\"_cfoAddress\",\"type\":\"address\"},{\"name\":\"_cooAddress\",\"type\":\"address\"},{\"name\":\"_teamAddress\",\"type\":\"address\"},{\"name\":\"_saleAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TransferPreSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ApprovalPreSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000007aeaf9c8a62caf79c60b0eeb1e57eaefc140a5ca0000000000000000000000005425a1ca8b650ccfe0620fd10fe6e3dc46f0211d000000000000000000000000d75c77816c83537a6bb97819398fc2694e2e147800000000000000000000000032b528329271a828a1f098e782b5a2a021bfb70b000000000000000000000000b28bf5232f743c61f8c8f0db7b89ba88447261da"
}