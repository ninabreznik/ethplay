{
  "address": "0x5736fae50bb0baa203c787a9dbbc323589fe4edf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GovToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-17\n*/\n\npragma solidity ^0.4.24;\n\n/*\n * Government Token (GOVT) ERC20\n *\n * See https://thegovernment.network/\n */\n\nlibrary SafeMath {\n    function mul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) internal pure returns (uint) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\ncontract GovToken {\n    using SafeMath for uint;\n\n    string  public name = \"GovToken\";\n    string  public symbol = \"GOVT\";\n    string  public standard = \"GovToken v1.0\";\n    uint256 public totalSupply = 125000000 ether; // 125,000,000 GOVT\n    uint    public decimals = 18;\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    // Events\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    // Fix for the ERC20 short address attack.\n    modifier onlyPayloadSize(uint size) {\n        if(msg.data.length < size + 4) {\n            revert();\n        }\n        _;\n    }\n\n    // Constructor\n    constructor() public {\n        balances[msg.sender] = totalSupply;\n        emit Transfer(0x00, msg.sender, totalSupply);\n    }\n\n    // Transfer\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    // Check the balance\n    function balanceOf(address _owner) public constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n    // Approve for another address\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        if ((_value != 0) && (allowance[msg.sender][_spender] != 0)) revert();\n\n        allowance[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    // Check approved allowance\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n        return allowance[_owner][_spender];\n    }\n\n    // Transfer from approved funds\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(_value <= balances[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    // Default function - prevents accidental money loss by sending ether to the contract\n    function () payable public {\n        revert();\n    }\n\n}",
  "bytecode": "60c0604052600860808190527f476f76546f6b656e00000000000000000000000000000000000000000000000060a090815261003e916000919061013b565b506040805180820190915260048082527f474f56540000000000000000000000000000000000000000000000000000000060209092019182526100839160019161013b565b5060408051808201909152600d8082527f476f76546f6b656e2076312e300000000000000000000000000000000000000060209092019182526100c89160029161013b565b506a6765c793fa10079d00000060035560126004553480156100e957600080fd5b50600354336000818152600560209081526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36101d6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017c57805160ff19168380011785556101a9565b828001600101855582156101a9579182015b828111156101a957825182559160200191906001019061018e565b506101b59291506101b9565b5090565b6101d391905b808211156101b557600081556001016101bf565b90565b610782806101e56000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017557806323b872dd1461019c57806327e235e3146101c6578063313ce567146101e75780635a3b7e42146101fc57806370a082311461021157806395d89b4114610232578063a9059cbb14610247578063dd62ed3e1461026b575b600080fd5b3480156100bf57600080fd5b506100c8610292565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101025781810151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b50610161600160a060020a0360043516602435610320565b604080519115158252519081900360200190f35b34801561018157600080fd5b5061018a6103c4565b60408051918252519081900360200190f35b3480156101a857600080fd5b50610161600160a060020a03600435811690602435166044356103ca565b3480156101d257600080fd5b5061018a600160a060020a036004351661053f565b3480156101f357600080fd5b5061018a610551565b34801561020857600080fd5b506100c8610557565b34801561021d57600080fd5b5061018a600160a060020a03600435166105af565b34801561023e57600080fd5b506100c86105ca565b34801561025357600080fd5b50610161600160a060020a0360043516602435610624565b34801561027757600080fd5b5061018a600160a060020a0360043581169060243516610703565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103185780601f106102ed57610100808354040283529160200191610318565b820191906000526020600020905b8154815290600101906020018083116102fb57829003601f168201915b505050505081565b600081158015906103535750336000908152600660209081526040808320600160a060020a038716845290915290205415155b1561035d57600080fd5b336000818152600660209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60035481565b6000606060643610156103dc57600080fd5b600160a060020a03851660009081526005602052604090205483111561040157600080fd5b600160a060020a038516600090815260066020908152604080832033845290915290205483111561043157600080fd5b600160a060020a03851660009081526005602052604090205461045a908463ffffffff61072e16565b600160a060020a03808716600090815260056020526040808220939093559086168152205461048f908463ffffffff61074016565b600160a060020a0380861660009081526005602090815260408083209490945591881681526006825282812033825290915220546104d3908463ffffffff61072e16565b600160a060020a03808716600081815260066020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b60056020526000908152604090205481565b60045481565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103185780601f106102ed57610100808354040283529160200191610318565b600160a060020a031660009081526005602052604090205490565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103185780601f106102ed57610100808354040283529160200191610318565b60006040604436101561063657600080fd5b3360009081526005602052604090205483111561065257600080fd5b33600090815260056020526040902054610672908463ffffffff61072e16565b3360009081526005602052604080822092909255600160a060020a038616815220546106a4908463ffffffff61074016565b600160a060020a0385166000818152600560209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b60008282111561073a57fe5b50900390565b60008282018381101561074f57fe5b93925050505600a165627a7a72305820fc4e355830609739cb208a34457b9f2ad9c53eaef530d9d0908fa590290bbd5f0029"
}