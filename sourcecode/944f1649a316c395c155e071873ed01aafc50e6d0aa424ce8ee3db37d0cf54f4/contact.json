{
  "address": "0xa736fb095bccf90356cecae4ceda5d7899ed8c4a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VICoin",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-06\n*/\n\npragma solidity ^0.4.18;\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title RestrictedCaller\n * @dev storage of callers who available to call some methods of contracts\n */\ncontract RestrictedCaller is Ownable {\n\n\tmapping(address => address) public callers;\n\n\tevent callerAdded(address caller);\n\n\t/**\n\t* @dev Throws if called by any account other than the caller.\n\t*/\n\tmodifier onlyAvailableCaller() {\n\t\trequire(callers[msg.sender] != address(0));\n\t\t_;\n\t}\n\n\t/**\n\t* @dev add new caller for call methods permissions.\n\t* @param _address The address to transfer permissions to call to.\n\t*/\n\tfunction callerAdd(address _address) public onlyOwner {\n\t\trequire(_address != address(0));\n\t\trequire(callers[_address] == address(0)); // no exists\n\t\tcallers[_address] = _address;\n\t}\n\n\t/**\n\t* @dev delete caller for call methods permissions.\n\t* @param _address The address to del caller.\n\t*/\n\tfunction callerDel(address _address) public onlyOwner {\n\t\trequire(_address != address(0));\n\t\trequire(callers[_address] == _address); // already exists\n\t\tdelete callers[_address];\n\t}\n}\n\n/**\n* @title VICoin token\n*/\ncontract VICoin is StandardToken, RestrictedCaller {\n\n\tstring public constant name = \"Virtonomics Token - VICoin\";\n\tstring public constant symbol = \"VIC\";\n\tuint8 public constant decimals = 18;\n\n\tevent Mint(address to, uint256 amount);\n\tevent Burn(address at, uint256 value);\n\n\t/**\n\t* @dev Function to mint tokens\n\t* @param _to The address that will receive the minted tokens.\n\t* @param _amount The amount of tokens to mint.\n\t* @return A boolean that indicates if the operation was successful.\n\t*/\n\tfunction mint(address _to, uint256 _amount) onlyAvailableCaller public returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_amount > 0);\n\t\ttotalSupply = totalSupply.add(_amount);\n\t\tbalances[_to] = balances[_to].add(_amount);\n\t\tMint(_to, _amount);\n\t\tTransfer(msg.sender, _to, _amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev Function to burn tokens\n\t* @param _at The address that will burned tokens.\n\t* @param _amount The amount of tokens to burn.\n\t* @return A boolean that indicates if the operation was successful.\n\t*/\n\tfunction burn(address _at, uint256 _amount) onlyAvailableCaller public returns (bool) {\n\t\trequire(_at != address(0));\n\t\trequire(_amount > 0);\n\t\trequire(_amount <= balances[_at]);\n\t\ttotalSupply = totalSupply.sub(_amount);\n\t\tbalances[_at] = balances[_at].sub(_amount);\n\t\tBurn(_at, _amount);\n\t\tTransfer(_at, msg.sender, _amount);\n\t\treturn true;\n\t}\n}",
  "bytecode": "606060405260038054600160a060020a03191633600160a060020a0316179055610dcd8061002e6000396000f3006060604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610100578063095ea7b31461018a57806317fa664f146101c057806318160ddd146101e157806323b872dd14610206578063313ce5671461022e57806340c10f1914610257578063661884631461027957806370a082311461029b5780637bbf4a3f146102ba5780638da5cb5b146102f557806395d89b41146103085780639dc29fac1461031b578063a9059cbb1461033d578063aed6512e1461035f578063d73dd6231461037e578063dd62ed3e146103a0578063f2fde38b146103c5575b600080fd5b341561010b57600080fd5b6101136103e4565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014f578082015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019557600080fd5b6101ac600160a060020a036004351660243561041b565b604051901515815260200160405180910390f35b34156101cb57600080fd5b6101df600160a060020a0360043516610487565b005b34156101ec57600080fd5b6101f4610512565b60405190815260200160405180910390f35b341561021157600080fd5b6101ac600160a060020a0360043581169060243516604435610518565b341561023957600080fd5b610241610688565b60405160ff909116815260200160405180910390f35b341561026257600080fd5b6101ac600160a060020a036004351660243561068d565b341561028457600080fd5b6101ac600160a060020a03600435166024356107b6565b34156102a657600080fd5b6101f4600160a060020a03600435166108b0565b34156102c557600080fd5b6102d9600160a060020a03600435166108cb565b604051600160a060020a03909116815260200160405180910390f35b341561030057600080fd5b6102d96108e6565b341561031357600080fd5b6101136108f5565b341561032657600080fd5b6101ac600160a060020a036004351660243561092c565b341561034857600080fd5b6101ac600160a060020a0360043516602435610a7a565b341561036a57600080fd5b6101df600160a060020a0360043516610b63565b341561038957600080fd5b6101ac600160a060020a0360043516602435610bef565b34156103ab57600080fd5b6101f4600160a060020a0360043581169060243516610c93565b34156103d057600080fd5b6101df600160a060020a0360043516610cbe565b60408051908101604052601a81527f566972746f6e6f6d69637320546f6b656e202d205649436f696e000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035433600160a060020a039081169116146104a257600080fd5b600160a060020a03811615156104b757600080fd5b600160a060020a03808216600081815260046020526040902054909116146104de57600080fd5b600160a060020a03166000908152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055565b60005481565b6000600160a060020a038316151561052f57600080fd5b600160a060020a03841660009081526001602052604090205482111561055457600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561058757600080fd5b600160a060020a0384166000908152600160205260409020546105b0908363ffffffff610d5916565b600160a060020a0380861660009081526001602052604080822093909355908516815220546105e5908363ffffffff610d6b16565b600160a060020a0380851660009081526001602090815260408083209490945587831682526002815283822033909316825291909152205461062d908363ffffffff610d5916565b600160a060020a0380861660008181526002602090815260408083203386168452909152908190209390935590851691600080516020610d828339815191529085905190815260200160405180910390a35060019392505050565b601281565b600160a060020a0333811660009081526004602052604081205490911615156106b557600080fd5b600160a060020a03831615156106ca57600080fd5b600082116106d757600080fd5b6000546106ea908363ffffffff610d6b16565b6000908155600160a060020a038416815260016020526040902054610715908363ffffffff610d6b16565b600160a060020a03841660009081526001602052604090819020919091557f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885908490849051600160a060020a03909216825260208201526040908101905180910390a182600160a060020a031633600160a060020a0316600080516020610d828339815191528460405190815260200160405180910390a350600192915050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561081357600160a060020a03338116600090815260026020908152604080832093881683529290529081205561084a565b610823818463ffffffff610d5916565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600460205260009081526040902054600160a060020a031681565b600354600160a060020a031681565b60408051908101604052600381527f5649430000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600090815260046020526040812054909116151561095457600080fd5b600160a060020a038316151561096957600080fd5b6000821161097657600080fd5b600160a060020a03831660009081526001602052604090205482111561099b57600080fd5b6000546109ae908363ffffffff610d5916565b6000908155600160a060020a0384168152600160205260409020546109d9908363ffffffff610d5916565b600160a060020a03841660009081526001602052604090819020919091557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5908490849051600160a060020a03909216825260208201526040908101905180910390a133600160a060020a031683600160a060020a0316600080516020610d828339815191528460405190815260200160405180910390a350600192915050565b6000600160a060020a0383161515610a9157600080fd5b600160a060020a033316600090815260016020526040902054821115610ab657600080fd5b600160a060020a033316600090815260016020526040902054610adf908363ffffffff610d5916565b600160a060020a033381166000908152600160205260408082209390935590851681522054610b14908363ffffffff610d6b16565b600160a060020a038085166000818152600160205260409081902093909355913390911690600080516020610d828339815191529085905190815260200160405180910390a350600192915050565b60035433600160a060020a03908116911614610b7e57600080fd5b600160a060020a0381161515610b9357600080fd5b600160a060020a038181166000908152600460205260409020541615610bb857600080fd5b600160a060020a03166000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610c27908363ffffffff610d6b16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610cd957600080fd5b600160a060020a0381161515610cee57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610d6557fe5b50900390565b600082820183811015610d7a57fe5b93925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058207d3720c7151c9bda149657ea172b653b4afc2ec1ef7a6000ead750ca866595940029"
}