{
  "address": "0x3DB99ab08006aeFcC9600972eCA8C202396B4300",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VinciToken",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-09\n*/\n\npragma solidity ^0.5.8;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract ERC223ReceiverMixin {\n  function tokenFallback(address _from, uint256 _value, bytes memory _data) public;\n}\n\n/// @title Custom implementation of ERC223 \ncontract ERC223Mixin is StandardToken {\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  ) public returns (bool) \n  {\n    bytes memory empty;\n    return transferFrom(\n      _from, \n      _to,\n      _value,\n      empty);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes memory _data\n  ) public returns (bool)\n  {\n    require(_value <= allowed[_from][msg.sender], \"Reached allowed value\");\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    if (isContract(_to)) {\n      return transferToContract(\n        _from, \n        _to, \n        _value, \n        _data);\n    } else {\n      return transferToAddress(\n        _from, \n        _to, \n        _value, \n        _data); \n    }\n  }\n\n  function transfer(address _to, uint256 _value, bytes memory _data) public returns (bool success) {\n    if (isContract(_to)) {\n      return transferToContract(\n        msg.sender,\n        _to,\n        _value,\n        _data); \n    } else {\n      return transferToAddress(\n        msg.sender,\n        _to,\n        _value,\n        _data);\n    }\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    bytes memory empty;\n    return transfer(_to, _value, empty);\n  }\n\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 length;\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      //retrieve the size of the code on target address, this needs assembly\n      length := extcodesize(_addr)\n    }  \n    return (length>0);\n  }\n\n  function moveTokens(address _from, address _to, uint256 _value) internal returns (bool success) {\n    if (balanceOf(_from) < _value) {\n      revert();\n    }\n    balances[_from] = balanceOf(_from).sub(_value);\n    balances[_to] = balanceOf(_to).add(_value);\n\n    return true;\n  }\n\n  function transferToAddress(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes memory _data\n  ) internal returns (bool success) \n  {\n    require(moveTokens(_from, _to, _value), \"Move is not successful\");\n    emit Transfer(_from, _to, _value);\n    emit Transfer(_from, _to, _value, _data); // solium-disable-line arg-overflow\n    return true;\n  }\n  \n  //function that is called when transaction target is a contract\n  function transferToContract(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes memory _data\n  ) internal returns (bool success) \n  {\n    require(moveTokens(_from, _to, _value), \"Move is not successful\");\n    ERC223ReceiverMixin(_to).tokenFallback(_from, _value, _data);\n    emit Transfer(_from, _to, _value);\n    emit Transfer(_from, _to, _value, _data); // solium-disable-line arg-overflow\n    return true;\n  }\n}\n\n/// @title Role based access control mixin for Vinci Platform\n/// @dev Ignore DRY approach to achieve readability\ncontract RBACMixin {\n  /// @notice Constant string message to throw on lack of access\n  string constant FORBIDDEN = \"Doesn't have enough rights\";\n  string constant DUPLICATE = \"Requirement already satisfied\";\n\n  /// @notice Public owner\n  address public owner;\n\n  /// @notice Public map of minters\n  mapping (address => bool) public minters;\n\n  /// @notice The event indicates a set of a new owner\n  /// @param who is address of added owner\n  event SetOwner(address indexed who);\n\n  /// @notice The event indicates the addition of a new minter\n  /// @param who is address of added minter\n  event AddMinter(address indexed who);\n  /// @notice The event indicates the deletion of a minter\n  /// @param who is address of deleted minter\n  event DeleteMinter(address indexed who);\n\n  constructor () public {\n    _setOwner(msg.sender);\n  }\n\n  /// @notice The functional modifier rejects the interaction of sender who is not an owner\n  modifier onlyOwner() {\n    require(isOwner(msg.sender), FORBIDDEN);\n    _;\n  }\n\n  /// @notice Functional modifier for rejecting the interaction of senders that are not minters\n  modifier onlyMinter() {\n    require(isMinter(msg.sender), FORBIDDEN);\n    _;\n  }\n\n  /// @notice Look up for the owner role on providen address\n  /// @param _who is address to look up\n  /// @return A boolean of owner role\n  function isOwner(address _who) public view returns (bool) {\n    return owner == _who;\n  }\n\n  /// @notice Look up for the minter role on providen address\n  /// @param _who is address to look up\n  /// @return A boolean of minter role\n  function isMinter(address _who) public view returns (bool) {\n    return minters[_who];\n  }\n\n  /// @notice Adds the owner role to provided address\n  /// @dev Requires owner role to interact\n  /// @param _who is address to add role\n  /// @return A boolean that indicates if the operation was successful.\n  function setOwner(address _who) public onlyOwner returns (bool) {\n    require(_who != address(0));\n    _setOwner(_who);\n  }\n\n  /// @notice Adds the minter role to provided address\n  /// @dev Requires owner role to interact\n  /// @param _who is address to add role\n  /// @return A boolean that indicates if the operation was successful.\n  function addMinter(address _who) public onlyOwner returns (bool) {\n    _setMinter(_who, true);\n  }\n\n  /// @notice Deletes the minter role to provided address\n  /// @dev Requires owner role to interact\n  /// @param _who is address to delete role\n  /// @return A boolean that indicates if the operation was successful.\n  function deleteMinter(address _who) public onlyOwner returns (bool) {\n    _setMinter(_who, false);\n  }\n\n  /// @notice Changes the owner role to provided address\n  /// @param _who is address to change role\n  /// @param _flag is next role status after success\n  /// @return A boolean that indicates if the operation was successful.\n  function _setOwner(address _who) private returns (bool) {\n    require(owner != _who, DUPLICATE);\n    owner = _who;\n    emit SetOwner(_who);\n    return true;\n  }\n\n  /// @notice Changes the minter role to provided address\n  /// @param _who is address to change role\n  /// @param _flag is next role status after success\n  /// @return A boolean that indicates if the operation was successful.\n  function _setMinter(address _who, bool _flag) private returns (bool) {\n    require(minters[_who] != _flag, DUPLICATE);\n    minters[_who] = _flag;\n    if (_flag) {\n      emit AddMinter(_who);\n    } else {\n      emit DeleteMinter(_who);\n    }\n    return true;\n  }\n}\n\ncontract RBACMintableTokenMixin is StandardToken, RBACMixin {\n  /// @notice Total issued tokens\n  uint256 totalIssued_;\n\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  modifier canMint() {\n    require(!mintingFinished, \"Minting is finished\");\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    onlyMinter\n    canMint\n    public\n    returns (bool)\n  {\n    totalIssued_ = totalIssued_.add(_amount);\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n/**\n * @title Standard Burnable Token\n * @dev Adds burnFrom method to ERC20 implementations\n */\ncontract StandardBurnableToken is BurnableToken, StandardToken {\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _burn(_from, _value);\n  }\n}\n\n/// @title Vinci token implementation\n/// @dev Implements ERC20, ERC223 and MintableToken interfaces\ncontract VinciToken is StandardBurnableToken, ERC223Mixin, RBACMintableTokenMixin {\n  /// @notice Constant field with token full name\n  // solium-disable-next-line uppercase\n  string constant public name = \"Vinci\"; \n  /// @notice Constant field with token symbol\n  string constant public symbol = \"VINCI\"; // solium-disable-line uppercase\n  /// @notice Constant field with token precision depth\n  uint256 constant public decimals = 18; // solium-disable-line uppercase\n  /// @notice Constant field with token cap (total supply limit)\n  uint256 constant public cap = 1500 * (10 ** 6) * (10 ** decimals); // solium-disable-line uppercase\n\n  /// @notice Overrides original mint function from MintableToken to limit minting over cap\n  /// @param _to The address that will receive the minted tokens.\n  /// @param _amount The amount of tokens to mint.\n  /// @return A boolean that indicates if the operation was successful.\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool) \n  {\n    require(totalIssued_.add(_amount) <= cap, \"Cap reached\");\n    return super.mint(_to, _amount);\n  }\n}",
  "bytecode": ""
}