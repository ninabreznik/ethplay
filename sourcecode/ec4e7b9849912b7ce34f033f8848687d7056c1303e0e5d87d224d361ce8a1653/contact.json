{
  "address": "0xffdd9c97556d8d7b40970358529ae19f52b61ece",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CSCResource",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-12\n*/\n\npragma solidity ^0.4.21;\n\n\nlibrary strings {\n    \n    struct slice {\n        uint _len;\n        uint _ptr;\n    }\n\n    /*\n     * @dev Returns a slice containing the entire string.\n     * @param self The string to make a slice from.\n     * @return A newly allocated slice containing the entire string.\n     */\n    function toSlice(string self) internal pure returns (slice) {\n        uint ptr;\n        assembly {\n            ptr := add(self, 0x20)\n        }\n        return slice(bytes(self).length, ptr);\n    }\n\n    function memcpy(uint dest, uint src, uint len) private pure {\n        // Copy word-length chunks while possible\n        for(; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    \n    function concat(slice self, slice other) internal returns (string) {\n        var ret = new string(self._len + other._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n        memcpy(retptr, self._ptr, self._len);\n        memcpy(retptr + self._len, other._ptr, other._len);\n        return ret;\n    }\n\n    /*\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return The number of occurrences of `needle` found in `self`.\n     */\n    function count(slice self, slice needle) internal returns (uint cnt) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\n        while (ptr <= self._ptr + self._len) {\n            cnt++;\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\n        }\n    }\n\n    // Returns the memory address of the first byte of the first occurrence of\n    // `needle` in `self`, or the first byte after `self` if not found.\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\n        uint ptr;\n        uint idx;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                // Optimized assembly for 68 gas per byte on short strings\n                assembly {\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\n                    let needledata := and(mload(needleptr), mask)\n                    let end := add(selfptr, sub(selflen, needlelen))\n                    ptr := selfptr\n                    loop:\n                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\n                    ptr := add(ptr, 1)\n                    jumpi(loop, lt(sub(ptr, 1), end))\n                    ptr := add(selfptr, selflen)\n                    exit:\n                }\n                return ptr;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := sha3(needleptr, needlelen) }\n                ptr = selfptr;\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\n                    bytes32 testHash;\n                    assembly { testHash := sha3(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr;\n                    ptr += 1;\n                }\n            }\n        }\n        return selfptr + selflen;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and `token` to everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function split(slice self, slice needle, slice token) internal returns (slice) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = self._ptr;\n        token._len = ptr - self._ptr;\n        if (ptr == self._ptr + self._len) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n            self._ptr = ptr + needle._len;\n        }\n        return token;\n    }\n\n     /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and returning everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` up to the first occurrence of `delim`.\n     */\n    function split(slice self, slice needle) internal returns (slice token) {\n        split(self, needle, token);\n    }\n\n    /*\n     * @dev Copies a slice to a new string.\n     * @param self The slice to copy.\n     * @return A newly allocated string containing the slice's text.\n     */\n    function toString(slice self) internal pure returns (string) {\n        var ret = new string(self._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        memcpy(retptr, self._ptr, self._len);\n        return ret;\n    }\n\n}\n\n/* Helper String Functions for Game Manager Contract\n * @title String Healpers\n * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n */\ncontract StringHelpers {\n    using strings for *;\n    \n    function stringToBytes32(string memory source) internal returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n    \n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n\n    function bytes32ToString(bytes32 x) constant internal returns (string) {\n        bytes memory bytesString = new bytes(32);\n        uint charCount = 0;\n        for (uint j = 0; j < 32; j++) {\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n            if (char != 0) {\n                bytesString[charCount] = char;\n                charCount++;\n            }\n        }\n        bytes memory bytesStringTrimmed = new bytes(charCount);\n        for (j = 0; j < charCount; j++) {\n            bytesStringTrimmed[j] = bytesString[j];\n        }\n        return string(bytesStringTrimmed);\n    }\n}\n\n\n/* Controls state and access rights for contract functions\n * @title Operational Control\n * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n * Inspired and adapted from contract created by OpenZeppelin\n * Ref: https://github.com/OpenZeppelin/zeppelin-solidity/\n */\ncontract OperationalControl {\n    // Facilitates access & control for the game.\n    // Roles:\n    //  -The Managers (Primary/Secondary): Has universal control of all elements (No ability to withdraw)\n    //  -The Banker: The Bank can withdraw funds and adjust fees / prices.\n    //  -otherManagers: Contracts that need access to functions for gameplay\n\n    /// @dev Emited when contract is upgraded\n    event ContractUpgrade(address newContract);\n\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n    address public managerPrimary;\n    address public managerSecondary;\n    address public bankManager;\n\n    // Contracts that require access for gameplay\n    mapping(address => uint8) public otherManagers;\n\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n    bool public paused = false;\n\n    // @dev Keeps track whether the contract erroredOut. When that is true, most actions are blocked & refund can be claimed\n    bool public error = false;\n\n    /// @dev Operation modifiers for limiting access\n    modifier onlyManager() {\n        require(msg.sender == managerPrimary || msg.sender == managerSecondary);\n        _;\n    }\n\n    modifier onlyBanker() {\n        require(msg.sender == bankManager);\n        _;\n    }\n\n    modifier onlyOtherManagers() {\n        require(otherManagers[msg.sender] == 1);\n        _;\n    }\n\n\n    modifier anyOperator() {\n        require(\n            msg.sender == managerPrimary ||\n            msg.sender == managerSecondary ||\n            msg.sender == bankManager ||\n            otherManagers[msg.sender] == 1\n        );\n        _;\n    }\n\n    /// @dev Assigns a new address to act as the Other Manager. (State = 1 is active, 0 is disabled)\n    function setOtherManager(address _newOp, uint8 _state) external onlyManager {\n        require(_newOp != address(0));\n\n        otherManagers[_newOp] = _state;\n    }\n\n    /// @dev Assigns a new address to act as the Primary Manager.\n    function setPrimaryManager(address _newGM) external onlyManager {\n        require(_newGM != address(0));\n\n        managerPrimary = _newGM;\n    }\n\n    /// @dev Assigns a new address to act as the Secondary Manager.\n    function setSecondaryManager(address _newGM) external onlyManager {\n        require(_newGM != address(0));\n\n        managerSecondary = _newGM;\n    }\n\n    /// @dev Assigns a new address to act as the Banker.\n    function setBanker(address _newBK) external onlyManager {\n        require(_newBK != address(0));\n\n        bankManager = _newBK;\n    }\n\n    /*** Pausable functionality adapted from OpenZeppelin ***/\n\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /// @dev Modifier to allow actions only when the contract IS paused\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /// @dev Modifier to allow actions only when the contract has Error\n    modifier whenError {\n        require(error);\n        _;\n    }\n\n    /// @dev Called by any Operator role to pause the contract.\n    /// Used only if a bug or exploit is discovered (Here to limit losses / damage)\n    function pause() external onlyManager whenNotPaused {\n        paused = true;\n    }\n\n    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n    /// @notice This is public rather than external so it can be called by derived contracts. \n    function unpause() public onlyManager whenPaused {\n        // can't unpause if contract was upgraded\n        paused = false;\n    }\n\n    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n    /// @notice This is public rather than external so it can be called by derived contracts. \n    function hasError() public onlyManager whenPaused {\n        error = true;\n    }\n\n    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n    /// @notice This is public rather than external so it can be called by derived contracts. \n    function noError() public onlyManager whenPaused {\n        error = false;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title ERC827 interface, an extension of ERC20 token standard\n *\n * @dev Interface of a ERC827 token, following the ERC20 standard with extra\n * @dev methods to transfer value and data and execute calls in transfers and\n * @dev approvals.\n */\ncontract ERC827 is ERC20 {\n  function approveAndCall( address _spender, uint256 _value, bytes _data) public payable returns (bool);\n  function transferAndCall( address _to, uint256 _value, bytes _data) public payable returns (bool);\n  function transferFromAndCall(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    payable\n    returns (bool);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/* solium-disable security/no-low-level-calls */\n/**\n * @title ERC827, an extension of ERC20 token standard\n *\n * @dev Implementation the ERC827, following the ERC20 standard with extra\n * @dev methods to transfer value and data and execute calls in transfers and\n * @dev approvals.\n *\n * @dev Uses OpenZeppelin StandardToken.\n */\ncontract ERC827Token is ERC827, StandardToken {\n\n  /**\n   * @dev Addition to ERC20 token methods. It allows to\n   * @dev approve the transfer of value and execute a call with the sent data.\n   *\n   * @dev Beware that changing an allowance with this method brings the risk that\n   * @dev someone may use both the old and the new allowance by unfortunate\n   * @dev transaction ordering. One possible solution to mitigate this race condition\n   * @dev is to first reduce the spender's allowance to 0 and set the desired value\n   * @dev afterwards:\n   * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * @param _spender The address that will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   * @param _data ABI-encoded contract call to call `_to` address.\n   *\n   * @return true if the call function was executed successfully\n   */\n  function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool) {\n    require(_spender != address(this));\n\n    super.approve(_spender, _value);\n\n    // solium-disable-next-line security/no-call-value\n    require(_spender.call.value(msg.value)(_data));\n\n    return true;\n  }\n\n  /**\n   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n   * @dev address and execute a call with the sent data on the same transaction\n   *\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   * @param _data ABI-encoded contract call to call `_to` address.\n   *\n   * @return true if the call function was executed successfully\n   */\n  function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool) {\n    require(_to != address(this));\n\n    super.transfer(_to, _value);\n\n    // solium-disable-next-line security/no-call-value\n    require(_to.call.value(msg.value)(_data));\n    return true;\n  }\n\n  /**\n   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n   * @dev another and make a contract call on the same transaction\n   *\n   * @param _from The address which you want to send tokens from\n   * @param _to The address which you want to transfer to\n   * @param _value The amout of tokens to be transferred\n   * @param _data ABI-encoded contract call to call `_to` address.\n   *\n   * @return true if the call function was executed successfully\n   */\n  function transferFromAndCall(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    public payable returns (bool)\n  {\n    require(_to != address(this));\n\n    super.transferFrom(_from, _to, _value);\n\n    // solium-disable-next-line security/no-call-value\n    require(_to.call.value(msg.value)(_data));\n    return true;\n  }\n\n  /**\n   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n   * @dev an owner allowed to a spender and execute a call with the sent data.\n   *\n   * @dev approve should be called when allowed[_spender] == 0. To increment\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n   * @dev the first transaction is mined)\n   * @dev From MonolithDAO Token.sol\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   */\n  function increaseApprovalAndCall(address _spender, uint _addedValue, bytes _data) public payable returns (bool) {\n    require(_spender != address(this));\n\n    super.increaseApproval(_spender, _addedValue);\n\n    // solium-disable-next-line security/no-call-value\n    require(_spender.call.value(msg.value)(_data));\n\n    return true;\n  }\n\n  /**\n   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n   * @dev an owner allowed to a spender and execute a call with the sent data.\n   *\n   * @dev approve should be called when allowed[_spender] == 0. To decrement\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n   * @dev the first transaction is mined)\n   * @dev From MonolithDAO Token.sol\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   */\n  function decreaseApprovalAndCall(address _spender, uint _subtractedValue, bytes _data) public payable returns (bool) {\n    require(_spender != address(this));\n\n    super.decreaseApproval(_spender, _subtractedValue);\n\n    // solium-disable-next-line security/no-call-value\n    require(_spender.call.value(msg.value)(_data));\n\n    return true;\n  }\n\n}\n\n\n /**\n * @title Mintable token\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract CSCResource is ERC827Token, OperationalControl {\n\n  event Burn(address indexed burner, uint256 value);\n  event Mint(address indexed to, uint256 amount);\n\n  // Token Name\n  string public NAME;\n\n  // Token Symbol\n  string public SYMBOL;\n\n  // Token decimals\n  uint public constant DECIMALS = 0;\n\n  /**\n   * Construct the token.\n   *\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n   *\n   */\n  function CSCResource(string _name, string _symbol, uint _initialSupply) public {\n\n    // Create any address, can be transferred\n    managerPrimary = msg.sender;\n    managerSecondary = msg.sender;\n    bankManager = msg.sender;\n\n    NAME = _name;\n    SYMBOL = _symbol;\n    \n    // Create initial supply\n    totalSupply_ = totalSupply_.add(_initialSupply);\n    balances[msg.sender] = balances[msg.sender].add(_initialSupply);\n\n    emit Mint(msg.sender, _initialSupply);\n    emit Transfer(address(0), msg.sender, _initialSupply);\n\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }  \n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n    function mint(address _to, uint256 _amount)  public anyOperator returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n}\n\ncontract CSCResourceFactory is OperationalControl, StringHelpers {\n\n    event CSCResourceCreated(string resourceContract, address contractAddress, uint256 amount); \n\n    mapping(uint16 => address) public resourceIdToAddress; \n    mapping(bytes32 => address) public resourceNameToAddress; \n    mapping(uint16 => bytes32) public resourceIdToName; \n\n    uint16 resourceTypeCount;\n\n    function CSCResourceFactory() public {\n        managerPrimary = msg.sender;\n        managerSecondary = msg.sender;\n        bankManager = msg.sender;\n\n    }\n\n    function createNewCSCResource(string _name, string _symbol, uint _initialSupply) public anyOperator {\n\n        require(resourceNameToAddress[stringToBytes32(_name)] == 0x0);\n\n        address resourceContract = new CSCResource(_name, _symbol, _initialSupply);\n\n        \n        resourceIdToAddress[resourceTypeCount] = resourceContract;\n        resourceNameToAddress[stringToBytes32(_name)] = resourceContract;\n        resourceIdToName[resourceTypeCount] = stringToBytes32(_name);\n        \n        emit CSCResourceCreated(_name, resourceContract, _initialSupply);\n\n        //Inc. for next resource\n        resourceTypeCount += 1;\n\n    }\n\n    function setResourcesPrimaryManager(address _op) public onlyManager {\n        \n        require(_op != address(0));\n\n        uint16 totalResources = getResourceCount();\n\n        for(uint16 i = 0; i < totalResources; i++) {\n            CSCResource resContract = CSCResource(resourceIdToAddress[i]);\n            resContract.setPrimaryManager(_op);\n        }\n\n    }\n\n    function setResourcesSecondaryManager(address _op) public onlyManager {\n\n        require(_op != address(0));\n\n        uint16 totalResources = getResourceCount();\n\n        for(uint16 i = 0; i < totalResources; i++) {\n            CSCResource resContract = CSCResource(resourceIdToAddress[i]);\n            resContract.setSecondaryManager(_op);\n        }\n\n    }\n\n    function setResourcesBanker(address _op) public onlyManager {\n\n        require(_op != address(0));\n\n        uint16 totalResources = getResourceCount();\n\n        for(uint16 i = 0; i < totalResources; i++) {\n            CSCResource resContract = CSCResource(resourceIdToAddress[i]);\n            resContract.setBanker(_op);\n        }\n\n    }\n\n    function setResourcesOtherManager(address _op, uint8 _state) public anyOperator {\n\n        require(_op != address(0));\n\n        uint16 totalResources = getResourceCount();\n\n        for(uint16 i = 0; i < totalResources; i++) {\n            CSCResource resContract = CSCResource(resourceIdToAddress[i]);\n            resContract.setOtherManager(_op, _state);\n        }\n\n    }\n\n    function withdrawFactoryResourceBalance(uint16 _resId) public onlyBanker {\n\n        require(resourceIdToAddress[_resId] != 0);\n\n        CSCResource resContract = CSCResource(resourceIdToAddress[_resId]);\n        uint256 resBalance = resContract.balanceOf(this);\n        resContract.transfer(bankManager, resBalance);\n\n    }\n\n    function transferFactoryResourceAmount(uint16 _resId, address _to, uint256 _amount) public onlyBanker {\n\n        require(resourceIdToAddress[_resId] != 0);\n        require(_to != address(0));\n\n        CSCResource resContract = CSCResource(resourceIdToAddress[_resId]);\n        uint256 resBalance = resContract.balanceOf(this);\n        require(resBalance >= _amount);\n\n        resContract.transfer(_to, _amount);\n    }\n\n    function mintResource(uint16 _resId, uint256 _amount) public onlyBanker {\n\n        require(resourceIdToAddress[_resId] != 0);\n        CSCResource resContract = CSCResource(resourceIdToAddress[_resId]);\n        resContract.mint(this, _amount);\n    }\n\n    function burnResource(uint16 _resId, uint256 _amount) public onlyBanker {\n\n        require(resourceIdToAddress[_resId] != 0);\n        CSCResource resContract = CSCResource(resourceIdToAddress[_resId]);\n        resContract.burn(_amount);\n    }\n\n    function getResourceName(uint16 _resId) public view returns (bytes32 name) {\n        return resourceIdToName[_resId];\n    }\n\n    function getResourceCount() public view returns (uint16 resourceTotal) {\n        return resourceTypeCount;\n    }\n\n    function getResourceBalance(uint16 _resId, address _wallet) public view returns (uint256 amt) {\n\n        require(resourceIdToAddress[_resId] != 0);\n\n        CSCResource resContract = CSCResource(resourceIdToAddress[_resId]);\n        return resContract.balanceOf(_wallet);\n\n    }\n\n    /**\n    * @dev helps in fetching the wallet resouce balance\n    * @param _wallet The wallet address\n    */\n    function getWalletResourceBalance(address _wallet) external view returns(uint256[] resourceBalance){\n        require(_wallet != address(0));\n        \n        uint16 totalResources = getResourceCount();\n        \n        uint256[] memory result = new uint256[](totalResources);\n        \n        for(uint16 i = 0; i < totalResources; i++) {\n            CSCResource resContract = CSCResource(resourceIdToAddress[i]);\n            result[i] = resContract.balanceOf(_wallet);\n        }\n        \n        return result;\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"otherManagers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGM\",\"type\":\"address\"}],\"name\":\"setSecondaryManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"noError\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"increaseApprovalAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"hasError\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managerPrimary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOp\",\"type\":\"address\"},{\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setOtherManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGM\",\"type\":\"address\"}],\"name\":\"setPrimaryManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"error\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"decreaseApprovalAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managerSecondary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBK\",\"type\":\"address\"}],\"name\":\"setBanker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000026bf961000000000000000000000000000000000000000000000000000000000000000449726f6e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064353432d49520000000000000000000000000000000000000000000000000000"
}