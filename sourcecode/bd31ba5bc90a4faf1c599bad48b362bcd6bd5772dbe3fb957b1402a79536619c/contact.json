{
  "address": "0x8227d745273c29bd3179611df37e84e6cf068bee",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BitherPlatformCrowdsale",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-11\n*/\n\npragma solidity 0.5.3;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter);\n    }\n}\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n * behavior.\n */\ncontract Crowdsale is ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // The token being sold\n    IERC20 private _token;\n\n    // Address where funds are collected\n    address payable private _wallet;\n\n    // How many token units a buyer gets per wei.\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n    // 1 wei will give you 1 unit, or 0.001 TOK.\n    uint256 private _rate;\n\n    // Amount of wei raised\n    uint256 private _weiRaised;\n\n    /**\n     * Event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    /**\n     * @param rate Number of token units a buyer gets per wei\n     * @dev The rate is the conversion between wei and the smallest and indivisible\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n     * @param wallet Address where collected funds will be forwarded to\n     * @param token Address of the token being sold\n     */\n    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n        require(rate > 0);\n        require(wallet != address(0));\n        require(address(token) != address(0));\n\n        _rate = rate;\n        _wallet = wallet;\n        _token = token;\n    }\n\n    /**\n     * @dev fallback function ***DO NOT OVERRIDE***\n     * Note that other contracts will transfer fund with a base gas stipend\n     * of 2300, which is not enough to call buyTokens. Consider calling\n     * buyTokens directly when purchasing tokens from a contract.\n     */\n    function () external payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n     * @return the token being sold.\n     */\n    function token() public view returns (IERC20) {\n        return _token;\n    }\n\n    /**\n     * @return the address where funds are collected.\n     */\n    function wallet() public view returns (address payable) {\n        return _wallet;\n    }\n\n    /**\n     * @return the number of token units a buyer gets per wei.\n     */\n    function rate() public view returns (uint256) {\n        return _rate;\n    }\n\n    /**\n     * @return the amount of wei raised.\n     */\n    function weiRaised() public view returns (uint256) {\n        return _weiRaised;\n    }\n\n    /**\n     * @dev low level token purchase ***DO NOT OVERRIDE***\n     * This function has a non-reentrancy guard, so it shouldn't be called by\n     * another `nonReentrant` function.\n     * @param beneficiary Recipient of the token purchase\n     */\n    function buyTokens(address beneficiary) public nonReentrant payable {\n        uint256 weiAmount = msg.value;\n        _preValidatePurchase(beneficiary, weiAmount);\n\n        // calculate token amount to be created\n        uint256 tokens = _getTokenAmount(weiAmount);\n\n        // update state\n        _weiRaised = _weiRaised.add(weiAmount);\n\n        _processPurchase(beneficiary, tokens);\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\n\n        _updatePurchasingState(beneficiary, weiAmount);\n\n        _forwardFunds();\n        _postValidatePurchase(beneficiary, weiAmount);\n    }\n\n    /**\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n     *     super._preValidatePurchase(beneficiary, weiAmount);\n     *     require(weiRaised().add(weiAmount) <= cap);\n     * @param beneficiary Address performing the token purchase\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n        require(beneficiary != address(0));\n        require(weiAmount != 0);\n    }\n\n    /**\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\n     * conditions are not met.\n     * @param beneficiary Address performing the token purchase\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\n     * its tokens.\n     * @param beneficiary Address performing the token purchase\n     * @param tokenAmount Number of tokens to be emitted\n     */\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n        _token.safeTransfer(beneficiary, tokenAmount);\n    }\n\n    /**\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\n     * tokens.\n     * @param beneficiary Address receiving the tokens\n     * @param tokenAmount Number of tokens to be purchased\n     */\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n        _deliverTokens(beneficiary, tokenAmount);\n    }\n\n    /**\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\n     * etc.)\n     * @param beneficiary Address receiving the tokens\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev Override to extend the way in which ether is converted to tokens.\n     * @param weiAmount Value in wei to be converted into tokens\n     * @return Number of tokens that can be purchased with the specified _weiAmount\n     */\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n        return weiAmount.mul(_rate);\n    }\n\n    /**\n     * @dev Determines how ETH is stored/forwarded on purchases.\n     */\n    function _forwardFunds() internal {\n        _wallet.transfer(msg.value);\n    }\n}\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract TimedCrowdsale is Crowdsale {\n    using SafeMath for uint256;\n\n    uint256 private _openingTime;\n    uint256 private _closingTime;\n\n    /**\n     * @dev Reverts if not in crowdsale time range.\n     */\n    modifier onlyWhileOpen {\n        require(isOpen());\n        _;\n    }\n\n    /**\n     * @dev Constructor, takes crowdsale opening and closing times.\n     * @param openingTime Crowdsale opening time\n     * @param closingTime Crowdsale closing time\n     */\n    constructor (uint256 openingTime, uint256 closingTime) public {\n        // solhint-disable-next-line not-rely-on-time\n        require(openingTime >= block.timestamp);\n        require(closingTime > openingTime);\n\n        _openingTime = openingTime;\n        _closingTime = closingTime;\n    }\n\n    /**\n     * @return the crowdsale opening time.\n     */\n    function openingTime() public view returns (uint256) {\n        return _openingTime;\n    }\n\n    /**\n     * @return the crowdsale closing time.\n     */\n    function closingTime() public view returns (uint256) {\n        return _closingTime;\n    }\n\n    /**\n     * @return true if the crowdsale is open, false otherwise.\n     */\n    function isOpen() public view returns (bool) {\n        // solhint-disable-next-line not-rely-on-time\n        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n    }\n\n    /**\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n     * @return Whether crowdsale period has elapsed\n     */\n    function hasClosed() public view returns (bool) {\n        // solhint-disable-next-line not-rely-on-time\n        return block.timestamp > _closingTime;\n    }\n\n    /**\n     * @dev Extend parent behavior requiring to be within contributing period\n     * @param beneficiary Token purchaser\n     * @param weiAmount Amount of wei contributed\n     */\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\n        super._preValidatePurchase(beneficiary, weiAmount);\n    }\n}\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n    /**\n    * @dev Returns the largest of two numbers.\n    */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n    * @dev Returns the smallest of two numbers.\n    */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n    * @dev Calculates the average of two numbers. Since these are integers,\n    * averages of an even and odd number cannot be represented, and will be\n    * rounded down.\n    */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n/**\n * @title AllowanceCrowdsale\n * @dev Extension of Crowdsale where tokens are held by a wallet, which approves an allowance to the crowdsale.\n */\ncontract AllowanceCrowdsale is Crowdsale {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address private _tokenWallet;\n\n    /**\n     * @dev Constructor, takes token wallet address.\n     * @param tokenWallet Address holding the tokens, which has approved allowance to the crowdsale\n     */\n    constructor (address tokenWallet) public {\n        require(tokenWallet != address(0));\n        _tokenWallet = tokenWallet;\n    }\n\n    /**\n     * @return the address of the wallet that will hold the tokens.\n     */\n    function tokenWallet() public view returns (address) {\n        return _tokenWallet;\n    }\n\n    /**\n     * @dev Checks the amount of tokens left in the allowance.\n     * @return Amount of tokens left in the allowance\n     */\n    function remainingTokens() public view returns (uint256) {\n        return Math.min(token().balanceOf(_tokenWallet), token().allowance(_tokenWallet, address(this)));\n    }\n\n    /**\n     * @dev Overrides parent behavior by transferring tokens from wallet.\n     * @param beneficiary Token purchaser\n     * @param tokenAmount Amount of tokens purchased\n     */\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n        token().safeTransferFrom(_tokenWallet, beneficiary, tokenAmount);\n    }\n}\n\n/**\n * @title CappedCrowdsale\n * @dev Crowdsale with a limit for total contributions.\n */\ncontract CappedCrowdsale is Crowdsale {\n    using SafeMath for uint256;\n\n    uint256 private _cap;\n\n    /**\n     * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n     * @param cap Max amount of wei to be contributed\n     */\n    constructor (uint256 cap) public {\n        require(cap > 0);\n        _cap = cap;\n    }\n\n    /**\n     * @return the cap of the crowdsale.\n     */\n    function cap() public view returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev Checks whether the cap has been reached.\n     * @return Whether the cap was reached\n     */\n    function capReached() public view returns (bool) {\n        return weiRaised() >= _cap;\n    }\n\n    /**\n     * @dev Extend parent behavior requiring purchase to respect the funding cap.\n     * @param beneficiary Token purchaser\n     * @param weiAmount Amount of wei contributed\n     */\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n        super._preValidatePurchase(beneficiary, weiAmount);\n        require(weiRaised().add(weiAmount) <= _cap);\n    }\n}\n\n/**\n * @title BitherPlatformCrowdsale\n * @dev BitherCrowdsale contract uses multiple openzeppelin base contracts and adds some custom behaviour.\n *      The openzeppelin base contracts have been audited and are widely used by the community. They can\n *      be trusted to have almost zero security vulnerabilities and therefore do not need to be tested.\n *      The BitherCrowdale enables the purchasing of 2 tokens, the BitherToken (BTR) and RentalProcessorToken (BRP) \n *      at rates determined by the current block time. It specifies a cap of Ether that can be contributed\n *      and a length of time the crowdsale lasts. It requires the crowdsale contract address be given\n *      an allowance of 33000000 BTR and 420000000 BRP enabling it to distribute the purchased tokens. These\n *      values are determined by the cap of 300000 ETH and the phased distribution rates.\n */\ncontract BitherPlatformCrowdsale is AllowanceCrowdsale, TimedCrowdsale, CappedCrowdsale {\n\n    uint256 constant private CAP_IN_WEI = 300000 ether;\n\n    uint256 constant private BTR_PRIVATE_SALE_RATE = 110;\n    uint256 constant private BTR_PRESALE_RATE_DAY_1 = 110;\n    uint256 constant private BTR_PRESALE_RATE_DAY_2_TO_5 = 109;\n    uint256 constant private BTR_PRESALE_RATE_DAY_6_TO_9 = 108;\n    uint256 constant private BTR_PRESALE_RATE_DAY_10_TO_13 = 107;\n\n    uint256 constant private BTR_CROWDSALE_ROUND1_RATE_DAY_1_FIRST_2_HOURS = 110;\n    uint256 constant private BTR_CROWDSALE_ROUND1_RATE_DAY_1_TO_14 = 107;\n    uint256 constant private BTR_CROWDSALE_ROUND1_RATE_DAY_15_TO_28 = 106;\n\n    uint256 constant private BTR_CROWDSALE_ROUND2_RATE_DAY_1_FIRST_2_HOURS = 110;\n    uint256 constant private BTR_CROWDSALE_ROUND2_RATE_DAY_1_TO_7 = 106;\n    uint256 constant private BTR_CROWDSALE_ROUND2_RATE_DAY_8_TO_14 = 104;\n    uint256 constant private BTR_CROWDSALE_ROUND2_RATE_DAY_15_TO_21 = 102;\n    uint256 constant private BTR_CROWDSALE_ROUND2_RATE_DAY_22_TO_28 = 100;\n\n    uint256 constant private BRP_PRIVATE_SALE_RATE = 1400;\n    uint256 constant private BRP_PRESALE_RATE_FIRST_2_HOURS = 1400;\n    uint256 constant private BRP_PRESALE_RATE_DAY_1_TO_5 = 1380;\n    uint256 constant private BRP_PRESALE_RATE_DAY_6_TO_13 = 1360;\n\n    uint256 constant private BRP_CROWDSALE_ROUND1_RATE_DAY_1_TO_7 = 1340;\n    uint256 constant private BRP_CROWDSALE_ROUND1_RATE_DAY_8_TO_21 = 1320;\n    uint256 constant private BRP_CROWDSALE_ROUND1_RATE_DAY_22_TO_28 = 1300;\n\n    uint256 constant private BRP_CROWDSALE_ROUND2_RATE_DAY_1_TO_7 = 1240;\n    uint256 constant private BRP_CROWDSALE_ROUND2_RATE_DAY_8_TO_14 = 1160;\n    uint256 constant private BRP_CROWDSALE_ROUND2_RATE_DAY_15_TO_21 = 1080;\n    uint256 constant private BRP_CROWDSALE_ROUND2_RATE_DAY_22_TO_28 = 1000;\n\n    IERC20 private _rentalProcessorToken;\n    uint256 private _privateSaleClosingTime; // Friday, March 22, 2019 12:00:00 AM (1553212800)\n    uint256 private _presaleOpeningTime; // Saturday, March 23, 2019 2:00:00 PM (1553349600)\n    uint256 private _crowdsaleRound1OpeningTime; // Saturday, April 20, 2019 2:00:00 PM (1555768800)\n    uint256 private _crowdsaleRound2OpeningTime; // Saturday, June 1, 2019 2:00:00 PM (1559397600)\n\n    /**\n     * Event for BRP token purchase logging\n     * @param purchaser Who paid for the tokens\n     * @param beneficiary Who got the tokens\n     * @param value Wei paid for purchase\n     * @param amount Amount of tokens purchased\n     */\n    event RentalProcessorTokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    /**\n     * @dev Constructor, calls the inherited classes constructors, stores RentalProcessorToken and determines crowdsale times\n     * @param bitherToken The BitherToken address, must be an ERC20 contract\n     * @param rentalProcessorToken The RentalProcessorToken, must be an ERC20 contract\n     * @param bitherTokensOwner Address holding the tokens, which has approved allowance to the crowdsale\n     * @param etherBenefactor Address that will receive the deposited Ether\n     * @param preSaleOpeningTime The presale opening time, in seconds, all other times are determined using this to reduce risk of error\n     */\n    constructor(IERC20 bitherToken, IERC20 rentalProcessorToken, address bitherTokensOwner, address payable etherBenefactor, uint256 preSaleOpeningTime)\n        Crowdsale(BTR_PRIVATE_SALE_RATE, etherBenefactor, bitherToken)\n        AllowanceCrowdsale(bitherTokensOwner)\n        TimedCrowdsale(now, preSaleOpeningTime + 14 weeks)\n        CappedCrowdsale(CAP_IN_WEI)\n        public\n    {\n        _rentalProcessorToken = rentalProcessorToken;\n\n        _privateSaleClosingTime = preSaleOpeningTime - 38 hours;\n        _presaleOpeningTime = preSaleOpeningTime;\n        _crowdsaleRound1OpeningTime = preSaleOpeningTime + 4 weeks;\n        _crowdsaleRound2OpeningTime = preSaleOpeningTime + 10 weeks;\n    }\n\n    /**\n     * @dev Overrides function in the Crowdsale contract to revert contributions less then\n     *      50 Eth during the first period and less than 0.1 Eth during the rest of the crowdsale\n     * @param beneficiary Address performing the token purchase\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n        super._preValidatePurchase(beneficiary, weiAmount);\n\n        if (now < _privateSaleClosingTime) {\n            require(weiAmount >= 50 ether, \"Not enough Eth. Contributions must be 50 Eth minimum during the private sale\");\n        } else {\n            require(weiAmount >= 100 finney, \"Not enough Eth. Contributions must be 0.1 Eth minimum during the presale and crowdsale (Round 1 and Round 2)\");\n        }\n\n        if (now > _privateSaleClosingTime && now < _presaleOpeningTime) {\n            revert(\"Private sale has ended and the presale is yet to begin\");\n        } else if (now > _presaleOpeningTime + 13 days && now < _crowdsaleRound1OpeningTime) {\n            revert(\"Presale has ended and the crowdsale (Round 1) is yet to begin\");\n        } else if (now > _crowdsaleRound1OpeningTime + 4 weeks && now < _crowdsaleRound2OpeningTime) {\n            revert(\"crowdsale (Round 1) has ended and the crowdsale (Round 2) is yet to begin\");\n        }\n    }\n\n    /**\n     * @dev Overrides function in the Crowdsale contract to enable a custom phased distribution\n     * @param weiAmount Value in wei to be converted into tokens\n     * @return Number of tokens that can be purchased with the specified weiAmount\n     */\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n\n        if (now < _privateSaleClosingTime) {\n            return weiAmount.mul(BTR_PRIVATE_SALE_RATE);\n        } else if (now < _presaleOpeningTime + 1 days) {\n            return weiAmount.mul(BTR_PRESALE_RATE_DAY_1);\n        } else if (now < _presaleOpeningTime + 5 days) {\n            return weiAmount.mul(BTR_PRESALE_RATE_DAY_2_TO_5);\n        } else if (now < _presaleOpeningTime + 9 days) {\n            return weiAmount.mul(BTR_PRESALE_RATE_DAY_6_TO_9);\n        } else if (now < _presaleOpeningTime + 13 days) {\n            return weiAmount.mul(BTR_PRESALE_RATE_DAY_10_TO_13);\n\n        } else if (now < _crowdsaleRound1OpeningTime + 2 hours) {\n            return weiAmount.mul(BTR_CROWDSALE_ROUND1_RATE_DAY_1_FIRST_2_HOURS);\n        } else if (now < _crowdsaleRound1OpeningTime + 2 weeks) {\n            return weiAmount.mul(BTR_CROWDSALE_ROUND1_RATE_DAY_1_TO_14);\n        } else if (now < _crowdsaleRound1OpeningTime + 4 weeks) {\n            return weiAmount.mul(BTR_CROWDSALE_ROUND1_RATE_DAY_15_TO_28);\n\n        } else if (now < _crowdsaleRound2OpeningTime + 2 hours) {\n            return weiAmount.mul(BTR_CROWDSALE_ROUND2_RATE_DAY_1_FIRST_2_HOURS);\n        } else if (now < _crowdsaleRound2OpeningTime + 1 weeks) {\n            return weiAmount.mul(BTR_CROWDSALE_ROUND2_RATE_DAY_1_TO_7);\n        } else if (now < _crowdsaleRound2OpeningTime + 2 weeks) {\n            return weiAmount.mul(BTR_CROWDSALE_ROUND2_RATE_DAY_8_TO_14);\n        } else if (now < _crowdsaleRound2OpeningTime + 3 weeks) {\n            return weiAmount.mul(BTR_CROWDSALE_ROUND2_RATE_DAY_15_TO_21);\n        } else if (now < closingTime()) {\n            return weiAmount.mul(BTR_CROWDSALE_ROUND2_RATE_DAY_22_TO_28);\n        }\n    }\n\n    /**\n     * @dev Overrides function in AllowanceCrowdsale contract (therefore also overrides function\n     *      in Crowdsale contract) to add functionality for distribution of a second token, BRP.\n     * @param beneficiary Token purchaser\n     * @param tokenAmount Amount of tokens purchased\n     */\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n        super._deliverTokens(beneficiary, tokenAmount);\n\n        uint256 weiAmount = msg.value;\n        uint256 brpTokenAmount = getBrpTokenAmount(weiAmount);\n\n        _rentalProcessorToken.safeTransferFrom(tokenWallet(), beneficiary, brpTokenAmount);\n\n        emit RentalProcessorTokensPurchased(msg.sender, beneficiary, weiAmount, brpTokenAmount);\n    }\n\n    /**\n     * @dev Determines distribution of BRP depending on the time of the transaction\n     * @param weiAmount Value in wei to be converted into tokens\n     * @return Number of tokens that can be purchased with the specified weiAmount\n     */\n    function getBrpTokenAmount(uint256 weiAmount) private view returns (uint256) {\n\n        if (now < _privateSaleClosingTime) {\n            return weiAmount.mul(BRP_PRIVATE_SALE_RATE);\n\n        } else if (now < _presaleOpeningTime + 2 hours) {\n            return weiAmount.mul(BRP_PRESALE_RATE_FIRST_2_HOURS);\n        } else if (now < _presaleOpeningTime + 5 days) {\n            return weiAmount.mul(BRP_PRESALE_RATE_DAY_1_TO_5);\n        } else if (now < _presaleOpeningTime + 13 days) {\n            return weiAmount.mul(BRP_PRESALE_RATE_DAY_6_TO_13);\n\n        } else if (now < _crowdsaleRound1OpeningTime + 1 weeks) {\n            return weiAmount.mul(BRP_CROWDSALE_ROUND1_RATE_DAY_1_TO_7);\n        } else if (now < _crowdsaleRound1OpeningTime + 3 weeks) {\n            return weiAmount.mul(BRP_CROWDSALE_ROUND1_RATE_DAY_8_TO_21);\n        } else if (now <= _crowdsaleRound1OpeningTime + 4 weeks) {\n            return weiAmount.mul(BRP_CROWDSALE_ROUND1_RATE_DAY_22_TO_28);\n        \n        } else if (now < _crowdsaleRound2OpeningTime + 1 weeks) {\n            return weiAmount.mul(BRP_CROWDSALE_ROUND2_RATE_DAY_1_TO_7);\n        } else if (now < _crowdsaleRound2OpeningTime + 2 weeks) {\n            return weiAmount.mul(BRP_CROWDSALE_ROUND2_RATE_DAY_8_TO_14);\n        } else if (now < _crowdsaleRound2OpeningTime + 3 weeks) {\n            return weiAmount.mul(BRP_CROWDSALE_ROUND2_RATE_DAY_15_TO_21);\n        } else if (now <= closingTime()) {\n            return weiAmount.mul(BRP_CROWDSALE_ROUND2_RATE_DAY_22_TO_28);\n        }\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160a080611688833981018060405260a081101561003057600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050693f870857a3e0e38000004262813300830185606e868a600160008190555060008311151561009757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156100d357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561010f57600080fd5b8260038190555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156101d757600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505042821015151561022857600080fd5b818111151561023657600080fd5b8160068190555080600781905550505060008111151561025557600080fd5b806008819055505083600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620216608103600a8190555080600b819055506224ea008101600c81905550625c49008101600d8190555050505050506113ab806102dd6000396000f3fe6080604052600436106100df576000357c0100000000000000000000000000000000000000000000000000000000900480634f9359451161009c578063bf58390311610076578063bf583903146102a5578063bff99c6c146102d0578063ec8ac4d814610327578063fc0c546a1461036b576100df565b80634f935945146101f4578063521eb27314610223578063b7a8807c1461027a576100df565b80631515bc2b146100ea5780632c4e722e14610119578063355274ea146101445780634042b66f1461016f57806347535d7b1461019a5780634b6753bc146101c9575b6100e8336103c2565b005b3480156100f657600080fd5b506100ff6104b8565b604051808215151515815260200191505060405180910390f35b34801561012557600080fd5b5061012e6104c4565b6040518082815260200191505060405180910390f35b34801561015057600080fd5b506101596104ce565b6040518082815260200191505060405180910390f35b34801561017b57600080fd5b506101846104d8565b6040518082815260200191505060405180910390f35b3480156101a657600080fd5b506101af6104e2565b604051808215151515815260200191505060405180910390f35b3480156101d557600080fd5b506101de6104fd565b6040518082815260200191505060405180910390f35b34801561020057600080fd5b50610209610507565b604051808215151515815260200191505060405180910390f35b34801561022f57600080fd5b5061023861051b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561028657600080fd5b5061028f610545565b6040518082815260200191505060405180910390f35b3480156102b157600080fd5b506102ba61054f565b6040518082815260200191505060405180910390f35b3480156102dc57600080fd5b506102e561078c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103696004803603602081101561033d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103c2565b005b34801561037757600080fd5b506103806107b6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6001600080828254019250508190555060008054905060003490506103e783826107e0565b60006103f282610a07565b905061040982600454610c2a90919063ffffffff16565b6004819055506104198482610c4b565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b8484604051808381526020018281526020019250505060405180910390a36104908483610c59565b610498610c5d565b6104a28483610cc8565b5050600054811415156104b457600080fd5b5050565b60006007544211905090565b6000600354905090565b6000600854905090565b6000600454905090565b600060065442101580156104f857506007544211155b905090565b6000600754905090565b60006008546105146104d8565b1015905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600654905090565b600061078761055c6107b6565b73ffffffffffffffffffffffffffffffffffffffff166370a08231600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561061657600080fd5b505afa15801561062a573d6000803e3d6000fd5b505050506040513d602081101561064057600080fd5b81019080805190602001909291905050506106596107b6565b73ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561074757600080fd5b505afa15801561075b573d6000803e3d6000fd5b505050506040513d602081101561077157600080fd5b8101908080519060200190929190505050610ccc565b905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107ea8282610ce5565b600a5442101561085d576802b5e3af16b18800008110151515610858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604c815260200180611242604c913960600191505060405180910390fd5b6108c1565b67016345785d8a000081101515156108c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252606c815260200180611314606c913960800191505060405180910390fd5b5b600a54421180156108d35750600b5442105b15610929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061120c6036913960400191505060405180910390fd5b62112380600b5401421180156109405750600c5442105b15610996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d81526020018061128e603d913960400191505060405180910390fd5b6224ea00600c5401421180156109ad5750600d5442105b15610a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260498152602001806112cb6049913960600191505060405180910390fd5b5050565b6000600a54421015610a2e57610a27606e83610d1d90919063ffffffff16565b9050610c25565b62015180600b5401421015610a5857610a51606e83610d1d90919063ffffffff16565b9050610c25565b62069780600b5401421015610a8257610a7b606d83610d1d90919063ffffffff16565b9050610c25565b620bdd80600b5401421015610aac57610aa5606c83610d1d90919063ffffffff16565b9050610c25565b62112380600b5401421015610ad657610acf606b83610d1d90919063ffffffff16565b9050610c25565b611c20600c5401421015610aff57610af8606e83610d1d90919063ffffffff16565b9050610c25565b62127500600c5401421015610b2957610b22606b83610d1d90919063ffffffff16565b9050610c25565b6224ea00600c5401421015610b5357610b4c606a83610d1d90919063ffffffff16565b9050610c25565b611c20600d5401421015610b7c57610b75606e83610d1d90919063ffffffff16565b9050610c25565b62093a80600d5401421015610ba657610b9f606a83610d1d90919063ffffffff16565b9050610c25565b62127500600d5401421015610bd057610bc9606883610d1d90919063ffffffff16565b9050610c25565b621baf80600d5401421015610bfa57610bf3606683610d1d90919063ffffffff16565b9050610c25565b610c026104fd565b421015610c2457610c1d606483610d1d90919063ffffffff16565b9050610c25565b5b919050565b6000808284019050838110151515610c4157600080fd5b8091505092915050565b610c558282610d5b565b5050565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610cc5573d6000803e3d6000fd5b50565b5050565b6000818310610cdb5781610cdd565b825b905092915050565b610cef8282610e40565b600854610d0c82610cfe6104d8565b610c2a90919063ffffffff16565b11151515610d1957600080fd5b5050565b600080831415610d305760009050610d55565b60008284029050828482811515610d4357fe5b04141515610d5057600080fd5b809150505b92915050565b610d658282610e61565b60003490506000610d7582610ebb565b9050610dcd610d8261078c565b8583600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611098909392919063ffffffff16565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f83d5b882c32995f2ad9d6e4d33b9642da70de3eeaadac22ffc7805f29b03ebda8484604051808381526020018281526020019250505060405180910390a350505050565b610e486104e2565b1515610e5357600080fd5b610e5d82826111bb565b5050565b610eb7600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168383610e916107b6565b73ffffffffffffffffffffffffffffffffffffffff16611098909392919063ffffffff16565b5050565b6000600a54421015610ee357610edc61057883610d1d90919063ffffffff16565b9050611093565b611c20600b5401421015610f0d57610f0661057883610d1d90919063ffffffff16565b9050611093565b62069780600b5401421015610f3857610f3161056483610d1d90919063ffffffff16565b9050611093565b62112380600b5401421015610f6357610f5c61055083610d1d90919063ffffffff16565b9050611093565b62093a80600c5401421015610f8e57610f8761053c83610d1d90919063ffffffff16565b9050611093565b621baf80600c5401421015610fb957610fb261052883610d1d90919063ffffffff16565b9050611093565b6224ea00600c540142111515610fe557610fde61051483610d1d90919063ffffffff16565b9050611093565b62093a80600d5401421015611010576110096104d883610d1d90919063ffffffff16565b9050611093565b62127500600d540142101561103b5761103461048883610d1d90919063ffffffff16565b9050611093565b621baf80600d54014210156110665761105f61043883610d1d90919063ffffffff16565b9050611093565b61106e6104fd565b421115156110925761108b6103e883610d1d90919063ffffffff16565b9050611093565b5b919050565b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561116f57600080fd5b505af1158015611183573d6000803e3d6000fd5b505050506040513d602081101561119957600080fd5b810190808051906020019092919050505015156111b557600080fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156111f757600080fd5b6000811415151561120757600080fd5b505056fe507269766174652073616c652068617320656e64656420616e64207468652070726573616c652069732079657420746f20626567696e4e6f7420656e6f756768204574682e20436f6e747269627574696f6e73206d75737420626520353020457468206d696e696d756d20647572696e672074686520707269766174652073616c6550726573616c652068617320656e64656420616e64207468652063726f776473616c652028526f756e642031292069732079657420746f20626567696e63726f776473616c652028526f756e642031292068617320656e64656420616e64207468652063726f776473616c652028526f756e642032292069732079657420746f20626567696e4e6f7420656e6f756768204574682e20436f6e747269627574696f6e73206d75737420626520302e3120457468206d696e696d756d20647572696e67207468652070726573616c6520616e642063726f776473616c652028526f756e64203120616e6420526f756e64203229a165627a7a723058206ae3737a6e2be30bd2fa016f8b4c40adb6321058557d1dca75bd98fbccc736a80029000000000000000000000000cbf15fb8246f679f9df0135881cb29a3746f734b000000000000000000000000b22c2786a549b008517b67625f5296e8faf9589e0000000000000000000000008a5254e405fa7d8335bb44d576fefa064c5ca3cc00000000000000000000000053e862eb691e9fd739084e42edc5035a38e40337000000000000000000000000000000000000000000000000000000005c963be0",
  "constructorArguments": "000000000000000000000000cbf15fb8246f679f9df0135881cb29a3746f734b000000000000000000000000b22c2786a549b008517b67625f5296e8faf9589e0000000000000000000000008a5254e405fa7d8335bb44d576fefa064c5ca3cc00000000000000000000000053e862eb691e9fd739084e42edc5035a38e40337000000000000000000000000000000000000000000000000000000005c963be0"
}