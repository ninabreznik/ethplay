{
  "address": "0xa57392548087453dec6106e670bbfb849276b358",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CoreToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-02\n*/\n\npragma solidity ^0.4.19;\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/tokens/AirDropToken.sol\n\ncontract AirDropToken is StandardToken, Ownable {\n\n    function drop(address[] _participants, uint _value) public onlyOwner {\n        require(_participants.length > 0);\n        require(_value > 0);\n\n        uint commonValue = _value * _participants.length;\n\n        require(commonValue <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(commonValue);\n\n        for(uint i = 0; i < _participants.length; i++) {\n            address participant = _participants[i];\n            require(participant != address(0));\n            balances[participant] = balances[participant].add(_value);\n            Transfer(msg.sender, participant, _value);\n        }\n    }\n}\n\n// File: contracts/tokens/TransferCommissionToken.sol\n\ncontract TransferCommissionToken is StandardToken, Ownable  {\n    event FeeCollected(address indexed from, address indexed to, uint256 value);\n    event CommissionUpdated(uint256 newCommission);\n\n    uint constant public MAX_WHITELISTED_COUNT = 5;\n\n    uint constant public PERCENT_DELIMITER = 10 ** 3;\n\n    uint public commission;\n    address public collector;\n    address[] public whitelist;\n\n    function TransferCommissionToken(uint _commission) public {\n        _updateCommission(_commission);\n    }\n\n    function setCollector(address _collector) external onlyOwner {\n        require(_collector != address(0));\n        collector = _collector;\n    }\n\n    function setCommission(uint _commission) external onlyOwner {\n        _updateCommission(_commission);\n    }\n\n    function resetCommission() external onlyOwner {\n        commission = 0;\n        CommissionUpdated(0);\n    }\n\n    function _updateCommission(uint _commission) internal {\n        require(_commission > 0);\n\n        commission = _commission;\n        CommissionUpdated(commission);\n    }\n\n    function setWhitelist(address[] _whitelist) external onlyOwner {\n        require(_whitelist.length > 0);\n        require(_whitelist.length <= MAX_WHITELISTED_COUNT);\n\n        whitelist = _whitelist;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        super.transferFrom(_from, _to, _value);\n        _collectFee(_from, _to, _value);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        super.transfer(_to, _value);\n        _collectFee(msg.sender, _to, _value);\n        return true;\n    }\n\n    function _collectFee(address _from, address _to, uint _value) internal {\n        if(collector == address(0)) return;\n        if(whitelist.length > 0 && (_contains(whitelist, _from) || _contains(whitelist, _to))) return;\n\n        uint feeValue = _value.mul(commission).div(PERCENT_DELIMITER).div(100);\n\n        require(feeValue <= balances[_from]);\n\n        balances[_from] = balances[_from].sub(feeValue);\n        balances[collector] = balances[collector].add(feeValue);\n        FeeCollected(_from, collector, feeValue);\n    }\n\n    function _contains(address[] _list, address _item) internal returns (bool) {\n        for(uint i = 0; i < _list.length; i++){\n            if(_list[i] == _item) return true;\n        }\n\n        return false;\n    }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    Burn(burner, _value);\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n// File: contracts/tokens/CoreToken.sol\n\ncontract CoreToken is DetailedERC20, TransferCommissionToken, AirDropToken, MintableToken, BurnableToken {\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    function CoreToken(uint _commission, string _name, string _symbol, uint8 _decimals)\n    DetailedERC20(_name, _symbol, _decimals)\n    TransferCommissionToken(_commission)\n    public { }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participants\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"drop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_WHITELISTED_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collector\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_DELIMITER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelist\",\"type\":\"address[]\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"setCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_commission\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newCommission\",\"type\":\"uint256\"}],\"name\":\"CommissionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604052600a805460ff1916905534156200001a57600080fd5b604051620016ab380380620016ab833981016040528080519190602001805182019190602001805182019190602001805191508490508383836000838051620000689291602001906200011d565b5060018280516200007e9291602001906200011d565b506002805460ff191660ff92909216919091179055505060068054600160a060020a03191633600160a060020a0316179055620000c981640100000000620000d48102620011fa1704565b5050505050620001c2565b60008111620000e257600080fd5b60078190557f13f60dd2b588490608c3ff1932a3daeb4087f3d5af04b97e5c2a16b5b4c0302e8160405190815260200160405180910390a150565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016057805160ff191683800117855562000190565b8280016001018555821562000190579182015b828111156200019057825182559160200191906001019062000173565b506200019e929150620001a2565b5090565b620001bf91905b808211156200019e5760008155600101620001a9565b90565b6114d980620001d26000396000f30060606040526004361061015e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461016357806306fdde031461018a5780630845817c14610214578063095ea7b31461022957806318160ddd1461024b57806323b872dd14610270578063313ce56714610298578063355e6b43146102c15780633974874b146102d757806340c10f191461032857806342966c681461034a578063438195f914610360578063661884631461037357806370a08231146103955780637d64bcb4146103b45780637ebd1b30146103c75780638da5cb5b146103f9578063913e77ad1461040c57806395d89b411461041f578063a9059cbb14610432578063bb2408e614610454578063d73dd62314610467578063dd62ed3e14610489578063e1489191146104ae578063f2fde38b146104c1578063f4217648146104e0578063fb5b82d0146104fe575b600080fd5b341561016e57600080fd5b61017661051d565b604051901515815260200160405180910390f35b341561019557600080fd5b61019d610526565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101d95780820151838201526020016101c1565b50505050905090810190601f1680156102065780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021f57600080fd5b6102276105c4565b005b341561023457600080fd5b610176600160a060020a036004351660243561061b565b341561025657600080fd5b61025e610687565b60405190815260200160405180910390f35b341561027b57600080fd5b610176600160a060020a036004358116906024351660443561068e565b34156102a357600080fd5b6102ab6106b1565b60405160ff909116815260200160405180910390f35b34156102cc57600080fd5b6102276004356106ba565b34156102e257600080fd5b610227600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965050933593506106e192505050565b341561033357600080fd5b610176600160a060020a0360043516602435610849565b341561035557600080fd5b61022760043561093e565b341561036b57600080fd5b61025e6109f8565b341561037e57600080fd5b610176600160a060020a03600435166024356109fd565b34156103a057600080fd5b61025e600160a060020a0360043516610af9565b34156103bf57600080fd5b610176610b14565b34156103d257600080fd5b6103dd600435610b81565b604051600160a060020a03909116815260200160405180910390f35b341561040457600080fd5b6103dd610ba9565b341561041757600080fd5b6103dd610bb8565b341561042a57600080fd5b61019d610bc7565b341561043d57600080fd5b610176600160a060020a0360043516602435610c32565b341561045f57600080fd5b61025e610c53565b341561047257600080fd5b610176600160a060020a0360043516602435610c59565b341561049457600080fd5b61025e600160a060020a0360043581169060243516610cfd565b34156104b957600080fd5b61025e610d28565b34156104cc57600080fd5b610227600160a060020a0360043516610d2e565b34156104eb57600080fd5b6102276004803560248101910135610dc9565b341561050957600080fd5b610227600160a060020a0360043516610e10565b600a5460ff1681565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105bc5780601f10610591576101008083540402835291602001916105bc565b820191906000526020600020905b81548152906001019060200180831161059f57829003601f168201915b505050505081565b60065433600160a060020a039081169116146105df57600080fd5b600060078190557f13f60dd2b588490608c3ff1932a3daeb4087f3d5af04b97e5c2a16b5b4c0302e9060405190815260200160405180910390a1565b600160a060020a03338116600081815260056020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6004545b90565b600061069b848484610e6f565b506106a7848484610fdf565b5060019392505050565b60025460ff1681565b60065433600160a060020a039081169116146106d557600080fd5b6106de816111fa565b50565b6006546000908190819033600160a060020a0390811691161461070357600080fd5b600085511161071157600080fd5b6000841161071e57600080fd5b8451600160a060020a033316600090815260036020526040902054908502935083111561074a57600080fd5b600160a060020a033316600090815260036020526040902054610773908463ffffffff61124216565b600160a060020a03331660009081526003602052604081209190915591505b8451821015610842578482815181106107a757fe5b906020019060200201519050600160a060020a03811615156107c857600080fd5b600160a060020a0381166000908152600360205260409020546107f1908563ffffffff61125416565b600160a060020a03808316600081815260036020526040908190209390935591339091169060008051602061148e8339815191529087905190815260200160405180910390a3600190910190610792565b5050505050565b60065460009033600160a060020a0390811691161461086757600080fd5b600a5460ff161561087757600080fd5b60045461088a908363ffffffff61125416565b600455600160a060020a0383166000908152600360205260409020546108b6908363ffffffff61125416565b600160a060020a0384166000818152600360205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a038316600060008051602061148e8339815191528460405190815260200160405180910390a350600192915050565b600160a060020a03331660009081526003602052604081205482111561096357600080fd5b5033600160a060020a0381166000908152600360205260409020546109889083611242565b600160a060020a0382166000908152600360205260409020556004546109b4908363ffffffff61124216565b600455600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b600581565b600160a060020a03338116600090815260056020908152604080832093861683529290529081205480831115610a5a57600160a060020a033381166000908152600560209081526040808320938816835292905290812055610a91565b610a6a818463ffffffff61124216565b600160a060020a033381166000908152600560209081526040808320938916835292905220555b600160a060020a0333811660008181526005602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a031660009081526003602052604090205490565b60065460009033600160a060020a03908116911614610b3257600080fd5b600a5460ff1615610b4257600080fd5b600a805460ff191660011790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b6009805482908110610b8f57fe5b600091825260209091200154600160a060020a0316905081565b600654600160a060020a031681565b600854600160a060020a031681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105bc5780601f10610591576101008083540402835291602001916105bc565b6000610c3e838361126a565b50610c4a338484610fdf565b50600192915050565b6103e881565b600160a060020a033381166000908152600560209081526040808320938616835292905290812054610c91908363ffffffff61125416565b600160a060020a0333811660008181526005602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60075481565b60065433600160a060020a03908116911614610d4957600080fd5b600160a060020a0381161515610d5e57600080fd5b600654600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60065433600160a060020a03908116911614610de457600080fd5b60008111610df157600080fd5b6005811115610dff57600080fd5b610e0b600983836113ec565b505050565b60065433600160a060020a03908116911614610e2b57600080fd5b600160a060020a0381161515610e4057600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515610e8657600080fd5b600160a060020a038416600090815260036020526040902054821115610eab57600080fd5b600160a060020a0380851660009081526005602090815260408083203390941683529290522054821115610ede57600080fd5b600160a060020a038416600090815260036020526040902054610f07908363ffffffff61124216565b600160a060020a038086166000908152600360205260408082209390935590851681522054610f3c908363ffffffff61125416565b600160a060020a03808516600090815260036020908152604080832094909455878316825260058152838220339093168252919091522054610f84908363ffffffff61124216565b600160a060020a038086166000818152600560209081526040808320338616845290915290819020939093559085169160008051602061148e8339815191529085905190815260200160405180910390a35060019392505050565b600854600090600160a060020a03161515610ff9576111f4565b6009546000901180156110d5575061106b600980548060200260200160405190810160405280929190818152602001828054801561106057602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611042575b505050505085611353565b806110d557506110d560098054806020026020016040519081016040528092919081815260200182805480156110ca57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116110ac575b505050505084611353565b156110df576111f4565b61110b60646110ff6103e86110ff600754876113aa90919063ffffffff16565b9063ffffffff6113d516565b600160a060020a03851660009081526003602052604090205490915081111561113357600080fd5b600160a060020a03841660009081526003602052604090205461115c908263ffffffff61124216565b600160a060020a038086166000908152600360205260408082209390935560085490911681522054611194908263ffffffff61125416565b60088054600160a060020a0390811660009081526003602052604090819020939093559054811691908616907ff228de527fc1b9843baac03b9a04565473a263375950e63435d4138464386f469084905190815260200160405180910390a35b50505050565b6000811161120757600080fd5b60078190557f13f60dd2b588490608c3ff1932a3daeb4087f3d5af04b97e5c2a16b5b4c0302e8160405190815260200160405180910390a150565b60008282111561124e57fe5b50900390565b60008282018381101561126357fe5b9392505050565b6000600160a060020a038316151561128157600080fd5b600160a060020a0333166000908152600360205260409020548211156112a657600080fd5b600160a060020a0333166000908152600360205260409020546112cf908363ffffffff61124216565b600160a060020a033381166000908152600360205260408082209390935590851681522054611304908363ffffffff61125416565b600160a060020a03808516600081815260036020526040908190209390935591339091169060008051602061148e8339815191529085905190815260200160405180910390a350600192915050565b6000805b83518110156113a05782600160a060020a031684828151811061137657fe5b90602001906020020151600160a060020a031614156113985760019150610af2565b600101611357565b5060009392505050565b6000808315156113bd5760009150610af2565b508282028284828115156113cd57fe5b041461126357fe5b60008082848115156113e357fe5b04949350505050565b82805482825590600052602060002090810192821561144c579160200282015b8281111561144c57815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384351617825560209092019160019091019061140c565b5061145892915061145c565b5090565b61068b91905b8082111561145857805473ffffffffffffffffffffffffffffffffffffffff191681556001016114625600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820d946bbaff0c3cd39f68e2e8d21e31f0f645b334f0afe8ca618d09cfa55c9246800290000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000d47656d5661756c7420436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034756430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000d47656d5661756c7420436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034756430000000000000000000000000000000000000000000000000000000000"
}