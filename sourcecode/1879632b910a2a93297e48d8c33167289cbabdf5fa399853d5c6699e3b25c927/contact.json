{
  "address": "0x9eb033c5ed9af8957860f153f477280772113828",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CustomToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-14\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(owner, address(0));\n        owner = address(0);\n    }\n}\n\ncontract Pausable is Ownable {\n    bool public paused;\n    \n    event Paused(address account);\n    event Unpaused(address account);\n\n    constructor() internal {\n        paused = false;\n    }\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Paused(msg.sender);\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\ncontract BaseToken is Pausable {\n    using SafeMath for uint256;\n\n    string constant public name = 'Dapper';\n    string constant public symbol = 'Dapp';\n    uint8 constant public decimals = 6;\n    uint256 public totalSupply = 50000000000000;\n    uint256 constant public _totalLimit = 100000000000000000000;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function _transfer(address from, address to, uint value) internal {\n        require(to != address(0));\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n        totalSupply = totalSupply.add(value);\n        require(_totalLimit >= totalSupply);\n        balanceOf[account] = balanceOf[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        require(spender != address(0));\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\n        require(spender != address(0));\n        allowance[msg.sender][spender] = allowance[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\n        require(spender != address(0));\n        allowance[msg.sender][spender] = allowance[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\n        return true;\n    }\n}\n\ncontract BurnToken is BaseToken {\n    event Burn(address indexed from, uint256 value);\n\n    function burn(uint256 value) public whenNotPaused returns (bool) {\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Burn(msg.sender, value);\n        return true;\n    }\n\n    function burnFrom(address from, uint256 value) public whenNotPaused returns (bool) {\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Burn(from, value);\n        return true;\n    }\n}\n\ncontract CustomToken is BaseToken, BurnToken {\n    constructor() public {\n        balanceOf[0x8F1E8C7050D9bd74D7658CbF3b437826b9FB4Bf8] = totalSupply;\n        emit Transfer(address(0), 0x8F1E8C7050D9bd74D7658CbF3b437826b9FB4Bf8, totalSupply);\n\n        owner = 0x8F1E8C7050D9bd74D7658CbF3b437826b9FB4Bf8;\n    }\n}",
  "bytecode": "6080604052652d79883d200060015534801561001a57600080fd5b506000805460a060020a60ff0219168155600154738f1e8c7050d9bd74d7658cbf3b437826b9fb4bf8808352600260209081527f2269bdf3d5e1942d5a2f0675cfeb693f83e5a0f1df04d654de2c15b446721b2183905560408051938452519193927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a360008054600160a060020a031916738f1e8c7050d9bd74d7658cbf3b437826b9fb4bf8179055610c2c806100dc6000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610116578063095ea7b3146101a057806318160ddd146101d857806323b872dd146101ff578063313ce56714610229578063395093511461025457806339f85f5d146102785780633f4ba83a1461028d57806342966c68146102a45780635c975abb146102bc57806370a08231146102d1578063715018a6146102f257806379cc6790146103075780638456cb591461032b5780638da5cb5b1461034057806395d89b4114610371578063a457c2d714610386578063a9059cbb146103aa578063dd62ed3e146103ce578063f2fde38b146103f5575b600080fd5b34801561012257600080fd5b5061012b610416565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016557818101518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ac57600080fd5b506101c4600160a060020a036004351660243561044d565b604080519115158252519081900360200190f35b3480156101e457600080fd5b506101ed6104e1565b60408051918252519081900360200190f35b34801561020b57600080fd5b506101c4600160a060020a03600435811690602435166044356104e7565b34801561023557600080fd5b5061023e61056c565b6040805160ff9092168252519081900360200190f35b34801561026057600080fd5b506101c4600160a060020a0360043516602435610571565b34801561028457600080fd5b506101ed610637565b34801561029957600080fd5b506102a2610644565b005b3480156102b057600080fd5b506101c46004356106c6565b3480156102c857600080fd5b506101c4610762565b3480156102dd57600080fd5b506101ed600160a060020a0360043516610772565b3480156102fe57600080fd5b506102a2610784565b34801561031357600080fd5b506101c4600160a060020a03600435166024356107f2565b34801561033757600080fd5b506102a26108f6565b34801561034c57600080fd5b5061035561097d565b60408051600160a060020a039092168252519081900360200190f35b34801561037d57600080fd5b5061012b61098c565b34801561039257600080fd5b506101c4600160a060020a03600435166024356109c3565b3480156103b657600080fd5b506101c4600160a060020a0360043516602435610a24565b3480156103da57600080fd5b506101ed600160a060020a0360043581169060243516610a50565b34801561040157600080fd5b506102a2600160a060020a0360043516610a6d565b60408051808201909152600681527f4461707065720000000000000000000000000000000000000000000000000000602082015281565b6000805460a060020a900460ff161561046557600080fd5b600160a060020a038316151561047a57600080fd5b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60015481565b6000805460a060020a900460ff16156104ff57600080fd5b600160a060020a0384166000908152600360209081526040808320338452909152902054610533908363ffffffff610b0116565b600160a060020a0385166000908152600360209081526040808320338452909152902055610562848484610b18565b5060019392505050565b600681565b6000805460a060020a900460ff161561058957600080fd5b600160a060020a038316151561059e57600080fd5b336000908152600360209081526040808320600160a060020a03871684529091529020546105d2908363ffffffff610be716565b336000818152600360209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b68056bc75e2d6310000081565b600054600160a060020a0316331461065b57600080fd5b60005460a060020a900460ff16151561067357600080fd5b6000805474ff0000000000000000000000000000000000000000191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b6000805460a060020a900460ff16156106de57600080fd5b336000908152600260205260409020546106fe908363ffffffff610b0116565b33600090815260026020526040902055600154610721908363ffffffff610b0116565b60015560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b60005460a060020a900460ff1681565b60026020526000908152604090205481565b600054600160a060020a0316331461079b57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000805460a060020a900460ff161561080a57600080fd5b600160a060020a038316600090815260036020908152604080832033845290915290205461083e908363ffffffff610b0116565b600160a060020a03841660008181526003602090815260408083203384528252808320949094559181526002909152205461087f908363ffffffff610b0116565b600160a060020a0384166000908152600260205260409020556001546108ab908363ffffffff610b0116565b600155604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b600054600160a060020a0316331461090d57600080fd5b60005460a060020a900460ff161561092457600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b600054600160a060020a031681565b60408051808201909152600481527f4461707000000000000000000000000000000000000000000000000000000000602082015281565b6000805460a060020a900460ff16156109db57600080fd5b600160a060020a03831615156109f057600080fd5b336000908152600360209081526040808320600160a060020a03871684529091529020546105d2908363ffffffff610b0116565b6000805460a060020a900460ff1615610a3c57600080fd5b610a47338484610b18565b50600192915050565b600360209081526000928352604080842090915290825290205481565b600054600160a060020a03163314610a8457600080fd5b600160a060020a0381161515610a9957600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008083831115610b1157600080fd5b5050900390565b600160a060020a0382161515610b2d57600080fd5b600160a060020a038316600090815260026020526040902054610b56908263ffffffff610b0116565b600160a060020a038085166000908152600260205260408082209390935590841681522054610b8b908263ffffffff610be716565b600160a060020a0380841660008181526002602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082820183811015610bf957600080fd5b93925050505600a165627a7a723058209e508b940a9c8e131c47557824d6a993f690369c79d1538a05a35ccd1bcda6360029"
}