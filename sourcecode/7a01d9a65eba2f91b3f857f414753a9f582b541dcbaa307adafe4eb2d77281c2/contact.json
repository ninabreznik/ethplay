{
  "address": "0xfec435fa6a2366d1f45cb488665e1ad38c3baa2d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Wallet",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *  The Consumer Contract Wallet\n *  Copyright (C) 2018 The Contract Wallet Company Limited\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.4.25;\n\nimport \"./oracle.sol\";\nimport \"./ownable.sol\";\nimport \"./controllable.sol\";\nimport \"./PublicResolver.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/// @title ERC20 interface is a subset of the ERC20 specification.\ninterface ERC20 {\n    function transfer(address, uint) external returns (bool);\n    function balanceOf(address) external view returns (uint);\n}\n\n\n/// @title ERC165 interface specifies a standard way of querying if a contract implements an interface.\ninterface ERC165 {\n    function supportsInterface(bytes4) external view returns (bool);\n}\n\n\n/// @title Whitelist provides payee-whitelist functionality.\ncontract Whitelist is Controllable, Ownable {\n    event AddedToWhitelist(address _sender, address[] _addresses);\n    event SubmittedWhitelistAddition(address[] _addresses, bytes32 _hash);\n    event CancelledWhitelistAddition(address _sender, bytes32 _hash);\n\n    event RemovedFromWhitelist(address _sender, address[] _addresses);\n    event SubmittedWhitelistRemoval(address[] _addresses, bytes32 _hash);\n    event CancelledWhitelistRemoval(address _sender, bytes32 _hash);\n\n    mapping(address => bool) public isWhitelisted;\n    address[] private _pendingWhitelistAddition;\n    address[] private _pendingWhitelistRemoval;\n    bool public submittedWhitelistAddition;\n    bool public submittedWhitelistRemoval;\n    bool public initializedWhitelist;\n\n    /// @dev Check if the provided addresses contain the owner or the zero-address address.\n    modifier hasNoOwnerOrZeroAddress(address[] _addresses) {\n        for (uint i = 0; i < _addresses.length; i++) {\n            require(_addresses[i] != owner(), \"provided whitelist contains the owner address\");\n            require(_addresses[i] != address(0), \"provided whitelist contains the zero address\");\n        }\n        _;\n    }\n\n    /// @dev Check that neither addition nor removal operations have already been submitted.\n    modifier noActiveSubmission() {\n        require(!submittedWhitelistAddition && !submittedWhitelistRemoval, \"whitelist operation has already been submitted\");\n        _;\n    }\n\n    /// @dev Getter for pending addition array.\n    function pendingWhitelistAddition() external view returns(address[]) {\n        return _pendingWhitelistAddition;\n    }\n\n    /// @dev Getter for pending removal array.\n    function pendingWhitelistRemoval() external view returns(address[]) {\n        return _pendingWhitelistRemoval;\n    }\n\n    /// @dev Getter for pending addition/removal array hash.\n    function pendingWhitelistHash(address[] _pendingWhitelist) public pure returns(bytes32) {\n        return keccak256(abi.encodePacked(_pendingWhitelist));\n    }\n\n    /// @dev Add initial addresses to the whitelist.\n    /// @param _addresses are the Ethereum addresses to be whitelisted.\n    function initializeWhitelist(address[] _addresses) external onlyOwner hasNoOwnerOrZeroAddress(_addresses) {\n        // Require that the whitelist has not been initialized.\n        require(!initializedWhitelist, \"whitelist has already been initialized\");\n        // Add each of the provided addresses to the whitelist.\n        for (uint i = 0; i < _addresses.length; i++) {\n            isWhitelisted[_addresses[i]] = true;\n        }\n        initializedWhitelist = true;\n        // Emit the addition event.\n        emit AddedToWhitelist(msg.sender, _addresses);\n    }\n\n    /// @dev Add addresses to the whitelist.\n    /// @param _addresses are the Ethereum addresses to be whitelisted.\n    function submitWhitelistAddition(address[] _addresses) external onlyOwner noActiveSubmission hasNoOwnerOrZeroAddress(_addresses) {\n        // Require that the whitelist has been initialized.\n        require(initializedWhitelist, \"whitelist has not been initialized\");\n        // Require this array of addresses not empty\n        require(_addresses.length > 0, \"pending whitelist addition is empty\");\n        // Set the provided addresses to the pending addition addresses.\n        _pendingWhitelistAddition = _addresses;\n        // Flag the operation as submitted.\n        submittedWhitelistAddition = true;\n        // Emit the submission event.\n        emit SubmittedWhitelistAddition(_addresses, pendingWhitelistHash(_pendingWhitelistAddition));\n    }\n\n    /// @dev Confirm pending whitelist addition.\n    function confirmWhitelistAddition(bytes32 _hash) external onlyController {\n        // Require that the whitelist addition has been submitted.\n        require(submittedWhitelistAddition, \"whitelist addition has not been submitted\");\n\n        // Require that confirmation hash and the hash of the pending whitelist addition match\n        require(_hash == pendingWhitelistHash(_pendingWhitelistAddition), \"hash of the pending whitelist addition do not match\");\n\n        // Whitelist pending addresses.\n        for (uint i = 0; i < _pendingWhitelistAddition.length; i++) {\n            isWhitelisted[_pendingWhitelistAddition[i]] = true;\n        }\n        // Emit the addition event.\n        emit AddedToWhitelist(msg.sender, _pendingWhitelistAddition);\n        // Reset pending addresses.\n        delete _pendingWhitelistAddition;\n        // Reset the submission flag.\n        submittedWhitelistAddition = false;\n    }\n\n    /// @dev Cancel pending whitelist addition.\n    function cancelWhitelistAddition(bytes32 _hash) external onlyController {\n        // Check if operation has been submitted.\n        require(submittedWhitelistAddition, \"whitelist addition has not been submitted\");\n        // Require that confirmation hash and the hash of the pending whitelist addition match\n        require(_hash == pendingWhitelistHash(_pendingWhitelistAddition), \"hash of the pending whitelist addition does not match\");\n        // Reset pending addresses.\n        delete _pendingWhitelistAddition;\n        // Reset the submitted operation flag.\n        submittedWhitelistAddition = false;\n        // Emit the cancellation event.\n        emit CancelledWhitelistAddition(msg.sender, _hash);\n    }\n\n    /// @dev Remove addresses from the whitelist.\n    /// @param _addresses are the Ethereum addresses to be removed.\n    function submitWhitelistRemoval(address[] _addresses) external onlyOwner noActiveSubmission {\n        // Require that the whitelist has been initialized.\n        require(initializedWhitelist, \"whitelist has not been initialized\");\n        // Require that the array of addresses is not empty\n        require(_addresses.length > 0, \"submitted whitelist removal is empty\");\n        // Add the provided addresses to the pending addition list.\n        _pendingWhitelistRemoval = _addresses;\n        // Flag the operation as submitted.\n        submittedWhitelistRemoval = true;\n        // Emit the submission event.\n        emit SubmittedWhitelistRemoval(_addresses, pendingWhitelistHash(_pendingWhitelistRemoval));\n    }\n\n    /// @dev Confirm pending removal of whitelisted addresses.\n    function confirmWhitelistRemoval(bytes32 _hash) external onlyController {\n        // Require that the pending whitelist is not empty and the operation has been submitted.\n        require(submittedWhitelistRemoval, \"whitelist removal has not been submitted\");\n        // Require that confirmation hash and the hash of the pending whitelist removal match\n        require(_hash == pendingWhitelistHash(_pendingWhitelistRemoval), \"hash of the pending whitelist removal does not match the confirmed hash\");\n        // Remove pending addresses.\n        for (uint i = 0; i < _pendingWhitelistRemoval.length; i++) {\n            isWhitelisted[_pendingWhitelistRemoval[i]] = false;\n        }\n        // Emit the removal event.\n        emit RemovedFromWhitelist(msg.sender, _pendingWhitelistRemoval);\n        // Reset pending addresses.\n        delete _pendingWhitelistRemoval;\n        // Reset the submission flag.\n        submittedWhitelistRemoval = false;\n    }\n\n    /// @dev Cancel pending removal of whitelisted addresses.\n    function cancelWhitelistRemoval(bytes32 _hash) external onlyController {\n        // Check if operation has been submitted.\n        require(submittedWhitelistRemoval, \"whitelist removal has not been submitted\");\n        // Require that confirmation hash and the hash of the pending whitelist removal match\n        require(_hash == pendingWhitelistHash(_pendingWhitelistRemoval), \"hash of the pending whitelist removal does not match\");\n        // Reset pending addresses.\n        delete _pendingWhitelistRemoval;\n        // Reset the submitted operation flag.\n        submittedWhitelistRemoval = false;\n        // Emit the cancellation event.\n        emit CancelledWhitelistRemoval(msg.sender, _hash);\n    }\n}\n\n\n//// @title SpendLimit provides daily spend limit functionality.\ncontract SpendLimit is Controllable, Ownable {\n    event SetSpendLimit(address _sender, uint _amount);\n    event SubmittedSpendLimitChange(uint _amount);\n    event CancelledSpendLimitChange(address _sender, uint _amount);\n\n    using SafeMath for uint256;\n\n    uint public spendLimit;\n    uint private _spendLimitDay;\n    uint private _spendAvailable;\n\n    uint public pendingSpendLimit;\n    bool public submittedSpendLimit;\n    bool public initializedSpendLimit;\n\n    /// @dev Constructor initializes the daily spend limit in wei.\n    constructor(uint _spendLimit) internal {\n        spendLimit = _spendLimit;\n        _spendLimitDay = now;\n        _spendAvailable = spendLimit;\n    }\n\n    /// @dev Returns the available daily balance - accounts for daily limit reset.\n    /// @return amount of ether in wei.\n    function spendAvailable() public view returns (uint) {\n        if (now > _spendLimitDay + 24 hours) {\n            return spendLimit;\n        } else {\n            return _spendAvailable;\n        }\n    }\n\n    /// @dev Initialize a daily spend (aka transfer) limit for non-whitelisted addresses.\n    /// @param _amount is the daily limit amount in wei.\n    function initializeSpendLimit(uint _amount) external onlyOwner {\n        // Require that the spend limit has not been initialized.\n        require(!initializedSpendLimit, \"spend limit has already been initialized\");\n        // Modify spend limit based on the provided value.\n        _modifySpendLimit(_amount);\n        // Flag the operation as initialized.\n        initializedSpendLimit = true;\n        // Emit the set limit event.\n        emit SetSpendLimit(msg.sender, _amount);\n    }\n\n    /// @dev Set a daily transfer limit for non-whitelisted addresses.\n    /// @param _amount is the daily limit amount in wei.\n    function submitSpendLimit(uint _amount) external onlyOwner {\n        // Require that the spend limit has been initialized.\n        require(initializedSpendLimit, \"spend limit has not been initialized\");\n        // Assign the provided amount to pending daily limit change.\n        pendingSpendLimit = _amount;\n        // Flag the operation as submitted.\n        submittedSpendLimit = true;\n        // Emit the submission event.\n        emit SubmittedSpendLimitChange(_amount);\n    }\n\n    /// @dev Confirm pending set daily limit operation.\n    function confirmSpendLimit(uint _amount) external onlyController {\n        // Require that the operation has been submitted.\n        require(submittedSpendLimit, \"spend limit has not been submitted\");\n        // Require that pending and confirmed spend limit are the same\n        require(pendingSpendLimit == _amount, \"confirmed and submitted spend limits dont match\");\n        // Modify spend limit based on the pending value.\n        _modifySpendLimit(pendingSpendLimit);\n        // Emit the set limit event.\n        emit SetSpendLimit(msg.sender, pendingSpendLimit);\n        // Reset the submission flag.\n        submittedSpendLimit = false;\n        // Reset pending daily limit.\n        pendingSpendLimit = 0;\n    }\n\n    /// @dev Cancel pending set daily limit operation.\n    function cancelSpendLimit(uint _amount) external onlyController {\n        // Require a spendlimit has been submitted\n        require(submittedSpendLimit, \"a spendlimit needs to be submitted\");\n        // Require that pending and confirmed spend limit are the same\n        require(pendingSpendLimit == _amount, \"pending and cancelled spend limits dont match\");\n        // Reset pending daily limit.\n        pendingSpendLimit = 0;\n        // Reset the submitted operation flag.\n        submittedSpendLimit = false;\n        // Emit the cancellation event.\n        emit CancelledSpendLimitChange(msg.sender, _amount);\n    }\n\n    // @dev Setter method for the available daily spend limit.\n    function _setSpendAvailable(uint _amount) internal {\n        _spendAvailable = _amount;\n    }\n\n    /// @dev Update available spend limit based on the daily reset.\n    function _updateSpendAvailable() internal {\n        if (now > _spendLimitDay.add(24 hours)) {\n            // Advance the current day by how many days have passed.\n            uint extraDays = now.sub(_spendLimitDay).div(24 hours);\n            _spendLimitDay = _spendLimitDay.add(extraDays.mul(24 hours));\n            // Set the available limit to the current spend limit.\n            _spendAvailable = spendLimit;\n        }\n    }\n\n    /// @dev Modify the spend limit and spend available based on the provided value.\n    /// @dev _amount is the daily limit amount in wei.\n    function _modifySpendLimit(uint _amount) private {\n        // Account for the spend limit daily reset.\n        _updateSpendAvailable();\n        // Set the daily limit to the provided amount.\n        spendLimit = _amount;\n        // Lower the available limit if it's higher than the new daily limit.\n        if (_spendAvailable > spendLimit) {\n            _spendAvailable = spendLimit;\n        }\n    }\n}\n\n\n//// @title Asset store with extra security features.\ncontract Vault is Whitelist, SpendLimit, ERC165 {\n    event Received(address _from, uint _amount);\n    event Transferred(address _to, address _asset, uint _amount);\n    event BulkTransferred(address _to, address[] _assets);\n\n    using SafeMath for uint256;\n\n    /// @dev Supported ERC165 interface ID.\n    bytes4 private constant _ERC165_INTERFACE_ID = 0x01ffc9a7; // solium-disable-line uppercase\n\n    /// @dev ENS points to the ENS registry smart contract.\n    ENS internal _ENS;\n    /// @dev Is the registered ENS name of the oracle contract.\n    bytes32 internal _oracleNode;\n\n    /// @dev Constructor initializes the vault with an owner address and spend limit. It also sets up the oracle and controller contracts.\n    /// @param _owner is the owner account of the wallet contract.\n    /// @param _transferable indicates whether the contract ownership can be transferred.\n    /// @param _ens is the ENS public registry contract address.\n    /// @param _oracleName is the ENS name of the Oracle.\n    /// @param _controllerName is the ENS name of the controller.\n    /// @param _spendLimit is the initial spend limit.\n    constructor(address _owner, bool _transferable, address _ens, bytes32 _oracleName, bytes32 _controllerName, uint _spendLimit) SpendLimit(_spendLimit) Ownable(_owner, _transferable) Controllable(_ens, _controllerName) public {\n        _ENS = ENS(_ens);\n        _oracleNode = _oracleName;\n    }\n\n    /// @dev Checks if the value is not zero.\n    modifier isNotZero(uint _value) {\n        require(_value != 0, \"provided value cannot be zero\");\n        _;\n    }\n\n    /// @dev Ether can be deposited from any source, so this contract must be payable by anyone.\n    function() public payable {\n        //TODO question: Why is this check here, is it necessary or are we building into a corner?\n        require(msg.data.length == 0, \"data in fallback\");\n        emit Received(msg.sender, msg.value);\n    }\n\n    /// @dev Returns the amount of an asset owned by the contract.\n    /// @param _asset address of an ERC20 token or 0x0 for ether.\n    /// @return balance associated with the wallet address in wei.\n    function balance(address _asset) external view returns (uint) {\n        if (_asset != address(0)) {\n            return ERC20(_asset).balanceOf(this);\n        } else {\n            return address(this).balance;\n        }\n    }\n\n    /// @dev This is a bulk transfer convenience function, used to migrate contracts.\n    /// If any of the transfers fail, this will revert.\n    /// @param _to is the recipient's address, can't be the zero (0x0) address: transfer() will revert.\n    /// @param _assets is an array of addresses of ERC20 tokens or 0x0 for ether.\n    function bulkTransfer(address _to, address[] _assets) public onlyOwner {\n        // check to make sure that _assets isn't empty\n        require(_assets.length != 0, \"asset array should be non-empty\");\n        // This loops through all of the transfers to be made\n        for (uint i = 0; i < _assets.length; i++) {\n            uint amount;\n            // Get amount based on whether eth or erc20\n            if (_assets[i] == address(0)) {\n                amount = address(this).balance;\n            } else {\n                amount = ERC20(_assets[i]).balanceOf(address(this));\n            }\n            // use our safe, daily limit protected transfer\n            transfer(_to, _assets[i], amount);\n        }\n        emit BulkTransferred(_to, _assets);\n    }\n\n    /// @dev Transfers the specified asset to the recipient's address.\n    /// @param _to is the recipient's address.\n    /// @param _asset is the address of an ERC20 token or 0x0 for ether.\n    /// @param _amount is the amount of tokens to be transferred in base units.\n    function transfer(address _to, address _asset, uint _amount) public onlyOwner isNotZero(_amount) {\n        // Checks if the _to address is not the zero-address\n        require(_to != address(0), \"_to address cannot be set to 0x0\");\n\n        // If address is not whitelisted, take daily limit into account.\n        if (!isWhitelisted[_to]) {\n            // Update the available spend limit.\n            _updateSpendAvailable();\n            // Convert token amount to ether value.\n            uint etherValue;\n            bool tokenExists;\n            if (_asset != address(0)) {\n                (tokenExists, etherValue) = IOracle(PublicResolver(_ENS.resolver(_oracleNode)).addr(_oracleNode)).convert(_asset, _amount);\n            } else {\n                etherValue = _amount;\n            }\n\n            // If token is supported by our oracle or is ether\n            // Check against the daily spent limit and update accordingly\n            if (tokenExists || _asset == address(0)) {\n                // Require that the value is under remaining limit.\n                require(etherValue <= spendAvailable(), \"transfer amount exceeds available spend limit\");\n                // Update the available limit.\n                _setSpendAvailable(spendAvailable().sub(etherValue));\n            }\n        }\n        // Transfer token or ether based on the provided address.\n        if (_asset != address(0)) {\n            require(ERC20(_asset).transfer(_to, _amount), \"ERC20 token transfer was unsuccessful\");\n        } else {\n            _to.transfer(_amount);\n        }\n        // Emit the transfer event.\n        emit Transferred(_to, _asset, _amount);\n    }\n\n    /// @dev Checks for interface support based on ERC165.\n    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\n        return interfaceID == _ERC165_INTERFACE_ID;\n    }\n}\n\n\n//// @title Asset wallet with extra security features and gas top up management.\ncontract Wallet is Vault {\n\n    using Address for address;\n\n    event SetTopUpLimit(address _sender, uint _amount);\n    event SubmittedTopUpLimitChange(uint _amount);\n    event CancelledTopUpLimitChange(address _sender, uint _amount);\n\n    event ToppedUpGas(address _sender, address _owner, uint _amount);\n\n    event ExecutedTransaction(address _destination, uint _value, bytes _data);\n\n    using SafeMath for uint256;\n\n    uint constant private MINIMUM_TOPUP_LIMIT = 1 finney; // solium-disable-line uppercase\n    uint constant private MAXIMUM_TOPUP_LIMIT = 500 finney; // solium-disable-line uppercase\n\n    /// @dev these are needed to allow for the executeTransaction method\n    uint32 private constant _TRANSFER= 0xa9059cbb;\n    uint32 private constant _APPROVE = 0x095ea7b3;\n\n    uint public topUpLimit;\n    uint private _topUpLimitDay;\n    uint private _topUpAvailable;\n\n    uint public pendingTopUpLimit;\n    bool public submittedTopUpLimit;\n    bool public initializedTopUpLimit;\n\n    /// @dev Constructor initializes the wallet top up limit and the vault contract.\n    /// @param _owner is the owner account of the wallet contract.\n    /// @param _transferable indicates whether the contract ownership can be transferred.\n    /// @param _ens is the address of the ENS.\n    /// @param _oracleName is the ENS name of the Oracle.\n    /// @param _controllerName is the ENS name of the Controller.\n    /// @param _spendLimit is the initial spend limit.\n    constructor(address _owner, bool _transferable, address _ens, bytes32 _oracleName, bytes32 _controllerName, uint _spendLimit) Vault(_owner, _transferable, _ens, _oracleName, _controllerName, _spendLimit) public {\n        _topUpLimitDay = now;\n        topUpLimit = MAXIMUM_TOPUP_LIMIT;\n        _topUpAvailable = topUpLimit;\n    }\n\n    /// @dev Returns the available daily gas top up balance - accounts for daily limit reset.\n    /// @return amount of gas in wei.\n    function topUpAvailable() external view returns (uint) {\n        if (now > _topUpLimitDay + 24 hours) {\n            return topUpLimit;\n        } else {\n            return _topUpAvailable;\n        }\n    }\n\n    /// @dev Initialize a daily gas top up limit.\n    /// @param _amount is the gas top up amount in wei.\n    function initializeTopUpLimit(uint _amount) external onlyOwner {\n        // Require that the top up limit has not been initialized.\n        require(!initializedTopUpLimit, \"top up limit has already been initialized\");\n        // Require that the limit amount is within the acceptable range.\n        require(MINIMUM_TOPUP_LIMIT <= _amount && _amount <= MAXIMUM_TOPUP_LIMIT, \"top up amount is outside of the min/max range\");\n        // Modify spend limit based on the provided value.\n        _modifyTopUpLimit(_amount);\n        // Flag operation as initialized.\n        initializedTopUpLimit = true;\n        // Emit the set limit event.\n        emit SetTopUpLimit(msg.sender, _amount);\n    }\n\n    /// @dev Set a daily top up top up limit.\n    /// @param _amount is the daily top up limit amount in wei.\n    function submitTopUpLimit(uint _amount) external onlyOwner {\n        // Require that the top up limit has been initialized.\n        require(initializedTopUpLimit, \"top up limit has not been initialized\");\n        // Require that the limit amount is within the acceptable range.\n        require(MINIMUM_TOPUP_LIMIT <= _amount && _amount <= MAXIMUM_TOPUP_LIMIT, \"top up amount is outside of the min/max range\");\n        // Assign the provided amount to pending daily limit change.\n        pendingTopUpLimit = _amount;\n        // Flag the operation as submitted.\n        submittedTopUpLimit = true;\n        // Emit the submission event.\n        emit SubmittedTopUpLimitChange(_amount);\n    }\n\n    /// @dev Confirm pending set top up limit operation.\n    function confirmTopUpLimit(uint _amount) external onlyController {\n        // Require that the operation has been submitted.\n        require(submittedTopUpLimit, \"top up limit has not been submitted\");\n        // Assert that the pending top up limit amount is within the acceptable range.\n        require(MINIMUM_TOPUP_LIMIT <= pendingTopUpLimit && pendingTopUpLimit <= MAXIMUM_TOPUP_LIMIT, \"top up amount is outside the min/max range\");\n        // Assert that confirmed and pending topup limit are the same.\n        require(_amount == pendingTopUpLimit, \"confirmed and pending topup limit are not same\");\n        // Modify top up limit based on the pending value.\n        _modifyTopUpLimit(pendingTopUpLimit);\n        // Emit the set limit event.\n        emit SetTopUpLimit(msg.sender, pendingTopUpLimit);\n        // Reset pending daily limit.\n        pendingTopUpLimit = 0;\n        // Reset the submission flag.\n        submittedTopUpLimit = false;\n    }\n\n    /// @dev Cancel pending set top up limit operation.\n    function cancelTopUpLimit(uint _amount) external onlyController {\n        // Make sure a topup limit update has been submitted\n        require(submittedTopUpLimit, \"a topup limit has to be submitted\");\n        // Require that pending and confirmed spend limit are the same\n        require(pendingTopUpLimit == _amount, \"pending and cancelled top up limits dont match\");\n        // Reset pending daily limit.\n        pendingTopUpLimit = 0;\n        // Reset the submitted operation flag.\n        submittedTopUpLimit = false;\n        // Emit the cancellation event.\n        emit CancelledTopUpLimitChange(msg.sender, _amount);\n    }\n\n    /// @dev Refill owner's gas balance.\n    /// @dev Revert if the transaction amount is too large\n    /// @param _amount is the amount of ether to transfer to the owner account in wei.\n    function topUpGas(uint _amount) external isNotZero(_amount) {\n        // Require that the sender is either the owner or a controller.\n        require(_isOwner() || _isController(msg.sender), \"sender is neither an owner nor a controller\");\n        // Account for the top up limit daily reset.\n        _updateTopUpAvailable();\n        // Make sure the available top up amount is not zero.\n        require(_topUpAvailable != 0, \"available top up limit cannot be zero\");\n        // Fail if there isn't enough in the daily top up limit to perform topUp\n        require(_amount <= _topUpAvailable, \"available top up limit less than amount passed in\");\n        // Reduce the top up amount from available balance and transfer corresponding\n        // ether to the owner's account.\n        _topUpAvailable = _topUpAvailable.sub(_amount);\n        owner().transfer(_amount);\n        // Emit the gas top up event.\n        emit ToppedUpGas(tx.origin, owner(), _amount);\n    }\n\n    /// @dev Modify the top up limit and top up available based on the provided value.\n    /// @dev _amount is the daily limit amount in wei.\n    function _modifyTopUpLimit(uint _amount) private {\n        // Account for the top up limit daily reset.\n        _updateTopUpAvailable();\n        // Set the daily limit to the provided amount.\n        topUpLimit = _amount;\n        // Lower the available limit if it's higher than the new daily limit.\n        if (_topUpAvailable > topUpLimit) {\n            _topUpAvailable = topUpLimit;\n        }\n    }\n\n    /// @dev Update available top up limit based on the daily reset.\n    function _updateTopUpAvailable() private {\n        if (now > _topUpLimitDay.add(24 hours)) {\n            // Advance the current day by how many days have passed.\n            uint extraDays = now.sub(_topUpLimitDay).div(24 hours);\n            _topUpLimitDay = _topUpLimitDay.add(extraDays.mul(24 hours));\n            // Set the available limit to the current top up limit.\n            _topUpAvailable = topUpLimit;\n        }\n    }\n\n    /// @dev This function allows for the owner to send transaction from the Wallet to arbitrary contracts\n    /// @dev This function does not allow for the sending of data to arbitrary (non-contract) addresses\n    /// @param _destination address of the transaction\n    /// @param _value ETH amount in wei\n    /// @param _data transaction payload binary\n    function executeTransaction(address _destination, uint _value, bytes _data, bool _destinationIsContract) external onlyOwner {\n\n        // Check if the Address is a Contract\n        // This should avoid users accidentally sending Value and Data to a plain old address\n        if (_destinationIsContract) {\n            require(address(_destination).isContract(), \"executeTransaction for a contract: call to non-contract\");\n        } else {\n            require(!address(_destination).isContract(), \"executeTransaction for a non-contract: call to contract\");\n        }\n\n        // Check if there exists at least a method signature in the transaction payload\n        if (_data.length >= 4) {\n            // Get method signature\n            uint32 signature = bytesToUint32(_data, 0);\n\n            // Check if method is either ERC20 transfer or approve\n            if (signature == _TRANSFER || signature == _APPROVE) {\n                require(_data.length >= 4 + 32 + 32, \"invalid transfer / approve transaction data\");\n                uint amount = sliceUint(_data, 4 + 32);\n                // The \"toOrSpender\" is the '_to' address for a ERC20 transfer or the '_spender; in ERC20 approve\n                // + 12 because address 20 bytes and this is padded to 32\n                address toOrSpender = bytesToAddress(_data, 4 + 12);\n\n                // Check if the toOrSpender is in the whitelist\n                if (!isWhitelisted[toOrSpender]) {\n                    (bool tokenExists,uint etherValue) = IOracle(PublicResolver(_ENS.resolver(_oracleNode)).addr(_oracleNode)).convert(_destination, amount);\n                    // If token is supported by our oracle or is ether\n                    // Check against the daily spent limit and update accordingly\n                    if (tokenExists) {\n                        // Require that the value is under remaining limit.\n                        require(etherValue <= spendAvailable(), \"transfer amount exceeds available spend limit\");\n                        // Update the available limit.\n                        _setSpendAvailable(spendAvailable().sub(etherValue));\n                    }\n                }\n            }\n        }\n\n        // If value is send across as a part of this executeTransaction, this will be sent to any payable\n        // destination. As a result enforceLimit if destination is not whitelisted.\n        if (!isWhitelisted[_destination]) {\n            // Require that the value is under remaining limit.\n            require(_value <= spendAvailable(), \"transfer amount exceeds available spend limit\");\n            // Update the available limit.\n            _setSpendAvailable(spendAvailable().sub(_value));\n        }\n\n        require(externalCall(_destination, _value, _data.length, _data), \"executing transaction failed\");\n\n        emit ExecutedTransaction(_destination, _value, _data);\n    }\n\n    /// @dev This function is taken from the Gnosis MultisigWallet: https://github.com/gnosis/MultiSigWallet/\n    /// @dev License: https://github.com/gnosis/MultiSigWallet/blob/master/LICENSE\n    /// @dev thanks :)\n    /// @dev This calls proxies arbitrary transactions to addresses\n    /// @param _destination address of the transaction\n    /// @param _value ETH amount in wei\n    /// @param _dataLength length of the transaction data\n    /// @param _data transaction payload binary\n    // call has been separated into its own function in order to take advantage\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\n    function externalCall(address _destination, uint _value, uint _dataLength, bytes _data) private returns (bool) {\n        bool result;\n        assembly {\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n            let d := add(_data, 32) // First 32 bytes are the padded length of data, so exclude that\n            result := call(\n                sub(gas, 34710),    // 34710 is the value that solidity is currently emitting\n                                    // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n                                    // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n               _destination,\n               _value,\n               d,\n               _dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n               x,\n               0                   // Output is ignored, therefore the output size is zero\n               )\n        }\n        return result;\n    }\n\n    /// @dev This function converts to an address\n    /// @param _bts bytes\n    /// @param _from start position\n    function bytesToAddress(bytes _bts, uint _from) private pure returns (address) {\n        require(_bts.length >= _from + 20, \"slicing out of range\");\n\n        uint160 m = 0;\n        uint160 b = 0;\n\n        for (uint8 i = 0; i < 20; i++) {\n            m *= 256;\n            b = uint160 (_bts[_from + i]);\n            m += (b);\n        }\n\n        return address(m);\n    }\n\n    /// @dev This function slicing bytes into uint32\n    /// @param _bts some bytes\n    /// @param _from  a start position\n    function bytesToUint32(bytes _bts, uint _from) private pure returns (uint32) {\n        require(_bts.length >= _from + 4, \"slicing out of range\");\n\n        uint32 m = 0;\n        uint32 b = 0;\n\n        for (uint8 i = 0; i < 4; i++) {\n            m *= 256;\n            b = uint32 (_bts[_from + i]);\n            m += (b);\n        }\n\n        return m;\n    }\n\n    /// @dev This function slices a uint\n    /// @param _bts some bytes\n    /// @param _from  a start position\n    // credit to https://ethereum.stackexchange.com/questions/51229/how-to-convert-bytes-to-uint-in-solidity\n    // and Nick Johnson https://ethereum.stackexchange.com/questions/4170/how-to-convert-a-uint-to-bytes-in-solidity/4177#4177\n    function sliceUint(bytes _bts, uint _from) private pure returns (uint) {\n        require(_bts.length >= _from + 32, \"slicing out of range\");\n\n        uint x;\n        assembly {\n           x := mload(add(_bts, add(0x20, _from)))\n        }\n\n        return x;\n    }\n}\n",
  "bytecode": "608060405234801561001057600080fd5b5060405160c0806148c88339810160408181528251602080850151838601516060870151608088015160a09098015160008054600160a060020a0319908116600160a060020a0380871691909117835560018c90556002805490921690891690811760a060020a60ff02191674010000000000000000000000000000000000000000881515021790915590895294880194909452855194979296919590949293928892889288928892889288928392899289927f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea59281900390910190a150506007819055426008819055600991909155600b8054600160a060020a0390961662010000026201000060b060020a0319909616959095179094555050600c55600e5550506706f05b59d3b20000600d819055600f5550505050505061476f806101596000396000f3006080604052600436106102035763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a78114610295578063100f23fd146102e05780631aa21fba146102fa5780631e8fb3541461035d5780632121dc751461039357806326d05ab2146103a8578063278ffa13146103bd578063294f4025146103d5578063295b32991461043a5780633af32abf1461045257806347b55a9d146104735780635658eff014610488578063584535691461049d5780635adc02ab146104b55780636137d670146104cd5780636ea6f0c3146104ed57806370332d8514610505578063715018a61461052c578063754628d0146105415780637c955583146105595780637fd004fa146105ae57806383d02803146105ce57806385cd9919146105e35780638da5cb5b146105f8578063a832145914610629578063aceaf92d1461063e578063afa0fd9b14610653578063beabacc814610668578063c8ecaddb14610692578063cbd2ac68146106a7578063ce0b5bd5146106bf578063d5666590146106d7578063d9ec3018146106ec578063dae37fac14610704578063de212bf314610719578063e3d670d71461072e578063e4682f001461074f578063e61c51ca14610767578063f2fde38b1461077f578063f3492915146107a0578063f4199bb8146107b8578063f9c470a5146107d8575b3615610259576040805160e560020a62461bcd02815260206004820152601060248201527f6461746120696e2066616c6c6261636b00000000000000000000000000000000604482015290519081900360640190fd5b6040805133815234602082015281517f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874929181900390910190a1005b3480156102a157600080fd5b506102cc7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19600435166107ed565b604080519115158252519081900360200190f35b3480156102ec57600080fd5b506102f8600435610835565b005b34801561030657600080fd5b506040805160206004602480358281013584810280870186019097528086526102f8968435600160a060020a031696369660449591949091019291829185019084908082843750949750610a379650505050505050565b34801561036957600080fd5b506102f860048035600160a060020a03169060248035916044359182019101356064351515610c85565b34801561039f57600080fd5b506102cc6113cb565b3480156103b457600080fd5b506102cc6113ed565b3480156103c957600080fd5b506102f86004356113f6565b3480156103e157600080fd5b506103ea61163e565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561042657818101518382015260200161040e565b505050509050019250505060405180910390f35b34801561044657600080fd5b506102f86004356116a0565b34801561045e57600080fd5b506102cc600160a060020a0360043516611856565b34801561047f57600080fd5b506103ea61186b565b34801561049457600080fd5b506102cc6118cb565b3480156104a957600080fd5b506102f86004356118d9565b3480156104c157600080fd5b506102f8600435611a01565b3480156104d957600080fd5b506102f86004803560248101910135611cc2565b3480156104f957600080fd5b506102f8600435611f6e565b34801561051157600080fd5b5061051a612131565b60408051918252519081900360200190f35b34801561053857600080fd5b506102f8612137565b34801561054d57600080fd5b506102f860043561225d565b34801561056557600080fd5b506040805160206004803580820135838102808601850190965280855261051a953695939460249493850192918291850190849080828437509497506123f89650505050505050565b3480156105ba57600080fd5b506102f860048035602481019101356124a5565b3480156105da57600080fd5b5061051a6128be565b3480156105ef57600080fd5b506102cc6128c4565b34801561060457600080fd5b5061060d6128cd565b60408051600160a060020a039092168252519081900360200190f35b34801561063557600080fd5b5061051a6128dc565b34801561064a57600080fd5b5061051a6128ff565b34801561065f57600080fd5b506102cc612905565b34801561067457600080fd5b506102f8600160a060020a0360043581169060243516604435612914565b34801561069e57600080fd5b5061051a612e98565b3480156106b357600080fd5b506102f8600435612e9e565b3480156106cb57600080fd5b506102f860043561318b565b3480156106e357600080fd5b506102cc613391565b3480156106f857600080fd5b506102f860043561339a565b34801561071057600080fd5b5061051a6134b4565b34801561072557600080fd5b506102cc6134d7565b34801561073a57600080fd5b5061051a600160a060020a03600435166134e5565b34801561075b57600080fd5b506102f8600435613592565b34801561077357600080fd5b506102f8600435613715565b34801561078b57600080fd5b506102f8600160a060020a03600435166139b7565b3480156107ac57600080fd5b506102f8600435613b91565b3480156107c457600080fd5b506102f86004803560248101910135613d22565b3480156107e457600080fd5b506102cc614034565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f01ffc9a700000000000000000000000000000000000000000000000000000000145b919050565b61083e33614042565b1515610882576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614704833981519152604482015290519081900360640190fd5b60065460ff161515610904576040805160e560020a62461bcd02815260206004820152602960248201527f77686974656c697374206164646974696f6e20686173206e6f74206265656e2060448201527f7375626d69747465640000000000000000000000000000000000000000000000606482015290519081900360840190fd5b610967600480548060200260200160405190810160405280929190818152602001828054801561095d57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161093f575b50505050506123f8565b81146109e3576040805160e560020a62461bcd02815260206004820152603560248201527f68617368206f66207468652070656e64696e672077686974656c69737420616460448201527f646974696f6e20646f6573206e6f74206d617463680000000000000000000000606482015290519081900360840190fd5b6109ef6004600061460a565b6006805460ff19169055604080513381526020810183905281517f7794eff834d760583543e6e510e717a5e66d2c064e225f4db448343c3e66afcf929181900390910190a150565b600080610a42614202565b1515610a86576040805160e560020a62461bcd02815260206004820152601660248201526000805160206146e4833981519152604482015290519081900360640190fd5b82511515610ade576040805160e560020a62461bcd02815260206004820152601f60248201527f61737365742061727261792073686f756c64206265206e6f6e2d656d70747900604482015290519081900360640190fd5b600091505b8251821015610bf0578251600090849084908110610afd57fe5b90602001906020020151600160a060020a03161415610b1e57503031610bc3565b8282815181101515610b2c57fe5b6020908102909101810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216926370a08231926024808401938290030181600087803b158015610b9457600080fd5b505af1158015610ba8573d6000803e3d6000fd5b505050506040513d6020811015610bbe57600080fd5b505190505b610be5848484815181101515610bd557fe5b9060200190602002015183612914565b600190910190610ae3565b7fd4f62f23021706247dcffea245d104ae7ddaec7f23acf3d11d7136d5de6a69ad84846040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610c6b578181015183820152602001610c53565b50505050905001935050505060405180910390a150505050565b6000806000806000610c95614202565b1515610cd9576040805160e560020a62461bcd02815260206004820152601660248201526000805160206146e4833981519152604482015290519081900360640190fd5b8515610d7257610cf18a600160a060020a0316614213565b1515610d6d576040805160e560020a62461bcd02815260206004820152603760248201527f657865637574655472616e73616374696f6e20666f72206120636f6e7472616360448201527f743a2063616c6c20746f206e6f6e2d636f6e7472616374000000000000000000606482015290519081900360840190fd5b610dff565b610d848a600160a060020a0316614213565b15610dff576040805160e560020a62461bcd02815260206004820152603760248201527f657865637574655472616e73616374696f6e20666f722061206e6f6e2d636f6e60448201527f74726163743a2063616c6c20746f20636f6e7472616374000000000000000000606482015290519081900360840190fd5b6004871061120257610e4388888080601f016020809104026020016040519081016040528093929190818152602001838380828437506000945061421b9350505050565b945063ffffffff851663a9059cbb1480610e66575063ffffffff851663095ea7b3145b15611202576044871015610eea576040805160e560020a62461bcd02815260206004820152602b60248201527f696e76616c6964207472616e73666572202f20617070726f7665207472616e7360448201527f616374696f6e2064617461000000000000000000000000000000000000000000606482015290519081900360840190fd5b610f2688888080601f01602080910402602001604051908101604052809392919081815260200183838082843750602494506142f49350505050565b9350610f6488888080601f01602080910402602001604051908101604052809392919081815260200183838082843750601094506143679350505050565b600160a060020a03811660009081526003602052604090205490935060ff16151561120257600b54600c54604080517f0178b8bf00000000000000000000000000000000000000000000000000000000815260048101929092525162010000909204600160a060020a031691630178b8bf916024808201926020929091908290030181600087803b158015610ff857600080fd5b505af115801561100c573d6000803e3d6000fd5b505050506040513d602081101561102257600080fd5b5051600c54604080517f3b3b57de000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b15801561108b57600080fd5b505af115801561109f573d6000803e3d6000fd5b505050506040513d60208110156110b557600080fd5b5051604080517f67c6e39c000000000000000000000000000000000000000000000000000000008152600160a060020a038d811660048301526024820188905282519316926367c6e39c926044808401939192918290030181600087803b15801561111f57600080fd5b505af1158015611133573d6000803e3d6000fd5b505050506040513d604081101561114957600080fd5b50805160209091015190925090508115611202576111656134b4565b8111156111e2576040805160e560020a62461bcd02815260206004820152602d60248201527f7472616e7366657220616d6f756e74206578636565647320617661696c61626c60448201527f65207370656e64206c696d697400000000000000000000000000000000000000606482015290519081900360840190fd5b6112026111fd826111f16134b4565b9063ffffffff61443616565b61444d565b600160a060020a038a1660009081526003602052604090205460ff1615156112b85761122c6134b4565b8911156112a9576040805160e560020a62461bcd02815260206004820152602d60248201527f7472616e7366657220616d6f756e74206578636565647320617661696c61626c60448201527f65207370656e64206c696d697400000000000000000000000000000000000000606482015290519081900360840190fd5b6112b86111fd8a6111f16134b4565b6112f78a8a8a8a90508b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843750614452945050505050565b151561134d576040805160e560020a62461bcd02815260206004820152601c60248201527f657865637574696e67207472616e73616374696f6e206661696c656400000000604482015290519081900360640190fd5b7faf022f6b53b11c364e2dfc0aea08eb9416c94f2661451ea82ead8831385617a68a8a8a8a6040518085600160a060020a0316600160a060020a03168152602001848152602001806020018281038252848482818152602001925080828437604051920182900397509095505050505050a150505050505050505050565b60025474010000000000000000000000000000000000000000900460ff165b90565b60065460ff1681565b6113ff33614042565b1515611443576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614704833981519152604482015290519081900360640190fd5b60115460ff1615156114c5576040805160e560020a62461bcd02815260206004820152602360248201527f746f70207570206c696d697420686173206e6f74206265656e207375626d697460448201527f7465640000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60105466038d7ea4c68000111580156114e857506706f05b59d3b2000060105411155b1515611564576040805160e560020a62461bcd02815260206004820152602a60248201527f746f7020757020616d6f756e74206973206f75747369646520746865206d696e60448201527f2f6d61782072616e676500000000000000000000000000000000000000000000606482015290519081900360840190fd5b60105481146115e3576040805160e560020a62461bcd02815260206004820152602e60248201527f636f6e6669726d656420616e642070656e64696e6720746f707570206c696d6960448201527f7420617265206e6f742073616d65000000000000000000000000000000000000606482015290519081900360840190fd5b6115ee601054614475565b60105460408051338152602081019290925280517fb0b775ba506691c666928dfe7120eb5ccedd17f4554dc85ce86eb2b4cc437e369281900390910190a15060006010556011805460ff19169055565b6060600580548060200260200160405190810160405280929190818152602001828054801561169657602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611678575b5050505050905090565b6116a8614202565b15156116ec576040805160e560020a62461bcd02815260206004820152601660248201526000805160206146e4833981519152604482015290519081900360640190fd5b601154610100900460ff161515611773576040805160e560020a62461bcd02815260206004820152602560248201527f746f70207570206c696d697420686173206e6f74206265656e20696e6974696160448201527f6c697a6564000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8066038d7ea4c680001115801561179257506706f05b59d3b200008111155b151561180e576040805160e560020a62461bcd02815260206004820152602d60248201527f746f7020757020616d6f756e74206973206f757473696465206f66207468652060448201527f6d696e2f6d61782072616e676500000000000000000000000000000000000000606482015290519081900360840190fd5b60108190556011805460ff191660011790556040805182815290517f9312377d84b68703929715872be9f0309065e102db6152de9c0587d9e294216d9181900360200190a150565b60036020526000908152604090205460ff1681565b6060600480548060200260200160405190810160405280929190818152602001828054801561169657602002820191906000526020600020908154600160a060020a03168152600190910190602001808311611678575050505050905090565b600b54610100900460ff1681565b6118e1614202565b1515611925576040805160e560020a62461bcd02815260206004820152601660248201526000805160206146e4833981519152604482015290519081900360640190fd5b600b54610100900460ff16156119ab576040805160e560020a62461bcd02815260206004820152602860248201527f7370656e64206c696d69742068617320616c7265616479206265656e20696e6960448201527f7469616c697a6564000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6119b481614496565b600b805461ff001916610100179055604080513381526020810183905281517f068f112e5ec923d412be64779fe69e0fcbb6784c6617e94cccc8fd348f2e0f21929181900390910190a150565b6000611a0c33614042565b1515611a50576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614704833981519152604482015290519081900360640190fd5b60065460ff161515611ad2576040805160e560020a62461bcd02815260206004820152602960248201527f77686974656c697374206164646974696f6e20686173206e6f74206265656e2060448201527f7375626d69747465640000000000000000000000000000000000000000000000606482015290519081900360840190fd5b611b33600480548060200260200160405190810160405280929190818152602001828054801561095d57602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161093f5750505050506123f8565b8214611baf576040805160e560020a62461bcd02815260206004820152603360248201527f68617368206f66207468652070656e64696e672077686974656c69737420616460448201527f646974696f6e20646f206e6f74206d6174636800000000000000000000000000606482015290519081900360840190fd5b5060005b600454811015611c0e57600160036000600484815481101515611bd257fe5b600091825260208083209190910154600160a060020a031683528201929092526040019020805460ff1916911515919091179055600101611bb3565b7fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a3360046040518083600160a060020a0316600160a060020a03168152602001806020018281038252838181548152602001915080548015611c9957602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611c7b575b5050935050505060405180910390a1611cb46004600061460a565b50506006805460ff19169055565b611cca614202565b1515611d0e576040805160e560020a62461bcd02815260206004820152601660248201526000805160206146e4833981519152604482015290519081900360640190fd5b60065460ff16158015611d295750600654610100900460ff16155b1515611da5576040805160e560020a62461bcd02815260206004820152602e60248201527f77686974656c697374206f7065726174696f6e2068617320616c72656164792060448201527f6265656e207375626d6974746564000000000000000000000000000000000000606482015290519081900360840190fd5b60065462010000900460ff161515611e15576040805160e560020a62461bcd02815260206004820152602260248201527f77686974656c69737420686173206e6f74206265656e20696e697469616c697a604482015260f260020a61195902606482015290519081900360840190fd5b60008111611e92576040805160e560020a62461bcd028152602060048201526024808201527f7375626d69747465642077686974656c6973742072656d6f76616c206973206560448201527f6d70747900000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b611e9e60058383614628565b506006805461ff00191661010017905560058054604080516020808402820181019092528281527ffbc0e5ca6c7e4858daf0fdb185ef5186203e74ec9c64737e93c0aeaec596e1d19386938693611f339392919083018282801561095d57602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161093f5750505050506123f8565b604080516020808201849052828252918101849052908190606082019086908602808284376040519201829003965090945050505050a15050565b611f76614202565b1515611fba576040805160e560020a62461bcd02815260206004820152601660248201526000805160206146e4833981519152604482015290519081900360640190fd5b601154610100900460ff1615612040576040805160e560020a62461bcd02815260206004820152602960248201527f746f70207570206c696d69742068617320616c7265616479206265656e20696e60448201527f697469616c697a65640000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8066038d7ea4c680001115801561205f57506706f05b59d3b200008111155b15156120db576040805160e560020a62461bcd02815260206004820152602d60248201527f746f7020757020616d6f756e74206973206f757473696465206f66207468652060448201527f6d696e2f6d61782072616e676500000000000000000000000000000000000000606482015290519081900360840190fd5b6120e481614475565b6011805461ff001916610100179055604080513381526020810183905281517fb0b775ba506691c666928dfe7120eb5ccedd17f4554dc85ce86eb2b4cc437e36929181900390910190a150565b60105481565b61213f614202565b1515612183576040805160e560020a62461bcd02815260206004820152601660248201526000805160206146e4833981519152604482015290519081900360640190fd5b60025474010000000000000000000000000000000000000000900460ff1615156121f7576040805160e560020a62461bcd02815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b60025460408051600160a060020a0390921682526000602083015280517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea59281900390910190a16002805473ffffffffffffffffffffffffffffffffffffffff19169055565b61226633614042565b15156122aa576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614704833981519152604482015290519081900360640190fd5b60115460ff16151561232c576040805160e560020a62461bcd02815260206004820152602160248201527f6120746f707570206c696d69742068617320746f206265207375626d6974746560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60105481146123ab576040805160e560020a62461bcd02815260206004820152602e60248201527f70656e64696e6720616e642063616e63656c6c656420746f70207570206c696d60448201527f69747320646f6e74206d61746368000000000000000000000000000000000000606482015290519081900360840190fd5b60006010556011805460ff19169055604080513381526020810183905281517f25d36a8351febb568fa2c8f5a167990291168552d0f3381a618eb120f42d91f4929181900390910190a150565b60008160405160200180828051906020019060200280838360005b8381101561242b578181015183820152602001612413565b505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106124735780518252601f199092019160209182019101612454565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b6124ad614202565b15156124f1576040805160e560020a62461bcd02815260206004820152601660248201526000805160206146e4833981519152604482015290519081900360640190fd5b60065460ff1615801561250c5750600654610100900460ff16155b1515612588576040805160e560020a62461bcd02815260206004820152602e60248201527f77686974656c697374206f7065726174696f6e2068617320616c72656164792060448201527f6265656e207375626d6974746564000000000000000000000000000000000000606482015290519081900360840190fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284375060009450505050505b81518110156126f4576125ca6128cd565b600160a060020a031682828151811015156125e157fe5b60209081029091010151600160a060020a0316141561265e576040805160e560020a62461bcd02815260206004820152602d602482015260008051602061472483398151915260448201527f6f776e6572206164647265737300000000000000000000000000000000000000606482015290519081900360840190fd5b815160009083908390811061266f57fe5b60209081029091010151600160a060020a031614156126ec576040805160e560020a62461bcd02815260206004820152602c602482015260008051602061472483398151915260448201527f7a65726f20616464726573730000000000000000000000000000000000000000606482015290519081900360840190fd5b6001016125b9565b60065462010000900460ff161515612764576040805160e560020a62461bcd02815260206004820152602260248201527f77686974656c69737420686173206e6f74206265656e20696e697469616c697a604482015260f260020a61195902606482015290519081900360840190fd5b600083116127e2576040805160e560020a62461bcd02815260206004820152602360248201527f70656e64696e672077686974656c697374206164646974696f6e20697320656d60448201527f7074790000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6127ee60048585614628565b506006805460ff1916600117905560048054604080516020808402820181019092528281527f9c80b3b5f68b3e017766d59e8d09b34efe6462b05c398f35cab9e271d9bc3b9c93889388936128819392919083018282801561095d57602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161093f5750505050506123f8565b604080516020808201849052828252918101849052908190606082019086908602808284376040519201829003965090945050505050a150505050565b600d5481565b60115460ff1681565b600254600160a060020a031690565b6000600e5462015180014211156128f65750600d546113ea565b50600f546113ea565b60075481565b60065462010000900460ff1681565b60008061291f614202565b1515612963576040805160e560020a62461bcd02815260206004820152601660248201526000805160206146e4833981519152604482015290519081900360640190fd5b828015156129bb576040805160e560020a62461bcd02815260206004820152601d60248201527f70726f76696465642076616c75652063616e6e6f74206265207a65726f000000604482015290519081900360640190fd5b600160a060020a0386161515612a1b576040805160e560020a62461bcd02815260206004820181905260248201527f5f746f20616464726573732063616e6e6f742062652073657420746f20307830604482015290519081900360640190fd5b600160a060020a03861660009081526003602052604090205460ff161515612cd657612a456144b6565b600160a060020a03851615612c2657600b54600c54604080517f0178b8bf00000000000000000000000000000000000000000000000000000000815260048101929092525162010000909204600160a060020a031691630178b8bf916024808201926020929091908290030181600087803b158015612ac357600080fd5b505af1158015612ad7573d6000803e3d6000fd5b505050506040513d6020811015612aed57600080fd5b5051600c54604080517f3b3b57de000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b158015612b5657600080fd5b505af1158015612b6a573d6000803e3d6000fd5b505050506040513d6020811015612b8057600080fd5b5051604080517f67c6e39c000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301526024820188905282519316926367c6e39c926044808401939192918290030181600087803b158015612bea57600080fd5b505af1158015612bfe573d6000803e3d6000fd5b505050506040513d6040811015612c1457600080fd5b50805160209091015193509150612c2a565b8392505b8180612c3d5750600160a060020a038516155b15612cd657612c4a6134b4565b831115612cc7576040805160e560020a62461bcd02815260206004820152602d60248201527f7472616e7366657220616d6f756e74206578636565647320617661696c61626c60448201527f65207370656e64206c696d697400000000000000000000000000000000000000606482015290519081900360840190fd5b612cd66111fd846111f16134b4565b600160a060020a03851615612e0e5784600160a060020a031663a9059cbb87866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015612d6157600080fd5b505af1158015612d75573d6000803e3d6000fd5b505050506040513d6020811015612d8b57600080fd5b50511515612e09576040805160e560020a62461bcd02815260206004820152602560248201527f455243323020746f6b656e207472616e736665722077617320756e737563636560448201527f737366756c000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b612e46565b604051600160a060020a0387169085156108fc029086906000818181858888f19350505050158015612e44573d6000803e3d6000fd5b505b60408051600160a060020a0380891682528716602082015280820186905290517fd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee9181900360600190a1505050505050565b600a5481565b6000612ea933614042565b1515612eed576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614704833981519152604482015290519081900360640190fd5b600654610100900460ff161515612f74576040805160e560020a62461bcd02815260206004820152602860248201527f77686974656c6973742072656d6f76616c20686173206e6f74206265656e207360448201527f75626d6974746564000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b612fd5600580548060200260200160405190810160405280929190818152602001828054801561095d57602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161093f5750505050506123f8565b8214613077576040805160e560020a62461bcd02815260206004820152604760248201527f68617368206f66207468652070656e64696e672077686974656c69737420726560448201527f6d6f76616c20646f6573206e6f74206d617463682074686520636f6e6669726d60648201527f6564206861736800000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b5060005b6005548110156130d65760006003600060058481548110151561309a57fe5b600091825260208083209190910154600160a060020a031683528201929092526040019020805460ff191691151591909117905560010161307b565b7fd218c430fa348f4ce67791021b6b89c0c3eacd4ead1d8f5b83c60038ec28249b3360056040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818154815260200191508054801561316157602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311613143575b5050935050505060405180910390a161317c6005600061460a565b50506006805461ff0019169055565b61319433614042565b15156131d8576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614704833981519152604482015290519081900360640190fd5b600654610100900460ff16151561325f576040805160e560020a62461bcd02815260206004820152602860248201527f77686974656c6973742072656d6f76616c20686173206e6f74206265656e207360448201527f75626d6974746564000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6132c0600580548060200260200160405190810160405280929190818152602001828054801561095d57602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161093f5750505050506123f8565b811461333c576040805160e560020a62461bcd02815260206004820152603460248201527f68617368206f66207468652070656e64696e672077686974656c69737420726560448201527f6d6f76616c20646f6573206e6f74206d61746368000000000000000000000000606482015290519081900360840190fd5b6133486005600061460a565b6006805461ff0019169055604080513381526020810183905281517f13c935eb475aa0f6e931fece83e2ac44569ce2d53460d29a6dedab40b965c8a3929181900390910190a150565b600b5460ff1681565b6133a2614202565b15156133e6576040805160e560020a62461bcd02815260206004820152601660248201526000805160206146e4833981519152604482015290519081900360640190fd5b600b54610100900460ff16151561346c576040805160e560020a62461bcd028152602060048201526024808201527f7370656e64206c696d697420686173206e6f74206265656e20696e697469616c60448201527f697a656400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600a819055600b805460ff191660011790556040805182815290517ff7155f467a69de148f41fc3c39089f07e9bff6d91519f3d69d46936643d5197a9181900360200190a150565b600060085462015180014211156134ce57506007546113ea565b506009546113ea565b600654610100900460ff1681565b6000600160a060020a0382161561358a57604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561355757600080fd5b505af115801561356b573d6000803e3d6000fd5b505050506040513d602081101561358157600080fd5b50519050610830565b503031610830565b61359b33614042565b15156135df576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614704833981519152604482015290519081900360640190fd5b600b5460ff161515613649576040805160e560020a62461bcd02815260206004820152602260248201527f61207370656e646c696d6974206e6565647320746f206265207375626d697474604482015260f260020a61195902606482015290519081900360840190fd5b600a5481146136c8576040805160e560020a62461bcd02815260206004820152602d60248201527f70656e64696e6720616e642063616e63656c6c6564207370656e64206c696d6960448201527f747320646f6e74206d6174636800000000000000000000000000000000000000606482015290519081900360840190fd5b6000600a55600b805460ff19169055604080513381526020810183905281517f83e15565cfc238cf8d4e7a0a2cefeda3c9d6621e44a4d2ee96034ea403648b6a929181900390910190a150565b8080151561376d576040805160e560020a62461bcd02815260206004820152601d60248201527f70726f76696465642076616c75652063616e6e6f74206265207a65726f000000604482015290519081900360640190fd5b613775614202565b80613784575061378433614042565b1515613800576040805160e560020a62461bcd02815260206004820152602b60248201527f73656e646572206973206e65697468657220616e206f776e6572206e6f72206160448201527f20636f6e74726f6c6c6572000000000000000000000000000000000000000000606482015290519081900360840190fd5b613808614531565b600f541515613887576040805160e560020a62461bcd02815260206004820152602560248201527f617661696c61626c6520746f70207570206c696d69742063616e6e6f7420626560448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600f54821115613907576040805160e560020a62461bcd02815260206004820152603160248201527f617661696c61626c6520746f70207570206c696d6974206c657373207468616e60448201527f20616d6f756e742070617373656420696e000000000000000000000000000000606482015290519081900360840190fd5b600f5461391a908363ffffffff61443616565b600f556139256128cd565b600160a060020a03166108fc839081150290604051600060405180830381858888f1935050505015801561395d573d6000803e3d6000fd5b507f611b7c0d84fda988026215bef9b3e4d81cbceced7e679be6d5e044b588467c0e326139886128cd565b60408051600160a060020a03938416815291909216602082015280820185905290519081900360600190a15050565b6139bf614202565b1515613a03576040805160e560020a62461bcd02815260206004820152601660248201526000805160206146e4833981519152604482015290519081900360640190fd5b60025474010000000000000000000000000000000000000000900460ff161515613a77576040805160e560020a62461bcd02815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b600160a060020a0381161515613afd576040805160e560020a62461bcd02815260206004820152602360248201527f6f776e65722063616e6e6f742062652073657420746f207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6002805474ff000000000000000000000000000000000000000019811690915560408051600160a060020a039283168152918316602083015280517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea59281900390910190a16002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b613b9a33614042565b1515613bde576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020614704833981519152604482015290519081900360640190fd5b600b5460ff161515613c48576040805160e560020a62461bcd02815260206004820152602260248201527f7370656e64206c696d697420686173206e6f74206265656e207375626d697474604482015260f260020a61195902606482015290519081900360840190fd5b600a548114613cc7576040805160e560020a62461bcd02815260206004820152602f60248201527f636f6e6669726d656420616e64207375626d6974746564207370656e64206c6960448201527f6d69747320646f6e74206d617463680000000000000000000000000000000000606482015290519081900360840190fd5b613cd2600a54614496565b600a5460408051338152602081019290925280517f068f112e5ec923d412be64779fe69e0fcbb6784c6617e94cccc8fd348f2e0f219281900390910190a150600b805460ff191690556000600a55565b6000613d2c614202565b1515613d70576040805160e560020a62461bcd02815260206004820152601660248201526000805160206146e4833981519152604482015290519081900360640190fd5b8282808060200260200160405190810160405280939291908181526020018383602002808284375060009450505050505b8151811015613edc57613db26128cd565b600160a060020a03168282815181101515613dc957fe5b60209081029091010151600160a060020a03161415613e46576040805160e560020a62461bcd02815260206004820152602d602482015260008051602061472483398151915260448201527f6f776e6572206164647265737300000000000000000000000000000000000000606482015290519081900360840190fd5b8151600090839083908110613e5757fe5b60209081029091010151600160a060020a03161415613ed4576040805160e560020a62461bcd02815260206004820152602c602482015260008051602061472483398151915260448201527f7a65726f20616464726573730000000000000000000000000000000000000000606482015290519081900360840190fd5b600101613da1565b60065462010000900460ff1615613f63576040805160e560020a62461bcd02815260206004820152602660248201527f77686974656c6973742068617320616c7265616479206265656e20696e69746960448201527f616c697a65640000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600092505b83831015613fbf57600160036000878787818110613f8257fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff191691151591909117905560019290920191613f68565b6006805462ff0000191662010000179055604080513380825260208083018481529383018890527fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a93919289928992606083019085908502808284376040519201829003965090945050505050a15050505050565b601154610100900460ff1681565b60008054600154604080517f0178b8bf000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a0390921691630178b8bf9160248082019260209290919082900301818787803b1580156140ac57600080fd5b505af11580156140c0573d6000803e3d6000fd5b505050506040513d60208110156140d657600080fd5b5051600154604080517f3b3b57de000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a0390921691633b3b57de916024808201926020929091908290030181600087803b15801561413f57600080fd5b505af1158015614153573d6000803e3d6000fd5b505050506040513d602081101561416957600080fd5b5051604080517fb429afeb000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163b429afeb9160248083019260209291908290030181600087803b1580156141d057600080fd5b505af11580156141e4573d6000803e3d6000fd5b505050506040513d60208110156141fa57600080fd5b505192915050565b600254600160a060020a0316331490565b6000903b1190565b6000806000808460040186511015151561427f576040805160e560020a62461bcd02815260206004820152601460248201527f736c6963696e67206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b5060009150819050805b60048160ff1610156142ea5761010083029250858160ff1686018151811015156142af57fe5b01602001517f010000000000000000000000000000000000000000000000000000000000000090819004810204928301929150600101614289565b5090949350505050565b60008082602001845110151515614355576040805160e560020a62461bcd02815260206004820152601460248201527f736c6963696e67206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b505081810160200151805b5092915050565b600080600080846014018651101515156143cb576040805160e560020a62461bcd02815260206004820152601460248201527f736c6963696e67206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b5060009150819050805b60148160ff1610156142ea5761010083029250858160ff1686018151811015156143fb57fe5b01602001517f0100000000000000000000000000000000000000000000000000000000000000908190048102049283019291506001016143d5565b6000808383111561444657600080fd5b5050900390565b600955565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b61447d614531565b600d819055600f5481101561449357600d54600f555b50565b61449e6144b6565b60078190556009548110156144935760075460095550565b6008546000906144cf906201518063ffffffff6145a016565b421115614493576144fe620151806144f26008544261443690919063ffffffff16565b9063ffffffff6145b916565b9050614525614516826201518063ffffffff6145dc16565b6008549063ffffffff6145a016565b60085560075460095550565b600e5460009061454a906201518063ffffffff6145a016565b4211156144935761456d620151806144f2600e544261443690919063ffffffff16565b9050614594614585826201518063ffffffff6145dc16565b600e549063ffffffff6145a016565b600e55600d54600f5550565b6000828201838110156145b257600080fd5b9392505050565b6000808083116145c857600080fd5b82848115156145d357fe5b04949350505050565b6000808315156145ef5760009150614360565b508282028284828115156145ff57fe5b04146145b257600080fd5b50805460008255906000526020600020908101906144939190614698565b828054828255906000526020600020908101928215614688579160200282015b8281111561468857815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03843516178255602090920191600190910190614648565b506146949291506146b2565b5090565b6113ea91905b80821115614694576000815560010161469e565b6113ea91905b8082111561469457805473ffffffffffffffffffffffffffffffffffffffff191681556001016146b8560073656e646572206973206e6f7420616e206f776e65720000000000000000000073656e646572206973206e6f74206120636f6e74726f6c6c657200000000000070726f76696465642077686974656c69737420636f6e7461696e732074686520a165627a7a72305820f43df934fca1a4c3cf7ae4981033783ccf72d8b707e1175e59a95fadacb12c42002900000000000000000000000002b57951be617c3b47cb337ac7e333e69453c05f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b641c0900086ccfffea93c7d8b16693544f9f4ce389c6aeaa13ba5df602aa73147f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936970000000000000000000000000000000000000000000000000de0b6b3a7640000",
  "constructorArguments": "00000000000000000000000002b57951be617c3b47cb337ac7e333e69453c05f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b641c0900086ccfffea93c7d8b16693544f9f4ce389c6aeaa13ba5df602aa73147f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936970000000000000000000000000000000000000000000000000de0b6b3a7640000"
}