{
  "address": "0xcb1310e2b7df0a8a5849680e98f6b04d2cebcdd6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PublicBattle",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-18\n*/\n\npragma solidity ^0.4.19;\n/*\nGame: CryptoPokemon\nDomain: CryptoPokemon.com\nDev: CryptoPokemon Team\n*/\n\nlibrary SafeMath {\n\n/**\n* @dev Multiplies two numbers, throws on overflow.\n*/\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\nif (a == 0) {\nreturn 0;\n}\nuint256 c = a * b;\nassert(c / a == b);\nreturn c;\n}\n\n/**\n* @dev Integer division of two numbers, truncating the quotient.\n*/\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n// assert(b > 0); // Solidity automatically throws when dividing by 0\nuint256 c = a / b;\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\nreturn c;\n}\n\n/**\n* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n*/\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\nassert(b <= a);\nreturn a - b;\n}\n\n/**\n* @dev Adds two numbers, throws on overflow.\n*/\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\nuint256 c = a + b;\nassert(c >= a);\nreturn c;\n}\n}\n\ncontract PokemonInterface {\nfunction levels(uint256 _pokemonId) external view returns (\nuint256 level\n);\n\nfunction getPokemonOwner(uint _pokemonId)external view returns (\naddress currentOwner\n);\n}\n\ncontract PublicBattle {\nusing SafeMath for uint256;\n//Guess parameter\nuint public totalGuess;\nuint public totalPool;\nuint public publicBattlepm1;\nuint public publicBattlepm2;\naddress guesser;\nbool public publicbattlestart;\nmapping(uint => address[]) pokemonGuessPlayers;\nmapping(uint => uint) pokemonGuessNumber;\nmapping(uint => uint) pokemonGuessPrize;\nmapping(address => uint) playerGuessPM1Number;\nmapping(address => uint) playerGuessPM2Number;\nmapping(uint => uint) battleCD;\nuint public pbWinner;\n\naddress cpAddress = 0x77fA1D1Ded3F4bed737e9aE870a6f3605445df9c;\nPokemonInterface pokemonContract = PokemonInterface(cpAddress);\n\naddress contractCreator;\naddress devFeeAddress;\n\nfunction PublicBattle () public {\n\ncontractCreator = msg.sender;\ndevFeeAddress = 0xFb2D26b0caa4C331bd0e101460ec9dbE0A4783A4;\npublicbattlestart = false;\npublicBattlepm1 = 99999;\npublicBattlepm2 = 99999;\npbWinner = 99999;\nisPaused = false;\ntotalPool = 0;\ninitialPokemonInfo();\n}\n\nstruct Battlelog {\nuint pokemonId1;\nuint pokemonId2;\nuint result;\n\n}\nBattlelog[] battleresults;\n\nstruct PokemonDetails {\nstring pokemonName;\nuint pokemonType;\nuint total;\n}\nPokemonDetails[] pokemoninfo;\n\n//modifiers\nmodifier onlyContractCreator() {\nrequire (msg.sender == contractCreator);\n_;\n}\n\n\n//Owners and admins\n\n/* Owner */\nfunction setOwner (address _owner) onlyContractCreator() public {\ncontractCreator = _owner;\n}\n\n\n// Adresses\nfunction setdevFeeAddress (address _devFeeAddress) onlyContractCreator() public {\ndevFeeAddress = _devFeeAddress;\n}\n\nbool isPaused;\n/*\nWhen countdowns and events happening, use the checker.\n*/\nfunction pauseGame() public onlyContractCreator {\nisPaused = true;\n}\nfunction unPauseGame() public onlyContractCreator {\nisPaused = false;\n}\nfunction GetGamestatus() public view returns(bool) {\nreturn(isPaused);\n}\n\n//set withdraw only use when bugs happned.\nfunction withdrawAmount (uint256 _amount) onlyContractCreator() public {\nmsg.sender.transfer(_amount);\ntotalPool = totalPool - _amount;\n}\n\nfunction initialBattle(uint _pokemonId1,uint _pokemonId2) public{\nrequire(pokemonContract.getPokemonOwner(_pokemonId1) == msg.sender);\nrequire(isPaused == false);\nrequire(_pokemonId1 != _pokemonId2);\nrequire(getPokemonCD(_pokemonId1) == 0);\nassert(publicbattlestart != true);\npublicBattlepm1 = _pokemonId1;\npublicBattlepm2 = _pokemonId2;\npublicbattlestart = true;\npokemonGuessNumber[publicBattlepm1]=0;\npokemonGuessNumber[publicBattlepm2]=0;\npokemonGuessPrize[publicBattlepm1]=0;\npokemonGuessPrize[publicBattlepm2]=0;\nisPaused = false;\nbattleCD[_pokemonId1] = now + 12 * 1 hours;\n// add 1% of balance to contract\ntotalGuess = totalPool.div(100);\n//trigger time\n\n}\nfunction donateToPool() public payable{\n// The pool will make this game maintain forever, 1% of prize goto each publicbattle and\n// gain 1% of each publicbattle back before distributePrizes\nrequire(msg.value >= 0);\ntotalPool = totalPool + msg.value;\n\n}\n\nfunction guess(uint _pokemonId) public payable{\nrequire(isPaused == false);\nassert(msg.value > 0);\nassert(_pokemonId == publicBattlepm1 || _pokemonId == publicBattlepm2);\n\nuint256 calcValue = msg.value;\nuint256 cutFee = calcValue.div(16);\n\ncalcValue = calcValue - cutFee;\n\n// %3 to the Owner of the card and %3 to dev\npokemonContract.getPokemonOwner(_pokemonId).transfer(cutFee.div(2));\ndevFeeAddress.transfer(cutFee.div(2));\n\n// Total amount\ntotalGuess += calcValue;\n\n// Each guess time\npokemonGuessNumber[_pokemonId]++;\n\n\n// Each amount\npokemonGuessPrize[_pokemonId] = pokemonGuessPrize[_pokemonId] + calcValue;\n\n\n// mapping sender and amount\n\nif(_pokemonId == publicBattlepm1){\n\nif(playerGuessPM1Number[msg.sender] != 0){\n\nplayerGuessPM1Number[msg.sender] = playerGuessPM1Number[msg.sender] + calcValue;\n\n}else{\n\npokemonGuessPlayers[_pokemonId].push(msg.sender);\nplayerGuessPM1Number[msg.sender]  = calcValue;\n}\n\n}else{\n\n\nif(playerGuessPM2Number[msg.sender] != 0){\n\nplayerGuessPM2Number[msg.sender] = playerGuessPM2Number[msg.sender] + calcValue;\n\n}else{\n\npokemonGuessPlayers[_pokemonId].push(msg.sender);\nplayerGuessPM2Number[msg.sender]  = calcValue;\n}\n\n}\n\nif(pokemonGuessNumber[publicBattlepm1] + pokemonGuessNumber[publicBattlepm2] > 20){\nstartpublicBattle(publicBattlepm1, publicBattlepm2);\n}\n\n}\n\nfunction startpublicBattle(uint _pokemon1, uint _pokemon2) internal {\nrequire(publicBattlepm1 != 99999 && publicBattlepm2 != 99999);\nuint256 i = uint256(sha256(block.timestamp, block.number-i-1)) % 100 +1;\nuint256 threshold = dataCalc(_pokemon1, _pokemon2);\n\nif(i <= threshold){\npbWinner = publicBattlepm1;\n}else{\npbWinner = publicBattlepm2;\n}\nbattleresults.push(Battlelog(_pokemon1,_pokemon2,pbWinner));\ndistributePrizes();\n\n}\n\nfunction distributePrizes() internal{\n// return 1% to the balance to keep public battle forever\ntotalGuess = totalGuess - totalGuess.div(100);\nfor(uint counter=0; counter < pokemonGuessPlayers[pbWinner].length; counter++){\nguesser = pokemonGuessPlayers[pbWinner][counter];\nif(pbWinner == publicBattlepm1){\nguesser.transfer(playerGuessPM1Number[guesser].mul(totalGuess).div(pokemonGuessPrize[pbWinner]));\n//delete playerGuessPM1Number[guesser];\n\n}else{\n\nguesser.transfer(playerGuessPM2Number[guesser].mul(totalGuess).div(pokemonGuessPrize[pbWinner]));\n\n\n}\n}\nuint del;\nif(pbWinner == publicBattlepm1){\ndel = publicBattlepm2;\n}else{\ndel = publicBattlepm1;\n}\n\nfor(uint cdel1=0; cdel1 < pokemonGuessPlayers[pbWinner].length; cdel1++){\nguesser = pokemonGuessPlayers[pbWinner][cdel1];\nif(pbWinner == publicBattlepm1){\ndelete playerGuessPM1Number[guesser];\n}else{\ndelete playerGuessPM2Number[guesser];\n}\n}\n\nfor(uint cdel=0; cdel < pokemonGuessPlayers[del].length; cdel++){\nguesser = pokemonGuessPlayers[del][cdel];\nif(del == publicBattlepm1){\ndelete playerGuessPM1Number[guesser];\n}else{\ndelete playerGuessPM2Number[guesser];\n}\n}\n\n\npokemonGuessNumber[publicBattlepm1]=0;\npokemonGuessNumber[publicBattlepm2]=0;\n\npokemonGuessPrize[publicBattlepm1]=0;\npokemonGuessPrize[publicBattlepm2]=0;\ndelete pokemonGuessPlayers[publicBattlepm2];\ndelete pokemonGuessPlayers[publicBattlepm1];\n//for(counter=0; counter < pokemonGuessPlayers[pbWinner].length; counter++){\n//pokemonGuessPlayers[counter].length = 0;\n//}\ncounter = 0;\npublicBattlepm1 = 99999;\npublicBattlepm2 = 99999;\npbWinner = 99999;\ntotalGuess = 0;\npublicbattlestart = false;\n}\n\nfunction dataCalc(uint _pokemon1, uint _pokemon2) public view returns (uint256 _threshold){\nuint _pokemontotal1;\nuint _pokemontotal2;\n\n// We can just leave the other fields blank:\n(,,_pokemontotal1) = getPokemonDetails(_pokemon1);\n(,,_pokemontotal2) = getPokemonDetails(_pokemon2);\nuint256 threshold = _pokemontotal1.mul(100).div(_pokemontotal1+_pokemontotal2);\nuint256 pokemonlevel1 = pokemonContract.levels(_pokemon1);\nuint256 pokemonlevel2 = pokemonContract.levels(_pokemon2);\nuint leveldiff = pokemonlevel1 - pokemonlevel2;\nif(pokemonlevel1 >= pokemonlevel2){\nthreshold = threshold.mul(11**leveldiff).div(10**leveldiff);\n\n}else{\n//return (100 - dataCalc(_pokemon2, _pokemon1));\nthreshold = 100 - dataCalc(_pokemon2, _pokemon1);\n}\nif(threshold > 90){\nthreshold = 90;\n}\nif(threshold < 10){\nthreshold = 10;\n}\n\nreturn threshold;\n\n}\n\n\n\n// This function will return all of the details of the pokemons\nfunction getBattleDetails(uint _battleId) public view returns (\nuint _pokemon1,\nuint _pokemon2,\nuint256 _result\n) {\nBattlelog storage _battle = battleresults[_battleId];\n\n_pokemon1 = _battle.pokemonId1;\n_pokemon2 = _battle.pokemonId2;\n_result = _battle.result;\n}\n\nfunction addPokemonDetails(string _pokemonName, uint _pokemonType, uint _total) public onlyContractCreator{\n\npokemoninfo.push(PokemonDetails(_pokemonName,_pokemonType,_total));\n}\n\n// This function will return all of the details of the pokemons\nfunction getPokemonDetails(uint _pokemonId) public view returns (\nstring _pokemonName,\nuint _pokemonType,\nuint _total\n) {\nPokemonDetails storage _pokemoninfomation = pokemoninfo[_pokemonId];\n\n_pokemonName = _pokemoninfomation.pokemonName;\n_pokemonType = _pokemoninfomation.pokemonType;\n_total = _pokemoninfomation.total;\n}\n\nfunction totalBattles() public view returns (uint256 _totalSupply) {\nreturn battleresults.length;\n}\n\nfunction getPokemonBet(uint _pokemonId) public view returns (uint256 _pokemonBet){\nreturn pokemonGuessPrize[_pokemonId];\n}\n\nfunction getPokemonOwner(uint _pokemonId) public view returns (\naddress _owner\n) {\n\n_owner = pokemonContract.getPokemonOwner(_pokemonId);\n\n}\n\nfunction getPublicBattlePokemon1() public view returns(uint _pokemonId1){\n\nreturn publicBattlepm1;\n}\nfunction getPublicBattlePokemon2() public view returns(uint _pokemonId1){\n\nreturn publicBattlepm2;\n}\n\nfunction getPokemonBetTimes(uint _pokemonId) public view returns(uint _pokemonBetTimes){\n\nreturn pokemonGuessNumber[_pokemonId];\n}\n\nfunction getPokemonCD(uint _pokemonId) public view returns(uint _pokemonCD){\nif(battleCD[_pokemonId] <= now){\nreturn 0;\n}else{\nreturn battleCD[_pokemonId] - now;\n}\n}\n\nfunction initialPokemonInfo() public onlyContractCreator{\naddPokemonDetails(\"PikaChu\" ,1, 300);\naddPokemonDetails(\"Ninetales\",1,505);\naddPokemonDetails(\"Charizard\" ,2, 534);\naddPokemonDetails(\"Eevee\",0,325);\naddPokemonDetails(\"Jigglypuff\" ,0, 270);\naddPokemonDetails(\"Pidgeot\",2,469);\naddPokemonDetails(\"Aerodactyl\" ,2, 515);\naddPokemonDetails(\"Bulbasaur\",0,318);\naddPokemonDetails(\"Abra\" ,0, 310);\naddPokemonDetails(\"Gengar\",2,500);\naddPokemonDetails(\"Hoothoot\" ,0, 262);\naddPokemonDetails(\"Goldeen\",0,320);\n\n}\n\n}",
  "bytecode": ""
}