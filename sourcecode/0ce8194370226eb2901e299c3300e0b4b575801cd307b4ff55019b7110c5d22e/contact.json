{
  "address": "0x01c67791309c71aa4ed373025a0c089696d7c9e4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MyToken",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-27\n*/\n\npragma solidity ^0.4.13;\n\ncontract owned {\n    address public owner;\n\n    function owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n}\n\ncontract tokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n}\n\ncontract MyToken is owned {\n    /* Public variables of the token */\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function MyToken(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol,\n        address centralMinter\n        ) {\n        if (centralMinter != 0) owner = centralMinter;      // 设置所有者\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n        totalSupply = initialSupply;                        // Update total supply\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\n    }\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] > _value);                // Check if the sender has enough\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);\n        require(!frozenAccount[_to]);\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        Transfer(_from, _to, _value);\n    }\n\n    /// @notice Send `_value` tokens to `_to` from your account\n    /// @param _to The address of the recipient\n    /// @param _value the amount to send\n    function transfer(address _to, uint256 _value) {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /// @notice Send `_value` tokens to `_to` in behalf of `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value the amount to send\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        require (_value < allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\n    /// @param _spender The address authorized to spend\n    /// @param _value the max amount they can spend\n    function approve(address _spender, uint256 _value)\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n    /// @param _spender The address authorized to spend\n    /// @param _value the max amount they can spend\n    /// @param _extraData some extra information to send to the approved contract\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /// @notice Remove `_value` tokens from the system irreversibly\n    /// @param _value the amount of money to burn\n    function burn(uint256 _value) returns (bool success) {\n        require (balanceOf[msg.sender] > _value);            // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n        totalSupply -= _value;                                // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"centralMinter\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b604051610d79380380610d798339810160405280805191906020018051820191906020018051919060200180518201919060200180519150505b5b60008054600160a060020a03191633600160a060020a03161790555b600160a060020a038116156100915760008054600160a060020a031916600160a060020a0383161790555b600160a060020a0333166000908152600560205260409020859055600485905560018480516100c49291602001906100f3565b5060028280516100d89291602001906100f3565b506003805460ff191660ff85161790555b5050505050610193565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013457805160ff1916838001178555610161565b82800160010185558215610161579182015b82811115610161578251825591602001919060010190610146565b5b5061016e929150610172565b5090565b61019091905b8082111561016e5760008155600101610178565b5090565b90565b610bd7806101a26000396000f300606060405236156100e35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100e8578063095ea7b31461017357806318160ddd146101a957806323b872dd146101ce578063313ce5671461020a57806342966c681461023357806370a082311461025d57806379cc67901461028e5780638da5cb5b146102c457806395d89b41146102f3578063a9059cbb1461037e578063b414d4b6146103a2578063cae9ca51146103d5578063dd62ed3e1461044e578063e724529c14610485578063f2fde38b146104ab575b600080fd5b34156100f357600080fd5b6100fb6104cc565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101385780820151818401525b60200161011f565b50505050905090810190601f1680156101655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017e57600080fd5b610195600160a060020a036004351660243561056a565b604051901515815260200160405180910390f35b34156101b457600080fd5b6101bc61059b565b60405190815260200160405180910390f35b34156101d957600080fd5b610195600160a060020a03600435811690602435166044356105a1565b604051901515815260200160405180910390f35b341561021557600080fd5b61021d610618565b60405160ff909116815260200160405180910390f35b341561023e57600080fd5b610195600435610621565b604051901515815260200160405180910390f35b341561026857600080fd5b6101bc600160a060020a03600435166106ac565b60405190815260200160405180910390f35b341561029957600080fd5b610195600160a060020a03600435166024356106be565b604051901515815260200160405180910390f35b34156102cf57600080fd5b6102d761079b565b604051600160a060020a03909116815260200160405180910390f35b34156102fe57600080fd5b6100fb6107aa565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101385780820151818401525b60200161011f565b50505050905090810190601f1680156101655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561038957600080fd5b6103a0600160a060020a0360043516602435610848565b005b34156103ad57600080fd5b610195600160a060020a0360043516610858565b604051901515815260200160405180910390f35b34156103e057600080fd5b61019560048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061086d95505050505050565b604051901515815260200160405180910390f35b341561045957600080fd5b6101bc600160a060020a03600435811690602435166109a1565b60405190815260200160405180910390f35b341561049057600080fd5b6103a0600160a060020a036004351660243515156109be565b005b34156104b657600080fd5b6103a0600160a060020a0360043516610a4c565b005b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105625780601f1061053757610100808354040283529160200191610562565b820191906000526020600020905b81548152906001019060200180831161054557829003601f168201915b505050505081565b600160a060020a03338116600090815260066020908152604080832093861683529290522081905560015b92915050565b60045481565b600160a060020a0380841660009081526006602090815260408083203390941683529290529081205482106105d557600080fd5b600160a060020a038085166000908152600660209081526040808320339094168352929052208054839003905561060d848484610a94565b5060015b9392505050565b60035460ff1681565b600160a060020a03331660009081526005602052604081205482901161064657600080fd5b600160a060020a03331660008181526005602052604090819020805485900390556004805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a25060015b919050565b60056020526000908152604090205481565b600160a060020a038216600090815260056020526040812054829010156106e457600080fd5b600160a060020a038084166000908152600660209081526040808320339094168352929052205482111561071757600080fd5b600160a060020a038084166000818152600560209081526040808320805488900390556006825280832033909516835293905282902080548590039055600480548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a25060015b92915050565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105625780601f1061053757610100808354040283529160200191610562565b820191906000526020600020905b81548152906001019060200180831161054557829003601f168201915b505050505081565b610853338383610a94565b5b5050565b60076020526000908152604090205460ff1681565b60008361087a818561056a565b156109985780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109315780820151818401525b602001610918565b50505050905090810190601f16801561095e5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561097f57600080fd5b6102c65a03f1151561099057600080fd5b505050600191505b5b509392505050565b600660209081526000928352604080842090915290825290205481565b60005433600160a060020a039081169116146109d957600080fd5b600160a060020a03821660009081526007602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15b5b5050565b60005433600160a060020a03908116911614610a6757600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600160a060020a0382161515610aa957600080fd5b600160a060020a038316600090815260056020526040902054819011610ace57600080fd5b600160a060020a03821660009081526005602052604090205481810111610af457600080fd5b600160a060020a03831660009081526007602052604090205460ff1615610b1a57600080fd5b600160a060020a03821660009081526007602052604090205460ff1615610b4057600080fd5b600160a060020a038084166000818152600560205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35b5050505600a165627a7a72305820a01f414599ad19c9ec598704d7430da09cabf0972c0885d83e365aca1fd148ae0029000000000000000000000000000000000000000006c9144c1c690d4cb400000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000e000000000000000000000000063f41248465f5cd22495fcd47c82b57092db2a490000000000000000000000000000000000000000000000000000000000000003434342000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034343420000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000006c9144c1c690d4cb400000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000e000000000000000000000000063f41248465f5cd22495fcd47c82b57092db2a490000000000000000000000000000000000000000000000000000000000000003434342000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034343420000000000000000000000000000000000000000000000000000000000"
}