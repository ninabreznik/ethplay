{
  "address": "0x358465f17278e217c4ef171f9203c0f7737ca965",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EntryToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-11\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) public balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n        assert(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n        assert(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        assert(token.approve(spender, value));\n    }\n}\n\n/**\n * @title TokenTimelock\n * @dev TokenTimelock is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract TokenTimelock {\n  using SafeERC20 for ERC20Basic;\n\n  // ERC20 basic token contract being held\n  ERC20Basic public token;\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  // timestamp when token release is enabled\n  uint256 public releaseTime;\n\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(_releaseTime > block.timestamp);\n    token = _token;\n    beneficiary = _beneficiary;\n    releaseTime = _releaseTime;\n  }\n\n  /**\n   * @notice Transfers tokens held by timelock to beneficiary.\n   */\n  function release() public {\n    // solium-disable-next-line security/no-block-members\n    require(block.timestamp >= releaseTime);\n\n    uint256 amount = token.balanceOf(this);\n    require(amount > 0);\n\n    token.safeTransfer(beneficiary, amount);\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n\ncontract EntryToken is StandardToken, Ownable {\n    string public constant name = \"Entry Token\";\n    string public constant symbol = \"ENTRY\";\n    uint8 public constant decimals = 18;\n\n    /// Maximum tokens to be allocated on the sale (55% of the hard cap)\n    uint256 public constant TOKENS_SALE_HARD_CAP = 325000000000000000000000000; // 325000000 * 10**18\n\n    /// Base exchange rate is set to 1 ETH = 6000 ENTRY.\n    uint256 public constant BASE_RATE = 6000;\n\n    /// pre sale start 03.05.2018\n    uint256 private constant datePreSaleStart = 1525294800;\n    \n    /// pre sale end time 11.05.2018\n    uint256 private constant datePreSaleEnd = 1525986000;\n\n    /// sale start time 01.06.2018\n    uint256 private constant dateSaleStart = 1527800400;\n\n    /// sale end time 01.09.2018\n    uint256 private constant dateSaleEnd = 1535749200;\n\n    \n    /// pre-sale token cap\n    uint256 private preSaleCap = 75000000000000000000000000; // Pre-sale  75000000 * 10**18\n    \n    /// token caps for each round\n    uint256[25] private stageCaps = [\n        85000000000000000000000000\t, // Stage 1   85000000 * 10**18\n        95000000000000000000000000\t, // Stage 2   95000000 * 10**18\n        105000000000000000000000000\t, // Stage 3   105000000 * 10**18\n        115000000000000000000000000\t, // Stage 4   115000000 * 10**18\n        125000000000000000000000000\t, // Stage 5   125000000 * 10**18\n        135000000000000000000000000\t, // Stage 6   135000000 * 10**18\n        145000000000000000000000000\t, // Stage 7   145000000 * 10**18\n        155000000000000000000000000\t, // Stage 8   155000000 * 10**18\n        165000000000000000000000000\t, // Stage 9   165000000 * 10**18\n        175000000000000000000000000\t, // Stage 10   175000000 * 10**18\n        185000000000000000000000000\t, // Stage 11   185000000 * 10**18\n        195000000000000000000000000\t, // Stage 12   195000000 * 10**18\n        205000000000000000000000000\t, // Stage 13   205000000 * 10**18\n        215000000000000000000000000\t, // Stage 14   215000000 * 10**18\n        225000000000000000000000000\t, // Stage 15   225000000 * 10**18\n        235000000000000000000000000\t, // Stage 16   235000000 * 10**18\n        245000000000000000000000000\t, // Stage 17   245000000 * 10**18\n        255000000000000000000000000\t, // Stage 18   255000000 * 10**18\n        265000000000000000000000000\t, // Stage 19   265000000 * 10**18\n        275000000000000000000000000\t, // Stage 20   275000000 * 10**18\n        285000000000000000000000000\t, // Stage 21   285000000 * 10**18\n        295000000000000000000000000\t, // Stage 22   295000000 * 10**18\n        305000000000000000000000000\t, // Stage 23   305000000 * 10**18\n        315000000000000000000000000\t, // Stage 24   315000000 * 10**18\n        325000000000000000000000000   // Stage 25   325000000 * 10**18\n    ];\n    /// tokens rate for each round\n    uint8[25] private stageRates = [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, \n                        28, 29, 30, 31, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44];\n\n    uint64 private constant dateTeamTokensLockedTill = 1630443600;\n   \n    bool public tokenSaleClosed = false;\n\n    address public timelockContractAddress;\n\n\n    function isPreSalePeriod() public constant returns (bool) {\n        if(totalSupply > preSaleCap || now >= datePreSaleEnd) {\n            return false;\n        } else {\n            return now > datePreSaleStart;\n        }\n    }\n\n\n    function isICOPeriod() public constant returns (bool) {\n        if (totalSupply > TOKENS_SALE_HARD_CAP || now >= dateSaleEnd){\n            return false;\n        } else {\n            return now > dateSaleStart;\n        }\n    }\n\n    modifier inProgress {\n        require(totalSupply < TOKENS_SALE_HARD_CAP && !tokenSaleClosed && now >= datePreSaleStart);\n        _;\n    }\n\n\n    modifier beforeEnd {\n        require(!tokenSaleClosed);\n        _;\n    }\n\n\n    modifier canBeTraded {\n        require(tokenSaleClosed);\n        _;\n    }\n\n\n    function EntryToken() public {\n    \t/// generate private investor tokens \n    \tgenerateTokens(owner, 50000000000000000000000000); // 50000000 * 10**18\n    }\n\n\n    function () public payable inProgress {\n        if(isPreSalePeriod()){\n            buyPreSaleTokens(msg.sender);\n        } else if (isICOPeriod()){\n            buyTokens(msg.sender);\n        }\t\t\t\n    } \n    \n\n    function buyPreSaleTokens(address _beneficiary) internal {\n        require(msg.value >= 0.01 ether);\n        uint256 tokens = getPreSaleTokenAmount(msg.value);\n        require(totalSupply.add(tokens) <= preSaleCap);\n        generateTokens(_beneficiary, tokens);\n        owner.transfer(address(this).balance);\n    }\n    \n    \n    function buyTokens(address _beneficiary) internal {\n        require(msg.value >= 0.01 ether);\n        uint256 tokens = getTokenAmount(msg.value);\n        require(totalSupply.add(tokens) <= TOKENS_SALE_HARD_CAP);\n        generateTokens(_beneficiary, tokens);\n        owner.transfer(address(this).balance);\n    }\n\n\n    function getPreSaleTokenAmount(uint256 weiAmount)internal pure returns (uint256) {\n        return weiAmount.mul(BASE_RATE);\n    }\n    \n    \n    function getTokenAmount(uint256 weiAmount) internal view returns (uint256 tokens) {\n        uint256 tokenBase = weiAmount.mul(BASE_RATE);\n        uint8 stageNumber = currentStageIndex();\n        tokens = getStageTokenAmount(tokenBase, stageNumber);\n        while(tokens.add(totalSupply) > stageCaps[stageNumber] && stageNumber < 24){\n           stageNumber++;\n           tokens = getStageTokenAmount(tokenBase, stageNumber);\n        }\n    }\n    \n    \n    function getStageTokenAmount(uint256 tokenBase, uint8 stageNumber)internal view returns (uint256) {\n    \tuint256 rate = 10000000000000000000/stageRates[stageNumber];\n    \tuint256 base = tokenBase/1000000000000000000;\n        return base.mul(rate);\n    }\n    \n    \n    function currentStageIndex() internal view returns (uint8 stageNumber) {\n        stageNumber = 0;\n        while(stageNumber < 24 && totalSupply > stageCaps[stageNumber]) {\n            stageNumber++;\n        }\n    }\n    \n    \n    function buyTokensOnInvestorBehalf(address _beneficiary, uint256 _tokens) public onlyOwner beforeEnd {\n        generateTokens(_beneficiary, _tokens);\n    }\n    \n    \n    function buyTokensOnInvestorBehalfBatch(address[] _addresses, uint256[] _tokens) public onlyOwner beforeEnd {\n        require(_addresses.length == _tokens.length);\n        require(_addresses.length <= 100);\n\n        for (uint256 i = 0; i < _tokens.length; i = i.add(1)) {\n            generateTokens(_addresses[i], _tokens[i]);\n        }\n    }\n    \n    \n    function generateTokens(address _beneficiary, uint256 _tokens) internal {\n        require(_beneficiary != address(0));\n        totalSupply = totalSupply.add(_tokens);\n        balances[_beneficiary] = balances[_beneficiary].add(_tokens);\n        emit Transfer(address(0), _beneficiary, _tokens);\n    }\n\n\n    function close() public onlyOwner beforeEnd {\n        /// team tokens are equal to 5% of tokens\n        uint256 lockedTokens = 16250000000000000000000000; // 16 250 000 * 10**18\n        // partner tokens for advisors, bouties, SCO 40% of tokens\n        uint256 partnerTokens = 260000000000000000000000; // 130 000 0000 * 10**18\n        \n        generateLockedTokens(lockedTokens);\n        generatePartnerTokens(partnerTokens);\n        \n        totalSupply = totalSupply.add(lockedTokens+partnerTokens);\n\n        tokenSaleClosed = true;\n\n        owner.transfer(address(this).balance);\n    }\n    \n    function generateLockedTokens( uint lockedTokens) internal{\n        TokenTimelock lockedTeamTokens = new TokenTimelock(this, owner, dateTeamTokensLockedTill);\n        timelockContractAddress = address(lockedTeamTokens);\n        balances[timelockContractAddress] = balances[timelockContractAddress].add(lockedTokens);\n        emit Transfer(address(0), timelockContractAddress, lockedTokens);\n    }\n    \n    \n    function generatePartnerTokens(uint partnerTokens) internal{\n        balances[owner] = partnerTokens;\n        emit Transfer(address(0), owner, partnerTokens);\n    }\n      \n    \n    function transferFrom(address _from, address _to, uint256 _value) public canBeTraded returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n\n    function transfer(address _to, uint256 _value) public canBeTraded returns (bool) {\n        return super.transfer(_to, _value);\n    }\n}",
  "bytecode": "60606040526a3e09de2596099e2b000000600455610320604051908101604052806a464f733baa0ae6750000006bffffffffffffffffffffffff1681526020016a4e950851be0c2ebf0000006bffffffffffffffffffffffff1681526020016a56da9d67d20d77090000006bffffffffffffffffffffffff1681526020016a5f20327de60ebf530000006bffffffffffffffffffffffff1681526020016a6765c793fa10079d0000006bffffffffffffffffffffffff1681526020016a6fab5caa0e114fe70000006bffffffffffffffffffffffff1681526020016a77f0f1c0221298310000006bffffffffffffffffffffffff1681526020016a803686d63613e07b0000006bffffffffffffffffffffffff1681526020016a887c1bec4a1528c50000006bffffffffffffffffffffffff1681526020016a90c1b1025e16710f0000006bffffffffffffffffffffffff1681526020016a990746187217b9590000006bffffffffffffffffffffffff1681526020016aa14cdb2e861901a30000006bffffffffffffffffffffffff1681526020016aa99270449a1a49ed0000006bffffffffffffffffffffffff1681526020016ab1d8055aae1b92370000006bffffffffffffffffffffffff1681526020016aba1d9a70c21cda810000006bffffffffffffffffffffffff1681526020016ac2632f86d61e22cb0000006bffffffffffffffffffffffff1681526020016acaa8c49cea1f6b150000006bffffffffffffffffffffffff1681526020016ad2ee59b2fe20b35f0000006bffffffffffffffffffffffff1681526020016adb33eec91221fba90000006bffffffffffffffffffffffff1681526020016ae37983df262343f30000006bffffffffffffffffffffffff1681526020016aebbf18f53a248c3d0000006bffffffffffffffffffffffff1681526020016af404ae0b4e25d4870000006bffffffffffffffffffffffff1681526020016afc4a432162271cd10000006bffffffffffffffffffffffff1681526020016b01048fd8377628651b0000006bffffffffffffffffffffffff1681526020016b010cd56d4d8a29ad650000006bffffffffffffffffffffffff16815250600590601962000339929190620006a6565b5061032060405190810160405280600f60ff168152602001601060ff168152602001601160ff168152602001601260ff168152602001601360ff168152602001601560ff168152602001601660ff168152602001601760ff168152602001601860ff168152602001601960ff168152602001601b60ff168152602001601c60ff168152602001601d60ff168152602001601e60ff168152602001601f60ff168152602001602160ff168152602001602260ff168152602001602360ff168152602001602460ff168152602001602560ff168152602001602860ff168152602001602960ff168152602001602a60ff168152602001602b60ff168152602001602c60ff16815250601e90601962000451929190620006fb565b506000601f60006101000a81548160ff02191690831515021790555034156200047957600080fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000507600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166a295be96e640669720000006200050d6401000000000262001701176401000000009004565b620007f7565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200054a57600080fd5b6200056f816000546200068464010000000002620016e0179091906401000000009004565b600081905550620005d781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200068464010000000002620016e0179091906401000000009004565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008082840190508381101515156200069c57600080fd5b8091505092915050565b8260198101928215620006e8579160200282015b82811115620006e757825182906bffffffffffffffffffffffff16905591602001919060010190620006ba565b5b509050620006f791906200079c565b5090565b826019601f01602090048101928215620007895791602002820160005b838211156200075857835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000718565b8015620007875782816101000a81549060ff021916905560010160208160000104928301926001030262000758565b505b509050620007989190620007c4565b5090565b620007c191905b80821115620007bd576000816000905550600101620007a3565b5090565b90565b620007f491905b80821115620007f057600081816101000a81549060ff021916905550600101620007cb565b5090565b90565b61285780620008076000396000f300606060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101ad578063095ea7b31461023b57806318160ddd146102955780631b4b1cfa146102be57806323b872dd146102eb57806327e235e314610364578063313ce567146103b15780633d946410146103e057806341910f901461040d57806343d726d614610436578063661884631461044b57806370a08231146104a55780637fc88fe2146104f25780638da5cb5b1461054757806395d89b411461059c578063a9059cbb1461062a578063bc54a16814610684578063cb7e70fa1461071e578063d73dd62314610760578063dd62ed3e146107ba578063e55a07c214610826578063f2fde38b14610853578063f946372c1461088c575b6b010cd56d4d8a29ad6500000060005410801561015d5750601f60009054906101000a900460ff16155b801561016d5750635aea26d04210155b151561017857600080fd5b6101806108b5565b156101935761018e336108e8565b6101ab565b61019b6109b7565b156101aa576101a9336109f4565b5b5b005b34156101b857600080fd5b6101c0610acd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102005780820151818401526020810190506101e5565b50505050905090810190601f16801561022d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024657600080fd5b61027b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b06565b604051808215151515815260200191505060405180910390f35b34156102a057600080fd5b6102a8610bf8565b6040518082815260200191505060405180910390f35b34156102c957600080fd5b6102d16109b7565b604051808215151515815260200191505060405180910390f35b34156102f657600080fd5b61034a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bfe565b604051808215151515815260200191505060405180910390f35b341561036f57600080fd5b61039b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c2f565b6040518082815260200191505060405180910390f35b34156103bc57600080fd5b6103c4610c47565b604051808260ff1660ff16815260200191505060405180910390f35b34156103eb57600080fd5b6103f36108b5565b604051808215151515815260200191505060405180910390f35b341561041857600080fd5b610420610c4c565b6040518082815260200191505060405180910390f35b341561044157600080fd5b610449610c52565b005b341561045657600080fd5b61048b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610daf565b604051808215151515815260200191505060405180910390f35b34156104b057600080fd5b6104dc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611040565b6040518082815260200191505060405180910390f35b34156104fd57600080fd5b610505611089565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561055257600080fd5b61055a6110af565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105a757600080fd5b6105af6110d5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105ef5780820151818401526020810190506105d4565b50505050905090810190601f16801561061c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561063557600080fd5b61066a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061110e565b604051808215151515815260200191505060405180910390f35b341561068f57600080fd5b61071c6004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190505061113d565b005b341561072957600080fd5b61075e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061123e565b005b341561076b57600080fd5b6107a0600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506112c4565b604051808215151515815260200191505060405180910390f35b34156107c557600080fd5b610810600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114c0565b6040518082815260200191505060405180910390f35b341561083157600080fd5b610839611547565b604051808215151515815260200191505060405180910390f35b341561085e57600080fd5b61088a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061155a565b005b341561089757600080fd5b61089f6116b2565b6040518082815260200191505060405180910390f35b600060045460005411806108cd5750635af4b2d04210155b156108db57600090506108e5565b635aea26d0421190505b90565b6000662386f26fc10000341015151561090057600080fd5b610909346116c2565b9050600454610923826000546116e090919063ffffffff16565b1115151561093057600080fd5b61093a8282611701565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015156109b357600080fd5b5050565b60006b010cd56d4d8a29ad6500000060005411806109d95750635b89ac504210155b156109e757600090506109f1565b635b106250421190505b90565b6000662386f26fc100003410151515610a0c57600080fd5b610a1534611857565b90506b010cd56d4d8a29ad65000000610a39826000546116e090919063ffffffff16565b11151515610a4657600080fd5b610a508282611701565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515610ac957600080fd5b5050565b6040805190810160405280600b81526020017f456e74727920546f6b656e00000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b6000601f60009054906101000a900460ff161515610c1b57600080fd5b610c268484846118e8565b90509392505050565b60016020528060005260406000206000915090505481565b601281565b61177081565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cb157600080fd5b601f60009054906101000a900460ff16151515610ccd57600080fd5b6a0d711243e0821578400000915069370ea0d47cf61a8000009050610cf182611ca7565b610cfa81611f12565b610d118183016000546116e090919063ffffffff16565b6000819055506001601f60006101000a81548160ff021916908315150217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515610dab57600080fd5b5050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610ec0576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f54565b610ed3838261200390919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b601f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600581526020017f454e54525900000000000000000000000000000000000000000000000000000081525081565b6000601f60009054906101000a900460ff16151561112b57600080fd5b611135838361201f565b905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561119b57600080fd5b601f60009054906101000a900460ff161515156111b757600080fd5b815183511415156111c757600080fd5b60648351111515156111d857600080fd5b600090505b81518110156112395761121e83828151811015156111f757fe5b90602001906020020151838381518110151561120f57fe5b90602001906020020151611701565b6112326001826116e090919063ffffffff16565b90506111dd565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561129a57600080fd5b601f60009054906101000a900460ff161515156112b657600080fd5b6112c08282611701565b5050565b600061135582600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116e090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b601f60009054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115b657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156115f257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6b010cd56d4d8a29ad6500000081565b60006116d96117708361224390919063ffffffff16565b9050919050565b60008082840190508381101515156116f757600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561173d57600080fd5b611752816000546116e090919063ffffffff16565b6000819055506117aa81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116e090919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008060006118716117708561224390919063ffffffff16565b915061187b612279565b905061188782826122bb565b92505b60058160ff1660198110151561189c57fe5b01546118b3600054856116e090919063ffffffff16565b1180156118c3575060188160ff16105b156118e15780806001019150506118da82826122bb565b925061188a565b5050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561192557600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561197357600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156119fe57600080fd5b611a5082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461200390919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ae582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116e090919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611bb782600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461200390919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600030600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663612e9850611cda61233d565b808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018267ffffffffffffffff1681526020019350505050604051809103906000f0801515611d6a57600080fd5b905080601f60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611e218260016000601f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116e090919063ffffffff16565b60016000601f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050565b8060016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b600082821115151561201457600080fd5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561205c57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156120aa57600080fd5b6120fc82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461200390919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061219182600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116e090919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008082840290506000841480612264575082848281151561226157fe5b04145b151561226f57600080fd5b8091505092915050565b60008090505b60188160ff161080156122a6575060058160ff1660198110151561229f57fe5b0154600054115b156122b857808060010191505061227f565b90565b6000806000601e8460ff166019811015156122d257fe5b602091828204019190069054906101000a900460ff1660ff16678ac7230489e800008115156122fd57fe5b0467ffffffffffffffff169150670de0b6b3a76400008581151561231d57fe5b049050612333828261224390919063ffffffff16565b9250505092915050565b6040516104de8061234e8339019056006060604052341561000f57600080fd5b6040516060806104de83398101604052808051906020019091908051906020019091908051906020019091905050428111151561004b57600080fd5b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002819055505050506103f9806100e56000396000f300606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806338af3eed1461006757806386d1a69f146100bc578063b91d4001146100d1578063fc0c546a146100fa575b600080fd5b341561007257600080fd5b61007a61014f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100c757600080fd5b6100cf610175565b005b34156100dc57600080fd5b6100e46102dc565b6040518082815260200191505060405180910390f35b341561010557600080fd5b61010d6102e2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600254421015151561018857600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561024357600080fd5b5af1151561025057600080fd5b50505060405180519050905060008111151561026b57600080fd5b6102d9600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166103079092919063ffffffff16565b50565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156103a957600080fd5b5af115156103b657600080fd5b5050506040518051905015156103c857fe5b5050505600a165627a7a72305820bcdf0ce6a054223839f21d35e3f7bda66edcf8e5fbfebb33cebf29db36548a100029a165627a7a72305820c837414603230bb529a47c5df2480ac9fceda09f9f43754a494e7f574bd730080029"
}