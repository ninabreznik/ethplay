{
  "address": "0xcbcc0f036ed4788f63fc0fee32873d6a7487b908",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Humaniq Token",
  "contractName": "HumaniqToken",
  "compilerVersion": "v0.4.8+commit.60cc1668",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-05-08\n*/\n\npragma solidity ^0.4.6;\n\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function sub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\n\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n/// @title Abstract token contract - Functions to be implemented by token contracts.\ncontract AbstractToken {\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\n    function totalSupply() constant returns (uint256 supply) {}\n    function balanceOf(address owner) constant returns (uint256 balance);\n    function transfer(address to, uint256 value) returns (bool success);\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\n    function approve(address spender, uint256 value) returns (bool success);\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Issuance(address indexed to, uint256 value);\n}\n\n\ncontract StandardToken is AbstractToken {\n\n    /*\n     *  Data structures\n     */\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public totalSupply;\n\n    /*\n     *  Read and write storage functions\n     */\n    /// @dev Transfers sender's tokens to a given address. Returns success.\n    /// @param _to Address of token receiver.\n    /// @param _value Number of tokens to transfer.\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n    /// @param _from Address from where tokens are withdrawn.\n    /// @param _to Address to where tokens are sent.\n    /// @param _value Number of tokens to transfer.\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /// @dev Returns number of tokens owned by given address.\n    /// @param _owner Address of token owner.\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /// @dev Sets approved amount of tokens for spender. Returns success.\n    /// @param _spender Address of allowed account.\n    /// @param _value Number of approved tokens.\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /*\n     * Read storage functions\n     */\n    /// @dev Returns number of allowed tokens for given address.\n    /// @param _owner Address of token owner.\n    /// @param _spender Address of token spender.\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n}\n\n\n/// @title Token contract - Implements Standard Token Interface with HumaniQ features.\n/// @author Evgeny Yurtaev - <[email protected]>\n/// @author Alexey Bashlykov - <[email protected]>\ncontract HumaniqToken is StandardToken, SafeMath {\n\n    /*\n     * External contracts\n     */\n    address public minter;\n\n    /*\n     * Token meta data\n     */\n    string constant public name = \"Humaniq\";\n    string constant public symbol = \"HMQ\";\n    uint8 constant public decimals = 8;\n\n    // Address of the founder of Humaniq.\n    address public founder = 0xc890b1f532e674977dfdb791cafaee898dfa9671;\n\n    // Multisig address of the founders\n    address public multisig = 0xa2c9a7578e2172f32a36c5c0e49d64776f9e7883;\n\n    // Address where all tokens created during ICO stage initially allocated\n    address constant public allocationAddressICO = 0x1111111111111111111111111111111111111111;\n\n    // Address where all tokens created during preICO stage initially allocated\n    address constant public allocationAddressPreICO = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    // 31 820 314 tokens were minted during preICO\n    uint constant public preICOSupply = mul(31820314, 100000000);\n\n    // 131 038 286 tokens were minted during ICO\n    uint constant public ICOSupply = mul(131038286, 100000000);\n\n    // Max number of tokens that can be minted\n    uint public maxTotalSupply;\n\n    /*\n     * Modifiers\n     */\n    modifier onlyFounder() {\n        // Only founder is allowed to do this action.\n        if (msg.sender != founder) {\n            throw;\n        }\n        _;\n    }\n\n    modifier onlyMinter() {\n        // Only minter is allowed to proceed.\n        if (msg.sender != minter) {\n            throw;\n        }\n        _;\n    }\n\n    /*\n     * Contract functions\n     */\n\n    /// @dev Crowdfunding contract issues new tokens for address. Returns success.\n    /// @param _for Address of receiver.\n    /// @param tokenCount Number of tokens to issue.\n    function issueTokens(address _for, uint tokenCount)\n        external\n        payable\n        onlyMinter\n        returns (bool)\n    {\n        if (tokenCount == 0) {\n            return false;\n        }\n\n        if (add(totalSupply, tokenCount) > maxTotalSupply) {\n            throw;\n        }\n\n        totalSupply = add(totalSupply, tokenCount);\n        balances[_for] = add(balances[_for], tokenCount);\n        Issuance(_for, tokenCount);\n        return true;\n    }\n\n    /// @dev Function to change address that is allowed to do emission.\n    /// @param newAddress Address of new emission contract.\n    function changeMinter(address newAddress)\n        public\n        onlyFounder\n        returns (bool)\n    {   \n        // Forbid previous emission contract to distribute tokens minted during ICO stage\n        delete allowed[allocationAddressICO][minter];\n\n        minter = newAddress;\n\n        // Allow emission contract to distribute tokens minted during ICO stage\n        allowed[allocationAddressICO][minter] = balanceOf(allocationAddressICO);\n    }\n\n    /// @dev Function to change founder address.\n    /// @param newAddress Address of new founder.\n    function changeFounder(address newAddress)\n        public\n        onlyFounder\n        returns (bool)\n    {   \n        founder = newAddress;\n    }\n\n    /// @dev Function to change multisig address.\n    /// @param newAddress Address of new multisig.\n    function changeMultisig(address newAddress)\n        public\n        onlyFounder\n        returns (bool)\n    {\n        multisig = newAddress;\n    }\n\n    /// @dev Contract constructor function sets initial token balances.\n    function HumaniqToken(address founderAddress)\n    {   \n        // Set founder address\n        founder = founderAddress;\n\n        // Allocate all created tokens during ICO stage to allocationAddressICO.\n        balances[allocationAddressICO] = ICOSupply;\n\n        // Allocate all created tokens during preICO stage to allocationAddressPreICO.\n        balances[allocationAddressPreICO] = preICOSupply;\n\n        // Allow founder to distribute tokens minted during preICO stage\n        allowed[allocationAddressPreICO][founder] = preICOSupply;\n\n        // Give 14 percent of all tokens to founders.\n        balances[multisig] = div(mul(ICOSupply, 14), 86);\n\n        // Set correct totalSupply and limit maximum total supply.\n        totalSupply = add(ICOSupply, balances[multisig]);\n        totalSupply = add(totalSupply, preICOSupply);\n        maxTotalSupply = mul(totalSupply, 5);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"preICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocationAddressPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"issueTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocationAddressICO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"founderAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"}]",
  "bytecode": "606060405260048054600160a060020a031990811673c890b1f532e674977dfdb791cafaee898dfa9671179091556005805490911673a2c9a7578e2172f32a36c5c0e49d64776f9e788317905534620000005760405160208062000f4083398101604052515b60048054600160a060020a031916600160a060020a038316179055620000a26307cf7c4e6305f5e100640100000000620002c2810262000ace1704565b73111111111111111111111111111111111111111160009081526020527ff043c50fe795c69f30b8ff78b84032dc53a9d87ca283ae10a1dacfbb648e83ef55620001036301e58a1a6305f5e10064010000000062000ace620002c282021704565b600160a060020a0360009081526020527f50c7a3d1a23c7ff4a61d37c3f2c4aeb36cf60b43ee893723db201d3eb941cbad55620001576301e58a1a6305f5e10064010000000062000ace620002c282021704565b600454600160a060020a031660009081527f73df27e0fa8bbb6c6a588f907379871e0f69a2bae64ea632056f6dabc259f3626020526040902055620001e7620001d1620001bb6307cf7c4e6305f5e10064010000000062000ace620002c282021704565b600e64010000000062000ace620002c282021704565b605664010000000062000b266200030082021704565b600554600160a060020a031660009081526020819052604090205562000257620002286307cf7c4e6305f5e10064010000000062000ace620002c282021704565b600554600160a060020a031660009081526020819052604090205464010000000062000afa6200036382021704565b60028190556200029790620002836301e58a1a6305f5e10064010000000062000ace620002c282021704565b64010000000062000afa6200036382021704565b6002819055620002b790600564010000000062000ace620002c282021704565b6006555b50620003a1565b6000828202620002f5841580620002e157508385838115620000005704145b64010000000062000b166200038f82021704565b8091505b5092915050565b6000806200031e81841164010000000062000b166200038f82021704565b828481156200000057049050620002f5838581156200000057068285020185146200038f6401000000000262000b16176401000000009004565b8091505b5092915050565b6000828201620002f58482101564010000000062000b166200038f82021704565b8091505b5092915050565b8015156200039d5762000000565b5b50565b610b8f80620003b16000396000f300606060405236156101005763ffffffff60e060020a600035041662c5f509811461010557806306fdde031461012457806307546172146101b1578063095ea7b3146101da5780630e0f1f001461020a57806315b73a1d1461023357806318160ddd146102525780632268a3581461027157806323b872dd1461029e5780632ab4d052146102d45780632c4d4d18146102f3578063313ce56714610320578063475a9fa9146103435780634783c35b1461036e5780634d853ee51461039757806370a08231146103c05780638df41c32146103eb57806393c32e061461041457806395d89b4114610441578063a9059cbb146104ce578063dd62ed3e146104fe575b610000565b346100005761011261052f565b60408051918252519081900360200190f35b3461000057610131610544565b604080516020808252835181830152835191928392908301918501908083838215610177575b80518252602083111561017757601f199092019160209182019101610157565b505050905090810190601f1680156101a35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34610000576101be61057b565b60408051600160a060020a039092168252519081900360200190f35b34610000576101f6600160a060020a036004351660243561058a565b604080519115158252519081900360200190f35b34610000576101be6105f5565b60408051600160a060020a039092168252519081900360200190f35b3461000057610112610600565b60408051918252519081900360200190f35b3461000057610112610615565b60408051918252519081900360200190f35b34610000576101f6600160a060020a036004351661061b565b604080519115158252519081900360200190f35b34610000576101f6600160a060020a036004358116906024351660443561065b565b604080519115158252519081900360200190f35b3461000057610112610768565b60408051918252519081900360200190f35b34610000576101f6600160a060020a036004351661076e565b604080519115158252519081900360200190f35b346100005761032d610839565b6040805160ff9092168252519081900360200190f35b6101f6600160a060020a036004351660243561083e565b604080519115158252519081900360200190f35b34610000576101be610912565b60408051600160a060020a039092168252519081900360200190f35b34610000576101be610921565b60408051600160a060020a039092168252519081900360200190f35b3461000057610112600160a060020a0360043516610930565b60408051918252519081900360200190f35b34610000576101be61094f565b60408051600160a060020a039092168252519081900360200190f35b34610000576101f6600160a060020a0360043516610967565b604080519115158252519081900360200190f35b34610000576101316109a7565b604080516020808252835181830152835191928392908301918501908083838215610177575b80518252602083111561017757601f199092019160209182019101610157565b505050905090810190601f1680156101a35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34610000576101f6600160a060020a03600435166024356109de565b604080519115158252519081900360200190f35b3461000057610112600160a060020a0360043581169060243516610aa1565b60408051918252519081900360200190f35b6105416301e58a1a6305f5e100610ace565b81565b60408051808201909152600781527f48756d616e697100000000000000000000000000000000000000000000000000602082015281565b600354600160a060020a031681565b600160a060020a03338116600081815260016020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b600160a060020a0381565b6105416307cf7c4e6305f5e100610ace565b81565b60025481565b60045460009033600160a060020a0390811691161461063957610000565b60058054600160a060020a031916600160a060020a0384161790555b5b919050565b600160a060020a0383166000908152602081905260408120548290108015906106ab5750600160a060020a0380851660009081526001602090815260408083203390941683529290522054829010155b80156106d05750600160a060020a038316600090815260208190526040902054828101115b1561075c57600160a060020a0380841660008181526020818152604080832080548801905588851680845281842080548990039055600183528184203390961684529482529182902080548790039055815186815291519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3506001610760565b5060005b5b9392505050565b60065481565b60045460009033600160a060020a0390811691161461078c57610000565b60038054600160a060020a0390811660009081527f8eec1c9afb183a84aac7003cf8e730bfb6385f6e43761d6425fba4265de3a9eb60205260408120558154600160a060020a0319169084161790556107f8731111111111111111111111111111111111111111610930565b600354600160a060020a031660009081527f8eec1c9afb183a84aac7003cf8e730bfb6385f6e43761d6425fba4265de3a9eb60205260409020555b5b919050565b600881565b60035460009033600160a060020a0390811691161461085c57610000565b81151561086b575060006105ef565b60065461087a60025484610afa565b111561088557610000565b61089160025483610afa565b600255600160a060020a0383166000908152602081905260409020546108b79083610afa565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f9cb9c14f7bc76e3a89b796b091850526236115352a198b1e472f00e91376bbcb92918290030190a25060015b5b92915050565b600554600160a060020a031681565b600454600160a060020a031681565b600160a060020a0381166000908152602081905260409020545b919050565b73111111111111111111111111111111111111111181565b60045460009033600160a060020a0390811691161461098557610000565b60048054600160a060020a031916600160a060020a0384161790555b5b919050565b60408051808201909152600381527f484d510000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a033316600090815260208190526040812054829010801590610a205750600160a060020a038316600090815260208190526040902054828101115b15610a9257600160a060020a0333811660008181526020818152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060016105ef565b5060006105ef565b5b92915050565b600160a060020a038083166000908152600160209081526040808320938516835292905220545b92915050565b6000828202610aef841580610aea575083858381156100005704145b610b16565b8091505b5092915050565b6000828201610aef84821015610b16565b8091505b5092915050565b801515610b2257610000565b5b50565b60006000610b3660008411610b16565b8284811561000057049050610aef838581156100005706828502018514610b16565b8091505b50929150505600a165627a7a72305820358099b580d8e8d89dc74c0f98454503fa2b3ce1ce00e24786b6e9f7be11f5280029000000000000000000000000c890b1f532e674977dfdb791cafaee898dfa9671",
  "constructorArguments": "000000000000000000000000c890b1f532e674977dfdb791cafaee898dfa9671"
}