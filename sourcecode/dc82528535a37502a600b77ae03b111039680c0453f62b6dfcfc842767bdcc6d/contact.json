{
  "address": "0x8d921acb3bee58f338bca3ce5bfe547b7e48af7c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KcashVesting",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-01\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract KcashVesting is Ownable {\n  using SafeMath for uint256;\n\n  address public teamWallet;\n  address public earlyWallet;\n  address public institutionWallet;\n  \n  uint256 public teamTimeLock = 1000 days;\n  uint256 public earlyTimeLock = 5 * 30 days;\n  uint256 public institutionTimeLock = 50 * 30 days;\n  \n  //amount of allocation\n  uint256 public teamAllocation = 15 * (10 ** 7) * (10 ** 18);\n  uint256 public earlyAllocation = 5 * (10 ** 7) * (10 ** 18);\n  uint256 public institutionAllocation = 15 * (10 ** 7) * (10 ** 18);\n  \n  uint256 public totalAllocation = 35 * (10 ** 7) * (10 ** 18);\n  \n  uint256 public teamStageSetting = 34;\n  uint256 public earlyStageSetting = 5;\n  uint256 public institutionStageSetting = 50;\n  ERC20Basic public token;\n  //token start time\n  uint256 public start;\n  //lock start time\n  uint256 public lockStartTime; \n   /** Reserve allocations */\n    mapping(address => uint256) public allocations;\n    \n    mapping(address => uint256) public stageSettings;\n    \n    mapping(address => uint256) public timeLockDurations;\n\n    /** How many tokens each reserve wallet has claimed */\n    mapping(address => uint256) public releasedAmounts;\n    \n    modifier onlyReserveWallets {\n        require(allocations[msg.sender] > 0);\n        _;\n    }\n    function KcashVesting(ERC20Basic _token,\n                          address _teamWallet,\n                          address _earlyWallet,\n                          address _institutionWallet,\n                          uint256 _start,\n                          uint256 _lockTime)public{\n        require(_start > 0);\n        require(_lockTime > 0);\n        require(_start.add(_lockTime) > 0);\n        require(_teamWallet != address(0));\n        require(_earlyWallet != address(0));\n        require(_institutionWallet != address(0));\n        \n        token = _token;\n        teamWallet = _teamWallet;\n        earlyWallet = _earlyWallet;\n        institutionWallet = _institutionWallet;\n        start = _start;\n        lockStartTime = start.add(_lockTime);\n    }\n    \n    function allocateToken() onlyOwner public{\n        require(block.timestamp > lockStartTime);\n        //only claim  once\n        require(allocations[teamWallet] == 0);\n        require(token.balanceOf(address(this)) >= totalAllocation);\n        \n        allocations[teamWallet] = teamAllocation;\n        allocations[earlyWallet] = earlyAllocation;\n        allocations[institutionWallet] = institutionAllocation;\n        \n        stageSettings[teamWallet] = teamStageSetting;\n        stageSettings[earlyWallet] = earlyStageSetting;\n        stageSettings[institutionWallet] = institutionStageSetting;\n        \n        timeLockDurations[teamWallet] = teamTimeLock;\n        timeLockDurations[earlyWallet] = earlyTimeLock;\n        timeLockDurations[institutionWallet] = institutionTimeLock;\n    }\n    function releaseToken() onlyReserveWallets public{\n        uint256 totalUnlocked = unlockAmount();\n        require(totalUnlocked <= allocations[msg.sender]);\n        require(releasedAmounts[msg.sender] < totalUnlocked);\n        uint256 payment = totalUnlocked.sub(releasedAmounts[msg.sender]);\n        \n        releasedAmounts[msg.sender] = totalUnlocked;\n        require(token.transfer(msg.sender, payment));\n    }\n    function unlockAmount() public view onlyReserveWallets returns(uint256){\n        uint256 stage = vestStage();\n        uint256 totalUnlocked = stage.mul(allocations[msg.sender]).div(stageSettings[msg.sender]);\n        return totalUnlocked;\n    }\n    \n    function vestStage() public view onlyReserveWallets returns(uint256){\n        uint256 vestingMonths = timeLockDurations[msg.sender].div(stageSettings[msg.sender]);\n        uint256 stage = (block.timestamp.sub(lockStartTime)).div(vestingMonths);\n        \n        if(stage > stageSettings[msg.sender]){\n            stage = stageSettings[msg.sender];\n        }\n        return stage;\n    }\n}",
  "bytecode": "60606040526305265c0060045562c5c1006005556307b98a006006556a7c13bc4b2c133c560000006007556a295be96e640669720000006008556a7c13bc4b2c133c560000006009556b0121836204bc2ce21e000000600a556022600b556005600c556032600d55341561007257600080fd5b60405160c080610a9883398101604052808051919060200180519190602001805191906020018051919060200180519190602001805160008054600160a060020a03191633600160a060020a0316178155909250831190506100d357600080fd5b600081116100e057600080fd5b60006100f983836401000000006108866101b782021704565b1161010357600080fd5b600160a060020a038516151561011857600080fd5b600160a060020a038416151561012d57600080fd5b600160a060020a038316151561014257600080fd5b600e8054600160a060020a03808916600160a060020a03199283161790925560018054888416908316179055600280548784169083161790556003805492861692909116919091179055600f8290556101a882826401000000006108866101b782021704565b601055506101ca945050505050565b818101828110156101c457fe5b92915050565b6108bf806101d96000396000f30060606040526004361061012f5763ffffffff60e060020a60003504166319bd518d81146101345780631ecc644f1461016557806335ec6dab1461017857806338dacaab146101a7578063414689ff146101ba57806352a9039c146101cd57806359927044146101ec5780635f304615146101ff57806361632d4d1461021257806362c7fa76146102255780636816521a146102385780636c59fb291461024b57806377cc437c1461026057806379203dc414610273578063851c27de14610286578063852f31c6146102995780638da5cb5b146102ac57806393d9c984146102bf578063b1f6e7df146102de578063be9a6555146102fd578063cc70993d14610310578063dd29414214610323578063df09921f14610336578063ec715a3114610349578063fc0c546a1461035c575b600080fd5b341561013f57600080fd5b610153600160a060020a036004351661036f565b60405190815260200160405180910390f35b341561017057600080fd5b610153610381565b341561018357600080fd5b61018b610449565b604051600160a060020a03909116815260200160405180910390f35b34156101b257600080fd5b610153610458565b34156101c557600080fd5b61015361045e565b34156101d857600080fd5b610153600160a060020a03600435166104d3565b34156101f757600080fd5b61018b6104e5565b341561020a57600080fd5b6101536104f4565b341561021d57600080fd5b6101536104fa565b341561023057600080fd5b610153610500565b341561024357600080fd5b610153610506565b341561025657600080fd5b61025e61050c565b005b341561026b57600080fd5b61018b61067d565b341561027e57600080fd5b61015361068c565b341561029157600080fd5b610153610692565b34156102a457600080fd5b610153610698565b34156102b757600080fd5b61018b61069e565b34156102ca57600080fd5b610153600160a060020a03600435166106ad565b34156102e957600080fd5b610153600160a060020a03600435166106bf565b341561030857600080fd5b6101536106d1565b341561031b57600080fd5b6101536106d7565b341561032e57600080fd5b6101536106dd565b341561034157600080fd5b6101536106e3565b341561035457600080fd5b61025e6106e9565b341561036757600080fd5b61018b610827565b60126020526000908152604090205481565b600160a060020a033316600090815260116020526040812054819081908190116103aa57600080fd5b600160a060020a0333166000908152601260209081526040808320546013909252909120546103de9163ffffffff61083616565b9150610405826103f96010544261084b90919063ffffffff16565b9063ffffffff61083616565b600160a060020a0333166000908152601260205260409020549091508111156104435750600160a060020a0333166000908152601260205260409020545b92915050565b600254600160a060020a031681565b60045481565b600160a060020a0333166000908152601160205260408120548190819081901161048757600080fd5b61048f610381565b600160a060020a0333166000908152601260209081526040808320546011909252909120549193506104cc916103f990859063ffffffff61085d16565b9392505050565b60116020526000908152604090205481565b600154600160a060020a031681565b60085481565b600d5481565b60105481565b60075481565b60005433600160a060020a0390811691161461052757600080fd5b601054421161053557600080fd5b600154600160a060020a03166000908152601160205260409020541561055a57600080fd5b600a54600e54600160a060020a03166370a082313060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156105ad57600080fd5b5af115156105ba57600080fd5b50505060405180519050101515156105d157600080fd5b60075460018054600160a060020a03908116600090815260116020908152604080832095909555600854600280548516845286842091909155600954600380548616855287852091909155600b548654861685526012845287852055600c5482548616855287852055600d548154861685528785205560045495548516845260139092528583209490945560055493548316825284822093909355600654925490911681529190912055565b600354600160a060020a031681565b600a5481565b600c5481565b600b5481565b600054600160a060020a031681565b60136020526000908152604090205481565b60146020526000908152604090205481565b600f5481565b60055481565b60065481565b60095481565b600160a060020a033316600090815260116020526040812054819081901161071057600080fd5b61071861045e565b600160a060020a03331660009081526011602052604090205490925082111561074057600080fd5b600160a060020a03331660009081526014602052604090205482901061076557600080fd5b600160a060020a03331660009081526014602052604090205461078f90839063ffffffff61084b16565b33600160a060020a0381811660009081526014602052604090819020869055600e5493945092169163a9059cbb919084905160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561080157600080fd5b5af1151561080e57600080fd5b50505060405180519050151561082357600080fd5b5050565b600e54600160a060020a031681565b6000818381151561084357fe5b049392505050565b60008282111561085757fe5b50900390565b600082151561086e57506000610443565b5081810281838281151561087e57fe5b041461044357fe5b8181018281101561044357fe00a165627a7a723058207fbd933b022df08d957d94dfaa006a78d95bcf3fbd13f3b932388717ecc60a6d002900000000000000000000000032d74896f05204d1b6ae7b0a3cebd7fc0cd8f9c7000000000000000000000000e8b642be8065c9f9968d357438d808c09ef9d4a8000000000000000000000000eb5e3cf56e450bd5b8432e861ad861a660da6f560000000000000000000000008b3b8094143cf941c8b6a29db043d686ecbd5969000000000000000000000000000000000000000000000000000000005a4a5b000000000000000000000000000000000000000000000000000000000000278d00",
  "constructorArguments": "00000000000000000000000032d74896f05204d1b6ae7b0a3cebd7fc0cd8f9c7000000000000000000000000e8b642be8065c9f9968d357438d808c09ef9d4a8000000000000000000000000eb5e3cf56e450bd5b8432e861ad861a660da6f560000000000000000000000008b3b8094143cf941c8b6a29db043d686ecbd5969000000000000000000000000000000000000000000000000000000005a4a5b000000000000000000000000000000000000000000000000000000000000278d00"
}