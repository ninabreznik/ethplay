{
  "address": "0x7ed172530f9822cd0573b895853e3f745f4108b4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Hadescoin",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-27\n*/\n\npragma solidity ^0.4.20;\n\n/*   HadesCoin go to the moon\n *  \n *  $$    $$   $$$$$$   $$$$$$$$   $$$$$$$$$   $$$$$$$$  \n *  $$    $$  $$    $$  $$     $$  $$          $$  \n *  $$    $$  $$    $$  $$     $$  $$          $$   \n *  $$$$$$$$  $$$$$$$$  $$     $$  $$$$$$$$$   $$$$$$$$  \n *  $$    $$  $$    $$  $$     $$  $$                $$  \n *  $$    $$  $$    $$  $$     $$  $$                $$  \n *  $$    $$  $$    $$  $$$$$$$$   $$$$$$$$$   $$$$$$$$   \n */\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n *      ERC223 contract interface with ERC20 functions and events\n *      Fully backward compatible with ERC20\n *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n */\ncontract ERC223 {\n    function balanceOf(address who) public view returns (uint);\n\n    function name() public view returns (string _name);\n    function symbol() public view returns (string _symbol);\n    function decimals() public view returns (uint8 _decimals);\n    function totalSupply() public view returns (uint256 _supply);\n\n    function transfer(address to, uint value) public returns (bool ok);\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\n    function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed burner, uint256 value);\n}\n\n\ncontract ContractReceiver {\n     \n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n    \n    \n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n      TKN memory tkn;\n      tkn.sender = _from;\n      tkn.value = _value;\n      tkn.data = _data;\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n      tkn.sig = bytes4(u);\n      \n      /* tkn variable is analogue of msg variable of Ether transaction\n      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n      *  tkn.data is data of token transaction   (analogue of msg.data)\n      *  tkn.sig is 4 bytes signature of function\n      *  if data of token transaction is a function execution\n      */\n    }\n}\n\ncontract ForeignToken {\n    function balanceOf(address _owner) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\n\n\ncontract Hadescoin is ERC223  {\n    \n    using SafeMath for uint256;\n    using SafeMath for uint;\n    address public owner = msg.sender;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public blacklist;\n    mapping (address => uint) public increase;\n    mapping (address => uint256) public unlockUnixTime;\n    uint  public maxIncrease=20;\n    address public target;\n    string internal name_= \"HadesCoin\";\n    string internal symbol_ = \"HAC\";\n    uint8 internal decimals_= 18;\n    uint256 internal totalSupply_= 2000000000e18;\n    uint256 public toGiveBase = 5000e18;\n    uint256 public increaseBase = 500e18;\n\n\n    uint256 public OfficalHold = totalSupply_.mul(18).div(100);\n    uint256 public totalRemaining = totalSupply_;\n    uint256 public totalDistributed = 0;\n    bool public canTransfer = true;\n    uint256 public etherGetBase=5000000;\n\n\n\n    bool public distributionFinished = false;\n    bool public finishFreeGetToken = false;\n    bool public finishEthGetToken = false;    \n    modifier canDistr() {\n        require(!distributionFinished);\n        _;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    modifier canTrans() {\n        require(canTransfer == true);\n        _;\n    }    \n    modifier onlyWhitelist() {\n        require(blacklist[msg.sender] == false);\n        _;\n    }\n    \n    function Hadescoin (address _target) public {\n        owner = msg.sender;\n        target = _target;\n        distr(target, OfficalHold);\n    }\n\n    // Function to access name of token .\n    function name() public view returns (string _name) {\n      return name_;\n    }\n    // Function to access symbol of token .\n    function symbol() public view returns (string _symbol) {\n      return symbol_;\n    }\n    // Function to access decimals of token .\n    function decimals() public view returns (uint8 _decimals) {\n      return decimals_;\n    }\n    // Function to access total supply of tokens .\n    function totalSupply() public view returns (uint256 _totalSupply) {\n      return totalSupply_;\n    }\n\n\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) canTrans public returns (bool success) {\n      \n    if(isContract(_to)) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n        Transfer(msg.sender, _to, _value, _data);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n    }\n\n\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint _value, bytes _data) canTrans public returns (bool success) {\n      \n    if(isContract(_to)) {\n        return transferToContract(_to, _value, _data);\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n    }\n\n    // Standard function transfer similar to ERC20 transfer with no _data .\n    // Added due to backwards compatibility reasons .\n    function transfer(address _to, uint _value) canTrans public returns (bool success) {\n      \n    //standard function transfer similar to ERC20 transfer with no _data\n    //added due to backwards compatibility reasons\n    bytes memory empty;\n    if(isContract(_to)) {\n        return transferToContract(_to, _value, empty);\n    }\n    else {\n        return transferToAddress(_to, _value, empty);\n    }\n    }\n\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n      uint length;\n      assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n      }\n      return (length>0);\n    }\n\n    //function that is called when transaction target is an address\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) revert();\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value, _data);\n    Transfer(msg.sender, _to, _value);\n    return true;\n    }\n\n    //function that is called when transaction target is a contract\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) revert();\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    ContractReceiver receiver = ContractReceiver(_to);\n    receiver.tokenFallback(msg.sender, _value, _data);\n    Transfer(msg.sender, _to, _value, _data);\n    Transfer(msg.sender, _to, _value);\n    return true;\n    }\n\n\n    function balanceOf(address _owner) public view returns (uint balance) {\n    return balances[_owner];\n    }\n\n    \n    function changeOwner(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n      }\n\n    \n    function enableWhitelist(address[] addresses) onlyOwner public {\n        require(addresses.length <= 255);\n        for (uint8 i = 0; i < addresses.length; i++) {\n            blacklist[addresses[i]] = false;\n        }\n    }\n\n    function disableWhitelist(address[] addresses) onlyOwner public {\n        require(addresses.length <= 255);\n        for (uint8 i = 0; i < addresses.length; i++) {\n            blacklist[addresses[i]] = true;\n        }\n    }\n    function changeIncrease(address[] addresses, uint256[] _amount) onlyOwner public {\n        require(addresses.length <= 255);\n        for (uint8 i = 0; i < addresses.length; i++) {\n            require(_amount[i] <= maxIncrease);\n            increase[addresses[i]] = _amount[i];\n        }\n    }\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        return true;\n    }\n    function startDistribution() onlyOwner  public returns (bool) {\n        distributionFinished = false;\n        return true;\n    }\n    function finishFreeGet() onlyOwner canDistr public returns (bool) {\n        finishFreeGetToken = true;\n        return true;\n    }\n    function finishEthGet() onlyOwner canDistr public returns (bool) {\n        finishEthGetToken = true;\n        return true;\n    }\n    function startFreeGet() onlyOwner canDistr public returns (bool) {\n        finishFreeGetToken = false;\n        return true;\n    }\n    function startEthGet() onlyOwner canDistr public returns (bool) {\n        finishEthGetToken = false;\n        return true;\n    }\n    function startTransfer() onlyOwner  public returns (bool) {\n        canTransfer = true;\n        return true;\n    }\n    function stopTransfer() onlyOwner  public returns (bool) {\n        canTransfer = false;\n        return true;\n    }\n    function changeBaseValue(uint256 _toGiveBase,uint256 _increaseBase,uint256 _etherGetBase,uint _maxIncrease) onlyOwner public returns (bool) {\n        toGiveBase = _toGiveBase;\n        increaseBase = _increaseBase;\n        etherGetBase=_etherGetBase;\n        maxIncrease=_maxIncrease;\n        return true;\n    }\n    \n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n        require(totalRemaining >= 0);\n        require(_amount<=totalRemaining);\n        totalDistributed = totalDistributed.add(_amount);\n        totalRemaining = totalRemaining.sub(_amount);\n\n        balances[_to] = balances[_to].add(_amount);\n\n        Transfer(address(0), _to, _amount);\n        return true;\n    }\n    \n    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\n        \n        require(addresses.length <= 255);\n        require(amount <= totalRemaining);\n        \n        for (uint8 i = 0; i < addresses.length; i++) {\n            require(amount <= totalRemaining);\n            distr(addresses[i], amount);\n        }\n  \n        if (totalDistributed >= totalSupply_) {\n            distributionFinished = true;\n        }\n    }\n    \n    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\n\n        require(addresses.length <= 255);\n        require(addresses.length == amounts.length);\n        \n        for (uint8 i = 0; i < addresses.length; i++) {\n            require(amounts[i] <= totalRemaining);\n            distr(addresses[i], amounts[i]);\n            \n            if (totalDistributed >= totalSupply_) {\n                distributionFinished = true;\n            }\n        }\n    }\n    \n    function () external payable {\n            getTokens();\n     }   \n    function getTokens() payable canDistr onlyWhitelist public {\n\n        \n        if (toGiveBase > totalRemaining) {\n            toGiveBase = totalRemaining;\n        }\n        address investor = msg.sender;\n        uint256 etherValue=msg.value;\n        uint256 value;\n        \n        if(etherValue>1e15){\n            require(finishEthGetToken==false);\n            value=etherValue.mul(etherGetBase);\n            value=value.add(toGiveBase);\n            require(value <= totalRemaining);\n            distr(investor, value);\n            if(!owner.send(etherValue))revert();           \n\n        }else{\n            require(finishFreeGetToken==false\n            && toGiveBase <= totalRemaining\n            && increase[investor]<=maxIncrease\n            && now>=unlockUnixTime[investor]);\n            value=value.add(increase[investor].mul(increaseBase));\n            value=value.add(toGiveBase);\n            increase[investor]+=1;\n            distr(investor, value);\n            unlockUnixTime[investor]=now+1 days;\n        }        \n        if (totalDistributed >= totalSupply_) {\n            distributionFinished = true;\n        }\n\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) canTrans public returns (bool success) {\n        require(_to != address(0)\n                && _value > 0\n                && balances[_from] >= _value\n                && allowed[_from][msg.sender] >= _value\n                && blacklist[_from] == false \n                && blacklist[_to] == false);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n  \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint256){\n        ForeignToken t = ForeignToken(tokenAddress);\n        uint256 bal = t.balanceOf(who);\n        return bal;\n    }\n    \n    function withdraw(address receiveAddress) onlyOwner public {\n        uint256 etherBalance = this.balance;\n        if(!receiveAddress.send(etherBalance))revert();   \n\n    }\n    \n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        totalDistributed = totalDistributed.sub(_value);\n        Burn(burner, _value);\n    }\n    \n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n        ForeignToken token = ForeignToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n\n\n}",
  "bytecode": "6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060146006556040805190810160405280600981526020017f4861646573436f696e0000000000000000000000000000000000000000000000815250600890805190602001906200009692919062000526565b506040805190810160405280600381526020017f484143000000000000000000000000000000000000000000000000000000000081525060099080519060200190620000e492919062000526565b506012600a60006101000a81548160ff021916908360ff1602179055506b06765c793fa10079d0000000600b5569010f0cf064dd59200000600c55681b1ae4d6e2ef500000600d55620001756064620001586012600b54620002ec640100000000026200324b179091906401000000009004565b620003226401000000000262003a86179091906401000000009004565b600e55600b54600f5560006010556001601160006101000a81548160ff021916908315150217905550624c4b406012556000601360006101000a81548160ff0219169083151502179055506000601360016101000a81548160ff0219169083151502179055506000601360026101000a81548160ff02191690831515021790555034156200020257600080fd5b604051602080620040b283398101604052808051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620002e4600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600e546200033e640100000000026200329c176401000000009004565b5050620005d5565b600080828402905060008414806200030f57508284828115156200030c57fe5b04145b15156200031857fe5b8091505092915050565b60008082848115156200033157fe5b0490508091505092915050565b6000601360009054906101000a900460ff161515156200035d57600080fd5b6000600f54101515156200037057600080fd5b600f5482111515156200038257600080fd5b620003a782601054620004ed640100000000026200327e179091906401000000009004565b601081905550620003d282600f546200050c6401000000000262003418179091906401000000009004565b600f819055506200043a82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620004ed640100000000026200327e179091906401000000009004565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008082840190508381101515156200050257fe5b8091505092915050565b60008282111515156200051b57fe5b818303905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200056957805160ff19168380011785556200059a565b828001600101855582156200059a579182015b82811115620005995782518255916020019190600101906200057c565b5b509050620005a99190620005ad565b5090565b620005d291905b80821115620005ce576000816000905550600101620005b4565b5090565b90565b613acd80620005e56000396000f30060606040526004361061023b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610245578063095ea7b3146102d357806314ffbafc1461032d57806318160ddd1461035a5780631d3795e814610383578063227a7911146103b057806323b872dd146103d95780632e23062d14610452578063313ce5671461047b57806342966c68146104aa578063502dadb0146104cd57806351cff8d9146105275780635dfc34591461056057806370a0823114610589578063781c0db4146105d6578063829c34281461060357806382c6b2b6146106305780638da5cb5b1461065957806395d89b41146106ae57806397b68b601461073c5780639b1cbccc146107695780639c09c83514610796578063a6f9dae1146107f0578063a8c310d514610829578063a9059cbb146108c3578063aa6ca8081461091d578063b45be89b14610927578063bc2d10f114610950578063bcf6b3cd1461097d578063be45fd62146109d3578063c108d54214610a70578063c489744b14610a9d578063cbbe974b14610b09578063d1b6a51f14610b56578063d4b8399214610b83578063d83623dd14610bd8578063d8a5436014610c05578063dd62ed3e14610c2e578063df68c1a214610c9a578063e58fc54c14610cc7578063e6b71e4514610d18578063e7f9e40814610db2578063eab136a014610ddf578063efca2eed14610e2c578063f3e4877c14610e55578063f6368f8a14610eb8578063f9f92be414610f98575b610243610fe9565b005b341561025057600080fd5b610258611380565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561029857808201518184015260208101905061027d565b50505050905090810190601f1680156102c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102de57600080fd5b610313600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611428565b604051808215151515815260200191505060405180910390f35b341561033857600080fd5b61034061151a565b604051808215151515815260200191505060405180910390f35b341561036557600080fd5b61036d6115b5565b6040518082815260200191505060405180910390f35b341561038e57600080fd5b6103966115bf565b604051808215151515815260200191505060405180910390f35b34156103bb57600080fd5b6103c361165a565b6040518082815260200191505060405180910390f35b34156103e457600080fd5b610438600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611660565b604051808215151515815260200191505060405180910390f35b341561045d57600080fd5b610465611b00565b6040518082815260200191505060405180910390f35b341561048657600080fd5b61048e611b06565b604051808260ff1660ff16815260200191505060405180910390f35b34156104b557600080fd5b6104cb6004808035906020019091905050611b1d565b005b34156104d857600080fd5b610525600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050611ce8565b005b341561053257600080fd5b61055e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611dea565b005b341561056b57600080fd5b610573611ea5565b6040518082815260200191505060405180910390f35b341561059457600080fd5b6105c0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611eab565b6040518082815260200191505060405180910390f35b34156105e157600080fd5b6105e9611ef4565b604051808215151515815260200191505060405180910390f35b341561060e57600080fd5b610616611f8f565b604051808215151515815260200191505060405180910390f35b341561063b57600080fd5b61064361200e565b6040518082815260200191505060405180910390f35b341561066457600080fd5b61066c612014565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106b957600080fd5b6106c1612039565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107015780820151818401526020810190506106e6565b50505050905090810190601f16801561072e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561074757600080fd5b61074f6120e1565b604051808215151515815260200191505060405180910390f35b341561077457600080fd5b61077c6120f4565b604051808215151515815260200191505060405180910390f35b34156107a157600080fd5b6107ee60048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190505061218f565b005b34156107fb57600080fd5b610827600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612291565b005b341561083457600080fd5b6108c160048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050612366565b005b34156108ce57600080fd5b610903600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506124b6565b604051808215151515815260200191505060405180910390f35b610925610fe9565b005b341561093257600080fd5b61093a612517565b6040518082815260200191505060405180910390f35b341561095b57600080fd5b61096361251d565b604051808215151515815260200191505060405180910390f35b341561098857600080fd5b6109b960048080359060200190919080359060200190919080359060200190919080359060200190919050506125b8565b604051808215151515815260200191505060405180910390f35b34156109de57600080fd5b610a56600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061263d565b604051808215151515815260200191505060405180910390f35b3415610a7b57600080fd5b610a83612696565b604051808215151515815260200191505060405180910390f35b3415610aa857600080fd5b610af3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506126a9565b6040518082815260200191505060405180910390f35b3415610b1457600080fd5b610b40600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061277c565b6040518082815260200191505060405180910390f35b3415610b6157600080fd5b610b69612794565b604051808215151515815260200191505060405180910390f35b3415610b8e57600080fd5b610b966127a7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610be357600080fd5b610beb6127cd565b604051808215151515815260200191505060405180910390f35b3415610c1057600080fd5b610c1861284c565b6040518082815260200191505060405180910390f35b3415610c3957600080fd5b610c84600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612852565b6040518082815260200191505060405180910390f35b3415610ca557600080fd5b610cad6128d9565b604051808215151515815260200191505060405180910390f35b3415610cd257600080fd5b610cfe600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506128ec565b604051808215151515815260200191505060405180910390f35b3415610d2357600080fd5b610db060048080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050612aff565b005b3415610dbd57600080fd5b610dc5612c33565b604051808215151515815260200191505060405180910390f35b3415610dea57600080fd5b610e16600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612cb2565b6040518082815260200191505060405180910390f35b3415610e3757600080fd5b610e3f612cca565b6040518082815260200191505060405180910390f35b3415610e6057600080fd5b610eb6600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019091905050612cd0565b005b3415610ec357600080fd5b610f7e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050612ded565b604051808215151515815260200191505060405180910390f35b3415610fa357600080fd5b610fcf600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061322b565b604051808215151515815260200191505060405180910390f35b6000806000601360009054906101000a900460ff1615151561100a57600080fd5b60001515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561106957600080fd5b600f54600c54111561107f57600f54600c819055505b33925034915066038d7ea4c680008211156111665760001515601360029054906101000a900460ff1615151415156110b657600080fd5b6110cb6012548361324b90919063ffffffff16565b90506110e2600c548261327e90919063ffffffff16565b9050600f5481111515156110f557600080fd5b6110ff838261329c565b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050151561116157600080fd5b611352565b60001515601360019054906101000a900460ff16151514801561118d5750600f54600c5411155b80156111da5750600654600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411155b80156112255750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544210155b151561123057600080fd5b611296611287600d54600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461324b90919063ffffffff16565b8261327e90919063ffffffff16565b90506112ad600c548261327e90919063ffffffff16565b90506001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550611307838261329c565b50620151804201600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600b5460105410151561137b576001601360006101000a81548160ff0219169083151502179055505b505050565b611388613a5e565b60088054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561141e5780601f106113f35761010080835404028352916020019161141e565b820191906000526020600020905b81548152906001019060200180831161140157829003601f168201915b5050505050905090565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561157757600080fd5b601360009054906101000a900460ff1615151561159357600080fd5b6000601360026101000a81548160ff0219169083151502179055506001905090565b6000600b54905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561161c57600080fd5b601360009054906101000a900460ff1615151561163857600080fd5b6000601360016101000a81548160ff0219169083151502179055506001905090565b60125481565b600060011515601160009054906101000a900460ff16151514151561168457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156116c15750600082115b801561170c575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015611794575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156117f0575060001515600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b801561184c575060001515600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b151561185757600080fd5b6118a982600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461341890919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061193e82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461327e90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a1082600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461341890919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600d5481565b6000600a60009054906101000a900460ff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b7a57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611bc857600080fd5b339050611c1d82600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461341890919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c7582600b5461341890919063ffffffff16565b600b81905550611c908260105461341890919063ffffffff16565b6010819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d4557600080fd5b60ff825111151515611d5657600080fd5b600090505b81518160ff161015611de657600160036000848460ff16815181101515611d7e57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050611d5b565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e4757600080fd5b3073ffffffffffffffffffffffffffffffffffffffff163190508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515611ea157600080fd5b5050565b60065481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f5157600080fd5b601360009054906101000a900460ff16151515611f6d57600080fd5b6001601360016101000a81548160ff0219169083151502179055506001905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fec57600080fd5b6001601160006101000a81548160ff0219169083151502179055506001905090565b600e5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612041613a5e565b60098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120d75780601f106120ac576101008083540402835291602001916120d7565b820191906000526020600020905b8154815290600101906020018083116120ba57829003601f168201915b5050505050905090565b601360019054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561215157600080fd5b601360009054906101000a900460ff1615151561216d57600080fd5b6001601360006101000a81548160ff0219169083151502179055506001905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121ec57600080fd5b60ff8251111515156121fd57600080fd5b600090505b81518160ff16101561228d57600060036000848460ff1681518110151561222557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050612202565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122ec57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561236357806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123c357600080fd5b601360009054906101000a900460ff161515156123df57600080fd5b60ff8351111515156123f057600080fd5b8151835114151561240057600080fd5b600090505b82518160ff1610156124b157600f54828260ff1681518110151561242557fe5b906020019060200201511115151561243c57600080fd5b61247a838260ff1681518110151561245057fe5b90602001906020020151838360ff1681518110151561246b57fe5b9060200190602002015161329c565b50600b546010541015156124a4576001601360006101000a81548160ff0219169083151502179055505b8080600101915050612405565b505050565b60006124c0613a72565b60011515601160009054906101000a900460ff1615151415156124e257600080fd5b6124eb84613431565b15612502576124fb848483613444565b9150612510565b61250d8484836137e5565b91505b5092915050565b600c5481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561257a57600080fd5b601360009054906101000a900460ff1615151561259657600080fd5b6001601360026101000a81548160ff0219169083151502179055506001905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561261557600080fd5b84600c8190555083600d81905550826012819055508160068190555060019050949350505050565b600060011515601160009054906101000a900460ff16151514151561266157600080fd5b61266a84613431565b156126815761267a848484613444565b905061268f565b61268c8484846137e5565b90505b9392505050565b601360009054906101000a900460ff1681565b60008060008491508173ffffffffffffffffffffffffffffffffffffffff166370a08231856000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561275457600080fd5b6102c65a03f1151561276557600080fd5b505050604051805190509050809250505092915050565b60056020528060005260406000206000915090505481565b601360029054906101000a900460ff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561282a57600080fd5b6000601360006101000a81548160ff0219169083151502179055506001905090565b600f5481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b601160009054906101000a900460ff1681565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561294c57600080fd5b8391508173ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15156129f257600080fd5b6102c65a03f11515612a0357600080fd5b5050506040518051905090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515612adb57600080fd5b6102c65a03f11515612aec57600080fd5b5050506040518051905092505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b5c57600080fd5b60ff835111151515612b6d57600080fd5b600090505b82518160ff161015612c2e57600654828260ff16815181101515612b9257fe5b9060200190602002015111151515612ba957600080fd5b818160ff16815181101515612bba57fe5b9060200190602002015160046000858460ff16815181101515612bd957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080600101915050612b72565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c9057600080fd5b6000601160006101000a81548160ff0219169083151502179055506001905090565b60046020528060005260406000206000915090505481565b60105481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d2d57600080fd5b601360009054906101000a900460ff16151515612d4957600080fd5b60ff835111151515612d5a57600080fd5b600f548211151515612d6b57600080fd5b600090505b82518160ff161015612dbf57600f548211151515612d8d57600080fd5b612db1838260ff16815181101515612da157fe5b906020019060200201518361329c565b508080600101915050612d70565b600b54601054101515612de8576001601360006101000a81548160ff0219169083151502179055505b505050565b600060011515601160009054906101000a900460ff161515141515612e1157600080fd5b612e1a85613431565b156132155783612e2933611eab565b1015612e3457600080fd5b612e8684600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461341890919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612f1b84600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461327e90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff166000836040518082805190602001908083835b602083101515612fad5780518252602082019150602081019050602083039250612f88565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207c01000000000000000000000000000000000000000000000000000000009004903387876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828051906020019080838360005b8381101561308e578082015181840152602081019050613073565b50505050905090810190601f1680156130bb5780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185886187965a03f1935050505015156130df57fe5b826040518082805190602001908083835b60208310151561311557805182526020820191506020810190506020830392506130f0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16876040518082815260200191505060405180910390a48473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019050613223565b6132208585856137e5565b90505b949350505050565b60036020528060005260406000206000915054906101000a900460ff1681565b6000808284029050600084148061326c575082848281151561326957fe5b04145b151561327457fe5b8091505092915050565b600080828401905083811015151561329257fe5b8091505092915050565b6000601360009054906101000a900460ff161515156132ba57600080fd5b6000600f54101515156132cc57600080fd5b600f5482111515156132dd57600080fd5b6132f28260105461327e90919063ffffffff16565b60108190555061330d82600f5461341890919063ffffffff16565b600f8190555061336582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461327e90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082821115151561342657fe5b818303905092915050565b600080823b905060008111915050919050565b6000808361345133611eab565b101561345c57600080fd5b6134ae84600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461341890919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061354384600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461327e90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508490508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561364b578082015181840152602081019050613630565b50505050905090810190601f1680156136785780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561369857600080fd5b6102c65a03f115156136a957600080fd5b505050826040518082805190602001908083835b6020831015156136e257805182526020820191506020810190506020830392506136bd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16876040518082815260200191505060405180910390a48473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019150509392505050565b6000826137f133611eab565b10156137fc57600080fd5b61384e83600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461341890919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506138e383600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461327e90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816040518082805190602001908083835b60208310151561395c5780518252602082019150602081019050602083039250613937565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16866040518082815260200191505060405180910390a48373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600190509392505050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b6000808284811515613a9457fe5b04905080915050929150505600a165627a7a723058207c63de9a73ea1406760d31dd62a36de18ef708daeebe1fa364730ffb1df0bbd400290000000000000000000000000071cebd55c6b12905f3e49ad702579cecc3a884",
  "constructorArguments": "0000000000000000000000000071cebd55c6b12905f3e49ad702579cecc3a884"
}