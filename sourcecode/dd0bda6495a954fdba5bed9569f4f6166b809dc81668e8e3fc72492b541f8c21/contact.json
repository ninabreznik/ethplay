{
  "address": "0x246db6d3b3b7eb2de10a99db4f0ddc3941404603",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BEECOIN",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-15\n*/\n\npragma solidity 0.4.18;\n\n// File: contracts/util/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// File: contracts/token/ERC20.sol\n\n/**\n *   @title ERC20\n *   @dev Standart ERC20 token interface\n */\ncontract ERC20 {\n    mapping(address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    function balanceOf(address _who) public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n    function approve(address _spender, uint256 _value) public returns (bool);\n    function allowance(address _owner, address _spender) public view returns (uint256);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n// File: contracts/token/BEECOIN.sol\n\ncontract BEECOIN is ERC20 {\n    using SafeMath for uint256;\n    \n    address public admin;\n    string public constant name = \"BEECOIN\";\n    string public constant symbol = \"BCO\";\n    uint8 public constant decimals = 18;\n    uint256 public totalSupply;\n\n\n    mapping(address => bool) internal blacklist;\n    event Burn(address indexed from, uint256 value);\n\n    // Disables/enables token transfers, for migration to platform mainnet\n    // true = Can not transfers\n    // false = Can transfer\n    bool public checkTokenLock = false;\n\n    // Allows execution by the ico only\n    modifier adminOnly {\n        require(msg.sender == admin);\n        _;\n    }\n\n    modifier transferable {\n        require(msg.sender == admin || !checkTokenLock);\n        _;\n    }\n\n    function BEECOIN(uint256 _initialSupply) public {\n        balances[msg.sender] = _initialSupply.mul(1e18);\n        totalSupply = _initialSupply.mul(1e18);\n        admin = msg.sender;\n    }\n\n    \n    // _block\n    // True : Can not Transfer\n    // false : Can Transfer\n    function blockTransfer(bool _block) external adminOnly {\n        checkTokenLock = _block;\n    }\n\n\n    // _inBlackList\n    // True : Can not Transfer\n    // false : Can Transfer\n    function updateBlackList(address _addr, bool _inBlackList) external adminOnly{\n        blacklist[_addr] = _inBlackList;\n    }\n    \n\n    function isInBlackList(address _addr) public view returns(bool){\n        return blacklist[_addr];\n    }\n    \n    function balanceOf(address _who) public view returns(uint256) {\n        return balances[_who];\n    }\n\n    function transfer(address _to, uint256 _amount) public transferable returns(bool) {\n        require(_to != address(0));\n        require(_to != address(this));\n        require(_amount > 0);\n        require(_amount <= balances[msg.sender]);\n        require(blacklist[msg.sender] == false);\n        require(blacklist[_to] == false);\n\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount) public transferable returns(bool) {\n        require(_to != address(0));\n        require(_to != address(this));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        require(blacklist[_from] == false);\n        require(blacklist[_to] == false);\n\n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n}\n\n    function approve(address _spender, uint256 _amount) public returns(bool) {\n        // reduce spender's allowance to 0 then set desired value after to avoid race condition\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns(uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    function burnTokens(address _investor, uint256 _value) external adminOnly {\n        require(_value > 0);\n        require(balances[_investor] >= _value);\n        totalSupply = totalSupply.sub(_value);\n        balances[_investor] = balances[_investor].sub(_value);\n        Burn(_investor, _value);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkTokenLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isInBlackList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_block\",\"type\":\"bool\"}],\"name\":\"blockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_inBlackList\",\"type\":\"bool\"}],\"name\":\"updateBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526005805460ff19169055341561001957600080fd5b604051602080610b8483398101604052808051915061004f905081670de0b6b3a7640000640100000000610a3d6100ab82021704565b600160a060020a03331660009081526020819052604090205561008781670de0b6b3a7640000640100000000610a3d6100ab82021704565b6003555060028054600160a060020a03191633600160a060020a03161790556100e1565b6000808315156100be57600091506100da565b508282028284828115156100ce57fe5b04146100d657fe5b8091505b5092915050565b610a94806100f06000396000f3006060604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b3146101695780630d1118ce1461019f57806318160ddd146101c357806323b872dd146101e8578063313ce567146102105780636f4b9ae71461023957806370a082311461024c57806370b2973e1461026b57806395d89b411461028a578063a9059cbb1461029d578063dd62ed3e146102bf578063e074d6a9146102e4578063f851a440146102fc578063fc2eb8891461032b575b600080fd5b34156100ea57600080fd5b6100f261034f565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012e578082015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017457600080fd5b61018b600160a060020a0360043516602435610386565b604051901515815260200160405180910390f35b34156101aa57600080fd5b6101c1600160a060020a036004351660243561042c565b005b34156101ce57600080fd5b6101d661050f565b60405190815260200160405180910390f35b34156101f357600080fd5b61018b600160a060020a0360043581169060243516604435610515565b341561021b57600080fd5b61022361072d565b60405160ff909116815260200160405180910390f35b341561024457600080fd5b61018b610732565b341561025757600080fd5b6101d6600160a060020a036004351661073b565b341561027657600080fd5b61018b600160a060020a0360043516610756565b341561029557600080fd5b6100f2610774565b34156102a857600080fd5b61018b600160a060020a03600435166024356107ab565b34156102ca57600080fd5b6101d6600160a060020a0360043581169060243516610963565b34156102ef57600080fd5b6101c1600435151561098e565b341561030757600080fd5b61030f6109bc565b604051600160a060020a03909116815260200160405180910390f35b341561033657600080fd5b6101c1600160a060020a036004351660243515156109cb565b60408051908101604052600781527f424545434f494e00000000000000000000000000000000000000000000000000602082015281565b60008115806103b85750600160a060020a03338116600090815260016020908152604080832093871683529290522054155b15156103c357600080fd5b600160a060020a03338116600081815260016020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60025433600160a060020a0390811691161461044757600080fd5b6000811161045457600080fd5b600160a060020a0382166000908152602081905260409020548190101561047a57600080fd5b60035461048d908263ffffffff610a1116565b600355600160a060020a0382166000908152602081905260409020546104b9908263ffffffff610a1116565b600160a060020a0383166000818152602081905260409081902092909255907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59083905190815260200160405180910390a25050565b60035481565b60025460009033600160a060020a0390811691161480610538575060055460ff16155b151561054357600080fd5b600160a060020a038316151561055857600080fd5b30600160a060020a031683600160a060020a03161415151561057957600080fd5b600160a060020a03841660009081526020819052604090205482111561059e57600080fd5b600160a060020a03808516600090815260016020908152604080832033909416835292905220548211156105d157600080fd5b600160a060020a03841660009081526004602052604090205460ff16156105f757600080fd5b600160a060020a03831660009081526004602052604090205460ff161561061d57600080fd5b600160a060020a038416600090815260208190526040902054610646908363ffffffff610a1116565b600160a060020a038086166000908152602081815260408083209490945560018152838220339093168252919091522054610687908363ffffffff610a1116565b600160a060020a038086166000908152600160209081526040808320338516845282528083209490945591861681529081905220546106cc908363ffffffff610a2316565b600160a060020a03808516600081815260208190526040908190209390935591908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b601281565b60055460ff1681565b600160a060020a031660009081526020819052604090205490565b600160a060020a031660009081526004602052604090205460ff1690565b60408051908101604052600381527f42434f0000000000000000000000000000000000000000000000000000000000602082015281565b60025460009033600160a060020a03908116911614806107ce575060055460ff16155b15156107d957600080fd5b600160a060020a03831615156107ee57600080fd5b30600160a060020a031683600160a060020a03161415151561080f57600080fd5b6000821161081c57600080fd5b600160a060020a03331660009081526020819052604090205482111561084157600080fd5b600160a060020a03331660009081526004602052604090205460ff161561086757600080fd5b600160a060020a03831660009081526004602052604090205460ff161561088d57600080fd5b600160a060020a0333166000908152602081905260409020546108b6908363ffffffff610a1116565b600160a060020a0333811660009081526020819052604080822093909355908516815220546108eb908363ffffffff610a2316565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b60025433600160a060020a039081169116146109a957600080fd5b6005805460ff1916911515919091179055565b600254600160a060020a031681565b60025433600160a060020a039081169116146109e657600080fd5b600160a060020a03919091166000908152600460205260409020805460ff1916911515919091179055565b600082821115610a1d57fe5b50900390565b600082820183811015610a3257fe5b8091505b5092915050565b600080831515610a505760009150610a36565b50828202828482811515610a6057fe5b0414610a3257fe00a165627a7a72305820370b32996e092d0994bb35e9c8abd0d08f817c6f22b0cf43e327dac9d8c107520029000000000000000000000000000000000000000000000000000000003b9aca00",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00"
}