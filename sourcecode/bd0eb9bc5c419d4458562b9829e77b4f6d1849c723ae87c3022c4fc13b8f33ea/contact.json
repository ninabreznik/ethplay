{
  "address": "0xd60cff99be043d2d2f1c770d7081d9b509c569f3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSigWallet",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-21\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title MultiSig\n * @dev Simple MultiSig using off-chain signing.\n * @author Julien Niset - <[emailÂ protected]>\n */\ncontract MultiSigWallet {\n\n    uint constant public MAX_OWNER_COUNT = 10;\n\n    // Incrementing counter to prevent replay attacks\n    uint256 public nonce;   \n    // The threshold           \n    uint256 public threshold; \n    // The number of owners\n    uint256 public ownersCount;\n    // Mapping to check if an address is an owner\n    mapping (address => bool) public isOwner; \n\n    // Events\n    event OwnerAdded(address indexed owner);\n    event OwnerRemoved(address indexed owner);\n    event ThresholdChanged(uint256 indexed newThreshold);\n    event Executed(address indexed destination, uint256 indexed value, bytes data);\n    event Received(uint256 indexed value, address indexed from);\n\n    /**\n     * @dev Throws is the calling account is not the multisig.\n     */\n    modifier onlyWallet() {\n        require(msg.sender == address(this), \"MSW: Calling account is not wallet\");\n        _;\n    }\n\n    /**\n     * @dev Constructor.\n     * @param _threshold The threshold of the multisig.\n     * @param _owners The owners of the multisig.\n     */\n    constructor(uint256 _threshold, address[] _owners) public {\n        require(_owners.length > 0 && _owners.length <= MAX_OWNER_COUNT, \"MSW: Not enough or too many owners\");\n        require(_threshold > 0 && _threshold <= _owners.length, \"MSW: Invalid threshold\");\n        ownersCount = _owners.length;\n        threshold = _threshold;\n        for(uint256 i = 0; i < _owners.length; i++) {\n            isOwner[_owners[i]] = true;\n            emit OwnerAdded(_owners[i]);\n        }\n        emit ThresholdChanged(_threshold);\n    }\n\n    /**\n     * @dev Only entry point of the multisig. The method will execute any transaction provided that it \n     * receieved enough signatures from the wallet owners.  \n     * @param _to The destination address for the transaction to execute.\n     * @param _value The value parameter for the transaction to execute.\n     * @param _data The data parameter for the transaction to execute.\n     * @param _signatures Concatenated signatures ordered based on increasing signer's address.\n     */\n    function execute(address _to, uint _value, bytes _data, bytes _signatures) public {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 count = _signatures.length / 65;\n        require(count >= threshold, \"MSW: Not enough signatures\");\n        bytes32 txHash = keccak256(abi.encodePacked(byte(0x19), byte(0), address(this), _to, _value, _data, nonce));\n        nonce += 1;\n        uint256 valid;\n        address lastSigner = 0;\n        for(uint256 i = 0; i < count; i++) {\n            (v,r,s) = splitSignature(_signatures, i);\n            address recovered = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",txHash)), v, r, s);\n            require(recovered > lastSigner, \"MSW: Badly ordered signatures\"); // make sure signers are different\n            lastSigner = recovered;\n            if(isOwner[recovered]) {\n                valid += 1;\n                if(valid >= threshold) {\n                    require(_to.call.value(_value)(_data), \"MSW: External call failed\");\n                    emit Executed(_to, _value, _data);\n                    return;\n                }\n            }\n        }\n        // If we reach that point then the transaction is not executed\n        revert(\"MSW: Not enough valid signatures\");\n    }\n\n    /**\n     * @dev Adds an owner to the multisig. This method can only be called by the multisig itself \n     * (i.e. it must go through the execute method and be confirmed by the owners).\n     * @param _owner The address of the new owner.\n     */\n    function addOwner(address _owner) public onlyWallet {\n        require(ownersCount < MAX_OWNER_COUNT, \"MSW: MAX_OWNER_COUNT reached\");\n        require(isOwner[_owner] == false, \"MSW: Already owner\");\n        ownersCount += 1;\n        isOwner[_owner] = true;\n        emit OwnerAdded(_owner);\n    }\n\n    /**\n     * @dev Removes an owner from the multisig. This method can only be called by the multisig itself \n     * (i.e. it must go through the execute method and be confirmed by the owners).\n     * @param _owner The address of the removed owner.\n     */\n    function removeOwner(address _owner) public onlyWallet {\n        require(ownersCount > threshold, \"MSW: Too few owners left\");\n        require(isOwner[_owner] == true, \"MSW: Not an owner\");\n        ownersCount -= 1;\n        delete isOwner[_owner];\n        emit OwnerRemoved(_owner);\n    }\n\n    /**\n     * @dev Changes the threshold of the multisig. This method can only be called by the multisig itself \n     * (i.e. it must go through the execute method and be confirmed by the owners).\n     * @param _newThreshold The new threshold.\n     */\n    function changeThreshold(uint256 _newThreshold) public onlyWallet {\n        require(_newThreshold > 0 && _newThreshold <= ownersCount, \"MSW: Invalid new threshold\");\n        threshold = _newThreshold;\n        emit ThresholdChanged(_newThreshold);\n    }\n\n    /**\n     * @dev Makes it possible for the multisig to receive ETH.\n     */\n    function () external payable {\n        emit Received(msg.value, msg.sender);        \n    }\n\n        /**\n     * @dev Parses the signatures and extract (r, s, v) for a signature at a given index.\n     * A signature is {bytes32 r}{bytes32 s}{uint8 v} in compact form and signatures are concatenated.\n     * @param _signatures concatenated signatures\n     * @param _index which signature to read (0, 1, 2, ...)\n     */\n    function splitSignature(bytes _signatures, uint256 _index) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\n        // we jump 32 (0x20) as the first slot of bytes contains the length\n        // we jump 65 (0x41) per signature\n        // for v we load 32 bytes ending with v (the first 31 come from s) tehn apply a mask\n        assembly {\n            r := mload(add(_signatures, add(0x20,mul(0x41,_index))))\n            s := mload(add(_signatures, add(0x40,mul(0x41,_index))))\n            v := and(mload(add(_signatures, add(0x41,mul(0x41,_index)))), 0xff)\n        }\n        require(v == 27 || v == 28, \"MSW: Invalid v\"); \n    }\n\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000001c385bbb6bd2edb66fb5b752532b3e9ef705d25d00000000000000000000000036b300079b70822dfcd73911fc7d932f45cfb9160000000000000000000000004a804ddb1a75de64d0101d8c53f75cdcf654ff24"
}