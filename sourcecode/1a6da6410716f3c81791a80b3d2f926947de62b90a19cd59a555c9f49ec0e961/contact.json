{
  "address": "0x44165e41f7b3ad798bf4d80b380601ce2ea901f4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ATxPlatform",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-07\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title Owned contract with safe ownership pass.\n *\n * Note: all the non constant functions return false instead of throwing in case if state change\n * didn't happen yet.\n */\ncontract Owned {\n    /**\n     * Contract owner address\n     */\n    address public contractOwner;\n\n    /**\n     * Contract owner address\n     */\n    address public pendingContractOwner;\n\n    function Owned() {\n        contractOwner = msg.sender;\n    }\n\n    /**\n    * @dev Owner check modifier\n    */\n    modifier onlyContractOwner() {\n        if (contractOwner == msg.sender) {\n            _;\n        }\n    }\n\n    /**\n     * @dev Destroy contract and scrub a data\n     * @notice Only owner can call it\n     */\n    function destroy() onlyContractOwner {\n        suicide(msg.sender);\n    }\n\n    /**\n     * Prepares ownership pass.\n     *\n     * Can only be called by current owner.\n     *\n     * @param _to address of the next owner. 0x0 is not allowed.\n     *\n     * @return success.\n     */\n    function changeContractOwnership(address _to) onlyContractOwner() returns(bool) {\n        if (_to  == 0x0) {\n            return false;\n        }\n\n        pendingContractOwner = _to;\n        return true;\n    }\n\n    /**\n     * Finalize ownership pass.\n     *\n     * Can only be called by pending owner.\n     *\n     * @return success.\n     */\n    function claimContractOwnership() returns(bool) {\n        if (pendingContractOwner != msg.sender) {\n            return false;\n        }\n\n        contractOwner = pendingContractOwner;\n        delete pendingContractOwner;\n\n        return true;\n    }\n}\n\ncontract ERC20Interface {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed from, address indexed spender, uint256 value);\n    string public symbol;\n\n    function totalSupply() constant returns (uint256 supply);\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n}\n\n/**\n * @title Generic owned destroyable contract\n */\ncontract Object is Owned {\n    /**\n    *  Common result code. Means everything is fine.\n    */\n    uint constant OK = 1;\n    uint constant OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER = 8;\n\n    function withdrawnTokens(address[] tokens, address _to) onlyContractOwner returns(uint) {\n        for(uint i=0;i<tokens.length;i++) {\n            address token = tokens[i];\n            uint balance = ERC20Interface(token).balanceOf(this);\n            if(balance != 0)\n                ERC20Interface(token).transfer(_to,balance);\n        }\n        return OK;\n    }\n\n    function checkOnlyContractOwner() internal constant returns(uint) {\n        if (contractOwner == msg.sender) {\n            return OK;\n        }\n\n        return OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER;\n    }\n}\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title General MultiEventsHistory user.\n *\n */\ncontract MultiEventsHistoryAdapter {\n\n    /**\n    *   @dev It is address of MultiEventsHistory caller assuming we are inside of delegate call.\n    */\n    function _self() constant internal returns (address) {\n        return msg.sender;\n    }\n}\n\n/// @title Fund Tokens Platform Emitter.\n///\n/// Contains all the original event emitting function definitions and events.\n/// In case of new events needed later, additional emitters can be developed.\n/// All the functions is meant to be called using delegatecall.\ncontract Emitter is MultiEventsHistoryAdapter {\n\n    event Transfer(address indexed from, address indexed to, bytes32 indexed symbol, uint value, string reference);\n    event Issue(bytes32 indexed symbol, uint value, address indexed by);\n    event Revoke(bytes32 indexed symbol, uint value, address indexed by);\n    event OwnershipChange(address indexed from, address indexed to, bytes32 indexed symbol);\n    event Approve(address indexed from, address indexed spender, bytes32 indexed symbol, uint value);\n    event Recovery(address indexed from, address indexed to, address by);\n    event Error(uint errorCode);\n\n    function emitTransfer(address _from, address _to, bytes32 _symbol, uint _value, string _reference) public {\n        Transfer(_from, _to, _symbol, _value, _reference);\n    }\n\n    function emitIssue(bytes32 _symbol, uint _value, address _by) public {\n        Issue(_symbol, _value, _by);\n    }\n\n    function emitRevoke(bytes32 _symbol, uint _value, address _by) public {\n        Revoke(_symbol, _value, _by);\n    }\n\n    function emitOwnershipChange(address _from, address _to, bytes32 _symbol) public {\n        OwnershipChange(_from, _to, _symbol);\n    }\n\n    function emitApprove(address _from, address _spender, bytes32 _symbol, uint _value) public {\n        Approve(_from, _spender, _symbol, _value);\n    }\n\n    function emitRecovery(address _from, address _to, address _by) public {\n        Recovery(_from, _to, _by);\n    }\n\n    function emitError(uint _errorCode) public {\n        Error(_errorCode);\n    }\n}\n\n\ncontract ProxyEventsEmitter {\n    function emitTransfer(address _from, address _to, uint _value) public;\n    function emitApprove(address _from, address _spender, uint _value) public;\n}\n\n\n/// @title Fund Tokens Platform.\n///\n/// Platform uses MultiEventsHistory contract to keep events, so that in case it needs to be redeployed\n/// at some point, all the events keep appearing at the same place.\n///\n/// Every asset is meant to be used through a proxy contract. Only one proxy contract have access\n/// rights for a particular asset.\n///\n/// Features: transfers, allowances, supply adjustments, lost wallet access recovery.\n///\n/// Note: all the non constant functions return false instead of throwing in case if state change\n/// didn't happen yet.\n/// BMCPlatformInterface compatibility\ncontract ATxPlatform is Object, Emitter {\n\n    uint constant ATX_PLATFORM_SCOPE = 80000;\n    uint constant ATX_PLATFORM_PROXY_ALREADY_EXISTS = ATX_PLATFORM_SCOPE + 1;\n    uint constant ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF = ATX_PLATFORM_SCOPE + 2;\n    uint constant ATX_PLATFORM_INVALID_VALUE = ATX_PLATFORM_SCOPE + 3;\n    uint constant ATX_PLATFORM_INSUFFICIENT_BALANCE = ATX_PLATFORM_SCOPE + 4;\n    uint constant ATX_PLATFORM_NOT_ENOUGH_ALLOWANCE = ATX_PLATFORM_SCOPE + 5;\n    uint constant ATX_PLATFORM_ASSET_ALREADY_ISSUED = ATX_PLATFORM_SCOPE + 6;\n    uint constant ATX_PLATFORM_CANNOT_ISSUE_FIXED_ASSET_WITH_INVALID_VALUE = ATX_PLATFORM_SCOPE + 7;\n    uint constant ATX_PLATFORM_CANNOT_REISSUE_FIXED_ASSET = ATX_PLATFORM_SCOPE + 8;\n    uint constant ATX_PLATFORM_SUPPLY_OVERFLOW = ATX_PLATFORM_SCOPE + 9;\n    uint constant ATX_PLATFORM_NOT_ENOUGH_TOKENS = ATX_PLATFORM_SCOPE + 10;\n    uint constant ATX_PLATFORM_INVALID_NEW_OWNER = ATX_PLATFORM_SCOPE + 11;\n    uint constant ATX_PLATFORM_ALREADY_TRUSTED = ATX_PLATFORM_SCOPE + 12;\n    uint constant ATX_PLATFORM_SHOULD_RECOVER_TO_NEW_ADDRESS = ATX_PLATFORM_SCOPE + 13;\n    uint constant ATX_PLATFORM_ASSET_IS_NOT_ISSUED = ATX_PLATFORM_SCOPE + 14;\n    uint constant ATX_PLATFORM_INVALID_INVOCATION = ATX_PLATFORM_SCOPE + 15;\n\n    using SafeMath for uint;\n\n    /// @title Structure of a particular asset.\n    struct Asset {\n        uint owner;                       // Asset's owner id.\n        uint totalSupply;                 // Asset's total supply.\n        string name;                      // Asset's name, for information purposes.\n        string description;               // Asset's description, for information purposes.\n        bool isReissuable;                // Indicates if asset have dynamic or fixed supply.\n        uint8 baseUnit;                   // Proposed number of decimals.\n        mapping(uint => Wallet) wallets;  // Holders wallets.\n        mapping(uint => bool) partowners; // Part-owners of an asset; have less access rights than owner\n    }\n\n    /// @title Structure of an asset holder wallet for particular asset.\n    struct Wallet {\n        uint balance;\n        mapping(uint => uint) allowance;\n    }\n\n    /// @title Structure of an asset holder.\n    struct Holder {\n        address addr;                    // Current address of the holder.\n        mapping(address => bool) trust;  // Addresses that are trusted with recovery proocedure.\n    }\n\n    /// @dev Iterable mapping pattern is used for holders.\n    /// @dev This is an access address mapping. Many addresses may have access to a single holder.\n    uint public holdersCount;\n    mapping(uint => Holder) public holders;\n    mapping(address => uint) holderIndex;\n\n    /// @dev List of symbols that exist in a platform\n    bytes32[] public symbols;\n\n    /// @dev Asset symbol to asset mapping.\n    mapping(bytes32 => Asset) public assets;\n\n    /// @dev Asset symbol to asset proxy mapping.\n    mapping(bytes32 => address) public proxies;\n\n    /// @dev Co-owners of a platform. Has less access rights than a root contract owner\n    mapping(address => bool) public partowners;\n\n    /// @dev Should use interface of the emitter, but address of events history.\n    address public eventsHistory;\n\n    /// @dev Emits Error if called not by asset owner.\n    modifier onlyOwner(bytes32 _symbol) {\n        if (isOwner(msg.sender, _symbol)) {\n            _;\n        }\n    }\n\n    /// @dev UNAUTHORIZED if called not by one of symbol's partowners or owner\n    modifier onlyOneOfOwners(bytes32 _symbol) {\n        if (hasAssetRights(msg.sender, _symbol)) {\n            _;\n        }\n    }\n\n    /// @dev UNAUTHORIZED if called not by one of partowners or contract's owner\n    modifier onlyOneOfContractOwners() {\n        if (contractOwner == msg.sender || partowners[msg.sender]) {\n            _;\n        }\n    }\n\n    /// @dev Emits Error if called not by asset proxy.\n    modifier onlyProxy(bytes32 _symbol) {\n        if (proxies[_symbol] == msg.sender) {\n            _;\n        }\n    }\n\n    /// @dev Emits Error if _from doesn't trust _to.\n    modifier checkTrust(address _from, address _to) {\n        if (isTrusted(_from, _to)) {\n            _;\n        }\n    }\n\n    function() payable public {\n        revert();\n    }\n\n    /// @notice Trust an address to perform recovery procedure for the caller.\n    ///\n    /// @return success.\n    function trust() external returns (uint) {\n        uint fromId = _createHolderId(msg.sender);\n        // Should trust to another address.\n        if (msg.sender == contractOwner) {\n            return _error(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF);\n        }\n        // Should trust to yet untrusted.\n        if (isTrusted(msg.sender, contractOwner)) {\n            return _error(ATX_PLATFORM_ALREADY_TRUSTED);\n        }\n\n        holders[fromId].trust[contractOwner] = true;\n        return OK;\n    }\n\n    /// @notice Revoke trust to perform recovery procedure from an address.\n    ///\n    /// @return success.\n    function distrust() external checkTrust(msg.sender, contractOwner) returns (uint) {\n        holders[getHolderId(msg.sender)].trust[contractOwner] = false;\n        return OK;\n    }\n\n    /// @notice Adds a co-owner of a contract. Might be more than one co-owner\n    ///\n    /// @dev Allowed to only contract onwer\n    ///\n    /// @param _partowner a co-owner of a contract\n    ///\n    /// @return result code of an operation\n    function addPartOwner(address _partowner) external onlyContractOwner returns (uint) {\n        partowners[_partowner] = true;\n        return OK;\n    }\n\n    /// @notice emoves a co-owner of a contract\n    ///\n    /// @dev Should be performed only by root contract owner\n    ///\n    /// @param _partowner a co-owner of a contract\n    ///\n    /// @return result code of an operation\n    function removePartOwner(address _partowner) external onlyContractOwner returns (uint) {\n        delete partowners[_partowner];\n        return OK;\n    }\n\n    /// @notice Sets EventsHstory contract address.\n    ///\n    /// @dev Can be set only by owner.\n    ///\n    /// @param _eventsHistory MultiEventsHistory contract address.\n    ///\n    /// @return success.\n    function setupEventsHistory(address _eventsHistory) external onlyContractOwner returns (uint errorCode) {\n        eventsHistory = _eventsHistory;\n        return OK;\n    }\n\n    /// @notice Adds a co-owner for an asset with provided symbol.\n    /// @dev Should be performed by a contract owner or its co-owners\n    ///\n    /// @param _symbol asset's symbol\n    /// @param _partowner a co-owner of an asset\n    ///\n    /// @return errorCode result code of an operation\n    function addAssetPartOwner(bytes32 _symbol, address _partowner) external onlyOneOfOwners(_symbol) returns (uint) {\n        uint holderId = _createHolderId(_partowner);\n        assets[_symbol].partowners[holderId] = true;\n        Emitter(eventsHistory).emitOwnershipChange(0x0, _partowner, _symbol);\n        return OK;\n    }\n\n    /// @notice Removes a co-owner for an asset with provided symbol.\n    /// @dev Should be performed by a contract owner or its co-owners\n    ///\n    /// @param _symbol asset's symbol\n    /// @param _partowner a co-owner of an asset\n    ///\n    /// @return errorCode result code of an operation\n    function removeAssetPartOwner(bytes32 _symbol, address _partowner) external onlyOneOfOwners(_symbol) returns (uint) {\n        uint holderId = getHolderId(_partowner);\n        delete assets[_symbol].partowners[holderId];\n        Emitter(eventsHistory).emitOwnershipChange(_partowner, 0x0, _symbol);\n        return OK;\n    }\n\n    function massTransfer(address[] addresses, uint[] values, bytes32 _symbol) external onlyOneOfOwners(_symbol) returns (uint errorCode, uint count) {\n        require(addresses.length == values.length);\n        require(_symbol != 0x0);\n\n        uint senderId = _createHolderId(msg.sender);\n\n        uint success = 0;\n        for (uint idx = 0; idx < addresses.length && msg.gas > 110000; ++idx) {\n            uint value = values[idx];\n\n            if (value == 0) {\n                _error(ATX_PLATFORM_INVALID_VALUE);\n                continue;\n            }\n\n            if (_balanceOf(senderId, _symbol) < value) {\n                _error(ATX_PLATFORM_INSUFFICIENT_BALANCE);\n                continue;\n            }\n\n            if (msg.sender == addresses[idx]) {\n                _error(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF);\n                continue;\n            }\n\n            uint holderId = _createHolderId(addresses[idx]);\n\n            _transferDirect(senderId, holderId, value, _symbol);\n            Emitter(eventsHistory).emitTransfer(msg.sender, addresses[idx], _symbol, value, \"\");\n\n            ++success;\n        }\n\n        return (OK, success);\n    }\n\n    /// @notice Provides a cheap way to get number of symbols registered in a platform\n    ///\n    /// @return number of symbols\n    function symbolsCount() public view returns (uint) {\n        return symbols.length;\n    }\n\n    /// @notice Check asset existance.\n    ///\n    /// @param _symbol asset symbol.\n    ///\n    /// @return asset existance.\n    function isCreated(bytes32 _symbol) public view returns (bool) {\n        return assets[_symbol].owner != 0;\n    }\n\n    /// @notice Returns asset decimals.\n    ///\n    /// @param _symbol asset symbol.\n    ///\n    /// @return asset decimals.\n    function baseUnit(bytes32 _symbol) public view returns (uint8) {\n        return assets[_symbol].baseUnit;\n    }\n\n    /// @notice Returns asset name.\n    ///\n    /// @param _symbol asset symbol.\n    ///\n    /// @return asset name.\n    function name(bytes32 _symbol) public view returns (string) {\n        return assets[_symbol].name;\n    }\n\n    /// @notice Returns asset description.\n    ///\n    /// @param _symbol asset symbol.\n    ///\n    /// @return asset description.\n    function description(bytes32 _symbol) public view returns (string) {\n        return assets[_symbol].description;\n    }\n\n    /// @notice Returns asset reissuability.\n    ///\n    /// @param _symbol asset symbol.\n    ///\n    /// @return asset reissuability.\n    function isReissuable(bytes32 _symbol) public view returns (bool) {\n        return assets[_symbol].isReissuable;\n    }\n\n    /// @notice Returns asset owner address.\n    ///\n    /// @param _symbol asset symbol.\n    ///\n    /// @return asset owner address.\n    function owner(bytes32 _symbol) public view returns (address) {\n        return holders[assets[_symbol].owner].addr;\n    }\n\n    /// @notice Check if specified address has asset owner rights.\n    ///\n    /// @param _owner address to check.\n    /// @param _symbol asset symbol.\n    ///\n    /// @return owner rights availability.\n    function isOwner(address _owner, bytes32 _symbol) public view returns (bool) {\n        return isCreated(_symbol) && (assets[_symbol].owner == getHolderId(_owner));\n    }\n\n    /// @notice Checks if a specified address has asset owner or co-owner rights.\n    ///\n    /// @param _owner address to check.\n    /// @param _symbol asset symbol.\n    ///\n    /// @return owner rights availability.\n    function hasAssetRights(address _owner, bytes32 _symbol) public view returns (bool) {\n        uint holderId = getHolderId(_owner);\n        return isCreated(_symbol) && (assets[_symbol].owner == holderId || assets[_symbol].partowners[holderId]);\n    }\n\n    /// @notice Returns asset total supply.\n    ///\n    /// @param _symbol asset symbol.\n    ///\n    /// @return asset total supply.\n    function totalSupply(bytes32 _symbol) public view returns (uint) {\n        return assets[_symbol].totalSupply;\n    }\n\n    /// @notice Returns asset balance for a particular holder.\n    ///\n    /// @param _holder holder address.\n    /// @param _symbol asset symbol.\n    ///\n    /// @return holder balance.\n    function balanceOf(address _holder, bytes32 _symbol) public view returns (uint) {\n        return _balanceOf(getHolderId(_holder), _symbol);\n    }\n\n    /// @notice Returns asset balance for a particular holder id.\n    ///\n    /// @param _holderId holder id.\n    /// @param _symbol asset symbol.\n    ///\n    /// @return holder balance.\n    function _balanceOf(uint _holderId, bytes32 _symbol) public view returns (uint) {\n        return assets[_symbol].wallets[_holderId].balance;\n    }\n\n    /// @notice Returns current address for a particular holder id.\n    ///\n    /// @param _holderId holder id.\n    ///\n    /// @return holder address.\n    function _address(uint _holderId) public view returns (address) {\n        return holders[_holderId].addr;\n    }\n\n    function checkIsAssetPartOwner(bytes32 _symbol, address _partowner) public view returns (bool) {\n        require(_partowner != 0x0);\n        uint holderId = getHolderId(_partowner);\n        return assets[_symbol].partowners[holderId];\n    }\n\n    /// @notice Sets Proxy contract address for a particular asset.\n    ///\n    /// Can be set only once for each asset, and only by contract owner.\n    ///\n    /// @param _proxyAddress Proxy contract address.\n    /// @param _symbol asset symbol.\n    ///\n    /// @return success.\n    function setProxy(address _proxyAddress, bytes32 _symbol) public onlyOneOfContractOwners returns (uint) {\n        if (proxies[_symbol] != 0x0) {\n            return ATX_PLATFORM_PROXY_ALREADY_EXISTS;\n        }\n        proxies[_symbol] = _proxyAddress;\n        return OK;\n    }\n\n    /// @notice Returns holder id for the specified address.\n    ///\n    /// @param _holder holder address.\n    ///\n    /// @return holder id.\n    function getHolderId(address _holder) public view returns (uint) {\n        return holderIndex[_holder];\n    }\n\n    /// @notice Transfers asset balance between holders wallets.\n    ///\n    /// @dev Can only be called by asset proxy.\n    ///\n    /// @param _to holder address to give to.\n    /// @param _value amount to transfer.\n    /// @param _symbol asset symbol.\n    /// @param _reference transfer comment to be included in a Transfer event.\n    /// @param _sender transfer initiator address.\n    ///\n    /// @return success.\n    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) onlyProxy(_symbol) public returns (uint) {\n        return _transfer(getHolderId(_sender), _createHolderId(_to), _value, _symbol, _reference, getHolderId(_sender));\n    }\n\n    /// @notice Issues new asset token on the platform.\n    ///\n    /// Tokens issued with this call go straight to contract owner.\n    /// Each symbol can be issued only once, and only by contract owner.\n    ///\n    /// @param _symbol asset symbol.\n    /// @param _value amount of tokens to issue immediately.\n    /// @param _name name of the asset.\n    /// @param _description description for the asset.\n    /// @param _baseUnit number of decimals.\n    /// @param _isReissuable dynamic or fixed supply.\n    ///\n    /// @return success.\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) public returns (uint) {\n        return issueAssetToAddress(_symbol, _value, _name, _description, _baseUnit, _isReissuable, msg.sender);\n    }\n\n    /// @notice Issues new asset token on the platform.\n    ///\n    /// Tokens issued with this call go straight to contract owner.\n    /// Each symbol can be issued only once, and only by contract owner.\n    ///\n    /// @param _symbol asset symbol.\n    /// @param _value amount of tokens to issue immediately.\n    /// @param _name name of the asset.\n    /// @param _description description for the asset.\n    /// @param _baseUnit number of decimals.\n    /// @param _isReissuable dynamic or fixed supply.\n    /// @param _account address where issued balance will be held\n    ///\n    /// @return success.\n    function issueAssetToAddress(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, address _account) public onlyOneOfContractOwners returns (uint) {\n        // Should have positive value if supply is going to be fixed.\n        if (_value == 0 && !_isReissuable) {\n            return _error(ATX_PLATFORM_CANNOT_ISSUE_FIXED_ASSET_WITH_INVALID_VALUE);\n        }\n        // Should not be issued yet.\n        if (isCreated(_symbol)) {\n            return _error(ATX_PLATFORM_ASSET_ALREADY_ISSUED);\n        }\n        uint holderId = _createHolderId(_account);\n        uint creatorId = _account == msg.sender ? holderId : _createHolderId(msg.sender);\n\n        symbols.push(_symbol);\n        assets[_symbol] = Asset(creatorId, _value, _name, _description, _isReissuable, _baseUnit);\n        assets[_symbol].wallets[holderId].balance = _value;\n        // Internal Out Of Gas/Throw: revert this transaction too;\n        // Call Stack Depth Limit reached: n/a after HF 4;\n        // Recursive Call: safe, all changes already made.\n        Emitter(eventsHistory).emitIssue(_symbol, _value, _address(holderId));\n        return OK;\n    }\n\n    /// @notice Issues additional asset tokens if the asset have dynamic supply.\n    ///\n    /// Tokens issued with this call go straight to asset owner.\n    /// Can only be called by asset owner.\n    ///\n    /// @param _symbol asset symbol.\n    /// @param _value amount of additional tokens to issue.\n    ///\n    /// @return success.\n    function reissueAsset(bytes32 _symbol, uint _value) public onlyOneOfOwners(_symbol) returns (uint) {\n        // Should have positive value.\n        if (_value == 0) {\n            return _error(ATX_PLATFORM_INVALID_VALUE);\n        }\n        Asset storage asset = assets[_symbol];\n        // Should have dynamic supply.\n        if (!asset.isReissuable) {\n            return _error(ATX_PLATFORM_CANNOT_REISSUE_FIXED_ASSET);\n        }\n        // Resulting total supply should not overflow.\n        if (asset.totalSupply + _value < asset.totalSupply) {\n            return _error(ATX_PLATFORM_SUPPLY_OVERFLOW);\n        }\n        uint holderId = getHolderId(msg.sender);\n        asset.wallets[holderId].balance = asset.wallets[holderId].balance.add(_value);\n        asset.totalSupply = asset.totalSupply.add(_value);\n        // Internal Out Of Gas/Throw: revert this transaction too;\n        // Call Stack Depth Limit reached: n/a after HF 4;\n        // Recursive Call: safe, all changes already made.\n        Emitter(eventsHistory).emitIssue(_symbol, _value, _address(holderId));\n\n        _proxyTransferEvent(0, holderId, _value, _symbol);\n\n        return OK;\n    }\n\n    /// @notice Destroys specified amount of senders asset tokens.\n    ///\n    /// @param _symbol asset symbol.\n    /// @param _value amount of tokens to destroy.\n    ///\n    /// @return success.\n    function revokeAsset(bytes32 _symbol, uint _value) public returns (uint) {\n        // Should have positive value.\n        if (_value == 0) {\n            return _error(ATX_PLATFORM_INVALID_VALUE);\n        }\n        Asset storage asset = assets[_symbol];\n        uint holderId = getHolderId(msg.sender);\n        // Should have enough tokens.\n        if (asset.wallets[holderId].balance < _value) {\n            return _error(ATX_PLATFORM_NOT_ENOUGH_TOKENS);\n        }\n        asset.wallets[holderId].balance = asset.wallets[holderId].balance.sub(_value);\n        asset.totalSupply = asset.totalSupply.sub(_value);\n        // Internal Out Of Gas/Throw: revert this transaction too;\n        // Call Stack Depth Limit reached: n/a after HF 4;\n        // Recursive Call: safe, all changes already made.\n        Emitter(eventsHistory).emitRevoke(_symbol, _value, _address(holderId));\n        _proxyTransferEvent(holderId, 0, _value, _symbol);\n        return OK;\n    }\n\n    /// @notice Passes asset ownership to specified address.\n    ///\n    /// Only ownership is changed, balances are not touched.\n    /// Can only be called by asset owner.\n    ///\n    /// @param _symbol asset symbol.\n    /// @param _newOwner address to become a new owner.\n    ///\n    /// @return success.\n    function changeOwnership(bytes32 _symbol, address _newOwner) public onlyOwner(_symbol) returns (uint) {\n        if (_newOwner == 0x0) {\n            return _error(ATX_PLATFORM_INVALID_NEW_OWNER);\n        }\n\n        Asset storage asset = assets[_symbol];\n        uint newOwnerId = _createHolderId(_newOwner);\n        // Should pass ownership to another holder.\n        if (asset.owner == newOwnerId) {\n            return _error(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF);\n        }\n        address oldOwner = _address(asset.owner);\n        asset.owner = newOwnerId;\n        // Internal Out Of Gas/Throw: revert this transaction too;\n        // Call Stack Depth Limit reached: n/a after HF 4;\n        // Recursive Call: safe, all changes already made.\n        Emitter(eventsHistory).emitOwnershipChange(oldOwner, _newOwner, _symbol);\n        return OK;\n    }\n\n    /// @notice Check if specified holder trusts an address with recovery procedure.\n    ///\n    /// @param _from truster.\n    /// @param _to trustee.\n    ///\n    /// @return trust existance.\n    function isTrusted(address _from, address _to) public view returns (bool) {\n        return holders[getHolderId(_from)].trust[_to];\n    }\n\n    /// @notice Perform recovery procedure.\n    ///\n    /// Can be invoked by contract owner if he is trusted by sender only.\n    ///\n    /// This function logic is actually more of an addAccess(uint _holderId, address _to).\n    /// It grants another address access to recovery subject wallets.\n    /// Can only be called by trustee of recovery subject.\n    ///\n    /// @param _from holder address to recover from.\n    /// @param _to address to grant access to.\n    ///\n    /// @return success.\n    function recover(address _from, address _to) checkTrust(_from, msg.sender) public onlyContractOwner returns (uint errorCode) {\n        // We take current holder address because it might not equal _from.\n        // It is possible to recover from any old holder address, but event should have the current one.\n        address from = holders[getHolderId(_from)].addr;\n        holders[getHolderId(_from)].addr = _to;\n        holderIndex[_to] = getHolderId(_from);\n        // Internal Out Of Gas/Throw: revert this transaction too;\n        // Call Stack Depth Limit reached: revert this transaction too;\n        // Recursive Call: safe, all changes already made.\n        Emitter(eventsHistory).emitRecovery(from, _to, msg.sender);\n        return OK;\n    }\n\n    /// @notice Sets asset spending allowance for a specified spender.\n    ///\n    /// @dev Can only be called by asset proxy.\n    ///\n    /// @param _spender holder address to set allowance to.\n    /// @param _value amount to allow.\n    /// @param _symbol asset symbol.\n    /// @param _sender approve initiator address.\n    ///\n    /// @return success.\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) public onlyProxy(_symbol) returns (uint) {\n        return _approve(_createHolderId(_spender), _value, _symbol, _createHolderId(_sender));\n    }\n\n    /// @notice Returns asset allowance from one holder to another.\n    ///\n    /// @param _from holder that allowed spending.\n    /// @param _spender holder that is allowed to spend.\n    /// @param _symbol asset symbol.\n    ///\n    /// @return holder to spender allowance.\n    function allowance(address _from, address _spender, bytes32 _symbol) public view returns (uint) {\n        return _allowance(getHolderId(_from), getHolderId(_spender), _symbol);\n    }\n\n    /// @notice Prforms allowance transfer of asset balance between holders wallets.\n    ///\n    /// @dev Can only be called by asset proxy.\n    ///\n    /// @param _from holder address to take from.\n    /// @param _to holder address to give to.\n    /// @param _value amount to transfer.\n    /// @param _symbol asset symbol.\n    /// @param _reference transfer comment to be included in a Transfer event.\n    /// @param _sender allowance transfer initiator address.\n    ///\n    /// @return success.\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public onlyProxy(_symbol) returns (uint) {\n        return _transfer(getHolderId(_from), _createHolderId(_to), _value, _symbol, _reference, getHolderId(_sender));\n    }\n\n    /// @notice Transfers asset balance between holders wallets.\n    ///\n    /// @param _fromId holder id to take from.\n    /// @param _toId holder id to give to.\n    /// @param _value amount to transfer.\n    /// @param _symbol asset symbol.\n    function _transferDirect(uint _fromId, uint _toId, uint _value, bytes32 _symbol) internal {\n        assets[_symbol].wallets[_fromId].balance = assets[_symbol].wallets[_fromId].balance.sub(_value);\n        assets[_symbol].wallets[_toId].balance = assets[_symbol].wallets[_toId].balance.add(_value);\n    }\n\n    /// @notice Transfers asset balance between holders wallets.\n    ///\n    /// @dev Performs sanity checks and takes care of allowances adjustment.\n    ///\n    /// @param _fromId holder id to take from.\n    /// @param _toId holder id to give to.\n    /// @param _value amount to transfer.\n    /// @param _symbol asset symbol.\n    /// @param _reference transfer comment to be included in a Transfer event.\n    /// @param _senderId transfer initiator holder id.\n    ///\n    /// @return success.\n    function _transfer(uint _fromId, uint _toId, uint _value, bytes32 _symbol, string _reference, uint _senderId) internal returns (uint) {\n        // Should not allow to send to oneself.\n        if (_fromId == _toId) {\n            return _error(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF);\n        }\n        // Should have positive value.\n        if (_value == 0) {\n            return _error(ATX_PLATFORM_INVALID_VALUE);\n        }\n        // Should have enough balance.\n        if (_balanceOf(_fromId, _symbol) < _value) {\n            return _error(ATX_PLATFORM_INSUFFICIENT_BALANCE);\n        }\n        // Should have enough allowance.\n        if (_fromId != _senderId && _allowance(_fromId, _senderId, _symbol) < _value) {\n            return _error(ATX_PLATFORM_NOT_ENOUGH_ALLOWANCE);\n        }\n\n        _transferDirect(_fromId, _toId, _value, _symbol);\n        // Adjust allowance.\n        if (_fromId != _senderId) {\n            assets[_symbol].wallets[_fromId].allowance[_senderId] = assets[_symbol].wallets[_fromId].allowance[_senderId].sub(_value);\n        }\n        // Internal Out Of Gas/Throw: revert this transaction too;\n        // Call Stack Depth Limit reached: n/a after HF 4;\n        // Recursive Call: safe, all changes already made.\n        Emitter(eventsHistory).emitTransfer(_address(_fromId), _address(_toId), _symbol, _value, _reference);\n        _proxyTransferEvent(_fromId, _toId, _value, _symbol);\n        return OK;\n    }\n\n    /// @notice Ask asset Proxy contract to emit ERC20 compliant Transfer event.\n    ///\n    /// @param _fromId holder id to take from.\n    /// @param _toId holder id to give to.\n    /// @param _value amount to transfer.\n    /// @param _symbol asset symbol.\n    function _proxyTransferEvent(uint _fromId, uint _toId, uint _value, bytes32 _symbol) internal {\n        if (proxies[_symbol] != 0x0) {\n            // Internal Out Of Gas/Throw: revert this transaction too;\n            // Call Stack Depth Limit reached: n/a after HF 4;\n            // Recursive Call: safe, all changes already made.\n            ProxyEventsEmitter(proxies[_symbol]).emitTransfer(_address(_fromId), _address(_toId), _value);\n        }\n    }\n\n    /// @notice Returns holder id for the specified address, creates it if needed.\n    ///\n    /// @param _holder holder address.\n    ///\n    /// @return holder id.\n    function _createHolderId(address _holder) internal returns (uint) {\n        uint holderId = holderIndex[_holder];\n        if (holderId == 0) {\n            holderId = ++holdersCount;\n            holders[holderId].addr = _holder;\n            holderIndex[_holder] = holderId;\n        }\n        return holderId;\n    }\n\n    /// @notice Sets asset spending allowance for a specified spender.\n    ///\n    /// Note: to revoke allowance, one needs to set allowance to 0.\n    ///\n    /// @param _spenderId holder id to set allowance for.\n    /// @param _value amount to allow.\n    /// @param _symbol asset symbol.\n    /// @param _senderId approve initiator holder id.\n    ///\n    /// @return success.\n    function _approve(uint _spenderId, uint _value, bytes32 _symbol, uint _senderId) internal returns (uint) {\n        // Asset should exist.\n        if (!isCreated(_symbol)) {\n            return _error(ATX_PLATFORM_ASSET_IS_NOT_ISSUED);\n        }\n        // Should allow to another holder.\n        if (_senderId == _spenderId) {\n            return _error(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF);\n        }\n\n        // Double Spend Attack checkpoint\n        if (assets[_symbol].wallets[_senderId].allowance[_spenderId] != 0 && _value != 0) {\n            return _error(ATX_PLATFORM_INVALID_INVOCATION);\n        }\n\n        assets[_symbol].wallets[_senderId].allowance[_spenderId] = _value;\n\n        // Internal Out Of Gas/Throw: revert this transaction too;\n        // Call Stack Depth Limit reached: revert this transaction too;\n        // Recursive Call: safe, all changes already made.\n        Emitter(eventsHistory).emitApprove(_address(_senderId), _address(_spenderId), _symbol, _value);\n        if (proxies[_symbol] != 0x0) {\n            // Internal Out Of Gas/Throw: revert this transaction too;\n            // Call Stack Depth Limit reached: n/a after HF 4;\n            // Recursive Call: safe, all changes already made.\n            ProxyEventsEmitter(proxies[_symbol]).emitApprove(_address(_senderId), _address(_spenderId), _value);\n        }\n        return OK;\n    }\n\n    /// @notice Returns asset allowance from one holder to another.\n    ///\n    /// @param _fromId holder id that allowed spending.\n    /// @param _toId holder id that is allowed to spend.\n    /// @param _symbol asset symbol.\n    ///\n    /// @return holder to spender allowance.\n    function _allowance(uint _fromId, uint _toId, bytes32 _symbol) internal view returns (uint) {\n        return assets[_symbol].wallets[_fromId].allowance[_toId];\n    }\n\n    /// @dev Emits Error event with specified error message.\n    /// Should only be used if no state changes happened.\n    /// @param _errorCode code of an error\n    function _error(uint _errorCode) internal returns (uint) {\n        Emitter(eventsHistory).emitError(_errorCode);\n        return _errorCode;\n    }\n}",
  "bytecode": "606060405260008054600160a060020a033316600160a060020a0319909116179055612b0b806100306000396000f3006060604052600436106102795763ffffffff60e060020a60003504166302571be3811461027e57806302927d20146102b0578063048ae1bb146102e1578063085a4705146103035780630af3e660146103ad5780631286e393146103cc57806314712e2f146103eb578063161ff662146104185780631c8d5d38146104945780632a11ced0146104bc5780632f553d31146104d25780634592cd1d146104fc5780634d30b6be1461050f578063515c145714610531578063557f4bc9146105a457806357a96dd0146105c35780635aa77d3c146106365780635b7da33814610649578063638a9ce914610662578063648bf7741461068457806367069544146106a95780636713e230146107625780636825c84314610787578063691f34311461079d5780636932af361461082a5780636b4ed21b146108405780636f9fdd661461085357806383197ef0146108665780638c382e22146108795780639fda5b661461089b578063a7dd7e37146109d6578063a831751d146109e9578063a9612f7214610a08578063abafaa1614610a30578063b524abcf14610a55578063bebcc04514610a6b578063c4eeeeb914610a81578063c70bbc1314610a97578063ca448a8814610abc578063cb59646614610ad5578063ccc11f1114610af4578063ccce413b14610b16578063cdeb148514610b2c578063ce606ee014610b71578063d54c8c8714610b84578063d8f9659b14610baf578063dc86e6f014610c09578063df26ca0814610c35578063e0873c0614610c4b578063e96b462a14610c64578063ea14457e14610c86578063ec77809f14610cb1578063ecac7f4b14610cd3578063f07629f814610ce6578063fd83915e14610cf9575b600080fd5b341561028957600080fd5b610294600435610d1b565b604051600160a060020a03909116815260200160405180910390f35b34156102bb57600080fd5b6102cf600160a060020a0360043516610d46565b60405190815260200160405180910390f35b34156102ec57600080fd5b6102cf600435600160a060020a0360243516610d83565b341561030e57600080fd5b6102cf600480359060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505060ff853516946020013515159350610e5192505050565b34156103b857600080fd5b6102cf600160a060020a0360043516610e6f565b34156103d757600080fd5b6102cf600160a060020a0360043516610e8a565b34156103f657600080fd5b6102cf600160a060020a03600435811690602435906044359060643516610ec7565b341561042357600080fd5b6102cf600160a060020a0360048035821691602480359091169160443591606435919060a49060843590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a03169250610f14915050565b341561049f57600080fd5b6102cf600160a060020a0360043581169060243516604435610f6d565b34156104c757600080fd5b610294600435610f92565b34156104dd57600080fd5b6104e8600435610fad565b604051901515815260200160405180910390f35b341561050757600080fd5b6104e8610fc1565b341561051a57600080fd5b6102cf600160a060020a036004351660243561100c565b341561053c57600080fd5b6105a2600160a060020a0360048035821691602480359091169160443591606435919060a49060843590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061102995505050505050565b005b34156105af57600080fd5b6104e8600160a060020a03600435166110df565b34156105ce57600080fd5b6102cf60048035600160a060020a03169060248035916044359160849060643590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a03169250611132915050565b341561064157600080fd5b610294611170565b341561065457600080fd5b6102cf60043560243561117f565b341561066d57600080fd5b6102cf600160a060020a036004351660243561119f565b341561068f57600080fd5b6102cf600160a060020a0360043581169060243516611233565b34156106b457600080fd5b6102cf600480359060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505050833560ff169360208101351515935060400135600160a060020a0316915061136c9050565b341561076d57600080fd5b6104e8600160a060020a03600435811690602435166115b0565b341561079257600080fd5b6102946004356115f4565b34156107a857600080fd5b6107b360043561160f565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156107ef5780820151838201526020016107d7565b50505050905090810190601f16801561081c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561083557600080fd5b6102946004356116d5565b341561084b57600080fd5b6102cf6116f0565b341561085e57600080fd5b6102cf6116f6565b341561087157600080fd5b6105a2611791565b341561088457600080fd5b6104e8600435600160a060020a03602435166117b6565b34156108a657600080fd5b6108b16004356117ff565b60405186815260208101869052821515608082015260ff821660a082015260c06040820181815286546002600019610100600184161502019091160491830182905290606083019060e08401908890801561094d5780601f106109225761010080835404028352916020019161094d565b820191906000526020600020905b81548152906001019060200180831161093057829003601f168201915b50508381038252865460026000196101006001841615020190911604808252602090910190879080156109c15780601f10610996576101008083540402835291602001916109c1565b820191906000526020600020905b8154815290600101906020018083116109a457829003601f168201915b50509850505050505050505060405180910390f35b34156109e157600080fd5b6102cf611835565b34156109f457600080fd5b6102cf600160a060020a03600435166118a5565b3415610a1357600080fd5b6105a2600160a060020a03600435811690602435166044356118e6565b3415610a3b57600080fd5b6105a2600435602435600160a060020a0360443516611926565b3415610a6057600080fd5b6102cf600435611969565b3415610a7657600080fd5b6107b360043561197e565b3415610a8c57600080fd5b6104e8600435611a0d565b3415610aa257600080fd5b6105a2600435602435600160a060020a0360443516611a25565b3415610ac757600080fd5b6102cf600435602435611a68565b3415610ae057600080fd5b6104e8600160a060020a0360043516611ba7565b3415610aff57600080fd5b6104e8600160a060020a0360043516602435611bbc565b3415610b2157600080fd5b6102cf600435611c18565b3415610b3757600080fd5b610b596024600480358281019290820135918135918201910135604435611c37565b60405191825260208201526040908101905180910390f35b3415610b7c57600080fd5b610294611e27565b3415610b8f57600080fd5b6105a2600160a060020a0360043581169060243516604435606435611e36565b3415610bba57600080fd5b6102cf600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965050509235600160a060020a03169250611e7e915050565b3415610c1457600080fd5b610c1f600435611fcb565b60405160ff909116815260200160405180910390f35b3415610c4057600080fd5b6105a2600435611fe8565b3415610c5657600080fd5b6102cf60043560243561201e565b3415610c6f57600080fd5b6104e8600160a060020a0360043516602435612173565b3415610c9157600080fd5b6105a2600160a060020a03600435811690602435811690604435166121a6565b3415610cbc57600080fd5b6102cf600435600160a060020a03602435166121fc565b3415610cde57600080fd5b6102cf6122a5565b3415610cf157600080fd5b6102946122ab565b3415610d0457600080fd5b6102cf600435600160a060020a03602435166122ba565b60008181526006602090815260408083205483526003909152902054600160a060020a03165b919050565b6000805433600160a060020a0390811691161415610d41575060098054600160a060020a038316600160a060020a03199091161790556001919050565b60008083610d913382611bbc565b15610e4957610d9f846123bb565b60008681526006602081815260408084208585529092019052808220805460ff19166001179055600954929450600160a060020a039092169163a9612f729190879089905160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b1515610e3057600080fd5b6102c65a03f11515610e4157600080fd5b505050600192505b505092915050565b6000610e628787878787873361136c565b90505b9695505050505050565b600160a060020a031660009081526004602052604090205490565b6000805433600160a060020a0390811691161415610d415750600160a060020a03166000908152600860205260409020805460ff19169055600190565b600082815260076020526040812054839033600160a060020a0390811691161415610f0b57610f08610ef8876123bb565b8686610f03876123bb565b612426565b91505b50949350505050565b600083815260076020526040812054849033600160a060020a0390811691161415610f6257610f5f610f4589610e6f565b610f4e896123bb565b888888610f5a89610e6f565b612616565b91505b509695505050505050565b6000610f8a610f7b85610e6f565b610f8485610e6f565b8461281b565b949350505050565b600360205260009081526040902054600160a060020a031681565b600090815260066020526040902054151590565b60015460009033600160a060020a03908116911614610fe257506000611009565b506001805460008054600160a060020a0319908116600160a060020a038416179091551681555b90565b600061102061101a84610e6f565b8361117f565b90505b92915050565b82600160a060020a038086169087167f8f1b83868d2ecc962fd90cfee71c9c52455fe10940937bc7571d90ba404c5c3b858560405182815260406020820181815290820183818151815260200191508051906020019080838360005b8381101561109d578082015183820152602001611085565b50505050905090810190601f1680156110ca5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a45050505050565b6000805433600160a060020a0390811691161415610d4157600160a060020a038216151561110f57506000610d41565b5060018054600160a060020a038316600160a060020a0319909116178155919050565b600083815260076020526040812054849033600160a060020a039081169116141561116657611163610f4584610e6f565b91505b5095945050505050565b600154600160a060020a031681565b600090815260066020908152604080832093835260059093019052205490565b6000805433600160a060020a03908116911614806111d55750600160a060020a03331660009081526008602052604090205460ff165b1561102357600082815260076020526040902054600160a060020a031615611201575062013881611023565b5060008181526007602052604090208054600160a060020a038416600160a060020a0319909116179055600192915050565b600080833361124282826115b0565b156113635760005433600160a060020a0390811691161415611363576003600061126b88610e6f565b81526020810191909152604001600090812054600160a060020a03169350859060039061129789610e6f565b815260208101919091526040016000208054600160a060020a031916600160a060020a03929092169190911790556112ce86610e6f565b600160a060020a038087166000908152600460205260409081902092909255600954169063ea14457e908590889033905160e060020a63ffffffff8616028152600160a060020a03938416600482015291831660248301529091166044820152606401600060405180830381600087803b151561134a57600080fd5b6102c65a03f1151561135b57600080fd5b505050600193505b50505092915050565b600080548190819033600160a060020a03908116911614806113a65750600160a060020a03331660009081526008602052604090205460ff165b156115a357881580156113b7575084155b156113cf576113c862013887612849565b92506115a3565b6113d88a610fad565b156113e9576113c862013886612849565b6113f2846123bb565b915033600160a060020a031684600160a060020a03161461141b57611416336123bb565b61141d565b815b9050600580548060010182816114339190612a10565b5060009182526020909120018a905560c0604051908101604090815282825260208083018c90528183018b9052606083018a9052871515608084015260ff891660a084015260008d815260069091522081518155602082015181600101556040820151816002019080516114ab929160200190612a39565b506060820151816003019080516114c6929160200190612a39565b50608082015160048201805460ff191691151591909117905560a08201516004909101805460ff929092166101000261ff00199092169190911790555060008a81526006602090815260408083208584526005019091529020899055600954600160a060020a031663abafaa168b8b61153e866115f4565b60405160e060020a63ffffffff861602815260048101939093526024830191909152600160a060020a03166044820152606401600060405180830381600087803b151561158a57600080fd5b6102c65a03f1151561159b57600080fd5b505050600192505b5050979650505050505050565b6000600360006115bf85610e6f565b815260208082019290925260409081016000908120600160a060020a038616825260010190925290205460ff16905092915050565b600090815260036020526040902054600160a060020a031690565b611617612ab3565b6006600083600019166000191681526020019081526020016000206002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116c95780601f1061169e576101008083540402835291602001916116c9565b820191906000526020600020905b8154815290600101906020018083116116ac57829003601f168201915b50505050509050919050565b600760205260009081526040902054600160a060020a031681565b60025481565b600080611702336123bb565b60005490915033600160a060020a039081169116141561172f5761172862013882612849565b915061178d565b600054611746903390600160a060020a03166115b0565b15611757576117286201388c612849565b60008181526003602090815260408083208354600160a060020a031684526001908101909252909120805460ff19168217905591505b5090565b60005433600160a060020a03908116911614156117b45733600160a060020a0316ff5b565b600080600160a060020a03831615156117ce57600080fd5b6117d783610e6f565b60009485526006602081815260408088209388529290910190529093205460ff169392505050565b60066020526000908152604090208054600182015460048301549192909160028201916003019060ff8082169161010090041686565b600080543390600160a060020a031661184e82826115b0565b156118a05760006003600061186233610e6f565b8152602080820192909252604090810160009081208154600160a060020a03168252600190810190935220805460ff19169215159290921790915592505b505090565b6000805433600160a060020a0390811691161415610d415750600160a060020a03166000908152600860205260409020805460ff1916600190811790915590565b80600160a060020a038084169085167f0de92ba2d86c482d7f947cc22a580692bb78d6277988023434905f44b8cd261a60405160405180910390a4505050565b600160a060020a038116837fd03c2206e12a8eb3553d780874e1a7941b9c67f3a726ce6edb4a9fd65e25ec988460405190815260200160405180910390a3505050565b60009081526006602052604090206001015490565b611986612ab3565b6006600083600019166000191681526020019081526020016000206003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116c95780601f1061169e576101008083540402835291602001916116c9565b60009081526006602052604090206004015460ff1690565b600160a060020a038116837fa4e2520a41c90422e37fc8ba7153c519a427a62ea5f494a14a218a7b9bceb6ca8460405190815260200160405180910390a3505050565b60008080831515611a8657611a7f62013883612849565b9250610e49565b60008581526006602052604090209150611a9f33610e6f565b600081815260058401602052604090205490915084901015611ac757611a7f6201388a612849565b6000818152600583016020526040902054611ae8908563ffffffff6128ae16565b60008281526005840160205260409020556001820154611b0e908563ffffffff6128ae16565b6001830155600954600160a060020a031663c70bbc138686611b2f856115f4565b60405160e060020a63ffffffff861602815260048101939093526024830191909152600160a060020a03166044820152606401600060405180830381600087803b1515611b7b57600080fd5b6102c65a03f11515611b8c57600080fd5b505050611b9c81600086886128c0565b506001949350505050565b60086020526000908152604090205460ff1681565b600080611bc884610e6f565b9050611bd383610fad565b8015610f8a5750600083815260066020526040902054811480610f8a57506000838152600660208181526040808420858552909201905290205460ff16949350505050565b6005805482908110611c2657fe5b600091825260209091200154905081565b600080600080600080600087611c4d3382611bbc565b15611e17578b8a14611c5e57600080fd5b881515611c6a57600080fd5b611c73336123bb565b955060009450600093505b8b84108015611c8f57506201adb05a115b15611e0f578a8a85818110611ca057fe5b9050602002013592508260001415611cc457611cbe62013883612849565b50611e04565b82611ccf878b61117f565b1015611ce157611cbe62013884612849565b8c8c85818110611ced57fe5b90506020020135600160a060020a0316600160a060020a031633600160a060020a03161415611d2257611cbe62013882612849565b611d468d8d86818110611d3157fe5b90506020020135600160a060020a03166123bb565b9150611d548683858c612977565b600954600160a060020a031663515c1457338f8f88818110611d7257fe5b90506020020135600160a060020a03168c8760405160e060020a63ffffffff8716028152600160a060020a0394851660048201529290931660248301526044820152606481019190915260a06084820152600060a4820181905260e49091019060405180830381600087803b1515611de957600080fd5b6102c65a03f11515611dfa57600080fd5b5050508460010194505b836001019350611c7e565b600185975097505b5050505050509550959350505050565b600054600160a060020a031681565b81600160a060020a038085169086167f859b1cddb4da93a04541d62c27d7d83aa8173a1b37bbccd3c60ceb4ee19ee13e8460405190815260200160405180910390a450505050565b6000805481908190819033600160a060020a039081169116141561136357600092505b8551831015611fbf57858381518110611eb657fe5b90602001906020020151915081600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611f1957600080fd5b6102c65a03f11515611f2a57600080fd5b50505060405180519150508015611fb45781600160a060020a031663a9059cbb868360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611f9857600080fd5b6102c65a03f11515611fa957600080fd5b505050604051805150505b600190920191611ea1565b50600195945050505050565b600090815260066020526040902060040154610100900460ff1690565b7f2e36a7093f25f22bd4cbdeb6040174c3ba4c5fe8f1abc04e7c3c48f26c7413e08160405190815260200160405180910390a150565b60008060008461202e3382611bbc565b156113635784151561204d5761204662013883612849565b9350611363565b6000868152600660205260409020600481015490935060ff1615156120785761204662013888612849565b600183015485810110156120925761204662013889612849565b61209b33610e6f565b60008181526005850160205260409020549092506120bf908663ffffffff6129fa16565b600083815260058501602052604090205560018301546120e5908663ffffffff6129fa16565b6001840155600954600160a060020a031663abafaa168787612106866115f4565b60405160e060020a63ffffffff861602815260048101939093526024830191909152600160a060020a03166044820152606401600060405180830381600087803b151561215257600080fd5b6102c65a03f1151561216357600080fd5b505050611fbf60008387896128c0565b600061217e82610fad565b8015611020575061218e83610e6f565b60008381526006602052604090205414905092915050565b81600160a060020a031683600160a060020a03167f6c0468512076e943ed3d1c5aae1d6903c72162713d86aedd1381b3ac19e10cec83604051600160a060020a03909116815260200160405180910390a3505050565b6000808361220a3382611bbc565b15610e495761221884610e6f565b60008681526006602081815260408084208585529092019052808220805460ff19169055600954929450600160a060020a039092169163a9612f7291879189905160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b1515610e3057600080fd5b60055490565b600954600160a060020a031681565b600080600080856122cb3382612173565b156123b157600160a060020a03861615156122f3576122ec6201388b612849565b94506123b1565b6000878152600660205260409020935061230c866123bb565b8454909350831415612324576122ec62013882612849565b835461232f906115f4565b838555600954909250600160a060020a031663a9612f7283888a60405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b151561239857600080fd5b6102c65a03f115156123a957600080fd5b505050600194505b5050505092915050565b600160a060020a0381166000908152600460205260408120548015156110235750600280546001019081905560008181526003602090815260408083208054600160a060020a031916600160a060020a03881690811790915583526004909152902081905592915050565b600061243183610fad565b151561244a576124436201388e612849565b9050610f8a565b8482141561245e5761244362013882612849565b600083815260066020908152604080832085845260050182528083208884526001019091529020541580159061249357508315155b156124a4576124436201388f612849565b600083815260066020908152604080832085845260050182528083208884526001019091529020849055600954600160a060020a031663d54c8c876124e8846115f4565b6124f1886115f4565b868860405160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201526064810191909152608401600060405180830381600087803b151561254757600080fd5b6102c65a03f1151561255857600080fd5b505050600083815260076020526040902054600160a060020a031615611b9c57600083815260076020526040902054600160a060020a0316632338508961259e846115f4565b6125a7886115f4565b8760405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b15156125f757600080fd5b6102c65a03f1151561260857600080fd5b505050506001949350505050565b6000858714156126335761262c62013882612849565b9050610e65565b8415156126465761262c62013883612849565b84612651888661117f565b10156126635761262c62013884612849565b81871415801561267c57508461267a88848761281b565b105b1561268d5761262c62013885612849565b61269987878787612977565b8682146127015760008481526006602090815260408083208a845260050182528083208584526001019091529020546126d8908663ffffffff6128ae16565b60008581526006602090815260408083208b845260050182528083208684526001019091529020555b600954600160a060020a031663515c145761271b896115f4565b612724896115f4565b87898860405160e060020a63ffffffff8816028152600160a060020a03808716600483019081529086166024830152604482018590526064820184905260a060848301908152909160a40183818151815260200191508051906020019080838360005b8381101561279f578082015183820152602001612787565b50505050905090810190601f1680156127cc5780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15156127ee57600080fd5b6102c65a03f115156127ff57600080fd5b50505061280e878787876128c0565b5060019695505050505050565b6000908152600660209081526040808320948352600590940181528382209282526001909201909152205490565b600954600090600160a060020a031663df26ca088360405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b151561289457600080fd5b6102c65a03f115156128a557600080fd5b50929392505050565b6000828211156128ba57fe5b50900390565b600081815260076020526040902054600160a060020a03161561297157600081815260076020526040902054600160a060020a03166323de6651612903866115f4565b61290c866115f4565b8560405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b151561295c57600080fd5b6102c65a03f1151561296d57600080fd5b5050505b50505050565b60008181526006602090815260408083208784526005019091529020546129a4908363ffffffff6128ae16565b60008281526006602090815260408083208884526005019091528082209290925584815220546129d490836129fa565b600091825260066020908152604080842095845260059095019052929020919091555050565b600082820183811015612a0957fe5b9392505050565b815481835581811511612a3457600083815260209020612a34918101908301612ac5565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a7a57805160ff1916838001178555612aa7565b82800160010185558215612aa7579182015b82811115612aa7578251825591602001919060010190612a8c565b5061178d929150612ac5565b60206040519081016040526000815290565b61100991905b8082111561178d5760008155600101612acb5600a165627a7a72305820362bb642ce9ab84c366fd0d3761b9c33a645ef9b446ee2de2d92d6e7a79b757c0029"
}