{
  "address": "0x5ab14c104ba2771fd2a6ec6f616da1ad41d5b8a7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Jincor Token",
  "contractName": "JincorToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-19\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title Burnable\n *\n * @dev Standard ERC20 token\n */\ncontract Burnable is StandardToken {\n  using SafeMath for uint;\n\n  /* This notifies clients about the amount burnt */\n  event Burn(address indexed from, uint value);\n\n  function burn(uint _value) returns (bool success) {\n    require(_value > 0 && balances[msg.sender] >= _value);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    Burn(msg.sender, _value);\n    return true;\n  }\n\n  function burnFrom(address _from, uint _value) returns (bool success) {\n    require(_from != 0x0 && _value > 0 && balances[_from] >= _value);\n    require(_value <= allowed[_from][msg.sender]);\n    balances[_from] = balances[_from].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Burn(_from, _value);\n    return true;\n  }\n\n  function transfer(address _to, uint _value) returns (bool success) {\n    require(_to != 0x0); //use burn\n\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n    require(_to != 0x0); //use burn\n\n    return super.transferFrom(_from, _to, _value);\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n/**\n * @title JincorToken\n *\n * @dev Burnable Ownable ERC20 token\n */\ncontract JincorToken is Burnable, Ownable {\n\n  string public constant name = \"Jincor Token\";\n  string public constant symbol = \"JCR\";\n  uint8 public constant decimals = 18;\n  uint public constant INITIAL_SUPPLY = 35000000 * 1 ether;\n\n  /* The finalizer contract that allows unlift the transfer limits on this token */\n  address public releaseAgent;\n\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n  bool public released = false;\n\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n  mapping (address => bool) public transferAgents;\n\n  /**\n   * Limit token transfer until the crowdsale is over.\n   *\n   */\n  modifier canTransfer(address _sender) {\n    require(released || transferAgents[_sender]);\n    _;\n  }\n\n  /** The function can be called only before or after the tokens have been released */\n  modifier inReleaseState(bool releaseState) {\n    require(releaseState == released);\n    _;\n  }\n\n  /** The function can be called only by a whitelisted release agent. */\n  modifier onlyReleaseAgent() {\n    require(msg.sender == releaseAgent);\n    _;\n  }\n\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n  function JincorToken() {\n    totalSupply = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n\n\n  /**\n   * Set the contract that can call release and make the token transferable.\n   *\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n   */\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n    require(addr != 0x0);\n\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\n    releaseAgent = addr;\n  }\n\n  function release() onlyReleaseAgent inReleaseState(false) public {\n    released = true;\n  }\n\n  /**\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n   */\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n    require(addr != 0x0);\n    transferAgents[addr] = state;\n  }\n\n  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\n    // Call Burnable.transfer()\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\n    // Call Burnable.transferForm()\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function burn(uint _value) onlyOwner returns (bool success) {\n    return super.burn(_value);\n  }\n\n  function burnFrom(address _from, uint _value) onlyOwner returns (bool success) {\n    return super.burnFrom(_from, _value);\n  }\n}",
  "bytecode": "60606040526004805460a060020a60ff0219169055341561001f57600080fd5b5b5b60038054600160a060020a03191633600160a060020a03161790555b6a1cf389cd46047d030000006000818155600160a060020a0333168152600160205260409020555b5b610e86806100756000396000f3006060604052361561010f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302f652a3811461011457806306fdde031461013a578063095ea7b3146101c557806318160ddd146101fb57806323b872dd1461022057806329ff4f531461025c5780632ff2e9dc1461027d578063313ce567146102a257806342966c68146102cb57806370a08231146102f557806379cc679014610326578063867c28571461035c57806386d1a69f1461038f5780638da5cb5b146103a457806395d89b41146103d3578063961325211461045e578063a9059cbb14610485578063d1f276d3146104bb578063dd62ed3e146104ea578063f2fde38b14610521575b600080fd5b341561011f57600080fd5b610138600160a060020a03600435166024351515610542565b005b341561014557600080fd5b61014d6105b8565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018a5780820151818401525b602001610171565b50505050905090810190601f1680156101b75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101d057600080fd5b6101e7600160a060020a03600435166024356105ef565b604051901515815260200160405180910390f35b341561020657600080fd5b61020e610696565b60405190815260200160405180910390f35b341561022b57600080fd5b6101e7600160a060020a036004358116906024351660443561069c565b604051901515815260200160405180910390f35b341561026757600080fd5b610138600160a060020a03600435166106f3565b005b341561028857600080fd5b61020e61076c565b60405190815260200160405180910390f35b34156102ad57600080fd5b6102b561077b565b60405160ff909116815260200160405180910390f35b34156102d657600080fd5b6101e7600435610780565b604051901515815260200160405180910390f35b341561030057600080fd5b61020e600160a060020a03600435166107b0565b60405190815260200160405180910390f35b341561033157600080fd5b6101e7600160a060020a03600435166024356107cf565b604051901515815260200160405180910390f35b341561036757600080fd5b6101e7600160a060020a0360043516610801565b604051901515815260200160405180910390f35b341561039a57600080fd5b610138610816565b005b34156103af57600080fd5b6103b7610875565b604051600160a060020a03909116815260200160405180910390f35b34156103de57600080fd5b61014d610884565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561018a5780820151818401525b602001610171565b50505050905090810190601f1680156101b75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561046957600080fd5b6101e76108bb565b604051901515815260200160405180910390f35b341561049057600080fd5b6101e7600160a060020a03600435166024356108cb565b604051901515815260200160405180910390f35b34156104c657600080fd5b6103b7610920565b604051600160a060020a03909116815260200160405180910390f35b34156104f557600080fd5b61020e600160a060020a036004358116906024351661092f565b60405190815260200160405180910390f35b341561052c57600080fd5b610138600160a060020a036004351661095c565b005b60035433600160a060020a0390811691161461055d57600080fd5b60045460009060a060020a900460ff161561057757600080fd5b600160a060020a038316151561058c57600080fd5b600160a060020a0383166000908152600560205260409020805460ff19168315151790555b5b505b5050565b60408051908101604052600c81527f4a696e636f7220546f6b656e0000000000000000000000000000000000000000602082015281565b60008115806106215750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561062c57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600454600090849060a060020a900460ff16806106d15750600160a060020a03811660009081526005602052604090205460ff165b15156106dc57600080fd5b6106e78585856109b4565b91505b5b509392505050565b60035433600160a060020a0390811691161461070e57600080fd5b60045460009060a060020a900460ff161561072857600080fd5b600160a060020a038216151561073d57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790555b5b505b50565b6a1cf389cd46047d0300000081565b601281565b60035460009033600160a060020a0390811691161461079e57600080fd5b6107a7826109e0565b90505b5b919050565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a039081169116146107ed57600080fd5b6107f78383610ab4565b90505b5b92915050565b60056020526000908152604090205460ff1681565b60045433600160a060020a0390811691161461083157600080fd5b60045460009060a060020a900460ff161561084b57600080fd5b6004805474ff0000000000000000000000000000000000000000191660a060020a1790555b5b505b565b600354600160a060020a031681565b60408051908101604052600381527f4a43520000000000000000000000000000000000000000000000000000000000602082015281565b60045460a060020a900460ff1681565b600454600090339060a060020a900460ff16806109005750600160a060020a03811660009081526005602052604090205460ff165b151561090b57600080fd5b6109158484610c2a565b91505b5b5092915050565b600454600160a060020a031681565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a0390811691161461097757600080fd5b600160a060020a03811615610769576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b6000600160a060020a03831615156109cb57600080fd5b6109d6848484610c54565b90505b9392505050565b60008082118015610a0a5750600160a060020a033316600090815260016020526040902054829010155b1515610a1557600080fd5b600160a060020a033316600090815260016020526040902054610a3e908363ffffffff610d6916565b600160a060020a03331660009081526001602052604081209190915554610a6b908363ffffffff610d6916565b600055600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25060015b919050565b6000600160a060020a03831615801590610ace5750600082115b8015610af35750600160a060020a038316600090815260016020526040902054829010155b1515610afe57600080fd5b600160a060020a0380841660009081526002602090815260408083203390941683529290522054821115610b3157600080fd5b600160a060020a038316600090815260016020526040902054610b5a908363ffffffff610d6916565b600160a060020a03841660009081526001602052604081209190915554610b87908363ffffffff610d6916565b6000908155600160a060020a038085168252600260209081526040808420339093168452919052902054610bc1908363ffffffff610d6916565b600160a060020a038085166000818152600260209081526040808320339095168352939052829020929092557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a25060015b92915050565b6000600160a060020a0383161515610c4157600080fd5b6107f78383610d80565b90505b92915050565b600160a060020a038084166000908152600260209081526040808320338516845282528083205493861683526001909152812054909190610c9b908463ffffffff610e4016565b600160a060020a038086166000908152600160205260408082209390935590871681522054610cd0908463ffffffff610d6916565b600160a060020a038616600090815260016020526040902055610cf9818463ffffffff610d6916565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b600082821115610d7557fe5b508082035b92915050565b600160a060020a033316600090815260016020526040812054610da9908363ffffffff610d6916565b600160a060020a033381166000908152600160205260408082209390935590851681522054610dde908363ffffffff610e4016565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600082820183811015610e4f57fe5b8091505b50929150505600a165627a7a7230582070a48e1eff095bd35344b724f5bf37603249250a20fddfe85b29fa728ef79e330029"
}