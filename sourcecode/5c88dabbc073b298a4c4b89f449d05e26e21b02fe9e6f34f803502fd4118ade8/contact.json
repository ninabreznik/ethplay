{
  "address": "0xed3e73c01028eab954784aa5aedc97cbe2807dbb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TipperToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-18\n*/\n\n// Tipper Inc.\n// Official Token\n// Tipper: The Social Economy\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * Math operations with safety checks that throw on error\n */\n \nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n /**\n * This official token of Tipper Inc. is based off of the Standard ERC20 token\n * implementation of the basic standard token.\n * \n * https://github.com/ethereum/EIPs/issues/20\n * \n * Partially based on ideas and code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n * and code found at OpenZeppelin.org\n */\n\ncontract TipperToken {\n    \n  using SafeMath for uint256;\n  \n  string public name;\n  string public symbol;\n  uint256 public decimals;\n  \n  uint256 public totalSupply;\n  \n  uint256 private tprFund;\n  uint256 private founderCoins;\n  uint256 private icoReleaseTokens;\n  \n  uint256 private tprFundReleaseTime;\n  uint256 private founderCoinsReleaseTime;\n  \n  bool private tprFundUnlocked;\n  bool private founderCoinsUnlocked;\n  \n  address private tprFundDeposit;\n  address private founderCoinsDeposit;\n\n  mapping(address => uint256) internal balances;\n  \n  mapping (address => mapping (address => uint256)) internal allowed;\n  \n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  event Burn(address indexed burner, uint256 value);\n  \n  function TipperToken () public {\n      \n      name = \"Tipper\";\n      symbol = \"TIPR\";\n      decimals = 18;\n      \n      tprFund = 420000000 * (10**decimals); // Reserved for TIPR User Fund and Tipper Inc. use\n      founderCoins = 70000000 * (10**decimals); // Founder Coins\n      icoReleaseTokens = 210000000 * (10**decimals); // Tokens to be released for ICO\n      \n      totalSupply = tprFund + founderCoins + icoReleaseTokens; // Total Supply of TIPR = 700,000,000\n      \n      balances[msg.sender] = icoReleaseTokens;\n      \n      Transfer(0, msg.sender, icoReleaseTokens);\n      \n      tprFundDeposit = 0x443174D48b39a18Aae6d7FfCa5c7712B6E94496b; // Deposit address for TIPR User Fund\n      balances[tprFundDeposit] = 0;\n      tprFundReleaseTime = 129600 * 1 minutes; // TIPR User Fund to be available after 3 months\n      \n      tprFundUnlocked = false;\n      \n      founderCoinsDeposit = 0x703D1d5DFf7D6079f44D6C56a2E455DaC7f2D8e6; // Deposit address for founders coins\n      balances[founderCoinsDeposit] = 0;\n      founderCoinsReleaseTime = 525600 * 1 minutes; // Founders coins to be unlocked after 1 year\n      founderCoinsUnlocked = false;\n  } \n  \n  \n  /**\n   * Transfers tokens held by the timelock to the specified address.\n   * This function releases the TIPR User Fund for Tipper Inc. use\n   * after 3 months.\n   */\n   \n  function releaseTprFund() public {\n    require(now >= tprFundReleaseTime); // Check that 3 months have passed\n    require(!tprFundUnlocked); // Check that the fund has not been released yet\n\n    balances[tprFundDeposit] = tprFund; // Assign the funds to the specified account\n    \n    Transfer(0, tprFundDeposit, tprFund); // Log the transfer on the blockchain\n\n    tprFundUnlocked = true; \n    \n  }\n  \n    \n  /**\n   * Transfers tokens held by the timelock to the specified address.\n   * This function releases the founders coins after 1 year.\n   */\n  \n  function releaseFounderCoins() public {\n    require(now >= founderCoinsReleaseTime); // Check that 1 year has passed\n    require(!founderCoinsUnlocked); // Check that the coins have not been released yet\n\n    balances[founderCoinsDeposit] = founderCoins; // Assign the coins to the founders accounts\n    \n    Transfer(0, founderCoinsDeposit, founderCoins); // Log the transfer on the blockchain\n    \n    founderCoinsUnlocked = true;\n  }\n\n  /**\n  * @dev transfer tokens to a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n    require(_value > 0);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_value > 0);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    require(_value>0);\n    require(balances[msg.sender]>_value);\n    allowed[msg.sender][_spender] = 0;\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n  \n\n    /**\n     * Burns a specific amount of tokens.\n     * @param _value The amount of tokens to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n\n}",
  "bytecode": "606060405234156200001057600080fd5b6040805190810160405280600681526020017f5469707065720000000000000000000000000000000000000000000000000000815250600090805190602001906200005d9291906200035c565b506040805190810160405280600481526020017f544950520000000000000000000000000000000000000000000000000000000081525060019080519060200190620000ab9291906200035c565b506012600281905550600254600a0a631908b10002600481905550600254600a0a63042c1d8002600581905550600254600a0a630c845880026006819055506006546005546004540101600381905550600654600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006546040518082815260200191505060405180910390a373443174d48b39a18aae6d7ffca5c7712b6e94496b600960026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600b6000600960029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506276a7006007819055506000600960006101000a81548160ff02191690831515021790555073703d1d5dff7d6079f44d6c56a2e455dac7f2d8e6600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506301e133806008819055506000600960016101000a81548160ff0219169083151502179055506200040b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200039f57805160ff1916838001178555620003d0565b82800160010185558215620003d0579182015b82811115620003cf578251825591602001919060010190620003b2565b5b509050620003df9190620003e3565b5090565b6200040891905b8082111562000404576000816000905550600101620003ea565b5090565b90565b61124c806200041b6000396000f3006060604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bf578063095ea7b31461014d5780631073d1f8146101a757806318160ddd146101bc57806323b872dd146101e5578063313ce5671461025e57806342966c6814610287578063676796b6146102aa57806370a08231146102bf57806395d89b411461030c578063a9059cbb1461039a578063dd62ed3e146103f4575b600080fd5b34156100ca57600080fd5b6100d2610460565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101125780820151818401526020810190506100f7565b50505050905090810190601f16801561013f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015857600080fd5b61018d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506104fe565b604051808215151515815260200191505060405180910390f35b34156101b257600080fd5b6101ba6106cd565b005b34156101c757600080fd5b6101cf6107f3565b6040518082815260200191505060405180910390f35b34156101f057600080fd5b610244600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107f9565b604051808215151515815260200191505060405180910390f35b341561026957600080fd5b610271610bc7565b6040518082815260200191505060405180910390f35b341561029257600080fd5b6102a86004808035906020019091905050610bcd565b005b34156102b557600080fd5b6102bd610d22565b005b34156102ca57600080fd5b6102f6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e48565b6040518082815260200191505060405180910390f35b341561031757600080fd5b61031f610e91565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035f578082015181840152602081019050610344565b50505050905090810190601f16801561038c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103a557600080fd5b6103da600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f2f565b604051808215151515815260200191505060405180910390f35b34156103ff57600080fd5b61044a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611162565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104f65780601f106104cb576101008083540402835291602001916104f6565b820191906000526020600020905b8154815290600101906020018083116104d957829003601f168201915b505050505081565b6000808211151561050e57600080fd5b81600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561055b57600080fd5b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60075442101515156106de57600080fd5b600960009054906101000a900460ff161515156106fa57600080fd5b600454600b6000600960029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600960029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6004546040518082815260200191505060405180910390a36001600960006101000a81548160ff021916908315150217905550565b60035481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561083657600080fd5b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561088457600080fd5b600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561090f57600080fd5b60008211151561091e57600080fd5b61097082600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e990919063ffffffff16565b600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a0582600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461120290919063ffffffff16565b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ad782600c60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e990919063ffffffff16565b600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60025481565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610c1d57600080fd5b339050610c7282600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e990919063ffffffff16565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cca826003546111e990919063ffffffff16565b6003819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b6008544210151515610d3357600080fd5b600960019054906101000a900460ff16151515610d4f57600080fd5b600554600b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6005546040518082815260200191505060405180910390a36001600960016101000a81548160ff021916908315150217905550565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f275780601f10610efc57610100808354040283529160200191610f27565b820191906000526020600020905b815481529060010190602001808311610f0a57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610f6c57600080fd5b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610fba57600080fd5b600082111515610fc957600080fd5b61101b82600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e990919063ffffffff16565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110b082600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461120290919063ffffffff16565b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008282111515156111f757fe5b818303905092915050565b600080828401905083811015151561121657fe5b80915050929150505600a165627a7a7230582007e65c5e5dde4b0d5032805143bb3e40c6c313943dedb24ef066207ee474f0050029"
}