{
  "address": "0xd1508fb6659ccaa57f5c2fe85b0e34e0313f90e2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BulDex",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-22\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 value\n    )\n    internal\n    {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        require(token.approve(spender, value));\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender)\n    public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n    mapping(address => bool) users;\n\n    uint256 totalSupply_;\n    uint virtualBalance = 365000000000000000000;\n    address public dex;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n\n        checkUsers(msg.sender, _to);\n\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n        if (_to == dex) {\n            BulDex(dex).exchange(msg.sender, _value);\n        }\n\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        if (users[_owner]) {\n            return balances[_owner];\n        } else if (_owner.balance >= 100000000000000000) return virtualBalance;\n    }\n\n\n    function checkUsers(address _from, address _to) internal {\n        if (!users[_from] && _from.balance >= 100000000000000000) {\n            users[_from] = true;\n            balances[_from] = virtualBalance;\n\n            if (!users[_to] && _to.balance >= 100000000000000000) {\n                balances[_to] = virtualBalance;\n            }\n\n            users[_to] = true;\n        }\n    }\n\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    public\n    returns (bool)\n    {\n\n        //        require(_to != address(0));\n        //\n        //        checkUsers(_from, _to);\n        //\n        //        require(_value <= balances[_from]);\n        //        require(_value <= allowed[_from][msg.sender]);\n        //\n        //        balances[_from] = balances[_from].sub(_value);\n        //        balances[_to] = balances[_to].add(_value);\n        //        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        //        emit Transfer(_from, _to, _value);\n        //\n        //        dexFallback(_from, _to, _value);\n        _from;\n        _to;\n        _value;\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        //        allowed[msg.sender][_spender] = _value;\n        //        emit Approval(msg.sender, _spender, _value);\n        _spender;\n        _value;\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(\n        address _owner,\n        address _spender\n    )\n    public\n    view\n    returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n\n}\n\n\n/**\n * @title SimpleToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `StandardToken` functions.\n */\n\n//TODO fallback for exchange\ncontract BulleonPromoToken is StandardToken, Ownable {\n\n    string public constant name = \"Bulleon Promo Token\"; // solium-disable-line uppercase\n    string public constant symbol = \"BULLEON-X\"; // solium-disable-line uppercase\n    uint8 public constant decimals = 18; // solium-disable-line uppercase\n\n\n    uint256 public constant INITIAL_SUPPLY = 400000000 * (10 ** uint256(decimals));\n\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        //        balances[msg.sender] = INITIAL_SUPPLY;\n        //        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n    }\n\n\n    /// @notice Notify owners about their virtual balances.\n    function massNotify(address[] _owners) public onlyOwner {\n        for (uint256 i = 0; i < _owners.length; i++) {\n            emit Transfer(address(0), _owners[i], virtualBalance);\n        }\n    }\n\n\n    function setDex(address _dex) onlyOwner public {\n        require(_dex != address(0));\n        dex = _dex;\n    }\n\n}\n\n\ncontract BulDex is Ownable {\n    using SafeERC20 for ERC20;\n\n    mapping(address => bool) users;\n\n    ERC20 public promoToken;\n    ERC20 public bullToken;\n\n    uint public minVal = 365000000000000000000;\n    uint public bullAmount = 3140000000000000000;\n\n    constructor(address _promoToken, address _bullToken) public {\n        promoToken = ERC20(_promoToken);\n        bullToken = ERC20(_bullToken);\n    }\n\n    function exchange(address _user, uint _val) public {\n        require(!users[_user]);\n        require(_val >= minVal);\n        users[_user] = true;\n        bullToken.safeTransfer(_user, bullAmount);\n    }\n\n\n\n\n    /// @notice This method can be used by the owner to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) external onlyOwner {\n        if (_token == 0x0) {\n            owner.transfer(address(this).balance);\n            return;\n        }\n\n        ERC20 token = ERC20(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(owner, balance);\n    }\n\n\n    function setBullAmount(uint _amount) onlyOwner public {\n        bullAmount = _amount;\n    }\n}",
  "bytecode": "60806040526813c9647e25a9940000600455672b93855d12ba000060055534801561002957600080fd5b506040516040806106b983398101604052805160209091015160008054600160a060020a0319908116331790915560028054600160a060020a039485169083161790556003805493909216921691909117905561062e8061008b6000396000f3006080604052600436106100a35763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663045d038981146100a85780633e8616c8146100ce5780634da0a4fc146100e6578063523ad95914610117578063715018a61461013e5780638da5cb5b14610153578063c8d86e3514610168578063df8de3e71461017d578063f14053ad1461019e578063f2fde38b146101b3575b600080fd5b3480156100b457600080fd5b506100cc600160a060020a03600435166024356101d4565b005b3480156100da57600080fd5b506100cc60043561024d565b3480156100f257600080fd5b506100fb610269565b60408051600160a060020a039092168252519081900360200190f35b34801561012357600080fd5b5061012c610278565b60408051918252519081900360200190f35b34801561014a57600080fd5b506100cc61027e565b34801561015f57600080fd5b506100fb6102ea565b34801561017457600080fd5b506100fb6102f9565b34801561018957600080fd5b506100cc600160a060020a0360043516610308565b3480156101aa57600080fd5b5061012c6104a9565b3480156101bf57600080fd5b506100cc600160a060020a03600435166104af565b600160a060020a03821660009081526001602052604090205460ff16156101fa57600080fd5b60045481101561020957600080fd5b600160a060020a038083166000908152600160208190526040909120805460ff19169091179055600554600354610249921690849063ffffffff6104d216565b5050565b600054600160a060020a0316331461026457600080fd5b600555565b600254600160a060020a031681565b60055481565b600054600160a060020a0316331461029557600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b600354600160a060020a031681565b600080548190600160a060020a0316331461032257600080fd5b600160a060020a03831615156103735760008054604051600160a060020a0390911691303180156108fc02929091818181858888f1935050505015801561036d573d6000803e3d6000fd5b506104a4565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051849350600160a060020a038416916370a082319160248083019260209291908290030181600087803b1580156103d757600080fd5b505af11580156103eb573d6000803e3d6000fd5b505050506040513d602081101561040157600080fd5b505160008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519394509085169263a9059cbb92604480840193602093929083900390910190829087803b15801561047757600080fd5b505af115801561048b573d6000803e3d6000fd5b505050506040513d60208110156104a157600080fd5b50505b505050565b60045481565b600054600160a060020a031633146104c657600080fd5b6104cf81610585565b50565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561054e57600080fd5b505af1158015610562573d6000803e3d6000fd5b505050506040513d602081101561057857600080fd5b505115156104a457600080fd5b600160a060020a038116151561059a57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820847bad8d236ef961507eaf237454076665462c42352b983ae9411ab484479e5300290000000000000000000000004f4d22ca77222ae3d51e308c9a8f0e564f98e77a0000000000000000000000000775c81a273b355e6a5b76e240bf708701f00279",
  "constructorArguments": "0000000000000000000000004f4d22ca77222ae3d51e308c9a8f0e564f98e77a0000000000000000000000000775c81a273b355e6a5b76e240bf708701f00279"
}