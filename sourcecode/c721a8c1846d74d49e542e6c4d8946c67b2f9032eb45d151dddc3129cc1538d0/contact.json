{
  "address": "0x94195826ff3fd6ec11513c5d61d3931e653f1505",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "JoycoinToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-25\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n\ninterface IJoycoinSale  {\n    function getEndDate() external view returns (uint256);\n}\n\n\ncontract JoycoinToken is ERC20, Ownable {\n   \n    string public symbol;\n    string public  name;\n    uint256 public decimals;\n\n    uint256 private _cap;\n\n    address public saleAddress;\n    IJoycoinSale public sale;\n\n    bool public unlocked = false;\n\n    bool public sendedToSale;\n    bool public sendedToTeam;\n    bool public sendedToTeamLock;\n    bool public sendedToAdvisors;\n    bool public sendedToAdvisorsLock;\n    bool public sendedToService;\n\n    uint256 public salePart;\n    uint256 public teamPart;\n    uint256 public teamPartLock;\n    uint256 public advisorsPart;\n    uint256 public advisorsPartLock;\n    uint256 public servicePart;\n\n    uint256 constant LOCK_TIME = 365 days;\n    \n\n    modifier whenUnlocked()  {\n        if (msg.sender != saleAddress) {\n            require(unlocked);\n        }\n        _;\n    }\n\n    modifier onlySale() {\n\t    require(msg.sender == saleAddress);\n\t    _;\n\t}\n\n\n    function cap() public view returns(uint256) {\n        return _cap;\n    }\n\n    function _mint(address account, uint256 value) internal {\n        require(totalSupply().add(value) <= _cap);\n        super._mint(account, value);\n    }\n\n\n\tfunction transfer(address _to, uint256 _value) public whenUnlocked() returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenUnlocked() returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenUnlocked() returns (bool) {\n        return super.approve(_spender, _value);\n\t}\n\n\n    constructor() public {\n        symbol = \"JOY\";\n        name = \"Joycoin\";\n        decimals = 8;\n\n        _cap             =  2400000000 * 10 ** decimals; \n\n        salePart         =  1625400000 * 10 ** decimals; // 67,725%\n                      \n        advisorsPart     =    42000000 * 10 ** decimals; // 25% from 7%\n        advisorsPartLock =   126000000 * 10 ** decimals; // 75% from 7%\n\n        teamPart         =    31650000 * 10 ** decimals;  // 25% from 5,275%\n        teamPartLock     =    94950000 * 10 ** decimals; // 75% from 5,275%\n\n        servicePart      =   480000000 * 10 ** decimals; // 20%\n\n        require (_cap == salePart + advisorsPart + advisorsPartLock + teamPart + teamPartLock + servicePart);\n    }\n\n\n    function setSaleAddress(address _address) public onlyOwner returns (bool) {\n        require(saleAddress == address(0));\n        require (!sendedToSale);\n        saleAddress = _address;\n        sale = IJoycoinSale(saleAddress);\n        return true;\n\t}\n\n\tfunction unlockTokens() public onlyOwner returns (bool)\t{\n\t\tunlocked = true;\n\t\treturn true;\n\t}\n\n\tfunction burnUnsold() public onlySale returns (bool) {\n    \t_burn(saleAddress, balanceOf(saleAddress));\n        return true;\n  \t}\n\n    function sendTokensToSale() public onlyOwner returns (bool) {\n        require (saleAddress != address(0x0));\n        require (!sendedToSale);\n        sendedToSale = true;\n        _mint(saleAddress, salePart);\n        return true;\n    }\n\n    function sendTokensToTeamLock(address _teamAddress) public onlyOwner returns (bool) {\n        require (_teamAddress != address(0x0));\n        require (!sendedToTeamLock);\n        require (sale.getEndDate() > 0 && now > (sale.getEndDate() + LOCK_TIME) );\n        sendedToTeamLock = true;\n        _mint(_teamAddress, teamPartLock);\n        return true;\n    }\n\n    function sendTokensToTeam(address _teamAddress) public onlyOwner returns (bool) {\n        require (_teamAddress != address(0x0));\n        require (!sendedToTeam);\n        require ( sale.getEndDate() > 0 && now > sale.getEndDate() );\n        sendedToTeam = true;\n        _mint(_teamAddress, teamPart);\n        return true;\n    }\n\n    function sendTokensToAdvisors(address _advisorsAddress) public onlyOwner returns (bool) {\n        require (_advisorsAddress != address(0x0));\n        require (!sendedToAdvisors);\n        require (sale.getEndDate() > 0 && now > sale.getEndDate());\n        sendedToAdvisors = true;\n        _mint(_advisorsAddress, advisorsPart);\n        return true;\n    }\n\n    function sendTokensToAdvisorsLock(address _advisorsAddress) public onlyOwner returns (bool) {\n        require (_advisorsAddress != address(0x0));\n        require (!sendedToAdvisorsLock);\n        require (sale.getEndDate() > 0 && now > (sale.getEndDate() + LOCK_TIME) );\n        sendedToAdvisorsLock = true;\n        _mint(_advisorsAddress, advisorsPartLock);\n        return true;\n    }\n\n    function sendTokensToService(address _serviceAddress) public onlyOwner returns (bool) {\n        require (_serviceAddress != address(0x0));\n        require (!sendedToService);\n        sendedToService = true;\n        _mint(_serviceAddress, servicePart);\n        return true;\n    }\n}",
  "bytecode": "60806040526009805460a060020a60ff02191690553480156200002157600080fd5b5060038054600160a060020a031916331790819055604051600160a060020a0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36040805180820190915260038082527f4a4f5900000000000000000000000000000000000000000000000000000000006020909201918252620000b49160049162000156565b506040805180820190915260078082527f4a6f79636f696e000000000000000000000000000000000000000000000000006020909201918252620000fb9160059162000156565b506008600655670354a6ba7a1800006007556702417544d1cac000600a55660eebe0b40e8000600d55662cc3a21c2b8000600e55660b3e8cfcb6d000600b556621bba6f6247000600c5566aa87bee5380000600f55620001fb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019957805160ff1916838001178555620001c9565b82800160010185558215620001c9579182015b82811115620001c9578251825591602001919060010190620001ac565b50620001d7929150620001db565b5090565b620001f891905b80821115620001d75760008155600101620001e2565b90565b611907806200020b6000396000f3006080604052600436106101d45763ffffffff60e060020a60003504166306fdde0381146101d957806307d03f8c14610263578063095ea7b31461028c57806318160ddd146102b057806323b872dd146102d75780632833619014610301578063313ce56714610316578063346f59911461032b578063355274ea1461034c5780633950935114610361578063414436e6146103855780635476c7971461039a578063554d2380146103af5780636a5e2650146103c45780636ad1fe02146103d95780636eb11ad11461040a57806370a082311461041f578063715018a614610440578063748e4f401461045757806376fb1f90146104785780637fd44e571461048d5780638da5cb5b146104a25780638f32d59b146104b757806395d89b41146104cc5780639e92f159146104e1578063a0f7bbcd146104f6578063a3b73b5f14610517578063a457c2d71461052c578063a9059cbb14610550578063b52a585114610574578063c31e6ee014610589578063dd083f20146105aa578063dd62ed3e146105bf578063e760f10c146105e6578063f2fde38b146105fb578063f591aab51461061c578063f8fb491f14610631578063f90fa5dd14610652578063f968f49314610673578063fffe088d14610688575b600080fd5b3480156101e557600080fd5b506101ee61069d565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610228578181015183820152602001610210565b50505050905090810190601f1680156102555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026f57600080fd5b5061027861072b565b604080519115158252519081900360200190f35b34801561029857600080fd5b50610278600160a060020a03600435166024356107d6565b3480156102bc57600080fd5b506102c5610814565b60408051918252519081900360200190f35b3480156102e357600080fd5b50610278600160a060020a036004358116906024351660443561081a565b34801561030d57600080fd5b5061027861085a565b34801561032257600080fd5b506102c5610881565b34801561033757600080fd5b50610278600160a060020a0360043516610887565b34801561035857600080fd5b506102c5610a32565b34801561036d57600080fd5b50610278600160a060020a0360043516602435610a38565b34801561039157600080fd5b50610278610ae8565b3480156103a657600080fd5b50610278610b0a565b3480156103bb57600080fd5b50610278610b2e565b3480156103d057600080fd5b50610278610b54565b3480156103e557600080fd5b506103ee610b64565b60408051600160a060020a039092168252519081900360200190f35b34801561041657600080fd5b506102c5610b73565b34801561042b57600080fd5b506102c5600160a060020a0360043516610b79565b34801561044c57600080fd5b50610455610b94565b005b34801561046357600080fd5b50610278600160a060020a0360043516610bfe565b34801561048457600080fd5b506102c5610da3565b34801561049957600080fd5b50610278610da9565b3480156104ae57600080fd5b506103ee610dcc565b3480156104c357600080fd5b50610278610ddb565b3480156104d857600080fd5b506101ee610dec565b3480156104ed57600080fd5b506102c5610e47565b34801561050257600080fd5b50610278600160a060020a0360043516610e4d565b34801561052357600080fd5b50610278610ff8565b34801561053857600080fd5b50610278600160a060020a036004351660243561101d565b34801561055c57600080fd5b50610278600160a060020a0360043516602435611068565b34801561058057600080fd5b5061027861109f565b34801561059557600080fd5b50610278600160a060020a03600435166110d7565b3480156105b657600080fd5b506102c561117e565b3480156105cb57600080fd5b506102c5600160a060020a0360043581169060243516611184565b3480156105f257600080fd5b506102c56111af565b34801561060757600080fd5b50610455600160a060020a03600435166111b5565b34801561062857600080fd5b506102c56111d4565b34801561063d57600080fd5b50610278600160a060020a03600435166111da565b34801561065e57600080fd5b50610278600160a060020a036004351661126e565b34801561067f57600080fd5b50610278611417565b34801561069457600080fd5b506103ee611456565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107235780601f106106f857610100808354040283529160200191610723565b820191906000526020600020905b81548152906001019060200180831161070657829003601f168201915b505050505081565b6000610735610ddb565b151561074057600080fd5b600854600160a060020a0316151561075757600080fd5b6009547501000000000000000000000000000000000000000000900460ff161561078057600080fd5b6009805475ff00000000000000000000000000000000000000000019167501000000000000000000000000000000000000000000179055600854600a546107d091600160a060020a031690611465565b50600190565b600854600090600160a060020a031633146108035760095460a060020a900460ff16151561080357600080fd5b61080d8383611499565b9392505050565b60025490565b600854600090600160a060020a031633146108475760095460a060020a900460ff16151561084757600080fd5b610852848484611517565b949350505050565b6009547a010000000000000000000000000000000000000000000000000000900460ff1681565b60065481565b6000610891610ddb565b151561089c57600080fd5b600160a060020a03821615156108b157600080fd5b60095477010000000000000000000000000000000000000000000000900460ff16156108dc57600080fd5b6009546040805160e360020a631626ac910281529051600092600160a060020a03169163b135648891600480830192602092919082900301818787803b15801561092557600080fd5b505af1158015610939573d6000803e3d6000fd5b505050506040513d602081101561094f57600080fd5b50511180156109d657506009546040805160e360020a631626ac9102815290516301e1338092600160a060020a03169163b13564889160048083019260209291908290030181600087803b1580156109a657600080fd5b505af11580156109ba573d6000803e3d6000fd5b505050506040513d60208110156109d057600080fd5b50510142115b15156109e157600080fd5b6009805477ff0000000000000000000000000000000000000000000000191677010000000000000000000000000000000000000000000000179055600c54610a2a908390611465565b506001919050565b60075490565b6000600160a060020a0383161515610a4f57600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610a83908363ffffffff6115b416565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6009547501000000000000000000000000000000000000000000900460ff1681565b60095477010000000000000000000000000000000000000000000000900460ff1681565b600954790100000000000000000000000000000000000000000000000000900460ff1681565b60095460a060020a900460ff1681565b600954600160a060020a031681565b600c5481565b600160a060020a031660009081526020819052604090205490565b610b9c610ddb565b1515610ba757600080fd5b600354604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36003805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000610c08610ddb565b1515610c1357600080fd5b600160a060020a0382161515610c2857600080fd5b600954760100000000000000000000000000000000000000000000900460ff1615610c5257600080fd5b6009546040805160e360020a631626ac910281529051600092600160a060020a03169163b135648891600480830192602092919082900301818787803b158015610c9b57600080fd5b505af1158015610caf573d6000803e3d6000fd5b505050506040513d6020811015610cc557600080fd5b5051118015610d515750600960009054906101000a9004600160a060020a0316600160a060020a031663b13564886040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610d2257600080fd5b505af1158015610d36573d6000803e3d6000fd5b505050506040513d6020811015610d4c57600080fd5b505142115b1515610d5c57600080fd5b6009805476ff000000000000000000000000000000000000000000001916760100000000000000000000000000000000000000000000179055600b54610a2a908390611465565b600e5481565b600954760100000000000000000000000000000000000000000000900460ff1681565b600354600160a060020a031690565b600354600160a060020a0316331490565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107235780601f106106f857610100808354040283529160200191610723565b600d5481565b6000610e57610ddb565b1515610e6257600080fd5b600160a060020a0382161515610e7757600080fd5b6009547801000000000000000000000000000000000000000000000000900460ff1615610ea357600080fd5b6009546040805160e360020a631626ac910281529051600092600160a060020a03169163b135648891600480830192602092919082900301818787803b158015610eec57600080fd5b505af1158015610f00573d6000803e3d6000fd5b505050506040513d6020811015610f1657600080fd5b5051118015610fa25750600960009054906101000a9004600160a060020a0316600160a060020a031663b13564886040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f7357600080fd5b505af1158015610f87573d6000803e3d6000fd5b505050506040513d6020811015610f9d57600080fd5b505142115b1515610fad57600080fd5b6009805478ff00000000000000000000000000000000000000000000000019167801000000000000000000000000000000000000000000000000179055600d54610a2a908390611465565b6009547801000000000000000000000000000000000000000000000000900460ff1681565b6000600160a060020a038316151561103457600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610a83908363ffffffff6115c616565b600854600090600160a060020a031633146110955760095460a060020a900460ff16151561109557600080fd5b61080d83836115dd565b600854600090600160a060020a031633146110b957600080fd5b6008546107d090600160a060020a03166110d281610b79565b6115f3565b60006110e1610ddb565b15156110ec57600080fd5b600160a060020a038216151561110157600080fd5b6009547a010000000000000000000000000000000000000000000000000000900460ff161561112f57600080fd5b600980547aff000000000000000000000000000000000000000000000000000019167a010000000000000000000000000000000000000000000000000000179055600f54610a2a908390611465565b600b5481565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600a5481565b6111bd610ddb565b15156111c857600080fd5b6111d1816116c1565b50565b600f5481565b60006111e4610ddb565b15156111ef57600080fd5b600854600160a060020a03161561120557600080fd5b6009547501000000000000000000000000000000000000000000900460ff161561122e57600080fd5b506008805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03938416179182905560098054929093169116179055600190565b6000611278610ddb565b151561128357600080fd5b600160a060020a038216151561129857600080fd5b600954790100000000000000000000000000000000000000000000000000900460ff16156112c557600080fd5b6009546040805160e360020a631626ac910281529051600092600160a060020a03169163b135648891600480830192602092919082900301818787803b15801561130e57600080fd5b505af1158015611322573d6000803e3d6000fd5b505050506040513d602081101561133857600080fd5b50511180156113bf57506009546040805160e360020a631626ac9102815290516301e1338092600160a060020a03169163b13564889160048083019260209291908290030181600087803b15801561138f57600080fd5b505af11580156113a3573d6000803e3d6000fd5b505050506040513d60208110156113b957600080fd5b50510142115b15156113ca57600080fd5b6009805479ff000000000000000000000000000000000000000000000000001916790100000000000000000000000000000000000000000000000000179055600e54610a2a908390611465565b6000611421610ddb565b151561142c57600080fd5b506009805474ff0000000000000000000000000000000000000000191660a060020a179055600190565b600854600160a060020a031681565b60075461148082611474610814565b9063ffffffff6115b416565b111561148b57600080fd5b611495828261173f565b5050565b6000600160a060020a03831615156114b057600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600160a060020a038316600090815260016020908152604080832033845290915281205482111561154757600080fd5b600160a060020a038416600090815260016020908152604080832033845290915290205461157b908363ffffffff6115c616565b600160a060020a03851660009081526001602090815260408083203384529091529020556115aa8484846117e9565b5060019392505050565b60008282018381101561080d57600080fd5b600080838311156115d657600080fd5b5050900390565b60006115ea3384846117e9565b50600192915050565b600160a060020a038216151561160857600080fd5b600160a060020a03821660009081526020819052604090205481111561162d57600080fd5b600254611640908263ffffffff6115c616565b600255600160a060020a03821660009081526020819052604090205461166c908263ffffffff6115c616565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b600160a060020a03811615156116d657600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216151561175457600080fd5b600254611767908263ffffffff6115b416565b600255600160a060020a038216600090815260208190526040902054611793908263ffffffff6115b416565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a03831660009081526020819052604090205481111561180e57600080fd5b600160a060020a038216151561182357600080fd5b600160a060020a03831660009081526020819052604090205461184c908263ffffffff6115c616565b600160a060020a038085166000908152602081905260408082209390935590841681522054611881908263ffffffff6115b416565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35050505600a165627a7a72305820b6f767d20f91650b0d971d51881072a91b4600ce650d0517f39b6afcbd8a411f0029"
}