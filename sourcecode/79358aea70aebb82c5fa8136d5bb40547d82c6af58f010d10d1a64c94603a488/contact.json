{
  "address": "0x91eb18850404e35e4c24f5908228b0e7926580b0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Chaingrapher",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-21\n*/\n\npragma solidity ^0.5.0;\n\ninterface IERC165 {\n\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\npragma solidity ^0.5.0;\n\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\npragma solidity ^0.5.0;\n\ncontract IERC721Receiver {\n\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n\npragma solidity ^0.5.0;\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\npragma solidity ^0.5.0;\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\npragma solidity ^0.5.0;\n\ncontract ERC165 is IERC165 {\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff);\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\npragma solidity ^0.5.0;\n\ncontract ERC721 is ERC165, IERC721 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    mapping (uint256 => address) private _tokenOwner;\n\n    mapping (uint256 => address) private _tokenApprovals;\n\n    mapping (address => uint256) private _ownedTokensCount;\n\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    constructor () public {\n        _registerInterface(_INTERFACE_ID_ERC721);\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0));\n        return _ownedTokensCount[owner];\n    }\n\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0));\n        return owner;\n    }\n\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner);\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId));\n        return _tokenApprovals[tokenId];\n    }\n\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != msg.sender);\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n\n        _transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n    }\n\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0));\n        require(!_exists(tokenId));\n\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    function _burn(address owner, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == owner);\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[owner] = _ownedTokensCount[owner].sub(1);\n        _tokenOwner[tokenId] = address(0);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    function _burn(uint256 tokenId) internal {\n        _burn(ownerOf(tokenId), tokenId);\n    }\n\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from);\n        require(to != address(0));\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n\n        _tokenOwner[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n}\n\npragma solidity ^0.5.0;\n\ncontract IERC721Enumerable is IERC721 {\n    function totalSupply() public view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n\n    function tokenByIndex(uint256 index) public view returns (uint256);\n}\n\npragma solidity ^0.5.0;\n\ncontract ERC721EnumerableSimple is ERC165, ERC721, IERC721Enumerable {\n    mapping(address => uint256[]) private _ownedTokens;\n\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    uint256 internal totalSupply_;\n\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    constructor () public {\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n        require(index < balanceOf(owner), \"Index is higher than number of tokens owned.\");\n        return _ownedTokens[owner][index];\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function tokenByIndex(uint256 index) public view returns (uint256) {\n        require(index < totalSupply(), \"Index is out of bounds.\");\n        return index;\n    }\n\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        super._transferFrom(from, to, tokenId);\n\n        _removeTokenFromOwnerEnumeration(from, tokenId);\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n    }\n\n    function _mint(address to, uint256 tokenId) internal {\n        super._mint(to, tokenId);\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n\n        totalSupply_ = totalSupply_.add(1);\n    }\n\n    function _burn(address /*owner*/, uint256 /*tokenId*/) internal {\n        revert(\"This token cannot be burned.\");\n    }\n\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\n        return _ownedTokens[owner];\n    }\n\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\n        _ownedTokens[to].push(tokenId);\n    }\n\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        _ownedTokens[from].length--;\n\n    }\n}\n\npragma solidity ^0.5.0;\n\ncontract IERC721Metadata is IERC721 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\npragma solidity ^0.5.0;\n\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n    }\n\n    /**\n     * @dev Gets the token name\n     * @return string representing the token name\n     */\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\n        require(_exists(tokenId));\n        return _tokenURIs[tokenId];\n    }\n\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\n        require(_exists(tokenId));\n        _tokenURIs[tokenId] = uri;\n    }\n\n    function _burn(address owner, uint256 tokenId) internal {\n        super._burn(owner, tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n\npragma solidity ^0.5.0;\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n}\n    \npragma solidity ^0.5.0;\n\ncontract Chaingrapher is ERC721, ERC721EnumerableSimple, ERC721Metadata(\"Smart Contract analytics: Chaingraph.io\", \"Chaingraph.io - Smart contract analytics\") {\n\n    address public createControl;\n\n    constructor(address _createControl)\n    public\n    {\n        createControl = _createControl;\n    }\n\n    modifier onlyCreateControl()\n    {\n        require(msg.sender == createControl, \"createControl key required for this function.\");\n        _;\n    }\n\n    function create(uint256 _tokenId, address _owner)\n    public\n    onlyCreateControl\n    {\n        require(_tokenId == 0 || _exists(_tokenId.sub(1)), \"Previous token ID has to exist.\");\n        _mint(_owner, _tokenId);\n    }\n    \n    function createMulti(uint256 _tokenIdStart, address[] memory _owners)\n    public\n    onlyCreateControl\n    {\n        // Make sure we do not get any holes in Ids so we can do more optimizations.\n        require(_tokenIdStart == 0 || _exists(_tokenIdStart.sub(1)), \"Previous token ID has to exist.\");\n        uint256 addrcount = _owners.length;\n        for (uint256 i = 0; i < addrcount; i++) {\n            // Make sure this is in sync with what create() does.\n            _mint(_owners[i], _tokenIdStart + i);\n        }\n    }\n\n    function destroy(uint256 _tokenId)\n    public\n    onlyCreateControl\n    {\n        _transferFrom(ownerOf(_tokenId), address(this), _tokenId);\n    }\n\n    function rescueToken(IERC20 _foreignToken, address _to)\n    external\n    onlyCreateControl\n    {\n        _foreignToken.transfer(_to, _foreignToken.balanceOf(address(this)));\n    }\n\n    function()\n    external payable\n    {\n        revert(\"The contract cannot receive ETH payments.\");\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160208062002b28833981018060405260208110156200003357600080fd5b8101908080519060200190929190505050606060405190810160405280602781526020017f536d61727420436f6e747261637420616e616c79746963733a20436861696e6781526020017f726170682e696f00000000000000000000000000000000000000000000000000815250606060405190810160405280602881526020017f436861696e67726170682e696f202d20536d61727420636f6e7472616374206181526020017f6e616c79746963730000000000000000000000000000000000000000000000008152506200013b6301ffc9a77c0100000000000000000000000000000000000000000000000000000000026200026e640100000000026401000000009004565b620001786380ac58cd7c0100000000000000000000000000000000000000000000000000000000026200026e640100000000026401000000009004565b620001b563780e9d637c0100000000000000000000000000000000000000000000000000000000026200026e640100000000026401000000009004565b8160089080519060200190620001cd9291906200032c565b508060099080519060200190620001e69291906200032c565b5062000224635b5e139f7c0100000000000000000000000000000000000000000000000000000000026200026e640100000000026401000000009004565b505080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620003db565b63ffffffff7c010000000000000000000000000000000000000000000000000000000002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151515620002c057600080fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200036f57805160ff1916838001178555620003a0565b82800160010185558215620003a0579182015b828111156200039f57825182559160200191906001019062000382565b5b509050620003af9190620003b3565b5090565b620003d891905b80821115620003d4576000816000905550600101620003ba565b5090565b90565b61273d80620003eb6000396000f3fe60806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a7146101b157806306fdde0314610223578063081812fc146102b3578063095ea7b31461032e57806318160ddd1461038957806323b872dd146103b45780632f745c591461042f57806342842e0e1461049e5780634707d000146105195780634f6ccce71461058a5780635ba13abf146105d95780636352211e146106a857806370a082311461072357806395d89b41146107885780639d11877014610818578063a22cb46514610853578063b88d4fde146108b0578063c87b56dd146109c2578063e66075c214610a76578063e985e9c514610acd578063f01fe69214610b56575b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f54686520636f6e74726163742063616e6e6f742072656365697665204554482081526020017f7061796d656e74732e000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b3480156101bd57600080fd5b50610209600480360360208110156101d457600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610bb1565b604051808215151515815260200191505060405180910390f35b34801561022f57600080fd5b50610238610c18565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561027857808201518184015260208101905061025d565b50505050905090810190601f1680156102a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102bf57600080fd5b506102ec600480360360208110156102d657600080fd5b8101908080359060200190929190505050610cba565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561033a57600080fd5b506103876004803603604081101561035157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d0b565b005b34801561039557600080fd5b5061039e610e50565b6040518082815260200191505060405180910390f35b3480156103c057600080fd5b5061042d600480360360608110156103d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e5a565b005b34801561043b57600080fd5b506104886004803603604081101561045257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e7f565b6040518082815260200191505060405180910390f35b3480156104aa57600080fd5b50610517600480360360608110156104c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f85565b005b34801561052557600080fd5b506105886004803603604081101561053c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fa6565b005b34801561059657600080fd5b506105c3600480360360208110156105ad57600080fd5b8101908080359060200190929190505050611247565b6040518082815260200191505060405180910390f35b3480156105e557600080fd5b506106a6600480360360408110156105fc57600080fd5b81019080803590602001909291908035906020019064010000000081111561062357600080fd5b82018360208201111561063557600080fd5b8035906020019184602083028401116401000000008311171561065757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506112cf565b005b3480156106b457600080fd5b506106e1600480360360208110156106cb57600080fd5b810190808035906020019092919050505061149f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561072f57600080fd5b506107726004803603602081101561074657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061151d565b6040518082815260200191505060405180910390f35b34801561079457600080fd5b5061079d6115a1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107dd5780820151818401526020810190506107c2565b50505050905090810190601f16801561080a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561082457600080fd5b506108516004803603602081101561083b57600080fd5b8101908080359060200190929190505050611643565b005b34801561085f57600080fd5b506108ae6004803603604081101561087657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611744565b005b3480156108bc57600080fd5b506109c0600480360360808110156108d357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561093a57600080fd5b82018360208201111561094c57600080fd5b8035906020019184600183028401116401000000008311171561096e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611880565b005b3480156109ce57600080fd5b506109fb600480360360208110156109e557600080fd5b81019080803590602001909291905050506118a8565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a3b578082015181840152602081019050610a20565b50505050905090810190601f168015610a685780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a8257600080fd5b50610a8b611971565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610ad957600080fd5b50610b3c60048036036040811015610af057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611997565b604051808215151515815260200191505060405180910390f35b348015610b6257600080fd5b50610baf60048036036040811015610b7957600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a2b565b005b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cb05780601f10610c8557610100808354040283529160200191610cb0565b820191906000526020600020905b815481529060010190602001808311610c9357829003601f168201915b5050505050905090565b6000610cc582611bbf565b1515610cd057600080fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610d168261149f565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610d5357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610d935750610d928133611997565b5b1515610d9e57600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000600754905090565b610e643382611c31565b1515610e6f57600080fd5b610e7a838383611cc6565b505050565b6000610e8a8361151d565b82101515610f26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f496e64657820697320686967686572207468616e206e756d626572206f66207481526020017f6f6b656e73206f776e65642e000000000000000000000000000000000000000081525060400191505060405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515610f7257fe5b9060005260206000200154905092915050565b610fa18383836020604051908101604052806000815250611880565b505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611091576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f637265617465436f6e74726f6c206b657920726571756972656420666f72207481526020017f6869732066756e6374696f6e2e0000000000000000000000000000000000000081525060400191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb828473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561114757600080fd5b505afa15801561115b573d6000803e3d6000fd5b505050506040513d602081101561117157600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561120757600080fd5b505af115801561121b573d6000803e3d6000fd5b505050506040513d602081101561123157600080fd5b8101908080519060200190929190505050505050565b6000611251610e50565b821015156112c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f496e646578206973206f7574206f6620626f756e64732e00000000000000000081525060200191505060405180910390fd5b819050919050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f637265617465436f6e74726f6c206b657920726571756972656420666f72207481526020017f6869732066756e6374696f6e2e0000000000000000000000000000000000000081525060400191505060405180910390fd5b60008214806113e157506113e06113db600184611cea90919063ffffffff16565b611bbf565b5b1515611455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f50726576696f757320746f6b656e2049442068617320746f2065786973742e0081525060200191505060405180910390fd5b60008151905060008090505b818110156114995761148c838281518110151561147a57fe5b90602001906020020151828601611d0c565b8080600101915050611461565b50505050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561151457600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561155a57600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116395780601f1061160e57610100808354040283529160200191611639565b820191906000526020600020905b81548152906001019060200180831161161c57829003601f168201915b5050505050905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561172e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f637265617465436f6e74726f6c206b657920726571756972656420666f72207481526020017f6869732066756e6374696f6e2e0000000000000000000000000000000000000081525060400191505060405180910390fd5b61174161173a8261149f565b3083611cc6565b50565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561177f57600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b61188b848484610e5a565b61189784848484611d40565b15156118a257600080fd5b50505050565b60606118b382611bbf565b15156118be57600080fd5b600a60008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119655780601f1061193a57610100808354040283529160200191611965565b820191906000526020600020905b81548152906001019060200180831161194857829003601f168201915b50505050509050919050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f637265617465436f6e74726f6c206b657920726571756972656420666f72207481526020017f6869732066756e6374696f6e2e0000000000000000000000000000000000000081525060400191505060405180910390fd5b6000821480611b3d5750611b3c611b37600184611cea90919063ffffffff16565b611bbf565b5b1515611bb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f50726576696f757320746f6b656e2049442068617320746f2065786973742e0081525060200191505060405180910390fd5b611bbb8183611d0c565b5050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600080611c3d8361149f565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611cac57508373ffffffffffffffffffffffffffffffffffffffff16611c9484610cba565b73ffffffffffffffffffffffffffffffffffffffff16145b80611cbd5750611cbc8185611997565b5b91505092915050565b611cd1838383611f63565b611cdb83826121c8565b611ce5828261236c565b505050565b6000828211151515611cfb57600080fd5b600082840390508091505092915050565b611d168282612433565b611d20828261236c565b611d3660016007546125cc90919063ffffffff16565b6007819055505050565b6000611d618473ffffffffffffffffffffffffffffffffffffffff166125ed565b1515611d705760019050611f5b565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611e67578082015181840152602081019050611e4c565b50505050905090810190601f168015611e945780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611eb657600080fd5b505af1158015611eca573d6000803e3d6000fd5b505050506040513d6020811015611ee057600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16611f838261149f565b73ffffffffffffffffffffffffffffffffffffffff16141515611fa557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611fe157600080fd5b611fea81612600565b61203d6001600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611cea90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120d36001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125cc90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006122206001600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050611cea90919063ffffffff16565b90506000600660008481526020019081526020016000205490508181141515612313576000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561229157fe5b9060005260206000200154905080600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156122eb57fe5b9060005260206000200181905550816006600083815260200190815260200160002081905550505b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548091906001900361236591906126c0565b5050505050565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506006600083815260200190815260200160002081905550600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561246f57600080fd5b61247881611bbf565b15151561248457600080fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506125296001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125cc90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60008082840190508381101515156125e357600080fd5b8091505092915050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156126bd5760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b8154818355818111156126e7578183600052602060002091820191016126e691906126ec565b5b505050565b61270e91905b8082111561270a5760008160009055506001016126f2565b5090565b9056fea165627a7a72305820f54ec759aeb578091db7dcc4fcf25c574405e3ddbcd1ef716da0c41c2038f957002900000000000000000000000089ce99b263515582f02320a4e1f7ff7e49a49722",
  "constructorArguments": "00000000000000000000000089ce99b263515582f02320a4e1f7ff7e49a49722"
}