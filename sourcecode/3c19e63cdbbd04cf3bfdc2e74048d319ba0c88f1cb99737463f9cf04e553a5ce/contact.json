{
  "address": "0xb44822a2bd88f68cc69c0a783517ce625cc0fb92",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "myEtherDate",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-05\n*/\n\npragma solidity >=0.5.0 <0.6.0;\n\n/* HEY WELCOME TO MyEther.DATE's OFFICIAL SMART CONTRACT!\n\n    My name is Tay Tay and I will help you digest the material of this contract, \n    all in layman's terms. \n     \n\n*/\n\ncontract myEtherDate {\n    \n    struct Player {\n        uint commitBlock;\n        uint stake;\n    }\n    \n    mapping(address => Player) public player;\n    uint public maxStake;\n    address public owner;\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    /* Here is where the fun begins. When you materialize your 4 dates, all\n    * the contract really cares is WHEN you did it and how big was your stake.\n    * so yeah, sorry to burst the bubble but the matchmaking has nothing to do\n    * with the outcome of your bet. \n    */ \n    function set() \n        public\n        payable\n        returns (bool success)\n    {\n        // this is to make sure our bankroll can cover the maximum payout \n        // for your stake and also to make sure your stake is greater than zero. \n        require(msg.value > 0 && msg.value <= maxStake);\n        \n        // Since future hashes are quite hard to predict, \n        // your random seed will be the hash of the next block\n        player[msg.sender].commitBlock = block.number + 1;\n        player[msg.sender].stake = msg.value;\n        \n        return true;\n    }  \n    \n    /* RANDOM NUMBER GENERATION function \n    *\n    *  This is pretty much a copy-paste of cryptokitties gene science algorithm but\n    *  tailored to our specific purposes.\n    *\n    *  This function is public (gas-free) so it is called by MyEther.DATE's interface on behalf \n    *  of the user, automatically, as soon as random numbers are available.\n    *\n    *  The interface will then interpret these random numbers and tell the player if he won or not.\n    *  If he won, it is up to him to call the \"claim\" function. \n    *\n    */\n    function getRand() \n        view\n        public\n        returns (uint[4] memory) \n    {\n        // convert our \"pseudo-random\" hash to human-redeable integers\n        uint256 randomN = uint256(blockhash(player[msg.sender].commitBlock));\n      \n        // this function will not work if it is called to soon \n        // (like right after the bet was placed, because the hash for the next block is not yet available), \n        // or too late (256+ blocks after the bet was placed, because the etheruem blockchain \n        // only stores the most recent 256 block hashes) \n        require(randomN != 0);\n\n        uint256 offset;\n        uint[4] memory randNums;\n        \n        // this loop will slice our random number into 4 smaller numbers,\n        // each one from 0 to 65535\n        for(uint i = 0; i < 4; i++){\n            randNums[i] = _sliceNumber(randomN, 16, offset);  \n            offset += 32;    \n        }\n        \n        // return our 4 random numbers\n        return randNums;\n    }\n    \n    /*  CLAIM function\n    *   \n    *   This function can be evoked by anybody, but it will only payout ether to actual\n    *   winners. \n    *\n    */\n    function claim()\n        public\n        payable\n        returns (bool success)\n    {\n        uint[4] memory rand = getRand();\n        player[msg.sender].commitBlock = 0;\n        uint256 stake = player[msg.sender].stake;\n        player[msg.sender].stake = 0;\n        \n        uint256 successfulDate;\n        \n        // you get 4 random numbers for 4 date outcomes..\n        // To get a successful date, any of your random numbers must be less than 8110\n        // and since they range from 0 to 65536, you have a winning probability \n        // of 0.12375 on each date\n        for (uint i = 0; i < 4; i++) {\n            if (rand[i] < 8110) \n                successfulDate++;\n        }\n        \n        if (successfulDate != 0) {\n            // for each successful date, we double your stake, \n            // this equals a 1% edge...\n            uint256 payout = SafeMath.mul(stake, 2);\n            payout = SafeMath.mul(payout, successfulDate);\n            msg.sender.transfer(payout);\n            updateMaxStake();\n        }\n\n        return true;\n    }\n    \n    /// @dev given a number get a slice of any bits, at certain offset\n    /// @param _n a number to be sliced\n    /// @param _nbits how many bits long is the new number\n    /// @param _offset how many bits to skip\n    function _sliceNumber(uint256 _n, uint256 _nbits, uint256 _offset) \n        private \n        pure \n        returns (uint256) \n    {\n        // mask is made by shifting left an offset number of times\n        uint256 mask = uint256((2**_nbits) - 1) << _offset;\n        // AND n with mask, and trim to max of _nbits bits\n        return uint256((_n & mask) >> _offset);\n    }\n    \n    function fundBankroll()\n        public\n        payable\n        returns(bool success)\n    {\n        updateMaxStake();\n        return true;\n    }\n    \n    function updateMaxStake()\n        public\n        returns (bool success)\n    {\n        uint256 newMax = SafeMath.div(address(this).balance, 8);\n        maxStake = newMax;\n        return true;\n    }\n    \n    function admin() public onlyOwner {\n\t\tselfdestruct(msg.sender);\n\t}    \n        \n    function collect(uint256 ammount)\n        public\n        onlyOwner\n        returns (bool success)\n    {\n        msg.sender.transfer(ammount);\n        updateMaxStake();\n        return true;\n    }\n    \n    function transferOwnership(address newOwner) \n        public\n        onlyOwner\n    {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n    \n}\n\n    /**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506109d8806100616000396000f3fe6080604052600436106100a9576000357c0100000000000000000000000000000000000000000000000000000000900480634c54e1b5146100ae5780634e71d92d1461011a578063600bc4ea1461013c578063753fab131461018f5780637adc88d9146101b15780638da5cb5b146101e0578063b8e010de14610237578063ce3f865f14610259578063ea1b28e0146102ac578063f2fde38b146102d7578063f851a44014610328575b600080fd5b3480156100ba57600080fd5b506100fd600480360360208110156100d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061033f565b604051808381526020018281526020019250505060405180910390f35b610122610363565b604051808215151515815260200191505060405180910390f35b34801561014857600080fd5b50610151610510565b6040518082600460200280838360005b8381101561017c578082015181840152602081019050610161565b5050505090500191505060405180910390f35b6101976105cc565b604051808215151515815260200191505060405180910390f35b3480156101bd57600080fd5b506101c66105de565b604051808215151515815260200191505060405180910390f35b3480156101ec57600080fd5b506101f5610614565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61023f61063a565b604051808215151515815260200191505060405180910390f35b34801561026557600080fd5b506102926004803603602081101561027c57600080fd5b81019080803590602001909291905050506106ee565b604051808215151515815260200191505060405180910390f35b3480156102b857600080fd5b506102c16107a5565b6040518082815260200191505060405180910390f35b3480156102e357600080fd5b50610326600480360360208110156102fa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107ab565b005b34801561033457600080fd5b5061033d610882565b005b60006020528060005260406000206000915090508060000154908060010154905082565b600061036d610989565b610375610510565b905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600080600090505b600481101561048e57611fae848260048110151561046d57fe5b602002015110156104815781806001019250505b8080600101915050610453565b506000811415156105065760006104a68360026108f7565b90506104b281836108f7565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156104fa573d6000803e3d6000fd5b506105036105de565b50505b6001935050505090565b610518610989565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154406001900490506000811415151561057357600080fd5b600061057d610989565b60008090505b60048110156105c25761059884601085610935565b82826004811015156105a657fe5b6020020181815250506020830192508080600101915050610583565b5080935050505090565b60006105d66105de565b506001905090565b6000806106033073ffffffffffffffffffffffffffffffffffffffff1631600861095f565b905080600181905550600191505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000803411801561064d57506001543411155b151561065857600080fd5b600143016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561074c57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610792573d6000803e3d6000fd5b5061079b6105de565b5060019050919050565b60015481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561080757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561087f5780600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108de57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b60008083141561090a576000905061092f565b6000828402905082848281151561091d57fe5b0414151561092a57600080fd5b809150505b92915050565b6000808260018560020a039060020a02905082818616908060020a82049150509150509392505050565b6000808211151561096f57600080fd5b6000828481151561097c57fe5b0490508091505092915050565b60806040519081016040528060049060208202803883398082019150509050509056fea165627a7a723058204ef51298a87870e416f3d5db6233f079a536d984baa4a0316c1005faf815019e0029"
}