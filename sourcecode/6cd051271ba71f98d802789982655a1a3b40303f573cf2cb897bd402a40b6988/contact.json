{
  "address": "0x999d332eee57452cf07bceec365fd35ba5c142cb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HYIPRETHPRO440",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-09\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address internal _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    _owner = msg.sender;\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n\ncontract HYIPRETHPRO440 is Ownable{\n    using SafeMath for uint256;\n    \n    mapping (address => uint256) public investedETH;\n    mapping (address => uint256) public lastInvest;\n    mapping (address => uint256) public lastWithdraw;\n    \n    mapping (address => uint256) public affiliateCommision;\n    \n    address public dev = address(0xBFb297616fFa0124a288e212d1E6DF5299C9F8d0);\n    address public promoter1 = address(0xdbDf0Ae8DB4549cb5E70e80ad54246C9E325dE4f);\n    address public promoter2 = address(0x522F73DFb71168D4df4afCB1d67Cc4E17b832420);\n    address public promoter3 = address(0x342D8F4120380A435CF895D50B91C0cFbAb7eDbB);\n    address public promoter4 = address(0x5697428D9488a2b84505E6D964bCa96FBfD1Bf19);\n    address public promoter5 = address(0x6aF9E412AC9ED0507376963fC41682a011FfFf25);\n    address public promoter6 = address(0x2f192b34Fa55B8E5C35d8864C253D292949a741c);\n    \n    address public lastPotWinner;\n    \n    uint256 public pot = 0;\n    uint256 public maxpot = 3000000000000000000;\n    uint256 public launchtime = 1554822000;\n    uint256 public maxwithdraw = SafeMath.div(87, 10);\n    uint256 maxprofit = SafeMath.div(44, 10);\n   \n    \n    \n    event PotWinner(address indexed beneficiary, uint256 amount );\n    \n    constructor () public {\n        _owner = address(0xBFb297616fFa0124a288e212d1E6DF5299C9F8d0);\n    }\n    \n    \n      mapping(address => uint256) public userWithdrawals;\n    mapping(address => uint256[]) public userSequentialDeposits;\n    \n    function maximumProfitUser() public view returns(uint256){ \n        return getInvested() * maxprofit;\n    }\n    \n    function getTotalNumberOfDeposits() public view returns(uint256){\n        return userSequentialDeposits[msg.sender].length;\n    }\n    \n    function() public payable{ }\n    \n    \n    \n      function investETH(address referral) public payable {\n      require(now >= launchtime);\n      require(msg.value >= 0.5 ether);\n      uint256 timelimit = SafeMath.sub(now, launchtime);\n      \n      \n      if(timelimit < 1728000 && getProfit(msg.sender) > 0){\n          reinvestProfit();\n        }\n        \n      if(timelimit > 1728000 && getProfit(msg.sender) > 0){\n            \n             uint256 profit = getProfit(msg.sender);\n             lastInvest[msg.sender] = now;\n             lastWithdraw[msg.sender] = now;\n             userWithdrawals[msg.sender] += profit;\n             msg.sender.transfer(profit);\n \n           \n        }\n       \n        \n        amount = msg.value;\n        uint256 commision = amount.mul(7).div(100);\n        uint256 commision1 = amount.mul(3).div(100);\n        uint256 commision2 = amount.mul(2).div(100);\n        uint256 _pot = amount.mul(3).div(100);\n        pot = pot.add(_pot);\n        uint256 amount = amount;\n        \n        \n        dev.transfer(commision1);\n        promoter1.transfer(commision1);\n        promoter2.transfer(commision1);\n        promoter3.transfer(commision1);\n        promoter4.transfer(commision1);\n        promoter5.transfer(commision1);\n        promoter6.transfer(commision2);\n       \n        \n        if(referral != msg.sender && referral != 0x1 && referral != promoter1 && referral != promoter2  && referral != promoter3  && referral != promoter4  && referral != promoter5  && referral != promoter6){\n            affiliateCommision[referral] = SafeMath.add(affiliateCommision[referral], commision);\n        }\n        \n        //affiliateCommision[dev] = SafeMath.add(affiliateCommision[dev], commision);\n        \n        \n        investedETH[msg.sender] = investedETH[msg.sender].add(amount);\n        lastInvest[msg.sender] = now;\n        userSequentialDeposits[msg.sender].push(amount);\n        if(pot >= maxpot){\n            uint256 winningReward = pot;\n            msg.sender.transfer(winningReward);\n            lastPotWinner = msg.sender;\n            emit PotWinner(msg.sender, winningReward);\n            pot = 0;\n             }\n       \n    }\n    \n \n    \n    function withdraw() public{\n        uint256 profit = getProfit(msg.sender);\n        uint256 timelimit = SafeMath.sub(now, launchtime);\n        uint256 maximumProfit = maximumProfitUser();\n        uint256 availableProfit = maximumProfit - userWithdrawals[msg.sender];\n        uint256 maxwithdrawlimit = SafeMath.div(SafeMath.mul(maxwithdraw, investedETH[msg.sender]), 100);\n       \n\n        require(profit > 0);\n        require(timelimit >= 1728000);\n       \n        lastInvest[msg.sender] = now;\n        lastWithdraw[msg.sender] = now;\n       \n       \n       \n        if(profit < availableProfit){\n        \n        if(profit < maxwithdrawlimit){\n        userWithdrawals[msg.sender] += profit;\n        msg.sender.transfer(profit);\n        }\n        else if(profit >= maxwithdrawlimit){\n        uint256 PartPayment = maxwithdrawlimit;\n        uint256 finalprofit = SafeMath.sub(profit, PartPayment);\n        userWithdrawals[msg.sender] += profit;\n        msg.sender.transfer(PartPayment);\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], finalprofit);\n        } \n          \n        }\n        \n        else if(profit >= availableProfit && userWithdrawals[msg.sender] < maximumProfit){\n            uint256 finalPartialPayment = availableProfit;\n            if(finalPartialPayment < maxwithdrawlimit){\n            userWithdrawals[msg.sender] = 0;\n            investedETH[msg.sender] = 0;\n            delete userSequentialDeposits[msg.sender];\n            msg.sender.transfer(finalPartialPayment);\n            }\n             else if(finalPartialPayment >= maxwithdrawlimit){\n             \n        uint256 finalPartPayment = maxwithdrawlimit;\n        uint256 finalprofits = SafeMath.sub(finalPartialPayment, finalPartPayment);\n        userWithdrawals[msg.sender] += finalPartialPayment;\n        msg.sender.transfer(finalPartPayment);\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], finalprofits);\n        \n        \n             }\n        }\n    \n        \n    }\n   \n    function getProfitFromSender() public view returns(uint256){\n        return getProfit(msg.sender);\n    }\n\n    function getProfit(address customer) public view returns(uint256){\n        uint256 secondsPassed = SafeMath.sub(now, lastInvest[customer]);\n        uint256 profit = SafeMath.div(SafeMath.mul(secondsPassed, investedETH[customer]), 985010);\n        uint256 maximumProfit = maximumProfitUser();\n        uint256 availableProfit = maximumProfit - userWithdrawals[msg.sender];\n\n        if(profit > availableProfit && userWithdrawals[msg.sender] < maximumProfit){\n            profit = availableProfit;\n        }\n        \n        uint256 bonus = getBonus();\n        if(bonus == 0){\n            return profit;\n        }\n        return SafeMath.add(profit, SafeMath.div(SafeMath.mul(profit, bonus), 100));\n    }\n    \n    function getBonus() public view returns(uint256){\n        uint256 invested = getInvested();\n        if(invested >= 0.5 ether && 4 ether >= invested){\n            return 0;\n        }else if(invested >= 4.01 ether && 7 ether >= invested){\n            return 20;\n        }else if(invested >= 7.01 ether && 10 ether >= invested){\n            return 40;\n        }else if(invested >= 10.01 ether && 15 ether >= invested){\n            return 60;\n        }else if(invested >= 15.01 ether){\n            return 99;\n        }\n    }\n    \n    function reinvestProfit() public {\n        uint256 profit = getProfit(msg.sender);\n        require(profit > 0);\n        lastInvest[msg.sender] = now;\n        userWithdrawals[msg.sender] += profit;\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], profit);\n    } \n \n   \n    function getAffiliateCommision() public view returns(uint256){\n        return affiliateCommision[msg.sender];\n    }\n    \n    function withdrawAffiliateCommision() public {\n        require(affiliateCommision[msg.sender] > 0);\n        uint256 commision = affiliateCommision[msg.sender];\n        affiliateCommision[msg.sender] = 0;\n        msg.sender.transfer(commision);\n    }\n    \n    function getInvested() public view returns(uint256){\n        return investedETH[msg.sender];\n    }\n    \n    function getBalance() public view returns(uint256){\n        return address(this).balance;\n    }\n\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n    \n    function max(uint256 a, uint256 b) private pure returns (uint256) {\n        return a > b ? a : b;\n    }\n    \n    function updatePromoter1(address _address) external onlyOwner {\n        require(_address != address(0x0));\n        promoter1 = _address;\n    }\n    \n    function updatePromoter2(address _address) external onlyOwner {\n        require(_address != address(0x0));\n        promoter2 = _address;\n    }\n    \n    function updatePromoter3(address _address) external onlyOwner {\n        require(_address != address(0x0));\n        promoter3 = _address;\n    }\n    \n     function updatePromoter4(address _address) external onlyOwner {\n        require(_address != address(0x0));\n        promoter4 = _address;\n    }\n    \n     function updatePromoter5(address _address) external onlyOwner {\n        require(_address != address(0x0));\n        promoter5 = _address;\n    }\n    \n     function updatePromoter6(address _address) external onlyOwner {\n        require(_address != address(0x0));\n        promoter6 = _address;\n    }\n    \n    \n    \n    \n     function updateMaxpot(uint256 _Maxpot) external onlyOwner {\n        maxpot = _Maxpot;\n    }\n    \n     function updateLaunchtime(uint256 _Launchtime) external onlyOwner {\n        launchtime = _Launchtime;\n    }\n   \n\n        /**\n  *  function random() internal view returns (bool) {\n        uint maxRange = 2**(8* 7);\n        for(uint8 a = 0 ; a < 8; a++){\n            uint randomNumber = uint( keccak256(abi.encodePacked(msg.sender,blockhash(block.number), block.timestamp )) ) % maxRange;\n           if ((randomNumber % 13) % 19 == 0){\n             return true;\n                break;\n            }\n        }\n        return false;    \n    }  */\n    \n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_Launchtime\",\"type\":\"uint256\"}],\"name\":\"updateLaunchtime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updatePromoter6\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumProfitUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updatePromoter2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAffiliateCommision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updatePromoter5\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateCommision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfitFromSender\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalNumberOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoter3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updatePromoter4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"investETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Maxpot\",\"type\":\"uint256\"}],\"name\":\"updateMaxpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoter4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoter5\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPotWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoter6\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoter2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxwithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updatePromoter1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updatePromoter3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAffiliateCommision\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoter1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"launchtime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSequentialDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PotWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": ""
}