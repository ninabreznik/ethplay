{
  "address": "0x2299a91cc0bffd8c7f71349da8ab03527b79724f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LandSale_v2",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-24\n*/\n\npragma solidity ^0.5.2;\npragma experimental ABIEncoderV2;\n\n// File: @axie/contract-library/contracts/access/HasAdmin.sol\n\ncontract HasAdmin {\n  event AdminChanged(address indexed _oldAdmin, address indexed _newAdmin);\n  event AdminRemoved(address indexed _oldAdmin);\n\n  address public admin;\n\n  modifier onlyAdmin {\n    require(msg.sender == admin);\n    _;\n  }\n\n  constructor() internal {\n    admin = msg.sender;\n    emit AdminChanged(address(0), admin);\n  }\n\n  function changeAdmin(address _newAdmin) external onlyAdmin {\n    require(_newAdmin != address(0));\n    emit AdminChanged(admin, _newAdmin);\n    admin = _newAdmin;\n  }\n\n  function removeAdmin() external onlyAdmin {\n    emit AdminRemoved(admin);\n    admin = address(0);\n  }\n}\n\n// File: @axie/contract-library/contracts/lifecycle/Pausable.sol\n\ncontract Pausable is HasAdmin {\n  event Paused();\n  event Unpaused();\n\n  bool public paused;\n\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  function pause() public onlyAdmin whenNotPaused {\n    paused = true;\n    emit Paused();\n  }\n\n  function unpause() public onlyAdmin whenPaused {\n    paused = false;\n    emit Unpaused();\n  }\n}\n\n// File: @axie/contract-library/contracts/math/Math.sol\n\nlibrary Math {\n  function max(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    return a >= b ? a : b;\n  }\n\n  function min(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    return a < b ? a : b;\n  }\n}\n\n// File: @axie/contract-library/contracts/token/erc20/IERC20.sol\n\ninterface IERC20 {\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n  function totalSupply() external view returns (uint256 _supply);\n  function balanceOf(address _owner) external view returns (uint256 _balance);\n\n  function approve(address _spender, uint256 _value) external returns (bool _success);\n  function allowance(address _owner, address _spender) external view returns (uint256 _value);\n\n  function transfer(address _to, uint256 _value) external returns (bool _success);\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool _success);\n}\n\n// File: @axie/contract-library/contracts/ownership/Withdrawable.sol\n\ncontract Withdrawable is HasAdmin {\n  function withdrawEther() external onlyAdmin {\n    msg.sender.transfer(address(this).balance);\n  }\n\n  function withdrawToken(IERC20 _token) external onlyAdmin {\n    require(_token.transfer(msg.sender, _token.balanceOf(address(this))));\n  }\n}\n\n// File: @axie/contract-library/contracts/token/erc20/IERC20Receiver.sol\n\ninterface IERC20Receiver {\n  function receiveApproval(\n    address _from,\n    uint256 _value,\n    address _tokenAddress,\n    bytes calldata _data\n  )\n    external;\n}\n\n// File: @axie/contract-library/contracts/token/swap/IKyber.sol\n\ninterface IKyber {\n  function getExpectedRate(\n    address _src,\n    address _dest,\n    uint256 _srcAmount\n  )\n    external\n    view\n    returns (\n      uint256 _expectedRate,\n      uint256 _slippageRate\n    );\n\n  function trade(\n    address _src,\n    uint256 _maxSrcAmount,\n    address _dest,\n    address payable _receiver,\n    uint256 _maxDestAmount,\n    uint256 _minConversionRate,\n    address _wallet\n  )\n    external\n    payable\n    returns (uint256 _destAmount);\n}\n\n// File: @axie/contract-library/contracts/math/SafeMath.sol\n\nlibrary SafeMath {\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    require(c >= a);\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    require(b <= a);\n    return a - b;\n  }\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    require(c / a == b);\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Since Solidity automatically asserts when dividing by 0,\n    // but we only need it to revert.\n    require(b > 0);\n    return a / b;\n  }\n\n  function mod(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Same reason as `div`.\n    require(b > 0);\n    return a % b;\n  }\n\n  function ceilingDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    return add(div(a, b), mod(a, b) > 0 ? 1 : 0);\n  }\n\n  function subU64(uint64 a, uint64 b) internal pure returns (uint64 c) {\n    require(b <= a);\n    return a - b;\n  }\n\n  function addU8(uint8 a, uint8 b) internal pure returns (uint8 c) {\n    c = a + b;\n    require(c >= a);\n  }\n}\n\n// File: @axie/contract-library/contracts/token/erc20/IERC20Detailed.sol\n\ninterface IERC20Detailed {\n  function name() external view returns (string memory _name);\n  function symbol() external view returns (string memory _symbol);\n  function decimals() external view returns (uint8 _decimals);\n}\n\n// File: @axie/contract-library/contracts/token/swap/KyberTokenDecimals.sol\n\ncontract KyberTokenDecimals {\n  using SafeMath for uint256;\n\n  address public ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  function _getTokenDecimals(address _token) internal view returns (uint8 _decimals) {\n    return _token != ethAddress ? IERC20Detailed(_token).decimals() : 18;\n  }\n\n  function _fixTokenDecimals(\n    address _src,\n    address _dest,\n    uint256 _unfixedDestAmount,\n    bool _ceiling\n  )\n    internal\n    view\n    returns (uint256 _destTokenAmount)\n  {\n    uint256 _unfixedDecimals = _getTokenDecimals(_src) + 18; // Kyber by default returns rates with 18 decimals.\n    uint256 _decimals = _getTokenDecimals(_dest);\n\n    if (_unfixedDecimals > _decimals) {\n      // Divide token amount by 10^(_unfixedDecimals - _decimals) to reduce decimals.\n      if (_ceiling) {\n        return _unfixedDestAmount.ceilingDiv(10 ** (_unfixedDecimals - _decimals));\n      } else {\n        return _unfixedDestAmount.div(10 ** (_unfixedDecimals - _decimals));\n      }\n    } else {\n      // Multiply token amount with 10^(_decimals - _unfixedDecimals) to increase decimals.\n      return _unfixedDestAmount.mul(10 ** (_decimals - _unfixedDecimals));\n    }\n  }\n}\n\n// File: @axie/contract-library/contracts/token/swap/KyberAdapter.sol\n\ncontract KyberAdapter is KyberTokenDecimals {\n  IKyber public kyber = IKyber(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\n\n  function () external payable {\n    // Commented out since Kyber sent Ether from their main contract,\n    // The contract we have here is their proxy contract.\n    // require(msg.sender == address(kyber));\n  }\n\n  function _getConversionRate(\n    address _src,\n    uint256 _srcAmount,\n    address _dest\n  )\n    internal\n    view\n    returns (\n      uint256 _expectedRate,\n      uint256 _slippageRate\n    )\n  {\n    return kyber.getExpectedRate(_src, _dest, _srcAmount);\n  }\n\n  function _convertToken(\n    address _src,\n    uint256 _srcAmount,\n    address _dest\n  )\n    internal\n    view\n    returns (\n      uint256 _expectedAmount,\n      uint256 _slippageAmount\n    )\n  {\n    (uint256 _expectedRate, uint256 _slippageRate) = _getConversionRate(_src, _srcAmount, _dest);\n\n    return (\n      _fixTokenDecimals(_src, _dest, _srcAmount.mul(_expectedRate), false),\n      _fixTokenDecimals(_src, _dest, _srcAmount.mul(_slippageRate), false)\n    );\n  }\n\n  function _getTokenBalance(address _token, address _account) internal view returns (uint256 _balance) {\n    return _token != ethAddress ? IERC20(_token).balanceOf(_account) : _account.balance;\n  }\n\n  function _swapToken(\n    address _src,\n    uint256 _maxSrcAmount,\n    address _dest,\n    uint256 _maxDestAmount,\n    uint256 _minConversionRate,\n    address payable _initiator,\n    address payable _receiver\n  )\n    internal\n    returns (\n      uint256 _srcAmount,\n      uint256 _destAmount\n    )\n  {\n    require(_src != _dest);\n    require(_src == ethAddress ? msg.value >= _maxSrcAmount : msg.value == 0);\n\n    // Prepare for handling back the change if there is any.\n    uint256 _balanceBefore = _getTokenBalance(_src, address(this));\n\n    if (_src != ethAddress) {\n      require(IERC20(_src).transferFrom(_initiator, address(this), _maxSrcAmount));\n      require(IERC20(_src).approve(address(kyber), _maxSrcAmount));\n    } else {\n      // Since we are going to transfer the source amount to Kyber.\n      _balanceBefore = _balanceBefore.sub(_maxSrcAmount);\n    }\n\n    _destAmount = kyber.trade.value(\n      _src == ethAddress ? _maxSrcAmount : 0\n    )(\n      _src,\n      _maxSrcAmount,\n      _dest,\n      _receiver,\n      _maxDestAmount,\n      _minConversionRate,\n      address(0)\n    );\n\n    uint256 _balanceAfter = _getTokenBalance(_src, address(this));\n    _srcAmount = _maxSrcAmount;\n\n    // Handle back the change, if there is any, to the message sender.\n    if (_balanceAfter > _balanceBefore) {\n      uint256 _change = _balanceAfter - _balanceBefore;\n      _srcAmount = _srcAmount.sub(_change);\n\n      if (_src != ethAddress) {\n        require(IERC20(_src).transfer(_initiator, _change));\n      } else {\n        _initiator.transfer(_change);\n      }\n    }\n  }\n}\n\n// File: @axie/contract-library/contracts/token/swap/KyberCustomTokenRates.sol\n\ncontract KyberCustomTokenRates is HasAdmin, KyberAdapter {\n  struct Rate {\n    address quote;\n    uint256 value;\n  }\n\n  event CustomTokenRateUpdated(\n    address indexed _tokenAddress,\n    address indexed _quoteTokenAddress,\n    uint256 _rate\n  );\n\n  mapping (address => Rate) public customTokenRate;\n\n  function _hasCustomTokenRate(address _tokenAddress) internal view returns (bool _correct) {\n    return customTokenRate[_tokenAddress].value > 0;\n  }\n\n  function _setCustomTokenRate(address _tokenAddress, address _quoteTokenAddress, uint256 _rate) internal {\n    require(_rate > 0);\n    customTokenRate[_tokenAddress] = Rate({ quote: _quoteTokenAddress, value: _rate });\n    emit CustomTokenRateUpdated(_tokenAddress, _quoteTokenAddress, _rate);\n  }\n\n  // solium-disable-next-line security/no-assign-params\n  function _getConversionRate(\n    address _src,\n    uint256 _srcAmount,\n    address _dest\n  )\n    internal\n    view\n    returns (\n      uint256 _expectedRate,\n      uint256 _slippageRate\n    )\n  {\n    uint256 _numerator = 1;\n    uint256 _denominator = 1;\n\n    if (_hasCustomTokenRate(_src)) {\n      Rate storage _rate = customTokenRate[_src];\n\n      _src = _rate.quote;\n      _srcAmount = _srcAmount.mul(_rate.value).div(10**18);\n\n      _numerator = _rate.value;\n      _denominator = 10**18;\n    }\n\n    if (_hasCustomTokenRate(_dest)) {\n      Rate storage _rate = customTokenRate[_dest];\n\n      _dest = _rate.quote;\n\n      // solium-disable-next-line whitespace\n      if (_numerator == 1) { _numerator = 10**18; }\n      _denominator = _rate.value;\n    }\n\n    if (_src != _dest) {\n      (_expectedRate, _slippageRate) = super._getConversionRate(_src, _srcAmount, _dest);\n    } else {\n      _expectedRate = _slippageRate = 10**18;\n    }\n\n    return (\n      _expectedRate.mul(_numerator).div(_denominator),\n      _slippageRate.mul(_numerator).div(_denominator)\n    );\n  }\n\n  function _swapToken(\n    address _src,\n    uint256 _maxSrcAmount,\n    address _dest,\n    uint256 _maxDestAmount,\n    uint256 _minConversionRate,\n    address payable _initiator,\n    address payable _receiver\n  )\n    internal\n    returns (\n      uint256 _srcAmount,\n      uint256 _destAmount\n    )\n  {\n    if (_hasCustomTokenRate(_src) || _hasCustomTokenRate(_dest)) {\n      require(_src == ethAddress ? msg.value >= _maxSrcAmount : msg.value == 0);\n      require(_receiver == address(this));\n\n      (uint256 _expectedRate, ) = _getConversionRate(_src, _srcAmount, _dest);\n      require(_expectedRate >= _minConversionRate);\n\n      _srcAmount = _maxSrcAmount;\n      _destAmount = _fixTokenDecimals(_src, _dest, _srcAmount.mul(_expectedRate), false);\n\n      if (_destAmount > _maxDestAmount) {\n        _destAmount = _maxDestAmount;\n        _srcAmount = _fixTokenDecimals(_dest, _src, _destAmount.mul(10**36).ceilingDiv(_expectedRate), true);\n\n        // To avoid rounding error.\n        if (_srcAmount > _maxSrcAmount) {\n          _srcAmount = _maxSrcAmount;\n        }\n      }\n\n      if (_src != ethAddress) {\n        require(IERC20(_src).transferFrom(_initiator, address(this), _srcAmount));\n      } else if (msg.value > _srcAmount) {\n        _initiator.transfer(msg.value - _srcAmount);\n      }\n\n      return (_srcAmount, _destAmount);\n    }\n\n    return super._swapToken(\n      _src,\n      _maxSrcAmount,\n      _dest,\n      _maxDestAmount,\n      _minConversionRate,\n      _initiator,\n      _receiver\n    );\n  }\n}\n\n// File: @axie/contract-library/contracts/util/AddressUtils.sol\n\nlibrary AddressUtils {\n  function toPayable(address _address) internal pure returns (address payable _payable) {\n    return address(uint160(_address));\n  }\n\n  function isContract(address _address) internal view returns (bool _correct) {\n    uint256 _size;\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { _size := extcodesize(_address) }\n    return _size > 0;\n  }\n}\n\n// File: contracts/land/sale/LandSale.sol\n\ncontract LandSale_v2 is Pausable, Withdrawable, KyberCustomTokenRates, IERC20Receiver {\n  using AddressUtils for address;\n\n  enum ChestType {\n    Savannah,\n    Forest,\n    Arctic,\n    Mystic\n  }\n\n  event ChestPurchased(\n    ChestType indexed _chestType,\n    uint256 _chestAmount,\n    address indexed _tokenAddress,\n    uint256 _tokenAmount,\n    uint256 _totalPrice,\n    uint256 _lunaCashbackAmount,\n    address _buyer, // Ran out of indexed fields.\n    address indexed _owner\n  );\n\n  event ReferralRewarded(\n    address indexed _referrer,\n    uint256 _referralReward\n  );\n\n  event ReferralPercentageUpdated(\n    address indexed _referrer,\n    uint256 _percentage\n  );\n\n  address public daiAddress = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n  address public loomAddress = 0xA4e8C3Ec456107eA67d3075bF9e3DF3A75823DB0;\n\n  uint256 public startedAt = 1548165600; // Tuesday, January 22, 2019 2:00:00 PM GMT+00:00\n  uint256 public endedAt = 1563804000; // Monday, July 22, 2019 2:00:00 PM GMT+00:00\n\n  mapping (uint8 => uint256) public chestCap;\n\n  uint256 public savannahChestPrice = 0.05 ether;\n  uint256 public forestChestPrice   = 0.16 ether;\n  uint256 public arcticChestPrice   = 0.45 ether;\n  uint256 public mysticChestPrice   = 1.00 ether;\n\n  uint256 public initialDiscountPercentage = 1000; // 10%.\n  uint256 public initialDiscountDays = 10 days;\n\n  uint256 public cashbackPercentage = 1000; // 10%.\n\n  uint256 public defaultReferralPercentage = 1000; // 10%.\n  mapping (address => uint256) public referralPercentage;\n\n  IERC20 public lunaContract;\n  address public lunaBankAddress;\n\n  modifier whenInSale {\n    // solium-disable-next-line security/no-block-members\n    require(now >= startedAt && now <= endedAt);\n    _;\n  }\n\n  constructor(IERC20 _lunaContract, address _lunaBankAddress) public {\n    // 1 LUNA = 1/10 DAI (rate has 18 decimals).\n    _setCustomTokenRate(address(_lunaContract), daiAddress, 10**17);\n\n    lunaContract = _lunaContract;\n    lunaBankAddress = _lunaBankAddress;\n\n    setChestCap([uint256(5349), 5359, 4171, 2338]);\n  }\n\n  function getPrice(\n    ChestType _chestType,\n    uint256 _chestAmount,\n    address _tokenAddress\n  )\n    external\n    view\n    returns (\n      uint256 _tokenAmount,\n      uint256 _minConversionRate\n    )\n  {\n    uint256 _totalPrice = _getEthPrice(_chestType, _chestAmount, _tokenAddress);\n\n    if (_tokenAddress != ethAddress) {\n      (_tokenAmount, ) = _convertToken(ethAddress, _totalPrice, _tokenAddress);\n      (, _minConversionRate) = _getConversionRate(_tokenAddress, _tokenAmount, ethAddress);\n      _tokenAmount = _totalPrice.mul(10**36).ceilingDiv(_minConversionRate);\n      _tokenAmount = _fixTokenDecimals(ethAddress, _tokenAddress, _tokenAmount, true);\n    } else {\n      _tokenAmount = _totalPrice;\n    }\n  }\n\n  function purchase(\n    ChestType _chestType,\n    uint256 _chestAmount,\n    address _tokenAddress,\n    uint256 _maxTokenAmount,\n    uint256 _minConversionRate,\n    address payable _referrer\n  )\n    external\n    payable\n    whenInSale\n    whenNotPaused\n  {\n    _purchase(\n      _chestType,\n      _chestAmount,\n      _tokenAddress,\n      _maxTokenAmount,\n      _minConversionRate,\n      msg.sender,\n      msg.sender,\n      _referrer\n    );\n  }\n\n  function purchaseFor(\n    ChestType _chestType,\n    uint256 _chestAmount,\n    address _tokenAddress,\n    uint256 _maxTokenAmount,\n    uint256 _minConversionRate,\n    address _owner\n  )\n    external\n    payable\n    whenInSale\n    whenNotPaused\n  {\n    _purchase(\n      _chestType,\n      _chestAmount,\n      _tokenAddress,\n      _maxTokenAmount,\n      _minConversionRate,\n      msg.sender,\n      _owner,\n      msg.sender\n    );\n  }\n\n  function receiveApproval(\n    address _from,\n    uint256 _value,\n    address _tokenAddress,\n    bytes calldata /* _data */\n  )\n    external\n    whenInSale\n    whenNotPaused\n  {\n    require(msg.sender == _tokenAddress);\n\n    uint256 _action;\n    ChestType _chestType;\n    uint256 _chestAmount;\n    uint256 _minConversionRate;\n    address payable _referrerOrOwner;\n\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      _action := calldataload(0xa4)\n      _chestType := calldataload(0xc4)\n      _chestAmount := calldataload(0xe4)\n      _minConversionRate := calldataload(0x104)\n      _referrerOrOwner := calldataload(0x124)\n    }\n\n    address payable _buyer;\n    address _owner;\n    address payable _referrer;\n\n    if (_action == 0) { // Purchase.\n      _buyer = _from.toPayable();\n      _owner = _from;\n      _referrer = _referrerOrOwner;\n    } else if (_action == 1) { // Purchase for.\n      _buyer = _from.toPayable();\n      _owner = _referrerOrOwner;\n      _referrer = _from.toPayable();\n    } else {\n      revert();\n    }\n\n    _purchase(\n      _chestType,\n      _chestAmount,\n      _tokenAddress,\n      _value,\n      _minConversionRate,\n      _buyer,\n      _owner,\n      _referrer\n    );\n  }\n\n  function setReferralPercentages(address[] calldata _referrers, uint256[] calldata _percentage) external onlyAdmin {\n    for (uint256 i = 0; i < _referrers.length; i++) {\n      referralPercentage[_referrers[i]] = _percentage[i];\n      emit ReferralPercentageUpdated(_referrers[i], _percentage[i]);\n    }\n  }\n\n  function setCustomTokenRates(address[] memory _tokenAddresses, Rate[] memory _rates) public onlyAdmin {\n    for (uint256 i = 0; i < _tokenAddresses.length; i++) {\n      _setCustomTokenRate(_tokenAddresses[i], _rates[i].quote, _rates[i].value);\n    }\n  }\n\n  function setChestCap(uint256[4] memory _chestCap) public onlyAdmin {\n    for (uint8 _chestType = 0; _chestType < 4; _chestType++) {\n      chestCap[_chestType] = _chestCap[_chestType];\n    }\n  }\n\n  function _getPresentPercentage() internal view returns (uint256 _percentage) {\n    // solium-disable-next-line security/no-block-members\n    uint256 _elapsedDays = (now - startedAt).div(1 days).mul(1 days);\n\n    return uint256(10000) // 100%.\n      .sub(initialDiscountPercentage)\n      .add(\n        initialDiscountPercentage\n          .mul(Math.min(_elapsedDays, initialDiscountDays))\n          .div(initialDiscountDays)\n      );\n  }\n\n  function _getEthPrice(\n    ChestType _chestType,\n    uint256 _chestAmount,\n    address _tokenAddress\n  )\n    internal\n    view\n    returns (uint256 _price)\n  {\n    // solium-disable-next-line indentation\n         if (_chestType == ChestType.Savannah) { _price = savannahChestPrice; } // solium-disable-line whitespace\n    else if (_chestType == ChestType.Forest  ) { _price = forestChestPrice;   } // solium-disable-line whitespace, lbrace\n    else if (_chestType == ChestType.Arctic  ) { _price = arcticChestPrice;   } // solium-disable-line whitespace, lbrace\n    else if (_chestType == ChestType.Mystic  ) { _price = mysticChestPrice;   } // solium-disable-line whitespace, lbrace\n    else { revert(); } // solium-disable-line whitespace, lbrace\n\n    _price = _price\n      .mul(_getPresentPercentage())\n      .div(10000)\n      .mul(_chestAmount);\n\n    if (_tokenAddress == address(lunaContract)) {\n      _price = _price\n        .mul(uint256(10000).sub(cashbackPercentage))\n        .ceilingDiv(10000);\n    }\n  }\n\n  function _getLunaCashbackAmount(\n    uint256 _ethPrice,\n    address _tokenAddress\n  )\n    internal\n    view\n    returns (uint256 _lunaCashbackAmount)\n  {\n    if (_tokenAddress != address(lunaContract)) {\n      (uint256 _lunaPrice, ) = _convertToken(ethAddress, _ethPrice, address(lunaContract));\n\n      return _lunaPrice\n        .mul(cashbackPercentage)\n        .div(uint256(10000));\n    }\n  }\n\n  function _getReferralPercentage(address _referrer, address _owner) internal view returns (uint256 _percentage) {\n    return _referrer != _owner && _referrer != address(0)\n      ? Math.max(referralPercentage[_referrer], defaultReferralPercentage)\n      : 0;\n  }\n\n  function _purchase(\n    ChestType _chestType,\n    uint256 _chestAmount,\n    address _tokenAddress,\n    uint256 _maxTokenAmount,\n    uint256 _minConversionRate,\n    address payable _buyer,\n    address _owner,\n    address payable _referrer\n  )\n    internal\n  {\n    require(_chestAmount <= chestCap[uint8(_chestType)]);\n    require(_tokenAddress == ethAddress ? msg.value >= _maxTokenAmount : msg.value == 0);\n\n    uint256 _totalPrice = _getEthPrice(_chestType, _chestAmount, _tokenAddress);\n    uint256 _lunaCashbackAmount = _getLunaCashbackAmount(_totalPrice, _tokenAddress);\n\n    uint256 _tokenAmount;\n    uint256 _ethAmount;\n\n    if (_tokenAddress != ethAddress) {\n      (_tokenAmount, _ethAmount) = _swapToken(\n        _tokenAddress,\n        _maxTokenAmount,\n        ethAddress,\n        _totalPrice,\n        _minConversionRate,\n        _buyer,\n        address(this)\n      );\n    } else {\n      // Check if the buyer allowed to spend that much ETH.\n      require(_maxTokenAmount >= _totalPrice);\n\n      // Require minimum conversion rate to be 0.\n      require(_minConversionRate == 0);\n\n      _tokenAmount = _totalPrice;\n      _ethAmount = msg.value;\n    }\n\n    // Check if we received enough payment.\n    require(_ethAmount >= _totalPrice);\n\n    // Send back the ETH change, if there is any.\n    if (_ethAmount > _totalPrice) {\n      _buyer.transfer(_ethAmount - _totalPrice);\n    }\n\n    chestCap[uint8(_chestType)] -= _chestAmount;\n\n    emit ChestPurchased(\n      _chestType,\n      _chestAmount,\n      _tokenAddress,\n      _tokenAmount,\n      _totalPrice,\n      _lunaCashbackAmount,\n      _buyer,\n      _owner\n    );\n\n    if (_tokenAddress != address(lunaContract)) {\n      // Send LUNA cashback.\n      require(lunaContract.transferFrom(lunaBankAddress, _owner, _lunaCashbackAmount));\n    }\n\n    if (!_hasCustomTokenRate(_tokenAddress)) {\n      uint256 _referralReward = _totalPrice\n        .mul(_getReferralPercentage(_referrer, _owner))\n        .div(10000);\n\n      // If the referral reward cannot be sent because of a referrer's fault, set it to 0.\n      // solium-disable-next-line security/no-send\n      if (_referralReward > 0 && !_referrer.send(_referralReward)) {\n        _referralReward = 0;\n      }\n\n      if (_referralReward > 0) {\n        emit ReferralRewarded(_referrer, _referralReward);\n      }\n    }\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"chestCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialDiscountPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cashbackPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chestType\",\"type\":\"uint8\"},{\"name\":\"_chestAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_maxTokenAmount\",\"type\":\"uint256\"},{\"name\":\"_minConversionRate\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"purchaseFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chestCap\",\"type\":\"uint256[4]\"}],\"name\":\"setChestCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loomAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lunaBankAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultReferralPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrers\",\"type\":\"address[]\"},{\"name\":\"_percentage\",\"type\":\"uint256[]\"}],\"name\":\"setReferralPercentages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"savannahChestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialDiscountDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chestType\",\"type\":\"uint8\"},{\"name\":\"_chestAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_maxTokenAmount\",\"type\":\"uint256\"},{\"name\":\"_minConversionRate\",\"type\":\"uint256\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"customTokenRate\",\"outputs\":[{\"name\":\"quote\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mysticChestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"components\":[{\"name\":\"quote\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_rates\",\"type\":\"tuple[]\"}],\"name\":\"setCustomTokenRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyber\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_chestType\",\"type\":\"uint8\"},{\"name\":\"_chestAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_minConversionRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lunaContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arcticChestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forestChestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_lunaContract\",\"type\":\"address\"},{\"name\":\"_lunaBankAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_chestType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_chestAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lunaCashbackAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ChestPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_referralReward\",\"type\":\"uint256\"}],\"name\":\"ReferralRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"ReferralPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_quoteTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"CustomTokenRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"}]",
  "bytecode": "608060405260018054600160a060020a031990811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1790915560028054821673818e6fecd516ecc3849daf6845e3ec868087b7551790556004805482167389d24a6b4ccb1b6faa2625fe562bdd9a232603591790556005805490911673a4e8c3ec456107ea67d3075bf9e3df3a75823db0179055635c4721e0600655635d35c16060075566b1a2bc2ec500006009556702386f26fc100000600a5567063eb89da4ed0000600b55670de0b6b3a7640000600c556103e8600d819055620d2f00600e55600f819055601055348015620000eb57600080fd5b5060405160408062002aaa83398101806040526200010d91908101906200031c565b60008054600160a060020a0319163317808255604051600160a060020a039190911691907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f908290a360045462000181908390600160a060020a031667016345785d8a0000640100000000620001f6810204565b60128054600160a060020a03808516600160a060020a0319928316179092556013805492841692909116919091179055604080516080810182526114e581526114ef602082015261104b918101919091526109226060820152620001ee9064010000000062000296810204565b5050620003a4565b600081116200020457600080fd5b604080518082018252600160a060020a038481168083526020808401868152888416600081815260039093529186902094518554600160a060020a0319169416939093178455915160019093019290925591519091907f490cff0bf8cd6cf7f35e4cf75bccb7ceaacf4468027202ba40fc8cefb384eace90620002899085906200036c565b60405180910390a3505050565b600054600160a060020a03163314620002ae57600080fd5b60005b60048160ff161015620002f5578160ff821660048110620002ce57fe5b6020908102919091015160ff831660009081526008909252604090912055600101620002b1565b5050565b600062000307825162000382565b9392505050565b600062000307825162000397565b600080604083850312156200033057600080fd5b60006200033e85856200030e565b92505060206200035185828601620002f9565b9150509250929050565b620003668162000394565b82525050565b602081016200037c82846200035b565b92915050565b6000600160a060020a0382166200037c565b90565b60006200037c8262000382565b6126f680620003b46000396000f3fe6080604052600436106101fd5760003560e060020a900480638456cb59116101115780639a202d47116100a4578063cb544bb211610073578063cb544bb214610518578063e2cdc1ee14610538578063f21f537d1461054d578063f851a44014610562578063f8dc022114610577576101fd565b80639a202d471461049e578063a2d10ba5146104b3578063a34cd51b146104d5578063c9435f0514610503576101fd565b80638af94048116100e05780638af94048146104295780638f2839701461043e5780638f4ffcb11461045e57806391ecdd231461047e576101fd565b80638456cb59146103b3578063846a3361146103c857806387c53d00146103db5780638947606914610409576101fd565b80633f4ba83a116101945780637111903011610163578063711190301461033f5780637362377b14610354578063772bf29b1461036957806377da37b3146103895780637824c8121461039e576101fd565b80633f4ba83a146102de57806341398b15146102f35780634b545945146103085780635c975abb1461031d576101fd565b80632c387275116101d05780632c3872751461027257806335f4c7ff1461029457806337179db8146102b45780633d6a71e4146102c9576101fd565b8063101dec40146101ff57806311c9248f146102355780631c9cef041461024a57806321bbda081461025f575b005b34801561020b57600080fd5b5061021f61021a366004612436565b61058c565b60405161022c91906125a3565b60405180910390f35b34801561024157600080fd5b5061021f61059e565b34801561025657600080fd5b5061021f6105a4565b6101fd61026d366004612361565b6105aa565b34801561027e57600080fd5b506102876105f8565b60405161022c91906124a5565b3480156102a057600080fd5b506101fd6102af3660046122ba565b610607565b3480156102c057600080fd5b50610287610666565b3480156102d557600080fd5b5061021f610675565b3480156102ea57600080fd5b506101fd61067b565b3480156102ff57600080fd5b506102876106f1565b34801561031457600080fd5b50610287610700565b34801561032957600080fd5b5061033261070f565b60405161022c9190612587565b34801561034b57600080fd5b5061021f61071f565b34801561036057600080fd5b506101fd610725565b34801561037557600080fd5b506101fd6103843660046121e1565b61076c565b34801561039557600080fd5b5061021f610855565b3480156103aa57600080fd5b5061021f61085b565b3480156103bf57600080fd5b506101fd610861565b6101fd6103d6366004612361565b6108dc565b3480156103e757600080fd5b506103fb6103f6366004612145565b610922565b60405161022c929190612511565b34801561041557600080fd5b506101fd6104243660046122f6565b610947565b34801561043557600080fd5b5061021f610a7a565b34801561044a57600080fd5b506101fd610459366004612145565b610a80565b34801561046a57600080fd5b506101fd610479366004612163565b610b14565b34801561048a57600080fd5b506101fd610499366004612251565b610bf7565b3480156104aa57600080fd5b506101fd610c7c565b3480156104bf57600080fd5b506104c8610ce8565b60405161022c9190612595565b3480156104e157600080fd5b506104f56104f0366004612314565b610cf7565b60405161022c9291906125b1565b34801561050f57600080fd5b506104c8610db8565b34801561052457600080fd5b5061021f610533366004612145565b610dc7565b34801561054457600080fd5b5061021f610dd9565b34801561055957600080fd5b5061021f610ddf565b34801561056e57600080fd5b50610287610de5565b34801561058357600080fd5b5061021f610df4565b60086020526000908152604090205481565b600d5481565b600f5481565b60065442101580156105be57506007544211155b15156105c957600080fd5b60005460a060020a900460ff16156105e057600080fd5b6105f08686868686338733610dfa565b505050505050565b600454600160a060020a031681565b600054600160a060020a0316331461061e57600080fd5b60005b60048160ff161015610662578160ff82166004811061063c57fe5b6020908102919091015160ff831660009081526008909252604090912055600101610621565b5050565b600554600160a060020a031681565b60075481565b600054600160a060020a0316331461069257600080fd5b60005460a060020a900460ff1615156106aa57600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d169339190a1565b600154600160a060020a031681565b601354600160a060020a031681565b60005460a060020a900460ff1681565b60105481565b600054600160a060020a0316331461073c57600080fd5b6040513390303180156108fc02916000818181858888f19350505050158015610769573d6000803e3d6000fd5b50565b600054600160a060020a0316331461078357600080fd5b60005b8381101561084e5782828281811061079a57fe5b905060200201356011600087878581811015156107b357fe5b60209081029290920135600160a060020a0316835250810191909152604001600020558484828181106107e257fe5b90506020020135600160a060020a0316600160a060020a03167f60ad3b7a12751798871fd3f7ecd1572f445ce2fabab4e2672c9ca0e78fc6ba82848484818110151561082a57fe5b9050602002013560405161083e91906125a3565b60405180910390a2600101610786565b5050505050565b60095481565b600e5481565b600054600160a060020a0316331461087857600080fd5b60005460a060020a900460ff161561088f57600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e7529190a1565b60065442101580156108f057506007544211155b15156108fb57600080fd5b60005460a060020a900460ff161561091257600080fd5b6105f08686868686333388610dfa565b60036020526000908152604090208054600190910154600160a060020a039091169082565b600054600160a060020a0316331461095e57600080fd5b6040517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0382169063a9059cbb90339083906370a08231906109ad9030906004016124a5565b60206040518083038186803b1580156109c557600080fd5b505afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109fd91908101906123e8565b6040518363ffffffff1660e060020a028152600401610a1d9291906124db565b602060405180830381600087803b158015610a3757600080fd5b505af1158015610a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a6f91908101906122d8565b151561076957600080fd5b600c5481565b600054600160a060020a03163314610a9757600080fd5b600160a060020a0381161515610aac57600080fd5b60008054604051600160a060020a03808516939216917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6006544210158015610b2857506007544211155b1515610b3357600080fd5b60005460a060020a900460ff1615610b4a57600080fd5b33600160a060020a03841614610b5f57600080fd5b60a43560c43560e435610104356101243560008080871515610b9a57610b8d8d600160a060020a031661113d565b92508c9150839050610bd8565b8760011415610bd357610bb58d600160a060020a031661113d565b9250839150610bcc8d600160a060020a031661113d565b9050610bd8565b600080fd5b610be887878d8f89888888610dfa565b50505050505050505050505050565b600054600160a060020a03163314610c0e57600080fd5b60005b8251811015610c7757610c6f8382815181101515610c2b57fe5b906020019060200201518383815181101515610c4357fe5b60209081029091010151518451859085908110610c5c57fe5b9060200190602002015160200151611140565b600101610c11565b505050565b600054600160a060020a03163314610c9357600080fd5b60008054604051600160a060020a03909116917fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f91a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600254600160a060020a031681565b6000806000610d078686866111ea565b600154909150600160a060020a03858116911614610dab57600154610d3690600160a060020a031682866112d9565b50600154909350610d539085908590600160a060020a031661132e565b9250610d86905082610d7a836ec097ce7bc90715b34b9f100000000063ffffffff61144216565b9063ffffffff61147416565b60018054919450610da491600160a060020a031690869086906114a6565b9250610daf565b8092505b50935093915050565b601254600160a060020a031681565b60116020526000908152604090205481565b600b5481565b60065481565b600054600160a060020a031681565b600a5481565b60086000896003811115610e0a57fe5b60ff168152602081019190915260400160002054871115610e2a57600080fd5b600154600160a060020a03878116911614610e46573415610e4b565b843410155b1515610e5657600080fd5b6000610e638989896111ea565b90506000610e718289611528565b6001549091506000908190600160a060020a038b8116911614610eb557600154610eab908b908b90600160a060020a0316878c8c30611587565b9092509050610ed3565b83891015610ec257600080fd5b8715610ecd57600080fd5b50829050345b83811015610ee057600080fd5b83811115610f2157604051600160a060020a0388169085830380156108fc02916000818181858888f19350505050158015610f1f573d6000803e3d6000fd5b505b8a600860008e6003811115610f3257fe5b60ff16815260208101919091526040016000208054919091039055600160a060020a03808716908b168d6003811115610f6757fe5b7f8d3eed3c141dc3f6b103a145f67cf590db4214dd0aef765580d273fd0e669b808e8689898e604051610f9e9594939291906125bf565b60405180910390a4601254600160a060020a038b8116911614611069576012546013546040517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03928316926323b872dd9261100c929116908a9088906004016124f6565b602060405180830381600087803b15801561102657600080fd5b505af115801561103a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061105e91908101906122d8565b151561106957600080fd5b6110728a61178f565b151561112f5760006110a661271061109a61108d898b6117ae565b889063ffffffff61144216565b9063ffffffff61180b16565b90506000811180156110da5750604051600160a060020a0387169082156108fc029083906000818181858888f19350505050155b156110e3575060005b6000811115610be85785600160a060020a03167fe02a129f98418d04669038a9874f706689ba7726c0c0e82c67319ec8ca9001ea8260405161112591906125a3565b60405180910390a2505b505050505050505050505050565b90565b6000811161114d57600080fd5b604080518082018252600160a060020a03848116808352602080840186815288841660008181526003909352918690209451855473ffffffffffffffffffffffffffffffffffffffff19169416939093178455915160019093019290925591519091907f490cff0bf8cd6cf7f35e4cf75bccb7ceaacf4468027202ba40fc8cefb384eace906111dd9085906125a3565b60405180910390a3505050565b6000808460038111156111f957fe5b1415611208575060095461125b565b600184600381111561121657fe5b14156112255750600a5461125b565b600284600381111561123357fe5b14156112425750600b5461125b565b600384600381111561125057fe5b1415610bd35750600c545b6112898361127d61271061109a61127061182c565b869063ffffffff61144216565b9063ffffffff61144216565b601254909150600160a060020a03838116911614156112d2576112cf612710610d7a6112c2600f546127106118a190919063ffffffff16565b849063ffffffff61144216565b90505b9392505050565b6000806000806112ea87878761132e565b909250905061130b8786611304898663ffffffff61144216565b60006114a6565b61132088876113048a8663ffffffff61144216565b935093505050935093915050565b60008060018061133d8761178f565b1561139a57600160a060020a0396871660009081526003602052604090208054600182015498169761138490670de0b6b3a76400009061109a908a9063ffffffff61144216565b965080600101549250670de0b6b3a76400009150505b6113a38561178f565b156113e357600160a060020a03948516600090815260036020526040902080549095169460018314156113dc57670de0b6b3a764000092505b6001015490505b600160a060020a038781169086161461140b576114018787876118b6565b909450925061141a565b670de0b6b3a764000092508293505b61142e8161109a868563ffffffff61144216565b6113208261109a868663ffffffff61144216565b60008215156114535750600061146e565b5081810281838281151561146357fe5b041461146e57600080fd5b92915050565b60006112d2611483848461180b565b600061148f8686611963565b1161149b57600061149e565b60015b60ff16611984565b6000806114b286611994565b60120160ff16905060006114c586611994565b60ff1690508082111561150b5783156114f6576114ed85828403600a0a63ffffffff61147416565b92505050611520565b6114ed85828403600a0a63ffffffff61180b16565b6114ed85838303600a0a63ffffffff61144216565b949350505050565b601254600090600160a060020a0383811691161461146e5760015460125460009161156191600160a060020a03918216918791166112d9565b50905061157f61271061109a600f548461144290919063ffffffff16565b91505061146e565b6000806115938961178f565b806115a257506115a28761178f565b1561176f57600154600160a060020a038a81169116146115c35734156115c8565b873410155b15156115d357600080fd5b600160a060020a03831630146115e857600080fd5b60006115f58a848a61132e565b5090508581101561160557600080fd5b88925061161d8a89611304868563ffffffff61144216565b91508682111561166757869150611659888b61165284610d7a876ec097ce7bc90715b34b9f100000000063ffffffff61144216565b60016114a6565b925088831115611667578892505b600154600160a060020a038b8116911614611727576040517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a038b16906323b872dd906116c5908890309088906004016124b3565b602060405180830381600087803b1580156116df57600080fd5b505af11580156116f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061171791908101906122d8565b151561172257600080fd5b611769565b8234111561176957604051600160a060020a038616903485900380156108fc02916000818181858888f19350505050158015611767573d6000803e3d6000fd5b505b50611783565b61177e89898989898989611a28565b915091505b97509795505050505050565b600160a060020a03166000908152600360205260408120600101541190565b600081600160a060020a031683600160a060020a0316141580156117da5750600160a060020a03831615155b6117e55760006112d2565b600160a060020a0383166000908152601160205260409020546010546112d29190611ddd565b600080821161181957600080fd5b818381151561182457fe5b049392505050565b6000806118506201518061127d62015180600654420361180b90919063ffffffff16565b905061189b611879600e5461109a61186a85600e54611df4565b600d549063ffffffff61144216565b600d5461188f906127109063ffffffff6118a116565b9063ffffffff61198416565b91505090565b6000828211156118b057600080fd5b50900390565b6002546040517f809a9e550000000000000000000000000000000000000000000000000000000081526000918291600160a060020a039091169063809a9e5590611908908890879089906004016124f6565b604080518083038186803b15801561191f57600080fd5b505afa158015611933573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119579190810190612406565b91509150935093915050565b600080821161197157600080fd5b818381151561197c57fe5b069392505050565b8181018281101561146e57600080fd5b600154600090600160a060020a03838116911614156119b457601261146e565b81600160a060020a031663313ce5676040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156119f057600080fd5b505afa158015611a04573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061146e9190810190612454565b600080600160a060020a038981169088161415611a4457600080fd5b600154600160a060020a038a8116911614611a60573415611a65565b873410155b1515611a7057600080fd5b6000611a7c8a30611e03565b600154909150600160a060020a038b8116911614611be9576040517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a038b16906323b872dd90611add90889030908e906004016124b3565b602060405180830381600087803b158015611af757600080fd5b505af1158015611b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b2f91908101906122d8565b1515611b3a57600080fd5b6002546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038c81169263095ea7b392611b8792909116908d90600401612511565b602060405180830381600087803b158015611ba157600080fd5b505af1158015611bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bd991908101906122d8565b1515611be457600080fd5b611bfc565b611bf9818a63ffffffff6118a116565b90505b600254600154600160a060020a039182169163cb3c28c7918d8216911614611c25576000611c27565b8a5b8c8c8c898d8d60006040518963ffffffff1660e060020a028152600401611c54979695949392919061251f565b6020604051808303818588803b158015611c6d57600080fd5b505af1158015611c81573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250611ca691908101906123e8565b91506000611cb48b30611e03565b905089935081811115611dcf57818103611cd4858263ffffffff6118a116565b600154909550600160a060020a038d8116911614611d95576040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038d169063a9059cbb90611d33908a9085906004016124db565b602060405180830381600087803b158015611d4d57600080fd5b505af1158015611d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d8591908101906122d8565b1515611d9057600080fd5b611dcd565b604051600160a060020a0388169082156108fc029083906000818181858888f19350505050158015611dcb573d6000803e3d6000fd5b505b505b505097509795505050505050565b600081831015611ded57816112d2565b5090919050565b6000818310611ded57816112d2565b600154600090600160a060020a0384811691161415611e2c5781600160a060020a0316316112d2565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038416906370a0823190611e719085906004016124a5565b60206040518083038186803b158015611e8957600080fd5b505afa158015611e9d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112d291908101906123e8565b60006112d28235612671565b600080601f83018413611edf57600080fd5b50813567ffffffffffffffff811115611ef757600080fd5b602083019150836020820283011115611f0f57600080fd5b9250929050565b6000601f82018313611f2757600080fd5b8135611f3a611f3582612632565b61260b565b91508181835260208401935060208101905083856020840282011115611f5f57600080fd5b60005b83811015611f8b5781611f758882611ec1565b8452506020928301929190910190600101611f62565b5050505092915050565b6000601f82018313611fa657600080fd5b8135611fb4611f3582612632565b91508181835260208401935060208101905083856040840282011115611fd957600080fd5b60005b83811015611f8b5781611fef88826120ce565b84525060209092019160409190910190600101611fdc565b6000601f8201831361201857600080fd5b6004612026611f3582612653565b9150818385602084028201111561203c57600080fd5b60005b83811015611f8b57816120528882612115565b845250602092830192919091019060010161203f565b60006112d2825161267c565b600080601f8301841361208657600080fd5b50813567ffffffffffffffff81111561209e57600080fd5b602083019150836001820283011115611f0f57600080fd5b60006112d2823561268d565b60006112d28235612698565b6000604082840312156120e057600080fd5b6120ea604061260b565b905060006120f88484611ec1565b825250602061210984848301612115565b60208301525092915050565b60006112d2823561113d565b60006112d2825161113d565b60006112d282356126ab565b60006112d282516126ab565b60006020828403121561215757600080fd5b60006115208484611ec1565b60008060008060006080868803121561217b57600080fd5b60006121878888611ec1565b955050602061219888828901612115565b94505060406121a988828901611ec1565b935050606086013567ffffffffffffffff8111156121c657600080fd5b6121d288828901612074565b92509250509295509295909350565b600080600080604085870312156121f757600080fd5b843567ffffffffffffffff81111561220e57600080fd5b61221a87828801611ecd565b9450945050602085013567ffffffffffffffff81111561223957600080fd5b61224587828801611ecd565b95989497509550505050565b6000806040838503121561226457600080fd5b823567ffffffffffffffff81111561227b57600080fd5b61228785828601611f16565b925050602083013567ffffffffffffffff8111156122a457600080fd5b6122b085828601611f95565b9150509250929050565b6000608082840312156122cc57600080fd5b60006115208484612007565b6000602082840312156122ea57600080fd5b60006115208484612068565b60006020828403121561230857600080fd5b600061152084846120b6565b60008060006060848603121561232957600080fd5b600061233586866120c2565b935050602061234686828701612115565b925050604061235786828701611ec1565b9150509250925092565b60008060008060008060c0878903121561237a57600080fd5b600061238689896120c2565b965050602061239789828a01612115565b95505060406123a889828a01611ec1565b94505060606123b989828a01612115565b93505060806123ca89828a01612115565b92505060a06123db89828a01611ec1565b9150509295509295509295565b6000602082840312156123fa57600080fd5b60006115208484612121565b6000806040838503121561241957600080fd5b60006124258585612121565b92505060206122b085828601612121565b60006020828403121561244857600080fd5b6000611520848461212d565b60006020828403121561246657600080fd5b60006115208484612139565b61247b816126b1565b82525050565b61247b81612671565b61247b8161267c565b61247b8161268d565b61247b8161113d565b6020810161146e8284612481565b606081016124c18286612472565b6124ce6020830185612472565b611520604083018461249c565b604081016124e98285612472565b6112d2602083018461249c565b606081016125048286612481565b6124ce6020830185612481565b604081016124e98285612481565b60e0810161252d828a612481565b61253a602083018961249c565b6125476040830188612481565b6125546060830187612481565b612561608083018661249c565b61256e60a083018561249c565b61257b60c0830184612472565b98975050505050505050565b6020810161146e828461248a565b6020810161146e8284612493565b6020810161146e828461249c565b604081016124e9828561249c565b60a081016125cd828861249c565b6125da602083018761249c565b6125e7604083018661249c565b6125f4606083018561249c565b6126016080830184612472565b9695505050505050565b60405181810167ffffffffffffffff8111828210171561262a57600080fd5b604052919050565b600067ffffffffffffffff82111561264957600080fd5b5060209081020190565b600067ffffffffffffffff82111561266a57600080fd5b5060200290565b600061146e82612681565b151590565b600160a060020a031690565b600061146e82612671565b6000600482106126a757600080fd5b5090565b60ff1690565b600061146e8261268d56fea265627a7a72305820b6db58ca610fcf82a150130f4882edd7ad4cad44bb841b852a861f16bb5725086c6578706572696d656e74616cf5003700000000000000000000000092bf969865c80eda082fd5d8b4e28da4d58e1c3a000000000000000000000000b09d6f2004912a12abb0a75d6c631292508e214c",
  "constructorArguments": "00000000000000000000000092bf969865c80eda082fd5d8b4e28da4d58e1c3a000000000000000000000000b09d6f2004912a12abb0a75d6c631292508e214c"
}