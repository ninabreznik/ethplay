{
  "address": "0x6f46893139386b22f76a9ac1f47c5aafbb6a2f62",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CKing",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-05\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts\\utils\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  /**\n  * @dev gives square root of given x.\n  */\n  function sqrt(uint256 x)\n    internal\n    pure\n    returns (uint256 y)\n  {\n    uint256 z = ((add(x,1)) / 2);\n    y = x;\n    while (z < y)\n    {\n        y = z;\n        z = ((add((x / z),z)) / 2);\n    }\n  }\n\n  /**\n  * @dev gives square. multiplies x by x\n  */\n  function sq(uint256 x)\n    internal\n    pure\n    returns (uint256)\n  {\n    return (mul(x,x));\n  }\n\n  /**\n  * @dev x to the power of y\n  */\n  function pwr(uint256 x, uint256 y)\n    internal\n    pure\n    returns (uint256)\n  {\n    if (x==0)\n        return (0);\n    else if (y==0)\n        return (1);\n    else\n    {\n        uint256 z = x;\n        for (uint256 i=1; i < y; i++)\n            z = mul(z,x);\n        return (z);\n    }\n  }\n}\n\n// File: contracts\\CKingCal.sol\n\nlibrary CKingCal {\n\n  using SafeMath for *;\n  /**\n  * @dev calculates number of keys received given X eth\n  * @param _curEth current amount of eth in contract\n  * @param _newEth eth being spent\n  * @return amount of ticket purchased\n  */\n  function keysRec(uint256 _curEth, uint256 _newEth)\n    internal\n    pure\n    returns (uint256)\n  {\n    return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\n  }\n\n  /**\n  * @dev calculates amount of eth received if you sold X keys\n  * @param _curKeys current amount of keys that exist\n  * @param _sellKeys amount of keys you wish to sell\n  * @return amount of eth received\n  */\n  function ethRec(uint256 _curKeys, uint256 _sellKeys)\n    internal\n    pure\n    returns (uint256)\n  {\n    return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\n  }\n\n  /**\n  * @dev calculates how many keys would exist with given an amount of eth\n  * @param _eth total ether received.\n  * @return number of keys that would exist\n  */\n  function keys(uint256 _eth)\n    internal\n    pure\n    returns(uint256)\n  {\n      // sqrt((eth*1 eth* 312500000000000000000000000)+5624988281256103515625000000000000000000000000000000000000000000) - 74999921875000000000000000000000) / 15625000\n      return ((((((_eth).mul(1000000000000000000)).mul(31250000000000000000000000)).add(56249882812561035156250000000000000000000000000000000000000000)).sqrt()).sub(7499992187500000000000000000000)) / (15625000);\n  }  \n\n  /**\n  * @dev calculates how much eth would be in contract given a number of keys\n  * @param _keys number of keys \"in contract\"\n  * @return eth that would exists\n  */\n  function eth(uint256 _keys)\n    internal\n    pure\n    returns(uint256)\n  {\n    // (149999843750000*keys*1 eth) + 78125000 * keys * keys) /2 /(sq(1 ether))\n    return ((7812500).mul(_keys.sq()).add(((14999984375000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq());\n  }\n}\n\n// File: contracts\\utils\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts\\TowerCKing.sol\n\ncontract CKing is Ownable {\n  using SafeMath for *;\n  using CKingCal for uint256;\n\n\n  string constant public name = \"Cryptower\";\n  string constant public symbol = \"CT\";\n\n  // time constants;\n  uint256 constant private timeInit = 1 weeks; // 600; //1 week \n  uint256 constant private timeInc = 30 seconds; //60 ///////\n  uint256 constant private timeMax = 30 minutes; // 300\n\n  // profit distribution parameters\n  uint256 constant private fixRet = 46;\n  uint256 constant private extraRet = 10;\n  uint256 constant private affRet = 10;\n  uint256 constant private gamePrize = 12;\n  uint256 constant private groupPrize = 12;\n  uint256 constant private devTeam = 10;\n\n  // player data\n  struct Player {\n    address addr; // player address\n    string name; // playerName\n    uint256 aff;  // affliliate vault\n    uint256 affId; // affiliate id, who referered u\n    uint256 hretKeys; // number of high return keys\n    uint256 mretKeys; // number of medium return keys\n    uint256 lretKeys; // number of low return keys\n    uint256 eth;      // total eth spend for the keys\n    uint256 ethWithdraw; // earning withdrawed by user\n  }\n\n  mapping(uint256 => Player) public players; // player data\n  mapping(address => uint) public addrXpId; // player address => pId\n  uint public playerNum = 0;\n\n  // game info\n  uint256 public totalEther;     // total key sale revenue\n  uint256 public totalKeys;      // total number of keys.\n  uint256 private constant minPay = 1000000000; // minimum pay to buy keys or deposit in game;\n  uint256 public totalCommPot;   // total ether going to be distributed\n  uint256 private keysForGame;    // keys belongs to the game for profit distribution\n  uint256 private gamePot;        // ether need to be distributed based on the side chain game\n  uint256 public teamWithdrawed; // eth withdrawed by dev team. \n  uint256 public gameWithdrawed; // ether already been withdrawn from game pot \n  uint256 public endTime;        // main game end time\n  address public CFO;\n  address public COO; \n  address public fundCenter; \n  address public playerBook; \n\n\n\n  uint private stageId = 1;   // stageId start 1\n  uint private constant groupPrizeStartAt = 2000000000000000000000000; // 1000000000000000000000;\n  uint private constant groupPrizeStageGap = 100000000000000000000000; // 100000000000000000000\n  mapping(uint => mapping(uint => uint)) public stageInfo; // stageId => pID => keys purchased in this stage\n\n  // admin params\n  uint256 public startTime;  // admin set start\n  uint256 constant private coolDownTime = 2 days; // team is able to withdraw fund 2 days after game end.\n\n  modifier isGameActive() {\n    uint _now = now;\n    require(_now > startTime && _now < endTime);\n    _;\n  }\n  \n  modifier onlyCOO() {\n    require(COO == msg.sender, \"Only COO can operate.\");\n    _; \n  }\n\n  // events\n  event BuyKey(uint indexed _pID, uint _affId, uint _keyType, uint _keyAmount);\n  event EarningWithdraw(uint indexed _pID, address _addr, uint _amount);\n\n\n  constructor(address _CFO, address _COO, address _fundCenter, address _playerBook) public {\n    CFO = _CFO;\n    COO = _COO; \n    fundCenter = _fundCenter; \n    playerBook = _playerBook; \n  }\n    \n  function setCFO(address _CFO) onlyOwner public {\n    CFO = _CFO; \n  }  \n  \n  function setCOO(address _COO) onlyOwner public {\n    COO = _COO; \n  }  \n  \n  function setContractAddress(address _fundCenter, address _playerBook) onlyCOO public {\n    fundCenter = _fundCenter; \n    playerBook = _playerBook; \n  }\n\n  function startGame(uint _startTime) onlyCOO public {\n    require(_startTime > now);\n    startTime = _startTime;\n    endTime = startTime.add(timeInit);\n  }\n  \n  function gameWithdraw(uint _amount) onlyCOO public {\n    // users may choose to withdraw eth from cryptower game, allow dev team to withdraw eth from this contract to fund center. \n    uint _total = getTotalGamePot(); \n    uint _remainingBalance = _total.sub(gameWithdrawed); \n    \n    if(_amount > 0) {\n      require(_amount <= _remainingBalance);\n    } else{\n      _amount = _remainingBalance;\n    }\n    \n    fundCenter.transfer(_amount); \n    gameWithdrawed = gameWithdrawed.add(_amount); \n  }\n\n\n  function teamWithdraw(uint _amount) onlyCOO public {\n    uint256 _now = now;\n    if(_now > endTime.add(coolDownTime)) {\n      // dev team have rights to withdraw all remaining balance 2 days after game end. \n      // if users does not claim their ETH within coolDown period, the team may withdraw their remaining balance. Users can go to crytower game to get their ETH back.\n      CFO.transfer(_amount);\n      teamWithdrawed = teamWithdrawed.add(_amount); \n    } else {\n        uint _total = totalEther.mul(devTeam).div(100); \n        uint _remainingBalance = _total.sub(teamWithdrawed); \n        \n        if(_amount > 0) {\n            require(_amount <= _remainingBalance);\n        } else{\n            _amount = _remainingBalance;\n        }\n        CFO.transfer(_amount);\n        teamWithdrawed = teamWithdrawed.add(_amount); \n    }\n  }\n  \n\n  function updateTimer(uint256 _keys) private {\n    uint256 _now = now;\n    uint256 _newTime;\n\n    if(endTime.sub(_now) < timeMax) {\n        _newTime = ((_keys) / (1000000000000000000)).mul(timeInc).add(endTime);\n        if(_newTime.sub(_now) > timeMax) {\n            _newTime = _now.add(timeMax);\n        }\n        endTime = _newTime;\n    }\n  }\n  \n  function receivePlayerInfo(address _addr, string _name) external {\n    require(msg.sender == playerBook, \"must be from playerbook address\"); \n    uint _pID = addrXpId[_addr];\n    if(_pID == 0) { // player not exist yet. create one \n        playerNum = playerNum + 1;\n        Player memory p; \n        p.addr = _addr;\n        p.name = _name; \n        players[playerNum] = p; \n        _pID = playerNum; \n        addrXpId[_addr] = _pID;\n    } else {\n        players[_pID].name = _name; \n    }\n  }\n\n  function buyByAddress(uint256 _affId, uint _keyType) payable isGameActive public {\n    uint _pID = addrXpId[msg.sender];\n    if(_pID == 0) { // player not exist yet. create one\n      playerNum = playerNum + 1;\n      Player memory p;\n      p.addr = msg.sender;\n      p.affId = _affId;\n      players[playerNum] = p;\n      _pID = playerNum;\n      addrXpId[msg.sender] = _pID;\n    }\n    buy(_pID, msg.value, _affId, _keyType);\n  }\n\n  function buyFromVault(uint _amount, uint256 _affId, uint _keyType) public isGameActive  {\n    uint _pID = addrXpId[msg.sender];\n    uint _earning = getPlayerEarning(_pID);\n    uint _newEthWithdraw = _amount.add(players[_pID].ethWithdraw);\n    require(_newEthWithdraw < _earning); // withdraw amount cannot bigger than earning\n    players[_pID].ethWithdraw = _newEthWithdraw; // update player withdraw\n    buy(_pID, _amount, _affId, _keyType);\n  }\n\n  function getKeyPrice(uint _keyAmount) public view returns(uint256) {\n    if(now > startTime) {\n      return totalKeys.add(_keyAmount).ethRec(_keyAmount);\n    } else { // copy fomo init price\n      return (7500000000000);\n    }\n  }\n\n  function buy(uint256 _pID, uint256 _eth, uint256 _affId, uint _keyType) private {\n\n    if (_eth > minPay) { // bigger than minimum pay\n      players[_pID].eth = _eth.add(players[_pID].eth);\n      uint _keys = totalEther.keysRec(_eth);\n      //bought at least 1 whole key\n      if(_keys >= 1000000000000000000) {\n        updateTimer(_keys);\n      }\n\n      //update total ether and total keys\n      totalEther = totalEther.add(_eth);\n      totalKeys = totalKeys.add(_keys);\n      // update game portion\n      uint256 _game = _eth.mul(gamePrize).div(100);\n      gamePot = _game.add(gamePot);\n\n\n      // update player keys and keysForGame\n      if(_keyType == 1) { // high return key\n        players[_pID].hretKeys  = _keys.add(players[_pID].hretKeys);\n      } else if (_keyType == 2) {\n        players[_pID].mretKeys = _keys.add(players[_pID].mretKeys);\n        keysForGame = keysForGame.add(_keys.mul(extraRet).div(fixRet+extraRet));\n      } else if (_keyType == 3) {\n        players[_pID].lretKeys = _keys.add(players[_pID].lretKeys);\n        keysForGame = keysForGame.add(_keys);\n      } else { // keytype unknown.\n        revert();\n      }\n      //update affliliate gain\n      if(_affId != 0 && _affId != _pID && _affId <= playerNum) { // udate players\n          uint256 _aff = _eth.mul(affRet).div(100);\n          players[_affId].aff = _aff.add(players[_affId].aff);\n          totalCommPot = (_eth.mul(fixRet+extraRet).div(100)).add(totalCommPot);\n      } else { // addId == 0 or _affId is self, put the fund into earnings per key\n          totalCommPot = (_eth.mul(fixRet+extraRet+affRet).div(100)).add(totalCommPot);\n      }\n      // update stage info\n      if(totalKeys > groupPrizeStartAt) {\n        updateStageInfo(_pID, _keys);\n      }\n      emit BuyKey(_pID, _affId, _keyType, _keys);\n    } else { // if contribute less than the minimum conntribution return to player aff vault\n      players[_pID].aff = _eth.add(players[_pID].aff);\n    }\n  }\n\n  function updateStageInfo(uint _pID, uint _keyAmount) private {\n    uint _stageL = groupPrizeStartAt.add(groupPrizeStageGap.mul(stageId - 1));\n    uint _stageH = groupPrizeStartAt.add(groupPrizeStageGap.mul(stageId));\n    if(totalKeys > _stageH) { // game has been pushed to next stage\n      stageId = (totalKeys.sub(groupPrizeStartAt)).div(groupPrizeStageGap) + 1;\n      _keyAmount = (totalKeys.sub(groupPrizeStartAt)) % groupPrizeStageGap;\n      stageInfo[stageId][_pID] = stageInfo[stageId][_pID].add(_keyAmount);\n    } else {\n      if(_keyAmount < totalKeys.sub(_stageL)) {\n        stageInfo[stageId][_pID] = stageInfo[stageId][_pID].add(_keyAmount);\n      } else {\n        _keyAmount = totalKeys.sub(_stageL);\n        stageInfo[stageId][_pID] = stageInfo[stageId][_pID].add(_keyAmount);\n      }\n    }\n  }\n\n  function withdrawEarning(uint256 _amount) public {\n    address _addr = msg.sender;\n    uint256 _pID = addrXpId[_addr];\n    require(_pID != 0);  // player must exist\n\n    uint _earning = getPlayerEarning(_pID);\n    uint _remainingBalance = _earning.sub(players[_pID].ethWithdraw);\n    if(_amount > 0) {\n      require(_amount <= _remainingBalance);\n    }else{\n      _amount = _remainingBalance;\n    }\n\n\n    _addr.transfer(_amount);  // transfer remaining balance to\n    players[_pID].ethWithdraw = players[_pID].ethWithdraw.add(_amount);\n  }\n\n  function getPlayerEarning(uint256 _pID) view public returns (uint256) {\n    Player memory p = players[_pID];\n    uint _gain = totalCommPot.mul(p.hretKeys.add(p.mretKeys.mul(fixRet).div(fixRet+extraRet))).div(totalKeys);\n    uint _total = _gain.add(p.aff);\n    _total = getWinnerPrize(_pID).add(_total);\n    return _total;\n  }\n\n  function getPlayerWithdrawEarning(uint _pid) public view returns(uint){\n    uint _earning = getPlayerEarning(_pid);\n    return _earning.sub(players[_pid].ethWithdraw);\n  }\n\n  function getWinnerPrize(uint256 _pID) view public returns (uint256) {\n    uint _keys;\n    uint _pKeys;\n    if(now < endTime) {\n      return 0;\n    } else if(totalKeys > groupPrizeStartAt) { // keys in the winner stage share the group prize\n      _keys = totalKeys.sub(groupPrizeStartAt.add(groupPrizeStageGap.mul(stageId - 1)));\n      _pKeys = stageInfo[stageId][_pID];\n      return totalEther.mul(groupPrize).div(100).mul(_pKeys).div(_keys);\n    } else { // totalkeys does not meet the minimum group prize criteria, all keys share the group prize\n      Player memory p = players[_pID];\n      _pKeys = p.hretKeys.add(p.mretKeys).add(p.lretKeys);\n      return totalEther.mul(groupPrize).div(100).mul(_pKeys).div(totalKeys);\n    }\n  }\n\n  function getWinningStageInfo() view public returns (uint256 _stageId, uint256 _keys, uint256 _amount) {\n    _amount = totalEther.mul(groupPrize).div(100);\n    if(totalKeys < groupPrizeStartAt) { // group prize is not activate yet\n      return (0, totalKeys, _amount);\n    } else {\n      _stageId = stageId;\n      _keys = totalKeys.sub(groupPrizeStartAt.add(groupPrizeStageGap.mul(stageId - 1)));\n      return (_stageId, _keys, _amount);\n    }\n  }\n\n  function getPlayerStageKeys() view public returns (uint256 _stageId, uint _keys, uint _pKeys) {\n    uint _pID = addrXpId[msg.sender];\n    if(totalKeys < groupPrizeStartAt) {\n      Player memory p = players[_pID];\n      _pKeys = p.hretKeys.add(p.mretKeys).add(p.lretKeys);\n      return (0, totalKeys, _pKeys);\n    } else {\n      _stageId = stageId;\n      _keys = totalKeys.sub(groupPrizeStartAt.add(groupPrizeStageGap.mul(stageId - 1)));\n      _pKeys = stageInfo[_stageId][_pID];\n      return (_stageId, _keys, _pKeys);\n    }\n\n  }\n\n  function getTotalGamePot() view public returns (uint256) {\n    uint _gain = totalCommPot.mul(keysForGame).div(totalKeys);\n    uint _total = _gain.add(gamePot);\n    return _total;\n  }\n  \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"getTotalGamePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stageInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundCenter\",\"type\":\"address\"},{\"name\":\"_playerBook\",\"type\":\"address\"}],\"name\":\"setContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_COO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerBook\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CFO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWinningStageInfo\",\"outputs\":[{\"name\":\"_stageId\",\"type\":\"uint256\"},{\"name\":\"_keys\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrXpId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"gameWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayerStageKeys\",\"outputs\":[{\"name\":\"_stageId\",\"type\":\"uint256\"},{\"name\":\"_keys\",\"type\":\"uint256\"},{\"name\":\"_pKeys\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affId\",\"type\":\"uint256\"},{\"name\":\"_keyType\",\"type\":\"uint256\"}],\"name\":\"buyByAddress\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_keyAmount\",\"type\":\"uint256\"}],\"name\":\"getKeyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"teamWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"receivePlayerInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameWithdrawed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPlayerWithdrawEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEarning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getWinnerPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_affId\",\"type\":\"uint256\"},{\"name\":\"_keyType\",\"type\":\"uint256\"}],\"name\":\"buyFromVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWithdrawed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCommPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"aff\",\"type\":\"uint256\"},{\"name\":\"affId\",\"type\":\"uint256\"},{\"name\":\"hretKeys\",\"type\":\"uint256\"},{\"name\":\"mretKeys\",\"type\":\"uint256\"},{\"name\":\"lretKeys\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"ethWithdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundCenter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_CFO\",\"type\":\"address\"},{\"name\":\"_COO\",\"type\":\"address\"},{\"name\":\"_fundCenter\",\"type\":\"address\"},{\"name\":\"_playerBook\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_affId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_keyType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_keyAmount\",\"type\":\"uint256\"}],\"name\":\"BuyKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EarningWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600355600160105534801561001a57600080fd5b506040516080806134cf83398101806040528101908080519060200190929190805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505061331d806101b26000396000f3006080604052600436106101c2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063027e7a0f146101c757806303e28366146101f257806306fdde031461021d57806307fb021a146102ad57806323626df7146102f85780632ba73c151461035b5780632fa241fc1461039e57806330d500bf146103f55780633197cbb61461044c578063488bdabc146104775780634b5a0e65146104a25780634e0a3379146104db5780634fd8be391461051e57806359cfaf6e146105755780636f87dddd146105a257806378e97925146105db5780637b74e5c31461060657806388c9ebbd146106305780638da5cb5b1461067157806393d60990146106c857806395d89b41146106f5578063ae6e22f114610785578063b71ab971146107b0578063b7df07a6146107f1578063c449570d1461084c578063cbb0c95a14610877578063df32dc5c146108b8578063e1a8af8a146108e5578063e1b27e6b14610926578063e5ed1d591461097d578063e7fdc514146109aa578063e808d645146109eb578063f1e4ff5f14610a16578063f2fde38b14610a41578063f71d96cb14610a84578063ffd1b05c14610b8e575b600080fd5b3480156101d357600080fd5b506101dc610be5565b6040518082815260200191505060405180910390f35b3480156101fe57600080fd5b50610207610c36565b6040518082815260200191505060405180910390f35b34801561022957600080fd5b50610232610c3c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610272578082015181840152602081019050610257565b50505050905090810190601f16801561029f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102b957600080fd5b506102e26004803603810190808035906020019092919080359060200190929190505050610c75565b6040518082815260200191505060405180910390f35b34801561030457600080fd5b50610359600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c9a565b005b34801561036757600080fd5b5061039c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610de5565b005b3480156103aa57600080fd5b506103b3610e84565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561040157600080fd5b5061040a610eaa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561045857600080fd5b50610461610ed0565b6040518082815260200191505060405180910390f35b34801561048357600080fd5b5061048c610ed6565b6040518082815260200191505060405180910390f35b3480156104ae57600080fd5b506104b7610edc565b60405180848152602001838152602001828152602001935050505060405180910390f35b3480156104e757600080fd5b5061051c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f9e565b005b34801561052a57600080fd5b5061055f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061103d565b6040518082815260200191505060405180910390f35b34801561058157600080fd5b506105a060048036038101908080359060200190929190505050611055565b005b3480156105ae57600080fd5b506105b76111e8565b60405180848152602001838152602001828152602001935050505060405180910390f35b3480156105e757600080fd5b506105f0611486565b6040518082815260200191505060405180910390f35b61062e600480360381019080803590602001909291908035906020019092919050505061148c565b005b34801561063c57600080fd5b5061065b60048036038101908080359060200190929190505050611672565b6040518082815260200191505060405180910390f35b34801561067d57600080fd5b506106866116bb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106d457600080fd5b506106f3600480360381019080803590602001909291905050506116e0565b005b34801561070157600080fd5b5061070a611943565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561074a57808201518184015260208101905061072f565b50505050905090810190601f1680156107775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561079157600080fd5b5061079a61197c565b6040518082815260200191505060405180910390f35b3480156107bc57600080fd5b506107db60048036038101908080359060200190929190505050611982565b6040518082815260200191505060405180910390f35b3480156107fd57600080fd5b5061084a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001919091929391929390505050611b9e565b005b34801561085857600080fd5b50610861611e77565b6040518082815260200191505060405180910390f35b34801561088357600080fd5b506108a260048036038101908080359060200190929190505050611e7d565b6040518082815260200191505060405180910390f35b3480156108c457600080fd5b506108e360048036038101908080359060200190929190505050611ebc565b005b3480156108f157600080fd5b5061091060048036038101908080359060200190929190505050611fff565b6040518082815260200191505060405180910390f35b34801561093257600080fd5b5061093b6122f3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561098957600080fd5b506109a860048036038101908080359060200190929190505050612319565b005b3480156109b657600080fd5b506109e9600480360381019080803590602001909291908035906020019092919080359060200190929190505050612414565b005b3480156109f757600080fd5b50610a006124f0565b6040518082815260200191505060405180910390f35b348015610a2257600080fd5b50610a2b6124f6565b6040518082815260200191505060405180910390f35b348015610a4d57600080fd5b50610a82600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124fc565b005b348015610a9057600080fd5b50610aaf60048036038101908080359060200190929190505050612651565b604051808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200189815260200188815260200187815260200186815260200185815260200184815260200183815260200182810382528a818151815260200191508051906020019080838360005b83811015610b4b578082015181840152602081019050610b30565b50505050905090810190601f168015610b785780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b348015610b9a57600080fd5b50610ba3612757565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000806000610c15600554610c0760075460065461277d90919063ffffffff16565b6127b590919063ffffffff16565b9150610c2c600854836127cb90919063ffffffff16565b9050809250505090565b60035481565b6040805190810160405280600981526020017f43727970746f776572000000000000000000000000000000000000000000000081525081565b6011602052816000526040600020602052806000526040600020600091509150505481565b3373ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610d5f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f6e6c7920434f4f2063616e206f7065726174652e000000000000000000000081525060200191505060405180910390fd5b81600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e4057600080fd5b80600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b60055481565b6000806000610f0a6064610efc600c60045461277d90919063ffffffff16565b6127b590919063ffffffff16565b90506a01a784379d99db420000006005541015610f3557600060055482829250925092509250610f99565b6010549250610f8d610f7c610f6260016010540369152d02c7e14af680000061277d90919063ffffffff16565b6a01a784379d99db420000006127cb90919063ffffffff16565b6005546127e790919063ffffffff16565b91508282829250925092505b909192565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ff957600080fd5b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60026020528060005260406000206000915090505481565b6000803373ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561111d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f6e6c7920434f4f2063616e206f7065726174652e000000000000000000000081525060200191505060405180910390fd5b611125610be5565b915061113c600a54836127e790919063ffffffff16565b9050600083111561115b5780831115151561115657600080fd5b61115f565b8092505b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156111c7573d6000803e3d6000fd5b506111dd83600a546127cb90919063ffffffff16565b600a81905550505050565b6000806000806111f6613169565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506a01a784379d99db4200000060055410156113f4576001600083815260200190815260200160002061012060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561135c5780601f106113315761010080835404028352916020019161135c565b820191906000526020600020905b81548152906001019060200180831161133f57829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201548152505090506113de8160c001516113d08360a0015184608001516127cb90919063ffffffff16565b6127cb90919063ffffffff16565b925060006005548482925094509450945061147f565b601054945061144c61143b61142160016010540369152d02c7e14af680000061277d90919063ffffffff16565b6a01a784379d99db420000006127cb90919063ffffffff16565b6005546127e790919063ffffffff16565b93506011600086815260200190815260200160002060008381526020019081526020016000205492508484849450945094505b5050909192565b60125481565b6000611496613169565b6000429050601254811180156114ad5750600b5481105b15156114b857600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250600083141561165f5760016003540160038190555033826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050848260600181815250508160016000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906115ca9291906131cc565b5060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155905050600354925082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b61166b83348787612800565b5050505050565b60006012544211156116ac576116a582611697846005546127cb90919063ffffffff16565b612c3390919063ffffffff16565b90506116b6565b6506d23ad5f80090505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060003373ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156117aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f6e6c7920434f4f2063616e206f7065726174652e000000000000000000000081525060200191505060405180910390fd5b4292506117c56202a300600b546127cb90919063ffffffff16565b83111561185557600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f19350505050158015611834573d6000803e3d6000fd5b5061184a846009546127cb90919063ffffffff16565b60098190555061193d565b61187e6064611870600a60045461277d90919063ffffffff16565b6127b590919063ffffffff16565b9150611895600954836127e790919063ffffffff16565b905060008411156118b4578084111515156118af57600080fd5b6118b8565b8093505b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f19350505050158015611920573d6000803e3d6000fd5b50611936846009546127cb90919063ffffffff16565b6009819055505b50505050565b6040805190810160405280600281526020017f435400000000000000000000000000000000000000000000000000000000000081525081565b60045481565b600061198c613169565b6000806001600086815260200190815260200160002061012060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a9e5780601f10611a7357610100808354040283529160200191611a9e565b820191906000526020600020905b815481529060010190602001808311611a8157829003601f168201915b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815250509250611b5b600554611b4d611b3c611b29600a602e01611b1b602e8a60a0015161277d90919063ffffffff16565b6127b590919063ffffffff16565b87608001516127cb90919063ffffffff16565b60065461277d90919063ffffffff16565b6127b590919063ffffffff16565b9150611b748360400151836127cb90919063ffffffff16565b9050611b9181611b8387611fff565b6127cb90919063ffffffff16565b9050809350505050919050565b6000611ba8613169565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6d7573742062652066726f6d20706c61796572626f6f6b20616464726573730081525060200191505060405180910390fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506000821415611e495760016003540160038190555084816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083838080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505081602001819052508060016000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190611db09291906131cc565b5060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155905050600354915081600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e70565b8383600160008581526020019081526020016000206001019190611e6e92919061324c565b505b5050505050565b600a5481565b600080611e8983611982565b9050611eb46001600085815260200190815260200160002060080154826127e790919063ffffffff16565b915050919050565b600080600080339350600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925060008314151515611f1757600080fd5b611f2083611982565b9150611f4b6001600085815260200190815260200160002060080154836127e790919063ffffffff16565b90506000851115611f6a57808511151515611f6557600080fd5b611f6e565b8094505b8373ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015611fb4573d6000803e3d6000fd5b50611fde8560016000868152602001908152602001600020600801546127cb90919063ffffffff16565b60016000858152602001908152602001600020600801819055505050505050565b600080600061200c613169565b600b5442101561201f57600093506122eb565b6a01a784379d99db4200000060055411156121065761208761207661205c60016010540369152d02c7e14af680000061277d90919063ffffffff16565b6a01a784379d99db420000006127cb90919063ffffffff16565b6005546127e790919063ffffffff16565b925060116000601054815260200190815260200160002060008681526020019081526020016000205491506120ff836120f1846120e360646120d5600c60045461277d90919063ffffffff16565b6127b590919063ffffffff16565b61277d90919063ffffffff16565b6127b590919063ffffffff16565b93506122eb565b6001600086815260200190815260200160002061012060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122155780601f106121ea57610100808354040283529160200191612215565b820191906000526020600020905b8154815290600101906020018083116121f857829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201548152505090506122978160c001516122898360a0015184608001516127cb90919063ffffffff16565b6127cb90919063ffffffff16565b91506122e86005546122da846122cc60646122be600c60045461277d90919063ffffffff16565b6127b590919063ffffffff16565b61277d90919063ffffffff16565b6127b590919063ffffffff16565b93505b505050919050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156123de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f6e6c7920434f4f2063616e206f7065726174652e000000000000000000000081525060200191505060405180910390fd5b42811115156123ec57600080fd5b8060128190555061240b62093a806012546127cb90919063ffffffff16565b600b8190555050565b6000806000804290506012548111801561242f5750600b5481105b151561243a57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054935061248584611982565b92506124b06001600086815260200190815260200160002060080154886127cb90919063ffffffff16565b915082821015156124c057600080fd5b8160016000868152602001908152602001600020600801819055506124e784888888612800565b50505050505050565b60095481565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561255757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561259357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127235780601f106126f857610100808354040283529160200191612723565b820191906000526020600020905b81548152906001019060200180831161270657829003601f168201915b5050505050908060020154908060030154908060040154908060050154908060060154908060070154908060080154905089565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008083141561279057600090506127af565b81830290508183828115156127a157fe5b041415156127ab57fe5b8090505b92915050565b600081838115156127c257fe5b04905092915050565b600081830190508281101515156127de57fe5b80905092915050565b60008282111515156127f557fe5b818303905092915050565b6000806000633b9aca00861115612be65761283a6001600089815260200190815260200160002060070154876127cb90919063ffffffff16565b600160008981526020019081526020016000206007018190555061286986600454612c7290919063ffffffff16565b9250670de0b6b3a7640000831015156128865761288583612cb1565b5b61289b866004546127cb90919063ffffffff16565b6004819055506128b6836005546127cb90919063ffffffff16565b6005819055506128e360646128d5600c8961277d90919063ffffffff16565b6127b590919063ffffffff16565b91506128fa600854836127cb90919063ffffffff16565b6008819055506001841415612951576129326001600089815260200190815260200160002060040154846127cb90919063ffffffff16565b6001600089815260200190815260200160002060040181905550612a59565b60028414156129e6576129836001600089815260200190815260200160002060050154846127cb90919063ffffffff16565b60016000898152602001908152602001600020600501819055506129db6129ca600a602e016129bc600a8761277d90919063ffffffff16565b6127b590919063ffffffff16565b6007546127cb90919063ffffffff16565b600781905550612a58565b6003841415612a5257612a186001600089815260200190815260200160002060060154846127cb90919063ffffffff16565b6001600089815260200190815260200160002060060181905550612a47836007546127cb90919063ffffffff16565b600781905550612a57565b600080fd5b5b5b60008514158015612a6a5750868514155b8015612a7857506003548511155b15612b3257612aa46064612a96600a8961277d90919063ffffffff16565b6127b590919063ffffffff16565b9050612acf6001600087815260200190815260200160002060020154826127cb90919063ffffffff16565b6001600087815260200190815260200160002060020181905550612b27600654612b196064612b0b600a602e018b61277d90919063ffffffff16565b6127b590919063ffffffff16565b6127cb90919063ffffffff16565b600681905550612b79565b612b72600654612b646064612b56600a80602e01018b61277d90919063ffffffff16565b6127b590919063ffffffff16565b6127cb90919063ffffffff16565b6006819055505b6a01a784379d99db420000006005541115612b9957612b988784612d53565b5b867fdde56226b3be2e76aa6b7dbcc5d313e0be3d4a3ad328adf3dbb95a31d3f4a08586868660405180848152602001838152602001828152602001935050505060405180910390a2612c2a565b612c0f6001600089815260200190815260200160002060020154876127cb90919063ffffffff16565b60016000898152602001908152602001600020600201819055505b50505050505050565b6000612c6a612c53612c4e84866127e790919063ffffffff16565b612fc9565b612c5c85612fc9565b6127e790919063ffffffff16565b905092915050565b6000612ca9612c808461305b565b612c9b612c9685876127cb90919063ffffffff16565b61305b565b6127e790919063ffffffff16565b905092915050565b600080429150610708612ccf83600b546127e790919063ffffffff16565b1015612d4e57612d10600b54612d02601e670de0b6b3a764000087811515612cf357fe5b0461277d90919063ffffffff16565b6127cb90919063ffffffff16565b9050610708612d2883836127e790919063ffffffff16565b1115612d4657612d43610708836127cb90919063ffffffff16565b90505b80600b819055505b505050565b600080612d95612d7b60016010540369152d02c7e14af680000061277d90919063ffffffff16565b6a01a784379d99db420000006127cb90919063ffffffff16565b9150612dd3612db960105469152d02c7e14af680000061277d90919063ffffffff16565b6a01a784379d99db420000006127cb90919063ffffffff16565b9050806005541115612ec3576001612e1d69152d02c7e14af6800000612e0f6a01a784379d99db420000006005546127e790919063ffffffff16565b6127b590919063ffffffff16565b0160108190555069152d02c7e14af6800000612e4f6a01a784379d99db420000006005546127e790919063ffffffff16565b811515612e5857fe5b069250612e94836011600060105481526020019081526020016000206000878152602001908152602001600020546127cb90919063ffffffff16565b601160006010548152602001908152602001600020600086815260200190815260200160002081905550612fc3565b612ed8826005546127e790919063ffffffff16565b831015612f4757612f18836011600060105481526020019081526020016000206000878152602001908152602001600020546127cb90919063ffffffff16565b601160006010548152602001908152602001600020600086815260200190815260200160002081905550612fc2565b612f5c826005546127e790919063ffffffff16565b9250612f97836011600060105481526020019081526020016000206000878152602001908152602001600020546127cb90919063ffffffff16565b6011600060105481526020019081526020016000206000868152602001908152602001600020819055505b5b50505050565b6000612fdc670de0b6b3a76400006130fd565b61304a6002613014612fff670de0b6b3a76400008761277d90919063ffffffff16565b650da474bd84d861277d90919063ffffffff16565b81151561301d57fe5b0461303c61302a866130fd565b6277359461277d90919063ffffffff16565b6127cb90919063ffffffff16565b81151561305357fe5b049050919050565b600062ee6b286130ec6c5ea9c821bd972d575c663000006130de6130d97923011f92a03c1394a96dcd4a60de17b87bae3b4a4900000000006130cb6a19d971e4fe8401e74000006130bd670de0b6b3a76400008b61277d90919063ffffffff16565b61277d90919063ffffffff16565b6127cb90919063ffffffff16565b613110565b6127e790919063ffffffff16565b8115156130f557fe5b049050919050565b6000613109828361277d565b9050919050565b60008060026131208460016127cb565b81151561312957fe5b0490508291505b81811015613163578091506002613152828581151561314b57fe5b04836127cb565b81151561315b57fe5b049050613130565b50919050565b61012060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061320d57805160ff191683800117855561323b565b8280016001018555821561323b579182015b8281111561323a57825182559160200191906001019061321f565b5b50905061324891906132cc565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061328d57803560ff19168380011785556132bb565b828001600101855582156132bb579182015b828111156132ba57823582559160200191906001019061329f565b5b5090506132c891906132cc565b5090565b6132ee91905b808211156132ea5760008160009055506001016132d2565b5090565b905600a165627a7a7230582098ba3454c3e8460366530db0fb6107b1984a9baaf2264ad5d11cac942a2993e400290000000000000000000000002250f5ce3d49caab3476e9e1811942fdc67f88e50000000000000000000000002250f5ce3d49caab3476e9e1811942fdc67f88e5000000000000000000000000366c513514176bc0edc1e17c290f54f308e43ac30000000000000000000000006fd749dc814754106bf097a2d1a7f089a8ff6cda",
  "constructorArguments": "0000000000000000000000002250f5ce3d49caab3476e9e1811942fdc67f88e50000000000000000000000002250f5ce3d49caab3476e9e1811942fdc67f88e5000000000000000000000000366c513514176bc0edc1e17c290f54f308e43ac30000000000000000000000006fd749dc814754106bf097a2d1a7f089a8ff6cda"
}