{
  "address": "0xb907b9d87fe6bfa04e77308b691ac02466e59c85",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthealHodler",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-19\n*/\n\npragma solidity ^0.4.17;\n\n/**\n * @title Hodler\n * @dev Handles hodler reward, TokenController should create and own it.\n */\n\n/**\n * @title ERC20\n * @dev ERC20 interface\n */\ncontract ERC20 {\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController { require(msg.sender == controller); _; }\n    address public controller;\n    function Controlled() public { controller = msg.sender;}\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) public onlyController {\n        controller = _newController;\n    }\n}\n/**\n * @title MiniMe interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20MiniMe is ERC20, Controlled {\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool);\n    function totalSupply() public view returns (uint);\n    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint);\n    function totalSupplyAt(uint _blockNumber) public view returns(uint);\n    function createCloneToken(string _cloneTokenName, uint8 _cloneDecimalUnits, string _cloneTokenSymbol, uint _snapshotBlock, bool _transfersEnabled) public returns(address);\n    function generateTokens(address _owner, uint _amount) public returns (bool);\n    function destroyTokens(address _owner, uint _amount)  public returns (bool);\n    function enableTransfers(bool _transfersEnabled) public;\n    function isContract(address _addr) internal view returns(bool);\n    function claimTokens(address _token) public;\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n}\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n    ERC20MiniMe public ethealToken;\n    address public SALE; // address where sale tokens are located\n    /// @notice needed for hodler handling\n    function addHodlerStake(address _beneficiary, uint _stake) public;\n    function setHodlerStake(address _beneficiary, uint256 _stake) public;\n    function setHodlerTime(uint256 _time) public;\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) public payable returns(bool);\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) public returns(bool);\n}\n/**\n * @title Hodler\n * @dev Handles hodler reward, TokenController should create and own it.\n */\ncontract EthealHodler is Ownable {\n    using SafeMath for uint;\n\n    // HODLER reward tracker\n    // stake amount per address\n    struct HODL {\n        uint256 stake;\n        // moving ANY funds invalidates hodling of the address\n        bool invalid;\n        bool claimed3M;\n        bool claimed6M;\n        bool claimed9M;\n    }\n\n    mapping (address => HODL) public hodlerStakes;\n\n    // total current staking value and hodler addresses\n    uint256 public hodlerTotalValue;\n    uint256 public hodlerTotalCount;\n\n    // store dates and total stake values for 3 - 6 - 9 months after normal sale\n    uint256 public hodlerTotalValue3M;\n    uint256 public hodlerTotalValue6M;\n    uint256 public hodlerTotalValue9M;\n    uint256 public hodlerTimeStart;\n    uint256 public hodlerTime3M;\n    uint256 public hodlerTime6M;\n    uint256 public hodlerTime9M;\n\n    // reward HEAL token amount\n    uint256 public TOKEN_HODL_3M;\n    uint256 public TOKEN_HODL_6M;\n    uint256 public TOKEN_HODL_9M;\n\n    // total amount of tokens claimed so far\n    uint256 public claimedTokens;\n\n    \n    event LogHodlSetStake(address indexed _setter, address indexed _beneficiary, uint256 _value);\n    event LogHodlClaimed(address indexed _setter, address indexed _beneficiary, uint256 _value);\n    event LogHodlStartSet(address indexed _setter, uint256 _time);\n\n\n    /// @dev Only before hodl is started\n    modifier beforeHodlStart() {\n        if (hodlerTimeStart == 0 || now <= hodlerTimeStart)\n            _;\n    }\n\n    /// @dev Contructor, it should be created by a TokenController\n    function EthealHodler(uint256 _stake3m, uint256 _stake6m, uint256 _stake9m) {\n        TOKEN_HODL_3M = _stake3m;\n        TOKEN_HODL_6M = _stake6m;\n        TOKEN_HODL_9M = _stake9m;\n    }\n\n    /// @notice Adding hodler stake to an account\n    /// @dev Only owner contract can call it and before hodling period starts\n    /// @param _beneficiary Recepient address of hodler stake\n    /// @param _stake Amount of additional hodler stake\n    function addHodlerStake(address _beneficiary, uint256 _stake) public onlyOwner beforeHodlStart {\n        // real change and valid _beneficiary is needed\n        if (_stake == 0 || _beneficiary == address(0))\n            return;\n        \n        // add stake and maintain count\n        if (hodlerStakes[_beneficiary].stake == 0)\n            hodlerTotalCount = hodlerTotalCount.add(1);\n\n        hodlerStakes[_beneficiary].stake = hodlerStakes[_beneficiary].stake.add(_stake);\n\n        hodlerTotalValue = hodlerTotalValue.add(_stake);\n\n        LogHodlSetStake(msg.sender, _beneficiary, hodlerStakes[_beneficiary].stake);\n    }\n\n    ///Â @notice Add hodler stake for multiple addresses\n    function addManyHodlerStake(address[] _addr, uint256[] _stake) public onlyOwner beforeHodlStart {\n        require(_addr.length == _stake.length);\n\n        for (uint256 i = 0; i < _addr.length; i++) {\n            addHodlerStake(_addr[i], _stake[i]);\n        }\n    }\n\n    /// @notice Setting hodler stake of an account\n    /// @dev Only owner contract can call it and before hodling period starts\n    /// @param _beneficiary Recepient address of hodler stake\n    /// @param _stake Amount to set the hodler stake\n    function setHodlerStake(address _beneficiary, uint256 _stake) public onlyOwner beforeHodlStart {\n        // real change and valid _beneficiary is needed\n        if (hodlerStakes[_beneficiary].stake == _stake || _beneficiary == address(0))\n            return;\n        \n        // add stake and maintain count\n        if (hodlerStakes[_beneficiary].stake == 0 && _stake > 0) {\n            hodlerTotalCount = hodlerTotalCount.add(1);\n        } else if (hodlerStakes[_beneficiary].stake > 0 && _stake == 0) {\n            hodlerTotalCount = hodlerTotalCount.sub(1);\n        }\n\n        uint256 _diff = _stake > hodlerStakes[_beneficiary].stake ? _stake.sub(hodlerStakes[_beneficiary].stake) : hodlerStakes[_beneficiary].stake.sub(_stake);\n        if (_stake > hodlerStakes[_beneficiary].stake) {\n            hodlerTotalValue = hodlerTotalValue.add(_diff);\n        } else {\n            hodlerTotalValue = hodlerTotalValue.sub(_diff);\n        }\n        hodlerStakes[_beneficiary].stake = _stake;\n\n        LogHodlSetStake(msg.sender, _beneficiary, _stake);\n    }\n\n    ///Â @notice Set hodler stake for multiple addresses\n    function setManyHodlerStake(address[] _addr, uint256[] _stake) public onlyOwner beforeHodlStart {\n        require(_addr.length == _stake.length);\n\n        for (uint256 i = 0; i < _addr.length; i++) {\n            setHodlerStake(_addr[i], _stake[i]);\n        }\n    }\n\n    /// @notice Setting hodler start period.\n    /// @param _time The time when hodler reward starts counting\n    function setHodlerTime(uint256 _time) public onlyOwner beforeHodlStart {\n        // since we had to redeploy the contract\n        // require(_time >= now);\n\n        hodlerTimeStart = _time;\n        hodlerTime3M = _time.add(90 days);\n        hodlerTime6M = _time.add(180 days);\n        hodlerTime9M = _time.add(270 days);\n\n        LogHodlStartSet(msg.sender, _time);\n    }\n\n    /// @notice Invalidates hodler account \n    /// @dev Gets called by EthealController#onTransfer before every transaction\n    function invalidate(address _account) public onlyOwner {\n        if (hodlerStakes[_account].stake > 0 && !hodlerStakes[_account].invalid) {\n            // claim before invalidating if there is something to claim\n            claimHodlRewardFor(_account);\n\n            // invalidate stake\n            hodlerStakes[_account].invalid = true;\n            hodlerTotalValue = hodlerTotalValue.sub(hodlerStakes[_account].stake);\n            hodlerTotalCount = hodlerTotalCount.sub(1);\n        } else {\n            // update hodl total values \"automatically\" - whenever someone sends funds\n            updateAndGetHodlTotalValue();\n        }\n    }\n\n    /// @notice Claiming HODL reward for msg.sender\n    function claimHodlReward() public {\n        claimHodlRewardFor(msg.sender);\n    }\n\n    /// @notice Claiming HODL reward for an address\n    function claimHodlRewardFor(address _beneficiary) public {\n        // only when the address has a valid stake\n        require(hodlerStakes[_beneficiary].stake > 0 && !hodlerStakes[_beneficiary].invalid);\n\n        uint256 _stake = 0;\n        \n        // update hodl total values\n        updateAndGetHodlTotalValue();\n\n        // claim hodl if not claimed\n        if (!hodlerStakes[_beneficiary].claimed3M && now >= hodlerTime3M) {\n            _stake = _stake.add(hodlerStakes[_beneficiary].stake.mul(TOKEN_HODL_3M).div(hodlerTotalValue3M));\n            hodlerStakes[_beneficiary].claimed3M = true;\n        }\n        if (!hodlerStakes[_beneficiary].claimed6M && now >= hodlerTime6M) {\n            _stake = _stake.add(hodlerStakes[_beneficiary].stake.mul(TOKEN_HODL_6M).div(hodlerTotalValue6M));\n            hodlerStakes[_beneficiary].claimed6M = true;\n        }\n        if (!hodlerStakes[_beneficiary].claimed9M && now >= hodlerTime9M) {\n            _stake = _stake.add(hodlerStakes[_beneficiary].stake.mul(TOKEN_HODL_9M).div(hodlerTotalValue9M));\n            hodlerStakes[_beneficiary].claimed9M = true;\n        }\n\n        if (_stake > 0) {\n            // increasing claimed tokens\n            claimedTokens = claimedTokens.add(_stake);\n\n            // transferring tokens\n            require(TokenController(owner).ethealToken().transfer(_beneficiary, _stake));\n\n            // log\n            LogHodlClaimed(msg.sender, _beneficiary, _stake);\n        }\n    }\n\n    /// @notice claimHodlRewardFor() for multiple addresses\n    /// @dev Anyone can call this function and distribute hodl rewards\n    /// @param _beneficiaries Array of addresses for which we want to claim hodl rewards\n    function claimHodlRewardsFor(address[] _beneficiaries) external {\n        for (uint256 i = 0; i < _beneficiaries.length; i++)\n            claimHodlRewardFor(_beneficiaries[i]);\n    }\n\n    /// @notice Setting 3 - 6 - 9 months total staking hodl value if time is come\n    function updateAndGetHodlTotalValue() public returns (uint) {\n        if (hodlerTime3M > 0 && now >= hodlerTime3M && hodlerTotalValue3M == 0) {\n            hodlerTotalValue3M = hodlerTotalValue;\n        }\n\n        if (hodlerTime6M > 0 && now >= hodlerTime6M && hodlerTotalValue6M == 0) {\n            hodlerTotalValue6M = hodlerTotalValue;\n        }\n\n        if (hodlerTime9M > 0 && now >= hodlerTime9M && hodlerTotalValue9M == 0) {\n            hodlerTotalValue9M = hodlerTotalValue;\n\n            // since we can transfer more tokens to this contract, make it possible to retain more than the predefined limit\n            TOKEN_HODL_9M = TokenController(owner).ethealToken().balanceOf(this).sub(TOKEN_HODL_3M).sub(TOKEN_HODL_6M).add(claimedTokens);\n        }\n\n        return hodlerTotalValue;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60405160608061128483398101604052808051919060200180519190602001805160008054600160a060020a033316600160a060020a0319909116179055600b949094555050600c55600d5561121a8061006a6000396000f3006060604052600436106101395763ffffffff60e060020a600035041662346b57811461013e57806304c80c3c146101625780630d92e3e8146101875780630eb6f5431461019a57806326c43d8f146101ad57806328262dd1146101c057806337a3931f146101d357806342ef4c1a146101f25780634a48314f146102055780634b86faba146102185780636476b7cb1461022b578063685a73e0146102ba5780637de02708146102d85780638da5cb5b1461036757806391e79c721461039657806393a378da146103a9578063b0e9a1ef146103cb578063b40d8d58146103e1578063be2b1047146103f4578063c899fa7714610407578063d228cfc51461041a578063d43a0b4c14610439578063d6192c6c1461044c578063e2c20836146104a2578063f2fde38b146104b5578063fbd7d081146104d4575b600080fd5b341561014957600080fd5b610160600160a060020a03600435166024356104e7565b005b341561016d57600080fd5b610175610700565b60405190815260200160405180910390f35b341561019257600080fd5b610175610706565b34156101a557600080fd5b61017561070c565b34156101b857600080fd5b610175610712565b34156101cb57600080fd5b610175610718565b34156101de57600080fd5b610160600160a060020a036004351661071e565b34156101fd57600080fd5b6101756107f3565b341561021057600080fd5b6101756107f9565b341561022357600080fd5b6101606107ff565b341561023657600080fd5b61016060046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061080a95505050505050565b34156102c557600080fd5b6101606004803560248101910135610893565b34156102e357600080fd5b6101606004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496506108ca95505050505050565b341561037257600080fd5b61037a610953565b604051600160a060020a03909116815260200160405180910390f35b34156103a157600080fd5b610175610962565b34156103b457600080fd5b610160600160a060020a0360043516602435610968565b34156103d657600080fd5b610160600435610a9c565b34156103ec57600080fd5b610175610b55565b34156103ff57600080fd5b610175610b5b565b341561041257600080fd5b610175610b61565b341561042557600080fd5b610160600160a060020a0360043516610b67565b341561044457600080fd5b610175610f0c565b341561045757600080fd5b61046b600160a060020a0360043516610f12565b60405194855292151560208501529015156040808501919091529015156060840152901515608083015260a0909101905180910390f35b34156104ad57600080fd5b610175610f4a565b34156104c057600080fd5b610160600160a060020a03600435166110ea565b34156104df57600080fd5b610175611185565b6000805433600160a060020a0390811691161461050357600080fd5b600754158061051457506007544211155b156106fb57600160a060020a0383166000908152600160205260409020548214806105465750600160a060020a038316155b15610550576106fb565b600160a060020a0383166000908152600160205260409020541580156105765750600082115b156105975760035461058f90600163ffffffff61118b16565b6003556105d8565b600160a060020a0383166000908152600160205260408120541180156105bb575081155b156105d8576003546105d490600163ffffffff6111a116565b6003555b600160a060020a038316600090815260016020526040902054821161062557600160a060020a038316600090815260016020526040902054610620908363ffffffff6111a116565b61064f565b600160a060020a03831660009081526001602052604090205461064f90839063ffffffff6111a116565b600160a060020a03841660009081526001602052604090205490915082111561068d57600254610685908263ffffffff61118b16565b6002556106a4565b6002546106a0908263ffffffff6111a116565b6002555b600160a060020a038084166000818152600160205260409081902085905590913316907f531b6d98182f354ef73d680007a0fa84a81fa4a320e289e4f826150ad104fb1a9085905190815260200160405180910390a35b505050565b600c5481565b600e5481565b60055481565b60035481565b600d5481565b60005433600160a060020a0390811691161461073957600080fd5b600160a060020a03811660009081526001602052604081205411801561077c5750600160a060020a0381166000908152600160208190526040909120015460ff16155b156107e65761078a81610b67565b600160a060020a0381166000908152600160208190526040909120808201805460ff1916909217909155546002546107c79163ffffffff6111a116565b6002556003546107de90600163ffffffff6111a116565b6003556107f0565b6107ee610f4a565b505b50565b60095481565b60085481565b61080833610b67565b565b6000805433600160a060020a0390811691161461082657600080fd5b600754158061083757506007544211155b156106fb57815183511461084a57600080fd5b5060005b82518110156106fb5761088b83828151811061086657fe5b9060200190602002015183838151811061087c57fe5b90602001906020020151610968565b60010161084e565b60005b818110156106fb576108c28383838181106108ad57fe5b90506020020135600160a060020a0316610b67565b600101610896565b6000805433600160a060020a039081169116146108e657600080fd5b60075415806108f757506007544211155b156106fb57815183511461090a57600080fd5b5060005b82518110156106fb5761094b83828151811061092657fe5b9060200190602002015183838151811061093c57fe5b906020019060200201516104e7565b60010161090e565b600054600160a060020a031681565b60025481565b60005433600160a060020a0390811691161461098357600080fd5b600754158061099457506007544211155b156107ee578015806109ad5750600160a060020a038216155b156109b7576107ee565b600160a060020a03821660009081526001602052604090205415156109ee576003546109ea90600163ffffffff61118b16565b6003555b600160a060020a038216600090815260016020526040902054610a17908263ffffffff61118b16565b600160a060020a038316600090815260016020526040902055600254610a43908263ffffffff61118b16565b600255600160a060020a03808316600081815260016020526040908190205491923316917f531b6d98182f354ef73d680007a0fa84a81fa4a320e289e4f826150ad104fb1a915190815260200160405180910390a35050565b60005433600160a060020a03908116911614610ab757600080fd5b6007541580610ac857506007544211155b156107f0576007819055610ae5816276a70063ffffffff61118b16565b600855610afb8162ed4e0063ffffffff61118b16565b600955610b1281630163f50063ffffffff61118b16565b600a55600160a060020a0333167fc7ad31b0c99a40aa43822fbc49a68cf7f3eb3d52152a5c01a7f636e4481cf43f8260405190815260200160405180910390a250565b600a5481565b60075481565b60045481565b600160a060020a0381166000908152600160205260408120548190118015610bac5750600160a060020a0382166000908152600160208190526040909120015460ff16155b1515610bb757600080fd5b506000610bc2610f4a565b50600160a060020a03821660009081526001602081905260409091200154610100900460ff16158015610bf757506008544210155b15610c7957600454600b54600160a060020a038416600090815260016020526040902054610c4d92610c40929091610c349163ffffffff6111b316565b9063ffffffff6111d716565b829063ffffffff61118b16565b600160a060020a038316600090815260016020819052604090912001805461ff00191661010017905590505b600160a060020a0382166000908152600160208190526040909120015462010000900460ff16158015610cae57506009544210155b15610d1957600554600c54600160a060020a038416600090815260016020526040902054610ceb92610c40929091610c349163ffffffff6111b316565b600160a060020a038316600090815260016020819052604090912001805462ff000019166201000017905590505b600160a060020a038216600090815260016020819052604090912001546301000000900460ff16158015610d4f5750600a544210155b15610dbc57600654600d54600160a060020a038416600090815260016020526040902054610d8c92610c40929091610c349163ffffffff6111b316565b600160a060020a038316600090815260016020819052604090912001805463ff0000001916630100000017905590505b60008111156107ee57600e54610dd8908263ffffffff61118b16565b600e5560008054600160a060020a0316906303d756cb90604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610e2457600080fd5b6102c65a03f11515610e3557600080fd5b50505060405180519050600160a060020a031663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610e9b57600080fd5b6102c65a03f11515610eac57600080fd5b505050604051805190501515610ec157600080fd5b81600160a060020a031633600160a060020a03167fd06980f1b54006ca63e8ddd2f4dafe76e8bcd6e7d7f333296f778781626af4268360405190815260200160405180910390a35050565b60065481565b6001602081905260009182526040909120805491015460ff808216916101008104821691620100008204811691630100000090041685565b600080600854118015610f5f57506008544210155b8015610f6b5750600454155b15610f77576002546004555b6000600954118015610f8b57506009544210155b8015610f975750600554155b15610fa3576002546005555b6000600a54118015610fb75750600a544210155b8015610fc35750600654155b156110e357600254600655600e54600c54600b54600080546110df94936110d39390926110c792600160a060020a0316906303d756cb90604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561102f57600080fd5b6102c65a03f1151561104057600080fd5b50505060405180519050600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156110a057600080fd5b6102c65a03f115156110b157600080fd5b505050604051805191905063ffffffff6111a116565b9063ffffffff6111a116565b9063ffffffff61118b16565b600d555b5060025490565b60005433600160a060020a0390811691161461110557600080fd5b600160a060020a038116151561111a57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600b5481565b60008282018381101561119a57fe5b9392505050565b6000828211156111ad57fe5b50900390565b60008282028315806111cf57508284828115156111cc57fe5b04145b151561119a57fe5b60008082848115156111e557fe5b049493505050505600a165627a7a723058208e0e453ba1af71e377353df5b320a68f5eb4464912309a463b470b3618b12615002900000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000005ca4ec2a79a7f67000000",
  "constructorArguments": "00000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000000000000000000000005ca4ec2a79a7f67000000"
}