{
  "address": "0x03aa13998842a506dbce6f2c10a19deca7ee68e2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TopPlayerToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-28\n*/\n\npragma solidity ^ 0.4 .24;\n\n// File: node_modules\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n   * @dev Multiplies two numbers, throws on overflow.\n   */\n  function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n   * @dev Integer division of two numbers, truncating the quotient.\n   */\n  function div(uint256 a, uint256 b) internal pure returns(uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n   */\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n   * @dev Adds two numbers, throws on overflow.\n   */\n  function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns(uint256);\n\n  function balanceOf(address who) public view returns(uint256);\n\n  function transfer(address to, uint256 value) public returns(bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath\n  for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n   * @dev Total number of tokens in existence\n   */\n  function totalSupply() public view returns(uint256) {\n    return totalSupply_;\n  }\n\n  /**\n   * @dev Transfer token for a specified address\n   * @param _to The address to transfer to.\n   * @param _value The amount to be transferred.\n   */\n  function transfer(address _to, uint256 _value) public returns(bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address.\n   * @param _owner The address to query the the balance of.\n   * @return An uint256 representing the amount owned by the passed address.\n   */\n  function balanceOf(address _owner) public view returns(uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n  public view returns(uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n  public returns(bool);\n\n  function approve(address spender, uint256 value) public returns(bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping(address => mapping(address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n  public\n  returns(bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns(bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n  )\n  public\n  view\n  returns(uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n  public\n  returns(bool) {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n  public\n  returns(bool) {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\PausableToken.sol\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n  public\n  whenNotPaused\n  returns(bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n  public\n  whenNotPaused\n  returns(bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n  public\n  whenNotPaused\n  returns(bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n  public\n  whenNotPaused\n  returns(bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n  public\n  whenNotPaused\n  returns(bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n// File: contracts\\TopPlayerToken.sol\n\n/*****************************************************************************\n *\n *Copyright 2018 TopPlayer\n *\n *Licensed under the Apache License, Version 2.0 (the \"License\");\n *you may not use this file except in compliance with the License.\n *You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *Unless required by applicable law or agreed to in writing, software\n *distributed under the License is distributed on an \"AS IS\" BASIS,\n *WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *See the License for the specific language governing permissions and\n *limitations under the License.\n *\n *****************************************************************************/\n\ncontract TopPlayerToken is PausableToken {\n  using SafeMath\n  for uint256;\n\n  // ERC20 constants\n  string public name = \"Mu Chen Top Players Original\";\n  string public symbol = \"MCTP-ORG\";\n  string public standard = \"ERC20\";\n\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\n\n  uint256 public constant INITIAL_SUPPLY = 20 * (10 ** 8) * (10 ** 18);\n\n  event ReleaseTarget(address target);\n\n  mapping(address => TimeLock[]) public allocations;\n\n  address[] public receiptors;\n\n  address[] public froms;\n  address[] public tos;\n  uint[] public timess;\n  uint256[] public balancess;\n  uint[] public createTimes;\n\n  struct TimeLock {\n    uint time;\n    uint256 balance;\n    uint createTime;\n  }\n\n  /*Here is the constructor function that is executed when the instance is created*/\n  constructor() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n  }\n\n  function getAllocations() public view returns(address[], address[],  uint[], uint256[], uint[]){\n    getInfos();\n    return (froms, tos, timess, balancess, createTimes); \n  }\n\n  /**\n   * @dev transfer token for a specified address if transfer is open\n   * @param _to The address to transfer to.\n   * @param _value The amount to be transferred.\n   */\n  function transfer(address _to, uint256 _value) public returns(bool) {\n    require(canSubAllocation(msg.sender, _value));\n\n    subAllocation(msg.sender);\n\n    return super.transfer(_to, _value);\n  }\n\n  function canSubAllocation(address sender, uint256 sub_value) private constant returns(bool) {\n    if (sub_value == 0) {\n      return false;\n    }\n\n    if (balances[sender] < sub_value) {\n      return false;\n    }\n\n    uint256 alllock_sum = 0;\n    for (uint j = 0; j < allocations[sender].length; j++) {\n      if (allocations[sender][j].time >= block.timestamp) {\n        alllock_sum = alllock_sum.add(allocations[sender][j].balance);\n      }\n    }\n\n    uint256 can_unlock = balances[sender].sub(alllock_sum);\n\n    return can_unlock >= sub_value;\n  }\n\n  function subAllocation(address sender) private {\n    for (uint j = 0; j < allocations[sender].length; j++) {\n      if (allocations[sender][j].time < block.timestamp) {\n        allocations[sender][j].balance = 0;\n      }\n    }\n  }\n\n  function setAllocation(address _address, uint256 total_value, uint time, uint256 balanceRequire) public onlyOwner returns(bool) {\n    uint256 sum = 0;\n    sum = sum.add(balanceRequire);\n\n    require(total_value >= sum);\n\n    require(balances[msg.sender] >= sum);\n\n    uint256 createTime;\n\n    if(allocations[_address].length == 0){\n      receiptors.push(_address);\n    }\n\n    bool find = false;\n\n    for (uint j = 0; j < allocations[_address].length; j++) {\n      if (allocations[_address][j].time == time) {\n        allocations[_address][j].balance = allocations[_address][j].balance.add(balanceRequire);\n        find = true;\n        break;\n      }\n    }\n\n    if (!find) {\n      createTime = now;\n      allocations[_address].push(TimeLock(time, balanceRequire, createTime));\n    }\n\n    bool result = super.transfer(_address, total_value);\n\n    emit Transferred(msg.sender, _address, createTime, total_value, time);\n\n    return result;\n  }\n\n  function releaseAllocation(address target) public onlyOwner {\n    require(balances[target] > 0);\n\n    for (uint j = 0; j < allocations[target].length; j++) {\n      allocations[target][j].balance = 0;\n    }\n\n    emit ReleaseTarget(target);\n  }\n\n  event Transferred(address from, address to, uint256 createAt, uint256 total_value, uint time);\n\n  function getInfos() public {\n    if (msg.sender == owner){\n      for (uint i=0; i<receiptors.length; i++){\n        for (uint j=0; j<allocations[receiptors[i]].length; j++){\n          froms.push(owner);\n          tos.push(receiptors[i]);\n          timess.push(allocations[receiptors[i]][j].time);\n          balancess.push(allocations[receiptors[i]][j].balance);\n          createTimes.push(allocations[receiptors[i]][j].createTime);\n        }\n      }\n    }else{\n      for (uint k=0; k<allocations[msg.sender].length; k++){\n        froms.push(owner);\n        tos.push(msg.sender);\n        timess.push(allocations[msg.sender][k].time);\n        balancess.push(allocations[msg.sender][k].balance);\n        createTimes.push(allocations[msg.sender][k].createTime);\n      }\n    }\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"createTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"froms\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balancess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getInfos\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllocations\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"releaseAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receiptors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"total_value\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"balanceRequire\",\"type\":\"uint256\"}],\"name\":\"setAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tos\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ReleaseTarget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"createAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6003805460a060020a60ff021916905560c0604052601c60808190527f4d75204368656e20546f7020506c6179657273204f726967696e616c0000000060a09081526200005091600491906200015f565b506040805180820190915260088082527f4d4354502d4f5247000000000000000000000000000000000000000000000000602090920191825262000097916005916200015f565b506040805180820190915260058082527f45524332300000000000000000000000000000000000000000000000000000006020909201918252620000de916006916200015f565b50348015620000ec57600080fd5b5060038054600160a060020a031916339081179091556b06765c793fa10079d0000000600181905560008281526020818152604080832084905580519384525191927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a362000204565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001a257805160ff1916838001178555620001d2565b82800160010185558215620001d2579182015b82811115620001d2578251825591602001919060010190620001b5565b50620001e0929150620001e4565b5090565b6200020191905b80821115620001e05760008155600101620001eb565b90565b611c7680620002146000396000f30060806040526004361061017f5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663010bc33c811461018457806306fdde03146101c6578063095ea7b3146102505780630d96cc301461028857806318160ddd146102bc57806323b872dd146102e35780632917707c1461030d5780632ff2e9dc14610325578063313ce5671461033a57806333f804f8146103655780633f4ba83a1461037d5780634ef8ddfa146103945780635a3b7e42146103ac5780635c975abb146103c1578063643d6dc0146103d657806365ed6e23146103eb578063661884631461056857806370a082311461058c578063715018a6146105ad5780638456cb59146105c25780638da5cb5b146105d757806395d89b41146105ec578063a9059cbb14610601578063bb30d79614610625578063d73dd62314610646578063dd62ed3e1461066a578063e535615314610691578063ebe0c840146106a9578063f2fde38b146106d3578063fdb356bd146106f4575b600080fd5b34801561019057600080fd5b506101a8600160a060020a036004351660243561070c565b60408051938452602084019290925282820152519081900360600190f35b3480156101d257600080fd5b506101db61074d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102155781810151838201526020016101fd565b50505050905090810190601f1680156102425780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025c57600080fd5b50610274600160a060020a03600435166024356107db565b604080519115158252519081900360200190f35b34801561029457600080fd5b506102a0600435610806565b60408051600160a060020a039092168252519081900360200190f35b3480156102c857600080fd5b506102d161082e565b60408051918252519081900360200190f35b3480156102ef57600080fd5b50610274600160a060020a0360043581169060243516604435610834565b34801561031957600080fd5b506102d1600435610861565b34801561033157600080fd5b506102d1610880565b34801561034657600080fd5b5061034f610890565b6040805160ff9092168252519081900360200190f35b34801561037157600080fd5b506102d1600435610895565b34801561038957600080fd5b506103926108a3565b005b3480156103a057600080fd5b506102d160043561091b565b3480156103b857600080fd5b506101db610929565b3480156103cd57600080fd5b50610274610984565b3480156103e257600080fd5b50610392610994565b3480156103f757600080fd5b50610400610da3565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b83811015610450578181015183820152602001610438565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b8381101561048f578181015183820152602001610477565b50505050905001868103845289818151815260200191508051906020019060200280838360005b838110156104ce5781810151838201526020016104b6565b50505050905001868103835288818151815260200191508051906020019060200280838360005b8381101561050d5781810151838201526020016104f5565b50505050905001868103825287818151815260200191508051906020019060200280838360005b8381101561054c578181015183820152602001610534565b505050509050019a505050505050505050505060405180910390f35b34801561057457600080fd5b50610274600160a060020a0360043516602435610f7c565b34801561059857600080fd5b506102d1600160a060020a0360043516610fa0565b3480156105b957600080fd5b50610392610fbb565b3480156105ce57600080fd5b50610392611029565b3480156105e357600080fd5b506102a06110a6565b3480156105f857600080fd5b506101db6110b5565b34801561060d57600080fd5b50610274600160a060020a0360043516602435611110565b34801561063157600080fd5b50610392600160a060020a036004351661113a565b34801561065257600080fd5b50610274600160a060020a036004351660243561121d565b34801561067657600080fd5b506102d1600160a060020a0360043581169060243516611241565b34801561069d57600080fd5b506102a060043561126c565b3480156106b557600080fd5b50610274600160a060020a036004351660243560443560643561127a565b3480156106df57600080fd5b50610392600160a060020a036004351661152c565b34801561070057600080fd5b506102a060043561154f565b60076020528160005260406000208181548110151561072757fe5b600091825260209091206003909102018054600182015460029092015490935090915083565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107d35780601f106107a8576101008083540402835291602001916107d3565b820191906000526020600020905b8154815290600101906020018083116107b657829003601f168201915b505050505081565b60035460009060a060020a900460ff16156107f557600080fd5b6107ff838361155d565b9392505050565b600980548290811061081457fe5b600091825260209091200154600160a060020a0316905081565b60015490565b60035460009060a060020a900460ff161561084e57600080fd5b6108598484846115c3565b949350505050565b600d80548290811061086f57fe5b600091825260209091200154905081565b6b06765c793fa10079d000000081565b601281565b600b80548290811061086f57fe5b600354600160a060020a031633146108ba57600080fd5b60035460a060020a900460ff1615156108d257600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600c80548290811061086f57fe5b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107d35780601f106107a8576101008083540402835291602001916107d3565b60035460a060020a900460ff1681565b60035460009081908190600160a060020a0316331415610c1f57600092505b600854831015610c1a57600091505b600760006008858154811015156109d557fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902054821015610c0f57600354600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117905560088054600a919085908110610a7257fe5b60009182526020808320909101548354600181018555938352908220909201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039093169290921790915560088054600b92600792909187908110610ad257fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020805484908110610b0257fe5b6000918252602080832060039092029091015483546001810185559383529082209092019190915560088054600c92600792909187908110610b4057fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020805484908110610b7057fe5b600091825260208083206001600390930201820154845492830185559383528220019190915560088054600d92600792909187908110610bac57fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020805484908110610bdc57fe5b600091825260208083206002600390930201919091015483546001818101865594845291909220015591909101906109c2565b6001909201916109b3565b610d9e565b5060005b33600090815260076020526040902054811015610d9e576003546009805460018082019092557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018054600160a060020a0390931673ffffffffffffffffffffffffffffffffffffffff19938416179055600a805491820190557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180543392168217905560009081526007602052604090208054600b919083908110610ce657fe5b600091825260208083206003909202909101548354600181018555938352818320909301929092553381526007909152604090208054600c919083908110610d2a57fe5b60009182526020808320600160039093020182015484549283018555938352808320909101929092553381526007909152604090208054600d919083908110610d6f57fe5b600091825260208083206002600390930201919091015483546001818101865594845291909220015501610c23565b505050565b6060806060806060610db3610994565b6009600a600b600c600d84805480602002602001604051908101604052809291908181526020018280548015610e1257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610df4575b5050505050945083805480602002602001604051908101604052809291908181526020018280548015610e6e57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610e50575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015610ec057602002820191906000526020600020905b815481526020019060010190808311610eac575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015610f1257602002820191906000526020600020905b815481526020019060010190808311610efe575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610f6457602002820191906000526020600020905b815481526020019060010190808311610f50575b50505050509050945094509450945094509091929394565b60035460009060a060020a900460ff1615610f9657600080fd5b6107ff838361173a565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a03163314610fd257600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600160a060020a0316331461104057600080fd5b60035460a060020a900460ff161561105757600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107d35780601f106107a8576101008083540402835291602001916107d3565b600061111c338361182a565b151561112757600080fd5b61113033611961565b6107ff8383611a09565b600354600090600160a060020a0316331461115457600080fd5b600160a060020a0382166000908152602081905260408120541161117757600080fd5b5060005b600160a060020a0382166000908152600760205260409020548110156111dd57600160a060020a03821660009081526007602052604081208054839081106111bf57fe5b6000918252602090912060016003909202018101919091550161117b565b60408051600160a060020a038416815290517f77acf83d8ae1daf38e0b975c5604b980483e7122b188970278f9480356fc85459181900360200190a15050565b60035460009060a060020a900460ff161561123757600080fd5b6107ff8383611a2d565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600880548290811061081457fe5b60035460009081908190819081908190600160a060020a0316331461129e57600080fd5b600094506112b2858863ffffffff611ac616565b9450848910156112c157600080fd5b336000908152602081905260409020548511156112dd57600080fd5b600160a060020a038a16600090815260076020526040902054151561135557600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038c161790555b60009250600091505b600160a060020a038a1660009081526007602052604090205482101561145457600160a060020a038a1660009081526007602052604090208054899190849081106113a557fe5b906000526020600020906003020160000154141561144957600160a060020a038a1660009081526007602052604090208054611407918991859081106113e757fe5b906000526020600020906003020160010154611ac690919063ffffffff16565b600160a060020a038b16600090815260076020526040902080548490811061142b57fe5b90600052602060002090600302016001018190555060019250611454565b60019091019061135e565b8215156114bb57600160a060020a038a16600090815260076020908152604080832081516060810183528c81528084018c81524293820184815283546001818101865594885295909620915160039095029091019384555190830155915160029091015593505b6114c58a8a611a09565b60408051338152600160a060020a038d166020820152808201879052606081018c9052608081018b905290519192507f719f07acaada4d190eb2be1296b8da03dcd2ea312d0c8d1e16f58768a7a9aa12919081900360a00190a19998505050505050505050565b600354600160a060020a0316331461154357600080fd5b61154c81611ad9565b50565b600a80548290811061081457fe5b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a03831615156115da57600080fd5b600160a060020a0384166000908152602081905260409020548211156115ff57600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561162f57600080fd5b600160a060020a038416600090815260208190526040902054611658908363ffffffff611b5716565b600160a060020a03808616600090815260208190526040808220939093559085168152205461168d908363ffffffff611ac616565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546116cf908363ffffffff611b5716565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561178f57336000908152600260209081526040808320600160a060020a03881684529091528120556117c4565b61179f818463ffffffff611b5716565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600080808084151561183f5760009350611958565b600160a060020a0386166000908152602081905260409020548511156118685760009350611958565b60009250600091505b600160a060020a03861660009081526007602052604090205482101561192657600160a060020a03861660009081526007602052604090208054429190849081106118b857fe5b60009182526020909120600390910201541061191b57600160a060020a038616600090815260076020526040902080546119189190849081106118f757fe5b90600052602060002090600302016001015484611ac690919063ffffffff16565b92505b600190910190611871565b600160a060020a03861660009081526020819052604090205461194f908463ffffffff611b5716565b90508481101593505b50505092915050565b60005b600160a060020a038216600090815260076020526040902054811015611a0557600160a060020a03821660009081526007602052604090208054429190839081106119ab57fe5b90600052602060002090600302016000015410156119fd57600160a060020a03821660009081526007602052604081208054839081106119e757fe5b9060005260206000209060030201600101819055505b600101611964565b5050565b60035460009060a060020a900460ff1615611a2357600080fd5b6107ff8383611b69565b336000908152600260209081526040808320600160a060020a0386168452909152812054611a61908363ffffffff611ac616565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b81810182811015611ad357fe5b92915050565b600160a060020a0381161515611aee57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115611b6357fe5b50900390565b6000600160a060020a0383161515611b8057600080fd5b33600090815260208190526040902054821115611b9c57600080fd5b33600090815260208190526040902054611bbc908363ffffffff611b5716565b3360009081526020819052604080822092909255600160a060020a03851681522054611bee908363ffffffff611ac616565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3506001929150505600a165627a7a72305820794eaf1ebd4c61e9aa1ef9bcf8434b45dc691b911765f6ffd37bcf64ab29fc0e0029"
}