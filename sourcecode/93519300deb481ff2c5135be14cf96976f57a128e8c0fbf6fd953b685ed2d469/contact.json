{
  "address": "0xd0d6b03cb90ec013c6a00ff60e30c3a350c1df94",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NamiTrade",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-01\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  function mul(uint a, uint b) internal pure returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal pure returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n/*\n* NamiMultiSigWallet smart contract-------------------------------\n*/\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\ncontract NamiMultiSigWallet {\n\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require(transactions[transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require(!(ownerCount > MAX_OWNER_COUNT\n            || _required > ownerCount\n            || _required == 0\n            || ownerCount == 0));\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function() public payable {\n        if (msg.value > 0)\n            emit Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    constructor(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i = 0; i < _owners.length; i++) {\n            require(!(isOwner[_owners[i]] || _owners[i] == 0));\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        emit OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++) {\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        emit OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++) {\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        emit OwnerRemoval(owner);\n        emit OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            // Transaction tx = transactions[transactionId];\n            transactions[transactionId].executed = true;\n            // tx.executed = true;\n            if (transactions[transactionId].destination.call.value(transactions[transactionId].value)(transactions[transactionId].data)) {\n                emit Execution(transactionId);\n            } else {\n                emit ExecutionFailure(transactionId);\n                transactions[transactionId].executed = false;\n            }\n        }\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination, \n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n        }\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed)\n                count += 1;\n        }\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        }\n        _confirmations = new address[](count);\n        for (i = 0; i < count; i++) {\n            _confirmations[i] = confirmationsTemp[i];\n        }\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        }\n        _transactionIds = new uint[](to - from);\n        for (i = from; i < to; i++) {\n            _transactionIds[i - from] = transactionIdsTemp[i];\n        }\n    }\n}\ncontract PresaleToken {\n    mapping (address => uint256) public balanceOf;\n    function burnTokens(address _owner) public;\n}\n /*\n * Contract that is working with ERC223 tokens\n */\n \n /**\n * @title Contract that will work with ERC223 tokens.\n */\n \ncontract ERC223ReceivingContract {\n/**\n * @dev Standard ERC223 function that will handle incoming token transfers.\n *\n * @param _from  Token sender address.\n * @param _value Amount of tokens.\n * @param _data  Transaction metadata.\n */\n    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool success);\n    function tokenFallbackBuyer(address _from, uint _value, address _buyer) public returns (bool success);\n    function tokenFallbackExchange(address _from, uint _value, uint _price) public returns (bool success);\n}\n// ERC20 token interface is implemented only partially.\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract NamiCrowdSale {\n    using SafeMath for uint256;\n\n    /// NAC Broker Presale Token\n    /// @dev Constructor\n    constructor(address _escrow, address _namiMultiSigWallet, address _namiPresale) public {\n        require(_namiMultiSigWallet != 0x0);\n        escrow = _escrow;\n        namiMultiSigWallet = _namiMultiSigWallet;\n        namiPresale = _namiPresale;\n    }\n\n\n    /*/\n     *  Constants\n    /*/\n\n    string public name = \"Nami ICO\";\n    string public  symbol = \"NAC\";\n    uint   public decimals = 18;\n\n    bool public TRANSFERABLE = false; // default not transferable\n\n    uint public constant TOKEN_SUPPLY_LIMIT = 1000000000 * (1 ether / 1 wei);\n    \n    uint public binary = 0;\n\n    /*/\n     *  Token state\n    /*/\n\n    enum Phase {\n        Created,\n        Running,\n        Paused,\n        Migrating,\n        Migrated\n    }\n\n    Phase public currentPhase = Phase.Created;\n    uint public totalSupply = 0; // amount of tokens already sold\n\n    // escrow has exclusive priveleges to call administrative\n    // functions on this contract.\n    address public escrow;\n\n    // Gathered funds can be withdraw only to namimultisigwallet's address.\n    address public namiMultiSigWallet;\n\n    // nami presale contract\n    address public namiPresale;\n\n    // Crowdsale manager has exclusive priveleges to burn presale tokens.\n    address public crowdsaleManager;\n    \n    // binary option address\n    address public binaryAddress;\n    \n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    modifier onlyCrowdsaleManager() {\n        require(msg.sender == crowdsaleManager); \n        _; \n    }\n\n    modifier onlyEscrow() {\n        require(msg.sender == escrow);\n        _;\n    }\n    \n    modifier onlyTranferable() {\n        require(TRANSFERABLE);\n        _;\n    }\n    \n    modifier onlyNamiMultisig() {\n        require(msg.sender == namiMultiSigWallet);\n        _;\n    }\n    \n    /*/\n     *  Events\n    /*/\n\n    event LogBuy(address indexed owner, uint value);\n    event LogBurn(address indexed owner, uint value);\n    event LogPhaseSwitch(Phase newPhase);\n    // Log migrate token\n    event LogMigrate(address _from, address _to, uint256 amount);\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /*/\n     *  Public functions\n    /*/\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    // Transfer the balance from owner's account to another account\n    // only escrow can send token (to send token private sale)\n    function transferForTeam(address _to, uint256 _value) public\n        onlyEscrow\n    {\n        _transfer(msg.sender, _to, _value);\n    }\n    \n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public\n        onlyTranferable\n    {\n        _transfer(msg.sender, _to, _value);\n    }\n    \n       /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) \n        public\n        onlyTranferable\n        returns (bool success)\n    {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        onlyTranferable\n        returns (bool success) \n    {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        onlyTranferable\n        returns (bool success) \n    {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    // allows transfer token\n    function changeTransferable () public\n        onlyEscrow\n    {\n        TRANSFERABLE = !TRANSFERABLE;\n    }\n    \n    // change escrow\n    function changeEscrow(address _escrow) public\n        onlyNamiMultisig\n    {\n        require(_escrow != 0x0);\n        escrow = _escrow;\n    }\n    \n    // change binary value\n    function changeBinary(uint _binary)\n        public\n        onlyEscrow\n    {\n        binary = _binary;\n    }\n    \n    // change binary address\n    function changeBinaryAddress(address _binaryAddress)\n        public\n        onlyEscrow\n    {\n        require(_binaryAddress != 0x0);\n        binaryAddress = _binaryAddress;\n    }\n    \n    /*\n    * price in ICO:\n    * first week: 1 ETH = 2400 NAC\n    * second week: 1 ETH = 23000 NAC\n    * 3rd week: 1 ETH = 2200 NAC\n    * 4th week: 1 ETH = 2100 NAC\n    * 5th week: 1 ETH = 2000 NAC\n    * 6th week: 1 ETH = 1900 NAC\n    * 7th week: 1 ETH = 1800 NAC\n    * 8th week: 1 ETH = 1700 nac\n    * time: \n    * 1517443200: Thursday, February 1, 2018 12:00:00 AM\n    * 1518048000: Thursday, February 8, 2018 12:00:00 AM\n    * 1518652800: Thursday, February 15, 2018 12:00:00 AM\n    * 1519257600: Thursday, February 22, 2018 12:00:00 AM\n    * 1519862400: Thursday, March 1, 2018 12:00:00 AM\n    * 1520467200: Thursday, March 8, 2018 12:00:00 AM\n    * 1521072000: Thursday, March 15, 2018 12:00:00 AM\n    * 1521676800: Thursday, March 22, 2018 12:00:00 AM\n    * 1522281600: Thursday, March 29, 2018 12:00:00 AM\n    */\n    function getPrice() public view returns (uint price) {\n        if (now < 1517443200) {\n            // presale\n            return 3450;\n        } else if (1517443200 < now && now <= 1518048000) {\n            // 1st week\n            return 2400;\n        } else if (1518048000 < now && now <= 1518652800) {\n            // 2nd week\n            return 2300;\n        } else if (1518652800 < now && now <= 1519257600) {\n            // 3rd week\n            return 2200;\n        } else if (1519257600 < now && now <= 1519862400) {\n            // 4th week\n            return 2100;\n        } else if (1519862400 < now && now <= 1520467200) {\n            // 5th week\n            return 2000;\n        } else if (1520467200 < now && now <= 1521072000) {\n            // 6th week\n            return 1900;\n        } else if (1521072000 < now && now <= 1521676800) {\n            // 7th week\n            return 1800;\n        } else if (1521676800 < now && now <= 1522281600) {\n            // 8th week\n            return 1700;\n        } else {\n            return binary;\n        }\n    }\n\n\n    function() payable public {\n        buy(msg.sender);\n    }\n    \n    \n    function buy(address _buyer) payable public {\n        // Available only if presale is running.\n        require(currentPhase == Phase.Running);\n        // require ICO time or binary option\n        require(now <= 1522281600 || msg.sender == binaryAddress);\n        require(msg.value != 0);\n        uint newTokens = msg.value * getPrice();\n        require (totalSupply + newTokens < TOKEN_SUPPLY_LIMIT);\n        // add new token to buyer\n        balanceOf[_buyer] = balanceOf[_buyer].add(newTokens);\n        // add new token to totalSupply\n        totalSupply = totalSupply.add(newTokens);\n        emit LogBuy(_buyer,newTokens);\n        emit Transfer(this,_buyer,newTokens);\n    }\n    \n\n    /// @dev Returns number of tokens owned by given address.\n    /// @param _owner Address of token owner.\n    function burnTokens(address _owner) public\n        onlyCrowdsaleManager\n    {\n        // Available only during migration phase\n        require(currentPhase == Phase.Migrating);\n\n        uint tokens = balanceOf[_owner];\n        require(tokens != 0);\n        balanceOf[_owner] = 0;\n        totalSupply -= tokens;\n        emit LogBurn(_owner, tokens);\n        emit Transfer(_owner, crowdsaleManager, tokens);\n\n        // Automatically switch phase when migration is done.\n        if (totalSupply == 0) {\n            currentPhase = Phase.Migrated;\n            emit LogPhaseSwitch(Phase.Migrated);\n        }\n    }\n\n\n    /*/\n     *  Administrative functions\n    /*/\n    function setPresalePhase(Phase _nextPhase) public\n        onlyEscrow\n    {\n        bool canSwitchPhase\n            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\n            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\n                // switch to migration phase only if crowdsale manager is set\n            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\n                && _nextPhase == Phase.Migrating\n                && crowdsaleManager != 0x0)\n            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\n                // switch to migrated only if everyting is migrated\n            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\n                && totalSupply == 0);\n\n        require(canSwitchPhase);\n        currentPhase = _nextPhase;\n        emit LogPhaseSwitch(_nextPhase);\n    }\n\n\n    function withdrawEther(uint _amount) public\n        onlyEscrow\n    {\n        require(namiMultiSigWallet != 0x0);\n        // Available at any phase.\n        if (address(this).balance > 0) {\n            namiMultiSigWallet.transfer(_amount);\n        }\n    }\n    \n    function safeWithdraw(address _withdraw, uint _amount) public\n        onlyEscrow\n    {\n        NamiMultiSigWallet namiWallet = NamiMultiSigWallet(namiMultiSigWallet);\n        if (namiWallet.isOwner(_withdraw)) {\n            _withdraw.transfer(_amount);\n        }\n    }\n\n\n    function setCrowdsaleManager(address _mgr) public\n        onlyEscrow\n    {\n        // You can't change crowdsale contract when migration is in progress.\n        require(currentPhase != Phase.Migrating);\n        crowdsaleManager = _mgr;\n    }\n\n    // internal migrate migration tokens\n    function _migrateToken(address _from, address _to)\n        internal\n    {\n        PresaleToken presale = PresaleToken(namiPresale);\n        uint256 newToken = presale.balanceOf(_from);\n        require(newToken > 0);\n        // burn old token\n        presale.burnTokens(_from);\n        // add new token to _to\n        balanceOf[_to] = balanceOf[_to].add(newToken);\n        // add new token to totalSupply\n        totalSupply = totalSupply.add(newToken);\n        emit LogMigrate(_from, _to, newToken);\n        emit Transfer(this,_to,newToken);\n    }\n\n    // migate token function for Nami Team\n    function migrateToken(address _from, address _to) public\n        onlyEscrow\n    {\n        _migrateToken(_from, _to);\n    }\n\n    // migrate token for investor\n    function migrateForInvestor() public {\n        _migrateToken(msg.sender, msg.sender);\n    }\n\n    // Nami internal exchange\n    \n    // event for Nami exchange\n    event TransferToBuyer(address indexed _from, address indexed _to, uint _value, address indexed _seller);\n    event TransferToExchange(address indexed _from, address indexed _to, uint _value, uint _price);\n    \n    \n    /**\n     * @dev Transfer the specified amount of tokens to the NamiExchange address.\n     *      Invokes the `tokenFallbackExchange` function.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallbackExchange` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _price price to sell token.\n     */\n     \n    function transferToExchange(address _to, uint _value, uint _price) public {\n        uint codeLength;\n        \n        assembly {\n            codeLength := extcodesize(_to)\n        }\n        \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(msg.sender,_to,_value);\n        if (codeLength > 0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallbackExchange(msg.sender, _value, _price);\n            emit TransferToExchange(msg.sender, _to, _value, _price);\n        }\n    }\n    \n    /**\n     * @dev Transfer the specified amount of tokens to the NamiExchange address.\n     *      Invokes the `tokenFallbackBuyer` function.\n     *      The token transfer fails if the recipient is a contract\n     *      but does not implement the `tokenFallbackBuyer` function\n     *      or the fallback function to receive funds.\n     *\n     * @param _to    Receiver address.\n     * @param _value Amount of tokens that will be transferred.\n     * @param _buyer address of seller.\n     */\n     \n    function transferToBuyer(address _to, uint _value, address _buyer) public {\n        uint codeLength;\n        \n        assembly {\n            codeLength := extcodesize(_to)\n        }\n        \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(msg.sender,_to,_value);\n        if (codeLength > 0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallbackBuyer(msg.sender, _value, _buyer);\n            emit TransferToBuyer(msg.sender, _to, _value, _buyer);\n        }\n    }\n//-------------------------------------------------------------------------------------------------------\n}\ncontract NamiTrade{\n    using SafeMath for uint256;\n\n    uint public minNac = 0; // min NAC deposit\n    uint public minWithdraw =  2000 * 10**18;\n    uint public maxWithdraw = 50000 * 10**18; // max NAC withdraw one time\n\n    constructor(address _escrow, address _namiMultiSigWallet, address _namiAddress) public {\n        require(_namiMultiSigWallet != 0x0);\n        escrow = _escrow;\n        namiMultiSigWallet = _namiMultiSigWallet;\n        NamiAddr = _namiAddress;\n        // init for migration\n        balanceOf[_escrow] = 7850047931491270769372792;\n        totalSupply = 7850047931491270769372792;\n    }\n\n\n    // balance of pool\n    uint public NetfBalance;\n    /**\n     * NetfRevenueBalance:      NetfRevenue[_roundIndex].currentNAC\n     * NlfBalance:              NLFunds[currentRound].currentNAC\n     * NlfRevenueBalance:       listSubRoundNLF[currentRound][_subRoundIndex].totalNacInSubRound\n     */\n\n\n    // escrow has exclusive priveleges to call administrative\n    // functions on this contract.\n    address public escrow;\n\n    // Gathered funds can be withdraw only to namimultisigwallet's address.\n    address public namiMultiSigWallet;\n\n    /// address of Nami token\n    address public NamiAddr;\n\n    modifier onlyEscrow() {\n        require(msg.sender == escrow);\n        _;\n    }\n\n    modifier onlyNami {\n        require(msg.sender == NamiAddr);\n        _;\n    }\n\n    modifier onlyNamiMultisig {\n        require(msg.sender == namiMultiSigWallet);\n        _;\n    }\n\n    modifier onlyController {\n        require(isController[msg.sender] == true);\n        _;\n    }\n\n\n    /*\n    *\n    * list setting function\n    */\n    mapping(address => bool) public isController;\n\n\n\n    // set controller address\n    /**\n     * make new controller\n     * require input address is not a controller\n     * execute any time in sc state\n     */\n    function setController(address _controller)\n    public\n    onlyEscrow\n    {\n        require(!isController[_controller]);\n        isController[_controller] = true;\n    }\n\n    /**\n     * remove controller\n     * require input address is a controller\n     * execute any time in sc state\n     */\n    function removeController(address _controller)\n    public\n    onlyEscrow\n    {\n        require(isController[_controller]);\n        isController[_controller] = false;\n    }\n\n\n    // change minimum nac to deposit\n    function changeMinNac(uint _minNAC) public\n    onlyEscrow\n    {\n        require(_minNAC != 0);\n        minNac = _minNAC;\n    }\n\n    // change escrow\n    function changeEscrow(address _escrow) public\n    onlyNamiMultisig\n    {\n        require(_escrow != 0x0);\n        escrow = _escrow;\n    }\n\n\n    // min and max for withdraw nac\n    function changeMinWithdraw(uint _minWithdraw) public\n    onlyEscrow\n    {\n        require(_minWithdraw != 0);\n        minWithdraw = _minWithdraw;\n    }\n\n    function changeMaxWithdraw(uint _maxNac) public\n    onlyEscrow\n    {\n        require(_maxNac != 0);\n        maxWithdraw = _maxNac;\n    }\n\n    /// @dev withdraw ether to nami multisignature wallet, only escrow can call\n    /// @param _amount value ether in wei to withdraw\n    function withdrawEther(uint _amount) public\n    onlyEscrow\n    {\n        require(namiMultiSigWallet != 0x0);\n        // Available at any phase.\n        if (address(this).balance > 0) {\n            namiMultiSigWallet.transfer(_amount);\n        }\n    }\n\n\n    /// @dev withdraw NAC to nami multisignature wallet, only escrow can call\n    /// @param _amount value NAC to withdraw\n    function withdrawNac(uint _amount) public\n    onlyEscrow\n    {\n        require(namiMultiSigWallet != 0x0);\n        // Available at any phase.\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n        if (namiToken.balanceOf(address(this)) > 0) {\n            namiToken.transfer(namiMultiSigWallet, _amount);\n        }\n    }\n\n    /*\n    *\n    *\n    * List event\n    */\n    event Deposit(address indexed user, uint amount, uint timeDeposit);\n    event Withdraw(address indexed user, uint amount, uint timeWithdraw);\n\n    event PlaceBuyFciOrder(address indexed investor, uint amount, uint timePlaceOrder);\n    event PlaceSellFciOrder(address indexed investor, uint amount, uint timePlaceOrder);\n    event InvestToNLF(address indexed investor, uint amount, uint timeInvest);\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////fci token function///////////////////////////////////////////////////////////////\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    string public name = \"Nami Trade\";\n    string public symbol = \"FCI\";\n    uint8 public decimals = 18;\n\n    uint256 public totalSupply;\n\n    //  paus phrase to compute ratio fci\n    bool public isPause;\n\n    // time expires of price fci\n    uint256 public timeExpires;\n\n    // price fci : if 1 fci = 2 nac => priceFci = 2000000\n    uint public fciDecimals = 1000000;\n    uint256 public priceFci;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies someone buy fci by NAC\n    event BuyFci(address investor, uint256 valueNac, uint256 valueFci, uint timeBuyFci);\n    event SellFci(address investor, uint256 valueNac, uint256 valueFci, uint timeSellFci);\n    event WithdrawRound(address investor, uint256 valueNac, uint timeWithdraw);\n    \n    modifier onlyRunning {\n        require(isPause == false);\n        _;\n    }\n\n\n    /**\n     * controller update balance of Netf to smart contract\n     */\n    function addNacToNetf(uint _valueNac) public onlyController {\n        NetfBalance = NetfBalance.add(_valueNac);\n    }\n\n\n    /**\n     * controller update balance of Netf to smart contract\n     */\n    function removeNacFromNetf(uint _valueNac) public onlyController {\n        NetfBalance = NetfBalance.sub(_valueNac);\n    }\n\n    //////////////////////////////////////////////////////buy and sell fci function//////////////////////////////////////////////////////////\n    /**\n    *  Setup pause phrase\n    */\n    function changePause() public onlyController {\n        isPause = !isPause;\n    }\n\n    /**\n     *\n     *\n     * update price fci daily\n     */\n    function updatePriceFci(uint _price, uint _timeExpires) onlyController public {\n        require(now > timeExpires);\n        priceFci = _price;\n        timeExpires = _timeExpires;\n    }\n\n    /**\n     * before buy users need to place buy Order\n     * function buy fci\n     * only controller can execute in phrase running\n     */\n    function buyFci(address _buyer, uint _valueNac) onlyController public {\n        // require fci is Running\n        require(isPause == false && now < timeExpires);\n        // require buyer not is 0x0 address\n        require(_buyer != 0x0);\n        require( _valueNac * fciDecimals > priceFci);\n        uint fciReceive = (_valueNac.mul(fciDecimals))/priceFci;\n\n        // construct fci\n        balanceOf[_buyer] = balanceOf[_buyer].add(fciReceive);\n        totalSupply = totalSupply.add(fciReceive);\n        NetfBalance = NetfBalance.add(_valueNac);\n\n        emit Transfer(address(this), _buyer, fciReceive);\n        emit BuyFci(_buyer, _valueNac, fciReceive, now);\n    }\n\n\n    /**\n     *\n     * before controller buy fci for user\n     * user nead to place sell order\n     */\n    function placeSellFciOrder(uint _valueFci) onlyRunning public {\n        require(balanceOf[msg.sender] >= _valueFci && _valueFci > 0);\n        _transfer(msg.sender, address(this), _valueFci);\n        emit PlaceSellFciOrder(msg.sender, _valueFci, now);\n    }\n\n    /**\n     *\n     * function sellFci\n     * only controller can execute in phare running\n     */\n    function sellFci(address _seller, uint _valueFci) onlyController public {\n        // require fci is Running\n        require(isPause == false && now < timeExpires);\n        // require buyer not is 0x0 address\n        require(_seller != 0x0);\n        require(_valueFci * priceFci > fciDecimals);\n        uint nacReturn = (_valueFci.mul(priceFci))/fciDecimals;\n\n        // destroy fci\n        balanceOf[address(this)] = balanceOf[address(this)].sub(_valueFci);\n        totalSupply = totalSupply.sub(_valueFci);\n\n        // update NETF balance\n        NetfBalance = NetfBalance.sub(nacReturn);\n\n        // send NAC\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n        namiToken.transfer(_seller, nacReturn);\n\n        emit SellFci(_seller, nacReturn, _valueFci, now);\n    }\n\n    /////////////////////////////////////////////////////NETF Revenue function///////////////////////////////////////////////////////////////\n    struct ShareHolderNETF {\n        uint stake;\n        bool isWithdrawn;\n    }\n\n    struct RoundNetfRevenue {\n        bool isOpen;\n        uint currentNAC;\n        uint totalFci;\n        bool withdrawable;\n    }\n\n    uint public currentNetfRound;\n\n    mapping (uint => RoundNetfRevenue) public NetfRevenue;\n    mapping (uint => mapping(address => ShareHolderNETF)) public usersNETF;\n\n    // 1. open Netf round\n    /**\n     * first controller open one round for netf revenue\n     */\n    function openNetfRevenueRound(uint _roundIndex) onlyController public {\n        require(NetfRevenue[_roundIndex].isOpen == false);\n        currentNetfRound = _roundIndex;\n        NetfRevenue[_roundIndex].isOpen = true;\n    }\n\n    /**\n     *\n     * this function update balance of NETF revenue funds add NAC to funds\n     * only executable if round open and round not withdraw yet\n     */\n    function depositNetfRevenue(uint _valueNac) onlyController public {\n        require(NetfRevenue[currentNetfRound].isOpen == true && NetfRevenue[currentNetfRound].withdrawable == false);\n        NetfRevenue[currentNetfRound].currentNAC = NetfRevenue[currentNetfRound].currentNAC.add(_valueNac);\n    }\n\n    /**\n     *\n     * this function update balance of NETF Funds remove NAC from funds\n     * only executable if round open and round not withdraw yet\n     */\n    function withdrawNetfRevenue(uint _valueNac) onlyController public {\n        require(NetfRevenue[currentNetfRound].isOpen == true && NetfRevenue[currentNetfRound].withdrawable == false);\n        NetfRevenue[currentNetfRound].currentNAC = NetfRevenue[currentNetfRound].currentNAC.sub(_valueNac);\n    }\n\n    // switch to pause phrase here\n\n    /**\n     * after pause all investor to buy, sell and exchange fci on the market\n     * controller or investor latch final fci of current round\n     */\n    function latchTotalFci(uint _roundIndex) onlyController public {\n        require(isPause == true && NetfRevenue[_roundIndex].isOpen == true);\n        require(NetfRevenue[_roundIndex].withdrawable == false);\n        NetfRevenue[_roundIndex].totalFci = totalSupply;\n    }\n\n    function latchFciUserController(uint _roundIndex, address _investor) onlyController public {\n        require(isPause == true && NetfRevenue[_roundIndex].isOpen == true);\n        require(NetfRevenue[_roundIndex].withdrawable == false);\n        require(balanceOf[_investor] > 0);\n        usersNETF[_roundIndex][_investor].stake = balanceOf[_investor];\n    }\n\n    /**\n     * investor can latch Fci by themself\n     */\n    function latchFciUser(uint _roundIndex) public {\n        require(isPause == true && NetfRevenue[_roundIndex].isOpen == true);\n        require(NetfRevenue[_roundIndex].withdrawable == false);\n        require(balanceOf[msg.sender] > 0);\n        usersNETF[_roundIndex][msg.sender].stake = balanceOf[msg.sender];\n    }\n\n    /**\n     * after all investor latch fci, controller change round state withdrawable\n     * now investor can withdraw NAC from NetfRevenue funds of this round\n     * and auto switch to unpause phrase\n     */\n    function changeWithdrawableNetfRe(uint _roundIndex) onlyController public {\n        require(isPause == true && NetfRevenue[_roundIndex].isOpen == true);\n        NetfRevenue[_roundIndex].withdrawable = true;\n        isPause = false;\n    }\n\n    // after latch all investor, unpause here\n    /**\n     * withdraw NAC for\n     * run by controller\n     */\n    function withdrawNacNetfReController(uint _roundIndex, address _investor) onlyController public {\n        require(NetfRevenue[_roundIndex].withdrawable == true && isPause == false && _investor != 0x0);\n        require(usersNETF[_roundIndex][_investor].stake > 0 && usersNETF[_roundIndex][_investor].isWithdrawn == false);\n        require(NetfRevenue[_roundIndex].totalFci > 0);\n        // withdraw NAC\n        uint nacReturn = ( NetfRevenue[_roundIndex].currentNAC.mul(usersNETF[_roundIndex][_investor].stake) ) / NetfRevenue[_roundIndex].totalFci;\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n        namiToken.transfer(_investor, nacReturn);\n\n        usersNETF[_roundIndex][_investor].isWithdrawn = true;\n    }\n\n    /**\n     * withdraw NAC for\n     * run by investor\n     */\n    function withdrawNacNetfRe(uint _roundIndex) public {\n        require(NetfRevenue[_roundIndex].withdrawable == true && isPause == false);\n        require(usersNETF[_roundIndex][msg.sender].stake > 0 && usersNETF[_roundIndex][msg.sender].isWithdrawn == false);\n        require(NetfRevenue[_roundIndex].totalFci > 0);\n        // withdraw NAC\n        uint nacReturn = ( NetfRevenue[_roundIndex].currentNAC.mul(usersNETF[_roundIndex][msg.sender].stake) ) / NetfRevenue[_roundIndex].totalFci;\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n        namiToken.transfer(msg.sender, nacReturn);\n\n        usersNETF[_roundIndex][msg.sender].isWithdrawn = true;\n    }\n\n    /////////////////////////////////////////////////////token fci function//////////////////////////////////////////////////////////////////\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public onlyRunning {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public onlyRunning returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public onlyRunning\n    returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n    public onlyRunning\n    returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////end fci token function///////////////////////////////////////////////////////////\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////pool function////////////////////////////////////////////////////////////////////\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    uint public currentRound = 1;\n    uint public currentSubRound = 1;\n\n    struct shareHolderNLF {\n        uint fciNLF;\n        bool isWithdrawnRound;\n    }\n\n    struct SubRound {\n        uint totalNacInSubRound;\n        bool isOpen;\n        bool isCloseNacPool;\n    }\n\n    struct Round {\n        bool isOpen;\n        bool isActivePool;\n        bool withdrawable;\n        uint currentNAC;\n        uint finalNAC;\n    }\n\n    // NLF Funds\n    mapping(uint => Round) public NLFunds;\n    mapping(uint => mapping(address => mapping(uint => bool))) public isWithdrawnSubRoundNLF;\n    mapping(uint => mapping(uint => SubRound)) public listSubRoundNLF;\n    mapping(uint => mapping(address => shareHolderNLF)) public membersNLF;\n\n\n    event ActivateRound(uint RoundIndex, uint TimeActive);\n    event ActivateSubRound(uint RoundIndex, uint TimeActive);\n    // ------------------------------------------------\n    /**\n     * Admin function\n     * Open and Close Round\n     */\n    function activateRound(uint _roundIndex)\n    onlyEscrow\n    public\n    {\n        // require round not open\n        require(NLFunds[_roundIndex].isOpen == false);\n        NLFunds[_roundIndex].isOpen = true;\n        currentRound = _roundIndex;\n        emit ActivateRound(_roundIndex, now);\n    }\n\n    ///////////////////////deposit to NLF funds in tokenFallbackExchange///////////////////////////////\n    /**\n     * after all user deposit to NLF pool\n     */\n    function deactivateRound(uint _roundIndex)\n    onlyEscrow\n    public\n    {\n        // require round id is openning\n        require(NLFunds[_roundIndex].isOpen == true);\n        NLFunds[_roundIndex].isActivePool = true;\n        NLFunds[_roundIndex].isOpen = false;\n        NLFunds[_roundIndex].finalNAC = NLFunds[_roundIndex].currentNAC;\n    }\n\n    /**\n     * before send NAC to subround controller need active subround\n     */\n    function activateSubRound(uint _subRoundIndex)\n    onlyController\n    public\n    {\n        // require current round is not open and pool active\n        require(NLFunds[currentRound].isOpen == false && NLFunds[currentRound].isActivePool == true);\n        // require sub round not open\n        require(listSubRoundNLF[currentRound][_subRoundIndex].isOpen == false);\n        //\n        currentSubRound = _subRoundIndex;\n        require(listSubRoundNLF[currentRound][_subRoundIndex].isCloseNacPool == false);\n\n        listSubRoundNLF[currentRound][_subRoundIndex].isOpen = true;\n        emit ActivateSubRound(_subRoundIndex, now);\n    }\n\n\n    /**\n     * every week controller deposit to subround to send NAC to all user have NLF fci\n     */\n    function depositToSubRound(uint _value)\n    onlyController\n    public\n    {\n        // require sub round is openning\n        require(currentSubRound != 0);\n        require(listSubRoundNLF[currentRound][currentSubRound].isOpen == true);\n        require(listSubRoundNLF[currentRound][currentSubRound].isCloseNacPool == false);\n\n        // modify total NAC in each subround\n        listSubRoundNLF[currentRound][currentSubRound].totalNacInSubRound = listSubRoundNLF[currentRound][currentSubRound].totalNacInSubRound.add(_value);\n    }\n\n\n    /**\n     * every week controller deposit to subround to send NAC to all user have NLF fci\n     */\n    function withdrawFromSubRound(uint _value)\n    onlyController\n    public\n    {\n        // require sub round is openning\n        require(currentSubRound != 0);\n        require(listSubRoundNLF[currentRound][currentSubRound].isOpen == true);\n        require(listSubRoundNLF[currentRound][currentSubRound].isCloseNacPool == false);\n\n        // modify total NAC in each subround\n        listSubRoundNLF[currentRound][currentSubRound].totalNacInSubRound = listSubRoundNLF[currentRound][currentSubRound].totalNacInSubRound.sub(_value);\n    }\n\n\n    /**\n     * controller close deposit subround phrase and user can withdraw NAC from subround\n     */\n    function closeDepositSubRound()\n    onlyController\n    public\n    {\n        require(listSubRoundNLF[currentRound][currentSubRound].isOpen == true);\n        require(listSubRoundNLF[currentRound][currentSubRound].isCloseNacPool == false);\n\n        listSubRoundNLF[currentRound][currentSubRound].isCloseNacPool = true;\n    }\n\n\n    /**\n     * user withdraw NAC from each subround of NLF funds for investor\n     */\n    function withdrawSubRound(uint _roundIndex, uint _subRoundIndex) public {\n        // require close deposit to subround\n        require(listSubRoundNLF[_roundIndex][_subRoundIndex].isCloseNacPool == true);\n\n        // user not ever withdraw nac in this subround\n        require(isWithdrawnSubRoundNLF[_roundIndex][msg.sender][_subRoundIndex] == false);\n\n        // require user have fci\n        require(membersNLF[_roundIndex][msg.sender].fciNLF > 0);\n\n        // withdraw token\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n\n        uint nacReturn = (listSubRoundNLF[_roundIndex][_subRoundIndex].totalNacInSubRound.mul(membersNLF[_roundIndex][msg.sender].fciNLF)).div(NLFunds[_roundIndex].finalNAC);\n        namiToken.transfer(msg.sender, nacReturn);\n\n        isWithdrawnSubRoundNLF[_roundIndex][msg.sender][_subRoundIndex] = true;\n    }\n\n\n    /**\n     * controller of NLF add NAC to update NLF balance\n     * this NAC come from 10% trading revenue\n     */\n    function addNacToNLF(uint _value) public onlyController {\n        require(NLFunds[currentRound].isActivePool == true);\n        require(NLFunds[currentRound].withdrawable == false);\n\n        NLFunds[currentRound].currentNAC = NLFunds[currentRound].currentNAC.add(_value);\n    }\n\n    /**\n     * controller get NAC from NLF pool to send to trader\n     */\n\n    function removeNacFromNLF(uint _value) public onlyController {\n        require(NLFunds[currentRound].isActivePool == true);\n        require(NLFunds[currentRound].withdrawable == false);\n\n        NLFunds[currentRound].currentNAC = NLFunds[currentRound].currentNAC.sub(_value);\n    }\n\n    /**\n     * end of round escrow run this to allow user sell fci to receive NAC\n     */\n    function changeWithdrawableRound(uint _roundIndex)\n    public\n    onlyEscrow\n    {\n        require(NLFunds[_roundIndex].isActivePool == true);\n        require(NLFunds[_roundIndex].withdrawable == false && NLFunds[_roundIndex].isOpen == false);\n\n        NLFunds[_roundIndex].withdrawable = true;\n    }\n\n\n    /**\n     * Internal Withdraw round, only can be called by this contract\n     */\n    function _withdrawRound(uint _roundIndex, address _investor) internal {\n        require(NLFunds[_roundIndex].withdrawable == true);\n        require(membersNLF[_roundIndex][_investor].isWithdrawnRound == false);\n        require(membersNLF[_roundIndex][_investor].fciNLF > 0);\n\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n        uint nacReturn = NLFunds[_roundIndex].currentNAC.mul(membersNLF[_roundIndex][_investor].fciNLF).div(NLFunds[_roundIndex].finalNAC);\n        namiToken.transfer(msg.sender, nacReturn);\n\n        // update status round\n        membersNLF[_roundIndex][_investor].isWithdrawnRound = true;\n        membersNLF[_roundIndex][_investor].fciNLF = 0;\n        emit WithdrawRound(_investor, nacReturn, now);\n    }\n\n    /**\n     * end of round user sell fci to receive NAC from NLF funds\n     * function for investor\n     */\n    function withdrawRound(uint _roundIndex) public {\n        _withdrawRound(_roundIndex, msg.sender);\n    }\n\n    function withdrawRoundController(uint _roundIndex, address _investor) public onlyController {\n        _withdrawRound(_roundIndex, _investor);\n    }\n\n\n\n    /**\n     * fall back function call from nami crawsale smart contract\n     * deposit NAC to NAMI TRADE broker, invest to NETF and NLF funds\n     */\n    function tokenFallbackExchange(address _from, uint _value, uint _choose) onlyNami public returns (bool success) {\n        require(_choose <= 2);\n        if (_choose == 0) {\n            // deposit NAC to nami trade broker\n            require(_value >= minNac);\n            emit Deposit(_from, _value, now);\n        } else if(_choose == 1) {\n            require(_value >= minNac && NLFunds[currentRound].isOpen == true);\n            // invest to NLF funds\n            membersNLF[currentRound][_from].fciNLF = membersNLF[currentRound][_from].fciNLF.add(_value);\n            NLFunds[currentRound].currentNAC = NLFunds[currentRound].currentNAC.add(_value);\n\n            emit InvestToNLF(_from, _value, now);\n        } else if(_choose == 2) {\n            // invest NAC to NETF Funds\n            require(_value >= minNac); // msg.value >= 0.1 ether\n            emit PlaceBuyFciOrder(_from, _value, now);\n        }\n        return true;\n    }\n\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////end pool function///////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // withdraw token\n    function withdrawToken(address _account, uint _amount)\n    public\n    onlyController\n    {\n        require(_amount >= minWithdraw && _amount <= maxWithdraw);\n        NamiCrowdSale namiToken = NamiCrowdSale(NamiAddr);\n\n        uint previousBalances = namiToken.balanceOf(address(this));\n        require(previousBalances >= _amount);\n\n        // transfer token\n        namiToken.transfer(_account, _amount);\n\n        // emit event\n        emit Withdraw(_account, _amount, now);\n        assert(previousBalances >= namiToken.balanceOf(address(this)));\n    }\n\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_valueNac\",\"type\":\"uint256\"}],\"name\":\"withdrawNetfRevenue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"namiMultiSigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSubRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNac\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"activateRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxNac\",\"type\":\"uint256\"}],\"name\":\"changeMaxWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFci\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_timeExpires\",\"type\":\"uint256\"}],\"name\":\"updatePriceFci\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"openNetfRevenueRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_valueNac\",\"type\":\"uint256\"}],\"name\":\"removeNacFromNetf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"changeWithdrawableRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_valueFci\",\"type\":\"uint256\"}],\"name\":\"sellFci\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"},{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"latchFciUserController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minNAC\",\"type\":\"uint256\"}],\"name\":\"changeMinNac\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersNETF\",\"outputs\":[{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"isWithdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isWithdrawnSubRoundNLF\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NamiAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"removeNacFromNLF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeExpires\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_valueNac\",\"type\":\"uint256\"}],\"name\":\"addNacToNetf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listSubRoundNLF\",\"outputs\":[{\"name\":\"totalNacInSubRound\",\"type\":\"uint256\"},{\"name\":\"isOpen\",\"type\":\"bool\"},{\"name\":\"isCloseNacPool\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeDepositSubRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addNacToNLF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawNacNetfRe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minNac\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NetfRevenue\",\"outputs\":[{\"name\":\"isOpen\",\"type\":\"bool\"},{\"name\":\"currentNAC\",\"type\":\"uint256\"},{\"name\":\"totalFci\",\"type\":\"uint256\"},{\"name\":\"withdrawable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"membersNLF\",\"outputs\":[{\"name\":\"fciNLF\",\"type\":\"uint256\"},{\"name\":\"isWithdrawnRound\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositToSubRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSubRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"},{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"withdrawNacNetfReController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_valueFci\",\"type\":\"uint256\"}],\"name\":\"placeSellFciOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changePause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"},{\"name\":\"_subRoundIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawSubRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_valueNac\",\"type\":\"uint256\"}],\"name\":\"depositNetfRevenue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minWithdraw\",\"type\":\"uint256\"}],\"name\":\"changeMinWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"},{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"withdrawRoundController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_choose\",\"type\":\"uint256\"}],\"name\":\"tokenFallbackExchange\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"changeEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NLFunds\",\"outputs\":[{\"name\":\"isOpen\",\"type\":\"bool\"},{\"name\":\"isActivePool\",\"type\":\"bool\"},{\"name\":\"withdrawable\",\"type\":\"bool\"},{\"name\":\"currentNAC\",\"type\":\"uint256\"},{\"name\":\"finalNAC\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fciDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_valueNac\",\"type\":\"uint256\"}],\"name\":\"buyFci\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"latchFciUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentNetfRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"deactivateRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_subRoundIndex\",\"type\":\"uint256\"}],\"name\":\"activateSubRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"latchTotalFci\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"changeWithdrawableNetfRe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NetfBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_namiMultiSigWallet\",\"type\":\"address\"},{\"name\":\"_namiAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeWithdraw\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timePlaceOrder\",\"type\":\"uint256\"}],\"name\":\"PlaceBuyFciOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timePlaceOrder\",\"type\":\"uint256\"}],\"name\":\"PlaceSellFciOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeInvest\",\"type\":\"uint256\"}],\"name\":\"InvestToNLF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"valueNac\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"valueFci\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeBuyFci\",\"type\":\"uint256\"}],\"name\":\"BuyFci\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"valueNac\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"valueFci\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeSellFci\",\"type\":\"uint256\"}],\"name\":\"SellFci\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"valueNac\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeWithdraw\",\"type\":\"uint256\"}],\"name\":\"WithdrawRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"RoundIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TimeActive\",\"type\":\"uint256\"}],\"name\":\"ActivateRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"RoundIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TimeActive\",\"type\":\"uint256\"}],\"name\":\"ActivateSubRound\",\"type\":\"event\"}]",
  "bytecode": "60008055686c6b935b8bbd400000600155690a968163f0a57b40000060025560c0604052600a60808190527f4e616d692054726164650000000000000000000000000000000000000000000060a09081526200005f91600891906200016e565b506040805180820190915260038082527f46434900000000000000000000000000000000000000000000000000000000006020909201918252620000a6916009916200016e565b50600a805460ff19166012179055620f4240600e5560016015819055601655348015620000d257600080fd5b5060405160608062003237833981016040908152815160208301519190920151600160a060020a03821615156200010857600080fd5b60048054600160a060020a0319908116600160a060020a0395861690811790925560058054821694861694909417909355600680549093169190931617905560009081526010602052604090206a067e4ff37972d87331ee7890819055600b5562000213565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001b157805160ff1916838001178555620001e1565b82800160010185558215620001e1579182015b82811115620001e1578251825591602001919060010190620001c4565b50620001ef929150620001f3565b5090565b6200021091905b80821115620001ef5760008155600101620001fa565b90565b61301480620002236000396000f30060806040526004361061032b5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662e4fc1481146103305780630321f8361461034a57806306fdde031461037b578063095ea7b3146104055780630b6973621461043d57806312818f0c1461045557806314743e7e1461046d57806318160ddd1461048557806323b872dd146104ac57806326e5ab38146104d65780632bc53254146104ee578063313ce567146105035780633176d3731461052e57806333158ba4146105495780633bed33ce146105615780634b1fb6d41461057957806359667c241461059157806365a096dc146105a95780636b2ed1c0146105c15780636be47418146105e557806370a0823114610609578063726b23bf1461062a578063792ede7f1461064257806381c156771461067f57806386e1e589146106a657806389af049d146106bb57806389bcf968146106d35780638a19c8bc146106e857806391aac477146106fd57806392eefe9b1461071557806395d89b41146107365780639706a6de1461074b5780639d0cfc2c146107865780639e281a981461079b578063a6f55282146107bf578063a8ddefab146107d7578063a9059cbb146107ef578063aa93169714610813578063ac7a1b5b14610828578063b061d99b1461083d578063b2f694721461087f578063b429afeb146108a3578063b8cc3c12146108c4578063c215e800146108dc578063c36981f4146108f1578063c3a74e6a14610915578063c3defb701461092d578063c6da8a1a14610942578063c7a9a64b1461095d578063cae9ca5114610975578063cc3d2721146109de578063cc61d0cb146109f3578063cc865b7114610a0b578063cd8d8da014610a2f578063dcfcda2b14610a56578063dd62ed3e14610a77578063e08ecead14610a9e578063e2fdcc1714610ae3578063e854eeb314610af8578063eb3087bf14610b0d578063ed5d228914610b31578063f089e97214610b49578063f162553414610b5e578063f6a74ed714610b76578063f80bb2a714610b97578063f9a8b0ba14610baf578063fac3a4db14610bc7578063fc1e1a3214610bdf578063ff0938a714610bf4575b600080fd5b34801561033c57600080fd5b50610348600435610c09565b005b34801561035657600080fd5b5061035f610cad565b60408051600160a060020a039092168252519081900360200190f35b34801561038757600080fd5b50610390610cbc565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103ca5781810151838201526020016103b2565b50505050905090810190601f1680156103f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041157600080fd5b50610429600160a060020a0360043516602435610d4a565b604080519115158252519081900360200190f35b34801561044957600080fd5b50610348600435610d8b565b34801561046157600080fd5b50610348600435610e72565b34801561047957600080fd5b50610348600435610fb5565b34801561049157600080fd5b5061049a611047565b60408051918252519081900360200190f35b3480156104b857600080fd5b50610429600160a060020a036004358116906024351660443561104d565b3480156104e257600080fd5b506103486004356110cf565b3480156104fa57600080fd5b5061049a6110f7565b34801561050f57600080fd5b506105186110fd565b6040805160ff9092168252519081900360200190f35b34801561053a57600080fd5b50610348600435602435611106565b34801561055557600080fd5b50610348600435611140565b34801561056d57600080fd5b5061034860043561119d565b34801561058557600080fd5b50610348600435611212565b34801561059d57600080fd5b5061034860043561124c565b3480156105b557600080fd5b50610348600435611256565b3480156105cd57600080fd5b50610348600160a060020a03600435166024356112f1565b3480156105f157600080fd5b50610348600435600160a060020a03602435166114a5565b34801561061557600080fd5b5061049a600160a060020a036004351661156c565b34801561063657600080fd5b5061034860043561157e565b34801561064e57600080fd5b50610666600435600160a060020a03602435166115a6565b6040805192835290151560208301528051918290030190f35b34801561068b57600080fd5b50610429600435600160a060020a03602435166044356115cd565b3480156106b257600080fd5b5061035f6115f3565b3480156106c757600080fd5b50610348600435611602565b3480156106df57600080fd5b5061049a6116ae565b3480156106f457600080fd5b5061049a6116b4565b34801561070957600080fd5b506103486004356116ba565b34801561072157600080fd5b50610348600160a060020a03600435166116ee565b34801561074257600080fd5b5061039061174f565b34801561075757600080fd5b506107666004356024356117aa565b604080519384529115156020840152151582820152519081900360600190f35b34801561079257600080fd5b506103486117da565b3480156107a757600080fd5b50610348600160a060020a0360043516602435611892565b3480156107cb57600080fd5b50610348600435611aed565b3480156107e357600080fd5b50610348600435611b81565b3480156107fb57600080fd5b50610348600160a060020a0360043516602435611d14565b34801561081f57600080fd5b5061049a611d2f565b34801561083457600080fd5b5061049a611d35565b34801561084957600080fd5b50610855600435611d3b565b60408051941515855260208501939093528383019190915215156060830152519081900360800190f35b34801561088b57600080fd5b50610666600435600160a060020a0360243516611d67565b3480156108af57600080fd5b50610429600160a060020a0360043516611d8e565b3480156108d057600080fd5b50610348600435611da3565b3480156108e857600080fd5b5061049a611e68565b3480156108fd57600080fd5b50610348600435600160a060020a0360243516611e6e565b34801561092157600080fd5b5061034860043561205e565b34801561093957600080fd5b506103486120df565b34801561094e57600080fd5b50610348600435602435612114565b34801561096957600080fd5b506103486004356122a1565b34801561098157600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610429948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061232d9650505050505050565b3480156109ea57600080fd5b5061049a61245a565b3480156109ff57600080fd5b50610348600435612460565b348015610a1757600080fd5b50610348600435600160a060020a0360243516612488565b348015610a3b57600080fd5b50610429600160a060020a03600435166024356044356124b3565b348015610a6257600080fd5b50610348600160a060020a03600435166126ba565b348015610a8357600080fd5b5061049a600160a060020a0360043581169060243516612715565b348015610aaa57600080fd5b50610ab6600435612732565b60408051951515865293151560208601529115158484015260608401526080830152519081900360a00190f35b348015610aef57600080fd5b5061035f612768565b348015610b0457600080fd5b5061049a612777565b348015610b1957600080fd5b50610348600160a060020a036004351660243561277d565b348015610b3d57600080fd5b5061034860043561290b565b348015610b5557600080fd5b5061049a6129a0565b348015610b6a57600080fd5b506103486004356129a6565b348015610b8257600080fd5b50610348600160a060020a0360043516612a0b565b348015610ba357600080fd5b50610348600435612a6a565b348015610bbb57600080fd5b50610348600435612ba2565b348015610bd357600080fd5b50610348600435612c2f565b348015610beb57600080fd5b5061049a612caf565b348015610c0057600080fd5b50610429612cb5565b3360009081526007602052604090205460ff161515600114610c2a57600080fd5b60125460009081526013602052604090205460ff1615156001148015610c65575060125460009081526013602052604090206003015460ff16155b1515610c7057600080fd5b601254600090815260136020526040902060010154610c95908263ffffffff612cbe16565b60125460009081526013602052604090206001015550565b600554600160a060020a031681565b6008805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610d425780601f10610d1757610100808354040283529160200191610d42565b820191906000526020600020905b815481529060010190602001808311610d2557829003601f168201915b505050505081565b600c5460009060ff1615610d5d57600080fd5b50336000908152601160209081526040808320600160a060020a039590951683529390529190912055600190565b3360009081526007602052604090205460ff161515600114610dac57600080fd5b6016541515610dba57600080fd5b60155460009081526019602090815260408083206016548452909152902060019081015460ff16151514610ded57600080fd5b60155460009081526019602090815260408083206016548452909152902060010154610100900460ff1615610e2157600080fd5b60155460009081526019602090815260408083206016548452909152902054610e50908263ffffffff612cbe16565b6015546000908152601960209081526040808320601654845290915290205550565b600454600090600160a060020a03163314610e8c57600080fd5b600554600160a060020a03161515610ea357600080fd5b50600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a039092169160009183916370a082319160248082019260209290919082900301818787803b158015610f0e57600080fd5b505af1158015610f22573d6000803e3d6000fd5b505050506040513d6020811015610f3857600080fd5b50511115610fb1576005546040805160e060020a63a9059cbb028152600160a060020a0392831660048201526024810185905290519183169163a9059cbb9160448082019260009290919082900301818387803b158015610f9857600080fd5b505af1158015610fac573d6000803e3d6000fd5b505050505b5050565b600454600160a060020a03163314610fcc57600080fd5b60008181526017602052604090205460ff1615610fe857600080fd5b600081815260176020908152604091829020805460ff1916600117905560158390558151838152429181019190915281517f60cc5191bfd5b8e47359b33037e3423dc9ca39ae533207dab75ec62f57af01f9929181900390910190a150565b600b5481565b600c5460009060ff161561106057600080fd5b600160a060020a038416600090815260116020908152604080832033845290915290205482111561109057600080fd5b600160a060020a03841660009081526011602090815260408083203384529091529020805483900390556110c5848484612cd0565b5060019392505050565b600454600160a060020a031633146110e657600080fd5b8015156110f257600080fd5b600255565b600f5481565b600a5460ff1681565b3360009081526007602052604090205460ff16151560011461112757600080fd5b600d54421161113557600080fd5b600f91909155600d55565b3360009081526007602052604090205460ff16151560011461116157600080fd5b60008181526013602052604090205460ff161561117d57600080fd5b60128190556000908152601360205260409020805460ff19166001179055565b600454600160a060020a031633146111b457600080fd5b600554600160a060020a031615156111cb57600080fd5b60003031111561120f57600554604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015610fb1573d6000803e3d6000fd5b50565b3360009081526007602052604090205460ff16151560011461123357600080fd5b600354611246908263ffffffff612cbe16565b60035550565b61120f8133612dd2565b600454600160a060020a0316331461126d57600080fd5b60008181526017602052604090205460ff61010090910416151560011461129357600080fd5b60008181526017602052604090205462010000900460ff161580156112c7575060008181526017602052604090205460ff16155b15156112d257600080fd5b6000908152601760205260409020805462ff0000191662010000179055565b33600090815260076020526040812054819060ff16151560011461131457600080fd5b600c5460ff161580156113285750600d5442105b151561133357600080fd5b600160a060020a038416151561134857600080fd5b600e54600f5484021161135a57600080fd5b600e54600f5461137190859063ffffffff612f9716565b81151561137a57fe5b30600090815260106020526040902054919004925061139f908463ffffffff612cbe16565b30600090815260106020526040902055600b546113c2908463ffffffff612cbe16565b600b556003546113d8908363ffffffff612cbe16565b600355506006546040805160e060020a63a9059cbb028152600160a060020a0386811660048301526024820185905291519190921691829163a9059cbb9160448082019260009290919082900301818387803b15801561143757600080fd5b505af115801561144b573d6000803e3d6000fd5b505060408051600160a060020a03881681526020810186905280820187905242606082015290517f1d0161179a9f751f6abb68bf641de439b687888a8fdd99f4bf576c03cc98d8aa9350908190036080019150a150505050565b3360009081526007602052604090205460ff1615156001146114c657600080fd5b600c5460ff16151560011480156114f0575060008281526013602052604090205460ff1615156001145b15156114fb57600080fd5b60008281526013602052604090206003015460ff161561151a57600080fd5b600160a060020a0381166000908152601060205260408120541161153d57600080fd5b600160a060020a0316600081815260106020908152604080832054948352601482528083209383529290522055565b60106020526000908152604090205481565b600454600160a060020a0316331461159557600080fd5b8015156115a157600080fd5b600055565b60146020908152600092835260408084209091529082529020805460019091015460ff1682565b601860209081526000938452604080852082529284528284209052825290205460ff1681565b600654600160a060020a031681565b3360009081526007602052604090205460ff16151560011461162357600080fd5b60155460009081526017602052604090205460ff61010090910416151560011461164c57600080fd5b60155460009081526017602052604090205462010000900460ff161561167157600080fd5b601554600090815260176020526040902060010154611696908263ffffffff612cbe16565b60155460009081526017602052604090206001015550565b600d5481565b60155481565b3360009081526007602052604090205460ff1615156001146116db57600080fd5b600354611246908263ffffffff612fc216565b600454600160a060020a0316331461170557600080fd5b600160a060020a03811660009081526007602052604090205460ff161561172b57600080fd5b600160a060020a03166000908152600760205260409020805460ff19166001179055565b6009805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610d425780601f10610d1757610100808354040283529160200191610d42565b60196020908152600092835260408084209091529082529020805460019091015460ff8082169161010090041683565b3360009081526007602052604090205460ff1615156001146117fb57600080fd5b60155460009081526019602090815260408083206016548452909152902060019081015460ff1615151461182e57600080fd5b60155460009081526019602090815260408083206016548452909152902060010154610100900460ff161561186257600080fd5b601554600090815260196020908152604080832060165484529091529020600101805461ff001916610100179055565b33600090815260076020526040812054819060ff1615156001146118b557600080fd5b60015483101580156118c957506002548311155b15156118d457600080fd5b600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216935083916370a08231916024808201926020929091908290030181600087803b15801561193d57600080fd5b505af1158015611951573d6000803e3d6000fd5b505050506040513d602081101561196757600080fd5b505190508281101561197857600080fd5b81600160a060020a031663a9059cbb85856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b1580156119f457600080fd5b505af1158015611a08573d6000803e3d6000fd5b5050604080518681524260208201528151600160a060020a03891694507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56893509081900390910190a2604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b158015611ab257600080fd5b505af1158015611ac6573d6000803e3d6000fd5b505050506040513d6020811015611adc57600080fd5b5051811015611ae757fe5b50505050565b3360009081526007602052604090205460ff161515600114611b0e57600080fd5b60155460009081526017602052604090205460ff610100909104161515600114611b3757600080fd5b60155460009081526017602052604090205462010000900460ff1615611b5c57600080fd5b601554600090815260176020526040902060010154611696908263ffffffff612fc216565b600081815260136020526040812060030154819060ff1615156001148015611bac5750600c5460ff16155b1515611bb757600080fd5b6000838152601460209081526040808320338452909152812054118015611bfb5750600083815260146020908152604080832033845290915290206001015460ff16155b1515611c0657600080fd5b60008381526013602052604081206002015411611c2257600080fd5b600083815260136020818152604080842060028101546014845282862033875284529185205494889052929091526001909101549091611c68919063ffffffff612f9716565b811515611c7157fe5b6006546040805160e060020a63a9059cbb02815233600482015293909204602484018190529151919450600160a060020a03169250829163a9059cbb91604480830192600092919082900301818387803b158015611cce57600080fd5b505af1158015611ce2573d6000803e3d6000fd5b505050600093845250506014602090815260408084203385529091529091206001908101805460ff1916909117905550565b600c5460ff1615611d2457600080fd5b610fb1338383612cd0565b60005481565b60025481565b601360205260009081526040902080546001820154600283015460039093015460ff9283169391921684565b601a6020908152600092835260408084209091529082529020805460019091015460ff1682565b60076020526000908152604090205460ff1681565b3360009081526007602052604090205460ff161515600114611dc457600080fd5b6016541515611dd257600080fd5b60155460009081526019602090815260408083206016548452909152902060019081015460ff16151514611e0557600080fd5b60155460009081526019602090815260408083206016548452909152902060010154610100900460ff1615611e3957600080fd5b60155460009081526019602090815260408083206016548452909152902054610e50908263ffffffff612fc216565b60165481565b33600090815260076020526040812054819060ff161515600114611e9157600080fd5b60008481526013602052604090206003015460ff1615156001148015611eba5750600c5460ff16155b8015611ece5750600160a060020a03831615155b1515611ed957600080fd5b6000848152601460209081526040808320600160a060020a0387168452909152812054118015611f2f57506000848152601460209081526040808320600160a060020a038716845290915290206001015460ff16155b1515611f3a57600080fd5b60008481526013602052604081206002015411611f5657600080fd5b6000848152601360208181526040808420600281015460148452828620600160a060020a038a16875284529185205494899052929091526001909101549091611fa5919063ffffffff612f9716565b811515611fae57fe5b6006546040805160e060020a63a9059cbb028152600160a060020a0388811660048301529490930460248401819052905190955092169250829163a9059cbb9160448082019260009290919082900301818387803b15801561200f57600080fd5b505af1158015612023573d6000803e3d6000fd5b50505060009485525050601460209081526040808520600160a060020a0390941685529290525090206001908101805460ff19169091179055565b600c5460ff161561206e57600080fd5b33600090815260106020526040902054811180159061208d5750600081115b151561209857600080fd5b6120a3333083612cd0565b60408051828152426020820152815133927f53d64f56c5d27614a4a85807b844ad444fcb432c1b5eb9a47f0904b90ca7bdd3928290030190a250565b3360009081526007602052604090205460ff16151560011461210057600080fd5b600c805460ff19811660ff90911615179055565b60008281526019602090815260408083208484529091528120600190810154829161010090910460ff1615151461214a57600080fd5b6000848152601860209081526040808320338452825280832086845290915290205460ff161561217957600080fd5b6000848152601a602090815260408083203384529091528120541161219d57600080fd5b600654600085815260176020908152604080832060020154601a835281842033855283528184205489855260198452828520898652909352922054600160a060020a039093169450612204926121f89163ffffffff612f9716565b9063ffffffff612fd116565b6040805160e060020a63a9059cbb028152336004820152602481018390529051919250600160a060020a0384169163a9059cbb9160448082019260009290919082900301818387803b15801561225957600080fd5b505af115801561226d573d6000803e3d6000fd5b505050600094855250506018602090815260408085203386528252808520938552929052509020805460ff19166001179055565b3360009081526007602052604090205460ff1615156001146122c257600080fd5b60125460009081526013602052604090205460ff16151560011480156122fd575060125460009081526013602052604090206003015460ff16155b151561230857600080fd5b601254600090815260136020526040902060010154610c95908263ffffffff612fc216565b600c54600090819060ff161561234257600080fd5b508361234e8185610d4a565b15612452576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156123e65781810151838201526020016123ce565b50505050905090810190601f1680156124135780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561243557600080fd5b505af1158015612449573d6000803e3d6000fd5b50505050600191505b509392505050565b60015481565b600454600160a060020a0316331461247757600080fd5b80151561248357600080fd5b600155565b3360009081526007602052604090205460ff1615156001146124a957600080fd5b610fb18282612dd2565b600654600090600160a060020a031633146124cd57600080fd5b60028211156124db57600080fd5b811515612538576000548310156124f157600080fd5b604080518481524260208201528151600160a060020a038716927f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15928290030190a26110c5565b8160011415612656576000548310158015612569575060155460009081526017602052604090205460ff1615156001145b151561257457600080fd5b6015546000908152601a60209081526040808320600160a060020a03881684529091529020546125aa908463ffffffff612fc216565b601580546000908152601a60209081526040808320600160a060020a038a16845282528083209490945591548152601790915220600101546125f2908463ffffffff612fc216565b60155460009081526017602090815260409182902060010192909255805185815242928101929092528051600160a060020a038716927fe1a2b38e95fb93ec7fdb155a99ae4fafc60362d5b170f6b6f851b61be5cacc4492908290030190a26110c5565b81600214156110c55760005483101561266e57600080fd5b604080518481524260208201528151600160a060020a038716927f796bd48a3db72d52a5f5ac9326dc12ccfcf116c3c737ccca65ee2598d37437af928290030190a25060019392505050565b600554600160a060020a031633146126d157600080fd5b600160a060020a03811615156126e657600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b601160209081526000928352604080842090915290825290205481565b60176020526000908152604090208054600182015460029092015460ff8083169361010084048216936201000090049091169185565b600454600160a060020a031681565b600e5481565b3360009081526007602052604081205460ff16151560011461279e57600080fd5b600c5460ff161580156127b25750600d5442105b15156127bd57600080fd5b600160a060020a03831615156127d257600080fd5b600f54600e548302116127e457600080fd5b600f54600e546127fb90849063ffffffff612f9716565b81151561280457fe5b600160a060020a0385166000908152601060205260409020549190049150612832908263ffffffff612fc216565b600160a060020a038416600090815260106020526040902055600b5461285e908263ffffffff612fc216565b600b55600354612874908363ffffffff612fc216565b600355604080518281529051600160a060020a0385169130917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a360408051600160a060020a03851681526020810184905280820183905242606082015290517f78b0d8d1a373abf06ef6541b74dd6d3745f8bd1e974d6c539b2d5307bb060c479181900360800190a1505050565b600c5460ff1615156001148015612935575060008181526013602052604090205460ff1615156001145b151561294057600080fd5b60008181526013602052604090206003015460ff161561295f57600080fd5b336000908152601060205260408120541161297957600080fd5b33600081815260106020908152604080832054948352601482528083209383529290522055565b60125481565b600454600160a060020a031633146129bd57600080fd5b60008181526017602052604090205460ff1615156001146129dd57600080fd5b6000908152601760205260409020805460ff1961ff0019909116610100171681556001810154600290910155565b600454600160a060020a03163314612a2257600080fd5b600160a060020a03811660009081526007602052604090205460ff161515612a4957600080fd5b600160a060020a03166000908152600760205260409020805460ff19169055565b3360009081526007602052604090205460ff161515600114612a8b57600080fd5b60155460009081526017602052604090205460ff16158015612ac9575060155460009081526017602052604090205460ff6101009091041615156001145b1515612ad457600080fd5b601554600090815260196020908152604080832084845290915290206001015460ff1615612b0157600080fd5b60168190556015546000908152601960209081526040808320848452909152902060010154610100900460ff1615612b3857600080fd5b60155460009081526019602090815260408083208484528252918290206001908101805460ff191690911790558151838152429181019190915281517fdbae5e5e953d0595bcde1a64324937494704c2c63e0c3719c94c9485d1ba446a929181900390910190a150565b3360009081526007602052604090205460ff161515600114612bc357600080fd5b600c5460ff1615156001148015612bed575060008181526013602052604090205460ff1615156001145b1515612bf857600080fd5b60008181526013602052604090206003015460ff1615612c1757600080fd5b600b5460009182526013602052604090912060020155565b3360009081526007602052604090205460ff161515600114612c5057600080fd5b600c5460ff1615156001148015612c7a575060008181526013602052604090205460ff1615156001145b1515612c8557600080fd5b6000908152601360205260409020600301805460ff19908116600117909155600c80549091169055565b60035481565b600c5460ff1681565b600082821115612cca57fe5b50900390565b6000600160a060020a0383161515612ce757600080fd5b600160a060020a038416600090815260106020526040902054821115612d0c57600080fd5b600160a060020a0383166000908152601060205260409020548281011015612d3357600080fd5b50600160a060020a038083166000818152601060209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a03808416600090815260106020526040808220549287168252902054018114611ae757fe5b600082815260176020526040812054819062010000900460ff161515600114612dfa57600080fd5b6000848152601a60209081526040808320600160a060020a038716845290915290206001015460ff1615612e2d57600080fd5b6000848152601a60209081526040808320600160a060020a038716845290915281205411612e5a57600080fd5b60065460008581526017602081815260408084206002810154601a8452828620600160a060020a038b8116885290855292862054958b90529390925260019091015493169450612eb09290916121f89190612f97565b6040805160e060020a63a9059cbb028152336004820152602481018390529051919250600160a060020a0384169163a9059cbb9160448082019260009290919082900301818387803b158015612f0557600080fd5b505af1158015612f19573d6000803e3d6000fd5b5050506000858152601a60209081526040808320600160a060020a0388168085529083528184206001808201805460ff191690911790559390935580519283529082018490524282820152517f2f598cdccccf04e6b614edf698da6452844c637c9e610a4e23e69e30e25f3a3292509081900360600190a150505050565b6000828202831580612fb35750828482811515612fb057fe5b04145b1515612fbb57fe5b9392505050565b600082820183811015612fbb57fe5b6000808284811515612fdf57fe5b049493505050505600a165627a7a7230582058559952770bf406ad8f1177740475a6243755dcb9596de51125e87d497db03f0029000000000000000000000000591c1bfac76a5a5a61fafc6d17489916112119820000000000000000000000004e237f139582708a592a14034b3c1a5b38da45a60000000000000000000000008d80de8a78198396329dfa769ad54d24bf90e7aa",
  "constructorArguments": "000000000000000000000000591c1bfac76a5a5a61fafc6d17489916112119820000000000000000000000004e237f139582708a592a14034b3c1a5b38da45a60000000000000000000000008d80de8a78198396329dfa769ad54d24bf90e7aa"
}