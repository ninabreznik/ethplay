{
  "address": "0x097a0820574a8dfb8035c15d829dc25187fc4129",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HalfToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-25\n*/\n\npragma solidity ^0.4.18;\n\n// ----------------------------------------------------------------------------\n// 'HalfTokenAirdrop' CROWDSALE token contract\n//\n// Deployed to : \n// Symbol      : HAT\n// Name        : HalfToken\n// Total supply: 9876543210\n// Decimals    : 18\n//\n// Enjoy.\n// the code is based on the work:\n// (c) by Moritz Neto & Daniel Bar with BokkyPooBah / Bok Consulting Pty Ltd Au 2017. The MIT Licence.\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\n// token transfers\n// ----------------------------------------------------------------------------\ncontract HalfToken is ERC20Interface, Owned, SafeMath {\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n   // uint public startDate;\n    //uint public endDate;\n    uint max_participants;\n    uint participants;\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    function HalfToken() public {\n        symbol = \"HAT\";\n        name = \"HalfToken\";\n        decimals = 18;\n        \n        //endDate = now + 4 weeks;\n        max_participants = 9876;\n        participants = 0;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply  - balances[address(0)];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens/2);\n        _totalSupply = safeSub(_totalSupply, safeSub(tokens, tokens/2));\n        Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = safeSub(balances[from], tokens);\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens/2);\n        _totalSupply = safeSub(_totalSupply, safeSub(tokens, tokens/2));\n        Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account. The `spender` contract function\n    // `receiveApproval(...)` is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // 9876543.21 HAT for 0 ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n        require(participants<max_participants);\n        participants += 1;\n        \n        balances[msg.sender] = safeAdd(balances[msg.sender], 9382716049500000000000000);\n        balances[owner] = safeAdd(balances[owner],            493827160500000000000000);\n        _totalSupply = safeAdd(_totalSupply,                 9876543210000000000000000);\n        Transfer(address(0), msg.sender, 9382716049500000000000000);\n        Transfer(address(0), owner, 493827160500000000000000);\n    }\n\n\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60008054600160a060020a03191633600160a060020a031617905560408051908101604052600381527f4841540000000000000000000000000000000000000000000000000000000000602082015260029080516100719291602001906100d7565b5060408051908101604052600981527f48616c66546f6b656e0000000000000000000000000000000000000000000000602082015260039080516100b99291602001906100d7565b506004805460ff191660121790556126946006556000600755610172565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011857805160ff1916838001178555610145565b82800160010185558215610145579182015b8281111561014557825182559160200191906001019061012a565b50610151929150610155565b5090565b61016f91905b80821115610151576000815560010161015b565b90565b610bf5806101816000396000f3006060604052600436106100cc5763ffffffff60e060020a60003504166306fdde0381146101f5578063095ea7b31461027f57806318160ddd146102b557806323b872dd146102da578063313ce567146103025780633eaaf86b1461032b57806370a082311461033e57806379ba50971461035d5780638da5cb5b1461037257806395d89b41146103a1578063a9059cbb146103b4578063cae9ca51146103d6578063d4ee1d901461043b578063dc39d06d1461044e578063dd62ed3e14610470578063f2fde38b14610495575b600654600754106100dc57600080fd5b600780546001019055600160a060020a033316600090815260086020526040902054610113906a07c2de0e655c11e3d1c0006104b4565b600160a060020a033381166000908152600860205260408082209390935580549091168152205461014e906968926c8c1251c89f40006104b4565b60008054600160a060020a031681526008602052604090205560055461017f906a082b707af16e63ac7100006104b4565b600555600160a060020a0333166000600080516020610baa8339815191526a07c2de0e655c11e3d1c00060405190815260200160405180910390a360008054600160a060020a031690600080516020610baa8339815191526968926c8c1251c89f400060405190815260200160405180910390a3005b341561020057600080fd5b6102086104ca565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561024457808201518382015260200161022c565b50505050905090810190601f1680156102715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028a57600080fd5b6102a1600160a060020a0360043516602435610568565b604051901515815260200160405180910390f35b34156102c057600080fd5b6102c86105d4565b60405190815260200160405180910390f35b34156102e557600080fd5b6102a1600160a060020a0360043581169060243516604435610606565b341561030d57600080fd5b610315610719565b60405160ff909116815260200160405180910390f35b341561033657600080fd5b6102c8610722565b341561034957600080fd5b6102c8600160a060020a0360043516610728565b341561036857600080fd5b610370610743565b005b341561037d57600080fd5b6103856107d1565b604051600160a060020a03909116815260200160405180910390f35b34156103ac57600080fd5b6102086107e0565b34156103bf57600080fd5b6102a1600160a060020a036004351660243561084b565b34156103e157600080fd5b6102a160048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061090695505050505050565b341561044657600080fd5b610385610a6d565b341561045957600080fd5b6102a1600160a060020a0360043516602435610a7c565b341561047b57600080fd5b6102c8600160a060020a0360043581169060243516610b1f565b34156104a057600080fd5b610370600160a060020a0360043516610b4a565b818101828110156104c457600080fd5b92915050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105605780601f1061053557610100808354040283529160200191610560565b820191906000526020600020905b81548152906001019060200180831161054357829003601f168201915b505050505081565b600160a060020a03338116600081815260096020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000805260086020527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c7546005540390565b600160a060020a0383166000908152600860205260408120546106299083610b94565b600160a060020a03808616600090815260086020908152604080832094909455600981528382203390931682529190915220546106669083610b94565b600160a060020a03808616600090815260096020908152604080832033851684528252808320949094559186168152600890915220546106aa906002845b046104b4565b600160a060020a0384166000908152600860205260409020556005546106dd906106d8846002815b04610b94565b610b94565b600555600160a060020a03808416908516600080516020610baa8339815191528460405190815260200160405180910390a35060019392505050565b60045460ff1681565b60055481565b600160a060020a031660009081526008602052604090205490565b60015433600160a060020a0390811691161461075e57600080fd5b600154600054600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105605780601f1061053557610100808354040283529160200191610560565b600160a060020a03331660009081526008602052604081205461086e9083610b94565b600160a060020a03338116600090815260086020526040808220939093559085168152205461089f906002846106a4565b600160a060020a0384166000908152600860205260409020556005546108cb906106d8846002816106d2565b600555600160a060020a03808416903316600080516020610baa8339815191528460405190815260200160405180910390a350600192915050565b600160a060020a03338116600081815260096020908152604080832094881680845294909152808220869055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259086905190815260200160405180910390a383600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a015780820151838201526020016109e9565b50505050905090810190601f168015610a2e5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610a4f57600080fd5b6102c65a03f11515610a6057600080fd5b5060019695505050505050565b600154600160a060020a031681565b6000805433600160a060020a03908116911614610a9857600080fd5b60008054600160a060020a038086169263a9059cbb929091169085906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610afe57600080fd5b6102c65a03f11515610b0f57600080fd5b5050506040518051949350505050565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b60005433600160a060020a03908116911614610b6557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610ba357600080fd5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820ad1e1e328c8b90b4bf0b27ba5310f1cc8a067d643615f01aa90b2a0be6c761bc0029"
}