{
  "address": "0x05133e67d16b6596c3523fb826fc385e7b26c8df",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Sweepstake",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-09\n*/\n\npragma solidity ^0.4.24;\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\ncontract Sweepstake {\n    uint constant MAX_CANDIDATES = 100;\n\n    struct Candidate {\n        uint votes;\n        uint balance;\n        address[] entrants;\n    }\n    \n    struct Entrant {\n        uint[] candidateVotes;\n        address sender;\n        bool paid;\n    }\n\n    address internal owner;\n    bool internal ownerCanTerminate;\n    uint internal ticketValue;\n    uint internal feePerTicket;\n    uint internal withdrawalAfterClosureWindowInDays;\n\n    Candidate[] internal candidates;\n    mapping(address => Entrant) internal entrants;\n    uint internal totalVotes;\n    uint internal totalBalance;\n\n    bool internal closed;\n    uint internal closedTime;\n\n    uint internal winningCandidateIndex;\n    uint internal winningVotes;\n    uint internal winningsPerVote;\n\n    modifier onlyOwner { \n        require (msg.sender == owner, 'Must be owner');\n        _; \n    }\n             \n    modifier onlyWhenOpen { \n        require (closed == false, 'Cannot execute whilst open');\n        _; \n    }\n            \n    modifier onlyWhenClosed { \n        require (closed == true, 'Cannot execute whilst closed');\n        _; \n    }\n\n    modifier onlyWithValidCandidate(uint candidateIndex) { \n        require (candidateIndex >= 0, 'Index must be valid');\n        require (candidateIndex < candidates.length, 'Index must be valid');\n        _; \n    }\n                \n    constructor(\n        uint _ticketValue,\n        uint _feePerTicket,\n        uint candidateCount,\n        uint _withdrawalAfterClosureWindowInDays\n    ) public {\n        require (candidateCount > 0, 'Candidate count must be more than 1');\n        require (candidateCount <= MAX_CANDIDATES, 'Candidate count must be less than max');\n\n        owner = msg.sender;\n        ownerCanTerminate = true;\n        ticketValue = _ticketValue;\n        feePerTicket = _feePerTicket;\n        withdrawalAfterClosureWindowInDays = _withdrawalAfterClosureWindowInDays;\n\n        for (uint index = 0; index < candidateCount; index++) {\n            candidates.push(Candidate({\n                votes: 0,\n                balance: 0,\n                entrants: new address[](0)\n            }));\n        }\n    }\n\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n\n    function getOwnerCanTerminate() external view returns (bool) {\n        return ownerCanTerminate;\n    }\n\n    function getClosed() external view returns (bool) {\n        return closed;\n    }\n\n    function getClosedTime() external view returns (uint) {\n        return closedTime;\n    }\n\n    function getWithdrawalAfterClosureWindowInDays() external view returns (uint) {\n        return withdrawalAfterClosureWindowInDays;\n    }\n\n    function getFeePerTicket() external view returns (uint) {\n        return feePerTicket;\n    }\n\n    function getTicketValue() external view returns (uint) {\n        return ticketValue;\n    }\n\n    function getAllCandidateBalances() external view returns (uint[]) {\n        uint candidateLength = candidates.length;\n        uint[] memory balances = new uint[](candidateLength);\n        \n        for (uint index = 0; index < candidateLength; index++) {\n            balances[index] = candidates[index].balance;\n        }\n\n        return balances;\n    }\n\n    function getAllCandidateVotes() external view returns (uint[]) {\n        uint candidateLength = candidates.length;\n        uint[] memory votes = new uint[](candidateLength);\n        \n        for (uint index = 0; index < candidateLength; index++) {\n            votes[index] = candidates[index].votes;\n        }\n\n        return votes;\n    }\n\n    function getCandidateEntrants(uint candidateIndex) external view onlyWithValidCandidate(candidateIndex) returns (address[]) {\n        return candidates[candidateIndex].entrants;\n    }\n\n    function getTotalVotes() external view returns (uint) {\n        return totalVotes;\n    }\n\n    function getTotalBalance() external view returns (uint) {\n        return totalBalance;\n    }\n\n    function getWinningCandidateIndex() external view onlyWhenClosed returns (uint) {\n        return winningCandidateIndex;\n    }\n\n    function getWinningVotes() external view onlyWhenClosed returns (uint) {\n        return winningVotes;\n    }\n\n    function getWinningsPerVote() external view onlyWhenClosed returns (uint) {\n        return winningsPerVote;\n    }\n\n    function hasCurrentUserEntered() external view returns (bool) {\n        return entrants[msg.sender].sender != 0x0;\n    }\n\n    function getCurrentEntrantVotes() external view returns (uint[]) {\n        require (entrants[msg.sender].sender != 0x0, 'Current user has not entered');\n\n        return entrants[msg.sender].candidateVotes;\n    }\n\n    function getCurrentEntrantPaidState() external view returns (bool) {\n        require (entrants[msg.sender].sender != 0x0, 'Current user has not entered');\n\n        return entrants[msg.sender].paid;\n    }\n\n    function getCurrentEntrantWinnings() external view onlyWhenClosed returns (uint) {\n        require (entrants[msg.sender].sender != 0x0, 'Current user has not entered');\n        require (entrants[msg.sender].candidateVotes[winningCandidateIndex] > 0, 'Current user did not vote for the winner');\n\n        return SafeMath.mul(winningsPerVote, entrants[msg.sender].candidateVotes[winningCandidateIndex]);\n    }\n\n    function enter(uint candidateIndex) external payable onlyWhenOpen onlyWithValidCandidate(candidateIndex) {\n        require (msg.value == ticketValue, 'Ticket value is incorrect');\n\n        if (entrants[msg.sender].sender == 0x0) {\n            entrants[msg.sender] = Entrant({\n                candidateVotes: new uint[](candidates.length),\n                sender: msg.sender,\n                paid: false\n            });\n\n            candidates[candidateIndex].entrants.push(msg.sender);\n        }\n\n        entrants[msg.sender].candidateVotes[candidateIndex]++;\n\n        totalVotes++;\n        candidates[candidateIndex].votes++;\n        \n        uint valueAfterFee = SafeMath.sub(msg.value, feePerTicket);\n        candidates[candidateIndex].balance = SafeMath.add(candidates[candidateIndex].balance, valueAfterFee);\n\n        totalBalance = SafeMath.add(totalBalance, valueAfterFee);\n\n        owner.transfer(feePerTicket);\n    }\n\n    function close(uint _winningCandidateIndex) external onlyOwner onlyWhenOpen onlyWithValidCandidate(_winningCandidateIndex) {\n        closed = true;\n        closedTime = now;\n\n        winningCandidateIndex = _winningCandidateIndex;\n\n        uint balance = address(this).balance;\n        winningVotes = candidates[winningCandidateIndex].votes;\n        if (winningVotes > 0) {    \n            winningsPerVote = SafeMath.div(balance, winningVotes);\n            uint totalWinnings = SafeMath.mul(winningsPerVote, winningVotes);\n\n            if (totalWinnings < balance) {\n                owner.transfer(SafeMath.sub(balance, totalWinnings));\n            }\n        } else {\n            owner.transfer(balance);\n        }\n    }\n\n    function withdraw() external onlyWhenClosed {\n        require (entrants[msg.sender].sender != 0x0, 'Current user has not entered');\n        require (entrants[msg.sender].candidateVotes[winningCandidateIndex] > 0, 'Current user did not vote for the winner');\n        require (entrants[msg.sender].paid == false, 'User has already been paid');\n        require (now < (closedTime + (withdrawalAfterClosureWindowInDays * 1 days)));\n        \n        entrants[msg.sender].paid = true;\n\n        uint totalWinnings = SafeMath.mul(winningsPerVote, entrants[msg.sender].candidateVotes[winningCandidateIndex]);\n\n        msg.sender.transfer(totalWinnings);\n    }\n\n    function preventOwnerTerminating() external onlyOwner {\n        ownerCanTerminate = false;\n    }\n\n    function terminate() external onlyOwner {\n        require (ownerCanTerminate == true, 'Owner cannot terminate');\n\n        selfdestruct(owner);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000001c6bf526340000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000005a"
}