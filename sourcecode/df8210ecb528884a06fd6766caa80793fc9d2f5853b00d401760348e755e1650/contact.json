{
  "address": "0x178053c06006e67e09879C09Ff012fF9d263dF29",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Comptroller",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.5.8;\n\nimport \"./CToken.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./Exponential.sol\";\nimport \"./PriceOracle.sol\";\nimport \"./ComptrollerInterface.sol\";\nimport \"./ComptrollerStorage.sol\";\nimport \"./Unitroller.sol\";\n\n/**\n * @title Compound's Comptroller Contract\n * @author Compound\n */\ncontract Comptroller is ComptrollerV1Storage, ComptrollerInterface, ComptrollerErrorReporter, Exponential {\n    struct Market {\n        /**\n         * @notice Whether or not this market is listed\n         */\n        bool isListed;\n\n        /**\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\n         *  Must be between 0 and 1, and stored as a mantissa.\n         */\n        uint collateralFactorMantissa;\n\n        /**\n         * @notice Per-market mapping of \"accounts in this asset\"\n         */\n        mapping(address => bool) accountMembership;\n    }\n\n    /**\n     * @notice Official mapping of cTokens -> Market metadata\n     * @dev Used e.g. to determine if a market is supported\n     */\n    mapping(address => Market) public markets;\n\n    /**\n     * @notice Emitted when an admin supports a market\n     */\n    event MarketListed(CToken cToken);\n\n    /**\n     * @notice Emitted when an account enters a market\n     */\n    event MarketEntered(CToken cToken, address account);\n\n    /**\n     * @notice Emitted when an account exits a market\n     */\n    event MarketExited(CToken cToken, address account);\n\n    /**\n     * @notice Emitted when close factor is changed by admin\n     */\n    event NewCloseFactor(uint oldCloseFactorMantissa, uint newCloseFactorMantissa);\n\n    /**\n     * @notice Emitted when a collateral factor is changed by admin\n     */\n    event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\n\n    /**\n     * @notice Emitted when liquidation incentive is changed by admin\n     */\n    event NewLiquidationIncentive(uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\n\n    /**\n     * @notice Emitted when maxAssets is changed by admin\n     */\n    event NewMaxAssets(uint oldMaxAssets, uint newMaxAssets);\n\n    /**\n     * @notice Emitted when price oracle is changed\n     */\n    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\n\n    /**\n     * @notice Indicator that this is a Comptroller contract (for inspection)\n     */\n    bool public constant isComptroller = true;\n\n    // closeFactorMantissa must be strictly greater than this value\n    uint constant closeFactorMinMantissa = 5e16; // 0.05\n\n    // closeFactorMantissa must not exceed this value\n    uint constant closeFactorMaxMantissa = 9e17; // 0.9\n\n    // No collateralFactorMantissa may exceed this value\n    uint constant collateralFactorMaxMantissa = 9e17; // 0.9\n\n    // liquidationIncentiveMantissa must be no less than this value\n    uint constant liquidationIncentiveMinMantissa = mantissaOne;\n\n    // liquidationIncentiveMantissa must be no greater than this value\n    uint constant liquidationIncentiveMaxMantissa = 15e17; // 1.5\n\n    constructor() public {\n        admin = msg.sender;\n    }\n\n    /*** Assets You Are In ***/\n\n    /**\n     * @notice Returns the assets an account has entered\n     * @param account The address of the account to pull assets for\n     * @return A dynamic list with the assets the account has entered\n     */\n    function getAssetsIn(address account) external view returns (CToken[] memory) {\n        CToken[] memory assetsIn = accountAssets[account];\n\n        return assetsIn;\n    }\n\n    /**\n     * @notice Returns whether the given account is entered in the given asset\n     * @param account The address of the account to check\n     * @param cToken The cToken to check\n     * @return True if the account is in the asset, otherwise false.\n     */\n    function checkMembership(address account, CToken cToken) external view returns (bool) {\n        return markets[address(cToken)].accountMembership[account];\n    }\n\n    /**\n     * @notice Add assets to be included in account liquidity calculation\n     * @param cTokens The list of addresses of the cToken markets to be enabled\n     * @return Success indicator for whether each corresponding market was entered\n     */\n    function enterMarkets(address[] memory cTokens) public returns (uint[] memory) {\n        uint len = cTokens.length;\n\n        uint[] memory results = new uint[](len);\n        for (uint i = 0; i < len; i++) {\n            CToken cToken = CToken(cTokens[i]);\n            Market storage marketToJoin = markets[address(cToken)];\n\n            if (!marketToJoin.isListed) {\n                // if market is not listed, cannot join move along\n                results[i] = uint(Error.MARKET_NOT_LISTED);\n                continue;\n            }\n\n            if (marketToJoin.accountMembership[msg.sender] == true) {\n                // if already joined, move along\n                results[i] = uint(Error.NO_ERROR);\n                continue;\n            }\n\n            if (accountAssets[msg.sender].length >= maxAssets)  {\n                // if no space, cannot join, move along\n                results[i] = uint(Error.TOO_MANY_ASSETS);\n                continue;\n            }\n\n            // survived the gauntlet, add to list\n            // NOTE: we store these somewhat redundantly as a significant optimization\n            //  this avoids having to iterate through the list for the most common use cases\n            //  that is, only when we need to perform liquidity checks\n            //   and not whenever we want to check if an account is in a particular market\n            marketToJoin.accountMembership[msg.sender] = true;\n            accountAssets[msg.sender].push(cToken);\n\n            emit MarketEntered(cToken, msg.sender);\n\n            results[i] = uint(Error.NO_ERROR);\n        }\n\n        return results;\n    }\n\n    /**\n     * @notice Removes asset from sender's account liquidity calculation\n     * @dev Sender must not have an outstanding borrow balance in the asset,\n     *  or be providing neccessary collateral for an outstanding borrow.\n     * @param cTokenAddress The address of the asset to be removed\n     * @return Whether or not the account successfully exited the market\n     */\n    function exitMarket(address cTokenAddress) external returns (uint) {\n        CToken cToken = CToken(cTokenAddress);\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\n        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\"); // semi-opaque error code\n\n        /* Fail if the sender has a borrow balance */\n        if (amountOwed != 0) {\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\n        }\n\n        /* Fail if the sender is not permitted to redeem all of their tokens */\n        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\n        if (allowed != 0) {\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\n        }\n\n        Market storage marketToExit = markets[address(cToken)];\n\n        /* Return true if the sender is not already ‘in’ the market */\n        if (!marketToExit.accountMembership[msg.sender]) {\n            return uint(Error.NO_ERROR);\n        }\n\n        /* Set cToken account membership to false */\n        delete marketToExit.accountMembership[msg.sender];\n\n        /* Delete cToken from the account’s list of assets */\n        // load into memory for faster iteration\n        CToken[] memory userAssetList = accountAssets[msg.sender];\n        uint len = userAssetList.length;\n        uint assetIndex = len;\n        for (uint i = 0; i < len; i++) {\n            if (userAssetList[i] == cToken) {\n                assetIndex = i;\n                break;\n            }\n        }\n\n        // We *must* have found the asset in the list or our redundant data structure is broken\n        assert(assetIndex < len);\n\n        // copy last item in list to location of item to be removed, reduce length by 1\n        CToken[] storage storedList = accountAssets[msg.sender];\n        storedList[assetIndex] = storedList[storedList.length - 1];\n        storedList.length--;\n\n        emit MarketExited(cToken, msg.sender);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /*** Policy Hooks ***/\n\n    /**\n     * @notice Checks if the account should be allowed to mint tokens in the given market\n     * @param cToken The market to verify the mint against\n     * @param minter The account which would get the minted tokens\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint) {\n        minter;       // currently unused\n        mintAmount;   // currently unused\n\n        if (!markets[cToken].isListed) {\n            return uint(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates mint and reverts on rejection. May emit logs.\n     * @param cToken Asset being minted\n     * @param minter The address minting the tokens\n     * @param mintAmount The amount of the underlying asset being minted\n     * @param mintTokens The number of tokens being minted\n     */\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external {\n        cToken;       // currently unused\n        minter;       // currently unused\n        mintAmount;   // currently unused\n        mintTokens;   // currently unused\n\n        if (false) {\n            maxAssets = maxAssets; // not pure\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\n     * @param cToken The market to verify the redeem against\n     * @param redeemer The account which would redeem the tokens\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint) {\n        return redeemAllowedInternal(cToken, redeemer, redeemTokens);\n    }\n\n    function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {\n        if (!markets[cToken].isListed) {\n            return uint(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\n        if (!markets[cToken].accountMembership[redeemer]) {\n            return uint(Error.NO_ERROR);\n        }\n\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0);\n        if (err != Error.NO_ERROR) {\n            return uint(err);\n        }\n        if (shortfall > 0) {\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates redeem and reverts on rejection. May emit logs.\n     * @param cToken Asset being redeemed\n     * @param redeemer The address redeeming the tokens\n     * @param redeemAmount The amount of the underlying asset being redeemed\n     * @param redeemTokens The number of tokens being redeemed\n     */\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external {\n        cToken;         // currently unused\n        redeemer;       // currently unused\n        redeemAmount;   // currently unused\n        redeemTokens;   // currently unused\n\n        // Require tokens is zero or amount is also zero\n        if (redeemTokens == 0 && redeemAmount > 0) {\n            revert(\"redeemTokens zero\");\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n     * @param cToken The market to verify the borrow against\n     * @param borrower The account which would borrow the asset\n     * @param borrowAmount The amount of underlying the account would borrow\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint) {\n        if (!markets[cToken].isListed) {\n            return uint(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        if (!markets[cToken].accountMembership[borrower]) {\n            return uint(Error.MARKET_NOT_ENTERED);\n        }\n\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\n            return uint(Error.PRICE_ERROR);\n        }\n\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount);\n        if (err != Error.NO_ERROR) {\n            return uint(err);\n        }\n        if (shortfall > 0) {\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates borrow and reverts on rejection. May emit logs.\n     * @param cToken Asset whose underlying is being borrowed\n     * @param borrower The address borrowing the underlying\n     * @param borrowAmount The amount of the underlying asset requested to borrow\n     */\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external {\n        cToken;         // currently unused\n        borrower;       // currently unused\n        borrowAmount;   // currently unused\n\n        if (false) {\n            maxAssets = maxAssets; // not pure\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\n     * @param cToken The market to verify the repay against\n     * @param payer The account which would repay the asset\n     * @param borrower The account which would borrowed the asset\n     * @param repayAmount The amount of the underlying asset the account would repay\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint repayAmount) external returns (uint) {\n        payer;         // currently unused\n        borrower;      // currently unused\n        repayAmount;   // currently unused\n\n        if (!markets[cToken].isListed) {\n            return uint(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\n     * @param cToken Asset being repaid\n     * @param payer The address repaying the borrow\n     * @param borrower The address of the borrower\n     * @param repayAmount The amount of underlying being repaid\n     */\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint repayAmount,\n        uint borrowerIndex) external {\n        cToken;        // currently unused\n        payer;         // currently unused\n        borrower;      // currently unused\n        repayAmount;   // currently unused\n        borrowerIndex; // currently unused\n\n        if (false) {\n            maxAssets = maxAssets; // not pure\n        }\n    }\n\n    /**\n     * @notice Checks if the liquidation should be allowed to occur\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param repayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint repayAmount) external returns (uint) {\n        liquidator;   // currently unused\n        borrower;     // currently unused\n        repayAmount;  // currently unused\n\n        if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\n            return uint(Error.MARKET_NOT_LISTED);\n        }\n\n        // *may include Policy Hook-type checks\n\n        /* The borrower must have shortfall in order to be liquidatable */\n        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower);\n        if (err != Error.NO_ERROR) {\n            return uint(err);\n        }\n        if (shortfall == 0) {\n            return uint(Error.INSUFFICIENT_SHORTFALL);\n        }\n\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\n        uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);\n        (MathError mathErr, uint maxClose) = mulScalarTruncate(Exp({mantissa: closeFactorMantissa}), borrowBalance);\n        if (mathErr != MathError.NO_ERROR) {\n            return uint(Error.MATH_ERROR);\n        }\n        if (repayAmount > maxClose) {\n            return uint(Error.TOO_MUCH_REPAY);\n        }\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param repayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint repayAmount,\n        uint seizeTokens) external {\n        cTokenBorrowed;   // currently unused\n        cTokenCollateral; // currently unused\n        liquidator;       // currently unused\n        borrower;         // currently unused\n        repayAmount;      // currently unused\n        seizeTokens;      // currently unused\n\n        if (false) {\n            maxAssets = maxAssets; // not pure\n        }\n    }\n\n    /**\n     * @notice Checks if the seizing of assets should be allowed to occur\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint seizeTokens) external returns (uint) {\n        liquidator;       // currently unused\n        borrower;         // currently unused\n        seizeTokens;      // currently unused\n\n        if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\n            return uint(Error.MARKET_NOT_LISTED);\n        }\n\n        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {\n            return uint(Error.COMPTROLLER_MISMATCH);\n        }\n\n        // *may include Policy Hook-type checks\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates seize and reverts on rejection. May emit logs.\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint seizeTokens) external {\n        cTokenCollateral; // currently unused\n        cTokenBorrowed;   // currently unused\n        liquidator;       // currently unused\n        borrower;         // currently unused\n        seizeTokens;      // currently unused\n\n        if (false) {\n            maxAssets = maxAssets; // not pure\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\n     * @param cToken The market to verify the transfer against\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint) {\n        cToken;         // currently unused\n        src;            // currently unused\n        dst;            // currently unused\n        transferTokens; // currently unused\n\n        // *may include Policy Hook-type checks\n\n        // Currently the only consideration is whether or not\n        //  the src is allowed to redeem this many tokens\n        return redeemAllowedInternal(cToken, src, transferTokens);\n    }\n\n    /**\n     * @notice Validates transfer and reverts on rejection. May emit logs.\n     * @param cToken Asset being transferred\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     */\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external {\n        cToken;         // currently unused\n        src;            // currently unused\n        dst;            // currently unused\n        transferTokens; // currently unused\n\n        if (false) {\n            maxAssets = maxAssets; // not pure\n        }\n    }\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    /**\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\n     */\n    struct AccountLiquidityLocalVars {\n        uint sumCollateral;\n        uint sumBorrowPlusEffects;\n        uint cTokenBalance;\n        uint borrowBalance;\n        uint exchangeRateMantissa;\n        uint oraclePriceMantissa;\n        Exp collateralFactor;\n        Exp exchangeRate;\n        Exp oraclePrice;\n        Exp tokensToEther;\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code (semi-opaque),\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0);\n\n        return (uint(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code,\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidityInternal(address account) internal view returns (Error, uint, uint) {\n        return getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0);\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\n     *  without calculating accumulated interest.\n     * @return (possible error code,\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidityInternal(\n        address account,\n        CToken cTokenModify,\n        uint redeemTokens,\n        uint borrowAmount) internal view returns (Error, uint, uint) {\n\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\n        uint oErr;\n        MathError mErr;\n\n        // For each asset the account is in\n        CToken[] memory assets = accountAssets[account];\n        for (uint i = 0; i < assets.length; i++) {\n            CToken asset = assets[i];\n\n            // Read the balances and exchange rate from the cToken\n            (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\n            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\n                return (Error.SNAPSHOT_ERROR, 0, 0);\n            }\n            vars.collateralFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\n\n            // Get the normalized price of the asset\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\n            if (vars.oraclePriceMantissa == 0) {\n                return (Error.PRICE_ERROR, 0, 0);\n            }\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\n\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\n            (mErr, vars.tokensToEther) = mulExp3(vars.collateralFactor, vars.exchangeRate, vars.oraclePrice);\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // sumCollateral += tokensToEther * cTokenBalance\n            (mErr, vars.sumCollateral) = mulScalarTruncateAddUInt(vars.tokensToEther, vars.cTokenBalance, vars.sumCollateral);\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\n            (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);\n            if (mErr != MathError.NO_ERROR) {\n                return (Error.MATH_ERROR, 0, 0);\n            }\n\n            // Calculate effects of interacting with cTokenModify\n            if (asset == cTokenModify) {\n                // redeem effect\n                // sumBorrowPlusEffects += tokensToEther * redeemTokens\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(vars.tokensToEther, redeemTokens, vars.sumBorrowPlusEffects);\n                if (mErr != MathError.NO_ERROR) {\n                    return (Error.MATH_ERROR, 0, 0);\n                }\n\n                // borrow effect\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\n                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);\n                if (mErr != MathError.NO_ERROR) {\n                    return (Error.MATH_ERROR, 0, 0);\n                }\n            }\n        }\n\n        // These are safe, as the underflow condition is checked first\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\n            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\n        } else {\n            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\n        }\n    }\n\n    /**\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\n     * @param cTokenBorrowed The address of the borrowed cToken\n     * @param cTokenCollateral The address of the collateral cToken\n     * @param repayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\n     */\n    function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint repayAmount) external view returns (uint, uint) {\n        /* Read oracle prices for borrowed and collateral markets */\n        uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));\n        uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\n            return (uint(Error.PRICE_ERROR), 0);\n        }\n\n        /*\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\n         *  seizeAmount = repayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n         *  seizeTokens = seizeAmount / exchangeRate\n         *   = repayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n         */\n        uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error\n        uint seizeTokens;\n        Exp memory numerator;\n        Exp memory denominator;\n        Exp memory ratio;\n        MathError mathErr;\n\n        (mathErr, numerator) = mulExp(liquidationIncentiveMantissa, priceBorrowedMantissa);\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, denominator) = mulExp(priceCollateralMantissa, exchangeRateMantissa);\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, ratio) = divExp(numerator, denominator);\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint(Error.MATH_ERROR), 0);\n        }\n\n        (mathErr, seizeTokens) = mulScalarTruncate(ratio, repayAmount);\n        if (mathErr != MathError.NO_ERROR) {\n            return (uint(Error.MATH_ERROR), 0);\n        }\n\n        return (uint(Error.NO_ERROR), seizeTokens);\n    }\n\n    /*** Admin Functions ***/\n\n    /**\n      * @notice Sets a new price oracle for the comptroller\n      * @dev Admin function to set a new price oracle\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint) {\n        // Check caller is admin OR currently initialzing as new unitroller implementation\n        if (!adminOrInitializing()) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\n        }\n\n        // Track the old oracle for the comptroller\n        PriceOracle oldOracle = oracle;\n\n        // Ensure invoke newOracle.isPriceOracle() returns true\n        // require(newOracle.isPriceOracle(), \"oracle method isPriceOracle returned false\");\n\n        // Set comptroller's oracle to newOracle\n        oracle = newOracle;\n\n        // Emit NewPriceOracle(oldOracle, newOracle)\n        emit NewPriceOracle(oldOracle, newOracle);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice Sets the closeFactor used when liquidating borrows\n      * @dev Admin function to set closeFactor\n      * @param newCloseFactorMantissa New close factor, scaled by 1e18\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n      */\n    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint256) {\n        // Check caller is admin OR currently initialzing as new unitroller implementation\n        if (!adminOrInitializing()) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK);\n        }\n\n        Exp memory newCloseFactorExp = Exp({mantissa: newCloseFactorMantissa});\n        Exp memory lowLimit = Exp({mantissa: closeFactorMinMantissa});\n        if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\n            return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\n        }\n\n        Exp memory highLimit = Exp({mantissa: closeFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCloseFactorExp)) {\n            return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\n        }\n\n        uint oldCloseFactorMantissa = closeFactorMantissa;\n        closeFactorMantissa = newCloseFactorMantissa;\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice Sets the collateralFactor for a market\n      * @dev Admin function to set per-market collateralFactor\n      * @param cToken The market to set the factor on\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n      */\n    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\n        }\n\n        // Verify market is listed\n        Market storage market = markets[address(cToken)];\n        if (!market.isListed) {\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\n        }\n\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\n\n        // Check collateral factor <= 0.9\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\n        }\n\n        // If collateral factor != 0, fail if price == 0\n        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\n        }\n\n        // Set market's collateral factor to new collateral factor, remember old value\n        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\n\n        // Emit event with asset, old collateral factor, and new collateral factor\n        emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice Sets maxAssets which controls how many markets can be entered\n      * @dev Admin function to set maxAssets\n      * @param newMaxAssets New max assets\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n      */\n    function _setMaxAssets(uint newMaxAssets) external returns (uint) {\n        // Check caller is admin OR currently initialzing as new unitroller implementation\n        if (!adminOrInitializing()) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_MAX_ASSETS_OWNER_CHECK);\n        }\n\n        uint oldMaxAssets = maxAssets;\n        maxAssets = newMaxAssets;\n        emit NewMaxAssets(oldMaxAssets, newMaxAssets);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice Sets liquidationIncentive\n      * @dev Admin function to set liquidationIncentive\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n      */\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\n        // Check caller is admin OR currently initialzing as new unitroller implementation\n        if (!adminOrInitializing()) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\n        }\n\n        // Check de-scaled 1 <= newLiquidationDiscount <= 1.5\n        Exp memory newLiquidationIncentive = Exp({mantissa: newLiquidationIncentiveMantissa});\n        Exp memory minLiquidationIncentive = Exp({mantissa: liquidationIncentiveMinMantissa});\n        if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\n            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\n        }\n\n        Exp memory maxLiquidationIncentive = Exp({mantissa: liquidationIncentiveMaxMantissa});\n        if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\n            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\n        }\n\n        // Save current value for use in log\n        uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\n\n        // Set liquidation incentive to new incentive\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\n\n        // Emit event with old incentive, new incentive\n        emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice Add the market to the markets mapping and set it as listed\n      * @dev Admin function to set isListed and add support for the market\n      * @param cToken The address of the market (token) to list\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\n      */\n    function _supportMarket(CToken cToken) external returns (uint) {\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\n        }\n\n        if (markets[address(cToken)].isListed) {\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\n        }\n\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\n\n        markets[address(cToken)] = Market({isListed: true, collateralFactorMantissa: 0});\n        emit MarketListed(cToken);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    function _become(Unitroller unitroller, PriceOracle _oracle, uint _closeFactorMantissa, uint _maxAssets, bool reinitializing) public {\n        require(msg.sender == unitroller.admin(), \"only unitroller admin can change brains\");\n        uint changeStatus = unitroller._acceptImplementation();\n\n        require(changeStatus == 0, \"change not authorized\");\n\n        if (!reinitializing) {\n            Comptroller freshBrainedComptroller = Comptroller(address(unitroller));\n\n            // Ensure invoke _setPriceOracle() = 0\n            uint err = freshBrainedComptroller._setPriceOracle(_oracle);\n            require (err == uint(Error.NO_ERROR), \"set price oracle error\");\n\n            // Ensure invoke _setCloseFactor() = 0\n            err = freshBrainedComptroller._setCloseFactor(_closeFactorMantissa);\n            require (err == uint(Error.NO_ERROR), \"set close factor error\");\n\n            // Ensure invoke _setMaxAssets() = 0\n            err = freshBrainedComptroller._setMaxAssets(_maxAssets);\n            require (err == uint(Error.NO_ERROR), \"set max asssets error\");\n\n            // Ensure invoke _setLiquidationIncentive(liquidationIncentiveMinMantissa) = 0\n            err = freshBrainedComptroller._setLiquidationIncentive(liquidationIncentiveMinMantissa);\n            require (err == uint(Error.NO_ERROR), \"set liquidation incentive error\");\n        }\n    }\n\n    /**\n     * @dev Check that caller is admin or this contract is initializing itself as\n     * the new implementation.\n     * There should be no way to satisfy msg.sender == comptrollerImplementaiton\n     * without tx.origin also being admin, but both are included for extra safety\n     */\n    function adminOrInitializing() internal view returns (bool) {\n        bool initializing = (\n                msg.sender == comptrollerImplementation\n                &&\n                //solium-disable-next-line security/no-tx-origin\n                tx.origin == admin\n        );\n        bool isAdmin = msg.sender == admin;\n        return isAdmin || initializing;\n    }\n}\n",
  "bytecode": "608060405234801561001057600080fd5b50600080546001600160a01b03191633179055612d15806100326000396000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c80638e8f294b11610130578063d02f7351116100b8578063e4028eee1161007c578063e4028eee1461090e578063e87554461461093a578063eabe7d9114610942578063ede4edd014610978578063f851a4401461099e57610231565b8063d02f735114610841578063d9226ced14610887578063da3d454c146108a4578063dce15449146108da578063dcfbc0c71461090657610231565b8063abfceffc116100ff578063abfceffc14610695578063bb82aa5e1461070b578063bdcdc25814610713578063c29982381461074f578063c488847b146107f257610231565b80638e8f294b146105f8578063929fe9a11461063957806394b2294b14610667578063a76b3fda1461066f57610231565b80634ef4c3e1116101be5780635ec88c79116101825780635ec88c79146104e45780635fc7e71e146105285780636a56947e1461056e5780636d35bf91146105aa5780637dc0d1d0146105f057610231565b80634ef4c3e1146103f95780634fd42e171461042f57806351dff9891461044c57806355ee1fe1146104885780635c778605146104ae57610231565b8063317b0b7711610205578063317b0b771461030857806332000e001461032557806341c728b91461036957806347ef3b3b146103a55780634ada90af146103f157610231565b80627e3dd2146102365780631ededc911461025257806324008a621461029657806326782247146102e4575b600080fd5b61023e6109a6565b604080519115158252519081900360200190f35b610294600480360360a081101561026857600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013590608001356109ab565b005b6102d2600480360360808110156102ac57600080fd5b506001600160a01b038135811691602081013582169160408201351690606001356109b2565b60408051918252519081900360200190f35b6102ec6109e8565b604080516001600160a01b039092168252519081900360200190f35b6102d26004803603602081101561031e57600080fd5b50356109f7565b610294600480360360a081101561033b57600080fd5b506001600160a01b038135811691602081013590911690604081013590606081013590608001351515610b05565b6102946004803603608081101561037f57600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610fcd565b610294600480360360c08110156103bb57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060808101359060a00135610fd3565b6102d2610fd8565b6102d26004803603606081101561040f57600080fd5b506001600160a01b03813581169160208101359091169060400135610fde565b6102d26004803603602081101561044557600080fd5b5035611015565b6102946004803603608081101561046257600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135611104565b6102d26004803603602081101561049e57600080fd5b50356001600160a01b0316611167565b610294600480360360608110156104c457600080fd5b506001600160a01b038135811691602081013590911690604001356111e9565b61050a600480360360208110156104fa57600080fd5b50356001600160a01b03166111ee565b60408051938452602084019290925282820152519081900360600190f35b6102d2600480360360a081101561053e57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135611223565b6102946004803603608081101561058457600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135610fcd565b610294600480360360a08110156105c057600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013590911690608001356109ab565b6102ec6113aa565b61061e6004803603602081101561060e57600080fd5b50356001600160a01b03166113b9565b60408051921515835260208301919091528051918290030190f35b61023e6004803603604081101561064f57600080fd5b506001600160a01b03813581169160200135166113d8565b6102d261140c565b6102d26004803603602081101561068557600080fd5b50356001600160a01b0316611412565b6106bb600480360360208110156106ab57600080fd5b50356001600160a01b0316611541565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156106f75781810151838201526020016106df565b505050509050019250505060405180910390f35b6102ec6115ca565b6102d26004803603608081101561072957600080fd5b506001600160a01b038135811691602081013582169160408201351690606001356115d9565b6106bb6004803603602081101561076557600080fd5b81019060208101813564010000000081111561078057600080fd5b82018360208201111561079257600080fd5b803590602001918460208302840111640100000000831117156107b457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506115e6945050505050565b6108286004803603606081101561080857600080fd5b506001600160a01b0381358116916020810135909116906040013561178a565b6040805192835260208301919091528051918290030190f35b6102d2600480360360a081101561085757600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359091169060800135611a05565b6102d26004803603602081101561089d57600080fd5b5035611b4b565b6102d2600480360360608110156108ba57600080fd5b506001600160a01b03813581169160208101359091169060400135611baf565b6102ec600480360360408110156108f057600080fd5b506001600160a01b038135169060200135611ce6565b6102ec611d1b565b6102d26004803603604081101561092457600080fd5b506001600160a01b038135169060200135611d2a565b6102d2611edd565b6102d26004803603606081101561095857600080fd5b506001600160a01b03813581169160208101359091169060400135611ee3565b6102d26004803603602081101561098e57600080fd5b50356001600160a01b0316611ef0565b6102ec612206565b600181565b5050505050565b6001600160a01b03841660009081526009602052604081205460ff166109da575060096109e0565b60005b90505b949350505050565b6001546001600160a01b031681565b6000610a01612215565b610a1857610a1160016004612260565b9050610b00565b610a20612bde565b506040805160208101909152828152610a37612bde565b50604080516020810190915266b1a2bc2ec500008152610a5782826122c6565b15610a7057610a67600580612260565b92505050610b00565b610a78612bde565b506040805160208101909152670c7d713b49da00008152610a9981846122ce565b15610ab357610aa9600580612260565b9350505050610b00565b6005805490869055604080518281526020810188905281517f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd9929181900390910190a160005b9450505050505b919050565b846001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3e57600080fd5b505afa158015610b52573d6000803e3d6000fd5b505050506040513d6020811015610b6857600080fd5b50516001600160a01b03163314610bb357604051600160e51b62461bcd028152600401808060200182810382526027815260200180612cc36027913960400191505060405180910390fd5b6000856001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610bf057600080fd5b505af1158015610c04573d6000803e3d6000fd5b505050506040513d6020811015610c1a57600080fd5b505190508015610c745760408051600160e51b62461bcd02815260206004820152601560248201527f6368616e6765206e6f7420617574686f72697a65640000000000000000000000604482015290519081900360640190fd5b81610fc55760008690506000816001600160a01b03166355ee1fe1886040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b158015610cd857600080fd5b505af1158015610cec573d6000803e3d6000fd5b505050506040513d6020811015610d0257600080fd5b505190508015610d5c5760408051600160e51b62461bcd02815260206004820152601660248201527f736574207072696365206f7261636c65206572726f7200000000000000000000604482015290519081900360640190fd5b816001600160a01b031663317b0b77876040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610da257600080fd5b505af1158015610db6573d6000803e3d6000fd5b505050506040513d6020811015610dcc57600080fd5b505190508015610e265760408051600160e51b62461bcd02815260206004820152601660248201527f73657420636c6f736520666163746f72206572726f7200000000000000000000604482015290519081900360640190fd5b816001600160a01b031663d9226ced866040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610e6c57600080fd5b505af1158015610e80573d6000803e3d6000fd5b505050506040513d6020811015610e9657600080fd5b505190508015610ef05760408051600160e51b62461bcd02815260206004820152601560248201527f736574206d61782061737373657473206572726f720000000000000000000000604482015290519081900360640190fd5b816001600160a01b0316634fd42e17670de0b6b3a76400006040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610f3e57600080fd5b505af1158015610f52573d6000803e3d6000fd5b505050506040513d6020811015610f6857600080fd5b505190508015610fc25760408051600160e51b62461bcd02815260206004820152601f60248201527f736574206c69717569646174696f6e20696e63656e74697665206572726f7200604482015290519081900360640190fd5b50505b505050505050565b50505050565b610fc5565b60065481565b6001600160a01b03831660009081526009602052604081205460ff166110085760095b905061100e565b60005b90505b9392505050565b600061101f612215565b61102f57610a116001600b612260565b611037612bde565b50604080516020810190915282815261104e612bde565b506040805160208101909152670de0b6b3a7640000815261106f82826122ce565b1561108057610a676007600c612260565b611088612bde565b5060408051602081019091526714d1120d7b16000081526110a981846122ce565b156110ba57610aa96007600c612260565b6006805490869055604080518281526020810188905281517faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec1316929181900390910190a16000610af9565b801580156111125750600082115b15610fcd5760408051600160e51b62461bcd02815260206004820152601160248201527f72656465656d546f6b656e73207a65726f000000000000000000000000000000604482015290519081900360640190fd5b6000611171612215565b61118157610a1160016010612260565b600480546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e22929181900390910190a160009392505050565b505050565b6000806000806000806112058760008060006122d5565b92509250925082601181111561121757fe5b97919650945092505050565b6001600160a01b03851660009081526009602052604081205460ff16158061126457506001600160a01b03851660009081526009602052604090205460ff16155b156112735760095b90506113a1565b60008061127f856126fd565b9193509091506000905082601181111561129557fe5b146112af578160118111156112a657fe5b925050506113a1565b806112bb5760036112a6565b6000886001600160a01b03166395dd9193876040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561131357600080fd5b505afa158015611327573d6000803e3d6000fd5b505050506040513d602081101561133d57600080fd5b5051604080516020810190915260055481529091506000908190611361908461271d565b9092509050600082600381111561137457fe5b1461138857600b5b955050505050506113a1565b8087111561139757601161137c565b6000955050505050505b95945050505050565b6004546001600160a01b031681565b6009602052600090815260409020805460019091015460ff9091169082565b6001600160a01b038082166000908152600960209081526040808320938616835260029093019052205460ff165b92915050565b60075481565b600080546001600160a01b0316331461143157610a1160016012612260565b6001600160a01b03821660009081526009602052604090205460ff161561145e57610a11600a6011612260565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561149757600080fd5b505afa1580156114ab573d6000803e3d6000fd5b505050506040513d60208110156114c157600080fd5b50506040805180820182526001808252600060208084018281526001600160a01b03881680845260098352928690209451855460ff1916901515178555519390920192909255825191825291517fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f929181900390910190a1600092915050565b60608060086000846001600160a01b03166001600160a01b031681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156115bd57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161159f575b5093979650505050505050565b6002546001600160a01b031681565b60006109dd858584612771565b606060008251905060608160405190808252806020026020018201604052801561161a578160200160208202803883390190505b50905060005b8281101561178257600085828151811061163657fe5b6020908102919091018101516001600160a01b03811660009081526009909252604090912080549192509060ff1661168a5760095b84848151811061167757fe5b602002602001018181525050505061177a565b33600090815260028201602052604090205460ff161515600114156116b057600061166b565b60075433600090815260086020526040902054106116cf57601061166b565b3360008181526002830160209081526040808320805460ff19166001908117909155600883528184208054918201815584529282902090920180546001600160a01b0387166001600160a01b0319909116811790915582519081529081019290925280517f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a59281900390910190a1600084848151811061176b57fe5b60200260200101818152505050505b600101611620565b509392505050565b6004805460408051600160e01b63fc57d4df0281526001600160a01b038781169482019490945290516000938493849391169163fc57d4df91602480820192602092909190829003018186803b1580156117e357600080fd5b505afa1580156117f7573d6000803e3d6000fd5b505050506040513d602081101561180d57600080fd5b50516004805460408051600160e01b63fc57d4df0281526001600160a01b038a8116948201949094529051939450600093929091169163fc57d4df91602480820192602092909190829003018186803b15801561186957600080fd5b505afa15801561187d573d6000803e3d6000fd5b505050506040513d602081101561189357600080fd5b505190508115806118a2575080155b156118b757600d9350600092506119fd915050565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156118f257600080fd5b505afa158015611906573d6000803e3d6000fd5b505050506040513d602081101561191c57600080fd5b50519050600061192a612bde565b611932612bde565b61193a612bde565b6000611948600654896127e0565b94509050600081600381111561195a57fe5b1461197657600b5b9950600098506119fd975050505050505050565b61198087876127e0565b93509050600081600381111561199257fe5b1461199e57600b611962565b6119a8848461281b565b9250905060008160038111156119ba57fe5b146119c657600b611962565b6119d0828c61271d565b9550905060008160038111156119e257fe5b146119ee57600b611962565b60009950939750505050505050505b935093915050565b6001600160a01b03851660009081526009602052604081205460ff161580611a4657506001600160a01b03851660009081526009602052604090205460ff16155b15611a5257600961126c565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8b57600080fd5b505afa158015611a9f573d6000803e3d6000fd5b505050506040513d6020811015611ab557600080fd5b505160408051600160e01b635fe3b56702815290516001600160a01b0392831692891691635fe3b567916004808301926020929190829003018186803b158015611afe57600080fd5b505afa158015611b12573d6000803e3d6000fd5b505050506040513d6020811015611b2857600080fd5b50516001600160a01b031614611b3f57600261126c565b60009695505050505050565b6000611b55612215565b611b6557610a116001600d612260565b6007805490839055604080518281526020810185905281517f7093cf1eb653f749c3ff531d6df7f92764536a7fa0d13530cd26e070780c32ea929181900390910190a1600061100e565b6001600160a01b03831660009081526009602052604081205460ff16611bd6576009611001565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff16611c0e576008611001565b6004805460408051600160e01b63fc57d4df0281526001600160a01b03888116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b158015611c6257600080fd5b505afa158015611c76573d6000803e3d6000fd5b505050506040513d6020811015611c8c57600080fd5b5051611c9957600d611001565b600080611ca985876000876122d5565b91935090915060009050826011811115611cbf57fe5b14611cd957816011811115611cd057fe5b9250505061100e565b8015611b3f576004611cd0565b60086020528160005260406000208181548110611cff57fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b600080546001600160a01b03163314611d5057611d4960016006612260565b9050611406565b6001600160a01b0383166000908152600960205260409020805460ff16611d8557611d7d60096007612260565b915050611406565b611d8d612bde565b506040805160208101909152838152611da4612bde565b506040805160208101909152670c7d713b49da00008152611dc581836122ce565b15611de057611dd660066008612260565b9350505050611406565b8415801590611e6c57506004805460408051600160e01b63fc57d4df0281526001600160a01b038a8116948201949094529051929091169163fc57d4df91602480820192602092909190829003018186803b158015611e3e57600080fd5b505afa158015611e52573d6000803e3d6000fd5b505050506040513d6020811015611e6857600080fd5b5051155b15611e7d57611dd6600d6009612260565b60018301805490869055604080516001600160a01b03891681526020810183905280820188905290517f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59181900360600190a16000979650505050505050565b60055481565b600061100b848484612771565b6000808290506000806000836001600160a01b031663c37f68e2336040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b158015611f5157600080fd5b505afa158015611f65573d6000803e3d6000fd5b505050506040513d6080811015611f7b57600080fd5b508051602082015160409092015190945090925090508215611fd157604051600160e51b62461bcd028152600401808060200182810382526025815260200180612c9e6025913960400191505060405180910390fd5b8015611fee57611fe3600c6002612260565b945050505050610b00565b6000611ffb873385612771565b9050801561201c57612010600e600383612833565b95505050505050610b00565b6001600160a01b0385166000908152600960209081526040808320338452600281019092529091205460ff1661205b5760009650505050505050610b00565b3360009081526002820160209081526040808320805460ff1916905560088252918290208054835181840281018401909452808452606093928301828280156120cd57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120af575b5050835193945083925060009150505b8281101561212257896001600160a01b03168482815181106120fb57fe5b60200260200101516001600160a01b0316141561211a57809150612122565b6001016120dd565b5081811061212c57fe5b33600090815260086020526040902080548190600019810190811061214d57fe5b9060005260206000200160009054906101000a90046001600160a01b031681838154811061217757fe5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580546121b0826000198301612bf1565b50604080516001600160a01b038c16815233602082015281517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d929181900390910190a160009c9b505050505050505050505050565b6000546001600160a01b031681565b60025460009081906001600160a01b03163314801561223e57506000546001600160a01b031632145b6000549091506001600160a01b0316331480806122585750815b925050505b90565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa083601181111561228f57fe5b83601381111561229b57fe5b604080519283526020830191909152600082820152519081900360600190a182601181111561100e57fe5b519051111590565b5190511090565b60008060006122e2612c15565b6001600160a01b03881660009081526008602090815260408083208054825181850281018501909352808352849360609392919083018282801561234f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612331575b50939450600093505050505b81518110156126ae57600082828151811061237257fe5b60200260200101519050806001600160a01b031663c37f68e28e6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b1580156123d257600080fd5b505afa1580156123e6573d6000803e3d6000fd5b505050506040513d60808110156123fc57600080fd5b508051602082015160408084015160609485015160808c0152938a019390935291880191909152945084156124425750600f9750600096508695506126f3945050505050565b60408051602080820183526001600160a01b0380851660008181526009845285902060010154845260c08b01939093528351808301855260808b0151815260e08b0152600480548551600160e01b63fc57d4df02815291820194909452935192169263fc57d4df9260248083019392829003018186803b1580156124c557600080fd5b505afa1580156124d9573d6000803e3d6000fd5b505050506040513d60208110156124ef57600080fd5b505160a087018190526125135750600d9750600096508695506126f3945050505050565b604080516020810190915260a08701518152610100870181905260c087015160e088015161254092612899565b6101208801529350600084600381111561255657fe5b146125725750600b9750600096508695506126f3945050505050565b61258a866101200151876040015188600001516128f1565b87529350600084600381111561259c57fe5b146125b85750600b9750600096508695506126f3945050505050565b6125d0866101000151876060015188602001516128f1565b6020880152935060008460038111156125e557fe5b146126015750600b9750600096508695506126f3945050505050565b8b6001600160a01b0316816001600160a01b031614156126a55761262f8661012001518c88602001516128f1565b60208801529350600084600381111561264457fe5b146126605750600b9750600096508695506126f3945050505050565b6126748661010001518b88602001516128f1565b60208801529350600084600381111561268957fe5b146126a55750600b9750600096508695506126f3945050505050565b5060010161235b565b506020840151845111156126d55750505060208101519051600094500391508290506126f3565b50508151602090920151600095508594509190910391506126f39050565b9450945094915050565b60008060006127108460008060006122d5565b9250925092509193909250565b600080600061272a612bde565b612734868661293e565b9092509050600082600381111561274757fe5b14612758575091506000905061276a565b6000612763826129a6565b9350935050505b9250929050565b6001600160a01b03831660009081526009602052604081205460ff16612798576009611001565b6001600160a01b038085166000908152600960209081526040808320938716835260029093019052205460ff166127d0576000611001565b600080611ca985878660006122d5565b60006127ea612bde565b6128106040518060200160405280868152506040518060200160405280868152506129b5565b915091509250929050565b6000612825612bde565b835183516128109190612a9e565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa084601181111561286257fe5b84601381111561286e57fe5b604080519283526020830191909152818101859052519081900360600190a183601181111561100b57fe5b60006128a3612bde565b60006128ad612bde565b6128b787876129b5565b909250905060008260038111156128ca57fe5b146128d95790925090506119fd565b6128e381866129b5565b935093505050935093915050565b60008060006128fe612bde565b612908878761293e565b9092509050600082600381111561291b57fe5b1461292c57509150600090506119fd565b6128e3612938826129a6565b86612b4e565b6000612948612bde565b600080612959866000015186612b74565b9092509050600082600381111561296c57fe5b1461298b5750604080516020810190915260008152909250905061276a565b60408051602081019091529081526000969095509350505050565b51670de0b6b3a7640000900490565b60006129bf612bde565b6000806129d486600001518660000151612b74565b909250905060008260038111156129e757fe5b14612a065750604080516020810190915260008152909250905061276a565b600080612a1b6706f05b59d3b2000084612b4e565b90925090506000826003811115612a2e57fe5b14612a505750604080516020810190915260008152909450925061276a915050565b600080612a6583670de0b6b3a7640000612bb3565b90925090506000826003811115612a7857fe5b14612a7f57fe5b604080516020810190915290815260009a909950975050505050505050565b6000612aa8612bde565b600080612abd86670de0b6b3a7640000612b74565b90925090506000826003811115612ad057fe5b14612aef5750604080516020810190915260008152909250905061276a565b600080612afc8388612bb3565b90925090506000826003811115612b0f57fe5b14612b315750604080516020810190915260008152909450925061276a915050565b604080516020810190915290815260009890975095505050505050565b600080838301848110612b665760009250905061276a565b50600291506000905061276a565b60008083612b875750600090508061276a565b83830283858281612b9457fe5b0414612ba85750600291506000905061276a565b60009250905061276a565b60008082612bc7575060019050600061276a565b6000838581612bd257fe5b04915091509250929050565b6040518060200160405280600081525090565b8154818355818111156111e9576000838152602090206111e9918101908301612c7f565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001612c53612bde565b8152602001612c60612bde565b8152602001612c6d612bde565b8152602001612c7a612bde565b905290565b61225d91905b80821115612c995760008155600101612c85565b509056fe657869744d61726b65743a206765744163636f756e74536e617073686f74206661696c65646f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676520627261696e73a165627a7a7230582075d92d0e96eb01957b794704a02af0b7e3c5efe630de7186f3688639d7128e900029"
}