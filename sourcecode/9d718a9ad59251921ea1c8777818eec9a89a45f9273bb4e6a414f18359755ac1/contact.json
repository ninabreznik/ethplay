{
  "address": "0x2aa3645dd23acf7c3056c8d7b5c4d0904976dd1d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BulkTransfer",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-04\n*/\n\npragma solidity ^0.4.24;\n\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint);\n    function balanceOf(address tokenOwner) external view returns (uint balance);\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\n    function transfer(address to, uint tokens) external returns (bool success);\n    function approve(address spender, uint tokens) external returns (bool success);\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n}\n\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a, \"Addition overflow\");\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a, \"Subtraction overflow\");\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b, \"Multiplication overflow\");\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0, \"The denominator is 0\");\n        c = a / b;\n    }\n}\n\n\ncontract BulkTransfer\n{\n    using SafeMath for uint;\n    address owner;\n    \n    event MultiTransfer(\n        address indexed _from,\n        uint indexed _value,\n        address _to,\n        uint _amount\n    );\n\n    event MultiERC20Transfer(\n        address indexed _from,\n        address _to,\n        uint _amount,\n        ERC20 _token\n    );\n    \n    constructor () public payable {\n        owner = msg.sender;\n    }\n    \n    function multiTransfer(address[] _addresses, uint[] _amounts) public payable returns(bool) {\n        uint toReturn = msg.value;\n        for (uint i = 0; i < _addresses.length; i++) {\n            _safeTransfer(_addresses[i], _amounts[i]);\n            toReturn = SafeMath.sub(toReturn, _amounts[i]);\n            emit MultiTransfer(msg.sender, msg.value, _addresses[i], _amounts[i]);\n        }\n        _safeTransfer(msg.sender, toReturn);\n        return true;\n    }\n\n    function multiERC20Transfer(ERC20 _token, address[] _addresses, uint[] _amounts) public payable {\n        for (uint i = 0; i < _addresses.length; i++) {\n            _safeERC20Transfer(_token, _addresses[i], _amounts[i]);\n            emit MultiERC20Transfer(\n                msg.sender,\n                _addresses[i],\n                _amounts[i],\n                _token\n            );\n        }\n    }\n\n    function _safeTransfer(address _to, uint _amount) internal {\n        require(_to != 0, \"Receipt address can't be 0\");\n        _to.transfer(_amount);\n    }\n\n    function _safeERC20Transfer(ERC20 _token, address _to, uint _amount) internal {\n        require(_to != 0, \"Receipt address can't be 0\");\n        require(_token.transferFrom(msg.sender, _to, _amount), \"Sending a token failed\");\n    }\n\n    function () public payable {\n        revert(\"Contract prohibits receiving funds\");\n    }\n\n    function forwardTransaction( address destination, uint amount, uint gasLimit, bytes data) internal {\n        require(msg.sender == owner, \"Not an administrator\");\n        require(\n            destination.call.gas(\n                (gasLimit > 0) ? gasLimit : gasleft()\n            ).value(amount)(data), \n            \"operation failed\"\n        );\n    }\n}",
  "bytecode": "608060405260008054600160a060020a0319163317905561063c806100256000396000f30060806040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631e89d54581146100c157806335a2172814610156575b6040805160e560020a62461bcd02815260206004820152602260248201527f436f6e74726163742070726f68696269747320726563656976696e672066756e60448201527f6473000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6040805160206004803580820135838102808601850190965280855261014295369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506101e79650505050505050565b604080519115158252519081900360200190f35b6040805160206004602480358281013584810280870186019097528086526101e5968435600160a060020a031696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506102e89650505050505050565b005b600034815b84518110156102d35761022d858281518110151561020657fe5b90602001906020020151858381518110151561021e57fe5b906020019060200201516103c1565b61024e82858381518110151561023f57fe5b9060200190602002015161045c565b91503433600160a060020a03167f319e0008dcdeba1f31169497fb0f35d31b2b2f481c714d1f50640e86ac6c3bb0878481518110151561028a57fe5b9060200190602002015187858151811015156102a257fe5b602090810290910181015160408051600160a060020a039094168452918301528051918290030190a36001016101ec565b6102dd33836103c1565b506001949350505050565b60005b82518110156103bb5761032d84848381518110151561030657fe5b90602001906020020151848481518110151561031e57fe5b906020019060200201516104bc565b33600160a060020a03167fd04ad965951afcb882956cb0fe6674211318b87c952b4efac0d2aa38e16908af848381518110151561036657fe5b90602001906020020151848481518110151561037e57fe5b602090810290910181015160408051600160a060020a039485168152928301919091529188168183015290519081900360600190a26001016102eb565b50505050565b600160a060020a0382161515610421576040805160e560020a62461bcd02815260206004820152601a60248201527f5265636569707420616464726573732063616e27742062652030000000000000604482015290519081900360640190fd5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610457573d6000803e3d6000fd5b505050565b6000828211156104b6576040805160e560020a62461bcd02815260206004820152601460248201527f5375627472616374696f6e206f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b50900390565b600160a060020a038216151561051c576040805160e560020a62461bcd02815260206004820152601a60248201527f5265636569707420616464726573732063616e27742062652030000000000000604482015290519081900360640190fd5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a038481166024830152604482018490529151918516916323b872dd916064808201926020929091908290030181600087803b15801561058e57600080fd5b505af11580156105a2573d6000803e3d6000fd5b505050506040513d60208110156105b857600080fd5b50511515610457576040805160e560020a62461bcd02815260206004820152601660248201527f53656e64696e67206120746f6b656e206661696c656400000000000000000000604482015290519081900360640190fd00a165627a7a7230582077ae5103e7d5803056a463cdb6ddfcec44bb5e833e4a99325c7e15e293c6d66a0029"
}