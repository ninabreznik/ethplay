{
  "address": "0x6863be0e7cf7ce860a574760e9020d519a8bdc47",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "On.Live Token",
  "contractName": "OnLiveToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-18\n*/\n\n/* solhint-disable no-simple-event-func-name */\n\npragma solidity 0.4.18;\n\n\n/*\n * https://github.com/OpenZeppelin/zeppelin-solidity\n *\n * The MIT License (MIT)\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/*\n * https://github.com/OpenZeppelin/zeppelin-solidity\n *\n * The MIT License (MIT)\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n\n/*\n * https://github.com/OpenZeppelin/zeppelin-solidity\n *\n * The MIT License (MIT)\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/*\n * https://github.com/OpenZeppelin/zeppelin-solidity\n *\n * The MIT License (MIT)\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) internal balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n\n/**\n * @title A token that can decrease its supply\n * @author Jakub Stefanski (https://github.com/jstefanski)\n *\n * https://github.com/OnLivePlatform/onlive-contracts\n *\n * The BSD 3-Clause Clear License\n * Copyright (c) 2018 OnLive LTD\n */\ncontract BurnableToken is BasicToken {\n\n    using SafeMath for uint256;\n\n    /**\n     * @dev Address where burned tokens are Transferred.\n     * @dev This is useful for blockchain explorers operating on Transfer event.\n     */\n    address public constant BURN_ADDRESS = address(0x0);\n\n    /**\n     * @dev Tokens destroyed from specified address\n     * @param from address The burner\n     * @param amount uint256 The amount of destroyed tokens\n     */\n    event Burned(address indexed from, uint256 amount);\n\n    modifier onlyHolder(uint256 amount) {\n        require(balances[msg.sender] >= amount);\n        _;\n    }\n\n    /**\n     * @dev Destroy tokens (reduce total supply)\n     * @param amount uint256 The amount of tokens to be burned\n     */\n    function burn(uint256 amount)\n        public\n        onlyHolder(amount)\n    {\n        balances[msg.sender] = balances[msg.sender].sub(amount);\n        totalSupply = totalSupply.sub(amount);\n\n        Burned(msg.sender, amount);\n        Transfer(msg.sender, BURN_ADDRESS, amount);\n    }\n}\n\n\n/**\n * @title A token with modifiable name and symbol\n * @author Jakub Stefanski (https://github.com/jstefanski)\n *\n * https://github.com/OnLivePlatform/onlive-contracts\n *\n * The BSD 3-Clause Clear License\n * Copyright (c) 2018 OnLive LTD\n */\ncontract DescriptiveToken is BasicToken, Ownable {\n\n    string public name;\n    string public symbol;\n    bool public isDescriptionFinalized;\n    uint256 public decimals = 18;\n\n    function DescriptiveToken(\n        string _name,\n        string _symbol\n    )\n        public\n        onlyNotEmpty(_name)\n        onlyNotEmpty(_symbol)\n    {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /**\n     * @dev Logs change of token name and symbol\n     * @param name string The new token name\n     * @param symbol string The new token symbol\n     */\n    event DescriptionChanged(string name, string symbol);\n\n    /**\n     * @dev Further changes to name and symbol are forbidden\n     */\n    event DescriptionFinalized();\n\n    modifier onlyNotEmpty(string str) {\n        require(bytes(str).length > 0);\n        _;\n    }\n\n    modifier onlyDescriptionNotFinalized() {\n        require(!isDescriptionFinalized);\n        _;\n    }\n\n    /**\n     * @dev Change name and symbol of tokens\n     * @dev May be used in case of symbol collisions in exchanges.\n     * @param _name string A new token name\n     * @param _symbol string A new token symbol\n     */\n    function changeDescription(string _name, string _symbol)\n        public\n        onlyOwner\n        onlyDescriptionNotFinalized\n        onlyNotEmpty(_name)\n        onlyNotEmpty(_symbol)\n    {\n        name = _name;\n        symbol = _symbol;\n\n        DescriptionChanged(name, symbol);\n    }\n\n    /**\n     * @dev Prevents further changes to name and symbol\n     */\n    function finalizeDescription()\n        public\n        onlyOwner\n        onlyDescriptionNotFinalized\n    {\n        isDescriptionFinalized = true;\n\n        DescriptionFinalized();\n    }\n}\n\n\n/**\n * @title A token that can increase its supply in initial period\n * @author Jakub Stefanski (https://github.com/jstefanski)\n *\n * https://github.com/OnLivePlatform/onlive-contracts\n *\n * The BSD 3-Clause Clear License\n * Copyright (c) 2018 OnLive LTD\n */\ncontract MintableToken is BasicToken, Ownable {\n\n    using SafeMath for uint256;\n\n    /**\n     * @dev Address from which minted tokens are Transferred.\n     * @dev This is useful for blockchain explorers operating on Transfer event.\n     */\n    address public constant MINT_ADDRESS = address(0x0);\n\n    /**\n     * @dev Indicates whether creating tokens has finished\n     */\n    bool public mintingFinished;\n\n    /**\n     * @dev Addresses allowed to create tokens\n     */\n    mapping (address => bool) public isMintingManager;\n\n    /**\n     * @dev Tokens minted to specified address\n     * @param to address The receiver of the tokens\n     * @param amount uint256 The amount of tokens\n     */\n    event Minted(address indexed to, uint256 amount);\n\n    /**\n     * @dev Approves specified address as a Minting Manager\n     * @param addr address The approved address\n     */\n    event MintingManagerApproved(address addr);\n\n    /**\n     * @dev Revokes specified address as a Minting Manager\n     * @param addr address The revoked address\n     */\n    event MintingManagerRevoked(address addr);\n\n    /**\n     * @dev Creation of tokens finished\n     */\n    event MintingFinished();\n\n    modifier onlyMintingManager(address addr) {\n        require(isMintingManager[addr]);\n        _;\n    }\n\n    modifier onlyMintingNotFinished {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Approve specified address to mint tokens\n     * @param addr address The approved Minting Manager address\n     */\n    function approveMintingManager(address addr)\n        public\n        onlyOwner\n        onlyMintingNotFinished\n    {\n        isMintingManager[addr] = true;\n\n        MintingManagerApproved(addr);\n    }\n\n    /**\n     * @dev Forbid specified address to mint tokens\n     * @param addr address The denied Minting Manager address\n     */\n    function revokeMintingManager(address addr)\n        public\n        onlyOwner\n        onlyMintingManager(addr)\n        onlyMintingNotFinished\n    {\n        delete isMintingManager[addr];\n\n        MintingManagerRevoked(addr);\n    }\n\n    /**\n     * @dev Create new tokens and transfer them to specified address\n     * @param to address The address to transfer to\n     * @param amount uint256 The amount to be minted\n     */\n    function mint(address to, uint256 amount)\n        public\n        onlyMintingManager(msg.sender)\n        onlyMintingNotFinished\n    {\n        totalSupply = totalSupply.add(amount);\n        balances[to] = balances[to].add(amount);\n\n        Minted(to, amount);\n        Transfer(MINT_ADDRESS, to, amount);\n    }\n\n    /**\n     * @dev Prevent further creation of tokens\n     */\n    function finishMinting()\n        public\n        onlyOwner\n        onlyMintingNotFinished\n    {\n        mintingFinished = true;\n\n        MintingFinished();\n    }\n}\n\n\n/**\n * @title A token that can increase its supply to the specified limit\n * @author Jakub Stefanski (https://github.com/jstefanski)\n *\n * https://github.com/OnLivePlatform/onlive-contracts\n *\n * The BSD 3-Clause Clear License\n * Copyright (c) 2018 OnLive LTD\n */\ncontract CappedMintableToken is MintableToken {\n\n    /**\n     * @dev Maximum supply that can be minted\n     */\n    uint256 public maxSupply;\n\n    function CappedMintableToken(uint256 _maxSupply)\n        public\n        onlyNotZero(_maxSupply)\n    {\n        maxSupply = _maxSupply;\n    }\n\n    modifier onlyNotZero(uint256 value) {\n        require(value != 0);\n        _;\n    }\n\n    modifier onlyNotExceedingMaxSupply(uint256 supply) {\n        require(supply <= maxSupply);\n        _;\n    }\n\n    /**\n     * @dev Create new tokens and transfer them to specified address\n     * @dev Checks against capped max supply of token.\n     * @param to address The address to transfer to\n     * @param amount uint256 The amount to be minted\n     */\n    function mint(address to, uint256 amount)\n        public\n        onlyNotExceedingMaxSupply(totalSupply.add(amount))\n    {\n        return MintableToken.mint(to, amount);\n    }\n}\n\n\n/*\n * https://github.com/OpenZeppelin/zeppelin-solidity\n *\n * The MIT License (MIT)\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n *\n * https://github.com/OnLivePlatform/onlive-contracts\n *\n * The BSD 3-Clause Clear License\n * Copyright (c) 2018 OnLive LTD\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/*\n * https://github.com/OpenZeppelin/zeppelin-solidity\n *\n * The MIT License (MIT)\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\n *\n * https://github.com/OnLivePlatform/onlive-contracts\n *\n * The BSD 3-Clause Clear License\n * Copyright (c) 2018 OnLive LTD\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\n/**\n * @title ERC20 token with manual initial lock up period\n * @author Jakub Stefanski (https://github.com/jstefanski)\n *\n * https://github.com/OnLivePlatform/onlive-contracts\n *\n * The BSD 3-Clause Clear License\n * Copyright (c) 2018 OnLive LTD\n */\ncontract ReleasableToken is StandardToken, Ownable {\n\n    /**\n     * @dev Controls whether token transfers are enabled\n     * @dev If false, token is in transfer lock up period.\n     */\n    bool public released;\n\n    /**\n     * @dev Contract or EOA that can enable token transfers\n     */\n    address public releaseManager;\n\n    /**\n     * @dev Map of addresses allowed to transfer tokens despite the lock up period\n     */\n    mapping (address => bool) public isTransferManager;\n\n    /**\n     * @dev Specified address set as a Release Manager\n     * @param addr address The approved address\n     */\n    event ReleaseManagerSet(address addr);\n\n    /**\n     * @dev Approves specified address as Transfer Manager\n     * @param addr address The approved address\n     */\n    event TransferManagerApproved(address addr);\n\n    /**\n     * @dev Revokes specified address as Transfer Manager\n     * @param addr address The denied address\n     */\n    event TransferManagerRevoked(address addr);\n\n    /**\n     * @dev Marks token as released (transferable)\n     */\n    event Released();\n\n    /**\n     * @dev Token is released or specified address is transfer manager\n     */\n    modifier onlyTransferableFrom(address from) {\n        if (!released) {\n            require(isTransferManager[from]);\n        }\n\n        _;\n    }\n\n    /**\n     * @dev Specified address is transfer manager\n     */\n    modifier onlyTransferManager(address addr) {\n        require(isTransferManager[addr]);\n        _;\n    }\n\n    /**\n     * @dev Sender is release manager\n     */\n    modifier onlyReleaseManager() {\n        require(msg.sender == releaseManager);\n        _;\n    }\n\n    /**\n     * @dev Token is released (transferable)\n     */\n    modifier onlyReleased() {\n        require(released);\n        _;\n    }\n\n    /**\n     * @dev Token is in lock up period\n     */\n    modifier onlyNotReleased() {\n        require(!released);\n        _;\n    }\n\n    /**\n     * @dev Set release manager if token not released yet\n     * @param addr address The new Release Manager address\n     */\n    function setReleaseManager(address addr)\n        public\n        onlyOwner\n        onlyNotReleased\n    {\n        releaseManager = addr;\n\n        ReleaseManagerSet(addr);\n    }\n\n    /**\n     * @dev Approve specified address to make transfers in lock up period\n     * @param addr address The approved Transfer Manager address\n     */\n    function approveTransferManager(address addr)\n        public\n        onlyOwner\n        onlyNotReleased\n    {\n        isTransferManager[addr] = true;\n\n        TransferManagerApproved(addr);\n    }\n\n    /**\n     * @dev Forbid specified address to make transfers in lock up period\n     * @param addr address The denied Transfer Manager address\n     */\n    function revokeTransferManager(address addr)\n        public\n        onlyOwner\n        onlyTransferManager(addr)\n        onlyNotReleased\n    {\n        delete isTransferManager[addr];\n\n        TransferManagerRevoked(addr);\n    }\n\n    /**\n     * @dev Release token and makes it transferable\n     */\n    function release()\n        public\n        onlyReleaseManager\n        onlyNotReleased\n    {\n        released = true;\n\n        Released();\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @dev Available only after token release\n     * @param to address The address to transfer to\n     * @param amount uint256 The amount to be transferred\n     */\n    function transfer(\n        address to,\n        uint256 amount\n    )\n        public\n        onlyTransferableFrom(msg.sender)\n        returns (bool)\n    {\n        return super.transfer(to, amount);\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @dev Available only after token release\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param amount uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    )\n        public\n        onlyTransferableFrom(from)\n        returns (bool)\n    {\n        return super.transferFrom(from, to, amount);\n    }\n}\n\n\n/**\n * @title OnLive Token\n * @author Jakub Stefanski (https://github.com/jstefanski)\n * @dev Implements ERC20 interface\n * @dev Mintable by selected addresses until sale finishes\n * @dev A cap on total supply of tokens\n * @dev Burnable by anyone\n * @dev Manual lock-up period (non-transferable) with a non-reversible release by the selected address\n * @dev Modifiable symbol and name in case of collision\n *\n * https://github.com/OnLivePlatform/onlive-contracts\n *\n * The BSD 3-Clause Clear License\n * Copyright (c) 2018 OnLive LTD\n */\ncontract OnLiveToken is DescriptiveToken, ReleasableToken, CappedMintableToken, BurnableToken {\n\n    function OnLiveToken(\n        string _name,\n        string _symbol,\n        uint256 _maxSupply\n    )\n        public\n        DescriptiveToken(_name, _symbol)\n        CappedMintableToken(_maxSupply)\n    {\n        owner = msg.sender;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"approveTransferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"approveMintingManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"revokeMintingManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"revokeTransferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDescriptionFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTransferManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMintingManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"MintingManagerApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"MintingManagerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ReleaseManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"TransferManagerApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"TransferManagerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"DescriptionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DescriptionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604052601260075534156200001557600080fd5b60405162002d6c38038062002d6c8339810160405280805182019190602001805182019190602001805190602001909190505080838333600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600081511115156200009e57600080fd5b8160008151111515620000b057600080fd5b8360049080519060200190620000c89291906200014b565b508260059080519060200190620000e19291906200014b565b50505050508060008114151515620000f857600080fd5b81600c81905550505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620001fa565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200018e57805160ff1916838001178555620001bf565b82800160010185558215620001bf579182015b82811115620001be578251825591602001919060010190620001a1565b5b509050620001ce9190620001d2565b5090565b620001f791905b80821115620001f3576000816000905550600101620001d9565b5090565b90565b612b62806200020a6000396000f3006060604052600436106101a1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b146101a657806306fdde03146101d3578063095ea7b3146102615780630d78573e146102bb57806318160ddd1461031057806323b872dd14610339578063313ce567146103b25780633a23a483146103db57806340c10f191461041457806342966c6814610456578063466c35fc1461047957806352d714e8146104ce578063661884631461050757806366a116151461056157806370a082311461059a57806379848daa146105e75780637beccd70146106205780637d64bcb41461065957806386d1a69f1461066e5780638da5cb5b1461068357806395d89b41146106d85780639613252114610766578063a9059cbb14610793578063c5044b62146107ed578063c80459411461081a578063d5abeb01146108ba578063d73dd623146108e3578063dd62ed3e1461093d578063e86c6431146109a9578063eaa382c2146109fa578063f2fde38b14610a4b578063fca129a314610a84578063fccc281314610a99575b600080fd5b34156101b157600080fd5b6101b9610aee565b604051808215151515815260200191505060405180910390f35b34156101de57600080fd5b6101e6610b01565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561022657808201518184015260208101905061020b565b50505050905090810190601f1680156102535780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561026c57600080fd5b6102a1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b9f565b604051808215151515815260200191505060405180910390f35b34156102c657600080fd5b6102ce610c91565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561031b57600080fd5b610323610cb7565b6040518082815260200191505060405180910390f35b341561034457600080fd5b610398600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cbd565b604051808215151515815260200191505060405180910390f35b34156103bd57600080fd5b6103c5610d44565b6040518082815260200191505060405180910390f35b34156103e657600080fd5b610412600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d4a565b005b341561041f57600080fd5b610454600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e80565b005b341561046157600080fd5b6104776004808035906020019091905050610eb5565b005b341561048457600080fd5b61048c61106c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104d957600080fd5b610505600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611071565b005b341561051257600080fd5b610547600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111a7565b604051808215151515815260200191505060405180910390f35b341561056c57600080fd5b610598600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611438565b005b34156105a557600080fd5b6105d1600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115bf565b6040518082815260200191505060405180910390f35b34156105f257600080fd5b61061e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611608565b005b341561062b57600080fd5b610657600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611727565b005b341561066457600080fd5b61066c6118ae565b005b341561067957600080fd5b61068161196f565b005b341561068e57600080fd5b610696611a30565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106e357600080fd5b6106eb611a56565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561072b578082015181840152602081019050610710565b50505050905090810190601f1680156107585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561077157600080fd5b610779611af4565b604051808215151515815260200191505060405180910390f35b341561079e57600080fd5b6107d3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611b07565b604051808215151515815260200191505060405180910390f35b34156107f857600080fd5b610800611b8c565b604051808215151515815260200191505060405180910390f35b341561082557600080fd5b6108b8600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611b9f565b005b34156108c557600080fd5b6108cd611db2565b6040518082815260200191505060405180910390f35b34156108ee57600080fd5b610923600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611db8565b604051808215151515815260200191505060405180910390f35b341561094857600080fd5b610993600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611fb4565b6040518082815260200191505060405180910390f35b34156109b457600080fd5b6109e0600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061203b565b604051808215151515815260200191505060405180910390f35b3415610a0557600080fd5b610a31600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061205b565b604051808215151515815260200191505060405180910390f35b3415610a5657600080fd5b610a82600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061207b565b005b3415610a8f57600080fd5b610a976121d3565b005b3415610aa457600080fd5b610aac612294565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600a60009054906101000a900460ff1681565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b975780601f10610b6c57610100808354040283529160200191610b97565b820191906000526020600020905b815481529060010190602001808311610b7a57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600083600860009054906101000a900460ff161515610d2f57600960008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610d2e57600080fd5b5b610d3a858585612299565b9150509392505050565b60075481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610da657600080fd5b600860009054906101000a900460ff16151515610dc257600080fd5b6001600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f23724ffd98c8f39c7b5c43982c298ac0cdc6e7848155cb4ad39d06f54692a72e81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b610e958160005461265890919063ffffffff16565b600c548111151515610ea657600080fd5b610eb08383612676565b505050565b8080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610f0457600080fd5b610f5682600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461285490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fae8260005461285490919063ffffffff16565b6000819055503373ffffffffffffffffffffffffffffffffffffffff167f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7836040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050565b600081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110cd57600080fd5b600a60009054906101000a900460ff161515156110e957600080fd5b6001600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe51e88bd9ebff6e735eefe034d049d93b496e774a0ff56d16a13fc36cf68963681604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156112b8576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061134c565b6112cb838261285490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561149457600080fd5b80600b60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156114ed57600080fd5b600a60009054906101000a900460ff1615151561150957600080fd5b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690557fc21afa55c927bd0de399897b42b5bc046faddff7ba7f059f8cf8ed07cdaa43c682604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561166457600080fd5b600860009054906101000a900460ff1615151561168057600080fd5b80600860016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f66234c4af04fd27783c022105ed85b455d750f8d0ef06f46e92c9eda4b3a505e81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561178357600080fd5b80600960008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156117dc57600080fd5b600860009054906101000a900460ff161515156117f857600080fd5b600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690557ff6eb58de45158f4d163191f2e8eaa27e1f70e2fa7207360d651843ab3f32772a82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561190a57600080fd5b600a60009054906101000a900460ff1615151561192657600080fd5b6001600a60006101000a81548160ff0219169083151502179055507fb828d9b5c78095deeeeff2eca2e5d4fe046ce3feb4c99702624a3fd384ad2dbc60405160405180910390a1565b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119cb57600080fd5b600860009054906101000a900460ff161515156119e757600080fd5b6001600860006101000a81548160ff0219169083151502179055507f20d29efe076941f73e5574acb023c424d63cd6d3d12eb5ac3108a5eaf177daed60405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611aec5780601f10611ac157610100808354040283529160200191611aec565b820191906000526020600020905b815481529060010190602001808311611acf57829003601f168201915b505050505081565b600860009054906101000a900460ff1681565b600033600860009054906101000a900460ff161515611b7957600960008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611b7857600080fd5b5b611b83848461286d565b91505092915050565b600660009054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bfb57600080fd5b600660009054906101000a900460ff16151515611c1757600080fd5b8160008151111515611c2857600080fd5b8160008151111515611c3957600080fd5b8360049080519060200190611c4f929190612a91565b508260059080519060200190611c66929190612a91565b507f4c714ed400777523a08c9a597a0c014afca0780da3f4b607abb5f9829eb7355260046005604051808060200180602001838103835285818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015611d195780601f10611cee57610100808354040283529160200191611d19565b820191906000526020600020905b815481529060010190602001808311611cfc57829003601f168201915b5050838103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015611d9c5780601f10611d7157610100808354040283529160200191611d9c565b820191906000526020600020905b815481529060010190602001808311611d7f57829003601f168201915b505094505050505060405180910390a150505050565b600c5481565b6000611e4982600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265890919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60096020528060005260406000206000915054906101000a900460ff1681565b600b6020528060005260406000206000915054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120d757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561211357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561222f57600080fd5b600660009054906101000a900460ff1615151561224b57600080fd5b6001600660006101000a81548160ff0219169083151502179055507f438bdc6d03f0933e768dea87718d87f62a6768195153c07f98ebf4ae4a8ae92360405160405180910390a1565b600081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156122d657600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561232457600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156123af57600080fd5b61240182600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461285490919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061249682600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265890919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061256882600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461285490919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600080828401905083811015151561266c57fe5b8091505092915050565b33600b60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156126cf57600080fd5b600a60009054906101000a900460ff161515156126eb57600080fd5b6127008260005461265890919063ffffffff16565b60008190555061275882600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265890919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3505050565b600082821115151561286257fe5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156128aa57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156128f857600080fd5b61294a82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461285490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506129df82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265890919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ad257805160ff1916838001178555612b00565b82800160010185558215612b00579182015b82811115612aff578251825591602001919060010190612ae4565b5b509050612b0d9190612b11565b5090565b612b3391905b80821115612b2f576000816000905550600101612b17565b5090565b905600a165627a7a7230582055e49db4b0910c823ab2d74d0e52056c9974f51a0727e35a7ee0566b8407a6280029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000005bd12a0eaadb08cf000000000000000000000000000000000000000000000000000000000000000000000c4f6e4c69766520546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034f4e4c0000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000005bd12a0eaadb08cf000000000000000000000000000000000000000000000000000000000000000000000c4f6e4c69766520546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034f4e4c0000000000000000000000000000000000000000000000000000000000"
}