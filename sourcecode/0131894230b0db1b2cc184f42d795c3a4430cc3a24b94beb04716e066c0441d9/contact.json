{
  "address": "0x0aa54f4b3efa5576d581ebb121f1625f0ea5dae4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HuaLiToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-15\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ncontract Owned {\n  address owner;\n  constructor () public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner {\n    require(msg.sender == owner,\"Only owner can do it.\");\n    _;\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract HuaLiToken is IERC20 , Owned{\n\n  string public constant name = \"HuaLiToken\";\n  string public constant symbol = \"HHLC\";\n  uint8 public constant decimals = 18;\n\n  uint256 private constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));\n\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  \n  mapping(address => uint256) balances;\n  uint256[] public releaseTimeLines=[1539748800,1545019200,1550376000,1555473600,1560744000,1566014400,1571284800,1576555200,1581912000,1587096000,1592366400,1597636800,1602907200,1608177600,1613534400,1618632000,1623902400,1629172800,1634443200,1639713600,1645070400,1650168000,1655438400,1660708800];\n    \n  struct Role {\n    address roleAddress;\n    uint256 amount;\n    uint256 firstRate;\n    uint256 round;\n    uint256 rate;\n  }\n   \n  mapping (address => mapping (uint256 => Role)) public mapRoles;\n  mapping (address => address) private lockList;\n  \n  event Lock(address from, uint256 value, uint256 lockAmount , uint256 balance);\n  \n  constructor() public {\n    _mint(msg.sender, INITIAL_SUPPLY);\n  }\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    if(_canTransfer(msg.sender,value)){ \n      _transfer(msg.sender, to, value);\n      return true;\n    } else {\n      emit Lock(msg.sender,value,getLockAmount(msg.sender),balanceOf(msg.sender));\n      return false;\n    }\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n    \n    if (_canTransfer(from, value)) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        return true;\n    } else {\n        emit Lock(from,value,getLockAmount(from),balanceOf(from));\n        return false;\n    }\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n    \n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n    \n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n  \n  function setTimeLine(uint256[] timeLine) onlyOwner public {\n    releaseTimeLines = timeLine;\n  }\n  \n  /**\n   * @dev getRoleReleaseSeting\n   * @param roleType 1:Seed 2:Angel 3:PE 4:AirDrop\n   */\n  function getRoleReleaseSeting(uint256 roleType) pure public returns (uint256,uint256,uint256) {\n    if(roleType == 1){\n      return (50,1,10);\n    }else if(roleType == 2){\n      return (30,1,10);\n    }else if(roleType == 3){\n      return (40,3,20);\n    }else if(roleType == 4){\n      return (5,1,5);\n    }else {\n      return (0,0,0);\n    }\n  }\n  \n  function addLockUser(address roleAddress,uint256 amount,uint256 roleType) onlyOwner public {\n    (uint256 firstRate, uint256 round, uint256 rate) = getRoleReleaseSeting(roleType);\n    mapRoles[roleAddress][roleType] = Role(roleAddress,amount,firstRate,round,rate);\n    lockList[roleAddress] = roleAddress;\n  }\n  \n  function addLockUsers(address[] roleAddress,uint256[] amounts,uint256 roleType) onlyOwner public {\n    for(uint i= 0;i<roleAddress.length;i++){\n      addLockUser(roleAddress[i],amounts[i],roleType);\n    }\n  }\n  \n  function removeLockUser(address roleAddress,uint256 role) onlyOwner public {\n    mapRoles[roleAddress][role] = Role(0x0,0,0,0,0);\n    lockList[roleAddress] = 0x0;\n  }\n  \n  function getRound() constant public returns (uint) {\n    for(uint i= 0;i<releaseTimeLines.length;i++){\n      if(now<releaseTimeLines[i]){\n        if(i>0){\n          return i-1;\n        }else{\n          return 0;\n        }\n      }\n    }\n  }\n   \n  function isUserInLockList(address from) constant public returns (bool) {\n    if(lockList[from]==0x0){\n      return false;\n    } else {\n      return true;\n    }\n  }\n  \n  function _canTransfer(address from,uint256 _amount) private returns (bool) {\n    if(!isUserInLockList(from)){\n      return true;\n    }\n    if((balanceOf(from))<=0){\n      return true;\n    }\n    uint256 _lock = getLockAmount(from);\n    if(_lock<=0){\n      lockList[from] = 0x0;\n    }\n    if((balanceOf(from).sub(_amount))<_lock){\n      return false;\n    }\n    return true;\n  }\n  \n  function getLockAmount(address from) constant public returns (uint256) {\n    uint256 _lock = 0;\n    for(uint i= 1;i<=4;i++){\n      if(mapRoles[from][i].roleAddress != 0x0){\n        _lock = _lock.add(getLockAmountByRoleType(from,i));\n      }\n    }\n    return _lock;\n  }\n  \n  function getLockAmountByRoleType(address from,uint roleType) constant public returns (uint256) {\n    uint256 _rount = getRound();\n    uint256 round = 0;\n    if(_rount>0){\n      round = _rount.div(mapRoles[from][roleType].round);\n    }\n    if(mapRoles[from][roleType].firstRate.add(round.mul(mapRoles[from][roleType].rate))>=100){\n      return 0;\n    }\n    uint256 firstAmount = mapRoles[from][roleType].amount.mul(mapRoles[from][roleType].firstRate).div(100);\n    uint256 rountAmount = 0;\n    if(round>0){\n      rountAmount = mapRoles[from][roleType].amount.mul(mapRoles[from][roleType].rate.mul(round)).div(100);\n    }\n    return mapRoles[from][roleType].amount.sub(firstAmount.add(rountAmount));\n  }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timeLine\",\"type\":\"uint256[]\"}],\"name\":\"setTimeLine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"roleType\",\"type\":\"uint256\"}],\"name\":\"getLockAmountByRoleType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleAddress\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"removeLockUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapRoles\",\"outputs\":[{\"name\":\"roleAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"firstRate\",\"type\":\"uint256\"},{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roleType\",\"type\":\"uint256\"}],\"name\":\"getRoleReleaseSeting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"roleType\",\"type\":\"uint256\"}],\"name\":\"addLockUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"isUserInLockList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"releaseTimeLines\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleAddress\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"roleType\",\"type\":\"uint256\"}],\"name\":\"addLockUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "610380604052635bc6b3c06080908152635c171f4060a052635c68dc4060c052635cb6a4c060e052635d07104061010052635d577bc061012052635da7e74061014052635df852c061016052635e4a0fc061018052635e9929c06101a052635ee995406101c052635f3a00c06101e052635f8a6c4061020052635fdad7c06102205263602c94c06102405263607a5d40610260526360cac8c06102805263611b34406102a05263616b9fc06102c0526361bc0b406102e05263620dc8406103005263625b90c0610320526362abfc40610340526362fc67c061036052620000eb90600590601862000211565b50348015620000f957600080fd5b5060008054600160a060020a0319163390811790915562000130906b204fce5e3e2502611000000064010000000062000136810204565b62000289565b600160a060020a03821615156200014c57600080fd5b600354620001699082640100000000620011ec620001f782021704565b600355600160a060020a0382166000908152600160205260409020546200019f9082640100000000620011ec620001f782021704565b600160a060020a03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000828201838110156200020a57600080fd5b9392505050565b82805482825590600052602060002090810192821562000257579160200282015b8281111562000257578251829063ffffffff1690559160200191906001019062000232565b506200026592915062000269565b5090565b6200028691905b8082111562000265576000815560010162000270565b90565b6112f680620002996000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461012c578063095ea7b3146101b657806318160ddd146101ee57806323b872dd14610215578063313ce5671461023f578063395093511461026a578063399d64651461028e5780634011e6c7146102af578063669c7c5a1461030657806370a082311461032a57806395d89b411461034b5780639ccb9ea3146103605780639f8743f714610384578063a457c2d714610399578063a9059cbb146103bd578063b4301ef2146103e1578063baad131b1461043a578063bb9704e014610470578063c8ddc69914610497578063d6de13a8146104b8578063dd62ed3e146104d0578063f23d63d2146104f7575b600080fd5b34801561013857600080fd5b50610141610587565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017b578181015183820152602001610163565b50505050905090810190601f1680156101a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c257600080fd5b506101da600160a060020a03600435166024356105be565b604080519115158252519081900360200190f35b3480156101fa57600080fd5b5061020361063d565b60408051918252519081900360200190f35b34801561022157600080fd5b506101da600160a060020a0360043581169060243516604435610644565b34801561024b57600080fd5b5061025461075d565b6040805160ff9092168252519081900360200190f35b34801561027657600080fd5b506101da600160a060020a0360043516602435610762565b34801561029a57600080fd5b50610203600160a060020a0360043516610812565b3480156102bb57600080fd5b5060408051602060048035808201358381028086018501909652808552610304953695939460249493850192918291850190849080828437509497506108779650505050505050565b005b34801561031257600080fd5b50610203600160a060020a03600435166024356108de565b34801561033657600080fd5b50610203600160a060020a0360043516610adc565b34801561035757600080fd5b50610141610afb565b34801561036c57600080fd5b50610304600160a060020a0360043516602435610b32565b34801561039057600080fd5b50610203610c1d565b3480156103a557600080fd5b506101da600160a060020a0360043516602435610c74565b3480156103c957600080fd5b506101da600160a060020a0360043516602435610cbf565b3480156103ed57600080fd5b50610405600160a060020a0360043516602435610d4f565b60408051600160a060020a03909616865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561044657600080fd5b50610452600435610d93565b60408051938452602084019290925282820152519081900360600190f35b34801561047c57600080fd5b50610304600160a060020a0360043516602435604435610e0c565b3480156104a357600080fd5b506101da600160a060020a0360043516610f11565b3480156104c457600080fd5b50610203600435610f44565b3480156104dc57600080fd5b50610203600160a060020a0360043581169060243516610f63565b34801561050357600080fd5b506040805160206004803580820135838102808601850190965280855261030495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497505093359450610f8e9350505050565b60408051808201909152600a81527f4875614c69546f6b656e00000000000000000000000000000000000000000000602082015281565b6000600160a060020a03831615156105d557600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b6003545b90565b600160a060020a038316600090815260026020908152604080832033845290915281205482111561067457600080fd5b61067e8483611033565b156106ee57600160a060020a03841660009081526002602090815260408083203384529091529020546106b7908363ffffffff6110e116565b600160a060020a03851660009081526002602090815260408083203384529091529020556106e68484846110f8565b506001610756565b7f0e31f07bae79135368ff475cf6c7f6abb31e0fd731e03c18ad425bd9406cf0c0848361071a87610812565b61072388610adc565b60408051600160a060020a0390951685526020850193909352838301919091526060830152519081900360800190a15060005b9392505050565b601281565b6000600160a060020a038316151561077957600080fd5b336000908152600260209081526040808320600160a060020a03871684529091529020546107ad908363ffffffff6111ec16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60008060015b6004811161087057600160a060020a03808516600090815260066020908152604080832085845290915290205416156108685761086561085885836108de565b839063ffffffff6111ec16565b91505b600101610818565b5092915050565b600054600160a060020a031633146108c7576040805160e560020a62461bcd02815260206004820152601560248201526000805160206112ab833981519152604482015290519081900360640190fd5b80516108da90600590602084019061124f565b5050565b60008060008060006108ee610c1d565b935060009250600084111561093857600160a060020a038716600090815260066020908152604080832089845290915290206003015461093590859063ffffffff6111fe16565b92505b600160a060020a03871660009081526006602090815260408083208984529091529020600401546064906109aa9061097790869063ffffffff61122116565b600160a060020a038a1660009081526006602090815260408083208c84529091529020600201549063ffffffff6111ec16565b106109b85760009450610ad2565b600160a060020a038716600090815260066020908152604080832089845290915290206002810154600190910154610a02916064916109f691611221565b9063ffffffff6111fe16565b9150600090506000831115610a8957600160a060020a0387166000908152600660209081526040808320898452909152902060040154610a86906064906109f690610a53908763ffffffff61122116565b600160a060020a038b1660009081526006602090815260408083208d84529091529020600101549063ffffffff61122116565b90505b610acf610a9c838363ffffffff6111ec16565b600160a060020a03891660009081526006602090815260408083208b84529091529020600101549063ffffffff6110e116565b94505b5050505092915050565b600160a060020a0381166000908152600160205260409020545b919050565b60408051808201909152600481527f48484c4300000000000000000000000000000000000000000000000000000000602082015281565b600054600160a060020a03163314610b82576040805160e560020a62461bcd02815260206004820152601560248201526000805160206112ab833981519152604482015290519081900360640190fd5b6040805160a081018252600080825260208083018281528385018381526060850184815260808601858152600160a060020a03998a1680875260068652888720998752988552878620965187549a1673ffffffffffffffffffffffffffffffffffffffff199a8b1617875592516001870155905160028601555160038501555160049093019290925592835260079052902080549091169055565b6000805b600554811015610c70576005805482908110610c3957fe5b9060005260206000200154421015610c68576000811115610c5f57600181039150610c70565b60009150610c70565b600101610c21565b5090565b6000600160a060020a0383161515610c8b57600080fd5b336000908152600260209081526040808320600160a060020a03871684529091529020546107ad908363ffffffff6110e116565b6000610ccb3383611033565b15610ce357610cdb3384846110f8565b506001610637565b7f0e31f07bae79135368ff475cf6c7f6abb31e0fd731e03c18ad425bd9406cf0c03383610d0f33610812565b610d1833610adc565b60408051600160a060020a0390951685526020850193909352838301919091526060830152519081900360800190a1506000610637565b600660209081526000928352604080842090915290825290208054600182015460028301546003840154600490940154600160a060020a0390931693919290919085565b60008060008360011415610db157506032915060019050600a610e05565b8360021415610dca5750601e915060019050600a610e05565b8360031415610de3575060289150600390506014610e05565b8360041415610dfb5750600591506001905081610e05565b5060009150819050805b9193909250565b6000805481908190600160a060020a03163314610e61576040805160e560020a62461bcd02815260206004820152601560248201526000805160206112ab833981519152604482015290519081900360640190fd5b610e6a84610d93565b6040805160a081018252600160a060020a039a8b1680825260208083019b8c5282840196875260608301958652608083019485526000828152600682528481209b81529a8152838b20925183549d1673ffffffffffffffffffffffffffffffffffffffff199d8e161783559a516001830155945160028201559251600384015590516004909201919091558186526007909652949093208054909516909317909355505050565b600160a060020a038082166000908152600760205260408120549091161515610f3c57506000610af6565b506001610af6565b6005805482908110610f5257fe5b600091825260209091200154905081565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008054600160a060020a03163314610fdf576040805160e560020a62461bcd02815260206004820152601560248201526000805160206112ab833981519152604482015290519081900360640190fd5b5060005b835181101561102d576110258482815181101515610ffd57fe5b90602001906020020151848381518110151561101557fe5b9060200190602002015184610e0c565b600101610fe3565b50505050565b60008061103f84610f11565b151561104e5760019150610870565b600061105985610adc565b116110675760019150610870565b61107084610812565b9050600081116110ae57600160a060020a0384166000908152600760205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b806110c8846110bc87610adc565b9063ffffffff6110e116565b10156110d75760009150610870565b5060019392505050565b600080838311156110f157600080fd5b5050900390565b600160a060020a03831660009081526001602052604090205481111561111d57600080fd5b600160a060020a038216151561113257600080fd5b600160a060020a03831660009081526001602052604090205461115b908263ffffffff6110e116565b600160a060020a038085166000908152600160205260408082209390935590841681522054611190908263ffffffff6111ec16565b600160a060020a0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282018381101561075657600080fd5b60008080831161120d57600080fd5b828481151561121857fe5b04949350505050565b6000808315156112345760009150610870565b5082820282848281151561124457fe5b041461075657600080fd5b82805482825590600052602060002090810192821561128a579160200282015b8281111561128a57825182559160200191906001019061126f565b50610c70926106419250905b80821115610c70576000815560010161129656004f6e6c79206f776e65722063616e20646f2069742e0000000000000000000000a165627a7a7230582050056abd87783da17999fdccd1d89c2da690382820e839f9e12430e3a6fe49180029"
}