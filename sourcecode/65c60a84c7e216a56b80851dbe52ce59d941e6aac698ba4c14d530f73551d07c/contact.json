{
  "address": "0xe8ccceac43cfbb62be5b4e9971e4e26b83389ad0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Realm",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-22\n*/\n\npragma solidity ^0.4.17;\n\ncontract SafeMath {\n    function safeAdd(uint x, uint y) pure internal returns(uint) {\n      uint z = x + y;\n      assert((z >= x) && (z >= y));\n      return z;\n    }\n\n    function safeSubtract(uint x, uint y) pure internal returns(uint) {\n      assert(x >= y);\n      uint z = x - y;\n      return z;\n    }\n\n    function safeMult(uint x, uint y) pure internal returns(uint) {\n      uint z = x * y;\n      assert((x == 0)||(z/x == y));\n      return z;\n    }\n\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\n        return uint8(genNum % (maxRandom - min + 1)+min);\n    }\n}\n\ncontract Enums {\n    enum ResultCode {\n        SUCCESS,\n        ERROR_CLASS_NOT_FOUND,\n        ERROR_LOW_BALANCE,\n        ERROR_SEND_FAIL,\n        ERROR_NOT_OWNER,\n        ERROR_NOT_ENOUGH_MONEY,\n        ERROR_INVALID_AMOUNT\n    }\n\n    enum AngelAura { \n        Blue, \n        Yellow, \n        Purple, \n        Orange, \n        Red, \n        Green \n    }\n}\n\n\n\ncontract AccessControl {\n    address public creatorAddress;\n    uint16 public totalSeraphims = 0;\n    mapping (address => bool) public seraphims;\n\n    bool public isMaintenanceMode = true;\n \n    modifier onlyCREATOR() {\n        require(msg.sender == creatorAddress);\n        _;\n    }\n\n    modifier onlySERAPHIM() {\n        require(seraphims[msg.sender] == true);\n        _;\n    }\n    \n    modifier isContractActive {\n        require(!isMaintenanceMode);\n        _;\n    }\n    \n    // Constructor\n    function AccessControl() public {\n        creatorAddress = msg.sender;\n    }\n    \n\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\n        if (seraphims[_newSeraphim] == false) {\n            seraphims[_newSeraphim] = true;\n            totalSeraphims += 1;\n        }\n    }\n    \n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\n        if (seraphims[_oldSeraphim] == true) {\n            seraphims[_oldSeraphim] = false;\n            totalSeraphims -= 1;\n        }\n    }\n\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\n        isMaintenanceMode = _isMaintaining;\n    }\n\n  \n} \n\n\n\ncontract IAccessoryData is AccessControl, Enums {\n    uint8 public totalAccessorySeries;    \n    uint32 public totalAccessories;\n    \n \n    /*** FUNCTIONS ***/\n    //*** Write Access ***//\n    function createAccessorySeries(uint8 _AccessorySeriesId, uint32 _maxTotal, uint _price) onlyCREATOR public returns(uint8) ;\n\tfunction setAccessory(uint8 _AccessorySeriesId, address _owner) onlySERAPHIM external returns(uint64);\n   function addAccessoryIdMapping(address _owner, uint64 _accessoryId) private;\n\tfunction transferAccessory(address _from, address _to, uint64 __accessoryId) onlySERAPHIM public returns(ResultCode);\n    function ownerAccessoryTransfer (address _to, uint64 __accessoryId)  public;\n    \n    //*** Read Access ***//\n    function getAccessorySeries(uint8 _accessorySeriesId) constant public returns(uint8 accessorySeriesId, uint32 currentTotal, uint32 maxTotal, uint price) ;\n\tfunction getAccessory(uint _accessoryId) constant public returns(uint accessoryID, uint8 AccessorySeriesID, address owner);\n\tfunction getOwnerAccessoryCount(address _owner) constant public returns(uint);\n\tfunction getAccessoryByIndex(address _owner, uint _index) constant public returns(uint) ;\n    function getTotalAccessorySeries() constant public returns (uint8) ;\n    function getTotalAccessories() constant public returns (uint);\n}\n\n\ncontract IAngelCardData is AccessControl, Enums {\n    uint8 public totalAngelCardSeries;\n    uint64 public totalAngels;\n\n    \n    // write\n    // angels\n    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\n    function updateAngelCardSeries(uint8 _angelCardSeriesId) onlyCREATOR external;\n    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\n    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\n    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\n    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\n    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\n    function addAngelIdMapping(address _owner, uint64 _angelId) private;\n    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\n    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\n\n    // read\n    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\n    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\n    function getOwnerAngelCount(address _owner) constant public returns(uint);\n    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\n    function getTotalAngelCardSeries() constant public returns (uint8);\n    function getTotalAngels() constant public returns (uint64);\n}\n\n\ncontract IPetCardData is AccessControl, Enums {\n    uint8 public totalPetCardSeries;    \n    uint64 public totalPets;\n    \n    // write\n    function createPetCardSeries(uint8 _petCardSeriesId, uint32 _maxTotal) onlyCREATOR public returns(uint8);\n    function setPet(uint8 _petCardSeriesId, address _owner, string _name, uint8 _luck, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue) onlySERAPHIM external returns(uint64);\n    function setPetAuras(uint64 _petId, uint8 _auraRed, uint8 _auraBlue, uint8 _auraYellow) onlySERAPHIM external;\n    function setPetLastTrainingTime(uint64 _petId) onlySERAPHIM external;\n    function setPetLastBreedingTime(uint64 _petId) onlySERAPHIM external;\n    function addPetIdMapping(address _owner, uint64 _petId) private;\n    function transferPet(address _from, address _to, uint64 _petId) onlySERAPHIM public returns(ResultCode);\n    function ownerPetTransfer (address _to, uint64 _petId)  public;\n    function setPetName(string _name, uint64 _petId) public;\n\n    // read\n    function getPetCardSeries(uint8 _petCardSeriesId) constant public returns(uint8 petCardSeriesId, uint32 currentPetTotal, uint32 maxPetTotal);\n    function getPet(uint _petId) constant public returns(uint petId, uint8 petCardSeriesId, string name, uint8 luck, uint16 auraRed, uint16 auraBlue, uint16 auraYellow, uint64 lastTrainingTime, uint64 lastBreedingTime, address owner);\n    function getOwnerPetCount(address _owner) constant public returns(uint);\n    function getPetByIndex(address _owner, uint _index) constant public returns(uint);\n    function getTotalPetCardSeries() constant public returns (uint8);\n    function getTotalPets() constant public returns (uint);\n}\n\n  \n\n   \n\t\n\ncontract Realm is AccessControl, Enums, SafeMath {\n    // Addresses for other contracts realm interacts with. \n    address public angelCardDataContract;\n    address public petCardDataContract;\n    address public accessoryDataContract;\n    \n    // events\n    event EventCreateAngel(address indexed owner, uint64 angelId);\n    event EventCreatePet(address indexed owner, uint petId);\n     event EventCreateAccessory(address indexed owner, uint accessoryId);\n    \n\n    /*** DATA TYPES ***/\n    struct AngelCardSeries {\n        uint8 angelCardSeriesId;\n        uint basePrice; \n        uint64 currentAngelTotal;\n        uint64 maxAngelTotal;\n        AngelAura baseAura;\n        uint baseBattlePower;\n        uint64 lastSellTime;\n        uint64 liveTime;\n    }\n\n    struct PetCardSeries {\n        uint8 petCardSeriesId;\n        uint32 currentPetTotal;\n        uint32 maxPetTotal;\n    }\n\n    struct Angel {\n        uint64 angelId;\n        uint8 angelCardSeriesId;\n        address owner;\n        uint16 battlePower;\n        AngelAura aura;\n        uint16 experience;\n        uint price;\n        uint64 createdTime;\n        uint64 lastBattleTime;\n        uint64 lastVsBattleTime;\n        uint16 lastBattleResult;\n    }\n\n    struct Pet {\n        uint64 petId;\n        uint8 petCardSeriesId;\n        address owner;\n        string name;\n        uint8 luck;\n        uint16 auraRed;\n        uint16 auraYellow;\n        uint16 auraBlue;\n        uint64 lastTrainingTime;\n        uint64 lastBreedingTime;\n        uint price; \n        uint64 liveTime;\n    }\n    \n      struct AccessorySeries {\n        uint8 AccessorySeriesId;\n        uint32 currentTotal;\n        uint32 maxTotal;\n        uint price;\n    }\n\n    struct Accessory {\n        uint32 accessoryId;\n        uint8 accessorySeriesId;\n        address owner;\n    }\n\n    // write functions\n    function SetAngelCardDataContact(address _angelCardDataContract) onlyCREATOR external {\n        angelCardDataContract = _angelCardDataContract;\n    }\n    function SetPetCardDataContact(address _petCardDataContract) onlyCREATOR external {\n        petCardDataContract = _petCardDataContract;\n    }\n    function SetAccessoryDataContact(address _accessoryDataContract) onlyCREATOR external {\n        accessoryDataContract = _accessoryDataContract;\n    }\n\n\n    function withdrawEther() external onlyCREATOR {\n    creatorAddress.transfer(this.balance);\n}\n\n    //Create each mint of a petCard\n     function createPet(uint8 _petCardSeriesId, string _newname) isContractActive external {\n        IPetCardData petCardData = IPetCardData(petCardDataContract);\n        PetCardSeries memory petSeries;\n      \n      \n        (,petSeries.currentPetTotal, petSeries.maxPetTotal) = petCardData.getPetCardSeries(_petCardSeriesId);\n\n        \n        if (petSeries.currentPetTotal >= petSeries.maxPetTotal) { revert ();}\n        \n        //timechecks - in case people try to interact with the contract directly and get pets before they are available\n        if (_petCardSeriesId > 4) {revert();} //Pets higher than 4 come from battle, breeding, or marketplace. \n        if ((_petCardSeriesId == 2) && (now < 1518348600)) {revert();}\n        if ((_petCardSeriesId == 3) && (now < 1520076600)) {revert();}\n        if ((_petCardSeriesId == 4) && (now < 1521804600)) {revert();}\n         \n        //first find pet luck\n        uint8 _newLuck = getRandomNumber(19, 10, msg.sender);\n        \n        \n        uint16 _auraRed = 0;\n        uint16 _auraYellow = 0;\n        uint16 _auraBlue = 0;\n        \n        uint32 _auraColor = getRandomNumber(2,0,msg.sender);\n        if (_auraColor == 0) { _auraRed = 2;}\n        if (_auraColor == 1) { _auraYellow = 2;}\n        if (_auraColor == 2) { _auraBlue = 2;}\n        \n        uint64 petId = petCardData.setPet(_petCardSeriesId, msg.sender, _newname, _newLuck, _auraRed, _auraYellow, _auraBlue);\n        \n        EventCreatePet(msg.sender, petId);\n    }\n\n //Create each mint of a Accessory card \n     function createAccessory(uint8 _accessorySeriesId) isContractActive external payable {\n        if (_accessorySeriesId > 18) {revert();} \n    IAccessoryData AccessoryData = IAccessoryData(accessoryDataContract);\n      AccessorySeries memory accessorySeries;\n      (,accessorySeries.currentTotal, accessorySeries.maxTotal, accessorySeries.price) = AccessoryData.getAccessorySeries(_accessorySeriesId);\n    if (accessorySeries.currentTotal >= accessorySeries.maxTotal) { revert ();}\n      if (msg.value < accessorySeries.price) { revert();}\n     uint64 accessoryId = AccessoryData.setAccessory(_accessorySeriesId, msg.sender);\n     \n     EventCreateAccessory(msg.sender, accessoryId);\n    }\n    \n    \n    // created every mint of an angel card\n    function createAngel(uint8 _angelCardSeriesId) isContractActive external payable {\n        IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\n        AngelCardSeries memory series;\n        (, series.currentAngelTotal, series.basePrice, series.maxAngelTotal,,series.baseBattlePower, series.lastSellTime, series.liveTime) = angelCardData.getAngelCardSeries(_angelCardSeriesId);\n      \n      if ( _angelCardSeriesId > 24) {revert();}\n        //Checked here and in angelCardData\n        if (series.currentAngelTotal >= series.maxAngelTotal) { revert();}\n        if (_angelCardSeriesId > 3) {\n            // check is it within the  release schedule\n            if (now < series.liveTime) {\n            revert();\n            }\n        }\n        // Verify the price paid for card is correct\n        if (series.basePrice > msg.value) {revert(); }\n        \n        // add angel\n        uint64 angelId = angelCardData.setAngel(_angelCardSeriesId, msg.sender, msg.value, uint16(series.baseBattlePower+getRandomNumber(10,0,msg.sender)));\n        \n        EventCreateAngel(msg.sender, angelId);\n    }\n      function kill() onlyCREATOR external {\n        selfdestruct(creatorAddress);\n    }\n}",
  "bytecode": "606060405260008060146101000a81548161ffff021916908361ffff1602179055506001600260006101000a81548160ff021916908315150217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061179f8061008b6000396000f300606060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c4970941461010c57806317193854146101275780632ef0a28d1461016057806341c0e1b5146101b157806345e26105146101c65780634c364ceb146101eb578063536bd93a14610206578063621612351461023f5780636b6cc239146102ab5780637123691e146102d85780637362377b1461031157806383ff9bec14610326578063b283f2f11461037b578063bbc878c4146103d0578063d356a28b14610401578063decbd1691461043a578063e298559614610474578063e927fc5c146104c9578063f95872191461051e575b600080fd5b610125600480803560ff16906020019091905050610557565b005b341561013257600080fd5b61015e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108d1565b005b341561016b57600080fd5b610197600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610970565b604051808215151515815260200191505060405180910390f35b34156101bc57600080fd5b6101c4610990565b005b34156101d157600080fd5b6101e960048080351515906020019091905050610a25565b005b610204600480803560ff16906020019091905050610a9d565b005b341561021157600080fd5b61023d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d3b565b005b341561024a57600080fd5b61028f600480803561ffff1690602001909190803560ff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dda565b604051808260ff1660ff16815260200191505060405180910390f35b34156102b657600080fd5b6102be610e27565b604051808215151515815260200191505060405180910390f35b34156102e357600080fd5b61030f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e3a565b005b341561031c57600080fd5b610324610f7b565b005b341561033157600080fd5b610339611050565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561038657600080fd5b61038e611076565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103db57600080fd5b6103e361109c565b604051808261ffff1661ffff16815260200191505060405180910390f35b341561040c57600080fd5b610438600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110b0565b005b341561044557600080fd5b610472600480803560ff1690602001909190803590602001908201803590602001919091929050506111f0565b005b341561047f57600080fd5b6104876115a4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104d457600080fd5b6104dc6115ca565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561052957600080fd5b610555600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115ef565b005b600061056161168e565b6000600260009054906101000a900460ff1615151561057f57600080fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692508273ffffffffffffffffffffffffffffffffffffffff1663920dce1985600060405161010001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260ff1660ff16815260200191505061010060405180830381600087803b151561062357600080fd5b6102c65a03f1151561063457600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805190602001805190509091929394959650909192508760400188602001896060018a60a0018b60c0018c60e0018667ffffffffffffffff1667ffffffffffffffff168152508667ffffffffffffffff1667ffffffffffffffff16815250868152508667ffffffffffffffff1667ffffffffffffffff16815250868152508667ffffffffffffffff1667ffffffffffffffff1681525050505050505060188460ff16111561070b57600080fd5b816060015167ffffffffffffffff16826040015167ffffffffffffffff1610151561073557600080fd5b60038460ff16111561075d578160e0015167ffffffffffffffff1642101561075c57600080fd5b5b348260200151111561076e57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166386237e7b85333461079a600a600033610dda565b60ff168760a00151016000604051602001526040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808560ff1660ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018261ffff1661ffff168152602001945050505050602060405180830381600087803b151561084c57600080fd5b6102c65a03f1151561085d57600080fd5b5050506040518051905090503373ffffffffffffffffffffffffffffffffffffffff167f4d93d1dbd90c5790b0ff6e271425f2f9397d5b0d7d2529b1eb215f655e20443f82604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390a250505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092c57600080fd5b80600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60016020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109eb57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a8057600080fd5b80600260006101000a81548160ff02191690831515021790555050565b6000610aa761170a565b6000600260009054906101000a900460ff16151515610ac557600080fd5b60128460ff161115610ad657600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692508273ffffffffffffffffffffffffffffffffffffffff1663edddb350856000604051608001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260ff1660ff168152602001915050608060405180830381600087803b1515610b7857600080fd5b6102c65a03f11515610b8957600080fd5b5050506040518051906020018051906020018051906020018051905090919250846020018560400186606001838152508363ffffffff1663ffffffff168152508363ffffffff1663ffffffff16815250505050816040015163ffffffff16826020015163ffffffff16101515610bfe57600080fd5b8160600151341015610c0f57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663f048532885336000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515610cc057600080fd5b6102c65a03f11515610cd157600080fd5b5050506040518051905090503373ffffffffffffffffffffffffffffffffffffffff167f1a14f12865e85faeeaacd318da2f46aad799e5c4bcb8cfc0f219b69a2f74758682604051808267ffffffffffffffff16815260200191505060405180910390a250505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9657600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808273ffffffffffffffffffffffffffffffffffffffff166001430340600190040190508360ff1660018560ff1687030161ffff1682811515610e1b57fe5b06019150509392505050565b600260009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e9557600080fd5b60011515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415610f78576000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600060148282829054906101000a900461ffff160392506101000a81548161ffff021916908361ffff1602179055505b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fd657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561104e57600080fd5b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060149054906101000a900461ffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561110b57600080fd5b60001515600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156111ed5760018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600060148282829054906101000a900461ffff160192506101000a81548161ffff021916908361ffff1602179055505b50565b60006111fa611742565b600080600080600080600260009054906101000a900460ff1615151561121f57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1697508773ffffffffffffffffffffffffffffffffffffffff16635155d9c68c6000604051606001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260ff1660ff168152602001915050606060405180830381600087803b15156112c157600080fd5b6102c65a03f115156112d257600080fd5b5050506040518051906020018051906020018051905090915088602001896040018263ffffffff1663ffffffff168152508263ffffffff1663ffffffff168152505050866040015163ffffffff16876020015163ffffffff1610151561133757600080fd5b60048b60ff16111561134857600080fd5b60028b60ff1614801561135e5750635a80293842105b1561136857600080fd5b60038b60ff1614801561137e5750635a9a873842105b1561138857600080fd5b60048b60ff1614801561139e5750635ab4e53842105b156113a857600080fd5b6113b56013600a33610dda565b95506000945060009350600092506113d06002600033610dda565b60ff16915060008263ffffffff1614156113e957600294505b60018263ffffffff1614156113fd57600293505b60028263ffffffff16141561141157600292505b8773ffffffffffffffffffffffffffffffffffffffff166368586e578c338d8d8b8b8b8b6000604051602001526040518963ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808960ff1660ff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018660ff1660ff1681526020018561ffff1661ffff1681526020018461ffff1661ffff1681526020018361ffff1661ffff168152602001828103825288888281815260200192508082843782019150509950505050505050505050602060405180830381600087803b151561152257600080fd5b6102c65a03f1151561153357600080fd5b5050506040518051905090503373ffffffffffffffffffffffffffffffffffffffff167f923b9baec5857fb310426ae2a1340ff11b91237baa5c32033933d431ec24e43e82604051808267ffffffffffffffff16815260200191505060405180910390a25050505050505050505050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561164a57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61010060405190810160405280600060ff16815260200160008152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600060058111156116db57fe5b815260200160008152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b608060405190810160405280600060ff168152602001600063ffffffff168152602001600063ffffffff168152602001600081525090565b606060405190810160405280600060ff168152602001600063ffffffff168152602001600063ffffffff16815250905600a165627a7a723058201ca515538e2f47df827e254dedfba62fc4714d1a63a9e35ba1600c4f6efe42e00029"
}