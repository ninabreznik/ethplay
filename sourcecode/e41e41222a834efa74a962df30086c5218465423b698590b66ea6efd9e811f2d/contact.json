{
  "address": "0x0b44547be0a0df5dcd5327de8ea73680517c5a54",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DATACHAIN",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-24\n*/\n\npragma solidity 0.5.7;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract ERC1820Registry {\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external view returns (address);\n    function setManager(address _addr, address _newManager) external;\n    function getManager(address _addr) public view returns (address);\n}\n\n\n/// Base client to interact with the registry.\ncontract ERC1820Client {\n    ERC1820Registry constant ERC1820REGISTRY = ERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    function setInterfaceImplementation(string memory _interfaceLabel, address _implementation) internal {\n        bytes32 interfaceHash = keccak256(abi.encodePacked(_interfaceLabel));\n        ERC1820REGISTRY.setInterfaceImplementer(address(this), interfaceHash, _implementation);\n    }\n\n    function interfaceAddr(address addr, string memory _interfaceLabel) internal view returns(address) {\n        bytes32 interfaceHash = keccak256(abi.encodePacked(_interfaceLabel));\n        return ERC1820REGISTRY.getInterfaceImplementer(addr, interfaceHash);\n    }\n\n    function delegateManagement(address _newManager) internal {\n        ERC1820REGISTRY.setManager(address(this), _newManager);\n    }\n}\n\ninterface ERC20Token {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address owner) external view returns (uint256);\n    function transfer(address to, uint256 amount) external returns (bool);\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    // solhint-disable-next-line no-simple-event-func-name\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n}\n\ninterface ERC777Token {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address owner) external view returns (uint256);\n    function granularity() external view returns (uint256);\n\n    function defaultOperators() external view returns (address[] memory);\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n    function authorizeOperator(address operator) external;\n    function revokeOperator(address operator) external;\n\n    function send(address to, uint256 amount, bytes calldata data) external;\n    function operatorSend(\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    function burn(uint256 amount, bytes calldata data) external;\n    function operatorBurn(address from, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n}\n\ninterface ERC777TokensSender {\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n}\n\ninterface ERC777TokensRecipient {\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n}\n\ncontract ERC777BaseToken is ERC777Token, ERC1820Client {\n    using SafeMath for uint256;\n\n    string internal mName;\n    string internal mSymbol;\n    uint256 internal mGranularity;\n    uint256 internal mTotalSupply;\n\n\n    mapping(address => uint) internal mBalances;\n\n    address[] internal mDefaultOperators;\n    mapping(address => bool) internal mIsDefaultOperator;\n    mapping(address => mapping(address => bool)) internal mRevokedDefaultOperator;\n    mapping(address => mapping(address => bool)) internal mAuthorizedOperators;\n\n    /* -- Constructor -- */\n    //\n    /// @notice Constructor to create a ReferenceToken\n    /// @param _name Name of the new token\n    /// @param _symbol Symbol of the new token.\n    /// @param _granularity Minimum transferable chunk.\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _granularity,\n        address[] memory _defaultOperators\n    ) internal {\n        mName = _name;\n        mSymbol = _symbol;\n        mTotalSupply = 0;\n        require(_granularity >= 1, \"Granularity must be > 1\");\n        mGranularity = _granularity;\n\n        mDefaultOperators = _defaultOperators;\n        for (uint256 i = 0; i < mDefaultOperators.length; i++) { mIsDefaultOperator[mDefaultOperators[i]] = true; }\n\n        setInterfaceImplementation(\"ERC777Token\", address(this));\n    }\n\n    /* -- ERC777 Interface Implementation -- */\n    //\n    /// @return the name of the token\n    function name() public view returns (string memory) { return mName; }\n\n    /// @return the symbol of the token\n    function symbol() public view returns (string memory) { return mSymbol; }\n\n    /// @return the granularity of the token\n    function granularity() public view returns (uint256) { return mGranularity; }\n\n    /// @return the total supply of the token\n    function totalSupply() public view returns (uint256) { return mTotalSupply; }\n\n    /// @notice Return the account balance of some account\n    /// @param _tokenHolder Address for which the balance is returned\n    /// @return the balance of `_tokenAddress`.\n    function balanceOf(address _tokenHolder) public view returns (uint256) { return mBalances[_tokenHolder]; }\n\n    /// @notice Return the list of default operators\n    /// @return the list of all the default operators\n    function defaultOperators() public view returns (address[] memory) { return mDefaultOperators; }\n\n    /// @notice Send `_amount` of tokens to address `_to` passing `_data` to the recipient\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    function send(address _to, uint256 _amount, bytes calldata _data) external {\n        doSend(msg.sender, msg.sender, _to, _amount, _data, \"\", true);\n    }\n\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Authorized\n    function authorizeOperator(address _operator) external {\n        require(_operator != msg.sender, \"Cannot authorize yourself as an operator\");\n        if (mIsDefaultOperator[_operator]) {\n            mRevokedDefaultOperator[_operator][msg.sender] = false;\n        } else {\n            mAuthorizedOperators[_operator][msg.sender] = true;\n        }\n        emit AuthorizedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\n    /// @param _operator The operator that wants to be Revoked\n    function revokeOperator(address _operator) external {\n        require(_operator != msg.sender, \"Cannot revoke yourself as an operator\");\n        if (mIsDefaultOperator[_operator]) {\n            mRevokedDefaultOperator[_operator][msg.sender] = true;\n        } else {\n            mAuthorizedOperators[_operator][msg.sender] = false;\n        }\n        emit RevokedOperator(_operator, msg.sender);\n    }\n\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\n    /// @param _operator address to check if it has the right to manage the tokens\n    /// @param _tokenHolder address which holds the tokens to be managed\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\n    function isOperatorFor(address _operator, address _tokenHolder) public view returns (bool) {\n        return (_operator == _tokenHolder // solium-disable-line operator-whitespace\n            || mAuthorizedOperators[_operator][_tokenHolder]\n            || (mIsDefaultOperator[_operator] && !mRevokedDefaultOperator[_operator][_tokenHolder]));\n    }\n\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _data Data generated by the user to be sent to the recipient\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\n    function operatorSend(\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes calldata _data,\n        bytes calldata _operatorData\n    )\n        external\n    {\n        require(isOperatorFor(msg.sender, _from), \"Not an operator\");\n        doSend(msg.sender, _from, _to, _amount, _data, _operatorData, true);\n    }\n\n    function burn(uint256 _amount, bytes calldata _data) external {\n        doBurn(msg.sender, msg.sender, _amount, _data, \"\");\n    }\n\n    function operatorBurn(\n        address _tokenHolder,\n        uint256 _amount,\n        bytes calldata _data,\n        bytes calldata _operatorData\n    )\n        external\n    {\n        require(isOperatorFor(msg.sender, _tokenHolder), \"Not an operator\");\n        doBurn(msg.sender, _tokenHolder, _amount, _data, _operatorData);\n    }\n\n    /* -- Helper Functions -- */\n    //\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\n    /// @param _amount The quantity that want's to be checked\n    function requireMultiple(uint256 _amount) internal view {\n        require(_amount % mGranularity == 0, \"Amount is not a multiple of granualrity\");\n    }\n\n    /// @notice Check whether an address is a regular address or not.\n    /// @param _addr Address of the contract that has to be checked\n    /// @return `true` if `_addr` is a regular address (not a contract)\n    function isRegularAddress(address _addr) internal view returns(bool) {\n        if (_addr == address(0)) { return false; }\n        uint size;\n        assembly { size := extcodesize(_addr) } // solium-disable-line security/no-inline-assembly\n        return size == 0;\n    }\n\n    /// @notice Helper function actually performing the sending of tokens.\n    /// @param _operator The address performing the send\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _data Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777tokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes memory _data,\n        bytes memory _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        requireMultiple(_amount);\n\n        callSender(_operator, _from, _to, _amount, _data, _operatorData);\n\n        require(_to != address(0), \"Cannot send to 0x0\");\n        require(mBalances[_from] >= _amount, \"Not enough funds\");\n\n        mBalances[_from] = mBalances[_from].sub(_amount);\n        mBalances[_to] = mBalances[_to].add(_amount);\n\n        callRecipient(_operator, _from, _to, _amount, _data, _operatorData, _preventLocking);\n\n        emit Sent(_operator, _from, _to, _amount, _data, _operatorData);\n    }\n\n    /// @notice Helper function actually performing the burning of tokens.\n    /// @param _operator The address performing the burn\n    /// @param _tokenHolder The address holding the tokens being burn\n    /// @param _amount The number of tokens to be burnt\n    /// @param _data Data generated by the token holder\n    /// @param _operatorData Data generated by the operator\n    function doBurn(\n        address _operator,\n        address _tokenHolder,\n        uint256 _amount,\n        bytes memory _data,\n        bytes memory _operatorData\n    )\n        internal\n    {\n        callSender(_operator, _tokenHolder, address(0), _amount, _data, _operatorData);\n\n        requireMultiple(_amount);\n        require(balanceOf(_tokenHolder) >= _amount, \"Not enough funds\");\n\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\n        mTotalSupply = mTotalSupply.sub(_amount);\n\n        emit Burned(_operator, _tokenHolder, _amount, _data, _operatorData);\n    }\n\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _operator The address performing the send or mint\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be sent\n    /// @param _data Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\n    ///  implementing `ERC777TokensRecipient`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callRecipient(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes memory _data,\n        bytes memory _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        address recipientImplementation = interfaceAddr(_to, \"ERC777TokensRecipient\");\n        if (recipientImplementation != address(0)) {\n            ERC777TokensRecipient(recipientImplementation).tokensReceived(\n                _operator, _from, _to, _amount, _data, _operatorData);\n        } else if (_preventLocking) {\n            require(isRegularAddress(_to), \"Cannot send to contract without ERC777TokensRecipient\");\n        }\n    }\n\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\n    ///  May throw according to `_preventLocking`\n    /// @param _from The address holding the tokens being sent\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be sent\n    /// @param _data Data generated by the user to be passed to the recipient\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\n    ///  implementing `ERC777TokensSender`.\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\n    ///  functions SHOULD set this parameter to `false`.\n    function callSender(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes memory _data,\n        bytes memory _operatorData\n    )\n        internal\n    {\n        address senderImplementation = interfaceAddr(_from, \"ERC777TokensSender\");\n        if (senderImplementation == address(0)) { return; }\n        ERC777TokensSender(senderImplementation).tokensToSend(\n            _operator, _from, _to, _amount, _data, _operatorData);\n    }\n}\n\ncontract ERC777ERC20BaseToken is ERC20Token, ERC777BaseToken {\n    bool internal mErc20compatible;\n\n    mapping(address => mapping(address => uint256)) internal mAllowed;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _granularity,\n        address[] memory _defaultOperators\n    )\n        internal ERC777BaseToken(_name, _symbol, _granularity, _defaultOperators)\n    {\n        mErc20compatible = true;\n        setInterfaceImplementation(\"ERC20Token\", address(this));\n    }\n\n    /// @notice This modifier is applied to erc20 obsolete methods that are\n    ///  implemented only to maintain backwards compatibility. When the erc20\n    ///  compatibility is disabled, this methods will fail.\n    modifier erc20 () {\n        require(mErc20compatible, \"ERC20 is disabled\");\n        _;\n    }\n\n    /// @notice For Backwards compatibility\n    /// @return The decimals of the token. Forced to 18 in ERC777.\n    function decimals() public erc20 view returns (uint8) { return uint8(18); }\n\n    /// @notice ERC20 backwards compatible transfer.\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transfer(address _to, uint256 _amount) public erc20 returns (bool success) {\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @notice ERC20 backwards compatible transferFrom.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The number of tokens to be transferred\n    /// @return `true`, if the transfer can't be done, it should fail.\n    function transferFrom(address _from, address _to, uint256 _amount) public erc20 returns (bool success) {\n        require(_amount <= mAllowed[_from][msg.sender], \"Not enough funds allowed\");\n\n        // Cannot be after doSend because of tokensReceived re-entry\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\n        return true;\n    }\n\n    /// @notice ERC20 backwards compatible approve.\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The number of tokens to be approved for transfer\n    /// @return `true`, if the approve can't be done, it should fail.\n    function approve(address _spender, uint256 _amount) public erc20 returns (bool success) {\n        _approve(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        mAllowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public erc20 returns (bool) {\n        _approve(msg.sender, spender, mAllowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    \n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public erc20 returns (bool) {\n        _approve(msg.sender, spender, mAllowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /// @notice ERC20 backwards compatible allowance.\n    ///  This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public erc20 view returns (uint256 remaining) {\n        return mAllowed[_owner][_spender];\n    }\n\n    function doSend(\n        address _operator,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bytes memory _data,\n        bytes memory _operatorData,\n        bool _preventLocking\n    )\n        internal\n    {\n        super.doSend(_operator, _from, _to, _amount, _data, _operatorData, _preventLocking);\n        if (mErc20compatible) { emit Transfer(_from, _to, _amount); }\n    }\n\n    function doBurn(\n        address _operator,\n        address _tokenHolder,\n        uint256 _amount,\n        bytes memory _data,\n        bytes memory _operatorData\n    )\n        internal\n    {\n        super.doBurn(_operator, _tokenHolder, _amount, _data, _operatorData);\n        if (mErc20compatible) { emit Transfer(_tokenHolder, address(0), _amount); }\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ncontract DATACHAIN is ERC777ERC20BaseToken, Ownable {\n    string internal dName = \"DATACHAIN\";\n    string internal dSymbol = \"DC\";\n    uint256 internal dGranularity = 1;\n    uint256 internal dTotalSupply = 1000000000 * (10**18);\n\n    function dDefaultOperators() internal pure returns (address[] memory) {\n        address[] memory defaultOps = new address[](1);\n        \n        defaultOps[0] = 0xa6903375509A5F4f740aEC4Aa677b8C18D41027b;\n        \n        return defaultOps;\n    }\n\n    constructor() public \n        ERC777ERC20BaseToken(\n            dName, \n            dSymbol, \n            dGranularity, \n            dDefaultOperators()) \n    {\n        _mint(msg.sender, dTotalSupply);\n    }\n\n    function _mint(address to, uint256 value) internal returns (bool) {\n\n        require(to != address(0));\n\n        requireMultiple(value);\n\n        mTotalSupply = mTotalSupply.add(value);\n        mBalances[to] = mBalances[to].add(value);\n\n        callRecipient(msg.sender, address(0), to, value, \"\", \"\", true);\n\n\n        emit Minted(msg.sender, to, value, \"\", \"\");\n\n        emit Transfer(address(0), to, value);\n\n        return true;\n    }\n\n    function mint(address to, uint256 value) public onlyOwner returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "416d6f756e74206973206e6f742061206d756c7469706c65206f66206772616e75616c7269747943616e6e6f742073656e6420746f20636f6e747261637420776974686f757420455243373737546f6b656e73526563697069656e74"
}