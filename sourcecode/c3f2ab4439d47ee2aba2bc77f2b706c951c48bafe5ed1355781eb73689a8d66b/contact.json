{
  "address": "0x588a8c163688efa1f33814693ea27d0c3867d5e9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "diamDEXX: DIAM Token",
  "contractName": "Token",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-03\n*/\n\npragma solidity ^0.5.7;    \n////////////////////////////////////////////////////////////////////////////////\nlibrary     SafeMath                    // This library is not used systematically since it tends to create \"Infinite gas\" functions and consumes too many gas\n{\n    //------------------\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        if (a == 0)     return 0;\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    //--------------------------------------------------------------------------\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        return a/b;\n    }\n    //--------------------------------------------------------------------------\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        assert(b <= a);\n        return a - b;\n    }\n    //--------------------------------------------------------------------------\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n////////////////////////////////////////////////////////////////////////////////\ncontract    ERC20 \n{\n    using SafeMath  for uint256;\n\n    //----- VARIABLES\n\n    address public              owner;          // Owner of this contract\n    address public              admin;          // The one who is allowed to do changes\n    address public              mazler;\n\n    mapping(address => uint256)                         balances;       // Maintain balance in a mapping\n    mapping(address => mapping (address => uint256))    allowances;     // Allowances index-1 = Owner account   index-2 = spender account\n\n    //------ TOKEN SPECIFICATION\n\n    string  public      name       = \"DIAM\";\n    string  public      symbol     = \"DIAM\";\n\n    uint256 public  constant    decimals   = 5;                            // Handle the coin as FIAT (2 decimals). ETH Handles 18 decimal places\n\n    uint256 public  constant    initSupply = 150000000 * 10**decimals;      //150000000 * 10**decimals;   // 10**18 max\n\n    uint256 public              totalSoldByOwner=0;                         // Not from ERC-20 specification, but help for the totalSupply management later\n    //-----\n\n    uint256 public              totalSupply;\n\n    uint256                     mazl   = 10;\n    uint256                     vScale = 10000;\n\n    //--------------------------------------------------------------------------\n\n    modifier onlyOwner()            { require(msg.sender==owner);   _; }\n    modifier onlyAdmin()            { require(msg.sender==admin);   _; }\n\n    //----- EVENTS\n\n    event Transfer(address indexed fromAddr, address indexed toAddr,   uint256 amount);\n    event Approval(address indexed _owner,   address indexed _spender, uint256 amount);\n\n    event OnOwnershipTransfered(address oldOwnerWallet, address newOwnerWallet);\n    event OnAdminUserChanged(   address oldAdminWalet,  address newAdminWallet);\n    event OnVautingUserChanged( address oldWallet,      address newWallet);\n\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    constructor()   public \n    {\n        owner  = msg.sender;\n        admin  = owner;\n        mazler = owner;\n\n        balances[owner] = initSupply;   // send the tokens to the owner\n        totalSupply     = initSupply;\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //----- ERC20 FUNCTIONS\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    function balanceOf(address walletAddress) public view /*constant*/ returns (uint256 balance) \n    {\n        return balances[walletAddress];\n    }\n    //--------------------------------------------------------------------------\n    function        transfer(address toAddr, uint256 amountInWei)  public   returns (bool)\n    {\n        uint256         baseAmount;\n        uint256         finalAmount;\n        uint256         addAmountInWei;\n\n        require(toAddr!=address(0x0) && toAddr!=msg.sender \n                                     && amountInWei!=0\n                                     && amountInWei<=balances[msg.sender]);\n\n        //-----  Reduce gas consumption of ==> balances[msg.sender] = balances[msg.sender].sub(amountInWei);\n\n        baseAmount  = balances[msg.sender];\n        finalAmount = baseAmount - amountInWei;\n\n        assert(finalAmount <= baseAmount);\n\n        balances[msg.sender] = finalAmount;\n\n        //----- Reduce gas consumption of ==> balances[toAddr] = balances[toAddr].add(amountInWei);\n\n        baseAmount     = balances[toAddr];\n        addAmountInWei = manageMazl(toAddr, amountInWei);\n\n        finalAmount = baseAmount + addAmountInWei;\n\n        assert(finalAmount >= baseAmount);\n\n        balances[toAddr] = finalAmount;\n\n        //-----\n\n        if (msg.sender==owner)\n        {\n            totalSoldByOwner += amountInWei;\n        }\n\n        //-----\n\n        emit Transfer(msg.sender, toAddr, addAmountInWei /*amountInWei*/);\n\n        return true;\n    }\n    //--------------------------------------------------------------------------\n    function allowance(address walletAddress, address spender) public view/*constant*/ returns (uint remaining)\n    {\n        return allowances[walletAddress][spender];\n    }\n    //--------------------------------------------------------------------------\n    function transferFrom(address fromAddr, address toAddr, uint256 amountInWei)  public  returns (bool) \n    {\n        require(amountInWei!=0                                   &&\n                balances[fromAddr]               >= amountInWei  &&\n                allowances[fromAddr][msg.sender] >= amountInWei);\n\n                //----- balances[fromAddr] = balances[fromAddr].sub(amountInWei);\n\n        uint256 baseAmount  = balances[fromAddr];\n        uint256 finalAmount = baseAmount - amountInWei;\n\n        assert(finalAmount <= baseAmount);\n\n        balances[fromAddr] = finalAmount;\n\n                //----- balances[toAddr] = balances[toAddr].add(amountInWei);\n\n        baseAmount  = balances[toAddr];\n        finalAmount = baseAmount + amountInWei;\n\n        assert(finalAmount >= baseAmount);\n\n        balances[toAddr] = finalAmount;\n\n                //----- allowances[fromAddr][msg.sender] = allowances[fromAddr][msg.sender].sub(amountInWei);\n\n        baseAmount  = allowances[fromAddr][msg.sender];\n        finalAmount = baseAmount - amountInWei;\n\n        assert(finalAmount <= baseAmount);\n\n        allowances[fromAddr][msg.sender] = finalAmount;\n\n        //-----           \n\n        emit Transfer(fromAddr, toAddr, amountInWei);\n        return true;\n    }\n    //--------------------------------------------------------------------------\n    function approve(address spender, uint256 amountInWei) public returns (bool) \n    {\n        allowances[msg.sender][spender] = amountInWei;\n\n                emit Approval(msg.sender, spender, amountInWei);\n\n        return true;\n    } \n    //--------------------------------------------------------------------------\n    function() external\n    {\n        assert(true == false);      // If Ether is sent to this address, don't handle it\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    function transferOwnership(address newOwner) public onlyOwner               // @param newOwner The address to transfer ownership to.\n    {\n        require(newOwner != address(0));\n\n        emit OnOwnershipTransfered(owner, newOwner);\n\n        owner            = newOwner;\n        totalSoldByOwner = 0;\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    function    manageMazl(address walletTo, uint256 amountInWei) /*private*/ public returns(uint256)\n    {\n        uint256     addAmountInWei;\n        uint256     baseAmount;\n        uint256     finalAmount;\n        uint256     mazlInWei;\n\n        addAmountInWei = amountInWei;\n\n        if (msg.sender!=admin && msg.sender!=owner)\n        {\n            mazlInWei = (amountInWei * mazl) / vScale;\n\n            if (mazlInWei <= amountInWei)\n            {\n                addAmountInWei = amountInWei - mazlInWei;\n\n                baseAmount  = balances[mazler];\n                finalAmount = baseAmount + mazlInWei;\n\n                if (finalAmount>=baseAmount)\n                {\n                    balances[mazler] = finalAmount;\n\n                    emit Transfer(walletTo, mazler, mazlInWei);\n                }\n            }\n        }\n\n        return addAmountInWei;\n    }\n    //--------------------------------------------------------------------------\n    function    changeAdminUser(address newAdminAddress) public onlyOwner returns(uint256)\n    {\n        require(newAdminAddress!=address(0x0));\n\n        emit OnAdminUserChanged(admin, newAdminAddress);\n        admin = newAdminAddress;\n\n        return 1;       // for API use\n    }\n    //--------------------------------------------------------------------------\n    function    changeMazlUser(address newAddress) public onlyOwner returns(uint256)\n    {\n        require(newAddress!=address(0x0));\n\n        emit OnVautingUserChanged(admin, newAddress);\n        mazler = newAddress;\n\n        return 1;       // for API use\n    }\n}\n////////////////////////////////////////////////////////////////////////////////\ncontract    DiamondTransaction is ERC20\n{\n    struct TDiamondTransaction\n    {\n        bool        isBuyTransaction;           // Tells if this transaction was for us to buy diamonds or just to sell diamonds\n        uint        authorityId;                // id(0)=GIA\n        uint        certificate;                // Can be a direct certificat value (from GIA), or an HEX value if alpnumeric from other authorities\n        uint        providerId;                 // The vendor/Acqueror of the TTransaction\n        uint        vaultId;                    // ID of the secured vault used in our database\n        uint        sourceId;                   // Diamcoin: 0     partners > 0\n        uint        caratAmount;                // 3 decimals value flatten to an integer\n        uint        tokenAmount;                //\n        uint        tokenId;                    // ID of the token used to sold. IT should be id=0 for Diamcoin\n        uint        timestamp;                  // When the transaction occurred\n        bool        isValid;                    // Should always be TRUE (=1)\n    }\n\n    mapping(uint256 => TDiamondTransaction)     diamondTransactions;\n    uint256[]                                   diamondTransactionIds;\n\n    event   OnDiamondBoughTransaction\n    (   \n        uint256     authorityId,    uint256     certificate,\n        uint256     providerId,     uint256     vaultId,\n        uint256     caratAmount,    uint256     tokenAmount,\n        uint256     tokenId,        uint256     timestamp\n    );\n\n    event   OnDiamondSoldTransaction\n    (   \n        uint256     authorityId,    uint256     certificate,\n        uint256     providerId,     uint256     vaultId,\n        uint256     caratAmount,    uint256     tokenAmount,\n        uint256     tokenId,        uint256     timestamp\n    );\n\n    //--------------------------------------------------------------------------\n    function    storeDiamondTransaction(bool        isBuy,\n                                        uint256     indexInOurDb,\n                                        uint256     authorityId,\n                                        uint256     certificate,\n                                        uint256     providerId,\n                                        uint256     vaultId,\n                                        uint256     caratAmount,\n                                        uint256     tokenAmount,\n                                        uint256     sourceId,\n                                        uint256     tokenId)    public  onlyAdmin returns(bool)\n    {\n        TDiamondTransaction memory      item;\n\n        item.isBuyTransaction = isBuy;          item.authorityId = authorityId;\n        item.certificate      = certificate;    item.providerId  = providerId;\n        item.vaultId          = vaultId;        item.caratAmount = caratAmount;\n        item.tokenAmount      = tokenAmount;    item.tokenId     = tokenId;\n        item.timestamp        = now;            item.isValid     = true;\n        item.sourceId         = sourceId;\n\n        diamondTransactions[indexInOurDb] = item; \n        diamondTransactionIds.push(indexInOurDb)-1;\n\n        if (isBuy)\n        {\n            emit OnDiamondBoughTransaction(authorityId, certificate, providerId, vaultId,\n                                     caratAmount, tokenAmount, tokenId,    now);\n        }\n        else\n        {\n            emit OnDiamondSoldTransaction( authorityId, certificate, providerId, vaultId,\n                                    caratAmount, tokenAmount, tokenId,    now);\n        }\n\n        return true;                    // this is only for our external API use\n    }\n    //--------------------------------------------------------------------------\n    function    getDiamondTransaction(uint256 transactionId) public view  returns(/*uint256,*/uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\n    {\n        TDiamondTransaction memory    item;\n\n        item = diamondTransactions[transactionId];\n\n        return\n        (\n            (item.isBuyTransaction)?1:0,\n             item.authorityId,\n             item.certificate,\n             item.providerId,\n             item.vaultId,\n             item.caratAmount,\n            (item.isValid?1:0),\n             item.tokenId,\n             item.timestamp,\n             item.sourceId\n        );\n    }\n    //--------------------------------------------------------------------------\n    function    getEntitiesFromDiamondTransaction(uint256 transactionId) public view  returns(uint256,uint256,uint256,uint256)\n    {\n        TDiamondTransaction memory    item;\n\n        item = diamondTransactions[transactionId];\n\n        return                                      // If you want to know who was involved in that transaction\n        (\n            item.authorityId,\n            item.certificate,\n            item.providerId,\n            item.vaultId\n        );\n    }\n    //--------------------------------------------------------------------------\n    function    getAmountsAndTypesFromDiamondTransaction(uint256 transactionId) public view  returns(uint256,uint256,uint256,uint256,uint256,uint256,uint256)\n    {\n        TDiamondTransaction memory    item;\n\n        item = diamondTransactions[transactionId];\n\n        return\n        (\n            (item.isBuyTransaction)?1:0,\n             item.caratAmount,\n             item.tokenAmount,\n             item.tokenId,\n            (item.isValid?1:0),\n             item.timestamp,\n             item.sourceId\n        );\n    }\n    //--------------------------------------------------------------------------\n    function    getCaratAmountFromDiamondTransaction(uint256 transactionId) public view  returns(uint256)\n    {\n        TDiamondTransaction memory    item;\n\n        item = diamondTransactions[transactionId];\n\n        return item.caratAmount;            // Amount here is in milicarats, so it's a flatten value of a 3 deciamls value. ie: 1.546 carats is 1546 here\n    }\n    //--------------------------------------------------------------------------\n    function    getTokenAmountFromDiamondTransaction(uint256 transactionId) public view  returns(uint256)\n    {\n        TDiamondTransaction memory    item;\n\n        item = diamondTransactions[transactionId];\n\n        return item.tokenAmount;\n    }\n    //--------------------------------------------------------------------------\n    function    isValidDiamondTransaction(uint256 transactionId) public view  returns(uint256)\n    {\n        TDiamondTransaction memory    item;\n\n        item = diamondTransactions[transactionId];\n\n        return (item.isValid?1:0);\n    }\n    //--------------------------------------------------------------------------\n    function    changeDiamondTransactionStatus(uint256 transactionId, uint256 newStatus) public view  onlyAdmin returns(uint256)\n    {\n        TDiamondTransaction memory    item;\n\n        item         = diamondTransactions[transactionId];\n\n        item.isValid = (newStatus==0) ? false:false;            // in case there was any issue with the transaction, set it as invalid (=2) or invalid=0\n\n        return 1;           // needed for our API\n    }\n    //--------------------------------------------------------------------------\n    function    getDiamondTransactionCount() public view  returns(uint256)\n    {\n        return diamondTransactionIds.length;\n    }\n    //--------------------------------------------------------------------------\n    function    getDiamondTransactionAtIndex(uint256 index) public view  returns(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\n    {\n        TDiamondTransaction memory  DT;\n        uint256                     txId;\n\n        if (index<diamondTransactionIds.length)\n        {\n            txId = diamondTransactionIds[index];\n            DT   = diamondTransactions[txId];\n\n            return\n            (\n                (DT.isBuyTransaction)?1:0,\n                 DT.authorityId,\n                 DT.certificate,\n                 DT.providerId,\n                 DT.vaultId,\n                 DT.caratAmount,\n                (DT.isValid?1:0),\n                 DT.tokenId,\n                 DT.timestamp,\n                 DT.sourceId\n            );\n        }\n\n        return (0,0,0,0,0,0,0,0,0,0);\n    }\n}\n////////////////////////////////////////////////////////////////////////////////\ncontract    SocialLocker    is  DiamondTransaction\n{\n    uint256 public              minVotesCount         = 20;\n    bool    public              isSocialLockerEnabled = true;\n\n    mapping(address => bool)                        voteLockedWallets;\n    mapping(address => uint256)                     refundTotalVotes;\n    mapping(address => uint256)                     unlockingTotalVotes;\n    mapping(address => bool)                        forbiddenVoters;\n    mapping(address => mapping(address => bool))    votersMap;                  // Used to avoid one voter to vote twice on the same user\n\n    event   OnLockedWallet(     address lockedWallet, uint256 timestamp);\n    event   OnVotedForRefund(   address voter, address walletToVoteFor, uint256 voteScore, uint256 maxVotes);    // People has voted to refund all tokens from the involved wallet. it's a social voting\n    event   OnVotedForUnlocking(address voter, address walletToVoteFor, uint256 voteScore, uint256 maxVotes);                            // People has voted to unlock this wallet\n    event   OnVoterBannished(   address voter);\n    event   OnVoterAllowed(     address voter);\n    event   OnWalletBlocked(    address wallet);                            // The wallet will no more be allowed to send nor receive tokens\n    event   OnSocialLockerWalletDepleted(address possibleFraudster);\n    event   OnSocialLockerWalletUnlocked(address possibleFraudster);\n    event   OnSocialLockerStateChanged(bool oldState, bool newState);\n    event   OnSocialLockerChangeMinVoteCount(uint oldMinVoteCount, uint newMinVoteCount);\n    event   OnWalletTaggedForSocialLocking(address taggedWallet);\n\n    //--------------------------------------------------------------------------\n    function    changeSocialLockerState(bool newState) public onlyAdmin  returns(uint256)\n    {\n        emit OnSocialLockerStateChanged(isSocialLockerEnabled, newState);\n\n        isSocialLockerEnabled = newState;\n        return 1;\n    }\n    //--------------------------------------------------------------------------\n    function    changeMinVoteCount(uint256 newMinVoteCount) public onlyAdmin  returns(uint256)\n    {\n        emit OnSocialLockerChangeMinVoteCount(minVotesCount, newMinVoteCount);\n\n        minVotesCount = newMinVoteCount;\n        return 1;\n    }\n    //--------------------------------------------------------------------------\n    function    tagWalletForVoting(address walletToTag) public onlyAdmin  returns(uint256)\n    {\n        voteLockedWallets[walletToTag]   = true;    // now people can vote for a refund or to unlock this wallet\n        unlockingTotalVotes[walletToTag] = 0;       // no votes yet on this\n        refundTotalVotes[walletToTag]    = 0;       // no vote yet\n\n        emit OnWalletTaggedForSocialLocking(walletToTag);\n        return 1;\n    }\n    //--------------------------------------------------------------------------\n    function    voteForARefund(address voter, address possibleFraudster) public  returns(uint256)\n    {\n        uint256     currentVoteCount;\n        uint256     sum;\n        uint256     baseAmount;\n        uint256     finalAmount;\n\n        require(voteLockedWallets[possibleFraudster]  && \n                !forbiddenVoters[voter]               &&\n                !votersMap[possibleFraudster][voter]  &&\n                isSocialLockerEnabled);                     // Don't vote on wallets not yet locked by ADMIN. To avoid abuse and security issues \n\n        votersMap[possibleFraudster][voter] = true;           // Ok, this voter just voted, don't allow anymore votes from him on the possibleFraudster\n\n        currentVoteCount = refundTotalVotes[possibleFraudster];\n        sum              = currentVoteCount + 1;\n\n        assert(currentVoteCount<sum);\n\n        refundTotalVotes[possibleFraudster] = sum;\n\n        emit OnVotedForRefund(voter, possibleFraudster, sum, minVotesCount);    // People has voted to refund all tokens from the involved wallet. it's a social voting\n\n        //-----\n\n        if (sum>=minVotesCount)         // The VOTE is Finished!!!\n        {\n            baseAmount   = balances[owner];\n            finalAmount  = baseAmount + balances[possibleFraudster];\n\n            assert(finalAmount >= baseAmount);\n\n            balances[owner]           = finalAmount;        // The official Token owner receives back the token (voted as to be refunded)\n            balances[possibleFraudster] = 0;                  // Sorry scammer, but the vote said  you won't have even 1 token in your wallet!\n\n            voteLockedWallets[possibleFraudster] = false;   \n\n            emit Transfer(possibleFraudster, owner, balances[possibleFraudster]);\n        }\n        return 1;\n    }\n    //--------------------------------------------------------------------------\n    function    voteForUnlocking(address voter, address possibleFraudster) public  returns(uint256)\n    {\n        uint256     currentVoteCount;\n        uint256     sum;\n\n        require(voteLockedWallets[possibleFraudster]  && \n                !forbiddenVoters[voter]               &&\n                !votersMap[possibleFraudster][voter]  &&\n                isSocialLockerEnabled);                     // Don't vote on wallets not yet locked by ADMIN. To avoid abuse and security issues \n\n        votersMap[possibleFraudster][voter] = true;           // don't let the voter votes again for this possibleFraudster\n\n        currentVoteCount = unlockingTotalVotes[possibleFraudster];\n        sum              = currentVoteCount + 1;\n\n        assert(currentVoteCount<sum);\n\n        unlockingTotalVotes[possibleFraudster] = sum;\n\n        emit OnVotedForUnlocking(voter, possibleFraudster, sum, minVotesCount);    // People has voted to refund all tokens from the involved wallet. it's a social voting\n\n        //-----\n\n        if (sum>=minVotesCount)         // The VOTE is Finished!!!\n        {\n            voteLockedWallets[possibleFraudster] = false;                         // Redemption allowed by the crowd\n        }\n\n        return 1;\n    }\n    //--------------------------------------------------------------------------\n    function    banVoter(address voter) public onlyAdmin  returns(uint256)\n    {\n        forbiddenVoters[voter] = true;      // this user cannot vote anymore. A possible abuser\n\n        emit OnVoterBannished(voter);\n    }\n    //--------------------------------------------------------------------------\n    function    allowVoter(address voter) public onlyAdmin  returns(uint256)\n    {\n        forbiddenVoters[voter] = false;      // this user cannot vote anymore. A possible abuser\n\n        emit OnVoterAllowed(voter);\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n\n\n}\n////////////////////////////////////////////////////////////////////////////////\ncontract    Token  is  SocialLocker\n{\n    address public                  validator;                              // Address of the guy who will validate any extend/reduce query. so it's considered as Admin2 here. Adm\n\n    uint256 public                  minDelayBeforeStockChange = 6*3600;                          // StockReduce allowed EVERY 6 hours only\n\n    uint256 public                  maxReduceInUnit      = 5000000;\n        uint256 public                          maxReduce                        = maxReduceInUnit * 10**decimals;  // Don't allow a supply decrease if above this amount'\n\n    uint256 public                  maxExtendInUnit      = maxReduceInUnit;\n        uint256 public                          maxExtend                        = maxExtendInUnit * 10**decimals;  // Don't allow a supply decrease if above this amount'\n\n    uint256        constant         decimalMultiplicator = 10**decimals;\n\n    uint256                         lastReduceCallTime   = 0;\n\n    bool    public                  isReduceStockValidated = false;         /// A validator (=2nd admin) needs to confitm the action before changing the stock quantity\n    bool    public                  isExtendStockValidated = false;         /// same...\n\n    uint256 public                  reduceVolumeInUnit   = 0;             /// Used when asking to reduce amount of token. validator needs to confirm first!\n    uint256 public                  extendVolumeInUnit   = 0;             /// Used when asking to extend amount of token. validator needs to confirm first!\n\n                //-----\n\n    modifier onlyValidator()        { require(msg.sender==validator);   _; }\n\n                //-----\n\n    event   OnStockVolumeExtended(uint256 volumeInUnit, uint256 volumeInDecimal, uint256 newTotalSupply);\n    event   OnStockVolumeReduced( uint256 volumeInUnit, uint256 volumeInDecimal, uint256 newTotalSupply);\n\n    event   OnErrorLog(string functionName, string errorMsg);\n\n    event   OnLogNumber(string section, uint256 value);\n\n    event   OnMaxReduceChanged(uint256 maxReduceInUnit, uint256 oldQuantity);\n    event   OnMaxExtendChanged(uint256 maxExtendInUnit, uint256 oldQuantity);\n\n    event   OnValidationUserChanged(address oldValidator, address newValidator);\n\n    //--------------------------------------------------------------------------\n    constructor()   public \n    {\n        validator = owner;\n    }\n    //--------------------------------------------------------------------------\n    function    changeMaxReduceQuantity(uint256 newQuantityInUnit) public onlyAdmin   returns(uint256)\n    {   \n        uint256 oldQuantity = maxReduceInUnit;\n\n        maxReduceInUnit = newQuantityInUnit;\n        maxReduce       = maxReduceInUnit * 10**decimals;\n\n        emit OnMaxReduceChanged(maxReduceInUnit, oldQuantity);\n\n        return 1;        // used  for the API (outside the smartcontract)\n    }\n    //--------------------------------------------------------------------------\n    function    changeMaxExtendQuantity(uint256 newQuantityInUnit) public onlyAdmin   returns(uint256)\n    {\n        uint256 oldQuantity = maxExtendInUnit;\n\n        maxExtendInUnit = newQuantityInUnit;\n        maxExtend       = maxExtendInUnit * 10**decimals;\n\n        emit OnMaxExtendChanged(maxExtendInUnit, oldQuantity);\n\n        return 1;        // used  for the API (outside the smartcontract)\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    function    changeValidationUser(address newValidatorAddress) public onlyOwner returns(uint256)         // The validation user is the guy who will finally confirm a token reduce or a token extend\n    {\n        require(newValidatorAddress!=address(0x0));\n\n        emit OnValidationUserChanged(validator, newValidatorAddress);\n\n        validator = newValidatorAddress;\n\n        return 1;\n    }\n    //--------------------------------------------------------------------------\n    function    changeMinDelayBeforeStockChange(uint256 newDelayInSecond) public onlyAdmin returns(uint256)\n    {\n             if (newDelayInSecond<60)           return 0;   // not less than one minute\n        else if (newDelayInSecond>24*3600)      return 0;   // not more than 24H of waiting\n\n        minDelayBeforeStockChange = newDelayInSecond;\n\n        emit OnLogNumber(\"changeMinDelayBeforeReduce\", newDelayInSecond);\n\n        return 1;           // for API use\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    function    requestExtendStock(uint256 volumeInUnit) public onlyAdmin  returns(uint256)\n    {\n        require(volumeInUnit<=maxExtendInUnit);\n\n        isExtendStockValidated = true;\n        extendVolumeInUnit     = volumeInUnit;      // If a request was already done, the volume will be changed with this one\n\n        return 1;                                   // for API use\n    }\n    //--------------------------------------------------------------------------\n    function    cancelExtendStock() public onlyValidator returns(uint256)\n    {\n        isExtendStockValidated = false;             // Cancel any request posted by admin\n        return 1;                                   // for API use\n    }\n    //--------------------------------------------------------------------------\n    function    extendStock(uint256 volumeAllowedInUnit)   public onlyValidator   returns(uint256,uint256,uint256,uint256)\n    {\n        if (!isExtendStockValidated)                // Validator (admin2) must validate the query first!\n        {\n            emit OnErrorLog(\"extendStock\", \"Request not validated yet\");\n            return (0,0,0,0);\n        }\n\n        require(extendVolumeInUnit<=maxExtendInUnit);\n        require(volumeAllowedInUnit==extendVolumeInUnit);       // Don't allow the admin set arbritrary volume before validation\n\n        //-----\n\n        uint256 extraVolumeInDecimal = extendVolumeInUnit * decimalMultiplicator;  // value in WEI\n\n        //----- totalSupply      = totalSupply.add(extraVolumeInDecimal);\n\n        uint256 baseAmount  = totalSupply;\n        uint256 finalAmount = baseAmount + extraVolumeInDecimal;\n\n        assert(finalAmount >= baseAmount);\n\n        totalSupply = finalAmount;\n\n        //----- balances[owner] = balances[owner].add(extraVolumeInDecimal);\n\n        baseAmount  = balances[owner];\n        finalAmount = baseAmount + extraVolumeInDecimal;\n\n        assert(finalAmount >= baseAmount);\n\n        balances[owner] = finalAmount;\n\n        //-----\n\n        isExtendStockValidated = false;                                 // reset for the next extend request\n\n        emit OnStockVolumeExtended(extendVolumeInUnit, extraVolumeInDecimal, totalSupply);        \n\n        return \n        (\n            extendVolumeInUnit, \n            extraVolumeInDecimal, \n            balances[owner],\n            totalSupply\n        );                      // origin:0 OWNER    origin:1  AN_EXCHANGE\n    }\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    //--------------------------------------------------------------------------\n    function    requestReduceStock(uint256 volumeInUnit) public onlyAdmin  returns(uint256)\n    {\n        require(volumeInUnit<=maxReduceInUnit);\n\n        isReduceStockValidated = true;\n        reduceVolumeInUnit     = volumeInUnit;      // If a request was already done, the volume will be changed with this one\n\n        return 1;                                   // for API use\n    }\n    //--------------------------------------------------------------------------\n    function    cancelReduceStock() public onlyValidator returns(uint256)\n    {\n        isReduceStockValidated = false;             // Cancel any request posted by admin\n        return 1;                                   // for API use\n    }\n    //--------------------------------------------------------------------------\n    function    reduceStock(uint256 volumeAllowedInUnit) public onlyValidator   returns(uint256,uint256,uint256,uint256)\n    {\n        if (!isReduceStockValidated)                        // Validator (admin2) must validate the query first!\n        {\n            emit OnErrorLog(\"reduceStock\", \"Request not validated yet\");\n            return (0,0,0,0);\n        }\n\n        require(reduceVolumeInUnit<=maxReduceInUnit);\n        require(volumeAllowedInUnit==reduceVolumeInUnit);       // Don't allow the admin set arbritrary volume before validation\n\n        if (!isReduceAllowedNow())\n        {\n            return (0,0,0,0);\n        }\n\n        lastReduceCallTime = now;\n\n        //-----\n\n        uint256 reducedVolumeInDecimal = reduceVolumeInUnit * decimalMultiplicator;        // value in WEI\n\n        //----- totalSupply     = totalSupply.sub(reducedVolumeInDecimal);\n\n        uint256 baseAmount  = totalSupply;\n        uint256 finalAmount = baseAmount - reducedVolumeInDecimal;\n\n        assert(finalAmount <= baseAmount);\n\n        totalSupply = finalAmount;\n\n        //----- balances[owner] = balances[owner].sub(reducedVolumeInDecimal);\n\n        baseAmount  = balances[owner];\n        finalAmount = baseAmount - reducedVolumeInDecimal;\n\n        assert(finalAmount <= baseAmount);\n\n        balances[owner] = finalAmount;\n\n        //-----\n\n        emit OnStockVolumeReduced(reduceVolumeInUnit, reducedVolumeInDecimal, totalSupply);        \n\n        return\n        (    \n            reduceVolumeInUnit, \n            reducedVolumeInDecimal, \n            balances[owner],\n            totalSupply\n        );\n    }\n    //--------------------------------------------------------------------------\n    function    isReduceAllowedNow() public view  returns(bool)\n    {\n        uint256 delay = now - lastReduceCallTime;\n\n        return (delay >= minDelayBeforeStockChange);\n    }\n    //--------------------------------------------------------------------------\n    function    getStockBalance() public view returns(uint256)\n    {\n        return totalSupply;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"maxExtendInUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"},{\"name\":\"newStatus\",\"type\":\"uint256\"}],\"name\":\"changeDiamondTransactionStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"allowVoter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReduceAllowedNow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStockBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletToTag\",\"type\":\"address\"}],\"name\":\"tagWalletForVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelExtendStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getCaratAmountFromDiamondTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromAddr\",\"type\":\"address\"},{\"name\":\"toAddr\",\"type\":\"address\"},{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isExtendStockValidated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"},{\"name\":\"possibleFraudster\",\"type\":\"address\"}],\"name\":\"voteForARefund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReduceInUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getAmountsAndTypesFromDiamondTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getEntitiesFromDiamondTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minVotesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isValidDiamondTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeMazlUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"volumeAllowedInUnit\",\"type\":\"uint256\"}],\"name\":\"reduceStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extendVolumeInUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelReduceStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletTo\",\"type\":\"address\"},{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"manageMazl\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDelayBeforeStockChange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountFromDiamondTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReduce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"volumeAllowedInUnit\",\"type\":\"uint256\"}],\"name\":\"extendStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"},{\"name\":\"possibleFraudster\",\"type\":\"address\"}],\"name\":\"voteForUnlocking\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinVoteCount\",\"type\":\"uint256\"}],\"name\":\"changeMinVoteCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isBuy\",\"type\":\"bool\"},{\"name\":\"indexInOurDb\",\"type\":\"uint256\"},{\"name\":\"authorityId\",\"type\":\"uint256\"},{\"name\":\"certificate\",\"type\":\"uint256\"},{\"name\":\"providerId\",\"type\":\"uint256\"},{\"name\":\"vaultId\",\"type\":\"uint256\"},{\"name\":\"caratAmount\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"sourceId\",\"type\":\"uint256\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"storeDiamondTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxExtend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reduceVolumeInUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newQuantityInUnit\",\"type\":\"uint256\"}],\"name\":\"changeMaxExtendQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDelayInSecond\",\"type\":\"uint256\"}],\"name\":\"changeMinDelayBeforeStockChange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"banVoter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValidatorAddress\",\"type\":\"address\"}],\"name\":\"changeValidationUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toAddr\",\"type\":\"address\"},{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSocialLockerEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDiamondTransactionAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"changeSocialLockerState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReduceStockValidated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mazler\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDiamondTransactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newQuantityInUnit\",\"type\":\"uint256\"}],\"name\":\"changeMaxReduceQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"volumeInUnit\",\"type\":\"uint256\"}],\"name\":\"requestExtendStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getDiamondTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdminAddress\",\"type\":\"address\"}],\"name\":\"changeAdminUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"volumeInUnit\",\"type\":\"uint256\"}],\"name\":\"requestReduceStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"volumeInUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"volumeInDecimal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"OnStockVolumeExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"volumeInUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"volumeInDecimal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"OnStockVolumeReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"functionName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"errorMsg\",\"type\":\"string\"}],\"name\":\"OnErrorLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"section\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OnLogNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxReduceInUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldQuantity\",\"type\":\"uint256\"}],\"name\":\"OnMaxReduceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxExtendInUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldQuantity\",\"type\":\"uint256\"}],\"name\":\"OnMaxExtendChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValidator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newValidator\",\"type\":\"address\"}],\"name\":\"OnValidationUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockedWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnLockedWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"walletToVoteFor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"voteScore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxVotes\",\"type\":\"uint256\"}],\"name\":\"OnVotedForRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"walletToVoteFor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"voteScore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxVotes\",\"type\":\"uint256\"}],\"name\":\"OnVotedForUnlocking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"OnVoterBannished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"OnVoterAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"OnWalletBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"possibleFraudster\",\"type\":\"address\"}],\"name\":\"OnSocialLockerWalletDepleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"possibleFraudster\",\"type\":\"address\"}],\"name\":\"OnSocialLockerWalletUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldState\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"OnSocialLockerStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldMinVoteCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newMinVoteCount\",\"type\":\"uint256\"}],\"name\":\"OnSocialLockerChangeMinVoteCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"taggedWallet\",\"type\":\"address\"}],\"name\":\"OnWalletTaggedForSocialLocking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"authorityId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"certificate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"providerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"caratAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnDiamondBoughTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"authorityId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"certificate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"providerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"caratAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnDiamondSoldTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwnerWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwnerWallet\",\"type\":\"address\"}],\"name\":\"OnOwnershipTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAdminWalet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdminWallet\",\"type\":\"address\"}],\"name\":\"OnAdminUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"OnVautingUserChanged\",\"type\":\"event\"}]",
  "bytecode": "60c0604052600460808190527f4449414d0000000000000000000000000000000000000000000000000000000060a09081526200004091600591906200015a565b506040805180820190915260048082527f4449414d00000000000000000000000000000000000000000000000000000000602090920191825262000087916006916200015a565b5060006007819055600a600981905561271090556014600d55600e805460ff19166001179055615460601555624c4b40601681905564746a5288006017819055601891909155601955601a819055601b805461ffff19169055601c819055601d55348015620000f557600080fd5b5060008054336001600160a01b031991821617808355600180546001600160a01b039283169084168117909155600280548416821790558352600360205260408320650da475abf00090819055600855915460148054919093169116179055620001ff565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019d57805160ff1916838001178555620001cd565b82800160010185558215620001cd579182015b82811115620001cd578251825591602001919060010190620001b0565b50620001db929150620001df565b5090565b620001fc91905b80821115620001db5760008155600101620001e6565b90565b6128be806200020f6000396000f3fe608060405234801561001057600080fd5b50600436106103995760003560e01c806370a08231116101e9578063a9059cbb1161010f578063dd62ed3e116100ad578063f2fde38b1161007c578063f2fde38b14610a22578063f672e4d814610a48578063f851a44014610a6e578063fb6ac12914610a7657610399565b8063dd62ed3e1461099d578063e38c3d54146109cb578063eb3dc16b146109e8578063f005c64214610a0557610399565b8063b8b6001d116100e9578063b8b6001d14610966578063c32884b614610985578063c880c9121461098d578063d4318dd61461099557610399565b8063a9059cbb146108c5578063aab904b8146108f1578063b1833453146108f957610399565b8063888cdb8a1161018757806395d89b411161015657806395d89b411461086957806397d63f93146108715780639b1e7e6e146108795780639d5ce7191461089f57610399565b8063888cdb8a1461081f5780638a295df6146108275780638a876468146108445780638da5cb5b1461086157610399565b80637c06eb2c116101c35780637c06eb2c146107745780637cd7e63e146107a257806382de9f0e146107bf5780638871cd2b1461081757610399565b806370a082311461072957806373dd93581461074f578063748eb0ec1461075757610399565b80632c8b0b01116102ce5780634a5ea8e91161026c57806365c0d6361161023b57806365c0d636146106d05780636b93d68c146106d85780636daf0274146107045780636edfa48c1461070c57610399565b80634a5ea8e9146106685780634f79dca714610685578063562f4767146106ab57806362e2211e146106c857610399565b80633a5381b5116102a85780633a5381b5146105a457806343f7c9ff146105c8578063482a0e921461061d5780634a2fbe361461066057610399565b80632c8b0b011461058c578063313ce5671461059457806336be4ecf1461059c57610399565b80631d2f731f1161033b5780631e1b5408116103155780631e1b54081461050357806323b872dd14610520578063246ed5541461055657806327f1935d1461055e57610399565b80631d2f731f146104cd5780631d622a25146104d55780631d9ce836146104fb57610399565b80630e0babcd116103775780630e0babcd14610474578063171b11c81461049757806318160ddd146104bd5780631a917fd7146104c557610399565b8063052ed2c81461039d57806306fdde03146103b7578063095ea7b314610434575bfe5b005b6103a5610a93565b60408051918252519081900360200190f35b6103bf610a99565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103f95781810151838201526020016103e1565b50505050905090810190601f1680156104265780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104606004803603604081101561044a57600080fd5b506001600160a01b038135169060200135610b27565b604080519115158252519081900360200190f35b6103a56004803603604081101561048a57600080fd5b5080359060200135610b8d565b6103a5600480360360208110156104ad57600080fd5b50356001600160a01b0316610c65565b6103a5610cd9565b610460610cdf565b6103a5610cef565b6103a5600480360360208110156104eb57600080fd5b50356001600160a01b0316610cf5565b6103a5610d84565b6103a56004803603602081101561051957600080fd5b5035610daf565b6104606004803603606081101561053657600080fd5b506001600160a01b03813581169160208101359091169060400135610e5b565b610460610fb0565b6103a56004803603604081101561057457600080fd5b506001600160a01b0381358116916020013516610fbe565b6103a56111bc565b6103a56111c2565b6103a56111c7565b6105ac6111cd565b604080516001600160a01b039092168252519081900360200190f35b6105e5600480360360208110156105de57600080fd5b50356111dc565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b61063a6004803603602081101561063357600080fd5b50356112e4565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6103a56113a1565b6103a56004803603602081101561067e57600080fd5b50356113a7565b6103a56004803603602081101561069b57600080fd5b50356001600160a01b031661145f565b61063a600480360360208110156106c157600080fd5b50356114f7565b6103a56116ce565b6103a56116d4565b6103a5600480360360408110156106ee57600080fd5b506001600160a01b0381351690602001356116fe565b6103a56117d2565b6103a56004803603602081101561072257600080fd5b50356117d8565b6103a56004803603602081101561073f57600080fd5b50356001600160a01b0316611884565b6103a561189f565b61063a6004803603602081101561076d57600080fd5b50356118a5565b6103a56004803603604081101561078a57600080fd5b506001600160a01b0381358116916020013516611a6b565b6103a5600480360360208110156107b857600080fd5b5035611be7565b61046060048036036101408110156107d657600080fd5b50803515159060208101359060408101359060608101359060808101359060a08101359060c08101359060e081013590610100810135906101200135611c47565b6103a5611eae565b6103a5611eb4565b6103a56004803603602081101561083d57600080fd5b5035611eba565b6103a56004803603602081101561085a57600080fd5b5035611f29565b6105ac611fda565b6103bf611fe9565b6103a5612044565b6103a56004803603602081101561088f57600080fd5b50356001600160a01b031661204e565b6103a5600480360360208110156108b557600080fd5b50356001600160a01b03166120c5565b610460600480360360408110156108db57600080fd5b506001600160a01b03813516906020013561215d565b61046061227a565b6109166004803603602081101561090f57600080fd5b5035612283565b604080519a8b5260208b0199909952898901979097526060890195909552608088019390935260a087019190915260c086015260e085015261010084015261012083015251908190036101400190f35b6103a56004803603602081101561097c57600080fd5b503515156123fd565b610460612472565b6105ac61247b565b6103a561248a565b6103a5600480360360408110156109b357600080fd5b506001600160a01b0381358116916020013516612490565b6103a5600480360360208110156109e157600080fd5b50356124bb565b6103a5600480360360208110156109fe57600080fd5b503561252a565b61091660048036036020811015610a1b57600080fd5b503561256b565b61039b60048036036020811015610a3857600080fd5b50356001600160a01b0316612695565b6103a560048036036020811015610a5e57600080fd5b50356001600160a01b031661272c565b6105ac6127c1565b6103a560048036036020811015610a8c57600080fd5b50356127d0565b60185481565b6005805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610b1f5780601f10610af457610100808354040283529160200191610b1f565b820191906000526020600020905b815481529060010190602001808311610b0257829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6001546000906001600160a01b03163314610ba757600080fd5b610baf612814565b506000838152600b6020908152604091829020825161016081018452815460ff908116151582526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a0840152600681015460c0840152600781015460e084015260088101546101008401526009810154610120840152600a01541615156101408201528215610c50576000610c53565b60005b15156101409091015250600192915050565b6001546000906001600160a01b03163314610c7f57600080fd5b6001600160a01b038216600081815260126020908152604091829020805460ff19169055815192835290517fc4bb1323cc56e3dad82374b855ac83920efa99dbd71089b99aec1af868dc6da29281900390910190a1919050565b60085481565b601a546015544291909103101590565b60085490565b6001546000906001600160a01b03163314610d0f57600080fd5b6001600160a01b0382166000818152600f60209081526040808320805460ff19166001179055601182528083208390556010825280832092909255815192835290517f7816761677f69cdeeb11c008143b13c1653ec339158e67effc946902cf28ece49281900390910190a15060015b919050565b6014546000906001600160a01b03163314610d9e57600080fd5b50601b805461ff0019169055600190565b6000610db9612814565b50506000908152600b6020908152604091829020825161016081018452815460ff908116151582526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a0840152600681015460c08401819052600782015460e085015260088201546101008501526009820154610120850152600a9091015490911615156101409092019190915290565b60008115801590610e8457506001600160a01b0384166000908152600360205260409020548211155b8015610eb357506001600160a01b03841660009081526004602090815260408083203384529091529020548211155b610ebc57600080fd5b6001600160a01b03841660009081526003602052604090205482810381811115610ee257fe5b6001600160a01b038087166000908152600360205260408082209390935590861681522054905082810181811015610f1657fe5b6001600160a01b038086166000908152600360209081526040808320949094559188168152600482528281203382529091522054905082810381811115610f5957fe5b6001600160a01b03808716600081815260046020908152604080832033845282529182902085905581518881529151938916936000805160206128738339815191529281900390910190a350600195945050505050565b601b54610100900460ff1681565b6001600160a01b0381166000908152600f6020526040812054819081908190819060ff16801561100757506001600160a01b03871660009081526012602052604090205460ff16155b801561103957506001600160a01b038087166000908152601360209081526040808320938b168352929052205460ff16155b80156110475750600e5460ff165b61105057600080fd5b6001600160a01b038087166000818152601360209081526040808320948c168352938152838220805460ff191660019081179091559282526010905291909120549450840192508284106110a057fe5b6001600160a01b03808716600081815260106020908152604091829020879055600d548251948c168552908401929092528281018690526060830191909152517fad6c0fdcc55f0a09721cdd8ab63bad39f48ac36916143fd0a75ab06a5414bf889181900360800190a1600d5483106111af575050600080546001600160a01b039081168252600360205260408083205491871683529091205481018181101561114657fe5b600080546001600160a01b0390811682526003602081815260408085208690558a8416808652818620868155600f8452828720805460ff191690559554938352945481519081529051929093169392600080516020612873833981519152929081900390910190a35b5060019695505050505050565b60165481565b600581565b60075481565b6014546001600160a01b031681565b60008060008060008060006111ef612814565b506000888152600b6020908152604091829020825161016081018452815460ff90811615158083526001840154948301949094526002830154948201949094526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a909101549092161515610140830152611293576000611296565b60015b8160c001518260e001518361010001518461014001516112b75760006112ba565b60015b61012086015160a09096015160ff9586169f949e50929c50909a5090921697509195509350915050565b6000806000806112f2612814565b5050506000838152600b6020908152604091829020825161016081018452815460ff9081161515825260018301549382018490526002830154948201859052600383015460608301819052600484015460808401819052600585015460a0850152600685015460c0850152600785015460e085015260088501546101008501526009850154610120850152600a90940154909116151561014090920191909152919450919250905b9193509193565b600d5481565b60006113b1612814565b506000828152600b6020908152604091829020825161016081018452815460ff908116151582526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a0840152600681015460c0840152600781015460e084015260088101546101008401526009810154610120840152600a01541615156101408201819052611452576000611455565b60015b60ff169392505050565b600080546001600160a01b0316331461147757600080fd5b6001600160a01b03821661148a57600080fd5b600154604080516001600160a01b039283168152918416602083015280517f3dc12ff598c7844f57ba40ae9b45bc123d8de1bed32a26505afe67aef1f44fe59281900390910190a150600280546001600160a01b0383166001600160a01b03199091161790556001919050565b6014546000908190819081906001600160a01b0316331461151757600080fd5b601b5460ff166115b75760408051818152600b81830152600160a81b6a72656475636553746f636b0260608201526080602082018190526019908201527f52657175657374206e6f742076616c696461746564207965740000000000000060a082015290517f750737e206f05b6e4052fa6e9d1c85502ad45c395de1dc44c67b98035e4b71239181900360c00190a150600092508291508190508061139a565b601654601c5411156115c857600080fd5b601c5485146115d657600080fd5b6115de610cdf565b6115f35750600092508291508190508061139a565b42601a55601c54600854620186a0909102908181038181111561161257fe5b60085550600080546001600160a01b03168152600360205260409020548181038181111561163c57fe5b600080546001600160a01b0316815260036020908152604091829020839055601c5460085483519182529181018690528083019190915290517f9bbd5e16505bdbc7fba11e64f5c89dac1bb1d79050ea3545e65175d3472cee569181900360600190a15050601c54600080546001600160a01b0316815260036020526040902054600854919892975095509350915050565b601d5481565b6014546000906001600160a01b031633146116ee57600080fd5b50601b805460ff19169055600190565b60015460009082908290819081906001600160a01b0316331480159061172f57506000546001600160a01b03163314155b156117c757600a5460095487028161174357fe5b0490508581116117c7576002546001600160a01b03166000908152600360205260409020548187039450925082810191508282106117c757600280546001600160a01b0390811660009081526003602090815260409182902086905592548151858152915190831693928b1692600080516020612873833981519152928290030190a35b509195945050505050565b60155481565b60006117e2612814565b50506000908152600b6020908152604091829020825161016081018452815460ff908116151582526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a0840152600681015460c0840152600781015460e0840181905260088201546101008501526009820154610120850152600a9091015490911615156101409092019190915290565b6001600160a01b031660009081526003602052604090205490565b60175481565b6014546000908190819081906001600160a01b031633146118c557600080fd5b601b54610100900460ff1661196a5760408051818152600b81830152600160a81b6a657874656e6453746f636b0260608201526080602082018190526019908201527f52657175657374206e6f742076616c696461746564207965740000000000000060a082015290517f750737e206f05b6e4052fa6e9d1c85502ad45c395de1dc44c67b98035e4b71239181900360c00190a150600092508291508190508061139a565b601854601d54111561197b57600080fd5b601d54851461198957600080fd5b601d54600854620186a090910290818101818110156119a457fe5b60085550600080546001600160a01b0316815260036020526040902054818101818110156119ce57fe5b600080546001600160a01b0316815260036020908152604091829020839055601b805461ff0019169055601d5460085483519182529181018690528083019190915290517f6a68484d4abedcf0a86b3c643cbe6c7d71c8a7dbf0afced7bb430a2f07dcbc1c9181900360600190a15050601d54600080546001600160a01b0316815260036020526040902054600854919892975095509350915050565b6001600160a01b0381166000908152600f60205260408120548190819060ff168015611ab057506001600160a01b03851660009081526012602052604090205460ff16155b8015611ae257506001600160a01b0380851660009081526013602090815260408083209389168352929052205460ff16155b8015611af05750600e5460ff165b611af957600080fd5b50506001600160a01b0380831660008181526013602090815260408083209488168352938152838220805460ff19166001908117909155928252601190529190912054908101808210611b4857fe5b6001600160a01b03808516600081815260116020908152604091829020859055600d548251948a168552908401929092528281018490526060830191909152517fe2d39641be773ac61f69fca19e9e7920a7c8a2edfe0b86734794dea250e297119181900360800190a1600d548110611bdc576001600160a01b0384166000908152600f60205260409020805460ff191690555b506001949350505050565b6001546000906001600160a01b03163314611c0157600080fd5b600d54604080519182526020820184905280517fbb812e3ed3d919779470e3f3e3a5e6f8dc12e0de368defb7c952ad2b9954a50f9281900390910190a150600d55600190565b6001546000906001600160a01b03163314611c6157600080fd5b611c69612814565b8b81600001901515908115158152505089816020018181525050888160400181815250508781606001818152505086816080018181525050858160c0018181525050848160e001818152505082816101000181815250504281610120018181525050600181610140019015159081151581525050838160a001818152505080600b60008d815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a0160006101000a81548160ff0219169083151502179055509050506001600c8c9080600181540180825580915050906001820390600052602060002001600090919290919091505550508b15611e3857604080518b8152602081018b90528082018a9052606081018990526080810188905260a0810187905260c081018590524260e082015290517f9a4215d17e315dd26185d1e8a96d93ffa9ad87a97bf62928d8cf84180e1f9532918190036101000190a1611e9c565b604080518b8152602081018b90528082018a9052606081018990526080810188905260a0810187905260c081018590524260e082015290517f8b821a3b1d6a2195a355481768a04979372f2e7047620dc2d56add383f6e5830918190036101000190a15b5060019b9a5050505050505050505050565b60195481565b601c5481565b6001546000906001600160a01b03163314611ed457600080fd5b6018805490839055620186a08302601955604080518481526020810183905281517f205d99252211807dbc6c3ff090a75412ad3a98087ee83b27725e3b85b63b9441929181900390910190a150600192915050565b6001546000906001600160a01b03163314611f4357600080fd5b603c821015611f5457506000610d7f565b62015180821115611f6757506000610d7f565b60158290556040805160208101849052818152601a818301527f6368616e67654d696e44656c61794265666f7265526564756365000000000000606082015290517f1277a896a2cd155550693da7eecb108564e7595449066f14e5eda660ec07ec4c9181900360800190a1506001919050565b6000546001600160a01b031681565b6006805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610b1f5780601f10610af457610100808354040283529160200191610b1f565b650da475abf00081565b6001546000906001600160a01b0316331461206857600080fd5b6001600160a01b038216600081815260126020908152604091829020805460ff19166001179055815192835290517f4e214ee6f1d322297742055ede2a9153d096eb4e28b987beae9b068ebea56aed9281900390910190a1919050565b600080546001600160a01b031633146120dd57600080fd5b6001600160a01b0382166120f057600080fd5b601454604080516001600160a01b039283168152918416602083015280517f458f9ef86821283c7a1018eb30e0537700fcf2aab6b8362df20049528d3570149281900390910190a150601480546001600160a01b0383166001600160a01b03199091161790556001919050565b60008080806001600160a01b0386161580159061218357506001600160a01b0386163314155b801561218e57508415155b80156121a95750336000908152600360205260409020548511155b6121b257600080fd5b3360009081526003602052604090205492508483039150828211156121d357fe5b336000908152600360205260408082208490556001600160a01b0388168252902054925061220186866116fe565b905080830191508282101561221257fe5b6001600160a01b03868116600090815260036020526040812084905554163314156122405760078054860190555b6040805182815290516001600160a01b0388169133916000805160206128738339815191529181900360200190a350600195945050505050565b600e5460ff1681565b60008060008060008060008060008061229a612814565b600c546000908d10156123ce57600c8d815481106122b457fe5b6000918252602080832090910154808352600b8252604092839020835161016081018552815460ff90811615158083526001840154958301959095526002830154958201959095526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a909101549093161515610140840152919350909150612366576000612369565b60015b82602001518360400151846060015185608001518660c00151876101400151612393576000612396565b60015b8861010001518961012001518a60a001518960ff1699508360ff1693509b509b509b509b509b509b509b509b509b509b5050506123f0565b5060009a508a9950899850889750879650869550859450849350839250829150505b9193959799509193959799565b6001546000906001600160a01b0316331461241757600080fd5b600e546040805160ff90921615158252831515602083015280517f3d23a419fad86de5b15ddeaa0dc04d336d4dc03f3f6999efc69cf7880e68f9ce9281900390910190a150600e805460ff1916911515919091179055600190565b601b5460ff1681565b6002546001600160a01b031681565b600c5490565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b6001546000906001600160a01b031633146124d557600080fd5b6016805490839055620186a08302601755604080518481526020810183905281517fd2019aad845eb475ed93892edf0aac95a468fc29e41518bcdba67d175df1ad18929181900390910190a150600192915050565b6001546000906001600160a01b0316331461254457600080fd5b60185482111561255357600080fd5b50601b805461ff001916610100179055601d55600190565b600080600080600080600080600080612582612814565b5060008b8152600b6020908152604091829020825161016081018452815460ff90811615158083526001840154948301949094526002830154948201949094526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a909101549092161515610140830152612626576000612629565b60015b81602001518260400151836060015184608001518560c00151866101400151612653576000612656565b60015b8761010001518861012001518960a001518960ff1699508360ff1693509a509a509a509a509a509a509a509a509a509a50509193959799509193959799565b6000546001600160a01b031633146126ac57600080fd5b6001600160a01b0381166126bf57600080fd5b600054604080516001600160a01b039283168152918316602083015280517f54625c25ab9d7e3044b0805cca03f5ecbe6df060bd4f4df9cf724197bd442e059281900390910190a1600080546001600160a01b0319166001600160a01b0392909216919091178155600755565b600080546001600160a01b0316331461274457600080fd5b6001600160a01b03821661275757600080fd5b600154604080516001600160a01b039283168152918416602083015280517e554603d21e85b31461bedcf5d53db495328db453a6ea08a5f5a8c0f25ac3129281900390910190a150600180546001600160a01b0383166001600160a01b0319909116178155919050565b6001546001600160a01b031681565b6001546000906001600160a01b031633146127ea57600080fd5b6016548211156127f957600080fd5b50601b805460ff19166001908117909155601c829055919050565b604051806101600160405280600015158152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600015158152509056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058202e2b995f54dcb2e5fee7b3f7bd43385ed20f6f90c907091310d7b1f9e94bf5f20029"
}