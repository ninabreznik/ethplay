{
  "address": "0x0fed331b64e6e179bb6a771765895102073cc1f7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-06\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n/**\n * @title Finalizable\n * @dev Base contract to finalize some features\n */\ncontract Finalizable is Ownable {\n    event Finish();\n\n    bool public finalized = false;\n\n    function finalize() public onlyOwner {\n        finalized = true;\n    }\n\n    modifier notFinalized() {\n        require(!finalized);\n        _;\n    }\n}\n\n/**\n * @title Part of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract IToken {\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n}\n\n/**\n * @title Token Receivable\n * @dev Support transfer of ERC20 tokens out of this contract's address\n * @dev Even if we don't intend for people to send them here, somebody will\n */\ncontract TokenReceivable is Ownable {\n    event logTokenTransfer(address token, address to, uint256 amount);\n\n    function claimTokens(address _token, address _to) public onlyOwner returns (bool) {\n        IToken token = IToken(_token);\n        uint256 balance = token.balanceOf(this);\n        if (token.transfer(_to, balance)) {\n            logTokenTransfer(_token, _to, balance);\n            return true;\n        }\n        return false;\n    }\n}\n\ncontract EventDefinitions {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Mint(address indexed to, uint256 amount);\n    event Burn(address indexed burner, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract Token is Finalizable, TokenReceivable, EventDefinitions {\n    using SafeMath for uint256;\n\n    string public name = \"FairWin Token\";\n    uint8 public decimals = 8;\n    string public symbol = \"FWIN\";\n\n    Controller controller;\n\n    // message of the day\n    string public motd;\n\n    function setController(address _controller) public onlyOwner notFinalized {\n        controller = Controller(_controller);\n    }\n\n    modifier onlyController() {\n        require(msg.sender == address(controller));\n        _;\n    }\n\n    modifier onlyPayloadSize(uint256 numwords) {\n        assert(msg.data.length >= numwords * 32 + 4);\n        _;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return controller.balanceOf(_owner);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return controller.totalSupply();\n    }\n\n    /**\n     * @dev transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public\n    onlyPayloadSize(2)\n    returns (bool success) {\n        success = controller.transfer(msg.sender, _to, _value);\n        if (success) {\n            Transfer(msg.sender, _to, _value);\n        }\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public\n    onlyPayloadSize(3)\n    returns (bool success) {\n        success = controller.transferFrom(msg.sender, _from, _to, _value);\n        if (success) {\n            Transfer(_from, _to, _value);\n        }\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public\n    onlyPayloadSize(2)\n    returns (bool success) {\n        //promote safe user behavior\n        require(controller.allowance(msg.sender, _spender) == 0);\n\n        success = controller.approve(msg.sender, _spender, _value);\n        if (success) {\n            Approval(msg.sender, _spender, _value);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint256 _addedValue) public\n    onlyPayloadSize(2)\n    returns (bool success) {\n        success = controller.increaseApproval(msg.sender, _spender, _addedValue);\n        if (success) {\n            uint256 newValue = controller.allowance(msg.sender, _spender);\n            Approval(msg.sender, _spender, newValue);\n        }\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public\n    onlyPayloadSize(2)\n    returns (bool success) {\n        success = controller.decreaseApproval(msg.sender, _spender, _subtractedValue);\n        if (success) {\n            uint newValue = controller.allowance(msg.sender, _spender);\n            Approval(msg.sender, _spender, newValue);\n        }\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return controller.allowance(_owner, _spender);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _amount The amount of token to be burned.\n     */\n    function burn(uint256 _amount) public\n    onlyPayloadSize(1)\n    {\n        bool success = controller.burn(msg.sender, _amount);\n        if (success) {\n            Burn(msg.sender, _amount);\n        }\n    }\n\n    function controllerTransfer(address _from, address _to, uint256 _value) public onlyController {\n        Transfer(_from, _to, _value);\n    }\n\n    function controllerApprove(address _owner, address _spender, uint256 _value) public onlyController {\n        Approval(_owner, _spender, _value);\n    }\n\n    function controllerBurn(address _burner, uint256 _value) public onlyController {\n        Burn(_burner, _value);\n    }\n\n    function controllerMint(address _to, uint256 _value) public onlyController {\n        Mint(_to, _value);\n    }\n\n    event Motd(string message);\n\n    function setMotd(string _motd) public onlyOwner {\n        motd = _motd;\n        Motd(_motd);\n    }\n}\n\ncontract Controller is Finalizable {\n\n    Ledger public ledger;\n    Token public token;\n\n    function setToken(address _token) public onlyOwner {\n        token = Token(_token);\n    }\n\n    function setLedger(address _ledger) public onlyOwner {\n        ledger = Ledger(_ledger);\n    }\n\n    modifier onlyToken() {\n        require(msg.sender == address(token));\n        _;\n    }\n\n    modifier onlyLedger() {\n        require(msg.sender == address(ledger));\n        _;\n    }\n\n    function totalSupply() public onlyToken view returns (uint256) {\n        return ledger.totalSupply();\n    }\n\n    function balanceOf(address _a) public onlyToken view returns (uint256) {\n        return ledger.balanceOf(_a);\n    }\n\n    function allowance(address _owner, address _spender) public onlyToken view returns (uint256) {\n        return ledger.allowance(_owner, _spender);\n    }\n\n    function transfer(address _from, address _to, uint256 _value) public\n    onlyToken\n    returns (bool) {\n        return ledger.transfer(_from, _to, _value);\n    }\n\n    function transferFrom(address _spender, address _from, address _to, uint256 _value) public\n    onlyToken\n    returns (bool) {\n        return ledger.transferFrom(_spender, _from, _to, _value);\n    }\n\n    function burn(address _owner, uint256 _amount) public\n    onlyToken\n    returns (bool) {\n        return ledger.burn(_owner, _amount);\n    }\n\n    function approve(address _owner, address _spender, uint256 _value) public\n    onlyToken\n    returns (bool) {\n        return ledger.approve(_owner, _spender, _value);\n    }\n\n    function increaseApproval(address _owner, address _spender, uint256 _addedValue) public\n    onlyToken\n    returns (bool) {\n        return ledger.increaseApproval(_owner, _spender, _addedValue);\n    }\n\n    function decreaseApproval(address _owner, address _spender, uint256 _subtractedValue) public\n    onlyToken\n    returns (bool) {\n        return ledger.decreaseApproval(_owner, _spender, _subtractedValue);\n    }\n}\n\ncontract Ledger is Finalizable {\n    using SafeMath for uint256;\n\n    address public controller;\n    mapping(address => uint256) internal balances;\n    mapping(address => mapping(address => uint256)) internal allowed;\n    uint256 totalSupply_;\n    bool public mintingFinished = false;\n\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    function setController(address _controller) public onlyOwner notFinalized {\n        controller = _controller;\n    }\n\n    modifier onlyController() {\n        require(msg.sender == controller);\n        _;\n    }\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    function finishMinting() public onlyOwner canMint {\n        mintingFinished = true;\n        MintFinished();\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev transfer token for a specified address\n     * @param _from msg.sender from controller.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _from, address _to, uint256 _value) public onlyController returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _spender, address _from, address _to, uint256 _value) public onlyController returns (bool) {\n        uint256 allow = allowed[_from][_spender];\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allow);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][_spender] = allow.sub(_value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _owner, address _spender, uint256 _value) public onlyController returns (bool) {\n        //require user to set to zero before resetting to nonzero\n        if ((_value != 0) && (allowed[_owner][_spender] != 0)) {\n            return false;\n        }\n\n        allowed[_owner][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _owner, address _spender, uint256 _addedValue) public onlyController returns (bool) {\n        allowed[_owner][_spender] = allowed[_owner][_spender].add(_addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _owner, address _spender, uint256 _subtractedValue) public onlyController returns (bool) {\n        uint256 oldValue = allowed[_owner][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[_owner][_spender] = 0;\n        } else {\n            allowed[_owner][_spender] = oldValue.sub(_subtractedValue);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _amount The amount of token to be burned.\n     */\n    function burn(address _burner, uint256 _amount) public onlyController returns (bool) {\n        require(balances[_burner] >= _amount);\n        // no need to require _amount <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_burner] = balances[_burner].sub(_amount);\n        totalSupply_ = totalSupply_.sub(_amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) public canMint returns (bool) {\n        require(msg.sender == controller || msg.sender == owner);\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Mint(_to, _amount);\n        return true;\n    }\n}",
  "bytecode": "606060409081526000805460a060020a60ff02191690558051908101604052600d81527f4661697257696e20546f6b656e00000000000000000000000000000000000000602082015260019080516200005d929160200190620000d6565b506002805460ff1916600817905560408051908101604052600481527f4657494e0000000000000000000000000000000000000000000000000000000060208201526003908051620000b4929160200190620000d6565b5060008054600160a060020a03191633600160a060020a03161790556200017b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011957805160ff191683800117855562000149565b8280016001018555821562000149579182015b82811115620001495782518255916020019190600101906200012c565b50620001579291506200015b565b5090565b6200017891905b8082111562000157576000815560010162000162565b90565b6113f5806200018b6000396000f3006060604052600436106101245763ffffffff60e060020a60003504166306fdde038114610129578063095ea7b3146101b357806318160ddd146101e957806323b872dd1461020e578063313ce5671461023657806342966c681461025f5780634bb278f3146102775780635aab4ac81461028a5780635d7b07581461029d5780635fe59b9d146102bf578063661884631461031057806369ffa08a1461033257806370a08231146103575780638da5cb5b146103765780638e339b66146103a557806390596dd1146103cd57806392eefe9b146103ef57806395d89b411461040e5780639b50438714610421578063a9059cbb14610449578063b3f05b971461046b578063d73dd6231461047e578063dd62ed3e146104a0578063f2fde38b146104c5575b600080fd5b341561013457600080fd5b61013c6104e4565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610178578082015183820152602001610160565b50505050905090810190601f1680156101a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101be57600080fd5b6101d5600160a060020a0360043516602435610582565b604051901515815260200160405180910390f35b34156101f457600080fd5b6101fc6106f9565b60405190815260200160405180910390f35b341561021957600080fd5b6101d5600160a060020a0360043581169060243516604435610763565b341561024157600080fd5b610249610857565b60405160ff909116815260200160405180910390f35b341561026a57600080fd5b610275600435610860565b005b341561028257600080fd5b610275610933565b341561029557600080fd5b61013c610985565b34156102a857600080fd5b610275600160a060020a03600435166024356109f0565b34156102ca57600080fd5b61027560046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610a4c95505050505050565b341561031b57600080fd5b6101d5600160a060020a0360043516602435610b16565b341561033d57600080fd5b6101d5600160a060020a0360043581169060243516610c82565b341561036257600080fd5b6101fc600160a060020a0360043516610df9565b341561038157600080fd5b610389610e74565b604051600160a060020a03909116815260200160405180910390f35b34156103b057600080fd5b610275600160a060020a0360043581169060243516604435610e83565b34156103d857600080fd5b610275600160a060020a0360043516602435610eea565b34156103fa57600080fd5b610275600160a060020a0360043516610f46565b341561041957600080fd5b61013c610fb8565b341561042c57600080fd5b610275600160a060020a0360043581169060243516604435611023565b341561045457600080fd5b6101d5600160a060020a036004351660243561108a565b341561047657600080fd5b6101d5611175565b341561048957600080fd5b6101d5600160a060020a0360043516602435611196565b34156104ab57600080fd5b6101fc600160a060020a0360043581169060243516611212565b34156104d057600080fd5b610275600160a060020a0360043516611296565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057a5780601f1061054f5761010080835404028352916020019161057a565b820191906000526020600020905b81548152906001019060200180831161055d57829003601f168201915b505050505081565b60006002604436101561059157fe5b600454600160a060020a031663dd62ed3e338660006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156105f257600080fd5b6102c65a03f1151561060357600080fd5b505050604051805115905061061757600080fd5b600454600160a060020a031663e1f21c6733868660006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561068357600080fd5b6102c65a03f1151561069457600080fd5b505050604051805192505081156106ed5783600160a060020a031633600160a060020a03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258560405190815260200160405180910390a35b600191505b5092915050565b600454600090600160a060020a03166318160ddd82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561074357600080fd5b6102c65a03f1151561075457600080fd5b50505060405180519150505b90565b60006003606436101561077257fe5b600454600160a060020a03166315dacbea3387878760006040516020015260405160e060020a63ffffffff8716028152600160a060020a0394851660048201529284166024840152921660448201526064810191909152608401602060405180830381600087803b15156107e557600080fd5b6102c65a03f115156107f657600080fd5b5050506040518051925050811561084f5783600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a35b509392505050565b60025460ff1681565b60006001602436101561086f57fe5b600454600160a060020a0316639dc29fac338560006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156108ce57600080fd5b6102c65a03f115156108df57600080fd5b5050506040518051925050811561092e5733600160a060020a03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58460405190815260200160405180910390a25b505050565b60005433600160a060020a0390811691161461094e57600080fd5b6000805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057a5780601f1061054f5761010080835404028352916020019161057a565b60045433600160a060020a03908116911614610a0b57600080fd5b81600160a060020a03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968858260405190815260200160405180910390a25050565b60005433600160a060020a03908116911614610a6757600080fd5b6005818051610a7a929160200190611331565b507f6e7666d68b6b7c619b2fe5a2c3dd0564bf3e02b0508b217d7a28ce5805583eab8160405160208082528190810183818151815260200191508051906020019080838360005b83811015610ad9578082015183820152602001610ac1565b50505050905090810190601f168015610b065780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b60008060026044361015610b2657fe5b600454600160a060020a031663f019c26733878760006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610b9257600080fd5b6102c65a03f11515610ba357600080fd5b50505060405180519350508215610c7a57600454600160a060020a031663dd62ed3e338760006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b1515610c1557600080fd5b6102c65a03f11515610c2657600080fd5b50505060405180519050915084600160a060020a031633600160a060020a03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405190815260200160405180910390a35b505092915050565b600080548190819033600160a060020a03908116911614610ca257600080fd5b84915081600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610cfc57600080fd5b6102c65a03f11515610d0d57600080fd5b5050506040518051915050600160a060020a03821663a9059cbb858360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610d7557600080fd5b6102c65a03f11515610d8657600080fd5b5050506040518051905015610dee577f977a8f1bdcf5f444d404662ea2c090d707ebcef1be61b37fe6ce74d0c6288fb8858583604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a160019250610c7a565b506000949350505050565b600454600090600160a060020a03166370a0823183836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610e5457600080fd5b6102c65a03f11515610e6557600080fd5b50505060405180519392505050565b600054600160a060020a031681565b60045433600160a060020a03908116911614610e9e57600080fd5b81600160a060020a031683600160a060020a03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405190815260200160405180910390a3505050565b60045433600160a060020a03908116911614610f0557600080fd5b81600160a060020a03167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405190815260200160405180910390a25050565b60005433600160a060020a03908116911614610f6157600080fd5b60005474010000000000000000000000000000000000000000900460ff1615610f8957600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057a5780601f1061054f5761010080835404028352916020019161057a565b60045433600160a060020a0390811691161461103e57600080fd5b81600160a060020a031683600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a3505050565b60006002604436101561109957fe5b600454600160a060020a031663beabacc833868660006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561110557600080fd5b6102c65a03f1151561111657600080fd5b505050604051805192505081156106f25783600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a35092915050565b60005474010000000000000000000000000000000000000000900460ff1681565b600080600260443610156111a657fe5b600454600160a060020a031663bcdd612133878760006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610b9257600080fd5b600454600090600160a060020a031663dd62ed3e8484846040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b151561127557600080fd5b6102c65a03f1151561128657600080fd5b5050506040518051949350505050565b60005433600160a060020a039081169116146112b157600080fd5b600160a060020a03811615156112c657600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061137257805160ff191683800117855561139f565b8280016001018555821561139f579182015b8281111561139f578251825591602001919060010190611384565b506113ab9291506113af565b5090565b61076091905b808211156113ab57600081556001016113b55600a165627a7a72305820ea2046b066a9fcd4d48cb56ba89538478a2443ce898815325e7e4b51f96e74470029"
}