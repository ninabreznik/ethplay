{
  "address": "0xd97579cea3fe2473682a4c42648134bb982433b9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LightCoinToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-04\n*/\n\npragma solidity ^0.4.11;\ncontract LightCoinToken{\n\tmapping (address => uint256) balances;\n\taddress public owner;\n\taddress public lockOwner;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\tuint256 public lockAmount ;\n    uint256 public startTime ;\n\t// total amount of tokens\n    uint256 public totalSupply;\n\t// `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n    function LightCoinToken() public { \n        owner = 0x9a64fE62837d8E2C0Bd0C2a96bbDdEA609Ab2F19;          // Set owner of contract \n\t\tlockOwner = 0x821C05372425709a68090A17075A855dd20371c7;\n\t\tstartTime = 1515686400;\n        name = \"Lightcoin\";                                   // Set the name for display purposes\n        symbol = \"Light\";                                           // Set the symbol for display purposes\n        decimals =8;                                            // Amount of decimals for display purposes\n\t\ttotalSupply = 21000000000000000000;               // Total supply\n\t\tbalances[owner] = totalSupply * 90 /100 ;\n\t\tbalances[0x6CC0BE3c4ad8306526506CB602591AA029896B46]=2000000;\n\t\tlockAmount = totalSupply / 10 ;\n    }\n\t\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n\t\t return balances[_owner];\n\t}\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n\t    require(_value > 0 );                                      // Check send token value > 0;\n\t\trequire(balances[msg.sender] >= _value);\n\t\tbalances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n\t}\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t    require(balances[_from] >= _value);                 // Check if the sender has enough\n        require(balances[_to] + _value >= balances[_to]);   // Check for overflows\n        require(_value <= allowed[_from][msg.sender]);      // Check allowance\n\t\tbalances[_from] -= _value;\n        balances[_to] += _value;\n\t\tallowed[_from][_to] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n\t}\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n\t\trequire(balances[msg.sender] >= _value);\n\t\tallowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\t\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n\t}\n\t\n\t/* This unnamed function is called whenever someone tries to send ether to it */\n    function () private {\n        revert();     // Prevents accidental sending of ether\n    }\n\t\n\tfunction releaseToken() public{\n\t   require(now >= startTime +2 years);\t   \n       uint256 i = ((now  - startTime -2 years) / (0.5 years));\n\t   uint256  releasevalue = totalSupply /40 ;\n\t   require(lockAmount > (4 - i - 1) * releasevalue); \t   \n\t   lockAmount -= releasevalue ;\n\t   balances[lockOwner] +=  releasevalue ;\n    }\n\t\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "bytecode": "6060604052341561000f57600080fd5b60018054600160a060020a0319908116739a64fe62837d8e2c0bd0c2a96bbddea609ab2f19179091556002805490911673821c05372425709a68090a17075a855dd20371c7179055635a578a0060075560408051908101604052600981527f4c69676874636f696e0000000000000000000000000000000000000000000000602082015260039080516100a692916020019061017b565b5060408051908101604052600581527f4c69676874000000000000000000000000000000000000000000000000000000602082015260049080516100ee92916020019061017b565b506005805460ff191660089081179091556801236efcbcbb3400008155600154600160a060020a031660009081526020819052604081206801064a49dd0ee200009055736cc0be3c4ad8306526506cb602591aa029896b469052621e84807fa860eb67f2db61b29ba967c0d8bd19b4344443ad8dd13ce3e256301c6ffdd7bc5554600a9004600655610216565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101bc57805160ff19168380011785556101e9565b828001600101855582156101e9579182015b828111156101e95782518255916020019190600101906101ce565b506101f59291506101f9565b5090565b61021391905b808211156101f557600081556001016101ff565b90565b610784806102256000396000f3006060604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806318160ddd1461019f57806323b872dd146101c4578063313ce567146101ec57806369cd61be1461021557806370a082311461024457806378e97925146102635780638da5cb5b1461027657806395d89b4114610289578063a9059cbb1461029c578063d8df5dc1146102be578063dd62ed3e146102d1578063ec715a31146102f6575b34156100da57600080fd5b600080fd5b34156100ea57600080fd5b6100f261030b565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012e578082015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017457600080fd5b61018b600160a060020a03600435166024356103a9565b604051901515815260200160405180910390f35b34156101aa57600080fd5b6101b2610438565b60405190815260200160405180910390f35b34156101cf57600080fd5b61018b600160a060020a036004358116906024351660443561043e565b34156101f757600080fd5b6101ff610547565b60405160ff909116815260200160405180910390f35b341561022057600080fd5b610228610550565b604051600160a060020a03909116815260200160405180910390f35b341561024f57600080fd5b6101b2600160a060020a036004351661055f565b341561026e57600080fd5b6101b261057a565b341561028157600080fd5b610228610580565b341561029457600080fd5b6100f261058f565b34156102a757600080fd5b61018b600160a060020a03600435166024356105fa565b34156102c957600080fd5b6101b261069c565b34156102dc57600080fd5b6101b2600160a060020a03600435811690602435166106a2565b341561030157600080fd5b6103096106cd565b005b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103a15780601f10610376576101008083540402835291602001916103a1565b820191906000526020600020905b81548152906001019060200180831161038457829003601f168201915b505050505081565b600160a060020a033316600090815260208190526040812054829010156103cf57600080fd5b600160a060020a03338116600081815260096020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60085481565b600160a060020a0383166000908152602081905260408120548290101561046457600080fd5b600160a060020a038316600090815260208190526040902054828101101561048b57600080fd5b600160a060020a03808516600090815260096020908152604080832033909416835292905220548211156104be57600080fd5b600160a060020a0380851660008181526020818152604080832080548890039055938716808352848320805488019055838352600982528483208184529091529083902080548690039055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60055460ff1681565b600254600160a060020a031681565b600160a060020a031660009081526020819052604090205490565b60075481565b600154600160a060020a031681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103a15780601f10610376576101008083540402835291602001916103a1565b600080821161060857600080fd5b600160a060020a0333166000908152602081905260409020548290101561062e57600080fd5b600160a060020a033381166000818152602081905260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60065481565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b6000806007546303c267000142101515156106e757600080fd5b62f099c06303c267006007544203038115156106ff57fe5b049150602860085481151561071057fe5b04905080600183600403030260065411151561072b57600080fd5b600680548290039055600254600160a060020a0316600090815260208190526040902080549091019055505600a165627a7a72305820c2ec6417b0cf13f44fae5b05a06113697593f1d831782bdfda20e54f5b5b2e030029"
}