{
  "address": "0x684564950fdafedad73a79c9074aed1b85428feb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FsTKColdWallet",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "330000000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-31\n*/\n\npragma solidity ^0.4.24;\npragma experimental \"v0.5.0\";\npragma experimental ABIEncoderV2;\n\nlibrary Math {\n\n  struct Fraction {\n    uint256 numerator;\n    uint256 denominator;\n  }\n\n  function isPositive(Fraction memory fraction) internal pure returns (bool) {\n    return fraction.numerator > 0 && fraction.denominator > 0;\n  }\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 r) {\n    r = a * b;\n    require((a == 0) || (r / a == b));\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256 r) {\n    r = a / b;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256 r) {\n    require((r = a - b) <= a);\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256 r) {\n    require((r = a + b) >= a);\n  }\n\n  function min(uint256 x, uint256 y) internal pure returns (uint256 r) {\n    return x <= y ? x : y;\n  }\n\n  function max(uint256 x, uint256 y) internal pure returns (uint256 r) {\n    return x >= y ? x : y;\n  }\n\n  function mulDiv(uint256 value, uint256 m, uint256 d) internal pure returns (uint256 r) {\n    r = value * m;\n    if (r / value == m) {\n      r /= d;\n    } else {\n      r = mul(value / d, m);\n    }\n  }\n\n  function mulDivCeil(uint256 value, uint256 m, uint256 d) internal pure returns (uint256 r) {\n    r = value * m;\n    if (r / value == m) {\n      if (r % d == 0) {\n        r /= d;\n      } else {\n        r = (r / d) + 1;\n      }\n    } else {\n      r = mul(value / d, m);\n      if (value % d != 0) {\n        r += 1;\n      }\n    }\n  }\n\n  function mul(uint256 x, Fraction memory f) internal pure returns (uint256) {\n    return mulDiv(x, f.numerator, f.denominator);\n  }\n\n  function mulCeil(uint256 x, Fraction memory f) internal pure returns (uint256) {\n    return mulDivCeil(x, f.numerator, f.denominator);\n  }\n\n  function div(uint256 x, Fraction memory f) internal pure returns (uint256) {\n    return mulDiv(x, f.denominator, f.numerator);\n  }\n\n  function divCeil(uint256 x, Fraction memory f) internal pure returns (uint256) {\n    return mulDivCeil(x, f.denominator, f.numerator);\n  }\n\n  function mul(Fraction memory x, Fraction memory y) internal pure returns (Math.Fraction) {\n    return Math.Fraction({\n      numerator: mul(x.numerator, y.numerator),\n      denominator: mul(x.denominator, y.denominator)\n    });\n  }\n}\n\ncontract FsTKColdWallet {\n  using Math for uint256;\n\n  event ConfirmationNeeded(address indexed initiator, bytes32 indexed operation, address indexed to, uint256 value, bytes data);\n  event Confirmation(address indexed authority, bytes32 indexed operation);\n  event Revoke(address indexed authority, bytes32 indexed operation);\n\n  event AuthorityChanged(address indexed oldAuthority, address indexed newAuthority);\n  event AuthorityAdded(address authority);\n  event AuthorityRemoved(address authority);\n\n  event RequirementChanged(uint256 required);\n  event DayLimitChanged(uint256 dayLimit);\n  event SpentTodayReset(uint256 spentToday);\n\n  event Deposit(address indexed from, uint256 value);\n  event SingleTransaction(address indexed authority, address indexed to, uint256 value, bytes data, address created);\n  event MultiTransaction(address indexed authority, bytes32 indexed operation, address indexed to, uint256 value, bytes data, address created);\n\n  struct TransactionInfo {\n    address to;\n    uint256 value;\n    bytes data;\n  }\n\n  struct PendingTransactionState {\n    TransactionInfo info;\n    uint256 confirmNeeded;\n    uint256 confirmBitmap;\n    uint256 index;\n  }\n\n  modifier onlyAuthority {\n    require(isAuthority(msg.sender));\n    _;\n  }\n\n  modifier confirmAndRun(bytes32 operation) {\n    if (confirmAndCheck(operation)) {\n      _;\n    }\n  }\n\n  uint256 constant MAX_AUTHORITIES = 250;\n\n  uint256 public requiredAuthorities;\n  uint256 public numAuthorities;\n\n  uint256 public dailyLimit;\n  uint256 public spentToday;\n  uint256 public lastDay;\n\n  address[256] public authorities;\n  mapping(address => uint256) public authorityIndex;\n  mapping(bytes32 => PendingTransactionState) public pendingTransaction;\n  bytes32[] public pendingOperation;\n\n  constructor(address[] _authorities, uint256 required, uint256 _daylimit) public {\n    require(\n      required > 0 &&\n      authorities.length >= required\n    );\n\n    numAuthorities = _authorities.length;\n    for (uint256 i = 0; i < _authorities.length; i += 1) {\n      authorities[1 + i] = _authorities[i];\n      authorityIndex[_authorities[i]] = 1 + i;\n    }\n\n    requiredAuthorities = required;\n\n    dailyLimit = _daylimit;\n    lastDay = today();\n  }\n\n  function() external payable {\n    if (msg.value > 0) {\n      emit Deposit(msg.sender, msg.value);\n    }\n  }\n\n  function getAuthority(uint256 index) public view returns (address) {\n    return authorities[index + 1];\n  }\n\n  function getAuthorityIndex(address authority) public view returns (uint256 index) {\n    index = authorityIndex[authority];\n    require(index > 0);\n  }\n\n  function isAuthority(address authority) public view returns (bool) {\n    return authorityIndex[authority] > 0;\n  }\n\n  function hasConfirmed(bytes32 operation, address _address) public view returns (bool) {\n    return (pendingTransaction[operation].confirmBitmap & (1 << getAuthorityIndex(_address))) != 0;\n  }\n\n  function changeAuthority(address from, address to) public confirmAndRun(keccak256(msg.data)) {\n    require(!isAuthority(to));\n\n    uint256 index = getAuthorityIndex(from);\n    authorities[index] = to;\n    authorityIndex[to] = index;\n    delete authorityIndex[from];\n    clearPending();\n\n    emit AuthorityChanged(from, to);\n  }\n\n  function addAuthority(address authority) public confirmAndRun(keccak256(msg.data)) {\n    require(!isAuthority(authority));\n    if (numAuthorities >= MAX_AUTHORITIES) {\n      reOrganizeAuthorities();\n    }\n    require(numAuthorities < MAX_AUTHORITIES);\n\n    numAuthorities += 1;\n    authorities[numAuthorities] = authority;\n    authorityIndex[authority] = numAuthorities;\n    clearPending();\n\n    emit AuthorityAdded(authority);\n  }\n\n  function removeAuthority(address authority) public confirmAndRun(keccak256(msg.data)) {\n    require(numAuthorities > requiredAuthorities);\n\n    uint256 index = getAuthorityIndex(authority);\n    delete authorities[index];\n    delete authorityIndex[authority];\n    clearPending();\n    reOrganizeAuthorities();\n\n    emit AuthorityRemoved(authority);\n  }\n\n  function setRequirement(uint256 required) public confirmAndRun(keccak256(msg.data)) {\n    require(numAuthorities >= requiredAuthorities);\n    clearPending();\n\n    emit RequirementChanged(requiredAuthorities = required);\n  }\n\n  function setDailyLimit(uint256 _dailyLimit) public confirmAndRun(keccak256(msg.data)) {\n    clearPending();\n\n    emit DayLimitChanged(dailyLimit = _dailyLimit);\n  }\n\n  function resetSpentToday() public confirmAndRun(keccak256(msg.data)) {\n    clearPending();\n\n    emit SpentTodayReset(spentToday);\n    delete spentToday;\n  }\n\n  function propose(\n    address to,\n    uint256 value,\n    bytes data\n  )\n    public\n    onlyAuthority\n    returns (bytes32 operation)\n  {\n    if ((data.length == 0 && checkAndUpdateLimit(value)) || requiredAuthorities == 1) {\n      emit SingleTransaction(msg.sender, to, value, data, execute0(to, value, data));\n    } else {\n      operation = keccak256(abi.encodePacked(msg.data, pendingOperation.length));\n      PendingTransactionState storage status = pendingTransaction[operation];\n      if (status.info.to == 0 && status.info.value == 0 && status.info.data.length == 0) {\n        status.info = TransactionInfo({\n          to: to,\n          value: value,\n          data: data\n        });\n      }\n\n      if (!confirm(operation)) {\n        emit ConfirmationNeeded(msg.sender, operation, to, value, data);\n      }\n    }\n  }\n\n  function revoke(bytes32 operation) public {\n    uint256 confirmFlag = 1 << getAuthorityIndex(msg.sender);\n    PendingTransactionState storage state = pendingTransaction[operation];\n    if (state.confirmBitmap & confirmFlag > 0) {\n      state.confirmNeeded += 1;\n      state.confirmBitmap &= ~confirmFlag;\n      emit Revoke(msg.sender, operation);\n    }\n  }\n\n  function confirm(bytes32 operation) public confirmAndRun(operation) returns (bool) {\n     PendingTransactionState storage status = pendingTransaction[operation];\n    if (status.info.to != 0 || status.info.value != 0 || status.info.data.length != 0) {\n      emit MultiTransaction(\n        msg.sender,\n        operation,\n        status.info.to,\n        status.info.value,\n        status.info.data,\n        execute0(status.info.to, status.info.value, status.info.data)\n      );\n      delete pendingTransaction[operation].info;\n\n      return true;\n    }\n  }\n\n  function execute0(\n    address to,\n    uint256 value,\n    bytes data\n  )\n    private\n    returns (address created)\n  {\n    if (to == 0) {\n      created = create0(value, data);\n    } else {\n      require(to.call.value(value)(data));\n    }\n  }\n\n  function create0(uint256 value, bytes code) internal returns (address _address) {\n    assembly {\n      _address := create(value, add(code, 0x20), mload(code))\n      if iszero(extcodesize(_address)) {\n        revert(0, 0)\n      }\n    }\n  }\n\n  function confirmAndCheck(bytes32 operation) private returns (bool) {\n    PendingTransactionState storage pending = pendingTransaction[operation];\n    if (pending.confirmNeeded == 0) {\n      pending.confirmNeeded = requiredAuthorities;\n      delete pending.confirmBitmap;\n      pending.index = pendingOperation.length;\n      pendingOperation.push(operation);\n    }\n\n    uint256 confirmFlag = 1 << getAuthorityIndex(msg.sender);\n\n    if (pending.confirmBitmap & confirmFlag == 0) {\n      emit Confirmation(msg.sender, operation);\n      if (pending.confirmNeeded <= 1) {\n        delete pendingOperation[pending.index];\n        delete pending.confirmNeeded;\n        delete pending.confirmBitmap;\n        delete pending.index;\n        return true;\n      } else {\n        pending.confirmNeeded -= 1;\n        pending.confirmBitmap |= confirmFlag;\n      }\n    }\n  }\n\n  function checkAndUpdateLimit(uint256 value) private returns (bool) {\n    if (today() > lastDay) {\n      spentToday = 0;\n      lastDay = today();\n    }\n\n    uint256 _spentToday = spentToday.add(value);\n    if (_spentToday <= dailyLimit) {\n      spentToday = _spentToday;\n      return true;\n    }\n    return false;\n  }\n\n  function today() private view returns (uint256) {\n    return block.timestamp / 1 days;\n  }\n\n  function reOrganizeAuthorities() private {\n    uint256 free = 1;\n    while (free < numAuthorities) {\n      while (free < numAuthorities && authorities[free] != 0) {\n        free += 1;\n      }\n      while (numAuthorities > 1 && authorities[numAuthorities] == 0) {\n        numAuthorities -= 1;\n      }\n      if (free < numAuthorities && authorities[numAuthorities] != 0 && authorities[free] == 0) {\n        authorities[free] = authorities[numAuthorities];\n        authorityIndex[authorities[free]] = free;\n        delete authorities[numAuthorities];\n      }\n    }\n  }\n\n  function clearPending() private {\n    for (uint256 i = 0; i < pendingOperation.length; i += 1) {\n      delete pendingTransaction[pendingOperation[i]];\n    }\n    delete pendingOperation;\n  }\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405162001df438038062001df48339810180604052620000379190810190620001de565b600080831180156200004b57508261010010155b15156200005757600080fd5b50825160015560005b8351811015620000fe5783818151811015156200007957fe5b6020908102909101015160056001830161010081106200009557fe5b0160006101000a815481600160a060020a030219169083600160a060020a031602179055508060010161010560008684815181101515620000d257fe5b6020908102909101810151600160a060020a031682528101919091526040016000205560010162000060565b600083905560028290556200011b64010000000062000129810204565b60045550620002a092505050565b62015180420490565b600062000140825162000291565b9392505050565b6000601f820183136200015957600080fd5b8151620001706200016a8262000270565b62000249565b915081818352602084019350602081019050838560208402820111156200019657600080fd5b60005b83811015620001c65781620001af888262000132565b845250602092830192919091019060010162000199565b5050505092915050565b60006200014082516200029d565b600080600060608486031215620001f457600080fd5b83516001604060020a038111156200020b57600080fd5b620002198682870162000147565b93505060206200022c86828701620001d0565b92505060406200023f86828701620001d0565b9150509250925092565b6040518181016001604060020a03811182821017156200026857600080fd5b604052919050565b60006001604060020a038211156200028757600080fd5b5060209081020190565b600160a060020a031690565b90565b611b4480620002b06000396000f3006080604052600436106101265763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662033a1481146101805780632330f247146101b957806326defa73146101e65780633295feb314610206578063494503d41461022857806359ed55e1146102555780635c52c2f51461027557806367eeba0c1461028a5780636b0c932d1461029f578063797af627146102b45780638f56015f146102d457806393ba3f15146102f457806397db9a95146103145780639ef0ce1214610334578063b20d30a914610354578063b39c294414610374578063b75c7dc614610389578063c2cf7326146103a9578063d544e010146103c9578063f059cf2b146103e9578063f257bf3b146103fe578063ffae2c5b1461041e575b600034111561017e573373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040516101759190611958565b60405180910390a25b005b34801561018c57600080fd5b506101a061019b3660046117c4565b61043e565b6040516101b09493929190611966565b60405180910390f35b3480156101c557600080fd5b506101d96101d43660046116ff565b610546565b6040516101b0919061194a565b3480156101f257600080fd5b5061017e6102013660046116ff565b610574565b34801561021257600080fd5b5061021b610688565b6040516101b09190611958565b34801561023457600080fd5b506102486102433660046117c4565b61068e565b6040516101b0919061193c565b34801561026157600080fd5b5061021b6102703660046117c4565b6106b9565b34801561028157600080fd5b5061017e6106d9565b34801561029657600080fd5b5061021b61074f565b3480156102ab57600080fd5b5061021b610755565b3480156102c057600080fd5b506101d96102cf3660046117c4565b61075b565b3480156102e057600080fd5b5061017e6102ef3660046117c4565b610959565b34801561030057600080fd5b5061021b61030f36600461175f565b6109d2565b34801561032057600080fd5b5061017e61032f366004611725565b610ca1565b34801561034057600080fd5b5061021b61034f3660046116ff565b610dc3565b34801561036057600080fd5b5061017e61036f3660046117c4565b610dd6565b34801561038057600080fd5b5061021b610e3e565b34801561039557600080fd5b5061017e6103a43660046117c4565b610e44565b3480156103b557600080fd5b506101d96103c43660046117e2565b610ec0565b3480156103d557600080fd5b5061017e6103e43660046116ff565b610ef0565b3480156103f557600080fd5b5061021b610fe0565b34801561040a57600080fd5b5061021b6104193660046116ff565b610fe6565b34801561042a57600080fd5b506102486104393660046117c4565b611019565b610106602090815260009182526040918290208251606081018452815473ffffffffffffffffffffffffffffffffffffffff1681526001808301548285015260028084018054875161010094821615949094027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff011691909104601f8101869004860283018601875280835293959294869493860193908301828280156105265780601f106104fb57610100808354040283529160200191610526565b820191906000526020600020905b81548152906001019060200180831161050957829003601f168201915b505050505081525050908060030154908060040154908060050154905084565b73ffffffffffffffffffffffffffffffffffffffff811660009081526101056020526040812054115b919050565b60003660405180838380828437820191505092505050604051809103902061059b8161104a565b15610684576105a982610546565b156105b357600080fd5b60015460fa116105c5576105c561117f565b60015460fa116105d457600080fd5b60018054810190819055829060059061010081106105ee57fe5b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9283161790556001549083166000908152610105602052604090205561064c61139a565b7f550a8ae64ec9d6640b6f168a26d3e6364b90defe8110c92135aa775b279e54ea8260405161067b919061193c565b60405180910390a15b5050565b60015481565b600581610100811061069c57fe5b015473ffffffffffffffffffffffffffffffffffffffff16905081565b6101078054829081106106c857fe5b600091825260209091200154905081565b6000366040518083838082843782019150509250505060405180910390206107008161104a565b1561074c5761070d61139a565b7f8c5b9565815ec5a5e089fa8c584c603d2cf75501c8054b228fd16d2b37e5da9d60035460405161073e9190611958565b60405180910390a160006003555b50565b60025481565b60045481565b600080826107688161104a565b1561095257600084815261010660205260409020805490925073ffffffffffffffffffffffffffffffffffffffff161515806107a75750600182015415155b806107e357506002808301547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018316150201160415155b1561095257815460018084015460028086018054604080516020601f97841615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190931694909404958601829004820284018201905284835273ffffffffffffffffffffffffffffffffffffffff90951694899433947f84e1a43ea00f8f27f55c9ff6104a82757b92ce3e8355f9d766291e9b3b257a98949093926108ea9289928692909186918301828280156108e05780601f106108b5576101008083540402835291602001916108e0565b820191906000526020600020905b8154815290600101906020018083116108c357829003601f168201915b5050505050611446565b6040516108f9939291906119ef565b60405180910390a460008481526101066020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155600181018290559061094b600283018261159d565b5050600192505b5050919050565b6000366040518083838082843782019150509250505060405180910390206109808161104a565b1561068457600054600154101561099657600080fd5b61099e61139a565b7facbdb084c721332ac59f9b8e392196c9eb0e4932862da8eb9beaf0dad4f550da82600081905560405161067b9190611958565b6000806109de33610546565b15156109e957600080fd5b82511580156109fc57506109fc8461150d565b80610a0957506000546001145b15610a705773ffffffffffffffffffffffffffffffffffffffff8516337fe29ff7f5df4c2cda15eeda171b5f5be7165ab9338482450aaff790fdeeffaae08686610a548a8383611446565b604051610a63939291906119c0565b60405180910390a3610c99565b61010754604051600091369160200180848480828437820191505082815260200193505050506040516020818303038152906040526040518082805190602001908083835b60208310610af257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610ab5565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905260408051929094018290039091206000818152610106909252929020805492965094505073ffffffffffffffffffffffffffffffffffffffff16159150508015610b7657506001810154155b8015610bb257506002808201547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600183161502011604155b15610c33576040805160608101825273ffffffffffffffffffffffffffffffffffffffff8716808252602080830188905292820186905283547fffffffffffffffffffffffff00000000000000000000000000000000000000001617835560018301869055845190918391610c2f916002840191908801906115e1565b5050505b610c3c8261075b565b1515610c995760405173ffffffffffffffffffffffffffffffffffffffff861690839033907ff2c2e5d8bc7a0cb09c4b887a02749bd70772b58131354b79ad678e740be48d6690610c9090899089906119a0565b60405180910390a45b509392505050565b60008036604051808383808284378201915050925050506040518091039020610cc98161104a565b15610dbd57610cd783610546565b15610ce157600080fd5b610cea84610fe6565b9150826005836101008110610cfb57fe5b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831617905583811660009081526101056020526040808220859055918616815290812055610d6261139a565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f275720694d99bebae3e30a093350471a8a15db9c771974d841c724b07a55f39260405160405180910390a35b50505050565b6101056020526000908152604090205481565b600036604051808383808284378201915050925050506040518091039020610dfd8161104a565b1561068457610e0a61139a565b7f31adeea0047ecd038070d2a2c068a63369e5da2093913417dad947c722e66c9f82600281905560405161067b9190611958565b60005481565b600080610e5033610fe6565b600084815261010660205260408120600481015460029390930a945092509083161115610ebb5760038101805460010190556004810180548319169055604051839033907fc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b90600090a35b505050565b6000610ecb82610fe6565b6000848152610106602052604090206004015460029190910a16151590505b92915050565b60008036604051808383808284378201915050925050506040518091039020610f188161104a565b15610ebb5760005460015411610f2d57600080fd5b610f3683610fe6565b91506005826101008110610f4657fe5b0180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905573ffffffffffffffffffffffffffffffffffffffff831660009081526101056020526040812055610f9c61139a565b610fa461117f565b7f272215cde179041f7a3e8da6f8aabc7c8fc1336ccd73aba698cb825a80d3be4883604051610fd3919061193c565b60405180910390a1505050565b60035481565b73ffffffffffffffffffffffffffffffffffffffff81166000908152610105602052604081205490811161056f57600080fd5b6000600560018301610100811061102c57fe5b015473ffffffffffffffffffffffffffffffffffffffff1692915050565b6000818152610106602052604081206003810154829015156110b0576000805460038401556004830181905561010780546005850181905560018101825591527f47c4908e245f386bfc1825973249847f4053a761ddb4880ad63c323a7b5a2a25018490555b6110b933610fe6565b600483015460029190910a91508116151561095257604051849033907fe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda90600090a3600382015460011061114457610107826005015481548110151561111b57fe5b600091825260208220018190556003830181905560048301819055600583015560019250610952565b6003820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055600482018054821790555050919050565b60015b60015481101561074c575b600154811080156111c2575060058161010081106111a757fe5b015473ffffffffffffffffffffffffffffffffffffffff1615155b156111cf5760010161118d565b60018054118015611206575060015460059061010081106111ec57fe5b015473ffffffffffffffffffffffffffffffffffffffff16155b1561123857600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190556111cf565b600154811080156112705750600154600590610100811061125557fe5b015473ffffffffffffffffffffffffffffffffffffffff1615155b801561129f5750600581610100811061128557fe5b015473ffffffffffffffffffffffffffffffffffffffff16155b156113955760015460059061010081106112b557fe5b015473ffffffffffffffffffffffffffffffffffffffff1660058261010081106112db57fe5b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055806101056000600583610100811061133357fe5b015473ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002055600154600590610100811061136d57fe5b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b611182565b60005b61010754811015611439576101066000610107838154811015156113bd57fe5b60009182526020808320909101548352820192909252604001812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560018101829055908181611415600283018261159d565b5050600060038301819055600483018190556005909201919091555060010161139d565b61074c610107600061165f565b600073ffffffffffffffffffffffffffffffffffffffff841615156114765761146f838361156a565b9050611506565b8373ffffffffffffffffffffffffffffffffffffffff16838360405180828051906020019080838360005b838110156114b95781810151838201526020016114a1565b50505050905090810190601f1680156114e65780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af192505050151561150657600080fd5b9392505050565b60008060045461151b611583565b111561153257600060035561152e611583565b6004555b600354611545908463ffffffff61158d16565b600254909150811161155f57600381905560019150611564565b600091505b50919050565b600081516020830184f09050803b1515610eea57600080fd5b6201518042045b90565b80820182811015610eea57600080fd5b50805460018160011615610100020316600290046000825580601f106115c3575061074c565b601f01602090049060005260206000209081019061074c9190611679565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061162257805160ff191683800117855561164f565b8280016001018555821561164f579182015b8281111561164f578251825591602001919060010190611634565b5061165b929150611679565b5090565b508054600082559060005260206000209081019061074c91905b61158a91905b8082111561165b576000815560010161167f565b60006115068235611a8c565b6000611506823561158a565b6000601f820183136116bc57600080fd5b81356116cf6116ca82611a36565b611a0f565b915080825260208301602083018583830111156116eb57600080fd5b6116f6838284611aaa565b50505092915050565b60006020828403121561171157600080fd5b600061171d8484611693565b949350505050565b6000806040838503121561173857600080fd5b60006117448585611693565b925050602061175585828601611693565b9150509250929050565b60008060006060848603121561177457600080fd5b60006117808686611693565b93505060206117918682870161169f565b925050604084013567ffffffffffffffff8111156117ae57600080fd5b6117ba868287016116ab565b9150509250925092565b6000602082840312156117d657600080fd5b600061171d848461169f565b600080604083850312156117f557600080fd5b6000611744858561169f565b61180a81611a8c565b82525050565b61180a81611aa5565b61180a8161158a565b600061182d82611a88565b808452611841816020860160208601611ab6565b61184a81611ae2565b9093016020019392505050565b60008154600181166000811461187457600181146118b0576118ec565b60028204607f1685527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00821660208601526040850192506118ec565b600282048086526020860195506118c685611a7c565b60005b828110156118e5578154888201526001909101906020016118c9565b8701945050505b505092915050565b805160009060608401906119088582611801565b50602083015161191b6020860182611819565b50604083015184820360408601526119338282611822565b95945050505050565b60208101610eea8284611801565b60208101610eea8284611810565b60208101610eea8284611819565b6080808252810161197781876118f4565b90506119866020830186611819565b6119936040830185611819565b6119336060830184611819565b604081016119ae8285611819565b818103602083015261171d8184611822565b606081016119ce8286611819565b81810360208301526119e08185611822565b905061171d6040830184611801565b606081016119fd8286611819565b81810360208301526119e08185611857565b60405181810167ffffffffffffffff81118282101715611a2e57600080fd5b604052919050565b600067ffffffffffffffff821115611a4d57600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b60009081526020902090565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b151590565b82818337506000910152565b60005b83811015611ad1578181015183820152602001611ab9565b83811115610dbd5750506000910152565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905600a265627a7a72305820039665e053fb80c3944df976dfc5becbf988ebba8e1c2734776f8f3032944a036c6578706572696d656e74616cf500370000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000948766668270cf680bb71e38db0ead6a1db5630c000000000000000000000000948744666663989b27c28e81cba27a4b7938b7a9",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000948766668270cf680bb71e38db0ead6a1db5630c000000000000000000000000948744666663989b27c28e81cba27a4b7938b7a9"
}