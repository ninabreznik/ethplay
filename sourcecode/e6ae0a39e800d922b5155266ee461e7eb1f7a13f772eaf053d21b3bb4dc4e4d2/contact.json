{
  "address": "0xe18898c76a39ba4cd46a544b87ebe1166fbe7052",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "R1Exchange",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-10\n*/\n\n///auto-generated single file for verifying contract on etherscan\npragma solidity ^0.4.20;\n\ncontract SafeMath {\n\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x + _y;\n        assert(z >= _x);\n        return z;\n    }\n\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        assert(_x >= _y);\n        return _x - _y;\n    }\n\n    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x * _y;\n        assert(_x == 0 || z / _x == _y);\n        return z;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract Token {\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\ncontract R1Exchange is SafeMath, Ownable {\n    mapping(address => bool) public admins;\n    mapping(address => bool) public feeAccounts;\n    mapping(address => mapping(address => uint256)) public tokenList;\n    mapping(address => mapping(bytes32 => uint256)) public orderFilled;//tokens filled\n    mapping(bytes32 => bool) public withdrawn;\n    mapping(address => mapping(address => uint256)) public withdrawAllowance;\n    mapping(address => mapping(address => uint256)) public applyList;//withdraw apply list\n    mapping(address => mapping(address => uint)) public latestApply;//save the latest apply timestamp\n    mapping(address => uint256) public canceled;\n    uint public applyWait = 1 days;\n    uint public feeRate = 10;\n    bool public withdrawEnabled = false;\n    bool public stop = false;\n    event Deposit(address indexed token, address indexed user, uint256 amount, uint256 balance);\n    event DepositTo(address indexed token, address indexed from, address indexed user, uint256 amount, uint256 balance);\n    event Withdraw(address indexed token, address indexed user, uint256 amount, uint256 balance);\n    event ApplyWithdraw(address indexed token, address indexed user, uint256 amount, uint256 time);\n    event Trade(address indexed maker, address indexed taker, uint256 amount, uint256 makerFee, uint256 takerFee, uint256 makerNonce, uint256 takerNonce);\n    modifier onlyAdmin {\n        require(admins[msg.sender]);\n        _;\n    }\n    modifier isWithdrawEnabled {\n        require(withdrawEnabled);\n        _;\n    }\n    modifier isFeeAccount(address fa) {\n        require(feeAccounts[fa]);\n        _;\n    }\n    modifier notStop() {\n        require(!stop);\n        _;\n    }\n    function() public {\n        revert();\n    }\n    function setAdmin(address admin, bool isAdmin) public onlyOwner {\n        require(admin != 0);\n        admins[admin] = isAdmin;\n    }\n    function setFeeAccount(address acc, bool asFee) public onlyOwner {\n        require(acc != 0);\n        feeAccounts[acc] = asFee;\n    }\n    function enableWithdraw(bool enabled) public onlyOwner {\n        withdrawEnabled = enabled;\n    }\n    function changeLockTime(uint lock) public onlyOwner {\n        require(lock <= 7 days);\n        applyWait = lock;\n    }\n    function changeFeeRate(uint fr) public onlyOwner {\n        //max fee rate MUST <=10%\n        require(fr >= 10);\n        feeRate = fr;\n    }\n    function stopTrade() public onlyOwner {\n        stop = true;\n    }\n    /**\n    * cancel the order that before nonce.\n    **/\n    function batchCancel(address[] users, uint256[] nonces) public onlyAdmin {\n        require(users.length == nonces.length);\n        for (uint i = 0; i < users.length; i++) {\n            require(nonces[i] >= canceled[users[i]]);\n            canceled[users[i]] = nonces[i];\n        }\n    }\n    function deposit() public payable {\n        tokenList[0][msg.sender] = safeAdd(tokenList[0][msg.sender], msg.value);\n        Deposit(0, msg.sender, msg.value, tokenList[0][msg.sender]);\n    }\n    function depositToken(address token, uint256 amount) public {\n        require(token != 0);\n        tokenList[token][msg.sender] = safeAdd(tokenList[token][msg.sender], amount);\n        require(Token(token).transferFrom(msg.sender, this, amount));\n        Deposit(token, msg.sender, amount, tokenList[token][msg.sender]);\n    }\n    function depositTo(address token, address to, uint256 amount) public {\n        require(token != 0 && to != 0);\n        tokenList[token][to] = safeAdd(tokenList[token][to], amount);\n        require(Token(token).transferFrom(msg.sender, this, amount));\n        DepositTo(token, msg.sender, to, amount, tokenList[token][to]);\n    }\n    function batchDepositTo(address token, address[] to, uint256[] amount) public {\n        require(to.length == amount.length && to.length <= 200);\n        for (uint i = 0; i < to.length; i++) {\n            depositTo(token, to[i], amount[i]);\n        }\n    }\n    function applyWithdraw(address token, uint256 amount) public {\n        uint256 apply = safeAdd(applyList[token][msg.sender], amount);\n        require(safeAdd(apply, withdrawAllowance[token][msg.sender]) <= tokenList[token][msg.sender]);\n        applyList[token][msg.sender] = apply;\n        latestApply[token][msg.sender] = block.timestamp;\n        ApplyWithdraw(token, msg.sender, amount, block.timestamp);\n    }\n    /**\n    * approve user's withdraw application\n    **/\n    function approveWithdraw(address token, address user) public onlyAdmin {\n        withdrawAllowance[token][user] = safeAdd(withdrawAllowance[token][user], applyList[token][user]);\n        applyList[token][user] = 0;\n        latestApply[token][user] = 0;\n    }\n    /**\n    * user's withdraw will success in two cases:\n    *    1. when the admin calls the approveWithdraw function;\n    * or 2. when the lock time has passed since the application;\n    **/\n    function withdraw(address token, uint256 amount) public {\n        require(amount <= tokenList[token][msg.sender]);\n        if (amount > withdrawAllowance[token][msg.sender]) {\n            //withdraw wait over time\n            require(latestApply[token][msg.sender] != 0 && safeSub(block.timestamp, latestApply[token][msg.sender]) > applyWait);\n            withdrawAllowance[token][msg.sender] = safeAdd(withdrawAllowance[token][msg.sender], applyList[token][msg.sender]);\n            applyList[token][msg.sender] = 0;\n        }\n        require(amount <= withdrawAllowance[token][msg.sender]);\n        withdrawAllowance[token][msg.sender] = safeSub(withdrawAllowance[token][msg.sender], amount);\n        tokenList[token][msg.sender] = safeSub(tokenList[token][msg.sender], amount);\n        latestApply[token][msg.sender] = 0;\n        if (token == 0) {//withdraw ether\n            require(msg.sender.send(amount));\n        } else {//withdraw token\n            require(Token(token).transfer(msg.sender, amount));\n        }\n        Withdraw(token, msg.sender, amount, tokenList[token][msg.sender]);\n    }\n    /**\n    * withdraw directly when withdrawEnabled=true\n    **/\n    function withdrawNoLimit(address token, uint256 amount) public isWithdrawEnabled {\n        require(amount <= tokenList[token][msg.sender]);\n        tokenList[token][msg.sender] = safeSub(tokenList[token][msg.sender], amount);\n        if (token == 0) {//withdraw ether\n            require(msg.sender.send(amount));\n        } else {//withdraw token\n            require(Token(token).transfer(msg.sender, amount));\n        }\n        Withdraw(token, msg.sender, amount, tokenList[token][msg.sender]);\n    }\n    /**\n    * admin withdraw according to user's signed withdraw info\n    * PARAMS:\n    * addresses:\n    * [0] user\n    * [1] token\n    * [2] feeAccount\n    * values:\n    * [0] amount\n    * [1] nonce\n    * [2] fee\n    **/\n    function adminWithdraw(address[3] addresses, uint256[3] values, uint8 v, bytes32 r, bytes32 s)\n    public\n    onlyAdmin\n    isFeeAccount(addresses[2])\n    {\n        address user = addresses[0];\n        address token = addresses[1];\n        address feeAccount = addresses[2];\n        uint256 amount = values[0];\n        uint256 nonce = values[1];\n        uint256 fee = values[2];\n        require(amount <= tokenList[token][user]);\n        fee = checkFee(amount, fee);\n        bytes32 hash = keccak256(this, user, token, amount, nonce);\n        require(!withdrawn[hash]);\n        withdrawn[hash] = true;\n        require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash), v, r, s) == user);\n        tokenList[token][user] = safeSub(tokenList[token][user], amount);\n        tokenList[token][feeAccount] = safeAdd(tokenList[token][feeAccount], fee);\n        amount = safeSub(amount, fee);\n        if (token == 0) {//withdraw ether\n            require(user.send(amount));\n        } else {//withdraw token\n            require(Token(token).transfer(user, amount));\n        }\n        Withdraw(token, user, amount, tokenList[token][user]);\n    }\n    function checkFee(uint256 amount, uint256 fee) private returns (uint256){\n        uint256 maxFee = fee;\n        if (safeMul(fee, feeRate) > amount) {\n            maxFee = amount / feeRate;\n        }\n        return maxFee;\n    }\n    function getOrderHash(address tokenBuy, uint256 amountBuy, address tokenSell, uint256 amountSell, address base, uint256 expires, uint256 nonce, address feeToken) public view returns (bytes32) {\n        return keccak256(this, tokenBuy, amountBuy, tokenSell, amountSell, base, expires, nonce, feeToken);\n    }\n    function balanceOf(address token, address user) public constant returns (uint256) {\n        return tokenList[token][user];\n    }\n    struct Order {\n        address tokenBuy;\n        address tokenSell;\n        uint256 amountBuy;\n        uint256 amountSell;\n        address user;\n        uint256 fee;\n        uint256 expires;\n        uint256 nonce;\n        bytes32 orderHash;\n        address baseToken;\n        address feeToken;//0:default;others:payed with erc-20 token\n    }\n    /**\n    * swap maker and taker's tokens according to their signed order info.\n    *\n    * PARAMS:\n    * addresses:\n    * [0]:maker tokenBuy\n    * [1]:taker tokenBuy\n    * [2]:maker tokenSell\n    * [3]:taker tokenSell\n    * [4]:maker user\n    * [5]:taker user\n    * [6]:maker baseTokenAddr .default:0 ,then baseToken is ETH\n    * [7]:taker baseTokenAddr .default:0 ,then baseToken is ETH\n    * [8]:maker feeToken .\n    * [9]:taker feeToken .\n    * [10]:feeAccount\n    * values:\n    * [0]:maker amountBuy\n    * [1]:taker amountBuy\n    * [2]:maker amountSell\n    * [3]:taker amountSell\n    * [4]:maker fee\n    * [5]:taker fee\n    * [6]:maker expires\n    * [7]:taker expires\n    * [8]:maker nonce\n    * [9]:taker nonce\n    * [10]:tradeAmount of token\n    * v,r,s:maker and taker's signature\n    **/\n    function trade(\n        address[11] addresses,\n        uint256[11] values,\n        uint8[2] v,\n        bytes32[2] r,\n        bytes32[2] s\n    ) public\n    onlyAdmin\n    isFeeAccount(addresses[10])\n    notStop\n    {\n        Order memory makerOrder = Order({\n            tokenBuy : addresses[0],\n            tokenSell : addresses[2],\n            user : addresses[4],\n            amountBuy : values[0],\n            amountSell : values[2],\n            fee : values[4],\n            expires : values[6],\n            nonce : values[8],\n            orderHash : 0,\n            baseToken : addresses[6],\n            feeToken : addresses[8]\n            });\n        Order memory takerOrder = Order({\n            tokenBuy : addresses[1],\n            tokenSell : addresses[3],\n            user : addresses[5],\n            amountBuy : values[1],\n            amountSell : values[3],\n            fee : values[5],\n            expires : values[7],\n            nonce : values[9],\n            orderHash : 0,\n            baseToken : addresses[7],\n            feeToken : addresses[9]\n            });\n        uint256 tradeAmount = values[10];\n        //check expires\n        require(makerOrder.expires >= block.number && takerOrder.expires >= block.number);\n        //check order nonce canceled\n        require(makerOrder.nonce >= canceled[makerOrder.user] && takerOrder.nonce >= canceled[takerOrder.user]);\n        //make sure both is the same trade pair\n        require(makerOrder.baseToken == takerOrder.baseToken && makerOrder.tokenBuy == takerOrder.tokenSell && makerOrder.tokenSell == takerOrder.tokenBuy);\n        require(takerOrder.baseToken == takerOrder.tokenBuy || takerOrder.baseToken == takerOrder.tokenSell);\n        makerOrder.orderHash = getOrderHash(makerOrder.tokenBuy, makerOrder.amountBuy, makerOrder.tokenSell, makerOrder.amountSell, makerOrder.baseToken, makerOrder.expires, makerOrder.nonce, makerOrder.feeToken);\n        takerOrder.orderHash = getOrderHash(takerOrder.tokenBuy, takerOrder.amountBuy, takerOrder.tokenSell, takerOrder.amountSell, takerOrder.baseToken, takerOrder.expires, takerOrder.nonce, takerOrder.feeToken);\n        require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", makerOrder.orderHash), v[0], r[0], s[0]) == makerOrder.user);\n        require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", takerOrder.orderHash), v[1], r[1], s[1]) == takerOrder.user);\n        balance(makerOrder, takerOrder, addresses[10], tradeAmount);\n        //emit event\n        Trade(makerOrder.user, takerOrder.user, tradeAmount, makerOrder.fee, takerOrder.fee, makerOrder.nonce, takerOrder.nonce);\n    }\n    function balance(Order makerOrder, Order takerOrder, address feeAccount, uint256 tradeAmount) internal {\n        ///check the price meets the condition.\n        ///match condition: (makerOrder.amountSell*takerOrder.amountSell)/(makerOrder.amountBuy*takerOrder.amountBuy) >=1\n        require(safeMul(makerOrder.amountSell, takerOrder.amountSell) >= safeMul(makerOrder.amountBuy, takerOrder.amountBuy));\n        ///If the price is ok,always use maker's price first!\n        uint256 takerBuy = 0;\n        uint256 takerSell = 0;\n        if (takerOrder.baseToken == takerOrder.tokenBuy) {\n            //taker sell tokens\n            uint256 makerAmount = safeSub(makerOrder.amountBuy, orderFilled[makerOrder.user][makerOrder.orderHash]);\n            uint256 takerAmount = safeSub(takerOrder.amountSell, orderFilled[takerOrder.user][takerOrder.orderHash]);\n            require(tradeAmount > 0 && tradeAmount <= makerAmount && tradeAmount <= takerAmount);\n            takerSell = tradeAmount;\n            takerBuy = safeMul(makerOrder.amountSell, takerSell) / makerOrder.amountBuy;\n            orderFilled[takerOrder.user][takerOrder.orderHash] = safeAdd(orderFilled[takerOrder.user][takerOrder.orderHash], takerSell);\n            orderFilled[makerOrder.user][makerOrder.orderHash] = safeAdd(orderFilled[makerOrder.user][makerOrder.orderHash], takerSell);\n        } else {\n            // taker buy tokens\n            takerAmount = safeSub(takerOrder.amountBuy, orderFilled[takerOrder.user][takerOrder.orderHash]);\n            makerAmount = safeSub(makerOrder.amountSell, orderFilled[makerOrder.user][makerOrder.orderHash]);\n            require(tradeAmount > 0 && tradeAmount <= makerAmount && tradeAmount <= takerAmount);\n            takerBuy = tradeAmount;\n            takerSell = safeMul(makerOrder.amountBuy, takerBuy) / makerOrder.amountSell;\n            orderFilled[takerOrder.user][takerOrder.orderHash] = safeAdd(orderFilled[takerOrder.user][takerOrder.orderHash], takerBuy);\n            orderFilled[makerOrder.user][makerOrder.orderHash] = safeAdd(orderFilled[makerOrder.user][makerOrder.orderHash], takerBuy);\n        }\n        uint256 makerFee = chargeFee(makerOrder, feeAccount, takerSell);\n        uint256 takerFee = chargeFee(takerOrder, feeAccount, takerBuy);\n        //taker give tokens\n        tokenList[takerOrder.tokenSell][takerOrder.user] = safeSub(tokenList[takerOrder.tokenSell][takerOrder.user], takerSell);\n        //taker get tokens\n        tokenList[takerOrder.tokenBuy][takerOrder.user] = safeAdd(tokenList[takerOrder.tokenBuy][takerOrder.user], safeSub(takerBuy, takerFee));\n        //maker give tokens\n        tokenList[makerOrder.tokenSell][makerOrder.user] = safeSub(tokenList[makerOrder.tokenSell][makerOrder.user], takerBuy);\n        //maker get tokens\n        tokenList[makerOrder.tokenBuy][makerOrder.user] = safeAdd(tokenList[makerOrder.tokenBuy][makerOrder.user], safeSub(takerSell, makerFee));\n    }\n    ///charge fees.fee can be payed as other erc20 token or the tokens that user get\n    ///returns:fees to reduce from the user's tokenBuy\n    function chargeFee(Order order, address feeAccount, uint256 amountBuy) internal returns (uint256){\n        uint256 classicFee = 0;\n        if (order.feeToken != 0) {\n            ///use erc-20 token as fee .\n            //make sure the user has enough tokens\n            require(order.fee <= tokenList[order.feeToken][order.user]);\n            tokenList[order.feeToken][feeAccount] = safeAdd(tokenList[order.feeToken][feeAccount], order.fee);\n            tokenList[order.feeToken][order.user] = safeSub(tokenList[order.feeToken][order.user], order.fee);\n        } else {\n            order.fee = checkFee(amountBuy, order.fee);\n            classicFee = order.fee;\n            tokenList[order.tokenBuy][feeAccount] = safeAdd(tokenList[order.tokenBuy][feeAccount], order.fee);\n        }\n        return classicFee;\n    }\n    function batchTrade(\n        address[11][] addresses,\n        uint256[11][] values,\n        uint8[2][] v,\n        bytes32[2][] r,\n        bytes32[2][] s\n    ) public onlyAdmin {\n        for (uint i = 0; i < addresses.length; i++) {\n            trade(addresses[i], values[i], v[i], r[i], s[i]);\n        }\n    }\n    ///help to refund token to users.this method is called when contract needs updating\n    function refund(address user, address[] tokens) public onlyAdmin {\n        for (uint i = 0; i < tokens.length; i++) {\n            address token = tokens[i];\n            uint256 amount = tokenList[token][user];\n            if (amount > 0) {\n                tokenList[token][user] = 0;\n                if (token == 0) {//withdraw ether\n                    require(user.send(amount));\n                } else {//withdraw token\n                    require(Token(token).transfer(user, amount));\n                }\n                Withdraw(token, user, amount, tokenList[token][user]);\n            }\n        }\n    }\n}",
  "bytecode": "606060405262015180600a908155600b55600c805461ffff1916905560008054600160a060020a033316600160a060020a03199091161790556130af806100476000396000f3006060604052600436106101a85763ffffffff60e060020a60003504166307da68f581146101b85780632287e96a146101df578063233ac008146101f2578063338b5dea146102295780633823d66c1461024d578063429b62e5146102635780634b0bddd214610282578063560b3cba146102a65780636edb9ab0146102c85780637420a0ec1461036557806374cf6f491461038a5780637955a65f146103ac5780638baeefce1461041c5780638da5cb5b1461042f57806392e33d141461045e57806396cf522714610476578063978bbdb91461048c5780639e47b4b61461049f578063a4de3c19146104be578063a537b716146104e2578063aa22678014610504578063add37100146105ee578063affca9321461062f578063b40f035214610645578063b67590aa146106a2578063bcfe070f146108f5578063be1ef5c114610984578063d0e30db0146109a9578063da141bd5146109b1578063dc3ef126146109d6578063e2e71f93146109fb578063f213159c14610a1a578063f2eaee0214610a42578063f2fde38b14610a55578063f3fef3a314610a74578063f7888aec14610a96575b34156101b357600080fd5b600080fd5b34156101c357600080fd5b6101cb610abb565b604051901515815260200160405180910390f35b34156101ea57600080fd5b6101cb610ac9565b34156101fd57600080fd5b610217600160a060020a0360043581169060243516610ad2565b60405190815260200160405180910390f35b341561023457600080fd5b61024b600160a060020a0360043516602435610aef565b005b341561025857600080fd5b6101cb600435610c53565b341561026e57600080fd5b6101cb600160a060020a0360043516610c68565b341561028d57600080fd5b61024b600160a060020a03600435166024351515610c7d565b34156102b157600080fd5b610217600160a060020a0360043516602435610cd8565b34156102d357600080fd5b61024b60048035600160a060020a031690604460248035908101908301358060208082020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843750949650610cf595505050505050565b341561037057600080fd5b610217600160a060020a0360043581169060243516610d65565b341561039557600080fd5b61024b600160a060020a0360043516602435610d82565b34156103b757600080fd5b61024b6004606481600360606040519081016040529190828260608082843782019150505050509190806060019060038060200260405190810160405291908282606080828437509395505050823560ff169260208101359250604001359050610f4d565b341561042757600080fd5b61024b611340565b341561043a57600080fd5b61044261136c565b604051600160a060020a03909116815260200160405180910390f35b341561046957600080fd5b61024b600435151561137b565b341561048157600080fd5b61024b6004356113a9565b341561049757600080fd5b6102176113d9565b34156104aa57600080fd5b610217600160a060020a03600435166113df565b34156104c957600080fd5b61024b600160a060020a036004351660243515156113f1565b34156104ed57600080fd5b61024b600160a060020a036004351660243561144c565b341561050f57600080fd5b61024b600461016481600b610160604051908101604052919082826101608082843782019150505050509190806101600190600b8060200260405190810160405291908282610160808284378201915050505050919080604001906002806020026040519081016040528092919082600260200280828437820191505050505091908060400190600280602002604051908101604052809291908260026020028082843782019150505050509190806040019060028060200260405190810160405280929190826002602002808284375093955061155c945050505050565b34156105f957600080fd5b610217600160a060020a03600435811690602435906044358116906064359060843581169060a4359060c4359060e43516611b2b565b341561063a57600080fd5b61024b600435611bb0565b341561065057600080fd5b61024b60048035600160a060020a0316906044602480359081019083013580602080820201604051908101604052809392919081815260200183836020028082843750949650611bde95505050505050565b34156106ad57600080fd5b61024b60046024813581810190830135806020818102016040519081016040528181529291906000602085015b8282101561071857610160808302860190600b90604051908101604052919082826101608082843750505091835250506001909101906020016106da565b505050505091908035906020019082018035906020019080806020026020016040519081016040528181529291906000602085015b8282101561078b57610160808302860190600b906040519081016040529190828261016080828437505050918352505060019091019060200161074d565b505050505091908035906020019082018035906020019080806020026020016040519081016040528181529291906000602085015b828210156107ff5760408083028601906002908051908101604052809291908260026020028082843750505091835250506001909101906020016107c0565b505050505091908035906020019082018035906020019080806020026020016040519081016040528181529291906000602085015b82821015610873576040808302860190600290805190810160405280929190826002602002808284375050509183525050600190910190602001610834565b505050505091908035906020019082018035906020019080806020026020016040519081016040528181529291906000602085015b828210156108e75760408083028601906002908051908101604052809291908260026020028082843750505091835250506001909101906020016108a8565b505050505091905050611dc4565b341561090057600080fd5b61024b600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843750949650611e7e95505050505050565b341561098f57600080fd5b61024b600160a060020a0360043581169060243516611f73565b61024b61203a565b34156109bc57600080fd5b610217600160a060020a03600435811690602435166120f6565b34156109e157600080fd5b610217600160a060020a0360043581169060243516612113565b3415610a0657600080fd5b6101cb600160a060020a0360043516612130565b3415610a2557600080fd5b61024b600160a060020a0360043581169060243516604435612145565b3415610a4d57600080fd5b6102176122c0565b3415610a6057600080fd5b61024b600160a060020a03600435166122c6565b3415610a7f57600080fd5b61024b600160a060020a0360043516602435612361565b3415610aa157600080fd5b610217600160a060020a03600435811690602435166125e5565b600c54610100900460ff1681565b600c5460ff1681565b600660209081526000928352604080842090915290825290205481565b600160a060020a0382161515610b0457600080fd5b600160a060020a0380831660009081526003602090815260408083203390941683529290522054610b359082612610565b600160a060020a0380841660008181526003602090815260408083203395861684529091528082209490945590926323b872dd92913091869190516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610bc357600080fd5b6102c65a03f11515610bd457600080fd5b505050604051805190501515610be957600080fd5b600160a060020a038281166000818152600360209081526040808320339095168084529490915290819020547fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7918591905191825260208201526040908101905180910390a35050565b60056020526000908152604090205460ff1681565b60016020526000908152604090205460ff1681565b60005433600160a060020a03908116911614610c9857600080fd5b600160a060020a0382161515610cad57600080fd5b600160a060020a03919091166000908152600160205260409020805460ff1916911515919091179055565b600460209081526000928352604080842090915290825290205481565b600081518351148015610d0a575060c8835111155b1515610d1557600080fd5b5060005b8251811015610d5f57610d5784848381518110610d3257fe5b90602001906020020151848481518110610d4857fe5b90602001906020020151612145565b600101610d19565b50505050565b600860209081526000928352604080842090915290825290205481565b600c5460ff161515610d9357600080fd5b600160a060020a0380831660009081526003602090815260408083203390941683529290522054811115610dc657600080fd5b600160a060020a0380831660009081526003602090815260408083203390941683529290522054610df79082612626565b600160a060020a03808416600081815260036020908152604080832033909516835293905291909120919091551515610e6057600160a060020a03331681156108fc0282604051600060405180830381858888f193505050501515610e5b57600080fd5b610ee3565b81600160a060020a031663a9059cbb338360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610ebd57600080fd5b6102c65a03f11515610ece57600080fd5b505050604051805190501515610ee357600080fd5b600160a060020a038281166000818152600360209081526040808320339095168084529490915290819020547ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567918591905191825260208201526040908101905180910390a35050565b600160a060020a03331660009081526001602052604081205481908190819081908190819060ff161515610f8057600080fd5b60408c0151600160a060020a03811660009081526002602052604090205460ff161515610fac57600080fd5b8c51975060208d0151965060408d015195508b51945060208c0151935060408c0151600160a060020a038089166000908152600360209081526040808320938d168352929052205490935085111561100357600080fd5b61100d8584612638565b925030888887876040516c01000000000000000000000000600160a060020a039687168102825294861685026014820152929094169092026028820152603c810191909152605c810191909152607c0160405190819003902060008181526005602052604090205490925060ff161561108557600080fd5b60008281526005602052604090819020805460ff19166001908117909155600160a060020a038a16918490517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0160405180910390208d8d8d6040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f1151561114957600080fd5b505060206040510351600160a060020a03161461116557600080fd5b600160a060020a038088166000908152600360209081526040808320938c16835292905220546111959086612626565b600160a060020a0388811660009081526003602090815260408083208d8516845290915280822093909355908816815220546111d19084612610565b600160a060020a038089166000908152600360209081526040808320938b16835292905220556112018584612626565b9450600160a060020a038716151561124957600160a060020a03881685156108fc0286604051600060405180830381858888f19350505050151561124457600080fd5b6112cc565b86600160a060020a031663a9059cbb898760006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156112a657600080fd5b6102c65a03f115156112b757600080fd5b5050506040518051905015156112cc57600080fd5b600160a060020a038781166000818152600360209081526040808320948d168084529490915290819020547ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567918991905191825260208201526040908101905180910390a350505050505050505050505050565b60005433600160a060020a0390811691161461135b57600080fd5b600c805461ff001916610100179055565b600054600160a060020a031681565b60005433600160a060020a0390811691161461139657600080fd5b600c805460ff1916911515919091179055565b60005433600160a060020a039081169116146113c457600080fd5b62093a808111156113d457600080fd5b600a55565b600b5481565b60096020526000908152604090205481565b60005433600160a060020a0390811691161461140c57600080fd5b600160a060020a038216151561142157600080fd5b600160a060020a03919091166000908152600260205260409020805460ff1916911515919091179055565b600160a060020a0380831660009081526007602090815260408083203390941683529290529081205461147f9083612610565b600160a060020a0380851660008181526003602090815260408083203390951680845294825280832054938352600682528083209483529390529190912054919250906114cd908390612610565b11156114d857600080fd5b600160a060020a03808416600081815260076020908152604080832033909516808452948252808320869055838352600882528083208584529091529081902042908190557f9279426ccdba165d0a4e2dadd069b13c58656379fa8a37530455ae6539ca8f28918691905191825260208201526040908101905180910390a3505050565b611564613027565b61156c613027565b600160a060020a03331660009081526001602052604081205460ff16151561159357600080fd5b610140880151600160a060020a03811660009081526002602052604090205460ff1615156115c057600080fd5b600c54610100900460ff16156115d557600080fd5b610160604051908101604052808a51600160a060020a0316815260200160408b0151600160a060020a031681526020018951815260200160408a0151815260200160808b0151600160a060020a0316815260200160808a0151815260200160c08a015181526020016101008a015181526000602082015260400160c08b0151600160a060020a031681526020016101008b0151600160a060020a0316905293506101606040519081016040528060208b0151600160a060020a0316815260200160608b0151600160a060020a031681526020018960016020020151815260200160608a0151815260200160a08b0151600160a060020a0316815260200160a08a0151815260200160e08a015181526020016101208a015181526000602082015260400160e08b0151600160a060020a031681526020016101208b0151600160a060020a0316905292506101408801519150438460c001511015801561173e5750438360c0015110155b151561174957600080fd5b600960008560800151600160a060020a0316600160a060020a03168152602001908152602001600020548460e00151101580156117b35750600960008460800151600160a060020a0316600160a060020a03168152602001908152602001600020548360e0015110155b15156117be57600080fd5b826101200151600160a060020a0316846101200151600160a060020a03161480156117ff57508260200151600160a060020a03168451600160a060020a0316145b801561182157508251600160a060020a03168460200151600160a060020a0316145b151561182c57600080fd5b8251600160a060020a0316836101200151600160a060020a0316148061186c57508260200151600160a060020a0316836101200151600160a060020a0316145b151561187757600080fd5b6118a684518560400151866020015187606001518861012001518960c001518a60e001518b6101400151611b2b565b6101008501526118db83518460400151856020015186606001518761012001518860c001518960e001518a6101400151611b2b565b6101008401526080840151600160a060020a031660018561010001516040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c016040519081900390208951895189516040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f1151561199657600080fd5b505060206040510351600160a060020a0316146119b257600080fd5b8260800151600160a060020a031660018461010001516040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0160405190819003902060208a015160208a015160208a01516040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f11515611a7057600080fd5b505060206040510351600160a060020a031614611a8c57600080fd5b611a9d84846101408c015185612667565b8260800151600160a060020a03168460800151600160a060020a03167f01f5d7c359dba416997ea6c723ea4663e9ad524f956ed8bb3b5234e6475a7285848760a001518760a001518960e001518960e00151604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a3505050505050505050565b60003089898989898989896040516c01000000000000000000000000600160a060020a039a8b1681028252988a1689026014820152602881019790975294881687026048870152605c8601939093529086168502607c850152609084015260b08301529092160260d082015260e4016040518091039020905098975050505050505050565b60005433600160a060020a03908116911614611bcb57600080fd5b600a811015611bd957600080fd5b600b55565b600160a060020a0333166000908152600160205260408120548190819060ff161515611c0957600080fd5b600092505b8351831015611dbd57838381518110611c2357fe5b90602001906020020151600160a060020a038082166000908152600360209081526040808320938a16835292905290812054919350909150811115611db257600160a060020a038083166000818152600360209081526040808320948a168352939052918220919091551515611cc957600160a060020a03851681156108fc0282604051600060405180830381858888f193505050501515611cc457600080fd5b611d4c565b81600160a060020a031663a9059cbb868360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611d2657600080fd5b6102c65a03f11515611d3757600080fd5b505050604051805190501515611d4c57600080fd5b600160a060020a038281166000818152600360209081526040808320948a168084529490915290819020547ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567918591905191825260208201526040908101905180910390a35b600190920191611c0e565b5050505050565b600160a060020a03331660009081526001602052604081205460ff161515611deb57600080fd5b5060005b8551811015611e7657611e6e868281518110611e0757fe5b90602001906020020151868381518110611e1d57fe5b90602001906020020151868481518110611e3357fe5b90602001906020020151868581518110611e4957fe5b90602001906020020151868681518110611e5f57fe5b9060200190602002015161155c565b600101611def565b505050505050565b600160a060020a03331660009081526001602052604081205460ff161515611ea557600080fd5b8151835114611eb357600080fd5b5060005b8251811015611f6e5760096000848381518110611ed057fe5b90602001906020020151600160a060020a0316600160a060020a0316815260200190815260200160002054828281518110611f0757fe5b906020019060200201511015611f1c57600080fd5b818181518110611f2857fe5b9060200190602002015160096000858481518110611f4257fe5b90602001906020020151600160a060020a03168152602081019190915260400160002055600101611eb7565b505050565b600160a060020a03331660009081526001602052604090205460ff161515611f9a57600080fd5b600160a060020a03808316600081815260066020908152604080832094861680845294825280832054938352600782528083209483529390529190912054611fe29190612610565b600160a060020a03928316600081815260066020908152604080832095909616808352948152858220939093558181526007835284812084825283528481208190559081526008825283812092815291905290812055565b33600160a060020a031660009081527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff602052604090205461207c9034612610565b600160a060020a03331660008181527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff6020526040808220849055919290917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79134915191825260208201526040908101905180910390a3565b600760209081526000928352604080842090915290825290205481565b600360209081526000928352604080842090915290825290205481565b60026020526000908152604090205460ff1681565b600160a060020a038316158015906121655750600160a060020a03821615155b151561217057600080fd5b600160a060020a038084166000908152600360209081526040808320938616835292905220546121a09082612610565b600160a060020a038085166000818152600360209081526040808320948816835293905282812093909355916323b872dd9133913091869190516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561222d57600080fd5b6102c65a03f1151561223e57600080fd5b50505060405180519050151561225357600080fd5b600160a060020a038381166000818152600360209081526040808320858816808552925291829020549093331692917fbb4c1ad7429e95f013be0d74b97dfe0307ecb8f3072c5684d1bdab6ce0132ab19186915191825260208201526040908101905180910390a4505050565b600a5481565b60005433600160a060020a039081169116146122e157600080fd5b600160a060020a03811615156122f657600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038083166000908152600360209081526040808320339094168352929052205481111561239457600080fd5b600160a060020a03808316600090815260066020908152604080832033909416835292905220548111156124bf57600160a060020a0380831660009081526008602090815260408083203390941683529290522054158015906124295750600a54600160a060020a0380841660009081526008602090815260408083203390941683529290522054612427904290612626565b115b151561243457600080fd5b600160a060020a038083166000818152600660209081526040808320339095168084529482528083205493835260078252808320948352939052919091205461247d9190612610565b600160a060020a038084166000818152600660209081526040808320339095168084529482528083209590955591815260078252838120928152919052908120555b600160a060020a03808316600090815260066020908152604080832033909416835292905220548111156124f257600080fd5b600160a060020a03808316600090815260066020908152604080832033909416835292905220546125239082612626565b600160a060020a038084166000818152600660209081526040808320339095168084529482528083209590955591815260038252838120928152919052205461256c9082612626565b600160a060020a03808416600081815260036020908152604080832033909516808452948252808320959095558282526008815284822093825292909252918120551515610e6057600160a060020a03331681156108fc0282604051600060405180830381858888f193505050501515610e5b57600080fd5b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60008282018381101561261f57fe5b9392505050565b60008183101561263257fe5b50900390565b6000808290508361264b84600b54612dbb565b111561261f57600b548481151561265e57fe5b04949350505050565b6000806000806000806126828a604001518a60400151612dbb565b6126948b606001518b60600151612dbb565b101561269f57600080fd5b600095508594508851600160a060020a0316896101200151600160a060020a031614156128d5576127158a60400151600460008d60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008d61010001518152602081019190915260400160002054612626565b93506127668960600151600460008c60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008c61010001518152602081019190915260400160002054612626565b92506000871180156127785750838711155b80156127845750828711155b151561278f57600080fd5b86945089604001516127a58b6060015187612dbb565b8115156127ae57fe5b0495506127fc600460008b60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008b6101000151815260208101919091526040016000205486612610565b600460008b60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008b61010001518152602081019190915260400160009081209190915561288e9060049060808d0151600160a060020a0316600160a060020a0316815260200190815260200160002060008c6101000151815260208101919091526040016000205486612610565b600460008c60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008c61010001518152602081019190915260400160002055612ae0565b6129248960400151600460008c60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008c61010001518152602081019190915260400160002054612626565b92506129758a60600151600460008d60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008d61010001518152602081019190915260400160002054612626565b93506000871180156129875750838711155b80156129935750828711155b151561299e57600080fd5b86955089606001516129b48b6040015188612dbb565b8115156129bd57fe5b049450612a0b600460008b60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008b6101000151815260208101919091526040016000205487612610565b600460008b60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008b610100015181526020810191909152604001600090812091909155612a9d9060049060808d0151600160a060020a0316600160a060020a0316815260200190815260200160002060008c6101000151815260208101919091526040016000205487612610565b600460008c60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008c610100015181526020810191909152604001600020555b612aeb8a8987612ddf565b9150612af8898988612ddf565b9050612b54600360008b60200151600160a060020a0316600160a060020a0316815260200190815260200160002060008b60800151600160a060020a0316600160a060020a031681526020019081526020016000205486612626565b600360008b60200151600160a060020a0316600160a060020a0316815260200190815260200160002060008b60800151600160a060020a0316600160a060020a0316815260200190815260200160002081905550612c0b600360008b60000151600160a060020a0316600160a060020a0316815260200190815260200160002060008b60800151600160a060020a0316600160a060020a0316815260200190815260200160002054612c068884612626565b612610565b600360008b51600160a060020a0316600160a060020a0316815260200190815260200160002060008b60800151600160a060020a0316600160a060020a0316815260200190815260200160002081905550612cb6600360008c60200151600160a060020a0316600160a060020a0316815260200190815260200160002060008c60800151600160a060020a0316600160a060020a031681526020019081526020016000205487612626565b600360008c60200151600160a060020a0316600160a060020a0316815260200190815260200160002060008c60800151600160a060020a0316600160a060020a0316815260200190815260200160002081905550612d68600360008c60000151600160a060020a0316600160a060020a0316815260200190815260200160002060008c60800151600160a060020a0316600160a060020a0316815260200190815260200160002054612c068785612626565b600360008c51600160a060020a0316600160a060020a0316815260200190815260200160002060008c60800151600160a060020a0316815260208101919091526040016000205550505050505050505050565b6000828202831580612dd75750828482811515612dd457fe5b04145b151561261f57fe5b600080610140850151600160a060020a031615612f995760036000866101400151600160a060020a0316600160a060020a0316815260200190815260200160002060008660800151600160a060020a0316600160a060020a03168152602001908152602001600020548560a001511115612e5857600080fd5b612e9960036000876101400151600160a060020a039081168252602080830193909352604091820160009081209189168152925290205460a0870151612610565b60036000876101400151600160a060020a0316600160a060020a03168152602001908152602001600020600086600160a060020a0316600160a060020a0316815260200190815260200160002081905550612f4960036000876101400151600160a060020a0316600160a060020a0316815260200190815260200160002060008760800151600160a060020a0316600160a060020a03168152602001908152602001600020548660a00151612626565b60036000876101400151600160a060020a0316600160a060020a0316815260200190815260200160002060008760800151600160a060020a0316815260208101919091526040016000205561301f565b612fa7838660a00151612638565b60a08601908152519050612fee600360008751600160a060020a039081168252602080830193909352604091820160009081209189168152925290205460a0870151612610565b600360008751600160a060020a03908116825260208083019390935260409182016000908120918916815292529020555b949350505050565b6101606040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820152905600a165627a7a72305820687e00ffffe31a532eaba5d411a176564461e7c6b691f0b1a9e17d7d1542a7230029"
}