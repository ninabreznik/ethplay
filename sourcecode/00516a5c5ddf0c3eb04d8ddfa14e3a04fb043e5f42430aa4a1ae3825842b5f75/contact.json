{
  "address": "0xb75322b6687d36edbcdae9399dd26e9e45c161a8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GroupsAccessManager",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-07\n*/\n\npragma solidity ^0.4.18;\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Owned contract with safe ownership pass.\n *\n * Note: all the non constant functions return false instead of throwing in case if state change\n * didn't happen yet.\n */\ncontract Owned {\n    /**\n     * Contract owner address\n     */\n    address public contractOwner;\n\n    /**\n     * Contract owner address\n     */\n    address public pendingContractOwner;\n\n    function Owned() {\n        contractOwner = msg.sender;\n    }\n\n    /**\n    * @dev Owner check modifier\n    */\n    modifier onlyContractOwner() {\n        if (contractOwner == msg.sender) {\n            _;\n        }\n    }\n\n    /**\n     * @dev Destroy contract and scrub a data\n     * @notice Only owner can call it\n     */\n    function destroy() onlyContractOwner {\n        suicide(msg.sender);\n    }\n\n    /**\n     * Prepares ownership pass.\n     *\n     * Can only be called by current owner.\n     *\n     * @param _to address of the next owner. 0x0 is not allowed.\n     *\n     * @return success.\n     */\n    function changeContractOwnership(address _to) onlyContractOwner() returns(bool) {\n        if (_to  == 0x0) {\n            return false;\n        }\n\n        pendingContractOwner = _to;\n        return true;\n    }\n\n    /**\n     * Finalize ownership pass.\n     *\n     * Can only be called by pending owner.\n     *\n     * @return success.\n     */\n    function claimContractOwnership() returns(bool) {\n        if (pendingContractOwner != msg.sender) {\n            return false;\n        }\n\n        contractOwner = pendingContractOwner;\n        delete pendingContractOwner;\n\n        return true;\n    }\n}\n\ncontract ERC20Interface {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed from, address indexed spender, uint256 value);\n    string public symbol;\n\n    function totalSupply() constant returns (uint256 supply);\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n}\n\n/**\n * @title Generic owned destroyable contract\n */\ncontract Object is Owned {\n    /**\n    *  Common result code. Means everything is fine.\n    */\n    uint constant OK = 1;\n    uint constant OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER = 8;\n\n    function withdrawnTokens(address[] tokens, address _to) onlyContractOwner returns(uint) {\n        for(uint i=0;i<tokens.length;i++) {\n            address token = tokens[i];\n            uint balance = ERC20Interface(token).balanceOf(this);\n            if(balance != 0)\n                ERC20Interface(token).transfer(_to,balance);\n        }\n        return OK;\n    }\n\n    function checkOnlyContractOwner() internal constant returns(uint) {\n        if (contractOwner == msg.sender) {\n            return OK;\n        }\n\n        return OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER;\n    }\n}\n\ncontract GroupsAccessManagerEmitter {\n\n    event UserCreated(address user);\n    event UserDeleted(address user);\n    event GroupCreated(bytes32 groupName);\n    event GroupActivated(bytes32 groupName);\n    event GroupDeactivated(bytes32 groupName);\n    event UserToGroupAdded(address user, bytes32 groupName);\n    event UserFromGroupRemoved(address user, bytes32 groupName);\n\n    event Error(uint errorCode);\n\n    function _emitError(uint _errorCode) internal returns (uint) {\n        Error(_errorCode);\n        return _errorCode;\n    }\n}\n\n/// @title Group Access Manager\n///\n/// Base implementation\n/// This contract serves as group manager\ncontract GroupsAccessManager is Object, GroupsAccessManagerEmitter {\n\n    uint constant USER_MANAGER_SCOPE = 111000;\n    uint constant USER_MANAGER_MEMBER_ALREADY_EXIST = USER_MANAGER_SCOPE + 1;\n    uint constant USER_MANAGER_GROUP_ALREADY_EXIST = USER_MANAGER_SCOPE + 2;\n    uint constant USER_MANAGER_OBJECT_ALREADY_SECURED = USER_MANAGER_SCOPE + 3;\n    uint constant USER_MANAGER_CONFIRMATION_HAS_COMPLETED = USER_MANAGER_SCOPE + 4;\n    uint constant USER_MANAGER_USER_HAS_CONFIRMED = USER_MANAGER_SCOPE + 5;\n    uint constant USER_MANAGER_NOT_ENOUGH_GAS = USER_MANAGER_SCOPE + 6;\n    uint constant USER_MANAGER_INVALID_INVOCATION = USER_MANAGER_SCOPE + 7;\n    uint constant USER_MANAGER_DONE = USER_MANAGER_SCOPE + 11;\n    uint constant USER_MANAGER_CANCELLED = USER_MANAGER_SCOPE + 12;\n\n    using SafeMath for uint;\n\n    struct Member {\n        address addr;\n        uint groupsCount;\n        mapping(bytes32 => uint) groupName2index;\n        mapping(uint => uint) index2globalIndex;\n    }\n\n    struct Group {\n        bytes32 name;\n        uint priority;\n        uint membersCount;\n        mapping(address => uint) memberAddress2index;\n        mapping(uint => uint) index2globalIndex;\n    }\n\n    uint public membersCount;\n    mapping(uint => address) public index2memberAddress;\n    mapping(address => uint) public memberAddress2index;\n    mapping(address => Member) address2member;\n\n    uint public groupsCount;\n    mapping(uint => bytes32) public index2groupName;\n    mapping(bytes32 => uint) public groupName2index;\n    mapping(bytes32 => Group) groupName2group;\n    mapping(bytes32 => bool) public groupsBlocked; // if groupName => true, then couldn't be used for confirmation\n\n    function() payable public {\n        revert();\n    }\n\n    /// @notice Register user\n    /// Can be called only by contract owner\n    ///\n    /// @param _user user address\n    ///\n    /// @return code\n    function registerUser(address _user) external onlyContractOwner returns (uint) {\n        require(_user != 0x0);\n\n        if (isRegisteredUser(_user)) {\n            return _emitError(USER_MANAGER_MEMBER_ALREADY_EXIST);\n        }\n\n        uint _membersCount = membersCount.add(1);\n        membersCount = _membersCount;\n        memberAddress2index[_user] = _membersCount;\n        index2memberAddress[_membersCount] = _user;\n        address2member[_user] = Member(_user, 0);\n\n        UserCreated(_user);\n        return OK;\n    }\n\n    /// @notice Discard user registration\n    /// Can be called only by contract owner\n    ///\n    /// @param _user user address\n    ///\n    /// @return code\n    function unregisterUser(address _user) external onlyContractOwner returns (uint) {\n        require(_user != 0x0);\n\n        uint _memberIndex = memberAddress2index[_user];\n        if (_memberIndex == 0 || address2member[_user].groupsCount != 0) {\n            return _emitError(USER_MANAGER_INVALID_INVOCATION);\n        }\n\n        uint _membersCount = membersCount;\n        delete memberAddress2index[_user];\n        if (_memberIndex != _membersCount) {\n            address _lastUser = index2memberAddress[_membersCount];\n            index2memberAddress[_memberIndex] = _lastUser;\n            memberAddress2index[_lastUser] = _memberIndex;\n        }\n        delete address2member[_user];\n        delete index2memberAddress[_membersCount];\n        delete memberAddress2index[_user];\n        membersCount = _membersCount.sub(1);\n\n        UserDeleted(_user);\n        return OK;\n    }\n\n    /// @notice Create group\n    /// Can be called only by contract owner\n    ///\n    /// @param _groupName group name\n    /// @param _priority group priority\n    ///\n    /// @return code\n    function createGroup(bytes32 _groupName, uint _priority) external onlyContractOwner returns (uint) {\n        require(_groupName != bytes32(0));\n\n        if (isGroupExists(_groupName)) {\n            return _emitError(USER_MANAGER_GROUP_ALREADY_EXIST);\n        }\n\n        uint _groupsCount = groupsCount.add(1);\n        groupName2index[_groupName] = _groupsCount;\n        index2groupName[_groupsCount] = _groupName;\n        groupName2group[_groupName] = Group(_groupName, _priority, 0);\n        groupsCount = _groupsCount;\n\n        GroupCreated(_groupName);\n        return OK;\n    }\n\n    /// @notice Change group status\n    /// Can be called only by contract owner\n    ///\n    /// @param _groupName group name\n    /// @param _blocked block status\n    ///\n    /// @return code\n    function changeGroupActiveStatus(bytes32 _groupName, bool _blocked) external onlyContractOwner returns (uint) {\n        require(isGroupExists(_groupName));\n        groupsBlocked[_groupName] = _blocked;\n        return OK;\n    }\n\n    /// @notice Add users in group\n    /// Can be called only by contract owner\n    ///\n    /// @param _groupName group name\n    /// @param _users user array\n    ///\n    /// @return code\n    function addUsersToGroup(bytes32 _groupName, address[] _users) external onlyContractOwner returns (uint) {\n        require(isGroupExists(_groupName));\n\n        Group storage _group = groupName2group[_groupName];\n        uint _groupMembersCount = _group.membersCount;\n\n        for (uint _userIdx = 0; _userIdx < _users.length; ++_userIdx) {\n            address _user = _users[_userIdx];\n            uint _memberIndex = memberAddress2index[_user];\n            require(_memberIndex != 0);\n\n            if (_group.memberAddress2index[_user] != 0) {\n                continue;\n            }\n\n            _groupMembersCount = _groupMembersCount.add(1);\n            _group.memberAddress2index[_user] = _groupMembersCount;\n            _group.index2globalIndex[_groupMembersCount] = _memberIndex;\n\n            _addGroupToMember(_user, _groupName);\n\n            UserToGroupAdded(_user, _groupName);\n        }\n        _group.membersCount = _groupMembersCount;\n\n        return OK;\n    }\n\n    /// @notice Remove users in group\n    /// Can be called only by contract owner\n    ///\n    /// @param _groupName group name\n    /// @param _users user array\n    ///\n    /// @return code\n    function removeUsersFromGroup(bytes32 _groupName, address[] _users) external onlyContractOwner returns (uint) {\n        require(isGroupExists(_groupName));\n\n        Group storage _group = groupName2group[_groupName];\n        uint _groupMembersCount = _group.membersCount;\n\n        for (uint _userIdx = 0; _userIdx < _users.length; ++_userIdx) {\n            address _user = _users[_userIdx];\n            uint _memberIndex = memberAddress2index[_user];\n            uint _groupMemberIndex = _group.memberAddress2index[_user];\n\n            if (_memberIndex == 0 || _groupMemberIndex == 0) {\n                continue;\n            }\n\n            if (_groupMemberIndex != _groupMembersCount) {\n                uint _lastUserGlobalIndex = _group.index2globalIndex[_groupMembersCount];\n                address _lastUser = index2memberAddress[_lastUserGlobalIndex];\n                _group.index2globalIndex[_groupMemberIndex] = _lastUserGlobalIndex;\n                _group.memberAddress2index[_lastUser] = _groupMemberIndex;\n            }\n            delete _group.memberAddress2index[_user];\n            delete _group.index2globalIndex[_groupMembersCount];\n            _groupMembersCount = _groupMembersCount.sub(1);\n\n            _removeGroupFromMember(_user, _groupName);\n\n            UserFromGroupRemoved(_user, _groupName);\n        }\n        _group.membersCount = _groupMembersCount;\n\n        return OK;\n    }\n\n    /// @notice Check is user registered\n    ///\n    /// @param _user user address\n    ///\n    /// @return status\n    function isRegisteredUser(address _user) public view returns (bool) {\n        return memberAddress2index[_user] != 0;\n    }\n\n    /// @notice Check is user in group\n    ///\n    /// @param _groupName user array\n    /// @param _user user array\n    ///\n    /// @return status\n    function isUserInGroup(bytes32 _groupName, address _user) public view returns (bool) {\n        return isRegisteredUser(_user) && address2member[_user].groupName2index[_groupName] != 0;\n    }\n\n    /// @notice Check is group exist\n    ///\n    /// @param _groupName group name\n    ///\n    /// @return status\n    function isGroupExists(bytes32 _groupName) public view returns (bool) {\n        return groupName2index[_groupName] != 0;\n    }\n\n    /// @notice Get current group names\n    ///\n    /// @return group names\n    function getGroups() public view returns (bytes32[] _groups) {\n        uint _groupsCount = groupsCount;\n        _groups = new bytes32[](_groupsCount);\n        for (uint _groupIdx = 0; _groupIdx < _groupsCount; ++_groupIdx) {\n            _groups[_groupIdx] = index2groupName[_groupIdx + 1];\n        }\n    }\n\n    /// @notice Gets group members\n    function getGroupMembers(bytes32 _groupName) \n    public \n    view \n    returns (address[] _members) \n    {\n        if (!isGroupExists(_groupName)) {\n            return;\n        }\n\n        Group storage _group = groupName2group[_groupName];\n        uint _membersCount = _group.membersCount;\n        if (_membersCount == 0) {\n            return;\n        }\n\n        _members = new address[](_membersCount);\n        for (uint _userIdx = 0; _userIdx < _membersCount; ++_userIdx) {\n            uint _memberIdx = _group.index2globalIndex[_userIdx + 1];\n            _members[_userIdx] = index2memberAddress[_memberIdx];\n        }\n    }\n\n    /// @notice Gets a list of groups where passed user is a member\n    function getUserGroups(address _user)\n    public\n    view\n    returns (bytes32[] _groups)\n    {\n        if (!isRegisteredUser(_user)) {\n            return;\n        }\n\n        Member storage _member = address2member[_user];\n        uint _groupsCount = _member.groupsCount;\n        if (_groupsCount == 0) {\n            return;\n        }\n\n        _groups = new bytes32[](_groupsCount);\n        for (uint _groupIdx = 0; _groupIdx < _groupsCount; ++_groupIdx) {\n            uint _groupNameIdx = _member.index2globalIndex[_groupIdx + 1];\n            _groups[_groupIdx] = index2groupName[_groupNameIdx];\n        }\n\n    }\n\n    // PRIVATE\n\n    function _removeGroupFromMember(address _user, bytes32 _groupName) private {\n        Member storage _member = address2member[_user];\n        uint _memberGroupsCount = _member.groupsCount;\n        uint _memberGroupIndex = _member.groupName2index[_groupName];\n        if (_memberGroupIndex != _memberGroupsCount) {\n            uint _lastGroupGlobalIndex = _member.index2globalIndex[_memberGroupsCount];\n            bytes32 _lastGroupName = index2groupName[_lastGroupGlobalIndex];\n            _member.index2globalIndex[_memberGroupIndex] = _lastGroupGlobalIndex;\n            _member.groupName2index[_lastGroupName] = _memberGroupIndex;\n        }\n        delete _member.groupName2index[_groupName];\n        delete _member.index2globalIndex[_memberGroupsCount];\n        _member.groupsCount = _memberGroupsCount.sub(1);\n    }\n\n    function _addGroupToMember(address _user, bytes32 _groupName) private {\n        Member storage _member = address2member[_user];\n        uint _memberGroupsCount = _member.groupsCount.add(1);\n        _member.groupName2index[_groupName] = _memberGroupsCount;\n        _member.index2globalIndex[_memberGroupsCount] = groupName2index[_groupName];\n        _member.groupsCount = _memberGroupsCount;\n    }\n}",
  "bytecode": "606060405260008054600160a060020a033316600160a060020a031990911617905561130c806100306000396000f30060606040526004361061012f5763ffffffff60e060020a600035041663018f003e8114610134578063182e8a67146101655780631846d125146101805780631f5bdf5d146101aa5780632199d5cd146101c957806321f2ca3b146101e8578063297f9af0146102075780632b04b4781461021a5780633da04e4a1461023c57806341ad5c72146102ae5780634592cd1d146102c7578063514bb531146102da578063557f4bc9146102f05780635aa77d3c1461030f5780635e5ff24b1461033e57806366f94e0f146103605780636c052cd81461037657806383197ef01461038c578063885e2750146103a1578063c72b5176146103b4578063ce606ee0146103c7578063d7a405a6146103da578063d8f9659b146103f0578063d93839751461044a578063da4f289914610460575b600080fd5b341561013f57600080fd5b610153600160a060020a0360043516610482565b60405190815260200160405180910390f35b341561017057600080fd5b6101536004356024351515610494565b341561018b57600080fd5b6101966004356104e4565b604051901515815260200160405180910390f35b34156101b557600080fd5b610196600160a060020a03600435166104fb565b34156101d457600080fd5b610153600160a060020a0360043516610518565b34156101f357600080fd5b610153600160a060020a036004351661065b565b341561021257600080fd5b6101536107fe565b341561022557600080fd5b610153600480359060248035908101910135610804565b341561024757600080fd5b61025b600160a060020a03600435166109d3565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561029a578082015183820152602001610282565b505050509050019250505060405180910390f35b34156102b957600080fd5b610153600435602435610aa0565b34156102d257600080fd5b610196610ba7565b34156102e557600080fd5b610153600435610bf2565b34156102fb57600080fd5b610196600160a060020a0360043516610c04565b341561031a57600080fd5b610322610c57565b604051600160a060020a03909116815260200160405180910390f35b341561034957600080fd5b610153600480359060248035908101910135610c66565b341561036b57600080fd5b610322600435610e03565b341561038157600080fd5b61025b600435610e1e565b341561039757600080fd5b61039f610eee565b005b34156103ac57600080fd5b610153610f13565b34156103bf57600080fd5b61025b610f19565b34156103d257600080fd5b610322610f8a565b34156103e557600080fd5b610196600435610f99565b34156103fb57600080fd5b610153600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965050509235600160a060020a03169250610fae915050565b341561045557600080fd5b6101536004356110fd565b341561046b57600080fd5b610196600435600160a060020a036024351661110f565b60046020526000908152604090205481565b6000805433600160a060020a03908116911614156104de576104b5836104e4565b15156104c057600080fd5b506000828152600a60205260409020805460ff191682151517905560015b92915050565b60008181526008602052604090205415155b919050565b600160a060020a0316600090815260046020526040902054151590565b60008054819033600160a060020a039081169116141561065557600160a060020a038316151561054757600080fd5b610550836104fb565b15610568576105616201b199611152565b9150610655565b60025461057c90600163ffffffff61118b16565b6002819055600160a060020a03841660008181526004602090815260408083208590558483526003909152908190208054600160a060020a03191690921790915590915080519081016040908152600160a060020a0385168083526000602080850182905291815260059091522081518154600160a060020a031916600160a060020a03919091161781556020820151600190910155507f0b0376a109cbb578b709f85f6a7befcdac3ac1ab251c99ede87f30c9572ac4d383604051600160a060020a03909116815260200160405180910390a1600191505b50919050565b6000805481908190819033600160a060020a03908116911614156107f657600160a060020a038516151561068e57600080fd5b600160a060020a03851660009081526004602052604090205492508215806106d05750600160a060020a03851660009081526005602052604090206001015415155b156106e8576106e16201b19f611152565b93506107f6565b600254600160a060020a038616600090815260046020526040812055915082821461075157506000818152600360209081526040808320548584528184208054600160a060020a031916600160a060020a03909216918217905580845260049092529091208390555b600160a060020a03851660008181526005602090815260408083208054600160a060020a031990811682556001918201859055878552600384528285208054909116905593835260049091528120556107b190839063ffffffff61119a16565b6002557f4bc56f1321288dfb5b416cb3a7fd188723979f9e866c91d88eccf7fca039d03985604051600160a060020a03909116815260200160405180910390a1600193505b505050919050565b60025481565b600080600080600080600080600033600160a060020a03166000809054906101000a9004600160a060020a0316600160a060020a031614156109c4576108498c6104e4565b151561085457600080fd5b60008c81526009602052604081206002810154909950975095505b898610156109b8578a8a8781811061088357fe5b60209081029290920135600160a060020a031660008181526004845260408082205460038e01909552902054909750919550909350508315806108c4575082155b156108ce576109ad565b82871461091e5750506000858152600487016020818152604080842054808552600380845282862054878752948452828620829055600160a060020a03909416808652938b019092529092208390555b600160a060020a0385166000908152600389016020908152604080832083905589835260048b0190915281205561095c87600163ffffffff61119a16565b9650610968858d6111ac565b7fa4855c75f3fd067fb65c2fb91de0ddd2d34409221ace6e2501684877ace3b0c8858d604051600160a060020a03909216825260208201526040908101905180910390a15b85600101955061086f565b60028801879055600198505b50505050505050509392505050565b6109db6112ce565b6000806000806109ea866104fb565b15156109f557610a97565b600160a060020a038616600090815260056020526040902060018101549094509250821515610a2357610a97565b82604051805910610a315750595b90808252806020026020018201604052509450600091505b82821015610a975750600181016000908152600384016020908152604080832054808452600790925290912054858381518110610a8257fe5b60209081029091010152600190910190610a49565b50505050919050565b60008054819033600160a060020a0390811691161415610ba057831515610ac657600080fd5b610acf846104e4565b15610ae757610ae06201b19a611152565b9150610ba0565b600654610afb90600163ffffffff61118b16565b600085815260086020908152604080832084905583835260079091529081902086905590915060609051908101604090815285825260208083018690526000828401819052878152600990915220815181556020820151816001015560408201516002909101555060068190557f68f2001f3d21c00cd78cc99ed066e602521463b601394d6b4b0664ceed3946118460405190815260200160405180910390a1600191505b5092915050565b60015460009033600160a060020a03908116911614610bc857506000610bef565b506001805460008054600160a060020a0319908116600160a060020a038416179091551681555b90565b60076020526000908152604090205481565b6000805433600160a060020a03908116911614156104f657600160a060020a0382161515610c34575060006104f6565b5060018054600160a060020a038316600160a060020a0319909116178155919050565b600154600160a060020a031681565b60008060008060008033600160a060020a03166000809054906101000a9004600160a060020a0316600160a060020a03161415610df757610ca6896104e4565b1515610cb157600080fd5b60008981526009602052604081206002810154909650945092505b86831015610deb57878784818110610ce057fe5b90506020020135600160a060020a031691506004600083600160a060020a0316600160a060020a0316815260200190815260200160002054905080600014151515610d2a57600080fd5b600160a060020a038216600090815260038601602052604090205415610d4f57610de0565b610d6084600163ffffffff61118b16565b600160a060020a038316600090815260038701602090815260408083208490558383526004890190915290208290559350610d9b828a611267565b7fca89f64dd650c9243356a207b3f79c5cfd0eea1fd05ccc688905417e1b135ee1828a604051600160a060020a03909216825260208201526040908101905180910390a15b826001019250610ccc565b60028501849055600195505b50505050509392505050565b600360205260009081526040902054600160a060020a031681565b610e266112ce565b600080600080610e35866104e4565b1515610e4057610a97565b600086815260096020526040902060028101549094509250821515610e6457610a97565b82604051805910610e725750595b90808252806020026020018201604052509450600091505b82821015610a975750600181016000908152600484016020908152604080832054808452600390925290912054600160a060020a0316858381518110610ecc57fe5b600160a060020a03909216602092830290910190910152600190910190610e8a565b60005433600160a060020a0390811691161415610f115733600160a060020a0316ff5b565b60065481565b610f216112ce565b600654600081604051805910610f345750595b90808252806020026020018201604052509250600090505b81811015610f855760018101600090815260076020526040902054838281518110610f7357fe5b60209081029091010152600101610f4c565b505090565b600054600160a060020a031681565b600a6020526000908152604090205460ff1681565b6000805481908190819033600160a060020a03908116911614156110f457600092505b85518310156110ef57858381518110610fe657fe5b90602001906020020151915081600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561104957600080fd5b6102c65a03f1151561105a57600080fd5b505050604051805191505080156110e45781600160a060020a031663a9059cbb868360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156110c857600080fd5b6102c65a03f115156110d957600080fd5b505050604051805150505b600190920191610fd1565b600193505b50505092915050565b60086020526000908152604090205481565b600061111a826104fb565b801561114b5750600160a060020a038216600090815260056020908152604080832086845260020190915290205415155b9392505050565b60007f2e36a7093f25f22bd4cbdeb6040174c3ba4c5fe8f1abc04e7c3c48f26c7413e08260405190815260200160405180910390a15090565b60008282018381101561114b57fe5b6000828211156111a657fe5b50900390565b600160a060020a03821660009081526005602090815260408083206001810154858552600282019093529083205490928082841461122257505060008281526003840160208181526040808420548085526007835281852054868652938352818520819055838552600288019092529092208390555b600086815260028601602090815260408083208390558683526003880190915281205561125684600163ffffffff61119a16565b856001018190555050505050505050565b600160a060020a03821660009081526005602052604081206001808201549192916112979163ffffffff61118b16565b6000938452600283016020908152604080862083905560088252808620548387526003860190925290942093909355506001015550565b602060405190810160405260008152905600a165627a7a7230582078d97f734cd83b1a0f1df28aded3a831fb8aefe1f6283c53636fee785c68fb920029"
}