{
  "address": "0x59d8c5a3e2d25a550e294d82dfb2a3128d324bbc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Brickblock: Old Token",
  "contractName": "BrickblockToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-08\n*/\n\npragma solidity 0.4.18;\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/PausableToken.sol\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n// File: contracts/BrickblockToken.sol\n\ncontract BrickblockToken is PausableToken {\n\n  string public constant name = \"BrickblockToken\";\n  string public constant symbol = \"BBK\";\n  uint256 public constant initialSupply = 500 * (10 ** 6) * (10 ** uint256(decimals));\n  uint8 public constant contributorsShare = 51;\n  uint8 public constant companyShare = 35;\n  uint8 public constant bonusShare = 14;\n  uint8 public constant decimals = 18;\n  address public bonusDistributionAddress;\n  address public fountainContractAddress;\n  address public successorAddress;\n  address public predecessorAddress;\n  bool public tokenSaleActive;\n  bool public dead;\n\n  event TokenSaleFinished(uint256 totalSupply, uint256 distributedTokens,  uint256 bonusTokens, uint256 companyTokens);\n  event Burn(address indexed burner, uint256 value);\n  event Upgrade(address successorAddress);\n  event Evacuated(address user);\n  event Rescued(address user, uint256 rescuedBalance, uint256 newBalance);\n\n  modifier only(address caller) {\n    require(msg.sender == caller);\n    _;\n  }\n\n  // need to make sure that no more than 51% of total supply is bought\n  modifier supplyAvailable(uint256 _value) {\n    uint256 _distributedTokens = initialSupply.sub(balances[this]);\n    uint256 _maxDistributedAmount = initialSupply.mul(contributorsShare).div(100);\n    require(_distributedTokens.add(_value) <= _maxDistributedAmount);\n    _;\n  }\n\n  function BrickblockToken(address _predecessorAddress)\n    public\n  {\n    // need to start paused to make sure that there can be no transfers until dictated by company\n    paused = true;\n\n    // if contract is an upgrade\n    if (_predecessorAddress != address(0)) {\n      // take the initialization variables from predecessor state\n      predecessorAddress = _predecessorAddress;\n      BrickblockToken predecessor = BrickblockToken(_predecessorAddress);\n      balances[this] = predecessor.balanceOf(_predecessorAddress);\n      Transfer(address(0), this, predecessor.balanceOf(_predecessorAddress));\n      // the total supply starts with the balance of the contract itself and rescued funds will be added to this\n      totalSupply = predecessor.balanceOf(_predecessorAddress);\n      tokenSaleActive = predecessor.tokenSaleActive();\n      bonusDistributionAddress = predecessor.bonusDistributionAddress();\n      fountainContractAddress = predecessor.fountainContractAddress();\n      // if contract is NOT an upgrade\n    } else {\n      // first contract, easy setup\n      totalSupply = initialSupply;\n      balances[this] = initialSupply;\n      Transfer(address(0), this, initialSupply);\n      tokenSaleActive = true;\n    }\n  }\n\n  function unpause()\n    public\n    onlyOwner\n    whenPaused\n  {\n    require(dead == false);\n    super.unpause();\n  }\n\n  function isContract(address addr)\n    private\n    view\n    returns (bool)\n  {\n    uint _size;\n    assembly { _size := extcodesize(addr) }\n    return _size > 0;\n  }\n\n  // decide which wallet to use to distribute bonuses at a later date\n  function changeBonusDistributionAddress(address _newAddress)\n    public\n    onlyOwner\n    returns (bool)\n  {\n    require(_newAddress != address(this));\n    bonusDistributionAddress = _newAddress;\n    return true;\n  }\n\n  // fountain contract might change over time... need to be able to change it\n  function changeFountainContractAddress(address _newAddress)\n    public\n    onlyOwner\n    returns (bool)\n  {\n    require(isContract(_newAddress));\n    require(_newAddress != address(this));\n    require(_newAddress != owner);\n    fountainContractAddress = _newAddress;\n    return true;\n  }\n\n  // custom transfer function that can be used while paused. Cannot be used after end of token sale\n  function distributeTokens(address _contributor, uint256 _value)\n    public\n    onlyOwner\n    supplyAvailable(_value)\n    returns (bool)\n  {\n    require(tokenSaleActive == true);\n    require(_contributor != address(0));\n    require(_contributor != owner);\n    balances[this] = balances[this].sub(_value);\n    balances[_contributor] = balances[_contributor].add(_value);\n    Transfer(this, _contributor, _value);\n    return true;\n  }\n\n  // Calculate the shares for company, bonus & contibutors based on the intiial 50mm number - not what is left over after burning\n  function finalizeTokenSale()\n    public\n    onlyOwner\n    returns (bool)\n  {\n    // ensure that sale is active. is set to false at the end. can only be performed once.\n    require(tokenSaleActive == true);\n    // ensure that bonus address has been set\n    require(bonusDistributionAddress != address(0));\n    // ensure that fountainContractAddress has been set\n    require(fountainContractAddress != address(0));\n    uint256 _distributedTokens = initialSupply.sub(balances[this]);\n    // company amount for company (35%)\n    uint256 _companyTokens = initialSupply.mul(companyShare).div(100);\n    // token amount for internal bonuses based on totalSupply (14%)\n    uint256 _bonusTokens = initialSupply.mul(bonusShare).div(100);\n    // need to do this in order to have accurate totalSupply due to integer division\n    uint256 _newTotalSupply = _distributedTokens.add(_bonusTokens.add(_companyTokens));\n    // unpurchased amount of tokens which will be burned\n    uint256 _burnAmount = totalSupply.sub(_newTotalSupply);\n    // distribute bonusTokens to distribution address\n    balances[this] = balances[this].sub(_bonusTokens);\n    balances[bonusDistributionAddress] = balances[bonusDistributionAddress].add(_bonusTokens);\n    Transfer(this, bonusDistributionAddress, _bonusTokens);\n    // leave remaining balance for company to be claimed at later date\n    balances[this] = balances[this].sub(_burnAmount);\n    Burn(this, _burnAmount);\n    // set the company tokens to be allowed by fountain addresse\n    allowed[this][fountainContractAddress] = _companyTokens;\n    Approval(this, fountainContractAddress, _companyTokens);\n    // set new totalSupply\n    totalSupply = _newTotalSupply;\n    // lock out this function from running ever again\n    tokenSaleActive = false;\n    // event showing sale is finished\n    TokenSaleFinished(\n      totalSupply,\n      _distributedTokens,\n      _bonusTokens,\n      _companyTokens\n    );\n    // everything went well return true\n    return true;\n  }\n\n  // this method will be called by the successor, it can be used to query the token balance,\n  // but the main goal is to remove the data in the now dead contract,\n  // to disable anyone to get rescued more that once\n  // approvals are not included due to data structure\n  function evacuate(address _user)\n    public\n    only(successorAddress)\n    returns (bool)\n  {\n    require(dead);\n    uint256 _balance = balances[_user];\n    balances[_user] = 0;\n    totalSupply = totalSupply.sub(_balance);\n    Evacuated(_user);\n    return true;\n  }\n\n  // to upgrade our contract\n  // we set the successor, who is allowed to empty out the data\n  // it then will be dead\n  // it will be paused to dissallow transfer of tokens\n  function upgrade(address _successorAddress)\n    public\n    onlyOwner\n    returns (bool)\n  {\n    require(_successorAddress != address(0));\n    require(isContract(_successorAddress));\n    successorAddress = _successorAddress;\n    dead = true;\n    paused = true;\n    Upgrade(successorAddress);\n    return true;\n  }\n\n  // each user should call rescue once after an upgrade to evacuate his balance from the predecessor\n  // the allowed mapping will be lost\n  // if this is called multiple times it won't throw, but the balance will not change\n  // this enables us to call it befor each method changeing the balances\n  // (this might be a bad idea due to gas-cost and overhead)\n  function rescue()\n    public\n    returns (bool)\n  {\n    require(predecessorAddress != address(0));\n    address _user = msg.sender;\n    BrickblockToken predecessor = BrickblockToken(predecessorAddress);\n    uint256 _oldBalance = predecessor.balanceOf(_user);\n    if (_oldBalance > 0) {\n      balances[_user] = balances[_user].add(_oldBalance);\n      totalSupply = totalSupply.add(_oldBalance);\n      predecessor.evacuate(_user);\n      Rescued(_user, _oldBalance, balances[_user]);\n      return true;\n    }\n    return false;\n  }\n\n  // fallback function - do not allow any eth transfers to this contract\n  function()\n    public\n  {\n    revert();\n  }\n\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000000"
}