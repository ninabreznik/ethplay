{
  "address": "0xeccf2a50fca80391b0380188255866f0fc7fe852",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthUp",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-20\n*/\n\npragma solidity 0.4.25;\n\n\n/**\n*\n* ETH INVESTMENT SMART PLATFORM - ETHUP\n* Web              - https://ethup.io\n* GitHub           - https://github.com/ethup/ethup\n* Twitter          - https://twitter.com/ethup1\n* Youtube          - https://www.youtube.com/channel/UC4JMZcpySACj4lGbXLJm9KQ\n* Telegram_channel - https://t.me/Ethereum333\n* EN  Telegram_chat: https://t.me/Ethup_en\n* RU  Telegram_chat: https://t.me/Ethup_ru\n* KOR Telegram_chat: https://t.me/Ethup_kor\n* CN  Telegram_chat: https://t.me/Ethup_cn\n* Email:             mailto:info(at sign)ethup.io\n* \n* \n*  - GAIN 1% - 4% PER 24 HOURS\n*  - Life-long payments\n*  - The revolutionary reliability\n*  - Minimal contribution 0.01 eth\n*  - Currency and payment - ETH\n*  - Contribution allocation schemes:\n*    -- 85,0% payments\n*    --   10% marketing\n*    --    5% technical support\n*\n*   ---About the Project\n*  Blockchain-enabled smart contracts have opened a new era of trustless relationships without \n*  intermediaries. This technology opens incredible financial possibilities. Our automated investment \n*  smart platform is written into a smart contract, uploaded to the Ethereum blockchain and can be \n*  freely accessed online. In order to insure our investors' complete security, full control over the \n*  project has been transferred from the organizers to the smart contract: nobody can influence the \n*  system's permanent autonomous functioning.\n* \n* ---How to use:\n*  1. Select a level and send from ETH wallet to the smart contract address 0xeccf2a50fca80391b0380188255866f0fc7fe852\n*     any amount from 0.01 to 50 ETH.\n*\n*       Level 1: from 0.01 to 0.1 ETH - 1%\n*       Level 2: from 0.1 to 1 ETH - 1.5%\n*       Level 3: from 1 to 5 ETH - 2.0%\n*       Level 4: from 5 to 10 ETH - 2.5%\n*       Level 5: from 10 to 20 ETH - 3%.\n*       Level 6: from 20 to 30 ETH - 3.5%\n*       Level 7: from 30 to 50 ETH - 4%\n*\n*  2. Verify your transaction in the history of your application (wallet) or etherscan.io, specifying the address \n*     of your wallet.\n*  3a. Claim your profit by sending 0 ether transaction (every day, every week, i don't care unless you're \n*      spending too much on GAS) to the smart contract address 0xeccf2a50fca80391b0380188255866f0fc7fe852.\n*  OR\n*  3b. For add investment, you need to deposit the amount that you want to add and the \n*      accrued interest automatically summed to your new contribution.\n*  \n* RECOMMENDED GAS LIMIT: 200000\n* RECOMMENDED GAS PRICE: https://ethgasstation.info/\n* You can check the payments on the etherscan.io site, in the \"Internal Txns\" tab of your wallet.\n*\n* Every 24 hours from the moment of the deposit or from the last successful write-off of the accrued interest, \n* the smart contract will transfer your dividends to your account that corresponds to the number of your wallet. \n* Dividends are accrued until 150% of the investment is paid.\n* After receiving 150% of all invested funds (or 50% of profits), your wallet will disconnected from payments. \n* You can make reinvestment by receiving an additional + 10% for the deposit amount and continue the participation. \n* The bonus will received only by the participant who has already received 150% of the profits and invests again.\n*\n* The amount of daily charges depends on the sum of all the participant's contributions to the smart contract.\n*\n* In case you make a contribution without first removing the accrued interest,\n* it is added to your new contribution and credited to your account in smart contract\n*\n* ---Additional tools embedded in the smart contract:\n*     - Referral program 5%. The same bonus gets referral and referrer.\n*     - Reinvestment. After full payment of your first investment, you can receive a 10% bonus for reinvesting funds. \n*       You can reinvest any amount.\n*     - BOOST mode. Get the percentage of your funds remaining in the system. \n*\n* ---It is not allowed to transfer from exchanges, only from your personal ETH wallet, for which you \n* have private keys.\n* \n* Contracts reviewed and approved by pros!\n* \n* Main contract - EthUp. Scroll down to find it.\n*/ \n\n\nlibrary Zero {\n    function requireNotZero(address addr) internal pure {\n        require(addr != address(0), \"require not zero address\");\n    }\n\n    function requireNotZero(uint val) internal pure {\n        require(val != 0, \"require not zero value\");\n    }\n\n    function notZero(address addr) internal pure returns(bool) {\n        return !(addr == address(0));\n    }\n\n    function isZero(address addr) internal pure returns(bool) {\n        return addr == address(0);\n    }\n\n    function isZero(uint a) internal pure returns(bool) {\n        return a == 0;\n    }\n\n    function notZero(uint a) internal pure returns(bool) {\n        return a != 0;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\nlibrary Percent {\n    using SafeMath for uint;\n\n    // Solidity automatically throws when dividing by 0\n    struct percent {\n        uint num;\n        uint den;\n    }\n\n    function mul(percent storage p, uint a) internal view returns (uint) {\n        if (a == 0) {\n            return 0;\n        }\n        return a.mul(p.num).div(p.den);\n    }\n\n    function div(percent storage p, uint a) internal view returns (uint) {\n        return a.div(p.num).mul(p.den);\n    }\n\n    function sub(percent storage p, uint a) internal view returns (uint) {\n        uint b = mul(p, a);\n        if (b >= a) {\n            return 0; // solium-disable-line lbrace\n        }\n        return a.sub(b);\n    }\n\n    function add(percent storage p, uint a) internal view returns (uint) {\n        return a.add(mul(p, a));\n    }\n\n    function toMemory(percent storage p) internal view returns (Percent.percent memory) {\n        return Percent.percent(p.num, p.den);\n    }\n\n    // memory\n    function mmul(percent memory p, uint a) internal pure returns (uint) {\n        if (a == 0) {\n            return 0;\n        }\n        return a.mul(p.num).div(p.den);\n    }\n\n    function mdiv(percent memory p, uint a) internal pure returns (uint) {\n        return a.div(p.num).mul(p.den);\n    }\n\n    function msub(percent memory p, uint a) internal pure returns (uint) {\n        uint b = mmul(p, a);\n        if (b >= a) {\n            return 0;\n        }\n        return a.sub(b);\n    }\n\n    function madd(percent memory p, uint a) internal pure returns (uint) {\n        return a.add(mmul(p, a));\n    }\n}\n\nlibrary ToAddress {\n\n    function toAddress(bytes source) internal pure returns(address addr) {\n        assembly { addr := mload(add(source, 0x14)) }\n        return addr;\n    }\n\n    function isNotContract(address addr) internal view returns(bool) {\n        uint length;\n        assembly { length := extcodesize(addr) }\n        return length == 0;\n    }\n}\n\ncontract Accessibility {\n\n    address private owner;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"access denied\");\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function disown() internal {\n        delete owner;\n    }\n}\n\ncontract InvestorsStorage is Accessibility {\n    using SafeMath for uint;\n\n    struct Dividends {\n        uint value;     //paid\n        uint limit;\n        uint deferred;  //not paid yet\n    }\n\n    struct Investor {\n        uint investment;\n        uint paymentTime;\n        Dividends dividends;\n    }\n\n    uint public size;\n\n    mapping (address => Investor) private investors;\n\n    function isInvestor(address addr) public view returns (bool) {\n        return investors[addr].investment > 0;\n    }\n\n    function investorInfo(\n        address addr\n    )\n        public\n        view\n        returns (\n            uint investment,\n            uint paymentTime,\n            uint value,\n            uint limit,\n            uint deferred\n        )\n    {\n        investment = investors[addr].investment;\n        paymentTime = investors[addr].paymentTime;\n        value = investors[addr].dividends.value;\n        limit = investors[addr].dividends.limit;\n        deferred = investors[addr].dividends.deferred;\n    }\n\n    function newInvestor(\n        address addr,\n        uint investment,\n        uint paymentTime,\n        uint dividendsLimit\n    )\n        public\n        onlyOwner\n        returns (\n            bool\n        )\n    {\n        Investor storage inv = investors[addr];\n        if (inv.investment != 0 || investment == 0) {\n            return false;\n        }\n        inv.investment = investment;\n        inv.paymentTime = paymentTime;\n        inv.dividends.limit = dividendsLimit;\n        size++;\n        return true;\n    }\n\n    function addInvestment(address addr, uint investment) public onlyOwner returns (bool) {\n        if (investors[addr].investment == 0) {\n            return false;\n        }\n        investors[addr].investment = investors[addr].investment.add(investment);\n        return true;\n    }\n\n    function setPaymentTime(address addr, uint paymentTime) public onlyOwner returns (bool) {\n        if (investors[addr].investment == 0) {\n            return false;\n        }\n        investors[addr].paymentTime = paymentTime;\n        return true;\n    }\n\n    function addDeferredDividends(address addr, uint dividends) public onlyOwner returns (bool) {\n        if (investors[addr].investment == 0) {\n            return false;\n        }\n        investors[addr].dividends.deferred = investors[addr].dividends.deferred.add(dividends);\n        return true;\n    }\n\n    function addDividends(address addr, uint dividends) public onlyOwner returns (bool) {\n        if (investors[addr].investment == 0) {\n            return false;\n        }\n        if (investors[addr].dividends.value + dividends > investors[addr].dividends.limit) {\n            investors[addr].dividends.value = investors[addr].dividends.limit;\n        } else {\n            investors[addr].dividends.value = investors[addr].dividends.value.add(dividends);\n        }\n        return true;\n    }\n\n    function setNewInvestment(address addr, uint investment, uint limit) public onlyOwner returns (bool) {\n        if (investors[addr].investment == 0) {\n            return false;\n        }\n        investors[addr].investment = investment;\n        investors[addr].dividends.limit = limit;\n        // reset payment dividends\n        investors[addr].dividends.value = 0;\n        investors[addr].dividends.deferred = 0;\n\n        return true;\n    }\n\n    function addDividendsLimit(address addr, uint limit) public onlyOwner returns (bool) {\n        if (investors[addr].investment == 0) {\n            return false;\n        }\n        investors[addr].dividends.limit = investors[addr].dividends.limit.add(limit);\n\n        return true;\n    }\n}\n\ncontract EthUp is Accessibility {\n    using Percent for Percent.percent;\n    using SafeMath for uint;\n    using Zero for *;\n    using ToAddress for *;\n\n    // investors storage - iterable map;\n    InvestorsStorage private m_investors;\n    mapping(address => bool) private m_referrals;\n\n    // automatically generates getters\n    address public advertisingAddress;\n    address public adminsAddress;\n    uint public investmentsNumber;\n    uint public constant MIN_INVESTMENT = 10 finney; // 0.01 eth\n    uint public constant MAX_INVESTMENT = 50 ether;\n    uint public constant MAX_BALANCE = 1e5 ether; // 100 000 eth\n\n    // percents\n    Percent.percent private m_1_percent = Percent.percent(1, 100);          //  1/100   *100% = 1%\n    Percent.percent private m_1_5_percent = Percent.percent(15, 1000);      //  15/1000 *100% = 1.5%\n    Percent.percent private m_2_percent = Percent.percent(2, 100);          //  2/100   *100% = 2%\n    Percent.percent private m_2_5_percent = Percent.percent(25, 1000);      //  25/1000 *100% = 2.5%\n    Percent.percent private m_3_percent = Percent.percent(3, 100);          //  3/100   *100% = 3%\n    Percent.percent private m_3_5_percent = Percent.percent(35, 1000);      //  35/1000 *100% = 3.5%\n    Percent.percent private m_4_percent = Percent.percent(4, 100);          //  4/100   *100% = 4%\n\n    Percent.percent private m_refPercent = Percent.percent(5, 100);         //  5/100   *100% = 5%\n    Percent.percent private m_adminsPercent = Percent.percent(5, 100);      //  5/100   *100% = 5%\n    Percent.percent private m_advertisingPercent = Percent.percent(1, 10);  //  1/10    *100% = 10%\n\n    Percent.percent private m_maxDepositPercent = Percent.percent(15, 10);  //  15/10   *100% = 150%\n    Percent.percent private m_reinvestPercent = Percent.percent(1, 10);     //  10/100  *100% = 10%\n\n    // more events for easy read from blockchain\n    event LogSendExcessOfEther(address indexed addr, uint when, uint value, uint investment, uint excess);\n    event LogNewInvestor(address indexed addr, uint when);\n    event LogNewInvestment(address indexed addr, uint when, uint investment, uint value);\n    event LogNewReferral(address indexed addr, address indexed referrerAddr, uint when, uint refBonus);\n    event LogReinvest(address indexed addr, uint when, uint investment);\n    event LogPayDividends(address indexed addr, uint when, uint value);\n    event LogPayReferrerBonus(address indexed addr, uint when, uint value);\n    event LogBalanceChanged(uint when, uint balance);\n    event LogDisown(uint when);\n\n    modifier balanceChanged() {\n        _;\n        emit LogBalanceChanged(now, address(this).balance);\n    }\n\n    modifier notFromContract() {\n        require(msg.sender.isNotContract(), \"only externally accounts\");\n        _;\n    }\n\n    constructor() public {\n        adminsAddress = msg.sender;\n        advertisingAddress = msg.sender;\n\n        m_investors = new InvestorsStorage();\n        investmentsNumber = 0;\n    }\n\n    function() public payable {\n        // investor get him dividends\n        if (msg.value.isZero()) {\n            getMyDividends();\n            return;\n        }\n\n        // sender do invest\n        doInvest(msg.data.toAddress());\n    }\n\n    function doDisown() public onlyOwner {\n        disown();\n        emit LogDisown(now);\n    }\n\n    function investorsNumber() public view returns(uint) {\n        return m_investors.size();\n    }\n\n    function balanceETH() public view returns(uint) {\n        return address(this).balance;\n    }\n\n    function percent1() public view returns(uint numerator, uint denominator) {\n        (numerator, denominator) = (m_1_percent.num, m_1_percent.den);\n    }\n\n    function percent1_5() public view returns(uint numerator, uint denominator) {\n        (numerator, denominator) = (m_1_5_percent.num, m_1_5_percent.den);\n    }\n\n    function percent2() public view returns(uint numerator, uint denominator) {\n        (numerator, denominator) = (m_2_percent.num, m_2_percent.den);\n    }\n\n    function percent2_5() public view returns(uint numerator, uint denominator) {\n        (numerator, denominator) = (m_2_5_percent.num, m_2_5_percent.den);\n    }\n\n    function percent3() public view returns(uint numerator, uint denominator) {\n        (numerator, denominator) = (m_3_percent.num, m_3_percent.den);\n    }\n\n    function percent3_5() public view returns(uint numerator, uint denominator) {\n        (numerator, denominator) = (m_3_5_percent.num, m_3_5_percent.den);\n    }\n\n    function percent4() public view returns(uint numerator, uint denominator) {\n        (numerator, denominator) = (m_4_percent.num, m_4_percent.den);\n    }\n\n    function advertisingPercent() public view returns(uint numerator, uint denominator) {\n        (numerator, denominator) = (m_advertisingPercent.num, m_advertisingPercent.den);\n    }\n\n    function adminsPercent() public view returns(uint numerator, uint denominator) {\n        (numerator, denominator) = (m_adminsPercent.num, m_adminsPercent.den);\n    }\n\n    function maxDepositPercent() public view returns(uint numerator, uint denominator) {\n        (numerator, denominator) = (m_maxDepositPercent.num, m_maxDepositPercent.den);\n    }\n\n    function investorInfo(\n        address investorAddr\n    )\n        public\n        view\n        returns (\n            uint investment,\n            uint paymentTime,\n            uint dividends,\n            uint dividendsLimit,\n            uint dividendsDeferred,\n            bool isReferral\n        )\n    {\n        (\n            investment,\n            paymentTime,\n            dividends,\n            dividendsLimit,\n            dividendsDeferred\n        ) = m_investors.investorInfo(investorAddr);\n\n        isReferral = m_referrals[investorAddr];\n    }\n\n    function getInvestorDividendsAtNow(\n        address investorAddr\n    )\n        public\n        view\n        returns (\n            uint dividends\n        )\n    {\n        dividends = calcDividends(investorAddr);\n    }\n\n    function getDailyPercentAtNow(\n        address investorAddr\n    )\n        public\n        view\n        returns (\n            uint numerator,\n            uint denominator\n        )\n    {\n        InvestorsStorage.Investor memory investor = getMemInvestor(investorAddr);\n\n        Percent.percent memory p = getDailyPercent(investor.investment);\n        (numerator, denominator) = (p.num, p.den);\n    }\n\n    function getRefBonusPercentAtNow() public view returns(uint numerator, uint denominator) {\n        Percent.percent memory p = getRefBonusPercent();\n        (numerator, denominator) = (p.num, p.den);\n    }\n\n    function getMyDividends() public notFromContract balanceChanged {\n        // calculate dividends\n        uint dividends = calcDividends(msg.sender);\n        require(dividends.notZero(), \"cannot to pay zero dividends\");\n\n        // update investor payment timestamp\n        assert(m_investors.setPaymentTime(msg.sender, now));\n\n        // check enough eth\n        if (address(this).balance < dividends) {\n            dividends = address(this).balance;\n        }\n\n        // update payouts dividends\n        assert(m_investors.addDividends(msg.sender, dividends));\n\n        // transfer dividends to investor\n        msg.sender.transfer(dividends);\n        emit LogPayDividends(msg.sender, now, dividends);\n    }\n\n    function doInvest(address referrerAddr) public payable notFromContract balanceChanged {\n        uint investment = msg.value;\n        uint receivedEther = msg.value;\n\n        require(investment >= MIN_INVESTMENT, \"investment must be >= MIN_INVESTMENT\");\n        require(address(this).balance + investment <= MAX_BALANCE, \"the contract eth balance limit\");\n\n        // send excess of ether if needed\n        if (receivedEther > MAX_INVESTMENT) {\n            uint excess = receivedEther - MAX_INVESTMENT;\n            investment = MAX_INVESTMENT;\n            msg.sender.transfer(excess);\n            emit LogSendExcessOfEther(msg.sender, now, receivedEther, investment, excess);\n        }\n\n        // commission\n        uint advertisingCommission = m_advertisingPercent.mul(investment);\n        uint adminsCommission = m_adminsPercent.mul(investment);\n\n        bool senderIsInvestor = m_investors.isInvestor(msg.sender);\n\n        // ref system works only once and only on first invest\n        if (referrerAddr.notZero() &&\n            !senderIsInvestor &&\n            !m_referrals[msg.sender] &&\n            referrerAddr != msg.sender &&\n            m_investors.isInvestor(referrerAddr)) {\n\n            // add referral bonus to investor`s and referral`s investments\n            uint refBonus = getRefBonusPercent().mmul(investment);\n            assert(m_investors.addInvestment(referrerAddr, refBonus)); // add referrer bonus\n            investment = investment.add(refBonus);                     // add referral bonus\n            m_referrals[msg.sender] = true;\n            emit LogNewReferral(msg.sender, referrerAddr, now, refBonus);\n        }\n\n        // Dividends cannot be greater then 150% from investor investment\n        uint maxDividends = getMaxDepositPercent().mmul(investment);\n\n        if (senderIsInvestor) {\n            // check for reinvest\n            InvestorsStorage.Investor memory investor = getMemInvestor(msg.sender);\n            if (investor.dividends.value == investor.dividends.limit) {\n                uint reinvestBonus = getReinvestBonusPercent().mmul(investment);\n                investment = investment.add(reinvestBonus);\n                maxDividends = getMaxDepositPercent().mmul(investment);\n                // reinvest\n                assert(m_investors.setNewInvestment(msg.sender, investment, maxDividends));\n                emit LogReinvest(msg.sender, now, investment);\n            } else {\n                // prevent burning dividends\n                uint dividends = calcDividends(msg.sender);\n                if (dividends.notZero()) {\n                    assert(m_investors.addDeferredDividends(msg.sender, dividends));\n                }\n                // update existing investor investment\n                assert(m_investors.addInvestment(msg.sender, investment));\n                assert(m_investors.addDividendsLimit(msg.sender, maxDividends));\n            }\n            assert(m_investors.setPaymentTime(msg.sender, now));\n        } else {\n            // create new investor\n            assert(m_investors.newInvestor(msg.sender, investment, now, maxDividends));\n            emit LogNewInvestor(msg.sender, now);\n        }\n\n        investmentsNumber++;\n        advertisingAddress.transfer(advertisingCommission);\n        adminsAddress.transfer(adminsCommission);\n        emit LogNewInvestment(msg.sender, now, investment, receivedEther);\n    }\n\n    function setAdvertisingAddress(address addr) public onlyOwner {\n        addr.requireNotZero();\n        advertisingAddress = addr;\n    }\n\n    function setAdminsAddress(address addr) public onlyOwner {\n        addr.requireNotZero();\n        adminsAddress = addr;\n    }\n\n    function getMemInvestor(\n        address investorAddr\n    )\n        internal\n        view\n        returns (\n            InvestorsStorage.Investor memory\n        )\n    {\n        (\n            uint investment,\n            uint paymentTime,\n            uint dividends,\n            uint dividendsLimit,\n            uint dividendsDeferred\n        ) = m_investors.investorInfo(investorAddr);\n\n        return InvestorsStorage.Investor(\n            investment,\n            paymentTime,\n            InvestorsStorage.Dividends(\n                dividends,\n                dividendsLimit,\n                dividendsDeferred)\n        );\n    }\n\n    function calcDividends(address investorAddr) internal view returns(uint dividends) {\n        InvestorsStorage.Investor memory investor = getMemInvestor(investorAddr);\n        uint interval = 1 days;\n        uint pastTime = now.sub(investor.paymentTime);\n\n        // safe gas if dividends will be 0\n        if (investor.investment.isZero() || pastTime < interval) {\n            return 0;\n        }\n\n        // paid dividends cannot be greater then 150% from investor investment\n        if (investor.dividends.value >= investor.dividends.limit) {\n            return 0;\n        }\n\n        Percent.percent memory p = getDailyPercent(investor.investment);\n        Percent.percent memory c = Percent.percent(p.num + p.den, p.den);\n\n        uint intervals = pastTime.div(interval);\n        uint totalDividends = investor.dividends.limit.add(investor.investment).sub(investor.dividends.value).sub(investor.dividends.deferred);\n\n        dividends = investor.investment;\n        for (uint i = 0; i < intervals; i++) {\n            dividends = c.mmul(dividends);\n            if (dividends > totalDividends) {\n                dividends = totalDividends.add(investor.dividends.deferred);\n                break;\n            }\n        }\n\n        dividends = dividends.sub(investor.investment);\n\n        //uint totalDividends = dividends + investor.dividends;\n        //if (totalDividends >= investor.dividendsLimit) {\n        //    dividends = investor.dividendsLimit - investor.dividends;\n        //}\n    }\n\n    function getMaxDepositPercent() internal view returns(Percent.percent memory p) {\n        p = m_maxDepositPercent.toMemory();\n    }\n\n    function getDailyPercent(uint value) internal view returns(Percent.percent memory p) {\n        // (1) 1% if 0.01 ETH <= value < 0.1 ETH\n        // (2) 1.5% if 0.1 ETH <= value < 1 ETH\n        // (3) 2% if 1 ETH <= value < 5 ETH\n        // (4) 2.5% if 5 ETH <= value < 10 ETH\n        // (5) 3% if 10 ETH <= value < 20 ETH\n        // (6) 3.5% if 20 ETH <= value < 30 ETH\n        // (7) 4% if 30 ETH <= value <= 50 ETH\n\n        if (MIN_INVESTMENT <= value && value < 100 finney) {\n            p = m_1_percent.toMemory();                     // (1)\n        } else if (100 finney <= value && value < 1 ether) {\n            p = m_1_5_percent.toMemory();                   // (2)\n        } else if (1 ether <= value && value < 5 ether) {\n            p = m_2_percent.toMemory();                     // (3)\n        } else if (5 ether <= value && value < 10 ether) {\n            p = m_2_5_percent.toMemory();                   // (4)\n        } else if (10 ether <= value && value < 20 ether) {\n            p = m_3_percent.toMemory();                     // (5)\n        } else if (20 ether <= value && value < 30 ether) {\n            p = m_3_5_percent.toMemory();                   // (6)\n        } else if (30 ether <= value && value <= MAX_INVESTMENT) {\n            p = m_4_percent.toMemory();                     // (7)\n        }\n    }\n\n    function getRefBonusPercent() internal view returns(Percent.percent memory p) {\n        p = m_refPercent.toMemory();\n    }\n\n    function getReinvestBonusPercent() internal view returns(Percent.percent memory p) {\n        p = m_reinvestPercent.toMemory();\n    }\n}",
  "bytecode": "60016080819052606460a081905260068290556007819055600f60c08190526103e860e0819052600882905560098190556002610100819052610120849052600a908155600b8490556019610140819052610160839052600c819055600d83905560036101808190526101a0869052600e5584845560236101c08190526101e0849052601055601192909255600461020081905261022085905260125560138490556005610240819052610260859052601481905560158590556102808190526102a08590526016556017939093556102c08490526102e08390526018849055829055610300819052610320829052601a55601b819055610380604052610340829052610360819052601c91909155601d5534801561011d57600080fd5b506000805433600160a060020a0319918216811790925560048054821683179055600380549091169091179055610152610199565b604051809103906000f08015801561016e573d6000803e3d6000fd5b5060018054600160a060020a031916600160a060020a039290921691909117905560006005556101a9565b6040516108a280611f0083390190565b611d48806101b86000396000f30060806040526004361061015e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663074a160081146101bd5780631686531a146101eb5780633ae3da1a1461021c5780633c8ef9381461023d5780634c76361e146102525780634ef8ff331461027957806362d2c5551461028e578063653c3174146102a357806368f6e75f146102b857806379f54bb9146102cd57806385a5a945146102e25780638a43e525146102f75780639396df321461031857806395a23c3a1461032d578063984d4a93146103425780639a54328b146103635780639ec6e05414610378578063bab2b5e91461038d578063cb192f2c146103a2578063d50030ad146103c3578063d82fa3f1146103d8578063dbcbaca4146103ec578063def92c6914610442578063ec8e767d14610457578063ecbdbb321461046c578063edce50b714610481578063fc7c41af14610496575b610167346104ab565b15610179576101746104b3565b6101bb565b6101bb6101b66000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610772945050505050565b610779565b005b3480156101c957600080fd5b506101d2611288565b6040805192835260208301919091528051918290030190f35b3480156101f757600080fd5b50610200611292565b60408051600160a060020a039092168252519081900360200190f35b34801561022857600080fd5b506101d2600160a060020a03600435166112a1565b34801561024957600080fd5b506101d26112e0565b34801561025e57600080fd5b506102676112ea565b60408051918252519081900360200190f35b34801561028557600080fd5b506102676112f7565b34801561029a57600080fd5b50610200611302565b3480156102af57600080fd5b50610267611311565b3480156102c457600080fd5b506101d26113a1565b3480156102d957600080fd5b506101d26113ab565b3480156102ee57600080fd5b506101d26113b5565b34801561030357600080fd5b50610267600160a060020a03600435166113da565b34801561032457600080fd5b506101d26113eb565b34801561033957600080fd5b506101d26113f5565b34801561034e57600080fd5b506101bb600160a060020a03600435166113ff565b34801561036f57600080fd5b506101d26114a2565b34801561038457600080fd5b506102676114ac565b34801561039957600080fd5b506101d26114b2565b3480156103ae57600080fd5b506101bb600160a060020a03600435166114bc565b3480156103cf57600080fd5b506101bb6104b3565b6101bb600160a060020a0360043516610779565b3480156103f857600080fd5b5061040d600160a060020a036004351661155f565b6040805196875260208701959095528585019390935260608501919091526080840152151560a0830152519081900360c00190f35b34801561044e57600080fd5b50610267611642565b34801561046357600080fd5b506101d2611650565b34801561047857600080fd5b5061026761165a565b34801561048d57600080fd5b506101d261165f565b3480156104a257600080fd5b506101bb611669565b80155b919050565b60006104be33611708565b1515610514576040805160e560020a62461bcd02815260206004820152601860248201527f6f6e6c792065787465726e616c6c79206163636f756e74730000000000000000604482015290519081900360640190fd5b61051d3361170d565b905061052881611885565b151561057e576040805160e560020a62461bcd02815260206004820152601c60248201527f63616e6e6f7420746f20706179207a65726f206469766964656e647300000000604482015290519081900360640190fd5b600154604080517f440135850000000000000000000000000000000000000000000000000000000081523360048201524260248201529051600160a060020a03909216916344013585916044808201926020929091908290030181600087803b1580156105ea57600080fd5b505af11580156105fe573d6000803e3d6000fd5b505050506040513d602081101561061457600080fd5b5051151561061e57fe5b303181111561062b575030315b600154604080517f4cfcf60a000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051600160a060020a0390921691634cfcf60a916044808201926020929091908290030181600087803b15801561069857600080fd5b505af11580156106ac573d6000803e3d6000fd5b505050506040513d60208110156106c257600080fd5b505115156106cc57fe5b604051339082156108fc029083906000818181858888f193505050501580156106f9573d6000803e3d6000fd5b506040805142815260208101839052815133927f6710e0cad56444677ac916513b384a4acc6501cfb5219f59657ad4ddffef9d60928290030190a2604080514281523031602082015281517f32367fddaa1baa1c6a0fc5c3e8284df724bacc7b50e847c32c9f9765f9f96137929181900390910190a150565b6014015190565b60008060008060008060008061078d611cbc565b60008061079933611708565b15156107ef576040805160e560020a62461bcd02815260206004820152601860248201527f6f6e6c792065787465726e616c6c79206163636f756e74730000000000000000604482015290519081900360640190fd5b349a508a9950662386f26fc100008a1015610879576040805160e560020a62461bcd028152602060048201526024808201527f696e766573746d656e74206d757374206265203e3d204d494e5f494e5645535460448201527f4d454e5400000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b69152d02c7e14af680000030318c0111156108de576040805160e560020a62461bcd02815260206004820152601e60248201527f74686520636f6e7472616374206574682062616c616e6365206c696d69740000604482015290519081900360640190fd5b6802b5e3af16b18800008a1115610983576040516802b5e3af16b18800009b506802b5e3af16b187ffff198b01995033908a156108fc02908b906000818181858888f19350505050158015610937573d6000803e3d6000fd5b5060408051428152602081018c90528082018d9052606081018b9052905133917faac472d912a7451062b64c942775db41d65cce271603099e1c4760e072050951919081900360800190a25b61099460188c63ffffffff61188a16565b97506109a760168c63ffffffff61188a16565b600154604080517fcee2a9cf0000000000000000000000000000000000000000000000000000000081523360048201529051929950600160a060020a039091169163cee2a9cf916024808201926020929091908290030181600087803b158015610a1057600080fd5b505af1158015610a24573d6000803e3d6000fd5b505050506040513d6020811015610a3a57600080fd5b50519550610a50600160a060020a038d166118cb565b8015610a5a575085155b8015610a7657503360009081526002602052604090205460ff16155b8015610a8b5750600160a060020a038c163314155b8015610b275750600154604080517fcee2a9cf000000000000000000000000000000000000000000000000000000008152600160a060020a038f811660048301529151919092169163cee2a9cf9160248083019260209291908290030181600087803b158015610afa57600080fd5b505af1158015610b0e573d6000803e3d6000fd5b505050506040513d6020811015610b2457600080fd5b50515b15610caf57610b448b610b386118d9565b9063ffffffff6118f016565b9450600160009054906101000a9004600160a060020a0316600160a060020a03166320987e648d876040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610bd757600080fd5b505af1158015610beb573d6000803e3d6000fd5b505050506040513d6020811015610c0157600080fd5b50511515610c0b57fe5b610c1b8b8663ffffffff61191e16565b9a5060016002600033600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508b600160a060020a031633600160a060020a03167fc04fb14bddd876003a335c37b1fe6524ac1dbf74eb64dd08cd085fba4b97d5924288604051808381526020018281526020019250505060405180910390a35b610cbb8b610b3861193b565b9350851561109857610ccc3361194d565b6040810151602081015190519194501415610df757610ced8b610b38611a45565b9150610cff8b8363ffffffff61191e16565b9a50610d0d8b610b3861193b565b600154604080517f33babe9d000000000000000000000000000000000000000000000000000000008152336004820152602481018f9052604481018490529051929650600160a060020a03909116916333babe9d916064808201926020929091908290030181600087803b158015610d8457600080fd5b505af1158015610d98573d6000803e3d6000fd5b505050506040513d6020811015610dae57600080fd5b50511515610db857fe5b60408051428152602081018d9052815133927f4c9002ccff3a40c9b5f96811afabbfaaf9bfaa1e46273a8f2dfbdc078f5167d6928290030190a2610ff3565b610e003361170d565b9050610e0b81611885565b15610eb157600154604080517f2562e077000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051600160a060020a0390921691632562e077916044808201926020929091908290030181600087803b158015610e7d57600080fd5b505af1158015610e91573d6000803e3d6000fd5b505050506040513d6020811015610ea757600080fd5b50511515610eb157fe5b600154604080517f20987e64000000000000000000000000000000000000000000000000000000008152336004820152602481018e90529051600160a060020a03909216916320987e64916044808201926020929091908290030181600087803b158015610f1e57600080fd5b505af1158015610f32573d6000803e3d6000fd5b505050506040513d6020811015610f4857600080fd5b50511515610f5257fe5b600154604080517f78e755cc000000000000000000000000000000000000000000000000000000008152336004820152602481018790529051600160a060020a03909216916378e755cc916044808201926020929091908290030181600087803b158015610fbf57600080fd5b505af1158015610fd3573d6000803e3d6000fd5b505050506040513d6020811015610fe957600080fd5b50511515610ff357fe5b600154604080517f440135850000000000000000000000000000000000000000000000000000000081523360048201524260248201529051600160a060020a03909216916344013585916044808201926020929091908290030181600087803b15801561105f57600080fd5b505af1158015611073573d6000803e3d6000fd5b505050506040513d602081101561108957600080fd5b5051151561109357fe5b61117d565b600154604080517ffe73b6c9000000000000000000000000000000000000000000000000000000008152336004820152602481018e9052426044820152606481018790529051600160a060020a039092169163fe73b6c9916084808201926020929091908290030181600087803b15801561111257600080fd5b505af1158015611126573d6000803e3d6000fd5b505050506040513d602081101561113c57600080fd5b5051151561114657fe5b60408051428152905133917fc8616cf56c542aa2540734215ee474180fc3b9cc7c2fad288000504632cacf18919081900360200190a25b600580546001019055600354604051600160a060020a039091169089156108fc02908a906000818181858888f193505050501580156111c0573d6000803e3d6000fd5b50600454604051600160a060020a039091169088156108fc029089906000818181858888f193505050501580156111fb573d6000803e3d6000fd5b5060408051428152602081018d90528082018c9052905133917f65d599fb7e86d2903416fd1388592cc6807e430c63c46a131464bb89fc0fda29919081900360600190a2604080514281523031602082015281517f32367fddaa1baa1c6a0fc5c3e8284df724bacc7b50e847c32c9f9765f9f96137929181900390910190a1505050505050505050505050565b600a54600b549091565b600354600160a060020a031681565b6000806112ac611cbc565b6112b4611ce3565b6112bd8561194d565b91506112cc8260000151611a57565b805160209091015190969095509350505050565b6010546011549091565b6802b5e3af16b188000081565b662386f26fc1000081565b600454600160a060020a031681565b600154604080517f949d225d0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163949d225d91600480830192602092919082900301818787803b15801561137057600080fd5b505af1158015611384573d6000803e3d6000fd5b505050506040513d602081101561139a57600080fd5b5051905090565b6006546007549091565b6008546009549091565b6000806113c0611ce3565b6113c86118d9565b80516020909101519094909350915050565b60006113e58261170d565b92915050565b6018546019549091565b6016546017549091565b600054600160a060020a03163314611461576040805160e560020a62461bcd02815260206004820152600d60248201527f6163636573732064656e69656400000000000000000000000000000000000000604482015290519081900360640190fd5b61147381600160a060020a0316611bad565b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600c54600d549091565b60055481565b600e54600f549091565b600054600160a060020a0316331461151e576040805160e560020a62461bcd02815260206004820152600d60248201527f6163636573732064656e69656400000000000000000000000000000000000000604482015290519081900360640190fd5b61153081600160a060020a0316611bad565b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154604080517fdbcbaca4000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152915160009384938493849384938493169163dbcbaca49160248083019260a092919082900301818787803b1580156115d057600080fd5b505af11580156115e4573d6000803e3d6000fd5b505050506040513d60a08110156115fa57600080fd5b5080516020808301516040808501516060860151608090960151600160a060020a03909d1660009081526002909452922054929b909a919950929750955060ff169350915050565b69152d02c7e14af680000081565b6012546013549091565b303190565b601a54601b549091565b600054600160a060020a031633146116cb576040805160e560020a62461bcd02815260206004820152600d60248201527f6163636573732064656e69656400000000000000000000000000000000000000604482015290519081900360640190fd5b6116d3611c10565b6040805142815290517f5189687a7ec9d4aebe2f548f952ffbbad19e4cd545c4a05b5e2369cd272dd5519181900360200190a1565b3b1590565b6000611717611cbc565b600080611722611ce3565b61172a611ce3565b60008060006117388a61194d565b9750620151809650611757886020015142611c2f90919063ffffffff16565b955061176688600001516104ab565b8061177057508686105b1561177e5760009850611878565b604088015160208101519051106117985760009850611878565b87516117a390611a57565b60408051808201909152602080830180518451018352519082015290955093506117d3868863ffffffff611c4616565b6040808a01519081015181518b5160209093015193965061180d93919261180192839163ffffffff61191e16565b9063ffffffff611c2f16565b885199509150600090505b8281101561186257611830848a63ffffffff6118f016565b98508189111561185a57604080890151015161185390839063ffffffff61191e16565b9850611862565b600101611818565b8751611875908a9063ffffffff611c2f16565b98505b5050505050505050919050565b151590565b600081151561189b575060006113e5565b600183015483546118c491906118b890859063ffffffff611c6916565b9063ffffffff611c4616565b9392505050565b600160a060020a0316151590565b6118e1611ce3565b6118eb6014611c97565b905090565b6000811515611901575060006113e5565b602083015183516118c491906118b890859063ffffffff611c6916565b60008282018381101561193057600080fd5b8091505b5092915050565b611943611ce3565b6118eb601a611c97565b611955611cbc565b600154604080517fdbcbaca4000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015291516000938493849384938493929092169163dbcbaca49160248082019260a09290919082900301818787803b1580156119c857600080fd5b505af11580156119dc573d6000803e3d6000fd5b505050506040513d60a08110156119f257600080fd5b508051602080830151604080850151606080870151608090970151835180830185529687528686019490945282519081018352908152928301949094528184015291810191909152979650505050505050565b611a4d611ce3565b6118eb601c611c97565b611a5f611ce3565b81662386f26fc1000011158015611a7d575067016345785d8a000082105b15611a9357611a8c6006611c97565b90506104ae565b8167016345785d8a000011158015611ab25750670de0b6b3a764000082105b15611ac157611a8c6008611c97565b81670de0b6b3a764000011158015611ae05750674563918244f4000082105b15611aef57611a8c600a611c97565b81674563918244f4000011158015611b0e5750678ac7230489e8000082105b15611b1d57611a8c600c611c97565b81678ac7230489e8000011158015611b3d57506801158e460913d0000082105b15611b4c57611a8c600e611c97565b816801158e460913d0000011158015611b6d57506801a055690d9db8000082105b15611b7c57611a8c6010611c97565b816801a055690d9db8000011158015611b9e57506802b5e3af16b18800008211155b156104ae576113e56012611c97565b600160a060020a0381161515611c0d576040805160e560020a62461bcd02815260206004820152601860248201527f72657175697265206e6f74207a65726f20616464726573730000000000000000604482015290519081900360640190fd5b50565b6000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008083831115611c3f57600080fd5b5050900390565b600080808311611c5557600080fd5b8284811515611c6057fe5b04949350505050565b600080831515611c7c5760009150611934565b50828202828482811515611c8c57fe5b041461193057600080fd5b611c9f611ce3565b506040805180820190915281548152600190910154602082015290565b60a0604051908101604052806000815260200160008152602001611cde611cfa565b905290565b604080518082019091526000808252602082015290565b60606040519081016040528060008152602001600081526020016000815250905600a165627a7a72305820d47df610b8a6996c21c875111ba3e0ee0a16ec9bf819eb2f3c1374b83238d6370029608060405260008054600160a060020a0319163317905561087d806100256000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166320987e6481146100a85780632562e077146100e057806333babe9d14610104578063440135851461012b5780634cfcf60a1461014f57806378e755cc14610173578063949d225d14610197578063cee2a9cf146101be578063dbcbaca4146101df578063fe73b6c91461022b575b600080fd5b3480156100b457600080fd5b506100cc600160a060020a0360043516602435610255565b604080519115158252519081900360200190f35b3480156100ec57600080fd5b506100cc600160a060020a0360043516602435610319565b34801561011057600080fd5b506100cc600160a060020a03600435166024356044356103e2565b34801561013757600080fd5b506100cc600160a060020a0360043516602435610493565b34801561015b57600080fd5b506100cc600160a060020a0360043516602435610532565b34801561017f57600080fd5b506100cc600160a060020a0360043516602435610651565b3480156101a357600080fd5b506101ac61071a565b60408051918252519081900360200190f35b3480156101ca57600080fd5b506100cc600160a060020a0360043516610720565b3480156101eb57600080fd5b50610200600160a060020a036004351661073c565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561023757600080fd5b506100cc600160a060020a0360043516602435604435606435610774565b60008054600160a060020a031633146102a6576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610832833981519152604482015290519081900360640190fd5b600160a060020a03831660009081526002602052604090205415156102cd57506000610313565b600160a060020a0383166000908152600260205260409020546102f6908363ffffffff61081f16565b600160a060020a0384166000908152600260205260409020555060015b92915050565b60008054600160a060020a0316331461036a576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610832833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054151561039157506000610313565b600160a060020a0383166000908152600260205260409020600401546103bd908363ffffffff61081f16565b600160a060020a03841660009081526002602052604090206004015550600192915050565b60008054600160a060020a03163314610433576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610832833981519152604482015290519081900360640190fd5b600160a060020a038416600090815260026020526040902054151561045a5750600061048c565b50600160a060020a03831660009081526002602081905260408220848155600381018490559081018290556004015560015b9392505050565b60008054600160a060020a031633146104e4576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610832833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054151561050b57506000610313565b50600160a060020a0382166000908152600260205260409020600190810182905592915050565b60008054600160a060020a03163314610583576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610832833981519152604482015290519081900360640190fd5b600160a060020a03831660009081526002602052604090205415156105aa57506000610313565b600160a060020a03831660009081526002602081905260409091206003810154910154830111156105fd57600160a060020a03831660009081526002602081905260409091206003810154910155610648565b600160a060020a0383166000908152600260208190526040909120015461062a908363ffffffff61081f16565b600160a060020a038416600090815260026020819052604090912001555b50600192915050565b60008054600160a060020a031633146106a2576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610832833981519152604482015290519081900360640190fd5b600160a060020a03831660009081526002602052604090205415156106c957506000610313565b600160a060020a0383166000908152600260205260409020600301546106f5908363ffffffff61081f16565b600160a060020a03841660009081526002602052604090206003015550600192915050565b60015481565b600160a060020a03166000908152600260205260408120541190565b600160a060020a0316600090815260026020819052604090912080546001820154928201546003830154600490930154919490929190565b600080548190600160a060020a031633146107c7576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610832833981519152604482015290519081900360640190fd5b50600160a060020a038516600090815260026020526040902080541515806107ed575084155b156107fb5760009150610816565b84815560018082018590556003820184905580548101815591505b50949350505050565b60008282018381101561048c57600080fd006163636573732064656e69656400000000000000000000000000000000000000a165627a7a72305820a41ad3536a9fca52c6968c775f0a0fa039ab4ce922736908768c6c48714fa4060029"
}