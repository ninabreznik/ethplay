{
  "address": "0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenLoot",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-04\n*/\n\npragma solidity ^0.4.24;\n\n// TokenLoot v2.0 2e59d4\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/TokenLoot.sol\n\n/// @title Token Loot Contract\n/// @author Julia Altenried, Yuriy Kashnikov\n\ncontract TokenLoot is Ownable {\n\n  // FIELDS\n  /* signer address, verified in 'receiveTokenLoot' method, can be set by owner only */\n  address public neverdieSigner;\n  /* Nonces */\n  mapping (address => uint256) public nonces;\n  /* Tokens */\n  address[] public tokens;\n\n  // EVENTS\n  event ReceiveLoot(address indexed sender,\n                    uint256 nonce,\n                    address[] tokens,\n                    uint256[] amounts);\n \n\n  // SETTERS\n  function setNeverdieSignerAddress(address _to) public onlyOwner {\n    neverdieSigner = _to;\n  }\n\n  function setTokens(address[] _tokens) public onlyOwner {\n    for (uint256 i = 0; i < tokens.length; i++) {\n      tokens[i] = _tokens[i];\n    }\n    for (uint256 j = _tokens.length; j < _tokens.length; j++) {\n      tokens.push(_tokens[j]);\n    }\n  }\n\n  /// @param _tokens tokens addresses\n  /// @param _signer signer address, verified further in swap functions\n  constructor(address[] _tokens, address _signer) {\n    for (uint256 i = 0; i < _tokens.length; i++) {\n      tokens.push(_tokens[i]);\n    }\n    neverdieSigner = _signer;\n  }\n\n  function receiveTokenLoot(uint256[] _amounts, \n                            uint256 _nonce, \n                            uint8 _v, \n                            bytes32 _r, \n                            bytes32 _s) {\n\n    // reject if the new nonce is lower or equal to the current one\n    require(_nonce > nonces[msg.sender],\n            \"wrong nonce\");\n    nonces[msg.sender] = _nonce;\n\n    // verify signature\n    address signer = ecrecover(keccak256(msg.sender, \n                                         _nonce,\n                                         _amounts), _v, _r, _s);\n    require(signer == neverdieSigner,\n            \"signature verification failed\");\n\n    // transer tokens\n    \n    for (uint256 i = 0; i < _amounts.length; i++) {\n      if (_amounts[i] > 0) {\n        assert(ERC20(tokens[i]).transfer(msg.sender, _amounts[i]));\n      }\n    }\n    \n\n    // emit event\n    ReceiveLoot(msg.sender, _nonce, tokens, _amounts);\n  }\n\n  /// @dev fallback function to reject any ether coming directly to the contract\n  function () payable public { \n      revert(); \n  }\n\n  /// @dev withdraw all SKL and XP tokens\n  function withdraw() public onlyOwner {\n    for (uint256 i = 0; i < tokens.length; i++) {\n      uint256 amount = ERC20(tokens[i]).balanceOf(this);\n      if (amount > 0) ERC20(tokens[i]).transfer(msg.sender, amount);\n    }\n  }\n\n  /// @dev kill contract, but before transfer all SKL and XP tokens \n  function kill() onlyOwner public {\n    withdraw();\n    selfdestruct(owner);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"neverdieSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setNeverdieSignerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"receiveTokenLoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"setTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ReceiveLoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051610b58380380610b58833981016040528051602082015160008054600160a060020a031916331781559190920191905b82518110156100a2576003838281518110151561005d57fe5b6020908102919091018101518254600180820185556000948552929093209092018054600160a060020a031916600160a060020a039093169290921790915501610044565b5060018054600160a060020a031916600160a060020a039290921691909117905550610a85806100d36000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166321a19b2d81146100a85780633bfecbf0146100d95780633ccfd60b146100fc57806341c0e1b5146101115780634dcf7430146101265780634f64b2be1461018f578063625adaf2146101a75780637ecebe00146101fc5780638da5cb5b1461022f578063f2fde38b14610244575b600080fd5b3480156100b457600080fd5b506100bd610265565b60408051600160a060020a039092168252519081900360200190f35b3480156100e557600080fd5b506100fa600160a060020a0360043516610274565b005b34801561010857600080fd5b506100fa6102ba565b34801561011d57600080fd5b506100fa610459565b34801561013257600080fd5b50604080516020600480358082013583810280860185019096528085526100fa953695939460249493850192918291850190849080828437509497505084359550505050602082013560ff16916040810135915060600135610486565b34801561019b57600080fd5b506100bd600435610876565b3480156101b357600080fd5b50604080516020600480358082013583810280860185019096528085526100fa9536959394602494938501929182918501908490808284375094975061089e9650505050505050565b34801561020857600080fd5b5061021d600160a060020a03600435166109a4565b60408051918252519081900360200190f35b34801561023b57600080fd5b506100bd6109b6565b34801561025057600080fd5b506100fa600160a060020a03600435166109c5565b600154600160a060020a031681565b600054600160a060020a0316331461028b57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080548190600160a060020a031633146102d457600080fd5b600091505b6003548210156104555760038054839081106102f157fe5b6000918252602080832090910154604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216936370a082319360248084019491939192918390030190829087803b15801561036157600080fd5b505af1158015610375573d6000803e3d6000fd5b505050506040513d602081101561038b57600080fd5b50519050600081111561044a5760038054839081106103a657fe5b6000918252602080832090910154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051600160a060020a039092169363a9059cbb9360448084019491939192918390030190829087803b15801561041d57600080fd5b505af1158015610431573d6000803e3d6000fd5b505050506040513d602081101561044757600080fd5b50505b6001909101906102d9565b5050565b600054600160a060020a0316331461047057600080fd5b6104786102ba565b600054600160a060020a0316ff5b336000908152600260205260408120548190861161050557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f77726f6e67206e6f6e6365000000000000000000000000000000000000000000604482015290519081900360640190fd5b3360008181526002602090815260408083208a9055516c0100000000000000000000000084028152601481018a90528a51600194938b938d939260348401928583019291909102908190849084905b8381101561056c578181015183820152602001610554565b5050505090500193505050506040518091039020868686604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af11580156105f4573d6000803e3d6000fd5b5050604051601f190151600154909350600160a060020a03808516911614905061067f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f7369676e617475726520766572696669636174696f6e206661696c6564000000604482015290519081900360640190fd5b5060005b8651811015610799576000878281518110151561069c57fe5b9060200190602002015111156107915760038054829081106106ba57fe5b6000918252602090912001548751600160a060020a039091169063a9059cbb9033908a90859081106106e857fe5b906020019060200201516040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561075d57600080fd5b505af1158015610771573d6000803e3d6000fd5b505050506040513d602081101561078757600080fd5b5051151561079157fe5b600101610683565b33600160a060020a03167f0f5a6fef75c1b08f4bccf4daaf9ac4cf3c6fe3bf94d82042e2f1c54840d0c28c8760038a604051808481526020018060200180602001838103835285818154815260200191508054801561082157602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610803575b50508381038252845181528451602091820191808701910280838360005b8381101561085757818101518382015260200161083f565b505050509050019550505050505060405180910390a250505050505050565b600380548290811061088457fe5b600091825260209091200154600160a060020a0316905081565b600080548190600160a060020a031633146108b857600080fd5b600091505b6003548210156109305782828151811015156108d557fe5b906020019060200201516003838154811015156108ee57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055600191909101906108bd565b5081515b825181101561099f576003838281518110151561094d57fe5b602090810291909101810151825460018082018555600094855292909320909201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039093169290921790915501610934565b505050565b60026020526000908152604090205481565b600054600160a060020a031681565b600054600160a060020a031633146109dc57600080fd5b600160a060020a03811615156109f157600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058200f72eb360edee4ab171260900510a49477f13a4c1e8c9756e3087b1dfd31953500290000000000000000000000000000000000000000000000000000000000000040000000000000000000000000ec7d692198556d4f6b8bd611ad28ef0ec3c28b5f000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000a7bd9d58d22d5e35ec4a08083141e0340ea2ca93000000000000000000000000d28525ad63f337c86843d720dae921228e44f0ac000000000000000000000000b6f09f221d7a93390235d427c72fffc4f3856a9f0000000000000000000000002498aa67cd08ac321085734a8570137ec2001731000000000000000000000000106734655a3c75b92c154a7f827c4ab7d91118540000000000000000000000006efa7c3d995572b5fb1c4cee780f2b101ef635f50000000000000000000000006da2b0b95659f89c2332953fa84bc97633eb73ae000000000000000000000000ca1c217a2200b60dbd52e33c7cb1758db2b30a0e000000000000000000000000e7d9742fb323f0493de454478049b9619b1711a6000000000000000000000000a54ddc7b3cce7fc8b1e3fa0256d0db80d2c10970000000000000000000000000c596bd09d652827b0106292d3e378d5938df4b12",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000ec7d692198556d4f6b8bd611ad28ef0ec3c28b5f000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000a7bd9d58d22d5e35ec4a08083141e0340ea2ca93000000000000000000000000d28525ad63f337c86843d720dae921228e44f0ac000000000000000000000000b6f09f221d7a93390235d427c72fffc4f3856a9f0000000000000000000000002498aa67cd08ac321085734a8570137ec2001731000000000000000000000000106734655a3c75b92c154a7f827c4ab7d91118540000000000000000000000006efa7c3d995572b5fb1c4cee780f2b101ef635f50000000000000000000000006da2b0b95659f89c2332953fa84bc97633eb73ae000000000000000000000000ca1c217a2200b60dbd52e33c7cb1758db2b30a0e000000000000000000000000e7d9742fb323f0493de454478049b9619b1711a6000000000000000000000000a54ddc7b3cce7fc8b1e3fa0256d0db80d2c10970000000000000000000000000c596bd09d652827b0106292d3e378d5938df4b12"
}