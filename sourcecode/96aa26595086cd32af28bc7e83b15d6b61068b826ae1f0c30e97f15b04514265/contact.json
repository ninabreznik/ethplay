{
  "address": "0x22b21b9de1c05a7ce39d1c41f070ab6ae9932348",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EFH",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-09\n*/\n\npragma solidity ^0.4.9;\n\ncontract ERC223 {\n  uint public totalSupply;\n  function balanceOf(address who) public view returns (uint);\n  \n  function name() public view returns (string _name);\n  function symbol() public view returns (string _symbol);\n  function decimals() public view returns (uint8 _decimals);\n  function totalSupply() public view returns (uint256 _supply);\n\n  function transfer(address to, uint value) public returns (bool ok);\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n  \n  event Transfer(address indexed from, address indexed to, uint value, bytes data);\n  event Transfer(address indexed from, address indexed to, uint value);\n  \n    \n}\n\ncontract ContractReceiver {\n     \n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n    \n    \n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n      TKN memory tkn;\n      tkn.sender = _from;\n      tkn.value = _value;\n      tkn.data = _data;\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n      tkn.sig = bytes4(u);\n      \n      /* tkn variable is analogue of msg variable of Ether transaction\n      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n      *  tkn.data is data of token transaction   (analogue of msg.data)\n      *  tkn.sig is 4 bytes signature of function\n      *  if data of token transaction is a function execution\n      */\n    }\n}\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n    uint256 constant public MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    function safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        if (x > MAX_UINT256 - y) revert();\n        return x + y;\n    }\n\n    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        if (x < y) revert();\n        return x - y;\n    }\n\n    function safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        if (y == 0) return 0;\n        if (x > MAX_UINT256 / y) revert();\n        return x * y;\n    }\n}\n\ncontract WithdrawableToken {\n    function transfer(address _to, uint _value) returns (bool success);\n    function balanceOf(address _owner) constant returns (uint balance);\n}\n\ncontract EFH is ERC223,SafeMath{\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\taddress public owner;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balances;\n\tmapping (address => uint256) public freezes;\n  \n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount frozen */\n    event Freeze(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount unfrozen */\n    event Unfreeze(address indexed from, uint256 value);\n\n\t\n\t// Function to access name of token .\n  function name() public view returns (string _name) {\n      return name;\n  }\n  // Function to access symbol of token .\n  function symbol() public view returns (string _symbol) {\n      return symbol;\n  }\n  // Function to access decimals of token .\n  function decimals() public view returns (uint8 _decimals) {\n      return decimals;\n  }\n  // Function to access total supply of tokens .\n  function totalSupply() public view returns (uint256 _totalSupply) {\n      return totalSupply;\n  }\n\t\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function EFH(uint256 initialSupply,string tokenName,uint8 decimalUnits,string tokenSymbol) {\n        balances[msg.sender] = initialSupply * 10 ** uint256(decimalUnits);              // Give the creator all initial tokens\n        totalSupply = initialSupply * 10 ** uint256(decimalUnits);                     // Update total supply\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\n\t\towner = msg.sender;\n\t\tTransfer(address(0), owner, totalSupply);\n    }\n\n\n    function burn(uint256 _value) returns (bool success) {\n        if (balances[msg.sender] < _value) revert();            // Check if the sender has enough\n\t\tif (_value <= 0) revert(); \n        balances[msg.sender] = SafeMath.safeSub(balances[msg.sender], _value);                      // Subtract from the sender\n        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction freeze(uint256 _value) returns (bool success) {\n        if (balances[msg.sender] < _value) revert();            // Check if the sender has enough\n\t\tif (_value <= 0) revert(); \n        balances[msg.sender] = SafeMath.safeSub(balances[msg.sender], _value);                      // Subtract from the sender\n        freezes[msg.sender] = SafeMath.safeAdd(freezes[msg.sender], _value);                                // Updates totalSupply\n        Freeze(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction unfreeze(uint256 _value) returns (bool success) {\n        if (freezes[msg.sender] < _value) revert();            // Check if the sender has enough\n\t\tif (_value <= 0) revert(); \n        freezes[msg.sender] = SafeMath.safeSub(freezes[msg.sender], _value);                      // Subtract from the sender\n\t\tbalances[msg.sender] = SafeMath.safeAdd(balances[msg.sender], _value);\n        Unfreeze(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction withdrawTokens(address tokenContract) external {\n\t\trequire(msg.sender == owner );\n\t\tWithdrawableToken tc = WithdrawableToken(tokenContract);\n\n\t\ttc.transfer(owner, tc.balanceOf(this));\n\t}\n\t\n\t// transfer balance to owner\n\tfunction withdrawEther() external {\n\t\trequire(msg.sender == owner );\n\t\tmsg.sender.transfer(this.balance);\n\t}\n\n\t // Function that is called when a user or another contract wants to transfer funds .\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n      \n    if(isContract(_to)) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n        balances[_to] = safeAdd(balanceOf(_to), _value);\n        assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n        Transfer(msg.sender, _to, _value, _data);\n        return true;\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n}\n  \n\n  // Function that is called when a user or another contract wants to transfer funds .\n  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n      \n    if(isContract(_to)) {\n        return transferToContract(_to, _value, _data);\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n}\n  \n  // Standard function transfer similar to ERC20 transfer with no _data .\n  // Added due to backwards compatibility reasons .\n  function transfer(address _to, uint _value) public returns (bool success) {\n      \n    //standard function transfer similar to ERC20 transfer with no _data\n    //added due to backwards compatibility reasons\n    bytes memory empty;\n    if(isContract(_to)) {\n        return transferToContract(_to, _value, empty);\n    }\n    else {\n        return transferToAddress(_to, _value, empty);\n    }\n}\n\n  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n  function isContract(address _addr) private view returns (bool is_contract) {\n      uint length;\n      assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n      }\n      return (length>0);\n    }\n\n  //function that is called when transaction target is an address\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) revert();\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n    balances[_to] = safeAdd(balanceOf(_to), _value);\n\tif (_data.length > 0){\n\t\tTransfer(msg.sender, _to, _value, _data);\n\t}\n    else{\n\t\tTransfer(msg.sender, _to, _value);\n\t}\n    return true;\n  }\n  \n  //function that is called when transaction target is a contract\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) revert();\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n    balances[_to] = safeAdd(balanceOf(_to), _value);\n    ContractReceiver receiver = ContractReceiver(_to);\n    receiver.tokenFallback(msg.sender, _value, _data);\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n}\n\t\n\tfunction balanceOf(address _owner) public view returns (uint balance) {\n    return balances[_owner];\n  }\n\t\n\t// can accept ether\n\tfunction () payable {\n    }\n\t\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b506040516200117b3803806200117b8339810160409081528151602080840151838501516060860151336000908152600685529590952060ff8216600a0a8502908190556004559085018051939590949193910191620000779160019186019062000103565b5080516200008d90600290602084019062000103565b506003805460ff841660ff1990911617905560058054600160a060020a0319163317908190556004546040805191825251600160a060020a0392909216916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a350505050620001a8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014657805160ff191683800117855562000176565b8280016001018555821562000176579182015b828111156200017657825182559160200191906001019062000159565b506200018492915062000188565b5090565b620001a591905b808211156200018457600081556001016200018f565b90565b610fc380620001b86000396000f3006080604052600436106100d75763ffffffff60e060020a60003504166306fdde0381146100d9578063120426821461016357806318160ddd1461019657806327e235e3146101ab578063313ce567146101cc57806333a581d2146101f757806342966c681461020c57806349df728c146102385780636623fc461461025957806370a08231146102715780637362377b146102925780638da5cb5b146102a757806395d89b41146102d8578063a9059cbb146102ed578063be45fd6214610311578063d7a78db81461037a578063f6368f8a14610392575b005b3480156100e557600080fd5b506100ee610439565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610128578181015183820152602001610110565b50505050905090810190601f1680156101555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016f57600080fd5b50610184600160a060020a03600435166104ce565b60408051918252519081900360200190f35b3480156101a257600080fd5b506101846104e0565b3480156101b757600080fd5b50610184600160a060020a03600435166104e6565b3480156101d857600080fd5b506101e16104f8565b6040805160ff9092168252519081900360200190f35b34801561020357600080fd5b50610184610501565b34801561021857600080fd5b50610224600435610507565b604080519115158252519081900360200190f35b34801561024457600080fd5b506100d7600160a060020a03600435166105a8565b34801561026557600080fd5b506102246004356106e0565b34801561027d57600080fd5b50610184600160a060020a036004351661079a565b34801561029e57600080fd5b506100d76107b5565b3480156102b357600080fd5b506102bc6107fc565b60408051600160a060020a039092168252519081900360200190f35b3480156102e457600080fd5b506100ee61080b565b3480156102f957600080fd5b50610224600160a060020a0360043516602435610869565b34801561031d57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610224948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061089f9650505050505050565b34801561038657600080fd5b506102246004356108d3565b34801561039e57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610224948235600160a060020a031694602480359536959460649492019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061098d9650505050505050565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156104c45780601f10610499576101008083540402835291602001916104c4565b820191906000526020600020905b8154815290600101906020018083116104a757829003601f168201915b5050505050905090565b60076020526000908152604090205481565b60045490565b60066020526000908152604090205481565b60035460ff1690565b60001981565b3360009081526006602052604081205482111561052357600080fd5b6000821161053057600080fd5b3360009081526006602052604090205461054a9083610bea565b336000908152600660205260409020556004546105679083610bea565b60045560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b600554600090600160a060020a031633146105c257600080fd5b50600554604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518392600160a060020a038085169363a9059cbb93929091169184916370a082319160248083019260209291908290030181600087803b15801561063757600080fd5b505af115801561064b573d6000803e3d6000fd5b505050506040513d602081101561066157600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156106b057600080fd5b505af11580156106c4573d6000803e3d6000fd5b505050506040513d60208110156106da57600080fd5b50505050565b336000908152600760205260408120548211156106fc57600080fd5b6000821161070957600080fd5b336000908152600760205260409020546107239083610bea565b336000908152600760209081526040808320939093556006905220546107499083610bff565b33600081815260066020908152604091829020939093558051858152905191927f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f92918290030190a2506001919050565b600160a060020a031660009081526006602052604090205490565b600554600160a060020a031633146107cc57600080fd5b6040513390303180156108fc02916000818181858888f193505050501580156107f9573d6000803e3d6000fd5b50565b600554600160a060020a031681565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156104c45780601f10610499576101008083540402835291602001916104c4565b6000606061087684610c17565b1561088d57610886848483610c1f565b9150610898565b610886848483610e23565b5092915050565b60006108aa84610c17565b156108c1576108ba848484610c1f565b90506108cc565b6108ba848484610e23565b9392505050565b336000908152600660205260408120548211156108ef57600080fd5b600082116108fc57600080fd5b336000908152600660205260409020546109169083610bea565b3360009081526006602090815260408083209390935560079052205461093c9083610bff565b33600081815260076020908152604091829020939093558051858152905191927ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e092918290030190a2506001919050565b600061099885610c17565b15610bd457836109a73361079a565b10156109b257600080fd5b6109c46109be3361079a565b85610bea565b336000908152600660205260409020556109e66109e08661079a565b85610bff565b600160a060020a038616600081815260066020908152604080832094909455925185519293919286928291908401908083835b60208310610a385780518252601f199092019160209182019101610a19565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060e060020a9004903387876040518563ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a03168152602001838152602001828051906020019080838360005b83811015610aca578181015183820152602001610ab2565b50505050905090810190601f168015610af75780820380516001836020036101000a031916815260200191505b50935050505060006040518083038185885af193505050501515610b1757fe5b84600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1686866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b91578181015183820152602001610b79565b50505050905090810190601f168015610bbe5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3506001610be2565b610bdf858585610e23565b90505b949350505050565b600081831015610bf957600080fd5b50900390565b60008160001903831115610c1257600080fd5b500190565b6000903b1190565b60008083610c2c3361079a565b1015610c3757600080fd5b610c436109be3361079a565b33600090815260066020526040902055610c5f6109e08661079a565b600160a060020a03861660008181526006602090815260408083209490945592517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018a90526060604484019081528951606485015289518c9850959663c0ee0b8a9693958c958c956084909101928601918190849084905b83811015610cfd578181015183820152602001610ce5565b50505050905090810190601f168015610d2a5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610d4b57600080fd5b505af1158015610d5f573d6000803e3d6000fd5b5050505084600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1686866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610ddd578181015183820152602001610dc5565b50505050905090810190601f168015610e0a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3506001949350505050565b600082610e2f3361079a565b1015610e3a57600080fd5b610e4c610e463361079a565b84610bea565b33600090815260066020526040902055610e6e610e688561079a565b84610bff565b600160a060020a03851660009081526006602052604081209190915582511115610f4c5783600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c1685856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f0c578181015183820152602001610ef4565b50505050905090810190601f168015610f395780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3610f8d565b604080518481529051600160a060020a0386169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35b50600193925050505600a165627a7a72305820937704e33781961a5d53dd622c1c55c0845ad12fa520b6beddb69752dc69e9df002900000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000003454648000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034546480000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000003454648000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034546480000000000000000000000000000000000000000000000000000000000"
}