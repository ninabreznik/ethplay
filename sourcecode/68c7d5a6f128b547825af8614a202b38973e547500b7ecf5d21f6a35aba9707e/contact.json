{
  "address": "0x0836e2ed69ab94ed95b08e17165a53e91a378fdf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SAVERToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-03\n*/\n\npragma solidity ^0.4.24;\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract Owned {\n    address public owner;\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n} \n\n\n\n\n\n\n\n\n\ncontract ERC20 is ERC20Basic {\n  // Optional token name\n  string  public  name = \"zeosX\";\n  string  public  symbol;\n  uint256  public  decimals = 18; // standard token precision. override to customize\n    \n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n \nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  \n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  function multiTransfer(address[] _to,uint[] _value) public returns (bool);\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract BurnableToken is StandardToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(burner, _value);\n    emit Transfer(burner, address(0), _value);\n  }\n}\n\n\n\n\ncontract KYCVerification is Owned{\n    \n    mapping(address => bool) public kycAddress;\n    \n    event LogKYCVerification(address _kycAddress,bool _status);\n    \n    constructor () public {\n        owner = msg.sender;\n    }\n\n    function updateVerifcationBatch(address[] _kycAddress,bool _status) onlyOwner public returns(bool)\n    {\n        for(uint tmpIndex = 0; tmpIndex < _kycAddress.length; tmpIndex++)\n        {\n            kycAddress[_kycAddress[tmpIndex]] = _status;\n            emit LogKYCVerification(_kycAddress[tmpIndex],_status);\n        }\n        \n        return true;\n    }\n    \n    function updateVerifcation(address _kycAddress,bool _status) onlyOwner public returns(bool)\n    {\n        kycAddress[_kycAddress] = _status;\n        \n        emit LogKYCVerification(_kycAddress,_status);\n        \n        return true;\n    }\n    \n    function isVerified(address _user) view public returns(bool)\n    {\n        return kycAddress[_user] == true; \n    }\n}\n\n\ncontract SAVERToken is Owned, BurnableToken {\n\n    string public name = \"SureSAVER PRIZE-LINKED REWARD SAVINGS ACCOUNT TOKEN\";\n    string public symbol = \"SAVER\";\n    uint8 public decimals = 2;\n    bool public kycEnabled = true;\n    \n    uint256 public initialSupply = 81000000 * (10 ** uint256(decimals));\n    uint256 public totalSupply = 810000000 * (10 ** uint256(decimals));\n    uint256 public externalAuthorizePurchase = 0;\n    \n    mapping (address => bool) public frozenAccount;\n    mapping(address => uint8) authorizedCaller;\n    mapping(address => uint) public lockInPeriodForAccount;\n    mapping(address => uint) public lockInPeriodDurationForAccount;\n\n    \n    KYCVerification public kycVerification;\n    \n    \n    /* Penalty Percent and Treasury Receiver */\n    address public OptOutPenaltyReceiver = 0x63a2311603aE55d1C7AC5DfA19225Ac2B7b5Cf6a;\n    uint public OptOutPenaltyPercent = 20; /* in percent*/\n    \n    \n    modifier onlyAuthCaller(){\n        require(authorizedCaller[msg.sender] == 1 || owner == msg.sender);\n        _;\n    }\n    \n    modifier kycVerified(address _guy) {\n      if(kycEnabled == true){\n          if(kycVerification.isVerified(_guy) == false)\n          {\n              revert(\"KYC Not Verified\");\n          }\n      }\n      _;\n    }\n    \n    modifier frozenVerified(address _guy) {\n        if(frozenAccount[_guy] == true)\n        {\n            revert(\"Account is freeze\");\n        }\n        _;\n    }\n\n    \n    modifier isAccountLocked(address _guy) {\n        if((_guy != owner || authorizedCaller[_guy] != 1) && lockInPeriodForAccount[_guy] != 0)\n        {\n            if(now < lockInPeriodForAccount[_guy])\n            {\n                revert(\"Account is Locked\");\n            }\n        }\n        \n        _;\n    }\n    \n    \n    \n    /* KYC related events */    \n    event KYCMandateUpdate(bool _kycEnabled);\n    event KYCContractAddressUpdate(KYCVerification _kycAddress);\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n    \n    /* Events */\n    event AuthorizedCaller(address caller);\n    event DeAuthorizedCaller(address caller);\n    \n    /* Opt out Lockin Event */\n    \n    event LockinPeriodUpdated(address _guy, uint _lockinPeriod,uint _lockinPeriodDuration);\n    event OptedOutLockinPeriod(address indexed _guy,uint indexed _optOutDate, uint _penaltyPercent,uint _penaltyAmt);\n    event LockinOptoutPenaltyPercentUpdated(address _guy, uint _percent);\n    event LockinOptoutPenaltyReceiverUpdated(address _newReceiver);\n\n    \n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor () public {\n        \n        owner = msg.sender;\n\n        balances[0xBcd5B67aaeBb9765beE438e4Ce137B9aE2181898] = totalSupply;\n        \n        \n        authorizedCaller[msg.sender] = 1;\n        emit AuthorizedCaller(msg.sender);\n\n        emit Transfer(address(0x0), address(this), totalSupply);\n        emit Transfer(address(this), address(0xBcd5B67aaeBb9765beE438e4Ce137B9aE2181898), totalSupply);\n        \n    }\n    \n    \n    \n    /****************  KYC Related Methods  *******************/\n\n\n    /**\n      * @dev update KYC Contract Address \n      * @param _kycAddress  KYC Contract Address \n      *  Can only be called by owner \n      */\n\n    function updateKycContractAddress(KYCVerification _kycAddress) public onlyOwner returns(bool)\n    {\n      kycVerification = _kycAddress;\n      emit KYCContractAddressUpdate(_kycAddress);\n      return true;\n    }\n\n    /**\n      * @dev update KYC Mandate Status for this Contract  \n      * @param _kycEnabled  true/false\n      *  Can only be called by authorized caller  \n      */\n\n    function updateKycMandate(bool _kycEnabled) public onlyAuthCaller\n    {\n        kycEnabled = _kycEnabled;\n        emit KYCMandateUpdate(_kycEnabled);\n    }\n    \n    /**************** authorization/deauthorization of  caller *****************/\n\n    /**\n      * @dev authorize an address to perform action required elevated permissions  \n      * @param _caller  Caller Address \n      *  Can only be called by authorized owner  \n      */\n    function authorizeCaller(address _caller) public onlyOwner returns(bool) \n    {\n        authorizedCaller[_caller] = 1;\n        emit AuthorizedCaller(_caller);\n        return true;\n    }\n    \n    /**\n      * @dev deauthorize an address to perform action required elevated permissions  \n      * @param _caller  Caller Address \n      *  Can only be called by authorized owner  \n      */\n    function deAuthorizeCaller(address _caller) public onlyOwner returns(bool) \n    {\n        authorizedCaller[_caller] = 0;\n        emit DeAuthorizedCaller(_caller);\n        return true;\n    }\n    \n    \n    /**\n      * @dev Internal transfer, only can be called by this contract\n      * @param _from  Sender's Address \n      * @param _to  Receiver's Address \n      * @param _value  Amount in terms of Wei \n      *  Can only be called internally  \n      */\n    function _transfer(address _from, address _to, uint _value) internal \n    {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balances[_from] > _value);                // Check if the sender has enough\n        require (balances[_to].add(_value) > balances[_to]); // Check for overflow\n        balances[_from] = balances[_from].sub(_value);                         // Subtract from the sender\n        balances[_to] = balances[_to].add(_value);                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /*******************  General Related   **********************/\n\n\n    /**\n      * @dev Create `mintedAmount` tokens and send it to `target` with increase in totalsupply \n      * @param _target  Target Account's Address \n      * @param _mintedAmount  Amount in terms of Wei \n      *  Can only be called internally  \n      */\n    function mintToken(address _target, uint256 _mintedAmount) onlyOwner public \n    {\n        balances[_target] = balances[_target].add(_mintedAmount);\n        totalSupply = totalSupply.add(_mintedAmount);\n        emit Transfer(0, this, _mintedAmount);\n        emit Transfer(this, _target, _mintedAmount);\n    }\n    \n\n    /**\n      * @dev `freeze? Prevent | Allow` `target` from sending & receiving tokens\n      * @param _target  Address to be frozen\n      * @param _freeze  either to freeze it or not\n      *  Can only be called by owner   \n      */\n    function freezeAccount(address _target, bool _freeze) onlyOwner public \n    {\n        frozenAccount[_target] = _freeze;\n        emit FrozenFunds(_target, _freeze);\n    }\n\n\n    /**\n      * @dev Initiate Token Purchase Externally \n      * @param _receiver  Address of receiver \n      * @param _tokens  Tokens amount to be tranferred\n      * @param _lockinPeriod  Lockin Period if need to set else can be 0\n      *  Can only be called by authorized caller   \n      */\n    function purchaseToken(address _receiver, uint _tokens,uint _lockinPeriod,uint _lockinPeriodDuration) onlyAuthCaller public {\n        require(_tokens > 0);\n        require(initialSupply > _tokens);\n        \n        initialSupply = initialSupply.sub(_tokens);\n        _transfer(owner, _receiver, _tokens);              // makes the transfers\n        externalAuthorizePurchase = externalAuthorizePurchase.add(_tokens);\n        \n        /* Update Lockin Period */\n        if(_lockinPeriod != 0)\n        {\n            lockInPeriodForAccount[_receiver] = _lockinPeriod;\n            lockInPeriodDurationForAccount[_receiver] = _lockinPeriodDuration;\n            emit LockinPeriodUpdated(_receiver, _lockinPeriod,_lockinPeriodDuration);\n        }\n        \n    }\n    \n    \n\n    \n\n\n    /**\n      * @dev transfer token for a specified address\n      * @param _to The address to transfer to.\n      * @param _value The amount to be transferred.\n      */\n    function transfer(address _to, uint256 _value) public kycVerified(msg.sender) isAccountLocked(msg.sender) frozenVerified(msg.sender) returns (bool) {\n        _transfer(msg.sender,_to,_value);\n        return true;\n    }\n    \n\n    /**\n      * @dev mutiple transfer of token to multiple address with respective amounts\n      * @param _to The Array address to transfer to.\n      * @param _value The Array value to transfer to.\n      *  User should have KYC Verification Status true \n      *       User should have Unlocked Account\n      *       make sure before calling this function from UI, Sender has sufficient balance for All transfers \n      */\n    function multiTransfer(address[] _to,uint[] _value) public kycVerified(msg.sender) isAccountLocked(msg.sender) frozenVerified(msg.sender) returns (bool) {\n        require(_to.length == _value.length, \"Length of Destination should be equal to value\");\n        for(uint _interator = 0;_interator < _to.length; _interator++ )\n        {\n            _transfer(msg.sender,_to[_interator],_value[_interator]);\n        }\n        return true;    \n    }\n    \n    /**\n      * @dev enables to Opt of Lockin Period while attracting penalty\n      *  User should not be owner \n      *  User should not be authorized caller  \n      *  User account should locked already  \n      *  User should have non zero balance All transfers \n      */\n    function optOutLockinPeriod() public returns (bool)\n    {\n        /* Caller Cannot be Owner */\n        require(owner != msg.sender,\"Owner Account Detected\");\n        \n        /* Caller Cannot be Authorized */\n        require(authorizedCaller[msg.sender] != 1,\"Owner Account Detected\");\n        \n        /* Check if Already lockedIn */\n        require(now < lockInPeriodForAccount[msg.sender],\"Account Already Unlocked\");\n        \n        /* Check Available Balance */\n        require(balances[msg.sender] > 0,\"Not sufficient balance available\");\n        \n        /* Calculate Penalty */\n        uint _penaltyAmt = balances[msg.sender].mul(OptOutPenaltyPercent).div(100);\n        \n        /* transfer penalty funds */\n        _transfer(msg.sender,OptOutPenaltyReceiver,_penaltyAmt);\n        \n        /* update lockin period to day before */\n        lockInPeriodForAccount[msg.sender] = 0;     \n        lockInPeriodDurationForAccount[msg.sender] = 0;     \n        \n        /* Emit Event */\n        emit OptedOutLockinPeriod(msg.sender,now, OptOutPenaltyPercent,_penaltyAmt);\n        \n        return true;\n    }\n    \n    /**\n      * @dev enables to change Lockin Period Optout Percent\n      * @param _percent Percent to be updated .\n      *  Can only be called by authorized caller   \n      */\n    function updateLockinOptoutPenaltyPercent(uint _percent) onlyAuthCaller public returns(bool)\n    {\n        OptOutPenaltyPercent = _percent;\n\n        emit LockinOptoutPenaltyPercentUpdated(msg.sender,_percent);\n\n        return true;\n    }  \n\n    /**\n      * @dev enables to change Lockin Period Optout Receiver\n      * @param _newReceiver Receiver to be updated .\n      *  Can only be called by authorized caller   \n      */\n    function updateLockinOptoutPenaltyReceiver(address _newReceiver) onlyAuthCaller public returns(bool)\n    {\n        OptOutPenaltyReceiver = _newReceiver;\n\n        emit LockinOptoutPenaltyReceiverUpdated(_newReceiver);\n\n        return true;\n    }  \n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockInPeriodForAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"deAuthorizeCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"authorizeCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OptOutPenaltyPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"optOutLockinPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycVerification\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kycAddress\",\"type\":\"address\"}],\"name\":\"updateKycContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalAuthorizePurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_lockinPeriod\",\"type\":\"uint256\"},{\"name\":\"_lockinPeriodDuration\",\"type\":\"uint256\"}],\"name\":\"purchaseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OptOutPenaltyReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kycEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kycEnabled\",\"type\":\"bool\"}],\"name\":\"updateKycMandate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateLockinOptoutPenaltyPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newReceiver\",\"type\":\"address\"}],\"name\":\"updateLockinOptoutPenaltyReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockInPeriodDurationForAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_kycEnabled\",\"type\":\"bool\"}],\"name\":\"KYCMandateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_kycAddress\",\"type\":\"address\"}],\"name\":\"KYCContractAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DeAuthorizedCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_lockinPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lockinPeriodDuration\",\"type\":\"uint256\"}],\"name\":\"LockinPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_optOutDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_penaltyPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_penaltyAmt\",\"type\":\"uint256\"}],\"name\":\"OptedOutLockinPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"LockinOptoutPenaltyPercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newReceiver\",\"type\":\"address\"}],\"name\":\"LockinOptoutPenaltyReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526040805190810160405280600581526020017f7a656f735800000000000000000000000000000000000000000000000000000081525060019080519060200190620000519291906200043b565b506012600355606060405190810160405280603381526020017f537572655341564552205052495a452d4c494e4b45442052455741524420534181526020017f56494e4753204143434f554e5420544f4b454e0000000000000000000000000081525060079080519060200190620000cb9291906200043b565b506040805190810160405280600581526020017f534156455200000000000000000000000000000000000000000000000000000081525060089080519060200190620001199291906200043b565b506002600960006101000a81548160ff021916908360ff1602179055506001600960016101000a81548160ff021916908315150217905550600960009054906101000a900460ff1660ff16600a0a6304d3f64002600a55600960009054906101000a900460ff1660ff16600a0a6330479e8002600b556000600c557363a2311603ae55d1c7ac5dfa19225ac2b7b5cf6a601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506014601355348015620001fb57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b546004600073bcd5b67aaebb9765bee438e4ce137b9ae218189873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f8afeca650897be3183b7c0d24eba96a1b990f75c4bd74a0cfb2c0a71aec48e6133604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a13073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600b546040518082815260200191505060405180910390a373bcd5b67aaebb9765bee438e4ce137b9ae218189873ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600b546040518082815260200191505060405180910390a3620004ea565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200047e57805160ff1916838001178555620004af565b82800160010185558215620004af579182015b82811115620004ae57825182559160200191906001019062000491565b5b509050620004be9190620004c2565b5090565b620004e791905b80821115620004e3576000816000905550600101620004c9565b5090565b90565b6138df80620004fa6000396000f3006080604052600436106101ac576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101b1578063095ea7b31461024157806317a00066146102a657806318160ddd146102fd5780631bcd250a146103285780631e89d5451461038357806323b872dd146104445780632c388d5d146104c9578063313ce56714610524578063378dc3dc1461055557806342966c681461058057806348867076146105ad5780634b0207a2146105d8578063661884631461060757806366911db01461066c57806370a08231146106c357806379c650681461071a578063847191ca146107675780638da5cb5b146107c25780638e058638146108195780638f1480331461084457806393569765146108a557806395d89b41146108fc578063a6fcb0531461098c578063a9059cbb146109bb578063b414d4b614610a20578063ba99b87d14610a7b578063bc845d5f14610aaa578063cd59bda214610aef578063d73dd62314610b4a578063dd62ed3e14610baf578063e724529c14610c26578063f2fde38b14610c75578063f583fb7b14610cb8575b600080fd5b3480156101bd57600080fd5b506101c6610d0f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102065780820151818401526020810190506101eb565b50505050905090810190601f1680156102335780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024d57600080fd5b5061028c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610dad565b604051808215151515815260200191505060405180910390f35b3480156102b257600080fd5b506102e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e9f565b6040518082815260200191505060405180910390f35b34801561030957600080fd5b50610312610eb7565b6040518082815260200191505060405180910390f35b34801561033457600080fd5b50610369600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ebd565b604051808215151515815260200191505060405180910390f35b34801561038f57600080fd5b5061042a6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610fdf565b604051808215151515815260200191505060405180910390f35b34801561045057600080fd5b506104af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114ef565b604051808215151515815260200191505060405180910390f35b3480156104d557600080fd5b5061050a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118ae565b604051808215151515815260200191505060405180910390f35b34801561053057600080fd5b506105396119d0565b604051808260ff1660ff16815260200191505060405180910390f35b34801561056157600080fd5b5061056a6119e3565b6040518082815260200191505060405180910390f35b34801561058c57600080fd5b506105ab600480360381019080803590602001909291905050506119e9565b005b3480156105b957600080fd5b506105c2611ba4565b6040518082815260200191505060405180910390f35b3480156105e457600080fd5b506105ed611baa565b604051808215151515815260200191505060405180910390f35b34801561061357600080fd5b50610652600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612028565b604051808215151515815260200191505060405180910390f35b34801561067857600080fd5b506106816122b9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106cf57600080fd5b50610704600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122df565b6040518082815260200191505060405180910390f35b34801561072657600080fd5b50610765600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612328565b005b34801561077357600080fd5b506107a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124ec565b604051808215151515815260200191505060405180910390f35b3480156107ce57600080fd5b506107d76125f6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561082557600080fd5b5061082e61261b565b6040518082815260200191505060405180910390f35b34801561085057600080fd5b506108a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050612621565b005b3480156108b157600080fd5b506108ba612863565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561090857600080fd5b50610911612889565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610951578082015181840152602081019050610936565b50505050905090810190601f16801561097e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561099857600080fd5b506109a1612927565b604051808215151515815260200191505060405180910390f35b3480156109c757600080fd5b50610a06600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061293a565b604051808215151515815260200191505060405180910390f35b348015610a2c57600080fd5b50610a61600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d60565b604051808215151515815260200191505060405180910390f35b348015610a8757600080fd5b50610aa8600480360381019080803515159060200190929190505050612d80565b005b348015610ab657600080fd5b50610ad560048036038101908080359060200190929190505050612e8d565b604051808215151515815260200191505060405180910390f35b348015610afb57600080fd5b50610b30600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612fbf565b604051808215151515815260200191505060405180910390f35b348015610b5657600080fd5b50610b95600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613123565b604051808215151515815260200191505060405180910390f35b348015610bbb57600080fd5b50610c10600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061331f565b6040518082815260200191505060405180910390f35b348015610c3257600080fd5b50610c73600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506133a6565b005b348015610c8157600080fd5b50610cb6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506134cb565b005b348015610cc457600080fd5b50610cf9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613569565b6040518082815260200191505060405180910390f35b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610da55780601f10610d7a57610100808354040283529160200191610da5565b820191906000526020600020905b815481529060010190602001808311610d8857829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600f6020528060005260406000206000915090505481565b600b5481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f1a57600080fd5b6000600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f9e8ca6ff03906e81e8a6a03d4f96b7edb0b97f0ed9d07ef1b699fff63438549682604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b6000803360011515600960019054906101000a900460ff16151514156111725760001515601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9209e33836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156110c057600080fd5b505af11580156110d4573d6000803e3d6000fd5b505050506040513d60208110156110ea57600080fd5b810190808051906020019092919050505015151415611171576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4b5943204e6f742056657269666965640000000000000000000000000000000081525060200191505060405180910390fd5b5b336000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158061121f57506001600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614155b801561126b57506000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b1561132657600f60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054421015611325576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4163636f756e74206973204c6f636b656400000000000000000000000000000081525060200191505060405180910390fd5b5b3360011515600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156113ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4163636f756e7420697320667265657a6500000000000000000000000000000081525060200191505060405180910390fd5b8551875114151561148d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f4c656e677468206f662044657374696e6174696f6e2073686f756c642062652081526020017f657175616c20746f2076616c756500000000000000000000000000000000000081525060400191505060405180910390fd5b600093505b86518410156114e1576114d43388868151811015156114ad57fe5b9060200190602002015188878151811015156114c557fe5b90602001906020020151613581565b8380600101945050611492565b600194505050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561152c57600080fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561157a57600080fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561160557600080fd5b61165782600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461382690919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116ec82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461383f90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117be82600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461382690919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561190b57600080fd5b6001600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055507f8afeca650897be3183b7c0d24eba96a1b990f75c4bd74a0cfb2c0a71aec48e6182604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b600960009054906101000a900460ff1681565b600a5481565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611a3957600080fd5b339050611a8e82600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461382690919063ffffffff16565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ae68260055461382690919063ffffffff16565b6005819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050565b60135481565b6000803373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611c72576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4f776e6572204163636f756e742044657465637465640000000000000000000081525060200191505060405180910390fd5b6001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614151515611d3a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4f776e6572204163636f756e742044657465637465640000000000000000000081525060200191505060405180910390fd5b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442101515611df0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4163636f756e7420416c726561647920556e6c6f636b6564000000000000000081525060200191505060405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515611ea7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4e6f742073756666696369656e742062616c616e636520617661696c61626c6581525060200191505060405180910390fd5b611f0e6064611f00601354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461385d90919063ffffffff16565b61389890919063ffffffff16565b9050611f3d33601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613581565b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550423373ffffffffffffffffffffffffffffffffffffffff167f0b73f25bd7acdf1b9cd39a7994b00df38258455df84003d1f4273b118ce9172260135484604051808381526020018281526020019250505060405180910390a3600191505090565b600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115612139576000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121cd565b61214c838261382690919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561238357600080fd5b6123d581600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461383f90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061242d81600b5461383f90919063ffffffff16565b600b819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561254957600080fd5b81601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6db48a5f31a589c40a63205de78d2929b4c296f2ca791091ec96c337c57a76aa82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b6001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614806126cb57503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15156126d657600080fd5b6000831115156126e557600080fd5b82600a541115156126f557600080fd5b61270a83600a5461382690919063ffffffff16565b600a8190555061273c6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff168585613581565b61275183600c5461383f90919063ffffffff16565b600c8190555060008214151561285d5781600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f548b46c0ea47ecbfe2e64cc8048c063b792817fba76e585dd55f5f7777836e60848383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15b50505050565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60088054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561291f5780601f106128f45761010080835404028352916020019161291f565b820191906000526020600020905b81548152906001019060200180831161290257829003601f168201915b505050505081565b600960019054906101000a900460ff1681565b60003360011515600960019054906101000a900460ff1615151415612acc5760001515601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9209e33836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015612a1a57600080fd5b505af1158015612a2e573d6000803e3d6000fd5b505050506040513d6020811015612a4457600080fd5b810190808051906020019092919050505015151415612acb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4b5943204e6f742056657269666965640000000000000000000000000000000081525060200191505060405180910390fd5b5b336000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580612b7957506001600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614155b8015612bc557506000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15612c8057600f60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054421015612c7f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4163636f756e74206973204c6f636b656400000000000000000000000000000081525060200191505060405180910390fd5b5b3360011515600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415612d48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4163636f756e7420697320667265657a6500000000000000000000000000000081525060200191505060405180910390fd5b612d53338787613581565b6001935050505092915050565b600d6020528060005260406000206000915054906101000a900460ff1681565b6001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161480612e2a57503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515612e3557600080fd5b80600960016101000a81548160ff0219169083151502179055507f62f573f515ef5989c8f83d4701c96be7ceddfa7954525fce545787a582cf3a0081604051808215151515815260200191505060405180910390a150565b60006001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff161480612f3957503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515612f4457600080fd5b816013819055507f33cf158a2b4bbfe56fd5f369cd7f96ce47e60309629d3e90476f262148038af53383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a160019050919050565b60006001600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16148061306b57503373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b151561307657600080fd5b81601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ffa304e6a0d0908adb0c1ec0d1fe041d50a080afc56607a484321ac186a9b7beb82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160019050919050565b60006131b482600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461383f90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561340157600080fd5b80600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561352657600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60106020528060005260406000206000915090505481565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156135a757600080fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156135f457600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461368682600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461383f90919063ffffffff16565b11151561369257600080fd5b6136e481600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461382690919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061377981600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461383f90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600082821115151561383457fe5b818303905092915050565b600080828401905083811015151561385357fe5b8091505092915050565b60008060008414156138725760009150613891565b828402905082848281151561388357fe5b0414151561388d57fe5b8091505b5092915050565b60008082848115156138a657fe5b04905080915050929150505600a165627a7a72305820d0d73aff777d90f2502a72411ab17ad21197fe5e431da2a205caef5ef5d5da6c0029"
}