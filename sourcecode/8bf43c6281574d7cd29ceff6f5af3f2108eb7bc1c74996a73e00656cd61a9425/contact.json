{
  "address": "0x464d735f2def24938d5eccd3647f4b2d5a702a68",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EquipmentCompose",
  "compilerVersion": "v0.4.25-nightly.2018.5.18+commit.4d7b092c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-17\n*/\n\n/* ==================================================================== */\n/* Copyright (c) 2018 The CryptoRacing Project.  All rights reserved.\n/* \n/*   The first idle car race game of blockchain                 \n/* ==================================================================== */\n\npragma solidity ^0.4.20;\n\n/// @title ERC-165 Standard Interface Detection\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\ninterface ERC165 {\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\ncontract ERC721 is ERC165 {\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n    function balanceOf(address _owner) external view returns (uint256);\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    function approve(address _approved, uint256 _tokenId) external;\n    function setApprovalForAll(address _operator, bool _approved) external;\n    function getApproved(uint256 _tokenId) external view returns (address);\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard\ninterface ERC721TokenReceiver {\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\n}\n\ncontract AccessAdmin {\n    bool public isPaused = false;\n    address public addrAdmin;  \n\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n\n    function AccessAdmin() public {\n        addrAdmin = msg.sender;\n    }  \n\n\n    modifier onlyAdmin() {\n        require(msg.sender == addrAdmin);\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!isPaused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(isPaused);\n        _;\n    }\n\n    function setAdmin(address _newAdmin) external onlyAdmin {\n        require(_newAdmin != address(0));\n        AdminTransferred(addrAdmin, _newAdmin);\n        addrAdmin = _newAdmin;\n    }\n\n    function doPause() external onlyAdmin whenNotPaused {\n        isPaused = true;\n    }\n\n    function doUnpause() external onlyAdmin whenPaused {\n        isPaused = false;\n    }\n}\n\ncontract AccessService is AccessAdmin {\n    address public addrService;\n    address public addrFinance;\n\n    modifier onlyService() {\n        require(msg.sender == addrService);\n        _;\n    }\n\n    modifier onlyFinance() {\n        require(msg.sender == addrFinance);\n        _;\n    }\n\n    function setService(address _newService) external {\n        require(msg.sender == addrService || msg.sender == addrAdmin);\n        require(_newService != address(0));\n        addrService = _newService;\n    }\n\n    function setFinance(address _newFinance) external {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_newFinance != address(0));\n        addrFinance = _newFinance;\n    }\n\n    function withdraw(address _target, uint256 _amount) \n        external \n    {\n        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n        require(_amount > 0);\n        address receiver = _target == address(0) ? addrFinance : _target;\n        uint256 balance = this.balance;\n        if (_amount < balance) {\n            receiver.transfer(_amount);\n        } else {\n            receiver.transfer(this.balance);\n        }      \n    }\n}\n\ninterface IDataMining {\n    function subFreeMineral(address _target) external returns(bool);\n}\n\ninterface IDataEquip {\n    function isEquiped(address _target, uint256 _tokenId) external view returns(bool);\n    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool);\n    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool);\n}\n\ncontract Random {\n    uint256 _seed;\n\n    function _rand() internal returns (uint256) {\n        _seed = uint256(keccak256(_seed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\n        return _seed;\n    }\n\n    function _randBySeed(uint256 _outSeed) internal view returns (uint256) {\n        return uint256(keccak256(_outSeed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract RaceToken is ERC721, AccessAdmin {\n    /// @dev The equipment info\n    struct Fashion {\n        uint16 equipmentId;             // 0  Equipment ID\n        uint16 quality;     \t        // 1  Rarity: 1 Coarse/2 Good/3 Rare/4 Epic/5 Legendary\n        uint16 pos;         \t        // 2  Slots: 1 Engine/2 Turbine/3 BodySystem/4 Pipe/5 Suspension/6 NO2/7 Tyre/8 Transmission/9 Car\n        uint16 production;    \t        // 3  Race bonus productivity\n        uint16 attack;\t                // 4  Attack\n        uint16 defense;                 // 5  Defense\n        uint16 plunder;     \t        // 6  Plunder\n        uint16 productionMultiplier;    // 7  Percent value\n        uint16 attackMultiplier;     \t// 8  Percent value\n        uint16 defenseMultiplier;     \t// 9  Percent value\n        uint16 plunderMultiplier;     \t// 10 Percent value\n        uint16 level;       \t        // 11 level\n        uint16 isPercent;   \t        // 12  Percent value\n    }\n\n    /// @dev All equipments tokenArray (not exceeding 2^32-1)\n    Fashion[] public fashionArray;\n\n    /// @dev Amount of tokens destroyed\n    uint256 destroyFashionCount;\n\n    /// @dev Equipment token ID belong to owner address\n    mapping (uint256 => address) fashionIdToOwner;\n\n    /// @dev Equipments owner by the owner (array)\n    mapping (address => uint256[]) ownerToFashionArray;\n\n    /// @dev Equipment token ID search in owner array\n    mapping (uint256 => uint256) fashionIdToOwnerIndex;\n\n    /// @dev The authorized address for each Race\n    mapping (uint256 => address) fashionIdToApprovals;\n\n    /// @dev The authorized operators for each address\n    mapping (address => mapping (address => bool)) operatorToApprovals;\n\n    /// @dev Trust contract\n    mapping (address => bool) actionContracts;\n\n\t\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n        actionContracts[_actionAddr] = _useful;\n    }\n\n    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\n        return actionContracts[_actionAddr];\n    }\n\n    /// @dev This emits when the approved address for an Race is changed or reaffirmed.\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @dev This emits when the equipment ownership changed \n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\n\n    /// @dev This emits when the equipment created\n    event CreateFashion(address indexed owner, uint256 tokenId, uint16 equipmentId, uint16 quality, uint16 pos, uint16 level, uint16 createType);\n\n    /// @dev This emits when the equipment's attributes changed\n    event ChangeFashion(address indexed owner, uint256 tokenId, uint16 changeType);\n\n    /// @dev This emits when the equipment destroyed\n    event DeleteFashion(address indexed owner, uint256 tokenId, uint16 deleteType);\n    \n    function RaceToken() public {\n        addrAdmin = msg.sender;\n        fashionArray.length += 1;\n    }\n\n    // modifier\n    /// @dev Check if token ID is valid\n    modifier isValidToken(uint256 _tokenId) {\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        require(fashionIdToOwner[_tokenId] != address(0)); \n        _;\n    }\n\n    modifier canTransfer(uint256 _tokenId) {\n        address owner = fashionIdToOwner[_tokenId];\n        require(msg.sender == owner || msg.sender == fashionIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender]);\n        _;\n    }\n\n    // ERC721\n    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\n        // ERC165 || ERC721 || ERC165^ERC721\n        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\n    }\n        \n    function name() public pure returns(string) {\n        return \"Race Token\";\n    }\n\n    function symbol() public pure returns(string) {\n        return \"Race\";\n    }\n\n    /// @dev Search for token quantity address\n    /// @param _owner Address that needs to be searched\n    /// @return Returns token quantity\n    function balanceOf(address _owner) external view returns(uint256) {\n        require(_owner != address(0));\n        return ownerToFashionArray[_owner].length;\n    }\n\n    /// @dev Find the owner of an Race\n    /// @param _tokenId The tokenId of Race\n    /// @return Give The address of the owner of this Race\n    function ownerOf(uint256 _tokenId) external view /*isValidToken(_tokenId)*/ returns (address owner) {\n        return fashionIdToOwner[_tokenId];\n    }\n\n    /// @dev Transfers the ownership of an Race from one address to another address\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, data);\n    }\n\n    /// @dev Transfers the ownership of an Race from one address to another address\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    /// @dev Transfer ownership of an Race, '_to' must be a vaild address, or the Race will lost\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId)\n        external\n        whenNotPaused\n        isValidToken(_tokenId)\n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @dev Set or reaffirm the approved address for an Race\n    /// @param _approved The new approved Race controller\n    /// @param _tokenId The Race to approve\n    function approve(address _approved, uint256 _tokenId)\n        external\n        whenNotPaused\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\n\n        fashionIdToApprovals[_tokenId] = _approved;\n        Approval(owner, _approved, _tokenId);\n    }\n\n    /// @dev Enable or disable approval for a third party (\"operator\") to manage all your asset.\n    /// @param _operator Address to add to the set of authorized operators.\n    /// @param _approved True if the operators is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) \n        external \n        whenNotPaused\n    {\n        operatorToApprovals[msg.sender][_operator] = _approved;\n        ApprovalForAll(msg.sender, _operator, _approved);\n    }\n\n    /// @dev Get the approved address for a single Race\n    /// @param _tokenId The Race to find the approved address for\n    /// @return The approved address for this Race, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view isValidToken(_tokenId) returns (address) {\n        return fashionIdToApprovals[_tokenId];\n    }\n\n    /// @dev Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the Races\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n        return operatorToApprovals[_owner][_operator];\n    }\n\n    /// @dev Count Races tracked by this contract\n    /// @return A count of valid Races tracked by this contract, where each one of\n    ///  them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256) {\n        return fashionArray.length - destroyFashionCount - 1;\n    }\n\n    /// @dev Do the real transfer with out any condition checking\n    /// @param _from The old owner of this Race(If created: 0x0)\n    /// @param _to The new owner of this Race \n    /// @param _tokenId The tokenId of the Race\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        if (_from != address(0)) {\n            uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n            uint256[] storage fsArray = ownerToFashionArray[_from];\n            require(fsArray[indexFrom] == _tokenId);\n\n            // If the Race is not the element of array, change it to with the last\n            if (indexFrom != fsArray.length - 1) {\n                uint256 lastTokenId = fsArray[fsArray.length - 1];\n                fsArray[indexFrom] = lastTokenId; \n                fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n            }\n            fsArray.length -= 1; \n            \n            if (fashionIdToApprovals[_tokenId] != address(0)) {\n                delete fashionIdToApprovals[_tokenId];\n            }      \n        }\n\n        // Give the Race to '_to'\n        fashionIdToOwner[_tokenId] = _to;\n        ownerToFashionArray[_to].push(_tokenId);\n        fashionIdToOwnerIndex[_tokenId] = ownerToFashionArray[_to].length - 1;\n        \n        Transfer(_from != address(0) ? _from : this, _to, _tokenId);\n    }\n\n    /// @dev Actually perform the safeTransferFrom\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        internal\n        isValidToken(_tokenId) \n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n\n        // Do the callback after everything is done to avoid reentrancy attack\n        uint256 codeSize;\n        assembly { codeSize := extcodesize(_to) }\n        if (codeSize == 0) {\n            return;\n        }\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\n        // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")) = 0xf0b9e5ba;\n        require(retval == 0xf0b9e5ba);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n    /// @dev Equipment creation\n    /// @param _owner Owner of the equipment created\n    /// @param _attrs Attributes of the equipment created\n    /// @return Token ID of the equipment created\n    function createFashion(address _owner, uint16[13] _attrs, uint16 _createType) \n        external \n        whenNotPaused\n        returns(uint256)\n    {\n        require(actionContracts[msg.sender]);\n        require(_owner != address(0));\n\n        uint256 newFashionId = fashionArray.length;\n        require(newFashionId < 4294967296);\n\n        fashionArray.length += 1;\n        Fashion storage fs = fashionArray[newFashionId];\n        fs.equipmentId = _attrs[0];\n        fs.quality = _attrs[1];\n        fs.pos = _attrs[2];\n        if (_attrs[3] != 0) {\n            fs.production = _attrs[3];\n        }\n        \n        if (_attrs[4] != 0) {\n            fs.attack = _attrs[4];\n        }\n\t\t\n\t\tif (_attrs[5] != 0) {\n            fs.defense = _attrs[5];\n        }\n       \n        if (_attrs[6] != 0) {\n            fs.plunder = _attrs[6];\n        }\n        \n        if (_attrs[7] != 0) {\n            fs.productionMultiplier = _attrs[7];\n        }\n\n        if (_attrs[8] != 0) {\n            fs.attackMultiplier = _attrs[8];\n        }\n\n        if (_attrs[9] != 0) {\n            fs.defenseMultiplier = _attrs[9];\n        }\n\n        if (_attrs[10] != 0) {\n            fs.plunderMultiplier = _attrs[10];\n        }\n\n        if (_attrs[11] != 0) {\n            fs.level = _attrs[11];\n        }\n\n        if (_attrs[12] != 0) {\n            fs.isPercent = _attrs[12];\n        }\n        \n        _transfer(0, _owner, newFashionId);\n        CreateFashion(_owner, newFashionId, _attrs[0], _attrs[1], _attrs[2], _attrs[11], _createType);\n        return newFashionId;\n    }\n\n    /// @dev One specific attribute of the equipment modified\n    function _changeAttrByIndex(Fashion storage _fs, uint16 _index, uint16 _val) internal {\n        if (_index == 3) {\n            _fs.production = _val;\n        } else if(_index == 4) {\n            _fs.attack = _val;\n        } else if(_index == 5) {\n            _fs.defense = _val;\n        } else if(_index == 6) {\n            _fs.plunder = _val;\n        }else if(_index == 7) {\n            _fs.productionMultiplier = _val;\n        }else if(_index == 8) {\n            _fs.attackMultiplier = _val;\n        }else if(_index == 9) {\n            _fs.defenseMultiplier = _val;\n        }else if(_index == 10) {\n            _fs.plunderMultiplier = _val;\n        } else if(_index == 11) {\n            _fs.level = _val;\n        } \n       \n    }\n\n    /// @dev Equiment attributes modified (max 4 stats modified)\n    /// @param _tokenId Equipment Token ID\n    /// @param _idxArray Stats order that must be modified\n    /// @param _params Stat value that must be modified\n    /// @param _changeType Modification type such as enhance, socket, etc.\n    function changeFashionAttr(uint256 _tokenId, uint16[4] _idxArray, uint16[4] _params, uint16 _changeType) \n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        Fashion storage fs = fashionArray[_tokenId];\n        if (_idxArray[0] > 0) {\n            _changeAttrByIndex(fs, _idxArray[0], _params[0]);\n        }\n\n        if (_idxArray[1] > 0) {\n            _changeAttrByIndex(fs, _idxArray[1], _params[1]);\n        }\n\n        if (_idxArray[2] > 0) {\n            _changeAttrByIndex(fs, _idxArray[2], _params[2]);\n        }\n\n        if (_idxArray[3] > 0) {\n            _changeAttrByIndex(fs, _idxArray[3], _params[3]);\n        }\n\n        ChangeFashion(fashionIdToOwner[_tokenId], _tokenId, _changeType);\n    }\n\n    /// @dev Equipment destruction\n    /// @param _tokenId Equipment Token ID\n    /// @param _deleteType Destruction type, such as craft\n    function destroyFashion(uint256 _tokenId, uint16 _deleteType)\n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        address _from = fashionIdToOwner[_tokenId];\n        uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n        uint256[] storage fsArray = ownerToFashionArray[_from]; \n        require(fsArray[indexFrom] == _tokenId);\n\n        if (indexFrom != fsArray.length - 1) {\n            uint256 lastTokenId = fsArray[fsArray.length - 1];\n            fsArray[indexFrom] = lastTokenId; \n            fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n        }\n        fsArray.length -= 1; \n\n        fashionIdToOwner[_tokenId] = address(0);\n        delete fashionIdToOwnerIndex[_tokenId];\n        destroyFashionCount += 1;\n\n        Transfer(_from, 0, _tokenId);\n\n        DeleteFashion(_from, _tokenId, _deleteType);\n    }\n\n    /// @dev Safe transfer by trust contracts\n    function safeTransferByContract(uint256 _tokenId, address _to) \n        external\n        whenNotPaused\n    {\n        require(actionContracts[msg.sender]);\n\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner != _to);\n\n        _transfer(owner, _to, _tokenId);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n    /// @dev Get fashion attrs by tokenId front\n    function getFashionFront(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint256[14] datas) {\n        Fashion storage fs = fashionArray[_tokenId];\n        datas[0] = fs.equipmentId;\n        datas[1] = fs.quality;\n        datas[2] = fs.pos;\n        datas[3] = fs.production;\n        datas[4] = fs.attack;\n        datas[5] = fs.defense;\n        datas[6] = fs.plunder;\n        datas[7] = fs.productionMultiplier;\n        datas[8] = fs.attackMultiplier;\n        datas[9] = fs.defenseMultiplier;\n        datas[10] = fs.plunderMultiplier;\n        datas[11] = fs.level;\n        datas[12] = fs.isPercent; \n        datas[13] = _tokenId;      \n    }\n\n    /// @dev Get fashion attrs by tokenId back\n    function getFashion(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint16[13] datas) {\n        Fashion storage fs = fashionArray[_tokenId];\n        datas[0] = fs.equipmentId;\n        datas[1] = fs.quality;\n        datas[2] = fs.pos;\n        datas[3] = fs.production;\n        datas[4] = fs.attack;\n        datas[5] = fs.defense;\n        datas[6] = fs.plunder;\n        datas[7] = fs.productionMultiplier;\n        datas[8] = fs.attackMultiplier;\n        datas[9] = fs.defenseMultiplier;\n        datas[10] = fs.plunderMultiplier;\n        datas[11] = fs.level;\n        datas[12] = fs.isPercent;      \n    }\n\n\n    /// @dev Get tokenIds and flags by owner\n    function getOwnFashions(address _owner) external view returns(uint256[] tokens, uint32[] flags) {\n        require(_owner != address(0));\n        uint256[] storage fsArray = ownerToFashionArray[_owner];\n        uint256 length = fsArray.length;\n        tokens = new uint256[](length);\n        flags = new uint32[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            tokens[i] = fsArray[i];\n            Fashion storage fs = fashionArray[fsArray[i]];\n            flags[i] = uint32(uint32(fs.equipmentId) * 10000 + uint32(fs.quality) * 100 + fs.pos);\n        }\n    }\n\n\n    /// @dev Race token info returned based on Token ID transfered (64 at most)\n    function getFashionsAttrs(uint256[] _tokens) external view returns(uint256[] attrs) {\n        uint256 length = _tokens.length;\n        attrs = new uint256[](length * 14);\n        uint256 tokenId;\n        uint256 index;\n        for (uint256 i = 0; i < length; ++i) {\n            tokenId = _tokens[i];\n            if (fashionIdToOwner[tokenId] != address(0)) {\n                index = i * 14;\n                Fashion storage fs = fashionArray[tokenId];\n                attrs[index]     = fs.equipmentId;\n\t\t\t\tattrs[index + 1] = fs.quality;\n                attrs[index + 2] = fs.pos;\n                attrs[index + 3] = fs.production;\n                attrs[index + 4] = fs.attack;\n                attrs[index + 5] = fs.defense;\n                attrs[index + 6] = fs.plunder;\n                attrs[index + 7] = fs.productionMultiplier;\n                attrs[index + 8] = fs.attackMultiplier;\n                attrs[index + 9] = fs.defenseMultiplier;\n                attrs[index + 10] = fs.plunderMultiplier;\n                attrs[index + 11] = fs.level;\n                attrs[index + 12] = fs.isPercent; \n                attrs[index + 13] = tokenId;  \n            }   \n        }\n    }\n}\n\n//Tournament bonus interface\ninterface IRaceCoin {\n    function addTotalEtherPool(uint256 amount) external;\n    function addPlayerToList(address player) external;\n    function increasePlayersAttribute(address player, uint16[13] param) external;\n    function reducePlayersAttribute(address player, uint16[13] param) external;\n}\n\ncontract EquipmentCompose is Random, AccessService {\n    using SafeMath for uint256;\n\n    event ComposeSuccess(address indexed owner, uint256 tokenId, uint16 protoId, uint16 quality, uint16 pos);\n    \n    /// @dev prizepool percent\n    uint256 constant prizePoolPercent = 80;\n    /// @dev prizepool contact address\n    address poolContract;\n    /// @dev DataEquip contract address\n    IDataEquip public equipContract;\n    /// @dev RaceToken(NFT) contract address\n    RaceToken public tokenContract;\n\n    IRaceCoin public raceCoinContract;\n\n    function EquipmentCompose(address _nftAddr) public {\n        addrAdmin = msg.sender;\n        addrService = msg.sender;\n        addrFinance = msg.sender;\n\n        tokenContract = RaceToken(_nftAddr);\n    }\n\n    function() external payable {\n\n    }\n\n    \n    function setPrizePool(address _addr) external onlyAdmin {\n        require(_addr != address(0));\n        poolContract = _addr;\n        raceCoinContract = IRaceCoin(_addr);\n    }\n\n    function setDataEquip(address _addr) external onlyAdmin {\n        require(_addr != address(0));\n        equipContract = IDataEquip(_addr);\n    }\n\n    function _getFashionParam(uint256 _seed, uint16 _protoId, uint16 _quality, uint16 _pos) internal pure returns(uint16[13] attrs) {\n        uint256 curSeed = _seed;\n        attrs[0] = _protoId;\n        attrs[1] = _quality;\n        attrs[2] = _pos;\n\n        uint16 qtyParam = 0;\n        if (_quality <= 3) {\n            qtyParam = _quality - 1;\n        } else if (_quality == 4) {\n            qtyParam = 4;\n        } else if (_quality == 5) {\n            qtyParam = 7;\n        }\n\n        uint256 rdm = _protoId % 3;\n\n        curSeed /= 10000;\n        uint256 tmpVal = (curSeed % 10000) % 21 + 90;\n\n        if (rdm == 0) {\n            if (_pos == 1) {\n                attrs[3] = uint16((20 + qtyParam * 20) * tmpVal / 100);              // +production\n            } else if (_pos == 2) {\n                attrs[4] = uint16((100 + qtyParam * 100) * tmpVal / 100);            // +attack\n            } else if (_pos == 3) {\n                attrs[5] = uint16((70 + qtyParam * 70) * tmpVal / 100);              // +defense\n            } else if (_pos == 4) {\n                attrs[6] = uint16((500 + qtyParam * 500) * tmpVal / 100);            // +plunder\n            } else if (_pos == 5) {\n                attrs[7] = uint16((4 + qtyParam * 4) * tmpVal / 100);                // +productionMultiplier\n            } else if (_pos == 6) {\n                attrs[8] = uint16((5 + qtyParam * 5) * tmpVal / 100);                // +attackMultiplier\n            } else if (_pos == 7) {\n                attrs[9] = uint16((5 + qtyParam * 5) * tmpVal / 100);                // +defenseMultiplier\n            } else {\n                attrs[10] = uint16((4 + qtyParam * 4) * tmpVal / 100);               // +plunderMultiplier\n            } \n        } else if (rdm == 1) {\n            if (_pos == 1) {\n                attrs[3] = uint16((19 + qtyParam * 19) * tmpVal / 100);              // +production\n            } else if (_pos == 2) {\n                attrs[4] = uint16((90 + qtyParam * 90) * tmpVal / 100);            // +attack\n            } else if (_pos == 3) {\n                attrs[5] = uint16((63 + qtyParam * 63) * tmpVal / 100);              // +defense\n            } else if (_pos == 4) {\n                attrs[6] = uint16((450 + qtyParam * 450) * tmpVal / 100);            // +plunder\n            } else if (_pos == 5) {\n                attrs[7] = uint16((3 + qtyParam * 3) * tmpVal / 100);                // +productionMultiplier\n            } else if (_pos == 6) {\n                attrs[8] = uint16((4 + qtyParam * 4) * tmpVal / 100);                // +attackMultiplier\n            } else if (_pos == 7) {\n                attrs[9] = uint16((4 + qtyParam * 4) * tmpVal / 100);                // +defenseMultiplier\n            } else {\n                attrs[10] = uint16((3 + qtyParam * 3) * tmpVal / 100);               // +plunderMultiplier\n            } \n        } else {\n            if (_pos == 1) {\n                attrs[3] = uint16((21 + qtyParam * 21) * tmpVal / 100);              // +production\n            } else if (_pos == 2) {\n                attrs[4] = uint16((110 + qtyParam * 110) * tmpVal / 100);            // +attack\n            } else if (_pos == 3) {\n                attrs[5] = uint16((77 + qtyParam * 77) * tmpVal / 100);              // +defense\n            } else if (_pos == 4) {\n                attrs[6] = uint16((550 + qtyParam * 550) * tmpVal / 100);            // +plunder\n            } else if (_pos == 5) {\n                attrs[7] = uint16((5 + qtyParam * 5) * tmpVal / 100);                // +productionMultiplier\n            } else if (_pos == 6) {\n                attrs[8] = uint16((6 + qtyParam * 6) * tmpVal / 100);                // +attackMultiplier\n            } else if (_pos == 7) {\n                attrs[9] = uint16((6 + qtyParam * 6) * tmpVal / 100);                // +defenseMultiplier\n            } else {\n                attrs[10] = uint16((5 + qtyParam * 5) * tmpVal / 100);               // +plunderMultiplier\n            } \n        }\n        attrs[11] = 0;\n        attrs[12] = 0;\n    }\n\n    function _transferHelper(uint256 ethVal) private {\n        uint256 fVal;\n        uint256 pVal;\n        \n        fVal = ethVal.mul(prizePoolPercent).div(100);\n        pVal = ethVal.sub(fVal);\n        addrFinance.transfer(pVal);\n        if (poolContract != address(0) && pVal > 0) {\n            poolContract.transfer(fVal);\n            raceCoinContract.addTotalEtherPool(fVal);\n        } \n    }\n\n\n    function highCompose(uint256 token1, uint256 token2, uint256 token3) \n        external\n        payable\n        whenNotPaused\n    {\n        require(msg.value >= 0.005 ether);\n        require(tokenContract.ownerOf(token1) == msg.sender);\n        require(tokenContract.ownerOf(token2) == msg.sender);\n        require(tokenContract.ownerOf(token3) == msg.sender);\n        require(!equipContract.isEquipedAny3(msg.sender, token1, token2, token3));\n\n        uint16 protoId;\n        uint16 quality;\n        uint16 pos; \n        uint16[13] memory fashionData = tokenContract.getFashion(token1);\n        protoId = fashionData[0];\n        quality = fashionData[1];\n        pos = fashionData[2];\n    \n\n        fashionData = tokenContract.getFashion(token2);\n        require(quality == fashionData[1]);\n        require(pos == fashionData[2]);\n\n        fashionData = tokenContract.getFashion(token3);\n        require(quality == fashionData[1]);\n        require(pos == fashionData[2]);\n\n        uint256 seed = _rand();\n        uint16[13] memory attrs = _getFashionParam(seed, protoId, quality + 1, pos);\n\n        tokenContract.destroyFashion(token1, 1);\n        tokenContract.destroyFashion(token2, 1);\n        tokenContract.destroyFashion(token3, 1);\n\n        uint256 newTokenId = tokenContract.createFashion(msg.sender, attrs, 4);\n        _transferHelper(0.005 ether);\n\n        if (msg.value > 0.005 ether) {\n            msg.sender.transfer(msg.value - 0.005 ether);\n        }\n\n        emit ComposeSuccess(msg.sender, newTokenId, attrs[0], attrs[1], attrs[2]);\n    }\n}",
  "bytecode": "60806040526000600160006101000a81548160ff02191690831515021790555034801561002b57600080fd5b5060405160208061291083398101806040528101908080519060200190929190505050336001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061276f806101a16000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806330efb8d3146100e8578063336c6d39146100ff57806355a373d61461014257806362b33b551461019957806367d0661d146101f0578063704b6c021461020757806382cb9df91461024a57806391702ddc146102a15780639b8d3064146102d5578063b187bd2614610318578063ba112d5014610347578063bf8bdac11461038a578063bfae2f0e146103cd578063c11b225214610424578063cdd977e01461047b578063f3fef3a3146104d2575b005b3480156100f457600080fd5b506100fd61051f565b005b34801561010b57600080fd5b50610140600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105b2565b005b34801561014e57600080fd5b506101576106ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a557600080fd5b506101ae6106f4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101fc57600080fd5b5061020561071a565b005b34801561021357600080fd5b50610248600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107ad565b005b34801561025657600080fd5b5061025f610902565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102d3600480360381019080803590602001909291908035906020019092919080359060200190929190505050610928565b005b3480156102e157600080fd5b50610316600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115ad565b005b34801561032457600080fd5b5061032d6116e0565b604051808215151515815260200191505060405180910390f35b34801561035357600080fd5b50610388600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116f3565b005b34801561039657600080fd5b506103cb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117ce565b005b3480156103d957600080fd5b506103e2611901565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043057600080fd5b50610439611926565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048757600080fd5b5061049061194c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104de57600080fd5b5061051d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611972565b005b6001809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561057a57600080fd5b600160009054906101000a900460ff16151561059557600080fd5b6000600160006101000a81548160ff021916908315150217905550565b6001809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561060d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561064957600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561077557600080fd5b600160009054906101000a900460ff1615151561079157600080fd5b60018060006101000a81548160ff021916908315150217905550565b6001809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561080857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561084457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166001809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec660405160405180910390a3806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600061093561271f565b600061093f61271f565b6000600160009054906101000a900460ff1615151561095d57600080fd5b6611c37937e08000341015151561097357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8c6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610a1b57600080fd5b505af1158015610a2f573d6000803e3d6000fd5b505050506040513d6020811015610a4557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515610a7857600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610b2057600080fd5b505af1158015610b34573d6000803e3d6000fd5b505050506040513d6020811015610b4a57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515610b7d57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610c2557600080fd5b505af1158015610c39573d6000803e3d6000fd5b505050506040513d6020811015610c4f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515610c8257600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f9c71f79338c8c8c6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001828152602001945050505050602060405180830381600087803b158015610d5757600080fd5b505af1158015610d6b573d6000803e3d6000fd5b505050506040513d6020811015610d8157600080fd5b8101908080519060200190929190505050151515610d9e57600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663425189e08b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101a060405180830381600087803b158015610e3057600080fd5b505af1158015610e44573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a0811015610e6a57600080fd5b81019080919050509350836000600d81101515610e8357fe5b60200201519650836001600d81101515610e9957fe5b60200201519550836002600d81101515610eaf57fe5b60200201519450600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663425189e08a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101a060405180830381600087803b158015610f4857600080fd5b505af1158015610f5c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a0811015610f8257600080fd5b81019080919050509350836001600d81101515610f9b57fe5b602002015161ffff168661ffff16141515610fb557600080fd5b836002600d81101515610fc457fe5b602002015161ffff168561ffff16141515610fde57600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663425189e0896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101a060405180830381600087803b15801561107057600080fd5b505af1158015611084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101a08110156110aa57600080fd5b81019080919050509350836001600d811015156110c357fe5b602002015161ffff168661ffff161415156110dd57600080fd5b836002600d811015156110ec57fe5b602002015161ffff168561ffff1614151561110657600080fd5b61110e611b6a565b925061111f83886001890188611bf4565b9150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630378f83f8b60016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018261ffff16815260200192505050600060405180830381600087803b1580156111bf57600080fd5b505af11580156111d3573d6000803e3d6000fd5b50505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630378f83f8a60016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018261ffff16815260200192505050600060405180830381600087803b15801561127557600080fd5b505af1158015611289573d6000803e3d6000fd5b50505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630378f83f8960016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018261ffff16815260200192505050600060405180830381600087803b15801561132b57600080fd5b505af115801561133f573d6000803e3d6000fd5b50505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1406049338460046040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600d60200280838360005b8381101561140d5780820151818401526020810190506113f2565b505050509050018261ffff1681526020019350505050602060405180830381600087803b15801561143d57600080fd5b505af1158015611451573d6000803e3d6000fd5b505050506040513d602081101561146757600080fd5b8101908080519060200190929190505050905061148a6611c37937e0800061248a565b6611c37937e080003411156114ea573373ffffffffffffffffffffffffffffffffffffffff166108fc6611c37937e0800034039081150290604051600060405180830381858888f193505050501580156114e8573d6000803e3d6000fd5b505b3373ffffffffffffffffffffffffffffffffffffffff167fb8f93b6ee7a79dc8fb386209ef989a56e4f51f5735e63135fbbdf10c6e15383c82846000600d8110151561153257fe5b6020020151856001600d8110151561154657fe5b6020020151866002600d8110151561155a57fe5b6020020151604051808581526020018461ffff1661ffff1681526020018361ffff1661ffff1681526020018261ffff1661ffff16815260200194505050505060405180910390a250505050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061165557506001809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561166057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561169c57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900460ff1681565b6001809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561174e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561178a57600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061187657506001809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561188157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156118bd57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6001809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611a1d57506001809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611a2857600080fd5b600083111515611a3757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611a715783611a95565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b91503073ffffffffffffffffffffffffffffffffffffffff1631905080831015611b05578173ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611aff573d6000803e3d6000fd5b50611b64565b8173ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611b62573d6000803e3d6000fd5b505b50505050565b60008054600143034041446040518085815260200184600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401828152602001945050505050604051809103902060019004600081905550600054905090565b611bfc61271f565b60008060008088935087856000600d81101515611c1557fe5b602002019061ffff16908161ffff168152505086856001600d81101515611c3857fe5b602002019061ffff16908161ffff168152505085856002600d81101515611c5b57fe5b602002019061ffff16908161ffff16815250506000925060038761ffff16111515611c8b57600187039250611cb5565b60048761ffff161415611ca15760049250611cb4565b60058761ffff161415611cb357600792505b5b5b60038861ffff16811515611cc557fe5b0661ffff16915061271084811515611cd957fe5b049350605a601561271086811515611ced57fe5b06811515611cf757fe5b060190506000821415611f685760018661ffff161415611d51576064816014850260140161ffff1602811515611d2957fe5b04856003600d81101515611d3957fe5b602002019061ffff16908161ffff1681525050611f63565b60028661ffff161415611d9e576064816064850260640161ffff1602811515611d7657fe5b04856004600d81101515611d8657fe5b602002019061ffff16908161ffff1681525050611f62565b60038661ffff161415611deb576064816046850260460161ffff1602811515611dc357fe5b04856005600d81101515611dd357fe5b602002019061ffff16908161ffff1681525050611f61565b60048661ffff161415611e3a576064816101f485026101f40161ffff1602811515611e1257fe5b04856006600d81101515611e2257fe5b602002019061ffff16908161ffff1681525050611f60565b60058661ffff161415611e87576064816004850260040161ffff1602811515611e5f57fe5b04856007600d81101515611e6f57fe5b602002019061ffff16908161ffff1681525050611f5f565b60068661ffff161415611ed4576064816005850260050161ffff1602811515611eac57fe5b04856008600d81101515611ebc57fe5b602002019061ffff16908161ffff1681525050611f5e565b60078661ffff161415611f21576064816005850260050161ffff1602811515611ef957fe5b04856009600d81101515611f0957fe5b602002019061ffff16908161ffff1681525050611f5d565b6064816004850260040161ffff1602811515611f3957fe5b0485600a600d81101515611f4957fe5b602002019061ffff16908161ffff16815250505b5b5b5b5b5b5b612436565b60018214156121d55760018661ffff161415611fbe576064816013850260130161ffff1602811515611f9657fe5b04856003600d81101515611fa657fe5b602002019061ffff16908161ffff16815250506121d0565b60028661ffff16141561200b57606481605a8502605a0161ffff1602811515611fe357fe5b04856004600d81101515611ff357fe5b602002019061ffff16908161ffff16815250506121cf565b60038661ffff16141561205857606481603f8502603f0161ffff160281151561203057fe5b04856005600d8110151561204057fe5b602002019061ffff16908161ffff16815250506121ce565b60048661ffff1614156120a7576064816101c285026101c20161ffff160281151561207f57fe5b04856006600d8110151561208f57fe5b602002019061ffff16908161ffff16815250506121cd565b60058661ffff1614156120f4576064816003850260030161ffff16028115156120cc57fe5b04856007600d811015156120dc57fe5b602002019061ffff16908161ffff16815250506121cc565b60068661ffff161415612141576064816004850260040161ffff160281151561211957fe5b04856008600d8110151561212957fe5b602002019061ffff16908161ffff16815250506121cb565b60078661ffff16141561218e576064816004850260040161ffff160281151561216657fe5b04856009600d8110151561217657fe5b602002019061ffff16908161ffff16815250506121ca565b6064816003850260030161ffff16028115156121a657fe5b0485600a600d811015156121b657fe5b602002019061ffff16908161ffff16815250505b5b5b5b5b5b5b612435565b60018661ffff161415612222576064816015850260150161ffff16028115156121fa57fe5b04856003600d8110151561220a57fe5b602002019061ffff16908161ffff1681525050612434565b60028661ffff16141561226f57606481606e8502606e0161ffff160281151561224757fe5b04856004600d8110151561225757fe5b602002019061ffff16908161ffff1681525050612433565b60038661ffff1614156122bc57606481604d8502604d0161ffff160281151561229457fe5b04856005600d811015156122a457fe5b602002019061ffff16908161ffff1681525050612432565b60048661ffff16141561230b5760648161022685026102260161ffff16028115156122e357fe5b04856006600d811015156122f357fe5b602002019061ffff16908161ffff1681525050612431565b60058661ffff161415612358576064816005850260050161ffff160281151561233057fe5b04856007600d8110151561234057fe5b602002019061ffff16908161ffff1681525050612430565b60068661ffff1614156123a5576064816006850260060161ffff160281151561237d57fe5b04856008600d8110151561238d57fe5b602002019061ffff16908161ffff168152505061242f565b60078661ffff1614156123f2576064816006850260060161ffff16028115156123ca57fe5b04856009600d811015156123da57fe5b602002019061ffff16908161ffff168152505061242e565b6064816005850260050161ffff160281151561240a57fe5b0485600a600d8110151561241a57fe5b602002019061ffff16908161ffff16815250505b5b5b5b5b5b5b5b5b600085600b600d8110151561244757fe5b602002019061ffff16908161ffff1681525050600085600c600d8110151561246b57fe5b602002019061ffff16908161ffff168152505050505050949350505050565b6000806124b460646124a66050866126b090919063ffffffff16565b6126eb90919063ffffffff16565b91506124c9828461270690919063ffffffff16565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612533573d6000803e3d6000fd5b50600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156125935750600081115b156126ab57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015612600573d6000803e3d6000fd5b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e7526bd836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561269257600080fd5b505af11580156126a6573d6000803e3d6000fd5b505050505b505050565b60008060008414156126c557600091506126e4565b82840290508284828115156126d657fe5b041415156126e057fe5b8091505b5092915050565b60008082848115156126f957fe5b0490508091505092915050565b600082821115151561271457fe5b818303905092915050565b6101a060405190810160405280600d906020820280388339808201915050905050905600a165627a7a72305820fbc6600e49f2392edc5b415eba6a25b4bdfb0affd03dc9fed3ad3d1466bf826e0029000000000000000000000000df9ca851164984d7665d4db1da0921c77c6105ad",
  "constructorArguments": "000000000000000000000000df9ca851164984d7665d4db1da0921c77c6105ad"
}