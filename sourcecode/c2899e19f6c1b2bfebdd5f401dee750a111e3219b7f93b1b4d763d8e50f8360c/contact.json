{
  "address": "0x114f1fc16db3615de301b39914625a79b912ea11",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UHCToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-19\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// Actually, it is not a RingList anymore. It's a Random Access List\n// however, needed cyclic list functionality could modeled on top of Random Access List\n// Recommended name - AddressSet\nlibrary AddressSet {\n\n    // Name is kept for drop-in replacement reasons. Recommended name `Instance`\n    struct Instance {\n        address[] list;\n        mapping(address => uint256) idx; // actually stores indexes incremented by 1\n    }\n\n    // _direction parameter is kept for drop-in replacement consistency; consider remove the parameter\n    // Gas efficient version of push\n    function push(Instance storage self, address addr) internal returns (bool) {\n        if (self.idx[addr] != 0) return false;\n        self.idx[addr] = self.list.push(addr);\n        return true;\n    }\n\n    // Now in O(1)\n    function sizeOf(Instance storage self) internal view returns (uint256) {\n        return self.list.length;\n    }\n\n    // Gets i-th address in O(1) time (RANDOM ACCESS!!!)\n    function getAddress(Instance storage self, uint256 index) internal view returns (address) {\n        return (index < self.list.length) ? self.list[index] : address(0);\n    }\n\n    // Gas efficient version of remove\n    function remove(Instance storage self, address addr) internal returns (bool) {\n        if (self.idx[addr] == 0) return false;\n        uint256 idx = self.idx[addr];\n        delete self.idx[addr];\n        if (self.list.length == idx) {\n            self.list.length--;\n        } else {\n            address last = self.list[self.list.length-1];\n            self.list.length--;\n            self.list[idx-1] = last;\n            self.idx[last] = idx;\n        }\n        return true;\n    }\n}\n\ncontract ERC20 {\n    function totalSupply() external view returns (uint256 _totalSupply);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract UHCToken is ERC20 {\n    using SafeMath for uint256;\n    using AddressSet for AddressSet.Instance;\n\n    address public owner;\n    address public subowner;\n\n    bool    public              contractEnable = true;\n\n    string  public              name = \"UFOHotelCoin\";\n    string  public              symbol = \"UHC\";\n    uint8   public              decimals = 4;\n    uint256 private             summarySupply;\n    bool    public              isTransferFee;\n    uint8   public              transferFeePercent = 3;\n    uint8   public              refererFeePercent = 1;\n\n    struct account{\n        uint256 balance;\n        uint8 group;\n        uint8 status;\n        address referer;\n        bool isBlocked;\n        bool withoutTransferFee;\n    }\n\n    mapping(address => account)                      private   accounts;\n    mapping(address => mapping (address => uint256)) private   allowed;\n    mapping(bytes => address)                        private   promos;\n\n    AddressSet.Instance                             private   holders;\n\n    struct groupPolicy {\n        uint8 _default;\n        uint8 _backend;\n        uint8 _admin;\n        uint8 _owner;\n    }\n\n    groupPolicy public groupPolicyInstance = groupPolicy(0, 3, 4, 9);\n\n    event EvGroupChanged(address indexed _address, uint8 _oldgroup, uint8 _newgroup);\n    event EvMigration(address indexed _address, uint256 _balance, uint256 _secret);\n    event EvUpdateStatus(address indexed _address, uint8 _oldstatus, uint8 _newstatus);\n    event EvSetReferer(address indexed _referal, address _referer);\n\n    constructor (string _name, string _symbol, uint8 _decimals,uint256 _summarySupply, uint8 _transferFeePercent, uint8 _refererFeePercent) public {\n        require(_refererFeePercent < _transferFeePercent);\n        owner = msg.sender;\n\n        accounts[owner] = account(_summarySupply, groupPolicyInstance._owner, 4, address(0), false, false);\n\n        holders.push(msg.sender);\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        summarySupply = _summarySupply;\n        transferFeePercent = _transferFeePercent;\n        refererFeePercent = _refererFeePercent;\n        emit Transfer(address(0), msg.sender, _summarySupply);\n    }\n\n    modifier minGroup(int _require) {\n        require(accounts[msg.sender].group >= _require);\n        _;\n    }\n\n    modifier onlySubowner() {\n        require(msg.sender == subowner);\n        _;\n    }\n\n    modifier whenNotMigrating {\n        require(contractEnable);\n        _;\n    }\n\n    modifier whenMigrating {\n        require(!contractEnable);\n        _;\n    }\n\n    function serviceGroupChange(address _address, uint8 _group) minGroup(groupPolicyInstance._admin) external returns(uint8) {\n        require(_address != address(0));\n        require(_group <= groupPolicyInstance._admin);\n\n        uint8 old = accounts[_address].group;\n        require(old < accounts[msg.sender].group);\n\n        accounts[_address].group = _group;\n        emit EvGroupChanged(_address, old, _group);\n\n        return accounts[_address].group;\n    }\n\n    function serviceTransferOwnership(address newOwner) minGroup(groupPolicyInstance._owner) external {\n        require(newOwner != address(0));\n\n        subowner = newOwner;\n    }\n\n    function serviceClaimOwnership() onlySubowner() external {\n        address temp = owner;\n        uint256 value = accounts[owner].balance;\n\n        accounts[owner].balance = accounts[owner].balance.sub(value);\n        holders.remove(owner);\n        accounts[msg.sender].balance = accounts[msg.sender].balance.add(value);\n        holders.push(msg.sender);\n\n        owner = msg.sender;\n        subowner = address(0);\n\n        delete accounts[temp].group;\n        uint8 oldGroup = accounts[msg.sender].group;\n        accounts[msg.sender].group = groupPolicyInstance._owner;\n\n        emit EvGroupChanged(msg.sender, oldGroup, groupPolicyInstance._owner);\n        emit Transfer(temp, owner, value);\n    }\n\n    function serviceSwitchTransferAbility(address _address) external minGroup(groupPolicyInstance._admin) returns(bool) {\n        require(accounts[_address].group < accounts[msg.sender].group);\n\n        accounts[_address].isBlocked = !accounts[_address].isBlocked;\n\n        return true;\n    }\n\n    function serviceUpdateTransferFeePercent(uint8 newFee) external minGroup(groupPolicyInstance._admin) {\n        require(newFee < 100);\n        require(newFee > refererFeePercent);\n        transferFeePercent = newFee;\n    }\n\n    function serviceUpdateRefererFeePercent(uint8 newFee) external minGroup(groupPolicyInstance._admin) {\n        require(newFee < 100);\n        require(transferFeePercent > newFee);\n        refererFeePercent = newFee;\n    }\n\n    function serviceSetPromo(bytes num, address _address) external minGroup(groupPolicyInstance._admin) {\n        require(promos[num] == address(0), \"Address already set for this promo\");\n        promos[num] = _address;\n    }\n\n    function serviceOnTransferFee() external minGroup(groupPolicyInstance._admin) {\n        require(!isTransferFee);\n        isTransferFee = true;\n    }\n\n    function serviceOffTransferFee() external minGroup(groupPolicyInstance._admin) {\n        require(isTransferFee);\n        isTransferFee = false;\n    }\n    \n    function serviceAccountTransferFee(address _address, bool _withoutTransferFee) external minGroup(groupPolicyInstance._admin) {\n        require(_address != address(0));\n        require(accounts[_address].withoutTransferFee != _withoutTransferFee);\n        accounts[_address].withoutTransferFee = _withoutTransferFee;\n    }\n\n    function backendSetStatus(address _address, uint8 status) external minGroup(groupPolicyInstance._backend) returns(bool){\n        require(_address != address(0));\n        require(status >= 0 && status <= 4);\n        uint8 oldStatus = accounts[_address].status;\n        accounts[_address].status = status;\n\n        emit EvUpdateStatus(_address, oldStatus, status);\n\n        return true;\n    }\n\n    function backendSetReferer(address _referal, address _referer) external minGroup(groupPolicyInstance._backend) returns(bool) {\n        require(accounts[_referal].referer == address(0));\n        require(_referal != address(0));\n        require(_referal != _referer);\n        require(accounts[_referal].referer != _referer);\n\n        accounts[_referal].referer = _referer;\n\n        emit EvSetReferer(_referal, _referer);\n\n        return true;\n    }\n\n    function backendSendBonus(address _to, uint256 _value) external minGroup(groupPolicyInstance._backend) returns(bool) {\n        require(_to != address(0));\n        require(_value > 0);\n        require(accounts[owner].balance >= _value);\n\n        accounts[owner].balance = accounts[owner].balance.sub(_value);\n        accounts[_to].balance = accounts[_to].balance.add(_value);\n\n        emit Transfer(owner, _to, _value);\n\n        return true;\n    }\n\n    function backendRefund(address _from, uint256 _value) external minGroup(groupPolicyInstance._backend) returns(uint256 balance) {\n        require(_from != address(0));\n        require(_value > 0);\n        require(accounts[_from].balance >= _value);\n \n        accounts[_from].balance = accounts[_from].balance.sub(_value);\n        accounts[owner].balance = accounts[owner].balance.add(_value);\n        if(accounts[_from].balance == 0){\n            holders.remove(_from);\n        }\n        emit Transfer(_from, owner, _value);\n        return accounts[_from].balance;\n    }\n\n    function getGroup(address _check) external view returns(uint8 _group) {\n        return accounts[_check].group;\n    }\n\n    function getHoldersLength() external view returns(uint256){\n        return holders.sizeOf();\n    }\n\n    function getHolderByIndex(uint256 _index) external view returns(address){\n        return holders.getAddress(_index);\n    }\n\n    function getPromoAddress(bytes _promo) external view returns(address) {\n        return promos[_promo];\n    }\n\n    function getAddressTransferAbility(address _check) external view returns(bool) {\n        return !accounts[_check].isBlocked;\n    }\n\n    function transfer(address _to, uint256 _value) external returns (bool success) {\n        return _transfer(msg.sender, _to, address(0), _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\n        return _transfer(_from, _to, msg.sender, _value);\n    }\n\n    function _transfer(address _from, address _to, address _allow, uint256 _value) minGroup(groupPolicyInstance._default) whenNotMigrating internal returns(bool) {\n        require(!accounts[_from].isBlocked);\n        require(_from != address(0));\n        require(_to != address(0));\n        uint256 transferFee = accounts[_from].group == 0 && isTransferFee && !accounts[_from].withoutTransferFee ? _value.mul(accounts[_from].referer == address(0) ? transferFeePercent : transferFeePercent - refererFeePercent).div(100) : 0;\n        uint256 transferRefererFee = accounts[_from].referer == address(0) || accounts[_from].group != 0 ? 0 : _value.mul(refererFeePercent).div(100);\n        uint256 summaryValue = _value.add(transferFee).add(transferRefererFee);\n        require(accounts[_from].balance >= summaryValue);\n        require(_allow == address(0) || allowed[_from][_allow] >= summaryValue);\n\n        accounts[_from].balance = accounts[_from].balance.sub(summaryValue);\n        if(_allow != address(0)) {\n            allowed[_from][_allow] = allowed[_from][_allow].sub(summaryValue);\n        }\n\n        if(accounts[_from].balance == 0){\n            holders.remove(_from);\n        }\n        accounts[_to].balance = accounts[_to].balance.add(_value);\n        holders.push(_to);\n        emit Transfer(_from, _to, _value);\n\n        if(transferFee > 0) {\n            accounts[owner].balance = accounts[owner].balance.add(transferFee);\n            emit Transfer(_from, owner, transferFee);\n        }\n\n        if(transferRefererFee > 0) {\n            accounts[accounts[_from].referer].balance = accounts[accounts[_from].referer].balance.add(transferRefererFee);\n            holders.push(accounts[_from].referer);\n            emit Transfer(_from, accounts[_from].referer, transferRefererFee);\n        }\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) minGroup(groupPolicyInstance._default) external returns (bool success) {\n        require (_value == 0 || allowed[msg.sender][_spender] == 0);\n        require(_spender != address(0));\n\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function increaseApproval(address _spender, uint256 _addedValue) minGroup(groupPolicyInstance._default) external returns (bool)\n    {\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint256 _subtractedValue) minGroup(groupPolicyInstance._default) external returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function balanceOf(address _owner) external view returns (uint256 balance) {\n        return accounts[_owner].balance;\n    }\n\n    function statusOf(address _owner) external view returns (uint8) {\n        return accounts[_owner].status;\n    }\n\n    function refererOf(address _owner) external constant returns (address) {\n        return accounts[_owner].referer;\n    }\n\n    function totalSupply() external constant returns (uint256 _totalSupply) {\n        _totalSupply = summarySupply;\n    }\n\n    function settingsSwitchState() external minGroup(groupPolicyInstance._owner) returns (bool state) {\n\n        contractEnable = !contractEnable;\n\n        return contractEnable;\n    }\n\n    function userMigration(uint256 _secret) external whenMigrating returns (bool successful) {\n        uint256 balance = accounts[msg.sender].balance;\n\n        require (balance > 0);\n\n        accounts[msg.sender].balance = accounts[msg.sender].balance.sub(balance);\n        holders.remove(msg.sender);\n        accounts[owner].balance = accounts[owner].balance.add(balance);\n        holders.push(owner);\n        emit EvMigration(msg.sender, balance, _secret);\n        emit Transfer(msg.sender, owner, balance);\n        return true;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000008834b79a00000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000c55464f486f74656c436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035548430000000000000000000000000000000000000000000000000000000000"
}