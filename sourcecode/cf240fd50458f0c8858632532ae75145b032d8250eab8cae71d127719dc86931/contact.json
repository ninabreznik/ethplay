{
  "address": "0x48605bd40de46899846d536e67f6610c04715268",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MegaCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-23\n*/\n\npragma solidity >= 0.4.24 < 0.6.0;\n\n\n/**\n * @title Mega Coin for Megabit trading-mining\n * @author Willy Lee\n * See the manuals.\n */\n\n\n/**\n * @title ERC20 Standard Interface\n * @dev https://github.com/ethereum/EIPs/issues/20\n * removed functions : transferFrom, approve, allowance\n * removed events : Approval\n * Some functions are restricted.\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    //function transferFrom(address from, address to, uint256 value) external returns (bool);\n    //function approve(address spender, uint256 value) external returns (bool);\n    //function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    //event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title MegaCoin implementation\n * @author Willy Lee\n */\ncontract MegaCoin is IERC20 {\n    //using SafeMath for uint256;   //  unnecessary lib\n\n    string public name = \"MEGA\";\n    string public symbol = \"MEGA\";\n    uint8 public decimals = 18;\n    \n    uint256 _totalSupply;\n    mapping(address => uint256) balances;\n\n    // Admin Address\n    address public owner;\n    address public team;\n    \n    // keep reserved coins in vault for each purpose\n    enum VaultEnum {mining, mkt, op, team, presale}\n    string[] VaultName = [\"mining\", \"mkt\", \"op\", \"team\", \"presale\"];\n    mapping(string => uint256) vault;\n\n    modifier isOwner {\n        require(owner == msg.sender);\n        _;\n    }\n    \n    constructor() public {\n        uint256 discardCoins;    //  burning amount at initial time\n\n        owner = msg.sender;\n        team = 0xB20a2214E60fa99911eb597faa1216DAc006fc29;\n        require(owner != team);\n\n        setVaultBalanceInDecimal(VaultEnum.mining,   10000000000);   //  10 B\n        setVaultBalanceInDecimal(VaultEnum.mkt,      1000000000);    //  1 B\n        setVaultBalanceInDecimal(VaultEnum.op,       2000000000);    //  2 B\n        setVaultBalanceInDecimal(VaultEnum.team,     3000000000);    //  3 B, time lock to 2019-12-22\n        setVaultBalanceInDecimal(VaultEnum.presale,  2999645274);    //  2,999,645,274\n\n        discardCoins = convertToWei(1000354726);            //  1,000,354,726\n\n        // total must be 20 B\n        _totalSupply = \n            getVaultBalance(VaultEnum.mining) +\n            getVaultBalance(VaultEnum.mkt) +\n            getVaultBalance(VaultEnum.op) +\n            getVaultBalance(VaultEnum.team) +\n            getVaultBalance(VaultEnum.presale) +\n            discardCoins;\n            \n        require(_totalSupply == convertToWei(20000000000));\n        \n        _totalSupply -= discardCoins;   // delete unnecessary coins;\n        balances[owner] = _totalSupply;\n\n        emit Transfer(address(0), owner, balances[owner]);\n    }\n    \n    /** @dev transfer mining coins to Megabit Exchanges address\n     */\n    function transferForMining(address to) external isOwner {\n        require(to != owner);\n        withdrawCoins(VaultName[uint256(VaultEnum.mining)], to);\n    }\n    \n    /** @dev withdraw coins for marketing budget to specified address\n     */\n    function withdrawForMkt(address to) external isOwner {\n        require(to != owner);\n        withdrawCoins(VaultName[uint256(VaultEnum.mkt)], to);\n    }\n    \n    /** @dev withdraw coins for maintenance cost to specified address\n     */\n    function withdrawForOp(address to) external isOwner {\n        require(to != owner);\n        withdrawCoins(VaultName[uint256(VaultEnum.op)], to);\n    }\n\n    /** @dev withdraw coins for Megabit team to reserved address after locked date\n     */\n    function withdrawTeamFunds() external isOwner {\n        uint256 balance = getVaultBalance(VaultEnum.team);\n        require(balance > 0);\n\n        withdrawCoins(VaultName[uint256(VaultEnum.team)], team);\n    }\n\n    /** @dev transfer sold(pre-sale) coins to specified address\n     */\n    function transferPresaleCoins(address to, uint256 amount) external isOwner {\n        require(to != owner);\n        require(balances[owner] >= amount);\n        require(getVaultBalance(VaultEnum.presale) >= amount);\n        \n        balances[owner] -= amount;\n        balances[to] += amount;\n        vault[VaultName[uint256(VaultEnum.presale)]] -= amount;\n\n        emit Transfer(owner, to, amount);\n    }\n\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address who) public view returns (uint256) {\n        return balances[who];\n    }\n    \n    function transfer(address to, uint256 value) public returns (bool success) {\n        require(msg.sender != to);\n        require(msg.sender != owner);   // owner is not free to transfer\n        require(to != owner);\n        require(value > 0);\n        \n        require( balances[msg.sender] >= value );\n        require( balances[to] + value >= balances[to] );    // prevent overflow\n\n        if(msg.sender == team) {\n            require(now >= 1576940400);     // lock to 2019-12-22\n        }\n        balances[msg.sender] -= value;\n        balances[to] += value;\n\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    // burn holder's own coins \n    function burnCoins(uint256 value) public {\n        require(msg.sender != owner);   // owner can't burn any coin\n        require(balances[msg.sender] >= value);\n        require(_totalSupply >= value);\n        \n        balances[msg.sender] -= value;\n        _totalSupply -= value;\n\n        emit Transfer(msg.sender, address(0), value);\n    }\n\n    function vaultBalance(string vaultName) public view returns (uint256) {\n        return vault[vaultName];\n    }\n    \n    // for check numbers\n    function getStat() public isOwner view returns (uint256 vaultTotal) {\n\n        uint256 totalVault =\n            getVaultBalance(VaultEnum.mining) +\n            getVaultBalance(VaultEnum.mkt) +\n            getVaultBalance(VaultEnum.op) +\n            getVaultBalance(VaultEnum.team) +\n            getVaultBalance(VaultEnum.presale);\n\n        return totalVault;\n    }\n        \n    /** @dev implementation of withdrawal\n     *  @dev it is available once for each vault\n     */\n    function withdrawCoins(string vaultName, address to) private returns (uint256) {\n        uint256 balance = vault[vaultName];\n        \n        require(balance > 0);\n        require(balances[owner] >= balance);\n        require(owner != to);\n\n        balances[owner] -= balance;\n        balances[to] += balance;\n        vault[vaultName] = 0;\n        \n        emit Transfer(owner, to, balance);\n        return balance;\n    }\n    \n    /** @dev private functions for manage vault\n     */\n    function setVaultBalanceInDecimal(VaultEnum vaultNum, uint256 amount) private {\n        vault[VaultName[uint256(vaultNum)]] = convertToWei(amount);\n    }\n    \n    function getVaultBalance(VaultEnum vaultNum) private constant returns (uint256) {\n        return vault[VaultName[uint256(vaultNum)]];\n    }\n    \n    function convertToWei(uint256 value) private constant returns (uint256) {\n        return value * (10 ** uint256(decimals));\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"vaultName\",\"type\":\"string\"}],\"name\":\"vaultBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStat\",\"outputs\":[{\"name\":\"vaultTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTeamFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawForOp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferPresaleCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawForMkt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferForMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526040805190810160405280600481526020017f4d45474100000000000000000000000000000000000000000000000000000000815250600090805190602001906200005192919062000792565b506040805190810160405280600481526020017f4d45474100000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f92919062000792565b506012600260006101000a81548160ff021916908360ff16021790555060a0604051908101604052806040805190810160405280600681526020017f6d696e696e67000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600381526020017f6d6b74000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600281526020017f6f7000000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600481526020017f7465616d0000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600781526020017f70726573616c65000000000000000000000000000000000000000000000000008152508152506007906005620001ff92919062000819565b503480156200020d57600080fd5b50600033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073b20a2214e60fa99911eb597faa1216dac006fc29600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156200032657600080fd5b6200034760006402540be40062000611640100000000026401000000009004565b620003676001633b9aca0062000611640100000000026401000000009004565b620003876002637735940062000611640100000000026401000000009004565b620003a7600363b2d05e0062000611640100000000026401000000009004565b620003c7600463b2caf45a62000611640100000000026401000000009004565b620003e5633ba033a6620006cd640100000000026401000000009004565b905080620004036004620006ee640100000000026401000000009004565b6200041e6003620006ee640100000000026401000000009004565b620004396002620006ee640100000000026401000000009004565b620004546001620006ee640100000000026401000000009004565b6200046f6000620006ee640100000000026401000000009004565b0101010101600381905550620004996404a817c800620006cd640100000000026401000000009004565b600354141515620004a957600080fd5b8060036000828254039250508190555060035460046000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60046000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a350620009ac565b6200062b81620006cd640100000000026401000000009004565b600860078460048111156200063c57fe5b8154811015156200064957fe5b906000526020600020016040518082805460018160011615610100020316600290048015620006b25780601f106200068f576101008083540402835291820191620006b2565b820191906000526020600020905b8154815290600101906020018083116200069d575b50509150509081526020016040518091039020819055505050565b6000600260009054906101000a900460ff1660ff16600a0a82029050919050565b6000600860078360048111156200070157fe5b8154811015156200070e57fe5b906000526020600020016040518082805460018160011615610100020316600290048015620007775780601f106200075457610100808354040283529182019162000777565b820191906000526020600020905b81548152906001019060200180831162000762575b50509150509081526020016040518091039020549050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620007d557805160ff191683800117855562000806565b8280016001018555821562000806579182015b8281111562000805578251825591602001919060010190620007e8565b5b50905062000815919062000880565b5090565b8280548282559060005260206000209081019282156200086d579160200282015b828111156200086c5782518290805190602001906200085b929190620008a8565b50916020019190600101906200083a565b5b5090506200087c91906200092f565b5090565b620008a591905b80821115620008a157600081600090555060010162000887565b5090565b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620008eb57805160ff19168380011785556200091c565b828001600101855582156200091c579182015b828111156200091b578251825591602001919060010190620008fe565b5b5090506200092b919062000880565b5090565b6200095d91905b808211156200095957600081816200094f919062000960565b5060010162000936565b5090565b90565b50805460018160011615610100020316600290046000825580601f10620009885750620009a9565b601f016020900490600052602060002090810190620009a8919062000880565b5b50565b611a9d80620009bc6000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305a8749d146100eb57806306fdde031461011857806318160ddd146101a85780631e1e3e0f146101d35780632b71b0e514610250578063313ce5671461027b57806370a08231146102ac57806385f2aef2146103035780638da5cb5b1461035a57806395d89b41146103b15780639ee0466114610441578063a77078e714610458578063a9059cbb1461049b578063afe8abbf14610500578063e5ce82001461054d578063f00f9b4d14610590575b600080fd5b3480156100f757600080fd5b50610116600480360381019080803590602001909291905050506105d3565b005b34801561012457600080fd5b5061012d610755565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016d578082015181840152602081019050610152565b50505050905090810190601f16801561019a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b457600080fd5b506101bd6107f3565b6040518082815260200191505060405180910390f35b3480156101df57600080fd5b5061023a600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506107fd565b6040518082815260200191505060405180910390f35b34801561025c57600080fd5b50610265610872565b6040518082815260200191505060405180910390f35b34801561028757600080fd5b50610290610910565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102b857600080fd5b506102ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610923565b6040518082815260200191505060405180910390f35b34801561030f57600080fd5b5061031861096c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036657600080fd5b5061036f610992565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103bd57600080fd5b506103c66109b8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104065780820151818401526020810190506103eb565b50505050905090810190601f1680156104335780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561044d57600080fd5b50610456610a56565b005b34801561046457600080fd5b50610499600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bbc565b005b3480156104a757600080fd5b506104e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d40565b604051808215151515815260200191505060405180910390f35b34801561050c57600080fd5b5061054b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611096565b005b34801561055957600080fd5b5061058e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113c0565b005b34801561059c57600080fd5b506105d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611544565b005b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561063057600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561067e57600080fd5b806003541015151561068f57600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600360008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107eb5780601f106107c0576101008083540402835291602001916107eb565b820191906000526020600020905b8154815290600101906020018083116107ce57829003601f168201915b505050505081565b6000600354905090565b60006008826040518082805190602001908083835b6020831015156108375780518252602082019150602081019050602083039250610812565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050919050565b6000803373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156108d157600080fd5b6108db60046116c8565b6108e560036116c8565b6108ef60026116c8565b6108f960016116c8565b61090360006116c8565b0101010190508091505090565b600260009054906101000a900460ff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a4e5780601f10610a2357610100808354040283529160200191610a4e565b820191906000526020600020905b815481529060010190602001808311610a3157829003601f168201915b505050505081565b60003373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610ab457600080fd5b610abe60036116c8565b9050600081111515610acf57600080fd5b610bb8600760036004811115610ae157fe5b815481101515610aed57fe5b906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b8b5780601f10610b6057610100808354040283529160200191610b8b565b820191906000526020600020905b815481529060010190602001808311610b6e57829003601f168201915b5050505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611766565b5050565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610c1857600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610c7557600080fd5b610d3c600760026004811115610c8757fe5b815481101515610c9357fe5b906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d315780601f10610d0657610100808354040283529160200191610d31565b820191906000526020600020905b815481529060010190602001808311610d1457829003601f168201915b505050505082611766565b5050565b60008273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610d7d57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610dda57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610e3757600080fd5b600082111515610e4657600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610e9457600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515610f2357600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610f8d57635dfe33704210151515610f8c57600080fd5b5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156110f257600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561114f57600080fd5b8060046000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156111bf57600080fd5b806111ca60046116c8565b101515156111d757600080fd5b8060046000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600860076004808111156112a457fe5b8154811015156112b057fe5b9060005260206000200160405180828054600181600116156101000203166002900480156113155780601f106112f3576101008083540402835291820191611315565b820191906000526020600020905b815481529060010190602001808311611301575b50509150509081526020016040518091039020600082825403925050819055508173ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561141c57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561147957600080fd5b61154060076001600481111561148b57fe5b81548110151561149757fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115355780601f1061150a57610100808354040283529160200191611535565b820191906000526020600020905b81548152906001019060200180831161151857829003601f168201915b505050505082611766565b5050565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156115a057600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156115fd57600080fd5b6116c460076000600481111561160f57fe5b81548110151561161b57fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116b95780601f1061168e576101008083540402835291602001916116b9565b820191906000526020600020905b81548152906001019060200180831161169c57829003601f168201915b505050505082611766565b5050565b6000600860078360048111156116da57fe5b8154811015156116e657fe5b90600052602060002001604051808280546001816001161561010002031660029004801561174b5780601f1061172957610100808354040283529182019161174b565b820191906000526020600020905b815481529060010190602001808311611737575b50509150509081526020016040518091039020549050919050565b6000806008846040518082805190602001908083835b6020831015156117a1578051825260208201915060208101905060208303925061177c565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205490506000811115156117e657600080fd5b8060046000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561185657600080fd5b8273ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156118b357600080fd5b8060046000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060006008856040518082805190602001908083835b6020831015156119a95780518252602082019150602081019050602083039250611984565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055508273ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a380915050929150505600a165627a7a72305820ec91375f55252bcbefd7db8c6c7e7c1ef2fa0334b522a263237aaf3382fdd0980029"
}