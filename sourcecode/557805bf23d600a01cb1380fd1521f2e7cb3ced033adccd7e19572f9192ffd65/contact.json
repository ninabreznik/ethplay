{
  "address": "0xd9d01d4cb824219a8f482a0fad479cb971fd0628",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "EnterCoin Token",
  "contractName": "EnterCoin",
  "compilerVersion": "v0.4.25-nightly.2018.8.16+commit.a9e7ae29",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-02\n*/\n\n/*\n * Creator: EnterCoin (ENTRC) \n */\n\n/*\n * Abstract Token Smart Contract\n *\n */\n\n \n /*\n * Safe Math Smart Contract. \n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n */\n\ncontract SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n/**\n * ERC-20 standard token interface, as defined\n * <a href=\"http://github.com/ethereum/EIPs/issues/20\">here</a>.\n */\ncontract Token {\n  \n  function totalSupply() public view returns (uint256 supply);\n  function balanceOf(address _owner)public view returns (uint256 balance);\n  function transfer(address _to, uint256 _value)public returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);\n  function approve(address _spender, uint256 _value)public returns (bool success);\n  function allowance(address _owner, address _spender)public view returns (uint256 remaining);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n/**\n * Abstract Token Smart Contract that could be used as a base contract for\n * ERC-20 token contracts.\n */\ncontract AbstractToken is Token, SafeMath {\n  /**\n   * Create new Abstract Token contract.\n   */\n constructor() public{\n    // Do nothing\n  }\n  \n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return accounts [_owner];\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   * accounts [_to] + _value > accounts [_to] for overflow check\n   * which is already in safeMath\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    require(_to != address(0));\n    if (accounts [msg.sender] < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    emit Transfer (msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   * accounts [_to] + _value > accounts [_to] for overflow check\n   * which is already in safeMath\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public\n  returns (bool success) {\n    require(_to != address(0));\n    if (allowances [_from][msg.sender] < _value) return false;\n    if (accounts [_from] < _value) return false; \n\n    if (_value > 0 && _from != _to) {\n\t  allowances [_from][msg.sender] = safeSub (allowances [_from][msg.sender], _value);\n      accounts [_from] = safeSub (accounts [_from], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   * @param _spender address to allow the owner of to transfer tokens from message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n   function approve (address _spender, uint256 _value) public returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    emit Approval (msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance(address _owner, address _spender) public view\n  returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n\n  /**\n   * Mapping from addresses of token holders to the numbers of tokens belonging\n   * to these token holders.\n   */\n  mapping (address => uint256) accounts;\n\n  /**\n   * Mapping from addresses of token holders to the mapping of addresses of\n   * spenders to the allowances set by these token holders to these spenders.\n   */\n  mapping (address => mapping (address => uint256)) private allowances;\n  \n}\n\n\n/**\n * EnterCoin smart contract.\n */\ncontract EnterCoin is AbstractToken {\n  /**\n   * Maximum allowed number of tokens in circulation.\n   * tokenSupply = tokensIActuallyWant * (10 ^ decimals)\n   */\n   \n   \n  uint256 constant MAX_TOKEN_COUNT = 31000000 * (10**8);\n   \n  /**\n   * Address of the owner of this smart contract.\n   */\n  address private owner;\n  \n \n  /**\n   * Current number of tokens in circulation.\n   */\n  uint256 tokenCount = 0;\n  \n \n  /**\n   * Create new token smart contract and make msg.sender the\n   * owner of this smart contract.\n   */\n  constructor() public{\n    owner = msg.sender;\n  }\n\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply() public view returns (uint256 supply) {\n    return tokenCount;\n  }\n\n  string constant public name = \"EnterCoin\";\n  string constant public symbol = \"ENTRC\";\n  uint8 constant public decimals = 8;\n  \n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n     return AbstractToken.transfer (_to, _value);\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public\n    returns (bool success) {\n    return AbstractToken.transferFrom (_from, _to, _value);\n  }\n\n   /**\n   * Change how many tokens given spender is allowed to transfer from message\n   * spender.  In order to prevent double spending of allowance,\n   * To change the approve amount you first have to reduce the addresses`\n   * allowance to zero by calling `approve(_spender, 0)` if it is not\n   * already 0 to mitigate the race condition described here:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value) public\n    returns (bool success) {\n\trequire(allowance (msg.sender, _spender) == 0 || _value == 0);\n    return AbstractToken.approve (_spender, _value);\n  }\n\n  /**\n   * Create _value new tokens and give new created tokens to msg.sender.\n   * Only be called by smart contract owner.\n   *\n   * @param _value number of tokens to create\n   * @return true if tokens were created successfully, false otherwise\n   */\n  function createTokens(uint256 _value) public\n    returns (bool success) {\n    require (msg.sender == owner);\n\n    if (_value > 0) {\n      if (_value > safeSub (MAX_TOKEN_COUNT, tokenCount)) return false;\n\t  \n      accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);\n      tokenCount = safeAdd (tokenCount, _value);\n\t  \n\t  // adding transfer event and _from address as null address\n\t  emit Transfer(address(0), msg.sender, _value);\n\t  \n\t  return true;\n    }\n\t\n\t  return false;\n    \n  }\n  \n  \n  \n  /**\n   * Set new owner for the smart contract.\n   * Only be called by smart contract owner.\n   *\n   * @param _newOwner address of new owner of the smart contract\n   */\n  function setOwner(address _newOwner) public{\n    require (msg.sender == owner);\n\n    owner = _newOwner;\n  }\n  \n  \n  /*A user is able to unintentionally send tokens to a contract \n  * and if the contract is not prepared to refund them they will get stuck in the contract. \n  * The same issue used to happen for Ether too but new Solidity versions added the payable modifier to\n  * prevent unintended Ether transfers. However, there’s no such mechanism for token transfers.\n  * so the below function is created\n  */\n  \n  function refundTokens(address _token, address _refund, uint256 _value) public {\n    require (msg.sender == owner);\n    require(_token != address(this));\n    AbstractToken token = AbstractToken(_token);\n    token.transfer(_refund, _value);\n    emit RefundTokens(_token, _refund, _value);\n  }\n  \n  \n\n  \n  /**\n   * when accidentally send other tokens are refunded\n   */\n  \n  event RefundTokens(address _token, address _refund, uint256 _value);\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_refund\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"refundTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_refund\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"RefundTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6080604052600060035534801561001557600080fd5b5060028054600160a060020a03191633179055610a13806100376000396000f3fe6080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806313af40351461019557806318160ddd146101ca57806323b872dd146101f1578063313ce5671461023457806370a082311461025f5780637e1f2bb81461029257806389519c50146102bc57806395d89b41146102ff578063a9059cbb14610314578063dd62ed3e1461034d575b600080fd5b3480156100ca57600080fd5b506100d3610388565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015457600080fd5b506101816004803603604081101561016b57600080fd5b50600160a060020a0381351690602001356103bf565b604080519115158252519081900360200190f35b3480156101a157600080fd5b506101c8600480360360208110156101b857600080fd5b5035600160a060020a03166103f3565b005b3480156101d657600080fd5b506101df610439565b60408051918252519081900360200190f35b3480156101fd57600080fd5b506101816004803603606081101561021457600080fd5b50600160a060020a0381358116916020810135909116906040013561043f565b34801561024057600080fd5b50610249610456565b6040805160ff9092168252519081900360200190f35b34801561026b57600080fd5b506101df6004803603602081101561028257600080fd5b5035600160a060020a031661045b565b34801561029e57600080fd5b50610181600480360360208110156102b557600080fd5b503561047a565b3480156102c857600080fd5b506101c8600480360360608110156102df57600080fd5b50600160a060020a03813581169160208101359091169060400135610541565b34801561030b57600080fd5b506100d3610656565b34801561032057600080fd5b506101816004803603604081101561033757600080fd5b50600160a060020a03813516906020013561068d565b34801561035957600080fd5b506101df6004803603604081101561037057600080fd5b50600160a060020a0381358116916020013516610699565b60408051808201909152600981527f456e746572436f696e0000000000000000000000000000000000000000000000602082015281565b60006103cb3384610699565b15806103d5575081155b15156103e057600080fd5b6103ea83836106c4565b90505b92915050565b600254600160a060020a0316331461040a57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035490565b600061044c84848461072a565b90505b9392505050565b600881565b600160a060020a0381166000908152602081905260409020545b919050565b600254600090600160a060020a0316331461049457600080fd5b6000821115610539576104b0660b036efecdc0006003546108c9565b8211156104bf57506000610475565b336000908152602081905260409020546104d990836108db565b336000908152602081905260409020556003546104f690836108db565b60035560408051838152905133916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001610475565b506000919050565b600254600160a060020a0316331461055857600080fd5b600160a060020a03831630141561056e57600080fd5b604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152602482018490529151859283169163a9059cbb9160448083019260209291908290030181600087803b1580156105da57600080fd5b505af11580156105ee573d6000803e3d6000fd5b505050506040513d602081101561060457600080fd5b505060408051600160a060020a0380871682528516602082015280820184905290517ffab5e7a27e02736e52f60776d307340051d8bc15aee0ef211c7a4aa2a8cdc1549181900360600190a150505050565b60408051808201909152600581527f454e545243000000000000000000000000000000000000000000000000000000602082015281565b60006103ea83836108ea565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b336000818152600160209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a038316151561074157600080fd5b600160a060020a03841660009081526001602090815260408083203384529091529020548211156107745750600061044f565b600160a060020a03841660009081526020819052604090205482111561079c5750600061044f565b6000821180156107be575082600160a060020a031684600160a060020a031614155b1561087457600160a060020a03841660009081526001602090815260408083203384529091529020546107f190836108c9565b600160a060020a038516600081815260016020908152604080832033845282528083209490945591815290819052205461082b90836108c9565b600160a060020a03808616600090815260208190526040808220939093559085168152205461085a90836108db565b600160a060020a0384166000908152602081905260409020555b82600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35060019392505050565b6000828211156108d557fe5b50900390565b6000828201838110156103ea57fe5b6000600160a060020a038316151561090157600080fd5b33600090815260208190526040902054821115610920575060006103ed565b600082118015610939575033600160a060020a03841614155b1561099e573360009081526020819052604090205461095890836108c9565b3360009081526020819052604080822092909255600160a060020a0385168152205461098490836108db565b600160a060020a0384166000908152602081905260409020555b604080518381529051600160a060020a0385169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060019291505056fea165627a7a72305820ba4eafb364c1bff55b658b0c66333d2e45c53d5a9e85a0ce0c2e3df98f7787340029"
}