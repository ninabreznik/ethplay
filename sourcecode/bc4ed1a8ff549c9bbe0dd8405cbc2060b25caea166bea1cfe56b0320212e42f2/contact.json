{
  "address": "0x9798d857476de56c066abb4f8395e8f061893bac",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BitcoinPriceBetM",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-01\n*/\n\npragma solidity ^0.4.25;\n\n/*\n    Trust based betting system, affiliated with NeutrinoTokenStandard contract.\n    Rules:\n        Welcome Fee                      -  25%, including:\n            Boss                         -  10%\n            Yearly jackpot               -   2%\n            Referral bonus               -   8%\n            NTS funding                  -   5%\n        Exit Fee                         - FREE\n\n    Everything's ready, right BOSSes accounts\n*/\n\ncontract NeutrinoTokenStandard {\n    function fund() external payable;\n}\n\ncontract ReferralPayStation {\n    event OnGotRef (\n        address indexed ref,\n        uint256 value,\n        uint256 timestamp,\n        address indexed player\n    );\n    \n    event OnWithdraw (\n        address indexed ref,\n        uint256 value,\n        uint256 timestamp\n    );\n    \n    event OnRob (\n        address indexed ref,\n        uint256 value,\n        uint256 timestamp\n    );\n    \n    event OnRobAll (\n        uint256 value,\n        uint256 timestamp  \n    );\n    \n    address owner;\n    mapping(address => uint256) public refBalance;\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function put(address ref, address player) public payable {\n        require(msg.value > 0);\n        refBalance[ref] += msg.value;\n        \n        emit OnGotRef(ref, msg.value, now, player);\n    }\n    \n    function withdraw() public {\n        require(refBalance[msg.sender] > 0);\n        uint256 value = refBalance[msg.sender];\n        refBalance[msg.sender] = 0;\n        msg.sender.transfer(value);\n        emit OnWithdraw(msg.sender, value, now);\n    }\n    \n    /* admin */\n    function rob(address ref) onlyOwner public {\n        require(refBalance[ref] > 0);\n        uint256 value = refBalance[ref];\n        refBalance[ref] = 0;\n        owner.transfer(value);\n        emit OnRob(ref, value, now);\n    }\n    \n    function robAll() onlyOwner public {\n        uint256 balance = address(this).balance;\n        owner.transfer(balance);\n        emit OnRobAll(balance, now);\n    }\n}\n\ncontract BitcoinPriceBetM {\n    event OnBet (\n        address indexed player,\n        address indexed ref,\n        uint256 indexed timestamp,\n        uint256 value,\n        uint256 betPrice,\n        uint256 extra,\n        uint256 refBonus,\n        uint256 amount\n    );\n    \n    event OnWithdraw (\n        address indexed referrer,\n        uint256 value\n    );\n    \n    event OnWithdrawWin (\n        address indexed player,\n        uint256 value\n    );\n    \n    event OnPrizePayed (\n        address indexed player,\n        uint256 value,\n        uint8 place,\n        uint256 betPrice,\n        uint256 amount,\n        uint256 betValue\n    );\n    \n    event OnNTSCharged (\n        uint256 value\n    );\n    \n    event OnYJPCharged (\n        uint256 value  \n    );\n    \n    event OnGotMoney (\n        address indexed source,\n        uint256 value\n    );\n    \n    event OnCorrect (\n        uint256 value\n    );\n    \n    event OnPrizeFunded (\n        uint256 value\n    );\n    \n    event OnSendRef (\n        address indexed ref,\n        uint256 value,\n        uint256 timestamp,\n        address indexed player,\n        address indexed payStation\n    );\n    \n    event OnNewRefPayStation (\n        address newAddress,\n        uint256 timestamp\n    );\n\n    event OnBossPayed (\n        address indexed boss,\n        uint256 value,\n        uint256 timestamp\n    );\n    \n    string constant public name = \"BitcoinPrice.Bet Monthly\";\n    string constant public symbol = \"BPBM\";\n    address public owner;\n    address constant internal boss1 = 0x42cF5e102dECCf8d89E525151c5D5bbEAc54200d;\n    address constant internal boss2 = 0x8D86E611ef0c054FdF04E1c744A8cEFc37F00F81;\n    NeutrinoTokenStandard constant internal neutrino = NeutrinoTokenStandard(0xad0a61589f3559026F00888027beAc31A5Ac4625); \n    ReferralPayStation public refPayStation = ReferralPayStation(0x4100dAdA0D80931008a5f7F5711FFEb60A8071BA);\n    \n    uint256 constant public betStep = 0.1 ether;\n    uint256 public betStart;\n    uint256 public betFinish;\n    \n    uint8 constant bossFee = 10;\n    uint8 constant yjpFee = 2;\n    uint8 constant refFee = 8;\n    uint8 constant ntsFee = 5;\n    \n    mapping(address => uint256) public winBalance;\n    uint256 public winBalanceTotal = 0;\n    uint256 public bossBalance = 0;\n    uint256 public jackpotBalance = 0;\n    uint256 public ntsBalance = 0;\n    uint256 public prizeBalance = 0;\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    constructor(uint256 _betStart, uint256 _betFinish) public payable {\n        owner = msg.sender;\n        prizeBalance = msg.value;\n        betStart = _betStart;   // 1546290000 == 1 Jan 2019 GMT 00:00:00\n        betFinish = _betFinish; // 1548968400 == 31 Jan 2019 GMT 21:00:00 \n    }\n    \n    function() public payable {\n        emit OnGotMoney(msg.sender, msg.value);\n    }\n    \n    function canMakeBet() public view returns (bool) {\n        return now >= betStart && now <= betFinish;\n    }\n    \n    function makeBet(uint256 betPrice, address ref) public payable {\n        require(now >= betStart && now <= betFinish);\n        \n        uint256 value = (msg.value / betStep) * betStep;\n        uint256 extra = msg.value - value;\n        \n        require(value > 0);\n        jackpotBalance += extra;\n        \n        uint8 welcomeFee = bossFee + yjpFee + ntsFee;\n        uint256 refBonus = 0;\n        if (ref != 0x0) {\n            welcomeFee += refFee;\n            refBonus = value * refFee / 100;\n\n            refPayStation.put.value(refBonus)(ref, msg.sender);\n            emit OnSendRef(ref, refBonus, now, msg.sender, address(refPayStation));\n        }\n        \n        uint256 taxedValue = value - value * welcomeFee / 100;\n        prizeBalance += taxedValue;\n    \n        bossBalance += value * bossFee / 100;\n        jackpotBalance += value * yjpFee / 100;\n        ntsBalance += value * ntsFee / 100;\n            \n        emit OnBet(msg.sender, ref, block.timestamp, value, betPrice, extra, refBonus, value / betStep);\n    }\n    \n    function withdrawWin() public {\n        require(winBalance[msg.sender] > 0);\n        uint256 value = winBalance[msg.sender];\n        winBalance[msg.sender] = 0;\n        winBalanceTotal -= value;\n        msg.sender.transfer(value);\n        emit OnWithdrawWin(msg.sender, value);\n    }\n    \n    /* Admin */\n    function payPrize(address player, uint256 value, uint8 place, uint256 betPrice, uint256 amount, uint256 betValue) onlyOwner public {\n        require(value <= prizeBalance);\n        \n        winBalance[player] += value;\n        winBalanceTotal += value;\n        prizeBalance -= value;\n        emit OnPrizePayed(player, value, place, betPrice, amount, betValue);   \n    }\n    \n    function payPostDrawRef(address ref, address player, uint256 value) onlyOwner public {\n        require(value <= prizeBalance);\n        \n        prizeBalance -= value;\n        \n        refPayStation.put.value(value)(ref, player);\n        emit OnSendRef(ref, value, now, player, address(refPayStation));\n    }\n    \n    function payBoss(uint256 value) onlyOwner public {\n        require(value <= bossBalance);\n        if (value == 0) value = bossBalance;\n        uint256 value1 = value * 90 / 100;\n        uint256 value2 = value * 10 / 100;\n        \n        if (boss1.send(value1)) {\n            bossBalance -= value1;\n            emit OnBossPayed(boss1, value1, now);\n        }\n        \n        if (boss2.send(value2)) {\n            bossBalance -= value2;\n            emit OnBossPayed(boss2, value2, now);\n        }\n    }\n    \n    function payNTS() onlyOwner public {\n        require(ntsBalance > 0);\n        uint256 _ntsBalance = ntsBalance;\n        \n        neutrino.fund.value(ntsBalance)();\n        ntsBalance = 0;\n        emit OnNTSCharged(_ntsBalance);\n    }\n    \n    function payYearlyJackpot(address yearlyContract) onlyOwner public {\n        require(jackpotBalance > 0);\n\n        if (yearlyContract.call.value(jackpotBalance).gas(50000)()) {\n            jackpotBalance = 0;\n            emit OnYJPCharged(jackpotBalance);\n        }\n    }\n    \n    function correct() onlyOwner public {\n        uint256 counted = winBalanceTotal + bossBalance + jackpotBalance + ntsBalance + prizeBalance;\n        uint256 uncounted = address(this).balance - counted;\n        \n        require(uncounted > 0);\n        \n        bossBalance += uncounted;\n        emit OnCorrect(uncounted);\n    }\n    \n    function fundPrize() onlyOwner public {\n        uint256 counted = winBalanceTotal + bossBalance + jackpotBalance + ntsBalance + prizeBalance;\n        uint256 uncounted = address(this).balance - counted;\n        \n        require(uncounted > 0);\n        \n        prizeBalance += uncounted;\n        emit OnPrizeFunded(uncounted);\n    }\n    \n    function newRefPayStation(address newAddress) onlyOwner public {\n        refPayStation = ReferralPayStation(newAddress);\n        \n        emit OnNewRefPayStation(newAddress, now);\n    }\n}",
  "bytecode": "6080604081815260018054600160a060020a031916734100dada0d80931008a5f7f5711ffeb60a8071ba1790556000600581905560068190556007819055600881905560095580610ee683398101604052805160209091015160008054600160a060020a0319163317905534600955600291909155600355610e60806100866000396000f30060806040526004361061013d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663040da8f4811461017557806306fdde031461019c5780630aa9a4fb146102265780630bd5b4931461025b578063200ef97e146102855780633a2bc42b1461029a5780634443fbf4146102af5780636c6bf551146102d05780638a7eac45146102e55780638ade246a146102fa5780638da5cb5b1461031157806395d89b4114610342578063a5d8746e14610357578063a9c8733c14610380578063ab6840e714610395578063ad8b2c77146103aa578063afafb3f0146103bf578063c5cbbabe146103d4578063ddf8224d146103e9578063efbec487146103fe578063f1112e7014610416578063f4f4235814610437578063f9146b2f1461044c578063fb8155031461046d575b60408051348152905133917f1c15fecf7e02abab6ddfc04504224ff6a9cfa6c0fbaaae4eed835ac0786fc9fb919081900360200190a2005b34801561018157600080fd5b5061018a610482565b60408051918252519081900360200190f35b3480156101a857600080fd5b506101b1610488565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101eb5781810151838201526020016101d3565b50505050905090810190601f1680156102185780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023257600080fd5b50610259600160a060020a036004351660243560ff6044351660643560843560a4356104bf565b005b34801561026757600080fd5b50610259600160a060020a0360043581169060243516604435610570565b34801561029157600080fd5b50610259610680565b3480156102a657600080fd5b5061025961076e565b3480156102bb57600080fd5b5061018a600160a060020a03600435166107ee565b3480156102dc57600080fd5b5061018a610800565b3480156102f157600080fd5b5061018a610806565b610259600435600160a060020a036024351661080c565b34801561031d57600080fd5b50610326610a10565b60408051600160a060020a039092168252519081900360200190f35b34801561034e57600080fd5b506101b1610a1f565b34801561036357600080fd5b5061036c610a56565b604080519115158252519081900360200190f35b34801561038c57600080fd5b50610259610a71565b3480156103a157600080fd5b5061018a610af1565b3480156103b657600080fd5b5061018a610af7565b3480156103cb57600080fd5b50610326610afd565b3480156103e057600080fd5b5061018a610b0c565b3480156103f557600080fd5b5061018a610b12565b34801561040a57600080fd5b50610259600435610b18565b34801561042257600080fd5b50610259600160a060020a0360043516610c7f565b34801561044357600080fd5b5061018a610d0a565b34801561045857600080fd5b50610259600160a060020a0360043516610d16565b34801561047957600080fd5b50610259610d94565b60075481565b60408051808201909152601881527f426974636f696e50726963652e426574204d6f6e74686c790000000000000000602082015281565b600054600160a060020a031633146104d657600080fd5b6009548511156104e557600080fd5b600160a060020a0386166000818152600460209081526040918290208054890190556005805489019055600980548990039055815188815260ff881691810191909152808201869052606081018590526080810184905290517f98c64e15580fea9eb71342d9ead751862c92014a8e357ae724f1be5adcf37af19181900360a00190a2505050505050565b600054600160a060020a0316331461058757600080fd5b60095481111561059657600080fd5b600980548290039055600154604080517fdfb03cf7000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015285811660248301529151919092169163dfb03cf791849160448082019260009290919082900301818588803b15801561061157600080fd5b505af1158015610625573d6000803e3d6000fd5b5050600154604080518681524260208201528151600160a060020a039384169650888416955092891693507ff93679ce590194aca8e3b7bae6b49f6bbcb8e805a9304f1007e76b80ed88ffa4929081900390910190a4505050565b60008054600160a060020a0316331461069857600080fd5b6008546000106106a757600080fd5b600854905073ad0a61589f3559026f00888027beac31a5ac4625600160a060020a031663b60d42886008546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561071957600080fd5b505af115801561072d573d6000803e3d6000fd5b5050600060085550506040805183815290517f605e9a3a858d9c423b3d2494ca38bc93b6db88f81905a48c89b6deeee177a68992509081900360200190a150565b600080548190600160a060020a0316331461078857600080fd5b5050600954600854600754600654600554010101013031819003600081116107af57600080fd5b60098054820190556040805182815290517f91061ecd2174c2cc1d71dde610d511ba85de327d6d30ed0f257699d6a7a9a7f59181900360200190a15050565b60046020526000908152604090205481565b60095481565b60065481565b6000806000806000600254421015801561082857506003544211155b151561083357600080fd5b67016345785d8a00008034040294503485900393506000851161085557600080fd5b60078054850190556011925060009150600160a060020a0386161561095a576008928301926064908602600154604080517fdfb03cf7000000000000000000000000000000000000000000000000000000008152600160a060020a038b811660048301523360248301529151949093049550169163dfb03cf7918591604480830192600092919082900301818588803b1580156108f157600080fd5b505af1158015610905573d6000803e3d6000fd5b5050600154604080518781524260208201528151600160a060020a039384169650339550928c1693507ff93679ce590194aca8e3b7bae6b49f6bbcb8e805a9304f1007e76b80ed88ffa4929081900390910190a45b5060098054606460ff85168702819004870391820190925560068054600a8802849004019055600780546002880284900401905560088054600588029390930490920190915560408051868152602081018990528082018690526060810184905267016345785d8a00008704608082015290514291600160a060020a0389169133917fde28de290d2fd8e8081558373acbb9527799489b8d125f3a33260b4fa7cc9bc2919081900360a00190a450505050505050565b600054600160a060020a031681565b60408051808201909152600481527f4250424d00000000000000000000000000000000000000000000000000000000602082015281565b60006002544210158015610a6c57506003544211155b905090565b600080548190600160a060020a03163314610a8b57600080fd5b505060095460085460075460065460055401010101303181900360008111610ab257600080fd5b60068054820190556040805182815290517f2af6f770e2c966c5a4d31350690f97496224985197b1342ec3a35ea32620b6179181900360200190a15050565b60085481565b60025481565b600154600160a060020a031681565b60035481565b60055481565b600080548190600160a060020a03163314610b3257600080fd5b600654831115610b4157600080fd5b821515610b4e5760065492505b6064605a84020491506064600a840260405191900491507342cf5e102deccf8d89e525151c5d5bbeac54200d9083156108fc029084906000818181858888f1935050505015610bee576006805483900390556040805183815242602082015281517342cf5e102deccf8d89e525151c5d5bbeac54200d927fbfd80b7518d12673941ad7d48fad1285bd1517a70cf69fc217bab6136d2426c3928290030190a25b604051738d86e611ef0c054fdf04e1c744a8cefc37f00f819082156108fc029083906000818181858888f1935050505015610c7a57600680548290039055604080518281524260208201528151738d86e611ef0c054fdf04e1c744a8cefc37f00f81927fbfd80b7518d12673941ad7d48fad1285bd1517a70cf69fc217bab6136d2426c3928290030190a25b505050565b600054600160a060020a03163314610c9657600080fd5b600754600010610ca557600080fd5b600754604051600160a060020a0383169161c350916000818181858888f1935050505015610d07576000600781905560408051918252517fab87ee58875b66771b8b92659121a9e642a60745aa5a9b000ac2a982df65f35b9181900360200190a15b50565b67016345785d8a000081565b600054600160a060020a03163314610d2d57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383169081179091556040805191825242602083015280517f56c3bab9774f079d7833aa80ed2eb486f8216bf2a0c156836748ad21e66c3f639281900390910190a150565b336000908152600460205260408120548110610daf57600080fd5b5033600081815260046020526040808220805490839055600580548290039055905190929183156108fc02918491818181858888f19350505050158015610dfa573d6000803e3d6000fd5b5060408051828152905133917fdd0e51ca9fe6a0a8495a0bf28a5d74796714159e4b9e392618596ba572835e31919081900360200190a2505600a165627a7a723058200fcae4025e98a01c26653fa45d66af49dd3972377b7f322e58006aabd98a18460029000000000000000000000000000000000000000000000000000000005c2a8350000000000000000000000000000000000000000000000000000000005c5361d0",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005c2a8350000000000000000000000000000000000000000000000000000000005c5361d0"
}