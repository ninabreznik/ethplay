{
  "address": "0x8162210015a0ccd5bebf1c768abee628caee80d8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VerityEvent",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-12\n*/\n\npragma solidity 0.4.24;\n\n// File: contracts/EventRegistry.sol\n\ncontract EventRegistry {\n    address[] verityEvents;\n    mapping(address => bool) verityEventsMap;\n\n    mapping(address => address[]) userEvents;\n\n    event NewVerityEvent(address eventAddress);\n\n    function registerEvent() public {\n        verityEvents.push(msg.sender);\n        verityEventsMap[msg.sender] = true;\n        emit NewVerityEvent(msg.sender);\n    }\n\n    function getUserEvents() public view returns(address[]) {\n        return userEvents[msg.sender];\n    }\n\n    function addEventToUser(address _user) external {\n        require(verityEventsMap[msg.sender]);\n\n        userEvents[_user].push(msg.sender);\n    }\n\n    function getEventsLength() public view returns(uint) {\n        return verityEvents.length;\n    }\n\n    function getEventsByIds(uint[] _ids) public view returns(uint[], address[]) {\n        address[] memory _events = new address[](_ids.length);\n\n        for(uint i = 0; i < _ids.length; ++i) {\n            _events[i] = verityEvents[_ids[i]];\n        }\n\n        return (_ids, _events);\n    }\n\n    function getUserEventsLength(address _user)\n        public\n        view\n        returns(uint)\n    {\n        return userEvents[_user].length;\n    }\n\n    function getUserEventsByIds(address _user, uint[] _ids)\n        public\n        view\n        returns(uint[], address[])\n    {\n        address[] memory _events = new address[](_ids.length);\n\n        for(uint i = 0; i < _ids.length; ++i) {\n            _events[i] = userEvents[_user][_ids[i]];\n        }\n\n        return (_ids, _events);\n    }\n}\n\n// File: contracts/VerityToken.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract VerityToken is StandardToken {\n  string public name = \"VerityToken\";\n  string public symbol = \"VTY\";\n  uint8 public decimals = 18;\n  uint public INITIAL_SUPPLY = 500000000 * 10 ** uint(decimals);\n\n  constructor() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n}\n\n// File: contracts/VerityEvent.sol\n\ncontract VerityEvent {\n    /// Contract's owner, used for permission management\n    address public owner;\n\n    /// Token contract address, used for tokend distribution\n    address public tokenAddress;\n\n    /// Event registry contract address\n    address public eventRegistryAddress;\n\n    /// Designated validation nodes that will decide rewards.\n    address[] eventResolvers;\n\n    /// - WaitingForRewards: Waiting for current master to set rewards.\n    /// - Validating: Master has set rewards. Vaiting for node validation.\n    /// - Finished: Either successfully validated or failed.\n    enum ValidationState {\n        WaitingForRewards,\n        Validating,\n        Finished\n    }\n    ValidationState validationState = ValidationState.WaitingForRewards;\n\n    struct RewardsValidation {\n        address currentMasterNode;\n        string rewardsHash;\n        uint approvalCount;\n        uint rejectionCount;\n        string[] altHashes;\n        mapping(address => uint) votersRound;\n        mapping(string => address[]) altHashVotes;\n        mapping(string => bool) rejectedHashes;\n    }\n    RewardsValidation rewardsValidation;\n\n    /// Round of validation. Increases by each failed validation\n    uint public rewardsValidationRound;\n\n    /// A list of all the participating wallet addresses, implemented as a mapping\n    /// to provide constant lookup times.\n    mapping(address => bool) participants;\n    address[] participantsIndex;\n\n    enum RewardType {\n        Ether,\n        Token\n    }\n    RewardType rewardType;\n\n    /// A mapping of addresses to their assigned rewards\n    mapping(address => mapping(uint => uint)) rewards;\n    address[] rewardsIndex;\n\n    /// Event application start time, users cannot apply to participate before it\n    uint applicationStartTime;\n\n    /// Event application end time, users cannot apply after this time\n    uint applicationEndTime;\n\n    /// Event actual start time, votes before this should not be accepted\n    uint eventStartTime;\n\n    /// Event end time, it is calculated in the constructor\n    uint eventEndTime;\n\n    /// Ipfs event data hash\n    string ipfsEventHash;\n\n    /// Event name, here for informational use - not used otherwise\n    /// owner can recover tokens and ether after this time\n    uint leftoversRecoverableAfter;\n\n    /// Amount of tokens that each user must stake before voting.\n    uint public stakingAmount;\n\n    struct Dispute {\n        uint amount;\n        uint timeout;\n        uint round;\n        uint expiresAt;\n        uint multiplier;\n        mapping(address => bool) disputers;\n        address currentDisputer;\n    }\n    Dispute dispute;\n\n    uint defaultDisputeTimeExtension = 1800; // 30 minutes\n\n    string public eventName;\n\n    /// Data feed hash, used for verification\n    string public dataFeedHash;\n\n    bytes32[] results;\n\n    enum RewardsDistribution {\n        Linear, // 0\n        Exponential // 1\n    }\n\n    struct ConsensusRules {\n        uint minTotalVotes;\n        uint minConsensusVotes;\n        uint minConsensusRatio;\n        uint minParticipantRatio;\n        uint maxParticipants;\n        RewardsDistribution rewardsDistribution;\n    }\n    ConsensusRules consensusRules;\n\n    /// Event's states\n    /// Events advance in the order defined here. Once the event reaches \"Reward\"\n    /// state, it cannot advance further.\n    /// Event states:\n    ///   - Waiting         -- Contract has been created, nothing is happening yet\n    ///   - Application     -- After applicationStartTime, the event advances here\n    ///                        new wallets can be added to the participats list during this state.\n    ///   - Running         -- Event is running, no new participants can be added\n    ///   - DisputeTimeout  -- Dispute possible\n    ///   - Reward          -- Participants can claim their payouts here - final state; can't be modified.\n    ///   - Failed          -- Event failed (no consensus, not enough users, timeout, ...) - final state; can't be modified\n    enum EventStates {\n        Waiting,\n        Application,\n        Running,\n        DisputeTimeout,\n        Reward,\n        Failed\n    }\n    EventStates eventState = EventStates.Waiting;\n\n    event StateTransition(EventStates newState);\n    event JoinEvent(address wallet);\n    event ClaimReward(address recipient);\n    event Error(string description);\n    event EventFailed(string description);\n    event ValidationStarted(uint validationRound);\n    event ValidationRestart(uint validationRound);\n    event DisputeTriggered(address byAddress);\n    event ClaimStake(address recipient);\n\n    constructor(\n        string _eventName,\n        uint _applicationStartTime,\n        uint _applicationEndTime,\n        uint _eventStartTime,\n        uint _eventRunTime, // in seconds\n        address _tokenAddress,\n        address _registry,\n        address[] _eventResolvers,\n        uint _leftoversRecoverableAfter, // with timestamp (in seconds)\n        uint[6] _consensusRules, // [minTotalVotes, minConsensusVotes, minConsensusRatio, minParticipantRatio, maxParticipants, distribution]\n        uint _stakingAmount,\n        uint[3] _disputeRules, // [dispute amount, dispute timeout, dispute multiplier]\n        string _ipfsEventHash\n    )\n        public\n        payable\n    {\n        require(_applicationStartTime < _applicationEndTime);\n        require(_eventStartTime > _applicationEndTime, \"Event can't start before applications close.\");\n\n        applicationStartTime = _applicationStartTime;\n        applicationEndTime = _applicationEndTime;\n        tokenAddress = _tokenAddress;\n\n        eventName = _eventName;\n        eventStartTime = _eventStartTime;\n        eventEndTime = _eventStartTime + _eventRunTime;\n\n        eventResolvers = _eventResolvers;\n\n        owner = msg.sender;\n        leftoversRecoverableAfter = _leftoversRecoverableAfter;\n\n        rewardsValidationRound = 1;\n        rewardsValidation.currentMasterNode = eventResolvers[0];\n\n        stakingAmount = _stakingAmount;\n\n        ipfsEventHash = _ipfsEventHash;\n\n        setConsensusRules(_consensusRules);\n        setDisputeData(_disputeRules);\n\n        eventRegistryAddress = _registry;\n\n        EventRegistry(eventRegistryAddress).registerEvent();\n    }\n\n    /// A modifier signifiying that a certain method can only be used by the creator\n    /// of the contract.\n    /// Rollbacks the transaction on failure.\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /// A modifier signifiying that rewards can be set only by the designated master node.\n    /// Rollbacks the transaction on failure.\n    modifier onlyCurrentMaster() {\n        require(\n            msg.sender == rewardsValidation.currentMasterNode,\n            \"Not a designated master node.\"\n        );\n        _;\n    }\n\n    ///\tA modifier signifying that a certain method can only be used by a wallet\n    ///\tmarked as a participant.\n    ///\tRollbacks the transaction or failure.\n    modifier onlyParticipating() {\n        require(\n            isParticipating(msg.sender),\n            \"Not participating.\"\n        );\n        _;\n    }\n\n    /// A modifier signifying that a certain method can only be used when the event\n    /// is in a certain state.\n    /// @param _state The event's required state\n    /// Example:\n    /// \tfunction claimReward() onlyParticipanting onlyState(EventStates.Reward) {\n    /// \t\t// ... content\n    /// \t}\n    modifier onlyState(EventStates _state) {\n        require(\n            _state == eventState,\n            \"Not possible in current event state.\"\n        );\n        _;\n    }\n\n    /// A modifier taking care of all the timed state transitions.\n    /// Should always be used before all other modifiers, especially `onlyState`,\n    /// since it can change state.\n    /// Should probably be used in ALL non-constant (transaction) methods of\n    /// the contract.\n    modifier timedStateTransition() {\n        if (eventState == EventStates.Waiting && now >= applicationStartTime) {\n            advanceState();\n        }\n\n        if (eventState == EventStates.Application && now >= applicationEndTime) {\n            if (participantsIndex.length < consensusRules.minTotalVotes) {\n                markAsFailed(\"Not enough users joined for required minimum votes.\");\n            } else {\n                advanceState();\n            }\n        }\n\n        if (eventState == EventStates.DisputeTimeout && now >= dispute.expiresAt) {\n            advanceState();\n        }\n        _;\n    }\n\n    modifier onlyChangeableState() {\n        require(\n            uint(eventState) < uint(EventStates.Reward),\n            \"Event state can't be modified anymore.\"\n        );\n        _;\n    }\n\n    modifier onlyAfterLefroversCanBeRecovered() {\n        require(now >= leftoversRecoverableAfter);\n        _;\n    }\n\n    modifier canValidateRewards(uint forRound) {\n        require(\n            isNode(msg.sender) && !isMasterNode(),\n            \"Not a valid sender address.\"\n        );\n\n        require(\n            validationState == ValidationState.Validating,\n            \"Not validating rewards.\"\n        );\n\n        require(\n            forRound == rewardsValidationRound,\n            \"Validation round mismatch.\"\n        );\n\n        require(\n            rewardsValidation.votersRound[msg.sender] < rewardsValidationRound,\n            \"Already voted for this round.\"\n        );\n        _;\n    }\n\n    /// Ensure we can receive money at any time.\n    /// Not used, but we might want to extend the reward fund while event is running.\n    function() public payable {}\n\n    /// Apply for participation in this event.\n    /// Available only during the Application state.\n    /// A transaction to this function has to be done by the users themselves,\n    /// registering their wallet address as a participent.\n    /// The transaction does not have to include any funds.\n    function joinEvent()\n        public\n        timedStateTransition\n    {\n        if (isParticipating(msg.sender)) {\n            emit Error(\"You are already participating.\");\n            return;\n        }\n\n        if (eventState != EventStates.Application) {\n            emit Error(\"You can only join in the Application state.\");\n            return;\n        }\n\n        if (\n            stakingAmount > 0 &&\n            VerityToken(tokenAddress).allowance(msg.sender, address(this)) < stakingAmount\n        ) {\n            emit Error(\"Not enough tokens staked.\");\n            return;\n        }\n\n        if (stakingAmount > 0) {\n            VerityToken(tokenAddress).transferFrom(msg.sender, address(this), stakingAmount);\n        }\n        participants[msg.sender] = true;\n        participantsIndex.push(msg.sender);\n        EventRegistry(eventRegistryAddress).addEventToUser(msg.sender);\n        emit JoinEvent(msg.sender);\n    }\n\n    /// Checks whether an address is participating in this event.\n    /// @param _user The addres to check for participation\n    /// @return {bool} Whether the given address is a participant of this event\n    function isParticipating(address _user) public view returns(bool) {\n        return participants[_user];\n    }\n\n    function getParticipants() public view returns(address[]) {\n        return participantsIndex;\n    }\n\n    function getEventTimes() public view returns(uint[5]) {\n        return [\n            applicationStartTime,\n            applicationEndTime,\n            eventStartTime,\n            eventEndTime,\n            leftoversRecoverableAfter\n        ];\n    }\n\n    /// Assign the actual rewards.\n    /// Receives a list of addresses and a list rewards. Mapping between the two\n    /// is done by the addresses' and reward's numerical index in the list, so\n    /// order is important.\n    /// @param _addresses A list of addresses\n    /// @param _etherRewards A list of ether rewards, must be the exact same length as addresses\n    /// @param _tokenRewards A list of token rewards, must be the exact same length as addresses\n    function setRewards(\n        address[] _addresses,\n        uint[] _etherRewards,\n        uint[] _tokenRewards\n    )\n        public\n        onlyCurrentMaster\n        timedStateTransition\n        onlyState(EventStates.Running)\n    {\n        require(\n            _addresses.length == _etherRewards.length &&\n            _addresses.length == _tokenRewards.length\n        );\n\n        require(\n            validationState == ValidationState.WaitingForRewards,\n            \"Not possible in this validation state.\"\n        );\n\n        for (uint i = 0; i < _addresses.length; ++i) {\n            rewards[_addresses[i]][uint(RewardType.Ether)] = _etherRewards[i];\n            rewards[_addresses[i]][uint(RewardType.Token)] = _tokenRewards[i];\n            rewardsIndex.push(_addresses[i]);\n        }\n    }\n\n    /// Triggered by the master node once rewards are set and ready to validate\n    function markRewardsSet(string rewardsHash)\n        public\n        onlyCurrentMaster\n        timedStateTransition\n        onlyState(EventStates.Running)\n    {\n        require(\n            validationState == ValidationState.WaitingForRewards,\n            \"Not possible in this validation state.\"\n        );\n\n        rewardsValidation.rewardsHash = rewardsHash;\n        rewardsValidation.approvalCount = 1;\n        validationState = ValidationState.Validating;\n        emit ValidationStarted(rewardsValidationRound);\n    }\n\n    /// Called by event resolver nodes if they agree with rewards\n    function approveRewards(uint validationRound)\n        public\n        onlyState(EventStates.Running)\n        canValidateRewards(validationRound)\n    {\n        ++rewardsValidation.approvalCount;\n        rewardsValidation.votersRound[msg.sender] = rewardsValidationRound;\n        checkApprovalRatio();\n    }\n\n    /// Called by event resolvers if they don't agree with rewards\n    function rejectRewards(uint validationRound, string altHash)\n        public\n        onlyState(EventStates.Running)\n        canValidateRewards(validationRound)\n    {\n        ++rewardsValidation.rejectionCount;\n        rewardsValidation.votersRound[msg.sender] = rewardsValidationRound;\n\n        if (!rewardsValidation.rejectedHashes[altHash]) {\n            rewardsValidation.altHashes.push(altHash);\n            rewardsValidation.altHashVotes[altHash].push(msg.sender);\n        }\n\n        checkRejectionRatio();\n    }\n\n    /// Trigger a dispute.\n    function triggerDispute()\n        public\n        timedStateTransition\n        onlyParticipating\n        onlyState(EventStates.DisputeTimeout)\n    {\n        require(\n            VerityToken(tokenAddress).allowance(msg.sender, address(this)) >=\n            dispute.amount * dispute.multiplier**dispute.round,\n            \"Not enough tokens staked for dispute.\"\n        );\n\n        require(\n            dispute.disputers[msg.sender] == false,\n            \"Already triggered a dispute.\"\n        );\n\n        /// Increase dispute amount for next dispute and store disputer\n        dispute.amount = dispute.amount * dispute.multiplier**dispute.round;\n        ++dispute.round;\n        dispute.disputers[msg.sender] = true;\n        dispute.currentDisputer = msg.sender;\n\n        /// Transfer staked amount\n        VerityToken(tokenAddress).transferFrom(msg.sender, address(this), dispute.amount);\n\n        /// Restart event\n        deleteValidationData();\n        deleteRewards();\n        eventState = EventStates.Application;\n        applicationEndTime = eventStartTime = now + defaultDisputeTimeExtension;\n        eventEndTime = eventStartTime + defaultDisputeTimeExtension;\n\n        /// Make consensus rules stricter\n        /// Increases by ~10% of consensus diff\n        consensusRules.minConsensusRatio += (100 - consensusRules.minConsensusRatio) * 100 / 1000;\n        /// Increase total votes required my ~10% and consensus votes by consensus ratio\n        uint votesIncrease = consensusRules.minTotalVotes * 100 / 1000;\n        consensusRules.minTotalVotes += votesIncrease;\n        consensusRules.minConsensusVotes += votesIncrease * consensusRules.minConsensusRatio / 100;\n\n        emit DisputeTriggered(msg.sender);\n    }\n\n    /// Checks current approvals for threshold\n    function checkApprovalRatio() private {\n        if (approvalRatio() >= consensusRules.minConsensusRatio) {\n            validationState = ValidationState.Finished;\n            dispute.expiresAt = now + dispute.timeout;\n            advanceState();\n        }\n    }\n\n    /// Checks current rejections for threshold\n    function checkRejectionRatio() private {\n        if (rejectionRatio() >= (100 - consensusRules.minConsensusRatio)) {\n            rejectCurrentValidation();\n        }\n    }\n\n    /// Handle the rejection of current rewards\n    function rejectCurrentValidation() private {\n        rewardsValidation.rejectedHashes[rewardsValidation.rewardsHash] = true;\n\n        // If approved votes are over the threshold all other hashes will also fail\n        if (\n            rewardsValidation.approvalCount + rewardsValidationRound - 1 >\n            rewardsValidation.rejectionCount - rewardsValidation.altHashes.length + 1\n        ) {\n            markAsFailed(\"Consensus can't be reached\");\n        } else {\n            restartValidation();\n        }\n    }\n\n    function restartValidation() private {\n        ++rewardsValidationRound;\n        rewardsValidation.currentMasterNode = rewardsValidation.altHashVotes[rewardsValidation.altHashes[0]][0];\n\n        deleteValidationData();\n        deleteRewards();\n\n        emit ValidationRestart(rewardsValidationRound);\n    }\n\n    /// Delete rewards.\n    function deleteRewards() private {\n        for (uint j = 0; j < rewardsIndex.length; ++j) {\n            rewards[rewardsIndex[j]][uint(RewardType.Ether)] = 0;\n            rewards[rewardsIndex[j]][uint(RewardType.Token)] = 0;\n        }\n        delete rewardsIndex;\n    }\n\n    /// Delete validation data\n    function deleteValidationData() private {\n        rewardsValidation.approvalCount = 0;\n        rewardsValidation.rejectionCount = 0;\n        for (uint i = 0; i < rewardsValidation.altHashes.length; ++i) {\n            delete rewardsValidation.altHashVotes[rewardsValidation.altHashes[i]];\n        }\n        delete rewardsValidation.altHashes;\n        validationState = ValidationState.WaitingForRewards;\n    }\n\n    /// Ratio of nodes that approved of current hash\n    function approvalRatio() private view returns(uint) {\n        return rewardsValidation.approvalCount * 100 / eventResolvers.length;\n    }\n\n    /// Ratio of nodes that rejected the current hash\n    function rejectionRatio() private view returns(uint) {\n        return rewardsValidation.rejectionCount * 100 / eventResolvers.length;\n    }\n\n    /// Returns the whole array of event resolvers.\n    function getEventResolvers() public view returns(address[]) {\n        return eventResolvers;\n    }\n\n    /// Checks if the address is current master node.\n    function isMasterNode() public view returns(bool) {\n        return rewardsValidation.currentMasterNode == msg.sender;\n    }\n\n    function isNode(address node) private view returns(bool) {\n        for(uint i = 0; i < eventResolvers.length; ++i) {\n            if(eventResolvers[i] == node) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /// Returns the calling user's assigned rewards. Can be 0.\n    /// Only available to participating users in the Reward state, since rewards\n    /// are not assigned before that.\n    function getReward()\n        public\n        view\n        returns(uint[2])\n    {\n        return [\n            rewards[msg.sender][uint(RewardType.Ether)],\n            rewards[msg.sender][uint(RewardType.Token)]\n        ];\n    }\n\n    /// Returns all the addresses that have rewards set.\n    function getRewardsIndex() public view returns(address[]) {\n        return rewardsIndex;\n    }\n\n    /// Returns rewards for specified addresses.\n    /// [[ethRewards, tokenRewards], [ethRewards, tokenRewards], ...]\n    function getRewards(address[] _addresses)\n        public\n        view\n        returns(uint[], uint[])\n    {\n        uint[] memory ethRewards = new uint[](_addresses.length);\n        uint[] memory tokenRewards = new uint[](_addresses.length);\n\n        for(uint i = 0; i < _addresses.length; ++i) {\n            ethRewards[i] = rewards[_addresses[i]][uint(RewardType.Ether)];\n            tokenRewards[i] = rewards[_addresses[i]][uint(RewardType.Token)];\n        }\n\n        return (ethRewards, tokenRewards);\n    }\n\n    /// Claim a reward.\n    /// Needs to be called by the users themselves.\n    /// Only available in the Reward state, after rewards have been received from\n    /// the validation nodes.\n    function claimReward()\n        public\n        onlyParticipating\n        timedStateTransition\n        onlyState(EventStates.Reward)\n    {\n        uint etherReward = rewards[msg.sender][uint(RewardType.Ether)];\n        uint tokenReward = rewards[msg.sender][uint(RewardType.Token)];\n\n        if (etherReward == 0 && tokenReward == 0) {\n            emit Error(\"You do not have any rewards to claim.\");\n            return;\n        }\n\n        if (\n            address(this).balance < rewards[msg.sender][uint(RewardType.Ether)] ||\n            VerityToken(tokenAddress).balanceOf(address(this)) < rewards[msg.sender][uint(RewardType.Token)]\n        ) {\n            emit Error(\"Critical error: not enough balance to pay out reward. Contact Verity.\");\n            return;\n        }\n\n        rewards[msg.sender][uint(RewardType.Ether)] = 0;\n        rewards[msg.sender][uint(RewardType.Token)] = 0;\n\n        msg.sender.transfer(etherReward);\n        if (tokenReward > 0) {\n            VerityToken(tokenAddress).transfer(msg.sender, tokenReward);\n        }\n\n        emit ClaimReward(msg.sender);\n    }\n\n    function claimFailed()\n        public\n        onlyParticipating\n        timedStateTransition\n        onlyState(EventStates.Failed)\n    {\n        require(\n            stakingAmount > 0,\n            \"No stake to claim\"\n        );\n\n        VerityToken(tokenAddress).transfer(msg.sender, stakingAmount);\n        participants[msg.sender] = false;\n        emit ClaimStake(msg.sender);\n    }\n\n    function setDataFeedHash(string _hash) public onlyOwner {\n        dataFeedHash = _hash;\n    }\n\n    function setResults(bytes32[] _results)\n        public\n        onlyCurrentMaster\n        timedStateTransition\n        onlyState(EventStates.Running)\n    {\n        results = _results;\n    }\n\n    function getResults() public view returns(bytes32[]) {\n        return results;\n    }\n\n    function getState() public view returns(uint) {\n        return uint(eventState);\n    }\n\n    function getBalance() public view returns(uint[2]) {\n        return [\n            address(this).balance,\n            VerityToken(tokenAddress).balanceOf(address(this))\n        ];\n    }\n\n    /// Returns an array of consensus rules.\n    /// [minTotalVotes, minConsensusVotes, minConsensusRatio, minParticipantRatio, maxParticipants]\n    function getConsensusRules() public view returns(uint[6]) {\n        return [\n            consensusRules.minTotalVotes,\n            consensusRules.minConsensusVotes,\n            consensusRules.minConsensusRatio,\n            consensusRules.minParticipantRatio,\n            consensusRules.maxParticipants,\n            uint(consensusRules.rewardsDistribution)\n        ];\n    }\n\n    /// Returns an array of dispute rules.\n    /// [dispute amount, dispute timeout, dispute round]\n    function getDisputeData() public view returns(uint[4], address) {\n        return ([\n            dispute.amount,\n            dispute.timeout,\n            dispute.multiplier,\n            dispute.round\n        ], dispute.currentDisputer);\n    }\n\n    function recoverLeftovers()\n        public\n        onlyOwner\n        onlyAfterLefroversCanBeRecovered\n    {\n        owner.transfer(address(this).balance);\n        uint tokenBalance = VerityToken(tokenAddress).balanceOf(address(this));\n        VerityToken(tokenAddress).transfer(owner, tokenBalance);\n    }\n\n    /// Advances the event's state to the next one. Only for internal use.\n    function advanceState() private onlyChangeableState {\n        eventState = EventStates(uint(eventState) + 1);\n        emit StateTransition(eventState);\n    }\n\n    /// Sets consensus rules. For internal use only.\n    function setConsensusRules(uint[6] rules) private {\n        consensusRules.minTotalVotes = rules[0];\n        consensusRules.minConsensusVotes = rules[1];\n        consensusRules.minConsensusRatio = rules[2];\n        consensusRules.minParticipantRatio = rules[3];\n        consensusRules.maxParticipants = rules[4];\n        consensusRules.rewardsDistribution = RewardsDistribution(rules[5]);\n    }\n\n    function markAsFailed(string description) private onlyChangeableState {\n        eventState = EventStates.Failed;\n        emit EventFailed(description);\n    }\n\n    function setDisputeData(uint[3] rules) private {\n        uint _multiplier = rules[2];\n        if (_multiplier <= 1) {\n            _multiplier = 1;\n        }\n\n        dispute.amount = rules[0];\n        dispute.timeout = rules[1];\n        dispute.multiplier = _multiplier;\n        dispute.round = 0;\n    }\n}",
  "bytecode": "608060408190526004805460ff19908116909155610708602155602b8054909116905562003d3e3881900390819083398101604090815281516020830151918301516060840151608085015160a086015160c087015160e08801516101008901516101e08a01516102608b0151988b019a97989697959694959394928401939192610120830192610200810191018a8c106200009a57600080fd5b8a8a116200012f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4576656e742063616e2774207374617274206265666f7265206170706c69636160448201527f74696f6e7320636c6f73652e0000000000000000000000000000000000000000606482015290519081900360840190fd5b8b6013819055508a60148190555087600160006101000a815481600160a060020a030219169083600160a060020a031602179055508c602290805190602001906200017c92919062000359565b5060158a9055888a0160165585516200019d906003906020890190620003de565b5060008054600160a060020a0319163317815560188690556001600d55600380549091908110620001ca57fe5b6000918252602091829020015460058054600160a060020a031916600160a060020a03909216919091179055601984905581516200020f916017919084019062000359565b506200022484640100000000620002db810204565b62000238826401000000006200032f810204565b60028054600160a060020a031916600160a060020a038981169190911791829055604080517fc4130ae00000000000000000000000000000000000000000000000000000000081529051929091169163c4130ae09160048082019260009290919082900301818387803b158015620002af57600080fd5b505af1158015620002c4573d6000803e3d6000fd5b50505050505050505050505050505050506200048b565b8051602555602081015160265560408101516027556060810151602855608081015160295560a081015160018111156200031157fe5b602a805460ff1916600183818111156200032757fe5b021790555050565b60408101516001811162000341575060015b8151601a55602090910151601b55601e556000601c55565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200039c57805160ff1916838001178555620003cc565b82800160010185558215620003cc579182015b82811115620003cc578251825591602001919060010190620003af565b50620003da92915062000444565b5090565b82805482825590600052602060002090810192821562000436579160200282015b82811115620004365782518254600160a060020a031916600160a060020a03909116178255602090920191600190910190620003ff565b50620003da92915062000464565b6200046191905b80821115620003da57600081556001016200044b565b90565b6200046191905b80821115620003da578054600160a060020a03191681556001016200046b565b6138a3806200049b6000396000f3006080604052600436106101895763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662f16142811461018b578063073f03fb146101b257806311e956c8146101e357806312065fe01461020c5780631865c57d1461025c5780631a0ddce9146102715780633d18b912146103385780634227357c1461034d578063437933cc146103d757806345f99d51146104305780634717f97c146104455780634b766b95146104aa578063510ccb431461050357806352f91acf146105f157806354e33cf0146106065780635aa68ac01461061b578063739a3e021461063057806374539f98146106455780638043c9c01461065a5780638126cb1e1461066f57806381c2d875146106cd5780638da5cb5b146106f75780639d76ea581461070c578063a77ae83914610721578063ab95b58614610739578063ac88490214610763578063b88a802f146107b8578063d6e9b019146107cd578063efba9bd214610833578063f4caee8814610848578063f9010d1914610869575b005b34801561019757600080fd5b506101a061087e565b60408051918252519081900360200190f35b3480156101be57600080fd5b506101c7610884565b60408051600160a060020a039092168252519081900360200190f35b3480156101ef57600080fd5b506101f8610893565b604080519115158252519081900360200190f35b34801561021857600080fd5b506102216108a5565b6040518082600260200280838360005b83811015610249578181015183820152602001610231565b5050505090500191505060405180910390f35b34801561026857600080fd5b506101a0610957565b34801561027d57600080fd5b506040805160206004803580820135838102808601850190965280855261018995369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506109709650505050505050565b34801561034457600080fd5b50610221610d04565b34801561035957600080fd5b50610362610d46565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561039c578181015183820152602001610384565b50505050905090810190601f1680156103c95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103e357600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610189943694929360249392840191908190840183828082843750949750610dd49650505050505050565b34801561043c57600080fd5b50610189610e02565b34801561045157600080fd5b5061045a6110f6565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561049657818101518382015260200161047e565b505050509050019250505060405180910390f35b3480156104b657600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261018994369492936024939284019190819084018382808284375094975061114f9650505050505050565b34801561050f57600080fd5b5060408051602060048035808201358381028086018501909652808552610558953695939460249493850192918291850190849080828437509497506113f19650505050505050565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561059c578181015183820152602001610584565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105db5781810151838201526020016105c3565b5050505090500194505050505060405180910390f35b3480156105fd57600080fd5b5061018961152f565b34801561061257600080fd5b5061045a611a03565b34801561062757600080fd5b5061045a611a64565b34801561063c57600080fd5b506101a0611ac4565b34801561065157600080fd5b5061045a611aca565b34801561066657600080fd5b50610362611b2a565b34801561067b57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610189958335953695604494919390910191908190840183828082843750949750611b859650505050505050565b3480156106d957600080fd5b506106e2611f08565b60405181518152808260c08083836020610231565b34801561070357600080fd5b506101c7611f5e565b34801561071857600080fd5b506101c7611f6d565b34801561072d57600080fd5b50610189600435611f7c565b34801561074557600080fd5b5061074e6121b1565b60405181518152808260a08083836020610231565b34801561076f57600080fd5b5060408051602060048035808201358381028086018501909652808552610189953695939460249493850192918291850190849080828437509497506121f09650505050505050565b3480156107c457600080fd5b506101896123b6565b3480156107d957600080fd5b506107e26128bd565b6040518083608080838360005b838110156108075781810151838201526020016107ef565b5050505090500182600160a060020a0316600160a060020a031681526020019250505060405180910390f35b34801561083f57600080fd5b50610189612902565b34801561085457600080fd5b506101f8600160a060020a0360043516612a96565b34801561087557600080fd5b50610189612ab4565b600d5481565b600254600160a060020a031681565b600554600160a060020a031633145b90565b6108ad613607565b604080518082018252308031825260015483517f70a08231000000000000000000000000000000000000000000000000000000008152600481019290925292519192602080850193600160a060020a03909216926370a0823192602480830193928290030181600087803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b505050506040513d602081101561094e57600080fd5b50519052905090565b602b5460009060ff16600581111561096b57fe5b905090565b600554600090600160a060020a031633146109d5576040805160e560020a62461bcd02815260206004820152601d60248201527f4e6f7420612064657369676e61746564206d6173746572206e6f64652e000000604482015290519081900360640190fd5b6000602b5460ff1660058111156109e857fe5b1480156109f757506013544210155b15610a0457610a04612f4e565b6001602b5460ff166005811115610a1757fe5b148015610a2657506014544210155b15610a8557602554600f541015610a7d57610a78606060405190810160405280603381526020016000805160206138188339815191528152602001600080516020613838833981519152815250613064565b610a85565b610a85612f4e565b6003602b5460ff166005811115610a9857fe5b148015610aa75750601d544210155b15610ab457610ab4612f4e565b602b5460029060ff166005811115610ac857fe5b816005811115610ad457fe5b14610b26576040805160e560020a62461bcd02815260206004820152602480820152600080516020613858833981519152604482015260e160020a6330ba329702606482015290519081900360840190fd5b83518551148015610b38575082518551145b1515610b4357600080fd5b600060045460ff166002811115610b5657fe5b14610bd1576040805160e560020a62461bcd02815260206004820152602660248201527f4e6f7420706f737369626c6520696e20746869732076616c69646174696f6e2060448201527f73746174652e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600091505b8451821015610cfd578382815181101515610bed57fe5b90602001906020020151601160008785815181101515610c0957fe5b602090810291909101810151600160a060020a0316825281810192909252604090810160009081208180529092529020558251839083908110610c4857fe5b90602001906020020151601160008785815181101515610c6457fe5b602090810291909101810151600160a060020a031682528181019290925260409081016000908120600182529092529020558451601290869084908110610ca757fe5b602090810291909101810151825460018082018555600094855292909320909201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909316929092179091559190910190610bd6565b5050505050565b610d0c613607565b5060408051808201825233600090815260116020908152838220828052808252848320548452600183528152929020549181019190915290565b6023805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610dcc5780601f10610da157610100808354040283529160200191610dcc565b820191906000526020600020905b815481529060010190602001808311610daf57829003601f168201915b505050505081565b600054600160a060020a03163314610deb57600080fd5b8051610dfe906023906020840190613622565b5050565b610e0b33612a96565b1515610e61576040805160e560020a62461bcd02815260206004820152601260248201527f4e6f742070617274696369706174696e672e0000000000000000000000000000604482015290519081900360640190fd5b6000602b5460ff166005811115610e7457fe5b148015610e8357506013544210155b15610e9057610e90612f4e565b6001602b5460ff166005811115610ea357fe5b148015610eb257506014544210155b15610f1157602554600f541015610f0957610f04606060405190810160405280603381526020016000805160206138188339815191528152602001600080516020613838833981519152815250613064565b610f11565b610f11612f4e565b6003602b5460ff166005811115610f2457fe5b148015610f335750601d544210155b15610f4057610f40612f4e565b602b5460059060ff1681811115610f5357fe5b816005811115610f5f57fe5b14610fb1576040805160e560020a62461bcd02815260206004820152602480820152600080516020613858833981519152604482015260e160020a6330ba329702606482015290519081900360840190fd5b60195460001061100b576040805160e560020a62461bcd02815260206004820152601160248201527f4e6f207374616b6520746f20636c61696d000000000000000000000000000000604482015290519081900360640190fd5b600154601954604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481019290925251600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b15801561107b57600080fd5b505af115801561108f573d6000803e3d6000fd5b505050506040513d60208110156110a557600080fd5b5050336000818152600e6020908152604091829020805460ff19169055815192835290517f5a53668be860a256c7ff92bff48881a9db38994032e2b90e5a0bdd51921fbeb79281900390910190a150565b6060602480548060200260200160405190810160405280929190818152602001828054801561114557602002820191906000526020600020905b81548152600190910190602001808311611130575b5050505050905090565b600554600160a060020a031633146111b1576040805160e560020a62461bcd02815260206004820152601d60248201527f4e6f7420612064657369676e61746564206d6173746572206e6f64652e000000604482015290519081900360640190fd5b6000602b5460ff1660058111156111c457fe5b1480156111d357506013544210155b156111e0576111e0612f4e565b6001602b5460ff1660058111156111f357fe5b14801561120257506014544210155b1561126157602554600f54101561125957611254606060405190810160405280603381526020016000805160206138188339815191528152602001600080516020613838833981519152815250613064565b611261565b611261612f4e565b6003602b5460ff16600581111561127457fe5b1480156112835750601d544210155b1561129057611290612f4e565b602b5460029060ff1660058111156112a457fe5b8160058111156112b057fe5b14611302576040805160e560020a62461bcd02815260206004820152602480820152600080516020613858833981519152604482015260e160020a6330ba329702606482015290519081900360840190fd5b600060045460ff16600281111561131557fe5b14611390576040805160e560020a62461bcd02815260206004820152602660248201527f4e6f7420706f737369626c6520696e20746869732076616c69646174696f6e2060448201527f73746174652e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b81516113a3906006906020850190613622565b50600160078190556004805460ff19169091179055600d5460408051918252517f47c2e9e59e6d2347f314927d02f36b95696a09b5f0ac0bae119ff5ae937016559181900360200190a15050565b60608060608060008551604051908082528060200260200182016040528015611424578160200160208202803883390190505b5092508551604051908082528060200260200182016040528015611452578160200160208202803883390190505b509150600090505b85518110156115245760116000878381518110151561147557fe5b602090810291909101810151600160a060020a03168252818101929092526040908101600090812081805290925290205483518490839081106114b457fe5b6020908102909101015285516011906000908890849081106114d257fe5b602090810291909101810151600160a060020a03168252818101929092526040908101600090812060018252909252902054825183908390811061151257fe5b6020908102909101015260010161145a565b509094909350915050565b600080602b5460ff16600581111561154357fe5b14801561155257506013544210155b1561155f5761155f612f4e565b6001602b5460ff16600581111561157257fe5b14801561158157506014544210155b156115e057602554600f5410156115d8576115d3606060405190810160405280603381526020016000805160206138188339815191528152602001600080516020613838833981519152815250613064565b6115e0565b6115e0612f4e565b6003602b5460ff1660058111156115f357fe5b1480156116025750601d544210155b1561160f5761160f612f4e565b61161833612a96565b151561166e576040805160e560020a62461bcd02815260206004820152601260248201527f4e6f742070617274696369706174696e672e0000000000000000000000000000604482015290519081900360640190fd5b602b5460039060ff16600581111561168257fe5b81600581111561168e57fe5b146116e0576040805160e560020a62461bcd02815260206004820152602480820152600080516020613858833981519152604482015260e160020a6330ba329702606482015290519081900360840190fd5b601c54601e54601a54600154604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482015230602482015290519490930a90910292600160a060020a039091169163dd62ed3e9160448083019260209291908290030181600087803b15801561175c57600080fd5b505af1158015611770573d6000803e3d6000fd5b505050506040513d602081101561178657600080fd5b50511015611804576040805160e560020a62461bcd02815260206004820152602560248201527f4e6f7420656e6f75676820746f6b656e73207374616b656420666f722064697360448201527f707574652e000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152601f602052604090205460ff161561186c576040805160e560020a62461bcd02815260206004820152601c60248201527f416c726561647920747269676765726564206120646973707574652e00000000604482015290519081900360640190fd5b601c8054601e54601a80549183900a90910281556001918201909255336000818152601f60209081526040808320805460ff191686179055815473ffffffffffffffffffffffffffffffffffffffff1916841782559354945484517f23b872dd000000000000000000000000000000000000000000000000000000008152600481019490945230602485015260448401529251600160a060020a03909416936323b872dd936064808501949193918390030190829087803b15801561193057600080fd5b505af1158015611944573d6000803e3d6000fd5b505050506040513d602081101561195a57600080fd5b50611965905061319a565b61196d613267565b602b8054600160ff199091161790556021544281016015819055601481905501601655602780546103e8606482810381028290049092019283905560258054808402929092049182019055602680549382029290920490920190556040805133815290519193507ff6d97c5e133e50668a6b3607d8748ef6599c3303babb2b08a515a5a67369f45f919081900360200190a15050565b6060601280548060200260200160405190810160405280929190818152602001828054801561114557602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611a3d575050505050905090565b6060600f80548060200260200160405190810160405280929190818152602001828054801561114557602002820191906000526020600020908154600160a060020a03168152600190910190602001808311611a3d575050505050905090565b60195481565b6060600380548060200260200160405190810160405280929190818152602001828054801561114557602002820191906000526020600020908154600160a060020a03168152600190910190602001808311611a3d575050505050905090565b6022805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610dcc5780601f10610da157610100808354040283529160200191610dcc565b602b5460029060ff166005811115611b9957fe5b816005811115611ba557fe5b14611bf7576040805160e560020a62461bcd02815260206004820152602480820152600080516020613858833981519152604482015260e160020a6330ba329702606482015290519081900360840190fd5b82611c0133613319565b8015611c125750611c10610893565b155b1515611c68576040805160e560020a62461bcd02815260206004820152601b60248201527f4e6f7420612076616c69642073656e64657220616464726573732e0000000000604482015290519081900360640190fd5b600160045460ff166002811115611c7b57fe5b14611cd0576040805160e560020a62461bcd02815260206004820152601760248201527f4e6f742076616c69646174696e6720726577617264732e000000000000000000604482015290519081900360640190fd5b600d548114611d29576040805160e560020a62461bcd02815260206004820152601a60248201527f56616c69646174696f6e20726f756e64206d69736d617463682e000000000000604482015290519081900360640190fd5b600d54336000908152600a602052604090205410611d91576040805160e560020a62461bcd02815260206004820152601d60248201527f416c726561647920766f74656420666f72207468697320726f756e642e000000604482015290519081900360640190fd5b600880546001019055600d54336000908152600a602090815260409182902092909255518451600c9286929182918401908083835b60208310611de55780518252601f199092019160209182019101611dc6565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff1615159150611efa90505760098054600181018083556000929092528451611e62917f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01906020870190613622565b50506005600601836040518082805190602001908083835b60208310611e995780518252601f199092019160209182019101611e7a565b51815160001960209485036101000a0190811690199190911617905292019485525060405193849003810190932080546001810182556000918252939020909201805473ffffffffffffffffffffffffffffffffffffffff19163317905550505b611f02613377565b50505050565b611f106136a0565b6040805160c081018252602554815260265460208201526027549181019190915260285460608201526029546080820152602a5460a082019060ff166001811115611f5757fe5b9052905090565b600054600160a060020a031681565b600154600160a060020a031681565b602b5460029060ff166005811115611f9057fe5b816005811115611f9c57fe5b14611fee576040805160e560020a62461bcd02815260206004820152602480820152600080516020613858833981519152604482015260e160020a6330ba329702606482015290519081900360840190fd5b81611ff833613319565b80156120095750612007610893565b155b151561205f576040805160e560020a62461bcd02815260206004820152601b60248201527f4e6f7420612076616c69642073656e64657220616464726573732e0000000000604482015290519081900360640190fd5b600160045460ff16600281111561207257fe5b146120c7576040805160e560020a62461bcd02815260206004820152601760248201527f4e6f742076616c69646174696e6720726577617264732e000000000000000000604482015290519081900360640190fd5b600d548114612120576040805160e560020a62461bcd02815260206004820152601a60248201527f56616c69646174696f6e20726f756e64206d69736d617463682e000000000000604482015290519081900360640190fd5b600d54336000908152600a602052604090205410612188576040805160e560020a62461bcd02815260206004820152601d60248201527f416c726561647920766f74656420666f72207468697320726f756e642e000000604482015290519081900360640190fd5b600780546001019055600d54336000908152600a60205260409020556121ac613392565b505050565b6121b96136bf565b60a0604051908101604052806013548152602001601454815260200160155481526020016016548152602001601854815250905090565b600554600160a060020a03163314612252576040805160e560020a62461bcd02815260206004820152601d60248201527f4e6f7420612064657369676e61746564206d6173746572206e6f64652e000000604482015290519081900360640190fd5b6000602b5460ff16600581111561226557fe5b14801561227457506013544210155b1561228157612281612f4e565b6001602b5460ff16600581111561229457fe5b1480156122a357506014544210155b1561230257602554600f5410156122fa576122f5606060405190810160405280603381526020016000805160206138188339815191528152602001600080516020613838833981519152815250613064565b612302565b612302612f4e565b6003602b5460ff16600581111561231557fe5b1480156123245750601d544210155b1561233157612331612f4e565b602b5460029060ff16600581111561234557fe5b81600581111561235157fe5b146123a3576040805160e560020a62461bcd02815260206004820152602480820152600080516020613858833981519152604482015260e160020a6330ba329702606482015290519081900360840190fd5b81516121ac9060249060208501906136de565b6000806123c233612a96565b1515612418576040805160e560020a62461bcd02815260206004820152601260248201527f4e6f742070617274696369706174696e672e0000000000000000000000000000604482015290519081900360640190fd5b6000602b5460ff16600581111561242b57fe5b14801561243a57506013544210155b1561244757612447612f4e565b6001602b5460ff16600581111561245a57fe5b14801561246957506014544210155b156124c857602554600f5410156124c0576124bb606060405190810160405280603381526020016000805160206138188339815191528152602001600080516020613838833981519152815250613064565b6124c8565b6124c8612f4e565b6003602b5460ff1660058111156124db57fe5b1480156124ea5750601d544210155b156124f7576124f7612f4e565b602b5460049060ff16600581111561250b57fe5b81600581111561251757fe5b14612569576040805160e560020a62461bcd02815260206004820152602480820152600080516020613858833981519152604482015260e160020a6330ba329702606482015290519081900360840190fd5b336000908152601160209081526040808320838052909152808220546001835291205490935091508215801561259d575081155b1561261b576040805160208082526025908201527f596f7520646f206e6f74206861766520616e79207265776172647320746f2063818301527f6c61696d2e000000000000000000000000000000000000000000000000000000606082015290516000805160206137f88339815191529181900360800190a16121ac565b336000908152601160209081526040808320838052909152902054303110806126ed5750336000908152601160209081526040808320600180855290835281842054905482517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015292519194600160a060020a03909116936370a08231936024808201949293918390030190829087803b1580156126bf57600080fd5b505af11580156126d3573d6000803e3d6000fd5b505050506040513d60208110156126e957600080fd5b5051105b15612791576040805160208082526045908201527f437269746963616c206572726f723a206e6f7420656e6f7567682062616c616e818301527f636520746f20706179206f7574207265776172642e20436f6e7461637420566560608201527f726974792e000000000000000000000000000000000000000000000000000000608082015290516000805160206137f88339815191529181900360a00190a16121ac565b33600081815260116020908152604080832083805290915280822082905560018252808220829055516108fc86150291869190818181858888f193505050501580156127e1573d6000803e3d6000fd5b50600082111561288557600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018590529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b15801561285857600080fd5b505af115801561286c573d6000803e3d6000fd5b505050506040513d602081101561288257600080fd5b50505b6040805133815290517f63e32091e4445d16e29c33a6b264577c2d86694021aa4e6f4dd590048f5792e89181900360200190a1505050565b6128c561371b565b5060408051608081018252601a548152601b54602080830191909152601e5492820192909252601c5460608201529054600160a060020a03169091565b60008054600160a060020a0316331461291a57600080fd5b60185442101561292957600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f19350505050158015612964573d6000803e3d6000fd5b50600154604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b1580156129cb57600080fd5b505af11580156129df573d6000803e3d6000fd5b505050506040513d60208110156129f557600080fd5b505160015460008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015260248101869052905194955092169263a9059cbb926044808201936020939283900390910190829087803b158015612a6c57600080fd5b505af1158015612a80573d6000803e3d6000fd5b505050506040513d60208110156121ac57600080fd5b600160a060020a03166000908152600e602052604090205460ff1690565b6000602b5460ff166005811115612ac757fe5b148015612ad657506013544210155b15612ae357612ae3612f4e565b6001602b5460ff166005811115612af657fe5b148015612b0557506014544210155b15612b6457602554600f541015612b5c57612b57606060405190810160405280603381526020016000805160206138188339815191528152602001600080516020613838833981519152815250613064565b612b64565b612b64612f4e565b6003602b5460ff166005811115612b7757fe5b148015612b865750601d544210155b15612b9357612b93612f4e565b612b9c33612a96565b15612bf457604080516020808252601e908201527f596f752061726520616c72656164792070617274696369706174696e672e00008183015290516000805160206137f88339815191529181900360600190a1612f4c565b6001602b5460ff166005811115612c0757fe5b14612c8557604080516020808252602b908201527f596f752063616e206f6e6c79206a6f696e20696e20746865204170706c696361818301527f74696f6e2073746174652e000000000000000000000000000000000000000000606082015290516000805160206137f88339815191529181900360800190a1612f4c565b6000601954118015612d2f5750601954600154604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523360048201523060248201529051600160a060020a039092169163dd62ed3e916044808201926020929091908290030181600087803b158015612d0157600080fd5b505af1158015612d15573d6000803e3d6000fd5b505050506040513d6020811015612d2b57600080fd5b5051105b15612d87576040805160208082526019908201527f4e6f7420656e6f75676820746f6b656e73207374616b65642e000000000000008183015290516000805160206137f88339815191529181900360600190a1612f4c565b60006019541115612e3557600154601954604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481019290925251600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b158015612e0857600080fd5b505af1158015612e1c573d6000803e3d6000fd5b505050506040513d6020811015612e3257600080fd5b50505b336000818152600e6020526040808220805460ff19166001908117909155600f8054918201815583527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80201805473ffffffffffffffffffffffffffffffffffffffff19168417905560025481517fb9d3514d00000000000000000000000000000000000000000000000000000000815260048101949094529051600160a060020a03919091169263b9d3514d92602480830193919282900301818387803b158015612eff57600080fd5b505af1158015612f13573d6000803e3d6000fd5b50506040805133815290517f0940fd5e528ae9fa6c086f42387c791c3854e0febdf0717c2da155c9dbf1e86c9350908190036020019150a15b565b6004602b5460ff166005811115612f6157fe5b10612fdc576040805160e560020a62461bcd02815260206004820152602660248201527f4576656e742073746174652063616e2774206265206d6f64696669656420616e60448201527f796d6f72652e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b602b5460ff166005811115612fed57fe5b6001016005811115612ffb57fe5b602b805460ff1916600183600581111561301157fe5b0217905550602b546040517fb9eb8a309bf89f3159b39681f485b6430fec1035b2b457edbcdadcdece888c0b9160ff16908082600581111561304f57fe5b60ff16815260200191505060405180910390a1565b6004602b5460ff16600581111561307757fe5b106130f2576040805160e560020a62461bcd02815260206004820152602660248201527f4576656e742073746174652063616e2774206265206d6f64696669656420616e60448201527f796d6f72652e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b602b805460ff1916600517905560408051602080825283518183015283517f860b7e55e58bd6095b36c4b4016ed8a2e47cb8ebd020fa0e43b32649deb540c3938593928392918301919085019080838360005b8381101561315d578181015183820152602001613145565b50505050905090810190601f16801561318a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b6000600781905560088190555b60095481101561324e5760098054600b9190839081106131c357fe5b9060005260206000200160405180828054600181600116156101000203166002900480156132285780601f10613206576101008083540402835291820191613228565b820191906000526020600020905b815481529060010190602001808311613214575b5050928352505060405190819003602001902061324690600061373a565b6001016131a7565b61325a60096000613758565b506004805460ff19169055565b60005b60125481101561330a5760006011600060128481548110151561328957fe5b600091825260208083209190910154600160a060020a031683528281019390935260409182018120818052909252812091909155601280546011918391859081106132d057fe5b600091825260208083209190910154600160a060020a0316835282810193909352604091820181206001808352935220919091550161326a565b6133166012600061373a565b50565b6000805b60035481101561336c5782600160a060020a031660038281548110151561334057fe5b600091825260209091200154600160a060020a031614156133645760019150613371565b60010161331d565b600091505b50919050565b6027546064036133856133bf565b10612f4c57612f4c6133db565b60275461339d6134d1565b10612f4c576004805460ff19166002179055601b544201601d55612f4c612f4e565b600354600854600091906064028115156133d557fe5b04905090565b60016005600701600560010160405180828054600181600116156101000203166002900480156134425780601f10613420576101008083540402835291820191613442565b820191906000526020600020905b81548152906001019060200180831161342e575b50509283525050604051602091819003919091019020805460ff1916911515919091179055600954600854600d546007549290910360010191016000190111156134c9576134c46040805190810160405280601a81526020017f436f6e73656e7375732063616e27742062652072656163686564000000000000815250613064565b612f4c565b612f4c6134e7565b600354600754600091906064028115156133d557fe5b600d8054600101905560098054600b9190600090811061350357fe5b9060005260206000200160405180828054600181600116156101000203166002900480156135685780601f10613546576101008083540402835291820191613568565b820191906000526020600020905b815481529060010190602001808311613554575b505092835250506040519081900360200190208054600090811061358857fe5b6000918252602090912001546005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039092169190911790556135c861319a565b6135d0613267565b600d5460408051918252517fc785d855a24b92cb8266e0a85180a9fa4fe03d182f82a8555b01e1f986d267df9181900360200190a1565b60408051808201825290600290829080388339509192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061366357805160ff1916838001178555613690565b82800160010185558215613690579182015b82811115613690578251825591602001919060010190613675565b5061369c929150613776565b5090565b60c0604051908101604052806006906020820280388339509192915050565b60a0604051908101604052806005906020820280388339509192915050565b828054828255906000526020600020908101928215613690579160200282015b8281111561369057825182556020909201916001909101906136fe565b6080604051908101604052806004906020820280388339509192915050565b50805460008255906000526020600020908101906133169190613776565b50805460008255906000526020600020908101906133169190613790565b6108a291905b8082111561369c576000815560010161377c565b6108a291905b8082111561369c5760006137aa82826137b3565b50600101613796565b50805460018160011615610100020316600290046000825580601f106137d95750613316565b601f0160209004906000526020600020908101906133169190613776560008c379a0afcc32b1a39302f7cb8073359698411ab5fd6e3edb2c02c0b5fba8aa4e6f7420656e6f756768207573657273206a6f696e656420666f72207265717569726564206d696e696d756d20766f7465732e000000000000000000000000004e6f7420706f737369626c6520696e2063757272656e74206576656e74207374a165627a7a7230582055dadf00f9451ee698b8a63887185899fcc57f091bc3f68ccf6381e792d1ce9500290000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000005a730140000000000000000000000000000000000000000000000000000000005c10dcd0000000000000000000000000000000000000000000000000000000005c10dd0c000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000007ba8a5d59b21390a70b2ba968a183712e12a049c0000000000000000000000008fe4d35c5bcc714b97e93999ff1fa18691ebaf3a00000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000c73800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000002c4d6f7374206f66207573206861766520656174656e20612073706964657220696e206f757220736c6565702e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000036ea5b38740a747eead5f473f41d8531b5364be000000000000000000000000191d9603282537f9225281c1a7afa6a75e00cf75000000000000000000000000243284de5e76a5c0493ce7b7f4fe9f33cfdda12a00000000000000000000000000000000000000000000000000000000000000086970667368617368000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000005a730140000000000000000000000000000000000000000000000000000000005c10dcd0000000000000000000000000000000000000000000000000000000005c10dd0c000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000007ba8a5d59b21390a70b2ba968a183712e12a049c0000000000000000000000008fe4d35c5bcc714b97e93999ff1fa18691ebaf3a00000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000c73800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000002c4d6f7374206f66207573206861766520656174656e20612073706964657220696e206f757220736c6565702e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000036ea5b38740a747eead5f473f41d8531b5364be000000000000000000000000191d9603282537f9225281c1a7afa6a75e00cf75000000000000000000000000243284de5e76a5c0493ce7b7f4fe9f33cfdda12a00000000000000000000000000000000000000000000000000000000000000086970667368617368000000000000000000000000000000000000000000000000"
}