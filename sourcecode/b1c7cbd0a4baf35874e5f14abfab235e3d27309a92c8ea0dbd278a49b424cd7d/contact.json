{
  "address": "0xa2e7123262606d45d4ce96ec80531b7b74d82c9c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MyctIcoToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity 0.4.25;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a); \n    return a - b; \n  } \n  \n  function add(uint256 a, uint256 b) internal pure returns (uint256) { \n    uint256 c = a + b; assert(c >= a);\n    return c;\n  }\n\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value)  public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]); \n    // SafeMath.sub will throw if there is not enough balance. \n    balances[msg.sender] = balances[msg.sender].sub(_value); \n    balances[_to] = balances[_to].add(_value); \n    emit Transfer(msg.sender, _to, _value); \n    \n    return true; \n  } \n\n  /** \n   * @dev Gets the balance of the specified address. \n   * @param _owner The address to query the the balance of. \n   * @return An uint256 representing the amount owned by the passed address. \n   */ \n  function balanceOf(address _owner) public constant returns (uint256 balance) { \n    return balances[_owner]; \n  }\n} \n\n/** \n * @title Standard ERC20 token \n * \n * @dev Implementation of the basic standard token. \n * @dev https://github.com/ethereum/EIPs/issues/20 \n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol \n */ \ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]); \n    balances[_from] = balances[_from].sub(_value); \n    balances[_to] = balances[_to].add(_value); \n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \n    emit Transfer(_from, _to, _value); \n    \n    return true; \n  } \n\n /** \n  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. \n  * \n  * Beware that changing an allowance with this method brings the risk that someone may use both the old \n  * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this \n  * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: \n  * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \n  * @param _spender The address which will spend the funds. \n  * @param _value The amount of tokens to be spent. \n  */ \n  function approve(address _spender, uint256 _value) public returns (bool) { \n    allowed[msg.sender][_spender] = _value; \n    emit Approval(msg.sender, _spender, _value); \n    return true; \n  }\n\n /** \n  * @dev Function to check the amount of tokens that an owner allowed to a spender. \n  * @param _owner address The address which owns the funds. \n  * @param _spender address The address which will spend the funds. \n  * @return A uint256 specifying the amount of tokens still available for the spender. \n  */ \n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) { \n    return allowed[_owner][_spender]; \n  } \n\n /** \n  * approve should be called when allowed[_spender] == 0. To increment \n  * allowed value is better to use this function to avoid 2 calls (and wait until \n  * the first transaction is mined) * From MonolithDAO Token.sol \n  */ \n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); \n    return true; \n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender]; \n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function () public payable {\n    ///revert();\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n  \n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  \n}\n\n\ncontract MyctIcoToken is StandardToken, Ownable {\n    \n    string public constant name = \"MyctIco\";\n    string public constant symbol = \"MYCT\";\n    uint32 public constant decimals = 18;\n    \n    uint256 public constant totalSupply = 100000000 * (10 ** 18);\n    uint256 public totalTransferIco = 0;\n    \n    constructor() public {\n    }\n    \n    function transferSale(address addr, uint256 tokens) public onlyOwner {\n        require(addr != address(0));\n        require(balances[address(this)] >= tokens);\n        \n        balances[addr] = balances[addr].add(tokens);\n        balances[address(this)] = balances[address(this)].sub(tokens);\n        emit Transfer(address(this), addr, tokens);\n    } \n    \n    function transferIco(address [] _holders, uint256 [] _tokens) public onlyOwner {\n        \n        for(uint i=0; i<_holders.length; ++i) {\n            balances[_holders[i]] = _tokens[i];\n            totalTransferIco += _tokens[i];\n            emit Transfer(address(this), _holders[i], _tokens[i]);\n        }\n        \n        require(totalTransferIco <= totalSupply);\n    } \n}",
  "bytecode": "6080604052600060045534801561001557600080fd5b5060038054600160a060020a03191633179055610b5f806100376000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100dc578063095ea7b31461016657806318160ddd1461019e57806323b872dd146101c557806327c24568146101ef578063313ce567146102135780633885f0521461024157806366188463146102565780636b0f3bc41461027a57806370a08231146103085780638da5cb5b1461032957806395d89b411461035a578063a9059cbb1461036f578063d73dd62314610393578063dd62ed3e146103b7575b005b3480156100e857600080fd5b506100f16103de565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012b578181015183820152602001610113565b50505050905090810190601f1680156101585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017257600080fd5b5061018a600160a060020a0360043516602435610415565b604080519115158252519081900360200190f35b3480156101aa57600080fd5b506101b361047b565b60408051918252519081900360200190f35b3480156101d157600080fd5b5061018a600160a060020a036004358116906024351660443561048a565b3480156101fb57600080fd5b506100da600160a060020a03600435166024356105f1565b34801561021f57600080fd5b506102286106d7565b6040805163ffffffff9092168252519081900360200190f35b34801561024d57600080fd5b506101b36106dc565b34801561026257600080fd5b5061018a600160a060020a03600435166024356106e2565b34801561028657600080fd5b50604080516020600480358082013583810280860185019096528085526100da95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506107d29650505050505050565b34801561031457600080fd5b506101b3600160a060020a03600435166108f5565b34801561033557600080fd5b5061033e610910565b60408051600160a060020a039092168252519081900360200190f35b34801561036657600080fd5b506100f161091f565b34801561037b57600080fd5b5061018a600160a060020a0360043516602435610956565b34801561039f57600080fd5b5061018a600160a060020a0360043516602435610a27565b3480156103c357600080fd5b506101b3600160a060020a0360043581169060243516610ac0565b60408051808201909152600781527f4d79637449636f00000000000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6a52b7d2dcc80cd2e400000081565b6000600160a060020a03831615156104a157600080fd5b600160a060020a0384166000908152600160205260409020548211156104c657600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156104f657600080fd5b600160a060020a03841660009081526001602052604090205461051f908363ffffffff610aeb16565b600160a060020a038086166000908152600160205260408082209390935590851681522054610554908363ffffffff610afd16565b600160a060020a038085166000908152600160209081526040808320949094559187168152600282528281203382529091522054610598908363ffffffff610aeb16565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020610b14833981519152929181900390910190a35060019392505050565b600354600160a060020a0316331461060857600080fd5b600160a060020a038216151561061d57600080fd5b3060009081526001602052604090205481111561063957600080fd5b600160a060020a038216600090815260016020526040902054610662908263ffffffff610afd16565b600160a060020a038316600090815260016020526040808220929092553081522054610694908263ffffffff610aeb16565b306000818152600160209081526040918290209390935580518481529051600160a060020a03861693600080516020610b14833981519152928290030190a35050565b601281565b60045481565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561073757336000908152600260209081526040808320600160a060020a038816845290915281205561076c565b610747818463ffffffff610aeb16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600354600090600160a060020a031633146107ec57600080fd5b5060005b82518110156108d657818181518110151561080757fe5b9060200190602002015160016000858481518110151561082357fe5b6020908102909101810151600160a060020a0316825281019190915260400160002055815182908290811061085457fe5b60209081029091010151600480549091019055825183908290811061087557fe5b90602001906020020151600160a060020a031630600160a060020a0316600080516020610b1483398151915284848151811015156108af57fe5b906020019060200201516040518082815260200191505060405180910390a36001016107f0565b6004546a52b7d2dcc80cd2e400000010156108f057600080fd5b505050565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60408051808201909152600481527f4d59435400000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561096d57600080fd5b3360009081526001602052604090205482111561098957600080fd5b336000908152600160205260409020546109a9908363ffffffff610aeb16565b3360009081526001602052604080822092909255600160a060020a038516815220546109db908363ffffffff610afd16565b600160a060020a038416600081815260016020908152604091829020939093558051858152905191923392600080516020610b148339815191529281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610a5b908363ffffffff610afd16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600082821115610af757fe5b50900390565b600082820183811015610b0c57fe5b93925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820410f9adc05b62cf65e54662bde8be35a560f1e22c4bf9a3936e1ea0b3bc0977d0029"
}