{
  "address": "0xe9a2090557e9666676168cde58c8e18c5a03b2b7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GEMERAToken",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-19\n*/\n\npragma solidity 0.4.20;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a % b;\n    //uint256 z = a / b;\n    assert(a == (a / b) * b + c); // There is no case in which this doesn't hold\n    return c;\n  }\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  address private newOwner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    require(_newOwner != address(0));\n    newOwner = _newOwner;\n  }\n\n  /**\n   * @dev The ownership is transferred only if the new owner approves it.\n   */\n  function approveOwnership() public {\n    require(msg.sender == newOwner);\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n    newOwner = address(0);\n  }\n\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract BurnableToken is StandardToken {\n\n  mapping(address => bool) private allowedAddressesForBurn;\n  address[50] private burnAddresses;\n  uint public burned;\n\n  event Burn(address indexed burner, uint value);\n\n  modifier isAllowed(address _address) {\n    require(allowedAddressesForBurn[_address]);\n    _;\n  }\n\n  function BurnableToken(address[50] _addresses) public {\n    burnAddresses = _addresses;\n    for (uint i; i < burnAddresses.length; i++) {\n      if (burnAddresses[i] != address(0)) {\n        allowedAddressesForBurn[burnAddresses[i]] = true;\n      }\n    }\n  }\n\n  /*/**\n  * @dev Burns a specific amount of tokens.\n  * @param _value The amount of token to be burned.\n  */\n  function burn(uint _value) public isAllowed(msg.sender) {\n    require(_value > 0);\n\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    burned = burned.add(_value);\n    Burn(burner, _value);\n    Transfer(burner, 0x0, _value);\n  }\n\n  function burnAll() public {\n    burn(balances[msg.sender]);\n  }\n\n  function getBurnAddresses() public view returns(address[50]) {\n    return burnAddresses;\n  }\n}\n\ncontract Restrictable is Ownable {\n\n  address public restrictedAddress;\n\n  event RestrictedAddressChanged(address indexed restrictedAddress);\n\n  modifier notRestricted(address tryTo) {\n    require(tryTo != restrictedAddress);\n    _;\n  }\n\n  //that function could be called only ONCE!!! After that nothing could be reverted!!!\n  function setRestrictedAddress(address _restrictedAddress) onlyOwner public {\n    restrictedAddress = _restrictedAddress;\n    RestrictedAddressChanged(_restrictedAddress);\n    transferOwnership(_restrictedAddress);\n  }\n}\n\ncontract GEMERAToken is MintableToken, BurnableToken, Restrictable {\n  string public constant name = \"GEMERA\";\n  string public constant symbol = \"GEMA\";\n  uint32 public constant decimals = 18;\n\n  function GEMERAToken(address[50] _addrs) public BurnableToken(_addrs) {}\n\n  function transfer(address _to, uint256 _value) public notRestricted(_to) returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public notRestricted(_to) returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"restrictedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_restrictedAddress\",\"type\":\"address\"}],\"name\":\"setRestrictedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBurnAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[50]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[50]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"restrictedAddress\",\"type\":\"address\"}],\"name\":\"RestrictedAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526004805460a060020a60ff021916905534156200002057600080fd5b604051610640806200106b8339810160405260038054600160a060020a03191633600160a060020a03161790558060006200005f6006836032620000dd565b505b6032811015620000d4576000600682603281106200007b57fe5b0154600160a060020a031614620000cb5760016005600060068460328110620000a057fe5b0154600160a060020a031681526020810191909152604001600020805460ff19169115159190911790555b60010162000061565b50505062000166565b82603281019282156200012a579160200282015b828111156200012a5782518254600160a060020a031916600160a060020a039190911617825560209290920191600190910190620000f1565b50620001389291506200013c565b5090565b6200016391905b8082111562000138578054600160a060020a031916815560010162000143565b90565b610ef580620001766000396000f3006060604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461013757806306fdde031461015e578063095ea7b3146101e857806318160ddd1461020a57806323b872dd1461022f578063313ce5671461025757806340c10f191461028357806342966c68146102a557806366188463146102bd57806370a08231146102df57806373f42561146102fe578063742c81e4146103115780637d64bcb4146103245780637f4ae68d146103375780638da5cb5b1461036657806395d89b411461037957806398973f2b1461038c5780639975038c146103ab578063a9059cbb146103be578063b968a53c146103e0578063d73dd6231461042c578063dd62ed3e1461044e578063f2fde38b14610473575b600080fd5b341561014257600080fd5b61014a610492565b604051901515815260200160405180910390f35b341561016957600080fd5b6101716104a2565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ad578082015183820152602001610195565b50505050905090810190601f1680156101da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101f357600080fd5b61014a600160a060020a03600435166024356104d9565b341561021557600080fd5b61021d610545565b60405190815260200160405180910390f35b341561023a57600080fd5b61014a600160a060020a036004358116906024351660443561054b565b341561026257600080fd5b61026a61057f565b60405163ffffffff909116815260200160405180910390f35b341561028e57600080fd5b61014a600160a060020a0360043516602435610584565b34156102b057600080fd5b6102bb600435610680565b005b34156102c857600080fd5b61014a600160a060020a0360043516602435610793565b34156102ea57600080fd5b61021d600160a060020a036004351661088d565b341561030957600080fd5b61021d6108a8565b341561031c57600080fd5b6102bb6108ae565b341561032f57600080fd5b61014a61093c565b341561034257600080fd5b61034a6109c7565b604051600160a060020a03909116815260200160405180910390f35b341561037157600080fd5b61034a6109d6565b341561038457600080fd5b6101716109e5565b341561039757600080fd5b6102bb600160a060020a0360043516610a1c565b34156103b657600080fd5b6102bb610a9a565b34156103c957600080fd5b61014a600160a060020a0360043516602435610abe565b34156103eb57600080fd5b6103f3610af0565b604051808261064080838360005b83811015610419578082015183820152602001610401565b5050505090500191505060405180910390f35b341561043757600080fd5b61014a600160a060020a0360043516602435610b39565b341561045957600080fd5b61021d600160a060020a0360043581169060243516610bdd565b341561047e57600080fd5b6102bb600160a060020a0360043516610c08565b60045460a060020a900460ff1681565b60408051908101604052600681527f47454d4552410000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015490565b6039546000908390600160a060020a038083169116141561056b57600080fd5b610576858585610c67565b95945050505050565b601281565b60035460009033600160a060020a039081169116146105a257600080fd5b60045460a060020a900460ff16156105b957600080fd5b6001546105cc908363ffffffff610d7d16565b600155600160a060020a0383166000908152602081905260409020546105f8908363ffffffff610d7d16565b600160a060020a0384166000818152602081905260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a0383166000600080516020610eaa8339815191528460405190815260200160405180910390a350600192915050565b33600160a060020a03811660009081526005602052604081205490919060ff1615156106ab57600080fd5b600083116106b857600080fd5b33600160a060020a0381166000908152602081905260409020549092506106df9084610d93565b600160a060020a03831660009081526020819052604090205560015461070b908463ffffffff610d9316565b600155603854610721908463ffffffff610d7d16565b603855600160a060020a0382167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58460405190815260200160405180910390a2600082600160a060020a0316600080516020610eaa8339815191528560405190815260200160405180910390a3505050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156107f057600160a060020a033381166000908152600260209081526040808320938816835292905290812055610827565b610800818463ffffffff610d9316565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526020819052604090205490565b60385481565b60045433600160a060020a039081169116146108c957600080fd5b600454600354600160a060020a0391821691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600480546003805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60035460009033600160a060020a0390811691161461095a57600080fd5b60045460a060020a900460ff161561097157600080fd5b6004805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b603954600160a060020a031681565b600354600160a060020a031681565b60408051908101604052600481527f47454d4100000000000000000000000000000000000000000000000000000000602082015281565b60035433600160a060020a03908116911614610a3757600080fd5b6039805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383169081179091557fe70e47c7d6d2adce211b01e08d016c4afa1a90c764c829a637a732f35bb25f6460405160405180910390a2610a9781610c08565b50565b600160a060020a033316600090815260208190526040902054610abc90610680565b565b6039546000908390600160a060020a0380831691161415610ade57600080fd5b610ae88484610da5565b949350505050565b610af8610e80565b600660326106406040519081016040529190610640830182845b8154600160a060020a03168152600190910190602001808311610b12575050505050905090565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610b71908363ffffffff610d7d16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610c2357600080fd5b600160a060020a0381161515610c3857600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515610c7e57600080fd5b600160a060020a038416600090815260208190526040902054610ca7908363ffffffff610d9316565b600160a060020a038086166000908152602081905260408082209390935590851681522054610cdc908363ffffffff610d7d16565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610d22908363ffffffff610d9316565b600160a060020a0380861660008181526002602090815260408083203386168452909152908190209390935590851691600080516020610eaa8339815191529085905190815260200160405180910390a35060019392505050565b600082820183811015610d8c57fe5b9392505050565b600082821115610d9f57fe5b50900390565b6000600160a060020a0383161515610dbc57600080fd5b600160a060020a033316600090815260208190526040902054610de5908363ffffffff610d9316565b600160a060020a033381166000908152602081905260408082209390935590851681522054610e1a908363ffffffff610d7d16565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a0316600080516020610eaa8339815191528460405190815260200160405180910390a350600192915050565b6106406040519081016040526032815b600081526000199091019060200181610e9057905050905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058204a9767ffc3de81bed0884824d7f3702b8819e6e6d0a4821e38ead6f433c1ccb700290000000000000000000000002b5d2e334535a04dbe219488ce8682b010fce6cd000000000000000000000000dca066bab174bb3cf520a23e71bc9e090e8c9ed600000000000000000000000062a2d48173033ac6c020941925f2a1f8c2ba0104000000000000000000000000bed90e29c9a25f3d9121922447eb88dcc7f45634000000000000000000000000a547486c989d176d9a7b603ce97f2d76c56e93f4000000000000000000000000969a771b102add005a52c37f195b2ce5135c298100000000000000000000000043e39854e342e7070514ed5dee8663d85dbb321f00000000000000000000000052f42e9ee8da4fcc45e9f0403c77c66bbb7533d500000000000000000000000087ccf1f61f22dabc345a3d43719f6c199841972e00000000000000000000000086c6e04ae2150083473227e53150d3282177d765000000000000000000000000b2a64ebccc645613e70c91f426c4f902f6ec69f3000000000000000000000000dabd5848e387fb7937e133e4f7340cb65f52bd240000000000000000000000004a47acb4afe20e6ae06fbdb3382392195b0f58540000000000000000000000003ca5442a9929613c578259a33f855282f4aabbbe000000000000000000000000150e5326484dff78bd006e68fb06187a4de317a5000000000000000000000000d495e036251abfed5551f1f35e6db20d3a1c4764000000000000000000000000e1d8331f8b411252d0ec10374fc86d29f3a33de90000000000000000000000001153a04b35868e467203f15bcf0f8631f8fe60730000000000000000000000008b8b6892ebe758e9c6820b3b6654cf7c0c591a9300000000000000000000000001f67329225409bb43966bb06770ab8ddaccb26d000000000000000000000000a942fca2454915eb697305b86ff4770b1dd368b500000000000000000000000091c1b75955e16dc06386b54a528c4a8125fc8b1900000000000000000000000072690968b593aa3d5ccfc80516db69f53b6077ba0000000000000000000000004873dd2c31e0988922b10c98df25020e74e0ec190000000000000000000000005695990bf338d3b1f9a560466f356fa1e9c330b300000000000000000000000049abcc86eafe868719be4f4bdea2e68cef259b810000000000000000000000002443381a90368399914d9d786f2f6258cafeb41e000000000000000000000000524e2a23e9f5ea08d029d94219bcc6838ed44a8b000000000000000000000000407fbd100dce7c2108c58e6ba9dbcb5e311a9374000000000000000000000000acebde5709c75e380994fab0ccbaabda3687252100000000000000000000000006a5f58b15d6bbb58f3fd3ea9f480f6b45b670690000000000000000000000003ca66c58ac1e62a498bb03e724c7f0f9c31e6373000000000000000000000000a44397cc7ec9d06c18a5d8f373b7ba6586bbe5710000000000000000000000001cd3cf981f482ccec69aca6f4e70dc07de4908d60000000000000000000000005b0cc256749406d991ba891dd0fdcd75a2e87fbf00000000000000000000000015612d0cfedfb7f3608dea7a4deb23ac6dfc69c700000000000000000000000023222868480fc83bb3bfe5241447dce6ba73238900000000000000000000000043931654918d93415e9a3a6cb04c3e8e2f0cc1c30000000000000000000000008916aabd320c172b78deed1800e2ce432ecefb32000000000000000000000000fd08f7ae4b0e6a111713a307e881d9f67a47d11100000000000000000000000046ebe1f7103c571232cc568fa3388ee057f302b8000000000000000000000000f7be46b37e523b40b9b0ab107e85ef2180b02db5000000000000000000000000bd5d2e9dbf265b2acfe303fc016302fa9ac658d20000000000000000000000001aa43e60b38c3d8c7e6c4b81eeccb9e30c71654d000000000000000000000000fe7980a1dfdc01d64ebe531673a3e3300cd7277900000000000000000000000071eb4ad302c420e2b3048aefc6c137210b508616000000000000000000000000d07fd187f08d53c5ba3b518ca24ea70484788afe000000000000000000000000627a7cab761743563987badf71e2c849aec43c890000000000000000000000008d31bb05fcae4dbd0b4abbe2a7ff353310f889a700000000000000000000000072d2d507cf0be867ec2e7f63321db12e173c3e91",
  "constructorArguments": "0000000000000000000000002b5d2e334535a04dbe219488ce8682b010fce6cd000000000000000000000000dca066bab174bb3cf520a23e71bc9e090e8c9ed600000000000000000000000062a2d48173033ac6c020941925f2a1f8c2ba0104000000000000000000000000bed90e29c9a25f3d9121922447eb88dcc7f45634000000000000000000000000a547486c989d176d9a7b603ce97f2d76c56e93f4000000000000000000000000969a771b102add005a52c37f195b2ce5135c298100000000000000000000000043e39854e342e7070514ed5dee8663d85dbb321f00000000000000000000000052f42e9ee8da4fcc45e9f0403c77c66bbb7533d500000000000000000000000087ccf1f61f22dabc345a3d43719f6c199841972e00000000000000000000000086c6e04ae2150083473227e53150d3282177d765000000000000000000000000b2a64ebccc645613e70c91f426c4f902f6ec69f3000000000000000000000000dabd5848e387fb7937e133e4f7340cb65f52bd240000000000000000000000004a47acb4afe20e6ae06fbdb3382392195b0f58540000000000000000000000003ca5442a9929613c578259a33f855282f4aabbbe000000000000000000000000150e5326484dff78bd006e68fb06187a4de317a5000000000000000000000000d495e036251abfed5551f1f35e6db20d3a1c4764000000000000000000000000e1d8331f8b411252d0ec10374fc86d29f3a33de90000000000000000000000001153a04b35868e467203f15bcf0f8631f8fe60730000000000000000000000008b8b6892ebe758e9c6820b3b6654cf7c0c591a9300000000000000000000000001f67329225409bb43966bb06770ab8ddaccb26d000000000000000000000000a942fca2454915eb697305b86ff4770b1dd368b500000000000000000000000091c1b75955e16dc06386b54a528c4a8125fc8b1900000000000000000000000072690968b593aa3d5ccfc80516db69f53b6077ba0000000000000000000000004873dd2c31e0988922b10c98df25020e74e0ec190000000000000000000000005695990bf338d3b1f9a560466f356fa1e9c330b300000000000000000000000049abcc86eafe868719be4f4bdea2e68cef259b810000000000000000000000002443381a90368399914d9d786f2f6258cafeb41e000000000000000000000000524e2a23e9f5ea08d029d94219bcc6838ed44a8b000000000000000000000000407fbd100dce7c2108c58e6ba9dbcb5e311a9374000000000000000000000000acebde5709c75e380994fab0ccbaabda3687252100000000000000000000000006a5f58b15d6bbb58f3fd3ea9f480f6b45b670690000000000000000000000003ca66c58ac1e62a498bb03e724c7f0f9c31e6373000000000000000000000000a44397cc7ec9d06c18a5d8f373b7ba6586bbe5710000000000000000000000001cd3cf981f482ccec69aca6f4e70dc07de4908d60000000000000000000000005b0cc256749406d991ba891dd0fdcd75a2e87fbf00000000000000000000000015612d0cfedfb7f3608dea7a4deb23ac6dfc69c700000000000000000000000023222868480fc83bb3bfe5241447dce6ba73238900000000000000000000000043931654918d93415e9a3a6cb04c3e8e2f0cc1c30000000000000000000000008916aabd320c172b78deed1800e2ce432ecefb32000000000000000000000000fd08f7ae4b0e6a111713a307e881d9f67a47d11100000000000000000000000046ebe1f7103c571232cc568fa3388ee057f302b8000000000000000000000000f7be46b37e523b40b9b0ab107e85ef2180b02db5000000000000000000000000bd5d2e9dbf265b2acfe303fc016302fa9ac658d20000000000000000000000001aa43e60b38c3d8c7e6c4b81eeccb9e30c71654d000000000000000000000000fe7980a1dfdc01d64ebe531673a3e3300cd7277900000000000000000000000071eb4ad302c420e2b3048aefc6c137210b508616000000000000000000000000d07fd187f08d53c5ba3b518ca24ea70484788afe000000000000000000000000627a7cab761743563987badf71e2c849aec43c890000000000000000000000008d31bb05fcae4dbd0b4abbe2a7ff353310f889a700000000000000000000000072d2d507cf0be867ec2e7f63321db12e173c3e91"
}