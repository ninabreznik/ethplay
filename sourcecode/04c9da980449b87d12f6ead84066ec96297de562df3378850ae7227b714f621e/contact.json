{
  "address": "0x0f7010aad4c2ef7c346ff777f8f23483575a7e19",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Vortex",
  "compilerVersion": "v0.4.19-nightly.2017.11.11+commit.284c3839",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-21\n*/\n\npragma solidity ^0.4.9;\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\ncontract Vortex {\n    using SafeMath for uint256;\n    mapping(address => mapping(address => uint256)) allowed;\n    mapping(address => uint256) balances;\n    uint256 public totalSupply;\n    uint256 public decimals;\n    address public owner;\n    bytes32 public symbol;\n    bool public fullSupplyUnlocked;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\n\n    function Vortex() \n    {\n        totalSupply = 12000000;\n        symbol = 'VRX';\n        owner = 0x753829254FE7906644eCbfA486C135e5FF0A2BC8;\n        balances[owner] = 12000000;\n        decimals = 0;\n    }\n    function unlockSupply() returns(bool)\n    {\n        require(msg.sender == owner);\n        require(!fullSupplyUnlocked);\n        balances[owner] = balances[owner].add(12000000);\n        fullSupplyUnlocked = true;\n        return true;\n    }\n    function balanceOf(address _owner) constant returns(uint256 balance)\n    {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    function transfer(address _to, uint256 _value) returns(bool)\n    {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool) \n    {\n        var _allowance = allowed[_from][msg.sender];\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) returns(bool) \n    {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function() \n    {\n        revert();\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b62b71b0060028190557f565258000000000000000000000000000000000000000000000000000000000060055560048054600160a060020a03191673753829254fe7906644ecbfa486c135e5ff0a2bc81790819055600160a060020a03166000908152600160205260408120919091556003556105e2806100916000396000f3006060604052600436106100ae5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b381146100be57806318160ddd146100f457806323b872dd14610119578063313ce5671461014157806370a08231146101545780637c197c09146101735780638da5cb5b1461018657806395d89b41146101b5578063a8dc824c146101c8578063a9059cbb146101db578063dd62ed3e146101fd575b34156100b957600080fd5b600080fd5b34156100c957600080fd5b6100e0600160a060020a0360043516602435610222565b604051901515815260200160405180910390f35b34156100ff57600080fd5b6101076102c4565b60405190815260200160405180910390f35b341561012457600080fd5b6100e0600160a060020a03600435811690602435166044356102ca565b341561014c57600080fd5b6101076103d9565b341561015f57600080fd5b610107600160a060020a03600435166103df565b341561017e57600080fd5b6100e06103fa565b341561019157600080fd5b610199610403565b604051600160a060020a03909116815260200160405180910390f35b34156101c057600080fd5b610107610412565b34156101d357600080fd5b6100e0610418565b34156101e657600080fd5b6100e0600160a060020a03600435166024356104a6565b341561020857600080fd5b610107600160a060020a0360043581169060243516610565565b60008115806102525750600160a060020a0333811660009081526020818152604080832093871683529290522054155b151561025d57600080fd5b600160a060020a0333811660008181526020818152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60025481565b600160a060020a0380841660009081526020818152604080832033851684528252808320549386168352600190915281205490919061030f908463ffffffff61058e16565b600160a060020a038086166000908152600160205260408082209390935590871681522054610344908463ffffffff6105a416565b600160a060020a03861660009081526001602052604090205561036d818463ffffffff6105a416565b600160a060020a0380871660008181526020818152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60035481565b600160a060020a031660009081526001602052604090205490565b60065460ff1681565b600454600160a060020a031681565b60055481565b60045460009033600160a060020a0390811691161461043657600080fd5b60065460ff161561044657600080fd5b600454600160a060020a03166000908152600160205260409020546104749062b71b0063ffffffff61058e16565b600454600160a060020a03166000908152600160208190526040909120919091556006805460ff191682179055905090565b600160a060020a0333166000908152600160205260408120546104cf908363ffffffff6105a416565b600160a060020a033381166000908152600160205260408082209390935590851681522054610504908363ffffffff61058e16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a0391821660009081526020818152604080832093909416825291909152205490565b60008282018381101561059d57fe5b9392505050565b6000828211156105b057fe5b509003905600a165627a7a7230582031c5e083927d72062176023e06b9ee7d41ec1ef25d9e64a8c5706362157edc120029"
}