{
  "address": "0x5ca381bbfb58f0092df149bd3d243b08b9a8386e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MXCToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-09\n*/\n\npragma solidity ^0.4.24;\n\n/**\n* MXC Smart Contract for Ethereum\n* \n* Copyright 2018 MXC Foundation\n*\n*/\n\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n* @title ERC20Basic\n* @dev Simpler version of ERC20 interface\n*/\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n* @title ERC20 interface\n*/\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender)\n        public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value)\n        public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n\n/**\n* @title Basic token\n* @dev Basic version of StandardToken, with no allowances.\n*/\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n}\n\n\n/**\n* @title Standard ERC20 token\n*\n* @dev Implementation of the basic standard token.\n*/\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        returns (bool)\n    {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards,\n    * i.e. clients SHOULD make sure to create user interfaces in such a way \n    * that they set the allowance first to 0 before setting it to another value for the same spender. \n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(\n        address _owner,\n        address _spender\n   )\n        public\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n        public\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = (\n            allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n        public\n        returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\n\ncontract MXCToken is StandardToken {\n\n    string public constant name = \"MXCToken\";\n    string public constant symbol = \"MXC\";\n    uint8 public constant decimals = 18;\n\n    uint256 constant MONTH = 3600*24*30;\n\n    struct TimeLock {\n        // total amount of tokens that is granted to the user\n        uint256 amount;\n\n        // total amount of tokens that have been vested\n        uint256 vestedAmount;\n\n        // total amount of vested months (tokens are vested on a monthly basis)\n        uint16 vestedMonths;\n\n        // token timestamp start\n        uint256 start;\n\n        // token timestamp release start (when user can start receive vested tokens)\n        uint256 cliff;\n\n        // token timestamp release end (when all the tokens can be vested)\n        uint256 vesting;\n\n        address from;\n    }\n\n    mapping(address => TimeLock) timeLocks;\n\n    event NewTokenGrant(address indexed _from, address indexed _to, uint256 _amount, uint256 _start, uint256 _cliff, uint256 _vesting);\n    event VestedTokenRedeemed(address indexed _to, uint256 _amount, uint256 _vestedMonths);\n    event GrantedTokenReturned(address indexed _from, address indexed _to, uint256 _amount);\n\n    /**\n    * @dev Constructor that gives msg.sender all of existing tokens.\n    */\n    constructor() public {\n        totalSupply_ = 2664965800 * (10 ** uint256(decimals));\n        balances[msg.sender] = totalSupply_;\n        emit Transfer(address(0), msg.sender, totalSupply_);\n    }\n\n    function vestBalanceOf(address who)\n        public view\n        returns (uint256 amount, uint256 vestedAmount, uint256 start, uint256 cliff, uint256 vesting)\n    {\n        require(who != address(0));\n        amount = timeLocks[who].amount;\n        vestedAmount = timeLocks[who].vestedAmount;\n        start = timeLocks[who].start;\n        cliff = timeLocks[who].cliff;\n        vesting = timeLocks[who].vesting;\n    }\n\n    /**\n    * @dev Function to grant the amount of tokens that will be vested later.\n    * @param _to The address which will own the tokens.\n    * @param _amount The amount of tokens that will be vested later.\n    * @param _start Token timestamp start.\n    * @param _cliff Token timestamp release start.\n    * @param _vesting Token timestamp release end.\n    */\n    function grantToken(\n        address _to,\n        uint256 _amount,\n        uint256 _start,\n        uint256 _cliff,\n        uint256 _vesting\n    )\n        public\n        returns (bool success)\n    {\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender], \"Not enough balance to grant token.\");\n        require(_amount > 0, \"Nothing to transfer.\");\n        require((timeLocks[_to].amount.sub(timeLocks[_to].vestedAmount) == 0), \"The previous vesting should be completed.\");\n        require(_cliff >= _start, \"_cliff must be >= _start\");\n        require(_vesting > _start, \"_vesting must be bigger than _start\");\n        require(_vesting > _cliff, \"_vesting must be bigger than _cliff\");\n\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        timeLocks[_to] = TimeLock(_amount, 0, 0, _start, _cliff, _vesting, msg.sender);\n\n        emit NewTokenGrant(msg.sender, _to, _amount, _start, _cliff, _vesting);\n        return true;\n    }\n\n    /**\n    * @dev Function to grant the amount of tokens that will be vested later.\n    * @param _to The address which will own the tokens.\n    * @param _amount The amount of tokens that will be vested later.\n    * @param _cliffMonths Token release start in months from now.\n    * @param _vestingMonths Token release end in months from now.\n    */\n    function grantTokenStartNow(\n        address _to,\n        uint256 _amount,\n        uint256 _cliffMonths,\n        uint256 _vestingMonths\n    )\n        public\n        returns (bool success)\n    {\n        return grantToken(\n            _to,\n            _amount,\n            now,\n            now.add(_cliffMonths.mul(MONTH)),\n            now.add(_vestingMonths.mul(MONTH))\n            );\n    }\n\n    /**\n    * @dev Function to calculate the amount of tokens that can be vested at this moment.\n    * @param _to The address which will own the tokens.\n    * @return amount - A uint256 specifying the amount of tokens available to be vested at this moment.\n    * @return vestedMonths - A uint256 specifying the number of the vested months since the last vesting.\n    * @return curTime - A uint256 specifying the current timestamp.\n    */\n    function calcVestableToken(address _to)\n        internal view\n        returns (uint256 amount, uint256 vestedMonths, uint256 curTime)\n    {\n        uint256 vestTotalMonths;\n        uint256 vestedAmount;\n        uint256 vestPart;\n        amount = 0;\n        vestedMonths = 0;\n        curTime = now;\n        \n        require(timeLocks[_to].amount > 0, \"Nothing was granted to this address.\");\n        \n        if (curTime <= timeLocks[_to].cliff) {\n            return (0, 0, curTime);\n        }\n\n        vestedMonths = curTime.sub(timeLocks[_to].start) / MONTH;\n        vestedMonths = vestedMonths.sub(timeLocks[_to].vestedMonths);\n\n        if (curTime >= timeLocks[_to].vesting) {\n            return (timeLocks[_to].amount.sub(timeLocks[_to].vestedAmount), vestedMonths, curTime);\n        }\n\n        if (vestedMonths > 0) {\n            vestTotalMonths = timeLocks[_to].vesting.sub(timeLocks[_to].start) / MONTH;\n            vestPart = timeLocks[_to].amount.div(vestTotalMonths);\n            amount = vestedMonths.mul(vestPart);\n            vestedAmount = timeLocks[_to].vestedAmount.add(amount);\n            if (vestedAmount > timeLocks[_to].amount) {\n                amount = timeLocks[_to].amount.sub(timeLocks[_to].vestedAmount);\n            }\n        }\n\n        return (amount, vestedMonths, curTime);\n    }\n\n    /**\n    * @dev Function to redeem tokens that can be vested at this moment.\n    * @param _to The address which will own the tokens.\n    */\n    function redeemVestableToken(address _to)\n        public\n        returns (bool success)\n    {\n        require(_to != address(0));\n        require(timeLocks[_to].amount > 0, \"Nothing was granted to this address!\");\n        require(timeLocks[_to].vestedAmount < timeLocks[_to].amount, \"All tokens were vested!\");\n\n        (uint256 amount, uint256 vestedMonths, uint256 curTime) = calcVestableToken(_to);\n        require(amount > 0, \"Nothing to redeem now.\");\n\n        TimeLock storage t = timeLocks[_to];\n        balances[_to] = balances[_to].add(amount);\n        t.vestedAmount = t.vestedAmount.add(amount);\n        t.vestedMonths = t.vestedMonths + uint16(vestedMonths);\n        t.cliff = curTime;\n\n        emit VestedTokenRedeemed(_to, amount, vestedMonths);\n        return true;\n    }\n\n    /**\n    * @dev Function to return granted token to the initial sender.\n    * @param _amount - A uint256 specifying the amount of tokens to be returned.\n    */\n    function returnGrantedToken(uint256 _amount)\n        public\n        returns (bool success)\n    {\n        address to = timeLocks[msg.sender].from;\n        require(to != address(0));\n        require(_amount > 0, \"Nothing to transfer.\");\n        require(timeLocks[msg.sender].amount > 0, \"Nothing to return.\");\n        require(_amount <= timeLocks[msg.sender].amount.sub(timeLocks[msg.sender].vestedAmount), \"Not enough granted token to return.\");\n\n        timeLocks[msg.sender].amount = timeLocks[msg.sender].amount.sub(_amount);\n        balances[to] = balances[to].add(_amount);\n\n        emit GrantedTokenReturned(msg.sender, to, _amount);\n        return true;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_cliffMonths\",\"type\":\"uint256\"},{\"name\":\"_vestingMonths\",\"type\":\"uint256\"}],\"name\":\"grantTokenStartNow\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnGrantedToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_vesting\",\"type\":\"uint256\"}],\"name\":\"grantToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"redeemVestableToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"vestBalanceOf\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"vestedAmount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"vesting\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_vesting\",\"type\":\"uint256\"}],\"name\":\"NewTokenGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_vestedMonths\",\"type\":\"uint256\"}],\"name\":\"VestedTokenRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"GrantedTokenReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": ""
}