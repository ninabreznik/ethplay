{
  "address": "0xbbf45465ce51e2e5a6bb858597dd0079b0809483",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AICCToken",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-01\n*/\n\npragma solidity 0.5.8;\n\n/**\n * @title SafeMath \n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, revert on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, revert on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtract two unsigned integers, revert on underflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Add two unsigned integers, revert on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev See https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address internal _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Revert if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"The caller must be owner\");\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allow the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Cannot transfer control of the contract to the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title Standard ERC20 token\n * @dev Implementation of the basic standard token.\n */\ncontract StandardToken is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) internal _balances;\n\n    mapping (address => mapping (address => uint256)) internal _allowed;\n\n    uint256 internal _totalSupply;\n    \n    /**\n     * @dev Total number of tokens in existence.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Get the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner The address which owns the funds.\n     * @param spender The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer tokens to a specified address.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens for a specified address.\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0), \"Cannot transfer to the zero address\");\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0), \"Cannot approve to the zero address\");\n        require(owner != address(0), \"Setter cannot be the zero address\");\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused, \"Only when the contract is not paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused, \"Only when the contract is paused\");\n        _;\n    }\n\n    /**\n     * @dev Called by the owner to pause, trigger stopped state.\n     */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev Called by the owner to unpause, return to normal state.\n     */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n/**\n * @title PausableToken\n * @dev ERC20 modified with pausable transfers.\n */\ncontract PausableToken is StandardToken, Pausable {\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseAllowance(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(_spender, _addedValue);\n    }\n\n    function decreaseAllowance(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(_spender, _subtractedValue);\n    }\n}\n/**\n *  @title FreezableToken\n */\ncontract FreezableToken is PausableToken {\n    mapping(address=>bool) internal _frozenAccount;\n\n    event FrozenAccount(address indexed target, bool frozen);\n\n    /**\n     * @dev Return whether the specified address is frozen.\n     * @param account A specified address.\n     */\n    function frozenAccount(address account) public view returns(bool){\n        return _frozenAccount[account];\n    }\n\n    /**\n     * @dev Check if the specified address is frozen. Require the specified address not to be frozen.\n     * @param account A specified address.\n     */\n    function frozenCheck(address account) internal view {\n        require(!frozenAccount(account), \"Address has been frozen\");\n    }\n\n    /**\n     * @dev Modify the frozen status of the specified address.\n     * @param account A specified address.\n     * @param frozen Frozen status, true: freeze, false: unfreeze.\n     */\n    function freeze(address account, bool frozen) public onlyOwner {\n  \t    _frozenAccount[account] = frozen;\n  \t    emit FrozenAccount(account, frozen);\n    }\n\n    /**\n     * @dev Rewrite the transfer function to check if the address participating is frozen.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        frozenCheck(msg.sender);\n        frozenCheck(_to);\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Rewrite the transferFrom function to check if the address participating is frozen.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        frozenCheck(msg.sender);\n        frozenCheck(_from);\n        frozenCheck(_to);\n        return super.transferFrom(_from, _to, _value);\n    }   \n}\n\ncontract AICCToken is FreezableToken {\n    string public constant name = \"AICloudChain\"; // name of Token.\n    string public constant symbol = \"AICC\"; // symbol of Token.\n    uint8 public constant decimals = 18;\n    uint256 private constant INIT_TOTALSUPPLY = 30000000;\n\n    mapping (address => uint256) public releaseTime;\n    mapping (address => uint256) public lockAmount;\n\n    event LockToken(address indexed beneficiary, uint256 releaseTime, uint256 releaseAmount);\n    event ReleaseToken(address indexed user, uint256 releaseAmount);\n\n    /**\n     * @dev Constructor.\n     */\n    constructor() public {\n        _totalSupply = INIT_TOTALSUPPLY * 10 ** uint256(decimals);\n        _owner = 0x06C7B9Ce4f2Fee058DE2A79F75DEC55092C229Aa;\n        _balances[_owner] = _totalSupply;\n        emit Transfer(address(0), _owner, _totalSupply);\n    }\n\n    /**\n     * @dev Send the tokens to the beneficiary and lock it, and the timestamp and quantity of lock can be set by owner.\n     * @param _beneficiary A specified address.\n     * @param _releaseTime The timestamp of release token.\n     * @param _releaseAmount The amount of release token.\n     */\n    function lockToken(address _beneficiary, uint256 _releaseTime, uint256 _releaseAmount) public onlyOwner returns(bool) {\n        require(lockAmount[_beneficiary] == 0, \"The address has been locked\");\n        require(_beneficiary != address(0), \"The target address cannot be the zero address\");\n        require(_releaseAmount > 0, \"The amount must be greater than 0\");\n        require(_releaseTime > now, \"The time must be greater than current time\");\n        frozenCheck(_beneficiary);\n        lockAmount[_beneficiary] = _releaseAmount;\n        releaseTime[_beneficiary] = _releaseTime;\n        _balances[_owner] = _balances[_owner].sub(_releaseAmount); // Remove this part of the locked tokens from the owner.\n        emit LockToken(_beneficiary, _releaseTime, _releaseAmount);\n        return true;\n    }\n\n    /**\n     * @dev Implement the basic functions of releasing tokens.\n     */\n    function releaseToken(address _owner) public whenNotPaused returns(bool) {\n        frozenCheck(_owner);\n        uint256 amount = releasableAmount(_owner);\n        require(amount > 0, \"No releasable tokens\");\n        _balances[_owner] = _balances[_owner].add(amount);\n        lockAmount[_owner] = 0;\n        emit ReleaseToken(_owner, amount);\n        return true;\n    }\n\n    /**\n     * @dev Get the amount of current timestamp that can be released.\n     * @param addr A specified address.\n     */\n    function releasableAmount(address addr) public view returns(uint256) {\n        if(lockAmount[addr] != 0 && now > releaseTime[addr]) {\n            return lockAmount[addr];\n        } else {\n            return 0;\n        }\n     }\n    \n    /**\n     * @dev Rewrite the transfer function to automatically unlock the locked tokens.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        if(releasableAmount(msg.sender) > 0) {\n            releaseToken(msg.sender);\n        }\n        return super.transfer(to, value);\n    }\n\n    /**\n     * @dev Rewrite the transferFrom function to automatically unlock the locked tokens.\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        if(releasableAmount(from) > 0) {\n            releaseToken(from);\n        }\n        return super.transferFrom(from, to, value);\n    }\n\n    /**\n     * @dev Transfer tokens to multiple addresses.\n     */\n    function batchTransfer(address[] memory addressList, uint256[] memory amountList) public onlyOwner returns (bool) {\n        uint256 length = addressList.length;\n        require(addressList.length == amountList.length, \"Inconsistent array length\");\n        require(length > 0 && length <= 150, \"Invalid number of transfer objects\");\n        uint256 amount;\n        for (uint256 i = 0; i < length; i++) {\n            frozenCheck(addressList[i]);\n            require(amountList[i] > 0, \"The transfer amount cannot be 0\");\n            require(addressList[i] != address(0), \"Cannot transfer to the zero address\");\n            amount = amount.add(amountList[i]);\n            _balances[addressList[i]] = _balances[addressList[i]].add(amountList[i]);\n            emit Transfer(msg.sender, addressList[i], amountList[i]);\n        }\n        require(_balances[msg.sender] >= amount, \"Not enough tokens to transfer\");\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"},{\"name\":\"_releaseAmount\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressList\",\"type\":\"address[]\"},{\"name\":\"amountList\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"releaseToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseAmount\",\"type\":\"uint256\"}],\"name\":\"LockToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"releaseAmount\",\"type\":\"uint256\"}],\"name\":\"ReleaseToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "608060405260038054600160a01b60ff021916905534801561002057600080fd5b506a18d0bf423c03d8de0000006002819055600380546001600160a01b0319167306c7b9ce4f2fee058de2a79f75dec55092c229aa178082556001600160a01b03908116600090815260208181526040808320869055935484519586529351939092169390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a36119e4806100c06000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80638456cb59116100de578063a457c2d711610097578063bf120ae511610071578063bf120ae51461058c578063dd62ed3e146105ba578063e545f941146105e8578063f2fde38b1461060e57610173565b8063a457c2d71461050e578063a9059cbb1461053a578063b414d4b61461056657610173565b80638456cb591461038557806388d695b21461038d5780638da5cb5b146104b45780638f32d59b146104d857806395bc3bd0146104e057806395d89b411461050657610173565b806334265c481161013057806334265c48146102c957806339509351146102ef5780633f4ba83a1461031b5780635c975abb1461032557806370a082311461032d578063839972f91461035357610173565b806306fdde0314610178578063095ea7b3146101f55780631726cbc81461023557806318160ddd1461026d57806323b872dd14610275578063313ce567146102ab575b600080fd5b610180610634565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ba5781810151838201526020016101a2565b50505050905090810190601f1680156101e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102216004803603604081101561020b57600080fd5b506001600160a01b03813516906020013561066d565b604080519115158252519081900360200190f35b61025b6004803603602081101561024b57600080fd5b50356001600160a01b03166106cd565b60408051918252519081900360200190f35b61025b610738565b6102216004803603606081101561028b57600080fd5b506001600160a01b0381358116916020810135909116906040013561073e565b6102b361076e565b6040805160ff9092168252519081900360200190f35b61025b600480360360208110156102df57600080fd5b50356001600160a01b0316610773565b6102216004803603604081101561030557600080fd5b506001600160a01b038135169060200135610785565b6103236107de565b005b6102216108c4565b61025b6004803603602081101561034357600080fd5b50356001600160a01b03166108d4565b6102216004803603606081101561036957600080fd5b506001600160a01b0381351690602081013590604001356108ef565b610323610b2b565b610221600480360360408110156103a357600080fd5b8101906020810181356401000000008111156103be57600080fd5b8201836020820111156103d057600080fd5b803590602001918460208302840111640100000000831117156103f257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561044257600080fd5b82018360208201111561045457600080fd5b8035906020019184602083028401116401000000008311171561047657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610c02945050505050565b6104bc610fce565b604080516001600160a01b039092168252519081900360200190f35b610221610fdd565b61025b600480360360208110156104f657600080fd5b50356001600160a01b0316610fee565b610180611000565b6102216004803603604081101561052457600080fd5b506001600160a01b038135169060200135611023565b6102216004803603604081101561055057600080fd5b506001600160a01b03813516906020013561107c565b6102216004803603602081101561057c57600080fd5b50356001600160a01b03166110a3565b610323600480360360408110156105a257600080fd5b506001600160a01b03813516906020013515156110c1565b61025b600480360360408110156105d057600080fd5b506001600160a01b038135811691602001351661116b565b610221600480360360208110156105fe57600080fd5b50356001600160a01b0316611196565b6103236004803603602081101561062457600080fd5b50356001600160a01b03166112e1565b6040518060400160405280600c81526020017f4149436c6f7564436861696e000000000000000000000000000000000000000081525081565b600354600090600160a01b900460ff16156106bc57604051600160e51b62461bcd0281526004018080602001828103825260248152602001806119956024913960400191505060405180910390fd5b6106c68383611337565b9392505050565b6001600160a01b0381166000908152600660205260408120541580159061070b57506001600160a01b03821660009081526005602052604090205442115b1561072f57506001600160a01b038116600090815260066020526040902054610733565b5060005b919050565b60025490565b60008061074a856106cd565b111561075b5761075984611196565b505b61076684848461134d565b949350505050565b601281565b60056020526000908152604090205481565b600354600090600160a01b900460ff16156107d457604051600160e51b62461bcd0281526004018080602001828103825260248152602001806119956024913960400191505060405180910390fd5b6106c68383611375565b6107e6610fdd565b6108285760408051600160e51b62461bcd0281526020600482015260186024820152600080516020611975833981519152604482015290519081900360640190fd5b600354600160a01b900460ff166108895760408051600160e51b62461bcd02815260206004820181905260248201527f4f6e6c79207768656e2074686520636f6e747261637420697320706175736564604482015290519081900360640190fd5b60038054600160a01b60ff02191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600354600160a01b900460ff1681565b6001600160a01b031660009081526020819052604090205490565b60006108f9610fdd565b61093b5760408051600160e51b62461bcd0281526020600482015260186024820152600080516020611975833981519152604482015290519081900360640190fd5b6001600160a01b038416600090815260066020526040902054156109a95760408051600160e51b62461bcd02815260206004820152601b60248201527f546865206164647265737320686173206265656e206c6f636b65640000000000604482015290519081900360640190fd5b6001600160a01b0384166109f157604051600160e51b62461bcd02815260040180806020018281038252602d815260200180611897602d913960400191505060405180910390fd5b60008211610a3357604051600160e51b62461bcd0281526004018080602001828103825260218152602001806118ee6021913960400191505060405180910390fd5b428311610a7457604051600160e51b62461bcd02815260040180806020018281038252602a8152602001806118c4602a913960400191505060405180910390fd5b610a7d846113b6565b6001600160a01b0380851660009081526006602090815260408083208690556005825280832087905560035490931682528190522054610ac3908363ffffffff61141416565b6003546001600160a01b03908116600090815260208181526040918290209390935580518681529283018590528051918716927f2d814308d70a2c356e04b9495a463b35b22563f541e00d2dad99471d28496612929081900390910190a25060019392505050565b610b33610fdd565b610b755760408051600160e51b62461bcd0281526020600482015260186024820152600080516020611975833981519152604482015290519081900360640190fd5b600354600160a01b900460ff1615610bc157604051600160e51b62461bcd0281526004018080602001828103825260248152602001806119956024913960400191505060405180910390fd5b60038054600160a01b60ff021916600160a01b1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b6000610c0c610fdd565b610c4e5760408051600160e51b62461bcd0281526020600482015260186024820152600080516020611975833981519152604482015290519081900360640190fd5b825182518114610ca85760408051600160e51b62461bcd02815260206004820152601960248201527f496e636f6e73697374656e74206172726179206c656e67746800000000000000604482015290519081900360640190fd5b600081118015610cb9575060968111155b610cf757604051600160e51b62461bcd0281526004018080602001828103825260228152602001806119306022913960400191505060405180910390fd5b6000805b82811015610f2b57610d1f868281518110610d1257fe5b60200260200101516113b6565b6000858281518110610d2d57fe5b602002602001015111610d8a5760408051600160e51b62461bcd02815260206004820152601f60248201527f546865207472616e7366657220616d6f756e742063616e6e6f74206265203000604482015290519081900360640190fd5b60006001600160a01b0316868281518110610da157fe5b60200260200101516001600160a01b03161415610df257604051600160e51b62461bcd0281526004018080602001828103825260238152602001806119526023913960400191505060405180910390fd5b610e18858281518110610e0157fe5b60200260200101518361142990919063ffffffff16565b9150610e77858281518110610e2957fe5b6020026020010151600080898581518110610e4057fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205461142990919063ffffffff16565b600080888481518110610e8657fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550858181518110610ebe57fe5b60200260200101516001600160a01b0316336001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef878481518110610f0657fe5b60200260200101516040518082815260200191505060405180910390a3600101610cfb565b5033600090815260208190526040902054811115610f935760408051600160e51b62461bcd02815260206004820152601d60248201527f4e6f7420656e6f75676820746f6b656e7320746f207472616e73666572000000604482015290519081900360640190fd5b33600090815260208190526040902054610fb3908263ffffffff61141416565b33600090815260208190526040902055506001949350505050565b6003546001600160a01b031690565b6003546001600160a01b0316331490565b60066020526000908152604090205481565b604051806040016040528060048152602001600160e01b63414943430281525081565b600354600090600160a01b900460ff161561107257604051600160e51b62461bcd0281526004018080602001828103825260248152602001806119956024913960400191505060405180910390fd5b6106c6838361143b565b600080611088336106cd565b11156110995761109733611196565b505b6106c68383611477565b6001600160a01b031660009081526004602052604090205460ff1690565b6110c9610fdd565b61110b5760408051600160e51b62461bcd0281526020600482015260186024820152600080516020611975833981519152604482015290519081900360640190fd5b6001600160a01b038216600081815260046020908152604091829020805460ff1916851515908117909155825190815291517f67a17b8db8ff8fa7cff69c2328bf8a35f9be2c88abeea30be900fc28eece28ed9281900390910190a25050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600354600090600160a01b900460ff16156111e557604051600160e51b62461bcd0281526004018080602001828103825260248152602001806119956024913960400191505060405180910390fd5b6111ee826113b6565b60006111f9836106cd565b9050600081116112535760408051600160e51b62461bcd02815260206004820152601460248201527f4e6f2072656c65617361626c6520746f6b656e73000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03831660009081526020819052604090205461127c908263ffffffff61142916565b6001600160a01b0384166000818152602081815260408083209490945560068152838220919091558251848152925191927fd777ee46b5c5e9bff9903e5b77152b900a28b55ea90ea99766fa3b5237f970f6929081900390910190a250600192915050565b6112e9610fdd565b61132b5760408051600160e51b62461bcd0281526020600482015260186024820152600080516020611975833981519152604482015290519081900360640190fd5b61133481611495565b50565b6000611344338484611539565b50600192915050565b6000611358336113b6565b611361846113b6565b61136a836113b6565b61076684848461162b565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916113449185906113b1908663ffffffff61142916565b611539565b6113bf816110a3565b156113345760408051600160e51b62461bcd02815260206004820152601760248201527f4164647265737320686173206265656e2066726f7a656e000000000000000000604482015290519081900360640190fd5b60008282111561142357600080fd5b50900390565b6000828201838110156106c657600080fd5b3360008181526001602090815260408083206001600160a01b038716845290915281205490916113449185906113b1908663ffffffff61141416565b6000611482336113b6565b61148b836113b6565b6106c68383611685565b6001600160a01b0381166114dd57604051600160e51b62461bcd02815260040180806020018281038252603b81526020018061185c603b913960400191505060405180910390fd5b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03821661158157604051600160e51b62461bcd02815260040180806020018281038252602281526020018061183a6022913960400191505060405180910390fd5b6001600160a01b0383166115c957604051600160e51b62461bcd02815260040180806020018281038252602181526020018061190f6021913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600354600090600160a01b900460ff161561167a57604051600160e51b62461bcd0281526004018080602001828103825260248152602001806119956024913960400191505060405180910390fd5b6107668484846116de565b600354600090600160a01b900460ff16156116d457604051600160e51b62461bcd0281526004018080602001828103825260248152602001806119956024913960400191505060405180910390fd5b6106c68383611730565b60006116eb848484611739565b6001600160a01b0384166000908152600160209081526040808320338085529252909120546117269186916113b1908663ffffffff61141416565b5060019392505050565b60006113443384845b6001600160a01b03821661178157604051600160e51b62461bcd0281526004018080602001828103825260238152602001806119526023913960400191505060405180910390fd5b6001600160a01b0383166000908152602081905260409020546117aa908263ffffffff61141416565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546117df908263ffffffff61142916565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350505056fe43616e6e6f7420617070726f766520746f20746865207a65726f206164647265737343616e6e6f74207472616e7366657220636f6e74726f6c206f662074686520636f6e747261637420746f20746865207a65726f20616464726573735468652074617267657420616464726573732063616e6e6f7420626520746865207a65726f20616464726573735468652074696d65206d7573742062652067726561746572207468616e2063757272656e742074696d6554686520616d6f756e74206d7573742062652067726561746572207468616e20305365747465722063616e6e6f7420626520746865207a65726f2061646472657373496e76616c6964206e756d626572206f66207472616e73666572206f626a6563747343616e6e6f74207472616e7366657220746f20746865207a65726f20616464726573735468652063616c6c6572206d757374206265206f776e657200000000000000004f6e6c79207768656e2074686520636f6e7472616374206973206e6f7420706175736564a165627a7a723058207a78d0c232ddec3aedff345f31467438386c95db27fe353b091ef1f04e9495500029"
}