{
  "address": "0x5bb1632fa0023e1aa76a1ae92b4635c8dba49fa2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GastroAdvisorToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-15\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/rbac/Roles.sol\n\n/**\n * @title Roles\n * @author Francisco Giordano (@frangio)\n * @dev Library for managing addresses assigned to a Role.\n * See RBAC.sol for example usage.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an address access to this role\n   */\n  function add(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = true;\n  }\n\n  /**\n   * @dev remove an address' access to this role\n   */\n  function remove(Role storage _role, address _addr)\n    internal\n  {\n    _role.bearer[_addr] = false;\n  }\n\n  /**\n   * @dev check if an address has this role\n   * // reverts\n   */\n  function check(Role storage _role, address _addr)\n    internal\n    view\n  {\n    require(has(_role, _addr));\n  }\n\n  /**\n   * @dev check if an address has this role\n   * @return bool\n   */\n  function has(Role storage _role, address _addr)\n    internal\n    view\n    returns (bool)\n  {\n    return _role.bearer[_addr];\n  }\n}\n\n// File: openzeppelin-solidity/contracts/access/rbac/RBAC.sol\n\n/**\n * @title RBAC (Role-Based Access Control)\n * @author Matt Condon (@Shrugs)\n * @dev Stores and provides setters and getters for roles and addresses.\n * Supports unlimited numbers of roles and addresses.\n * See //contracts/mocks/RBACMock.sol for an example of usage.\n * This RBAC method uses strings to key roles. It may be beneficial\n * for you to write your own implementation of this interface using Enums or similar.\n */\ncontract RBAC {\n  using Roles for Roles.Role;\n\n  mapping (string => Roles.Role) private roles;\n\n  event RoleAdded(address indexed operator, string role);\n  event RoleRemoved(address indexed operator, string role);\n\n  /**\n   * @dev reverts if addr does not have role\n   * @param _operator address\n   * @param _role the name of the role\n   * // reverts\n   */\n  function checkRole(address _operator, string _role)\n    public\n    view\n  {\n    roles[_role].check(_operator);\n  }\n\n  /**\n   * @dev determine if addr has role\n   * @param _operator address\n   * @param _role the name of the role\n   * @return bool\n   */\n  function hasRole(address _operator, string _role)\n    public\n    view\n    returns (bool)\n  {\n    return roles[_role].has(_operator);\n  }\n\n  /**\n   * @dev add a role to an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function addRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].add(_operator);\n    emit RoleAdded(_operator, _role);\n  }\n\n  /**\n   * @dev remove a role from an address\n   * @param _operator address\n   * @param _role the name of the role\n   */\n  function removeRole(address _operator, string _role)\n    internal\n  {\n    roles[_role].remove(_operator);\n    emit RoleRemoved(_operator, _role);\n  }\n\n  /**\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n   * @param _role the name of the role\n   * // reverts\n   */\n  modifier onlyRole(string _role)\n  {\n    checkRole(msg.sender, _role);\n    _;\n  }\n\n  /**\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n   * @param _roles the names of the roles to scope access to\n   * // reverts\n   *\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n   *  see: https://github.com/ethereum/solidity/issues/2467\n   */\n  // modifier onlyRoles(string[] _roles) {\n  //     bool hasAnyRole = false;\n  //     for (uint8 i = 0; i < _roles.length; i++) {\n  //         if (hasRole(msg.sender, _roles[i])) {\n  //             hasAnyRole = true;\n  //             break;\n  //         }\n  //     }\n\n  //     require(hasAnyRole);\n\n  //     _;\n  // }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/RBACMintableToken.sol\n\n/**\n * @title RBACMintableToken\n * @author Vittorio Minacori (@vittominacori)\n * @dev Mintable Token, with RBAC minter permissions\n */\ncontract RBACMintableToken is MintableToken, RBAC {\n  /**\n   * A constant role name for indicating minters.\n   */\n  string public constant ROLE_MINTER = \"minter\";\n\n  /**\n   * @dev override the Mintable token modifier to add role based logic\n   */\n  modifier hasMintPermission() {\n    checkRole(msg.sender, ROLE_MINTER);\n    _;\n  }\n\n  /**\n   * @dev add a minter role to an address\n   * @param _minter address\n   */\n  function addMinter(address _minter) public onlyOwner {\n    addRole(_minter, ROLE_MINTER);\n  }\n\n  /**\n   * @dev remove a minter role from an address\n   * @param _minter address\n   */\n  function removeMinter(address _minter) public onlyOwner {\n    removeRole(_minter, ROLE_MINTER);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/CappedToken.sol\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param _addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(_addr) }\n    return size > 0;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\n\n/**\n * @title SupportsInterfaceWithLookup\n * @author Matt Condon (@shrugs)\n * @dev Implements ERC165 using a lookup table.\n */\ncontract SupportsInterfaceWithLookup is ERC165 {\n\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/ERC1363.sol\n\n/**\n * @title ERC1363 interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for a Payable Token contract as defined in\n *  https://github.com/ethereum/EIPs/issues/1363\n */\ncontract ERC1363 is ERC20, ERC165 {\n  /*\n   * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\n   * 0x4bbee2df ===\n   *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n   *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n   *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n   *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\n   */\n\n  /*\n   * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\n   * 0xfb9ec8ce ===\n   *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n   *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n   */\n\n  /**\n   * @notice Transfer tokens from `msg.sender` to another address\n   *  and then call `onTransferReceived` on receiver\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 The amount of tokens to be transferred\n   * @return true unless throwing\n   */\n  function transferAndCall(address _to, uint256 _value) public returns (bool);\n\n  /**\n   * @notice Transfer tokens from `msg.sender` to another address\n   *  and then call `onTransferReceived` on receiver\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 The amount of tokens to be transferred\n   * @param _data bytes Additional data with no specified format, sent in call to `_to`\n   * @return true unless throwing\n   */\n  function transferAndCall(address _to, uint256 _value, bytes _data) public returns (bool); // solium-disable-line max-len\n\n  /**\n   * @notice Transfer tokens from one address to another\n   *  and then call `onTransferReceived` on receiver\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 The amount of tokens to be transferred\n   * @return true unless throwing\n   */\n  function transferFromAndCall(address _from, address _to, uint256 _value) public returns (bool); // solium-disable-line max-len\n\n\n  /**\n   * @notice Transfer tokens from one address to another\n   *  and then call `onTransferReceived` on receiver\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 The amount of tokens to be transferred\n   * @param _data bytes Additional data with no specified format, sent in call to `_to`\n   * @return true unless throwing\n   */\n  function transferFromAndCall(address _from, address _to, uint256 _value, bytes _data) public returns (bool); // solium-disable-line max-len, arg-overflow\n\n  /**\n   * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n   *  and then call `onApprovalReceived` on spender\n   *  Beware that changing an allowance with this method brings the risk that someone may use both the old\n   *  and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   *  race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   *  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender address The address which will spend the funds\n   * @param _value uint256 The amount of tokens to be spent\n   */\n  function approveAndCall(address _spender, uint256 _value) public returns (bool); // solium-disable-line max-len\n\n  /**\n   * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n   *  and then call `onApprovalReceived` on spender\n   *  Beware that changing an allowance with this method brings the risk that someone may use both the old\n   *  and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   *  race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   *  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender address The address which will spend the funds\n   * @param _value uint256 The amount of tokens to be spent\n   * @param _data bytes Additional data with no specified format, sent in call to `_spender`\n   */\n  function approveAndCall(address _spender, uint256 _value, bytes _data) public returns (bool); // solium-disable-line max-len\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/ERC1363Receiver.sol\n\n/**\n * @title ERC1363Receiver interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\n *  from ERC1363 token contracts as defined in\n *  https://github.com/ethereum/EIPs/issues/1363\n */\ncontract ERC1363Receiver {\n  /*\n   * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\n   * 0x88a7ca5c === bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))\n   */\n\n  /**\n   * @notice Handle the receipt of ERC1363 tokens\n   * @dev Any ERC1363 smart contract calls this function on the recipient\n   *  after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\n   *  transfer. Return of other than the magic value MUST result in the\n   *  transaction being reverted.\n   *  Note: the contract address is always the message sender.\n   * @param _operator address The address which called `transferAndCall` or `transferFromAndCall` function\n   * @param _from address The address which are token transferred from\n   * @param _value uint256 The amount of tokens transferred\n   * @param _data bytes Additional data with no specified format\n   * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`\n   *  unless throwing\n   */\n  function onTransferReceived(address _operator, address _from, uint256 _value, bytes _data) external returns (bytes4); // solium-disable-line max-len, arg-overflow\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/ERC1363Spender.sol\n\n/**\n * @title ERC1363Spender interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support approveAndCall\n *  from ERC1363 token contracts as defined in\n *  https://github.com/ethereum/EIPs/issues/1363\n */\ncontract ERC1363Spender {\n  /*\n   * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\n   * 0x7b04a2d0 === bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))\n   */\n\n  /**\n   * @notice Handle the approval of ERC1363 tokens\n   * @dev Any ERC1363 smart contract calls this function on the recipient\n   *  after an `approve`. This function MAY throw to revert and reject the\n   *  approval. Return of other than the magic value MUST result in the\n   *  transaction being reverted.\n   *  Note: the contract address is always the message sender.\n   * @param _owner address The address which called `approveAndCall` function\n   * @param _value uint256 The amount of tokens to be spent\n   * @param _data bytes Additional data with no specified format\n   * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`\n   *  unless throwing\n   */\n  function onApprovalReceived(address _owner, uint256 _value, bytes _data) external returns (bytes4); // solium-disable-line max-len\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/ERC1363BasicToken.sol\n\n// solium-disable-next-line max-len\n\n\n\n\n\n\n\n/**\n * @title ERC1363BasicToken\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Implementation of an ERC1363 interface\n */\ncontract ERC1363BasicToken is SupportsInterfaceWithLookup, StandardToken, ERC1363 { // solium-disable-line max-len\n  using AddressUtils for address;\n\n  /*\n   * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\n   * 0x4bbee2df ===\n   *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n   *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n   *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n   *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\n   */\n  bytes4 internal constant InterfaceId_ERC1363Transfer = 0x4bbee2df;\n\n  /*\n   * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\n   * 0xfb9ec8ce ===\n   *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n   *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n   */\n  bytes4 internal constant InterfaceId_ERC1363Approve = 0xfb9ec8ce;\n\n  // Equals to `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC1363Receiver(0).onTransferReceived.selector`\n  bytes4 private constant ERC1363_RECEIVED = 0x88a7ca5c;\n\n  // Equals to `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC1363Spender(0).onApprovalReceived.selector`\n  bytes4 private constant ERC1363_APPROVED = 0x7b04a2d0;\n\n  constructor() public {\n    // register the supported interfaces to conform to ERC1363 via ERC165\n    _registerInterface(InterfaceId_ERC1363Transfer);\n    _registerInterface(InterfaceId_ERC1363Approve);\n  }\n\n  function transferAndCall(\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    return transferAndCall(_to, _value, \"\");\n  }\n\n  function transferAndCall(\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    returns (bool)\n  {\n    require(transfer(_to, _value));\n    require(\n      checkAndCallTransfer(\n        msg.sender,\n        _to,\n        _value,\n        _data\n      )\n    );\n    return true;\n  }\n\n  function transferFromAndCall(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    // solium-disable-next-line arg-overflow\n    return transferFromAndCall(_from, _to, _value, \"\");\n  }\n\n  function transferFromAndCall(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    returns (bool)\n  {\n    require(transferFrom(_from, _to, _value));\n    require(\n      checkAndCallTransfer(\n        _from,\n        _to,\n        _value,\n        _data\n      )\n    );\n    return true;\n  }\n\n  function approveAndCall(\n    address _spender,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    return approveAndCall(_spender, _value, \"\");\n  }\n\n  function approveAndCall(\n    address _spender,\n    uint256 _value,\n    bytes _data\n  )\n    public\n    returns (bool)\n  {\n    approve(_spender, _value);\n    require(\n      checkAndCallApprove(\n        _spender,\n        _value,\n        _data\n      )\n    );\n    return true;\n  }\n\n  /**\n   * @dev Internal function to invoke `onTransferReceived` on a target address\n   *  The call is not executed if the target address is not a contract\n   * @param _from address Representing the previous owner of the given token value\n   * @param _to address Target address that will receive the tokens\n   * @param _value uint256 The amount mount of tokens to be transferred\n   * @param _data bytes Optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallTransfer(\n    address _from,\n    address _to,\n    uint256 _value,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return false;\n    }\n    bytes4 retval = ERC1363Receiver(_to).onTransferReceived(\n      msg.sender, _from, _value, _data\n    );\n    return (retval == ERC1363_RECEIVED);\n  }\n\n  /**\n   * @dev Internal function to invoke `onApprovalReceived` on a target address\n   *  The call is not executed if the target address is not a contract\n   * @param _spender address The address which will spend the funds\n   * @param _value uint256 The amount of tokens to be spent\n   * @param _data bytes Optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallApprove(\n    address _spender,\n    uint256 _value,\n    bytes _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_spender.isContract()) {\n      return false;\n    }\n    bytes4 retval = ERC1363Spender(_spender).onApprovalReceived(\n      msg.sender, _value, _data\n    );\n    return (retval == ERC1363_APPROVED);\n  }\n}\n\n// File: eth-token-recover/contracts/TokenRecover.sol\n\n/**\n * @title TokenRecover\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Allow to recover any ERC20 sent into the contract for error\n */\ncontract TokenRecover is Ownable {\n\n  /**\n   * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\n   * @param _tokenAddress address The token contract address\n   * @param _tokens Number of tokens to be sent\n   * @return bool\n   */\n  function recoverERC20(\n    address _tokenAddress,\n    uint256 _tokens\n  )\n  public\n  onlyOwner\n  returns (bool success)\n  {\n    return ERC20Basic(_tokenAddress).transfer(owner, _tokens);\n  }\n}\n\n// File: contracts/token/base/BaseToken.sol\n\n/**\n * @title BaseToken\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev BaseToken is An ERC20 token with a lot of stuffs used as Base for any other token contract.\n *  It is DetailedERC20, RBACMintableToken, BurnableToken, ERC1363BasicToken.\n */\ncontract BaseToken is DetailedERC20, CappedToken, RBACMintableToken, BurnableToken, ERC1363BasicToken, TokenRecover { // solium-disable-line max-len\n\n  constructor(\n    string _name,\n    string _symbol,\n    uint8 _decimals,\n    uint256 _cap\n  )\n  DetailedERC20(_name, _symbol, _decimals)\n  CappedToken(_cap)\n  public\n  {}\n}\n\n// File: contracts/token/GastroAdvisorToken.sol\n\n/**\n * @title GastroAdvisorToken\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev GastroAdvisorToken is an ERC20 token with a lot of stuffs. Extends from BaseToken\n */\ncontract GastroAdvisorToken is BaseToken {\n\n  uint256 public lockedUntil;\n  mapping(address => uint256) lockedBalances;\n  string constant ROLE_OPERATOR = \"operator\";\n\n  /**\n   * @dev Tokens can be moved only after minting finished or if you are an approved operator.\n   *  Some tokens can be locked until a date. Nobody can move locked tokens before of this date.\n   */\n  modifier canTransfer(address _from, uint256 _value) {\n    require(mintingFinished || hasRole(_from, ROLE_OPERATOR));\n    require(_value <= balances[_from].sub(lockedBalanceOf(_from)));\n    _;\n  }\n\n  constructor(\n    string _name,\n    string _symbol,\n    uint8 _decimals,\n    uint256 _cap,\n    uint256 _lockedUntil\n  )\n  BaseToken(_name, _symbol, _decimals, _cap)\n  public\n  {\n    lockedUntil = _lockedUntil;\n    addMinter(owner);\n    addOperator(owner);\n  }\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n  public\n  canTransfer(msg.sender, _value)\n  returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n  public\n  canTransfer(_from, _value)\n  returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  /**\n   * @dev Gets the locked balance of the specified address.\n   * @param _who The address to query the balance of.\n   * @return An uint256 representing the locked amount owned by the passed address.\n   */\n  function lockedBalanceOf(address _who) public view returns (uint256) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp <= lockedUntil ? lockedBalances[_who] : 0;\n  }\n\n  /**\n   * @dev Function to mint and lock tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mintAndLock(\n    address _to,\n    uint256 _amount\n  )\n  public\n  hasMintPermission\n  canMint\n  returns (bool)\n  {\n    lockedBalances[_to] = lockedBalances[_to].add(_amount);\n    return super.mint(_to, _amount);\n  }\n\n  /**\n   * @dev add a operator role to an address\n   * @param _operator address\n   */\n  function addOperator(address _operator) public onlyOwner {\n    require(!mintingFinished);\n    addRole(_operator, ROLE_OPERATOR);\n  }\n\n  /**\n   * @dev add a operator role to an array of addresses\n   * @param _operators address[]\n   */\n  function addOperators(address[] _operators) public onlyOwner {\n    require(!mintingFinished);\n    require(_operators.length > 0);\n    for (uint i = 0; i < _operators.length; i++) {\n      addRole(_operators[i], ROLE_OPERATOR);\n    }\n  }\n\n  /**\n   * @dev remove a operator role from an address\n   * @param _operator address\n   */\n  function removeOperator(address _operator) public onlyOwner {\n    removeRole(_operator, ROLE_OPERATOR);\n  }\n\n  /**\n   * @dev add a minter role to an array of addresses\n   * @param _minters address[]\n   */\n  function addMinters(address[] _minters) public onlyOwner {\n    require(_minters.length > 0);\n    for (uint i = 0; i < _minters.length; i++) {\n      addRole(_minters[i], ROLE_MINTER);\n    }\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minters\",\"type\":\"address[]\"}],\"name\":\"addMinters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_MINTER\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintAndLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"addOperators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedUntil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_lockedUntil\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526007805460a060020a60ff02191690553480156200002157600080fd5b50604051620024f7380380620024f7833981016040908152815160208084015192840151606085015160808601519386018051909695909501949193909290918691869186918691829186918691869162000083916000919086019062000478565b5081516200009990600190602085019062000478565b506002805460ff191660ff9290921691909117905550620000e590507f01ffc9a700000000000000000000000000000000000000000000000000000000640100000000620001c4810204565b60078054600160a060020a03191633179055600081116200010557600080fd5b6008556200013c7f4bbee2df00000000000000000000000000000000000000000000000000000000640100000000620001c4810204565b620001707ffb9ec8ce00000000000000000000000000000000000000000000000000000000640100000000620001c4810204565b505050600a829055506007546200019990600160a060020a031664010000000062000231810204565b600754620001b990600160a060020a03166401000000006200029c810204565b50505050506200051d565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415620001f457600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152600360205260409020805460ff19166001179055565b600754600160a060020a031633146200024957600080fd5b62000299816040805190810160405280600681526020017f6d696e74657200000000000000000000000000000000000000000000000000008152506200032d640100000000026401000000009004565b50565b600754600160a060020a03163314620002b457600080fd5b60075474010000000000000000000000000000000000000000900460ff1615620002dd57600080fd5b62000299816040805190810160405280600881526020017f6f70657261746f720000000000000000000000000000000000000000000000008152506200032d640100000000026401000000009004565b620003a9826009836040518082805190602001908083835b60208310620003665780518252601f19909201916020918201910162000345565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505064010000000062000453810262001f191704565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b700489826040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000414578181015183820152602001620003fa565b50505050905090810190601f168015620004425780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004bb57805160ff1916838001178555620004eb565b82800160010185558215620004eb579182015b82811115620004eb578251825591602001919060010190620004ce565b50620004f9929150620004fd565b5090565b6200051a91905b80821115620004f9576000815560010162000504565b90565b611fca806200052d6000396000f3006080604052600436106101ed5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146101f257806305d2035b1461022857806306fdde031461023d578063095ea7b3146102c75780630988ca8c146102eb5780631296ee621461035457806318160ddd1461037857806319fa8f501461039f578063217fe6c6146103d157806323b872dd146104385780633092afd514610462578063313ce567146104835780633177029f146104ae578063355274ea146104d25780634000aea0146104e757806340c10f191461055057806342966c6814610574578063593557361461058c57806366188463146105ad57806370a08231146105d1578063715018a6146105f257806371e2a657146106075780637d64bcb41461065c5780638980f11f146106715780638da5cb5b1461069557806392afc33a146106c657806395d89b41146106db578063983b2d56146106f05780639870d7fe146107115780639f2c950314610732578063a07aea1c14610756578063a9059cbb146107ab578063ac8a584a146107cf578063c1d34b89146107f0578063cae9ca511461085f578063ce0617ec146108c8578063d73dd623146108dd578063d8fbe99414610901578063dd62ed3e1461092b578063f2fde38b14610952575b600080fd5b3480156101fe57600080fd5b50610214600160e060020a031960043516610973565b604080519115158252519081900360200190f35b34801561023457600080fd5b50610214610992565b34801561024957600080fd5b506102526109a2565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028c578181015183820152602001610274565b50505050905090810190601f1680156102b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102d357600080fd5b50610214600160a060020a0360043516602435610a30565b3480156102f757600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610352958335600160a060020a0316953695604494919390910191908190840183828082843750949750610a969650505050505050565b005b34801561036057600080fd5b50610214600160a060020a0360043516602435610b04565b34801561038457600080fd5b5061038d610b28565b60408051918252519081900360200190f35b3480156103ab57600080fd5b506103b4610b2e565b60408051600160e060020a03199092168252519081900360200190f35b3480156103dd57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610214958335600160a060020a0316953695604494919390910191908190840183828082843750949750610b529650505050505050565b34801561044457600080fd5b50610214600160a060020a0360043581169060243516604435610bbe565b34801561046e57600080fd5b50610352600160a060020a0360043516610c62565b34801561048f57600080fd5b50610498610ca9565b6040805160ff9092168252519081900360200190f35b3480156104ba57600080fd5b50610214600160a060020a0360043516602435610cb2565b3480156104de57600080fd5b5061038d610ccf565b3480156104f357600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610214948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610cd59650505050505050565b34801561055c57600080fd5b50610214600160a060020a0360043516602435610d0d565b34801561058057600080fd5b50610352600435610d3c565b34801561059857600080fd5b5061038d600160a060020a0360043516610d46565b3480156105b957600080fd5b50610214600160a060020a0360043516602435610d79565b3480156105dd57600080fd5b5061038d600160a060020a0360043516610e68565b3480156105fe57600080fd5b50610352610e83565b34801561061357600080fd5b506040805160206004803580820135838102808601850190965280855261035295369593946024949385019291829185019084908082843750949750610ef19650505050505050565b34801561066857600080fd5b50610214610f72565b34801561067d57600080fd5b50610214600160a060020a0360043516602435610ff6565b3480156106a157600080fd5b506106aa6110b2565b60408051600160a060020a039092168252519081900360200190f35b3480156106d257600080fd5b506102526110c1565b3480156106e757600080fd5b506102526110e6565b3480156106fc57600080fd5b50610352600160a060020a0360043516611140565b34801561071d57600080fd5b50610352600160a060020a0360043516611184565b34801561073e57600080fd5b50610214600160a060020a03600435166024356111df565b34801561076257600080fd5b5060408051602060048035808201358381028086018501909652808552610352953695939460249493850192918291850190849080828437509497506112719650505050505050565b3480156107b757600080fd5b50610214600160a060020a0360043516602435611309565b3480156107db57600080fd5b50610352600160a060020a0360043516611386565b3480156107fc57600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261021494600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506113ca9650505050505050565b34801561086b57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610214948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506114049650505050505050565b3480156108d457600080fd5b5061038d61141c565b3480156108e957600080fd5b50610214600160a060020a0360043516602435611422565b34801561090d57600080fd5b50610214600160a060020a03600435811690602435166044356114bb565b34801561093757600080fd5b5061038d600160a060020a03600435811690602435166114e1565b34801561095e57600080fd5b50610352600160a060020a036004351661150c565b600160e060020a03191660009081526003602052604090205460ff1690565b60075460a060020a900460ff1681565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a285780601f106109fd57610100808354040283529160200191610a28565b820191906000526020600020905b815481529060010190602001808311610a0b57829003601f168201915b505050505081565b336000818152600660209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b610b00826009836040518082805190602001908083835b60208310610acc5780518252601f199092019160209182019101610aad565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061152c565b5050565b6000610b2183836020604051908101604052806000815250610cd5565b9392505050565b60055490565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b6000610b21836009846040518082805190602001908083835b60208310610b8a5780518252601f199092019160209182019101610b6b565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050611541565b60008382600760149054906101000a900460ff1680610c055750610c0582604080519081016040528060088152602001600080516020611f3f833981519152815250610b52565b1515610c1057600080fd5b610c41610c1c83610d46565b600160a060020a0384166000908152600460205260409020549063ffffffff61156016565b811115610c4d57600080fd5b610c58868686611572565b9695505050505050565b600754600160a060020a03163314610c7957600080fd5b610ca681604080519081016040528060068152602001600080516020611f5f8339815191528152506116d7565b50565b60025460ff1681565b6000610b2183836020604051908101604052806000815250611404565b60085481565b6000610ce18484611309565b1515610cec57600080fd5b610cf8338585856117e8565b1515610d0357600080fd5b5060019392505050565b6000600854610d278360055461195590919063ffffffff16565b1115610d3257600080fd5b610b218383611962565b610ca63382611a71565b6000600a54421115610d59576000610d73565b600160a060020a0382166000908152600b60205260409020545b92915050565b336000908152600660209081526040808320600160a060020a0386168452909152812054808310610dcd57336000908152600660209081526040808320600160a060020a0388168452909152812055610e02565b610ddd818463ffffffff61156016565b336000908152600660209081526040808320600160a060020a03891684529091529020555b336000818152600660209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526004602052604090205490565b600754600160a060020a03163314610e9a57600080fd5b600754604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26007805473ffffffffffffffffffffffffffffffffffffffff19169055565b600754600090600160a060020a03163314610f0b57600080fd5b8151600010610f1957600080fd5b5060005b8151811015610b0057610f6a8282815181101515610f3757fe5b90602001906020020151604080519081016040528060068152602001600080516020611f5f833981519152815250611b60565b600101610f1d565b600754600090600160a060020a03163314610f8c57600080fd5b60075460a060020a900460ff1615610fa357600080fd5b6007805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600754600090600160a060020a0316331461101057600080fd5b600754604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519185169163a9059cbb916044808201926020929091908290030181600087803b15801561107f57600080fd5b505af1158015611093573d6000803e3d6000fd5b505050506040513d60208110156110a957600080fd5b50519392505050565b600754600160a060020a031681565b6040805180820190915260068152600080516020611f5f833981519152602082015281565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a285780601f106109fd57610100808354040283529160200191610a28565b600754600160a060020a0316331461115757600080fd5b610ca681604080519081016040528060068152602001600080516020611f5f833981519152815250611b60565b600754600160a060020a0316331461119b57600080fd5b60075460a060020a900460ff16156111b257600080fd5b610ca681604080519081016040528060088152602001600080516020611f3f833981519152815250611b60565b600061120e33604080519081016040528060068152602001600080516020611f5f833981519152815250610a96565b60075460a060020a900460ff161561122557600080fd5b600160a060020a0383166000908152600b602052604090205461124e908363ffffffff61195516565b600160a060020a0384166000908152600b6020526040902055610b218383610d0d565b600754600090600160a060020a0316331461128b57600080fd5b60075460a060020a900460ff16156112a257600080fd5b81516000106112b057600080fd5b5060005b8151811015610b005761130182828151811015156112ce57fe5b90602001906020020151604080519081016040528060088152602001600080516020611f3f833981519152815250611b60565b6001016112b4565b60003382600760149054906101000a900460ff1680611350575061135082604080519081016040528060088152602001600080516020611f3f833981519152815250610b52565b151561135b57600080fd5b611367610c1c83610d46565b81111561137357600080fd5b61137d8585611c32565b95945050505050565b600754600160a060020a0316331461139d57600080fd5b610ca681604080519081016040528060088152602001600080516020611f3f8339815191528152506116d7565b60006113d7858585610bbe565b15156113e257600080fd5b6113ee858585856117e8565b15156113f957600080fd5b506001949350505050565b60006114108484610a30565b50610cf8848484611d01565b600a5481565b336000908152600660209081526040808320600160a060020a0386168452909152812054611456908363ffffffff61195516565b336000818152600660209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60006114d984848460206040519081016040528060008152506113ca565b949350505050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b600754600160a060020a0316331461152357600080fd5b610ca681611e71565b6115368282611541565b1515610b0057600080fd5b600160a060020a03166000908152602091909152604090205460ff1690565b60008282111561156c57fe5b50900390565b600160a060020a03831660009081526004602052604081205482111561159757600080fd5b600160a060020a03841660009081526006602090815260408083203384529091529020548211156115c757600080fd5b600160a060020a03831615156115dc57600080fd5b600160a060020a038416600090815260046020526040902054611605908363ffffffff61156016565b600160a060020a03808616600090815260046020526040808220939093559085168152205461163a908363ffffffff61195516565b600160a060020a03808516600090815260046020908152604080832094909455918716815260068252828120338252909152205461167e908363ffffffff61156016565b600160a060020a0380861660008181526006602090815260408083203384528252918290209490945580518681529051928716939192600080516020611f7f833981519152929181900390910190a35060019392505050565b611741826009836040518082805190602001908083835b6020831061170d5780518252601f1990920191602091820191016116ee565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050611eef565b81600160a060020a03167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b838110156117aa578181015183820152602001611792565b50505050905090810190601f1680156117d75780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b6000806117fd85600160a060020a0316611f11565b151561180c576000915061194c565b6040517f88a7ca5c0000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a16946388a7ca5c94938c938b938b93909160a490910190602085019080838360005b8381101561189f578181015183820152602001611887565b50505050905090810190601f1680156118cc5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156118ee57600080fd5b505af1158015611902573d6000803e3d6000fd5b505050506040513d602081101561191857600080fd5b5051600160e060020a031981167f88a7ca5c0000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b81810182811015610d7357fe5b600061199133604080519081016040528060068152602001600080516020611f5f833981519152815250610a96565b60075460a060020a900460ff16156119a857600080fd5b6005546119bb908363ffffffff61195516565b600555600160a060020a0383166000908152600460205260409020546119e7908363ffffffff61195516565b600160a060020a038416600081815260046020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020611f7f8339815191529181900360200190a350600192915050565b600160a060020a038216600090815260046020526040902054811115611a9657600080fd5b600160a060020a038216600090815260046020526040902054611abf908263ffffffff61156016565b600160a060020a038316600090815260046020526040902055600554611aeb908263ffffffff61156016565b600555604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020611f7f8339815191529181900360200190a35050565b611bca826009836040518082805190602001908083835b60208310611b965780518252601f199092019160209182019101611b77565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050611f19565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b70048982604051808060200182810382528381815181526020019150805190602001908083836000838110156117aa578181015183820152602001611792565b33600090815260046020526040812054821115611c4e57600080fd5b600160a060020a0383161515611c6357600080fd5b33600090815260046020526040902054611c83908363ffffffff61156016565b3360009081526004602052604080822092909255600160a060020a03851681522054611cb5908363ffffffff61195516565b600160a060020a038416600081815260046020908152604091829020939093558051858152905191923392600080516020611f7f8339815191529281900390910190a350600192915050565b600080611d1685600160a060020a0316611f11565b1515611d255760009150611e69565b84600160a060020a0316637b04a2d03386866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611dbd578181015183820152602001611da5565b50505050905090810190601f168015611dea5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015611e0b57600080fd5b505af1158015611e1f573d6000803e3d6000fd5b505050506040513d6020811015611e3557600080fd5b5051600160e060020a031981167f7b04a2d00000000000000000000000000000000000000000000000000000000014925090505b509392505050565b600160a060020a0381161515611e8657600080fd5b600754604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0316600090815260209190915260409020805460ff19169055565b6000903b1190565b600160a060020a0316600090815260209190915260409020805460ff1916600117905556006f70657261746f720000000000000000000000000000000000000000000000006d696e7465720000000000000000000000000000000000000000000000000000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820d9de277dba96ba3e2eaabd49829086edc052a4f00f53ca9c619165b282f9f94f002900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000a56fa5b99019a5c8000000000000000000000000000000000000000000000000000000000000005cdf2ee0000000000000000000000000000000000000000000000000000000000000001247617374726f41647669736f72546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004464f524b00000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000a56fa5b99019a5c8000000000000000000000000000000000000000000000000000000000000005cdf2ee0000000000000000000000000000000000000000000000000000000000000001247617374726f41647669736f72546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004464f524b00000000000000000000000000000000000000000000000000000000"
}