{
  "address": "0xc8ec2d16cb82bb1b6c399b84a30205051c3a2e9f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TRYTokenVesting",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity 0.5.2;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n\n// File: contracts/TRYTokenVesting.sol\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract TRYTokenVesting is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 private TRYToken;\n    uint256 private tokensToVest = 0;\n    uint256 private vestingId = 0;\n\n    string private constant INSUFFICIENT_BALANCE = \"Insufficient balance\";\n    string private constant INVALID_VESTING_ID = \"Invalid vesting id\";\n    string private constant VESTING_ALREADY_RELEASED = \"Vesting already released\";\n    string private constant INVALID_BENEFICIARY = \"Invalid beneficiary address\";\n    string private constant NOT_VESTED = \"Tokens have not vested yet\";\n\n    struct Vesting {\n        uint256 releaseTime;\n        uint256 amount;\n        address beneficiary;\n        bool released;\n    }\n    mapping(uint256 => Vesting) public vestings;\n\n    event TokenVestingReleased(uint256 indexed vestingId, address indexed beneficiary, uint256 amount);\n    event TokenVestingAdded(uint256 indexed vestingId, address indexed beneficiary, uint256 amount);\n    event TokenVestingRemoved(uint256 indexed vestingId, address indexed beneficiary, uint256 amount);\n\n    constructor(IERC20 _token) public {\n        require(address(_token) != address(0x0), \"Matic token address is not valid\");\n        TRYToken = _token;\n\n        uint256 SCALING_FACTOR = 10 ** 18;\n        uint256 day = 1 days;\n\n        addVesting(0xb316fa9Fa91700D7084D377bfdC81Eb9F232f5Ff, now + 0, 3230085552 * SCALING_FACTOR);\n        addVesting(0x1FD8DFd8Ee9cE53b62C2d5bc944D5F40DA5330C1, now + 30 * day, 25000000 * SCALING_FACTOR);\n        addVesting(0x486E7a308758dc1a7AF00F3bA7B9D79196772D5f, now + 61 * day, 25000000 * SCALING_FACTOR);\n        \n        addVesting(0xb316fa9Fa91700D7084D377bfdC81Eb9F232f5Ff, now + 1279 * day, 273304816 * SCALING_FACTOR);\n    }\n\n    function token() public view returns (IERC20) {\n        return TRYToken;\n    }\n\n    function beneficiary(uint256 _vestingId) public view returns (address) {\n        return vestings[_vestingId].beneficiary;\n    }\n\n    function releaseTime(uint256 _vestingId) public view returns (uint256) {\n        return vestings[_vestingId].releaseTime;\n    }\n\n    function vestingAmount(uint256 _vestingId) public view returns (uint256) {\n        return vestings[_vestingId].amount;\n    }\n\n    function removeVesting(uint256 _vestingId) public onlyOwner {\n        Vesting storage vesting = vestings[_vestingId];\n        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\n        require(!vesting.released , VESTING_ALREADY_RELEASED);\n        vesting.released = true;\n        tokensToVest = tokensToVest.sub(vesting.amount);\n        emit TokenVestingRemoved(_vestingId, vesting.beneficiary, vesting.amount);\n    }\n\n    function addVesting(address _beneficiary, uint256 _releaseTime, uint256 _amount) public onlyOwner {\n        require(_beneficiary != address(0x0), INVALID_BENEFICIARY);\n        tokensToVest = tokensToVest.add(_amount);\n        vestingId = vestingId.add(1);\n        vestings[vestingId] = Vesting({\n            beneficiary: _beneficiary,\n            releaseTime: _releaseTime,\n            amount: _amount,\n            released: false\n        });\n        emit TokenVestingAdded(vestingId, _beneficiary, _amount);\n    }\n\n    function release(uint256 _vestingId) public {\n        Vesting storage vesting = vestings[_vestingId];\n        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\n        require(!vesting.released , VESTING_ALREADY_RELEASED);\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp >= vesting.releaseTime, NOT_VESTED);\n\n        require(TRYToken.balanceOf(address(this)) >= vesting.amount, INSUFFICIENT_BALANCE);\n        vesting.released = true;\n        tokensToVest = tokensToVest.sub(vesting.amount);\n        TRYToken.safeTransfer(vesting.beneficiary, vesting.amount);\n        emit TokenVestingReleased(_vestingId, vesting.beneficiary, vesting.amount);\n    }\n\n    function retrieveExcessTokens(uint256 _amount) public onlyOwner {\n        require(_amount <= TRYToken.balanceOf(address(this)).sub(tokensToVest), INSUFFICIENT_BALANCE);\n        TRYToken.safeTransfer(owner(), _amount);\n    }\n}",
  "bytecode": "6080604052600060025560006003553480156200001b57600080fd5b5060405160208062001d5d833981018060405260208110156200003d57600080fd5b8101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620001b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4d6174696320746f6b656e2061646472657373206973206e6f742076616c696481525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000670de0b6b3a7640000905060006201518090506200023f73b316fa9fa91700d7084d377bfdc81eb9f232f5ff600042018463c08731b002620002fa640100000000026401000000009004565b6200027a731fd8dfd8ee9ce53b62c2d5bc944d5f40da5330c182601e0242018463017d784002620002fa640100000000026401000000009004565b620002b573486e7a308758dc1a7af00f3ba7b9d79196772d5f82603d0242018463017d784002620002fa640100000000026401000000009004565b620002f173b316fa9fa91700d7084d377bfdc81eb9f232f5ff826104ff0242018463104a4cf002620002fa640100000000026401000000009004565b50505062000627565b62000313620005ae640100000000026401000000009004565b15156200031f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601b81526020017f496e76616c69642062656e65666963696172792061646472657373000000000081525090151562000432576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620003f6578082015181840152602081019050620003d9565b50505050905090810190601f168015620004245780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5062000458816002546200060564010000000002620015df179091906401000000009004565b6002819055506200048460016003546200060564010000000002620015df179091906401000000009004565b6003819055506080604051908101604052808381526020018281526020018473ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250600460006003548152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff0219169083151502179055509050508273ffffffffffffffffffffffffffffffffffffffff166003547ffbd41c6118c5ed14f196c270a1793d95e8517e43031d9bb61aa71cb2a38bf557836040518082815260200191505060405180910390a3505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60008082840190508381101515156200061d57600080fd5b8091505092915050565b61172680620006376000396000f3fe608060405234801561001057600080fd5b50600436106100ec576000357c0100000000000000000000000000000000000000000000000000000000900480636eb48096116100a95780638da5cb5b116100835780638da5cb5b146103565780638f32d59b146103a0578063f2fde38b146103c2578063fc0c546a14610406576100ec565b80636eb4809614610297578063715018a6146102c5578063821bee73146102cf576100ec565b806307ad23ef146100f157806309c4bb2b146101335780631bcde4ec1461017557806337bdc99b146101a35780634691a998146101d15780635daa316014610229575b600080fd5b61011d6004803603602081101561010757600080fd5b8101908080359060200190929190505050610450565b6040518082815260200191505060405180910390f35b61015f6004803603602081101561014957600080fd5b8101908080359060200190929190505050610470565b6040518082815260200191505060405180910390f35b6101a16004803603602081101561018b57600080fd5b8101908080359060200190929190505050610490565b005b6101cf600480360360208110156101b957600080fd5b8101908080359060200190929190505050610797565b005b610227600480360360608110156101e757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610dc3565b005b6102556004803603602081101561023f57600080fd5b8101908080359060200190929190505050611041565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102c3600480360360208110156102ad57600080fd5b8101908080359060200190929190505050611081565b005b6102cd6112d7565b005b6102fb600480360360208110156102e557600080fd5b81019080803590602001909291905050506113a9565b604051808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200194505050505060405180910390f35b61035e611406565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103a861142f565b604051808215151515815260200191505060405180910390f35b610404600480360360208110156103d857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611486565b005b61040e6114a5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600060046000838152602001908152602001600020600101549050919050565b600060046000838152602001908152602001600020600001549050919050565b61049861142f565b15156104a357600080fd5b6000600460008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601281526020017f496e76616c69642076657374696e6720696400000000000000000000000000008152509015156105ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156105b2578082015181840152602081019050610597565b50505050905090810190601f1680156105df5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508060020160149054906101000a900460ff16156040805190810160405280601881526020017f56657374696e6720616c72656164792072656c656173656400000000000000008152509015156106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156106a4578082015181840152602081019050610689565b50505050905090810190601f1680156106d15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060018160020160146101000a81548160ff02191690831515021790555061071681600101546002546114cf90919063ffffffff16565b6002819055508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16827fdc8b9c8cc0c8d05e10824e69ee88995716a539af94a1c60fb9898367f613477c83600101546040518082815260200191505060405180910390a35050565b6000600460008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601281526020017f496e76616c69642076657374696e6720696400000000000000000000000000008152509015156108e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108a657808201518184015260208101905061088b565b50505050905090810190601f1680156108d35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508060020160149054906101000a900460ff16156040805190810160405280601881526020017f56657374696e6720616c72656164792072656c656173656400000000000000008152509015156109d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561099857808201518184015260208101905061097d565b50505050905090810190601f1680156109c55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5080600001544210156040805190810160405280601a81526020017f546f6b656e732068617665206e6f742076657374656420796574000000000000815250901515610aba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a7f578082015181840152602081019050610a64565b50505050905090810190601f168015610aac5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508060010154600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610b7b57600080fd5b505afa158015610b8f573d6000803e3d6000fd5b505050506040513d6020811015610ba557600080fd5b810190808051906020019092919050505010156040805190810160405280601481526020017f496e73756666696369656e742062616c616e6365000000000000000000000000815250901515610c96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c5b578082015181840152602081019050610c40565b50505050905090810190601f168015610c885780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060018160020160146101000a81548160ff021916908315150217905550610ccd81600101546002546114cf90919063ffffffff16565b600281905550610d488160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260010154600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114f19092919063ffffffff16565b8060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16827f295ac83a3c5cf518a125ba974be97dca6a668bae6dd90b6902b2618cdff1fcc683600101546040518082815260200191505060405180910390a35050565b610dcb61142f565b1515610dd657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156040805190810160405280601b81526020017f496e76616c69642062656e656669636961727920616464726573730000000000815250901515610ee5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610eaa578082015181840152602081019050610e8f565b50505050905090810190601f168015610ed75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610efb816002546115df90919063ffffffff16565b600281905550610f1760016003546115df90919063ffffffff16565b6003819055506080604051908101604052808381526020018281526020018473ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250600460006003548152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff0219169083151502179055509050508273ffffffffffffffffffffffffffffffffffffffff166003547ffbd41c6118c5ed14f196c270a1793d95e8517e43031d9bb61aa71cb2a38bf557836040518082815260200191505060405180910390a3505050565b60006004600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61108961142f565b151561109457600080fd5b61119e600254600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561115557600080fd5b505afa158015611169573d6000803e3d6000fd5b505050506040513d602081101561117f57600080fd5b81019080805190602001909291905050506114cf90919063ffffffff16565b8111156040805190810160405280601481526020017f496e73756666696369656e742062616c616e636500000000000000000000000081525090151561127f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611244578082015181840152602081019050611229565b50505050905090810190601f1680156112715780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506112d461128b611406565b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114f19092919063ffffffff16565b50565b6112df61142f565b15156112ea57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60046020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16905084565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b61148e61142f565b151561149957600080fd5b6114a281611600565b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008282111515156114e057600080fd5b600082840390508091505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561159457600080fd5b505af11580156115a8573d6000803e3d6000fd5b505050506040513d60208110156115be57600080fd5b810190808051906020019092919050505015156115da57600080fd5b505050565b60008082840190508381101515156115f657600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561163c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea165627a7a72305820b674567b00a2401ccf637a4ffdcb33b42588192f6f2e96a8d8d29245f9c7dfcf0029000000000000000000000000079bd37b95332a9c593929f0ee686e59416b0969",
  "constructorArguments": "000000000000000000000000079bd37b95332a9c593929f0ee686e59416b0969"
}