{
  "address": "0x68fcb1f0d07000a84b569ccb647dd8fe320cddaa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "owContract",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-29\n*/\n\npragma solidity ^0.4.17;\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\ncontract CoinMarketCapApi {\n    function requestPrice(string _ticker) public payable;\n    function _cost() public returns (uint _price);\n}\n\ncontract ERC20 {\n    function transfer(address to, uint tokens) public returns (bool success);\n}\n\ncontract DateTime {\n    using SafeMath for uint;\n    \n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\n    int constant OFFSET19700101 = 2440588;\n    \n    function _timestampToDate(uint256 _timestamp) internal pure returns (uint year, uint month, uint day) {\n        uint _days = _timestamp / SECONDS_PER_DAY;\n        int __days = int(_days);\n        \n        int L = __days + 68569 + OFFSET19700101;\n        int N = 4 * L / 146097;\n        L = L - (146097 * N + 3) / 4;\n        int _year = 4000 * (L + 1) / 1461001;\n        L = L - 1461 * _year / 4 + 31;\n        int _month = 80 * L / 2447;\n        int _day = L - 2447 * _month / 80;\n        L = _month / 11;\n        _month = _month + 2 - 12 * L;\n        _year = 100 * (N - 49) + _year + L;\n        \n        year = uint(_year);\n        month = uint(_month);\n        day = uint(_day);\n    }\n    \n    function isLeapYear(uint year) internal pure returns (bool) {\n        if (year % 4 != 0) {\n            return false;\n        }\n        if (year % 100 != 0) {\n            return true;\n        }\n        if (year % 400 != 0) {\n            return false;\n        }\n        return true;\n    }\n    \n    function getDaysInMonth(uint month, uint year, uint _addMonths) internal pure returns (uint) {\n        if(_addMonths > 0){\n            (month, year) = addMonth(month, year, _addMonths);\n        }\n        \n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            return 31;\n        }\n        else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            return 30;\n        }\n        else if (isLeapYear(year)) {\n            return 29;\n        }\n        else {\n            return 28;\n        }\n    }\n    \n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\n        require(fromTimestamp <= toTimestamp);\n        uint fromYear;\n        uint fromMonth;\n        uint fromDay;\n        uint toYear;\n        uint toMonth;\n        uint toDay;\n        (fromYear, fromMonth, fromDay) = _timestampToDate(fromTimestamp);\n        (toYear, toMonth, toDay) = _timestampToDate(toTimestamp);\n        \n        _months = (((toYear.mul(12)).add(toMonth)).sub(fromYear.mul(12))).sub(fromMonth);\n    }\n    \n    function addMonth(uint _month, uint _year, uint _add) internal pure returns (uint _nwMonth, uint _nwYear) {\n        require(_add < 12);\n        \n        if(_month + _add > 12){\n            _nwYear = _year + 1;\n            _nwMonth = 1;\n        } else {\n            _nwMonth = _month + _add;\n            _nwYear = _year;\n        }\n    }\n}\n\ncontract initLib is DateTime {\n    using SafeMath for uint;\n    \n    string  public symbol = \"OWT\";\n    uint256 public decimals = 18;\n    address public tokenAddress;\n    uint256 public tokenPrice = 150000;\n    \n    uint256 public domainCost = 500; \n    uint256 public publishCost = 200; \n    uint256 public hostRegistryCost = 1000; \n    uint256 public userSurfingCost = 10; \n    uint256 public registryDuration = 365 * 1 days;\n    uint256 public stakeLockTime = 31 * 1 days;\n    \n    uint public websiteSizeLimit = 512;\n    uint public websiteFilesLimit = 20;\n    \n    address public ow_owner;\n    address public cmcAddress;\n    uint public lastPriceUpdate;\n    \n    mapping ( address => uint256 ) public balanceOf;\n    mapping ( address => uint256 ) public stakeBalance;\n    mapping ( uint => mapping ( uint => uint256 )) public poolBalance;\n    mapping ( uint => mapping ( uint => uint256 )) public poolBalanceClaimed;\n    mapping ( uint => mapping ( uint => uint256 )) public totalStakes;\n    \n    uint256 public totalSubscriber;\n    uint256 public totalHosts;\n    uint256 public totalDomains;\n    \n    mapping ( address => UserMeta ) public users;\n    mapping ( bytes32 => DomainMeta ) public domains;\n    mapping ( bytes32 => DomainSaleMeta ) public domain_sale;\n    mapping ( address => HostMeta ) public hosts;\n    mapping ( uint => address ) public hostAddress;\n    mapping ( uint => bytes32 ) public hostConnection;\n    mapping ( bytes32 => bool ) public hostConnectionDB;\n    \n    mapping ( uint => mapping ( uint => mapping ( address => uint256 ) )) public hostStakes;\n    mapping ( uint => mapping ( uint => mapping ( address => uint256 ) )) public stakeTmpBalance;\n    mapping ( address => uint256 ) public stakesLockups;\n    \n    mapping ( uint => uint ) public hostUpdates;\n    uint public hostUpdatesCounter;\n    \n    mapping ( uint => string ) public websiteUpdates;\n    uint public websiteUpdatesCounter;\n    \n    struct DomainMeta {\n        string name;\n        uint admin_index;\n        uint total_admins;\n        mapping(uint => mapping(address => bool)) admins;\n        string git;\n        bytes32 domain_bytes;\n        bytes32 hash;\n        uint total_files;\n        uint version;\n        mapping(uint => mapping(bytes32 => bytes32)) files_hash;\n        uint ttl;\n        uint time;\n        uint expity_time;\n    }\n    \n    struct DomainSaleMeta {\n        address owner;\n        address to;\n        uint amount;\n        uint time;\n        uint expity_time;\n    }\n    \n    struct HostMeta {\n        uint id;\n        address hostAddress;\n        bytes32 connection;\n        bool active;\n        uint start_time;\n        uint time;\n    }\n    \n    struct UserMeta {\n        bool active;\n        uint start_time;\n        uint expiry_time;\n        uint time;\n    }\n    \n    function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n    \n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n    \n    function setOwOwner(address _address) public {\n        require(msg.sender == ow_owner);\n        ow_owner = _address;\n    }\n    \n    function _currentPrice(uint256 _price) public view returns (uint256 _getprice) {\n        _getprice = (_price * 10**uint(24)) / tokenPrice;\n    }\n    \n    function __response(uint _price) public {\n        require(msg.sender == cmcAddress);\n        tokenPrice = _price;\n    }\n    \n    function fetchTokenPrice() public payable {\n        require(\n            lastPriceUpdate + 1 * 1 days <  now\n        );\n        \n        lastPriceUpdate = now;\n        uint _getprice = CoinMarketCapApi(cmcAddress)._cost();\n        CoinMarketCapApi(cmcAddress).requestPrice.value(_getprice)(symbol);\n    }\n    \n    function _priceFetchingCost() public view returns (uint _getprice) {\n        _getprice = CoinMarketCapApi(cmcAddress)._cost();\n    }\n    \n    function debitToken(uint256 _amount) internal {\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);\n        balanceOf[ow_owner] = balanceOf[ow_owner].add(_amount);\n    }\n    \n    function creditUserPool(uint _duration, uint256 _price) internal {\n        uint _monthDays; uint _remainingDays; \n        uint _year; uint _month; uint _day; \n        (_year, _month, _day) = _timestampToDate(now);\n        \n        _day--;\n        uint monthDiff = diffMonths(now, now + ( _duration * 1 days )) + 1;\n        \n        for(uint i = 0; i < monthDiff; i++) {\n            _monthDays = getDaysInMonth(_month, _year, 0); \n            \n            if(_day.add(_duration) > _monthDays){ \n                _remainingDays = _monthDays.sub(_day);\n                balanceOf[address(0x0)] = balanceOf[address(0x0)].add((_remainingDays * _price * 10) / 100);\n                poolBalance[_year][_month] = poolBalance[_year][_month].add((_remainingDays * _price * 90) / 100);\n                \n                (_month, _year) = addMonth(_month, _year, 1);\n                \n                _duration = _duration.sub(_remainingDays);\n                _day = 0;\n                \n            } else {\n                balanceOf[address(0x0)] = balanceOf[address(0x0)].add((_duration * _price * 10) / 100);\n                poolBalance[_year][_month] = poolBalance[_year][_month].add((_duration * _price * 90) / 100);\n            }\n            \n        }\n    }\n}\n\ncontract owContract is initLib {\n    \n    function owContract(address _token, address _cmc) public {\n        tokenAddress = _token;\n        ow_owner = msg.sender;\n        cmcAddress = _cmc;\n    }\n    \n    function _validateDomain(string _domain) internal pure returns (bool){\n        bytes memory b = bytes(_domain);\n        if(b.length > 32) return false;\n        \n        uint counter = 0;\n        for(uint i; i<b.length; i++){\n            bytes1 char = b[i];\n            \n            if(\n                !(char >= 0x30 && char <= 0x39)   //9-0\n                && !(char >= 0x61 && char <= 0x7A)  //a-z\n                && !(char == 0x2D) // - \n                && !(char == 0x2E && counter == 0) // . \n            ){\n                    return false;\n            }\n            \n            if(char == 0x2E) counter++; \n        }\n    \n        return true;\n    }\n    \n    function registerDomain(string _domain, uint _ttl) public returns (bool _status) {\n        bytes32 _domainBytes = stringToBytes32(_domain);\n        DomainMeta storage d = domains[_domainBytes];\n        uint256 _cPrice = _currentPrice(domainCost);\n        \n        require(\n            d.expity_time < now \n            && _ttl >= 1 hours \n            && balanceOf[msg.sender] >= _cPrice \n            && _validateDomain(_domain)\n        );\n        \n        debitToken(_cPrice);\n        uint _adminIndex = d.admin_index + 1;\n        \n        if(d.expity_time == 0){\n            totalDomains++;\n        }\n        \n        d.name = _domain;\n        d.domain_bytes = _domainBytes;\n        d.admin_index = _adminIndex;\n        d.total_admins = 1;\n        d.admins[_adminIndex][msg.sender] = true;\n        d.ttl = _ttl;\n        d.expity_time = now + registryDuration;\n        d.time = now;\n        \n        _status = true;\n    }\n    \n    function updateDomainTTL(string _domain, uint _ttl) public returns (bool _status) {\n        bytes32 _domainBytes = stringToBytes32(_domain);\n        DomainMeta storage d = domains[_domainBytes];\n        require(\n            d.admins[d.admin_index][msg.sender] \n            && _ttl >= 1 hours \n            && d.expity_time > now\n        );\n        \n        d.ttl = _ttl;\n        _status = true;\n    }\n    \n    function renewDomain(string _domain) public returns (bool _status) {\n        bytes32 _domainBytes = stringToBytes32(_domain);\n        DomainMeta storage d = domains[_domainBytes];\n        uint256 _cPrice = _currentPrice(domainCost);\n        \n        require(\n            d.expity_time > now \n            && balanceOf[msg.sender] >= _cPrice\n        );\n        \n        debitToken(_cPrice);\n        d.expity_time = d.expity_time.add(registryDuration);\n        \n        _status = true;\n    }\n    \n    function addDomainAdmin(string _domain, address _admin) public returns (bool _status) {\n        bytes32 _domainBytes = stringToBytes32(_domain);\n        DomainMeta storage d = domains[_domainBytes];\n        require(\n            d.admins[d.admin_index][msg.sender] \n            && !d.admins[d.admin_index][_admin]\n            && d.expity_time > now\n        );\n        \n        d.total_admins = d.total_admins.add(1);\n        d.admins[d.admin_index][_admin] = true;\n        \n        _status = true;\n    }\n    \n    function removeDomainAdmin(string _domain, address _admin) public returns (bool _status) {\n        bytes32 _domainBytes = stringToBytes32(_domain);\n        DomainMeta storage d = domains[_domainBytes];\n        require(\n            d.admins[d.admin_index][msg.sender] \n            && d.admins[d.admin_index][_admin] \n            && d.expity_time > now\n        );\n        \n        d.total_admins = d.total_admins.sub(1);\n        d.admins[d.admin_index][_admin] = false;\n        \n        _status = true;\n    }\n    \n    function sellDomain(\n        string _domain, \n        address _owner, \n        address _to, \n        uint256 _amount, \n        uint _expiry\n    ) public returns (bool _status) {\n        bytes32 _domainBytes = stringToBytes32(_domain);\n        uint _sExpiry = now + ( _expiry * 1 days );\n        \n        DomainMeta storage d = domains[_domainBytes];\n        DomainSaleMeta storage ds = domain_sale[_domainBytes];\n        \n        require(\n            _amount > 0\n            && d.admins[d.admin_index][msg.sender] \n            && d.expity_time > _sExpiry \n            && ds.expity_time < now\n        );\n        \n        ds.owner = _owner;\n        ds.to = _to;\n        ds.amount = _amount;\n        ds.time = now;\n        ds.expity_time = _sExpiry;\n        \n        _status = true;\n    }\n    \n    function cancelSellDomain(string _domain) public returns (bool _status) {\n        bytes32 _domainBytes = stringToBytes32(_domain);\n        DomainMeta storage d = domains[_domainBytes];\n        DomainSaleMeta storage ds = domain_sale[_domainBytes];\n        \n        require(\n            d.admins[d.admin_index][msg.sender] \n            && d.expity_time > now \n            && ds.expity_time > now\n        );\n        \n        ds.owner = address(0x0);\n        ds.to = address(0x0);\n        ds.amount = 0;\n        ds.time = 0;\n        ds.expity_time = 0;\n        \n        _status = true;\n    }\n    \n    function buyDomain(string _domain) public returns (bool _status) {\n        bytes32 _domainBytes = stringToBytes32(_domain);\n        DomainMeta storage d = domains[_domainBytes];\n        DomainSaleMeta storage ds = domain_sale[_domainBytes];\n        \n        if(ds.to != address(0x0)){\n            require( ds.to == msg.sender );\n        }\n        \n        require(\n            balanceOf[msg.sender] >= ds.amount \n            && d.expity_time > now \n            && ds.expity_time > now\n        );\n        \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(ds.amount);\n        balanceOf[ds.owner] = balanceOf[ds.owner].add(ds.amount);\n        \n        uint _adminIndex = d.admin_index + 1;\n        \n        d.total_admins = 1;\n        d.admin_index = _adminIndex;\n        d.admins[_adminIndex][msg.sender] = true;\n        ds.expity_time = 0;\n        \n        _status = true;\n    }\n    \n    function publishWebsite(\n        string _domain, \n        string _git, \n        bytes32 _filesHash,\n        bytes32[] _file_name, \n        bytes32[] _file_hash\n    ) public returns (bool _status) {\n        bytes32 _domainBytes = stringToBytes32(_domain);\n        DomainMeta storage d = domains[_domainBytes];\n        uint256 _cPrice = _currentPrice(publishCost);\n        \n        require(\n            d.admins[d.admin_index][msg.sender] \n            && balanceOf[msg.sender] >= _cPrice \n            && _file_name.length <= websiteFilesLimit \n            && _file_name.length == _file_hash.length\n            && d.expity_time > now\n        );\n        \n        debitToken(_cPrice);\n        d.version++;\n        \n        for(uint i = 0; i < _file_name.length; i++) {\n            d.files_hash[d.version][_file_name[i]] = _file_hash[i];\n        }\n        \n        d.git = _git;\n        d.total_files = _file_name.length;\n        d.hash = _filesHash;\n        \n        websiteUpdates[websiteUpdatesCounter] = _domain;\n        websiteUpdatesCounter++;\n        \n        _status = true;\n    }\n    \n    function getDomainMeta(string _domain) public view \n        returns (\n            string _name,  \n            string _git, \n            bytes32 _domain_bytes, \n            bytes32 _hash, \n            uint _total_admins,\n            uint _adminIndex, \n            uint _total_files, \n            uint _version, \n            uint _ttl, \n            uint _time, \n            uint _expity_time\n        )\n    {\n        bytes32 _domainBytes = stringToBytes32(_domain);\n        DomainMeta storage d = domains[_domainBytes];\n        \n        _name = d.name;\n        _git = d.git;\n        _domain_bytes = d.domain_bytes;\n        _hash = d.hash;\n        _total_admins = d.total_admins;\n        _adminIndex = d.admin_index;\n        _total_files = d.total_files;\n        _version = d.version;\n        _ttl = d.ttl;\n        _time = d.time;\n        _expity_time = d.expity_time;\n    }\n    \n    function getDomainFileHash(string _domain, bytes32 _file_name) public view \n        returns ( \n            bytes32 _hash\n        )\n    {\n        bytes32 _domainBytes = stringToBytes32(_domain);\n        DomainMeta storage d = domains[_domainBytes];\n        \n        _hash = d.files_hash[d.version][_file_name];\n    }\n    \n    function verifyDomainFileHash(string _domain, bytes32 _file_name, bytes32 _file_hash) public view \n        returns ( \n            bool _status\n        )\n    {\n        bytes32 _domainBytes = stringToBytes32(_domain);\n        DomainMeta storage d = domains[_domainBytes];\n        \n        _status = ( d.files_hash[d.version][_file_name] == _file_hash );\n    }\n    \n    function registerHost(string _connection) public returns (bool _status) {\n        bytes32 hostConn = stringToBytes32(_connection);\n        HostMeta storage h = hosts[msg.sender];\n        uint256 _cPrice = _currentPrice(hostRegistryCost);\n        \n        require(\n            !h.active \n            && balanceOf[msg.sender] >= _cPrice \n            && !hostConnectionDB[hostConn]\n        );\n        \n        debitToken(_cPrice);\n        \n        h.id = totalHosts;\n        h.connection = hostConn;\n        h.active = true;\n        h.time = now;\n        \n        hostAddress[totalHosts] = msg.sender;\n        hostConnection[totalHosts] = h.connection;\n        hostConnectionDB[hostConn] = true;\n        totalHosts++;\n        \n        _status = true;\n    }\n    \n    function updateHost(string _connection) public returns (bool _status) {\n        bytes32 hostConn = stringToBytes32(_connection);\n        HostMeta storage h = hosts[msg.sender];\n        \n        require(\n            h.active \n            && h.connection != hostConn \n            && !hostConnectionDB[hostConn]\n        );\n        \n        hostConnectionDB[h.connection] = false;\n        h.connection = hostConn;\n        \n        hostConnectionDB[hostConn] = true;\n        hostUpdates[hostUpdatesCounter] = h.id;\n        hostConnection[h.id] = hostConn;\n        hostUpdatesCounter++;\n        \n        _status = true;\n    }\n    \n    function userSubscribe(uint _duration) public {\n        uint256 _cPrice = _currentPrice(userSurfingCost);\n        uint256 _cost = _duration * _cPrice;\n        \n        require(\n            _duration < 400 \n            && _duration > 0\n            && balanceOf[msg.sender] >= _cost\n        );\n        \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_cost);\n        creditUserPool(_duration, _cPrice);\n        \n        UserMeta storage u = users[msg.sender];\n        if(!u.active){\n            u.active = true;\n            u.time = now;\n            \n            totalSubscriber++;\n        }\n        \n        if(u.expiry_time < now){\n            u.start_time = now;\n            u.expiry_time = now + (_duration * 1 days);\n        } else {\n            u.expiry_time = u.expiry_time.add(_duration * 1 days);\n        }\n    }\n    \n    function stakeTokens(address _hostAddress, uint256 _amount) public {\n        require( balanceOf[msg.sender] >= _amount );\n        \n        uint _year; uint _month; uint _day; \n        (_year, _month, _day) = _timestampToDate(now);\n        \n        HostMeta storage h = hosts[_hostAddress];\n        require( h.active );\n        \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);\n        stakeBalance[msg.sender] = stakeBalance[msg.sender].add(_amount);\n        stakeTmpBalance[_year][_month][msg.sender] = stakeTmpBalance[_year][_month][msg.sender].add(_amount);\n        \n        stakesLockups[msg.sender] = now + stakeLockTime;\n        \n        hostStakes[_year][_month][_hostAddress] = hostStakes[_year][_month][_hostAddress].add(_amount);\n        totalStakes[_year][_month] = totalStakes[_year][_month].add(_amount);\n    }\n    \n    function validateMonth(uint _year, uint _month) internal view {\n        uint __year; uint __month; uint __day; \n        (__year, __month, __day) = _timestampToDate(now);\n        if(__month == 1){ __year--; __month = 12; } else { __month--; }\n        \n        require( (((__year.mul(12)).add(__month)).sub(_year.mul(12))).sub(_month) >= 0 );\n    }\n    \n    function claimHostTokens(uint _year, uint _month) public {\n        validateMonth(_year, _month);\n        \n        HostMeta storage h = hosts[msg.sender];\n        require( h.active );\n        \n        if(totalStakes[_year][_month] > 0){\n            uint256 _tmpHostStake = hostStakes[_year][_month][msg.sender];\n            \n            if(_tmpHostStake > 0){\n                uint256 _totalStakes = totalStakes[_year][_month];\n                uint256 _poolAmount = poolBalance[_year][_month];\n                \n                hostStakes[_year][_month][msg.sender] = 0;\n                uint256 _amount = ((_tmpHostStake.mul(_poolAmount)).mul(50)).div(_totalStakes.mul(100));\n                if(_amount > 0){\n                    balanceOf[msg.sender] = balanceOf[msg.sender].add(_amount);\n                    poolBalanceClaimed[_year][_month] = poolBalanceClaimed[_year][_month].add(_amount);\n                }\n            }\n        }\n    }\n    \n    function claimStakeTokens(uint _year, uint _month) public {\n        validateMonth(_year, _month);\n        require(stakesLockups[msg.sender] < now);\n        \n        if(totalStakes[_year][_month] > 0){\n            uint256 _tmpStake = stakeTmpBalance[_year][_month][msg.sender];\n            \n            if(_tmpStake > 0){\n                uint256 _totalStakesBal = stakeBalance[msg.sender];\n                \n                uint256 _totalStakes = totalStakes[_year][_month];\n                uint256 _poolAmount = poolBalance[_year][_month];\n                \n                uint256 _amount = ((_tmpStake.mul(_poolAmount)).mul(50)).div(_totalStakes.mul(100));\n                \n                stakeTmpBalance[_year][_month][msg.sender] = 0;\n                stakeBalance[msg.sender] = 0;\n                uint256 _totamount = _amount.add(_totalStakesBal);\n                \n                if(_totamount > 0){\n                    balanceOf[msg.sender] = balanceOf[msg.sender].add(_totamount);\n                    poolBalanceClaimed[_year][_month] = poolBalanceClaimed[_year][_month].add(_amount);\n                }\n            }\n        }\n    }\n    \n    function getHostTokens(address _address, uint _year, uint _month) public view returns (uint256 _amount) {\n        validateMonth(_year, _month);\n        \n        HostMeta storage h = hosts[_address];\n        require( h.active );\n        \n        _amount = 0;\n        if(h.active && totalStakes[_year][_month] > 0){\n            uint256 _tmpHostStake = hostStakes[_year][_month][_address];\n            \n            if(_tmpHostStake > 0){\n                uint256 _totalStakes = totalStakes[_year][_month];\n                uint256 _poolAmount = poolBalance[_year][_month];\n                \n                _amount = ((_tmpHostStake.mul(_poolAmount)).mul(50)).div(_totalStakes.mul(100));\n            }\n        }\n    }\n    \n    function getStakeTokens(address _address, uint _year, uint _month) public view returns (uint256 _amount) {\n        validateMonth(_year, _month);\n        require(stakesLockups[_address] < now);\n        \n        _amount = 0;\n        if(stakesLockups[_address] < now && totalStakes[_year][_month] > 0){\n            uint256 _tmpStake = stakeTmpBalance[_year][_month][_address];\n            \n            if(_tmpStake > 0){\n                uint256 _totalStakesBal = stakeBalance[_address];\n                \n                uint256 _totalStakes = totalStakes[_year][_month];\n                uint256 _poolAmount = poolBalance[_year][_month];\n                \n                _amount = ((_tmpStake.mul(_poolAmount)).mul(50)).div(_totalStakes.mul(100));\n                _amount = _amount.add(_totalStakesBal);\n            }\n        }\n    }\n    \n    function burnPoolTokens(uint _year, uint _month) public {\n        validateMonth(_year, _month);\n        \n        if(totalStakes[_year][_month] == 0){\n            uint256 _poolAmount = poolBalance[_year][_month];\n            \n            if(_poolAmount > 0){\n                poolBalance[_year][_month] = 0;\n                balanceOf[address(0x0)] = balanceOf[address(0x0)].add(_poolAmount);\n            }\n        }\n    }\n    \n    function poolDonate(uint _year, uint _month, uint256 _amount) public {\n        require(\n            _amount > 0\n            && balanceOf[msg.sender] >= _amount\n        );\n        \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);\n        \n        balanceOf[address(0x0)] = balanceOf[address(0x0)].add((_amount * 10) / 100);\n        poolBalance[_year][_month] = poolBalance[_year][_month].add((_amount * 90) / 100);\n    }\n    \n    function internalTransfer(address _to, uint256 _value) public returns (bool success) {\n        require(\n            _value > 0\n            && balanceOf[msg.sender] >= _value\n        );\n        \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        \n        return true;\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(\n            _value > 0\n            && balanceOf[msg.sender] >= _value\n        );\n        \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        ERC20(tokenAddress).transfer(_to, _value);\n        \n        return true;\n    }\n    \n    function burn() public {\n        uint256 _amount = balanceOf[address(0x0)];\n        require( _amount > 0 );\n        \n        balanceOf[address(0x0)] = 0;\n        ERC20(tokenAddress).transfer(address(0x0), _amount);\n    }\n    \n    function notifyBalance(address sender, uint tokens) public {\n        require(\n            msg.sender == tokenAddress\n        );\n        \n        balanceOf[sender] = balanceOf[sender].add(tokens);\n    }\n    \n    function () public payable {} \n}",
  "bytecode": "606060405260408051908101604052600381527f4f57540000000000000000000000000000000000000000000000000000000000602082015260009080516200004d929160200190620000f4565b506012600155620249f06003556101f460045560c86005556103e8600655600a6007556301e133806008556228de80600955610200600a556014600b5534156200009657600080fd5b60405160408062003c56833981016040528080519190602001805160028054600160a060020a0319908116600160a060020a0396871617909155600c80548216338716179055600d8054909116919094161790925550620001999050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013757805160ff191683800117855562000167565b8280016001018555821562000167579182015b82811115620001675782518255916020019190600101906200014a565b506200017592915062000179565b5090565b6200019691905b8082111562000175576000815560010162000180565b90565b613aad80620001a96000396000f300606060405236156103065763ffffffff60e060020a600035041663030ee19c811461030857806303f5bcf214610434578063042c2b0c1461045957806304eafa601461046c5780630d3db22c1461048257806315bac2531461049857806315d3749b146104b157806318ab7b4b146105095780631c3b028e146105385780632468a05a14610589578063246a1a45146105a25780632e1128e7146105b5578063313ce567146105c857806335b84d19146105db5780633e7ba166146106375780633f117ed6146106595780633fe67a58146107d7578063416587e5146107f957806344df8e701461080c57806345fe95f81461081f5780634a7de562146108705780634a84e1fa1461088f5780634abda3cf146108e25780634ce755e2146109325780634d5dee5d1461094e5780634e7c57a614610973578063576471b1146109925780635cfded6a146109ab57806369320bad146109be5780636949faeb146109d45780636dc2aca0146109e757806370a08231146109fd5780637946c3d614610a1c57806379a83f5a14610a4157806379c2530414610a635780637f666bb214610a7c5780637ff9b59614610aed57806380bed41814610b00578063853d432c14610b5157806389c0579114610ba45780639094c26614610bc357806393a89bc614610c1657806395d89b4114610c3b5780639629fb7014610cc55780639a5cb7df14610cd85780639d76ea5814610cf1578063a87430ba14610d04578063a9059cbb14610d52578063af13413b14610d74578063b5585e0f14610d8a578063b9ced5fe14610da0578063bd36850414610e00578063c65f122014610e08578063c722f17714610e1b578063c8f713fb14610f82578063cbcb678514610f9b578063ce65b06e14610fae578063d573af6114610fc1578063dcf54f4c14610fd4578063dd78fc9614611030578063e0db7c4014611081578063e0ded77614611094578063e8e48820146110aa578063e9908f12146110cf578063f0ed5ded146110e2578063f5fb9de3146110f5578063f6bbfe4414611146578063fc65f81214611159575b005b341561031357600080fd5b61042060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496863596909550604080820195506020918201358701808301955035935083925082820290910190519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061116f95505050505050565b604051901515815260200160405180910390f35b341561043f57600080fd5b610447611307565b60405190815260200160405180910390f35b341561046457600080fd5b61044761130d565b341561047757600080fd5b610306600435611376565b341561048d57600080fd5b610420600435611396565b34156104a357600080fd5b6103066004356024356113ab565b34156104bc57600080fd5b61042060046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505084359460200135935061157292505050565b341561051457600080fd5b61051c6115b6565b604051600160a060020a03909116815260200160405180910390f35b341561054357600080fd5b61042060046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506115c595505050505050565b341561059457600080fd5b610447600435602435611745565b34156105ad57600080fd5b610447611762565b34156105c057600080fd5b610447611768565b34156105d357600080fd5b61044761176e565b34156105e657600080fd5b61042060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a03169250611774915050565b341561064257600080fd5b610420600160a060020a0360043516602435611868565b341561066457600080fd5b6106aa60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061191e95505050505050565b604051604081018a9052606081018990526080810188905260a0810187905260c0810186905260e081018590526101008101849052610120810183905261014081018290526101608082528190602082019082018e818151815260200191508051906020019080838360005b8381101561072e578082015183820152602001610716565b50505050905090810190601f16801561075b5780820380516001836020036101000a031916815260200191505b5083810382528d818151815260200191508051906020019080838360005b83811015610791578082015183820152602001610779565b50505050905090810190601f1680156107be5780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b34156107e257600080fd5b610306600160a060020a0360043516602435611aec565b341561080457600080fd5b610447611b50565b341561081757600080fd5b610306611b56565b341561082a57600080fd5b61042060046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650611c1595505050505050565b341561087b57600080fd5b610447600160a060020a0360043516611d3f565b341561089a57600080fd5b61042060046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505093359350611d5092505050565b34156108ed57600080fd5b6108f8600435611dd2565b604051600160a060020a0395861681529390941660208401526040808401929092526060830152608082019290925260a001905180910390f35b341561093d57600080fd5b610306600435602435604435611e0d565b341561095957600080fd5b610447600160a060020a0360043516602435604435611f0d565b341561097e57600080fd5b610447600160a060020a036004351661201c565b341561099d57600080fd5b61044760043560243561202e565b34156109b657600080fd5b61044761204b565b34156109c957600080fd5b61051c600435612051565b34156109df57600080fd5b61044761206c565b34156109f257600080fd5b610447600435612072565b3415610a0857600080fd5b610447600160a060020a0360043516612084565b3415610a2757600080fd5b610447600435602435600160a060020a0360443516612096565b3415610a4c57600080fd5b610306600160a060020a03600435166024356120b9565b3415610a6e57600080fd5b6104476004356024356122aa565b3415610a8757600080fd5b61042060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050600160a060020a03853581169560208101359091169450604081013593506060013591506122c79050565b3415610af857600080fd5b6104476123bd565b3415610b0b57600080fd5b61042060046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506123c395505050505050565b3415610b5c57600080fd5b61044760046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650509335935061249292505050565b3415610baf57600080fd5b610306600160a060020a03600435166124d3565b3415610bce57600080fd5b61042060046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650509335935061251d92505050565b3415610c2157600080fd5b610447600435602435600160a060020a036044351661264b565b3415610c4657600080fd5b610c4e61266e565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610c8a578082015183820152602001610c72565b50505050905090810190601f168015610cb75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610cd057600080fd5b61044761270c565b3415610ce357600080fd5b610306600435602435612712565b3415610cfc57600080fd5b61051c6128ef565b3415610d0f57600080fd5b610d23600160a060020a03600435166128fe565b604051808515151515815260200184815260200183815260200182815260200194505050505060405180910390f35b3415610d5d57600080fd5b610420600160a060020a0360043516602435612929565b3415610d7f57600080fd5b610c4e600435612a23565b3415610d9557600080fd5b610447600435612aa0565b3415610dab57600080fd5b610dbf600160a060020a0360043516612ab2565b604051958652600160a060020a0390941660208601526040808601939093529015156060850152608084015260a083019190915260c0909101905180910390f35b610306612af5565b3415610e1357600080fd5b610447612c50565b3415610e2657600080fd5b610e31600435612c56565b604051602081018b9052604081018a90526080810188905260a0810187905260c0810186905260e08101859052610100808201859052610120820184905261014082018390526101608083528d5460026001821615909302600019011691909104908201819052819060608201906101808301908f908015610ef45780601f10610ec957610100808354040283529160200191610ef4565b820191906000526020600020905b815481529060010190602001808311610ed757829003601f168201915b505083810382528b54600260001961010060018416150201909116048082526020909101908c908015610f685780601f10610f3d57610100808354040283529160200191610f68565b820191906000526020600020905b815481529060010190602001808311610f4b57829003601f168201915b50509d505050505050505050505050505060405180910390f35b3415610f8d57600080fd5b610306600435602435612c9f565b3415610fa657600080fd5b610447612d4f565b3415610fb957600080fd5b61051c612d55565b3415610fcc57600080fd5b610447612d64565b3415610fdf57600080fd5b61042060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a03169250612d6a915050565b341561103b57600080fd5b61042060046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650612e5b95505050505050565b341561108c57600080fd5b610447612f23565b341561109f57600080fd5b610306600435612f29565b34156110b557600080fd5b610447600160a060020a0360043516602435604435613059565b34156110da57600080fd5b610447613189565b34156110ed57600080fd5b61044761318f565b341561110057600080fd5b61042060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061319595505050505050565b341561115157600080fd5b61044761322f565b341561116457600080fd5b610447600435613235565b60008060008060006111808a613258565b6000818152601860205260409020600554919550935061119f90613235565b600184015460009081526003850160209081526040808320600160a060020a033316845290915290205490925060ff1680156111f45750600160a060020a0333166000908152600f6020526040902054829010155b80156112035750600b54875111155b8015611210575085518751145b801561121f57504283600c0154115b151561122a57600080fd5b61123382613283565b50600882018054600101905560005b86518110156112a65785818151811061125757fe5b906020019060200201516008840154600090815260098501602052604081209089848151811061128357fe5b906020019060200201518152602081019190915260400160002055600101611242565b600483018980516112bb9291602001906139b4565b50865160078401556006830188905560245460009081526023602052604090208a80516112ec9291602001906139b4565b50506024805460019081019091559998505050505050505050565b600a5481565b600d54600090600160a060020a03166304305f4282604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561135757600080fd5b6102c65a03f1151561136857600080fd5b505050604051805192915050565b600d5433600160a060020a0390811691161461139157600080fd5b600355565b601d6020526000908152604090205460ff1681565b60008060008060006113bd8787613302565b600160a060020a0333166000908152601a60205260409020600381015490955060ff1615156113eb57600080fd5b60008781526013602090815260408083208984529091528120541115611569576000878152601e602090815260408083208984528252808320600160a060020a033316845290915281205494508411156115695760008781526013602090815260408083208984528252808320548a8452601183528184208a85528352818420548b8552601e84528285208b86528452828520600160a060020a03331686529093529083209290925590935091506114da6114ad84606463ffffffff61338a16565b6114ce60326114c2888763ffffffff61338a16565b9063ffffffff61338a16565b9063ffffffff6133af16565b9050600081111561156957600160a060020a0333166000908152600f602052604090205461150e908263ffffffff6133d016565b600160a060020a0333166000908152600f6020908152604080832093909355898252601281528282208983529052205461154e908263ffffffff6133d016565b60008881526012602090815260408083208a84529091529020555b50505050505050565b600080600061158086613258565b60009081526018602090815260408083206008810154845260090182528083209783529690529490942054909214949350505050565b600c54600160a060020a031681565b60008060008060006115d686613258565b6000818152601860209081526040808320601990925290912060018101549296509094509250600160a060020a03161561162757600182015433600160a060020a0390811691161461162757600080fd5b6002820154600160a060020a0333166000908152600f60205260409020541080159061165657504283600c0154115b80156116655750428260040154115b151561167057600080fd5b6002820154600160a060020a0333166000908152600f602052604090205461169d9163ffffffff6133e016565b600160a060020a033381166000908152600f60205260408082209390935560028501548554909216815291909120546116db9163ffffffff6133d016565b8254600160a060020a039081166000908152600f60209081526040808320949094556001878101805460028a0183905582019081905583526003909701815283822033909316825291909152908120805460ff191685179055600490920191909155509392505050565b601260209081526000928352604080842090915290825290205481565b60095481565b60245481565b60015481565b600080600061178285613258565b600081815260186020908152604080832060018101548452600381018352818420600160a060020a033316855290925290912054919350915060ff1680156117f45750600181015460009081526003820160209081526040808320600160a060020a038816845290915290205460ff16155b801561180357504281600c0154115b151561180e57600080fd5b600281015461182490600163ffffffff6133d016565b60028201556001808201546000908152600390920160209081526040808420600160a060020a039097168452959052939020805460ff191684179055509092915050565b600080821180156118925750600160a060020a0333166000908152600f6020526040902054829010155b151561189d57600080fd5b600160a060020a0333166000908152600f60205260409020546118c6908363ffffffff6133e016565b600160a060020a033381166000908152600f602052604080822093909355908516815220546118fb908363ffffffff6133d016565b600160a060020a0384166000908152600f60205260409020555060015b92915050565b611926613a32565b61192e613a32565b60008060008060008060008060008060006119488e613258565b6000818152601860209081526040918290208054939550935083926002610100600183161502600019019091160491601f83018290048202909101905190810160405280929190818152602001828054600181600116156101000203166002900480156119f65780601f106119cb576101008083540402835291602001916119f6565b820191906000526020600020905b8154815290600101906020018083116119d957829003601f168201915b50505050509c50806004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a955780601f10611a6a57610100808354040283529160200191611a95565b820191906000526020600020905b815481529060010190602001808311611a7857829003601f168201915b50505050509b5080600501549a50806006015499508060020154985080600101549750806007015496508060080154955080600a0154945080600b0154935080600c01549250505091939597999b90929496989a50565b60025433600160a060020a03908116911614611b0757600080fd5b600160a060020a0382166000908152600f6020526040902054611b30908263ffffffff6133d016565b600160a060020a039092166000908152600f602052604090209190915550565b60075481565b6000808052600f602052600080516020613a6283398151915254908111611b7c57600080fd5b6000808052600f602052600080516020613a62833981519152819055600254600160a060020a03169063a9059cbb9083816040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611bf757600080fd5b6102c65a03f11515611c0857600080fd5b5050506040518051505050565b600080600080611c2485613258565b600160a060020a0333166000908152601a602052604090206006549194509250611c4d90613235565b600383015490915060ff16158015611c7e5750600160a060020a0333166000908152600f6020526040902054819010155b8015611c9957506000838152601d602052604090205460ff16155b1515611ca457600080fd5b611cad81613283565b5060158054825560028201838155600383018054600160ff1991821681179092554260059095019490945582546000908152601b60209081526040808320805473ffffffffffffffffffffffffffffffffffffffff191633600160a060020a0316179055935485548352601c825284832055958152601d90955293208054909216831790915580548201905592915050565b602080526000908152604090205481565b6000806000611d5e85613258565b600081815260186020908152604080832060018101548452600381018352818420600160a060020a033316855290925290912054919350915060ff168015611da85750610e108410155b8015611db757504281600c0154115b1515611dc257600080fd5b600a019290925550600192915050565b60196020526000908152604090208054600182015460028301546003840154600490940154600160a060020a03938416949390921692909185565b600081118015611e365750600160a060020a0333166000908152600f6020526040902054819010155b1515611e4157600080fd5b600160a060020a0333166000908152600f6020526040902054611e6a908263ffffffff6133e016565b600160a060020a0333166000908152600f6020526040902055611eb46064600a83025b60008052600f602052600080516020613a628339815191525491900463ffffffff6133d016565b600080516020613a62833981519152556000838152601160209081526040808320858452909152902054611eee906064605a8402046133d0565b6000938452601160209081526040808620948652939052919092205550565b6000806000806000611f1f8787613302565b600160a060020a0388166000908152601a60205260409020600381015490945060ff161515611f4d57600080fd5b60038401546000955060ff168015611f7c57506000878152601360209081526040808320898452909152812054115b15612011576000878152601e602090815260408083208984528252808320600160a060020a038c16845290915281205493508311156120115750506000858152601360209081526040808320878452825280832054888452601183528184208885529092529091205461200e611ff983606463ffffffff61338a16565b6114ce60326114c2878663ffffffff61338a16565b94505b505050509392505050565b60106020526000908152604090205481565b601160209081526000928352604080842090915290825290205481565b60225481565b601b60205260009081526040902054600160a060020a031681565b600e5481565b601c6020526000908152604090205481565b600f6020526000908152604090205481565b601f60209081526000938452604080852082529284528284209052825290205481565b600160a060020a0333166000908152600f6020526040812054819081908190859010156120e557600080fd5b6120ee426133f5565b600160a060020a0389166000908152601a6020526040902060038101549397509195509350915060ff16151561212357600080fd5b600160a060020a0333166000908152600f602052604090205461214c908663ffffffff6133e016565b600160a060020a0333166000908152600f6020908152604080832093909355601090522054612181908663ffffffff6133d016565b600160a060020a033316600081815260106020908152604080832094909455878252601f815283822087835281528382209282529190915220546121cb908663ffffffff6133d016565b6000858152601f602090815260408083208784528252808320600160a060020a03338116855290835281842094909455600954828052818420429091019055878352601e82528083208784528252808320938a1683529290522054612236908663ffffffff6133d016565b6000858152601e602090815260408083208784528252808320600160a060020a038b1684528252808320939093558682526013815282822086835290522054612285908663ffffffff6133d016565b6000948552601360209081526040808720958752949052929093209190915550505050565b601360209081526000928352604080842090915290825290205481565b60008060008060006122d88a613258565b60008181526018602090815260408083206019909252822092965042620151808a020195509350909150871180156123395750600182015460009081526003830160209081526040808320600160a060020a033316845290915290205460ff165b801561234857508282600c0154115b80156123575750428160040154105b151561236257600080fd5b805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a039a8b161782556001808301805490921699909a1698909817909755506002860194909455505042600384015550600490910155919050565b60035481565b60008060006123d184613258565b600160a060020a0333166000908152601a602052604090206003810154919350915060ff168015612406575060028101548214155b801561242157506000828152601d602052604090205460ff16155b151561242c57600080fd5b6002810180546000908152601d60209081526040808320805460ff199081169091559386905585835280832080549094166001908117909455935460228054845260218352858420829055908352601c9091529290209290925580548201905592915050565b60008060006124a085613258565b60009081526018602090815260408083206008810154845260090182528083209683529590529390932054949350505050565b600c5433600160a060020a039081169116146124ee57600080fd5b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080600080600061252e87613258565b6000818152601860205260409020600454919550935061254d90613235565b91504283600c01541080156125645750610e108610155b80156125895750600160a060020a0333166000908152600f6020526040902054829010155b801561259957506125998761347a565b15156125a457600080fd5b6125ad82613283565b8260010154600101905082600c0154600014156125ce576016805460010190555b828780516125e09291602001906139b4565b5060058301939093555060018082018390556002820181905560009283526003820160209081526040808520600160a060020a0333168652909152909220805460ff191683179055600a81019390935560085442908101600c850155600b9093019290925550919050565b601e60209081526000938452604080852082529284528284209052825290205481565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127045780601f106126d957610100808354040283529160200191612704565b820191906000526020600020905b8154815290600101906020018083116126e757829003601f168201915b505050505081565b60055481565b6000806000806000806127258888613302565b600160a060020a033316600090815260208052604090205442901061274957600080fd5b60008881526013602090815260408083208a845290915281205411156128e5576000888152601f602090815260408083208a84528252808320600160a060020a033316845290915281205496508611156128e557600160a060020a0333166000908152601060209081526040808320548b8452601383528184208b85528352818420548c8552601184528285208c86529093529220549196509450925061280f6127fa85606463ffffffff61338a16565b6114ce60326114c28a8863ffffffff61338a16565b6000898152601f602090815260408083208b84528252808320600160a060020a0333168452825280832083905560109091528120559150612856828663ffffffff6133d016565b905060008111156128e557600160a060020a0333166000908152600f602052604090205461288a908263ffffffff6133d016565b600160a060020a0333166000908152600f60209081526040808320939093558a8252601281528282208a8352905220546128ca908363ffffffff6133d016565b60008981526012602090815260408083208b84529091529020555b5050505050505050565b600254600160a060020a031681565b601760205260009081526040902080546001820154600283015460039093015460ff90921692909184565b600080821180156129535750600160a060020a0333166000908152600f6020526040902054829010155b151561295e57600080fd5b600160a060020a0333166000908152600f6020526040902054612987908363ffffffff6133e016565b600160a060020a033381166000908152600f6020526040808220939093556002549091169163a9059cbb918691869190516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156129ff57600080fd5b6102c65a03f11515612a1057600080fd5b5050506040518051506001949350505050565b60236020528060005260406000206000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127045780601f106126d957610100808354040283529160200191612704565b60216020526000908152604090205481565b601a602052600090815260409020805460018201546002830154600384015460048501546005909501549394600160a060020a0390931693919260ff9091169186565b600042600e546201518001101515612b0c57600080fd5b42600e55600d54600160a060020a03166304305f426000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515612b5857600080fd5b6102c65a03f11515612b6957600080fd5b5050506040518051600d54909250600160a060020a0316905063d4fe6bd082600060405160e060020a63ffffffff8516028152602060048201908152825460026000196101006001841615020190911604602483018190529091829160449091019084908015612c1a5780601f10612bef57610100808354040283529160200191612c1a565b820191906000526020600020905b815481529060010190602001808311612bfd57829003601f168201915b5050925050506000604051808303818588803b1515612c3857600080fd5b6125ee5a03f11515612c4957600080fd5b5050505050565b60145481565b6018602052600090815260409020600181015460028201546005830154600684015460078501546008860154600a870154600b880154600c89015460048a01969594939291908b565b6000612cab8383613302565b60008381526013602090815260408083208584529091529020541515612d4a5750600082815260116020908152604080832084845290915281205490811115612d4a57600083815260116020908152604080832085845282528220829055908052600f9052600080516020613a6283398151915254612d30908263ffffffff6133d016565b60008052600f602052600080516020613a62833981519152555b505050565b60165481565b600d54600160a060020a031681565b60085481565b6000806000612d7885613258565b600081815260186020908152604080832060018101548452600381018352818420600160a060020a033316855290925290912054919350915060ff168015612de95750600181015460009081526003820160209081526040808320600160a060020a038816845290915290205460ff165b8015612df857504281600c0154115b1515612e0357600080fd5b6002810154612e1990600163ffffffff6133e016565b60028201556001808201546000908152600390920160209081526040808420600160a060020a039097168452959052939020805460ff19169055509092915050565b600080600080612e6a85613258565b60008181526018602090815260408083206019835281842060018201548552600382018452828520600160a060020a0333168652909352922054929550909350915060ff168015612ebe57504282600c0154115b8015612ecd5750428160040154115b1515612ed857600080fd5b805473ffffffffffffffffffffffffffffffffffffffff1990811682556001808301805490921690915560006002830181905560038301819055600490920191909155949350505050565b60045481565b6000806000612f39600754613235565b9250828402915061019084108015612f515750600084115b8015612f765750600160a060020a0333166000908152600f6020526040902054829010155b1515612f8157600080fd5b600160a060020a0333166000908152600f6020526040902054612faa908363ffffffff6133e016565b600160a060020a0333166000908152600f6020526040902055612fcd848461368c565b50600160a060020a0333166000908152601760205260409020805460ff16151561300e57805460ff1916600190811782554260038301556014805490910190555b4281600201541015613033574260018201819055620151808502016002820155613053565b600281015461304d9062015180860263ffffffff6133d016565b60028201555b50505050565b600080600080600061306b8787613302565b600160a060020a038816600090815260208052604090205442901061308f57600080fd5b600160a060020a038816600090815260208052604081205490955042901080156130d057506000878152601360209081526040808320898452909152812054115b15612011576000878152601f602090815260408083208984528252808320600160a060020a038c168452909152812054945084111561201157505050600160a060020a038516600090815260106020908152604080832054878452601383528184208785528352818420548885526011845282852088865290935292205461317761316283606463ffffffff61338a16565b6114ce60326114c2888663ffffffff61338a16565b945061200e858463ffffffff6133d016565b60065481565b600b5481565b6000806000806131a485613258565b600081815260186020526040902060045491945092506131c390613235565b90504282600c01541180156131f15750600160a060020a0333166000908152600f6020526040902054819010155b15156131fc57600080fd5b61320581613283565b600854600c83015461321c9163ffffffff6133d016565b600c909201919091555060019392505050565b60155481565b60035460009069d3c21bcecceda1000000830281151561325157fe5b0492915050565b6000613262613a32565b508180511515613275576000915061327d565b602083015191505b50919050565b600160a060020a0333166000908152600f60205260409020546132ac908263ffffffff6133e016565b600160a060020a033381166000908152600f602052604080822093909355600c54909116815220546132e4908263ffffffff6133d016565b600c54600160a060020a03166000908152600f602052604090205550565b6000806000613310426133f5565b9194509250905060018214156133305760001990920191600c9150613338565b600019909101905b600061337f8561337361335289600c63ffffffff61338a16565b613373876133678a600c63ffffffff61338a16565b9063ffffffff6133d016565b9063ffffffff6133e016565b1015612c4957600080fd5b8181028215806133a457508183828115156133a157fe5b04145b151561191857600080fd5b60008082116133bd57600080fd5b81838115156133c857fe5b049392505050565b8181018281101561191857600080fd5b6000828211156133ef57600080fd5b50900390565b600b61098f6226498460046105b562164b096226496662023ab16201518090980462264965810185028990059889026003018590059003908101610fa0029190910591820292909205909103828101605090810285900595860560301997909701606402929092018601966002600c9097028603969096019594909302059091030190565b6000613484613a32565b50816000808060208451111561349d5760009450613683565b600092505b835182101561367e578382815181106134b757fe5b01602001517f0100000000000000000000000000000000000000000000000000000000000000908190040290507f3000000000000000000000000000000000000000000000000000000000000000600160f860020a031982161080159061354857507f3900000000000000000000000000000000000000000000000000000000000000600160f860020a0319821611155b1580156135b657507f6100000000000000000000000000000000000000000000000000000000000000600160f860020a03198216108015906135b457507f7a00000000000000000000000000000000000000000000000000000000000000600160f860020a0319821611155b155b80156135ec57507f2d00000000000000000000000000000000000000000000000000000000000000600160f860020a0319821614155b801561362c57507f2e00000000000000000000000000000000000000000000000000000000000000600160f860020a0319821614801561362a575082155b155b1561363a5760009450613683565b7f2e00000000000000000000000000000000000000000000000000000000000000600160f860020a031982161415613673576001909201915b6001909101906134a2565b600194505b50505050919050565b60008060008060008060006136a0426133f5565b91965094506000190192506136bc42620151808b02810161380e565b6001019150600090505b81811015613803576136da8486600061387d565b9650866136ed848b63ffffffff6133d016565b11156137a757613703878463ffffffff6133e016565b95506137156064600a8a890202611e8d565b60008052600f602052600080516020613a62833981519152556137626064605a888b02025b60008881526011602090815260408083208a845290915290205491900463ffffffff6133d016565b60008681526011602090815260408083208884529091529020556137888486600161393e565b9550935061379c898763ffffffff6133e016565b9850600092506137fb565b6137b76064600a8b8b0202611e8d565b60008052600f602052600080516020613a62833981519152556137e06064605a8b8b020261373a565b60008681526011602090815260408083208884529091529020555b6001016136c6565b505050505050505050565b60008080808080808789111561382357600080fd5b61382c896133f5565b9197509550935061383c886133f5565b919450925090506138708561337361385b89600c63ffffffff61338a16565b6133738661336789600c63ffffffff61338a16565b9998505050505050505050565b6000808211156138985761389284848461393e565b90945092505b83600114806138a75750836003145b806138b25750836005145b806138bd5750836007145b806138c85750836008145b806138d3575083600a145b806138de575083600c145b156138eb5750601f613937565b83600414806138fa5750836006145b806139055750836009145b80613910575083600b145b1561391d5750601e613937565b61392683613975565b156139335750601d613937565b50601c5b9392505050565b600080600c831061394e57600080fd5b600c838601111561396657506001905080830161396d565b5050828101825b935093915050565b60006004820615613988575060006139af565b6064820615613999575060016139af565b6101908206156139ab575060006139af565b5060015b919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106139f557805160ff1916838001178555613a22565b82800160010185558215613a22579182015b82811115613a22578251825591602001919060010190613a07565b50613a2e929150613a44565b5090565b60206040519081016040526000815290565b613a5e91905b80821115613a2e5760008155600101613a4a565b905600f4803e074bd026baaf6ed2e288c9515f68c72fb7216eebdd7cae1718a53ec375a165627a7a72305820f9de7dd599e49e3d5d529a91adb0c209de1e1fb57f10412214dd1b5aa77980150029000000000000000000000000c2494604e9dcefa2a70dcebf81e6d7be064a334e000000000000000000000000390e7c6b479fa7543e8dfd1a5d65d3d9ada76c6e",
  "constructorArguments": "000000000000000000000000c2494604e9dcefa2a70dcebf81e6d7be064a334e000000000000000000000000390e7c6b479fa7543e8dfd1a5d65d3d9ada76c6e"
}