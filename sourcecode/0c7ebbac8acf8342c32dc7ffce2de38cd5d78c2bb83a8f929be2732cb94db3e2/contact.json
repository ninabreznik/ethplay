{
  "address": "0x961fa070ef41c2b68d1a50905ea9198ef7dbfbf8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Lending",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-19\n*/\n\npragma solidity ^0.4.25;\n\n\ncontract Prosperity {\n\t\n\t/**\n     * Transfer tokens from the caller to a new holder.\n     * Remember, there's 0% fee here.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens) public returns(bool);\n\t\n\t/**\n     * Retrieve the tokens owned by the caller.\n     */\n\tfunction myTokens() public view returns(uint256);\n\t\n\t/**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate. \n     */ \n    function myDividends(bool _includeReferralBonus) public view returns(uint256);\n\t\n\t/**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral\n     */\n    function buy(address _referredBy) public payable returns(uint256);\n\t\n\t/**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw() public;\n\t\n\t/**\n     * Converts all of caller's dividends to tokens.\n     */\n\tfunction reinvest() public;\n\t\n\t/**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n\tfunction() payable external;\n}\n\n\n/**\n * Accepts THC tokens: Lending\n */\ncontract Lending {\n\tusing SafeMath for *;\n\t\n\t/*==============================\n    =            EVENTS            =\n    ==============================*/\n    // ERC20\n    event Transfer (\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\t\n\tevent onDeposit (\n\t\taddress indexed customer,\n\t\tuint256 tokens\n\t);\n\t\n\tevent onReinvestProfit (\n\t\taddress indexed customer,\n\t\tuint256 tokens\n\t);\n\t\n\tevent onWithdrawProfit (\n\t\taddress indexed customer,\n\t\tuint256 tokens\n\t);\n\t\n\tevent onWithdrawCapital (\n\t\taddress indexed customer,\n\t\tuint256 tokens\n\t);\n\t\n\t\n\t/*=================================\n    =            MODIFIERS            =\n    =================================*/\t\n\tmodifier onlyTokenContract {\n        require(msg.sender == address(tokenContract_));\n        _;\n    }\n\t\n\t// only people with deposit\n    modifier onlyBagholders() {\n        require(myDeposit() > 0);\n        _;\n    }\n    \n    // only people with profits\n    modifier onlyStronghands() {\n        require(myProfit(msg.sender) > 0);\n        _;\n    }\n\t\n\t// administrators can:\n    // -> set token contract\n    // they CANNOT:\n    // -> take funds\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrator_ == _customerAddress);\n        _;\n    }\n\t\n\t\n\t/*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => Dealer) internal dealers_; \t// address => Dealer\n    uint256 internal totalDeposit_ = 0;\n\t\n\t// token exchange contract\n\tProsperity public tokenContract_;\n\t\n\t// administrator (see above on what they can do)\n    address internal administrator_;\n\t\n\t// Player data\n\tstruct Dealer {\n\t\tuint256 deposit;\t\t// active deposit\n\t\tuint256 profit;\t\t\t// old outstanding profits\n\t\tuint256 time;\t\t\t// last time profits have been moved\n\t}\n    \n\t\n\t/*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    constructor() public {\n\t\tadministrator_ = 0x28436C7453EbA01c6EcbC8a9cAa975f0ADE6Fff1;\n    }\n\t\n\tfunction() payable external {\n\t\t// prevent invalid or unintentional calls\n\t\t//require(msg.data.length == 0);\n\t}\n\t\n\t/**\n    * @dev Standard ERC677 function that will handle incoming token transfers.\n    *\n    * @param _from  Token sender address.\n    * @param _value Amount of tokens.\n    * @param _data  Transaction metadata.\n    */\n    function tokenFallback(address _from, uint256 _value, bytes _data)\n\t\tonlyTokenContract()\n\t\texternal\n\t\treturns (bool)\n\t{\n        // data setup\n\t\tDealer storage _dealer = dealers_[_from];\n\t\t\n\t\t// profit and deposit tracking\n\t\t_dealer.profit = myProfit(_from);\t/* saves the new generated profit; old profit will be taken into account within the calculation\n\t\t\t\t\t\t\t\t\t\t\t   last time deposit timer is 0 for the first deposit */\n\t\t_dealer.time = now;\t\t\t\t\t// so we set the timer AFTER calculating profits\n        \n\t\t// allocate tokens\n\t\t_dealer.deposit = _dealer.deposit.add(_value);\n\t\ttotalDeposit_ = totalDeposit_.add(_value);\n\t\t\n\t\t// trigger event\n\t\temit onDeposit(_from, _value);\n\t\t\n\t\treturn true;\n\t\t\n\t\t// silence compiler warning\n\t\t_data;\n\t}\n\t\n\t/**\n\t * Reinvest generated profit\n\t */\n\tfunction reinvestProfit()\n\t\tonlyStronghands()\n\t\tpublic \n\t{\n\t\taddress _customerAddress = msg.sender;\n\t\tDealer storage _dealer = dealers_[_customerAddress];\n\t\t\n\t\tuint256 _profits = myProfit(_customerAddress);\n\t\t\n\t\t// update Dealer\n\t\t_dealer.deposit = _dealer.deposit.add(_profits);\t// add new tokens to active deposit\n\t\t_dealer.profit = 0;\t\t\t\t\t\t\t\t\t// old tokens have been reinvested\n\t\t_dealer.time = now;\t\t\t\t\t\t\t\t\t// generate tokens from now\n\t\t\n\t\t// update total deposit value\n\t\ttotalDeposit_ = totalDeposit_.add(_profits);\n\t\t\n\t\t// trigger event\n\t\temit onReinvestProfit(_customerAddress, _profits);\n\t}\n\t\n\t/**\n\t * Withdraw profit to token exchange\n\t */\n\tfunction withdrawProfit()\n\t\tonlyStronghands()\n\t\tpublic\n\t{\n\t\taddress _customerAddress = msg.sender;\n\t\tDealer storage _dealer = dealers_[_customerAddress];\n\t\t\n\t\tuint256 _profits = myProfit(_customerAddress);\n\t\t\n\t\t// update profits\n\t\t_dealer.profit = 0;\t\t// old tokens have been reinvested\n\t\t_dealer.time = now;\t\t// generate tokens from now\n\t\t\n\t\t// transfer tokens from exchange to sender\n\t\ttokenContract_.transfer(_customerAddress, _profits);\n\t\t\n\t\t// trigger event\n\t\temit onWithdrawProfit(_customerAddress, _profits);\n\t}\n\t\n\t/**\n\t * Withdraw deposit to token exchange. 25% fee will be incured\n\t */\n\tfunction withdrawCapital()\n\t\tonlyBagholders()\n\t\tpublic\n\t{\n\t\taddress _customerAddress = msg.sender;\n\t\tDealer storage _dealer = dealers_[_customerAddress];\n\t\t\n\t\tuint256 _deposit = _dealer.deposit;\n\t\tuint256 _taxedDeposit = _deposit.mul(75).div(100);\n\t\tuint256 _profits = myProfit(_customerAddress);\n\t\t\n\t\t// update deposit\n\t\t_dealer.deposit = 0;\n\t\t_dealer.profit = _profits;\n\t\t\n\t\t// reduce tokens in lending deposit ledger\n\t\t// use the untaxed value, bcs Dealers deposit will drop to 0,\n\t\t// but token transfer (below) will be taxed\n\t\ttotalDeposit_ = totalDeposit_.sub(_deposit);\n\t\t\n\t\t// transfer tokens from exchange to sender\n\t\ttokenContract_.transfer(_customerAddress, _taxedDeposit);\n\t\t\n\t\t// trigger event\n\t\temit onWithdrawCapital(_customerAddress, _taxedDeposit);\n\t}\n\t\n\t/**\n\t * Lending will reinvest its ETH\n\t */\n\tfunction reinvestEther()\n\t\tpublic\n\t{\n\t\tuint256 _balance = address(this).balance;\n\t\tif (_balance > 0) {\n\t\t\t// triggers exchanges payable fallback buy function\n\t\t\tif(!address(tokenContract_).call.value(_balance)()) {\n\t\t\t\t// Some failure code\n\t\t\t\trevert();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Lending will reinvest its dividends\n\t */\n\tfunction reinvestDividends()\n\t\tpublic\n\t{\n\t\tuint256 _dividends = myDividends(true);\n\t\tif (_dividends > 0) {\n\t\t\ttokenContract_.reinvest();\n\t\t}\n\t}\n\t\n\t\n\t/*----------  HELPERS AND CALCULATORS  ----------*/\t\n    /**\n     * Retrieve the total token supply.\n     */\n    function totalDeposit()\n        public\n        view\n        returns(uint256)\n    {\n        return totalDeposit_;\n    }\n\t\n\t/**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenContract_.myTokens();\n    }\n\t\n\tfunction surplus()\n\t\tpublic\n\t\tview\n\t\treturns(int256)\n\t{\n\t\tuint256 _tokens = totalSupply();\n\t\t\n\t\t// we cannot divide by 0\n\t\tif (totalDeposit_ > 0) {\n\t\t\t// returns a value that indicates the surplus of the lending contract\n\t\t\t// based on 1000 => 1000 = 100%; 303 = 30.3%; -200 = -20%\n\t\t\treturn int256((1000).mul(_tokens).div(totalDeposit_) - 1000);\n\t\t} else {\n\t\t\treturn 1000;\t// 100%\n\t\t}\n\t}\n\t\n\t/**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myDeposit()\n        public\n        view\n        returns(uint256)\n    {\n\t\taddress _customerAddress = msg.sender;\n        Dealer storage _dealer = dealers_[_customerAddress];\n        return _dealer.deposit;\n    }\n\t\n\t/**\n     * Retrieve the profit of the caller. Profits are virtual\n     */\n\tfunction myProfit(address _customerAddress)\n\t\tpublic\n\t\tview\n\t\treturns(uint256)\n\t{\n\t\tDealer storage _dealer = dealers_[_customerAddress];\n\t\tuint256 _oldProfits = _dealer.profit;\n\t\tuint256 _newProfits = 0;\n\t\t\n\t\tif (\n\t\t\t// if time is 0, the dealer has not deposited tokens yet\n\t\t\t_dealer.time == 0 ||\n\t\t\t\n\t\t\t// dealer has currently no tokens deposited\n\t\t\t_dealer.deposit == 0\n\t\t)\n\t\t{\n\t\t\t_newProfits = 0;\n\t\t} else {\n\t\t\t// get the last deposit time stamp\n\t\t\tuint256 _timeLending = now - _dealer.time;\n\t\t\t\n\t\t\t_newProfits = _timeLending\t// time difference since profits are being generated\n\t\t\t\t.mul(_dealer.deposit)\t// current deposit\n\t\t\t\t.mul(1337)\t\t\t\t// 1.337% (daily)\n\t\t\t\t.div(100000)\t\t\t// to base 100%\n\t\t\t\t.div(86400);\t\t\t// 1 day in seconds\n\t\t}\n\t\t\n\t\t// Dealer may have tokens in profit wallet left, so always add the old value\n\t\treturn _newProfits.add(_oldProfits);\n\t}\n\t\n\tfunction myDividends(bool _includeReferralBonus)\n\t\tpublic\n\t\tview\n\t\treturns(uint256)\n\t{\n\t\treturn tokenContract_.myDividends(_includeReferralBonus);\n\t}\n\t\n\t/**\n\t * Set the token contract\n\t */\n\tfunction setTokenContract(address _tokenContract)\n\t\tonlyAdministrator()\n\t\tpublic\n\t{\n\t\ttokenContract_ = Prosperity(_tokenContract);\n\t}\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"myProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"surplus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawCapital\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onReinvestProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onWithdrawProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onWithdrawCapital\",\"type\":\"event\"}]",
  "bytecode": "6080604052600060015534801561001557600080fd5b5060038054600160a060020a0319167328436c7453eba01c6ecbc8a9caa975f0ade6fff1179055610a5e8061004b6000396000f3006080604052600436106100cf5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630bf0e4e481146100d1578063138885651461010457806317727a001461011957806318160ddd1461012e5780632a09639714610143578063688abbf7146101585780638a68cf9c14610172578063957b2e56146101a3578063959499b6146101b8578063bbcd5bbe146101cd578063c0ee0b8a146101ee578063e3b6113514610233578063f251898314610248578063f6153ccd1461025d575b005b3480156100dd57600080fd5b506100f2600160a060020a0360043516610272565b60408051918252519081900360200190f35b34801561011057600080fd5b506100f261031a565b34801561012557600080fd5b506100cf61035f565b34801561013a57600080fd5b506100f26104b7565b34801561014f57600080fd5b506100f2610547565b34801561016457600080fd5b506100f2600435151561055a565b34801561017e57600080fd5b506101876105f3565b60408051600160a060020a039092168252519081900360200190f35b3480156101af57600080fd5b506100cf610602565b3480156101c457600080fd5b506100cf6106a1565b3480156101d957600080fd5b506100cf600160a060020a03600435166107ca565b3480156101fa57600080fd5b5061021f60048035600160a060020a0316906024803591604435918201910135610813565b604080519115158252519081900360200190f35b34801561023f57600080fd5b506100cf6108d1565b34801561025457600080fd5b506100cf610987565b34801561026957600080fd5b506100f26109be565b600160a060020a0381166000908152602081905260408120600181015460028201548390819015806102a357508354155b156102b15760009150610300565b8360020154420390506102fd620151806102f1620186a06102f16105396102e58a60000154886109c490919063ffffffff16565b9063ffffffff6109c416565b9063ffffffff6109fa16565b91505b610310828463ffffffff610a1116565b9695505050505050565b6000806103256104b7565b905060006001541115610355576001546103e89061034d906102f1838563ffffffff6109c416565b03915061035b565b6103e891505b5090565b600080600080600080610370610547565b1161037a57600080fd5b3360008181526020819052604090208054919650945092506103a860646102f185604b63ffffffff6109c416565b91506103b385610272565b600085556001808601829055549091506103d3908463ffffffff610a2016565b600155600254604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038881166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561044557600080fd5b505af1158015610459573d6000803e3d6000fd5b505050506040513d602081101561046f57600080fd5b5050604080518381529051600160a060020a038716917fa6e66a9520eda738902b9b8fd1649eb52ec404a7c65c1a8ece315280eb83a533919081900360200190a25050505050565b600254604080517f949e8acd0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163949e8acd91600480830192602092919082900301818787803b15801561051657600080fd5b505af115801561052a573d6000803e3d6000fd5b505050506040513d602081101561054057600080fd5b5051905090565b3360009081526020819052604090205490565b600254604080517f688abbf700000000000000000000000000000000000000000000000000000000815283151560048201529051600092600160a060020a03169163688abbf791602480830192602092919082900301818787803b1580156105c157600080fd5b505af11580156105d5573d6000803e3d6000fd5b505050506040513d60208110156105eb57600080fd5b505192915050565b600254600160a060020a031681565b600061060e600161055a565b9050600081111561069e57600260009054906101000a9004600160a060020a0316600160a060020a031663fdb5a03e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561068557600080fd5b505af1158015610699573d6000803e3d6000fd5b505050505b50565b6000806000806106b033610272565b116106ba57600080fd5b33600081815260208190526040902090935091506106d783610272565b6000600184018190554260028086019190915554604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03888116600483015260248201869052915194955091169263a9059cbb92604480840193602093929083900390910190829087803b15801561075a57600080fd5b505af115801561076e573d6000803e3d6000fd5b505050506040513d602081101561078457600080fd5b5050604080518281529051600160a060020a038516917fce669b3f9a0e90f9c11f32d8383a889ccb4e94faab076af5f194a720fd6345f1919081900360200190a2505050565b6003543390600160a060020a031681146107e357600080fd5b506002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6002546000908190600160a060020a0316331461082f57600080fd5b50600160a060020a038516600090815260208190526040902061085186610272565b6001820155426002820155805461086e908663ffffffff610a1116565b8155600154610883908663ffffffff610a1116565b600155604080518681529051600160a060020a038816917f2bf9518c65eff7d1f3ee4106bf0dc41267ccde0924dbfa4ab476ed5c0f45da98919081900360200190a250600195945050505050565b6000806000806108e033610272565b116108ea57600080fd5b336000818152602081905260409020909350915061090783610272565b825490915061091c908263ffffffff610a1116565b8255600060018084019190915542600284015554610940908263ffffffff610a1116565b600155604080518281529051600160a060020a038516917f28c3c331aef7f7a3a7f34e77b9a568e3d50b65d4c69cba1ebb650450be6ce036919081900360200190a2505050565b3031600081111561069e57600254604051600160a060020a03909116908290600081818185875af192505050151561069e57600080fd5b60015490565b6000808315156109d757600091506109f3565b508282028284828115156109e757fe5b04146109ef57fe5b8091505b5092915050565b6000808284811515610a0857fe5b04949350505050565b6000828201838110156109ef57fe5b600082821115610a2c57fe5b509003905600a165627a7a72305820676382fd9942aa69f933c04f9e39b73c630bb7513ffcca2781acc0a33b8241f30029"
}