{
  "address": "0xb7f8c6384f2adff5576fa9563015a09c3e7058c4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DinoFarm",
  "compilerVersion": "v0.4.24-nightly.2018.5.14+commit.7a669b39",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-24\n*/\n\npragma solidity ^0.4.20;\n\ncontract DinoFarm{\n    uint256 public EGGS_TO_HATCH_1DINO=86400; //Hatching in 1 day\n    uint256 public STARTING_DINO=100;\n    uint256 PSN=10000;\n    uint256 PSNH=5000;\n    bool public initialized=false;\n    address public ceoAddress;\n    mapping (address => uint256) public hatcheryDino;\n    mapping (address => uint256) public claimedEggs;\n    mapping (address => uint256) public lastHatch;\n    mapping (address => address) public referrals;\n    uint256 public marketEggs;\n   \n    event onHatchEggs(\n        address indexed customerAddress,\n        uint256 Dinos,\n        address indexed referredBy                \n    );\n    \n    event onSellEggs(\n        address indexed customerAddress,\n        uint256 eggs,\n        uint256 ethereumEarned   \n    );\n\n    event onBuyEggs(\n        address indexed customerAddress,\n        uint256 eggs,\n        uint256 incomingEthereum\n    );\n\n    function DinoFarm() public{\n        ceoAddress = 0x49742B4c4d4F358e96173272d952aC3A4352001E;\n    }\n    \n    function hatchEggs(address ref) public{\n        require(initialized);\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n            referrals[msg.sender]=ref;\n        }\n        uint256 eggsUsed=getMyEggs();\n        uint256 newDino=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1DINO);\n        hatcheryDino[msg.sender]=SafeMath.add(hatcheryDino[msg.sender],newDino);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        //send referral eggs\n        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n        //boost market to nerf dino hoarding\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n        onHatchEggs(msg.sender, newDino, ref);\n    }\n    \n    function sellEggs() public{\n        require(initialized);\n        uint256 hasEggs=getMyEggs();\n        uint256 eggValue=calculateEggSell(hasEggs);\n        uint256 fee=devFee(eggValue);\n        uint256 ethereumEarned = SafeMath.sub(eggValue,fee);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\n        ceoAddress.transfer(fee);\n        msg.sender.transfer(ethereumEarned);\n        onSellEggs(msg.sender, hasEggs, ethereumEarned);\n    }\n    \n    function buyEggs() public payable{\n        require(initialized);\n        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n        uint256 fee = devFee(msg.value);\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n        ceoAddress.transfer(fee);\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\n        onBuyEggs(msg.sender, eggsBought, msg.value);\n    }\n    \n    //magic trade balancing algorithm\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n    }\n    \n    function calculateEggSell(uint256 eggs) public view returns(uint256){\n        return calculateTrade(eggs,marketEggs,this.balance);\n    }\n    \n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n        return calculateTrade(eth,contractBalance,marketEggs);\n    }\n    \n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n        return calculateEggBuy(eth,this.balance);\n    }\n    \n    function devFee(uint256 amount) public pure returns(uint256){\n        return SafeMath.div(SafeMath.mul(amount,4),100);\n    }\n\n    function seedMarket(uint256 eggs) public payable{\n        require(marketEggs==0);\n        initialized=true;\n        marketEggs=eggs;\n    }\n\n    function setFreeDino(uint16 _newFreeDino) public{\n        require(msg.sender==ceoAddress);\n\t\t    require(_newFreeDino >= 10);\n        STARTING_DINO=_newFreeDino;\n    }    \n\n    function getFreeDino() public{\n        require(initialized);\n        require(hatcheryDino[msg.sender]==0);\n        lastHatch[msg.sender]=now;\n        hatcheryDino[msg.sender]=STARTING_DINO;\n    }    \n    \n    function getBalance() public view returns(uint256){\n        return this.balance;\n    }\n    \n    function getMyDino() public view returns(uint256){\n        return hatcheryDino[msg.sender];\n    }\n    \n    function getMyEggs() public view returns(uint256){\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\n    }\n    \n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1DINO,SafeMath.sub(now,lastHatch[adr]));\n        return SafeMath.mul(secondsPassed,hatcheryDino[adr]);\n    }\n    \n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }    \n}\n\nlibrary SafeMath {\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  \n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n  \n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  \n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "60806040526201518060005560646001556127106002556113886003556004805460ff1916905534801561003257600080fd5b506004805461010060a860020a0319167449742b4c4d4f358e96173272d952ac3a4352001e00179055610a898061006a6000396000f30060806040526004361061013c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416623b0a3f81146101415780630a0f81681461015857806312065fe014610189578063158ef93e146101b057806318043ad0146101d9578063229824c4146101fa57806326fd8422146102185780632e9392bb146102335780633955f0fe146102485780633b6537551461025d5780633bc0461a146102685780633ec862a81461028057806343ce7422146102a1578063467ece79146102b65780634c418879146102d75780634f74acfe146102ec57806361e1fe91146102f457806372670361146103105780637e56fde514610331578063820c815e146103495780638e3163271461035e5780639c9d07c1146103765780639ca423b31461038b578063d7c8843b146103ac575b600080fd5b34801561014d57600080fd5b506101566103cd565b005b34801561016457600080fd5b5061016d61041b565b60408051600160a060020a039092168252519081900360200190f35b34801561019557600080fd5b5061019e61042f565b60408051918252519081900360200190f35b3480156101bc57600080fd5b506101c5610434565b604080519115158252519081900360200190f35b3480156101e557600080fd5b5061019e600160a060020a036004351661043d565b34801561020657600080fd5b5061019e60043560243560443561044f565b34801561022457600080fd5b5061019e60043560243561049c565b34801561023f57600080fd5b5061019e6104b2565b34801561025457600080fd5b506101566104b8565b6101566004356105db565b34801561027457600080fd5b5061019e6004356105fa565b34801561028c57600080fd5b50610156600160a060020a0360043516610617565b3480156102ad57600080fd5b5061019e6107ab565b3480156102c257600080fd5b5061019e600160a060020a03600435166107d0565b3480156102e357600080fd5b5061019e6107e2565b6101566107f5565b34801561030057600080fd5b5061015661ffff600435166108f0565b34801561031c57600080fd5b5061019e600160a060020a0360043516610927565b34801561033d57600080fd5b5061019e600435610939565b34801561035557600080fd5b5061019e610946565b34801561036a57600080fd5b5061019e60043561094c565b34801561038257600080fd5b5061019e610965565b34801561039757600080fd5b5061016d600160a060020a036004351661096b565b3480156103b857600080fd5b5061019e600160a060020a0360043516610986565b60045460ff1615156103de57600080fd5b33600090815260056020526040902054156103f857600080fd5b336000908152600760209081526040808320429055600154600590925290912055565b6004546101009004600160a060020a031681565b303190565b60045460ff1681565b60056020526000908152604090205481565b6000610494610460600254846109d9565b61048f6003546104846104896104786002548a6109d9565b6104846003548c6109d9565b610a0f565b89610a1e565b610a1e565b949350505050565b60006104ab838360095461044f565b9392505050565b60095481565b60045460009081908190819060ff1615156104d257600080fd5b6104da6107ab565b93506104e58461094c565b92506104f0836105fa565b91506104fc8383610a35565b3360009081526006602090815260408083208390556007909152902042905560095490915061052b9085610a0f565b600955600454604051610100909104600160a060020a0316906108fc8415029084906000818181858888f1935050505015801561056c573d6000803e3d6000fd5b50604051339082156108fc029083906000818181858888f1935050505015801561059a573d6000803e3d6000fd5b506040805185815260208101839052815133927f5105d1d486c1fbe3b88388650f235c06cac5e57dc734a1a11e48383734f563d3928290030190a250505050565b600954156105e857600080fd5b6004805460ff19166001179055600955565b600061061161060a8360046109d9565b6064610a1e565b92915050565b600454600090819060ff16151561062d57600080fd5b33600090815260086020526040902054600160a060020a031615801561066a575033600081815260086020526040902054600160a060020a031614155b156106a557336000908152600860205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790555b6106ad6107ab565b91506106bb82600054610a1e565b336000908152600560205260409020549091506106d89082610a0f565b336000908152600560208181526040808420949094556006808252848420849055600782528484204290556008825284842054600160a060020a0316845290529190205461072b91610484908590610a1e565b33600090815260086020908152604080832054600160a060020a0316835260069091529020556009546107639061048484600a610a1e565b600955604080518281529051600160a060020a0385169133917f496192b07562340afee67764647e94b51eee7a54ea2fdcea8073da0c0fd315d99181900360200190a3505050565b3360008181526006602052604081205490916107cb919061048490610986565b905090565b60076020526000908152604090205481565b3360009081526005602052604090205490565b600454600090819060ff16151561080b57600080fd5b61081f3461081a303182610a35565b61049c565b915061082a346105fa565b905061083e82610839846105fa565b610a35565b6004546040519193506101009004600160a060020a0316906108fc8315029083906000818181858888f1935050505015801561087e573d6000803e3d6000fd5b50336000908152600660205260409020546108999083610a0f565b336000818152600660209081526040918290209390935580518581523493810193909352805191927f7b6331640beaea5e54363de30ce55f1f6e4e8d2ed499e96a1308353fecd01edf929081900390910190a25050565b6004546101009004600160a060020a0316331461090c57600080fd5b600a61ffff8216101561091e57600080fd5b61ffff16600155565b60066020526000908152604090205481565b600061061182303161049c565b60005481565b60006106118260095430600160a060020a03163161044f565b60015481565b600860205260009081526040902054600160a060020a031681565b60008054600160a060020a03831682526007602052604082205482916109b6916109b1904290610a35565b610a47565b600160a060020a0384166000908152600560205260409020549091506104ab9082905b6000808315156109ec5760009150610a08565b508282028284828115156109fc57fe5b0414610a0457fe5b8091505b5092915050565b600082820183811015610a0457fe5b6000808284811515610a2c57fe5b04949350505050565b600082821115610a4157fe5b50900390565b6000818310610a5657816104ab565b50909190505600a165627a7a723058204460216dc669db7582679615624e959f722f6d6f4d2fb68a8b38fcea909008fe0029"
}