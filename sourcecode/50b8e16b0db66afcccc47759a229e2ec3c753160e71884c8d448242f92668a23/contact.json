{
  "address": "0x0b54c811cd4fd4d27c2ff0061c3831427d89b73c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BlueseedsToken",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-29\n*/\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n\ncontract CapperRole {\n  using Roles for Roles.Role;\n\n  event CapperAdded(address indexed account);\n  event CapperRemoved(address indexed account);\n\n  Roles.Role private cappers;\n\n  constructor(address account) internal {\n    _addCapper(account);\n  }\n\n  modifier onlyCapper() {\n    require(isCapper(msg.sender));\n    _;\n  }\n\n  function isCapper(address account) public view returns (bool) {\n    return cappers.has(account);\n  }\n\n  function addCapper(address account) public onlyCapper {\n    _addCapper(account);\n  }\n\n  function renounceCapper() public {\n    _removeCapper(msg.sender);\n  }\n\n  function _addCapper(address account) internal {\n    cappers.add(account);\n    emit CapperAdded(account);\n  }\n\n  function _removeCapper(address account) internal {\n    cappers.remove(account);\n    emit CapperRemoved(account);\n  }\n}\n\n\ncontract PauserRole {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private pausers;\n\n  constructor() internal {\n    _addPauser(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    _addPauser(account);\n  }\n\n  function renouncePauser() public {\n    _removePauser(msg.sender);\n  }\n\n  function _addPauser(address account) internal {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n  event Paused(address account);\n  event Unpaused(address account);\n\n  bool private _paused;\n\n  constructor() internal {\n    _paused = false;\n  }\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused(msg.sender);\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused(msg.sender);\n  }\n}\n\n\ncontract MinterRole {\n  using Roles for Roles.Role;\n\n  event MinterAdded(address indexed account);\n  event MinterRemoved(address indexed account);\n\n  Roles.Role private minters;\n\n  constructor() internal {\n    _addMinter(msg.sender);\n  }\n\n  modifier onlyMinter() {\n    require(isMinter(msg.sender));\n    _;\n  }\n\n  function isMinter(address account) public view returns (bool) {\n    return minters.has(account);\n  }\n\n  function addMinter(address account) public onlyMinter {\n    _addMinter(account);\n  }\n\n  function renounceMinter() public {\n    _removeMinter(msg.sender);\n  }\n\n  function _addMinter(address account) internal {\n    minters.add(account);\n    emit MinterAdded(account);\n  }\n\n  function _removeMinter(address account) internal {\n    minters.remove(account);\n    emit MinterRemoved(account);\n  }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != address(0));\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != address(0));\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n  /**\n   * @dev Function to mint tokens\n   * @param to The address that will receive the minted tokens.\n   * @param value The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address to,\n    uint256 value\n  )\n    public\n    onlyMinter\n    returns (bool)\n  {\n    _mint(to, value);\n    return true;\n  }\n}\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param value The amount of token to be burned.\n   */\n  function burn(uint256 value) public {\n    _burn(msg.sender, value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param from address The address which you want to send tokens from\n   * @param value uint256 The amount of token to be burned\n   */\n  function burnFrom(address from, uint256 value) public {\n    _burnFrom(from, value);\n  }\n}\n\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract ERC20Capped is ERC20Mintable, CapperRole {\n\n  uint256 private _cap;\n\n  constructor(uint256 cap, address capper)\n    public\n    CapperRole(capper)\n  {\n    require(cap > 0);\n    _cap = cap;\n  }\n\n  /**\n   * @return the cap for the token minting.\n   */\n  function cap() public view returns(uint256) {\n    return _cap;\n  }\n\n  function _mint(address account, uint256 value) internal {\n    require(totalSupply().add(value) <= _cap);\n    super._mint(account, value);\n  }\n\n  /**\n   * @notice Set cap\n   * @param newCap New cap\n   */\n  function setCap(uint256 newCap) external onlyCapper {\n    emit CapSet(msg.sender, _cap, newCap);\n    _cap = newCap;    \n  }\n\n  event CapSet(\n    address indexed capper,\n    uint256 oldCap,\n    uint256 newCap\n  );\n}\n\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n **/\ncontract ERC20Pausable is ERC20, Pausable {\n\n  function transfer(\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(to, value);\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(from, to, value);\n  }\n\n  function approve(\n    address spender,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(spender, value);\n  }\n\n  function increaseAllowance(\n    address spender,\n    uint addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseAllowance(spender, addedValue);\n  }\n\n  function decreaseAllowance(\n    address spender,\n    uint subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseAllowance(spender, subtractedValue);\n  }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n/**\n * @title Blueseeds Token\n * @dev Custom ERC20 token\n */\ncontract BlueseedsToken is Ownable, ERC20Capped, ERC20Burnable, ERC20Pausable {\n\n  string public constant name = \"Blueseeds Token\";\n  string public constant symbol = \"BST\";\n  uint8 public constant decimals = 18;\n\n  /**\n   * @dev Constructor that gives owner all of existing tokens.\n   * @param initSupply Amount of token initial supply\n   * @param initSupplyReceiver Address will receive initial supply\n   * @param capper Address can set new cap, e.g., auditor.\n   */\n  constructor(\n    uint256 initSupply,\n    address initSupplyReceiver,\n    address capper\n  ) \n    public\n    ERC20Capped(initSupply, capper)\n  {\n    _mint(initSupplyReceiver, initSupply);\n  }\n\n    /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    _renounceOwnerAssociatedRoles();\n    super.renounceOwnership();\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    addMinter(newOwner);    \n    addPauser(newOwner);\n    _renounceOwnerAssociatedRoles();\n    super._transferOwnership(newOwner);\n  }\n\n  /**\n   * @notice Renounce all owner associated roles.\n   */\n  function _renounceOwnerAssociatedRoles() private {\n    renounceMinter();\n    renouncePauser();\n  }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160608062001863833981018060405260608110156200003357600080fd5b508051602082015160409283015160008054600160a060020a03191633178082559451939492939192859284928392600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620000a53364010000000062000108810204565b620000b9816401000000006200015a810204565b5060008211620000c857600080fd5b50600655620000e033640100000000620001ac810204565b6008805460ff19169055620000ff8284640100000000620001fe810204565b505050620003cc565b62000123600482640100000000620013906200025882021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b62000175600582640100000000620013906200025882021704565b604051600160a060020a038216907fa7555c95b69d4f5cc847881feb4ab2883a1921319e34fa2043747b793d65b36e90600090a250565b620001c7600782640100000000620013906200025882021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6006546200022e8262000219640100000000620002b3810204565b9064010000000062001286620002b982021704565b11156200023a57600080fd5b62000254828264010000000062001298620002d382021704565b5050565b600160a060020a03811615156200026e57600080fd5b62000283828264010000000062000394810204565b156200028e57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b60035490565b600082820183811015620002cc57600080fd5b9392505050565b600160a060020a0382161515620002e957600080fd5b60035462000306908264010000000062001286620002b982021704565b600355600160a060020a0382166000908152600160205260409020546200033c908264010000000062001286620002b982021704565b600160a060020a03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000600160a060020a0382161515620003ac57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b61148780620003dc6000396000f3fe60806040526004361061018f577c0100000000000000000000000000000000000000000000000000000000600035046306fdde038114610194578063095ea7b31461021e57806318160ddd1461026b57806323b872dd14610292578063313ce567146102d5578063355274ea146103005780633950935114610315578063395645611461034e5780633f4ba83a1461038157806340c10f191461039857806342966c68146103d157806346fbf68e146103fb57806347786d371461042e5780635c975abb146104585780635d5576f81461046d5780636ef8d66d1461048257806370a0823114610497578063715018a6146104ca57806379cc6790146104df57806382dc1ec4146105185780638456cb591461054b5780638da5cb5b146105605780638dfbcf36146105915780638f32d59b146105c457806395d89b41146105d9578063983b2d56146105ee5780639865027514610621578063a457c2d714610636578063a9059cbb1461066f578063aa271e1a146106a8578063dd62ed3e146106db578063f2fde38b14610716575b600080fd5b3480156101a057600080fd5b506101a9610749565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101e35781810151838201526020016101cb565b50505050905090810190601f1680156102105780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022a57600080fd5b506102576004803603604081101561024157600080fd5b50600160a060020a038135169060200135610780565b604080519115158252519081900360200190f35b34801561027757600080fd5b506102806107a4565b60408051918252519081900360200190f35b34801561029e57600080fd5b50610257600480360360608110156102b557600080fd5b50600160a060020a038135811691602081013590911690604001356107aa565b3480156102e157600080fd5b506102ea6107d0565b6040805160ff9092168252519081900360200190f35b34801561030c57600080fd5b506102806107d5565b34801561032157600080fd5b506102576004803603604081101561033857600080fd5b50600160a060020a0381351690602001356107db565b34801561035a57600080fd5b506102576004803603602081101561037157600080fd5b5035600160a060020a03166107f8565b34801561038d57600080fd5b50610396610811565b005b3480156103a457600080fd5b50610257600480360360408110156103bb57600080fd5b50600160a060020a038135169060200135610875565b3480156103dd57600080fd5b50610396600480360360208110156103f457600080fd5b503561089e565b34801561040757600080fd5b506102576004803603602081101561041e57600080fd5b5035600160a060020a03166108ab565b34801561043a57600080fd5b506103966004803603602081101561045157600080fd5b50356108be565b34801561046457600080fd5b50610257610915565b34801561047957600080fd5b5061039661091e565b34801561048e57600080fd5b50610396610929565b3480156104a357600080fd5b50610280600480360360208110156104ba57600080fd5b5035600160a060020a0316610932565b3480156104d657600080fd5b5061039661094d565b3480156104eb57600080fd5b506103966004803603604081101561050257600080fd5b50600160a060020a038135169060200135610970565b34801561052457600080fd5b506103966004803603602081101561053b57600080fd5b5035600160a060020a031661097e565b34801561055757600080fd5b5061039661099b565b34801561056c57600080fd5b50610575610a01565b60408051600160a060020a039092168252519081900360200190f35b34801561059d57600080fd5b50610396600480360360208110156105b457600080fd5b5035600160a060020a0316610a10565b3480156105d057600080fd5b50610257610a2d565b3480156105e557600080fd5b506101a9610a3e565b3480156105fa57600080fd5b506103966004803603602081101561061157600080fd5b5035600160a060020a0316610a75565b34801561062d57600080fd5b50610396610a92565b34801561064257600080fd5b506102576004803603604081101561065957600080fd5b50600160a060020a038135169060200135610a9b565b34801561067b57600080fd5b506102576004803603604081101561069257600080fd5b50600160a060020a038135169060200135610ab8565b3480156106b457600080fd5b50610257600480360360208110156106cb57600080fd5b5035600160a060020a0316610ad5565b3480156106e757600080fd5b50610280600480360360408110156106fe57600080fd5b50600160a060020a0381358116916020013516610ae8565b34801561072257600080fd5b506103966004803603602081101561073957600080fd5b5035600160a060020a0316610b13565b60408051808201909152600f81527f426c7565736565647320546f6b656e0000000000000000000000000000000000602082015281565b60085460009060ff161561079357600080fd5b61079d8383610b2f565b9392505050565b60035490565b60085460009060ff16156107bd57600080fd5b6107c8848484610bad565b949350505050565b601281565b60065490565b60085460009060ff16156107ee57600080fd5b61079d8383610c4a565b600061080b60058363ffffffff610cfa16565b92915050565b61081a336108ab565b151561082557600080fd5b60085460ff16151561083657600080fd5b6008805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b600061088033610ad5565b151561088b57600080fd5b6108958383610d31565b50600192915050565b6108a83382610d61565b50565b600061080b60078363ffffffff610cfa16565b6108c7336107f8565b15156108d257600080fd5b6006546040805191825260208201839052805133927f113914a326da83d9b14b874c5cc74c6602b1ef1dc38916f0a4b3f618952f77ab92908290030190a2600655565b60085460ff1690565b61092733610e31565b565b61092733610e79565b600160a060020a031660009081526001602052604090205490565b610955610a2d565b151561096057600080fd5b610968610ec1565b610927610ed1565b61097a8282610f3b565b5050565b610987336108ab565b151561099257600080fd5b6108a881610fcd565b6109a4336108ab565b15156109af57600080fd5b60085460ff16156109bf57600080fd5b6008805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b600054600160a060020a031690565b610a19336107f8565b1515610a2457600080fd5b6108a881611015565b600054600160a060020a0316331490565b60408051808201909152600381527f4253540000000000000000000000000000000000000000000000000000000000602082015281565b610a7e33610ad5565b1515610a8957600080fd5b6108a88161105d565b610927336110a5565b60085460009060ff1615610aae57600080fd5b61079d83836110ed565b60085460009060ff1615610acb57600080fd5b61079d8383611138565b600061080b60048363ffffffff610cfa16565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b610b1b610a2d565b1515610b2657600080fd5b6108a881611145565b6000600160a060020a0383161515610b4657600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600160a060020a0383166000908152600260209081526040808320338452909152812054821115610bdd57600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054610c11908363ffffffff61117d16565b600160a060020a0385166000908152600260209081526040808320338452909152902055610c40848484611192565b5060019392505050565b6000600160a060020a0383161515610c6157600080fd5b336000908152600260209081526040808320600160a060020a0387168452909152902054610c95908363ffffffff61128616565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000600160a060020a0382161515610d1157600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b600654610d4c82610d406107a4565b9063ffffffff61128616565b1115610d5757600080fd5b61097a8282611298565b600160a060020a0382161515610d7657600080fd5b600160a060020a038216600090815260016020526040902054811115610d9b57600080fd5b600354610dae908263ffffffff61117d16565b600355600160a060020a038216600090815260016020526040902054610dda908263ffffffff61117d16565b600160a060020a0383166000818152600160209081526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b610e4260058263ffffffff61134416565b604051600160a060020a038216907f427400d279c506df610224b22ecce89b693fc1865864113f21c8d19c1f0c2a3b90600090a250565b610e8a60078263ffffffff61134416565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b610ec9610a92565b610927610929565b610ed9610a2d565b1515610ee457600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600160a060020a0382166000908152600260209081526040808320338452909152902054811115610f6b57600080fd5b600160a060020a0382166000908152600260209081526040808320338452909152902054610f9f908263ffffffff61117d16565b600160a060020a038316600090815260026020908152604080832033845290915290205561097a8282610d61565b610fde60078263ffffffff61139016565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b61102660058263ffffffff61139016565b604051600160a060020a038216907fa7555c95b69d4f5cc847881feb4ab2883a1921319e34fa2043747b793d65b36e90600090a250565b61106e60048263ffffffff61139016565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b6110b660048263ffffffff61134416565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b6000600160a060020a038316151561110457600080fd5b336000908152600260209081526040808320600160a060020a0387168452909152902054610c95908363ffffffff61117d16565b6000610895338484611192565b600160a060020a038116151561115a57600080fd5b61116381610a75565b61116c8161097e565b611174610ec1565b6108a8816113de565b60008282111561118c57600080fd5b50900390565b600160a060020a0383166000908152600160205260409020548111156111b757600080fd5b600160a060020a03821615156111cc57600080fd5b600160a060020a0383166000908152600160205260409020546111f5908263ffffffff61117d16565b600160a060020a03808516600090815260016020526040808220939093559084168152205461122a908263ffffffff61128616565b600160a060020a0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282018381101561079d57600080fd5b600160a060020a03821615156112ad57600080fd5b6003546112c0908263ffffffff61128616565b600355600160a060020a0382166000908152600160205260409020546112ec908263ffffffff61128616565b600160a060020a03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a038116151561135957600080fd5b6113638282610cfa565b151561136e57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a03811615156113a557600080fd5b6113af8282610cfa565b156113b957600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a03811615156113f357600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a723058209bfd98be5e5528ee4ac471b6b0dac12eb367e991912d6508ef2534a082177c22002900000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000d17c7d4f4a2804a4f9833168253d68707ffc8bd20000000000000000000000007b57c1b43fe1b90b407c42b6e8b5ba3993eb064d",
  "constructorArguments": "00000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000d17c7d4f4a2804a4f9833168253d68707ffc8bd20000000000000000000000007b57c1b43fe1b90b407c42b6e8b5ba3993eb064d"
}