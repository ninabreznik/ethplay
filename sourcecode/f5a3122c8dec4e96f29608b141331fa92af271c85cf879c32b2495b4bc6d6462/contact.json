{
  "address": "0x163733bcc28dbf26b41a8cfa83e369b5b3af741b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "PersianTokenICO",
  "contractName": "PersianTokenICO",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-24\n*/\n\npragma solidity ^0.4.13;\n\ninterface TokenERC20 {\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n    function balanceOf(address _owner) constant returns (uint256 balance);\n}\n\n\ninterface TokenNotifier {\n\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n}\n\n/**\n * @title SafeMath (from https://github.com/OpenZeppelin/zeppelin-solidity/blob/4d91118dd964618863395dcca25a50ff137bf5b6/contracts/math/SafeMath.sol)\n * @dev Math operations with safety checks that throw on error\n */\ncontract SafeMath {\n    \n    function safeMul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal constant returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract Owned {\n\n    address owner;\n    \n    function Owned() { owner = msg.sender; }\n\n    modifier onlyOwner { require(msg.sender == owner); _; }\n}\n\n\ncontract PersianToken is TokenERC20, Owned, SafeMath {\n\n    // The actual total supply is not constant and it will be updated with the real redeemed tokens once the ICO is over\n    uint256 public totalSupply = 0;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    uint8 public constant decimals = 18;\n    string public constant name = 'Persian';\n    string public constant symbol = 'PRS';\n    string public constant version = '1.0.0';\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (balances[msg.sender] < _value) return false;\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if(balances[msg.sender] < _value || allowed[_from][msg.sender] < _value) return false;\n        balances[_to] = safeAdd(balances[_to], _value);\n        balances[_from] = safeSub(balances[_from], _value);\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        if(!approve(_spender, _value)) return false;\n        TokenNotifier(_spender).receiveApproval(msg.sender, _value, this, _extraData);\n        return true;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\n\ncontract TokenICO is PersianToken {\n\n    uint256 public icoStartBlock;\n    uint256 public icoEndBlock;\n    uint256 public totalContributions;\n    mapping (address => uint256) public contributions;\n\n    // At max 300.000 Persian (with 18 decimals) will be ever generated from this ICO\n    uint256 public constant maxTotalSupply = 300000 * 10**18;\n\n    event Contributed(address indexed _contributor, uint256 _value, uint256 _estimatedTotalTokenBalance);\n    event Claimed(address indexed _contributor, uint256 _value);\n\n    function contribute() onlyDuringICO payable external returns (bool success) {\n        totalContributions = safeAdd(totalContributions, msg.value);\n        contributions[msg.sender] = safeAdd(contributions[msg.sender], msg.value);\n        Contributed(msg.sender, msg.value, estimateBalanceOf(msg.sender));\n        return true;\n    }\n\n    function claimToken() onlyAfterICO external returns (bool success) {\n        uint256 balance = estimateBalanceOf(msg.sender);\n        contributions[msg.sender] = 0;\n        balances[msg.sender] = safeAdd(balances[msg.sender], balance);\n        totalSupply = safeAdd(totalSupply, balance);\n        require(totalSupply <= maxTotalSupply);\n        Claimed(msg.sender, balance);\n        return true;\n    }\n\n    function redeemEther() onlyAfterICO onlyOwner external  {\n        owner.transfer(this.balance);\n    }\n\n    function estimateBalanceOf(address _owner) constant returns (uint256 estimatedTokens) {\n        return contributions[_owner] > 0 ? safeMul( maxTotalSupply / totalContributions, contributions[_owner]) : 0;\n    }\n\n    // This check is an helper function for ÐApp to check the effect of the NEXT tx, NOT simply the current state of the contract\n    function isICOOpen() constant returns (bool _open) {\n        return block.number >= (icoStartBlock - 1) && !isICOEnded();\n    }\n\n    // This check is an helper function for ÐApp to check the effect of the NEXT tx, NOT simply the current state of the contract\n    function isICOEnded() constant returns (bool _ended) {\n        return block.number >= icoEndBlock;\n    }\n\n    modifier onlyDuringICO {\n        require(block.number >= icoStartBlock && block.number <= icoEndBlock); _;\n    }\n\n    modifier onlyAfterICO {\n        require(block.number > icoEndBlock); _;\n    }\n}\n\n\ncontract PersianTokenICO is TokenICO {\n\n    function PersianTokenICO(uint256 _icoStartBlock, uint256 _icoEndBlock) {\n        icoStartBlock = _icoStartBlock;\n        icoEndBlock = _icoEndBlock;\n    }\n  \n    function () onlyDuringICO payable {\n        totalContributions = safeAdd(totalContributions, msg.value);\n        contributions[msg.sender] = safeAdd(contributions[msg.sender], msg.value);\n        Contributed(msg.sender, msg.value, estimateBalanceOf(msg.sender));\n    }\n\n}",
  "bytecode": "60606040526000600155341561001457600080fd5b6040516040806117e2833981016040528080519060200190919080519060200190919050505b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81600481905550806005819055505b50505b6117458061009d6000396000f30060606040523615610126576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461024b578063095ea7b3146102da57806312ea965d1461033457806318160ddd1461035d57806323b872dd146103865780632ab4d052146103ff578063313ce5671461042857806337c089231461045757806342e94c90146104805780634451d89f146104cd57806347d70f74146104fa57806354fd4d50146105235780635b72cdd0146105b257806370a08231146105ff578063925ac2161461064c57806395d89b4114610679578063a10f42c414610708578063a9059cbb14610735578063cae9ca511461078f578063d7bb99ba1461082c578063dd62ed3e1461084e578063e621b5df146108ba575b6102495b600454431015801561013e57506005544311155b151561014957600080fd5b610155600654346108cf565b6006819055506101a4600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054346108cf565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167ffa35a310d7113dddce1c275da946348e9aaebf9050b00b372033c4d84b0bd6eb34610229336108ee565b604051808381526020018281526020019250505060405180910390a25b5b565b005b341561025657600080fd5b61025e6109a6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561029f5780820151818401525b602081019050610283565b50505050905090810190601f1680156102cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102e557600080fd5b61031a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109df565b604051808215151515815260200191505060405180910390f35b341561033f57600080fd5b610347610ad2565b6040518082815260200191505060405180910390f35b341561036857600080fd5b610370610ad8565b6040518082815260200191505060405180910390f35b341561039157600080fd5b6103e5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ade565b604051808215151515815260200191505060405180910390f35b341561040a57600080fd5b610412610e45565b6040518082815260200191505060405180910390f35b341561043357600080fd5b61043b610e53565b604051808260ff1660ff16815260200191505060405180910390f35b341561046257600080fd5b61046a610e58565b6040518082815260200191505060405180910390f35b341561048b57600080fd5b6104b7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e5e565b6040518082815260200191505060405180910390f35b34156104d857600080fd5b6104e0610e76565b604051808215151515815260200191505060405180910390f35b341561050557600080fd5b61050d610fea565b6040518082815260200191505060405180910390f35b341561052e57600080fd5b610536610ff0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105775780820151818401525b60208101905061055b565b50505050905090810190601f1680156105a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105bd57600080fd5b6105e9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108ee565b6040518082815260200191505060405180910390f35b341561060a57600080fd5b610636600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611029565b6040518082815260200191505060405180910390f35b341561065757600080fd5b61065f611073565b604051808215151515815260200191505060405180910390f35b341561068457600080fd5b61068c611095565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106cd5780820151818401525b6020810190506106b1565b50505050905090810190601f1680156106fa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561071357600080fd5b61071b6110ce565b604051808215151515815260200191505060405180910390f35b341561074057600080fd5b610775600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506110dc565b604051808215151515815260200191505060405180910390f35b341561079a57600080fd5b610812600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506112b6565b604051808215151515815260200191505060405180910390f35b610834611435565b604051808215151515815260200191505060405180910390f35b341561085957600080fd5b6108a4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061155b565b6040518082815260200191505060405180910390f35b34156108c557600080fd5b6108cd6115e3565b005b60008082840190508381101515156108e357fe5b8091505b5092915050565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161093d57600061099e565b61099d600654693f870857a3e0e380000081151561095757fe5b04600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116cb565b5b90505b919050565b6040805190810160405280600781526020017f5065727369616e0000000000000000000000000000000000000000000000000081525081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60045481565b60015481565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541080610ba8575081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b15610bb65760009050610e3e565b610bff600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836108cf565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c8b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836116ff565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d54600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836116ff565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b693f870857a3e0e380000081565b601281565b60065481565b60076020528060005260406000206000915090505481565b60008060055443111515610e8957600080fd5b610e92336108ee565b90506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f22600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826108cf565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f71600154826108cf565b600181905550693f870857a3e0e380000060015411151515610f9257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040518082815260200191505060405180910390a2600191505b5b5090565b60055481565b6040805190810160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b6000600160045403431015801561108f575061108d6110ce565b155b90505b90565b6040805190810160405280600381526020017f505253000000000000000000000000000000000000000000000000000000000081525081565b600060055443101590505b90565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561112e57600090506112b0565b611177600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836116ff565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611203600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836108cf565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b60006112c284846109df565b15156112d1576000905061142e565b8373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156113c75780820151818401525b6020810190506113ab565b50505050905090810190601f1680156113f45780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561141557600080fd5b6102c65a03f1151561142657600080fd5b505050600190505b9392505050565b6000600454431015801561144b57506005544311155b151561145657600080fd5b611462600654346108cf565b6006819055506114b1600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054346108cf565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167ffa35a310d7113dddce1c275da946348e9aaebf9050b00b372033c4d84b0bd6eb34611536336108ee565b604051808381526020018281526020019250505060405180910390a2600190505b5b90565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600554431115156115f357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561164e57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015156116c657600080fd5b5b5b5b565b600080828402905060008414806116ec57508284828115156116e957fe5b04145b15156116f457fe5b8091505b5092915050565b600082821115151561170d57fe5b81830390505b929150505600a165627a7a723058203972841bd35892d3fe4c711ac36c6215f9d2bcdda7487d2996ea8efc43fe2e0e002900000000000000000000000000000000000000000000000000000000003e17b400000000000000000000000000000000000000000000000000000000003e8ce4",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000003e17b400000000000000000000000000000000000000000000000000000000003e8ce4"
}