{
  "address": "0xc3a36fad9d3e87acbc69bcd06850dbf13db2ab59",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Q2",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-14\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/MigrationTarget.sol\n\n//\n// Migration target\n// @dev Implement this interface to make migration target\n//\ncontract MigrationTarget {\n  function migrateFrom(address _from, uint256 _amount, uint256 _rewards, uint256 _trueBuy, bool _devStatus) public;\n}\n\n// File: contracts/Ownable.sol\n\ncontract Ownable {\n  address public owner;\n\n  // Event\n  event OwnershipChanged(address indexed oldOwner, address indexed newOwner);\n\n  // Modifier\n  modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    emit OwnershipChanged(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n// File: contracts/ERC20.sol\n\ncontract ERC20 {\n  uint256 public totalSupply;\n  function balanceOf(address _owner) view public returns (uint256 balance);\n  function transfer(address _to, uint256 _value) public returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n  function approve(address _spender, uint256 _value) public returns (bool success);\n  function allowance(address _owner, address _spender) view public returns (uint256 remaining);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n// File: contracts/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b)\n    internal\n    pure\n    returns (uint256)\n  {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b)\n    internal\n    pure\n    returns (uint256)\n  {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b)\n    internal\n    pure\n    returns (uint256)\n  {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b)\n    internal\n    pure\n    returns (uint256)\n  {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/StandardToken.sol\n\n/*  ERC 20 token */\ncontract StandardToken is ERC20 {\n  /**\n   * Internal transfer, only can be called by this contract\n   */\n  function _transfer(address _from, address _to, uint _value) internal returns (bool success) {\n    // Prevent transfer to 0x0 address. Use burn() instead\n    require(_to != address(0));\n    // Check if the sender has enough\n    require(balances[_from] >= _value);\n    // Check for overflows\n    require(balances[_to] + _value > balances[_to]);\n    // Save this for an assertion in the future\n    uint256 previousBalances = balances[_from] + balances[_to];\n    // Subtract from the sender\n    balances[_from] -= _value;\n    // Add the same to the recipient\n    balances[_to] += _value;\n    emit Transfer(_from, _to, _value);\n    // Asserts are used to use static analysis to find bugs in your code. They should never fail\n    assert(balances[_from] + balances[_to] == previousBalances);\n\n    return true;\n  }\n\n  /**\n   * Transfer tokens\n   *\n   * Send `_value` tokens to `_to` from your account\n   *\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    return _transfer(msg.sender, _to, _value);\n  }\n\n  /**\n   * Transfer tokens from other address\n   *\n   * Send `_value` tokens to `_to` in behalf of `_from`\n   *\n   * @param _from The address of the sender\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    require(_value <= allowed[_from][msg.sender]);     // Check allowance\n    allowed[_from][msg.sender] -= _value;\n    return _transfer(_from, _to, _value);\n  }\n\n  function balanceOf(address _owner) view public returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  /**\n   * Set allowance for other address\n   *\n   * Allows `_spender` to spend no more than `_value` tokens in your behalf\n   *\n   * @param _spender The address authorized to spend\n   * @param _value the max amount they can spend\n   */\n  function approve(address _spender, uint256 _value) public returns (bool success) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  mapping (address => uint256) public balances;\n  mapping (address => mapping (address => uint256)) public allowed;\n}\n\n// File: contracts/RoyaltyToken.sol\n\n/*  Royalty token */\ncontract RoyaltyToken is StandardToken {\n  using SafeMath for uint256;\n  // restricted addresses\t\n  mapping(address => bool) public restrictedAddresses;\n  \n  event RestrictedStatusChanged(address indexed _address, bool status);\n\n  struct Account {\n    uint256 balance;\n    uint256 lastRoyaltyPoint;\n  }\n\n  mapping(address => Account) public accounts;\n  uint256 public totalRoyalty;\n  uint256 public unclaimedRoyalty;\n\n  /**\n   * Get Royalty amount for given account\n   *\n   * @param account The address for Royalty account\n   */\n  function RoyaltysOwing(address account) public view returns (uint256) {\n    uint256 newRoyalty = totalRoyalty.sub(accounts[account].lastRoyaltyPoint);\n    return balances[account].mul(newRoyalty).div(totalSupply);\n  }\n\n  /**\n   * @dev Update account for Royalty\n   * @param account The address of owner\n   */\n  function updateAccount(address account) internal {\n    uint256 owing = RoyaltysOwing(account);\n    accounts[account].lastRoyaltyPoint = totalRoyalty;\n    if (owing > 0) {\n      unclaimedRoyalty = unclaimedRoyalty.sub(owing);\n      accounts[account].balance = accounts[account].balance.add(owing);\n    }\n  }\n\n  function disburse() public payable {\n    require(totalSupply > 0);\n    require(msg.value > 0);\n\n    uint256 newRoyalty = msg.value;\n    totalRoyalty = totalRoyalty.add(newRoyalty);\n    unclaimedRoyalty = unclaimedRoyalty.add(newRoyalty);\n  }\n\n  /**\n   * @dev Send `_value` tokens to `_to` from your account\n   *\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    // Require that the sender is not restricted\n    require(restrictedAddresses[msg.sender] == false);\n    updateAccount(_to);\n    updateAccount(msg.sender);\n    return super.transfer(_to, _value);\n  }\n\n  /**\n   * @dev Transfer tokens from other address. Send `_value` tokens to `_to` in behalf of `_from`\n   *\n   * @param _from The address of the sender\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  ) public returns (bool success) {\n    updateAccount(_to);\n    updateAccount(_from);\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function withdrawRoyalty() public {\n    updateAccount(msg.sender);\n\n    // retrieve Royalty amount\n    uint256 RoyaltyAmount = accounts[msg.sender].balance;\n    require(RoyaltyAmount > 0);\n    accounts[msg.sender].balance = 0;\n\n    // transfer Royalty amount\n    msg.sender.transfer(RoyaltyAmount);\n  }\n}\n\n// File: contracts/Q2.sol\n\ncontract Q2 is Ownable, RoyaltyToken {\n  using SafeMath for uint256;\n\n  string public name = \"Q2\";\n  string public symbol = \"Q2\";\n  uint8 public decimals = 18;\n\n  bool public whitelist = true;\n\n  // whitelist addresses\n  mapping(address => bool) public whitelistedAddresses;\n\n  // token creation cap\n  uint256 public creationCap = 15000000 * (10 ** 18); // 15M\n  uint256 public reservedFund = 10000000 * (10 ** 18); // 10M\n\n  // stage info\n  struct Stage {\n    uint8 number;\n    uint256 exchangeRate;\n    uint256 startBlock;\n    uint256 endBlock;\n    uint256 cap;\n  }\n\n  // events\n  event MintTokens(address indexed _to, uint256 _value);\n  event StageStarted(uint8 _stage, uint256 _totalSupply, uint256 _balance);\n  event StageEnded(uint8 _stage, uint256 _totalSupply, uint256 _balance);\n  event WhitelistStatusChanged(address indexed _address, bool status);\n  event WhitelistChanged(bool status);\n\n  // eth wallet\n  address public ethWallet;\n  mapping (uint8 => Stage) stages;\n\n  // current state info\n  uint8 public currentStage;\n\n  function Q2(address _ethWallet) public {\n    ethWallet = _ethWallet;\n\n    // reserved tokens\n    mintTokens(ethWallet, reservedFund);\n  }\n\n  function mintTokens(address to, uint256 value) internal {\n    require(value > 0);\n    balances[to] = balances[to].add(value);\n    totalSupply = totalSupply.add(value);\n    require(totalSupply <= creationCap);\n\n    // broadcast event\n    emit MintTokens(to, value);\n  }\n\n  function () public payable {\n    buyTokens();\n  }\n\n  function buyTokens() public payable {\n    require(whitelist==false || whitelistedAddresses[msg.sender] == true);\n    require(msg.value > 0);\n\n    Stage memory stage = stages[currentStage];\n    require(block.number >= stage.startBlock && block.number <= stage.endBlock);\n\n    uint256 tokens = msg.value * stage.exchangeRate;\n    require(totalSupply.add(tokens) <= stage.cap);\n\n    mintTokens(msg.sender, tokens);\n  }\n\n  function startStage(\n    uint256 _exchangeRate,\n    uint256 _cap,\n    uint256 _startBlock,\n    uint256 _endBlock\n  ) public onlyOwner {\n    require(_exchangeRate > 0 && _cap > 0);\n    require(_startBlock > block.number);\n    require(_startBlock < _endBlock);\n\n    // stop current stage if it's running\n    Stage memory currentObj = stages[currentStage];\n    if (currentObj.endBlock > 0) {\n      // broadcast stage end event\n      emit StageEnded(currentStage, totalSupply, address(this).balance);\n    }\n\n    // increment current stage\n    currentStage = currentStage + 1;\n\n    // create new stage object\n    Stage memory s = Stage({\n      number: currentStage,\n      startBlock: _startBlock,\n      endBlock: _endBlock,\n      exchangeRate: _exchangeRate,\n      cap: _cap + totalSupply\n    });\n    stages[currentStage] = s;\n\n    // broadcast stage started event\n    emit StageStarted(currentStage, totalSupply, address(this).balance);\n  }\n\n  function withdraw() public onlyOwner {\n    ethWallet.transfer(address(this).balance);\n  }\n\n  function getCurrentStage() view public returns (\n    uint8 number,\n    uint256 exchangeRate,\n    uint256 startBlock,\n    uint256 endBlock,\n    uint256 cap\n  ) {\n    Stage memory currentObj = stages[currentStage];\n    number = currentObj.number;\n    exchangeRate = currentObj.exchangeRate;\n    startBlock = currentObj.startBlock;\n    endBlock = currentObj.endBlock;\n    cap = currentObj.cap;\n  }\n\n  function changeWhitelistStatus(address _address, bool status) public onlyOwner {\n    whitelistedAddresses[_address] = status;\n    emit WhitelistStatusChanged(_address, status);\n  }\n\n  function changeRestrictedtStatus(address _address, bool status) public onlyOwner {\n    restrictedAddresses[_address] = status;\n    emit RestrictedStatusChanged(_address, status);\n  }\n  \n  function changeWhitelist(bool status) public onlyOwner {\n     whitelist = status;\n     emit WhitelistChanged(status);\n  }\n}\n\n// File: contracts/Quarters.sol\n\ninterface TokenRecipient {\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n}\n\ncontract Quarters is Ownable, StandardToken {\n  // Public variables of the token\n  string public name = \"Quarters\";\n  string public symbol = \"Q\";\n  uint8 public decimals = 0; // no decimals, only integer quarters\n\n  uint16 public ethRate = 4000; // Quarters/ETH\n  uint256 public tranche = 40000; // Number of Quarters in initial tranche\n\n  // List of developers\n  // address -> status\n  mapping (address => bool) public developers;\n\n  uint256 public outstandingQuarters;\n  address public q2;\n\n  // number of Quarters for next tranche\n  uint8 public trancheNumerator = 2;\n  uint8 public trancheDenominator = 1;\n\n  // initial multiples, rates (as percentages) for tiers of developers\n  uint32 public mega = 20;\n  uint32 public megaRate = 115;\n  uint32 public large = 100;\n  uint32 public largeRate = 90;\n  uint32 public medium = 2000;\n  uint32 public mediumRate = 75;\n  uint32 public small = 50000;\n  uint32 public smallRate = 50;\n  uint32 public microRate = 25;\n\n  // rewards related storage\n  mapping (address => uint256) public rewards;    // rewards earned, but not yet collected\n  mapping (address => uint256) public trueBuy;    // tranche rewards are set based on *actual* purchases of Quarters\n\n  uint256 public rewardAmount = 40;\n\n  uint8 public rewardNumerator = 1;\n  uint8 public rewardDenominator = 4;\n\n  // reserve ETH from Q2 to fund rewards\n  uint256 public reserveETH=0;\n\n  // ETH rate changed\n  event EthRateChanged(uint16 currentRate, uint16 newRate);\n\n  // This notifies clients about the amount burnt\n  event Burn(address indexed from, uint256 value);\n\n  event QuartersOrdered(address indexed sender, uint256 ethValue, uint256 tokens);\n  event DeveloperStatusChanged(address indexed developer, bool status);\n  event TrancheIncreased(uint256 _tranche, uint256 _etherPool, uint256 _outstandingQuarters);\n  event MegaEarnings(address indexed developer, uint256 value, uint256 _baseRate, uint256 _tranche, uint256 _outstandingQuarters, uint256 _etherPool);\n  event Withdraw(address indexed developer, uint256 value, uint256 _baseRate, uint256 _tranche, uint256 _outstandingQuarters, uint256 _etherPool);\n  event BaseRateChanged(uint256 _baseRate, uint256 _tranche, uint256 _outstandingQuarters, uint256 _etherPool,  uint256 _totalSupply);\n  event Reward(address indexed _address, uint256 value, uint256 _outstandingQuarters, uint256 _totalSupply);\n\n  /**\n   * developer modifier\n   */\n  modifier onlyActiveDeveloper() {\n    require(developers[msg.sender] == true);\n    _;\n  }\n\n  /**\n   * Constructor function\n   *\n   * Initializes contract with initial supply tokens to the owner of the contract\n   */\n  function Quarters(\n    address _q2,\n    uint256 firstTranche\n  ) public {\n    q2 = _q2;\n    tranche = firstTranche; // number of Quarters to be sold before increasing price\n  }\n\n  function setEthRate (uint16 rate) onlyOwner public {\n    // Ether price is set in Wei\n    require(rate > 0);\n    ethRate = rate;\n    emit EthRateChanged(ethRate, rate);\n  }\n\n  /**\n   * Adjust reward amount\n   */\n  function adjustReward (uint256 reward) onlyOwner public {\n    rewardAmount = reward; // may be zero, no need to check value to 0\n  }\n\n  function adjustWithdrawRate(uint32 mega2, uint32 megaRate2, uint32 large2, uint32 largeRate2, uint32 medium2, uint32 mediumRate2, uint32 small2, uint32 smallRate2, uint32 microRate2) onlyOwner public {\n    // the values (mega, large, medium, small) are multiples, e.g., 20x, 100x, 10000x\n    // the rates (megaRate, etc.) are percentage points, e.g., 150 is 150% of the remaining etherPool\n    if (mega2 > 0 && megaRate2 > 0) {\n      mega = mega2;\n      megaRate = megaRate2;\n    }\n\n    if (large2 > 0 && largeRate2 > 0) {\n      large = large2;\n      largeRate = largeRate2;\n    }\n\n    if (medium2 > 0 && mediumRate2 > 0) {\n      medium = medium2;\n      mediumRate = mediumRate2;\n    }\n\n    if (small2 > 0 && smallRate2 > 0){\n      small = small2;\n      smallRate = smallRate2;\n    }\n\n    if (microRate2 > 0) {\n      microRate = microRate2;\n    }\n  }\n\n  /**\n   * adjust tranche for next cycle\n   */\n  function adjustNextTranche (uint8 numerator, uint8 denominator) onlyOwner public {\n    require(numerator > 0 && denominator > 0);\n    trancheNumerator = numerator;\n    trancheDenominator = denominator;\n  }\n\n  function adjustTranche(uint256 tranche2) onlyOwner public {\n    require(tranche2 > 0);\n    tranche = tranche2;\n  }\n\n  /**\n   * Adjust rewards for `_address`\n   */\n  function updatePlayerRewards(address _address) internal {\n    require(_address != address(0));\n\n    uint256 _reward = 0;\n    if (rewards[_address] == 0) {\n      _reward = rewardAmount;\n    } else if (rewards[_address] < tranche) {\n      _reward = trueBuy[_address] * rewardNumerator / rewardDenominator;\n    }\n\n    if (_reward > 0) {\n      // update rewards record\n      rewards[_address] = tranche;\n\n      balances[_address] += _reward;\n      allowed[_address][msg.sender] += _reward; // set allowance\n\n      totalSupply += _reward;\n      outstandingQuarters += _reward;\n\n      uint256 spentETH = (_reward * (10 ** 18)) / ethRate;\n      if (reserveETH >= spentETH) {\n          reserveETH -= spentETH;\n        } else {\n          reserveETH = 0;\n        }\n\n      // tranche size change\n      _changeTrancheIfNeeded();\n\n      emit Approval(_address, msg.sender, _reward);\n      emit Reward(_address, _reward, outstandingQuarters, totalSupply);\n    }\n  }\n\n  /**\n   * Developer status\n   */\n  function setDeveloperStatus (address _address, bool status) onlyOwner public {\n    developers[_address] = status;\n    emit DeveloperStatusChanged(_address, status);\n  }\n\n  /**\n   * Set allowance for other address and notify\n   *\n   * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n   *\n   * @param _spender The address authorized to spend\n   * @param _value the max amount they can spend\n   * @param _extraData some extra information to send to the approved contract\n   */\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n  public\n  returns (bool success) {\n    TokenRecipient spender = TokenRecipient(_spender);\n    if (approve(_spender, _value)) {\n      spender.receiveApproval(msg.sender, _value, this, _extraData);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Destroy tokens\n   *\n   * Remove `_value` tokens from the system irreversibly\n   *\n   * @param _value the amount of money to burn\n   */\n  function burn(uint256 _value) public returns (bool success) {\n    require(balances[msg.sender] >= _value);   // Check if the sender has enough\n    balances[msg.sender] -= _value;            // Subtract from the sender\n    totalSupply -= _value;                     // Updates totalSupply\n    outstandingQuarters -= _value;              // Update outstanding quarters\n    emit Burn(msg.sender, _value);\n\n    // log rate change\n    emit BaseRateChanged(getBaseRate(), tranche, outstandingQuarters, address(this).balance, totalSupply);\n    return true;\n  }\n\n  /**\n   * Destroy tokens from other account\n   *\n   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n   *\n   * @param _from the address of the sender\n   * @param _value the amount of money to burn\n   */\n  function burnFrom(address _from, uint256 _value) public returns (bool success) {\n    require(balances[_from] >= _value);                // Check if the targeted balance is enough\n    require(_value <= allowed[_from][msg.sender]);     // Check allowance\n    balances[_from] -= _value;                         // Subtract from the targeted balance\n    allowed[_from][msg.sender] -= _value;              // Subtract from the sender's allowance\n    totalSupply -= _value;                      // Update totalSupply\n    outstandingQuarters -= _value;              // Update outstanding quarters\n    emit Burn(_from, _value);\n\n    // log rate change\n    emit BaseRateChanged(getBaseRate(), tranche, outstandingQuarters, address(this).balance, totalSupply);\n    return true;\n  }\n\n  /**\n   * Buy quarters by sending ethers to contract address (no data required)\n   */\n  function () payable public {\n    _buy(msg.sender);\n  }\n\n\n  function buy() payable public {\n    _buy(msg.sender);\n  }\n\n  function buyFor(address buyer) payable public {\n    uint256 _value =  _buy(buyer);\n\n    // allow donor (msg.sender) to spend buyer's tokens\n    allowed[buyer][msg.sender] += _value;\n    emit Approval(buyer, msg.sender, _value);\n  }\n\n  function _changeTrancheIfNeeded() internal {\n    if (totalSupply >= tranche) {\n      // change tranche size for next cycle\n      tranche = (tranche * trancheNumerator) / trancheDenominator;\n\n      // fire event for tranche change\n      emit TrancheIncreased(tranche, address(this).balance, outstandingQuarters);\n    }\n  }\n\n  // returns number of quarters buyer got\n  function _buy(address buyer) internal returns (uint256) {\n    require(buyer != address(0));\n\n    uint256 nq = (msg.value * ethRate) / (10 ** 18);\n    require(nq != 0);\n    if (nq > tranche) {\n      nq = tranche;\n    }\n\n    totalSupply += nq;\n    balances[buyer] += nq;\n    trueBuy[buyer] += nq;\n    outstandingQuarters += nq;\n\n    // change tranche size\n    _changeTrancheIfNeeded();\n\n    // event for quarters order (invoice)\n    emit QuartersOrdered(buyer, msg.value, nq);\n\n    // log rate change\n    emit BaseRateChanged(getBaseRate(), tranche, outstandingQuarters, address(this).balance, totalSupply);\n\n    // transfer owner's cut\n    Q2(q2).disburse.value(msg.value * 15 / 100)();\n\n    // return nq\n    return nq;\n  }\n\n  /**\n   * Transfer allowance from other address's allowance\n   *\n   * Send `_value` tokens to `_to` in behalf of `_from`\n   *\n   * @param _from The address of the sender\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transferAllowance(address _from, address _to, uint256 _value) public returns (bool success) {\n    updatePlayerRewards(_from);\n    require(_value <= allowed[_from][msg.sender]);     // Check allowance\n    allowed[_from][msg.sender] -= _value;\n\n    if (_transfer(_from, _to, _value)) {\n      // allow msg.sender to spend _to's tokens\n      allowed[_to][msg.sender] += _value;\n      emit Approval(_to, msg.sender, _value);\n      return true;\n    }\n\n    return false;\n  }\n\n  function withdraw(uint256 value) onlyActiveDeveloper public {\n    require(balances[msg.sender] >= value);\n\n    uint256 baseRate = getBaseRate();\n    require(baseRate > 0); // check if base rate > 0\n\n    uint256 earnings = value * baseRate;\n    uint256 rate = getRate(value); // get rate from value and tranche\n    uint256 earningsWithBonus = (rate * earnings) / 100;\n    if (earningsWithBonus > address(this).balance) {\n      earnings = address(this).balance;\n    } else {\n      earnings = earningsWithBonus;\n    }\n\n    balances[msg.sender] -= value;\n    outstandingQuarters -= value; // update the outstanding Quarters\n\n    uint256 etherPool = address(this).balance - earnings;\n    if (rate == megaRate) {\n      emit MegaEarnings(msg.sender, earnings, baseRate, tranche, outstandingQuarters, etherPool); // with current base rate\n    }\n\n    // event for withdraw\n    emit Withdraw(msg.sender, earnings, baseRate, tranche, outstandingQuarters, etherPool);  // with current base rate\n\n    // log rate change\n    emit BaseRateChanged(getBaseRate(), tranche, outstandingQuarters, address(this).balance, totalSupply);\n\n    // earning for developers\n    msg.sender.transfer(earnings);  \n}\n\n  function disburse() public payable {\n    reserveETH += msg.value;\n  }\n\n  function getBaseRate () view public returns (uint256) {\n    if (outstandingQuarters > 0) {\n      return (address(this).balance - reserveETH) / outstandingQuarters;\n    }\n\n    return (address(this).balance - reserveETH);\n  }\n\n  function getRate (uint256 value) view public returns (uint32) {\n    if (value * mega > tranche) {  // size & rate for mega developer\n      return megaRate;\n    } else if (value * large > tranche) {   // size & rate for large developer\n      return largeRate;\n    } else if (value * medium > tranche) {  // size and rate for medium developer\n      return mediumRate;\n    } else if (value * small > tranche){  // size and rate for small developer\n      return smallRate;\n    }\n\n    return microRate; // rate for micro developer\n  }\n\n\n  //\n  // Migrations\n  //\n\n  // Target contract\n  address public migrationTarget;\n  bool public migrating = false;\n\n  // Migrate event\n  event Migrate(address indexed _from, uint256 _value);\n\n  //\n  // Migrate tokens to the new token contract.\n  //\n  function migrate() public {\n    require(migrationTarget != address(0));\n    uint256 _amount = balances[msg.sender];\n    require(_amount > 0);\n    balances[msg.sender] = 0;\n\n    totalSupply = totalSupply - _amount;\n    outstandingQuarters = outstandingQuarters - _amount;\n\n    rewards[msg.sender] = 0;\n    trueBuy[msg.sender] = 0;\n    developers[msg.sender] = false;\n\n    emit Migrate(msg.sender, _amount);\n    MigrationTarget(migrationTarget).migrateFrom(msg.sender, _amount, rewards[msg.sender], trueBuy[msg.sender], developers[msg.sender]);\n  }\n\n  //\n  // Set address of migration target contract\n  // @param _target The address of the MigrationTarget contract\n  //\n  function setMigrationTarget(address _target) onlyOwner public {\n    migrationTarget = _target;\n  }\n}",
  "bytecode": "606060405260408051908101604052600281527f5132000000000000000000000000000000000000000000000000000000000000602082015260089080516200004d9291602001906200022b565b5060408051908101604052600281527f513200000000000000000000000000000000000000000000000000000000000060208201526009908051620000979291602001906200022b565b50600a805461ff001960ff19909116601217166101001790556a0c685fa11e01ec6f000000600c556a084595161401484a000000600d553415620000da57600080fd5b604051602080620016a18339810160405280805160008054600160a060020a03338116600160a060020a031992831617909255600e805483851692169190911790819055600d5492945062000140935016906401000000006200103e6200014782021704565b50620002d0565b600081116200015557600080fd5b600160a060020a038216600090815260026020526040902054620001889082640100000000620010246200021482021704565b600160a060020a038316600090815260026020526040902055600154620001be9082640100000000620010246200021482021704565b6001819055600c54901115620001d357600080fd5b81600160a060020a03167f7b47457f3af09e5f794b020fd74160963a808f5985883496a096d403d380c3438260405190815260200160405180910390a25050565b6000828201838110156200022457fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200026e57805160ff19168380011785556200029e565b828001600101855582156200029e579182015b828111156200029e57825182559160200191906001019062000281565b50620002ac929150620002b0565b5090565b620002cd91905b80821115620002ac5760008155600101620002b7565b90565b6113c180620002e06000396000f3006060604052600436106101a05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306c933d881146101aa57806306fdde03146101dd57806309094f7a14610267578063095ea7b31461029657806318160ddd146102b857806323b872dd146102dd57806327e235e314610305578063313ce567146103245780633ccfd60b1461034d5780633fe431ad14610360578063486f1c2a146103845780635a998a09146103a35780635bf5d54c146103b65780635c658165146103c95780635e5c06e2146103ee57806370a08231146104255780638399f93f146104445780638da5cb5b1461045757806393e59dc11461046a57806395d89b411461047d57806397bdc7c814610490578063a9059cbb146104a8578063abc6fd0b146104ca578063d0febe4c146101a0578063d78506ce146104d2578063dd62ed3e146104f1578063de80344d14610516578063eb76607d14610535578063eedbe31d14610548578063f1147bae14610590578063f2fde38b146105a3578063f330fb69146105c2578063f751b26a146105e6575b6101a86105f9565b005b34156101b557600080fd5b6101c9600160a060020a03600435166106ff565b604051901515815260200160405180910390f35b34156101e857600080fd5b6101f0610714565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561022c578082015183820152602001610214565b50505050905090810190601f1680156102595780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027257600080fd5b61027a6107b2565b604051600160a060020a03909116815260200160405180910390f35b34156102a157600080fd5b6101c9600160a060020a03600435166024356107c1565b34156102c357600080fd5b6102cb61082d565b60405190815260200160405180910390f35b34156102e857600080fd5b6101c9600160a060020a0360043581169060243516604435610833565b341561031057600080fd5b6102cb600160a060020a036004351661085a565b341561032f57600080fd5b61033761086c565b60405160ff909116815260200160405180910390f35b341561035857600080fd5b6101a8610875565b341561036b57600080fd5b6101a8600160a060020a036004351660243515156108cb565b341561038f57600080fd5b6101c9600160a060020a0360043516610945565b34156103ae57600080fd5b6102cb61095a565b34156103c157600080fd5b610337610960565b34156103d457600080fd5b6102cb600160a060020a0360043581169060243516610969565b34156103f957600080fd5b61040d600160a060020a0360043516610986565b60405191825260208201526040908101905180910390f35b341561043057600080fd5b6102cb600160a060020a036004351661099f565b341561044f57600080fd5b6102cb6109ba565b341561046257600080fd5b61027a6109c0565b341561047557600080fd5b6101c96109cf565b341561048857600080fd5b6101f06109dd565b341561049b57600080fd5b6101a86004351515610a48565b34156104b357600080fd5b6101c9600160a060020a0360043516602435610aae565b6101a8610af7565b34156104dd57600080fd5b6102cb600160a060020a0360043516610b48565b34156104fc57600080fd5b6102cb600160a060020a0360043581169060243516610bb8565b341561052157600080fd5b6101a8600435602435604435606435610be3565b341561054057600080fd5b6102cb610dff565b341561055357600080fd5b61055b610e05565b60405160ff909516855260208501939093526040808501929092526060840152608083019190915260a0909101905180910390f35b341561059b57600080fd5b6101a8610e91565b34156105ae57600080fd5b6101a8600160a060020a0360043516610f09565b34156105cd57600080fd5b6101a8600160a060020a03600435166024351515610fa4565b34156105f157600080fd5b6102cb61101e565b610601611362565b600a54600090610100900460ff1615806106385750600160a060020a0333166000908152600b602052604090205460ff1615156001145b151561064357600080fd5b6000341161065057600080fd5b60105460ff166000908152600f6020526040908190209060a090519081016040908152825460ff16825260018301546020830152600283015490820190815260038301546060830152600490920154608082015292505143101580156106ba575081606001514311155b15156106c557600080fd5b81602001513402905081608001516001546106e6908363ffffffff61102416565b11156106f157600080fd5b6106fb338261103e565b5050565b600b6020526000908152604090205460ff1681565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107aa5780601f1061077f576101008083540402835291602001916107aa565b820191906000526020600020905b81548152906001019060200180831161078d57829003601f168201915b505050505081565b600e54600160a060020a031681565b600160a060020a03338116600081815260036020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015481565b600061083e836110f5565b610847846110f5565b610852848484611188565b949350505050565b60026020526000908152604090205481565b600a5460ff1681565b60005433600160a060020a0390811691161461089057600080fd5b600e54600160a060020a039081169030163180156108fc0290604051600060405180830381858888f1935050505015156108c957600080fd5b565b60005433600160a060020a039081169116146108e657600080fd5b600160a060020a03821660008181526004602052604090819020805460ff19168415151790557fca364cd65b32cbd07cee6dd2b7aceb87913eac863ee31028b957d409972a6c8890839051901515815260200160405180910390a25050565b60046020526000908152604090205460ff1681565b60065481565b60105460ff1681565b600360209081526000928352604080842090915290825290205481565b6005602052600090815260409020805460019091015482565b600160a060020a031660009081526002602052604090205490565b600d5481565b600054600160a060020a031681565b600a54610100900460ff1681565b60098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107aa5780601f1061077f576101008083540402835291602001916107aa565b60005433600160a060020a03908116911614610a6357600080fd5b600a805461ff001916610100831515021790557f0d50ffb8142306f44502939eeb37f97727c319ac3cd8ec196ca88f3338eca9af81604051901515815260200160405180910390a150565b600160a060020a03331660009081526004602052604081205460ff1615610ad457600080fd5b610add836110f5565b610ae6336110f5565b610af083836111f5565b9392505050565b600080600154111515610b0957600080fd5b60003411610b1657600080fd5b506006543490610b2c908263ffffffff61102416565b600655600754610b42908263ffffffff61102416565b60075550565b600160a060020a0381166000908152600560205260408120600101546006548291610b79919063ffffffff61120216565b600154600160a060020a038516600090815260026020526040902054919250610af091610bac908463ffffffff61121416565b9063ffffffff61123f16565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b610beb611362565b610bf3611362565b60005433600160a060020a03908116911614610c0e57600080fd5b600086118015610c1e5750600085115b1515610c2957600080fd5b438411610c3557600080fd5b828410610c4157600080fd5b60105460ff166000908152600f6020526040908190209060a090519081016040908152825460ff1682526001830154602083015260028301549082015260038201546060820190815260049092015460808201529250600090511115610d02576010546001547f46fd0ff8ed527dc84646a1d0b4e013d6f94b5663f1589e9e099e684744beddec9160ff1690600160a060020a03301631604051808460ff1660ff168152602001838152602001828152602001935050505060405180910390a15b6010805460ff8082166001011660ff1990911617905560a0604051908101604090815260105460ff1680835260208084018a905282840188905260608401879052600154890160808501526000918252600f90522090915081908151815460ff191660ff919091161781556020820151816001015560408201518160020155606082015181600301556080820151600490910155506010546001547f66db1d4f682fea76d4ff7e8e5a54eeb270d7510b70f418b1112337a1bbb90ff49160ff1690600160a060020a03301631604051808460ff1660ff168152602001838152602001828152602001935050505060405180910390a1505050505050565b600c5481565b6000806000806000610e15611362565b60105460ff166000908152600f6020526040908190209060a090519081016040908152825460ff1682526001830154602083015260028301549082015260038201546060820152600490910154608082015290508051955080602001519450806040015193508060600151925080608001519150509091929394565b6000610e9c336110f5565b50600160a060020a033316600090815260056020526040812054908111610ec257600080fd5b600160a060020a0333166000818152600560205260408082209190915582156108fc0290839051600060405180830381858888f193505050501515610f0657600080fd5b50565b60005433600160a060020a03908116911614610f2457600080fd5b600160a060020a0381161515610f3957600080fd5b600054600160a060020a0380831691167f0384899bd253d83b23daa4d29aaa2efe0563d1132b43101e9ad667235aeb951b60405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610fbf57600080fd5b600160a060020a0382166000818152600b602052604090819020805460ff19168415151790557f8daaf060c3306c38e068a75c054bf96ecd85a3db1252712c4d93632744c42e0d90839051901515815260200160405180910390a25050565b60075481565b60008282018381101561103357fe5b8091505b5092915050565b6000811161104b57600080fd5b600160a060020a038216600090815260026020526040902054611074908263ffffffff61102416565b600160a060020a0383166000908152600260205260409020556001546110a0908263ffffffff61102416565b6001819055600c549011156110b457600080fd5b81600160a060020a03167f7b47457f3af09e5f794b020fd74160963a808f5985883496a096d403d380c3438260405190815260200160405180910390a25050565b600061110082610b48565b600654600160a060020a0384166000908152600560205260408120600101919091559091508111156106fb5760075461113f908263ffffffff61120216565b600755600160a060020a03821660009081526005602052604090205461116b908263ffffffff61102416565b600160a060020a0383166000908152600560205260409020555050565b600160a060020a038084166000908152600360209081526040808320339094168352929052908120548211156111bd57600080fd5b600160a060020a0380851660009081526003602090815260408083203390941683529290522080548390039055610852848484611256565b6000610af0338484611256565b60008282111561120e57fe5b50900390565b6000808315156112275760009150611037565b5082820282848281151561123757fe5b041461103357fe5b600080828481151561124d57fe5b04949350505050565b600080600160a060020a038416151561126e57600080fd5b600160a060020a0385166000908152600260205260409020548390101561129457600080fd5b600160a060020a038416600090815260026020526040902054838101116112ba57600080fd5b50600160a060020a0380841660008181526002602052604080822080549489168084528284208054898103909155938590528154880190915591909301927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600160a060020a0380851660009081526002602052604080822054928816825290205401811461135757fe5b506001949350505050565b60a060405190810160405280600060ff1681526020016000815260200160008152602001600081526020016000815250905600a165627a7a72305820a95b7603d896a6fe687ffdc46bc00451c34fe91ebad83272c0476d66a2ef192700290000000000000000000000000a3ff2d120da04202a94f61098ce956089b660d5",
  "constructorArguments": "0000000000000000000000000a3ff2d120da04202a94f61098ce956089b660d5"
}