{
  "address": "0xf3dce610acbfbcbb4efc12c4c2e3be063128baad",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NumbersToken2",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-29\n*/\n\npragma solidity ^0.4.18;\n\n// If you wanna escape this contract REALLY FAST\n// 1. open MEW/METAMASK\n// 2. Put this as data: 0xb1e35242\n// 3. send 150000+ gas\n// That calls the getMeOutOfHere() method\n\n// Wacky version, 0-1 tokens takes 10eth (should be avg 200% gains), 1-2 takes another 30eth (avg 100% gains), and beyond that who the fuck knows but it's 50% gains\n// 10% fees, price goes up crazy fast\ncontract NumbersToken2 {\n\tuint256 constant PRECISION = 0x10000000000000000;  // 2^64\n\t// CRR = 80 %\n\tint constant CRRN = 1;\n\tint constant CRRD = 2;\n\t// The price coefficient. Chosen such that at 1 token total supply\n\t// the reserve is 0.8 ether and price 1 ether/token.\n\tint constant LOGC = -0x296ABF784A358468C;\n\t\n\tstring constant public name = \"NumbersToken2\";\n\tstring constant public symbol = \"NUMB2\";\n\tuint8 constant public decimals = 18;\n\tuint256 public totalSupply;\n\t// amount of shares for each address (scaled number)\n\tmapping(address => uint256) public balanceOfOld;\n\t// allowance map, see erc20\n\tmapping(address => mapping(address => uint256)) public allowance;\n\t// amount payed out for each address (scaled number)\n\tmapping(address => int256) payouts;\n\t// sum of all payouts (scaled number)\n\tint256 totalPayouts;\n\t// amount earned for each share (scaled number)\n\tuint256 earningsPerShare;\n\t\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n\t//address owner;\n\n\tfunction NumbersToken() public {\n\t\t//owner = msg.sender;\n\t}\n\t\n\t// These are functions solely created to appease the frontend\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balanceOfOld[_owner];\n    }\n\n\tfunction withdraw(uint tokenCount) // the parameter is ignored, yes\n      public\n      returns (bool)\n    {\n\t\tvar balance = dividends(msg.sender);\n\t\tpayouts[msg.sender] += (int256) (balance * PRECISION);\n\t\ttotalPayouts += (int256) (balance * PRECISION);\n\t\tmsg.sender.transfer(balance);\n\t\treturn true;\n    }\n\t\n\tfunction sellMyTokensDaddy() public {\n\t\tvar balance = balanceOf(msg.sender);\n\t\ttransferTokens(msg.sender, address(this),  balance); // this triggers the internal sell function\n\t}\n\n    function getMeOutOfHere() public {\n\t\tsellMyTokensDaddy();\n        withdraw(1); // parameter is ignored\n\t}\n\t\n\tfunction fund()\n      public\n      payable \n      returns (bool)\n    {\n      if (msg.value > 0.000001 ether)\n\t\t\tbuy();\n\t\telse\n\t\t\treturn false;\n\t  \n      return true;\n    }\n\n\tfunction buyPrice() public constant returns (uint) {\n\t\treturn getTokensForEther(1 finney);\n\t}\n\t\n\tfunction sellPrice() public constant returns (uint) {\n\t\treturn getEtherForTokens(1 finney);\n\t}\n\n\t// End of useless functions\n\n\t// Invariants\n\t// totalPayout/Supply correct:\n\t//   totalPayouts = \\sum_{addr:address} payouts(addr)\n\t//   totalSupply  = \\sum_{addr:address} balanceOfOld(addr)\n\t// dividends not negative:\n\t//   \\forall addr:address. payouts[addr] <= earningsPerShare * balanceOfOld[addr]\n\t// supply/reserve correlation:\n\t//   totalSupply ~= exp(LOGC + CRRN/CRRD*log(reserve())\n\t//   i.e. totalSupply = C * reserve()**CRR\n\t// reserve equals balance minus payouts\n\t//   reserve() = this.balance - \\sum_{addr:address} dividends(addr)\n\n\tfunction transferTokens(address _from, address _to, uint256 _value) internal {\n\t\tif (balanceOfOld[_from] < _value)\n\t\t\trevert();\n\t\tif (_to == address(this)) {\n\t\t\tsell(_value);\n\t\t} else {\n\t\t    int256 payoutDiff = (int256) (earningsPerShare * _value);\n\t\t    balanceOfOld[_from] -= _value;\n\t\t    balanceOfOld[_to] += _value;\n\t\t    payouts[_from] -= payoutDiff;\n\t\t    payouts[_to] += payoutDiff;\n\t\t}\n\t\tTransfer(_from, _to, _value);\n\t}\n\t\n\tfunction transfer(address _to, uint256 _value) public {\n\t    transferTokens(msg.sender, _to,  _value);\n\t}\n\t\n    function transferFrom(address _from, address _to, uint256 _value) public {\n        var _allowance = allowance[_from][msg.sender];\n        if (_allowance < _value)\n            revert();\n        allowance[_from][msg.sender] = _allowance - _value;\n        transferTokens(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public {\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        if ((_value != 0) && (allowance[msg.sender][_spender] != 0)) revert();\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n    }\n\n\tfunction dividends(address _owner) public constant returns (uint256 amount) {\n\t\treturn (uint256) ((int256)(earningsPerShare * balanceOfOld[_owner]) - payouts[_owner]) / PRECISION;\n\t}\n\n\tfunction withdrawOld(address to) public {\n\t\tvar balance = dividends(msg.sender);\n\t\tpayouts[msg.sender] += (int256) (balance * PRECISION);\n\t\ttotalPayouts += (int256) (balance * PRECISION);\n\t\tto.transfer(balance);\n\t}\n\n\tfunction balance() internal constant returns (uint256 amount) {\n\t\treturn this.balance - msg.value;\n\t}\n\tfunction reserve() public constant returns (uint256 amount) {\n\t\treturn balance()\n\t\t\t- ((uint256) ((int256) (earningsPerShare * totalSupply) - totalPayouts) / PRECISION) - 1;\n\t}\n\n\tfunction buy() internal {\n\t\tif (msg.value < 0.000001 ether || msg.value > 1000000 ether)\n\t\t\trevert();\n\t\tvar sender = msg.sender;\n\t\t// 5 % of the amount is used to pay holders.\n\t\tvar fee = (uint)(msg.value / 10);\n\t\t\n\t\t// compute number of bought tokens\n\t\tvar numEther = msg.value - fee;\n\t\tvar numTokens = getTokensForEther(numEther);\n\n\t\tvar buyerfee = fee * PRECISION;\n\t\tif (totalSupply > 0) {\n\t\t\t// compute how the fee distributed to previous holders and buyer.\n\t\t\t// The buyer already gets a part of the fee as if he would buy each token separately.\n\t\t\tvar holderreward =\n\t\t\t    (PRECISION - (reserve() + numEther) * numTokens * PRECISION / (totalSupply + numTokens) / numEther)\n\t\t\t    * (uint)(CRRD) / (uint)(CRRD-CRRN);\n\t\t\tvar holderfee = fee * holderreward;\n\t\t\tbuyerfee -= holderfee;\n\t\t\n\t\t\t// Fee is distributed to all existing tokens before buying\n\t\t\tvar feePerShare = holderfee / totalSupply;\n\t\t\tearningsPerShare += feePerShare;\n\t\t}\n\t\t// add numTokens to total supply\n\t\ttotalSupply += numTokens;\n\t\t// add numTokens to balance\n\t\tbalanceOfOld[sender] += numTokens;\n\t\t// fix payouts so that sender doesn't get old earnings for the new tokens.\n\t\t// also add its buyerfee\n\t\tvar payoutDiff = (int256) ((earningsPerShare * numTokens) - buyerfee);\n\t\tpayouts[sender] += payoutDiff;\n\t\ttotalPayouts += payoutDiff;\n\t}\n\t\n\tfunction sell(uint256 amount) internal {\n\t\tvar numEthers = getEtherForTokens(amount);\n\t\t// remove tokens\n\t\ttotalSupply -= amount;\n\t\tbalanceOfOld[msg.sender] -= amount;\n\t\t\n\t\t// fix payouts and put the ethers in payout\n\t\tvar payoutDiff = (int256) (earningsPerShare * amount + (numEthers * PRECISION));\n\t\tpayouts[msg.sender] -= payoutDiff;\n\t\ttotalPayouts -= payoutDiff;\n\t}\n\n\tfunction getTokensForEther(uint256 ethervalue) public constant returns (uint256 tokens) {\n\t\treturn fixedExp(fixedLog(reserve() + ethervalue)*CRRN/CRRD + LOGC) - totalSupply;\n\t}\n\n\tfunction getEtherForTokens(uint256 tokens) public constant returns (uint256 ethervalue) {\n\t\tif (tokens == totalSupply)\n\t\t\treturn reserve();\n\t\treturn reserve() - fixedExp((fixedLog(totalSupply - tokens) - LOGC) * CRRD/CRRN);\n\t}\n\n\tint256 constant one       = 0x10000000000000000;\n\tuint256 constant sqrt2    = 0x16a09e667f3bcc908;\n\tuint256 constant sqrtdot5 = 0x0b504f333f9de6484;\n\tint256 constant ln2       = 0x0b17217f7d1cf79ac;\n\tint256 constant ln2_64dot5= 0x2cb53f09f05cc627c8;\n\tint256 constant c1        = 0x1ffffffffff9dac9b;\n\tint256 constant c3        = 0x0aaaaaaac16877908;\n\tint256 constant c5        = 0x0666664e5e9fa0c99;\n\tint256 constant c7        = 0x049254026a7630acf;\n\tint256 constant c9        = 0x038bd75ed37753d68;\n\tint256 constant c11       = 0x03284a0c14610924f;\n\n\tfunction fixedLog(uint256 a) internal pure returns (int256 log) {\n\t\tint32 scale = 0;\n\t\twhile (a > sqrt2) {\n\t\t\ta /= 2;\n\t\t\tscale++;\n\t\t}\n\t\twhile (a <= sqrtdot5) {\n\t\t\ta *= 2;\n\t\t\tscale--;\n\t\t}\n\t\tint256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);\n\t\t// The polynomial R = c1*x + c3*x^3 + ... + c11 * x^11\n\t\t// approximates the function log(1+x)-log(1-x)\n\t\t// Hence R(s) = log((1+s)/(1-s)) = log(a)\n\t\tvar z = (s*s) / one;\n\t\treturn scale * ln2 +\n\t\t\t(s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))\n\t\t\t\t/one))/one))/one))/one))/one);\n\t}\n\n\tint256 constant c2 =  0x02aaaaaaaaa015db0;\n\tint256 constant c4 = -0x000b60b60808399d1;\n\tint256 constant c6 =  0x0000455956bccdd06;\n\tint256 constant c8 = -0x000001b893ad04b3a;\n\tfunction fixedExp(int256 a) internal pure returns (uint256 exp) {\n\t\tint256 scale = (a + (ln2_64dot5)) / ln2 - 64;\n\t\ta -= scale*ln2;\n\t\t// The polynomial R = 2 + c2*x^2 + c4*x^4 + ...\n\t\t// approximates the function x*(exp(x)+1)/(exp(x)-1)\n\t\t// Hence exp(x) = (R(x)+x)/(R(x)-x)\n\t\tint256 z = (a*a) / one;\n\t\tint256 R = ((int256)(2) * one) +\n\t\t\t(z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\n\t\texp = (uint256) (((R + a) * one) / (R - a));\n\t\tif (scale >= 0)\n\t\t\texp <<= scale;\n\t\telse\n\t\t\texp >>= -scale;\n\t\treturn exp;\n\t}\n\n\t/*function destroy() external {\n\t    selfdestruct(owner);\n\t}*/\n\n\tfunction () payable public {\n\t\tif (msg.value > 0)\n\t\t\tbuy();\n\t\telse\n\t\t\twithdrawOld(msg.sender);\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOfOld\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawOld\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"}],\"name\":\"getTokensForEther\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellMyTokensDaddy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMeOutOfHere\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"getEtherForTokens\",\"outputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"NumbersToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b610cbc8061001e6000396000f3006060604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610148578063095ea7b3146101d257806318160ddd146101f457806323b872dd14610219578063276c9d0a146102415780632e1a7d4d14610260578063313ce5671461028a57806339ffe67c146102b35780634b750334146102d257806362dbf261146102e557806368306e43146102fb57806370a082311461031a57806375c7d4e1146103395780638620410b1461034c57806395d89b411461035f578063a9059cbb14610372578063b1e3524214610394578063b60d4288146103a7578063b9f308f2146103af578063cd3293de146103c5578063dd62ed3e146103d8578063e37d883a146103fd575b600034111561013d57610138610410565b610146565b6101463361052c565b005b341561015357600080fd5b61015b61059b565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561019757808201518382015260200161017f565b50505050905090810190601f1680156101c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101dd57600080fd5b610146600160a060020a03600435166024356105d2565b34156101ff57600080fd5b610207610673565b60405190815260200160405180910390f35b341561022457600080fd5b610146600160a060020a0360043581169060243516604435610679565b341561024c57600080fd5b610207600160a060020a03600435166106e9565b341561026b57600080fd5b6102766004356106fb565b604051901515815260200160405180910390f35b341561029557600080fd5b61029d61076d565b60405160ff909116815260200160405180910390f35b34156102be57600080fd5b610146600160a060020a036004351661052c565b34156102dd57600080fd5b610207610772565b34156102f057600080fd5b61020760043561078a565b341561030657600080fd5b610207600160a060020a03600435166107cc565b341561032557600080fd5b610207600160a060020a0360043516610802565b341561034457600080fd5b61014661081d565b341561035757600080fd5b610207610838565b341561036a57600080fd5b61015b61084a565b341561037d57600080fd5b610146600160a060020a0360043516602435610881565b341561039f57600080fd5b61014661088c565b61027661089e565b34156103ba57600080fd5b6102076004356108c8565b34156103d057600080fd5b610207610916565b34156103e357600080fd5b610207600160a060020a0360043581169060243516610943565b341561040857600080fd5b610146610960565b600080600080600080600080600064e8d4a5100034108061043a575069d3c21bcecceda100000034115b1561044457600080fd5b339850600a34049750873403965061045b8761078a565b9550604060020a880294506000805411156104dd5760016002036002888860005401604060020a8a8c61048c610916565b01020281151561049857fe5b048115156104a257fe5b04604060020a03028115156104b357fe5b04935083880292508285039450600054838115156104cd57fe5b6005805492909104918201905591505b50506000805485018155600160a060020a039097168752505060016020908152604080872080548501905560055460039092529095208054959092020393840190555050600480549091019055565b6000610537336107cc565b600160a060020a03338116600090815260036020526040908190208054604060020a850290810190915560048054909101905591925083169082156108fc0290839051600060405180830381858888f19350505050151561059757600080fd5b5050565b60408051908101604052600d81527f4e756d62657273546f6b656e3200000000000000000000000000000000000000602082015281565b80158015906106055750600160a060020a0333811660009081526002602090815260408083209386168352929052205415155b1561060f57600080fd5b600160a060020a03338116600081815260026020908152604080832094871680845294909152908190208490557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35050565b60005481565b600160a060020a0380841660009081526002602090815260408083203390941683529290522054818110156106ad57600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522082820390556106e3848484610962565b50505050565b60016020526000908152604090205481565b600080610707336107cc565b600160a060020a033316600081815260036020526040908190208054604060020a85029081019091556004805490910190559192509082156108fc0290839051600060405180830381858888f19350505050151561076457600080fd5b50600192915050565b601281565b600061078466038d7ea4c680006108c8565b90505b90565b600080546107c3680296abf784a358468b19600260016107b2876107ac610916565b01610a53565b028115156107bc57fe5b0501610b38565b0390505b919050565b600160a060020a0316600090815260036020908152604080832054600190925290912054600554604060020a9102919091030490565b600160a060020a031660009081526001602052604090205490565b600061082833610802565b9050610835333083610962565b50565b600061078466038d7ea4c6800061078a565b60408051908101604052600581527f4e554d4232000000000000000000000000000000000000000000000000000000602082015281565b610597338383610962565b61089461081d565b61083560016106fb565b600064e8d4a510003411156108ba576108b5610410565b6108c2565b506000610787565b50600190565b600080548214156108e2576108db610916565b90506107c7565b61091260016002680296abf784a358468b196109018660005403610a53565b030281151561090c57fe5b05610b38565b6107c35b60006001604060020a600454600054600554020381151561093357fe5b0461093c610c1c565b0303905090565b600260209081526000928352604080842090915290825290205481565b565b600160a060020a0383166000908152600160205260408120548290101561098857600080fd5b30600160a060020a031683600160a060020a031614156109b0576109ab82610c2c565b610a06565b50600554600160a060020a03808516600081815260016020908152604080832080548890039055938716808352848320805488019055928252600390528281208054948602948590039055908152208054820190555b82600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350505050565b60008080805b68016a09e667f3bcc908851115610a7b57600285049450600190920191610a59565b5b67b504f333f9de64848511610a9e576002949094029360001990920191610a7c565b604060020a8501604060020a80870302811515610ab757fe5b05915050604060020a818002819005906801ffffffffff9dac9b67666664e5e9fa0c996738bd75ed37753d68673284a0c14610924f85028490050184028390056749254026a7630acf01840283900501830282900567aaaaaaac168779080183028290050183020567b17217f7d1cf79ac8460030b02019350505050919050565b6000808080604067b17217f7d1cf79ac682cb53f09f05cc627c887010503925067b17217f7d1cf79ac830285039450604060020a858602811515610b7857fe5b059150604060020a672aaaaaaaaa015db0660455956bccdd06651b893ad04b3919850283900501840282900566b60b60808399d01901840282900501830205604060020a600202019050848103604060020a86830102811515610bd757fe5b05935060008312610bfb5782846000821215610bef57fe5b9060020a029350610c14565b82600003846000821215610c0b57fe5b9060020a900493505b505050919050565b34600160a060020a033016310390565b600080610c38836108c8565b60008054859003815533600160a060020a031681526001602090815260408083208054889003905560055460039092529091208054604060020a939093029190950201908190039093555050600480549190910390555600a165627a7a7230582080671398206dc58137a3694039144a4dbbe81d893f936b9a5e7c5ff17fda03780029"
}