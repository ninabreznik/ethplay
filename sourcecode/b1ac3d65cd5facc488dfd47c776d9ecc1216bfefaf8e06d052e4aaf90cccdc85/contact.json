{
  "address": "0x35dd78b60d5598ae258ec2ea6c610b35115eafe9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PlutoCommyLotto",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-12\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * The PlutoCommyLotto contract is a communist bidding/lottery system. It shares 80% of the prize with everyone who didn't win. The winner gets 20%.\n */\ncontract PlutoCommyLotto {\n\n\taddress public maintenanceFunds; //holds capital for reinvestment in case there's no activity for too long.\n\n\tuint public currentCicle = 0;\n\tuint public numBlocksForceEnd = 5760;//5760;\n\tuint public jackpotPossibilities = 5000000;//5000000;\n\tuint public winnerPct = 20; //20%\n\tuint public commyPct = 80; //80%\n\tuint public lastJackpotResult; //for easy auditing.\n\n\tuint private costIncrementNormal = 5; //0.5%\n\tuint private idealReserve = 60 finney;\n\tuint private minTicketCost = 1 finney / 10;\n\tuint private baseTicketProportion = 30;\n\tuint private maintenanceTickets = 50;\n\t\n\tstruct Cicle {\n\t\tmapping (address => uint) ticketsByHash;\n\t\taddress lastPlayer;\n\t\tuint number; \n\t\tuint initialBlock;\n\t\tuint numTickets;\n\t\tuint currentTicketCost;\n\t\tuint lastJackpotChance;\n\t\tuint winnerPot; \n\t\tuint commyPot; \n\t\tuint commyReward;\n\t\tuint lastBetBlock;\n\t\tbool isActive;\n\t}\n\n\tmapping (uint => Cicle) public cicles;\n\n\t//////////###########//////////\n\tmodifier onlyInitOnce() { \n\t\trequire(currentCicle == 0); \n\t\t_; \n\t}\n\tmodifier onlyLastPlayer(uint cicleNumber) { \n\t\trequire(msg.sender == cicles[cicleNumber].lastPlayer); \n\t\t_; \n\t}\n\tmodifier onlyIfNoActivity(uint cicleNumber) { \n\t\trequire(block.number - cicles[cicleNumber].lastBetBlock > numBlocksForceEnd);\n\t\t_; \n\t}\n\tmodifier onlyActiveCicle(uint cicleNumber) { \n\t\trequire(cicles[cicleNumber].isActive == true);\n\t\t_; \n\t}\n\tmodifier onlyInactiveCicle(uint cicleNumber) { \n\t\trequire(cicles[cicleNumber].isActive == false);\n\t\t_; \n\t}\n\tmodifier onlyWithTickets(uint cicleNumber) { \n\t\trequire(cicles[cicleNumber].ticketsByHash[msg.sender] > 0);\n\t\t_; \n\t}\n\tmodifier onlyValidCicle(uint cicleNumber) { \n\t\trequire(cicleNumber <= currentCicle);\n\t\t_; \n\t}\n\t//////////###########//////////\n\n\tfunction init() public payable onlyInitOnce() {\n\t\tmaintenanceFunds = msg.sender;\n\t\tcreateNewCicle();\n\t\t\n\t\tidealReserve = msg.value;\n\n\t\tuint winnerVal = msg.value * winnerPct / 100;\n\t\tcicles[currentCicle].winnerPot += winnerVal;\n\t\tcicles[currentCicle].commyPot += msg.value - winnerVal;\n\t\tcicles[currentCicle].currentTicketCost = ((cicles[currentCicle].winnerPot + cicles[currentCicle].commyPot) / baseTicketProportion);\n\t\t\n\t\tsetCommyReward(currentCicle);\n\t}\n\n\tevent NewCicle(uint indexed cicleNumber, uint firstBlock);\n\tfunction createNewCicle() private {\n\t\tcurrentCicle += 1;\n\t\tcicles[currentCicle] = Cicle({ number:currentCicle,\n\t\t\t\t\t\t\t\t\tinitialBlock:block.number,\n\t\t\t\t\t\t\t\t\tnumTickets:maintenanceTickets,\n\t\t\t\t\t\t\t\t\tlastPlayer:maintenanceFunds,\n\t\t\t\t\t\t\t\t\tlastJackpotChance:0,\n\t\t\t\t\t\t\t\t\tlastBetBlock:block.number,\n\t\t\t\t\t\t\t\t\twinnerPot:0,\n\t\t\t\t\t\t\t\t\tcommyPot:0,\n\t\t\t\t\t\t\t\t\tcommyReward:0,\n\t\t\t\t\t\t\t\t\tcurrentTicketCost:0,\n\t\t\t\t\t\t\t\t\tisActive:false });\n\n\t\tcicles[currentCicle].ticketsByHash[maintenanceFunds] = maintenanceTickets;\n\n\t\tif(currentCicle != 1) {\n\t\t\tcicles[currentCicle-1].ticketsByHash[maintenanceFunds] = 0;\n\t\t\tif (cicles[currentCicle-1].commyReward * maintenanceTickets > idealReserve) {\n\t\t\t\tcicles[currentCicle].winnerPot = idealReserve * winnerPct / 100;\n\t\t\t\tcicles[currentCicle].commyPot = idealReserve * commyPct / 100;\n\t\t\t\tmaintenanceFunds.transfer(cicles[currentCicle-1].commyReward * maintenanceTickets - idealReserve);\n\t\t\t} else {\n\t\t\t\tif(cicles[currentCicle-1].numTickets == maintenanceTickets) {\n\t\t\t\t\tcicles[currentCicle].winnerPot = cicles[currentCicle-1].winnerPot;\n\t\t\t\t\tcicles[currentCicle].commyPot = cicles[currentCicle-1].commyPot;\n\t\t\t\t} else {\n\t\t\t\t\tcicles[currentCicle].winnerPot = (cicles[currentCicle-1].commyReward * maintenanceTickets) * winnerPct / 100;\n\t\t\t\t\tcicles[currentCicle].commyPot = (cicles[currentCicle-1].commyReward * maintenanceTickets) * commyPct / 100;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsetCommyReward(currentCicle);\n\t\t\tcicles[currentCicle].currentTicketCost = (cicles[currentCicle].winnerPot + cicles[currentCicle].commyPot) / baseTicketProportion;\n\t\t\tif(cicles[currentCicle].currentTicketCost < minTicketCost) {\n\t\t\t\tcicles[currentCicle].currentTicketCost = minTicketCost;\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\tcicles[currentCicle].isActive = true;\n\t\temit NewCicle(currentCicle, block.number);\n\t}\n\n\tfunction setCommyReward(uint cicleNumber) private {\n\t\tcicles[cicleNumber].commyReward = cicles[cicleNumber].commyPot / (cicles[cicleNumber].numTickets-1);\n\t}\n\n\tevent NewBet(uint indexed cicleNumber, address indexed player, uint instantPrize, uint jackpotChance, uint jackpotResult, bool indexed hasHitJackpot);\n\tfunction bet() public payable {\n\t\trequire (msg.value >= cicles[currentCicle].currentTicketCost);\n\n\t\tcicles[currentCicle].lastBetBlock = block.number;\n\t\tcicles[currentCicle].ticketsByHash[msg.sender] += 1;\n\n\t\tuint commyVal = cicles[currentCicle].currentTicketCost * commyPct / 100;\n\t\tcicles[currentCicle].winnerPot += msg.value - commyVal;\n\t\tcicles[currentCicle].commyPot += commyVal;\n\t\tcicles[currentCicle].numTickets += 1;\n\t\tcicles[currentCicle].currentTicketCost += cicles[currentCicle].currentTicketCost * costIncrementNormal / 1000;\n\t\tcicles[currentCicle].lastJackpotChance = block.number - cicles[currentCicle].initialBlock;\n\t\tcicles[currentCicle].lastPlayer = msg.sender;\n\t\tsetCommyReward(currentCicle);\n\n\t\tif(getJackpotResult(currentCicle) == true)\n\t\t{\n\t\t\temit NewBet(currentCicle, cicles[currentCicle].lastPlayer, cicles[currentCicle].winnerPot, cicles[currentCicle].lastJackpotChance, lastJackpotResult, true);\n\t\t\tendCicle(currentCicle, true);\n\t\t} else {\n\t\t\temit NewBet(currentCicle, msg.sender, 0, cicles[currentCicle].lastJackpotChance, lastJackpotResult, false);\n\t\t}\n\t}\n\n\tfunction getJackpotResult(uint cicleNumber) private returns (bool isWinner) {\n\t\tlastJackpotResult = uint(blockhash(block.number-1)) % jackpotPossibilities;\n\n\t\tif(lastJackpotResult < cicles[cicleNumber].lastJackpotChance) {\n\t\t\tisWinner = true;\n\t\t}\n\t}\n\n\tevent CicleEnded(uint indexed cicleNumber, address winner, uint winnerPrize, uint commyReward, uint lastBlock, bool jackpotVictory);\n\tfunction endCicle(uint cicleNumber, bool jackpotVictory) private {\n\t\tcicles[cicleNumber].isActive = false;\n\t\temit CicleEnded(cicleNumber, cicles[cicleNumber].lastPlayer, cicles[cicleNumber].winnerPot, cicles[cicleNumber].commyReward, block.number, jackpotVictory);\n\t\tcreateNewCicle();\n\t}\n\n\tfunction finishByInactivity(uint cicleNumber) public onlyIfNoActivity(cicleNumber) onlyActiveCicle(cicleNumber){\n\t\tendCicle(cicleNumber, false);\n\t}\n\n\tfunction withdraw(uint cicleNumber) public onlyValidCicle(cicleNumber) onlyInactiveCicle(cicleNumber) onlyWithTickets(cicleNumber) {\n\t\tuint numTickets = cicles[cicleNumber].ticketsByHash[msg.sender];\t\t\t\n\t\tcicles[cicleNumber].ticketsByHash[msg.sender] = 0;\n\n\t\tif(msg.sender != cicles[cicleNumber].lastPlayer){\n\t\t\tmsg.sender.transfer(cicles[cicleNumber].commyReward * numTickets);\n\t\t} else {\n\t\t\tif(numTickets == 1){\n\t\t\t\tmsg.sender.transfer(cicles[cicleNumber].winnerPot);\n\t\t\t} else {\n\t\t\t\tmsg.sender.transfer(cicles[cicleNumber].winnerPot + (cicles[cicleNumber].commyReward * (numTickets - 1)));\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction claimPrizeByInactivity(uint cicleNumber) public onlyValidCicle(cicleNumber) onlyActiveCicle(cicleNumber) onlyIfNoActivity(cicleNumber) onlyLastPlayer(cicleNumber) {\n\t\tendCicle(cicleNumber, false);\n\t\twithdraw(cicleNumber);\n\t}\n\n\t//////\n\t//Getters for dapp:\n\tfunction getCicle(uint cicleNumber) public view returns (address lastPlayer,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint number,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint initialBlock,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint numTickets,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint currentTicketCost,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint lastJackpotChance,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint winnerPot,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint commyPot,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint commyReward,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint lastBetBlock,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbool isActive){\n\t\tCicle memory myCurrentCicle = cicles[cicleNumber];\n\n\t\treturn (myCurrentCicle.lastPlayer,\n\t\t\t\tmyCurrentCicle.number,\n\t\t\t\tmyCurrentCicle.initialBlock,\n\t\t\t\tmyCurrentCicle.numTickets,\n\t\t\t\tmyCurrentCicle.currentTicketCost,\n\t\t\t\tmyCurrentCicle.lastJackpotChance,\n\t\t\t\tmyCurrentCicle.winnerPot,\n\t\t\t\tmyCurrentCicle.commyPot,\n\t\t\t\tmyCurrentCicle.commyReward,\n\t\t\t\tmyCurrentCicle.lastBetBlock,\n\t\t\t\tmyCurrentCicle.isActive);\n\t}\n\n\tfunction getMyTickets(address myAddress, uint cicleNumber) public view returns (uint myTickets) {\n\t\treturn cicles[cicleNumber].ticketsByHash[myAddress];\n\t}\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cicleNumber\",\"type\":\"uint256\"}],\"name\":\"getCicle\",\"outputs\":[{\"name\":\"lastPlayer\",\"type\":\"address\"},{\"name\":\"number\",\"type\":\"uint256\"},{\"name\":\"initialBlock\",\"type\":\"uint256\"},{\"name\":\"numTickets\",\"type\":\"uint256\"},{\"name\":\"currentTicketCost\",\"type\":\"uint256\"},{\"name\":\"lastJackpotChance\",\"type\":\"uint256\"},{\"name\":\"winnerPot\",\"type\":\"uint256\"},{\"name\":\"commyPot\",\"type\":\"uint256\"},{\"name\":\"commyReward\",\"type\":\"uint256\"},{\"name\":\"lastBetBlock\",\"type\":\"uint256\"},{\"name\":\"isActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cicleNumber\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maintenanceFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"myAddress\",\"type\":\"address\"},{\"name\":\"cicleNumber\",\"type\":\"uint256\"}],\"name\":\"getMyTickets\",\"outputs\":[{\"name\":\"myTickets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cicleNumber\",\"type\":\"uint256\"}],\"name\":\"finishByInactivity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winnerPct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numBlocksForceEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commyPct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastJackpotResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotPossibilities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCicle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cicleNumber\",\"type\":\"uint256\"}],\"name\":\"claimPrizeByInactivity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cicles\",\"outputs\":[{\"name\":\"lastPlayer\",\"type\":\"address\"},{\"name\":\"number\",\"type\":\"uint256\"},{\"name\":\"initialBlock\",\"type\":\"uint256\"},{\"name\":\"numTickets\",\"type\":\"uint256\"},{\"name\":\"currentTicketCost\",\"type\":\"uint256\"},{\"name\":\"lastJackpotChance\",\"type\":\"uint256\"},{\"name\":\"winnerPot\",\"type\":\"uint256\"},{\"name\":\"commyPot\",\"type\":\"uint256\"},{\"name\":\"commyReward\",\"type\":\"uint256\"},{\"name\":\"lastBetBlock\",\"type\":\"uint256\"},{\"name\":\"isActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cicleNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"firstBlock\",\"type\":\"uint256\"}],\"name\":\"NewCicle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cicleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"instantPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotChance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotResult\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"hasHitJackpot\",\"type\":\"bool\"}],\"name\":\"NewBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cicleNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"commyReward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotVictory\",\"type\":\"bool\"}],\"name\":\"CicleEnded\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600155611680600255624c4b4060035560146004556050600555600560075566d529ae9e860000600855655af3107a4000600955601e600a556032600b5534801561005057600080fd5b506118da806100606000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806311610c25146100e05780632d1b34ce146100ea5780632e1a7d4d146101a15780632e2a73ee146101ce578063488a6b0f1461022557806351ef8e76146102865780635bdc89d8146102b3578063a3a0a3fd146102de578063af95cb0314610309578063cb253ab114610334578063e1c7392a1461035f578063f4e86fa614610369578063f6f2e28714610394578063fc7ad3de146103bf578063fee9b9f7146103ec575b600080fd5b6100e86104a3565b005b3480156100f657600080fd5b5061011560048036038101908080359060200190929190505050610851565b604051808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018b81526020018a8152602001898152602001888152602001878152602001868152602001858152602001848152602001838152602001821515151581526020019b50505050505050505050505060405180910390f35b3480156101ad57600080fd5b506101cc600480360381019080803590602001909291905050506109b7565b005b3480156101da57600080fd5b506101e3610cd1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561023157600080fd5b50610270600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cf6565b6040518082815260200191505060405180910390f35b34801561029257600080fd5b506102b160048036038101908080359060200190929190505050610d54565b005b3480156102bf57600080fd5b506102c8610dc4565b6040518082815260200191505060405180910390f35b3480156102ea57600080fd5b506102f3610dca565b6040518082815260200191505060405180910390f35b34801561031557600080fd5b5061031e610dd0565b6040518082815260200191505060405180910390f35b34801561034057600080fd5b50610349610dd6565b6040518082815260200191505060405180910390f35b610367610ddc565b005b34801561037557600080fd5b5061037e610f08565b6040518082815260200191505060405180910390f35b3480156103a057600080fd5b506103a9610f0e565b6040518082815260200191505060405180910390f35b3480156103cb57600080fd5b506103ea60048036038101908080359060200190929190505050610f14565b005b3480156103f857600080fd5b5061041760048036038101908080359060200190929190505050611012565b604051808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018b81526020018a8152602001898152602001888152602001878152602001868152602001858152602001848152602001838152602001821515151581526020019b50505050505050505050505060405180910390f35b6000600c600060015481526020019081526020016000206005015434101515156104cc57600080fd5b43600c60006001548152602001908152602001600020600a01819055506001600c6000600154815260200190815260200160002060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506064600554600c60006001548152602001908152602001600020600501540281151561057557fe5b049050803403600c600060015481526020019081526020016000206007016000828254019250508190555080600c60006001548152602001908152602001600020600801600082825401925050819055506001600c60006001548152602001908152602001600020600401600082825401925050819055506103e8600754600c60006001548152602001908152602001600020600501540281151561061657fe5b04600c6000600154815260200190815260200160002060050160008282540192505081905550600c60006001548152602001908152602001600020600301544303600c600060015481526020019081526020016000206006018190555033600c6000600154815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506106d5600154611099565b600115156106e46001546110f1565b151514156107cd5760011515600c6000600154815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166001547fe59157e94e2d6d670619a4ccb730b9b2b4e523f2c35f8f2eab57355b058dda3b600c6000600154815260200190815260200160002060070154600c600060015481526020019081526020016000206006015460065460405180848152602001838152602001828152602001935050505060405180910390a46107c86001546001611139565b61084e565b600015153373ffffffffffffffffffffffffffffffffffffffff166001547fe59157e94e2d6d670619a4ccb730b9b2b4e523f2c35f8f2eab57355b058dda3b6000600c600060015481526020019081526020016000206006015460065460405180848152602001838152602001828152602001935050505060405180910390a45b50565b600080600080600080600080600080600061086a61183b565b600c60008e815260200190815260200160002061016060405190810160405290816001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b820160009054906101000a900460ff1615151515815250509050806000015181602001518260400151836060015184608001518560a001518660c001518760e001518861010001518961012001518a61014001519b509b509b509b509b509b509b509b509b509b509b505091939597999b90929496989a50565b60008160015481111515156109cb57600080fd5b8260001515600c6000838152602001908152602001600020600b0160009054906101000a900460ff161515141515610a0257600080fd5b836000600c600083815260200190815260200160002060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610a6557600080fd5b600c600086815260200190815260200160002060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205493506000600c600087815260200190815260200160002060000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600c600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610be3573373ffffffffffffffffffffffffffffffffffffffff166108fc85600c600089815260200190815260200160002060090154029081150290604051600060405180830381858888f19350505050158015610bdd573d6000803e3d6000fd5b50610cca565b6001841415610c4e573373ffffffffffffffffffffffffffffffffffffffff166108fc600c6000888152602001908152602001600020600701549081150290604051600060405180830381858888f19350505050158015610c48573d6000803e3d6000fd5b50610cc9565b3373ffffffffffffffffffffffffffffffffffffffff166108fc60018603600c60008981526020019081526020016000206009015402600c600089815260200190815260200160002060070154019081150290604051600060405180830381858888f19350505050158015610cc7573d6000803e3d6000fd5b505b5b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c600083815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b80600254600c6000838152602001908152602001600020600a01544303111515610d7d57600080fd5b8160011515600c6000838152602001908152602001600020600b0160009054906101000a900460ff161515141515610db457600080fd5b610dbf836000611139565b505050565b60045481565b60025481565b60055481565b60065481565b600080600154141515610dee57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e3661125e565b3460088190555060646004543402811515610e4d57fe5b04905080600c6000600154815260200190815260200160002060070160008282540192505081905550803403600c6000600154815260200190815260200160002060080160008282540192505081905550600a54600c6000600154815260200190815260200160002060080154600c600060015481526020019081526020016000206007015401811515610edd57fe5b04600c6000600154815260200190815260200160002060050181905550610f05600154611099565b50565b60035481565b60015481565b806001548111151515610f2657600080fd5b8160011515600c6000838152602001908152602001600020600b0160009054906101000a900460ff161515141515610f5d57600080fd5b82600254600c6000838152602001908152602001600020600a01544303111515610f8657600080fd5b83600c600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ff757600080fd5b611002856000611139565b61100b856109b7565b5050505050565b600c6020528060005260406000206000915090508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201549080600301549080600401549080600501549080600601549080600701549080600801549080600901549080600a01549080600b0160009054906101000a900460ff1690508b565b6001600c60008381526020019081526020016000206004015403600c6000838152602001908152602001600020600801548115156110d357fe5b04600c60008381526020019081526020016000206009018190555050565b600060035460014303406001900481151561110857fe5b06600681905550600c600083815260200190815260200160002060060154600654101561113457600190505b919050565b6000600c6000848152602001908152602001600020600b0160006101000a81548160ff021916908315150217905550817fdfeaad39a9f92cbbef9d863fb692a07004353957f89d4ef30098a0c0bce60be4600c600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c600086815260200190815260200160002060070154600c6000878152602001908152602001600020600901544386604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001821515151581526020019550505050505060405180910390a261125a61125e565b5050565b60018060008282540192505081905550610160604051908101604052806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001548152602001438152602001600b548152602001600081526020016000815260200160008152602001600081526020016000815260200143815260200160001515815250600c6000600154815260200190815260200160002060008201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816002015560408201518160030155606082015181600401556080820151816005015560a0820151816006015560c0820151816007015560e08201518160080155610100820151816009015561012082015181600a015561014082015181600b0160006101000a81548160ff021916908315150217905550905050600b54600c6000600154815260200190815260200160002060000160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600180541415156117ce576000600c60006001805403815260200190815260200160002060000160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600b54600c600060018054038152602001908152602001600020600901540211156115f55760646004546008540281151561151a57fe5b04600c600060015481526020019081526020016000206007018190555060646005546008540281151561154957fe5b04600c60006001548152602001908152602001600020600801819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600854600b54600c6000600180540381526020019081526020016000206009015402039081150290604051600060405180830381858888f193505050501580156115ef573d6000803e3d6000fd5b50611724565b600b54600c60006001805403815260200190815260200160002060040154141561168c57600c60006001805403815260200190815260200160002060070154600c6000600154815260200190815260200160002060070181905550600c60006001805403815260200190815260200160002060080154600c6000600154815260200190815260200160002060080181905550611723565b6064600454600b54600c6000600180540381526020019081526020016000206009015402028115156116ba57fe5b04600c60006001548152602001908152602001600020600701819055506064600554600b54600c60006001805403815260200190815260200160002060090154020281151561170557fe5b04600c60006001548152602001908152602001600020600801819055505b5b61172f600154611099565b600a54600c6000600154815260200190815260200160002060080154600c60006001548152602001908152602001600020600701540181151561176e57fe5b04600c6000600154815260200190815260200160002060050181905550600954600c600060015481526020019081526020016000206005015410156117cd57600954600c60006001548152602001908152602001600020600501819055505b5b6001600c60006001548152602001908152602001600020600b0160006101000a81548160ff0219169083151502179055506001547f64a83fe90a5ad4d4ae11fe9badc232bfc8fa4bdbcc383f3bdd9701315b8fb8cb436040518082815260200191505060405180910390a2565b61016060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815250905600a165627a7a723058207f5b58c02d7b81964445ccda85073c77af18c51c43b4e53c6c6762eef7d6dbb80029"
}