{
  "address": "0x5301eae39a4cba1cc2a74e861fded062ca3e3420",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Centaure",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-23\n*/\n\npragma solidity ^0.4.18;\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) public pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) public pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// Centaure\n// ----------------------------------------------------------------------------\ncontract Centaure is ERC20Interface, Owned, SafeMath {\n    string public  name;\n    string public symbol;\n    uint8 public decimals;\n    uint public _totalSupply;\n    uint public _tokens;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n  \tstruct TokenLock { uint8 id; uint start; uint256 totalAmount;  uint256 amountWithDrawn; uint duration; uint8 withdrawSteps; }\n\n    TokenLock public futureDevLock = TokenLock({\n        id: 1,\n        start: now,\n        totalAmount: 7500000000000000000000000,\n        amountWithDrawn: 0,\n        duration: 180 days,\n        withdrawSteps: 3\n    });\n\n    TokenLock public advisorsLock = TokenLock({\n        id: 2,\n        start: now,\n        totalAmount: 2500000000000000000000000,\n        amountWithDrawn: 0,\n        duration: 180 days,\n        withdrawSteps: 1\n    });\n\n    TokenLock public teamLock = TokenLock({\n        id: 3,\n        start: now,\n        totalAmount: 6000000000000000000000000,\n        amountWithDrawn: 0,\n        duration: 180 days,\n        withdrawSteps: 6\n    });\n\n    function Centaure() public {\n        symbol = \"CEN\";\n        name = \"Centaure Token\";\n        decimals = 18;\n\n        _totalSupply = 50000000* 10**uint(decimals);\n\n        balances[owner] = _totalSupply;\n        Transfer(address(0), owner, _totalSupply);\n\n        lockTokens(futureDevLock);\n        lockTokens(advisorsLock);\n        lockTokens(teamLock);\n    }\n\n    function lockTokens(TokenLock lock) internal {\n        balances[owner] = safeSub(balances[owner], lock.totalAmount);\n        balances[address(0)] = safeAdd(balances[address(0)], lock.totalAmount);\n        Transfer(owner, address(0), lock.totalAmount);\n    }\n\n    function withdrawLockedTokens() external onlyOwner {\n        if(unlockTokens(futureDevLock)){\n          futureDevLock.start = now;\n        }\n        if(unlockTokens(advisorsLock)){\n          advisorsLock.start = now;\n        }\n        if(unlockTokens(teamLock)){\n          teamLock.start = now;\n        }\n    }\n\n\tfunction unlockTokens(TokenLock lock) internal returns (bool) {\n        uint lockReleaseTime = lock.start + lock.duration;\n\n        if(lockReleaseTime < now && lock.amountWithDrawn < lock.totalAmount) {\n            if(lock.withdrawSteps > 1){\n                _tokens = safeDiv(lock.totalAmount, lock.withdrawSteps);\n            }else{\n                _tokens = safeSub(lock.totalAmount, lock.amountWithDrawn);\n            }\n\n            balances[owner] = safeAdd(balances[owner], _tokens);\n            balances[address(0)] = safeSub(balances[address(0)], _tokens);\n            Transfer(address(0), owner, _tokens);\n\n            if(lock.id==1 && lock.amountWithDrawn < lock.totalAmount){\n              futureDevLock.amountWithDrawn = safeAdd(futureDevLock.amountWithDrawn, _tokens);\n            }\n            if(lock.id==2 && lock.amountWithDrawn < lock.totalAmount){\n              advisorsLock.amountWithDrawn = safeAdd(advisorsLock.amountWithDrawn, _tokens);\n            }\n            if(lock.id==3 && lock.amountWithDrawn < lock.totalAmount) {\n              teamLock.amountWithDrawn = safeAdd(teamLock.amountWithDrawn, _tokens);\n              teamLock.withdrawSteps = 1;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply  - balances[address(0)];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account tokenOwner\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to to account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for spender to transferFrom(...) tokens\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer tokens from the from account to the to account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the from account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = safeSub(balances[from], tokens);\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for spender to transferFrom(...) tokens\n    // from the token owner's account. The spender contract function\n    // receiveApproval(...) is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Don't accept ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n}",
  "bytecode": "606060405260c060405190810160405280600160ff1681526020014281526020016a06342fd08f00f63780000081526020016000815260200162ed4e008152602001600360ff16815250600960008201518160000160006101000a81548160ff021916908360ff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908360ff160217905550505060c060405190810160405280600260ff1681526020014281526020016a021165458500521280000081526020016000815260200162ed4e008152602001600160ff16815250600f60008201518160000160006101000a81548160ff021916908360ff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908360ff160217905550505060c060405190810160405280600360ff1681526020014281526020016a04f68ca6d8cd91c600000081526020016000815260200162ed4e008152602001600660ff16815250601560008201518160000160006101000a81548160ff021916908360ff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908360ff160217905550505034156200022957600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600381526020017f43454e000000000000000000000000000000000000000000000000000000000081525060039080519060200190620002b692919062000839565b506040805190810160405280600e81526020017f43656e746175726520546f6b656e000000000000000000000000000000000000815250600290805190602001906200030492919062000839565b506012600460006101000a81548160ff021916908360ff160217905550600460009054906101000a900460ff1660ff16600a0a6302faf08002600581905550600554600760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6005546040518082815260200191505060405180910390a3620004c1600960c060405190810160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660ff1660ff1681525050620005e36401000000000262001d2b176401000000009004565b6200054f600f60c060405190810160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660ff1660ff1681525050620005e36401000000000262001d2b176401000000009004565b620005dd601560c060405190810160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660ff1660ff1681525050620005e36401000000000262001d2b176401000000009004565b620008e8565b62000667600760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548260400151620007ff64010000000002620012b8176401000000009004565b600760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200072e600760008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482604001516200081c6401000000000262001928176401000000009004565b600760008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604001516040518082815260200191505060405180910390a350565b60008282111515156200081157600080fd5b818303905092915050565b600081830190508281101515156200083357600080fd5b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200087c57805160ff1916838001178555620008ad565b82800160010185558215620008ad579182015b82811115620008ac5782518255916020019190600101906200088f565b5b509050620008bc9190620008c0565b5090565b620008e591905b80821115620008e1576000816000905550600101620008c7565b5090565b90565b611f4780620008f86000396000f300606060405260043610610149576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461014e578063095ea7b3146101dc57806318160ddd1461023657806323b872dd1461025f578063269cdaac146102d8578063313ce567146102ed5780633eaaf86b1461031c5780634f64aa091461034557806370a082311461039d57806379ba5097146103ea5780638970d84c146103ff5780638da5cb5b1461042857806395d89b411461047d5780639d2d912e1461050b578063a293d1e814610563578063a9059cbb146105a3578063b5931f7c146105fd578063ba72cc361461063d578063cae9ca5114610695578063d05c78da14610732578063d4ee1d9014610772578063dc39d06d146107c7578063dd62ed3e14610821578063e6cb90131461088d578063f2fde38b146108cd575b600080fd5b341561015957600080fd5b610161610906565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a1578082015181840152602081019050610186565b50505050905090810190601f1680156101ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101e757600080fd5b61021c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506109a4565b604051808215151515815260200191505060405180910390f35b341561024157600080fd5b610249610a96565b6040518082815260200191505060405180910390f35b341561026a57600080fd5b6102be600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ae1565b604051808215151515815260200191505060405180910390f35b34156102e357600080fd5b6102eb610d71565b005b34156102f857600080fd5b610300610f66565b604051808260ff1660ff16815260200191505060405180910390f35b341561032757600080fd5b61032f610f79565b6040518082815260200191505060405180910390f35b341561035057600080fd5b610358610f7f565b604051808760ff1660ff1681526020018681526020018581526020018481526020018381526020018260ff1660ff168152602001965050505050505060405180910390f35b34156103a857600080fd5b6103d4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fc3565b6040518082815260200191505060405180910390f35b34156103f557600080fd5b6103fd61100c565b005b341561040a57600080fd5b6104126111ab565b6040518082815260200191505060405180910390f35b341561043357600080fd5b61043b6111b1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561048857600080fd5b6104906111d6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104d05780820151818401526020810190506104b5565b50505050905090810190601f1680156104fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561051657600080fd5b61051e611274565b604051808760ff1660ff1681526020018681526020018581526020018481526020018381526020018260ff1660ff168152602001965050505050505060405180910390f35b341561056e57600080fd5b61058d60048080359060200190919080359060200190919050506112b8565b6040518082815260200191505060405180910390f35b34156105ae57600080fd5b6105e3600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506112d4565b604051808215151515815260200191505060405180910390f35b341561060857600080fd5b610627600480803590602001909190803590602001909190505061145d565b6040518082815260200191505060405180910390f35b341561064857600080fd5b610650611481565b604051808760ff1660ff1681526020018681526020018581526020018481526020018381526020018260ff1660ff168152602001965050505050505060405180910390f35b34156106a057600080fd5b610718600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506114c5565b604051808215151515815260200191505060405180910390f35b341561073d57600080fd5b61075c600480803590602001909190803590602001909190505061170b565b6040518082815260200191505060405180910390f35b341561077d57600080fd5b61078561173c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107d257600080fd5b610807600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611762565b604051808215151515815260200191505060405180910390f35b341561082c57600080fd5b610877600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118a1565b6040518082815260200191505060405180910390f35b341561089857600080fd5b6108b76004808035906020019091908035906020019091905050611928565b6040518082815260200191505060405180910390f35b34156108d857600080fd5b610904600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611944565b005b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561099c5780601f106109715761010080835404028352916020019161099c565b820191906000526020600020905b81548152906001019060200180831161097f57829003601f168201915b505050505081565b600081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600760008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460055403905090565b6000610b2c600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836112b8565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bf5600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836112b8565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cbe600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611928565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dcc57600080fd5b610e44600960c060405190810160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660ff1660ff16815250506119e3565b15610e5457426009600101819055505b610ecc600f60c060405190810160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660ff1660ff16815250506119e3565b15610edc5742600f600101819055505b610f54601560c060405190810160405290816000820160009054906101000a900460ff1660ff1660ff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660ff1660ff16815250506119e3565b15610f6457426015600101819055505b565b600460009054906101000a900460ff1681565b60055481565b600f8060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561106857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561126c5780601f106112415761010080835404028352916020019161126c565b820191906000526020600020905b81548152906001019060200180831161124f57829003601f168201915b505050505081565b60098060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b60008282111515156112c957600080fd5b818303905092915050565b600061131f600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836112b8565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113ab600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611928565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000808211151561146d57600080fd5b818381151561147857fe5b04905092915050565b60158060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b600082600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156116a2578082015181840152602081019050611687565b50505050905090810190601f1680156116cf5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15156116f057600080fd5b5af115156116fd57600080fd5b505050600190509392505050565b60008183029050600083148061172b575081838281151561172857fe5b04145b151561173657600080fd5b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117bf57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561188257600080fd5b5af1151561188f57600080fd5b50505060405180519050905092915050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000818301905082811015151561193e57600080fd5b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561199f57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080826080015183602001510190504281108015611a09575082604001518360600151105b15611d205760018360a0015160ff161115611a3e57611a3383604001518460a0015160ff1661145d565b600681905550611a57565b611a50836040015184606001516112b8565b6006819055505b611ac3600760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600654611928565b600760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b72600760008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546006546112b8565b600760008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006546040518082815260200191505060405180910390a36001836000015160ff16148015611c5c575082604001518360600151105b15611c7c57611c72600960030154600654611928565b6009600301819055505b6002836000015160ff16148015611c9a575082604001518360600151105b15611cba57611cb0600f60030154600654611928565b600f600301819055505b6003836000015160ff16148015611cd8575082604001518360600151105b15611d1757611cee601560030154600654611928565b6015600301819055506001601560050160006101000a81548160ff021916908360ff1602179055505b60019150611d25565b600091505b50919050565b611d99600760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482604001516112b8565b600760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e4a600760008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548260400151611928565b600760008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604001516040518082815260200191505060405180910390a3505600a165627a7a72305820d1b4e9dc679a05f72d73542601fe3dc11b6a088bbf92a89c6b037d1ced1db8f00029"
}