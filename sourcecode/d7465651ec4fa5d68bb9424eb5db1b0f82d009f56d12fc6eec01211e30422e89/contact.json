{
  "address": "0xac0f9620c5940085eb5f3a07210d890aa4ceee11",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Dispatch",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-30\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/lib/ownership/Ownable.sol\n\ncontract Ownable {\n    address public owner;\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\n\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n    constructor() public { owner = msg.sender; }\n\n    /// @dev Throws if called by any contract other than latest designated caller\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\n    /// @param newOwner The address to transfer ownership to.\n    function transferOwnership(address newOwner) public onlyOwner {\n       require(newOwner != address(0));\n       emit OwnershipTransferred(owner, newOwner);\n       owner = newOwner;\n    }\n}\n\n// File: contracts/lib/ownership/ZapCoordinatorInterface.sol\n\ncontract ZapCoordinatorInterface is Ownable {\n\tfunction addImmutableContract(string contractName, address newAddress) external;\n\tfunction updateContract(string contractName, address newAddress) external;\n\tfunction getContractName(uint index) public view returns (string);\n\tfunction getContract(string contractName) public view returns (address);\n\tfunction updateAllDependencies() external;\n}\n\n// File: contracts/lib/ownership/Upgradable.sol\n\npragma solidity ^0.4.24;\n\ncontract Upgradable {\n\n\taddress coordinatorAddr;\n\tZapCoordinatorInterface coordinator;\n\n\tconstructor(address c) public{\n\t\tcoordinatorAddr = c;\n\t\tcoordinator = ZapCoordinatorInterface(c);\n\t}\n\n    function updateDependencies() external coordinatorOnly {\n       _updateDependencies();\n    }\n\n    function _updateDependencies() internal;\n\n    modifier coordinatorOnly() {\n    \trequire(msg.sender == coordinatorAddr, \"Error: Coordinator Only Function\");\n    \t_;\n    }\n}\n\n// File: contracts/lib/lifecycle/Destructible.sol\n\ncontract Destructible is Ownable {\n\tfunction selfDestruct() public onlyOwner {\n\t\tselfdestruct(owner);\n\t}\n}\n\n// File: contracts/lib/platform/Client.sol\n\ncontract Client1 {\n    /// @dev callback that provider will call after Dispatch.query() call\n    /// @param id request id\n    /// @param response1 first provider-specified param\n    function callback(uint256 id, string response1) external;\n}\ncontract Client2 {\n    /// @dev callback that provider will call after Dispatch.query() call\n    /// @param id request id\n    /// @param response1 first provider-specified param\n    /// @param response2 second provider-specified param\n    function callback(uint256 id, string response1, string response2) external;\n}\ncontract Client3 {\n    /// @dev callback that provider will call after Dispatch.query() call\n    /// @param id request id\n    /// @param response1 first provider-specified param\n    /// @param response2 second provider-specified param\n    /// @param response3 third provider-specified param\n    function callback(uint256 id, string response1, string response2, string response3) external;\n}\ncontract Client4 {\n    /// @dev callback that provider will call after Dispatch.query() call\n    /// @param id request id\n    /// @param response1 first provider-specified param\n    /// @param response2 second provider-specified param\n    /// @param response3 third provider-specified param\n    /// @param response4 fourth provider-specified param\n    function callback(uint256 id, string response1, string response2, string response3, string response4) external;\n}\n\ncontract ClientBytes32Array {\n    /// @dev callback that provider will call after Dispatch.query() call\n    /// @param id request id\n    /// @param response bytes32 array\n    function callback(uint256 id, bytes32[] response) external;\n}\n\ncontract ClientIntArray{\n    /// @dev callback that provider will call after Dispatch.query() call\n    /// @param id request id\n    /// @param response int array\n    function callback(uint256 id, int[] response) external;\n}\n\n// File: contracts/lib/platform/OnChainProvider.sol\n\ncontract OnChainProvider {\n    /// @dev function for requesting data from on-chain provider\n    /// @param id request id\n    /// @param userQuery query string\n    /// @param endpoint endpoint specifier ala 'smart_contract'\n    /// @param endpointParams endpoint-specific params\n    function receive(uint256 id, string userQuery, bytes32 endpoint, bytes32[] endpointParams, bool onchainSubscriber) external;\n}\n\n// File: contracts/platform/bondage/BondageInterface.sol\n\ncontract BondageInterface {\n    function bond(address, bytes32, uint256) external returns(uint256);\n    function unbond(address, bytes32, uint256) external returns (uint256);\n    function delegateBond(address, address, bytes32, uint256) external returns(uint256);\n    function escrowDots(address, address, bytes32, uint256) external returns (bool);\n    function releaseDots(address, address, bytes32, uint256) external returns (bool);\n    function returnDots(address, address, bytes32, uint256) external returns (bool success);\n    function calcZapForDots(address, bytes32, uint256) external view returns (uint256);\n    function currentCostOfDot(address, bytes32, uint256) public view returns (uint256);\n    function getDotsIssued(address, bytes32) public view returns (uint256);\n    function getBoundDots(address, address, bytes32) public view returns (uint256);\n    function getZapBound(address, bytes32) public view returns (uint256);\n    function dotLimit( address, bytes32) public view returns (uint256);\n}\n\n// File: contracts/platform/dispatch/DispatchInterface.sol\n\ninterface DispatchInterface {\n    function query(address, string, bytes32, bytes32[]) external returns (uint256);\n    function respond1(uint256, string) external returns (bool);\n    function respond2(uint256, string, string) external returns (bool);\n    function respond3(uint256, string, string, string) external returns (bool);\n    function respond4(uint256, string, string, string, string) external returns (bool);\n    function respondBytes32Array(uint256, bytes32[]) external returns (bool);\n    function respondIntArray(uint256,int[] ) external returns (bool);\n    function cancelQuery(uint256) external;\n    function getProvider(uint256 id) public view returns (address);\n    function getSubscriber(uint256 id) public view returns (address);\n    function getEndpoint(uint256 id) public view returns (bytes32);\n    function getStatus(uint256 id) public view returns (uint256);\n    function getCancel(uint256 id) public view returns (uint256);\n    function getUserQuery(uint256 id) public view returns (string);\n    function getSubscriberOnchain(uint256 id) public view returns (bool);\n}\n\n// File: contracts/platform/database/DatabaseInterface.sol\n\ncontract DatabaseInterface is Ownable {\n\tfunction setStorageContract(address _storageContract, bool _allowed) public;\n\t/*** Bytes32 ***/\n\tfunction getBytes32(bytes32 key) external view returns(bytes32);\n\tfunction setBytes32(bytes32 key, bytes32 value) external;\n\t/*** Number **/\n\tfunction getNumber(bytes32 key) external view returns(uint256);\n\tfunction setNumber(bytes32 key, uint256 value) external;\n\t/*** Bytes ***/\n\tfunction getBytes(bytes32 key) external view returns(bytes);\n\tfunction setBytes(bytes32 key, bytes value) external;\n\t/*** String ***/\n\tfunction getString(bytes32 key) external view returns(string);\n\tfunction setString(bytes32 key, string value) external;\n\t/*** Bytes Array ***/\n\tfunction getBytesArray(bytes32 key) external view returns (bytes32[]);\n\tfunction getBytesArrayIndex(bytes32 key, uint256 index) external view returns (bytes32);\n\tfunction getBytesArrayLength(bytes32 key) external view returns (uint256);\n\tfunction pushBytesArray(bytes32 key, bytes32 value) external;\n\tfunction setBytesArrayIndex(bytes32 key, uint256 index, bytes32 value) external;\n\tfunction setBytesArray(bytes32 key, bytes32[] value) external;\n\t/*** Int Array ***/\n\tfunction getIntArray(bytes32 key) external view returns (int[]);\n\tfunction getIntArrayIndex(bytes32 key, uint256 index) external view returns (int);\n\tfunction getIntArrayLength(bytes32 key) external view returns (uint256);\n\tfunction pushIntArray(bytes32 key, int value) external;\n\tfunction setIntArrayIndex(bytes32 key, uint256 index, int value) external;\n\tfunction setIntArray(bytes32 key, int[] value) external;\n\t/*** Address Array ***/\n\tfunction getAddressArray(bytes32 key) external view returns (address[]);\n\tfunction getAddressArrayIndex(bytes32 key, uint256 index) external view returns (address);\n\tfunction getAddressArrayLength(bytes32 key) external view returns (uint256);\n\tfunction pushAddressArray(bytes32 key, address value) external;\n\tfunction setAddressArrayIndex(bytes32 key, uint256 index, address value) external;\n\tfunction setAddressArray(bytes32 key, address[] value) external;\n}\n\n// File: contracts/platform/dispatch/Dispatch.sol\n\n// v1.0\n\n\n\n\n\n\n\n\ncontract Dispatch is Destructible, DispatchInterface, Upgradable { \n\n    enum Status { Pending, Fulfilled, Canceled }\n\n    //event data provider is listening for, containing all relevant request parameters\n    event Incoming(\n        uint256 indexed id,\n        address indexed provider,\n        address indexed subscriber,\n        string query,\n        bytes32 endpoint,\n        bytes32[] endpointParams,\n        bool onchainSubscriber\n    );\n\n    event FulfillQuery(\n        address indexed subscriber,\n        address indexed provider,\n        bytes32 indexed endpoint\n    );\n\n    event OffchainResponse(\n        uint256 indexed id,\n        address indexed subscriber,\n        address indexed provider,\n        bytes32[] response\n    );\n\n    event OffchainResponseInt(\n        uint256 indexed id,\n        address indexed subscriber,\n        address indexed provider,\n        int[] response\n    );\n\n    event OffchainResult1(\n        uint256 indexed id,\n        address indexed subscriber,\n        address indexed provider,\n        string response1\n    );\n\n    event OffchainResult2(\n        uint256 indexed id,\n        address indexed subscriber,\n        address indexed provider,\n        string response1,\n        string response2\n    );\n\n    event OffchainResult3(\n        uint256 indexed id,\n        address indexed subscriber,\n        address indexed provider,\n        string response1,\n        string response2,\n        string response3\n    );\n\n    event OffchainResult4(\n        uint256 indexed id,\n        address indexed subscriber,\n        address indexed provider,\n        string response1,\n        string response2,\n        string response3,\n        string response4\n    );\n\n    event CanceledRequest(\n        uint256 indexed id,\n        address indexed subscriber,\n        address indexed provider\n    );\n\n    event RevertCancelation(\n        uint256 indexed id,\n        address indexed subscriber,\n        address indexed provider\n    );\n\n    BondageInterface public bondage;\n    address public bondageAddress;\n\n    DatabaseInterface public db;\n\n    constructor(address c) Upgradable(c) public {\n        //_updateDependencies();\n    }\n\n    function _updateDependencies() internal {\n        address databaseAddress = coordinator.getContract(\"DATABASE\");\n        db = DatabaseInterface(databaseAddress);\n\n        bondageAddress = coordinator.getContract(\"BONDAGE\");\n        bondage = BondageInterface(bondageAddress);\n    }\n\n    /// @notice Escrow dot for oracle request\n    /// @dev Called by user contract\n    function query(\n        address provider,           // data provider address\n        string userQuery,           // query string\n        bytes32 endpoint,           // endpoint specifier ala 'smart_contract'\n        bytes32[] endpointParams   // endpoint-specific params\n        )\n        external\n        returns (uint256 id)\n    {\n        uint256 dots = bondage.getBoundDots(msg.sender, provider, endpoint);\n        bool onchainProvider = isContract(provider);\n        bool onchainSubscriber = isContract(msg.sender);\n        if(dots >= 1) {\n            //enough dots\n            bondage.escrowDots(msg.sender, provider, endpoint, 1);\n\n            id = uint256(keccak256(abi.encodePacked(block.number, now, userQuery, msg.sender, provider)));\n\n            createQuery(id, provider, msg.sender, endpoint, userQuery, onchainSubscriber);\n            if(onchainProvider) {\n                OnChainProvider(provider).receive(id, userQuery, endpoint, endpointParams, onchainSubscriber); \n            } else{\n                emit Incoming(id, provider, msg.sender, userQuery, endpoint, endpointParams, onchainSubscriber);\n            }\n        } else { // NOT ENOUGH DOTS\n            revert(\"Subscriber does not have any dots.\");\n        }\n    }\n\n    /// @notice Transfer dots from Bondage escrow to data provider's Holder object under its own address\n    /// @dev Called upon data-provider request fulfillment\n    function fulfillQuery(uint256 id) private returns (bool) {\n        Status status = Status(getStatus(id));\n\n        require(status != Status.Fulfilled, \"Error: Status already fulfilled\");\n\n        address subscriber = getSubscriber(id);\n        address provider = getProvider(id);\n        bytes32 endpoint = getEndpoint(id);\n        \n        if ( status == Status.Canceled ) {\n            uint256 canceled = getCancel(id);\n\n            // Make sure we've canceled in the past,\n            // if it's current block ignore the cancel\n            require(block.number == canceled, \"Error: Cancel ignored\");\n\n            // Uncancel the query\n            setCanceled(id, false);\n\n            // Re-escrow the previously returned dots\n            bondage.escrowDots(subscriber, provider, endpoint, 1);\n\n            // Emit the events\n            emit RevertCancelation(id, subscriber, provider);\n        }\n\n        setFulfilled(id);\n\n        bondage.releaseDots(subscriber, provider, endpoint, 1);\n\n        emit FulfillQuery(subscriber, provider, endpoint);\n\n        return true;\n    }\n\n    /// @notice Cancel a query.\n    /// @dev If responded on the same block, ignore the cancel.\n    function cancelQuery(uint256 id) external {\n        address subscriber = getSubscriber(id);\n        address provider = getProvider(id);\n        bytes32 endpoint = getEndpoint(id);\n\n        require(subscriber == msg.sender, \"Error: Wrong subscriber\");\n        require(Status(getStatus(id)) == Status.Pending, \"Error: Query is not pending\");\n\n        // Cancel the query\n        setCanceled(id, true);\n\n        // Return the dots to the subscriber\n        bondage.returnDots(subscriber, provider, endpoint, 1);\n\n        // Release an event\n        emit CanceledRequest(id, getSubscriber(id), getProvider(id));\n    }\n\n    /// @dev Parameter-count specific method called by data provider in response\n    function respondBytes32Array(\n        uint256 id,\n        bytes32[] response\n    )\n        external\n        returns (bool)\n    {\n        if (getProvider(id) != msg.sender || !fulfillQuery(id))\n            revert();\n        if(getSubscriberOnchain(id)) {\n            ClientBytes32Array(getSubscriber(id)).callback(id, response);\n        }\n        else {\n            emit OffchainResponse(id, getSubscriber(id), msg.sender, response);\n        }\n        return true;\n    }\n\n    /// @dev Parameter-count specific method called by data provider in response\n    function respondIntArray(\n        uint256 id,\n        int[] response\n    )\n        external\n        returns (bool)\n    {\n        if (getProvider(id) != msg.sender || !fulfillQuery(id))\n            revert();\n        if(getSubscriberOnchain(id)) {\n            ClientIntArray(getSubscriber(id)).callback(id, response);\n        }\n        else {\n            emit OffchainResponseInt(id, getSubscriber(id), msg.sender, response);\n        }\n        return true;\n    }\n\n\n    /// @dev Parameter-count specific method called by data provider in response\n    function respond1(\n        uint256 id,\n        string response\n    )\n        external\n        returns (bool)\n    {\n        if (getProvider(id) != msg.sender || !fulfillQuery(id))\n            revert();\n\n        if(getSubscriberOnchain(id)) {\n            Client1(getSubscriber(id)).callback(id, response);\n        }\n        else {\n            emit OffchainResult1(id, getSubscriber(id), msg.sender, response);\n        }\n        return true;\n    }\n\n    /// @dev Parameter-count specific method called by data provider in response\n    function respond2(\n        uint256 id,\n        string response1,\n        string response2\n    )\n        external\n        returns (bool)\n    {\n        if (getProvider(id) != msg.sender || !fulfillQuery(id))\n            revert();\n\n        if(getSubscriberOnchain(id)) {\n            Client2(getSubscriber(id)).callback(id, response1, response2);\n        }\n        else {\n            emit OffchainResult2(id, getSubscriber(id), msg.sender, response1, response2);\n        }\n\n        return true;\n    }\n\n    /// @dev Parameter-count specific method called by data provider in response\n    function respond3(\n        uint256 id,\n        string response1,\n        string response2,\n        string response3\n    )\n        external\n        returns (bool)\n    {\n        if (getProvider(id) != msg.sender || !fulfillQuery(id))\n            revert();\n\n        if(getSubscriberOnchain(id)) {\n            Client3(getSubscriber(id)).callback(id, response1, response2, response3);\n        }\n        else {\n            emit OffchainResult3(id, getSubscriber(id), msg.sender, response1, response2, response3);\n        }\n\n        return true;\n    }\n\n    /// @dev Parameter-count specific method called by data provider in response\n    function respond4(\n        uint256 id,\n        string response1,\n        string response2,\n        string response3,\n        string response4\n    )\n        external\n        returns (bool)\n    {\n        if (getProvider(id) != msg.sender || !fulfillQuery(id))\n            revert();\n\n        if(getSubscriberOnchain(id)) {\n            Client4(getSubscriber(id)).callback(id, response1, response2, response3, response4);\n        }\n        else {\n            emit OffchainResult4(id, getSubscriber(id), msg.sender, response1, response2, response3, response4);\n        }\n\n        return true;\n    }\n\n    /*** STORAGE METHODS ***/\n\n    /// @dev get provider address of request\n    /// @param id request id\n    function getProvider(uint256 id) public view returns (address) {\n        return address(db.getNumber(keccak256(abi.encodePacked('queries', id, 'provider'))));\n    }\n\n    /// @dev get subscriber address of request\n    /// @param id request id\n    function getSubscriber(uint256 id) public view returns (address) {\n        return address(db.getNumber(keccak256(abi.encodePacked('queries', id, 'subscriber'))));\n    }\n\n    /// @dev get endpoint of request\n    /// @param id request id\n    function getEndpoint(uint256 id) public view returns (bytes32) {\n        return db.getBytes32(keccak256(abi.encodePacked('queries', id, 'endpoint')));\n    }\n\n    /// @dev get status of request\n    /// @param id request id\n    function getStatus(uint256 id) public view returns (uint256) {\n        return db.getNumber(keccak256(abi.encodePacked('queries', id, 'status')));\n    }\n\n    /// @dev get the cancelation block of a request\n    /// @param id request id\n    function getCancel(uint256 id) public view returns (uint256) {\n        return db.getNumber(keccak256(abi.encodePacked('queries', id, 'cancelBlock')));\n    }\n\n    /// @dev get user specified query of request\n    /// @param id request id\n    function getUserQuery(uint256 id) public view returns (string) {\n        return db.getString(keccak256(abi.encodePacked('queries', id, 'userQuery')));\n    }\n\n    /// @dev is subscriber contract or offchain \n    /// @param id request id\n    function getSubscriberOnchain(uint256 id) public view returns (bool) {\n        uint res = db.getNumber(keccak256(abi.encodePacked('queries', id, 'onchainSubscriber')));\n        return res == 1 ? true : false;\n    }\n \n    /**** Set Methods ****/\n    function createQuery(\n        uint256 id,\n        address provider,\n        address subscriber,\n        bytes32 endpoint,\n        string userQuery,\n        bool onchainSubscriber\n    ) \n        private\n    {\n        db.setNumber(keccak256(abi.encodePacked('queries', id, 'provider')), uint256(provider));\n        db.setNumber(keccak256(abi.encodePacked('queries', id, 'subscriber')), uint256(subscriber));\n        db.setBytes32(keccak256(abi.encodePacked('queries', id, 'endpoint')), endpoint);\n        db.setString(keccak256(abi.encodePacked('queries', id, 'userQuery')), userQuery);\n        db.setNumber(keccak256(abi.encodePacked('queries', id, 'status')), uint256(Status.Pending));\n        db.setNumber(keccak256(abi.encodePacked('queries', id, 'onchainSubscriber')), onchainSubscriber ? 1 : 0);\n    }\n\n    function setFulfilled(uint256 id) private {\n        db.setNumber(keccak256(abi.encodePacked('queries', id, 'status')), uint256(Status.Fulfilled));\n    }\n\n    function setCanceled(uint256 id, bool canceled) private {\n        if ( canceled ) {\n            db.setNumber(keccak256(abi.encodePacked('queries', id, 'cancelBlock')), block.number);\n            db.setNumber(keccak256(abi.encodePacked('queries', id, 'status')), uint256(Status.Canceled));\n        }\n        else {\n            db.setNumber(keccak256(abi.encodePacked('queries', id, 'cancelBlock')), 0);\n            db.setNumber(keccak256(abi.encodePacked('queries', id, 'status')), uint256(Status.Pending));            \n        }\n    }\n\n    function isContract(address addr) private view returns (bool) {\n        uint size;\n        assembly { size := extcodesize(addr) }\n        return size > 0;\n    }\n}\n\n/*\n/* For use in example contract, see TestContracts.sol\n/*\n/* When User Contract calls ZapDispatch.query(),\n/* 1 oracle specific dot is escrowed by ZapBondage and Incoming event is ted.\n/*\n/* When provider's client hears an Incoming event containing provider's address and responds,\n/* the provider calls a ZapDispatch.respondX function corresponding to number of response params.\n/*\n/* Dots are moved from ZapBondage escrow to data-provider's bond Holder struct,\n/* with data provider address set as self's address.\n/*/ \n\n/*************************************** STORAGE ****************************************\n* 'queries', id, 'provider' => {address} address of provider that this query was sent to\n* 'queries', id, 'subscriber' => {address} address of subscriber that this query was sent by\n* 'queries', id, 'endpoint' => {bytes32} endpoint that this query was sent to\n* 'queries', id, 'status' => {Status} current status of this query\n* 'queries', id, 'cancelBlock' => {uint256} the block number of the cancellation request (0 if none)\n* 'queries', id, 'userQuery' => {uint256} the query that was sent with this queryId\n* 'queries', id, 'onchainSubscriber' => {uint256} 1 -> onchainSubscriber, 0 -> offchainSubscriber\n****************************************************************************************/",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000b007eca49763f31edff95623ed6c23c8c1924a16"
}