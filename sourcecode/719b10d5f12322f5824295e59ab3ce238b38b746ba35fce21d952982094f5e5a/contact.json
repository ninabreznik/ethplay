{
  "address": "0xd9bcf875d0ca721ec89fe49b57c144e7c1f6451e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ReserveBag",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-27\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/interface/PlayerBookInterface.sol\n\ninterface PlayerBookInterface {\n    function getPlayerID(address _addr) external returns(uint256);\n    function getPlayerName(uint256 _pID) external view returns(bytes32);\n    function getPlayerLAff(uint256 _pID) external view returns(uint256);\n    function getPlayerAddr(uint256 _pID) external view returns(address);\n    function getNameFee() external view returns(uint256);\n    function registerNameXIDFromDapp(address _addr, bytes32 _name, uint256 _affCode, bool _all) external payable returns(bool, uint256);\n    function registerNameXaddrFromDapp(address _addr, bytes32 _name, address _affCode, bool _all) external payable returns(bool, uint256);\n    function registerNameXnameFromDapp(address _addr, bytes32 _name, bytes32 _affCode, bool _all) external payable returns(bool, uint256);\n}\n\n// File: contracts/interface/TeamPerfitForwarderInterface.sol\n\ninterface TeamPerfitForwarderInterface {\n    function deposit() external payable returns(bool);\n    function status() external view returns(address, address);\n}\n\n// File: contracts/interface/DRSCoinInterface.sol\n\ninterface DRSCoinInterface {\n    function mint(address _to, uint256 _amount) external;\n    function profitEth() external payable;\n}\n\n// File: contracts/library/SafeMath.sol\n\n/**\n * @title SafeMath v0.1.9\n * @dev Math operations with safety checks that throw on error\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n * - added sqrt\n * - added sq\n * - added pwr \n * - changed asserts to requires with error log outputs\n * - removed div, its useless\n */\nlibrary SafeMath {\n    \n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) \n        internal \n        pure \n        returns (uint256 c) \n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    \n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256) \n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c) \n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n    \n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y) \n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y) \n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n    \n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n    \n    /**\n     * @dev x to the power of y \n     */\n    function pwr(uint256 x, uint256 y)\n        internal \n        pure \n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else \n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n}\n\n// File: contracts/library/NameFilter.sol\n\nlibrary NameFilter {\n    /**\n     * @dev filters name strings\n     * -converts uppercase to lower case.  \n     * -makes sure it does not start/end with a space\n     * -makes sure it does not contain multiple spaces in a row\n     * -cannot be only numbers\n     * -cannot start with 0x \n     * -restricts characters to A-Z, a-z, 0-9, and space.\n     * @return reprocessed string in bytes32 format\n     */\n    function nameFilter(string _input)\n        internal\n        pure\n        returns(bytes32)\n    {\n        bytes memory _temp = bytes(_input);\n        uint256 _length = _temp.length;\n        \n        //sorry limited to 32 characters\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\n        // make sure it doesnt start with or end with space\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\n        // make sure first two characters are not 0x\n        if (_temp[0] == 0x30)\n        {\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\n        }\n        \n        // create a bool to track if we have a non number character\n        bool _hasNonNumber;\n        \n        // convert & check\n        for (uint256 i = 0; i < _length; i++)\n        {\n            // if its uppercase A-Z\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\n            {\n                // convert to lower case a-z\n                _temp[i] = byte(uint(_temp[i]) + 32);\n                \n                // we have a non number\n                if (_hasNonNumber == false)\n                    _hasNonNumber = true;\n            } else {\n                require\n                (\n                    // require character is a space\n                    _temp[i] == 0x20 || \n                    // OR lowercase a-z\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\n                    // or 0-9\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\n                    \"string contains invalid characters\"\n                );\n                // make sure theres not 2x spaces in a row\n                if (_temp[i] == 0x20)\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\n                \n                // see if we have a character other than a number\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\n                    _hasNonNumber = true;    \n            }\n        }\n        \n        require(_hasNonNumber == true, \"string cannot be only numbers\");\n        \n        bytes32 _ret;\n        assembly {\n            _ret := mload(add(_temp, 32))\n        }\n        return (_ret);\n    }\n}\n\n// File: contracts/library/DRSDatasets.sol\n\n// structs ==============================================================================\nlibrary DRSDatasets {\n    //compressedData key\n    // [24-14][13-3][2][1][0]\n        // 0 - new player (bool)\n        // 1 - joined round (bool)\n        // 2 - new  leader (bool)\n        // 3-13 - round end time\n        // 14 - 24 timestamp\n\n    //compressedIDs key\n    // [77-52][51-26][25-0]\n        // 0-25 - pID \n        // 26-51 - winPID\n        // 52-77 - rID\n    struct EventReturns {\n        uint256 compressedData;\n        uint256 compressedIDs;\n\n        address winnerAddr;         // winner address\n        bytes32 winnerName;         // winner name\n        uint256 amountWon;          // amount won\n\n        uint256 newPot;             // amount in new pot\n        uint256 genAmount;          // amount distributed to gen\n        uint256 potAmount;          // amount added to pot\n\n        address genAddr;\n        uint256 genKeyPrice;\n    }\n\n    function setNewPlayerFlag(EventReturns _event) internal pure returns(EventReturns) {\n        _event.compressedData = _event.compressedData + 1;\n        return _event;\n    }\n\n    function setJoinedRoundFlag(EventReturns _event) internal pure returns(EventReturns) {\n        _event.compressedData = _event.compressedData + 10;\n        return _event;\n    }\n\n    function setNewLeaderFlag(EventReturns _event) internal pure returns(EventReturns) {\n        _event.compressedData = _event.compressedData + 100;\n        return _event;\n    }\n\n    function setRoundEndTime(EventReturns _event, uint256 roundEndTime) internal pure returns(EventReturns) {\n        _event.compressedData = _event.compressedData + roundEndTime * (10**3);\n        return _event;\n    }\n\n    function setTimestamp(EventReturns _event, uint256 timestamp) internal pure returns(EventReturns) {\n        _event.compressedData = _event.compressedData + timestamp * (10**14);\n        return _event;\n    }\n\n    function setPID(EventReturns _event, uint256 _pID) internal pure returns(EventReturns) {\n        _event.compressedIDs = _event.compressedIDs + _pID;\n        return _event;\n    }\n\n    function setWinPID(EventReturns _event, uint256 _winPID) internal pure returns(EventReturns) {\n        _event.compressedIDs = _event.compressedIDs + (_winPID * (10**26));\n        return _event;\n    }\n\n    function setRID(EventReturns _event, uint256 _rID) internal pure returns(EventReturns) {\n        _event.compressedIDs = _event.compressedIDs + (_rID * (10**52));\n        return _event;\n    }\n\n    function setWinner(EventReturns _event, address _winnerAddr, bytes32 _winnerName, uint256 _amountWon)\n        internal pure returns(EventReturns) {\n        _event.winnerAddr = _winnerAddr;\n        _event.winnerName = _winnerName;\n        _event.amountWon = _amountWon;\n        return _event;\n    }\n\n    function setGenInfo(EventReturns _event, address _genAddr, uint256 _genKeyPrice)\n        internal pure returns(EventReturns) {\n        _event.genAddr = _genAddr;\n        _event.genKeyPrice = _genKeyPrice;\n    }\n\n    function setNewPot(EventReturns _event, uint256 _newPot) internal pure returns(EventReturns) {\n        _event.newPot = _newPot;\n        return _event;\n    }\n\n    function setGenAmount(EventReturns _event, uint256 _genAmount) internal pure returns(EventReturns) {\n        _event.genAmount = _genAmount;\n        return _event;\n    }\n\n    function setPotAmount(EventReturns _event, uint256 _potAmount) internal pure returns(EventReturns) {\n        _event.potAmount = _potAmount;\n        return _event;\n    }\n\n    struct Player {\n        address addr;   // player address\n        bytes32 name;   // player name\n        uint256 win;    // winnings vault\n        uint256 gen;    // general vault\n        // uint256 aff;    // affiliate vault\n        uint256 lrnd;   // last round played\n        // uint256 laff;   // last affiliate id used\n    }\n\n    struct PlayerRound {\n        uint256 eth;    // eth player has added to round (used for eth limiter)\n        uint256 keys;   // keys\n    }\n\n    struct Round {\n        uint256 plyr;   // pID of player in lead\n\n        uint256 end;    // time ends/ended\n        bool ended;     // has round end function been ran\n        uint256 strt;   // time round started\n        uint256 keys;   // keys\n        uint256 eth;    // total eth in\n        uint256 pot;    // eth to pot (during round) / final amount paid to winner (after round ends)\n    }\n\n    struct BuyInfo {\n        address addr;   // player address\n        bytes32 name;   // player name\n        uint256 pid;    // player id\n        uint256 keyPrice;\n        uint256 keyIndex;\n    }\n}\n\n// File: contracts/DRSEvents.sol\n\ncontract DRSEvents {\n    // fired whenever a player registers a name\n    event onNewName\n    (\n        uint256 indexed playerID,\n        address indexed playerAddress,\n        bytes32 indexed playerName,\n        bool isNewPlayer,\n        // uint256 affiliateID,\n        // address affiliateAddress,\n        // bytes32 affiliateName,\n        uint256 amountPaid,\n        uint256 timeStamp\n    );\n\n    // fired at end of buy or reload\n    event onEndTx\n    (\n        uint256 compressedData,\n        uint256 compressedIDs,\n\n        bytes32 playerName,\n        address playerAddress,\n        uint256 ethIn,\n        uint256 keyIndex,\n\n        address winnerAddr,\n        bytes32 winnerName,\n        uint256 amountWon,\n\n        uint256 newPot,\n        uint256 genAmount,\n        uint256 potAmount,\n\n        address genAddr,\n        uint256 genKeyPrice\n    );\n\n    // fired whenever theres a withdraw\n    event onWithdraw\n    (\n        uint256 indexed playerID,\n        address playerAddress,\n        bytes32 playerName,\n        uint256 ethOut,\n        uint256 timeStamp\n    );\n\n    // fired whenever a withdraw forces end round to be ran\n    event onWithdrawAndDistribute\n    (\n        address playerAddress,\n        bytes32 playerName,\n        uint256 ethOut,\n        uint256 compressedData,\n\n        uint256 compressedIDs,\n\n        address winnerAddr,\n        bytes32 winnerName,\n        uint256 amountWon,\n\n        uint256 newPot,\n        uint256 genAmount\n    );\n\n    // fired whenever a player tries a buy after round timer\n    // hit zero, and causes end round to be ran.\n    event onBuyAndDistribute\n    (\n        address playerAddress,\n        bytes32 playerName,\n        uint256 ethIn,\n        uint256 compressedData,\n\n        uint256 compressedIDs,\n\n        address winnerAddr,\n        bytes32 winnerName,\n        uint256 amountWon,\n\n        uint256 newPot,\n        uint256 genAmount\n    );\n\n    // fired whenever a player tries a reload after round timer\n    // hit zero, and causes end round to be ran.\n    event onReLoadAndDistribute\n    (\n        address playerAddress,\n        bytes32 playerName,\n        uint256 compressedData,\n\n        uint256 compressedIDs,\n\n        address winnerAddr,\n        bytes32 winnerName,\n        uint256 amountWon,\n\n        uint256 newPot,\n        uint256 genAmount\n    );\n\n    event onBuyKeyFailure\n    (\n        uint256 roundID,\n        uint256 indexed playerID,\n        uint256 amount,\n        uint256 keyPrice,\n        uint256 timeStamp\n    );\n}\n\n// File: contracts/ReserveBag.sol\n\ncontract ReserveBag is DRSEvents {\n    using SafeMath for uint256;\n    using NameFilter for string;\n    using DRSDatasets for DRSDatasets.EventReturns;\n\n    TeamPerfitForwarderInterface public teamPerfit;\n    PlayerBookInterface public playerBook;\n    DRSCoinInterface public drsCoin;\n\n    // game settings\n    string constant public name = \"Reserve Bag\";\n    string constant public symbol = \"RB\";\n\n    uint256 constant private initKeyPrice = (10**18);\n\n    uint256 private rndExtra_ = 0;       // length of the very first ICO \n    uint256 private rndGap_ = 0;         // length of ICO phase, set to 1 year for EOS.\n\n    uint256 constant private rndMax_ = 24 hours;                // max length a round timer can be\n    // uint256 constant private rndMax_ = 5 seconds;                // max length a round timer can be\n\n    uint256 public rID_;    // round id number / total rounds that have happened\n\n    uint256 public keyPrice = initKeyPrice;\n    uint256 public keyBought = 0;\n\n    address public owner;\n\n    uint256 public teamPerfitAmuont = 0;\n\n    uint256 public rewardInternal = 36;\n    // uint256 public potRatio = 8;\n    uint256 public keyPriceIncreaseRatio = 8;\n    uint256 public genRatio = 90;\n\n    uint256 public drsCoinDividendRatio = 40;\n    uint256 public teamPerfitRatio = 5;\n\n    uint256 public ethMintDRSCoinRate = 100;\n\n    bool public activated_ = false;\n\n    // PLAYER DATA\n    mapping(address => uint256) public pIDxAddr_;          // (addr => pID) returns player id by address\n    mapping(bytes32 => uint256) public pIDxName_;          // (name => pID) returns player id by name\n    mapping(uint256 => DRSDatasets.Player) public plyr_;   // (pID => data) player data\n    mapping(uint256 => mapping(uint256 => DRSDatasets.PlayerRound)) public plyrRnds_;    // (pID => rID => data) player round data by player id & round id\n    mapping(uint256 => mapping(bytes32 => bool)) public plyrNames_; // (pID => name => bool) list of names a player owns.  (used so you can change your display name amongst any name you own)\n\n    DRSDatasets.BuyInfo[] buyinfos;\n    uint256 private startIndex;\n    uint256 private endIndex;\n\n    // ROUND DATA \n    mapping(uint256 => DRSDatasets.Round) public round_;   // (rID => data) round data\n\n    // event Info(uint256 _value);\n\n    constructor(address _teamPerfit, address _playBook, address _drsCoin) public\n    {\n        owner = msg.sender;\n\n        teamPerfit = TeamPerfitForwarderInterface(_teamPerfit);\n        playerBook = PlayerBookInterface(_playBook);\n        drsCoin = DRSCoinInterface(_drsCoin);\n\n        startIndex = 0;\n        endIndex = 0;\n    }\n\n    modifier onlyOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    /**\n     * @dev prevents contracts from interacting with ReserveBag \n     */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        require(_addr == tx.origin);\n\n        uint256 _codeLength;\n        \n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n\n    /**\n     * @dev sets boundaries for incoming tx \n     */\n    modifier isWithinLimits(uint256 _eth) {\n        require(_eth >= 1000000000, \"pocket lint: not a valid currency\");\n        require(_eth <= 100000 * (10**18), \"no vitalik, no\");\n        _;\n    }\n\n    function pushBuyInfo(DRSDatasets.BuyInfo info) internal {\n        if(endIndex == buyinfos.length) {\n            buyinfos.push(info);\n        } else if(endIndex < buyinfos.length) {\n            buyinfos[endIndex] = info;\n        } else {\n            // cannot happen\n            revert();\n        }\n\n        endIndex = (endIndex + 1) % (rewardInternal + 1);\n\n        if(endIndex == startIndex) {\n            startIndex = (startIndex + 1) % (rewardInternal + 1);\n        }\n    }\n\n    /**\n     * @dev emergency buy uses last stored affiliate ID and team snek\n     */\n    function()\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value)\n        public\n        payable\n    {\n        // set up our tx event data and determine if player is new or not\n        DRSDatasets.EventReturns memory _eventData_;\n        _eventData_ = determinePID(_eventData_);\n\n        // fetch player id\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // buy core \n        buyCore(_pID, _eventData_);\n    }\n\n    function buyKey()\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value)\n        public\n        payable\n    {\n        // set up our tx event data and determine if player is new or not\n        DRSDatasets.EventReturns memory _eventData_;\n        _eventData_ = determinePID(_eventData_);\n\n        // fetch player id\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // buy core \n        buyCore(_pID, _eventData_);\n    }\n\n    function reLoadXaddr(uint256 _eth)\n        isActivated()\n        isHuman()\n        isWithinLimits(_eth)\n        public\n    {\n        // fetch player ID\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        require(_pID != 0, \"reLoadXaddr can not be called by new players\");\n\n        // set up our tx event data\n        DRSDatasets.EventReturns memory _eventData_;\n\n        // reload core\n        reLoadCore(_pID, _eth, _eventData_);\n    }\n\n    function withdrawTeamPerfit()\n        isActivated()\n        onlyOwner()\n        public\n    {\n        if(teamPerfitAmuont > 0) {\n            uint256 _perfit = teamPerfitAmuont;\n\n            teamPerfitAmuont = 0;\n\n            owner.transfer(_perfit);\n        }\n    }\n\n    function getTeamPerfitAmuont() public view returns(uint256) {\n        return teamPerfitAmuont;\n    }\n\n    /**\n     * @dev withdraws all of your earnings.\n     * -functionhash- 0x3ccfd60b\n     */\n    function withdraw()\n        isActivated()\n        isHuman()\n        public\n    {\n        // fetch player ID\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        require(_pID != 0, \"withdraw can not be called by new players\");\n\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // grab time\n        uint256 _now = now;\n\n        // setup temp var for player eth\n        uint256 _eth;\n\n        // check to see if round has ended and no one has run round end yet\n        if(_now > round_[_rID].end && !round_[_rID].ended && round_[_rID].plyr != 0)\n        {\n            // set up our tx event data\n            DRSDatasets.EventReturns memory _eventData_;\n\n            // end the round (distributes pot)\n            round_[_rID].ended = true;\n            _eventData_ = endRound(_eventData_);\n\n            // get their earnings\n            _eth = withdrawEarnings(_pID);\n\n            // withdraw eth\n            if(_eth > 0) {\n                plyr_[_pID].addr.transfer(_eth);    \n            }\n\n            // build event data\n            _eventData_ = _eventData_.setTimestamp(_now);\n            _eventData_ = _eventData_.setPID(_pID);\n\n            // fire withdraw and distribute event\n            emit DRSEvents.onWithdrawAndDistribute\n            (\n                msg.sender,\n                plyr_[_pID].name,\n                _eth,\n                _eventData_.compressedData,\n                _eventData_.compressedIDs,\n\n                _eventData_.winnerAddr,\n                _eventData_.winnerName,\n                _eventData_.amountWon,\n\n                _eventData_.newPot,\n                _eventData_.genAmount\n            );\n        } else {\n            // get their earnings\n            _eth = withdrawEarnings(_pID);\n\n            // withdraw eth\n            if(_eth > 0) {\n                plyr_[_pID].addr.transfer(_eth);\n            }\n\n            // fire withdraw event\n            emit DRSEvents.onWithdraw(_pID, msg.sender, plyr_[_pID].name, _eth, _now);\n        }\n    }\n\n    function registerName(string _nameString, bool _all)\n        isHuman()\n        public\n        payable\n    {\n        bytes32 _name = _nameString.nameFilter();\n        address _addr = msg.sender;\n        uint256 _paid = msg.value;\n        (bool _isNewPlayer, ) = playerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender, _name, address(0), _all);\n\n        uint256 _pID = pIDxAddr_[_addr];\n\n        emit DRSEvents.onNewName(_pID, _addr, _name, _isNewPlayer, _paid, now);\n    }\n\n    /**\n     * @dev return the price buyer will pay for next 1 individual key.\n     * -functionhash- 0x018a25e8\n     * @return price for next key bought (in wei format)\n     */\n    function getBuyPrice() public view returns(uint256)\n    {  \n        return keyPrice;\n    }\n\n    /**\n     * @dev returns time left.  dont spam this, you'll ddos yourself from your node provider\n     * -functionhash- 0xc7e284b8\n     * @return time left in seconds\n     */\n    function getTimeLeft() public view returns(uint256)\n    {\n        uint256 _rID = rID_;\n\n        uint256 _now = now;\n\n        if(_now < round_[_rID].end)\n            if(_now > round_[_rID].strt + rndGap_)\n                return (round_[_rID].end).sub(_now);\n            else\n                return (round_[_rID].strt + rndGap_).sub(_now);\n        else\n            return 0;\n    }\n\n    /**\n     * @dev returns player earnings per vaults \n     * -functionhash- 0x63066434\n     * @return winnings vault\n     * @return general vault\n     */\n    function getPlayerVaults(uint256 _pID) public view returns(uint256, uint256)\n    {\n        uint256 _rID = rID_;\n\n        uint256 _now = now;\n\n        // if round has ended.  but round end has not been run (so contract has not distributed winnings)\n        if(_now > round_[_rID].end && !round_[_rID].ended && round_[_rID].plyr != 0) {\n            // if player is winner \n            if(round_[_rID].plyr == _pID) {\n                return\n                (\n                    (plyr_[_pID].win).add(getWin(round_[_rID].pot)),\n                    plyr_[_pID].gen\n                );\n            }\n        }\n\n        return (plyr_[_pID].win, plyr_[_pID].gen);\n    }\n\n    /**\n     * @dev returns all current round info needed for front end\n     * -functionhash- 0x747dff42\n     * @return round id \n     * @return total keys for round \n     * @return time round ends\n     * @return time round started\n     * @return current pot\n\n     * @return key price\n     * @return current key\n\n     * @return current player ID in lead\n     * @return current player address in leads\n     * @return current player name in leads\n     */\n    function getCurrentRoundInfo() public view\n        returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, address, bytes32)\n    {\n        uint256 _rID = rID_;\n\n        uint256 _winPID = round_[_rID].plyr;\n\n        return\n        (\n            _rID,                           //0\n            round_[_rID].end,               //1\n            round_[_rID].strt,              //2\n            round_[_rID].pot,               //3\n\n            keyPrice,                       //4\n            keyBought.add(1),               //5\n\n            _winPID,                        //6\n            plyr_[_winPID].addr,            //7\n            plyr_[_winPID].name             //8\n        );\n    }\n\n    /**\n     * @dev returns player info based on address.  if no address is given, it will\n     * use msg.sender\n     * -functionhash- 0xee0b5d8b\n     * @param _addr address of the player you want to lookup\n     * @return player ID\n     * @return player name\n     * @return keys owned (current round)\n     * @return winnings vault\n     * @return general vault\n     * @return player round eth\n     */\n    function getPlayerInfoByAddress(address _addr) public view\n        returns(uint256, bytes32, uint256, uint256, uint256, uint256)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n        \n        if(_addr == address(0)) {\n            _addr == msg.sender;\n        }\n\n        uint256 _pID = pIDxAddr_[_addr];\n\n        if(_pID == 0) {\n            return (0, \"\", 0, 0, 0, 0);\n        }\n\n        return\n        (\n            _pID,                               //0\n            plyr_[_pID].name,                   //1\n            plyrRnds_[_pID][_rID].keys,         //2\n            plyr_[_pID].win,                    //3\n            plyr_[_pID].gen,                    //4\n            plyrRnds_[_pID][_rID].eth           //5\n        );\n    }\n\n    /**\n     * @dev logic runs whenever a buy order is executed.  determines how to handle \n     * incoming eth depending on if we are in an active round or not\n     */\n    function buyCore(uint256 _pID, DRSDatasets.EventReturns memory _eventData_) private\n    {\n        uint256 _rID = rID_;\n\n        // grab time\n        uint256 _now = now;\n\n        // if round is active\n        if(_now >= round_[_rID].strt.add(rndGap_) && (_now <= round_[_rID].end || round_[_rID].plyr == 0)) {\n            // call core\n            core(_rID, _pID, msg.value, _eventData_);\n\n        // if round is not active\n        } else {\n            // check to see if end round needs to be ran\n            if(_now > round_[_rID].end && !round_[_rID].ended) {\n                // end the round (distributes pot) & start new round\n                round_[_rID].ended = true;\n                _eventData_ = endRound(_eventData_);\n\n                // build event data\n                _eventData_ = _eventData_.setTimestamp(_now);\n                _eventData_ = _eventData_.setPID(_pID);\n\n                // fire buy and distribute event\n                emit DRSEvents.onBuyAndDistribute\n                (\n                    msg.sender,\n                    plyr_[_pID].name,\n                    msg.value,\n                    _eventData_.compressedData,\n                    _eventData_.compressedIDs,\n\n                    _eventData_.winnerAddr,\n                    _eventData_.winnerName,\n                    _eventData_.amountWon,\n\n                    _eventData_.newPot,\n                    _eventData_.genAmount\n                );\n            }\n\n            // put eth in players vault \n            plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value);\n        }\n    }\n\n    /**\n     * @dev logic runs whenever a reload order is executed.  determines how to handle\n     * incoming eth depending on if we are in an active round or not\n     */\n    function reLoadCore(uint256 _pID, uint256 _eth, DRSDatasets.EventReturns memory _eventData_) private\n    {\n        uint256 _rID = rID_;\n\n        uint256 _now = now;\n\n        // if round is active\n        if(_now > round_[_rID].strt.add(rndGap_) && (_now <= round_[_rID].end || round_[_rID].plyr == 0)) {\n            // get earnings from all vaults and return unused to gen vault\n            // because we use a custom safemath library.  this will throw if player\n            // tried to spend more eth than they have.\n            plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth);\n\n            // call core\n            core(_rID, _pID, _eth, _eventData_);\n\n        // if round is not active and end round needs to be ran\n        } else {\n            // check to see if end round needs to be ran\n            if(_now > round_[_rID].end && !round_[_rID].ended) {\n                // end the round (distributes pot) & start new round\n                round_[_rID].ended = true;\n                _eventData_ = endRound(_eventData_);\n\n                // build event data\n                _eventData_ = _eventData_.setTimestamp(_now);\n                _eventData_ = _eventData_.setPID(_pID);\n\n                // fire buy and distribute event\n                emit DRSEvents.onReLoadAndDistribute\n                (\n                    msg.sender,\n                    plyr_[_pID].name,\n                    _eventData_.compressedData,\n                    _eventData_.compressedIDs,\n\n                    _eventData_.winnerAddr,\n                    _eventData_.winnerName,\n                    _eventData_.amountWon,\n\n                    _eventData_.newPot,\n                    _eventData_.genAmount\n                );\n            }\n        }\n    }\n\n    /**\n     * @dev this is the core logic for any buy/reload that happens while a round is live.\n     */\n    function core(uint256 _rID, uint256 _pID, uint256 _eth, DRSDatasets.EventReturns memory _eventData_) private\n    {\n        if(_eth < keyPrice) {\n            plyr_[_pID].gen = plyr_[_pID].gen.add(_eth);\n            emit onBuyKeyFailure(_rID, _pID, _eth, keyPrice, now);\n            return;\n        }\n\n        // if player is new to round\n        if(plyrRnds_[_pID][_rID].keys == 0) {\n            _eventData_ = managePlayer(_pID, _eventData_);\n        }\n\n        // mint the new key\n        uint256 _keys = 1;\n\n        uint256 _ethUsed = keyPrice;\n        uint256 _ethLeft = _eth.sub(keyPrice);\n\n        updateTimer(_rID);\n\n        // set new leaders\n        if(round_[_rID].plyr != _pID) {\n            round_[_rID].plyr = _pID;\n        }\n\n        // set the new leader bool to true\n        _eventData_ = _eventData_.setNewLeaderFlag();\n\n        // update player \n        plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys);\n        plyrRnds_[_pID][_rID].eth = _ethUsed.add(plyrRnds_[_pID][_rID].eth);\n\n        // update round\n        round_[_rID].keys = _keys.add(round_[_rID].keys);\n        round_[_rID].eth = _ethUsed.add(round_[_rID].eth);\n\n        // distribute eth\n        uint256 _ethExt = distributeExternal(_ethUsed);\n        _eventData_ = distributeInternal(_rID, _ethUsed, _ethExt, _eventData_);\n\n        bytes32 _name = plyr_[_pID].name;\n\n        pushBuyInfo(DRSDatasets.BuyInfo(msg.sender, _name, _pID, keyPrice, keyBought));\n\n        // key index player bought\n        uint256 _keyIndex = keyBought;\n\n        keyBought = keyBought.add(1);\n        keyPrice = keyPrice.mul(1000 + keyPriceIncreaseRatio).div(1000);\n\n        if(_ethLeft > 0) {\n            plyr_[_pID].gen = _ethLeft.add(plyr_[_pID].gen);\n        }\n\n        // call end tx function to fire end tx event.\n        endTx(_pID, _ethUsed, _keyIndex, _eventData_);\n    }\n\n    /**\n     * @dev receives name/player info from names contract \n     */\n    function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name) external\n    {\n        require(msg.sender == address(playerBook), \"your not playerNames contract.\");\n\n        if(pIDxAddr_[_addr] != _pID)\n            pIDxAddr_[_addr] = _pID;\n\n        if(pIDxName_[_name] != _pID)\n            pIDxName_[_name] = _pID;\n\n        if(plyr_[_pID].addr != _addr)\n            plyr_[_pID].addr = _addr;\n\n        if(plyr_[_pID].name != _name)\n            plyr_[_pID].name = _name;\n\n        if(!plyrNames_[_pID][_name])\n            plyrNames_[_pID][_name] = true;\n    }\n\n    /**\n     * @dev receives entire player name list \n     */\n    function receivePlayerNameList(uint256 _pID, bytes32 _name) external\n    {\n        require(msg.sender == address(playerBook), \"your not playerNames contract.\");\n\n        if(!plyrNames_[_pID][_name])\n            plyrNames_[_pID][_name] = true;\n    }\n\n    /**\n     * @dev gets existing or registers new pID.  use this when a player may be new\n     * @return pID \n     */\n    function determinePID(DRSDatasets.EventReturns memory _eventData_) private returns(DRSDatasets.EventReturns)\n    {\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // if player is new to this version of ReserveBag\n        if(_pID == 0)\n        {\n            // grab their player ID, name from player names contract\n            _pID = playerBook.getPlayerID(msg.sender);\n            bytes32 _name = playerBook.getPlayerName(_pID);\n\n            // set up player account\n            pIDxAddr_[msg.sender] = _pID;\n            plyr_[_pID].addr = msg.sender;\n\n            if(_name != \"\")\n            {\n                pIDxName_[_name] = _pID;\n                plyr_[_pID].name = _name;\n                plyrNames_[_pID][_name] = true;\n            }\n\n            // set the new player bool to true\n            _eventData_ = _eventData_.setNewPlayerFlag();\n        }\n\n        return _eventData_;\n    }\n\n    function managePlayer(uint256 _pID, DRSDatasets.EventReturns memory _eventData_)\n        private\n        returns(DRSDatasets.EventReturns)\n    {\n        // update player's last round played\n        plyr_[_pID].lrnd = rID_;\n\n        // set the joined round bool to true\n        _eventData_ = _eventData_.setJoinedRoundFlag();\n        \n        return _eventData_;\n    }\n\n    function getWin(uint256 _pot) private pure returns(uint256) {\n        return _pot / 2;\n    }\n\n    function getDRSCoinDividend(uint256 _pot) private view returns(uint256) {\n        return _pot.mul(drsCoinDividendRatio).div(100);\n    }\n\n    function getTeamPerfit(uint256 _pot) private view returns(uint256) {\n        return _pot.mul(teamPerfitRatio).div(100);\n    }\n\n    function mintDRSCoin() private {\n        // empty buyinfos\n        if(startIndex == endIndex) {\n            return;\n        }\n\n        // have one element\n        if((startIndex + 1) % (rewardInternal + 1) == endIndex) {\n            return;\n        }\n\n        // have more than one element\n        for(uint256 i = startIndex; (i + 1) % (rewardInternal + 1) != endIndex; i = (i + 1) % (rewardInternal + 1)) {\n            drsCoin.mint(buyinfos[i].addr, buyinfos[i].keyPrice.mul(ethMintDRSCoinRate).div(100));\n        }\n    }\n\n    /**\n     * @dev ends the round. manages paying out winner/splitting up pot\n     */\n    function endRound(DRSDatasets.EventReturns memory _eventData_)\n        private\n        returns(DRSDatasets.EventReturns)\n    {\n        uint256 _rID = rID_;\n\n        uint256 _winPID = round_[_rID].plyr;\n\n        uint256 _pot = round_[_rID].pot;\n\n        // eth for last player's prize\n        uint256 _win = getWin(_pot);\n\n        // eth for drsCoin dividend\n        uint256 _drsCoinDividend = getDRSCoinDividend(_pot);\n\n        // eth for team perfit\n        uint256 _com = getTeamPerfit(_pot);\n\n        // eth put to next round's pot\n        uint256 _newPot = _pot.sub(_win).sub(_drsCoinDividend).sub(_com);\n\n        // deposit team perfit\n        depositTeamPerfit(_com);\n\n        // pay our winner\n        plyr_[_winPID].win = _win.add(plyr_[_winPID].win);\n\n        // mint DRSCoin\n        mintDRSCoin();\n\n        // distribute eth to drsCoin holders\n        drsCoin.profitEth.value(_drsCoinDividend)();\n\n        // prepare event data\n        _eventData_ = _eventData_.setRoundEndTime(round_[_rID].end);\n        _eventData_ = _eventData_.setWinPID(_winPID);\n        _eventData_ = _eventData_.setWinner(plyr_[_winPID].addr, plyr_[_winPID].name, _win);\n        _eventData_ = _eventData_.setNewPot(_newPot);\n\n        // start next round\n        rID_++;\n        _rID++;\n        round_[_rID].strt = now;\n        round_[_rID].end = now.add(rndMax_).add(rndGap_);\n\n        keyPrice = initKeyPrice;\n        keyBought = 0;\n\n        startIndex = 0;\n        endIndex = 0;\n\n        // add rest eth to next round's pot\n        round_[_rID].pot = _newPot;\n\n        return _eventData_;\n    }\n\n    /**\n     * @dev updates round timer based on number of whole keys bought.\n     */\n    function updateTimer(uint256 _rID) private\n    {\n        round_[_rID].end = rndMax_.add(now);\n    }\n\n    function depositTeamPerfit(uint256 _eth) private {\n        if(teamPerfit == address(0)) {\n            teamPerfitAmuont = teamPerfitAmuont.add(_eth);\n            return;\n        }\n\n        bool res = teamPerfit.deposit.value(_eth)();\n        if(!res) {\n            teamPerfitAmuont = teamPerfitAmuont.add(_eth);\n            return;\n        }\n    }\n\n    /**\n     * @dev distributes eth based on fees to team\n     */\n    function distributeExternal(uint256 _eth) private returns(uint256)\n    {\n        // pay 2% out to community rewards\n        uint256 _com = _eth / 50;\n\n        depositTeamPerfit(_com);\n\n        return _com;\n    }\n\n    /**\n     * @dev distributes eth based on fees to gen and pot\n     */\n    function distributeInternal(uint256 _rID, uint256 _eth, uint256 _ethExt, DRSDatasets.EventReturns memory _eventData_)\n        private\n        returns(DRSDatasets.EventReturns)\n    {\n        uint256 _gen = 0;\n        uint256 _pot = 0;\n\n        if(keyBought < rewardInternal) {\n            _gen = 0;\n            _pot = _eth.sub(_ethExt);\n        } else {\n            _gen = _eth.mul(genRatio).div(100);\n            _pot = _eth.sub(_ethExt).sub(_gen);\n\n            DRSDatasets.BuyInfo memory info = buyinfos[startIndex];\n\n            uint256 firstPID = info.pid;\n            plyr_[firstPID].gen = _gen.add(plyr_[firstPID].gen);\n\n            _eventData_.setGenInfo(info.addr, info.keyPrice);\n        }\n\n        if(_pot > 0) {\n            round_[_rID].pot = _pot.add(round_[_rID].pot);\n        }\n\n        _eventData_.setGenAmount(_gen.add(_eventData_.genAmount));\n        _eventData_.setPotAmount(_pot);\n\n        return _eventData_;\n    }\n\n    /**\n     * @dev adds up unmasked earnings, & vault earnings, sets them all to 0\n     * @return earnings in wei format\n     */\n    function withdrawEarnings(uint256 _pID) private returns(uint256)\n    {\n        uint256 _earnings = (plyr_[_pID].win).add(plyr_[_pID].gen);\n        if(_earnings > 0)\n        {\n            plyr_[_pID].win = 0;\n            plyr_[_pID].gen = 0;\n        }\n\n        return _earnings;\n    }\n\n    /**\n     * @dev prepares compression data and fires event for buy or reload tx's\n     */\n    function endTx(uint256 _pID, uint256 _eth, uint256 _keyIndex, DRSDatasets.EventReturns memory _eventData_) private\n    {\n        _eventData_ = _eventData_.setTimestamp(now);\n        _eventData_ = _eventData_.setPID(_pID);\n        _eventData_ = _eventData_.setRID(rID_);\n\n        emit DRSEvents.onEndTx\n        (\n            _eventData_.compressedData,\n            _eventData_.compressedIDs,\n\n            plyr_[_pID].name,\n            msg.sender,\n            _eth,\n            _keyIndex,\n\n            _eventData_.winnerAddr,\n            _eventData_.winnerName,\n            _eventData_.amountWon,\n\n            _eventData_.newPot,\n            _eventData_.genAmount,\n            _eventData_.potAmount,\n\n            _eventData_.genAddr,\n            _eventData_.genKeyPrice\n        );\n    }\n\n    modifier isActivated() {\n        require(activated_, \"its not activated yet.\");\n        _;\n    }\n\n    function activate() onlyOwner() public\n    {\n        // can only be ran once\n        require(!activated_, \"ReserveBag already activated\");\n\n        uint256 _now = now;\n\n        // activate the contract \n        activated_ = true;\n\n        // lets start first round\n        rID_ = 1;\n        round_[1].strt = _now.add(rndExtra_).sub(rndGap_);\n        round_[1].end = _now.add(rndMax_).add(rndExtra_);\n    }\n\n    function getActivated() public view returns(bool) {\n        return activated_;\n    }\n\n    function setTeamPerfitAddress(address _newTeamPerfitAddress) onlyOwner() public {\n        teamPerfit = TeamPerfitForwarderInterface(_newTeamPerfitAddress);\n    }\n\n    function setPlayerBookAddress(address _newPlayerBookAddress) onlyOwner() public {\n        playerBook = PlayerBookInterface(_newPlayerBookAddress);\n    }\n\n    function setDRSCoinAddress(address _newDRSCoinAddress) onlyOwner() public {\n        drsCoin = DRSCoinInterface(_newDRSCoinAddress);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000001ceb9dddea083d647fa7b09942474dece629c7e000000000000000000000000567dc1d64bbc362caccfebb7a3bb5b900d22eefe0000000000000000000000006b249a94182219cb1af58a197573dccd9ab94144"
}