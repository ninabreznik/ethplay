{
  "address": "0xbadf157a0acfbeebbee23ebc887df0e9bea0eb6d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ItemToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-05\n*/\n\npragma solidity ^0.4.13;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ItemToken {\n  using SafeMath for uint256;\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n  address private owner;\n  mapping (address => bool) private admins;\n  bool private erc721Enabled = false;\n\n  uint256 private L = 500;\n  uint256 private itemIdCounter = 0;\n  uint256 private pointsDecayFactor = 1209600000; // half-time: week\n\n  uint256[] private listedItems;\n  mapping (uint256 => address) private ownerOfItem;\n  mapping (uint256 => string) private nameOfItem;\n  mapping (uint256 => string) private descOfItem;\n  mapping (uint256 => string) private URLOfItem;\n  mapping (uint256 => uint256) private pointOfItem;\n  mapping (uint256 => uint256) private timeOfItem;\n  mapping (uint256 => address) private approvedOfItem;\n\n  mapping (uint256 => uint256[]) private pointArrayOfArray;\n  mapping (uint256 => uint256[]) private timeArrayOfArray;\n\n  function ItemToken () public {\n    owner = msg.sender;\n    admins[owner] = true;\n  }\n\n  /* Modifiers */\n  modifier onlyOwner() {\n    require(owner == msg.sender);\n    _;\n  }\n\n  modifier onlyAdmins() {\n    require(admins[msg.sender]);\n    _;\n  }\n\n  modifier onlyERC721() {\n    require(erc721Enabled);\n    _;\n  }\n\n  /* Owner */\n  function setOwner (address _owner) onlyOwner() public {\n    owner = _owner;\n  }\n\n  function addAdmin (address _admin) onlyOwner() public {\n    admins[_admin] = true;\n  }\n\n  function removeAdmin (address _admin) onlyOwner() public {\n    delete admins[_admin];\n  }\n  \n  function adjustL (uint256 _L) onlyOwner() public {\n    L = _L;\n  }\n  \n  function adjustPointsDecayFactor (uint256 _pointsDecayFactor) onlyOwner() public {\n    pointsDecayFactor = _pointsDecayFactor;\n  }\n\n  // Unlocks ERC721 behaviour, allowing for trading on third party platforms.\n  function enableERC721 () onlyOwner() public {\n    erc721Enabled = true;\n  }\n\n  /* Withdraw */\n  function withdrawAll () onlyOwner() public {\n    owner.transfer(this.balance);\n  }\n\n  function withdrawAmount (uint256 _amount) onlyOwner() public {\n    owner.transfer(_amount);\n  }\n\n  /* Listing */\n  function Time_call() returns (uint256 _now){\n    return now;\n  }\n\n  function listDapp (string _itemName, string _itemDesc, string _itemURL) public {\n    require(bytes(_itemName).length > 2);\n    require(bytes(_itemDesc).length > 2);\n    require(bytes(_itemURL).length > 2);\n    \n    uint256 _itemId = itemIdCounter;\n    itemIdCounter = itemIdCounter + 1;\n\n    ownerOfItem[_itemId] = msg.sender;\n    nameOfItem[_itemId] = _itemName;\n    descOfItem[_itemId] = _itemDesc;\n    URLOfItem[_itemId] = _itemURL;\n    pointOfItem[_itemId] = 10; //This is 10 free token for whom sign-up\n    timeOfItem[_itemId] = Time_call();\n    listedItems.push(_itemId);\n    \n    pointArrayOfArray[_itemId].push(10);\n    timeArrayOfArray[_itemId].push(Time_call());\n  }\n\n  /* Buying */\n  function buyPoints (uint256 _itemId) payable public {\n    require(msg.value > 0);\n    require(ownerOf(_itemId) == msg.sender);\n    require(!isContract(msg.sender));\n    \n    uint256 point = msg.value.mul(L).div(1000000000000000000);\n    \n    pointOfItem[_itemId] = point;\n    timeOfItem[_itemId] = Time_call();\n    \n    owner.transfer(msg.value);\n    \n    pointArrayOfArray[_itemId].push(point);\n    timeArrayOfArray[_itemId].push(Time_call());\n  }\n\n  /* ERC721 */\n  function implementsERC721() public view returns (bool _implements) {\n    return erc721Enabled;\n  }\n\n  function name() public pure returns (string _name) {\n    return \"DappTalk.org\";\n  }\n\n  function symbol() public pure returns (string _symbol) {\n    return \"DTC\";\n  }\n\n  function totalSupply() public view returns (uint256 _totalSupply) {\n    return listedItems.length;\n  }\n\n  function balanceOf (address _owner) public view returns (uint256 _balance) {\n    uint256 counter = 0;\n\n    for (uint256 i = 0; i < listedItems.length; i++) {\n      if (ownerOf(listedItems[i]) == _owner) {\n        counter++;\n      }\n    }\n\n    return counter;\n  }\n\n  function ownerOf (uint256 _itemId) public view returns (address _owner) {\n    return ownerOfItem[_itemId];\n  }\n\n  function tokensOf (address _owner) public view returns (uint256[] _tokenIds) {\n    uint256[] memory items = new uint256[](balanceOf(_owner));\n\n    uint256 itemCounter = 0;\n    for (uint256 i = 0; i < listedItems.length; i++) {\n      if (ownerOf(listedItems[i]) == _owner) {\n        items[itemCounter] = listedItems[i];\n        itemCounter += 1;\n      }\n    }\n\n    return items;\n  }\n\n  function tokenExists (uint256 _itemId) public view returns (bool _exists) {\n    return bytes(nameOf(_itemId)).length > 2;\n  }\n\n  function approvedFor(uint256 _itemId) public view returns (address _approved) {\n    return approvedOfItem[_itemId];\n  }\n\n  function approve(address _to, uint256 _itemId) onlyERC721() public {\n    require(msg.sender != _to);\n    require(tokenExists(_itemId));\n    require(ownerOf(_itemId) == msg.sender);\n\n    if (_to == 0) {\n      if (approvedOfItem[_itemId] != 0) {\n        delete approvedOfItem[_itemId];\n        Approval(msg.sender, 0, _itemId);\n      }\n    } else {\n      approvedOfItem[_itemId] = _to;\n      Approval(msg.sender, _to, _itemId);\n    }\n  }\n\n  function transfer(address _to, uint256 _itemId) onlyERC721() public {\n    require(msg.sender == ownerOf(_itemId));\n    _transfer(msg.sender, _to, _itemId);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _itemId) onlyERC721() public {\n    require(approvedFor(_itemId) == msg.sender);\n    _transfer(_from, _to, _itemId);\n  }\n\n  function _transfer(address _from, address _to, uint256 _itemId) internal {\n    require(tokenExists(_itemId));\n    require(ownerOf(_itemId) == _from);\n    require(_to != address(0));\n    require(_to != address(this));\n\n    ownerOfItem[_itemId] = _to;\n    approvedOfItem[_itemId] = 0;\n\n    Transfer(_from, _to, _itemId);\n  }\n\n  /* Read */\n  function isAdmin (address _admin) public view returns (bool _isAdmin) {\n    return admins[_admin];\n  }\n\n  function nameOf (uint256 _itemId) public view returns (string _itemName) {\n    return nameOfItem[_itemId];\n  }\n  \n  function descOf (uint256 _itemId) public view returns (string _itemDesc) {\n    return descOfItem[_itemId];\n  }\n  \n  function URLOf (uint256 _itemId) public view returns (string _itemURL) {\n    return URLOfItem[_itemId];\n  }\n  \n  function pointOf (uint256 _itemId) public view returns (uint256 _itemPoint) {\n    return pointOfItem[_itemId];\n  }\n  \n  function pointArrayOf (uint256 _itemId) public view returns (uint256[] _pointArray) {\n    return pointArrayOfArray[_itemId];\n  }\n  \n  function timeArrayOf (uint256 _itemId) public view returns (uint256[] _timeArray) {\n    return timeArrayOfArray[_itemId];\n  }\n\n  function initTimeOf (uint256 _itemId) public view returns (uint256 _initTime) {\n    return timeArrayOfArray[_itemId][0];\n  }\n\n  function timeOf (uint256 _itemId) public view returns (uint256 _itemTime) {\n    return timeOfItem[_itemId];\n  }\n\n  function getPointOf (uint256 _itemId) public view returns (uint256 _getPoint) {\n    uint256 t = Time_call();\n    _getPoint = 0;\n    uint256 temp = 0;\n\n    for (uint256 i = 0; i < pointArrayOfArray[_itemId].length; i++) {\n        if (timeArrayOfArray[_itemId][i] + pointsDecayFactor > t) {\n            temp = timeArrayOfArray[_itemId][i];\n            temp = temp - t;\n            temp = temp + pointsDecayFactor;\n            temp = temp.mul(pointArrayOfArray[_itemId][i]);\n            temp = temp.div(pointsDecayFactor);\n            _getPoint = temp.add(_getPoint);\n        }\n    }\n    \n    return _getPoint;\n  }\n\n  function allOf (uint256 _itemId) public view returns (address _owner, string _itemName, string _itemDesc, string _itemURL, uint256[] _pointArray, uint256[] _timeArray, uint256 _curPoint) {\n    return (ownerOf(_itemId), nameOf(_itemId), descOf(_itemId), URLOf(_itemId), pointArrayOf(_itemId), timeArrayOf(_itemId), getPointOf(_itemId));\n  }\n  \n  function getAllDapps () public view returns (address[] _owners, bytes32[] _itemNames, bytes32[] _itemDescs, bytes32[] _itemURL, uint256[] _points, uint256[] _initTime, uint256[] _lastTime) {\n      _owners = new address[](itemIdCounter);\n      _itemNames = new bytes32[](itemIdCounter);\n      _itemDescs = new bytes32[](itemIdCounter);\n      _itemURL = new bytes32[](itemIdCounter);\n      _points = new uint256[](itemIdCounter);\n      _initTime = new uint256[](itemIdCounter);\n      _lastTime = new uint256[](itemIdCounter);\n      for (uint256 i = 0; i < itemIdCounter; i++) {\n          _owners[i] = ownerOf(i);\n          _itemNames[i] = stringToBytes32(nameOf(i));\n          _itemDescs[i] = stringToBytes32(descOf(i));\n          _itemURL[i] = stringToBytes32(URLOf(i));\n          _points[i] = getPointOf(i);\n          _initTime[i] = initTimeOf(i);\n          _lastTime[i] = timeOf(i);\n      }\n      return (_owners, _itemNames, _itemDescs, _itemURL, _points, _initTime, _lastTime);\n  }\n\n  /* Util */\n  function isContract(address addr) internal view returns (bool) {\n    uint size;\n    assembly { size := extcodesize(addr) } // solium-disable-line\n    return size > 0;\n  }\n  \n  function stringToBytes32(string memory source) returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n    \n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n}",
  "bytecode": "60806040526000600260006101000a81548160ff0219169083151502179055506101f46003556000600455634819080060055534801561003e57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612cb4806101066000396000f3006080604052600436106101c1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062923f9e146101c6578063032610301461020b578063051a2664146102365780630562b9f7146102dc57806306fdde0314610309578063095ea7b3146103995780631051db34146103e657806313af4035146104155780631785f53c1461045857806318160ddd1461049b5780631ecc56f2146104c657806323b872dd1461050757806324d7806c146105745780632a6dd48f146105cf5780632e4f43bf1461063c578063440961c31461088457806344f2428a146108b15780634c1674e5146108de57806358c9e484146109845780635a3f2672146109a457806360edc4c414610a3c5780636352211e14610a7d5780637048027514610aea57806370a0823114610b2d57806371dc761e14610b845780637bd3acbb14610b9b5780637d1541ad14610c1d578063853828b614610d125780638645229514610d2957806395d89b4114610d6a578063a9059cbb14610dfa578063aec5ab0814610e47578063c794684214611063578063ca54ea4e14611109578063cfb519281461114a578063e6259f53146111cf575b600080fd5b3480156101d257600080fd5b506101f160048036038101908080359060200190929190505050611251565b604051808215151515815260200191505060405180910390f35b34801561021757600080fd5b50610220611267565b6040518082815260200191505060405180910390f35b34801561024257600080fd5b506102616004803603810190808035906020019092919050505061126f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102a1578082015181840152602081019050610286565b50505050905090810190601f1680156102ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102e857600080fd5b5061030760048036038101908080359060200190929190505050611324565b005b34801561031557600080fd5b5061031e6113ea565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035e578082015181840152602081019050610343565b50505050905090810190601f16801561038b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103a557600080fd5b506103e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611427565b005b3480156103f257600080fd5b506103fb61168d565b604051808215151515815260200191505060405180910390f35b34801561042157600080fd5b50610456600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116a4565b005b34801561046457600080fd5b50610499600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611742565b005b3480156104a757600080fd5b506104b06117ef565b6040518082815260200191505060405180910390f35b3480156104d257600080fd5b506104f1600480360381019080803590602001909291905050506117fc565b6040518082815260200191505060405180910390f35b34801561051357600080fd5b50610572600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611831565b005b34801561058057600080fd5b506105b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061189e565b604051808215151515815260200191505060405180910390f35b3480156105db57600080fd5b506105fa600480360381019080803590602001909291905050506118f4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064857600080fd5b5061066760048036038101908080359060200190929190505050611931565b604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001806020018060200187815260200186810386528c818151815260200191508051906020019080838360005b838110156106ef5780820151818401526020810190506106d4565b50505050905090810190601f16801561071c5780820380516001836020036101000a031916815260200191505b5086810385528b818151815260200191508051906020019080838360005b8381101561075557808201518184015260208101905061073a565b50505050905090810190601f1680156107825780820380516001836020036101000a031916815260200191505b5086810384528a818151815260200191508051906020019080838360005b838110156107bb5780820151818401526020810190506107a0565b50505050905090810190601f1680156107e85780820380516001836020036101000a031916815260200191505b50868103835289818151815260200191508051906020019060200280838360005b83811015610824578082015181840152602081019050610809565b50505050905001868103825288818151815260200191508051906020019060200280838360005b8381101561086657808201518184015260208101905061084b565b505050509050019c5050505050505050505050505060405180910390f35b34801561089057600080fd5b506108af60048036038101908080359060200190929190505050611995565b005b3480156108bd57600080fd5b506108dc600480360381019080803590602001909291905050506119fa565b005b3480156108ea57600080fd5b5061090960048036038101908080359060200190929190505050611a5f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561094957808201518184015260208101905061092e565b50505050905090810190601f1680156109765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6109a260048036038101908080359060200190929190505050611b14565b005b3480156109b057600080fd5b506109e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cd0565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a28578082015181840152602081019050610a0d565b505050509050019250505060405180910390f35b348015610a4857600080fd5b50610a6760048036038101908080359060200190929190505050611dd0565b6040518082815260200191505060405180910390f35b348015610a8957600080fd5b50610aa860048036038101908080359060200190929190505050611ded565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610af657600080fd5b50610b2b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e2a565b005b348015610b3957600080fd5b50610b6e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611edf565b6040518082815260200191505060405180910390f35b348015610b9057600080fd5b50610b99611f6e565b005b348015610ba757600080fd5b50610bc660048036038101908080359060200190929190505050611fe6565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610c09578082015181840152602081019050610bee565b505050509050019250505060405180910390f35b348015610c2957600080fd5b50610d10600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612051565b005b348015610d1e57600080fd5b50610d2761224a565b005b348015610d3557600080fd5b50610d5460048036038101908080359060200190929190505050612326565b6040518082815260200191505060405180910390f35b348015610d7657600080fd5b50610d7f612454565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610dbf578082015181840152602081019050610da4565b50505050905090810190601f168015610dec5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e0657600080fd5b50610e45600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612491565b005b348015610e5357600080fd5b50610e5c6124fd565b604051808060200180602001806020018060200180602001806020018060200188810388528f818151815260200191508051906020019060200280838360005b83811015610eb7578082015181840152602081019050610e9c565b5050505090500188810387528e818151815260200191508051906020019060200280838360005b83811015610ef9578082015181840152602081019050610ede565b5050505090500188810386528d818151815260200191508051906020019060200280838360005b83811015610f3b578082015181840152602081019050610f20565b5050505090500188810385528c818151815260200191508051906020019060200280838360005b83811015610f7d578082015181840152602081019050610f62565b5050505090500188810384528b818151815260200191508051906020019060200280838360005b83811015610fbf578082015181840152602081019050610fa4565b5050505090500188810383528a818151815260200191508051906020019060200280838360005b83811015611001578082015181840152602081019050610fe6565b50505050905001888103825289818151815260200191508051906020019060200280838360005b83811015611043578082015181840152602081019050611028565b505050509050019e50505050505050505050505050505060405180910390f35b34801561106f57600080fd5b5061108e60048036038101908080359060200190929190505050612818565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156110ce5780820151818401526020810190506110b3565b50505050905090810190601f1680156110fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561111557600080fd5b50611134600480360381019080803590602001909291905050506128cd565b6040518082815260200191505060405180910390f35b34801561115657600080fd5b506111b1600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506128ea565b60405180826000191660001916815260200191505060405180910390f35b3480156111db57600080fd5b506111fa60048036038101908080359060200190929190505050612915565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561123d578082015181840152602081019050611222565b505050509050019250505060405180910390f35b6000600261125e8361126f565b51119050919050565b600042905090565b6060600860008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113185780601f106112ed57610100808354040283529160200191611318565b820191906000526020600020905b8154815290600101906020018083116112fb57829003601f168201915b50505050509050919050565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561137f57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156113e6573d6000803e3d6000fd5b5050565b60606040805190810160405280600c81526020017f4461707054616c6b2e6f72670000000000000000000000000000000000000000815250905090565b600260009054906101000a900460ff16151561144257600080fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561147d57600080fd5b61148681611251565b151561149157600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166114b182611ded565b73ffffffffffffffffffffffffffffffffffffffff161415156114d357600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff1614156115d1576000600d600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156115cc57600d600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560003373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b611689565b81600d600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b6000600260009054906101000a900460ff16905090565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156116ff57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561179d57600080fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905550565b6000600680549050905090565b6000600f6000838152602001908152602001600020600081548110151561181f57fe5b90600052602060002001549050919050565b600260009054906101000a900460ff16151561184c57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff1661186c826118f4565b73ffffffffffffffffffffffffffffffffffffffff1614151561188e57600080fd5b611899838383612980565b505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600d600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006060806060806060600061194688611ded565b61194f8961126f565b6119588a611a5f565b6119618b612818565b61196a8c611fe6565b6119738d612915565b61197c8e612326565b9650965096509650965096509650919395979092949650565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156119f057600080fd5b8060058190555050565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611a5557600080fd5b8060038190555050565b6060600960008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b085780601f10611add57610100808354040283529160200191611b08565b820191906000526020600020905b815481529060010190602001808311611aeb57829003601f168201915b50505050509050919050565b60008034111515611b2457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16611b4483611ded565b73ffffffffffffffffffffffffffffffffffffffff16141515611b6657600080fd5b611b6f33612b5c565b151515611b7b57600080fd5b611baa670de0b6b3a7640000611b9c60035434612b6f90919063ffffffff16565b612baa90919063ffffffff16565b905080600b600084815260200190815260200160002081905550611bcc611267565b600c6000848152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611c4a573d6000803e3d6000fd5b50600e6000838152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091505550600f6000838152602001908152602001600020611ca3611267565b90806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b606080600080611cdf85611edf565b604051908082528060200260200182016040528015611d0d5781602001602082028038833980820191505090505b50925060009150600090505b600680549050811015611dc5578473ffffffffffffffffffffffffffffffffffffffff16611d5f600683815481101515611d4f57fe5b9060005260206000200154611ded565b73ffffffffffffffffffffffffffffffffffffffff161415611db857600681815481101515611d8a57fe5b90600052602060002001548383815181101515611da357fe5b90602001906020020181815250506001820191505b8080600101915050611d19565b829350505050919050565b6000600c6000838152602001908152602001600020549050919050565b60006007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611e8557600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000806000809150600090505b600680549050811015611f64578373ffffffffffffffffffffffffffffffffffffffff16611f32600683815481101515611f2257fe5b9060005260206000200154611ded565b73ffffffffffffffffffffffffffffffffffffffff161415611f575781806001019250505b8080600101915050611eec565b8192505050919050565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611fc957600080fd5b6001600260006101000a81548160ff021916908315150217905550565b6060600e600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561204557602002820191906000526020600020905b815481526020019060010190808311612031575b50505050509050919050565b60006002845111151561206357600080fd5b6002835111151561207357600080fd5b6002825111151561208357600080fd5b6004549050600160045401600481905550336007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360086000838152602001908152602001600020908051906020019061210d929190612be3565b5082600960008381526020019081526020016000209080519060200190612135929190612be3565b5081600a6000838152602001908152602001600020908051906020019061215d929190612be3565b50600a600b60008381526020019081526020016000208190555061217f611267565b600c6000838152602001908152602001600020819055506006819080600181540180825580915050906001820390600052602060002001600090919290919091505550600e6000828152602001908152602001600020600a9080600181540180825580915050906001820390600052602060002001600090919290919091505550600f600082815260200190815260200160002061221b611267565b908060018154018082558091505090600182039060005260206000200160009091929091909150555050505050565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156122a557600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015612323573d6000803e3d6000fd5b50565b600080600080612334611267565b92506000935060009150600090505b600e6000868152602001908152602001600020805490508110156124495782600554600f60008881526020019081526020016000208381548110151561238557fe5b906000526020600020015401111561243c57600f6000868152602001908152602001600020818154811015156123b757fe5b9060005260206000200154915082820391506005548201915061240d600e6000878152602001908152602001600020828154811015156123f357fe5b906000526020600020015483612b6f90919063ffffffff16565b915061242460055483612baa90919063ffffffff16565b91506124398483612bc590919063ffffffff16565b93505b8080600101915050612343565b839350505050919050565b60606040805190810160405280600381526020017f4454430000000000000000000000000000000000000000000000000000000000815250905090565b600260009054906101000a900460ff1615156124ac57600080fd5b6124b581611ded565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156124ee57600080fd5b6124f9338383612980565b5050565b6060806060806060806060600060045460405190808252806020026020018201604052801561253b5781602001602082028038833980820191505090505b50975060045460405190808252806020026020018201604052801561256f5781602001602082028038833980820191505090505b5096506004546040519080825280602002602001820160405280156125a35781602001602082028038833980820191505090505b5095506004546040519080825280602002602001820160405280156125d75781602001602082028038833980820191505090505b50945060045460405190808252806020026020018201604052801561260b5781602001602082028038833980820191505090505b50935060045460405190808252806020026020018201604052801561263f5781602001602082028038833980820191505090505b5092506004546040519080825280602002602001820160405280156126735781602001602082028038833980820191505090505b509150600090505b6004548110156127f95761268e81611ded565b888281518110151561269c57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506126e96126e48261126f565b6128ea565b87828151811015156126f757fe5b90602001906020020190600019169081600019168152505061272061271b82611a5f565b6128ea565b868281518110151561272e57fe5b90602001906020020190600019169081600019168152505061275761275282612818565b6128ea565b858281518110151561276557fe5b90602001906020020190600019169081600019168152505061278681612326565b848281518110151561279457fe5b90602001906020020181815250506127ab816117fc565b83828151811015156127b957fe5b90602001906020020181815250506127d081611dd0565b82828151811015156127de57fe5b9060200190602002018181525050808060010191505061267b565b8787878787878797509750975097509750975097505090919293949596565b6060600a60008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128c15780601f10612896576101008083540402835291602001916128c1565b820191906000526020600020905b8154815290600101906020018083116128a457829003601f168201915b50505050509050919050565b6000600b6000838152602001908152602001600020549050919050565b60006060829050600081511415612907576000600102915061290f565b602083015191505b50919050565b6060600f600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561297457602002820191906000526020600020905b815481526020019060010190808311612960575b50505050509050919050565b61298981611251565b151561299457600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166129b482611ded565b73ffffffffffffffffffffffffffffffffffffffff161415156129d657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612a1257600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612a4d57600080fd5b816007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600d600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080823b905060008111915050919050565b6000806000841415612b845760009150612ba3565b8284029050828482811515612b9557fe5b04141515612b9f57fe5b8091505b5092915050565b6000808284811515612bb857fe5b0490508091505092915050565b6000808284019050838110151515612bd957fe5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612c2457805160ff1916838001178555612c52565b82800160010185558215612c52579182015b82811115612c51578251825591602001919060010190612c36565b5b509050612c5f9190612c63565b5090565b612c8591905b80821115612c81576000816000905550600101612c69565b5090565b905600a165627a7a7230582008cf576aeaf7d4f0972363f6ffc5d80a22ebd2602f5f4ca959595bd925184dbe0029"
}