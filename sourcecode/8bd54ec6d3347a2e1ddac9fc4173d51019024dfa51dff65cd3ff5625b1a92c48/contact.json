{
  "address": "0xcc2ad789f459bc73e5fb33364964b658a62c1ee7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NioShares",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-16\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n    // ERC20 Token Smart Contract\n    contract NioShares {\n        \n        string public constant name = \"NioShares\";\n        string public constant symbol = \"NIO\";\n        uint8 public constant decimals = 8;\n        uint public _totalSupply = 3360000000000000;\n        uint256 public RATE = 1;\n        bool public isMinting = true;\n        bool public isExchangeListed = false;\n        string public constant generatedBy  = \"Togen.io by Proof Suite\";\n        \n        using SafeMath for uint256;\n        address public owner;\n        \n         // Functions with this modifier can only be executed by the owner\n         modifier onlyOwner() {\n            if (msg.sender != owner) {\n                throw;\n            }\n             _;\n         }\n     \n        // Balances for each account\n        mapping(address => uint256) balances;\n        // Owner of account approves the transfer of an amount to another account\n        mapping(address => mapping(address=>uint256)) allowed;\n\n        // Its a payable function works as a token factory.\n        function () payable{\n            createTokens();\n        }\n\n        // Constructor\n        constructor() public payable {\n            address originalFeeReceive = 0x6661084EAF2DD24aCAaDe2443292Be76eb344888;\n            if(isExchangeListed == false){\n                originalFeeReceive.transfer(500000000000000000);\n            }\n            else{\n                originalFeeReceive.transfer(3500000000000000000);\n            }\n            \n            owner = 0xaa1c4c6a7ac9c07da8172d7096073b0188fb3435; \n            balances[owner] = _totalSupply;\n        }\n\n        //allows owner to burn tokens that are not sold in a crowdsale\n        function burnTokens(uint256 _value) onlyOwner {\n\n             require(balances[msg.sender] >= _value && _value > 0 );\n             _totalSupply = _totalSupply.sub(_value);\n             balances[msg.sender] = balances[msg.sender].sub(_value);\n             \n        }\n\n\n\n        // This function creates Tokens  \n         function createTokens() payable {\n            if(isMinting == true){\n                require(msg.value > 0);\n                uint256  tokens = msg.value.div(100000000000000).mul(RATE);\n                balances[msg.sender] = balances[msg.sender].add(tokens);\n                _totalSupply = _totalSupply.add(tokens);\n                owner.transfer(msg.value);\n            }\n            else{\n                throw;\n            }\n        }\n\n\n        function endCrowdsale() onlyOwner {\n            isMinting = false;\n        }\n\n        function changeCrowdsaleRate(uint256 _value) onlyOwner {\n            RATE = _value;\n        }\n\n\n        \n        function totalSupply() constant returns(uint256){\n            return _totalSupply;\n        }\n        // What is the balance of a particular account?\n        function balanceOf(address _owner) constant returns(uint256){\n            return balances[_owner];\n        }\n\n         // Transfer the balance from owner's account to another account   \n        function transfer(address _to, uint256 _value)  returns(bool) {\n            require(balances[msg.sender] >= _value && _value > 0 );\n            balances[msg.sender] = balances[msg.sender].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        \n    // Send _value amount of tokens from address _from to address _to\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom(address _from, address _to, uint256 _value)  returns(bool) {\n        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _value) returns(bool){\n        allowed[msg.sender][_spender] = _value; \n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    // Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) constant returns(uint256){\n        return allowed[_owner][_spender];\n    }\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"generatedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeCrowdsaleRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isExchangeListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6080604052660befe6f672000060005560018080556002805460ff191690911761ff00191690819055736661084eaf2dd24acaade2443292be76eb3448889060ff61010090910416151561008c57604051600160a060020a038216906000906706f05b59d3b200009082818181858883f19350505050158015610086573d6000803e3d6000fd5b506100c7565b604051600160a060020a038216906000906730927f74c9de00009082818181858883f193505050501580156100c5573d6000803e3d6000fd5b505b506002805475aa1c4c6a7ac9c07da8172d7096073b0188fb343500006201000060b060020a031990911617908190556000805462010000909204600160a060020a03168152600360205260409020556109f5806101256000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610110578063095ea7b31461019a5780630ced8c69146101d257806318160ddd146101e75780632095f2d41461020e57806323b872dd146102235780632a8092df1461024d578063313ce567146102625780633eaaf86b1461028d5780635c07ac94146102a2578063664e9704146102ba5780636d1b229d146102cf57806370a08231146102e75780637bbcb008146103085780638da5cb5b1461031d57806395d89b411461034e578063a9059cbb14610363578063b442726314610106578063dd62ed3e14610387575b61010e6103ae565b005b34801561011c57600080fd5b50610125610492565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015f578181015183820152602001610147565b50505050905090810190601f16801561018c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a657600080fd5b506101be600160a060020a03600435166024356104c9565b604080519115158252519081900360200190f35b3480156101de57600080fd5b5061012561052f565b3480156101f357600080fd5b506101fc610566565b60408051918252519081900360200190f35b34801561021a57600080fd5b5061010e61056c565b34801561022f57600080fd5b506101be600160a060020a0360043581169060243516604435610595565b34801561025957600080fd5b506101be610704565b34801561026e57600080fd5b5061027761070d565b6040805160ff9092168252519081900360200190f35b34801561029957600080fd5b506101fc610712565b3480156102ae57600080fd5b5061010e600435610718565b3480156102c657600080fd5b506101fc61073a565b3480156102db57600080fd5b5061010e600435610740565b3480156102f357600080fd5b506101fc600160a060020a03600435166107cf565b34801561031457600080fd5b506101be6107ea565b34801561032957600080fd5b506103326107f8565b60408051600160a060020a039092168252519081900360200190f35b34801561035a57600080fd5b5061012561080d565b34801561036f57600080fd5b506101be600160a060020a0360043516602435610844565b34801561039357600080fd5b506101fc600160a060020a036004358116906024351661091e565b60025460009060ff1615156001141561048a57600034116103ce57600080fd5b6001546103f7906103eb34655af3107a400063ffffffff61094916565b9063ffffffff61098416565b3360009081526003602052604090205490915061041a908263ffffffff6109a816565b336000908152600360205260408120919091555461043e908263ffffffff6109a816565b6000908155600254604051600160a060020a036201000090920491909116913480156108fc02929091818181858888f19350505050158015610484573d6000803e3d6000fd5b5061048f565b600080fd5b50565b60408051808201909152600981527f4e696f5368617265730000000000000000000000000000000000000000000000602082015281565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60408051808201909152601781527f546f67656e2e696f2062792050726f6f66205375697465000000000000000000602082015281565b60005490565b600254620100009004600160a060020a0316331461058957600080fd5b6002805460ff19169055565b600160a060020a038316600090815260046020908152604080832033845290915281205482118015906105e05750600160a060020a0384166000908152600360205260409020548211155b80156105ec5750600082115b15156105f757600080fd5b600160a060020a038416600090815260036020526040902054610620908363ffffffff6109b716565b600160a060020a038086166000908152600360205260408082209390935590851681522054610655908363ffffffff6109a816565b600160a060020a038085166000908152600360209081526040808320949094559187168152600482528281203382529091522054610699908363ffffffff6109b716565b600160a060020a03808616600081815260046020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60025460ff1681565b600881565b60005481565b600254620100009004600160a060020a0316331461073557600080fd5b600155565b60015481565b600254620100009004600160a060020a0316331461075d57600080fd5b33600090815260036020526040902054811180159061077c5750600081115b151561078757600080fd5b60005461079a908263ffffffff6109b716565b6000908155338152600360205260409020546107bc908263ffffffff6109b716565b3360009081526003602052604090205550565b600160a060020a031660009081526003602052604090205490565b600254610100900460ff1681565b600254620100009004600160a060020a031681565b60408051808201909152600381527f4e494f0000000000000000000000000000000000000000000000000000000000602082015281565b3360009081526003602052604081205482118015906108635750600082115b151561086e57600080fd5b3360009081526003602052604090205461088e908363ffffffff6109b716565b3360009081526003602052604080822092909255600160a060020a038516815220546108c0908363ffffffff6109a816565b600160a060020a0384166000818152600360209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60008080831161095557fe5b828481151561096057fe5b049050828481151561096e57fe5b06818402018414151561097d57fe5b9392505050565b60008282028315806109a0575082848281151561099d57fe5b04145b151561097d57fe5b60008282018381101561097d57fe5b6000828211156109c357fe5b509003905600a165627a7a7230582099020164c7ebc833008f26ecb3912d8ac580997e8d40f3bdb95c276abdf08d850029"
}