{
  "address": "0x96c645d3d3706f793ef52c19bbace441900ed47d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Mt Pelerin Shares Token",
  "contractName": "MPSToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-18\n*/\n\n/**\n * MPSToken.sol\n * MPS Token (Mt Pelerin Share)\n\n * More info about MPS : https://github.com/MtPelerin/MtPelerin-share-MPS\n\n * The unflattened code is available through this github tag:\n * https://github.com/MtPelerin/MtPelerin-protocol/tree/etherscan-verify-batch-1\n\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n\n * @notice All matters regarding the intellectual property of this code \n * @notice or software are subject to Swiss Law without reference to its \n * @notice conflicts of law rules.\n\n * @notice License for each contract is available in the respective file\n * @notice or in the LICENSE.md file.\n * @notice https://github.com/MtPelerin/\n\n * @notice Code by OpenZeppelin is copyrighted and licensed on their repository:\n * @notice https://github.com/OpenZeppelin/openzeppelin-solidity\n */\n\npragma solidity ^0.4.24;\n\n// File: contracts/zeppelin/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/zeppelin/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/zeppelin/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: contracts/interface/ISeizable.sol\n\n/**\n * @title ISeizable\n * @dev ISeizable interface\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n **/\ncontract ISeizable {\n  function seize(address _account, uint256 _value) public;\n  event Seize(address account, uint256 amount);\n}\n\n// File: contracts/zeppelin/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/Authority.sol\n\n/**\n * @title Authority\n * @dev The Authority contract has an authority address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n * Authority means to represent a legal entity that is entitled to specific rights\n *\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n *\n * Error messages\n * AU01: Message sender must be an authority\n */\ncontract Authority is Ownable {\n\n  address authority;\n\n  /**\n   * @dev Throws if called by any account other than the authority.\n   */\n  modifier onlyAuthority {\n    require(msg.sender == authority, \"AU01\");\n    _;\n  }\n\n  /**\n   * @dev return the address associated to the authority\n   */\n  function authorityAddress() public view returns (address) {\n    return authority;\n  }\n\n  /**\n   * @dev rdefines an authority\n   * @param _name the authority name\n   * @param _address the authority address.\n   */\n  function defineAuthority(string _name, address _address) public onlyOwner {\n    emit AuthorityDefined(_name, _address);\n    authority = _address;\n  }\n\n  event AuthorityDefined(\n    string name,\n    address _address\n  );\n}\n\n// File: contracts/token/component/SeizableToken.sol\n\n/**\n * @title SeizableToken\n * @dev BasicToken contract which allows owner to seize accounts\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n *\n * Error messages\n * ST01: Owner cannot seize itself\n*/\ncontract SeizableToken is BasicToken, Authority, ISeizable {\n  using SafeMath for uint256;\n\n  // Although very unlikely, the value below may overflow.\n  // This contract and its children should expect it to happened and consider\n  // this value as only the first 256 bits of the complete value.\n  uint256 public allTimeSeized = 0; // overflow may happend\n\n  /**\n   * @dev called by the owner to seize value from the account\n   */\n  function seize(address _account, uint256 _value)\n    public onlyAuthority\n  {\n    require(_account != owner, \"ST01\");\n\n    balances[_account] = balances[_account].sub(_value);\n    balances[authority] = balances[authority].add(_value);\n\n    allTimeSeized += _value;\n    emit Seize(_account, _value);\n  }\n}\n\n// File: contracts/zeppelin/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts/zeppelin/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/interface/IProvableOwnership.sol\n\n/**\n * @title IProvableOwnership\n * @dev IProvableOwnership interface which describe proof of ownership.\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n **/\ncontract IProvableOwnership {\n  function proofLength(address _holder) public view returns (uint256);\n  function proofAmount(address _holder, uint256 _proofId)\n    public view returns (uint256);\n\n  function proofDateFrom(address _holder, uint256 _proofId)\n    public view returns (uint256);\n\n  function proofDateTo(address _holder, uint256 _proofId)\n    public view returns (uint256);\n\n  function createProof(address _holder) public;\n  function checkProof(address _holder, uint256 _proofId, uint256 _at)\n    public view returns (uint256);\n\n  function transferWithProofs(\n    address _to,\n    uint256 _value,\n    bool _proofFrom,\n    bool _proofTo\n    ) public returns (bool);\n\n  function transferFromWithProofs(\n    address _from,\n    address _to,\n    uint256 _value,\n    bool _proofFrom,\n    bool _proofTo\n    ) public returns (bool);\n\n  event ProofOfOwnership(address indexed holder, uint256 proofId);\n}\n\n// File: contracts/interface/IAuditableToken.sol\n\n/**\n * @title IAuditableToken\n * @dev IAuditableToken interface describing the audited data\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n **/\ncontract IAuditableToken {\n  function lastTransactionAt(address _address) public view returns (uint256);\n  function lastReceivedAt(address _address) public view returns (uint256);\n  function lastSentAt(address _address) public view returns (uint256);\n  function transactionCount(address _address) public view returns (uint256);\n  function receivedCount(address _address) public view returns (uint256);\n  function sentCount(address _address) public view returns (uint256);\n  function totalReceivedAmount(address _address) public view returns (uint256);\n  function totalSentAmount(address _address) public view returns (uint256);\n}\n\n// File: contracts/token/component/AuditableToken.sol\n\n/**\n * @title AuditableToken\n * @dev AuditableToken contract\n * AuditableToken provides transaction data which can be used\n * in other smart contracts\n *\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n **/\ncontract AuditableToken is IAuditableToken, StandardToken {\n\n   // Although very unlikely, the following values below may overflow:\n   //   receivedCount, sentCount, totalReceivedAmount, totalSentAmount\n   // This contract and its children should expect it to happen and consider\n   // these values as only the first 256 bits of the complete value.\n  struct Audit {\n    uint256 createdAt;\n    uint256 lastReceivedAt;\n    uint256 lastSentAt;\n    uint256 receivedCount; // potential overflow\n    uint256 sentCount; // poential overflow\n    uint256 totalReceivedAmount; // potential overflow\n    uint256 totalSentAmount; // potential overflow\n  }\n  mapping(address => Audit) internal audits;\n\n  /**\n   * @dev Time of the creation of the audit struct\n   */\n  function auditCreatedAt(address _address) public view returns (uint256) {\n    return audits[_address].createdAt;\n  }\n\n  /**\n   * @dev Time of the last transaction\n   */\n  function lastTransactionAt(address _address) public view returns (uint256) {\n    return ( audits[_address].lastReceivedAt > audits[_address].lastSentAt ) ?\n      audits[_address].lastReceivedAt : audits[_address].lastSentAt;\n  }\n\n  /**\n   * @dev Time of the last received transaction\n   */\n  function lastReceivedAt(address _address) public view returns (uint256) {\n    return audits[_address].lastReceivedAt;\n  }\n\n  /**\n   * @dev Time of the last sent transaction\n   */\n  function lastSentAt(address _address) public view returns (uint256) {\n    return audits[_address].lastSentAt;\n  }\n\n  /**\n   * @dev Count of transactions\n   */\n  function transactionCount(address _address) public view returns (uint256) {\n    return audits[_address].receivedCount + audits[_address].sentCount;\n  }\n\n  /**\n   * @dev Count of received transactions\n   */\n  function receivedCount(address _address) public view returns (uint256) {\n    return audits[_address].receivedCount;\n  }\n\n  /**\n   * @dev Count of sent transactions\n   */\n  function sentCount(address _address) public view returns (uint256) {\n    return audits[_address].sentCount;\n  }\n\n  /**\n   * @dev All time received\n   */\n  function totalReceivedAmount(address _address)\n    public view returns (uint256)\n  {\n    return audits[_address].totalReceivedAmount;\n  }\n\n  /**\n   * @dev All time sent\n   */\n  function totalSentAmount(address _address) public view returns (uint256) {\n    return audits[_address].totalSentAmount;\n  }\n\n  /**\n   * @dev Overriden transfer function\n   */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    if (!super.transfer(_to, _value)) {\n      return false;\n    }\n    updateAudit(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Overriden transferFrom function\n   */\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool)\n  {\n    if (!super.transferFrom(_from, _to, _value)) {\n      return false;\n    }\n\n    updateAudit(_from, _to, _value);\n    return true;\n  }\n\n /**\n   * @dev currentTime()\n   */\n  function currentTime() internal view returns (uint256) {\n    // solium-disable-next-line security/no-block-members\n    return now;\n  }\n\n  /**\n   * @dev Update audit data\n   */\n  function updateAudit(address _sender, address _receiver, uint256 _value)\n    private returns (uint256)\n  {\n    Audit storage senderAudit = audits[_sender];\n    senderAudit.lastSentAt = currentTime();\n    senderAudit.sentCount++;\n    senderAudit.totalSentAmount += _value;\n    if (senderAudit.createdAt == 0) {\n      senderAudit.createdAt = currentTime();\n    }\n\n    Audit storage receiverAudit = audits[_receiver];\n    receiverAudit.lastReceivedAt = currentTime();\n    receiverAudit.receivedCount++;\n    receiverAudit.totalReceivedAmount += _value;\n    if (receiverAudit.createdAt == 0) {\n      receiverAudit.createdAt = currentTime();\n    }\n  }\n}\n\n// File: contracts/token/component/ProvableOwnershipToken.sol\n\n/**\n * @title ProvableOwnershipToken\n * @dev ProvableOwnershipToken is a StandardToken\n * with ability to record a proof of ownership\n *\n * When desired a proof of ownership can be generated.\n * The proof is stored within the contract.\n * A proofId is then returned.\n * The proof can later be used to retrieve the amount needed.\n *\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n **/\ncontract ProvableOwnershipToken is IProvableOwnership, AuditableToken, Ownable {\n  struct Proof {\n    uint256 amount;\n    uint256 dateFrom;\n    uint256 dateTo;\n  }\n  mapping(address => mapping(uint256 => Proof)) internal proofs;\n  mapping(address => uint256) internal proofLengths;\n\n  /**\n   * @dev number of proof stored in the contract\n   */\n  function proofLength(address _holder) public view returns (uint256) {\n    return proofLengths[_holder];\n  }\n\n  /**\n   * @dev amount contains for the proofId reccord\n   */\n  function proofAmount(address _holder, uint256 _proofId)\n    public view returns (uint256)\n  {\n    return proofs[_holder][_proofId].amount;\n  }\n\n  /**\n   * @dev date from which the proof is valid\n   */\n  function proofDateFrom(address _holder, uint256 _proofId)\n    public view returns (uint256)\n  {\n    return proofs[_holder][_proofId].dateFrom;\n  }\n\n  /**\n   * @dev date until the proof is valid\n   */\n  function proofDateTo(address _holder, uint256 _proofId)\n    public view returns (uint256)\n  {\n    return proofs[_holder][_proofId].dateTo;\n  }\n\n  /**\n   * @dev called to challenge a proof at a point in the past\n   * Return the amount tokens owned by the proof owner at that time\n   */\n  function checkProof(address _holder, uint256 _proofId, uint256 _at)\n    public view returns (uint256)\n  {\n    if (_proofId < proofLengths[_holder]) {\n      Proof storage proof = proofs[_holder][_proofId];\n\n      if (proof.dateFrom <= _at && _at <= proof.dateTo) {\n        return proof.amount;\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * @dev called to create a proof of token ownership\n   */\n  function createProof(address _holder) public {\n    createProofInternal(\n      _holder,\n      balanceOf(_holder),\n      lastTransactionAt(_holder)\n    );\n  }\n\n  /**\n   * @dev transfer function with also create a proof of ownership to any of the participants\n   * @param _proofSender if true a proof will be created for the sender\n   * @param _proofReceiver if true a proof will be created for the receiver\n   */\n  function transferWithProofs(\n    address _to,\n    uint256 _value,\n    bool _proofSender,\n    bool _proofReceiver\n  ) public returns (bool)\n  {\n    uint256 balanceBeforeFrom = balanceOf(msg.sender);\n    uint256 beforeFrom = lastTransactionAt(msg.sender);\n    uint256 balanceBeforeTo = balanceOf(_to);\n    uint256 beforeTo = lastTransactionAt(_to);\n\n    if (!super.transfer(_to, _value)) {\n      return false;\n    }\n\n    transferPostProcessing(\n      msg.sender,\n      balanceBeforeFrom,\n      beforeFrom,\n      _proofSender\n    );\n    transferPostProcessing(\n      _to,\n      balanceBeforeTo,\n      beforeTo,\n      _proofReceiver\n    );\n    return true;\n  }\n\n  /**\n   * @dev transfer function with also create a proof of ownership to any of the participants\n   * @param _proofSender if true a proof will be created for the sender\n   * @param _proofReceiver if true a proof will be created for the receiver\n   */\n  function transferFromWithProofs(\n    address _from,\n    address _to, \n    uint256 _value,\n    bool _proofSender, bool _proofReceiver)\n    public returns (bool)\n  {\n    uint256 balanceBeforeFrom = balanceOf(_from);\n    uint256 beforeFrom = lastTransactionAt(_from);\n    uint256 balanceBeforeTo = balanceOf(_to);\n    uint256 beforeTo = lastTransactionAt(_to);\n\n    if (!super.transferFrom(_from, _to, _value)) {\n      return false;\n    }\n\n    transferPostProcessing(\n      _from,\n      balanceBeforeFrom,\n      beforeFrom,\n      _proofSender\n    );\n    transferPostProcessing(\n      _to,\n      balanceBeforeTo,\n      beforeTo,\n      _proofReceiver\n    );\n    return true;\n  }\n\n  /**\n   * @dev can be used to force create a proof (with a fake amount potentially !)\n   * Only usable by child contract internaly\n   */\n  function createProofInternal(\n    address _holder, uint256 _amount, uint256 _from) internal\n  {\n    uint proofId = proofLengths[_holder];\n    // solium-disable-next-line security/no-block-members\n    proofs[_holder][proofId] = Proof(_amount, _from, currentTime());\n    proofLengths[_holder] = proofId+1;\n    emit ProofOfOwnership(_holder, proofId);\n  }\n\n  /**\n   * @dev private function updating contract state after a transfer operation\n   */\n  function transferPostProcessing(\n    address _holder,\n    uint256 _balanceBefore,\n    uint256 _before,\n    bool _proof) private\n  {\n    if (_proof) {\n      createProofInternal(_holder, _balanceBefore, _before);\n    }\n  }\n\n  event ProofOfOwnership(address indexed holder, uint256 proofId);\n}\n\n// File: contracts/interface/IClaimable.sol\n\n/**\n * @title IClaimable\n * @dev IClaimable interface\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n **/\ninterface IClaimable {\n  function hasClaimsSince(address _address, uint256 at)\n    external view returns (bool);\n}\n\n// File: contracts/interface/IWithClaims.sol\n\n/**\n * @title IWithClaims\n * @dev IWithClaims interface\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n **/\ncontract IWithClaims {\n  function claimableLength() public view returns (uint256);\n  function claimable(uint256 _claimableId) public view returns (IClaimable);\n  function hasClaims(address _holder) public view returns (bool);\n  function defineClaimables(IClaimable[] _claimables) public;\n\n  event ClaimablesDefined(uint256 count);\n}\n\n// File: contracts/token/component/TokenWithClaims.sol\n\n/**\n * @title TokenWithClaims\n * @dev TokenWithClaims contract\n * TokenWithClaims is a token that will create a\n * proofOfOwnership during transfers if a claim can be made.\n * Holder may ask for the claim later using the proofOfOwnership\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n *\n * Error messages\n * E01: Claimable address must be defined\n * E02: Claimables parameter must not be empty\n * E03: Claimable does not exist\n**/\ncontract TokenWithClaims is IWithClaims, ProvableOwnershipToken {\n\n  IClaimable[] claimables;\n\n  /**\n   * @dev Constructor\n   */\n  constructor(IClaimable[] _claimables) public {\n    claimables = _claimables;\n  }\n\n  /**\n   * @dev Returns the number of claimables\n   */\n  function claimableLength() public view returns (uint256) {\n    return claimables.length;\n  }\n\n  /**\n   * @dev Returns the Claimable associated to the specified claimableId\n   */\n  function claimable(uint256 _claimableId) public view returns (IClaimable) {\n    return claimables[_claimableId];\n  }\n\n  /**\n   * @dev Returns true if there are any claims associated to this token\n   * to be made at this time for the _holder\n   */\n  function hasClaims(address _holder) public view returns (bool) {\n    uint256 lastTransaction = lastTransactionAt(_holder);\n    for (uint256 i = 0; i < claimables.length; i++) {\n      if (claimables[i].hasClaimsSince(_holder, lastTransaction)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @dev Override the transfer function with transferWithProofs\n   * A proof of ownership will be made if any claims can be made by the participants\n   */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    bool proofFrom = hasClaims(msg.sender);\n    bool proofTo = hasClaims(_to);\n\n    return super.transferWithProofs(\n      _to,\n      _value,\n      proofFrom,\n      proofTo\n    );\n  }\n\n  /**\n   * @dev Override the transfer function with transferWithProofs\n   * A proof of ownership will be made if any claims can be made by the participants\n   */\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool)\n  {\n    bool proofFrom = hasClaims(_from);\n    bool proofTo = hasClaims(_to);\n\n    return super.transferFromWithProofs(\n      _from,\n      _to,\n      _value,\n      proofFrom,\n      proofTo\n    );\n  }\n\n  /**\n   * @dev transfer with proofs\n   */\n  function transferWithProofs(\n    address _to,\n    uint256 _value,\n    bool _proofFrom,\n    bool _proofTo\n  ) public returns (bool)\n  {\n    bool proofFrom = _proofFrom || hasClaims(msg.sender);\n    bool proofTo = _proofTo || hasClaims(_to);\n\n    return super.transferWithProofs(\n      _to,\n      _value,\n      proofFrom,\n      proofTo\n    );\n  }\n\n  /**\n   * @dev transfer from with proofs\n   */\n  function transferFromWithProofs(\n    address _from,\n    address _to,\n    uint256 _value,\n    bool _proofFrom,\n    bool _proofTo\n  ) public returns (bool)\n  {\n    bool proofFrom = _proofFrom || hasClaims(_from);\n    bool proofTo = _proofTo || hasClaims(_to);\n\n    return super.transferFromWithProofs(\n      _from,\n      _to,\n      _value,\n      proofFrom,\n      proofTo\n    );\n  }\n\n  /**\n   * @dev define claimables contract to this token\n   */\n  function defineClaimables(IClaimable[] _claimables) public onlyOwner {\n    claimables = _claimables;\n    emit ClaimablesDefined(claimables.length);\n  }\n}\n\n// File: contracts/interface/IRule.sol\n\n/**\n * @title IRule\n * @dev IRule interface\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n **/\ninterface IRule {\n  function isAddressValid(address _address) external view returns (bool);\n  function isTransferValid(address _from, address _to, uint256 _amount)\n    external view returns (bool);\n}\n\n// File: contracts/interface/IWithRules.sol\n\n/**\n * @title IWithRules\n * @dev IWithRules interface\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n **/\ncontract IWithRules {\n  function ruleLength() public view returns (uint256);\n  function rule(uint256 _ruleId) public view returns (IRule);\n  function validateAddress(address _address) public view returns (bool);\n  function validateTransfer(address _from, address _to, uint256 _amount)\n    public view returns (bool);\n\n  function defineRules(IRule[] _rules) public;\n\n  event RulesDefined(uint256 count);\n}\n\n// File: contracts/rule/WithRules.sol\n\n/**\n * @title WithRules\n * @dev WithRules contract allows inheriting contract to use a set of validation rules\n * @dev contract owner may add or remove rules\n *\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n *\n * Error messages\n * WR01: The rules rejected this address\n * WR02: The rules rejected the transfer\n **/\ncontract WithRules is IWithRules, Ownable {\n\n  IRule[] internal rules;\n\n  /**\n   * @dev Constructor\n   */\n  constructor(IRule[] _rules) public {\n    rules = _rules;\n  }\n\n  /**\n   * @dev Returns the number of rules\n   */\n  function ruleLength() public view returns (uint256) {\n    return rules.length;\n  }\n\n  /**\n   * @dev Returns the Rule associated to the specified ruleId\n   */\n  function rule(uint256 _ruleId) public view returns (IRule) {\n    return rules[_ruleId];\n  }\n\n  /**\n   * @dev Check if the rules are valid for an address\n   */\n  function validateAddress(address _address) public view returns (bool) {\n    for (uint256 i = 0; i < rules.length; i++) {\n      if (!rules[i].isAddressValid(_address)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @dev Check if the rules are valid\n   */\n  function validateTransfer(address _from, address _to, uint256 _amount)\n    public view returns (bool)\n  {\n    for (uint256 i = 0; i < rules.length; i++) {\n      if (!rules[i].isTransferValid(_from, _to, _amount)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @dev Modifier to make functions callable\n   * only when participants follow rules\n   */\n  modifier whenAddressRulesAreValid(address _address) {\n    require(validateAddress(_address), \"WR01\");\n    _;\n  }\n\n  /**\n   * @dev Modifier to make transfer functions callable\n   * only when participants follow rules\n   */\n  modifier whenTransferRulesAreValid(\n    address _from,\n    address _to,\n    uint256 _amount)\n  {\n    require(validateTransfer(_from, _to, _amount), \"WR02\");\n    _;\n  }\n\n  /**\n   * @dev Define rules to the token\n   */\n  function defineRules(IRule[] _rules) public onlyOwner {\n    rules = _rules;\n    emit RulesDefined(rules.length);\n  }\n}\n\n// File: contracts/token/component/TokenWithRules.sol\n\n/**\n * @title TokenWithRules\n * @dev TokenWithRules contract\n * TokenWithRules is a token that will apply\n * rules restricting transferability\n *\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n *\n **/\ncontract TokenWithRules is StandardToken, WithRules {\n\n  /**\n   * @dev Constructor\n   */\n  constructor(IRule[] _rules) public WithRules(_rules) { }\n\n  /**\n   * @dev Overriden transfer function\n   */\n  function transfer(address _to, uint256 _value)\n    public whenTransferRulesAreValid(msg.sender, _to, _value)\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  /**\n   * @dev Overriden transferFrom function\n   */\n  function transferFrom(address _from, address _to, uint256 _value)\n    public whenTransferRulesAreValid(_from, _to, _value)\n    whenAddressRulesAreValid(msg.sender)\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n}\n\n// File: contracts/token/BridgeToken.sol\n\n/**\n * @title BridgeToken\n * @dev BridgeToken contract\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n */\ncontract BridgeToken is TokenWithRules, TokenWithClaims, SeizableToken {\n  string public name;\n  string public symbol;\n\n  /**\n   * @dev constructor\n   */\n  constructor(string _name, string _symbol) \n    TokenWithRules(new IRule[](0))\n    TokenWithClaims(new IClaimable[](0)) public\n  {\n    name = _name;\n    symbol = _symbol;\n  }\n}\n\n// File: contracts/interface/IMintable.sol\n\n/**\n * @title Mintable interface\n *\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n */\ncontract IMintable {\n  function mintingFinished() public view returns (bool);\n\n  function mint(address _to, uint256 _amount) public returns (bool);\n  function finishMinting() public returns (bool);\n \n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n}\n\n// File: contracts/token/component/MintableToken.sol\n\n/**\n * @title MintableToken\n * @dev MintableToken contract\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n *\n * Error messages\n * MT01: Minting is already finished.\n*/\ncontract MintableToken is StandardToken, Ownable, IMintable {\n\n  bool public mintingFinished = false;\n\n  function mintingFinished() public view returns (bool) {\n    return mintingFinished;\n  }\n\n  modifier canMint() {\n    require(!mintingFinished, \"MT01\");\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  ) public canMint onlyOwner returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public canMint onlyOwner returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n}\n\n// File: contracts/token/MintableBridgeToken.sol\n\n/**\n * @title MintableBridgeToken\n * @dev MintableBridgeToken contract\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n */\ncontract MintableBridgeToken is BridgeToken, MintableToken {\n\n  string public name;\n  string public symbol;\n\n  /**\n   * @dev constructor\n   */\n  constructor(string _name, string _symbol)\n    BridgeToken(_name, _symbol) public\n  {\n    name = _name;\n    symbol = _symbol;\n  }\n}\n\n// File: contracts/token/ShareBridgeToken.sol\n\n/**\n * @title ShareBridgeToken\n * @dev ShareBridgeToken contract\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n */\ncontract ShareBridgeToken is MintableBridgeToken {\n\n  // Shares are non divisible assets\n  uint256 public decimals = 0;\n\n  /**\n   * @dev constructor\n   */\n  constructor(string _name, string _symbol) public\n    MintableBridgeToken(_name, _symbol)\n  {\n  }\n}\n\n// File: contracts/mps/MPSToken.sol\n\n/**\n * @title MPSToken\n * @dev MPSToken contract\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n */\ncontract MPSToken is ShareBridgeToken {\n\n  /**\n   * @dev constructor\n   */\n  constructor() public\n    ShareBridgeToken(\"MtPelerin Shares\", \"MPS\")\n  {\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"totalSentAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"lastTransactionAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"hasClaims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTimeSeized\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"totalReceivedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_proofFrom\",\"type\":\"bool\"},{\"name\":\"_proofTo\",\"type\":\"bool\"}],\"name\":\"transferWithProofs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_proofId\",\"type\":\"uint256\"}],\"name\":\"proofDateFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"createProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"validateAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"receivedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_proofId\",\"type\":\"uint256\"}],\"name\":\"proofDateTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"lastSentAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"proofLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_proofId\",\"type\":\"uint256\"}],\"name\":\"proofAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_proofId\",\"type\":\"uint256\"},{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"checkProof\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"auditCreatedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ruleLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"validateTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rules\",\"type\":\"address[]\"}],\"name\":\"defineRules\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_proofFrom\",\"type\":\"bool\"},{\"name\":\"_proofTo\",\"type\":\"bool\"}],\"name\":\"transferFromWithProofs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_claimableId\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"lastReceivedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"sentCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ruleId\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimables\",\"type\":\"address[]\"}],\"name\":\"defineClaimables\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"defineAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimableLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Seize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AuthorityDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proofId\",\"type\":\"uint256\"}],\"name\":\"ProofOfOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"RulesDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"ClaimablesDefined\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600a556000600d60006101000a81548160ff02191690831515021790555060006010553480156200003657600080fd5b506040805190810160405280601081526020017f4d7450656c6572696e20536861726573000000000000000000000000000000008152506040805190810160405280600381526020017f4d50530000000000000000000000000000000000000000000000000000000000815250818181816000604051908082528060200260200182016040528015620000d85781602001602082028038833980820191505090505b5060006040519080825280602002602001820160405280156200010a5781602001602082028038833980820191505090505b508033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806005908051906020019062000165929190620001f2565b50505080600890805190602001906200018092919062000281565b505081600b90805190602001906200019a92919062000310565b5080600c9080519060200190620001b392919062000310565b50505081600e9080519060200190620001ce92919062000310565b5080600f9080519060200190620001e792919062000310565b50505050506200044b565b8280548282559060005260206000209081019282156200026e579160200282015b828111156200026d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000213565b5b5090506200027d919062000397565b5090565b828054828255906000526020600020908101928215620002fd579160200282015b82811115620002fc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620002a2565b5b5090506200030c9190620003dd565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200035357805160ff191683800117855562000384565b8280016001018555821562000384579182015b828111156200038357825182559160200191906001019062000366565b5b50905062000393919062000423565b5090565b620003da91905b80821115620003d657600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055506001016200039e565b5090565b90565b6200042091905b808211156200041c57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101620003e4565b5090565b90565b6200044891905b80821115620004445760008160009055506001016200042a565b5090565b90565b6140a8806200045b6000396000f30060806040526004361061023b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305d2035b1461024057806306fdde031461026f578063095ea7b3146102ff5780630c6a44e61461036457806318160ddd146103bb57806318ec53b2146103e657806323b872dd1461043d578063313ce567146104c257806333a925c1146104ed5780633c695d4e1461054857806340c10f191461059f57806345601d181461060457806346be8d8b1461062f57806349e1b59d146106865780634add1b7014610703578063539e5c3c146107645780635e8e30a6146107a757806360792829146108025780636416745f1461085957806366188463146108ba57806370a082311461091f578063715018a6146109765780637d64bcb41461098d5780638826ff30146109bc578063884465e614610a135780638da5cb5b14610a6a57806395d89b4114610ac157806399be337514610b515780639c3c1f6214610ba8578063a7341e7514610c09578063a9059cbb14610c74578063aa2e150914610cd9578063b462741614610d30578063c6946a1214610d5b578063cb1a1b0614610de0578063d18508ce14610e46578063d1d58b2514610ee3578063d359c3a014610f50578063d6d8a23a14610fa7578063d73dd62314610ffe578063db18af6c14611063578063dd62ed3e146110d0578063e5a0518614611147578063eb9253c0146111ad578063f2fde38b146111fa578063fc21e1671461123d578063fc862466146112c6575b600080fd5b34801561024c57600080fd5b506102556112f1565b604051808215151515815260200191505060405180910390f35b34801561027b57600080fd5b50610284611308565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102c45780820151818401526020810190506102a9565b50505050905090810190601f1680156102f15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561030b57600080fd5b5061034a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113a6565b604051808215151515815260200191505060405180910390f35b34801561037057600080fd5b506103a5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611498565b6040518082815260200191505060405180910390f35b3480156103c757600080fd5b506103d06114e4565b6040518082815260200191505060405180910390f35b3480156103f257600080fd5b50610427600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114ee565b6040518082815260200191505060405180910390f35b34801561044957600080fd5b506104a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061160e565b604051808215151515815260200191505060405180910390f35b3480156104ce57600080fd5b506104d7611641565b6040518082815260200191505060405180910390f35b3480156104f957600080fd5b5061052e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611647565b604051808215151515815260200191505060405180910390f35b34801561055457600080fd5b5061055d6117a7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105ab57600080fd5b506105ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117d1565b604051808215151515815260200191505060405180910390f35b34801561061057600080fd5b50610619611a20565b6040518082815260200191505060405180910390f35b34801561063b57600080fd5b50610670600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a26565b6040518082815260200191505060405180910390f35b34801561069257600080fd5b506106e9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190803515159060200190929190505050611a72565b604051808215151515815260200191505060405180910390f35b34801561070f57600080fd5b5061074e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ab5565b6040518082815260200191505060405180910390f35b34801561077057600080fd5b506107a5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b13565b005b3480156107b357600080fd5b506107e8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b31565b604051808215151515815260200191505060405180910390f35b34801561080e57600080fd5b50610843600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c7c565b6040518082815260200191505060405180910390f35b34801561086557600080fd5b506108a4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611cc8565b6040518082815260200191505060405180910390f35b3480156108c657600080fd5b50610905600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d26565b604051808215151515815260200191505060405180910390f35b34801561092b57600080fd5b50610960600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fb7565b6040518082815260200191505060405180910390f35b34801561098257600080fd5b5061098b611fff565b005b34801561099957600080fd5b506109a2612104565b604051808215151515815260200191505060405180910390f35b3480156109c857600080fd5b506109fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612235565b6040518082815260200191505060405180910390f35b348015610a1f57600080fd5b50610a54600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612281565b6040518082815260200191505060405180910390f35b348015610a7657600080fd5b50610a7f6122ca565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610acd57600080fd5b50610ad66122f0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b16578082015181840152602081019050610afb565b50505050905090810190601f168015610b435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b5d57600080fd5b50610b92600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061238e565b6040518082815260200191505060405180910390f35b348015610bb457600080fd5b50610bf3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061241e565b6040518082815260200191505060405180910390f35b348015610c1557600080fd5b50610c5e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061247c565b6040518082815260200191505060405180910390f35b348015610c8057600080fd5b50610cbf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061254f565b604051808215151515815260200191505060405180910390f35b348015610ce557600080fd5b50610d1a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612580565b6040518082815260200191505060405180910390f35b348015610d3c57600080fd5b50610d456125cc565b6040518082815260200191505060405180910390f35b348015610d6757600080fd5b50610dc6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506125d9565b604051808215151515815260200191505060405180910390f35b348015610dec57600080fd5b50610e4460048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050612762565b005b348015610e5257600080fd5b50610ec9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190803515159060200190929190505050612814565b604051808215151515815260200191505060405180910390f35b348015610eef57600080fd5b50610f0e60048036038101908080359060200190929190505050612859565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f5c57600080fd5b50610f91600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061289c565b6040518082815260200191505060405180910390f35b348015610fb357600080fd5b50610fe8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128e8565b6040518082815260200191505060405180910390f35b34801561100a57600080fd5b50611049600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612934565b604051808215151515815260200191505060405180910390f35b34801561106f57600080fd5b5061108e60048036038101908080359060200190929190505050612b30565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156110dc57600080fd5b50611131600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b73565b6040518082815260200191505060405180910390f35b34801561115357600080fd5b506111ab60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050612bfa565b005b3480156111b957600080fd5b506111f8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612cac565b005b34801561120657600080fd5b5061123b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613020565b005b34801561124957600080fd5b506112c4600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613088565b005b3480156112d257600080fd5b506112db6131f9565b6040518082815260200191505060405180910390f35b6000600d60009054906101000a900460ff16905090565b600e8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561139e5780601f106113735761010080835404028352916020019161139e565b820191906000526020600020905b81548152906001019060200180831161138157829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601549050919050565b6000600154905090565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154116115c357600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154611607565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101545b9050919050565b600080600061161c86611647565b915061162785611647565b90506116368686868585613206565b925050509392505050565b60105481565b6000806000611655846114ee565b9150600090505b60088054905081101561179b5760088181548110151561167857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f63ae8f385846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561174557600080fd5b505af1158015611759573d6000803e3d6000fd5b505050506040513d602081101561176f57600080fd5b81019080805190602001909291905050501561178e57600192506117a0565b808060010191505061165c565b600092505b5050919050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600d60009054906101000a900460ff16151515611858576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4d5430310000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118b457600080fd5b6118c98260015461327e90919063ffffffff16565b600181905550611920826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461327e90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600a5481565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501549050919050565b60008060008480611a885750611a8733611647565b5b91508380611a9b5750611a9a87611647565b5b9050611aa98787848461329a565b92505050949350505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010154905092915050565b611b2e81611b2083611fb7565b611b29846114ee565b613310565b50565b600080600090505b600580549050811015611c7157600581815481101515611b5557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf31ff86846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611c1a57600080fd5b505af1158015611c2e573d6000803e3d6000fd5b505050506040513d6020811015611c4457600080fd5b81019080805190602001909291905050501515611c645760009150611c76565b8080600101915050611b39565b600191505b50919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060020154905092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611e37576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ecb565b611e4a838261348390919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561205b57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600d60009054906101000a900460ff1615151561218b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4d5430310000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121e757600080fd5b6001600d60006101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123865780601f1061235b57610100808354040283529160200191612386565b820191906000526020600020905b81548152906001019060200180831161236957829003601f168201915b505050505081565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154019050919050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000154905092915050565b600080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484101561254257600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020905082816001015411158015612530575080600201548311155b156125415780600001549150612547565b5b600091505b509392505050565b600080600061255d33611647565b915061256885611647565b90506125768585848461329a565b9250505092915050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000600580549050905090565b600080600090505b600580549050811015612755576005818154811015156125fd57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340ecb7f28686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156126fe57600080fd5b505af1158015612712573d6000803e3d6000fd5b505050506040513d602081101561272857600080fd5b81019080805190602001909291905050501515612748576000915061275a565b80806001019150506125e1565b600191505b509392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127be57600080fd5b80600590805190602001906127d4929190613ee2565b507f0f572aca3f37d10fd111cb2180502f0524542f4ad4221e1c7577e5c0891385736005805490506040518082815260200191505060405180910390a150565b6000806000848061282a575061282988611647565b5b9150838061283d575061283c87611647565b5b905061284c8888888585613206565b9250505095945050505050565b600060088281548110151561286a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b60006129c582600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461327e90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600582815481101515612b4157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c5657600080fd5b8060089080519060200190612c6c929190613f6c565b507f0a1dc2dc3a398e1e697664076584837cc106784c8421cc06e31b58761e1cc9c86008805490506040518082815260200191505060405180910390a150565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d71576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f415530310000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612e37576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f535430310000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b612e88816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461348390919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612f3d81600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461327e90919063ffffffff16565b600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600a600082825401925050819055507f4051ba94e08bb094159fc38391422b4b8ccfd2b1f8919c0eb37bb042d4b9cd8e8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561307c57600080fd5b6130858161349c565b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156130e457600080fd5b7fc8c81ac5a1b95ead7b5f71eafa51c9a1436e443c27ba33460885b9debe345abf828260405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561317957808201518184015260208101905061315e565b50505050905090810190601f1680156131a65780820380516001836020036101000a031916815260200191505b50935050505060405180910390a180600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600880549050905090565b60008060008060006132178a611fb7565b93506132228a6114ee565b925061322d89611fb7565b9150613238896114ee565b90506132458a8a8a613598565b15156132545760009450613271565b6132608a85858a6136b2565b61326c898383896136b2565b600194505b5050505095945050505050565b6000818301905082811015151561329157fe5b80905092915050565b60008060008060006132ab33611fb7565b93506132b6336114ee565b92506132c189611fb7565b91506132cc896114ee565b90506132d889896136ca565b15156132e75760009450613304565b6132f33385858a6136b2565b6132ff898383896136b2565b600194505b50505050949350505050565b6000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050606060405190810160405280848152602001838152602001613374613763565b815250600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060008201518160000155602082015181600101556040820151816002015590505060018101600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f624dc8dd99b85719c6f1854ebf43cf6c8490b7e347b94743cdf580b663a07ca1826040518082815260200191505060405180910390a250505050565b600082821115151561349157fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156134d857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008383836135a88383836125d9565b151561361c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f575230320000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b3361362681611b31565b151561369a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f575230310000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6136a588888861376b565b9450505050509392505050565b80156136c4576136c3848484613310565b5b50505050565b60003383836136da8383836125d9565b151561374e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f575230320000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b613758868661379f565b935050505092915050565b600042905090565b60006137788484846137d1565b15156137875760009050613798565b613792848484613b8b565b50600190505b9392505050565b60006137ab8383613cc3565b15156137ba57600090506137cb565b6137c5338484613b8b565b50600190505b92915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561380e57600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561385b57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156138e657600080fd5b613937826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461348390919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506139ca826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461327e90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613a9b82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461348390919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000806000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150613bd9613763565b82600201819055508160040160008154809291906001019190505550838260060160008282540192505081905550600082600001541415613c2557613c1c613763565b82600001819055505b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050613c6e613763565b81600101819055508060030160008154809291906001019190505550838160050160008282540192505081905550600081600001541415613cba57613cb1613763565b81600001819055505b50509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515613d0057600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515613d4d57600080fd5b613d9e826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461348390919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613e31826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461327e90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b828054828255906000526020600020908101928215613f5b579160200282015b82811115613f5a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613f02565b5b509050613f689190613ff6565b5090565b828054828255906000526020600020908101928215613fe5579160200282015b82811115613fe45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613f8c565b5b509050613ff29190614039565b5090565b61403691905b8082111561403257600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101613ffc565b5090565b90565b61407991905b8082111561407557600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555060010161403f565b5090565b905600a165627a7a723058207b772253022a34c13f160094b262bd38a37d7bfb0c40727f22dc2bd07b2de7ae0029"
}