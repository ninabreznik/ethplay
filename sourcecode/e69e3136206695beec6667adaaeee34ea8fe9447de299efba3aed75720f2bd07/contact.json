{
  "address": "0x29ba1f1e0fecf0be0438c4a9f6f847e7b0be85d9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UnlockGmi",
  "compilerVersion": "v0.4.26+commit.4563c3fc",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-15\n*/\n\npragma solidity ^0.4.26;\n\ncontract SafeMath {\n    // Overflow protected math functions\n\n    /**\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\n\n        @param _x   value 1\n        @param _y   value 2\n\n        @return sum\n    */\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x + _y;\n        require(z >= _x);        //assert(z >= _x);\n        return z;\n    }\n\n    /**\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n\n        @param _x   minuend\n        @param _y   subtrahend\n\n        @return difference\n    */\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        require(_x >= _y);        //assert(_x >= _y);\n        return _x - _y;\n    }\n\n    /**\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n\n        @param _x   factor 1\n        @param _y   factor 2\n\n        @return product\n    */\n    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x * _y;\n        require(_x == 0 || z / _x == _y);        //assert(_x == 0 || z / _x == _y);\n        return z;\n    }\n\t\n\tfunction safeDiv(uint256 _x, uint256 _y)internal pure returns (uint256){\n\t    // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return _x / _y;\n\t}\n\t\n\tfunction ceilDiv(uint256 _x, uint256 _y)internal pure returns (uint256){\n\t\treturn (_x + _y - 1) / _y;\n\t}\n}\n\n\ncontract Sqrt {\n\tfunction sqrt(uint x)public pure returns(uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\ncontract ERC20Token {\n\tmapping (address => uint256) balances;\n\taddress public owner;\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n\t// total amount of tokens\n    uint256 public totalSupply;\n\t// `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    constructor() public {\n        uint256 initialSupply = 10000000000;\n        totalSupply = initialSupply * 10 ** uint256(decimals);\n        balances[msg.sender] = totalSupply;\n        name = \"Game Chain\";\n        symbol = \"GMI\";\n    }\n\t\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n\t\t return balances[_owner];\n\t}\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n\t    require(_value > 0 );                                      // Check send token value > 0;\n\t\trequire(balances[msg.sender] >= _value);                   // Check if the sender has enough\n        require(balances[_to] + _value > balances[_to]);           // Check for overflows\t\t\t\t\t\t\t\t\t\t\t\n\t\tbalances[msg.sender] -= _value;                            // Subtract from the sender\n\t\tbalances[_to] += _value;                                   // Add the same to the recipient                       \n\t\t \n\t\temit Transfer(msg.sender, _to, _value); \t\t\t       // Notify anyone listening that this transfer took place\n\t\treturn true;      \n\t}\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t  \n\t    require(balances[_from] >= _value);                 // Check if the sender has enough\n        require(balances[_to] + _value >= balances[_to]);   // Check for overflows\n        require(_value <= allowed[_from][msg.sender]);      // Check allowance\n        balances[_from] -= _value;                         // Subtract from the sender\n        balances[_to] += _value;                           // Add the same to the recipient\n        allowed[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n\t}\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n\t\trequire(balances[msg.sender] >= _value);\n\t\tallowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t\n\t}\n\t\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n\t}\n\t\n\t/* This unnamed function is called whenever someone tries to send ether to it */\n    function () private {\n        revert();     // Prevents accidental sending of ether\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract UnlockGmi is SafeMath{\n    \n//    using SafeMath for *;\n\t\n\t//list user\n\tmapping (address => uint256) private lockList;                         \n    bool            private             activated_;                                             // mark contract is activated;\n    uint256         private             activatedTime;\n\t\n\tERC20Token      private             gmiToken;\n    \n\tmapping (address => uint256)  private takenTime;\n\tmapping (address => uint256)  private takenAmount;\n\t\n\tuint64          private             timeInterval;\n\tuint64          private             unLockedAmount;\n\taddress         public              owner_;\n\t\n\n//==============================================================================\n//     _ _  _  __|_ _    __|_ _  _  .\n//    (_(_)| |_\\ | | |_|(_ | (_)|   .  (initial data setup upon contract deploy)\n//==============================================================================\n    // constructor(address gmiTokeAddress) public {\n    //     gmiToken = ERC20Token(gmiTokeAddress);\n    //     timeInterval = 60 * 60 * 24;\n    //     unLockedAmount = 200;\n    //     initialize();\n    //     owner_ = msg.sender;\n    // }\n    constructor() public {\n        gmiToken = ERC20Token(0x03B267325193FD0c15cA0D2A693e54213C2AfCB6);\n        timeInterval = 60 * 60 * 24;\n        unLockedAmount = 200;\n        initialize();\n        owner_ = msg.sender;\n    }\n\t\n\tfunction initialize() private {\n\t\tlockList[0x2fED4396Ee204a448201fAB980f1C90018e22801] = 302122  * 10 ** 18; \n        lockList[0x3cC8291F32a07aC9D0D9887eEc7331bD273c613B] = 1142882 * 10 ** 18;\n        lockList[0xef6607FafE4406dD1698865aC89BcBc22323e853] = 139708  * 10 ** 18;\n        lockList[0x1b15FD6FeaecC11B44D689b7B1C2471207a26a23] = 116678  * 10 ** 18;\n        lockList[0xe813fe32aBd2f47c5010426d259e2372e526021C] = 103784  * 10 ** 18;\n        lockList[0x253f9FAb9dCB4a64ceF5b3320eB9F28163924DF9] = 71770   * 10 ** 18;\n        lockList[0x3aa9230bF5deD1c72aa4083B6137ADC7955B5a1a] = 114020  * 10 ** 18;\n        lockList[0xe37079253aDa30eeF49f65EFd48608A4C15F614D] = 503303  * 10 ** 18;\n        lockList[0x89Ad15DfCDe37dCF1C7C8582d8ff7F195796EB7B] = 164803  * 10 ** 18;\n        lockList[0xD063C6f99F221Df40D1F15A1d5D6a477573f8092] = 31460   * 10 ** 18;\n        lockList[0x8Ef20D2388606Fd4E6ef0f0f070a63c5c655626c] = 681715  * 10 ** 18;\n        lockList[0x632A8a687C5c99556117650641B3ACB299ba070f] = 458888  * 10 ** 18;\n        lockList[0x8901A17d3964214D501F9C8B015854d037d90fEf] = 831815  * 10 ** 18;\n        lockList[0xDF5662248182270da3b7582d303CFb2d5E62ec23] = 603573  * 10 ** 18;\n        lockList[0x1f5a6da1dfd6645eb4f3afc0d4e457aac95c8776] = 1014032 * 10 ** 18;\n        lockList[0xb1FA3A4c4CEEc881Ec3B4f50afa4d40a20353385] = 339020  * 10 ** 18;\n        lockList[0x7F3D90153259c49887d55E906af3336c38F814A9] = 421571  * 10 ** 18;\n        lockList[0x9c6fc8Eb31B67Cc9452c96B77DdCb5EF504CDa81] = 119204  * 10 ** 18;\n        lockList[0xD9c1F9347785dc2E79477E20E7d5e5b7866deF35] = 178954  * 10 ** 18;\n        lockList[0xa4FEf4Cc6f63E5Ea0A2F3044EA84b9a1EACeAE5e] = 139148  * 10 ** 18;\n        lockList[0x3Ae9e2E7fEA9031eE85facbBc26794b079b3dCd9] = 1940127 * 10 ** 18;\n        lockList[0x901AD29A0e95647525137E2af782C517375D37C4] = 4750115 * 10 ** 18;\n        lockList[0xbff165E4549bfcea5F150FC5ee04cC8dA4dCAe5d] = 59902   * 10 ** 18;\n        lockList[0x09c09b03563B6Be9104Da38890468C0D9A98C691] = 2729048 * 10 ** 18;\n        lockList[0x400D5Fd9A30C3f524931F82C687cacB6C4054F41] = 610952  * 10 ** 18;\n        lockList[0x054C0a11804Ad1116290CF14EE23Ad59F3d0925e] = 376660  * 10 ** 18;\n        lockList[0xB80ab7AAb74731243fE13d5c6Eb87223CfaDA59b] = 73479   * 10 ** 18;\n        lockList[0xb1DbcBd1705938546e1eBa520332B4c164878965] = 68520   * 10 ** 18;\n        lockList[0x4e961A68d3dafff6D4d863d21fba6Fff82b25d5c] = 10000   * 10 ** 18;\n        lockList[0x097515d2570baBbDa32e5caF23a765e574cDc6B1] = 50683   * 10 ** 18;\n        lockList[0xb2aCA30Ae71d146aad0422a141e3eF0B9313A4bc] = 25158   * 10 ** 18;\n        lockList[0x8Ab96a4778BB5b7E6839059D2988e846A749E9ED] = 67043   * 10 ** 18;\n        lockList[0x7e5177Bd22D9e64AfEBD4F06DdD4C6F6bFccc548] = 113495  * 10 ** 18;\n        lockList[0xd3A8bBBc7eeAF8422C791A3d046Fa773E972bAe2] = 184614  * 10 ** 18;\n        lockList[0x66F9A4b3C09dA25cF14a063647882c31880bcd17] = 37509   * 10 ** 18;\n        lockList[0x3409780afa44ede06111b927e25c1fa7ef72cda5] = 185956  * 10 ** 18;\n        lockList[0x1F105e0A5126a1282929ff5E4FB1819F2D48a785] = 221487  * 10 ** 18;\n        lockList[0x5F86Ff75c7745d40d81F155c9B2D49794F8Dd85E] = 476976  * 10 ** 18;\n        lockList[0xDF5662248182270da3b7582d303CFb2d5E62ec23] = 654221  * 10 ** 18;\n        lockList[0xAB107D9932f4338538c72fEc7fEd65a7F87Ed24C] = 1863872 * 10 ** 18;\n        lockList[0xB3D3403BB64258CFA18C49D28c0E9719eF0A0004] = 192751  * 10 ** 18;\n        lockList[0xb1da36EfcBf2ee81178A113c631932AEc9c9ADE9] = 34386   * 10 ** 18;\n        lockList[0x8894EdE64044F73d293bD43eaeBf1D6Dbc55B361] = 2368356 * 10 ** 18;\n        lockList[0xF7F62c2B263E6C7319322f2A4a76d989404835d6] = 100515  * 10 ** 18;\n        lockList[0x5814639DA554762e40745b9F0e2C5d0Ba593E532] = 413704  * 10 ** 18;\n        lockList[0xc02918Eb9563dBa6322673C2f18096Dceb5BE71d] = 101500  * 10 ** 18;\n        lockList[0x61dBB6fA0d7A85a73Fb3AA4896079eE4011229e5] = 164921  * 10 ** 18;\n        lockList[0x30E442ADD9826B52F344D7FAfB8960Df9dbb8f30] = 280178  * 10 ** 18;\n        lockList[0xE8B0A0BEc7b2B772858414527C022bfb259FAC71] = 1559993 * 10 ** 18;\n        lockList[0x9f8B4fd6B3BbACCa93b79C37Ce1F330a5A81cbB7] = 766709  * 10 ** 18;\n        lockList[0x5a98B695Fe35F628DFaEBbBB5493Dc8488FA3275] = 283605  * 10 ** 18;\n        lockList[0x23b6E3369bD27C3C4Be5d925c6fa1FCea52283e2] = 143304  * 10 ** 18;\n        lockList[0xE8c215194222708C831362D5e181b2Af99c6c384] = 144635  * 10 ** 18;\n        lockList[0xfC0aE173522D24326CFfA9D0D0C058565Fd39d2B] = 84228   * 10 ** 18;\n        lockList[0x5e08EA6DDD4BF0969B33CAD27D89Fb586F0fC2f1] = 34749   * 10 ** 18;\n        lockList[0xE7De0652d437b627AcC466002d1bC8D44bdb156E] = 17809   * 10 ** 18;\n        lockList[0xEa4CedE1d23c616404Ac2dcDB3A3C5EaA24Ce38d] = 13263   * 10 ** 18;\n        lockList[0x7d97568b1329013A026ED561A0FA542030f7b44B] = 107752  * 10 ** 18;\n        lockList[0x0c52d845AB2cB7e4bec52DF6F521603683FA8780] = 36368   * 10 ** 18;\n        lockList[0x58d66AC8820fa6f7c18594766519c490d33C6E96] = 292311  * 10 ** 18;\n        lockList[0x1554972baa4b0f26bafbfac8872fc461683a64aa] = 74097   * 10 ** 18;\n        lockList[0xcCD4513E24C87439173f747625FDBF906AE5428A] = 33718   * 10 ** 18;\n        lockList[0xB81f587dEB7Dc1eb1e7372B1BD0E75DeE5804313] = 34711   * 10 ** 18;\n        lockList[0xad4e8ae487bf8b6005aa7cb8f3f573752db1ced0] = 62781   * 10 ** 18;\n        lockList[0x9e25ade8a3a4f2f1a9e902a3eaa62baee0000c16] = 43912   * 10 ** 18;\n        lockList[0xeb019f923bb1Dab5Fd309E342b52950E6A3a5bb5] = 210671  * 10 ** 18;\n        lockList[0xf145c1E0dEcE26b8DD0eDbd0D7A1f4a16dBFE238] = 414327  * 10 ** 18;\n        lockList[0xf1cfa922da06079ce6ed6c5b6922df0d4b82c76f] = 135962  * 10 ** 18;\n        lockList[0x0Fc746A1800BDb4F6308B544e07B46eF4615776E] = 12948   * 10 ** 18;\n        lockList[0x448bc2419Fef08eF72a49B125EA8f2312a0Db64C] = 11331   * 10 ** 18;\n        lockList[0x6766B4BebcEfa05db1041b80f9C67a00aAe60d2a] = 44260   * 10 ** 18;\n        lockList[0xfd1b9d97772661f56cb630262311f345e24078ee] = 116657  * 10 ** 18;\n        lockList[0x5149F1A30Bab45e436550De2Aed5C63101CC3c61] = 161098  * 10 ** 18;\n        lockList[0xAeA06A4bFc2c60b2CEb3457c56eEb602C72B6C74] = 13499   * 10 ** 18;\n        lockList[0xB24969E6CEAE48EfccAb7dB5E56169574A3a13A8] = 62028   * 10 ** 18;\n        lockList[0x6FaE413d14cD734d6816d4407b1e4aB931D3F918] = 100378  * 10 ** 18;\n        lockList[0xb6224a0f0ab25312d100a1a8c498f7fb4c86da17] = 484510  * 10 ** 18;\n        lockList[0xE3C398F56733eF23a06D96f37EaE555eE6596A85] = 381015  * 10 ** 18;\n        lockList[0x3eB5594E1CE158799849cfC7A7861164107F2006] = 445141  * 10 ** 18;\n        lockList[0x15ac93dE94657882c8EB6204213D9B521dEBaBfB] = 213617  * 10 ** 18;\n        lockList[0x1988267Ce9B413EE6706A21417481Ed11a3Ca152] = 595134  * 10 ** 18;\n        lockList[0x50e10b4444F2eC1a14Deea02138A338896c2325E] = 321502  * 10 ** 18;\n        lockList[0x5934028055dd8bff18e75283af5a8800469c7eda] = 788752  * 10 ** 18;\n        lockList[0xff54d0987cba3c07dc2e65f8ba62a963439e257f] = 239170  * 10 ** 18;\n        lockList[0x71396C01ba9AA053a51cfadC7d0D09d97aF96189] = 2250076 * 10 ** 18;\n        lockList[0x795129211Eb76D8440E01Ed2374417f054dB65f2] = 2355693 * 10 ** 18;\n        lockList[0xac0c89c654d837100db2c3dc5923e308c745ac0e] = 34000   * 10 ** 18;\n        lockList[0x9e25ade8a3a4f2f1a9e902a3eaa62baee0000c16] = 998700  * 10 ** 18;\n        lockList[0x941D03Ae7242cF1929888FdE6160771ff27f3D8c] = 1308777 * 10 ** 18;\n        lockList[0xd9A2649ea71A38065B2DB6e670272Bed0bb68fB7] = 1570922 * 10 ** 18;\n        lockList[0x7303bDf8d7c7642F5297A0a97320ee440E55D028] = 1846600 * 10 ** 18;\n        lockList[0x333a0401Aa60D81Ba38e9E9Bd43FD0f8253A83eB] = 1503988 * 10 ** 18;\n        lockList[0x5AC44139a4E395b8d1461b251597F86F997A407B] = 1467330 * 10 ** 18;\n        lockList[0xbB07b26d8c7d9894FAF45139B3286784780EC94F] = 1650000 * 10 ** 18;\n        lockList[0xc4Ad40d8FCCDcd555B7026CAc1CC6513993a2A03] = 845391  * 10 ** 18;\n        lockList[0x92Dab5d9af2fC53863affd8b9212Fae404A8B625] = 48000   * 10 ** 18;\n   \t}\n//==============================================================================\n//     _ _  _  _|. |`. _  _ _  .\n//    | | |(_)(_||~|~|(/_| _\\  .  (these are safety checks)\n//==============================================================================\n    /**\n     * @dev used to make sure no one can interact with contract until it has\n     * been activated.\n     */\n    modifier isActivated() {\n        require(activated_ == true, \"it's not ready yet\");\n        _;\n    }\n\t\n\t/**\n\t * @dev  Whether or not owner\n\t */\n\tmodifier isOwer() {\n\t    require(msg.sender == owner_, \"you need owner auth\");\n        _;\n\t}\n\t\n\t/**\n\t  *@dev  active unlock contract\n\t  *\n\t  */\n\tfunction activeUnLockGMI(uint64 timeStamp) isOwer() {\n\t\tactivatedTime = timeStamp;\n\t\tactivated_ = true;\n\t}\n\t\n\t/**\n\t **@dev shutDown unlock flag\n\t */\n\tfunction shutDownUnlocked() isOwer() {\n\t    activated_ = false;\n\t}\n\t\n\t/**\n\t *@dev Take the remaining GMI to prevent accidents.\n\t * \n\t */\n\tfunction getRemainingGMI(address userAddr) isOwer() {\n\t    require(activated_ == false, \"you need shut down unlocked contract first\");\n\t    uint256 remainGMI = gmiToken.balanceOf(address(this));\n\t    gmiToken.transfer(userAddr, remainGMI);\n\t}\n\t\n\tmodifier isExhausted() {\n\t\trequire(takenAmount[msg.sender] < lockList[msg.sender], \"Locked GMI is isExhausted\");\n\t\t_;\n\t}\n\t\n\t/*\n     * @dev Get GMI to user\n     */\n    function getUnLockedGMI() public \n\tisActivated() \n\tisExhausted()\n\t\tpayable {\n\n \t\tuint256 currentTakeGMI = 0;\n \t\tuint256 unlockedCount = 0;\n\t\tuint256 unlockedGMI = 0;\n\t\tuint256 userLockedGMI = 0;\n\t\tuint256 userTakeTime = 0;\n        (currentTakeGMI, unlockedCount, unlockedGMI, userLockedGMI, userTakeTime) = calculateUnLockerGMI(msg.sender);\n\t\ttakenAmount[msg.sender] = safeAdd(takenAmount[msg.sender], currentTakeGMI);\n\t\ttakenTime[msg.sender] = now;\n\t\tgmiToken.transfer(msg.sender, currentTakeGMI);\n    }\n    \n    \n\t/*\n     * @dev  calculate user unlocked GMI amount\n     */\n    function calculateUnLockerGMI(address userAddr) private isActivated() \n    view returns(uint256, uint256, uint256, uint256, uint256)  {\n        uint256 unlockedCount = 0;\n\t\tuint256 currentTakeGMI = 0;\n\t\tuint256 userTakenTime = takenTime[userAddr];\n\t\tuint256 userLockedGMI = lockList[userAddr];\n\n\t    unlockedCount = safeDiv(safeSub(now, activatedTime), timeInterval);\n\t\t\n\t\tif(unlockedCount == 0) {\n\t\t    return (0, unlockedCount, unlockedGMI, userLockedGMI, userTakenTime);\n\t\t}\n\t\t\n\t\tif(unlockedCount > unLockedAmount) {\n\t\t    unlockedCount = unLockedAmount;\n\t\t}\n\n\t\tuint256 unlockedGMI =  safeDiv(safeMul(userLockedGMI, unlockedCount), unLockedAmount);\n\t\tcurrentTakeGMI = safeSub(unlockedGMI, takenAmount[userAddr]);\n\t\tif(unlockedCount == unLockedAmount) {\n\t\t   currentTakeGMI = safeSub(userLockedGMI, takenAmount[userAddr]);\n\t\t}\n\t    return (currentTakeGMI, unlockedCount, unlockedGMI, userLockedGMI, userTakenTime);\n    }\n\n\tfunction balancesOfUnLockedGMI(address userAddr) public \n\tisActivated() view returns(uint256, uint256, uint256, uint256, uint256)\n    {\n\t\n\t\tuint256 currentTakeGMI = 0;\n\t\tuint256 unlockedCount = 0;\n\t\tuint256 unlockedGMI = 0;\n\t\tuint256 userLockedGMI = 0;\n\t\tuint256 userTakeTime = 0;\n\n\t\t(currentTakeGMI, unlockedCount, unlockedGMI, userLockedGMI, userTakeTime) = calculateUnLockerGMI(userAddr);\n\t\t    \n\t\treturn (currentTakeGMI, unlockedCount, unlockedGMI, userLockedGMI, userTakeTime);\n\t}\n}",
  "bytecode": "608060405234801561001057600080fd5b507303b267325193fd0c15ca0d2a693e54213c2afcb6600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062015180600660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060c8600660086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506100d3610119640100000000026401000000009004565b33600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612481565b693ffa1102110a66680000600080732fed4396ee204a448201fab980f1c90018e2280173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069f203c1e2a7a5d4480000600080733cc8291f32a07ac9d0d9887eec7331bd273c613b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550691d9595faa34ad170000060008073ef6607fafe4406dd1698865ac89bcbc22323e85373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506918b520869d7633580000600080731b15fd6feaecc11b44d689b7b1c2471207a26a2373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506915fa245470cd34a0000060008073e813fe32abd2f47c5010426d259e2372e526021c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550690f32a8d4ba3e3928000060008073253f9fab9dcb4a64cef5b3320eb9f28163924df973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550691825095da82637100000600080733aa9230bf5ded1c72aa4083b6137adc7955b5a1a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550696a941c3cae6b8bbc000060008073e37079253ada30eef49f65efd48608a4c15f614d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506922e5fd106848ad2c00006000807389ad15dfcde37dcf1c7c8582d8ff7f195796eb7b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506906a9733455c6bd10000060008073d063c6f99f221df40d1f15a1d5d6a477573f809273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069905bd81d8b21bbec0000600080738ef20d2388606fd4e6ef0f0f070a63c5c655626c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069612c5e4aa32ced20000060008073632a8a687c5c99556117650641b3acb299ba070f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069b024c810bb3f90bc0000600080738901a17d3964214d501f9c8b015854d037d90fef73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550697fcfc20541310db4000060008073df5662248182270da3b7582d303cfb2d5e62ec2373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069d6bac8ed2434ba400000600080731f5a6da1dfd6645eb4f3afc0d4e457aac95c877673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506947ca4f9f630ee1b0000060008073b1fa3a4c4ceec881ec3b4f50afa4d40a2035338573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069594568e2491d792c0000600080737f3d90153259c49887d55e906af3336c38f814a973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069193e0fd15e23e0100000600080739c6fc8eb31b67cc9452c96b77ddcb5ef504cda8173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506925e51da3ad1295e8000060008073d9c1f9347785dc2e79477e20e7d5e5b7866def3573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550691d773a6afa4ca6b0000060008073a4fef4cc6f63e5ea0a2f3044ea84b9a1eaceae5e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a019ad67ed3829b1f1c0000600080733ae9e2e7fea9031ee85facbbc26794b079b3dcd973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a03ede04008601ceeac000060008073901ad29a0e95647525137e2af782c517375d37c473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550690caf4b3ec99a1938000060008073bff165e4549bfcea5f150fc5ee04cc8da4dcae5d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a0241e5fd0fb4019a6000006000807309c09b03563b6be9104da38890468c0d9a98c69173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069815fc6377d92f520000060008073400d5fd9a30c3f524931f82c687cacb6c4054f4173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550694fc2c78e41ca88d0000060008073054c0a11804ad1116290cf14ee23ad59f3d0925e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550690f8f4df86792afbc000060008073b80ab7aab74731243fe13d5c6eb87223cfada59b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550690e827a05457b25a0000060008073b1dbcbd1705938546e1eba520332b4c16487896573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069021e19e0c9bab2400000600080734e961a68d3dafff6d4d863d21fba6fff82b25d5c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550690abb87eb61f5130c000060008073097515d2570babbda32e5caf23a765e574cdc6b173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550690553d162bb340d58000060008073b2aca30ae71d146aad0422a141e3ef0b9313a4bc73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550690e3268872af661ac0000600080738ab96a4778bb5b7e6839059d2988e846a749e9ed73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506918089386f9b7eefc0000600080737e5177bd22d9e64afebd4f06ddd4c6f6bfccc54873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550692717f1eb191b7cd8000060008073d3a8bbbc7eeaf8422c791a3d046fa773e972bae273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506907f15df160ccfef400006000807366f9a4b3c09da25cf14a063647882c31880bcd1773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550692760b1e8dae2fb100000600080733409780afa44ede06111b927e25c1fa7ef72cda573ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550692ee6d59693949f5c0000600080731f105e0a5126a1282929ff5e4fb1819f2d48a78573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550696500ebb7a8d81ec00000600080735f86ff75c7745d40d81f155c9b2d49794f8dd85e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550698a896437a8963e14000060008073df5662248182270da3b7582d303cfb2d5e62ec2373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a018ab0b41deee94b00000060008073ab107d9932f4338538c72fec7fed65a7f87ed24c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506928d10d7a4d6f065c000060008073b3d3403bb64258cfa18c49d28c0e9719ef0a000473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550690748119c8f29f608000060008073b1da36efcbf2ee81178a113c631932aec9c9ade973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a01f584d60578200f100000600080738894ede64044f73d293bd43eaebf1d6dbc55b36173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550691548edd76cb4b4ac000060008073f7f62c2b263e6c7319322f2a4a76d989404835d673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069579af053c6447b200000600080735814639da554762e40745b9f0e2c5d0ba593e53273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069157e537665f3c470000060008073c02918eb9563dba6322673c2f18096dceb5be71d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506922ec62a49f17d54400006000807361dbb6fa0d7a85a73fb3aa4896079ee4011229e573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550693b547ad51955e28800006000807330e442add9826b52f344d7fafb8960df9dbb8f3073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a014a5763d5eedb0b44000060008073e8b0a0bec7b2b772858414527c022bfb259fac7173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069a25b60cff59ebab40000600080739f8b4fd6b3bbacca93b79c37ce1f330a5a81cbb773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550693c0e4202e04fb2340000600080735a98b695fe35f628dfaebbbb5493dc8488fa327573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550691e58868106de222000006000807323b6e3369bd27c3c4be5d925c6fa1fcea52283e273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550691ea0add6eeed6f0c000060008073e8c215194222708c831362d5e181b2af99c6c38473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506911d6024fbcee2190000060008073fc0ae173522d24326cffa9d0d0c058565fd39d2b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069075bbf3f9fe850d40000600080735e08ea6ddd4bf0969b33cad27d89fb586f0fc2f173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506903c56d85e7dfc3a4000060008073e7de0652d437b627acc466002d1bc8d44bdb156e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506902cefd19859d45dc000060008073ea4cede1d23c616404ac2dcdb3a3c5eaa24ce38d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506916d13f64516fc2a00000600080737d97568b1329013a026ed561a0fa542030f7b44b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506907b383631213ee400000600080730c52d845ab2cb7e4bec52df6f521603683fa878073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550693de6360829f248fc00006000807358d66ac8820fa6f7c18594766519c490d33c6e9673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550690fb0ce717544c7240000600080731554972baa4b0f26bafbfac8872fc461683a64aa73ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550690723db3fd2612d18000060008073ccd4513e24c87439173f747625fdbf906ae5428a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550690759afe4813d77fc000060008073b81f587deb7dc1eb1e7372b1bd0e75dee580431373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550690d4b5d65780196d4000060008073ad4e8ae487bf8b6005aa7cb8f3f573752db1ced073ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069094c796b1040b9200000600080739e25ade8a3a4f2f1a9e902a3eaa62baee0000c1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550692c9c7f6f6d345e5c000060008073eb019f923bb1dab5fd309e342b52950e6a3a5bb573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506957bcb6306578d77c000060008073f145c1e0dece26b8dd0edbd0d7a1f4a16dbfe23873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550691cca83c932736c28000060008073f1cfa922da06079ce6ed6c5b6922df0d4b82c76f73ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506902bde998b68e4dd00000600080730fc746a1800bdb4f6308b544e07b46ef4615776e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506902664136b1c9ff2c000060008073448bc2419fef08ef72a49b125ea8f2312a0db64c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069095f56e36c7845100000600080736766b4bebcefa05db1041b80f9c67a00aae60d2a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506918b3fd17a0b97824000060008073fd1b9d97772661f56cb630262311f345e24078ee73ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069221d23dc3a3716e80000600080735149f1a30bab45e436550de2aed5c63101cc3c6173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506902dbc841f33b960c000060008073aea06a4bfc2c60b2ceb3457c56eeb602c72b6c7473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550690d228b6c119239b0000060008073b24969e6ceae48efccab7db5e56169574a3a13a873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506915418095a69020280000600080736fae413d14cd734d6816d4407b1e4ab931d3f91873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069669956f884005fb8000060008073b6224a0f0ab25312d100a1a8c498f7fb4c86da1773ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506950aedd52540322fc000060008073e3c398f56733ef23a06d96f37eae555ee6596a8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550695e432457b1e72e340000600080733eb5594e1ce158799849cfc7a7861164107f200673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550692d3c3365eca0ab2400006000807315ac93de94657882c8eb6204213d9b521debabfb73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550697e06475e84ee0c380000600080731988267ce9b413ee6706a21417481ed11a3ca15273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550694414a889296664b800006000807350e10b4444f2ec1a14deea02138a338896c2325e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069a70654e394ccfa400000600080735934028055dd8bff18e75283af5a8800469c7eda73ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506932a56e828f07ffc8000060008073ff54d0987cba3c07dc2e65f8ba62a963439e257f73ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a01dc78dd478a6c5bf000006000807371396c01ba9aa053a51cfadc7d0d09d97af9618973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a01f2d65f9827931b94000060008073795129211eb76d8440e01ed2374417f054db65f273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069073324c914479140000060008073ac0c89c654d837100db2c3dc5923e308c745ac0e73ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069d37ba2af049f99300000600080739e25ade8a3a4f2f1a9e902a3eaa62baee0000c1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a011524f17e66448804000060008073941d03ae7242cf1929888fde6160771ff27f3d8c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a014ca7da2dba882f68000060008073d9a2649ea71a38065b2db6e670272bed0bb68fb773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a01870862f745e3a8200000600080737303bdf8d7c7642f5297a0a97320ee440e55d02873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a013e7b5a545a101350000060008073333a0401aa60d81ba38e9e9bd43fd0f8253a83eb73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a0136b81e62507885c80000600080735ac44139a4e395b8d1461b251597f86f997a407b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506a015d66ade20554e340000060008073bb07b26d8c7d9894faf45139b3286784780ec94f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555069b304bce9a2847fdc000060008073c4ad40d8fccdcd555b7026cac1cc6513993a2a0373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550690a2a15d09519be0000006000807392dab5d9af2fc53863affd8b9212fae404a8b62573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b610f5c806124906000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631259dd461461007d5780631fb5e6201461008757806334a44107146100be57806360a603f414610101578063bebac54914610118578063e76630791461018b575b600080fd5b6100856101e2565b005b34801561009357600080fd5b506100bc600480360381019080803567ffffffffffffffff169060200190929190505050610572565b005b3480156100ca57600080fd5b506100ff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610665565b005b34801561010d57600080fd5b506101166109dc565b005b34801561012457600080fd5b50610159600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610abe565b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b34801561019757600080fd5b506101a0610ba6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600080600080600060011515600160009054906101000a900460ff161515141515610275576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f69742773206e6f7420726561647920796574000000000000000000000000000081525060200191505060405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515610369576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4c6f636b656420474d492069732069734578686175737465640000000000000081525060200191505060405180910390fd5b600094506000935060009250600091506000905061038633610bcc565b80955081965082975083985084995050505050506103e3600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486610ea7565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561052f57600080fd5b505af1158015610543573d6000803e3d6000fd5b505050506040513d602081101561055957600080fd5b8101908080519060200190929190505050505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610637576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f796f75206e656564206f776e657220617574680000000000000000000000000081525060200191505060405180910390fd5b8067ffffffffffffffff1660028190555060018060006101000a81548160ff02191690831515021790555050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561072c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f796f75206e656564206f776e657220617574680000000000000000000000000081525060200191505060405180910390fd5b60001515600160009054906101000a900460ff1615151415156107dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f796f75206e656564207368757420646f776e20756e6c6f636b656420636f6e7481526020017f726163742066697273740000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561089a57600080fd5b505af11580156108ae573d6000803e3d6000fd5b505050506040513d60208110156108c457600080fd5b81019080805190602001909291905050509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561099c57600080fd5b505af11580156109b0573d6000803e3d6000fd5b505050506040513d60208110156109c657600080fd5b8101908080519060200190929190505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aa1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f796f75206e656564206f776e657220617574680000000000000000000000000081525060200191505060405180910390fd5b6000600160006101000a81548160ff021916908315150217905550565b60008060008060008060008060008060011515600160009054906101000a900460ff161515141515610b58576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f69742773206e6f7420726561647920796574000000000000000000000000000081525060200191505060405180910390fd5b6000945060009350600092506000915060009050610b758b610bcc565b8095508196508297508398508499505050505050848484848499509950995099509950505050505091939590929450565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060008060008060008060011515600160009054906101000a900460ff161515141515610c66576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f69742773206e6f7420726561647920796574000000000000000000000000000081525060200191505060405180910390fd5b6000945060009350600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492506000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150610d26610d0042600254610ec8565b600660009054906101000a900467ffffffffffffffff1667ffffffffffffffff16610ee4565b94506000851415610d495760008582848684945099509950995099509950610e99565b600660089054906101000a900467ffffffffffffffff1667ffffffffffffffff16851115610d9557600660089054906101000a900467ffffffffffffffff1667ffffffffffffffff1694505b610dc8610da28387610efa565b600660089054906101000a900467ffffffffffffffff1667ffffffffffffffff16610ee4565b9050610e1381600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ec8565b9350600660089054906101000a900467ffffffffffffffff1667ffffffffffffffff16851415610e8957610e8682600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ec8565b93505b8385828486995099509950995099505b505050505091939590929450565b6000808284019050838110151515610ebe57600080fd5b8091505092915050565b6000818310151515610ed957600080fd5b818303905092915050565b60008183811515610ef157fe5b04905092915050565b60008082840290506000841480610f1b5750828482811515610f1857fe5b04145b1515610f2657600080fd5b80915050929150505600a165627a7a72305820efdf36000e8e0576db8f0a45fa683130449eb7d85006c69822283e1c56cf7c2f0029"
}