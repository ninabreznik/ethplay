{
  "address": "0x29c317dccc79ef77ef04bb7e9a852926050bc92d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenListingManager",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-25\n*/\n\npragma solidity ^0.5.0;\n\n// Ethfinex Voting Manager - relaunch 25 April 2019\n\n/*\n    Copyright 2016, Jordi Baylina\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///  token using the token distribution at a given block, this will allow DAO's\n///  and DApps to upgrade their features in a decentralized manner without\n///  affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController { require(msg.sender == controller); _; }\n\n    address public controller;\n\n    constructor() public { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) public onlyController {\n        controller = _newController;\n    }\n}\n\n\ncontract TokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) public payable returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) public\n        returns(bool);\n\n    /// @notice Notifies the controller about a token burn\n    /// @param _owner The address of the burner\n    /// @param _amount The amount to burn\n    /// @return False if the controller does not authorize the burn\n    function onBurn(address payable _owner, uint _amount) public returns(bool);\n}\n\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 _amount, address _token, bytes memory _data) public;\n}\n\n/// @dev The actual token contract, the default controller is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token controller contract, which Giveth will call a \"Campaign\"\n/// @dev The actual token contract, the default controller is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token controller contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is Controlled {\n\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    string public version = 'EFX_0.1'; //An arbitrary versioning scheme\n\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///  given value, the block number attached is the one that last changed the\n    ///  value\n    struct  Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //  it will be 0x0 for a token that was not cloned\n    MiniMeToken public parentToken;\n\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\n    //  used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    // Tracks the history of the `pledgedFees` belonging to token holders\n    Checkpoint[] totalPledgedFeesHistory; // in wei\n\n    // The factory used to create new clone tokens\n    MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n    /// @notice Constructor to create a MiniMeToken\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n    ///  will create the Clone token contracts, the token factory needs to be\n    ///  deployed first\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///  new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token, set to 0 if it\n    ///  is a new token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    constructor(\n        address _tokenFactory,\n        address payable _parentToken,\n        uint _parentSnapShotBlock,\n        string memory _tokenName,\n        uint8 _decimalUnits,\n        string memory _tokenSymbol,\n        bool _transfersEnabled\n    ) public {\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n        name = _tokenName;                                 // Set the name\n        decimals = _decimalUnits;                          // Set the decimals\n        symbol = _tokenSymbol;                             // Set the symbol\n        parentToken = MiniMeToken(_parentToken);\n        parentSnapShotBlock = _parentSnapShotBlock;\n        transfersEnabled = _transfersEnabled;\n        creationBlock = block.number;\n    }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n    uint constant MAX_UINT = 2**256 - 1;\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n        doTransfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount\n    ) public returns (bool success) {\n\n        // The controller of this contract can move tokens around at will,\n        //  this is important to recognize! Confirm that you trust the\n        //  controller of this contract, which in most situations should be\n        //  another open source smart contract or 0x0\n        if (msg.sender != controller) {\n            require(transfersEnabled);\n\n            // The standard ERC 20 transferFrom functionality\n            if (allowed[_from][msg.sender] < MAX_UINT) {\n                require(allowed[_from][msg.sender] >= _amount);\n                allowed[_from][msg.sender] -= _amount;\n            }\n        }\n        doTransfer(_from, _to, _amount);\n        return true;\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount\n    ) internal {\n\n           if (_amount == 0) {\n               emit Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\n               return;\n           }\n\n           require(parentSnapShotBlock < block.number);\n\n           // Do not allow transfer to 0x0 or the token contract itself\n           require((_to != address(0)) && (_to != address(this)));\n\n           // If the amount being transfered is more than the balance of the\n           //  account the transfer throws\n           uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n\n           require(previousBalanceFrom >= _amount);\n\n           // Alerts the token controller of the transfer\n           if (isContract(controller)) {\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\n           }\n\n           // First update the balance array with the new value for the address\n           //  sending the tokens\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n           // Then update the balance array with the new value for the address\n           //  receiving the tokens\n           uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n           // An event to make the transfer easy to find on the blockchain\n           emit Transfer(_from, _to, _amount);\n\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        // Alerts the token controller of the approve function call\n        if (isContract(controller)) {\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n        }\n\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender\n    ) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(address _spender, uint256 _amount, bytes memory _extraData\n    ) public returns (bool success) {\n        require(approve(_spender, _amount));\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            address(this),\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() public view returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) public view\n        returns (uint) {\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        if ((balances[_owner].length == 0)\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != address(0)) {\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n            } else {\n                // Has no parent\n                return 0;\n            }\n\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        if ((totalSupplyHistory.length == 0)\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != address(0)) {\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n            } else {\n                return 0;\n            }\n\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n////////////////\n// Query pledgedFees // in wei\n////////////////\n\n   /// @dev This function makes it easy to get the total pledged fees\n   /// @return The total number of fees belonging to token holders\n   function totalPledgedFees() public view returns (uint) {\n       return totalPledgedFeesAt(block.number);\n   }\n\n   /// @notice Total amount of fees at a specific `_blockNumber`.\n   /// @param _blockNumber The block number when the totalPledgedFees is queried\n   /// @return The total amount of pledged fees at `_blockNumber`\n   function totalPledgedFeesAt(uint _blockNumber) public view returns(uint) {\n\n       // These next few lines are used when the totalPledgedFees of the token is\n       //  requested before a check point was ever created for this token, it\n       //  requires that the `parentToken.totalPledgedFeesAt` be queried at the\n       //  genesis block for this token as that contains totalPledgedFees of this\n       //  token at this block number.\n       if ((totalPledgedFeesHistory.length == 0)\n           || (totalPledgedFeesHistory[0].fromBlock > _blockNumber)) {\n           if (address(parentToken) != address(0)) {\n               return parentToken.totalPledgedFeesAt(min(_blockNumber, parentSnapShotBlock));\n           } else {\n               return 0;\n           }\n\n       // This will return the expected totalPledgedFees during normal situations\n       } else {\n           return getValueAt(totalPledgedFeesHistory, _blockNumber);\n       }\n   }\n\n////////////////\n// Pledge Fees To Token Holders or Reduce Pledged Fees // in wei\n////////////////\n\n   /// @notice Pledges fees to the token holders, later to be claimed by burning\n   /// @param _value The amount sent to the vault by controller, reserved for token holders\n   function pledgeFees(uint _value) public onlyController returns (bool) {\n       uint curTotalFees = totalPledgedFees();\n       require(curTotalFees + _value >= curTotalFees); // Check for overflow\n       updateValueAtNow(totalPledgedFeesHistory, curTotalFees + _value);\n       return true;\n   }\n\n   /// @notice Reduces pledged fees to the token holders, i.e. during upgrade or token burning\n   /// @param _value The amount of pledged fees which are being distributed to token holders, reducing liability\n   function reducePledgedFees(uint _value) public onlyController returns (bool) {\n       uint curTotalFees = totalPledgedFees();\n       require(curTotalFees >= _value);\n       updateValueAtNow(totalPledgedFeesHistory, curTotalFees - _value);\n       return true;\n   }\n\n////////////////\n// Clone Token Method\n////////////////\n\n    /// @notice Creates a new clone token with the initial distribution being\n    ///  this token at `_snapshotBlock`\n    /// @param _cloneTokenName Name of the clone token\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n    /// @param _cloneTokenSymbol Symbol of the clone token\n    /// @param _snapshotBlock Block when the distribution of the parent token is\n    ///  copied to set the initial distribution of the new clone token;\n    ///  if the block is zero than the actual block, the current block is used\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    /// @return The address of the new MiniMeToken Contract\n    function createCloneToken(\n        string memory _cloneTokenName,\n        uint8 _cloneDecimalUnits,\n        string memory _cloneTokenSymbol,\n        uint _snapshotBlock,\n        bool _transfersEnabled\n        ) public returns(address) {\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n            address(this),\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            );\n\n        cloneToken.changeController(msg.sender);\n\n        // An event to make the token easy to find on the blockchain\n        emit NewCloneToken(address(cloneToken), _snapshotBlock);\n        return address(cloneToken);\n    }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function generateTokens(address _owner, uint _amount\n    ) public onlyController returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint previousBalanceTo = balanceOf(_owner);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        emit Transfer(address(0), _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint _amount\n    ) onlyController public returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply >= _amount);\n        uint previousBalanceFrom = balanceOf(_owner);\n        require(previousBalanceFrom >= _amount);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        emit Transfer(_owner, address(0), _amount);\n        return true;\n    }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) public onlyController {\n        transfersEnabled = _transfersEnabled;\n    }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n    ) view internal returns (uint) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n    ) internal  {\n        if ((checkpoints.length == 0)\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n               newCheckPoint.fromBlock =  uint128(block.number);\n               newCheckPoint.value = uint128(_value);\n           } else {\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n               oldCheckPoint.value = uint128(_value);\n           }\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) view internal returns(bool) {\n        uint size;\n        if (_addr == address(0)) return false;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size>0;\n    }\n\n    /// @dev Helper function to return a min betwen the two uints\n    function min(uint a, uint b) pure internal returns (uint) {\n        return a < b ? a : b;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    ///  set to 0, then the `proxyPayment` method is called which relays the\n    ///  ether and creates tokens as described in the token controller contract\n    function () external payable {\n        require(isContract(controller));\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n    }\n\n\n////////////////\n// Events\n////////////////\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n        );\n\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///  In solidity this is the way to create a contract from a contract of the\n///  same class\ncontract MiniMeTokenFactory {\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///  the msg.sender becomes the controller of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createCloneToken(\n        address payable _parentToken,\n        uint _snapshotBlock,\n        string memory _tokenName,\n        uint8 _decimalUnits,\n        string memory _tokenSymbol,\n        bool _transfersEnabled\n    ) public returns (MiniMeToken) {\n        MiniMeToken newToken = new MiniMeToken(\n            address(this),\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n            );\n\n        newToken.changeController(msg.sender);\n        return newToken;\n    }\n  }\n\n\n\n/*\n    Copyright 2017, Will Harborne (Ethfinex)\n*/\n\ncontract DestructibleMiniMeToken is MiniMeToken {\n\n    address payable public terminator;\n\n    constructor(\n        address _tokenFactory,\n        address payable _parentToken,\n        uint _parentSnapShotBlock,\n        string memory _tokenName,\n        uint8 _decimalUnits,\n        string memory _tokenSymbol,\n        bool _transfersEnabled,\n        address payable _terminator\n    ) public MiniMeToken(\n        _tokenFactory,\n        _parentToken,\n        _parentSnapShotBlock,\n        _tokenName,\n        _decimalUnits,\n        _tokenSymbol,\n        _transfersEnabled\n    ) {\n        terminator = _terminator;\n    }\n\n    function recycle() public {\n        require(msg.sender == terminator);\n        selfdestruct(terminator);\n    }\n}\n\n\n\ncontract DestructibleMiniMeTokenFactory {\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///  the msg.sender becomes the controller of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createDestructibleCloneToken(\n        address payable _parentToken,\n        uint _snapshotBlock,\n        string memory _tokenName,\n        uint8 _decimalUnits,\n        string memory _tokenSymbol,\n        bool _transfersEnabled\n    ) public returns (DestructibleMiniMeToken) {\n        DestructibleMiniMeToken newToken = new DestructibleMiniMeToken(\n            address(this),\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled,\n            msg.sender\n        );\n\n        newToken.changeController(msg.sender);\n        return newToken;\n    }\n}\n\n\ncontract Ownable {\n\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/*\n    Copyright 2018, Will Harborne @ Ethfinex\n*/\n\n/// @title TokenListingManager Contract\n/// @author Will Harborne @ Ethfinex\ncontract TokenListingManager is Ownable {\n\n    address public constant NECTAR_TOKEN = 0xCc80C051057B774cD75067Dc48f8987C4Eb97A5e;\n    address public constant TOKEN_FACTORY = 0x8936131A81F29205EeDDec486f401A8A0aFAb15A;\n    uint public constant MAX_CANDIDATES = 20;\n\n    struct TokenProposal {\n        address[] consideredTokens;\n        uint startBlock;\n        uint startTime;\n        uint duration;\n        DestructibleMiniMeToken votingToken;\n        uint[] yesVotes;\n        // criteria values\n        // 0. only first one win the vote;\n        // 1. top N (number in extraData) win the vote;\n        // 2. All over N (number in extra data) votes win the vote;\n        uint criteria;\n        uint extraData;\n        bool concluded;\n        mapping(address => mapping(address => uint256)) votesForToken;\n    }\n\n    TokenProposal[] public tokenBatches;\n\n    DestructibleMiniMeTokenFactory public tokenFactory;\n    address payable public nectarToken;\n    mapping(address => bool) public admins;\n\n    mapping(address => bool) public isWinner;\n    mapping(address => uint256) public winningVotes;\n    mapping(address => uint) public proposalWhenTokenWon;\n\n    modifier onlyAdmins() {\n        require(isAdmin(msg.sender));\n        _;\n    }\n\n    constructor(address _tokenFactory, address payable _nectarToken) public {\n        tokenFactory = DestructibleMiniMeTokenFactory(_tokenFactory);\n        nectarToken = _nectarToken;\n        admins[msg.sender] = true;\n    }\n\n    /// @notice Admins are able to approve proposal that someone submitted\n    /// @param _tokens the list of tokens in consideration during this period\n    /// @param _duration number of days for vote token to exist. Second half is for voting.\n    /// @param _criteria number that determines how winner is selected\n    /// @param _extraData extra data for criteria parameter\n    function startTokenVotes(address[] memory _tokens, uint _duration, uint _criteria, uint _extraData) public onlyAdmins {\n        require(_tokens.length <= MAX_CANDIDATES);\n\n        if (_criteria == 1) {\n            // in other case all tokens would be winners\n            require(_extraData < _tokens.length);\n        }\n\n        uint _proposalId = tokenBatches.length;\n        if (_proposalId > 0) {\n          endTokenVote(_proposalId - 1);\n        }\n        tokenBatches.length++;\n        TokenProposal storage p = tokenBatches[_proposalId];\n        p.duration = _duration * (1 days);\n\n        p.consideredTokens = _tokens;\n        p.yesVotes = new uint[](_tokens.length);\n\n        p.votingToken = tokenFactory.createDestructibleCloneToken(\n                nectarToken,\n                getBlockNumber(),\n                appendUintToString(\"EfxTokenVotes-\", _proposalId),\n                MiniMeToken(nectarToken).decimals(),\n                appendUintToString(\"EVT-\", _proposalId),\n                true);\n\n        p.startTime = now;\n        p.startBlock = getBlockNumber();\n        p.criteria = _criteria;\n        p.extraData = _extraData;\n        p.concluded = false;\n\n        emit NewTokens(_proposalId);\n    }\n\n\n    /// @notice Anyone can end the vote if it has completed\n    function endTokenVote(uint _proposalId) public returns(bool) {\n\n        require(_proposalId <= tokenBatches.length);\n\n        TokenProposal storage op = tokenBatches[_proposalId];\n        require(op.startTime + op.duration < now);\n        if (op.concluded) {\n          return true;\n        }\n\n        uint[] memory _previousWinnerMap = getWinnerIndices(_proposalId);\n        for (uint i=0; i < _previousWinnerMap.length; i++) {\n            isWinner[op.consideredTokens[_previousWinnerMap[i]]] = true;\n            winningVotes[op.consideredTokens[_previousWinnerMap[i]]] = op.yesVotes[_previousWinnerMap[i]];\n            proposalWhenTokenWon[op.consideredTokens[_previousWinnerMap[i]]] = _proposalId;\n        }\n\n        DestructibleMiniMeToken(op.votingToken).recycle();\n        op.concluded = true;\n        return true;\n    }\n\n    /// @notice Vote for specific token with yes\n    /// @param _proposalId is the proposal's position in tokenBatches array\n    /// @param _tokenIndex is the position from 0-11 in the token array of the chosen token\n    function vote(uint _proposalId, uint _tokenIndex, uint _amount) public {\n        // voting only on the most recent set of proposed tokens\n        require(tokenBatches.length > 0);\n        require(_proposalId == tokenBatches.length - 1);\n        require(_tokenIndex < 12);\n\n        TokenProposal storage p = tokenBatches[_proposalId];\n\n        require(now > p.startTime + (p.duration / 2));\n        require(now < p.startTime + p.duration);\n\n        uint amount = DestructibleMiniMeToken(p.votingToken).balanceOf(msg.sender);\n        require(amount >= _amount);\n\n        uint weightedAmount = getFactor(_amount);\n\n        require(DestructibleMiniMeToken(p.votingToken).transferFrom(msg.sender, address(this), _amount));\n\n        tokenBatches[_proposalId].yesVotes[_tokenIndex] += weightedAmount;\n        p.votesForToken[tokenBatches[_proposalId].consideredTokens[_tokenIndex]][msg.sender] += weightedAmount;\n\n        emit Vote(_proposalId, msg.sender, tokenBatches[_proposalId].consideredTokens[_tokenIndex], weightedAmount);\n    }\n\n    function getFactor(uint _amount) view public returns (uint weighted) {\n      require(tokenBatches.length > 0);\n      uint currentRound = tokenBatches.length - 1;\n      TokenProposal memory p = tokenBatches[currentRound];\n      if ((now - p.startTime) < (p.duration / 2)) {\n          weighted = 2 * _amount;\n      } else {\n          weighted = 2 * _amount - ((now - ((p.duration / 2) + p.startTime)) * _amount / (p.duration / 2));\n      }\n    }\n\n    function getWinnerIndices(uint _proposalId) public view returns(uint[] memory winners) {\n        require(_proposalId < tokenBatches.length);\n\n        TokenProposal memory p = tokenBatches[_proposalId];\n\n        // there is only one winner in criteria 0\n        if (p.criteria == 0) {\n            winners = new uint[](1);\n            uint max = 0;\n\n            for (uint i=0; i < p.consideredTokens.length; i++) {\n                if (p.yesVotes[i] > p.yesVotes[max]) {\n                    max = i;\n                }\n            }\n\n            winners[0] = max;\n        }\n\n        // there is N winners in criteria 1\n        if (p.criteria == 1) {\n            uint[] memory indexesWithMostVotes = new uint[](p.extraData);\n            winners = new uint[](p.extraData);\n\n            // for each token we check if he has more votes than last one,\n            // if it has we put it in array and always keep array sorted\n            for (uint i = 0; i < p.consideredTokens.length; i++) {\n                uint last = p.extraData - 1;\n                if (p.yesVotes[i] > p.yesVotes[indexesWithMostVotes[last]]) {\n                    indexesWithMostVotes[last] = i;\n\n                    for (uint j=last; j > 0; j--) {\n                        if (p.yesVotes[indexesWithMostVotes[j]] > p.yesVotes[indexesWithMostVotes[j-1]]) {\n                            uint help = indexesWithMostVotes[j];\n                            indexesWithMostVotes[j] = indexesWithMostVotes[j-1];\n                            indexesWithMostVotes[j-1] = help;\n                        }\n                    }\n                }\n            }\n\n            for (uint i = 0; i < p.extraData; i++) {\n                winners[i] = indexesWithMostVotes[i];\n            }\n        }\n\n        // everybody who has over N votes are winners in criteria 2\n        if (p.criteria == 2) {\n            uint numOfTokens = 0;\n            for (uint i = 0; i < p.consideredTokens.length; i++) {\n                if (p.yesVotes[i] > p.extraData) {\n                    numOfTokens++;\n                }\n            }\n\n            winners = new uint[](numOfTokens);\n            uint count = 0;\n            for (uint i = 0; i < p.consideredTokens.length; i++) {\n                if (p.yesVotes[i] > p.extraData) {\n                    winners[count] = i;\n                    count++;\n                }\n            }\n        }\n    }\n\n    function getUserVotesForWinner(address _token, address _voter) external view returns(uint256) {\n      uint roundWhenWon = proposalWhenTokenWon[_token];\n      return tokenBatches[roundWhenWon].votesForToken[_token][_voter];\n    }\n\n    /// @notice Get number of proposals so you can know which is the last one\n    function numberOfProposals() public view returns(uint) {\n        return tokenBatches.length;\n    }\n\n    /// @notice Any admin is able to add new admin\n    /// @param _newAdmin Address of new admin\n    function addAdmin(address _newAdmin) public onlyAdmins {\n        admins[_newAdmin] = true;\n    }\n\n    /// @notice Only owner is able to remove admin\n    /// @param _admin Address of current admin\n    function removeAdmin(address _admin) public onlyOwner {\n        admins[_admin] = false;\n    }\n\n    /// @notice Get data about specific proposal\n    /// @param _proposalId Id of proposal\n    function proposal(uint _proposalId) public view returns(\n        uint _startBlock,\n        uint _startTime,\n        uint _duration,\n        bool _active,\n        bool _finalized,\n        uint[] memory _votes,\n        address[] memory _tokens,\n        address _votingToken,\n        bool _hasBalance\n    ) {\n        require(_proposalId < tokenBatches.length);\n\n        TokenProposal memory p = tokenBatches[_proposalId];\n        _startBlock = p.startBlock;\n        _startTime = p.startTime;\n        _duration = p.duration;\n        _finalized = (_startTime+_duration < now);\n        _active = !_finalized && (p.startBlock < getBlockNumber());\n        _votes = p.yesVotes;\n        _tokens = p.consideredTokens;\n        _votingToken = address(p.votingToken);\n        _hasBalance = (_votingToken == address(0)) ? false : (DestructibleMiniMeToken(p.votingToken).balanceOf(msg.sender) > 0);\n    }\n\n    function isAdmin(address _admin) public view returns(bool) {\n        return admins[_admin];\n    }\n\n    function proxyPayment(address ) public payable returns(bool) {\n        return false;\n    }\n\n    function onTransfer(address, address, uint ) public pure returns(bool) {\n        return true;\n    }\n\n    function onApprove(address, address, uint ) public pure returns(bool) {\n        return true;\n    }\n\n    function getBlockNumber() internal view returns (uint) {\n        return block.number;\n    }\n\n    function appendUintToString(string memory inStr, uint _i) internal pure returns (string memory _str) {\n    if (_i == 0) {\n        return string(abi.encodePacked(inStr, \"0\"));\n    }\n    uint j = _i;\n    uint len;\n    while (j != 0) {\n        len++;\n        j /= 10;\n    }\n    bytes memory bstr = new bytes(len);\n    uint k = len - 1;\n    while (_i != 0) {\n        bstr[k--] = byte(uint8(48 + _i % 10));\n        _i /= 10;\n    }\n\n    return string(abi.encodePacked(inStr, string(bstr)));\n    }\n\n    event Vote(uint indexed idProposal, address indexed _voter, address chosenToken, uint amount);\n    event NewTokens(uint indexed idProposal);\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160408061221e8339810180604052604081101561003057600080fd5b5080516020918201516000805433600160a060020a031991821681178355600280548316600160a060020a039687161790556003805490921694909316939093179092558152600490915260408120805460ff1916600117905561218490819061009a90396000f3fe6080604052600436106101345760e060020a60003504630b334fd181146101395780631785f53c146101f65780632027f2651461022957806324d7806c1461026557806330326c17146102ac578063429b62e5146103b657806346ac5e09146103e95780634a3931491461041c5780635a58fe4b1461045f5780635fce4a181461049057806370480275146104a55780637fe4aa6f146104d85780638a6655d6146105445780638d7af4731461057a5780638da5cb5b1461058f5780639b5739ef146105a45780639d0ea654146105d75780639d9ca28d14610651578063a5df10ce14610684578063da682aeb1461041c578063da93d53f14610699578063e77772fe146106d4578063eb8cd55d146106e9578063f078609614610713578063f2fde38b14610728578063f48c30541461075b575b600080fd5b34801561014557600080fd5b506101f46004803603608081101561015c57600080fd5b81019060208101813564010000000081111561017757600080fd5b82018360208201111561018957600080fd5b803590602001918460208302840111640100000000831117156101ab57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060208101359060400135610781565b005b34801561020257600080fd5b506101f46004803603602081101561021957600080fd5b5035600160a060020a0316610b76565b34801561023557600080fd5b506102536004803603602081101561024c57600080fd5b5035610bae565b60408051918252519081900360200190f35b34801561027157600080fd5b506102986004803603602081101561028857600080fd5b5035600160a060020a0316610d73565b604080519115158252519081900360200190f35b3480156102b857600080fd5b506102d6600480360360208110156102cf57600080fd5b5035610d95565b604080518a815260208082018b905291810189905287151560608201528615156080820152600160a060020a03841660e082015282151561010082015261012060a0820181815287519183019190915286519192909160c0840191610140850191898201910280838360005b8381101561035a578181015183820152602001610342565b50505050905001838103825286818151815260200191508051906020019060200280838360005b83811015610399578181015183820152602001610381565b505050509050019b50505050505050505050505060405180910390f35b3480156103c257600080fd5b50610298600480360360208110156103d957600080fd5b5035600160a060020a031661101c565b3480156103f557600080fd5b506102536004803603602081101561040c57600080fd5b5035600160a060020a0316611031565b34801561042857600080fd5b506102986004803603606081101561043f57600080fd5b50600160a060020a03813581169160208101359091169060400135611043565b34801561046b57600080fd5b5061047461104c565b60408051600160a060020a039092168252519081900360200190f35b34801561049c57600080fd5b50610474611064565b3480156104b157600080fd5b506101f4600480360360208110156104c857600080fd5b5035600160a060020a031661107c565b3480156104e457600080fd5b50610502600480360360208110156104fb57600080fd5b50356110b4565b60408051978852602088019690965286860194909452600160a060020a039092166060860152608085015260a0840152151560c0830152519081900360e00190f35b34801561055057600080fd5b506101f46004803603606081101561056757600080fd5b5080359060208101359060400135611111565b34801561058657600080fd5b5061025361142b565b34801561059b57600080fd5b50610474611432565b3480156105b057600080fd5b50610253600480360360208110156105c757600080fd5b5035600160a060020a0316611441565b3480156105e357600080fd5b50610601600480360360208110156105fa57600080fd5b5035611453565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561063d578181015183820152602001610625565b505050509050019250505060405180910390f35b34801561065d57600080fd5b506102986004803603602081101561067457600080fd5b5035600160a060020a0316611980565b34801561069057600080fd5b50610474611995565b3480156106a557600080fd5b50610253600480360360408110156106bc57600080fd5b50600160a060020a03813581169160200135166119a4565b3480156106e057600080fd5b50610474611a08565b3480156106f557600080fd5b506102986004803603602081101561070c57600080fd5b5035611a17565b34801561071f57600080fd5b50610253611c5e565b34801561073457600080fd5b506101f46004803603602081101561074b57600080fd5b5035600160a060020a0316611c63565b6102986004803603602081101561077157600080fd5b5035600160a060020a0316611cf7565b61078a33610d73565b151561079557600080fd5b8351601410156107a457600080fd5b81600114156107ba57835181106107ba57600080fd5b60015460008111156107d4576107d260018203611a17565b505b60018054906107e590828101611f29565b5060006001828154811015156107f757fe5b90600052602060002090600a0201905084620151800281600301819055508581600001908051906020019061082d929190611f5a565b508551604051908082528060200260200182016040528015610859578160200160208202803883390190505b508051610870916005840191602090910190611fcc565b50600254600354600160a060020a039182169163408e097c9116610892611cfd565b6108d16040805190810160405280600e81526020017f456678546f6b656e566f7465732d00000000000000000000000000000000000081525087611d01565b600360009054906101000a9004600160a060020a0316600160a060020a031663313ce5676040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561092257600080fd5b505afa158015610936573d6000803e3d6000fd5b505050506040513d602081101561094c57600080fd5b505160408051808201909152600481527f4556542d00000000000000000000000000000000000000000000000000000000602082015261098c9089611d01565b60405160e060020a63ffffffff8816028152600160a060020a038616600482019081526024820186905260ff84166064830152600160a4830181905260c060448401908152865160c4850152865191939091608482019160e40190602089019080838360005b83811015610a0a5781810151838201526020016109f2565b50505050905090810190601f168015610a375780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015610a6a578181015183820152602001610a52565b50505050905090810190601f168015610a975780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b158015610abc57600080fd5b505af1158015610ad0573d6000803e3d6000fd5b505050506040513d6020811015610ae657600080fd5b505160048201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055426002820155610b24611cfd565b6001820155600681018490556007810183905560088101805460ff1916905560405182907fd7c894eab7da0862dea424c47485ac49eab56e3690186d9ee97bfc895e0eb5e990600090a2505050505050565b600054600160a060020a03163314610b8d57600080fd5b600160a060020a03166000908152600460205260409020805460ff19169055565b6001546000908110610bbf57600080fd5b60015460001901610bce612013565b6001805483908110610bdc57fe5b90600052602060002090600a0201610120604051908101604052908160008201805480602002602001604051908101604052809291908181526020018280548015610c5057602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610c32575b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a0316815260200160058201805480602002602001604051908101604052809291908181526020018280548015610cf557602002820191906000526020600020905b815481526020019060010190808311610ce1575b5050509183525050600682015460208201526007820154604082015260089091015460ff16151560609182015281015190915060029004816040015142031015610d4457836002029250610d6c565b60608101516040820151600290910490810142038502811515610d6357fe5b04846002020392505b5050919050565b600160a060020a03811660009081526004602052604090205460ff165b919050565b60008060008060006060806000806001805490508a101515610db657600080fd5b610dbe612013565b600180548c908110610dcc57fe5b90600052602060002090600a0201610120604051908101604052908160008201805480602002602001604051908101604052809291908181526020018280548015610e4057602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610e22575b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a0316815260200160058201805480602002602001604051908101604052809291908181526020018280548015610ee557602002820191906000526020600020905b815481526020019060010190808311610ed1575b50505091835250506006820154602080830191909152600783015460408084019190915260089093015460ff1615156060928301528301519183015190830151919c509a50985042898b011096509050851586610f4c5750610f45611cfd565b8160200151105b60a08201518251608084015192995090965094509250600160a060020a03831615611009576080810151604080517f70a082310000000000000000000000000000000000000000000000000000000081523360048201529051600092600160a060020a0316916370a08231916024808301926020929190829003018186803b158015610fd757600080fd5b505afa158015610feb573d6000803e3d6000fd5b505050506040513d602081101561100157600080fd5b50511161100c565b60005b9150509193959799909294969850565b60046020526000908152604090205460ff1681565b60076020526000908152604090205481565b60019392505050565b738936131a81f29205eeddec486f401a8a0afab15a81565b73cc80c051057b774cd75067dc48f8987c4eb97a5e81565b61108533610d73565b151561109057600080fd5b600160a060020a03166000908152600460205260409020805460ff19166001179055565b60018054829081106110c257fe5b60009182526020909120600a9091020160018101546002820154600383015460048401546006850154600786015460089096015494965092949193600160a060020a0390911692919060ff1687565b60015460001061112057600080fd5b60015460001901831461113257600080fd5b600c821061113f57600080fd5b600060018481548110151561115057fe5b90600052602060002090600a020190506002816003015481151561117057fe5b048160020154014211151561118457600080fd5b6003810154600282015401421061119a57600080fd5b600480820154604080517f70a08231000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a03909216916370a08231916024808301926020929190829003018186803b15801561120457600080fd5b505afa158015611218573d6000803e3d6000fd5b505050506040513d602081101561122e57600080fd5b505190508281101561123f57600080fd5b600061124a84610bae565b600480850154604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233938101939093523060248401526044830188905251929350600160a060020a0316916323b872dd916064808201926020929091908290030181600087803b1580156112c257600080fd5b505af11580156112d6573d6000803e3d6000fd5b505050506040513d60208110156112ec57600080fd5b505115156112f957600080fd5b8060018781548110151561130957fe5b90600052602060002090600a02016005018681548110151561132757fe5b600091825260208220018054909201909155600180548392600987019290918a90811061135057fe5b90600052602060002090600a02016000018881548110151561136e57fe5b6000918252602080832090910154600160a060020a0316835282810193909352604091820181203380835293522080549092019091556001805488917fd3e566fa4d4d8b17c007ba24b9dbb382c9185a03c9ef59477ee3c6132ca0a30691839081106113d657fe5b90600052602060002090600a0201600001888154811015156113f457fe5b6000918252602091829020015460408051600160a060020a03909216825291810186905281519081900390910190a3505050505050565b6001545b90565b600054600160a060020a031681565b60066020526000908152604090205481565b600154606090821061146457600080fd5b61146c612013565b600180548490811061147a57fe5b90600052602060002090600a02016101206040519081016040529081600082018054806020026020016040519081016040528092919081815260200182805480156114ee57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116114d0575b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016005820180548060200260200160405190810160405280929190818152602001828054801561159357602002820191906000526020600020905b81548152602001906001019080831161157f575b5050509183525050600682015460208201526007820154604082015260089091015460ff16151560609091015260c081015190915015156116625760408051600180825281830190925290602080830190803883390190505091506000805b8251518110156116455760a083015180518390811061160d57fe5b906020019060200201518360a001518281518110151561162957fe5b90602001906020020151111561163d578091505b6001016115f2565b508083600081518110151561165657fe5b60209081029091010152505b8060c001516001141561189c5760608160e0015160405190808252806020026020018201604052801561169f578160200160208202803883390190505b5090508160e001516040519080825280602002602001820160405280156116d0578160200160208202803883390190505b50925060005b82515181101561185157600060018460e001510390508360a0015183828151811015156116ff57fe5b602090810290910101518151811061171357fe5b906020019060200201518460a001518381518110151561172f57fe5b9060200190602002015111156118485781838281518110151561174e57fe5b60209081029091010152805b6000811115611846578460a00151846001830381518110151561177957fe5b602090810290910101518151811061178d57fe5b906020019060200201518560a0015185838151811015156117aa57fe5b60209081029091010151815181106117be57fe5b90602001906020020151111561183d57600084828151811015156117de57fe5b90602001906020020151905084600183038151811015156117fb57fe5b90602001906020020151858381518110151561181357fe5b60209081029091010152845181908690600019850190811061183157fe5b60209081029091010152505b6000190161175a565b505b506001016116d6565b5060005b8260e0015181101561189957818181518110151561186f57fe5b90602001906020020151848281518110151561188757fe5b60209081029091010152600101611855565b50505b8060c001516002141561197a576000805b8251518110156118ec5760e083015160a08401518051839081106118cd57fe5b9060200190602002015111156118e4576001909101905b6001016118ad565b5080604051908082528060200260200182016040528015611917578160200160208202803883390190505b5092506000805b8351518110156119765760e084015160a085015180518390811061193e57fe5b90602001906020020151111561196e5780858381518110151561195d57fe5b602090810290910101526001909101905b60010161191e565b5050505b50919050565b60056020526000908152604090205460ff1681565b600354600160a060020a031681565b600160a060020a03821660009081526007602052604081205460018054829081106119cb57fe5b60009182526020808320600160a060020a038881168552600a93909302016009018152604080842092871684529190529020549150505b92915050565b600254600160a060020a031681565b600154600090821115611a2957600080fd5b6000600183815481101515611a3a57fe5b90600052602060002090600a02019050428160030154826002015401101515611a6257600080fd5b600881015460ff1615611a79576001915050610d90565b6060611a8484611453565b905060005b8151811015611bcc57600160056000856000018585815181101515611aaa57fe5b6020908102909101015181548110611abe57fe5b600091825260208083209190910154600160a060020a031683528201929092526040019020805460ff191691151591909117905581516005840190839083908110611b0557fe5b6020908102909101015181548110611b1957fe5b906000526020600020015460066000856000018585815181101515611b3a57fe5b6020908102909101015181548110611b4e57fe5b6000918252602080832090910154600160a060020a03168352820192909252604001812091909155825186916007918690869086908110611b8b57fe5b6020908102909101015181548110611b9f57fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902055600101611a89565b50600480830154604080517f0f23cbaa0000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921692630f23cbaa92828201926000929082900301818387803b158015611c2b57600080fd5b505af1158015611c3f573d6000803e3d6000fd5b5050506008909201805460ff1916600190811790915592505050919050565b601481565b600054600160a060020a03163314611c7a57600080fd5b600160a060020a0381161515611c8f57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b50600090565b4390565b6060811515611da057826040516020018082805190602001908083835b60208310611d3d5780518252601f199092019160209182019101611d1e565b6001836020036101000a038019825116818451168082178552505050505050905001807f30000000000000000000000000000000000000000000000000000000000000008152506001019150506040516020818303038152906040529050611a02565b8160005b8115611db857600101600a82049150611da4565b6060816040519080825280601f01601f191660200182016040528015611de5576020820181803883390190505b50905060001982015b8515611e6c5781516000198201917f01000000000000000000000000000000000000000000000000000000000000006030600a8a060102918491908110611e3157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86049550611dee565b86826040516020018083805190602001908083835b60208310611ea05780518252601f199092019160209182019101611e81565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611ee85780518252601f199092019160209182019101611ec9565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405294505050505092915050565b815481835581811115611f5557600a0281600a028360005260206000209182019101611f55919061206b565b505050565b828054828255906000526020600020908101928215611fbc579160200282015b82811115611fbc578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178255602090920191600190910190611f7a565b50611fc89291506120ec565b5090565b828054828255906000526020600020908101928215612007579160200282015b82811115612007578251825591602001919060010190611fec565b50611fc892915061211d565b61012060405190810160405280606081526020016000815260200160008152602001600081526020016000600160a060020a031681526020016060815260200160008152602001600081526020016000151581525090565b61142f91905b80821115611fc85760006120858282612137565b600060018301819055600283018190556003830181905560048301805473ffffffffffffffffffffffffffffffffffffffff191690556120c9906005840190612137565b50600060068201819055600782015560088101805460ff19169055600a01612071565b61142f91905b80821115611fc857805473ffffffffffffffffffffffffffffffffffffffff191681556001016120f2565b61142f91905b80821115611fc85760008155600101612123565b5080546000825590600052602060002090810190612155919061211d565b5056fea165627a7a72305820e4f35044dbf82358b317d6058eaa4cc61b90b62f053919097615c020a42d013700290000000000000000000000008936131a81f29205eeddec486f401a8a0afab15a000000000000000000000000cc80c051057b774cd75067dc48f8987c4eb97a5e",
  "constructorArguments": "0000000000000000000000008936131a81f29205eeddec486f401a8a0afab15a000000000000000000000000cc80c051057b774cd75067dc48f8987c4eb97a5e"
}