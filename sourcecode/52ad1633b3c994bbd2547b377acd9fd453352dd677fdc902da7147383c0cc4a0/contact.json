{
  "address": "0x25916c331797ba10601e1f05a1da0b425302f5a2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PoolData",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/* Copyright (C) 2017 NexusMutual.io\n\n  This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\n\npragma solidity 0.5.7;\n\nimport \"./Iupgradable.sol\";\nimport \"./SafeMath.sol\";\n\n\ncontract DSValue {\n    function peek() public view returns (bytes32, bool);\n    function read() public view returns (bytes32);\n}\n\n\ncontract PoolData is Iupgradable {\n    using SafeMath for uint;\n\n    struct ApiId {\n        bytes4 typeOf;\n        bytes4 currency;\n        uint id;\n        uint64 dateAdd;\n        uint64 dateUpd;\n    }\n\n    struct CurrencyAssets {\n        address currAddress;\n        uint baseMin;\n        uint varMin;\n    }\n\n    struct InvestmentAssets {\n        address currAddress;\n        bool status;\n        uint64 minHoldingPercX100;\n        uint64 maxHoldingPercX100;\n        uint8 decimals;\n    }\n\n    struct IARankDetails {\n        bytes4 maxIACurr;\n        uint64 maxRate;\n        bytes4 minIACurr;\n        uint64 minRate;\n    }\n\n    struct McrData {\n        uint mcrPercx100;\n        uint mcrEther;\n        uint vFull; //Pool funds\n        uint64 date;\n    }\n\n    IARankDetails[] internal allIARankDetails;\n    McrData[] public allMCRData;\n\n    bytes4[] internal allInvestmentCurrencies;\n    bytes4[] internal allCurrencies;\n    bytes32[] public allAPIcall;\n    mapping(bytes32 => ApiId) public allAPIid;\n    mapping(uint64 => uint) internal datewiseId;\n    mapping(bytes16 => uint) internal currencyLastIndex;\n    mapping(bytes4 => CurrencyAssets) internal allCurrencyAssets;\n    mapping(bytes4 => InvestmentAssets) internal allInvestmentAssets;\n    mapping(bytes4 => uint) internal caAvgRate;\n    mapping(bytes4 => uint) internal iaAvgRate;\n\n    address public notariseMCR;\n    address public daiFeedAddress;\n    uint private constant DECIMAL1E18 = uint(10) ** 18;\n    uint public uniswapDeadline;\n    uint public liquidityTradeCallbackTime;\n    uint public lastLiquidityTradeTrigger;\n    uint64 internal lastDate;\n    uint public variationPercX100;\n    uint public iaRatesTime;\n    uint public minCap;\n    uint public mcrTime;\n    uint public a;\n    uint public shockParameter;\n    uint public c;\n    uint public mcrFailTime; \n    uint public ethVolumeLimit;\n    uint public capReached;\n    uint public capacityLimit;\n    \n    constructor(address _notariseAdd, address _daiFeedAdd, address _daiAdd) public {\n        notariseMCR = _notariseAdd;\n        daiFeedAddress = _daiFeedAdd;\n        c = 5800000;\n        a = 1028;\n        mcrTime = 24 hours;\n        mcrFailTime = 6 hours;\n        allMCRData.push(McrData(0, 0, 0, 0));\n        minCap = 12000 * DECIMAL1E18;\n        shockParameter = 50;\n        variationPercX100 = 100; //1%\n        iaRatesTime = 24 hours; //24 hours in seconds\n        uniswapDeadline = 20 minutes;\n        liquidityTradeCallbackTime = 4 hours;\n        ethVolumeLimit = 4;\n        capacityLimit = 10;\n        allCurrencies.push(\"ETH\");\n        allCurrencyAssets[\"ETH\"] = CurrencyAssets(address(0), 1000 * DECIMAL1E18, 0);\n        allCurrencies.push(\"DAI\");\n        allCurrencyAssets[\"DAI\"] = CurrencyAssets(_daiAdd, 50000 * DECIMAL1E18, 0);\n        allInvestmentCurrencies.push(\"ETH\");\n        allInvestmentAssets[\"ETH\"] = InvestmentAssets(address(0), true, 2500, 10000, 18);\n        allInvestmentCurrencies.push(\"DAI\");\n        allInvestmentAssets[\"DAI\"] = InvestmentAssets(_daiAdd, true, 250, 1500, 18);\n    }\n\n    /**\n     * @dev to set the maximum cap allowed \n     * @param val is the new value\n     */\n    function setCapReached(uint val) external onlyInternal {\n        capReached = val;\n    }\n    \n    /// @dev Updates the 3 day average rate of a IA currency.\n    /// To be replaced by MakerDao's on chain rates\n    /// @param curr IA Currency Name.\n    /// @param rate Average exchange rate X 100 (of last 3 days).\n    function updateIAAvgRate(bytes4 curr, uint rate) external onlyInternal {\n        iaAvgRate[curr] = rate;\n    }\n\n    /// @dev Updates the 3 day average rate of a CA currency.\n    /// To be replaced by MakerDao's on chain rates\n    /// @param curr Currency Name.\n    /// @param rate Average exchange rate X 100 (of last 3 days).\n    function updateCAAvgRate(bytes4 curr, uint rate) external onlyInternal {\n        caAvgRate[curr] = rate;\n    }\n\n    /// @dev Adds details of (Minimum Capital Requirement)MCR.\n    /// @param mcrp Minimum Capital Requirement percentage (MCR% * 100 ,Ex:for 54.56% ,given 5456)\n    /// @param vf Pool fund value in Ether used in the last full daily calculation from the Capital model.\n    function pushMCRData(uint mcrp, uint mcre, uint vf, uint64 time) external onlyInternal {\n        allMCRData.push(McrData(mcrp, mcre, vf, time));\n    }\n\n    /** \n     * @dev Updates the Timestamp at which result of oracalize call is received.\n     */  \n    function updateDateUpdOfAPI(bytes32 myid) external onlyInternal {\n        allAPIid[myid].dateUpd = uint64(now);\n    }\n\n    /** \n     * @dev Saves the details of the Oraclize API.\n     * @param myid Id return by the oraclize query.\n     * @param _typeof type of the query for which oraclize call is made.\n     * @param id ID of the proposal,quote,cover etc. for which oraclize call is made \n     */  \n    function saveApiDetails(bytes32 myid, bytes4 _typeof, uint id) external onlyInternal {\n        allAPIid[myid] = ApiId(_typeof, \"\", id, uint64(now), uint64(now));\n    }\n\n    /** \n     * @dev Stores the id return by the oraclize query. \n     * Maintains record of all the Ids return by oraclize query.\n     * @param myid Id return by the oraclize query.\n     */  \n    function addInAllApiCall(bytes32 myid) external onlyInternal {\n        allAPIcall.push(myid);\n    }\n    \n    /**\n     * @dev Saves investment asset rank details.\n     * @param maxIACurr Maximum ranked investment asset currency.\n     * @param maxRate Maximum ranked investment asset rate.\n     * @param minIACurr Minimum ranked investment asset currency.\n     * @param minRate Minimum ranked investment asset rate.\n     * @param date in yyyymmdd.\n     */  \n    function saveIARankDetails(\n        bytes4 maxIACurr,\n        uint64 maxRate,\n        bytes4 minIACurr,\n        uint64 minRate,\n        uint64 date\n    )\n        external\n        onlyInternal\n    {\n        allIARankDetails.push(IARankDetails(maxIACurr, maxRate, minIACurr, minRate));\n        datewiseId[date] = allIARankDetails.length.sub(1);\n    }\n\n    /**\n     * @dev to get the time for the laste liquidity trade trigger\n     */\n    function setLastLiquidityTradeTrigger() external onlyInternal {\n        lastLiquidityTradeTrigger = now;\n    }\n\n    /** \n     * @dev Updates Last Date.\n     */  \n    function updatelastDate(uint64 newDate) external onlyInternal {\n        lastDate = newDate;\n    }\n\n    /**\n     * @dev Adds currency asset currency. \n     * @param curr currency of the asset\n     * @param currAddress address of the currency\n     * @param baseMin base minimum in 10^18. \n     */  \n    function addCurrencyAssetCurrency(\n        bytes4 curr,\n        address currAddress,\n        uint baseMin\n    ) \n        external\n    {\n        require(ms.checkIsAuthToGoverned(msg.sender));\n        allCurrencies.push(curr);\n        allCurrencyAssets[curr] = CurrencyAssets(currAddress, baseMin, 0);\n    }\n    \n    /**\n     * @dev Adds investment asset. \n     */  \n    function addInvestmentAssetCurrency(\n        bytes4 curr,\n        address currAddress,\n        bool status,\n        uint64 minHoldingPercX100,\n        uint64 maxHoldingPercX100,\n        uint8 decimals\n    ) \n        external\n    {\n        require(ms.checkIsAuthToGoverned(msg.sender));\n        allInvestmentCurrencies.push(curr);\n        allInvestmentAssets[curr] = InvestmentAssets(currAddress, status,\n            minHoldingPercX100, maxHoldingPercX100, decimals);\n    }\n\n    /**\n     * @dev Changes base minimum of a given currency asset.\n     */ \n    function changeCurrencyAssetBaseMin(bytes4 curr, uint baseMin) external {\n        require(ms.checkIsAuthToGoverned(msg.sender));\n        allCurrencyAssets[curr].baseMin = baseMin;\n    }\n\n    /**\n     * @dev changes variable minimum of a given currency asset.\n     */  \n    function changeCurrencyAssetVarMin(bytes4 curr, uint varMin) external onlyInternal {\n        allCurrencyAssets[curr].varMin = varMin;\n    }\n\n    /** \n     * @dev Changes the investment asset status.\n     */ \n    function changeInvestmentAssetStatus(bytes4 curr, bool status) external {\n        require(ms.checkIsAuthToGoverned(msg.sender));\n        allInvestmentAssets[curr].status = status;\n    }\n\n    /** \n     * @dev Changes the investment asset Holding percentage of a given currency.\n     */\n    function changeInvestmentAssetHoldingPerc(\n        bytes4 curr,\n        uint64 minPercX100,\n        uint64 maxPercX100\n    )\n        external\n    {\n        require(ms.checkIsAuthToGoverned(msg.sender));\n        allInvestmentAssets[curr].minHoldingPercX100 = minPercX100;\n        allInvestmentAssets[curr].maxHoldingPercX100 = maxPercX100;\n    }\n\n    /**\n     * @dev Gets Currency asset token address. \n     */  \n    function changeCurrencyAssetAddress(bytes4 curr, address currAdd) external {\n        require(ms.checkIsAuthToGoverned(msg.sender));\n        allCurrencyAssets[curr].currAddress = currAdd;\n    }\n\n    /**\n     * @dev Changes Investment asset token address.\n     */ \n    function changeInvestmentAssetAddressAndDecimal(\n        bytes4 curr,\n        address currAdd,\n        uint8 newDecimal\n    )\n        external\n    {\n        require(ms.checkIsAuthToGoverned(msg.sender));\n        allInvestmentAssets[curr].currAddress = currAdd;\n        allInvestmentAssets[curr].decimals = newDecimal;\n    }\n\n    /// @dev Changes address allowed to post MCR.\n    function changeNotariseAddress(address _add) external onlyInternal {\n        notariseMCR = _add;\n    }\n\n    /// @dev updates daiFeedAddress address.\n    /// @param _add address of DAI feed.\n    function changeDAIfeedAddress(address _add) external onlyInternal {\n        daiFeedAddress = _add;\n    }\n\n    /**\n     * @dev Gets Uint Parameters of a code\n     * @param code whose details we want\n     * @return string value of the code\n     * @return associated amount (time or perc or value) to the code\n     */\n    function getUintParameters(bytes8 code) external view returns(bytes8 codeVal, uint val) {\n        codeVal = code;\n        if (code == \"MCRTIM\") {\n            val = mcrTime / (1 hours);\n\n        } else if (code == \"MCRFTIM\") {\n\n            val = mcrFailTime / (1 hours);\n\n        } else if (code == \"MCRMIN\") {\n\n            val = minCap;\n\n        } else if (code == \"MCRSHOCK\") {\n\n            val = shockParameter;\n\n        } else if (code == \"MCRCAPL\") {\n\n            val = capacityLimit;\n\n        } else if (code == \"IMZ\") {\n\n            val = variationPercX100;\n\n        } else if (code == \"IMRATET\") {\n\n            val = iaRatesTime / (1 hours);\n\n        } else if (code == \"IMUNIDL\") {\n\n            val = uniswapDeadline / (1 minutes);\n\n        } else if (code == \"IMLIQT\") {\n\n            val = liquidityTradeCallbackTime / (1 hours);\n\n        } else if (code == \"IMETHVL\") {\n\n            val = ethVolumeLimit;\n\n        } else if (code == \"C\") {\n            val = c;\n\n        } else if (code == \"A\") {\n\n            val = a;\n\n        }\n            \n    }\n \n    /// @dev Checks whether a given address can notaise MCR data or not.\n    /// @param _add Address.\n    /// @return res Returns 0 if address is not authorized, else 1.\n    function isnotarise(address _add) external view returns(bool res) {\n        res = false;\n        if (_add == notariseMCR)\n            res = true;\n    }\n\n    /// @dev Gets the details of last added MCR.\n    /// @return mcrPercx100 Total Minimum Capital Requirement percentage of that month of year(multiplied by 100).\n    /// @return vFull Total Pool fund value in Ether used in the last full daily calculation.\n    function getLastMCR() external view returns(uint mcrPercx100, uint mcrEtherx1E18, uint vFull, uint64 date) {\n        uint index = allMCRData.length.sub(1);\n        return (\n            allMCRData[index].mcrPercx100,\n            allMCRData[index].mcrEther,\n            allMCRData[index].vFull,\n            allMCRData[index].date\n        );\n    }\n\n    /// @dev Gets last Minimum Capital Requirement percentage of Capital Model\n    /// @return val MCR% value,multiplied by 100.\n    function getLastMCRPerc() external view returns(uint) {\n        return allMCRData[allMCRData.length.sub(1)].mcrPercx100;\n    }\n\n    /// @dev Gets last Ether price of Capital Model\n    /// @return val ether value,multiplied by 100.\n    function getLastMCREther() external view returns(uint) {\n        return allMCRData[allMCRData.length.sub(1)].mcrEther;\n    }\n\n    /// @dev Gets Pool fund value in Ether used in the last full daily calculation from the Capital model.\n    function getLastVfull() external view returns(uint) {\n        return allMCRData[allMCRData.length.sub(1)].vFull;\n    }\n\n    /// @dev Gets last Minimum Capital Requirement in Ether.\n    /// @return date of MCR.\n    function getLastMCRDate() external view returns(uint64 date) {\n        date = allMCRData[allMCRData.length.sub(1)].date;\n    }\n\n    /// @dev Gets details for token price calculation.\n    function getTokenPriceDetails(bytes4 curr) external view returns(uint _a, uint _c, uint rate) {\n        _a = a;\n        _c = c;\n        rate = _getAvgRate(curr, false);\n    }\n    \n    /// @dev Gets the total number of times MCR calculation has been made.\n    function getMCRDataLength() external view returns(uint len) {\n        len = allMCRData.length;\n    }\n \n    /**\n     * @dev Gets investment asset rank details by given date.\n     */  \n    function getIARankDetailsByDate(\n        uint64 date\n    )\n        external\n        view\n        returns(\n            bytes4 maxIACurr,\n            uint64 maxRate,\n            bytes4 minIACurr,\n            uint64 minRate\n        )\n    {\n        uint index = datewiseId[date];\n        return (\n            allIARankDetails[index].maxIACurr,\n            allIARankDetails[index].maxRate,\n            allIARankDetails[index].minIACurr,\n            allIARankDetails[index].minRate\n        );\n    }\n\n    /** \n     * @dev Gets Last Date.\n     */ \n    function getLastDate() external view returns(uint64 date) {\n        return lastDate;\n    }\n\n    /**\n     * @dev Gets investment currency for a given index.\n     */  \n    function getInvestmentCurrencyByIndex(uint index) external view returns(bytes4 currName) {\n        return allInvestmentCurrencies[index];\n    }\n\n    /**\n     * @dev Gets count of investment currency.\n     */  \n    function getInvestmentCurrencyLen() external view returns(uint len) {\n        return allInvestmentCurrencies.length;\n    }\n\n    /**\n     * @dev Gets all the investment currencies.\n     */ \n    function getAllInvestmentCurrencies() external view returns(bytes4[] memory currencies) {\n        return allInvestmentCurrencies;\n    }\n\n    /**\n     * @dev Gets All currency for a given index.\n     */  \n    function getCurrenciesByIndex(uint index) external view returns(bytes4 currName) {\n        return allCurrencies[index];\n    }\n\n    /** \n     * @dev Gets count of All currency.\n     */  \n    function getAllCurrenciesLen() external view returns(uint len) {\n        return allCurrencies.length;\n    }\n\n    /**\n     * @dev Gets all currencies \n     */  \n    function getAllCurrencies() external view returns(bytes4[] memory currencies) {\n        return allCurrencies;\n    }\n\n    /**\n     * @dev Gets currency asset details for a given currency.\n     */  \n    function getCurrencyAssetVarBase(\n        bytes4 curr\n    )\n        external\n        view\n        returns(\n            bytes4 currency,\n            uint baseMin,\n            uint varMin\n        )\n    {\n        return (\n            curr,\n            allCurrencyAssets[curr].baseMin,\n            allCurrencyAssets[curr].varMin\n        );\n    }\n\n    /**\n     * @dev Gets minimum variable value for currency asset.\n     */  \n    function getCurrencyAssetVarMin(bytes4 curr) external view returns(uint varMin) {\n        return allCurrencyAssets[curr].varMin;\n    }\n\n    /** \n     * @dev Gets base minimum of  a given currency asset.\n     */  \n    function getCurrencyAssetBaseMin(bytes4 curr) external view returns(uint baseMin) {\n        return allCurrencyAssets[curr].baseMin;\n    }\n\n    /** \n     * @dev Gets investment asset maximum and minimum holding percentage of a given currency.\n     */  \n    function getInvestmentAssetHoldingPerc(\n        bytes4 curr\n    )\n        external\n        view\n        returns(\n            uint64 minHoldingPercX100,\n            uint64 maxHoldingPercX100\n        )\n    {\n        return (\n            allInvestmentAssets[curr].minHoldingPercX100,\n            allInvestmentAssets[curr].maxHoldingPercX100\n        );\n    }\n\n    /** \n     * @dev Gets investment asset decimals.\n     */  \n    function getInvestmentAssetDecimals(bytes4 curr) external view returns(uint8 decimal) {\n        return allInvestmentAssets[curr].decimals;\n    }\n\n    /**\n     * @dev Gets investment asset maximum holding percentage of a given currency.\n     */  \n    function getInvestmentAssetMaxHoldingPerc(bytes4 curr) external view returns(uint64 maxHoldingPercX100) {\n        return allInvestmentAssets[curr].maxHoldingPercX100;\n    }\n\n    /**\n     * @dev Gets investment asset minimum holding percentage of a given currency.\n     */  \n    function getInvestmentAssetMinHoldingPerc(bytes4 curr) external view returns(uint64 minHoldingPercX100) {\n        return allInvestmentAssets[curr].minHoldingPercX100;\n    }\n\n    /** \n     * @dev Gets investment asset details of a given currency\n     */  \n    function getInvestmentAssetDetails(\n        bytes4 curr\n    )\n        external\n        view\n        returns(\n            bytes4 currency,\n            address currAddress,\n            bool status,\n            uint64 minHoldingPerc,\n            uint64 maxHoldingPerc,\n            uint8 decimals\n        )\n    {\n        return (\n            curr,\n            allInvestmentAssets[curr].currAddress,\n            allInvestmentAssets[curr].status,\n            allInvestmentAssets[curr].minHoldingPercX100,\n            allInvestmentAssets[curr].maxHoldingPercX100,\n            allInvestmentAssets[curr].decimals\n        );\n    }\n\n    /**\n     * @dev Gets Currency asset token address.\n     */  \n    function getCurrencyAssetAddress(bytes4 curr) external view returns(address) {\n        return allCurrencyAssets[curr].currAddress;\n    }\n\n    /**\n     * @dev Gets investment asset token address.\n     */  \n    function getInvestmentAssetAddress(bytes4 curr) external view returns(address) {\n        return allInvestmentAssets[curr].currAddress;\n    }\n\n    /**\n     * @dev Gets investment asset active Status of a given currency.\n     */  \n    function getInvestmentAssetStatus(bytes4 curr) external view returns(bool status) {\n        return allInvestmentAssets[curr].status;\n    }\n\n    /** \n     * @dev Gets type of oraclize query for a given Oraclize Query ID.\n     * @param myid Oraclize Query ID identifying the query for which the result is being received.\n     * @return _typeof It could be of type \"quote\",\"quotation\",\"cover\",\"claim\" etc.\n     */  \n    function getApiIdTypeOf(bytes32 myid) external view returns(bytes4) {\n        return allAPIid[myid].typeOf;\n    }\n\n    /** \n     * @dev Gets ID associated to oraclize query for a given Oraclize Query ID.\n     * @param myid Oraclize Query ID identifying the query for which the result is being received.\n     * @return id1 It could be the ID of \"proposal\",\"quotation\",\"cover\",\"claim\" etc.\n     */  \n    function getIdOfApiId(bytes32 myid) external view returns(uint) {\n        return allAPIid[myid].id;\n    }\n\n    /** \n     * @dev Gets the Timestamp of a oracalize call.\n     */  \n    function getDateAddOfAPI(bytes32 myid) external view returns(uint64) {\n        return allAPIid[myid].dateAdd;\n    }\n\n    /**\n     * @dev Gets the Timestamp at which result of oracalize call is received.\n     */  \n    function getDateUpdOfAPI(bytes32 myid) external view returns(uint64) {\n        return allAPIid[myid].dateUpd;\n    }\n\n    /** \n     * @dev Gets currency by oracalize id. \n     */  \n    function getCurrOfApiId(bytes32 myid) external view returns(bytes4) {\n        return allAPIid[myid].currency;\n    }\n\n    /**\n     * @dev Gets ID return by the oraclize query of a given index.\n     * @param index Index.\n     * @return myid ID return by the oraclize query.\n     */  \n    function getApiCallIndex(uint index) external view returns(bytes32 myid) {\n        myid = allAPIcall[index];\n    }\n\n    /**\n     * @dev Gets Length of API call. \n     */  \n    function getApilCallLength() external view returns(uint) {\n        return allAPIcall.length;\n    }\n    \n    /**\n     * @dev Get Details of Oraclize API when given Oraclize Id.\n     * @param myid ID return by the oraclize query.\n     * @return _typeof ype of the query for which oraclize \n     * call is made.(\"proposal\",\"quote\",\"quotation\" etc.) \n     */  \n    function getApiCallDetails(\n        bytes32 myid\n    )\n        external\n        view\n        returns(\n            bytes4 _typeof,\n            bytes4 curr,\n            uint id,\n            uint64 dateAdd,\n            uint64 dateUpd\n        )\n    {\n        return (\n            allAPIid[myid].typeOf,\n            allAPIid[myid].currency,\n            allAPIid[myid].id,\n            allAPIid[myid].dateAdd,\n            allAPIid[myid].dateUpd\n        );\n    }\n\n    /**\n     * @dev Updates Uint Parameters of a code\n     * @param code whose details we want to update\n     * @param val value to set\n     */\n    function updateUintParameters(bytes8 code, uint val) public {\n        require(ms.checkIsAuthToGoverned(msg.sender));\n        if (code == \"MCRTIM\") {\n            _changeMCRTime(val * 1 hours);\n\n        } else if (code == \"MCRFTIM\") {\n\n            _changeMCRFailTime(val * 1 hours);\n\n        } else if (code == \"MCRMIN\") {\n\n            _changeMinCap(val);\n\n        } else if (code == \"MCRSHOCK\") {\n\n            _changeShockParameter(val);\n\n        } else if (code == \"MCRCAPL\") {\n\n            _changeCapacityLimit(val);\n\n        } else if (code == \"IMZ\") {\n\n            _changeVariationPercX100(val);\n\n        } else if (code == \"IMRATET\") {\n\n            _changeIARatesTime(val * 1 hours);\n\n        } else if (code == \"IMUNIDL\") {\n\n            _changeUniswapDeadlineTime(val * 1 minutes);\n\n        } else if (code == \"IMLIQT\") {\n\n            _changeliquidityTradeCallbackTime(val * 1 hours);\n\n        } else if (code == \"IMETHVL\") {\n\n            _setEthVolumeLimit(val);\n\n        } else if (code == \"C\") {\n            _changeC(val);\n\n        } else if (code == \"A\") {\n\n            _changeA(val);\n\n        } else {\n            revert(\"Invalid param code\");\n        }\n            \n    }\n\n    /**\n     * @dev to get the average rate of currency rate \n     * @param curr is the currency in concern\n     * @return required rate\n     */\n    function getCAAvgRate(bytes4 curr) public view returns(uint rate) {\n        return _getAvgRate(curr, false);\n    }\n\n    /**\n     * @dev to get the average rate of investment rate \n     * @param curr is the investment in concern\n     * @return required rate\n     */\n    function getIAAvgRate(bytes4 curr) public view returns(uint rate) {\n        return _getAvgRate(curr, true);\n    }\n\n    function changeDependentContractAddress() public onlyInternal {}\n\n    /// @dev Gets the average rate of a CA currency.\n    /// @param curr Currency Name.\n    /// @return rate Average rate X 100(of last 3 days).\n    function _getAvgRate(bytes4 curr, bool isIA) internal view returns(uint rate) {\n        if (curr == \"DAI\") {\n            DSValue ds = DSValue(daiFeedAddress);\n            rate = uint(ds.read()).div(uint(10) ** 16);\n        } else if (isIA) {\n            rate = iaAvgRate[curr];\n        } else {\n            rate = caAvgRate[curr];\n        }\n    }\n\n    /**\n     * @dev to set the ethereum volume limit \n     * @param val is the new limit value\n     */\n    function _setEthVolumeLimit(uint val) internal {\n        ethVolumeLimit = val;\n    }\n\n    /// @dev Sets minimum Cap.\n    function _changeMinCap(uint newCap) internal {\n        minCap = newCap;\n    }\n\n    /// @dev Sets Shock Parameter.\n    function _changeShockParameter(uint newParam) internal {\n        shockParameter = newParam;\n    }\n    \n    /// @dev Changes time period for obtaining new MCR data from external oracle query.\n    function _changeMCRTime(uint _time) internal {\n        mcrTime = _time;\n    }\n\n    /// @dev Sets MCR Fail time.\n    function _changeMCRFailTime(uint _time) internal {\n        mcrFailTime = _time;\n    }\n\n    /**\n     * @dev to change the uniswap deadline time \n     * @param newDeadline is the value\n     */\n    function _changeUniswapDeadlineTime(uint newDeadline) internal {\n        uniswapDeadline = newDeadline;\n    }\n\n    /**\n     * @dev to change the liquidity trade call back time \n     * @param newTime is the new value to be set\n     */\n    function _changeliquidityTradeCallbackTime(uint newTime) internal {\n        liquidityTradeCallbackTime = newTime;\n    }\n\n    /**\n     * @dev Changes time after which investment asset rates need to be fed.\n     */  \n    function _changeIARatesTime(uint _newTime) internal {\n        iaRatesTime = _newTime;\n    }\n    \n    /**\n     * @dev Changes the variation range percentage.\n     */  \n    function _changeVariationPercX100(uint newPercX100) internal {\n        variationPercX100 = newPercX100;\n    }\n\n    /// @dev Changes Growth Step\n    function _changeC(uint newC) internal {\n        c = newC;\n    }\n\n    /// @dev Changes scaling factor.\n    function _changeA(uint val) internal {\n        a = val;\n    }\n    \n    /**\n     * @dev to change the capacity limit \n     * @param val is the new value\n     */\n    function _changeCapacityLimit(uint val) internal {\n        capacityLimit = val;\n    }    \n}\n",
  "bytecode": "608060405234801561001057600080fd5b506040516060806138cc8339810180604052606081101561003057600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505082600e60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600f60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555062588040601a8190555061040460188190555062015180601781905550615460601b819055506003604051806080016040528060008152602001600081526020016000815260200160006001600160401b03168152509080600181540180825580915050906001820390600052602060002090600402016000909192909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160401b0302191690836001600160401b031602179055505050506012600a0a612ee00260168190555060326019819055506064601481905550620151806015819055506104b06010819055506138406011819055506004601c81905550600a601e81905550600580600181540180825580915050906001820390600052602060002090600891828204019190066004027f4554480000000000000000000000000000000000000000000000000000000000909190916101000a81548163ffffffff021916908360e01c021790555050604051806060016040528060006001600160a01b031681526020016012600a0a6103e80281526020016000815250600a60007f45544800000000000000000000000000000000000000000000000000000000006001600160e01b031916815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155905050600580600181540180825580915050906001820390600052602060002090600891828204019190066004027f4441490000000000000000000000000000000000000000000000000000000000909190916101000a81548163ffffffff021916908360e01c0217905550506040518060600160405280826001600160a01b031681526020016012600a0a61c3500281526020016000815250600a60007f44414900000000000000000000000000000000000000000000000000000000006001600160e01b031916815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155905050600480600181540180825580915050906001820390600052602060002090600891828204019190066004027f4554480000000000000000000000000000000000000000000000000000000000909190916101000a81548163ffffffff021916908360e01c0217905550506040518060a0016040528060006001600160a01b031681526020016001151581526020016109c46001600160401b031681526020016127106001600160401b03168152602001601260ff16815250600b60007f45544800000000000000000000000000000000000000000000000000000000006001600160e01b031916815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a8154816001600160401b0302191690836001600160401b0316021790555060608201518160010160006101000a8154816001600160401b0302191690836001600160401b0316021790555060808201518160010160086101000a81548160ff021916908360ff160217905550905050600480600181540180825580915050906001820390600052602060002090600891828204019190066004027f4441490000000000000000000000000000000000000000000000000000000000909190916101000a81548163ffffffff021916908360e01c0217905550506040518060a00160405280826001600160a01b0316815260200160011515815260200160fa6001600160401b031681526020016105dc6001600160401b03168152602001601260ff16815250600b60007f44414900000000000000000000000000000000000000000000000000000000006001600160e01b031916815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a8154816001600160401b0302191690836001600160401b0316021790555060608201518160010160006101000a8154816001600160401b0302191690836001600160401b0316021790555060808201518160010160086101000a81548160ff021916908360ff16021790555090505050505061314e8061077e6000396000f3fe608060405234801561001057600080fd5b50600436106104965760003560e01c80637d03238f11610262578063ca0d4c8611610151578063e3cacb9c116100ce578063ef3c6ec811610092578063ef3c6ec814610f94578063f0f9f25414610fb1578063f17a3bec14610fb9578063fc664c3614610fc1578063fd3e44d514610fe8578063ff0102391461100557610496565b8063e3cacb9c14610ed6578063e3d22ebd14610ef3578063e3dee23914610efb578063eaad1b3b14610f22578063ebff71c314610f5857610496565b8063d676ee9111610115578063d676ee9114610e50578063d8e25da114610e6d578063dc68e16b14610e8a578063e2507b4a14610ea7578063e26ff34c14610eaf57610496565b8063ca0d4c8614610dc7578063d175058514610ded578063d17e225314610e1a578063d3fdadf714610e22578063d46655f414610e2a57610496565b8063a5263aa2116101df578063b96d2d35116101a3578063b96d2d3514610ce1578063c3da42b814610ce9578063c6318c2314610cf1578063c85e5efd14610d52578063c94f740f14610d9057610496565b8063a5263aa214610c0a578063a5a1c40214610c49578063ade6a30314610c6f578063b72efc7c14610c9c578063b775a49d14610cd957610496565b80638c3f8fa4116102265780638c3f8fa414610b7857806395dcbd1f14610b805780639dd86e0f14610bcd578063a0b2d57f14610bfa578063a2e92aac14610c0257610496565b80637d03238f14610b0c5780637deb857614610b145780637e2d14d914610b41578063818acb8214610b6857806384769f4414610b7057610496565b806346583d091161038957806362ae372111610306578063702ddaab116102ca578063702ddaab146109f65780637106767b146109fe57806373f9548814610a36578063756865ec14610a5357806377449c0b14610ab45780637920e20014610b0457610496565b806362ae37211461095e5780636549ff58146109845780636576ffed1461098c57806369ab978a146109b25780636b947f0c146109d957610496565b80634e55a69b1161034d5780634e55a69b146108de5780634f935945146108e657806356571fc3146108ee5780636122f840146108f657806361b6c00f1461094157610496565b806346583d091461085d57806347cb4b721461087a578063487d2d0014610882578063496b4886146108a95780634c69d497146108d657610496565b80632fb5b716116104175780633fa615b0116103db5780633fa615b01461077f57806342104aae14610787578063424593b0146107d7578063428dfd381461080a57806342a049cd1461082e57610496565b80632fb5b716146106a75780633277be9614610720578063371e6e121461073d57806339d2ad291461075a5780633c40b1f01461076257610496565b80631d668c641161045e5780631d668c641461058d57806322601a58146105d257806324da11281461060c578063255f5049146106475780632f175f451461064f57610496565b80630dbe671f1461049b5780630e412f5c146104b55780630ea9c9841461051957806312265409146105235780631c4a29ea14610566575b600080fd5b6104a361100d565b60408051918252519081900360200190f35b6104db600480360360208110156104cb57600080fd5b50356001600160401b0316611013565b604080516001600160e01b031995861681526001600160401b0394851660208201529290941682850152909116606082015290519081900360800190f35b6105216110e1565b005b61054a6004803603602081101561053957600080fd5b50356001600160e01b031916611166565b604080516001600160401b039092168252519081900360200190f35b6104a36004803603602081101561057c57600080fd5b50356001600160e01b031916611192565b6105b4600480360360208110156105a357600080fd5b50356001600160e01b0319166111b1565b60408051938452602084019290925282820152519081900360600190f35b6105ef600480360360208110156105e857600080fd5b50356111cb565b604080516001600160e01b03199092168252519081900360200190f35b6106336004803603602081101561062257600080fd5b50356001600160e01b0319166111e8565b604080519115158252519081900360200190f35b6104a361120e565b610657611214565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561069357818101518382015260200161067b565b505050509050019250505060405180910390f35b6106ce600480360360208110156106bd57600080fd5b50356001600160e01b031916611299565b604080516001600160e01b031990971687526001600160a01b039095166020870152921515858501526001600160401b03918216606086015216608084015260ff1660a0830152519081900360c00190f35b61054a6004803603602081101561073657600080fd5b50356112f7565b6104a36004803603602081101561075357600080fd5b5035611315565b6104a361132a565b6105ef6004803603602081101561077857600080fd5b5035611330565b6104a3611369565b610521600480360360a081101561079d57600080fd5b506001600160e01b031981358116916001600160401b0360208201358116926040830135169160608101358216916080909101351661136f565b610521600480360360608110156107ed57600080fd5b508035906001600160e01b03196020820135169060400135611517565b610812611668565b604080516001600160a01b039092168252519081900360200190f35b6105216004803603604081101561084457600080fd5b506001600160e01b031981351690602001351515611677565b61054a6004803603602081101561087357600080fd5b5035611733565b610657611758565b6104a36004803603602081101561089857600080fd5b50356001600160e01b0319166117bc565b610521600480360360408110156108bf57600080fd5b506001600160e01b031981351690602001356117db565b6104a361187e565b6104a3611884565b6104a361188a565b61054a611890565b61091d6004803603602081101561090c57600080fd5b50356001600160c01b03191661189f565b604080516001600160c01b0319909316835260208301919091528051918290030190f35b6105216004803603602081101561095757600080fd5b5035611a8c565b6106336004803603602081101561097457600080fd5b50356001600160a01b0316611b4a565b6104a3611b6b565b610521600480360360208110156109a257600080fd5b50356001600160a01b0316611b71565b61054a600480360360208110156109c857600080fd5b50356001600160e01b031916611c16565b6104a3600480360360208110156109ef57600080fd5b5035611c42565b6104a3611c60565b61052160048036036080811015610a1457600080fd5b50803590602081013590604081013590606001356001600160401b0316611c66565b6104a360048036036020811015610a4c57600080fd5b5035611ddb565b610a7060048036036020811015610a6957600080fd5b5035611dfc565b604080516001600160e01b03199687168152949095166020850152838501929092526001600160401b03908116606084015216608082015290519081900360a00190f35b610adb60048036036020811015610aca57600080fd5b50356001600160e01b031916611e41565b604080516001600160e01b03199094168452602084019290925282820152519081900360600190f35b6104a3611e6c565b6104a3611e72565b61052160048036036040811015610b2a57600080fd5b506001600160e01b03198135169060200135611e78565b61081260048036036020811015610b5757600080fd5b50356001600160e01b031916611f18565b6104a3611f3d565b610521611f77565b6104a3612000565b610ba760048036036020811015610b9657600080fd5b50356001600160e01b031916612006565b604080516001600160401b03938416815291909216602082015281519081900390910190f35b61052160048036036040811015610be357600080fd5b506001600160c01b0319813516906020013561203e565b6108126122fb565b6104a361230a565b61052160048036036060811015610c2057600080fd5b5080356001600160e01b0319169060208101356001600160a01b0316906040013560ff16612310565b61052160048036036020811015610c5f57600080fd5b50356001600160401b03166123f2565b61052160048036036040811015610c8557600080fd5b506001600160e01b03198135169060200135612498565b610cc360048036036020811015610cb257600080fd5b50356001600160e01b031916612538565b6040805160ff9092168252519081900360200190f35b6104a3612561565b6104a361259b565b6104a36125a1565b610521600480360360c0811015610d0757600080fd5b5080356001600160e01b0319169060208101356001600160a01b031690604081013515159060608101356001600160401b039081169160808101359091169060a0013560ff166125a7565b61052160048036036060811015610d6857600080fd5b506001600160e01b0319813516906001600160401b0360208201358116916040013516612773565b610d9861284d565b604080519485526020850193909352838301919091526001600160401b03166060830152519081900360800190f35b61052160048036036020811015610ddd57600080fd5b50356001600160a01b0316612907565b61052160048036036040811015610e0357600080fd5b506001600160e01b031981351690602001356129ac565b6104a3612a4f565b6104a3612a55565b61052160048036036020811015610e4057600080fd5b50356001600160a01b0316612a5b565b61052160048036036020811015610e6657600080fd5b5035612aea565b610a7060048036036020811015610e8357600080fd5b5035612ba2565b6105ef60048036036020811015610ea057600080fd5b5035612be7565b6104a3612bf6565b6104a360048036036020811015610ec557600080fd5b50356001600160e01b031916612bfc565b61052160048036036020811015610eec57600080fd5b5035612c0f565b6104a3612c97565b61081260048036036020811015610f1157600080fd5b50356001600160e01b031916612cd1565b61052160048036036040811015610f3857600080fd5b5080356001600160e01b03191690602001356001600160a01b0316612cf6565b61052160048036036060811015610f6e57600080fd5b506001600160e01b0319813516906001600160a01b036020820135169060400135612db3565b610d9860048036036020811015610faa57600080fd5b5035612ef3565b610812612f33565b610812612f42565b6104a360048036036020811015610fd757600080fd5b50356001600160e01b031916612f51565b6105ef60048036036020811015610ffe57600080fd5b5035612f5e565b61054a612f73565b60185481565b6001600160401b038116600090815260086020526040812054600280548392839283928290811061104057fe5b6000918252602090912001546002805460e09290921b918390811061106157fe5b9060005260206000200160000160049054906101000a90046001600160401b03166002838154811061108f57fe5b60009182526020909120015460028054600160601b90920460e01b91859081106110b557fe5b60009182526020909120015492999198509650600160801b9091046001600160401b0316945092505050565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b15801561112f57600080fd5b505afa158015611143573d6000803e3d6000fd5b505050506040513d602081101561115957600080fd5b505161116457600080fd5b565b6001600160e01b031981166000908152600b60205260409020600101546001600160401b03165b919050565b6001600160e01b0319166000908152600a602052604090206001015490565b601854601a5460006111c38482612fb8565b929491935050565b600090815260076020526040902054640100000000900460e01b90565b6001600160e01b0319166000908152600b6020526040902054600160a01b900460ff1690565b60055490565b6060600480548060200260200160405190810160405280929190818152602001828054801561128f57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116112515790505b5050505050905090565b6001600160e01b031981166000908152600b60205260409020805460019091015491926001600160a01b0382169260ff600160a01b84048116936001600160401b03600160a81b90910481169390831692600160401b900490911690565b6000908152600760205260409020600201546001600160401b031690565b60009081526007602052604090206001015490565b60105481565b60006005828154811061133f57fe5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050919050565b60165481565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b1580156113bd57600080fd5b505afa1580156113d1573d6000803e3d6000fd5b505050506040513d60208110156113e757600080fd5b50516113f257600080fd5b604080516080810182526001600160e01b031987811682526001600160401b0387811660208401908152918716938301938452858116606084019081526002805460018082018355600083905295517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909101805495519751935163ffffffff1990961660e092831c176bffffffffffffffff00000000191664010000000098861698909802979097176fffffffff0000000000000000000000001916600160601b9390911c929092029190911777ffffffffffffffff000000000000000000000000000000001916600160801b93909216929092021790925590546114f7916130af565b6001600160401b0390911660009081526008602052604090205550505050565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b15801561156557600080fd5b505afa158015611579573d6000803e3d6000fd5b505050506040513d602081101561158f57600080fd5b505161159a57600080fd5b6040805160a0810182526001600160e01b03199093168352600060208085018281528584019485526001600160401b03428116606088018181526080890191825298855260079093529390922094518554925160e090811c6401000000000267ffffffff00000000199290911c63ffffffff1990941693909317169190911784559151600184015592516002909201805491518416600160401b026fffffffffffffffff0000000000000000199390941667ffffffffffffffff199092169190911791909116919091179055565b600e546001600160a01b031681565b60005460408051600160e11b632c1a733d02815233600482015290516001600160a01b0390921691635834e67a91602480820192602092909190829003018186803b1580156116c557600080fd5b505afa1580156116d9573d6000803e3d6000fd5b505050506040513d60208110156116ef57600080fd5b50516116fa57600080fd5b6001600160e01b03199091166000908152600b602052604090208054911515600160a01b02600160a01b60ff0219909216919091179055565b600090815260076020526040902060020154600160401b90046001600160401b031690565b6060600580548060200260200160405190810160405280929190818152602001828054801561128f576000918252602091829020805460e01b6001600160e01b03191684529082028301929091600491018084116112515790505050505050905090565b6001600160e01b0319166000908152600a602052604090206002015490565b60005460408051600160e11b632c1a733d02815233600482015290516001600160a01b0390921691635834e67a91602480820192602092909190829003018186803b15801561182957600080fd5b505afa15801561183d573d6000803e3d6000fd5b505050506040513d602081101561185357600080fd5b505161185e57600080fd5b6001600160e01b03199091166000908152600a6020526040902060010155565b60155481565b60125481565b601d5481565b6013546001600160401b031690565b806000600160d01b654d435254494d026001600160c01b0319831614156118d557610e10601754816118cd57fe5b049050611a87565b600160c81b664d43524654494d026001600160c01b03198416141561190157610e10601b54816118cd57fe5b600160d11b6526a1a926a4a7026001600160c01b0319841614156119285750601654611a87565b600160c01b674d435253484f434b026001600160c01b0319841614156119515750601954611a87565b600160ca1b661350d490d05413026001600160c01b0319841614156119795750601e54611a87565b600160e91b6224a6ad026001600160c01b03198416141561199d5750601454611a87565b600160ca1b6612535490551155026001600160c01b0319841614156119c957610e10601554816118cd57fe5b600160ca1b6612535553925113026001600160c01b0319841614156119f457603c601054816118cd57fe5b600160d21b65125353125455026001600160c01b031984161415611a1f57610e10601154816118cd57fe5b600160ca1b6612535155121593026001600160c01b031984161415611a475750601c54611a87565b600160f81b6043026001600160c01b031984161415611a695750601a54611a87565b600160f81b6041026001600160c01b031984161415611a8757506018545b915091565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b158015611ada57600080fd5b505afa158015611aee573d6000803e3d6000fd5b505050506040513d6020811015611b0457600080fd5b5051611b0f57600080fd5b600090815260076020526040902060020180546fffffffffffffffff00000000000000001916600160401b426001600160401b031602179055565b600e546000906001600160a01b038381169116141561118d57506001919050565b60115481565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b158015611bbf57600080fd5b505afa158015611bd3573d6000803e3d6000fd5b505050506040513d6020811015611be957600080fd5b5051611bf457600080fd5b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160e01b0319166000908152600b6020526040902054600160a81b90046001600160401b031690565b60068181548110611c4f57fe5b600091825260209091200154905081565b601b5481565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b158015611cb457600080fd5b505afa158015611cc8573d6000803e3d6000fd5b505050506040513d6020811015611cde57600080fd5b5051611ce957600080fd5b604080516080810182529485526020850193845284019182526001600160401b03908116606085019081526003805460018101825560009190915294517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b60049096029586015592517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c85015590517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d84015590517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85e909201805467ffffffffffffffff191692909116919091179055565b600060068281548110611dea57fe5b90600052602060002001549050919050565b60076020526000908152604090208054600182015460029092015460e082811b93640100000000909304901b91906001600160401b0380821691600160401b90041685565b6001600160e01b031981166000908152600a6020526040902060018101546002909101549192909190565b60175481565b60045490565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b158015611ec657600080fd5b505afa158015611eda573d6000803e3d6000fd5b505050506040513d6020811015611ef057600080fd5b5051611efb57600080fd5b6001600160e01b03199091166000908152600d6020526040902055565b6001600160e01b0319166000908152600b60205260409020546001600160a01b031690565b6003805460009190611f5690600163ffffffff6130af16565b81548110611f6057fe5b906000526020600020906004020160000154905090565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b158015611fc557600080fd5b505afa158015611fd9573d6000803e3d6000fd5b505050506040513d6020811015611fef57600080fd5b5051611ffa57600080fd5b42601255565b60145481565b6001600160e01b0319166000908152600b6020526040902080546001909101546001600160401b03600160a81b909204821692911690565b60005460408051600160e11b632c1a733d02815233600482015290516001600160a01b0390921691635834e67a91602480820192602092909190829003018186803b15801561208c57600080fd5b505afa1580156120a0573d6000803e3d6000fd5b505050506040513d60208110156120b657600080fd5b50516120c157600080fd5b600160d01b654d435254494d026001600160c01b0319831614156120f1576120ec81610e10026130c4565b6122f7565b600160c81b664d43524654494d026001600160c01b03198316141561211d576120ec81610e10026130c9565b600160d11b6526a1a926a4a7026001600160c01b031983161415612144576120ec816130ce565b600160c01b674d435253484f434b026001600160c01b03198316141561216d576120ec816130d3565b600160ca1b661350d490d05413026001600160c01b031983161415612195576120ec816130d8565b600160e91b6224a6ad026001600160c01b0319831614156121b9576120ec816130dd565b600160ca1b6612535490551155026001600160c01b0319831614156121e5576120ec81610e10026130e2565b600160ca1b6612535553925113026001600160c01b031983161415612210576120ec81603c026130e7565b600160d21b65125353125455026001600160c01b03198316141561223b576120ec81610e10026130ec565b600160ca1b6612535155121593026001600160c01b031983161415612263576120ec816130f1565b600160f81b6043026001600160c01b031983161415612285576120ec816130f6565b600160f81b6041026001600160c01b0319831614156122a7576120ec816130fb565b60408051600160e51b62461bcd02815260206004820152601260248201527f496e76616c696420706172616d20636f64650000000000000000000000000000604482015290519081900360640190fd5b5050565b6000546001600160a01b031681565b60035490565b60005460408051600160e11b632c1a733d02815233600482015290516001600160a01b0390921691635834e67a91602480820192602092909190829003018186803b15801561235e57600080fd5b505afa158015612372573d6000803e3d6000fd5b505050506040513d602081101561238857600080fd5b505161239357600080fd5b6001600160e01b03199092166000908152600b6020526040902080546001600160a01b039092166001600160a01b0319909216919091178155600101805460ff909216600160401b0268ff000000000000000019909216919091179055565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b15801561244057600080fd5b505afa158015612454573d6000803e3d6000fd5b505050506040513d602081101561246a57600080fd5b505161247557600080fd5b6013805467ffffffffffffffff19166001600160401b0392909216919091179055565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b1580156124e657600080fd5b505afa1580156124fa573d6000803e3d6000fd5b505050506040513d602081101561251057600080fd5b505161251b57600080fd5b6001600160e01b03199091166000908152600c6020526040902055565b6001600160e01b0319166000908152600b6020526040902060010154600160401b900460ff1690565b600380546000919061257a90600163ffffffff6130af16565b8154811061258457fe5b906000526020600020906004020160010154905090565b601e5481565b601a5481565b60005460408051600160e11b632c1a733d02815233600482015290516001600160a01b0390921691635834e67a91602480820192602092909190829003018186803b1580156125f557600080fd5b505afa158015612609573d6000803e3d6000fd5b505050506040513d602081101561261f57600080fd5b505161262a57600080fd5b6004805460018181018355600882047f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805460e08b901c60079094169094026101000a92830263ffffffff90930219909316919091179091556040805160a0810182526001600160a01b03978816815295151560208781019182526001600160401b039687168884019081529587166060890190815260ff95861660808a019081526001600160e01b0319909b166000908152600b90925292902096518754915195518716600160a81b02600160a81b600160e81b0319961515600160a01b02600160a01b60ff021992909a166001600160a01b03199093169290921716979097179390931695909517845590519290930180549451909316600160401b0268ff0000000000000000199290911667ffffffffffffffff199094169390931716919091179055565b60005460408051600160e11b632c1a733d02815233600482015290516001600160a01b0390921691635834e67a91602480820192602092909190829003018186803b1580156127c157600080fd5b505afa1580156127d5573d6000803e3d6000fd5b505050506040513d60208110156127eb57600080fd5b50516127f657600080fd5b6001600160e01b0319929092166000908152600b602052604090208054600160a81b600160e81b031916600160a81b6001600160401b0393841602178155600101805467ffffffffffffffff191691909216179055565b600080600080600061286e60016003805490506130af90919063ffffffff16565b90506003818154811061287d57fe5b9060005260206000209060040201600001546003828154811061289c57fe5b906000526020600020906004020160010154600383815481106128bb57fe5b906000526020600020906004020160020154600384815481106128da57fe5b6000918252602090912060049091020160030154929891975095506001600160401b039091169350915050565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b15801561295557600080fd5b505afa158015612969573d6000803e3d6000fd5b505050506040513d602081101561297f57600080fd5b505161298a57600080fd5b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b1580156129fa57600080fd5b505afa158015612a0e573d6000803e3d6000fd5b505050506040513d6020811015612a2457600080fd5b5051612a2f57600080fd5b6001600160e01b03199091166000908152600a6020526040902060020155565b60065490565b60195481565b6000546001600160a01b031615612abe576000546001600160a01b03163314612abe5760408051600160e51b62461bcd02815260206004820152600a6024820152600160b11b692737ba1036b0b9ba32b902604482015290519081900360640190fd5b600080546001600160a01b039092166001600160a01b0319928316811790915560018054909216179055565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b158015612b3857600080fd5b505afa158015612b4c573d6000803e3d6000fd5b505050506040513d6020811015612b6257600080fd5b5051612b6d57600080fd5b600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0155565b60009081526007602052604090208054600182015460029092015460e082811b94640100000000909304901b92916001600160401b0380831692600160401b90041690565b60006004828154811061133f57fe5b601c5481565b6000612c09826000612fb8565b92915050565b60005460408051600160e21b6323c5b10702815233600482015290516001600160a01b0390921691638f16c41c91602480820192602092909190829003018186803b158015612c5d57600080fd5b505afa158015612c71573d6000803e3d6000fd5b505050506040513d6020811015612c8757600080fd5b5051612c9257600080fd5b601d55565b6003805460009190612cb090600163ffffffff6130af16565b81548110612cba57fe5b906000526020600020906004020160020154905090565b6001600160e01b0319166000908152600a60205260409020546001600160a01b031690565b60005460408051600160e11b632c1a733d02815233600482015290516001600160a01b0390921691635834e67a91602480820192602092909190829003018186803b158015612d4457600080fd5b505afa158015612d58573d6000803e3d6000fd5b505050506040513d6020811015612d6e57600080fd5b5051612d7957600080fd5b6001600160e01b0319919091166000908152600a6020526040902080546001600160a01b0319166001600160a01b03909216919091179055565b60005460408051600160e11b632c1a733d02815233600482015290516001600160a01b0390921691635834e67a91602480820192602092909190829003018186803b158015612e0157600080fd5b505afa158015612e15573d6000803e3d6000fd5b505050506040513d6020811015612e2b57600080fd5b5051612e3657600080fd5b6005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db06008820401805463ffffffff60079093166004026101000a928302191660e087901c92909202919091179055604080516060810182526001600160a01b039485168152602080820194855260008284018181526001600160e01b03199098168152600a90915291909120905181546001600160a01b03191694169390931783559051908201559051600290910155565b60038181548110612f0057fe5b6000918252602090912060049091020180546001820154600283015460039093015491935091906001600160401b031684565b600f546001600160a01b031681565b6001546001600160a01b031681565b6000612c09826001612fb8565b60009081526007602052604090205460e01b90565b6003805460009190612f8c90600163ffffffff6130af16565b81548110612f9657fe5b60009182526020909120600360049092020101546001600160401b0316919050565b6000600160e81b62444149026001600160e01b03198416141561306b57600f5460408051600160e21b6315f789a902815290516001600160a01b039092169161306391662386f26fc100009184916357de26a4916004808301926020929190829003018186803b15801561302b57600080fd5b505afa15801561303f573d6000803e3d6000fd5b505050506040513d602081101561305557600080fd5b50519063ffffffff61310016565b915050612c09565b811561309157506001600160e01b031982166000908152600d6020526040902054612c09565b50506001600160e01b0319166000908152600c602052604090205490565b6000828211156130be57600080fd5b50900390565b601755565b601b55565b601655565b601955565b601e55565b601455565b601555565b601055565b601155565b601c55565b601a55565b601855565b600080821161310e57600080fd5b600082848161311957fe5b0494935050505056fea165627a7a7230582002058fd0a86500ccf69923e9d398f86013de59b6398c0753463df1fae6421e0300290000000000000000000000003b9d98afa7b620400d1ab9ed9e83393f792154f7000000000000000000000000729d19f657bd0614b4985cf1d82531c67569197b00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359",
  "constructorArguments": "0000000000000000000000003b9d98afa7b620400d1ab9ed9e83393f792154f7000000000000000000000000729d19f657bd0614b4985cf1d82531c67569197b00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359"
}