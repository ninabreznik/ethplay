{
  "address": "0xb7cfd7f79aa6efb213daf5523c25e4bce11e1037",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "USDPrice",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-03\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts/price/USDPrice.sol\n\n/**\n* @title USDPrice\n* @dev Contract that calculates the price of tokens in USD cents.\n* Note that this contracts needs to be updated\n*/\ncontract USDPrice is Ownable {\n\n    using SafeMath for uint256;\n\n    // PRICE of 1 ETHER in USD in cents\n    // So, if price is: $271.90, the value in variable will be: 27190\n    uint256 public ETHUSD;\n\n    // Time of Last Updated Price\n    uint256 public updatedTime;\n\n    // Historic price of ETH in USD in cents\n    mapping (uint256 => uint256) public priceHistory;\n\n    event PriceUpdated(uint256 price);\n\n    constructor() public {\n    }\n\n    function getHistoricPrice(uint256 time) public view returns (uint256) {\n        return priceHistory[time];\n    } \n\n    function updatePrice(uint256 price) public onlyOwner {\n        require(price > 0);\n\n        priceHistory[updatedTime] = ETHUSD;\n\n        ETHUSD = price;\n        // solium-disable-next-line security/no-block-members\n        updatedTime = block.timestamp;\n\n        emit PriceUpdated(ETHUSD);\n    }\n\n    /**\n    * @dev Override to extend the way in which ether is converted to USD.\n    * @param _weiAmount Value in wei to be converted into tokens\n    * @return The value of wei amount in USD cents\n    */\n    function getPrice(uint256 _weiAmount)\n        public view returns (uint256)\n    {\n        return _weiAmount.mul(ETHUSD);\n    }\n    \n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a031916331790556103dc806100326000396000f3006080604052600436106100985763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631c1935ce811461009d57806343bdfb72146100c7578063715018a6146100dc57806373db0844146100f35780638d6cc56d146101085780638da5cb5b14610120578063b27a048414610151578063e757223014610169578063f2fde38b14610181575b600080fd5b3480156100a957600080fd5b506100b56004356101a2565b60408051918252519081900360200190f35b3480156100d357600080fd5b506100b56101b4565b3480156100e857600080fd5b506100f16101ba565b005b3480156100ff57600080fd5b506100b5610226565b34801561011457600080fd5b506100f160043561022c565b34801561012c57600080fd5b506101356102a9565b60408051600160a060020a039092168252519081900360200190f35b34801561015d57600080fd5b506100b56004356102b8565b34801561017557600080fd5b506100b56004356102ca565b34801561018d57600080fd5b506100f1600160a060020a03600435166102e7565b60009081526003602052604090205490565b60025481565b600054600160a060020a031633146101d157600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60015481565b600054600160a060020a0316331461024357600080fd5b6000811161025057600080fd5b60018054600280546000908152600360209081526040918290209390935592849055429055815183815291517f66cbca4f3c64fecf1dcb9ce094abcf7f68c3450a1d4e3a8e917dd621edb4ebe09281900390910190a150565b600054600160a060020a031681565b60036020526000908152604090205481565b60006102e16001548361030a90919063ffffffff16565b92915050565b600054600160a060020a031633146102fe57600080fd5b61030781610333565b50565b600082151561031b575060006102e1565b5081810281838281151561032b57fe5b04146102e157fe5b600160a060020a038116151561034857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582048f5ccb9784035c0445d5464026ca9b2df28dc064a6d6176ec45d094a0b671590029"
}