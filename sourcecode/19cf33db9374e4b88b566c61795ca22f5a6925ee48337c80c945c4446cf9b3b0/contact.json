{
  "address": "0x68d53441c0e253f76c500e551bdea3d102206c9a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "StrikeToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-01\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner()  {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = true;\n    /**\n     * @dev modifier to allow actions only when the contract IS paused\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev modifier to allow actions only when the contract IS NOT paused\n     */\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyOwner whenNotPaused returns (bool) {\n        paused = true;\n        emit Pause();\n        return true;\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyOwner whenPaused returns (bool) {\n        paused = false;\n        emit Unpause();\n        return true;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n    mapping(address => uint256) balances;\n\n    /**\n     * @dev transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n/**\n * @title Standard ERC20 token\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) allowed;\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amout of tokens to be transfered\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        uint256 _allowance = allowed[_from][msg.sender];\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n       * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n       * @param _spender The address which will spend the funds.\n       * @param _value The amount of tokens to be spent.\n       */\n      function approve(address _spender, uint256 _value) public returns (bool) {\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n      }\n\n      /**\n       * @dev Function to check the amount of tokens that an owner allowed to a spender.\n       * @param _owner address The address which owns the funds.\n       * @param _spender address The address which will spend the funds.\n       * @return A uint256 specifing the amount of tokens still avaible for the spender.\n       */\n      function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n      }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n    bool public mintingFinished = false;\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will recieve the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(0X0, _to, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     * @return True if the operation was successful.\n     */\n    function finishMinting() public onlyOwner returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\ncontract BlockableToken is Ownable{\n    event Blocked(address blockedAddress);\n    event UnBlocked(address unBlockedAddress);\n    //keep mapping of blocked addresses\n    mapping (address => bool) public blockedAddresses;\n    modifier whenNotBlocked(){\n      require(!blockedAddresses[msg.sender]);\n      _;\n    }\n\n    function blockAddress(address toBeBlocked) onlyOwner public {\n      blockedAddresses[toBeBlocked] = true;\n      emit Blocked(toBeBlocked);\n    }\n    function unBlockAddress(address toBeUnblocked) onlyOwner public {\n      blockedAddresses[toBeUnblocked] = false;\n      emit UnBlocked(toBeUnblocked);\n    }\n}\n\n\ncontract StrikeToken is MintableToken, Pausable, BlockableToken{\n    string public name = \"Dimensions Strike Token\";\n    string public symbol = \"DST\";\n    uint256 public decimals = 18;\n\n    event Ev(string message, address whom, uint256 val);\n\n    struct XRec {\n        bool inList;\n        address next;\n        address prev;\n        uint256 val;\n    }\n\n    struct QueueRecord {\n        address whom;\n        uint256 val;\n    }\n\n    address first = 0x0;\n    address last = 0x0;\n\n    mapping (address => XRec) public theList;\n\n    QueueRecord[]  theQueue;\n\n    // add a record to the END of the list\n    function add(address whom, uint256 value) internal {\n        theList[whom] = XRec(true,0x0,last,value);\n        if (last != 0x0) {\n            theList[last].next = whom;\n        } else {\n            first = whom;\n        }\n        last = whom;\n        emit Ev(\"add\",whom,value);\n    }\n\n    function remove(address whom) internal {\n        if (first == whom) {\n            first = theList[whom].next;\n            theList[whom] = XRec(false,0x0,0x0,0);\n            return;\n        }\n        address next = theList[whom].next;\n        address prev = theList[whom].prev;\n        if (prev != 0x0) {\n            theList[prev].next = next;\n        }\n        if (next != 0x0) {\n            theList[next].prev = prev;\n        }\n        theList[whom] =XRec(false,0x0,0x0,0);\n        emit Ev(\"remove\",whom,0);\n    }\n\n    function update(address whom, uint256 value) internal {\n        if (value != 0) {\n            if (!theList[whom].inList) {\n                add(whom,value);\n            } else {\n                theList[whom].val = value;\n                emit Ev(\"update\",whom,value);\n            }\n            return;\n        }\n        if (theList[whom].inList) {\n            remove(whom);\n        }\n    }\n\n    /**\n     * @dev Allows anyone to transfer the Strike tokens once trading has started\n     * @param _to the recipient address of the tokens.\n     * @param _value number of tokens to be transfered.\n     */\n    function transfer(address _to, uint _value) public whenNotPaused whenNotBlocked returns (bool) {\n        bool result = super.transfer(_to, _value);\n        update(msg.sender,balances[msg.sender]);\n        update(_to,balances[_to]);\n        return result;\n    }\n\n    /**\n     * @dev Allows anyone to transfer the Strike tokens once trading has started\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint the amout of tokens to be transfered\n     */\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused whenNotBlocked returns (bool) {\n        bool result = super.transferFrom(_from, _to, _value);\n        update(_from,balances[_from]);\n        update(_to,balances[_to]);\n        return result;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will recieve the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n        bool result = super.mint(_to,_amount);\n        update(_to,balances[_to]);\n        return result;\n    }\n\n    constructor()  public{\n        owner = msg.sender;\n    }\n\n    function changeOwner(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n}\n\ncontract StrikeTokenCrowdsale is Ownable, Pausable {\n    using SafeMath for uint256;\n\n    StrikeToken public token = new StrikeToken();\n\n    // start and end times\n    uint256 public startTimestamp = 1575158400;\n    uint256 public endTimestamp = 1577750400;\n    uint256 etherToWei = 10**18;\n\n    // address where funds are collected and tokens distributed\n    address public hardwareWallet = 0xDe3A91E42E9F6955ce1a9eDb23Be4aBf8d2eb08B;\n    address public restrictedWallet = 0xDe3A91E42E9F6955ce1a9eDb23Be4aBf8d2eb08B;\n    address public additionalTokensFromCommonPoolWallet = 0xDe3A91E42E9F6955ce1a9eDb23Be4aBf8d2eb08B;\n\n    mapping (address => uint256) public deposits;\n    uint256 public numberOfPurchasers;\n\n    // Percentage bonus tokens given in Token Sale, on a daily basis\n    uint256[] public bonus = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\n    uint256 public rate = 4800; // 4800 DST is one Ether\n\n    // amount of raised money in wei\n    uint256 public weiRaised = 0;\n    uint256 public tokensSold = 0;\n    uint256 public advisorTokensGranted = 0;\n    uint256 public commonPoolTokensGranted = 0;\n\n    uint256 public minContribution = 100 * 1 finney;\n    uint256 public hardCapEther = 30000;\n    uint256 hardcap = hardCapEther * etherToWei;\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n    event MainSaleClosed();\n\n    uint256 public weiRaisedInPresale  = 0 ether;\n\n    bool private frozen = false;\n\n    function freeze() public onlyOwner{\n      frozen = true;\n    }\n    function unfreeze() public onlyOwner{\n      frozen = false;\n    }\n\n    modifier whenNotFrozen() {\n        require(!frozen);\n        _;\n    }\n    modifier whenFrozen() {\n        require(frozen);\n        _;\n    }\n\n    function setHardwareWallet(address _wallet) public onlyOwner {\n        require(_wallet != 0x0);\n        hardwareWallet = _wallet;\n    }\n\n    function setRestrictedWallet(address _restrictedWallet) public onlyOwner {\n        require(_restrictedWallet != 0x0);\n        restrictedWallet = _restrictedWallet;\n    }\n\n    function setAdditionalTokensFromCommonPoolWallet(address _wallet) public onlyOwner {\n        require(_wallet != 0x0);\n        additionalTokensFromCommonPoolWallet = _wallet;\n    }\n\n    function setHardCapEther(uint256 newEtherAmt) public onlyOwner{\n        require(newEtherAmt > 0);\n        hardCapEther = newEtherAmt;\n        hardcap = hardCapEther * etherToWei;\n    }\n\n    constructor() public  {\n        require(startTimestamp >= now);\n        require(endTimestamp >= startTimestamp);\n    }\n\n    // check if valid purchase\n    modifier validPurchase {\n        require(now >= startTimestamp);\n        require(now < endTimestamp);\n        require(msg.value >= minContribution);\n        require(frozen == false);\n        _;\n    }\n\n    // @return true if crowdsale event has ended\n    function hasEnded() public constant returns (bool) {\n        if (now > endTimestamp)\n            return true;\n        return false;\n    }\n\n    // low level token purchase function\n    function buyTokens(address beneficiary) public payable validPurchase {\n        require(beneficiary != 0x0);\n\n        uint256 weiAmount = msg.value;\n\n        // Check if the hardcap has been exceeded\n        uint256 weiRaisedSoFar = weiRaised.add(weiAmount);\n        require(weiRaisedSoFar + weiRaisedInPresale <= hardcap);\n\n        if (deposits[msg.sender] == 0) {\n            numberOfPurchasers++;\n        }\n        deposits[msg.sender] = weiAmount.add(deposits[msg.sender]);\n\n        uint256 daysInSale = (now - startTimestamp) / (1 days);\n        uint256 thisBonus = 0;\n        if(daysInSale < 29 ){\n            thisBonus = bonus[daysInSale];\n        }\n\n        // Calculate token amount to be created\n        uint256 tokens = weiAmount.mul(rate);\n        uint256 extraBonus = tokens.mul(thisBonus);\n        extraBonus = extraBonus.div(100);\n        tokens = tokens.add(extraBonus);\n\n        // Update the global token sale variables\n        uint256 finalTokenCount;\n        finalTokenCount = tokens.add(tokensSold);\n        weiRaised = weiRaisedSoFar;\n        tokensSold = finalTokenCount;\n\n        token.mint(beneficiary, tokens);\n        hardwareWallet.transfer(msg.value);\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n    }\n\n    function grantTokensAdvisors(address beneficiary,uint256 dstTokenCount) public onlyOwner{\n        dstTokenCount = dstTokenCount * etherToWei;\n        advisorTokensGranted = advisorTokensGranted.add(dstTokenCount);\n        token.mint(beneficiary,dstTokenCount);\n    }\n\n    function grantTokensCommonPool(address beneficiary,uint256 dstTokenCount) public onlyOwner{\n        dstTokenCount = dstTokenCount * etherToWei;\n        commonPoolTokensGranted = commonPoolTokensGranted.add(dstTokenCount);\n        token.mint(beneficiary,dstTokenCount);\n    }\n\n    // finish mining coins and transfer ownership of Change coin to owner\n    function finishMinting() public onlyOwner returns(bool){\n        require(hasEnded());\n\n        uint issuedTokenSupply = token.totalSupply();\n        uint publicTokens = issuedTokenSupply-advisorTokensGranted;\n        if(publicTokens>60*advisorTokensGranted/40 ){\n          uint restrictedTokens=(publicTokens)*40/60-advisorTokensGranted;\n          token.mint(restrictedWallet, restrictedTokens);\n          advisorTokensGranted=advisorTokensGranted+restrictedTokens;\n        }\n        else if(publicTokens<60*advisorTokensGranted/40){\n          uint256 deltaCommonPool=advisorTokensGranted*60/40-publicTokens;\n          token.mint(additionalTokensFromCommonPoolWallet,deltaCommonPool);\n        }\n\n        token.finishMinting();\n        token.transferOwnership(owner);\n        emit MainSaleClosed();\n        return true;\n    }\n\n    // fallback function can be used to buy tokens\n    function () payable public {\n        buyTokens(msg.sender);\n    }\n    function setRate(uint256 amount) onlyOwner public {\n        require(amount>=0);\n        rate = amount;\n    }\n    function setBonus(uint256 [] amounts) onlyOwner public {\n      require( amounts.length > 30 );\n        bonus = amounts;\n    }\n    function setWeiRaisedInPresale(uint256 amount) onlyOwner public {\n        require(amount>=0);\n        weiRaisedInPresale = amount;\n    }\n    function setEndTimeStamp(uint256 end) onlyOwner public {\n        require(end>now);\n        endTimestamp = end;\n    }\n    function setStartTimeStamp(uint256 start) onlyOwner public {\n        startTimestamp = start;\n    }\n    function pauseTrading() onlyOwner public{\n        token.pause();\n    }\n    function startTrading() onlyOwner public{\n        token.unpause();\n    }\n    function smartBlockAddress(address toBeBlocked) onlyOwner public{\n        token.blockAddress(toBeBlocked);\n    }\n    function smartUnBlockAddress(address toBeUnblocked) onlyOwner public{\n        token.unBlockAddress(toBeUnblocked);\n    }\n    function changeTokenOwner(address newOwner) public onlyOwner {\n        require(hasEnded());\n        token.changeOwner(newOwner);\n    }\n    function bulkGrantTokenAdvisors(address [] beneficiaries,uint256 [] granttokencounts) public onlyOwner{\n      require( beneficiaries.length == granttokencounts.length);\n      for (uint256 i=0; i<beneficiaries.length; i++) {\n        grantTokensAdvisors(beneficiaries[i],granttokencounts[i]);\n      }\n    }\n    function bulkGrantTokenCommonPool(address [] beneficiaries,uint256 [] granttokencounts) public onlyOwner{\n      require( beneficiaries.length == granttokencounts.length);\n      for (uint256 i=0; i<beneficiaries.length; i++) {\n        grantTokensCommonPool(beneficiaries[i],granttokencounts[i]);\n      }\n    }\n\n}",
  "bytecode": "6003805460a060020a61ffff021916750100000000000000000000000000000000000000000017905560c0604052601760808190527f44696d656e73696f6e7320537472696b6520546f6b656e00000000000000000060a0908152620000699160059190620000ff565b506040805180820190915260038082527f44535400000000000000000000000000000000000000000000000000000000006020909201918252620000b091600691620000ff565b50601260075560088054600160a060020a0319908116909155600980549091169055348015620000df57600080fd5b506003805433600160a060020a03199182168117909116179055620001a4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014257805160ff191683800117855562000172565b8280016001018555821562000172579182015b828111156200017257825182559160200191906001019062000155565b506200018092915062000184565b5090565b620001a191905b808211156200018057600081556001016200018b565b90565b61137c80620001b46000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461012c57806306fdde0314610155578063095ea7b3146101df57806318160ddd1461020357806323b872dd1461022a578063313ce567146102545780633f4ba83a1461026957806340c10f191461027e5780634f93208a146102a25780635bfd1ab8146102c35780635c0b51fb146102e65780635c975abb1461033b57806370a08231146103505780637d64bcb4146103715780638456cb59146103865780638da5cb5b1461039b57806395d89b41146103cc578063a6f9dae1146103e1578063a9059cbb14610402578063ad2bb1b314610426578063dd62ed3e14610447578063f2fde38b1461046e575b600080fd5b34801561013857600080fd5b5061014161048f565b604080519115158252519081900360200190f35b34801561016157600080fd5b5061016a6104b0565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a457818101518382015260200161018c565b50505050905090810190601f1680156101d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101eb57600080fd5b50610141600160a060020a036004351660243561053e565b34801561020f57600080fd5b506102186105e0565b60408051918252519081900360200190f35b34801561023657600080fd5b50610141600160a060020a03600435811690602435166044356105e6565b34801561026057600080fd5b5061021861067d565b34801561027557600080fd5b50610141610683565b34801561028a57600080fd5b50610141600160a060020a0360043516602435610703565b3480156102ae57600080fd5b50610141600160a060020a036004351661077f565b3480156102cf57600080fd5b506102e4600160a060020a0360043516610794565b005b3480156102f257600080fd5b50610307600160a060020a0360043516610803565b604080519415158552600160a060020a03938416602086015291909216838201526060830191909152519081900360800190f35b34801561034757600080fd5b50610141610839565b34801561035c57600080fd5b50610218600160a060020a0360043516610849565b34801561037d57600080fd5b50610141610864565b34801561039257600080fd5b506101416108e2565b3480156103a757600080fd5b506103b0610967565b60408051600160a060020a039092168252519081900360200190f35b3480156103d857600080fd5b5061016a610976565b3480156103ed57600080fd5b506102e4600160a060020a03600435166109d1565b34801561040e57600080fd5b50610141600160a060020a0360043516602435610a0a565b34801561043257600080fd5b506102e4600160a060020a0360043516610a8d565b34801561045357600080fd5b50610218600160a060020a0360043581169060243516610aff565b34801561047a57600080fd5b506102e4600160a060020a0360043516610b2a565b60035474010000000000000000000000000000000000000000900460ff1681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105365780601f1061050b57610100808354040283529160200191610536565b820191906000526020600020905b81548152906001019060200180831161051957829003601f168201915b505050505081565b600081158061056e5750336000908152600260209081526040808320600160a060020a0387168452909152902054155b151561057957600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60005481565b600354600090819060a860020a900460ff161561060257600080fd5b3360009081526004602052604090205460ff161561061f57600080fd5b61062a858585610b6f565b600160a060020a038616600090815260016020526040902054909150610651908690610c7e565b600160a060020a038416600090815260016020526040902054610675908590610c7e565b949350505050565b60075481565b600354600090600160a060020a0316331461069d57600080fd5b60035460a860020a900460ff1615156106b557600080fd5b6003805475ff000000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a150600190565b6003546000908190600160a060020a0316331461071f57600080fd5b60035474010000000000000000000000000000000000000000900460ff161561074757600080fd5b6107518484610d76565b600160a060020a038516600090815260016020526040902054909150610778908590610c7e565b9392505050565b60046020526000908152604090205460ff1681565b600354600160a060020a031633146107ab57600080fd5b600160a060020a038116600081815260046020908152604091829020805460ff19169055815192835290517f8e41ac232fd0be6574f6d83dd972e8d214130b9242cd340da76efd9e6d49f24c9281900390910190a150565b600a6020526000908152604090208054600182015460029092015460ff821692600160a060020a03610100909304831692169084565b60035460a860020a900460ff1681565b600160a060020a031660009081526001602052604090205490565b600354600090600160a060020a0316331461087e57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600090600160a060020a031633146108fc57600080fd5b60035460a860020a900460ff161561091357600080fd5b6003805475ff000000000000000000000000000000000000000000191660a860020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a150600190565b600354600160a060020a031681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105365780601f1061050b57610100808354040283529160200191610536565b600354600160a060020a031633146109e857600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600354600090819060a860020a900460ff1615610a2657600080fd5b3360009081526004602052604090205460ff1615610a4357600080fd5b610a4d8484610e53565b33600081815260016020526040902054919250610a6991610c7e565b600160a060020a038416600090815260016020526040902054610778908590610c7e565b600354600160a060020a03163314610aa457600080fd5b600160a060020a038116600081815260046020908152604091829020805460ff19166001179055815192835290517f75e91ce73c1d3352d8dd3610443539cd33dfe13b1de8f8caae54ec26dd0dc9cb9281900390910190a150565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610b4157600080fd5b600160a060020a03811615610b6c5760038054600160a060020a031916600160a060020a0383161790555b50565b600160a060020a03808416600090815260026020908152604080832033845282528083205493861683526001909152812054909190610bb4908463ffffffff610f0316565b600160a060020a038086166000908152600160205260408082209390935590871681522054610be9908463ffffffff610f1216565b600160a060020a038616600090815260016020526040902055610c12818463ffffffff610f1216565b600160a060020a03808716600081815260026020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b8015610d4857600160a060020a0382166000908152600a602052604090205460ff161515610cb557610cb08282610f24565b610d43565b600160a060020a0382166000818152600a602090815260409182902060020184905581519081019290925281810183905260608083526006908301527f75706461746500000000000000000000000000000000000000000000000000006080830152517f1f542a60f9c43dd0fedc28c24846d3aa3e3da3905bf6033ebaf7ffe0f71d6d7c9181900360a00190a15b610d72565b600160a060020a0382166000908152600a602052604090205460ff1615610d7257610d72826110c4565b5050565b600354600090600160a060020a03163314610d9057600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610db857600080fd5b600054610dcb908363ffffffff610f0316565b6000908155600160a060020a038416815260016020526040902054610df6908363ffffffff610f0316565b600160a060020a03841660008181526001602090815260408083209490945583518681529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b33600090815260016020526040812054610e73908363ffffffff610f1216565b3360009081526001602052604080822092909255600160a060020a03851681522054610ea5908363ffffffff610f0316565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60008282018381101561077857fe5b600082821115610f1e57fe5b50900390565b6040805160808101825260018082526000602080840182815260098054600160a060020a03908116878901908152606088018a81528b83168752600a9095529790942095518654925160ff199093169015151774ffffffffffffffffffffffffffffffffffffffff0019166101009285169290920291909117855594519284018054600160a060020a0319169383169390931790925590516002909201919091559054161561101757600954600160a060020a039081166000908152600a6020526040902080549184166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055611033565b60088054600160a060020a031916600160a060020a0384161790555b60098054600160a060020a038416600160a060020a0319909116811790915560408051602081019290925281810183905260608083526003908301527f61646400000000000000000000000000000000000000000000000000000000006080830152517f1f542a60f9c43dd0fedc28c24846d3aa3e3da3905bf6033ebaf7ffe0f71d6d7c9181900360a00190a15050565b6008546000908190600160a060020a038481169116141561119057600160a060020a038381166000818152600a60208181526040808420805460088054610100928390048a16600160a060020a031991821617909155835160808101855287815280860188815294810188815260608201898152999098529590945293518154925160ff199093169015151774ffffffffffffffffffffffffffffffffffffffff001916918716909302178255915160018201805490931694169390931790555160029091015561134b565b5050600160a060020a038082166000908152600a60205260409020805460019091015461010090910482169116801561120657600160a060020a038082166000908152600a6020526040902080549184166101000274ffffffffffffffffffffffffffffffffffffffff00199092169190911790555b600160a060020a0382161561124757600160a060020a038281166000908152600a602052604090206001018054600160a060020a0319169183169190911790555b6040805160808181018352600080835260208084018281528486018381526060808701858152600160a060020a038c8116808852600a87528a882099518a54965183166101000274ffffffffffffffffffffffffffffffffffffffff001991151560ff199098169790971716959095178955925160018901805491909416600160a060020a0319909116179092559051600290960195909555855191820152808501919091528281526006928101929092527f72656d6f766500000000000000000000000000000000000000000000000000009082015290517f1f542a60f9c43dd0fedc28c24846d3aa3e3da3905bf6033ebaf7ffe0f71d6d7c9181900360a00190a15b5050505600a165627a7a7230582096992b2b8b53bde51a45af88908370477e91735ef7c1b13d9053b1d7cc8545680029"
}