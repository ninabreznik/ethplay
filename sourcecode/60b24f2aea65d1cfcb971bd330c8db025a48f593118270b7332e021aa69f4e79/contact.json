{
  "address": "0x9e85c5b1a66c0bb6ce2ffb41ce0f918b19bf3c8d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ClubToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-18\n*/\n\npragma solidity ^0.4.24;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 is SafeMath {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    // This generates a public event on the blockchain that will notify clients\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(SafeMath.safeAdd(balanceOf[_to], _value) > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = SafeMath.safeAdd(balanceOf[_from], balanceOf[_to]); \n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                     // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(SafeMath.safeAdd(balanceOf[_from], balanceOf[_to]) == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = SafeMath.safeSub(allowance[msg.sender][_spender], _value);\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);    // Subtract from the sender\n        totalSupply = SafeMath.safeSub(totalSupply, _value);     // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n        totalSupply = SafeMath.safeSub(totalSupply, _value);     // Updates totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\n/******************************************/\n/*       Gran Turismo Club TOKEN STARTS HERE       */\n/******************************************/\n\ncontract ClubToken is owned, TokenERC20 {\n    \n    /// The full name of the CLUB token.\n    string public constant tokenName = \"GranTurismoClub\";\n    /// Symbol of the CLUB token.\n    string public constant tokenSymbol = \"CLUB\";\n    \n    uint256 public initialSupply = 100000000;\n\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function ClubToken() TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require(SafeMath.safeAdd(balanceOf[_to], _value) > balanceOf[_to]);\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n}",
  "bytecode": "60806040526003805460ff191660121790556305f5e10060075534801561002557600080fd5b50600754604080518082018252600f81527f4772616e54757269736d6f436c7562000000000000000000000000000000000060208083019182528351808501855260048082527f434c5542000000000000000000000000000000000000000000000000000000008284015260008054600160a060020a03191633908117825560035460ff16600a0a89029283905581526005909352949091209390935581519192916100d3916001916100f0565b5080516100e79060029060208401906100f0565b5050505061018b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013157805160ff191683800117855561015e565b8280016001018555821561015e579182015b8281111561015e578251825591602001919060010190610143565b5061016a92915061016e565b5090565b61018891905b8082111561016a5760008155600101610174565b90565b610cb38061019a6000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010b578063095ea7b31461019557806318160ddd146101cd57806323b872dd146101f4578063313ce5671461021e578063378dc3dc1461024957806342966c681461025e5780636c02a9311461027657806370a082311461028b57806379cc6790146102ac5780637b61c320146102d05780638da5cb5b146102e557806395d89b4114610316578063a9059cbb1461032b578063b414d4b61461034f578063cae9ca5114610370578063dd62ed3e146103d9578063e724529c14610400578063f2fde38b14610428575b600080fd5b34801561011757600080fd5b50610120610449565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015a578181015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a157600080fd5b506101b9600160a060020a03600435166024356104d6565b604080519115158252519081900360200190f35b3480156101d957600080fd5b506101e261056b565b60408051918252519081900360200190f35b34801561020057600080fd5b506101b9600160a060020a0360043581169060243516604435610571565b34801561022a57600080fd5b50610233610608565b6040805160ff9092168252519081900360200190f35b34801561025557600080fd5b506101e2610611565b34801561026a57600080fd5b506101b9600435610617565b34801561028257600080fd5b506101206106ab565b34801561029757600080fd5b506101e2600160a060020a03600435166106e2565b3480156102b857600080fd5b506101b9600160a060020a03600435166024356106f4565b3480156102dc57600080fd5b5061012061081f565b3480156102f157600080fd5b506102fa610856565b60408051600160a060020a039092168252519081900360200190f35b34801561032257600080fd5b50610120610865565b34801561033757600080fd5b506101b9600160a060020a03600435166024356108bd565b34801561035b57600080fd5b506101b9600160a060020a03600435166108d3565b34801561037c57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101b9948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506108e89650505050505050565b3480156103e557600080fd5b506101e2600160a060020a0360043581169060243516610a01565b34801561040c57600080fd5b50610426600160a060020a03600435166024351515610a1e565b005b34801561043457600080fd5b50610426600160a060020a0360043516610a99565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104ce5780601f106104a3576101008083540402835291602001916104ce565b820191906000526020600020905b8154815290600101906020018083116104b157829003601f168201915b505050505081565b336000908152600660209081526040808320600160a060020a03861684529091528120546105049083610adf565b336000818152600660209081526040808320600160a060020a03891680855290835292819020949094558351868152935191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60045481565b600160a060020a03831660009081526006602090815260408083203384529091528120548211156105a157600080fd5b600160a060020a03841660009081526006602090815260408083203384529091529020546105cf9083610adf565b600160a060020a03851660009081526006602090815260408083203384529091529020556105fe848484610af3565b5060019392505050565b60035460ff1681565b60075481565b3360009081526005602052604081205482111561063357600080fd5b3360009081526005602052604090205461064d9083610adf565b3360009081526005602052604090205560045461066a9083610adf565b60045560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b60408051808201909152600f81527f4772616e54757269736d6f436c75620000000000000000000000000000000000602082015281565b60056020526000908152604090205481565b600160a060020a03821660009081526005602052604081205482111561071957600080fd5b600160a060020a038316600090815260066020908152604080832033845290915290205482111561074957600080fd5b600160a060020a03831660009081526005602052604090205461076c9083610adf565b600160a060020a03841660009081526005602090815260408083209390935560068152828220338352905220546107a39083610adf565b600160a060020a03841660009081526006602090815260408083203384529091529020556004546107d49083610adf565b600455604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b60408051808201909152600481527f434c554200000000000000000000000000000000000000000000000000000000602082015281565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104ce5780601f106104a3576101008083540402835291602001916104ce565b60006108ca338484610af3565b50600192915050565b60086020526000908152604090205460ff1681565b6000836108f581856104d6565b156109f9576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b8381101561098d578181015183820152602001610975565b50505050905090810190601f1680156109ba5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156109dc57600080fd5b505af11580156109f0573d6000803e3d6000fd5b50505050600191505b509392505050565b600660209081526000928352604080842090915290825290205481565b600054600160a060020a03163314610a3557600080fd5b600160a060020a038216600081815260086020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a03163314610ab057600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000610aed83831115610c54565b50900390565b600160a060020a0382161515610b0857600080fd5b600160a060020a038316600090815260056020526040902054811115610b2d57600080fd5b600160a060020a038216600090815260056020526040902054610b508183610c63565b11610b5a57600080fd5b600160a060020a03831660009081526008602052604090205460ff1615610b8057600080fd5b600160a060020a03821660009081526008602052604090205460ff1615610ba657600080fd5b600160a060020a038316600090815260056020526040902054610bc99082610adf565b600160a060020a038085166000908152600560205260408082209390935590841681522054610bf89082610c63565b600160a060020a0380841660008181526005602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b801515610c6057600080fd5b50565b6000828201610c80848210801590610c7b5750838210155b610c54565b93925050505600a165627a7a723058203d9b19f0e513c209ae8ceb2ae765608cc2f26d6d47706e160fa2e76eaeee42a40029"
}