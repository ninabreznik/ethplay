{
  "address": "0x83984d6142934bb535793a82adb0a46ef0f66b6d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "RemmeToken",
  "contractName": "REMME",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "10000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-01\n*/\n\npragma solidity 0.4.15;\n\ncontract RegistryICAPInterface {\n    function parse(bytes32 _icap) constant returns(address, bytes32, bool);\n    function institutions(bytes32 _institution) constant returns(address);\n}\n\ncontract EToken2Interface {\n    function registryICAP() constant returns(RegistryICAPInterface);\n    function baseUnit(bytes32 _symbol) constant returns(uint8);\n    function description(bytes32 _symbol) constant returns(string);\n    function owner(bytes32 _symbol) constant returns(address);\n    function isOwner(address _owner, bytes32 _symbol) constant returns(bool);\n    function totalSupply(bytes32 _symbol) constant returns(uint);\n    function balanceOf(address _holder, bytes32 _symbol) constant returns(uint);\n    function isLocked(bytes32 _symbol) constant returns(bool);\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) returns(bool);\n    function reissueAsset(bytes32 _symbol, uint _value) returns(bool);\n    function revokeAsset(bytes32 _symbol, uint _value) returns(bool);\n    function setProxy(address _address, bytes32 _symbol) returns(bool);\n    function lockAsset(bytes32 _symbol) returns(bool);\n    function proxyTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) returns(bool);\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) returns(bool);\n    function allowance(address _from, address _spender, bytes32 _symbol) constant returns(uint);\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) returns(bool);\n}\n\ncontract AssetInterface {\n    function _performTransferWithReference(address _to, uint _value, string _reference, address _sender) returns(bool);\n    function _performTransferToICAPWithReference(bytes32 _icap, uint _value, string _reference, address _sender) returns(bool);\n    function _performApprove(address _spender, uint _value, address _sender) returns(bool);    \n    function _performTransferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) returns(bool);\n    function _performTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) returns(bool);\n    function _performGeneric(bytes, address) payable {\n        revert();\n    }\n}\n\ncontract ERC20Interface {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed from, address indexed spender, uint256 value);\n\n    function totalSupply() constant returns(uint256 supply);\n    function balanceOf(address _owner) constant returns(uint256 balance);\n    function transfer(address _to, uint256 _value) returns(bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool success);\n    function approve(address _spender, uint256 _value) returns(bool success);\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining);\n\n    // function symbol() constant returns(string);\n    function decimals() constant returns(uint8);\n    // function name() constant returns(string);\n}\n\ncontract AssetProxyInterface {\n    function _forwardApprove(address _spender, uint _value, address _sender) returns(bool);\n    function _forwardTransferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) returns(bool);\n    function _forwardTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) returns(bool);\n    function balanceOf(address _owner) constant returns(uint);\n}\n\ncontract Bytes32 {\n    function _bytes32(string _input) internal constant returns(bytes32 result) {\n        assembly {\n            result := mload(add(_input, 32))\n        }\n    }\n}\n\ncontract ReturnData {\n    function _returnReturnData(bool _success) internal {\n        assembly {\n            let returndatastart := msize()\n            mstore(0x40, add(returndatastart, returndatasize))\n            returndatacopy(returndatastart, 0, returndatasize)\n            switch _success case 0 { revert(returndatastart, returndatasize) } default { return(returndatastart, returndatasize) }\n        }\n    }\n\n    function _assemblyCall(address _destination, uint _value, bytes _data) internal returns(bool success) {\n        assembly {\n            success := call(div(mul(gas, 63), 64), _destination, _value, add(_data, 32), mload(_data), 0, 0)\n        }\n    }\n}\n\n/**\n * @title EToken2 Asset Proxy.\n *\n * Proxy implements ERC20 interface and acts as a gateway to a single EToken2 asset.\n * Proxy adds etoken2Symbol and caller(sender) when forwarding requests to EToken2.\n * Every request that is made by caller first sent to the specific asset implementation\n * contract, which then calls back to be forwarded onto EToken2.\n *\n * Calls flow: Caller ->\n *             Proxy.func(...) ->\n *             Asset._performFunc(..., Caller.address) ->\n *             Proxy._forwardFunc(..., Caller.address) ->\n *             Platform.proxyFunc(..., symbol, Caller.address)\n *\n * Generic call flow: Caller ->\n *             Proxy.unknownFunc(...) ->\n *             Asset._performGeneric(..., Caller.address) ->\n *             Asset.unknownFunc(...)\n *\n * Asset implementation contract is mutable, but each user have an option to stick with\n * old implementation, through explicit decision made in timely manner, if he doesn't agree\n * with new rules.\n * Each user have a possibility to upgrade to latest asset contract implementation, without the\n * possibility to rollback.\n *\n * Note: all the non constant functions return false instead of throwing in case if state change\n * didn't happen yet.\n */\ncontract REMME is ERC20Interface, AssetProxyInterface, Bytes32, ReturnData {\n    // Assigned EToken2, immutable.\n    EToken2Interface public etoken2;\n\n    // Assigned symbol, immutable.\n    bytes32 public etoken2Symbol;\n\n    // Assigned name, immutable. For UI.\n    string public name;\n    string public symbol;\n\n    /**\n     * Sets EToken2 address, assigns symbol and name.\n     *\n     * Can be set only once.\n     *\n     * @param _etoken2 EToken2 contract address.\n     * @param _symbol assigned symbol.\n     * @param _name assigned name.\n     *\n     * @return success.\n     */\n    function init(EToken2Interface _etoken2, string _symbol, string _name) returns(bool) {\n        if (address(etoken2) != 0x0) {\n            return false;\n        }\n        etoken2 = _etoken2;\n        etoken2Symbol = _bytes32(_symbol);\n        name = _name;\n        symbol = _symbol;\n        return true;\n    }\n\n    /**\n     * Only EToken2 is allowed to call.\n     */\n    modifier onlyEToken2() {\n        if (msg.sender == address(etoken2)) {\n            _;\n        }\n    }\n\n    /**\n     * Only current asset owner is allowed to call.\n     */\n    modifier onlyAssetOwner() {\n        if (etoken2.isOwner(msg.sender, etoken2Symbol)) {\n            _;\n        }\n    }\n\n    /**\n     * Returns asset implementation contract for current caller.\n     *\n     * @return asset implementation contract.\n     */\n    function _getAsset() internal returns(AssetInterface) {\n        return AssetInterface(getVersionFor(msg.sender));\n    }\n\n    function recoverTokens(uint _value) onlyAssetOwner() returns(bool) {\n        return this.transferWithReference(msg.sender, _value, 'Tokens recovery');\n    }\n\n    /**\n     * Returns asset total supply.\n     *\n     * @return asset total supply.\n     */\n    function totalSupply() constant returns(uint) {\n        return etoken2.totalSupply(etoken2Symbol);\n    }\n\n    /**\n     * Returns asset balance for a particular holder.\n     *\n     * @param _owner holder address.\n     *\n     * @return holder balance.\n     */\n    function balanceOf(address _owner) constant returns(uint) {\n        return etoken2.balanceOf(_owner, etoken2Symbol);\n    }\n\n    /**\n     * Returns asset allowance from one holder to another.\n     *\n     * @param _from holder that allowed spending.\n     * @param _spender holder that is allowed to spend.\n     *\n     * @return holder to spender allowance.\n     */\n    function allowance(address _from, address _spender) constant returns(uint) {\n        return etoken2.allowance(_from, _spender, etoken2Symbol);\n    }\n\n    /**\n     * Returns asset decimals.\n     *\n     * @return asset decimals.\n     */\n    function decimals() constant returns(uint8) {\n        return etoken2.baseUnit(etoken2Symbol);\n    }\n\n    /**\n     * Transfers asset balance from the caller to specified receiver.\n     *\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     *\n     * @return success.\n     */\n    function transfer(address _to, uint _value) returns(bool) {\n        return transferWithReference(_to, _value, '');\n    }\n\n    /**\n     * Transfers asset balance from the caller to specified receiver adding specified comment.\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\n     * the caller address.\n     *\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\n     *\n     * @return success.\n     */\n    function transferWithReference(address _to, uint _value, string _reference) returns(bool) {\n        return _getAsset()._performTransferWithReference(_to, _value, _reference, msg.sender);\n    }\n\n    /**\n     * Transfers asset balance from the caller to specified ICAP.\n     *\n     * @param _icap recipient ICAP to give to.\n     * @param _value amount to transfer.\n     *\n     * @return success.\n     */\n    function transferToICAP(bytes32 _icap, uint _value) returns(bool) {\n        return transferToICAPWithReference(_icap, _value, '');\n    }\n\n    /**\n     * Transfers asset balance from the caller to specified ICAP adding specified comment.\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\n     * the caller address.\n     *\n     * @param _icap recipient ICAP to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\n     *\n     * @return success.\n     */\n    function transferToICAPWithReference(bytes32 _icap, uint _value, string _reference) returns(bool) {\n        return _getAsset()._performTransferToICAPWithReference(_icap, _value, _reference, msg.sender);\n    }\n\n    /**\n     * Prforms allowance transfer of asset balance between holders.\n     *\n     * @param _from holder address to take from.\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     *\n     * @return success.\n     */\n    function transferFrom(address _from, address _to, uint _value) returns(bool) {\n        return transferFromWithReference(_from, _to, _value, '');\n    }\n\n    /**\n     * Prforms allowance transfer of asset balance between holders adding specified comment.\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\n     * the caller address.\n     *\n     * @param _from holder address to take from.\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\n     *\n     * @return success.\n     */\n    function transferFromWithReference(address _from, address _to, uint _value, string _reference) returns(bool) {\n        return _getAsset()._performTransferFromWithReference(_from, _to, _value, _reference, msg.sender);\n    }\n\n    /**\n     * Performs transfer call on the EToken2 by the name of specified sender.\n     *\n     * Can only be called by asset implementation contract assigned to sender.\n     *\n     * @param _from holder address to take from.\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\n     * @param _sender initial caller.\n     *\n     * @return success.\n     */\n    function _forwardTransferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) onlyImplementationFor(_sender) returns(bool) {\n        return etoken2.proxyTransferFromWithReference(_from, _to, _value, etoken2Symbol, _reference, _sender);\n    }\n\n    /**\n     * Prforms allowance transfer of asset balance between holders.\n     *\n     * @param _from holder address to take from.\n     * @param _icap recipient ICAP address to give to.\n     * @param _value amount to transfer.\n     *\n     * @return success.\n     */\n    function transferFromToICAP(address _from, bytes32 _icap, uint _value) returns(bool) {\n        return transferFromToICAPWithReference(_from, _icap, _value, '');\n    }\n\n    /**\n     * Prforms allowance transfer of asset balance between holders adding specified comment.\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\n     * the caller address.\n     *\n     * @param _from holder address to take from.\n     * @param _icap recipient ICAP address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\n     *\n     * @return success.\n     */\n    function transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) returns(bool) {\n        return _getAsset()._performTransferFromToICAPWithReference(_from, _icap, _value, _reference, msg.sender);\n    }\n\n    /**\n     * Performs allowance transfer to ICAP call on the EToken2 by the name of specified sender.\n     *\n     * Can only be called by asset implementation contract assigned to sender.\n     *\n     * @param _from holder address to take from.\n     * @param _icap recipient ICAP address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\n     * @param _sender initial caller.\n     *\n     * @return success.\n     */\n    function _forwardTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) onlyImplementationFor(_sender) returns(bool) {\n        return etoken2.proxyTransferFromToICAPWithReference(_from, _icap, _value, _reference, _sender);\n    }\n\n    /**\n     * Sets asset spending allowance for a specified spender.\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\n     * the caller address.\n     *\n     * @param _spender holder address to set allowance to.\n     * @param _value amount to allow.\n     *\n     * @return success.\n     */\n    function approve(address _spender, uint _value) returns(bool) {\n        return _getAsset()._performApprove(_spender, _value, msg.sender);\n    }\n\n    /**\n     * Performs allowance setting call on the EToken2 by the name of specified sender.\n     *\n     * Can only be called by asset implementation contract assigned to sender.\n     *\n     * @param _spender holder address to set allowance to.\n     * @param _value amount to allow.\n     * @param _sender initial caller.\n     *\n     * @return success.\n     */\n    function _forwardApprove(address _spender, uint _value, address _sender) onlyImplementationFor(_sender) returns(bool) {\n        return etoken2.proxyApprove(_spender, _value, etoken2Symbol, _sender);\n    }\n\n    /**\n     * Emits ERC20 Transfer event on this contract.\n     *\n     * Can only be, and, called by assigned EToken2 when asset transfer happens.\n     */\n    function emitTransfer(address _from, address _to, uint _value) onlyEToken2() {\n        Transfer(_from, _to, _value);\n    }\n\n    /**\n     * Emits ERC20 Approval event on this contract.\n     *\n     * Can only be, and, called by assigned EToken2 when asset allowance set happens.\n     */\n    function emitApprove(address _from, address _spender, uint _value) onlyEToken2() {\n        Approval(_from, _spender, _value);\n    }\n\n    /**\n     * Resolves asset implementation contract for the caller and forwards there transaction data,\n     * along with the value. This allows for proxy interface growth.\n     */\n    function () payable {\n        _getAsset()._performGeneric.value(msg.value)(msg.data, msg.sender);\n        _returnReturnData(true);\n    }\n\n    // Interface functions to allow specifying ICAP addresses as strings.\n    function transferToICAP(string _icap, uint _value) returns(bool) {\n        return transferToICAPWithReference(_icap, _value, '');\n    }\n\n    function transferToICAPWithReference(string _icap, uint _value, string _reference) returns(bool) {\n        return transferToICAPWithReference(_bytes32(_icap), _value, _reference);\n    }\n\n    function transferFromToICAP(address _from, string _icap, uint _value) returns(bool) {\n        return transferFromToICAPWithReference(_from, _icap, _value, '');\n    }\n\n    function transferFromToICAPWithReference(address _from, string _icap, uint _value, string _reference) returns(bool) {\n        return transferFromToICAPWithReference(_from, _bytes32(_icap), _value, _reference);\n    }\n\n    /**\n     * Indicates an upgrade freeze-time start, and the next asset implementation contract.\n     */\n    event UpgradeProposal(address newVersion);\n\n    // Current asset implementation contract address.\n    address latestVersion;\n\n    // Proposed next asset implementation contract address.\n    address pendingVersion;\n\n    // Upgrade freeze-time start.\n    uint pendingVersionTimestamp;\n\n    // Timespan for users to review the new implementation and make decision.\n    uint constant UPGRADE_FREEZE_TIME = 3 days;\n\n    // Asset implementation contract address that user decided to stick with.\n    // 0x0 means that user uses latest version.\n    mapping(address => address) userOptOutVersion;\n\n    /**\n     * Only asset implementation contract assigned to sender is allowed to call.\n     */\n    modifier onlyImplementationFor(address _sender) {\n        if (getVersionFor(_sender) == msg.sender) {\n            _;\n        }\n    }\n\n    /**\n     * Returns asset implementation contract address assigned to sender.\n     *\n     * @param _sender sender address.\n     *\n     * @return asset implementation contract address.\n     */\n    function getVersionFor(address _sender) constant returns(address) {\n        return userOptOutVersion[_sender] == 0 ? latestVersion : userOptOutVersion[_sender];\n    }\n\n    /**\n     * Returns current asset implementation contract address.\n     *\n     * @return asset implementation contract address.\n     */\n    function getLatestVersion() constant returns(address) {\n        return latestVersion;\n    }\n\n    /**\n     * Returns proposed next asset implementation contract address.\n     *\n     * @return asset implementation contract address.\n     */\n    function getPendingVersion() constant returns(address) {\n        return pendingVersion;\n    }\n\n    /**\n     * Returns upgrade freeze-time start.\n     *\n     * @return freeze-time start.\n     */\n    function getPendingVersionTimestamp() constant returns(uint) {\n        return pendingVersionTimestamp;\n    }\n\n    /**\n     * Propose next asset implementation contract address.\n     *\n     * Can only be called by current asset owner.\n     *\n     * Note: freeze-time should not be applied for the initial setup.\n     *\n     * @param _newVersion asset implementation contract address.\n     *\n     * @return success.\n     */\n    function proposeUpgrade(address _newVersion) onlyAssetOwner() returns(bool) {\n        // Should not already be in the upgrading process.\n        if (pendingVersion != 0x0) {\n            return false;\n        }\n        // New version address should be other than 0x0.\n        if (_newVersion == 0x0) {\n            return false;\n        }\n        // Don't apply freeze-time for the initial setup.\n        if (latestVersion == 0x0) {\n            latestVersion = _newVersion;\n            return true;\n        }\n        pendingVersion = _newVersion;\n        pendingVersionTimestamp = now;\n        UpgradeProposal(_newVersion);\n        return true;\n    }\n\n    /**\n     * Cancel the pending upgrade process.\n     *\n     * Can only be called by current asset owner.\n     *\n     * @return success.\n     */\n    function purgeUpgrade() onlyAssetOwner() returns(bool) {\n        if (pendingVersion == 0x0) {\n            return false;\n        }\n        delete pendingVersion;\n        delete pendingVersionTimestamp;\n        return true;\n    }\n\n    /**\n     * Finalize an upgrade process setting new asset implementation contract address.\n     *\n     * Can only be called after an upgrade freeze-time.\n     *\n     * @return success.\n     */\n    function commitUpgrade() returns(bool) {\n        if (pendingVersion == 0x0) {\n            return false;\n        }\n        if (pendingVersionTimestamp + UPGRADE_FREEZE_TIME > now) {\n            return false;\n        }\n        latestVersion = pendingVersion;\n        delete pendingVersion;\n        delete pendingVersionTimestamp;\n        return true;\n    }\n\n    /**\n     * Disagree with proposed upgrade, and stick with current asset implementation\n     * until further explicit agreement to upgrade.\n     *\n     * @return success.\n     */\n    function optOut() returns(bool) {\n        if (userOptOutVersion[msg.sender] != 0x0) {\n            return false;\n        }\n        userOptOutVersion[msg.sender] = latestVersion;\n        return true;\n    }\n\n    /**\n     * Implicitly agree to upgrade to current and future asset implementation upgrades,\n     * until further explicit disagreement.\n     *\n     * @return success.\n     */\n    function optIn() returns(bool) {\n        delete userOptOutVersion[msg.sender];\n        return true;\n    }\n\n    // Backwards compatibility.\n    function multiAsset() constant returns(EToken2Interface) {\n        return etoken2;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"multiAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commitUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_forwardTransferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitApprove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etoken2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingVersionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purgeUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"optIn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_forwardApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_forwardTransferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etoken2Symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_etoken2\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVersion\",\"type\":\"address\"}],\"name\":\"proposeUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"optOut\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getVersionFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newVersion\",\"type\":\"address\"}],\"name\":\"UpgradeProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b5b6128fd8061001f6000396000f300606060405236156101d55763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663029a8bf781146102a657806306fdde03146102e2578063095ea7b31461036d5780630ba12c83146103b05780630e6d1de9146103d757806314cba0021461041357806318160ddd146104b857806323385089146104dd57806323b872dd1461051457806323de66511461055d57806330599fc514610594578063313ce567146105be578063406838b3146105e75780634bfaf2e8146106235780634dfe950d146106485780635b48684e1461066f5780636461fe391461069657806370a0823114610723578063733480b7146107615780637609c5a91461078e57806377fe38a4146108105780637bcdc2f01461088057806381d434e9146108ca57806384c5c34d1461093157806395d89b41146109fc5780639ab253cc14610a875780639b487f3f14610b37578063a48a663c14610bd8578063a525f42c14610c61578063a66e6e5c14610ca7578063a883fb9014610ccc578063a9059cbb14610d08578063ac35caee14610d4b578063b2b45df514610dd1578063c915fc9314610e93578063d4eec5a614610ed3578063dd62ed3e14610efa578063fe8beb7114610f3e575b5b6101de610f93565b73ffffffffffffffffffffffffffffffffffffffff1663db00b84834600036336040517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff821660248201526040600482019081526044820184905290819060640185858082843782019150509450505050506000604051808303818588803b151561028457600080fd5b6125ee5a03f1151561029557600080fd5b505050506102a36001610fa4565b5b005b34156102b157600080fd5b6102b9610fc5565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b34156102ed57600080fd5b6102f5610fe2565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156103325780820151818401525b602001610319565b50505050905090810190601f16801561035f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037857600080fd5b61039c73ffffffffffffffffffffffffffffffffffffffff60043516602435611080565b604051901515815260200160405180910390f35b34156103bb57600080fd5b61039c611148565b604051901515815260200160405180910390f35b34156103e257600080fd5b6102b96111df565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561041e57600080fd5b61039c73ffffffffffffffffffffffffffffffffffffffff6004803582169160248035909116916044359160849060643590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505050923573ffffffffffffffffffffffffffffffffffffffff1692506111fc915050565b604051901515815260200160405180910390f35b34156104c357600080fd5b6104cb6113a9565b60405190815260200160405180910390f35b34156104e857600080fd5b6102a373ffffffffffffffffffffffffffffffffffffffff60043581169060243516604435611446565b005b341561051f57600080fd5b61039c73ffffffffffffffffffffffffffffffffffffffff600435811690602435166044356114d3565b604051901515815260200160405180910390f35b341561056857600080fd5b6102a373ffffffffffffffffffffffffffffffffffffffff600435811690602435166044356114f9565b005b341561059f57600080fd5b61039c600435611586565b604051901515815260200160405180910390f35b34156105c957600080fd5b6105d1611727565b60405160ff909116815260200160405180910390f35b34156105f257600080fd5b6102b96117c4565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561062e57600080fd5b6104cb6117e0565b60405190815260200160405180910390f35b341561065357600080fd5b61039c6117e7565b604051901515815260200160405180910390f35b341561067a57600080fd5b61039c6118fd565b604051901515815260200160405180910390f35b34156106a157600080fd5b61039c73ffffffffffffffffffffffffffffffffffffffff6004803582169160248035909116916044359160849060643590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061194e95505050505050565b604051901515815260200160405180910390f35b341561072e57600080fd5b6104cb73ffffffffffffffffffffffffffffffffffffffff60043516611a95565b60405190815260200160405180910390f35b341561076c57600080fd5b61039c600435602435611b50565b604051901515815260200160405180910390f35b341561079957600080fd5b61039c6004803573ffffffffffffffffffffffffffffffffffffffff169060446024803590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505093359350611b7492505050565b604051901515815260200160405180910390f35b341561081b57600080fd5b61039c600480359060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650611b9a95505050505050565b604051901515815260200160405180910390f35b341561088b57600080fd5b61039c73ffffffffffffffffffffffffffffffffffffffff6004358116906024359060443516611cd2565b604051901515815260200160405180910390f35b34156108d557600080fd5b61039c60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505093359350611de892505050565b604051901515815260200160405180910390f35b341561093c57600080fd5b61039c6004803573ffffffffffffffffffffffffffffffffffffffff169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650611e0c95505050505050565b604051901515815260200160405180910390f35b3415610a0757600080fd5b6102f5611e2d565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156103325780820151818401525b602001610319565b50505050905090810190601f16801561035f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610a9257600080fd5b61039c60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650611ecb95505050505050565b604051901515815260200160405180910390f35b3415610b4257600080fd5b61039c6004803573ffffffffffffffffffffffffffffffffffffffff169060248035916044359160849060643590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505050923573ffffffffffffffffffffffffffffffffffffffff169250611eea915050565b604051901515815260200160405180910390f35b3415610be357600080fd5b61039c6004803573ffffffffffffffffffffffffffffffffffffffff169060248035916044359160849060643590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061207295505050505050565b604051901515815260200160405180910390f35b3415610c6c57600080fd5b61039c73ffffffffffffffffffffffffffffffffffffffff600435166024356044356121b8565b604051901515815260200160405180910390f35b3415610cb257600080fd5b6104cb6121de565b60405190815260200160405180910390f35b3415610cd757600080fd5b6102b96121e4565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b3415610d1357600080fd5b61039c73ffffffffffffffffffffffffffffffffffffffff60043516602435612201565b604051901515815260200160405180910390f35b3415610d5657600080fd5b61039c6004803573ffffffffffffffffffffffffffffffffffffffff169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061222595505050505050565b604051901515815260200160405180910390f35b3415610ddc57600080fd5b61039c6004803573ffffffffffffffffffffffffffffffffffffffff169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061239c95505050505050565b604051901515815260200160405180910390f35b3415610e9e57600080fd5b61039c73ffffffffffffffffffffffffffffffffffffffff60043516612443565b604051901515815260200160405180910390f35b3415610ede57600080fd5b61039c612647565b604051901515815260200160405180910390f35b3415610f0557600080fd5b6104cb73ffffffffffffffffffffffffffffffffffffffff600435811690602435166126da565b60405190815260200160405180910390f35b3415610f4957600080fd5b6102b973ffffffffffffffffffffffffffffffffffffffff600435166127a4565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6000610f9e336127a4565b90505b90565b593d81016040523d6000823e818015610fbb573d82f35b3d82fd5b50505b50565b60005473ffffffffffffffffffffffffffffffffffffffff165b90565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110785780601f1061104d57610100808354040283529160200191611078565b820191906000526020600020905b81548152906001019060200180831161105b57829003601f168201915b505050505081565b600061108a610f93565b73ffffffffffffffffffffffffffffffffffffffff1663e34f71378484336000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff861602815273ffffffffffffffffffffffffffffffffffffffff938416600482015260248101929092529091166044820152606401602060405180830381600087803b151561112557600080fd5b6102c65a03f1151561113657600080fd5b50505060405180519150505b92915050565b60055460009073ffffffffffffffffffffffffffffffffffffffff16151561117257506000610fa1565b426203f48060065401111561118957506000610fa1565b5060058054600480547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff841617909155169055600060065560015b90565b60045473ffffffffffffffffffffffffffffffffffffffff165b90565b6000813373ffffffffffffffffffffffffffffffffffffffff1661121f826127a4565b73ffffffffffffffffffffffffffffffffffffffff16141561139d576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663161ff66288888860015489896000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff891602815273ffffffffffffffffffffffffffffffffffffffff808816600483019081528782166024840152604483018790526064830186905290831660a483015260c060848301908152909160c40184818151815260200191508051906020019080838360005b838110156113305780820151818401525b602001611317565b50505050905090810190601f16801561135d5780820380516001836020036101000a031916815260200191505b50975050505050505050602060405180830381600087803b151561138057600080fd5b6102c65a03f1151561139157600080fd5b50505060405180519250505b5b5b5095945050505050565b6000805460015473ffffffffffffffffffffffffffffffffffffffff9091169063b524abcf9083604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561142657600080fd5b6102c65a03f1151561143757600080fd5b50505060405180519150505b90565b6000543373ffffffffffffffffffffffffffffffffffffffff90811691161415610fbf578173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405190815260200160405180910390a35b5b5b505050565b60006114ef84848460206040519081016040526000815261194e565b90505b9392505050565b6000543373ffffffffffffffffffffffffffffffffffffffff90811691161415610fbf578173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35b5b5b505050565b6000805460015473ffffffffffffffffffffffffffffffffffffffff9091169063e96b462a90339084604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff851602815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b151561161f57600080fd5b6102c65a03f1151561163057600080fd5b5050506040518051905015611720573073ffffffffffffffffffffffffffffffffffffffff1663ac35caee33846000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff851602815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482015260606044820152600f60648201527f546f6b656e73207265636f766572790000000000000000000000000000000000608482015260a401602060405180830381600087803b151561170357600080fd5b6102c65a03f1151561171457600080fd5b50505060405180519150505b5b5b919050565b6000805460015473ffffffffffffffffffffffffffffffffffffffff9091169063dc86e6f09083604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561142657600080fd5b6102c65a03f1151561143757600080fd5b50505060405180519150505b90565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6006545b90565b6000805460015473ffffffffffffffffffffffffffffffffffffffff9091169063e96b462a90339084604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff851602815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b151561188057600080fd5b6102c65a03f1151561189157600080fd5b5050506040518051905015610fa15760055473ffffffffffffffffffffffffffffffffffffffff1615156118c757506000610fa1565b50600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600060065560015b5b5b90565b73ffffffffffffffffffffffffffffffffffffffff3316600090815260076020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905560015b90565b6000611958610f93565b73ffffffffffffffffffffffffffffffffffffffff1663cca9702586868686336000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff881602815273ffffffffffffffffffffffffffffffffffffffff80871660048301908152868216602484015260448301869052908316608483015260a060648301908152909160a40184818151815260200191508051906020019080838360005b83811015611a215780820151818401525b602001611a08565b50505050905090810190601f168015611a4e5780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1515611a7057600080fd5b6102c65a03f11515611a8157600080fd5b50505060405180519150505b949350505050565b6000805460015473ffffffffffffffffffffffffffffffffffffffff90911690634d30b6be90849084604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff851602815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b151561170357600080fd5b6102c65a03f1151561171457600080fd5b50505060405180519150505b919050565b6000611b6b8383602060405190810160405260008152611b9a565b90505b92915050565b60006114ef848484602060405190810160405260008152611e0c565b90505b9392505050565b6000611ba4610f93565b73ffffffffffffffffffffffffffffffffffffffff1663c10796df858585336000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8716028152600481018581526024820185905273ffffffffffffffffffffffffffffffffffffffff83166064830152608060448301908152909160840184818151815260200191508051906020019080838360005b83811015611c605780820151818401525b602001611c47565b50505050905090810190601f168015611c8d5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1515611cae57600080fd5b6102c65a03f11515611cbf57600080fd5b50505060405180519150505b9392505050565b6000813373ffffffffffffffffffffffffffffffffffffffff16611cf5826127a4565b73ffffffffffffffffffffffffffffffffffffffff161415611dde576000805460015473ffffffffffffffffffffffffffffffffffffffff909116916314712e2f9188918891908890604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff9485166004820152602481019390935260448301919091529091166064820152608401602060405180830381600087803b1515611dc157600080fd5b6102c65a03f11515611dd257600080fd5b50505060405180519250505b5b5b509392505050565b6000611b6b8383602060405190810160405260008152611ecb565b90505b92915050565b6000611e2285611e1b86612822565b8585612072565b90505b949350505050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110785780601f1061104d57610100808354040283529160200191611078565b820191906000526020600020905b81548152906001019060200180831161105b57829003601f168201915b505050505081565b60006114ef611ed985612822565b8484611b9a565b90505b9392505050565b6000813373ffffffffffffffffffffffffffffffffffffffff16611f0d826127a4565b73ffffffffffffffffffffffffffffffffffffffff16141561139d576000805473ffffffffffffffffffffffffffffffffffffffff169063a69032ee9089908990899089908990604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff881602815273ffffffffffffffffffffffffffffffffffffffff808716600483019081526024830187905260448301869052908316608483015260a060648301908152909160a40184818151815260200191508051906020019080838360005b83811015611ffa5780820151818401525b602001611fe1565b50505050905090810190601f1680156120275780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b151561138057600080fd5b6102c65a03f1151561139157600080fd5b50505060405180519250505b5b5b5095945050505050565b600061207c610f93565b73ffffffffffffffffffffffffffffffffffffffff1663eb58705b86868686336000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff881602815273ffffffffffffffffffffffffffffffffffffffff808716600483019081526024830187905260448301869052908316608483015260a060648301908152909160a40184818151815260200191508051906020019080838360005b83811015611a215780820151818401525b602001611a08565b50505050905090810190601f168015611a4e5780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1515611a7057600080fd5b6102c65a03f11515611a8157600080fd5b50505060405180519150505b949350505050565b60006114ef848484602060405190810160405260008152612072565b90505b9392505050565b60015481565b60055473ffffffffffffffffffffffffffffffffffffffff165b90565b6000611b6b8383602060405190810160405260008152612225565b90505b92915050565b600061222f610f93565b73ffffffffffffffffffffffffffffffffffffffff16631962df71858585336000604051602001526040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611c605780820151818401525b602001611c47565b50505050905090810190601f168015611c8d5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1515611cae57600080fd5b6102c65a03f11515611cbf57600080fd5b50505060405180519150505b9392505050565b6000805473ffffffffffffffffffffffffffffffffffffffff16156123c3575060006114f2565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861617905561240c83612822565b6001556002828051612422929160200190612831565b506003838051612436929160200190612831565b50600190505b9392505050565b6000805460015473ffffffffffffffffffffffffffffffffffffffff9091169063e96b462a90339084604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff851602815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b15156124dc57600080fd5b6102c65a03f115156124ed57600080fd5b50505060405180519050156117205760055473ffffffffffffffffffffffffffffffffffffffff161561252257506000611720565b73ffffffffffffffffffffffffffffffffffffffff8216151561254757506000611720565b60045473ffffffffffffffffffffffffffffffffffffffff1615156125ae5750600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556001611720565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055426006557faf574319215a31df9b528258f1bdeef2b12b169dc85ff443a49373248c77493a8260405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a15060015b5b5b919050565b73ffffffffffffffffffffffffffffffffffffffff3381166000908152600760205260408120549091161561267e57506000610fa1565b506004543373ffffffffffffffffffffffffffffffffffffffff908116600090815260076020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169190921617905560015b90565b6000805460015473ffffffffffffffffffffffffffffffffffffffff90911690631c8d5d38908590859085604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff861602815273ffffffffffffffffffffffffffffffffffffffff93841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561112557600080fd5b6102c65a03f1151561113657600080fd5b50505060405180519150505b92915050565b73ffffffffffffffffffffffffffffffffffffffff808216600090815260076020526040812054909116156128005773ffffffffffffffffffffffffffffffffffffffff8083166000908152600760205260409020541661281a565b60045473ffffffffffffffffffffffffffffffffffffffff165b90505b919050565b6000602082015190505b919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061287257805160ff191683800117855561289f565b8280016001018555821561289f579182015b8281111561289f578251825591602001919060010190612884565b5b506128ac9291506128b0565b5090565b610fa191905b808211156128ac57600081556001016128b6565b5090565b905600a165627a7a72305820b63519aefab850441fb9213a9c60c38a9226690754cd394c422c3ed96d0e3dff0029"
}