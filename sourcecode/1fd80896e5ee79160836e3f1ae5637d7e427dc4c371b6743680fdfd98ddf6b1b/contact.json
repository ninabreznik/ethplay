{
  "address": "0x62b90afC93d52e9e5A1eb0B660D41DC07B8157E9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SuperLaunch",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-07\n*/\n\npragma solidity ^0.5.0;\n\ninterface PriceWatcherI\n{\n    function getUSDcentsPerETH() external view returns (uint256 _USDcentsPerETH);\n}\n\n\ncontract PriceWatcherPlaceholder is PriceWatcherI\n{\n    function getUSDcentsPerETH() external view returns (uint256 _USDcentsPerETH)\n    {\n        return 12345; // $123.45 per ETH\n    }\n}\n\ncontract SuperLaunch\n{\n    // Constants\n    uint256 public TOKEN_PRICE_USD_CENTS;\n    uint256 public totalSupply;\n    uint256 public AMOUNT_OF_FREE_TOKENS;\n    address payable public root;\n    address payable public bank;\n    uint256 public REFERRER_COMMISSION_PERCENTAGE;\n    uint256 public ROOT_COMMISSION_PERCENTAGE;\n    PriceWatcherI public priceWatcher;\n\n    // State variables\n    mapping(address => uint256) private balances;\n    address[] public participants;\n    mapping(address => address payable) public address_to_referrer;\n    mapping(address => address[]) public address_to_referrals;\n\n    constructor(address _priceWatcherContract, uint256 _tokenPriceUSDcents, uint256 _totalSupply, uint256 _amountOfFreeTokens, address payable _root, address payable _bank, uint256 _referrerCommissionPercentage, uint256 _rootCommissionPercentage) public\n    {\n        if (_priceWatcherContract == address(0x0))\n        {\n            priceWatcher = new PriceWatcherPlaceholder();\n        }\n        else\n        {\n            priceWatcher = PriceWatcherI(_priceWatcherContract);\n        }\n\n        TOKEN_PRICE_USD_CENTS = _tokenPriceUSDcents;\n        totalSupply = _totalSupply;\n        AMOUNT_OF_FREE_TOKENS = _amountOfFreeTokens;\n        root = _root;\n        bank = _bank;\n        REFERRER_COMMISSION_PERCENTAGE = _referrerCommissionPercentage;\n        ROOT_COMMISSION_PERCENTAGE = _rootCommissionPercentage;\n\n        // The root address is its own referrer\n        address_to_referrer[root] = root;\n\n        // Mint all the tokens and assign them to the root address\n        balances[root] = totalSupply;\n        emit Transfer(address(0x0), root, totalSupply);\n    }\n\n    function getTokenPriceETH() public view returns (uint256)\n    {\n        // Fetch the current ETH exchange rate\n        uint256 USDcentsPerETH = priceWatcher.getUSDcentsPerETH();\n\n        // Use the exchange rate to calculate the current token price in ETH\n        return (1 ether) * TOKEN_PRICE_USD_CENTS / USDcentsPerETH;\n    }\n\n    function buyTokens(address payable _referrer) external payable\n    {\n        uint256 tokensBought;\n        uint256 totalValueOfTokensBought;\n\n        uint256 tokenPriceWei = getTokenPriceETH();\n\n        // If there are still free tokens available\n        if (participants.length < AMOUNT_OF_FREE_TOKENS)\n        {\n            tokensBought = 1;\n            totalValueOfTokensBought = 0;\n\n            // Only 1 free token per address\n            require(address_to_referrer[msg.sender] == address(0x0));\n        }\n\n        // If there are no free tokens available\n        else\n        {\n            tokensBought = msg.value / tokenPriceWei;\n\n            // Limit the bought tokens to the amount of tokens still for sale\n            if (tokensBought > balances[root])\n            {\n                tokensBought = balances[root];\n            }\n\n            totalValueOfTokensBought = tokensBought * tokenPriceWei;\n        }\n\n        // If 0 tokens are being purchased, cancel this transaction\n        require(tokensBought > 0);\n\n        // Return the change\n        msg.sender.transfer(msg.value - totalValueOfTokensBought);\n\n        // If we haven't seen this buyer before\n        if (address_to_referrer[msg.sender] == address(0x0))\n        {\n            // Referrer must have owned at least 1 token\n            require(address_to_referrer[_referrer] != address(0x0));\n\n            // Add them to the particpants list and the referral tree\n            address_to_referrer[msg.sender] = _referrer;\n            address_to_referrals[_referrer].push(msg.sender);\n            participants.push(msg.sender);\n        }\n\n        // If we have seen this buyer before\n        else\n        {\n            // Referrer must be the same as their previous referrer\n            require(_referrer == address_to_referrer[msg.sender]);\n        }\n\n        // Transfer the bought tokens from root to the buyer\n        balances[root] -= tokensBought;\n        balances[msg.sender] += tokensBought;\n        emit Transfer(root, msg.sender, tokensBought);\n\n        // Transfer commission to the referrer\n        uint256 commissionForReferrer = totalValueOfTokensBought * REFERRER_COMMISSION_PERCENTAGE / 100;\n        _referrer.transfer(commissionForReferrer);\n\n        // Transfer commission to the root\n        uint256 commissionForRoot = totalValueOfTokensBought * ROOT_COMMISSION_PERCENTAGE / 100;\n        root.transfer(commissionForRoot);\n\n        // Transfer the remaining ETH to the bank\n        bank.transfer(totalValueOfTokensBought - commissionForReferrer - commissionForRoot);\n    }\n\n    function amountOfReferralsMade(address _byReferrer) external view returns (uint256)\n    {\n        return address_to_referrals[_byReferrer].length;\n    }\n\n    function amountOfTokensForSale() external view returns (uint256)\n    {\n        return balances[root];\n    }\n\n    function amountOfFreeTokensAvailable() external view returns (uint256)\n    {\n        if (participants.length < AMOUNT_OF_FREE_TOKENS)\n        {\n            return AMOUNT_OF_FREE_TOKENS - participants.length;\n        }\n        else\n        {\n            return 0;\n        }\n    }\n\n    // ERC20 implementation\n    string public constant name = \"SuperLaunch\";\n    string public constant symbol = \"SLX\";\n    uint8 public constant decimals = 0;\n\n    mapping (address => mapping (address => uint256)) private allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n\n    function balanceOf(address _who) external view returns (uint256)\n    {\n        return balances[_who];\n    }\n    function allowance(address _owner, address _spender) external view returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    function transfer(address _to, uint256 _amount) external returns (bool)\n    {\n        require(balances[msg.sender] >= _amount);\n        balances[msg.sender] -= _amount;\n        balances[_to] += _amount;\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool)\n    {\n        require(allowed[_from][msg.sender] >= _amount);\n        require(balances[_from] >= _amount);\n        allowed[_from][msg.sender] -= _amount;\n        balances[_from] -= _amount;\n        balances[_to] += _amount;\n        emit Transfer(_from, _to, _amount);\n        emit Approval(_from, msg.sender, allowed[_from][msg.sender]);\n        return true;\n    }\n    function approve(address _spender, uint256 _amount) external returns (bool)\n    {\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    function increaseAllowance(address _spender, uint256 _addedAmount) public returns (bool)\n    {\n        require(allowed[msg.sender][_spender] + _addedAmount >= _addedAmount);\n        allowed[msg.sender][_spender] += _addedAmount;\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    function decreaseAllowance(address _spender, uint256 _subtractedAmount) public returns (bool)\n    {\n        require(allowed[msg.sender][_spender] >= _subtractedAmount);\n        allowed[msg.sender][_spender] -= _subtractedAmount;\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405161010080620025d283398101806040526101008110156200003557600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614156200013057620000cc620003d9565b604051809103906000f080158015620000e9573d6000803e3d6000fd5b50600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000172565b87600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b86600081905550856001819055508460028190555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160058190555080600681905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060015460086000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6001546040518082815260200191505060405180910390a35050505050505050620003e9565b60405160ba806200251883390190565b61211f80620003f96000396000f3fe60806040526004361061014e576000357c01000000000000000000000000000000000000000000000000000000009004806306fdde0314610153578063095ea7b3146101e35780630d2aa2451461025657806318160ddd146102ad5780631f362867146102d857806323b872dd14610369578063313ce567146103fc57806335c1d3491461042d57806338651c59146104a857806339509351146105435780633c3d7243146105b657806359bc74a4146105e157806370a082311461060c5780637281d2a91461067157806376cdb03b1461069c57806387129f52146106f357806389ba195e1461071e57806395d89b41146107495780639d47feb6146107d9578063a457c2d71461083e578063a7c67e35146108b1578063a9059cbb146108dc578063d7b6bd011461094f578063dd62ed3e1461097a578063ebf0c717146109ff578063ec8ac4d814610a56575b600080fd5b34801561015f57600080fd5b50610168610a9a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a857808201518184015260208101905061018d565b50505050905090810190601f1680156101d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ef57600080fd5b5061023c6004803603604081101561020657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ad3565b604051808215151515815260200191505060405180910390f35b34801561026257600080fd5b5061026b610c41565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102b957600080fd5b506102c2610c67565b6040518082815260200191505060405180910390f35b3480156102e457600080fd5b50610327600480360360208110156102fb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c6d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037557600080fd5b506103e26004803603606081101561038c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ca0565b604051808215151515815260200191505060405180910390f35b34801561040857600080fd5b50610411610ff0565b604051808260ff1660ff16815260200191505060405180910390f35b34801561043957600080fd5b506104666004803603602081101561045057600080fd5b8101908080359060200190929190505050610ff5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104b457600080fd5b50610501600480360360408110156104cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611033565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561054f57600080fd5b5061059c6004803603604081101561056657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611080565b604051808215151515815260200191505060405180910390f35b3480156105c257600080fd5b506105cb611284565b6040518082815260200191505060405180910390f35b3480156105ed57600080fd5b506105f661128a565b6040518082815260200191505060405180910390f35b34801561061857600080fd5b5061065b6004803603602081101561062f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112f3565b6040518082815260200191505060405180910390f35b34801561067d57600080fd5b5061068661133c565b6040518082815260200191505060405180910390f35b3480156106a857600080fd5b506106b1611342565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106ff57600080fd5b50610708611368565b6040518082815260200191505060405180910390f35b34801561072a57600080fd5b5061073361144a565b6040518082815260200191505060405180910390f35b34801561075557600080fd5b5061075e611450565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561079e578082015181840152602081019050610783565b50505050905090810190601f1680156107cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107e557600080fd5b50610828600480360360208110156107fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611489565b6040518082815260200191505060405180910390f35b34801561084a57600080fd5b506108976004803603604081101561086157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114d5565b604051808215151515815260200191505060405180910390f35b3480156108bd57600080fd5b506108c66116d7565b6040518082815260200191505060405180910390f35b3480156108e857600080fd5b50610935600480360360408110156108ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116dd565b604051808215151515815260200191505060405180910390f35b34801561095b57600080fd5b50610964611836565b6040518082815260200191505060405180910390f35b34801561098657600080fd5b506109e96004803603604081101561099d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611860565b6040518082815260200191505060405180910390f35b348015610a0b57600080fd5b50610a146118e7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610a9860048036036020811015610a6c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061190d565b005b6040805190810160405280600b81526020017f53757065724c61756e636800000000000000000000000000000000000000000081525081565b600081600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610d2d57600080fd5b81600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610d7b57600080fd5b81600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a33373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b600081565b60098181548110151561100457fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b6020528160005260406000208181548110151561104e57fe5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008182600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015151561110f57600080fd5b81600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60055481565b600060086000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4d05df66040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156113ef57600080fd5b505afa158015611403573d6000803e3d6000fd5b505050506040513d602081101561141957600080fd5b8101908080519060200190929190505050905080600054670de0b6b3a76400000281151561144357fe5b0491505090565b60005481565b6040805190810160405280600381526020017f534c58000000000000000000000000000000000000000000000000000000000081525081565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600081600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561156257600080fd5b81600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60065481565b600081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561172d57600080fd5b81600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600060025460098054905010156118585760098054905060025403905061185d565b600090505b90565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600061191a611368565b905060025460098054905010156119d2576001925060009150600073ffffffffffffffffffffffffffffffffffffffff16600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156119cd57600080fd5b611ab4565b80348115156119dd57fe5b04925060086000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115611aae5760086000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492505b80830291505b600083111515611ac357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc8334039081150290604051600060405180830381858888f19350505050158015611b0b573d6000803e3d6000fd5b50600073ffffffffffffffffffffffffffffffffffffffff16600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611dc757600073ffffffffffffffffffffffffffffffffffffffff16600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611c3b57600080fd5b83600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000203390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060093390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611e61565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515611e6057600080fd5b5b8260086000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600060646005548402811515611fb657fe5b0490508473ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611fff573d6000803e3d6000fd5b5060006064600654850281151561201257fe5b049050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561207d573d6000803e3d6000fd5b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc82848703039081150290604051600060405180830381858888f193505050501580156120ea573d6000803e3d6000fd5b5050505050505056fea165627a7a7230582008ebd745a097bab26b071c8209942f4e3eb7ad648ec32b37255c80ade0ca821000296080604052348015600f57600080fd5b50609c8061001e6000396000f3fe6080604052600436106039576000357c010000000000000000000000000000000000000000000000000000000090048063e4d05df614603e575b600080fd5b348015604957600080fd5b5060506066565b6040518082815260200191505060405180910390f35b600061303990509056fea165627a7a7230582050215328b96d7a740228851f7b173077ceecd441e994dca4d16d7584b7f4dabe0029000000000000000000000000fd2211fca84d335c9a79acc63b0c1cb5a6df9f78000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cbb4d0ffe7254dcff4ec7d46ee5782e900a6fa780000000000000000000000003d320078c83a65841b7046eff6ca049092e795e8000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a",
  "constructorArguments": "000000000000000000000000fd2211fca84d335c9a79acc63b0c1cb5a6df9f78000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cbb4d0ffe7254dcff4ec7d46ee5782e900a6fa780000000000000000000000003d320078c83a65841b7046eff6ca049092e795e8000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a"
}